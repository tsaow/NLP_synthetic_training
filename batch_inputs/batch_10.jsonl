{"prompt": "make some code that functions the same as the following code: def maxPairSum(input_list):\n\n    #assume the first and second elements are the max pair\n    max_pair_sum = input_list[0] + input_list[1]\n\n    # Keep track of the max pair\n    pair_index_one = 0\n    pair_index_two = 1\n\n    # iterate through the entire list\n    for index_one in range(0, len(input_list)):\n        for index_two in range(index_one + 1, len(input_list)):\n\n            # if the current pair sum is greater than the max pair sum\n            # update the max pair sum and the pair indices\n            if input_list[index_one] + input_list[index_two] > max_pair_sum:\n                max_pair_sum = input_list[index_one] + input_list[index_two]\n                pair_index_one = index_one\n                pair_index_two = index_two\n\n    #return the max pair sum\n    return max_pair_sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import scrapy\n\nclass ExampleSpider(scrapy.Spider):\n name = 'example'\n start_urls = ['https://www.example.com']\n\n def parse(self, response):\n    for item in response.css('div.listing-item') :\n        yield { \n            'title' : item.css('h3.listing-title::text').get(),\n            'price' : item.css('span.price::text').get(),\n            'description' : item.css('p.description::text').get()\n        } but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list1 = [2, 4, 6, 8]\nlist2 = [4, 8, 10]\n\ncommon_elements = list(set(list1).intersection(list2))\n\nprint(common_elements)\n# Output: [4, 8] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def celsius_to_fahrenheit(degrees_c):\n    return (degrees_c * 9/5) + 32 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from django.shortcuts import render\nfrom django.http import JsonResponse\nfrom django.core.paginator import Paginator\n\n# Create your views here.\ndef get_user_records(request):\n    page_num = request.GET.get('page', 1)\n    page_size = int(request.GET.get('page_size', 10))\n\n    users = User.objects.all().order_by('user_id')\n    paginator = Paginator(users, page_size)\n    page_data = paginator.page(page_num)\n    response_data = {\n        'data': [\n            {\n                'user_id': user.user_id,\n                'first_name': user.first_name,\n                'last_name': user.last_name,\n                'age': user.age,\n                'email': user.email\n            } for user in page_data\n        ]\n    }\n    return JsonResponse(response_data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci_sum(n): \n    if n <= 1: \n        return n \n    previous = 0\n    current  = 1\n    sum      = 1\n    \n    for _ in range(n - 1): \n        previous, current = current, previous + current \n        sum += current \n      \n    return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findIndex(arr, num):\n    for index in range(len(arr)):\n        if arr[index] == num:\n            return index\n    return -1\n\narr = [1,3,7,9,0,4]\nnum = 7\nindex = findIndex(arr, num)\nprint('Index of %d is %d' % (num, index)) # Index of 7 is 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\nstring = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\nwords = string.split()\n\ncnt = Counter()\nfor word in words:\n  cnt[word] += 1\n\nword, count = cnt.most_common(1)[0]\n\nprint(f'Word with highest frequency is \"{word}\" occurring {count} times.')\n\n# Output\nWord with highest frequency is \"dolor\" occurring 1 times. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort(arr): \n    n = len(arr) \n  \n    for i in range(n): \n  \n        min_index = i # assuming current element is smallest \n          \n        # look for smallest element in the rest of the array \n        for j in range(i+1, n): \n            if arr[j] < arr[min_index]: \n                min_index = j \n  \n        arr[i], arr[min_index] = arr[min_index], arr[i] # swap \n  \n    return arr\n  \narr = [5, 4, 3, 1, 2] \nsorted_arr = sort(arr) \n  \nprint(sorted_arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time \n\nstart = time.time()\n\ndef foo(): \n for i in range(1000): \n  print('Hello World', i)\n\nfoo()\n\nend = time.time()\n\nprint('Time Taken:', end - start) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\ndef get_discography(artist):\n  base_url = \"https://en.wikipedia.org/wiki/\"  # Wikipedia base URL\n  artist_name = artist.replace(\" \", \"_\")  # Format URL parameter\n  url = base_url + artist_name\n  response = requests.get(url)\n  if response.status_code == 200:\n    html = response.content\n    soup = BeautifulSoup(html, \"html.parser\")\n    discography = soup.find(\"span\",{\"id\":\"Discography\"}).find_next_sibling().text.strip().replace(\"\\n\", \",\").replace(\")\",\"\").replace(\"(\",\"\")\n    return discography.split(\",\")\n  else:\n    print(\"Error in response.\")\n    return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef magnitude_to_vector(magnitude, angle):\n    x = magnitude * math.cos(math.radians(angle))\n    y = magnitude * math.sin(math.radians(angle))\n    z = 0\n    \n    return (x, y, z)\n\nresult = magnitude_to_vector(5, 90)\n\nprint(f\"The vector is {result}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python3 code to generate an \n# array containing first n primes \nimport math \n\ndef generatePrimeArray(n): \n\tprime = [True for i in range(n + 1)] \n\tp = 2\n\twhile (p * p <= n): \n\t\tif (prime[p] == True): \n\t\t\tfor i in range(p * 2, n + 1, p): \n\t\t\t\tprime[i] = False\n\t\tp += 1\n\n\t# prime[0]= False\n\t# prime[1]= False\n\n\t# Store prime numbers \n\tprime_numbers = [] \n\tfor p in range(n + 1): \n\t\tif prime[p]: \n\t\t\tprime_numbers.append(p) \n\n\t# Print the array \n\treturn prime_numbers \n\nresult = generatePrimeArray(n)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def weightedAverage(values, weights):\n    sum = 0.0\n    for i in range(len(values)):\n        sum += values[i] * weights[i]\n    return sum/len(values)\n\nvalues = [90, 50, 70]\nweights = [0.4, 0.2, 0.4]\n\nprint(weightedAverage(values, weights)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def solve_linear_system(A, b):\n    \n    # Find the solution of the linear system\n    x = np.linalg.solve(A, b)\n    \n    # Print the solution\n    print('Solution: x = ' + str(x[0]) + ', y = ' + str(x[1]))\n    \n\nA = [[2, 3], [5, -1]]\nb = [8, -10]\nsolve_linear_system(A, b) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: pre = \"PRE-\"\nsuf = \"-SUF\"\n\nenriched_list = [ pre + s + suf for s in list]\n\nprint(enriched_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def square_root(x):\n    guess = x/2\n    while True:\n        next_guess = 0.5 * (guess + (x/guess))\n        if abs(guess - next_guess) < 0.0001:\n            break\n            guess = next_guess\n    return guess\n\nprint(square_root(36)) # prints 6.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nWrite a Python program to extract phone numbers from a given text.\n\"\"\"\n\nimport re\n\ndef extract_phone_numbers(text):\n    phone_numbers = []\n    pattern = r'(\\d{3}[-\\.\\s]??\\d{3}[-\\.\\s]??\\d{4}|\\(\\d{3}\\)\\s*\\d{3}[-\\.\\s]??\\d{4}|\\d{3}[-\\.\\s]??\\d{4})'\n    regex = re.compile(pattern)\n    matches = regex.finditer(text)\n    for m in matches:\n        phone_numbers.append(m.group())\n    return phone_numbers\n\ntext = \"This is a sample text. Mr. Smith's cell phone number is (123) 456-7890 and Mrs. Smith's phone number is (321) 234-5678.\"\nprint(extract_phone_numbers(text)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import xml.etree.ElementTree as ET\n\ndef parse_xml(xml_file):\n    root = ET.parse(xml_file).getroot()\n    for child in root:\n        print(child.tag, child.attrib) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_string(lst, s):\n for i, item in enumerate(lst):\n if item == s:\n return i\n return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def matrixMultiplication(A,B): \n \n    return [[sum(a*b for a,b in zip(A_row,B_col))  \n                 for B_col in zip(*B)] for A_row in A] \n\nA = [[1, 2, 3], \n     [4, 5, 6], \n     [7, 8, 9]] \n\nB = [[7, 8, 9], \n     [4, 5, 6], \n     [1, 2, 3]]\n\nC = matrixMultiplication(A,B) \n\nfor i in range(len(C)): \n    print(C[i]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, jsonify\n\n# Initialize the Flask application\napp = Flask(__name__)\n\n@app.route('/', methods=['GET','POST'])\ndef dialog():\n # Get the user's input from the request\n user_input = request.json['user_input']\n\n # Define a response based on the user's input\n if user_input == 'Hi':\n response = 'Hello there!'\n # Add additional actions here\n\n # Return the response as JSON\n return jsonify({'response':response})\n\nif __name__ == '__main__':\n app.run(port=5000, debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compareStrings(string1, string2):\n    result = 0\n\n    if len(string1) != len (string2):\n        result += 1\n    else:\n        for i in range(len(string1)):\n            if string1[i] != string2[i]:\n                result += 1\n    return result\n\n\nif __name__ == '__main__':\n    string1 = 'python'\n    string2 = 'perl'\n    print(compareStrings(string1, string2))\n    \nOutput: 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_arrays(arr1, arr2):\n    len1, len2 = len(arr1), len(arr2)\n    \n    # initialize empty result list and pointers to traverse the both array\n    arr_merged, i, j = [], 0, 0\n    \n    # traverse both array and compare the element\n    # append the lesser one to result\n    while i < len1 and j < len2:\n        if arr1[i] < arr2[j]:\n            arr_merged.append(arr1[i])\n            i += 1\n        else:\n            arr_merged.append(arr2[j])\n            j += 1\n    \n    # append remaining elements(if any) of faster completed array to result\n    while i < len1:\n        arr_merged.append(arr1[i])\n        i += 1\n    while j < len2:\n        arr_merged.append(arr2[j])\n        j += 1\n    return arr_merged but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\n\n# Create spreadsheet\ndf = pd.DataFrame()\n\n# Add column of x-values\nx_values = np.arange(start=0,stop=2*np.pi,step=0.1)\ndf['x'] = x_values\n\n# Add column of y-values\ny_values = np.sin(x_values)\ndf['y'] = y_values\n\n# Save spreadsheet\ndf.to_csv('sine-wave.csv', index=False) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: l = [2, 3, 4]\nfor n in l:\n    print(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def permutation(arr):\n    if not arr:\n        return []\n    elif len(arr) == 1:\n        return [arr]\n    else:\n        l = []\n        for i in range(len(arr)):\n            data = arr[i]\n            remainders = arr[:i] + arr[i+1:]\n            for p in permutation(remainders):\n                l.append([data] + p)\n        return l but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify(data):\n    # Fit your model on the data\n    model.fit(data)\n    # Return the predicted classes\n    return model.predict(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n  \ndef sentiment_calculator(text):\n    sid = SentimentIntensityAnalyzer()\n    sentiment_scores = sid.polarity_scores(text)\n    if sentiment_scores['compound'] >= 0.5:\n        sentiment = 'positive'\n    elif -0.5 < sentiment_scores['compound'] < 0.5:\n        sentiment = 'neutral'\n    else:\n        sentiment = 'negative'\n    return sentiment\n  \nsentence = 'This is an amazing experience!'\nsentiment_calculator(sentence)\n# Output: 'positive' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def larger_num(a, b):\n    if a > b:\n        return a\n    else:\n        return b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_min(a, b, c): \n    min_val = a \n    if b < min_val: \n        min_val = b \n    if c < min_val: \n        min_val = c \n    return min_val \n\nprint(find_min(3, 2, 1)) # Output: 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generateHammingCode(bitString):\n    # Get length of the input bit string\n    n = len(bitString) \n  \n    # Calculate the number of parity bits\n    m = 0\n    while 2**m < n + m + 1: \n        m+= 1\n  \n    # Initialize 2 empty lists to store parity and encoded bits\n    parityBits = [] \n    encodedList = [] \n  \n    # Calculate parity bits\n    for i in range(m): \n        k = 2**i \n        parityBits.append(calculateParityBit(bitString, k)) \n  \n    # Generate hamming code\n    j = 0\n    for i in range (1, n + m + 1): \n        if i == 2**j: \n            encodedList.append(parityBits[j])\n            j += 1\n        else :\n            encodedList.append(int(bitString[i - j - 1]))\n          \n    return encodedList\n  \ndef calculateParityBit(bitString, k): \n    counter = 0\n    for i in range(len(bitString)): \n        if i & k == k :\n            counter += int(bitString[i]) \n    if counter % 2 == 0: \n        return '0'\n    else: \n        return '1' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_squares(numbers):\n    total = 0\n    for num in range(1,numbers+1):\n        total += num**2\n    print(total)\n\nsum_of_squares(10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_occurrences(sentence):\n    # Empty list to store indices of occurrence\n    indices = []\n\n    # get length of sentence\n    l = len(sentence)\n \n    # iterate to go through the sentence\n    for i in range(l):\n        # if at any point a substring from i to i+3 is equal to \"cat\"\n        if sentence[i:i+3] == \"cat\":\n            # add i to list of indices\n            indices.append(i)\n \n    # return the list of indices\n    return indices\n\noccurrences = find_occurrences(\"The cat sat on the mat.\")\nprint(\"Indices of occurrences:\", occurrences) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convertMinutesToYears(minutes):\n    years = minutes / 525600\n    days = minutes % 525600 / 1440 \n    \n    print(\"The given\" + str(minutes) + \" minutes is equal to \" + \n    str(round(years)) + \" year(s) and \" + str(round(days)) + \" day(s)\")\n\nconvertMinutesToYears(76586) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_special_characters(s):\n    new_s = s.replace('#', '').replace('$', '').replace('^', '').replace('%', '').replace('*', '').replace('_', '') \n    return new_s\n\nremove_special_characters(\"This# 1$ i^s an% e*xa_mple -str_ing\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n  if n <= 2:\n    return 1\n  else:\n    return fibonacci(n-1) + fibonacci(n-2)\n  \nprint(fibonacci(5)) # 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_list(list_1, list_2): \n    formatted_list = [list_1 + list_2 for i in range(len(list_1))] \n    for x in formatted_list: \n        for y in x: \n            print(y) \n    \nlist_1 = [1, 2, 3] \nlist_2 = [4, 5, 6]\nprint_list(list_1, list_2)\n\n# Output:\n# 1\n# 2\n# 3\n# 4\n# 5\n# 6 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_password():\n    alphabet = \"abcdefghijklmnopqrstuvwxyz01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    pw_length = 6\n    mypw = \"\"\n\n    for i in range(pw_length):\n        next_index = random.randrange(len(alphabet))\n        mypw = mypw + alphabet[next_index]\n\n    return mypw\n\nprint(generate_password()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: if 0 <= 3 <= 10:\n print('Number is within the range')\nelse:\n print('Number is not within the range') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_even(list):\n    return [i for i in list if i%2 != 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def three_way_comparison(num1, num2, num3):\n    if num1 > num2 and num1 > num3:\n        return 1\n    elif num2 > num1 and num2 > num3:\n        return 2\n    elif num3 > num1 and num3 > num2:\n        return 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(10):\n  print(\"Hello World\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_two_ints(a, b):\n return a + b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: hash_table = {1: 1, 2: 2, 3: 3, 4: 4} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print('Hello World!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnum = 5\nprint(\"The factorial of\", num, \"is\", factorial(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re \n\nstr = \"There are 3 sets of consecutive numbers in this sentence: 12, 22 and 33.\"\n\nnum_list = re.findall(r'\\d+', str)\nprint(num_list)\n# Output: ['3', '12', '22', '33'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n def __init__(self, name, grades):\n  self.name = name\n  self.grades = grades\n\n def calculate_grade(self):\n  total = 0\n  for grade in self.grades:\n   total += grade\n\n  return total / len(self.grades)\n\nstudent1 = Student(\"John\", [80,90,85,95])\nprint(student1.calculate_grade())\n# Output: 88.75 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_intersection(set1, set2):\n intersect_set = []\n for num in set1:\n if num in set2:\n intersect_set.append(num)\n return intersect_set\n\nset1 = [1, 2, 3, 4, 5]\nset2 = [3, 4, 5, 6, 7]\n\nintersect_set = find_intersection(set1, set2)\nprint(intersect_set) # Output -> [3, 4, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for num in range(11):\n    print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def largest_consecutive_sum(nums):\n    max_sum = 0\n    total_sum = 0\n    for num in nums:\n        total_sum += num\n        if total_sum > max_sum:\n            max_sum = total_sum\n    return max_sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def prime_numbers(lower_limit, upper_limit): \n    prime_numbers = [] \n    while lower_limit <= upper_limit:\n        if all(lower_limit % i != 0 for i in range(2, lower_limit)):\n            prime_numbers.append(lower_limit)\n        lower_limit += 1\n    return prime_numbers\n\nprint(prime_numbers(2, 10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef sentiment_analysis(text): \n  sid = SentimentIntensityAnalyzer()\n  sentiment = sid.polarity_scores(text)\n  if sentiment[\"compound\"] >= 0.5:\n    return \"positive\"\n  elif sentiment[\"compound\"] <= -0.5:\n    return \"negative\"\n  else:\n    return \"neutral\"\n\nsentiment = sentiment_analysis(\"This product is excellent\")\nprint(sentiment) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Base class\nclass Base:\n    pass\n\n# Derived class\nclass Derived(Base):\n    pass\n\n# Single inheritance\nclass SingleInheritance(Base):\n    pass\n\n# Multiple inheritance\nclass MultipleInheritance(Base, Derived):\n    pass but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_words(dict):\n    longest_words = []\n    max_length = 0\n    for word, length in dict.items():\n        if length > max_length:\n            longest_words = [word]\n            max_length = length\n        elif length == max_length:\n            longest_words.append(word)\n    return longest_words but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def jobScheduling(jobs):\n    n = len(jobs) \n    \n    jobs = sorted(jobs, key = lambda x: x[1]) \n   \n    table = [0 for i in range(n)] \n    table[0] = jobs[0][2] \n  \n    for i in range(1, n): \n  \n        inclProf = jobs[i][2] \n        l = binarySearch(jobs, i) \n        if (l != -1):\n            inclProf += table[l] \n  \n        table[i] = max(inclProf, table[i-1]) \n  \n    return table[n-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python 3 program to count the number of occurrences \n# of an element in the given list\n\n# function to count the number of occurrences \ndef countOccurrences(nums, query):\n    count = 0\n    for num in nums:\n        if query == num:\n            count = count + 1\n    return count\n\n# Driver code \nnums = [1, 2, 3, 2, 3, 2, 4]\n\n# Function Call\nquery = 2\nprint(\"{0} occurs {1} times\".format(query, countOccurrences(nums, query))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom scipy.optimize import minimize\n\ndef equation(x):\n    return x**5 + 5*x**4 - 10*x**3 - 40*x**2 + 81*x \n\nresults = minimize(equation, [0])\nminx = results.x\nminy = results.fun\n\nprint('The minimum value of f(x) is {:.2f} when x={:.2f}.'.format(miny, minx)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = \u201cHello World\u201d\n\ndef replaceVowels(string):\n    vowels = (\"a\", \"e\", \"i\", \"o\", \"u\")\n    result = \"\"\n    for char in string:\n        if char in vowels:\n            result += \"*\"\n        else:\n            result += char\n    return result\n\nnew_string = replaceVowels(string)\nprint(new_string) # This will print out \"H*ll* W*rld\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_std_deviation(numbers):\n mean = sum(numbers) / len(numbers)\n \n variance = 0\n for num in numbers:\n variance += (num - mean)**2\n variance = variance/len(numbers)\n \n std_deviation = variance**0.5\n return std_deviation\n \n \nnumbers = [2, 4, 4, 4, 5, 5, 7, 9]\nstd_deviation = calculate_std_deviation(numbers)\nprint('The standard deviation is: {}'.format(std_deviation)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -*- coding: UTF-8 -*-\n\n#  ..#######.########.#######.##....#..######..######.########....###...########.#######.########..######.\n#  .##.....#.##.....#.##......###...#.##....#.##....#.##.....#...##.##..##.....#.##......##.....#.##....##\n#  .##.....#.##.....#.##......####..#.##......##......##.....#..##...##.##.....#.##......##.....#.##......\n#  .##.....#.########.######..##.##.#..######.##......########.##.....#.########.######..########..######.\n#  .##.....#.##.......##......##..###.......#.##......##...##..########.##.......##......##...##........##\n#  .##.....#.##.......##......##...##.##....#.##....#.##....##.##.....#.##.......##......##....##.##....##\n#  ..#######.##.......#######.##....#..######..######.##.....#.##.....#.##.......#######.##.....#..######.\n\n#######################################################################\n# ----------------------------------------------------------------------------\n# \"THE BEER-WARE LICENSE\" (Revision 42):\n# @Daddy_Blamo wrote this file.  As long as you retain this notice you\n# can do whatever you want with this stuff. If we meet some day, and you think\n# this stuff is worth it, you can buy me a beer in return. - Muad'Dib\n# ----------------------------------------------------------------------------\n#######################################################################\n\n# Addon Name: Placenta\n# Addon id: plugin.video.placenta\n# Addon Provider: Mr.Blamo\n\nimport json\nimport re\nimport urllib\nimport urlparse\n\nfrom openscrapers.modules import cleantitle\nfrom openscrapers.modules import client\nfrom openscrapers.modules import dom_parser\nfrom openscrapers.modules import source_utils\n\n\nclass source:\n    def __init__(self):\n        self.priority = 1\n        self.language = ['de']\n        self.domains = ['filmpalast.to']\n        self.base_link = 'http://filmpalast.to'\n        self.search_link = '/search/title/%s'\n        self.stream_link = 'stream/%s/1'\n\n    def movie(self, imdb, title, localtitle, aliases, year):\n        try:\n            url = self.__search([localtitle] + source_utils.aliases_to_array(aliases))\n            if not url and title != localtitle: url = self.__search([title] + source_utils.aliases_to_array(aliases))\n            return url\n        except:\n            return\n\n    def tvshow(self, imdb, tvdb, tvshowtitle, localtvshowtitle, aliases, year):\n        try:\n            url = {'imdb': imdb, 'tvdb': tvdb, 'tvshowtitle': tvshowtitle, 'localtvshowtitle': localtvshowtitle,\n                   'aliases': aliases, 'year': year}\n            url = urllib.urlencode(url)\n            return url\n        except:\n            return\n\n    def episode(self, url, imdb, tvdb, title, premiered, season, episode):\n        try:\n            if not url:\n                return\n\n            data = urlparse.parse_qs(url)\n            data = dict([(i, data[i][0]) if data[i] else (i, '') for i in data])\n            title = data['localtvshowtitle']\n            title += ' S%02dE%02d' % (int(season), int(episode))\n            aliases = source_utils.aliases_to_array(eval(data['aliases']))\n            aliases = [i + ' S%02dE%02d' % (int(season), int(episode)) for i in aliases]\n\n            url = self.__search([title] + aliases)\n            if not url and data['tvshowtitle'] != data['localtvshowtitle']:\n                title = data['tvshowtitle']\n                title += ' S%02dE%02d' % (int(season), int(episode))\n                url = self.__search([title] + aliases)\n            return url\n        except:\n            return\n\n    def sources(self, url, hostDict, hostprDict):\n        sources = []\n\n        try:\n            if not url:\n                return sources\n\n            query = urlparse.urljoin(self.base_link, url)\n\n            r = client.request(query)\n\n            quality = dom_parser.parse_dom(r, 'span', attrs={'id': 'release_text'})[0].content.split('&nbsp;')[0]\n            quality, info = source_utils.get_release_quality(quality)\n\n            r = dom_parser.parse_dom(r, 'ul', attrs={'class': 'currentStreamLinks'})\n            r = [(dom_parser.parse_dom(i, 'p', attrs={'class': 'hostName'}),\n                  dom_parser.parse_dom(i, 'a', attrs={'class': 'stream-src'}, req='data-id')) for i in r]\n            r = [(re.sub(' hd$', '', i[0][0].content.lower()), [x.attrs['data-id'] for x in i[1]]) for i in r if\n                 i[0] and i[1]]\n\n            for hoster, id in r:\n                valid, hoster = source_utils.is_host_valid(hoster, hostDict)\n                if not valid: continue\n\n                sources.append({'source': hoster, 'quality': quality, 'language': 'de',\n                                'info': ' | '.join(info + ['' if len(id) == 1 else 'multi-part']), 'url': id,\n                                'direct': False, 'debridonly': False, 'checkquality': True})\n\n            return sources\n        except:\n            return sources\n\n    def resolve(self, url):\n        try:\n            h_url = []\n\n            for id in url:\n                query = urlparse.urljoin(self.base_link, self.stream_link % id)\n                r = client.request(query, XHR=True, post=urllib.urlencode({'streamID': id}))\n                r = json.loads(r)\n                if 'error' in r and r['error'] == '0' and 'url' in r:\n                    h_url.append(r['url'])\n\n            h_url = h_url[0] if len(h_url) == 1 else 'stack://' + ' , '.join(h_url)\n\n            return h_url\n        except:\n            return\n\n    def __search(self, titles):\n        try:\n            query = self.search_link % (urllib.quote_plus(titles[0]))\n            query = urlparse.urljoin(self.base_link, query)\n\n            t = [cleantitle.get(i) for i in set(titles) if i]\n\n            r = client.request(query)\n\n            r = dom_parser.parse_dom(r, 'article')\n            r = dom_parser.parse_dom(r, 'a', attrs={'class': 'rb'}, req='href')\n            r = [(i.attrs['href'], i.content) for i in r]\n            r = [i[0] for i in r if cleantitle.get(i[1]) in t][0]\n\n            return source_utils.strip_domain(r)\n        except:\n            return\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def getStringLengths(words):\n    # Create an empty dictionary \n    lengths = {} \n\n    # For each word in the list of words\n    for word in words:\n        # find the length of the word\n        length = len(word)\n        # add the length of the word to the dictionary\n        lengths[word] = length \n\n    # return the dictionary\n    return lengths\n\nprint(getStringLengths([\"apple\", \"mango\", \"banana\"])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num):\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: This code will result in a `ValueError` because `int()` cannot convert the string 'A123' into an integer. To fix this, you can use `try/except` statements to catch the error and handle it appropriately.\n\ntry: \n number = int(not_a_number)\nexcept ValueError as e:\n print(f'Error converting {not_a_number} to an integer: {e}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a program to group the strings of a given list according to their lengths in Python\n\"\"\"\n\n# List of strings \ninput = [\"apple\", \"mango\", \"banana\", \"kiwi\", \"grapes\", \"watermelon\"]\n\n# Dictionary to store the grouped strings \nresult = {} \n\n# Iterate over the list \nfor elem in input:\n    # Get length of each string \n    length = len(elem)\n    # If the length is present in the result dictionary, \n    # add the string to its corresponding list \n    if length in result: \n        result[length].append(elem)\n    # Else, create a new list in the result dictionary \n    # and append the string to the list \n    else: \n        result[length] = [elem] \n  \n# Print the result \nprint(result) \n# Output: {5: ['apple', 'mango', 'kiwi'], 6: ['banana', 'grapes'], 12: ['watermelon']} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [i ** 2 for i in range(10)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_square(x):\n    try:\n        return x * x\n    except TypeError:\n        print(\"The argument must be a number\")\n    except ValueError:\n        print(\"The argument cannot be a negative number\")\n        \ncalculate_square(10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def initialize_array(rows, cols): \n    array = [[0 for i in range(cols)] for j in range(rows)]\n    return array but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insertion_sort(list):\n    \"\"\"\n    Sort a given list using insertion sort.\n    list: the list to be sorted\n    \"\"\"\n    # loop through each element in the list, starting from the second element\n    for i in range(1, len(list)):  \n        temp = list[i] \n  \n        # find the position where the current element should be inserted\n        j = i-1\n        while j >= 0 and temp < list[j] : \n                list[j+1] = list[j] \n                j -= 1\n        list[j+1] = temp \n  \n    return list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to demonstrate printing pattern in pyramid format \ndef pyramid(n): \n    k = 2*n - 2\n    # outer loop to handle number of rows \n    for i in range(0, n): \n        # inner loop to handle number spaces \n        # values changing acc. to requirement \n        for j in range(0, k): \n            print(end=\" \") \n        # decrementing k after each loop \n        k = k - 2\n        # inner loop to handle number of columns \n        # values changing acc. to outer loop \n        for j in range(0, i+1): \n            # printing stars \n            print(\"* \", end=\"\") \n        # ending line after each row \n        print(\"\\r\") \n  \n# Driver Code \nn = 6\npyramid(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def format_string(string):\n    \"\"\"Function to format a string with the proper case and punctuation\"\"\"\n    return string.lower().capitalize() + \".\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Lists and tuples are both data structures in Python. The main difference between them is that a list is mutable (can be changed) while a tuple is immutable (cannot be changed). Tuples use parentheses and lists use square brackets. Tuples can contain any type of data, including other tuples, and can be indexed and sliced. Lists, on the other hand, cannot contain mutable objects, such as other lists, and cannot be indexed or sliced because they are mutable. Tuples also tend to be faster than lists. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(list):\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[i] > list[j]:\n                list[i], list[j] = list[j], list[i]\n    return list\n\nmy_list = [9, 3, 6, 7, 1]\nmy_list = sort_list(my_list)\nprint(my_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http://example.com/news'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, \"html.parser\")\n\nheadlines = soup.find_all(\"h2\", class_=\"headline\")\nfor headline in headlines[:10]:\n print(headline.string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\ndef fetch_data():\n    url = 'https://coronavirus-19-api.herokuapp.com/'\n    response = requests.get(url)\n    data = response.json()\n    return data\n\nif __name__ == '__main__':\n    print(fetch_data()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max_val(arr):\n    max_val = 0\n\n    for lst in arr:\n        for num in lst:\n            if num > max_val:\n                max_val = num\n    return max_val\n\nprint(find_max_val([[1, 4, 8], [7, 9, 6]])) # Output: 9 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request\n\napp = Flask(name)\n\n@app.route('/users', methods=['POST'])\ndef create_user():\n data = request.json\n # Create the user\n # ...\n return {'status': 'user created'}\n\nif name == 'main':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def length_longest_word(s):\n    longest_word = \"\"\n    longest_len = 0\n  \n    words = s.split()\n    for word in words:\n        if len(word) > longest_len:\n            longest_len = len(word)\n            longest_word = word\n  \n    return len(longest_word)\n  \nresult = length_longest_word(string)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_prime_numbers():\n    for num in range(2, 1001):\n\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            print(num)\nprint_prime_numbers() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Dictionaries\ndict1 = {'name': 'John', 'age': 25}\ndict2 = {'company': 'Google', 'city': 'New York'}\n\n# Merge two dictionaries\ndict3 = {**dict1, **dict2}\n\n# Print the merged dictionary\nprint(dict3)\n\n# Output:\n# {'name': 'John', 'age': 25, 'company': 'Google', 'city': 'New York'} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Function to add two given numbers\ndef add(x, y):\n   return x + y\n  \n# Print the sum\nprint(add(x, y)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generateLinkedList(n): \n\thead = Node(0) \n\tprev = head \n\tfor i in range(1, n + 1): \n\t\tnode = Node(i) \n\t\tprev.next = node \n\t\tprev = node \n\treturn head but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: max_num = -float('inf')\nfor num in [9, 2, 6, 3, -5, 5, 7]:\n    if num > max_num:\n        max_num = num\nprint(max_num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: C++:   Object-oriented, compiled language\nJava:  Object-oriented, compiled language\nPython: Object-oriented, interpreted language\nJavaScript: Object-oriented, interpreted language but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import flask\nfrom flask import Flask\nimport requests\n\napp = Flask(__name__)\n\n@app.route('/data', methods=[\"GET\"])\ndef data():\n    r = requests.get('https://example.com/dataset.json')\n    return flask.jsonify(r.json())\n\nif __name__ == '__main__':\n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def tower_of_hanoi(num_discs, source, auxiliary, destination): \n if num_discs == 1: \n     print(\"Move disc 1 from\", source, \"to\", destination) \n     return\n tower_of_hanoi(num_discs - 1, source, destination, auxiliary) \n print(\"Move disc\", num_discs, \"from\", source, \"to\", destination) \n tower_of_hanoi(num_discs - 1, auxiliary, source, destination) \n\ntower_of_hanoi(3, \"A\", \"B\", \"C\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import hashlib \n  \ndef encrypt_string(string, password):\n    md5_string = hashlib.md5(string.encode()).hexdigest()\n    password_string = hashlib.md5(password.encode()).hexdigest()\n    result = \"\"\n\n    for i in range(32):\n        result += md5_string[i] + password_string[i]\n    return result\n\nstring = \"Hello World!\"\npassword = \"password\"\n\nresult = encrypt_string(string, password)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_islands(grid): \n    if not grid: \n        return 0 \n  \n    row = len(grid) \n    col = len(grid[0]) \n  \n    num_islands = 0\n  \n    for i in range(row): \n        for j in range(col): \n            if grid[i][j] == 1: \n                num_islands += dfs(grid, i, j, row, col) \n  \n    return num_islands \n  \n  \ndef dfs(grid, i, j, row, col): \n    if i < 0 or i >= row or j < 0 or j >= col or grid[i][j] == 0: \n        return 0\n  \n    grid[i][j] = 0\n  \n    dfs(grid, i + 1, j, row, col) \n    dfs(grid, i - 1, j, row, col) \n    dfs(grid, i, j + 1, row, col) \n    dfs(grid, i, j - 1, row, col) \n  \n    return 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_objects(list_of_objects):\n    results = []\n    for obj in list_of_objects:\n        if obj == 'objectA' or obj == 'objectB':\n            results.append('A')\n        elif obj == 'objectC' or obj == 'objectD':\n            results.append('B')\n    return results\n\nlist_of_objects = ['objectA', 'objectB', 'objectC', 'objectD']\nclassifications = classify_objects(list_of_objects)\nprint(classifications) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countIslands(grid):\n count = 0\n\n for i in range(len(grid)):\n  for j in range(len(grid[0])):\n   if grid[i][j] == 1:\n    dfs(grid, i, j)\n    count += 1\n\n return count\n\ndef dfs(grid, r, c):\n if r < 0 or c < 0 or r >= len(grid) or c >= len(grid[0]) or grid[r][c] == 0:\n  return\n grid[r][c] = 0\n dfs(grid, r+1, c)\n dfs(grid, r, c+1)\n dfs(grid, r-1, c)\n dfs(grid, r, c-1)\n\nprint(countIslands([[1, 1, 0, 0, 0],\n                    [0, 1, 0, 0, 1],\n                    [1, 0, 0, 1, 1],\n                    [0, 0, 0, 0, 0],\n                    [1, 0, 1, 0, 1]]))\n// Output: 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculator(expression):\n    # create a stack for storing values\n    stack = []\n    # iterate through the expression\n    for char in expression:\n        # check if the character is a number\n        if char.isdigit():\n            # if so, push it to the stack\n            stack.append(int(char))\n        # check if the character is an operator\n        if char == '+' or char == '*':\n            # pop two values from the stack\n            val_one = stack.pop()\n            val_two = stack.pop()\n            # determine which operator was used and\n            # perform the corresponding operation\n            if char == '+':\n                stack.append(val_one + val_two)\n            elif char == '*':\n                stack.append(val_one * val_two)\n    # return the calculated result\n    return stack.pop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from itertools import permutations\n\ndef print_permutations(input):\n    perms = [''.join(p) for p in permutations(input)]\n    for perm in perms:\n        print(perm)\n\nif __name__ == \"__main__\":\n    print_permutations(\"ABC\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: (40.7588972, -73.9787129) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to remove vowels from a string\n\ndef remove_vowels(string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    output_string = \"\"\n    for char in string:\n        if char not in vowels:\n            output_string += char\n    return output_string\n\nif __name__ == \"__main__\":\n    string = \"Hello World!\"\n    print(\"Original String:\", string)\n    string = remove_vowels(string)\n    print(\"String without Vowels:\", string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n    def __init__(self, name, age, gender, address):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.address = address\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age \n    \n    def get_gender(self):\n        return self.gender\n    \n    def get_address(self):\n        return self.address but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from selenium import webdriver\nimport time\n\ndriver = webdriver.Chrome()\ndriver.get('https://example.com')\n\n# Check the title of the page\nassert driver.title == 'Example Domain'\n\n# Check the text on the page\ntext = driver.find_element_by_xpath('//p').text\nassert text == 'This domain is for use in illustrative examples in documents. You may use this domain in literature without prior coordination or asking for permission.'\n\n# Check for a hyperlink\nlink = driver.find_element_by_xpath('//a')\nassert link.text == 'More information...'\n\ntime.sleep(2)\ndriver.quit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\nimport requests\n\nfrom logistics.models import Fleet\n\nSERVER_URL = \"http://demo.geo2tag.org/instance/\"\nBASE_SERVICE_NAME = \"testservice\"\nSERVICE_NAME = BASE_SERVICE_NAME\n\nchannel_dict = {}\npoints_dict = {}\n\n\ndef getSerivceUrl():\n    return SERVER_URL + \"service/\" + SERVICE_NAME\n\ndef one_time_startup():\n    print(\"Application startup execution\")\n    createService()\n    clearAllFleetChannels()\n\n\ndef createService():\n    # m = hashlib.md5()\n    # m.update(socket.gethostbyname(socket.getfqdn()).encode('utf-8'))\n    # global SERVICE_NAME\n    # SERVICE_NAME = BASE_SERVICE_NAME + \"_\" + str(m.hexdigest())\n    # print(\"SERVICE_NAME: \"+SERVICE_NAME)\n    #\n    # url = SERVER_URL + 'service'\n    # data = {'name': SERVICE_NAME}\n    # request = requests.post(url, data=data)\n    # print(request.text)\n    pass\n\n# \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 url \u043a\u0430\u0440\u0442\u044b (\u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 driver-fleet-id)\ndef getFleetMap(fleet_id):\n    try:\n        fleet = Fleet.objects.get(id=fleet_id)\n        channel_id = getOrCreateFleetChannel(fleet)\n    except:\n        channel_id = \"none\"\n\n    return getSerivceUrl() + \"/map?zoom=10&latitude=59.8944&longitude=30.2642&channel_ids=[\\\"\"+str(channel_id)+\"\\\"]\"\n\n\n# \u0441\u043e\u0437\u0434\u0430\u0451\u0442 \u043a\u0430\u043d\u0430\u043b \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043f\u0430\u0440\u043a\u0430, \u0435\u0441\u043b\u0438 \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 (\u043f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0442\u043e\u0447\u043a\u0438 updateDriverPos)\n# \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 oid \u043a\u0430\u043d\u0430\u043b\u0430 \u0434\u043b\u044f fleet\ndef getOrCreateFleetChannel(fleet):\n    try:\n        channel_oid = channel_dict.get(fleet.id, None)\n        if channel_oid is not None:\n            return channel_oid\n\n        print(\"create channel for fleet \" + str(fleet))\n        url = getSerivceUrl() + '/channel'\n        full_name = str(fleet.name) + \"_\" + str(fleet.id)\n        data = {'name': full_name, 'json': {'name': str(fleet.name), 'id': str(fleet.id), 'owner': fleet.owner.first_name+' '+fleet.owner.last_name}}\n        request = requests.post(url, data=data)\n        response = request.text\n        channel_exists = response == 'null'\n        if channel_exists:\n            print(full_name+' already exists : '+str(channel_exists))\n            oid = None\n        else:\n            oid = json.loads(response)[\"$oid\"]\n            channel_dict[fleet.id] = oid\n        return oid\n\n    except Exception as e:\n        print(\"EXCEPTION WHILE createFleetChannel: \" + str(e))\n\n\n# \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u043a\u0430\u043d\u0430\u043b \u0430\u0432\u0442\u043e\u043f\u0430\u0440\u043a\u0430 (\u043f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0430\u0432\u0442\u043e\u043f\u0430\u0440\u043a\u0430)\ndef deleteFleetChannel(fleet):\n    try:\n        channel_oid = channel_dict.get(fleet.id)\n        headers = {'content-type': 'application/json'}\n        url = getSerivceUrl() + \"/channel/\" + channel_oid\n        request = requests.delete(url, headers=headers)\n        channel_dict.pop(fleet.id)\n        print(\"delete channel of fleet \" + str(fleet) +\" result: \"+request.text)\n\n    except Exception as e:\n        print(\"EXCEPTION WHILE deleteFleetChannel: \" + str(e))\n\n\n# \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0432\u0441\u0435 \u043a\u0430\u043d\u0430\u043b\u044b (\u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f)\ndef clearAllFleetChannels():\n    print(\"delete all channels\")\n\n    try:\n        url = getSerivceUrl() + '/channel?number=0'\n        request = requests.get(url)\n        response = request.text\n        print(response)\n        parsed_string = json.loads(response)\n        for channel in parsed_string:\n            channel_oid = channel[\"_id\"][\"$oid\"]\n            headers = {'content-type': 'application/json'}\n            url = getSerivceUrl() + \"/channel/\" + channel_oid\n            print(\"DELETE \" + url)\n            requests.delete(url, headers=headers)\n            channel_dict.clear()\n            points_dict.clear()\n\n    except Exception as e:\n        print(\"EXCEPTION WHILE clearAllFleetChannels: \" + str(e))\n\n\n# \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u043c\u0435\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f ( \u043f\u0440\u0438 api/driver/update_pos/)\ndef updateDriverPos(fleet, driver, lat, lon):\n    try:\n        channel_oid = getOrCreateFleetChannel(fleet)\n        if channel_oid is not None:\n            point_oid = points_dict.get(driver.id, None)\n\n            url = getSerivceUrl() + '/point'\n            data = [{\"lon\": float(lat), \"lat\": float(lon), \"alt\": 1.1,\n                     \"json\": {\"name\": driver.first_name + \" \" + driver.last_name}, \"channel_id\": channel_oid}]\n            if point_oid is None:\n                request = requests.post(url, data=json.dumps(data))\n                point_oid = json.loads(request.text)[0]\n                points_dict[driver.id] = point_oid\n                print(\"added point \" + str(lat) + \" \" + str(lon) + \" for driver \" + str(driver) + \" in fleet \" + str(fleet) + \" result: \"+request.text)\n\n            else:\n                # delete old\n                del_url = getSerivceUrl() + '/point/' + point_oid\n                request = requests.delete(del_url)\n                success = request.text == '{}'\n                if success:\n                    points_dict.pop(driver.id)\n                    # add new\n                    request = requests.post(url, data=json.dumps(data))\n                    point_oid = json.loads(request.text)[0]\n                    points_dict[driver.id] = point_oid\n                    print(\"updated point \" + str(lat) + \" \" + str(lon) + \" for driver \" + str(driver) + \" in fleet \" + str(fleet) + \" result: \" + request.text)\n\n                else:\n                    print(\"error while delete \"+request.text)\n\n    except Exception as e:\n        print(\"EXCEPTION WHILE updateDriverPos: \" + str(e))\n\n\n# \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0442\u043e\u0447\u043a\u0443, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0443\u044e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e \u0432 \u0430\u0432\u0442\u043e\u043f\u0430\u0440\u043a\u0435 fleet (\u043f\u0440\u0438 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u0438\u0437 \u0430\u0432\u0442\u043e\u043f\u0430\u0440\u043a\u0430 \u0438 \u043f\u0440\u0438 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u043f\u043e\u0435\u0437\u0434\u043a\u0438)\ndef deleteDriverPos(fleet, driver):\n    try:\n        point_oid = points_dict.get(driver.id)\n        url = getSerivceUrl() + '/point/' + point_oid\n        request = requests.delete(url)\n        points_dict.pop(driver.id)\n        print(\"cleared position for driver \" + str(driver) + \" from fleet \" + str(fleet) + \" result: \"+request.text)\n    except Exception as e:\n        print(\"EXCEPTION WHILE deleteDriverPos: \" + str(e))\n\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_arr(arr):\n    n = len(arr)\n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]  \n    return arr\n\nresult = sort_arr([9, 4, 6, 1, 3, 7])\nprint(result) but is not the same. just give one example and only return the code."}
