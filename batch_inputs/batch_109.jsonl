{"prompt": "make some code that functions the same as the following code: for i in range(1, 101):\n if i%3 == 0 and i%5 == 0:\n  print(\"FizzBuzz\")\n elif i%3 == 0:\n  print(\"Fizz\")\n elif i%5 == 0:\n  print(\"Buzz\")\n else:\n  print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_future_value(principal, interest_rate, num_years):\n    return principal * (1 + interest_rate)**num_years but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: odd_list = []\neven_list = []\n\nfor x in list:\n    if x % 2 == 0:\n        even_list.append(x)\n    else:\n        odd_list.append(x)\n        \nprint(\"Odd numbers: \", odd_list)\nprint(\"Even numbers: \", even_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndata = '{\"name\": \"John\", \"age\": 30, \"hobby\": \"running\"}'\ndict_data = json.loads(data)\n\nprint(dict_data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def frequency_selector(list): \n    # Create an empty dictionary for counts \n    counts = {} \n  \n    # Iterate the list and store values in the dictionary \n    for l in list: \n        if l in counts: \n            counts[l] += 1\n        else: \n            counts[l] = 1\n  \n    # Find the highest frequency \n    max = 0\n    item = None\n  \n    for l in counts: \n        if counts[l] > max: \n            max = counts[l] \n            item = l \n  \n    return item\n\nlist = [5, 2, 8, 7, 2, 2, 4]\nprint(frequency_selector(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_to_upper(str):\n    res = \"\"\n    for ch in str:\n        if ch in \"aeiou\":\n            res += ch.upper()\n        else:\n            res += ch\n    return res\n\ninput = \"This is a sample string\"\noutput = convert_to_upper(input)\nprint(\"Converted string: \"+ output) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum(*args):\n   total = 0\n   for arg in args:\n       total += arg\n   return total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply_list(lst, i):\n  return [j * i for j in lst]\n\nresult = multiply_list(list, integer)\nprint(result) # [15, 10, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_char_occurrences(string):\n    freq_dict = {} \n    for char in string:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n            \n    sorted_frequency = {k: v for k, v in\n                        sorted(freq_dict.items(), \n                        key=lambda item: item[1], \n                        reverse=True)} \n    sorted_characters = list(sorted_frequency.keys())\n    return sorted_characters but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def average(x, y):\n return (x + y) / 2\n\nresult = average(10, 15)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(n):\n if n <= 1:\n return False\n\n for i in range(2, n):\n if n % i == 0:\n return False\n\n return True\n\nis_prime(13) # True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: dict = {}\n\ndict['Alice'] = {'Age': 30, 'Gender': 'Female'}\ndict['Bob'] = {'Age': 20, 'Gender': 'Male'} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: month_days = { \n \"January\": 31, \n \"February\": 28, \n \"March\": 31, \n \"April\": 30, \n \"May\": 31, \n \"June\": 30, \n \"July\": 31, \n \"August\": 31, \n \"September\": 30, \n \"October\": 31, \n \"November\": 30, \n \"December\": 31 \n} \n \nprint(month_days) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def power_of(x, n):\n    result = 1\n    for i in range(n):\n        result = result * x\n    return result\n\npower = power_of(2, 5)\nprint(power) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: @app.route('/weather', methods=['GET'])\ndef get_weather():\n    lat = request.args.get('latitude')\n    lon = request.args.get('longitude')\n    if lat is None or lon is None:\n        abort(400)\n    else:\n        try:\n            data = requests.get('http://api.openweathermap.org/data/2.5/weather?lat=' + lat + '&lon=' + lon)\n            return data.json()\n        except requests.exceptions.ConnectionError:\n            abort(500) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(a, b): \n    if b == 0: \n        return a \n    return gcd(b, a % b) \n\na = 10\nb = 25\nprint (\"GCD of\", a, \"and\", b, \"=\", gcd(a, b)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ReverseString:\n    def __init__(self, s):\n        self.s = s \n\n    def reverse(self):\n        return self.s[::-1]\n\nmy_string = ReverseString('Hello World!')\nprint(my_string.reverse()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\ndef generate_bar_chart(df):\n x = df.columns[0]\n y = df.columns[1]\n df.plot.bar(x,y)\n plt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def create_acronym(sentence):\n    acronym = ''\n    words = sentence.split(' ')\n    for word in words:\n        acronym += word[0].upper()\n    return acronym but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def levenshtein_distance(s, t):\n    m = len(s)\n    n = len(t)\n    dp = [[0 for i in range(n + 1)] for j in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif s[i-1] == t[j-1]: \n                dp[i][j] = dp[i-1][j-1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1]) \n    return dp[m][n]\n\nresult = levenshtein_distance('hello', 'hi')\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Initialize a max_price variable and set it to 0\nmax_price = 0\n\n# Iterate through the list of car data\nfor car in car_data:\n # Retrieve the car's model and price\n model = car['model']\n price = car['price']\n\n # If the current car's price is greater than the current max_price\n if price > max_price:\n # Set the max_price to the current car's price\n max_price = price\n # Set a variable for the model with the highest price\n max_price_model = model\n\n# Print the model with the highest average price\nprint(f'The model with the highest average price is the {max_price_model} at ${max_price}.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sequence = [2, 8, 6, 4, 1, 9, 5]\n\ntop_5 = sorted(sequence)[-5:]\n\nprint(top_5) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isAnagram(a, b):\na = a.lower()\nb = b.lower()\n\n# remove spaces and sort letter\na_sorted = ''.join(sorted(a.replace(' ', '')))\nb_sorted = ''.join(sorted(b.replace(' ', '')))\n\n# check if they are equal\nif a_sorted == b_sorted:\n return True\nreturn False\n\na = 'listen'\nb = 'silent'\nprint(isAnagram(a, b))\n\n# Output: True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mean(arr):\n  total = 0\n  for num in arr:\n    total += num\n  return total / len(arr)\n\ndef median(arr):\n  arr.sort()\n  if len(arr) % 2 != 0:\n    median_index = int(len(arr) / 2)\n    return arr[median_index]\n  else:\n    lower_index = int(len(arr) / 2) - 1\n    upper_index = int(len(arr) / 2)\n    return (arr[lower_index] + arr[upper_index]) / 2\n\ndef mode(arr):\n  counts = {}\n  for num in arr:\n    if num in counts:\n      counts[num] += 1\n    else:\n      counts[num] = 1\n\n  max_frequency = 0\n  max_value = None\n  for num, frequency in counts.items():\n    if frequency > max_frequency:\n      max_frequency = frequency\n      max_value = num\n\n  return max_value\n\nnums = [1, 2, 3, 4, 5, 6, 7]\nmean = mean(nums)\nmedian = median(nums)\nmode = mode(nums)\n\nprint(f'Mean: {mean}, Median: {median}, Mode: {mode}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: pattern = re.compile(r'\\b[abc]+\\w*\\b') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nWrite a python program to generate Fibonacci series up to a given number \n\"\"\"\n\n# Function to generate fibonacci series \ndef generate_fibonacci(n): \n    # Initialize a list\n    fibonacci_list = [0,1] \n      \n    # Generate the fibonacci series up to n \n    for i in range(2,n): \n        fibonacci_list.append(fibonacci_list[i-1] + fibonacci_list[i-2]) \n\n# Print the result \n    print(fibonacci_list) \n\n# Driver code \nif __name__ == '__main__':\n    n = 10\n    generate_fibonacci(n)  # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_nums(n,min_val,max_val):\n    output = []\n    for i in range(n):\n        output.append(random.randint(min_val,max_val))\n    return output\n\nif __name__ == '__main__':\n    n = 10\n    min_val = 1\n    max_val = 100\n    print(generate_random_nums(n,min_val,max_val)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\ndef most_frequent_element(array):\n  return Counter(array).most_common(1)[0][0]\n  \n# Driver code \nprint(most_frequent_element([1, 3, 1, 4, 5, 3, 4, 3])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport tensorflow as tf\nfrom tensorflow.contrib.factorization.python.ops import lda\n\ndef create_lda_network(num_topics, num_documents, num_words):\n    \"\"\" \n    Function to design a neural network using LDA.\n\n    Args:\n        num_topics (int): Desired number of topics\n        num_documents (int): Desired number of documents\n        num_words (int): Desired number of words\n\n    Returns:\n        A tensorflow graph node representing the trained LDA network.\n    \"\"\"\n    # Define Dirichlet priors to use for the LDA\n    prior = 0.1 * np.ones([num_topics], dtype=np.float32)\n\n    # Initialize the LDA with the given input parameters\n    lda_model = lda.LDA(num_topics, \n                        num_documents,\n                        num_words, \n                        prior=prior,\n                        name='lda_model'\n                        )\n\n    # Create a placeholder for the documents\n    x = tf.placeholder(alice_documents)\n\n    # Create and train the LDA network with the given placeholder\n    lda_topics = lda_model(x)\n\n    return lda_topics but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def doubleValue(num):\n return num * 2\n \n# Javascript to Python \n\ndef doubleValue(num): \n return num * 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_lists(list_a, list_b): \n    merged_list = []\n    for ele in list_a:\n        if ele not in merged_list:\n            merged_list.append(ele)\n    for ele in list_b:\n        if ele not in merged_list:\n            merged_list.append(ele)\n    return merged_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_search(lst, x):\n # initializing low and high index values\n lowIdx = 0\n highIdx = len(lst)-1\n \n # loop until low index is not greater than high index \n while lowIdx <= highIdx: \n # calculate mid index \n midIdx = (lowIdx + highIdx)//2\n\n# compare midIdx value with x \n if lst[midIdx] == x: \n return midIdx \n \n # if x is less than midIdx value \n elif lst[midIdx] > x: \n highIdx = midIdx - 1\n \n # if x is greater than midIdx value \n else: \n lowIdx = midIdx + 1\n\n# if x is not present then return -1\nreturn -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import statistics\n\ndata_set = [2,4,4,4,5,5,7,9]\nprint(round(statistics.stdev(data_set),2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\n\ntf.compat.v1.enable_eager_execution() \n\n# Load training data\n\ntrain_data = tf.keras.datasets.imdb.load_data('imdb.npz', num_words=10000)\ntrain_data[0]\n\n# Preprocess data\n\ntrain_x = tf.keras.preprocessing.sequence.pad_sequences(train_data[0], maxlen=500)\ntrain_y = train_data[1]\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(10000, 64),\n    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64)),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nmodel.fit(train_x, train_y, epochs=10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def title_case(phrase):\n    words = phrase.split()\n    result = []\n    for word in words:\n        result.append(word[0].upper() + word[1:].lower())\n    \n    return ' '.join(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\nx = np.array([[7,5,3,9,8,4]]).T\ny = np.array([7,3,4,6])\n\nmodel = LinearRegression()\nmodel.fit(x, y)\n\npreds = model.predict(x)\n\nprint(f\"R-squared score: {model.score(x,y)}\")\nprint(f\"Coefficients: {model.coef_}\")\nprint(f\"Predictions: {preds}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python Program to Calculate the Length of a Linked List \n  \nclass Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \nclass LinkedList: \n    def __init__(self):  \n        self.head = None\n  \n    def lengthLinkedList(self): \n        curr = self.head \n        length = 0 \n          \n        while curr != None: \n            length += 1\n            curr = curr.next\n          \n        return length\n\nif __name__ == '__main__': \n    llist = LinkedList() \n    llist.head = Node(1) \n    second = Node(2) \n    third = Node(3) \n  \n    llist.head.next = second\n    second.next = third\n  \n    print(\"Length of Linked List: \" + str(llist.lengthLinkedList())) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from datetime import datetime\n\nnow = datetime.now()\n\nprint(\"Today's date is\", now.strftime(\"%A, %B %dth, %Y, at %I:%M%p\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_if_all_in_list_2(list1, list2):\n    for item in list1: \n        if item not in list2: \n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Car:\n    def __init__(self, color, engine_type): \n        self.color = color \n        self.engine_type = engine_type \n  \n    def get_color(self):\n        print(\"Car's Color: \", self.color) \n  \n    def get_engine_type(self):\n        print(\"Car's Engine Type: \", self.engine_type) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: timeline = {\n    \"Job A\":   {\"start\": datetime.datetime(2020,1,15), \n                \"end\": datetime.datetime(2020,2,1)\n                },\n    \"Job B\":   {\"start\": datetime.datetime(2020,5,4), \n                \"end\": datetime.datetime(2020,6,30)\n                },\n    \"Job C\":   {\"start\": datetime.datetime(2020,7,9), \n                \"end\": datetime.datetime(2020,8,4)\n                }\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def invert_matrix(matrix):\n    return matrix.T # transpose matrix but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: data = {\n 'Fruits':[\n  'Apple',\n  'Banana',\n  'Orange'\n ], \n 'Vegetables':[\n  'Carrot',\n  'Cucumber',\n  'Potato'\n ]\n}\n \nprint(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\r\n# -*- coding: utf-8 -*-\r\n\"\"\"\r\nbudget_term_densities\r\n\r\nCalculates density maps for nutrient budget terms from NEMO-ERSEM output.\r\n\r\nNERC-DEFRA SSB-BlueC projects\r\n\r\nCreated on Tue Jan 24 09:18:52 2017\r\n\r\n@author: TAMS00\r\n\"\"\"\r\n\r\n#import pandas as pd\r\nimport netCDF4\r\nimport xarray as xr\r\nimport numpy as np\r\nimport os\r\nimport matplotlib.pyplot as plt\r\nfrom mpl_toolkits.basemap import Basemap, cm\r\nimport argparse\r\n\r\nif (('Windows' in os.environ['OSTYPE']) and \r\n                 (os.environ['COMPUTERNAME']=='PC4447')):\r\n    base='c:/Users/tams00/Documents/nerc_ssb/c_fluxes/AMM7-HINDCAST-v0-erosion'\r\nelse:\r\n    base='/nerc/n01/n01/momme/AMM7-HINDCAST-v0-erosion'\r\n\r\n\r\nmodelpaths=[os.path.join(base+'/1981/01/','amm7_1d_19810101_19810131_grid_T.nc')]#,\r\n            #os.path.join(base+'/1981/02/','amm7_1d_19810201_19810228_grid_T.nc')]\r\n            #os.path.join(base+'/1981/01/','restart_trc.nc'),\r\n\r\n\r\n#modelvars=[['Y4_fdetrc_result']]\r\n#modelvars=[['net_PelBen_POC_result','G3_c_pb_flux','nav_lon','nav_lat'],\r\n#['fabm_st2DnQ1_c','fabm_st2DnQ6_c','fabm_st2DnQ7_c','fabm_st2DnQ17_c','fabm_st2DnH1_c','fabm_st2DnH2_c','fabm_st2DnY2_c','fabm_st2DnY3_c','fabm_st2DnY4_c','fabm_st2DnG3_c'],\r\n#['fabm_st2DnQ1_c','fabm_st2DnQ6_c','fabm_st2DnQ7_c','fabm_st2DnQ17_c','fabm_st2DnH1_c','fabm_st2DnH2_c','fabm_st2DnY2_c','fabm_st2DnY3_c','fabm_st2DnY4_c','fabm_st2DnG3_c']]\r\n\r\npar_3d=['TRNO3_c','TRNP1_c','TRNP2_c','TRNP3_c','TRNP4_c','TRNB1_c','TRNZ4_c','TRNZ5_c','TRNZ6_c','TRNR4_c','TRNR6_c','TRNR8_c','TRNR1_c','TRNR2_c','TRNR3_c','TRNL2_c']\r\npar_2d=['fabm_st2DnQ1_c','fabm_st2DnQ6_c','fabm_st2DnQ7_c','fabm_st2DnQ17_c','fabm_st2DnH1_c','fabm_st2DnH2_c','fabm_st2DnY2_c','fabm_st2DnY3_c','fabm_st2DnY4_c','fabm_st2DnG3_c']\r\nadv_3d=['XAD_O3_c_e3t']\r\n\r\nmodelvars=adv_3d\r\n\r\n# main() to take an optional 'argv' argument, which allows us to call it from the interactive Python prompt:\r\ndef main(argv=None):\r\n\r\n\r\n    parser = argparse.ArgumentParser()\r\n    parser.add_argument('--basedir',nargs=1,help='base directory with model files')\r\n    args = parser.parse_args()\r\n\r\n    print(args)\r\n\r\n    try:\r\n        base = args.basedir\r\n    else:\r\n        base = base\r\n\r\n    # Naughty datasets might require decode_cf=False\r\n    # Here it just needed decode_times=False\r\n    print('********************')\r\n    print(modelpaths[0])\r\n    #data = xr.open_dataset(modelpaths[0],decode_times=False)\r\n    modelout = xr.open_mfdataset(modelpaths) #,decode_times=False)\r\n    #print(modelout)\r\n    \r\n    for modelvar in modelvars:\r\n        vardf=modelout[modelvar]\r\n        print(vardf) \r\n        # print attributes\r\n        for at in vardf.attrs:\r\n            print(at+':\\t\\t',end=' ')\r\n            print(vardf.attrs[at])\r\n\r\n        timeavg=vardf.mean('time_counter')\r\n        timeavg.plot()\r\n\r\n            \r\nif __name__ == \"__main__\":\r\n    main()\r\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(5, 11):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_values(dict_in):\n    for key,value in dict_in.items():\n        print(key, \":\", value)\n\nprint_values(my_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\nimport numpy as np\n \narr = np.array([1,2,3,4,5,6])\n \nplt.hist(arr)\nplt.title(\"Distribution of values in the given array\")\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nresponse = requests.get(\"https://example.com\")\nhtml = response.text but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Importing the libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Importing the dataset\ndataset = pd.read_csv('Churn_Modelling.csv')\nX = dataset.iloc[:, 3:13].values\ny = dataset.iloc[:, 13].values\n\n# Encoding categorical data\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nlabelencoder_X_2 = LabelEncoder()\nX[:, 2] = labelencoder_X_2.fit_transform(X[:, 2])\nonehotencoder = OneHotEncoder(categorical_features = [2])\nX = onehotencoder.fit_transform(X).toarray()\nX = X[:, 1:] # To remove dummy var trap\n\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)\n\n# Fitting XGBoost to the Training set\nfrom xgboost import XGBClassifier\nclassifier = XGBClassifier()\nclassifier.fit(X_train, y_train)\n\n# Predicting a new customer's churn status\ncustomerID = 'C123456'\nnew_customer = [customerID, X_train[0, 1], X_train[0, 2], X_train[0, 3], X_train[0, 4], X_train[0, 5], \n                X_train[0, 6], X_train[0, 7], X_train[0, 8], X_train[0, 9], X_train[0, 10], X_train[0, 11]]\n\nnew_customer = np.array(new_customer).reshape((1,-1))\n\nnew_customer[:, 2] = labelencoder_X_2.transform(new_customer[:, 2])\nnew_customer = onehotencoder.transform(new_customer).toarray()\nnew_customer = new_customer[:, 1:] # To remove dummy var trap\n\ny_pred = classifier.predict(new_customer)\n\nif y_pred == 0:\n    print('The customer with ID {} will not churn.'.format(customerID))\nelse:\n    print('The customer with ID {} will churn.'.format(customerID)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n \nconn = sqlite3.connect('contacts.db')\n \nc = conn.cursor()\n \n# Create a table\nc.execute(\"\"\"CREATE TABLE contacts (\n    first_name text,\n    last_name text,\n    email_address text,\n    phone_number text\n)\"\"\")\n \n# Insert a row of Data\nc.execute(\"INSERT INTO contacts VALUES ('John', 'Doe', 'johndoe@example.com', '12345')\")\n \n# Commit changes and close connection\nconn.commit()\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countWord(string, word): \n    string = string.lower().split() \n    count = 0\n    for i in range(0, len(string)): \n        if (string[i] == word): \n            count += 1\n    return count \n    \nstring = \"Python is an interpreted, high-level, general-purpose programming language.\"\nword = \"programming\"\nprint(countWord(string, word)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\n# utility function to check if a character is a valid infix operator \ndef isOperator(c): \n\tif (c == '+' or c == '*' or c == '/' or c == '-' or c == '^'): \n\t\treturn True\n\telse: \n\t\treturn False\n\n# Function to convert infix to postfix expression \ndef infixToPostfix(exp): \n\t\n\t# Iterate through expression \n\tfor i in range(len(exp)): \n\t\t\n\t\t# If the character is an operator, \n\t\t# pop two elements from the stack \n\t\tif (isOperator(exp[i])): \n\t\t\top2 = exp[i-1] \n\t\t\top1 = exp[i-2] \n\n\t\t\t# Concatenate the two characters \n\t\t\texp = exp[:i-2] + op1 + op2 + exp[i:] \n\t\t\n\t\t\t# Remove the two characters \n\t\t\texp = exp[:i-1] + exp[i+1:] \n\t\t\t\n\t\t\t# Reduce the length of expression \n\t\t\ti = i-2\n\n\t# The result is the last character of \n\t# the expression after whole process \n\treturn exp[-1] \n\n# Driver Code \nexp = \"A+B*C\"\n\n# Convert infix to postfix \nprint (infixToPostfix(exp)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_matrix(N):\n    matrix = [] \n    for i in range(N): \n        row = [] \n        for j in range(N): \n            row.append(i * N + j) \n        matrix.append(row) \n    return matrix but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Rectangle:\n   def __init__(self, length, width):\n      self.length = length\n      self.width  = width but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Defining the list\nlist = [3, 5, 9, 12, 15, 18, 21]\n\n#Grouping the list\nlist_1 = [element for element in list if element <= 10]\nlist_2 = [element for element in list if element > 10 and element <= 17]\nlist_3 = [element for element in list if element > 17 and element <= 24]\n\n#Printing the result\nprint(\"List 1: \", list_1)\nprint(\"List 2: \", list_2)\nprint(\"List 3: \", list_3) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport collections\nimport re\nfrom bs4 import BeautifulSoup\n\n# specify the URL of the Wikipedia article\nurl = 'https://en.wikipedia.org/wiki/Genetic_algorithm'\n\n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get(url).text\n\n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n\n# take out the script and style portions of the HTML\nfor script in soup([\"script\", \"style\"]):\n script.extract()\n\n# get text\ntext = soup.get_text()\n\n# break the text down into individual words\nwords = re.findall(r'\\w+',text)\n\n# Count the words\nword_count = collections.Counter(words)\n\n# get the most common words\nmost_common_words = word_count.most_common(20)\n\nprint(most_common_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!usr/bin/python\n# -*- coding:utf-8 -*-\n\nimport pandas as pd\nimport numpy as np\nimport scipy as sp\nimport os\nimport random\nimport time\nimport sys\n\ndef append_module_path():\n    import sys\n    paths = [ \\\n        \"../gen_data\",\n        \"../evaluate\",\n        \"../read_data\"\n    ]\n    \n    for path in paths:\n        if path not in sys.path:\n            sys.path.append(path)\n\nappend_module_path()\nimport gen_data\nimport evaluate\nimport read_data\n\n\ndef test_H():\n    \"\"\"\n    expected\n    array([[ 0.66666667, -0.33333333, -0.33333333],\n       [-0.33333333,  0.66666667, -0.33333333],\n       [-0.33333333, -0.33333333,  0.66666667]])\n    \"\"\"\n    return compute_H(3)\n\n\n\ndef test_norm_2_1():\n    \"\"\"\n    expected 4.2426406871192857\n    \"\"\"\n    W = np.array([[1,1],[2,2]])\n    return norm_2_1(W)\n\n\n\ndef test_Q():\n    \"\"\"\n    (np.sqrt(2) +  np.sqrt(8)) / [np.sqrt(2), np.sqrt(8)]\n    expected [[ 3. ,  0. ],\n              [ 0. ,  1.5]]\n    \"\"\"\n    W = np.array([[1,1],[2,2]])\n    return compute_Q(W)\n\n\n\ndef print_W(W):\n    with open(\"W.txt\", \"a+\") as f:\n        for w in W:\n            print(w, file=f)\n        print(\"\\n========================\\n\", file=f)\n        \n\n\ndef run_accuracy(fun, XL_train,YL_train,XU_train,YU_train, sel_num=5, output_file_name=\"feature_order\"):\n    XL, YL, XU, YU = XL_train.copy(), YL_train.copy(), XU_train.copy(), YU_train.copy()\n    \n    if fun.__name__.lower() == \"lsfs\":\n        YL = read_data.label_n1_to_nc(YL)\n        YU = read_data.label_n1_to_nc(YU)\n    \n    feature_order, time_dual = fun(XL, YL, XU, output_file_name=output_file_name)\n    \n    X,Y = evaluate.select_data(XL_train, YL_train, XU_train, YU_train,\\\n                           feature_order, sel_num=sel_num)\n    a = evaluate.run_acc(X,Y)\n    print(\"accuracy\", \":\", a)\n    return feature_order, time_dual, a but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_list(list_of_numbers):\n    # calculates the sum of a list of numbers\n    result = 0\n    for number in list_of_numbers:\n        result += number\n    return int(result) # convert to an integer before returning the result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\nairports = pd.read_csv('/path/to/airports/csv/file.csv')\ntop_airports = airports.sort_values('Total_Arrivals', ascending=False).head(2)\nprint(top_airports) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def caesar_encrypt(plain_text, shift): \n    cipher = ''\n    for char in plain_text: \n        if char == ' ': \n            cipher = cipher + char \n        elif  char.isupper(): \n            cipher = cipher + chr((ord(char) + shift - 65) % 26 + 65) \n  \n        else: \n            cipher = cipher + chr((ord(char) + shift - 97) % 26 + 97) \n  \n    return cipher \n  \n\nresult = caesar_encrypt(plain_text, 3)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_by_second_item(lst):\n    return sorted(lst, key=lambda x:x[1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_to_target(lst, target):\n  result = []\n  for i in range(len(lst)):\n    for j in range(i+1, len(lst)):\n      if lst[i] + lst[j] == target:\n        result.append((lst[i], lst[j]))\n  \n  return result\n\nlst = [2, 5, 3, 8, 11] \ntarget = 9\n\nprint(sum_to_target(lst, target)) # [(2, 7), (3, 6), (5, 4)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def separate_even_odd(arr):\n    even = []\n    odd = []\n    for num in arr:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return even, odd\n \neven, odd = separate_even_odd([1, 2, 3, 4, 5, 6])\nprint('Even numbers:', even)\nprint('Odd numbers:', odd) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport string\n\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.tokenize import word_tokenize\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\ndata = [\n    {\n        \"text\": \"FREE for 1st week! No1 Nokia tone 4 ur mob every week just text NOKIA to 87077 Try4 Free 3xT/Stop\",\n        \"label\": \"spam\"\n    },\n    {\n        \"text\": \"WINNER!! As a valued network customer you have been selected to receivea \u00a3900 prize reward. To claim call 09061774519.\",\n        \"label\": \"spam\"\n    },\n    {\n      \n        \"text\": \"Closing on Tuesday for half term break.\",\n        \"label\": \"ham\"\n    }\n]\n\n# Preprocessing\nlemmatizer = WordNetLemmatizer()\n\ndef preprocess_text(text):\n    # Remove punctuation\n    clean_text = [char for char in text if char not in string.punctuation]\n    # Get the word tokens\n    clean_text = ''.join(clean_text)\n    word_tokens = word_tokenize(clean_text)\n    # Removing Stopwords\n    filtered_words = [word for word in word_tokens if word not in stopwords.words('english')]\n    # Lemmatizing\n    lemmatized_words = [lemmatizer.lemmatize(word) for word in filtered_words]\n    clean_sent = ' '.join(lemmatized_words)\n    return clean_sent\n\n# Feature engineering \ntf_transform = TfidfVectorizer(stop_words = 'english', preprocessor = preprocess_text)\nX = tf_transform.fit_transform(df['text'])\ny = df['label']\n\n# Model training\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n\n# Model evaluation\nprediction = model.predict(X_test)\nprint('Accuracy: %0.2f  ' % (model.score(X_test, y_test) * 100)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n \n# Function to generate random points\ndef generate_random_point():\n    x = random.uniform(-1, 1)\n    y = random.uniform(-1, 1)\n    return (x, y)\n \n# Function to calculate Pi\ndef calculate_pi(num_samples):\n    # Number of points inside the circle\n    num_inside = 0\n    for i in range(num_samples):\n        # Generate a random point  \n        point = generate_random_point()\n        # Check if the point is inside the circle\n        if (point[0]**2 + point[1]**2 <= 1):\n            num_inside += 1\n    # Calculate pi\n    return 4*num_inside/num_samples but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nimport numpy as np\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef sentiment_analyzer(text):\n sid = SentimentIntensityAnalyzer()\n score = sid.polarity_scores(text)\n return score\n\n# Example test\nsentiment_analyzer('This is a good day!')\n# {'neg': 0.0, 'neu': 0.508, 'pos': 0.492, 'compound': 0.4404} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_array(arr): \n\tasc_arr = arr.copy() \n\tasc_arr.sort() \n\n\tdsc_arr = arr.copy()\n\tdsc_arr.sort(reverse=True)\n \n\treturn asc_arr, dsc_arr\n\nasc_arr, dsc_arr = sort_array([3, 5, 8, 9, 0, 4, 1])\nprint(\"Sorted in ascending order:\", asc_arr)\nprint(\"Sorted in descending order:\", dsc_arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_integers(a, b): \n    return a + b \n    \n# Driver Program \na = 4\nb = 5\n\nprint(\"Sum of {} and {} is: {}\".format(a, b, sum_integers(a, b))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def difference(string1, string2):\n  new_string = ''\n  \n  for char in string2:\n    if char not in string1:\n      new_string += char\n      \n  return new_string\n\nstring1 = 'jello'\nstring2 = 'hello'\n\nprint(difference(string1, string2)) # Output: 'e' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Context:\n def __init__(self):\n self.data = {}\n\n def set(self, key, value):\n self.data[key] = value\n\n def get(self, key):\n return self.data.get(key)\n \n def clear(self):\n self.data = {}\n \n \ncontext = Context()\n \ndef foo():\n context.set('name', 'John')\n \ndef bar():\n print(context.get('name'))\n \n foo()\n bar() # prints 'John' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\n# Get the input array\narr = [1,-2,3,4,-5]\n\n# Optimize the array so that the sum of elements is maximized\n# and all the elements are greater than 0\nnew_arr = np.max(arr,0)\n\n# Print the optimized array\nprint(\"Optimized Array : \",*new_arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_element(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i \n\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef extract_numbers(string): \n    numbers = re.findall('\\d+', string)\n    return numbers\n\nstring = \"The 3 monkeys had 2 apples\"\nprint(extract_numbers(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pymysql\n\n# Connect to the database\nconn = pymysql.connect(host='localhost',\n user='username', password='password',\n db='my_database')\n\n# Create a cursor\ncursor = conn.cursor()\n\n# Execute the query\ncursor.execute('SHOW TABLES')\n\n# Fetch and print out the list of tables\ntables = cursor.fetchall()\nfor table in tables:\n print(table)\n\n# Close the connection\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def contains_python(text):\n    return \"python\" in text but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import http.server\n\nclass RequestHandler(http.server.BaseHTTPRequestHandler):\n\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type','text/html')\n        self.end_headers()\n        self.wfile.write(b'<html><body><h1>Hello World!</h1></body></html>')\n\nif __name__ == '__main__':\n    server = http.server.HTTPServer(('localhost', 8080), RequestHandler)\n    print('Starting server, use <Ctrl-C> to stop')\n    server.serve_forever() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(number):\n    if number <= 1:\n        return False\n    for i in range(2, number):\n        if number % i == 0:\n            return False\n    return True\n\ndef print_primes(upper_limit):\n    for i in range(2, upper_limit+1):\n        if is_prime(i):\n            print(i)\n\nprint_primes(25) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: python3 hello.py\n# output: Hello, World! but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def arrayProduct():\n    # Create an empty array\n    arr = [] \n  \n    # Ask the user to input 10 numbers\n    print(\"Enter 10 numbers: \") \n    for i in range(10): \n        arr.append(int(input())) \n  \n    product = 1\n  \n    # calculate the product of all the  \n    # elements of the array\n    for i in range(10): \n        product = product * arr[i] \n  \n    # Print the product of the array\n    print(\"Product of the array elements is: \", product) \n  \n# Driver code \narrayProduct() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\n\n# Function to detect anagrams\ndef detect_anagrams(words):\n    # Iterate over the list of words\n    for i in range(len(words)-1):\n        # Create a list to store anagrams\n        anagrams = [words[i]]\n        # Iterate over the rest of the words\n        for j in range(i + 1, len(words)):\n            # Check if two words are anagrams\n            if sorted(words[i]) == sorted(words[j]):\n                anagrams.append(words[j])\n        # Check if anagrams were found\n        if len(anagrams) > 1:\n            print(\"The anagrams are: \" + str(anagrams))\n\n# Input words\nwords = [\"canoe\", \"fez\", \"act\", \"cat\"]\n\n# Call the function\ndetect_anagrams(words)\n\"\"\"\nThe anagrams are: ['canoe', 'act']\nThe anagrams are: ['cat']\n\"\"\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nrand_nums = [random.randint(1,10) for x in range(5)]\nprint(rand_nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacciNum(n): \n    if n <= 1: \n        return n \n    else: \n        return (fibonacciNum(n-1) + fibonacciNum(n-2)) \n\nn = 8\nresult = fibonacciNum(n) \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, render_template\nimport sqlite3\n\napp = Flask(name)\n\n@app.route('/', methods=['GET'])\ndef main():\n return render_template('main.html')\n\n@app.route('/search', methods=['POST'])\ndef search():\n conn = sqlite3.connect('database.db')\n c = conn.cursor()\n\n keyword = request.form.get('keyword')\n c.execute('SELECT * FROM table WHERE field LIKE \"%{}%\"'.format(keyword))\n results = c.fetchall()\n\n return render_template('search.html', results=results)\n\nif name == 'main':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_length(text):\n    print(\"Length of text is \" + str(len(text))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_sum_of_odd_numbers(max_number):\n    \n    sum_of_odd_numbers = 0\n    for num in range(1, max_number + 1):\n        if num % 2 != 0:\n            sum_of_odd_numbers += num\n    return sum_of_odd_numbers\n\nprint(calculate_sum_of_odd_numbers(15)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: nums = [11, 12, 15, 20, 56]\n\ntotal = 0\nfor num in nums:\n    total += num\n \nprint(total) # 110 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_sum(n): \n   return n * (n + 1) // 2\n  \nprint(find_sum(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply_matrices(m1, m2):\n    result = []\n    for row_index, row in enumerate(m1):\n        new_row = []\n        for col_index in range(len(m2[0])):\n            sum_result = 0\n            for row2_index, row2 in enumerate(m2):\n                sum_result += row[row2_index] * row2[col_index]\n            new_row.append(sum_result)\n        result.append(new_row)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_sort(arr): \n    if len(arr) > 1: \n        mid = len(arr)//2\n        L = arr[:mid]  \n        R = arr[mid:]   \n  \n        merge_sort(L)  \n        merge_sort(R)  \n  \n        i = j = k = 0\n          \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                arr[k] = L[i] \n                i+= 1\n            else: \n                arr[k] = R[j] \n                j+= 1\n            k+= 1\n          \n        while i < len(L): \n            arr[k] = L[i] \n            i+= 1\n            k+= 1\n          \n        while j < len(R): \n            arr[k] = R[j] \n            j+= 1\n            k+= 1\n\n# main program\narr = [7, 3, 5, 8, 2, 9, 1, 4]\nmerge_sort(arr)\nprint(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sequence = [3, 2, 5, 1, 9]\n\n# finding the largest number\nmax_num = max(sequence)\n\n# finding the index of the largest number in the sequence\nindex = sequence.index(max_num)\n\nprint(\"The largest number in the sequence is:\", max_num)\nprint(\"The position of the largest number in the sequence is:\", index) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def func(string): \n    return [s.upper() for s in string]\n\nlist_out = func(\"hello\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: y = x**2 + 7*x + 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_to_shell_command(string):\n    split_string = string.split()\n    command_name = split_string[0]\n    input_args = split_string[1:]\n    command_args = ''\n    for arg in input_args:\n        command_args += f'\"{arg}\"' + ' '\n    return f'{command_name} {command_args}' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Java and Python are two of the most popular programming languages in the world. Java is a statically-typed, object-oriented language, while Python is a dynamically-typed, interpreted language. Java programs tend to be faster than Python programs as it runs directly on the hardware platform and sacrifices flexibility for speed. Python is easier to learn and has a larger number of libraries, making it more versatile and simpler to write programs. However, due to the lack of performance optimization, Python is less efficient than Java. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\n# Connect the remote database\nurl = \"http://{database_url}/connect\"\ndata = {\n   'username': 'John',\n   'password': '12345'\n}\n\nresponse = requests.post(url, data=data)\n\n# Get user data\nurl = \"http://{database_url}/user/data\"\nresponse = requests.get(url)\n\n# Print user data\nprint(response.json()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from http.server import HTTPServer, BaseHTTPRequestHandler\n\nclass HelloWorldHandler(BaseHTTPRequestHandler):\n def do_GET(self):\n self.send_response(200)\n self.end_headers()\n self.wfile.write(b'Hello World!')\n\nserver = HTTPServer(('', 8080), HelloWorldHandler)\nserver.serve_forever() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseString(str): \n  s = \"\" \n  for i in str: \n    s = i + s\n  return s \n\nprint(reverseString('Hello World!'))\t# Output: !dlroW olleH but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_armstrong_numbers():\n    armstrong_nums = []\n    for num in range (0, 1000):\n        digits_sum = 0\n        temp = num\n        \n        while temp > 0:\n            digit = temp % 10\n            digits_sum += digit ** 3\n            temp //= 10\n\n        if num == digits_sum:\n            armstrong_nums.append(num)\n    return armstrong_nums but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = 'https://www.example.com'\nword_list = ['cat', 'dog', 'bird']\n\nr = requests.get(url).text\nfor word in word_list:\n if word in r:\n  print('Word \"{}\" found on the given URL'.format(word))\nelse:\n  print('Word \"{}\" not found the given URL'.format(word)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Python solution:\n\nnum = int(input('Enter a number: '))\nsum = 0\n\nwhile num >= 0:\n    sum += num\n    num = int(input('Enter a number: '))\n\nprint('The sum is', sum) but is not the same. just give one example and only return the code."}
