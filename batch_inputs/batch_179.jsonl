{"prompt": "make some code that functions the same as the following code: def factorial(x):\n    if x <= 1:\n        return 1\n    return x * factorial(x - 1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nlis = [1, 2, 3, 4, 5]\nrandom.shuffle(lis)\nprint(lis) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def detect_plagiarism(txt1, txt2):\n txt1_words = txt1.split(' ')\n txt2_words = txt2.split(' ')\n\n num_common_words = len(set(txt1_words) & set(txt2_words))\n total_words = len(txt1_words) + len(txt2_words)\n score = 2 * num_common_words / total_words\n\n return score\n\ntxt1 = 'This is an example of text I just made up.'\ntxt2 = 'This is an example of text I wrote.'\n\nprint(detect_plagiarism(txt1, txt2))  # Output: 0.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_strings(strings):\n  return sorted(strings) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef is_valid_ip(ip):\n    #https://www.regular-expressions.info/ip.html\n    pattern = r\"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$\"\n    matcher = re.match(pattern, ip)\n    if matcher:\n        return True\n    else:\n        return False\n\nis_ip_valid = is_valid_ip(\"192.168.0.1\")\nif is_ip_valid:\n    print(\"IP is valid\")\nelse:\n    print(\"IP is not valid\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(string1, string2):\n  # Removing spaces from both strings\n    string1 = string1.replace(' ', '')\n    string2 = string2.replace(' ', '')\n \n    # Calculating lengths of both strings\n    n1 = len(string1)\n    n2 = len(string2)\n \n    # Comparing lengths of both strings\n    if n1 != n2:\n        return False\n \n    # Sorting strings\n    string1 = sorted(string1)\n    string2 = sorted(string2)\n \n    # Comparing both strings\n    for i in range(0, n1):\n        if string1[i] != string2[i]:\n            return False\n \n    return True\n \n# Driver program\nstring1 = \"cat\";\nstring2 = \"tac\";\n \n# Calling for anagram detection\nif is_anagram(string1, string2):\n    print(\"Yes\")\nelse:\n    print(\"No\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quicksort(nums):\n    if len(nums) <= 1:\n        return nums\n \n    pivot = nums[len(nums) // 2]\n    left = [x for x in nums if x < pivot]\n    middle = [x for x in nums if x == pivot]\n    right = [x for x in nums if x > pivot]\n \n    return quicksort(left) + middle + quicksort(right)\n \ninput_list = [5, 4, 3, 1, 2]\nresult = quicksort(input_list)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\n\ndef add(num1, num2):\n  return num1 + num2\n\nif __name__ == '__main__':\n  num1 = int(sys.argv[1])\n  num2 = int(sys.argv[2])\n  print(add(num1, num2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_vowels(str):\n count = 0\n vowels = set(\"aeiou\")\n for i in str:\n  if i in vowels:\n   count += 1\n return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class BoardGame:\n \n    # Attributes\n    num_players = 0\n    game_state = None\n    max_turns = 0\n \n    # Methods\n \n    def __init__(self, num_players, max_turns):\n        self.num_players = num_players\n        self.max_turns = max_turns\n        self.game_state = self.initialize_state()\n \n    def initialize_state(self):\n        # Initialize variables, boards, etc.\n        return # BoardGame's state \n \n    def play_turn(self):\n        # Perform actions of current turn\n        self.game_state = # Game's state after turn\n \n    def check_end_game(self):\n        # Determine if max turns has reached\n        return # True or False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The Factory Pattern is a design pattern that can be used to create an efficient Python program. This pattern is used when a program needs to create an object based on a specific type of input. For example, if an application needs to create objects for different types of data, it can use the Factory Pattern to create these objects in a more efficient manner. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_list(my_list):\n\ttotal = 0\n\tfor i in my_list:\n\t\ttotal += i\n\treturn total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.tree import DecisionTreeClassifier\n\nX = np.matrix('2 1 1; 2 2 0; 2 0 1; 1 1 1; 1 0 1; 1 2 0; 0 2 0; 0 1 1; 0 0 1')\nY = np.array([1, 0, 1, 1, 1, 0, 0, 1, 1])\n\nmodel = DecisionTreeClassifier().fit(X,Y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\nphonePattern = re.compile(r'^(\\+\\d{1,2}\\s)?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}$') \n\ndef validate_phone(phone_number): \n    if phone_pattern.search(phone_number): \n        return true\n    else: \n        return false but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(arr):\n max = arr[0]\n for i in range(len(arr)):\n if arr[i] > max:\n max = arr[i]\n return max but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compute_std_dev(nums): \n\tmean = sum(nums) / len(nums)\n\tvariance = 0\n\tfor n in nums:\n\t\tvariance += (n - mean) ** 2\n\tvariance /= len(nums)\n\n\tstd_dev = variance ** 0.5\n\treturn std_dev but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn import tree\n\n# features (characteristicsof animals)\n# 0 for false, 1 for true\nfeatures = [[1, 0], [1, 1], [0, 1], [0, 0]]\n\n# labels of features (types of animals)\nlabels = [0, 0, 1, 1]\n\n# decision tree classifier\nclf = tree.DecisionTreeClassifier()\n\n# train the classifier with the data\nclf = clf.fit(features, labels)\n\n# test a prediction\nprediction = clf.predict([[1, 0]])\n\n# print the result\nprint(prediction) # [0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: creds = {\n \"username\": \"testuser\",\n \"password\": \"test123\"\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/message', methods=['POST'])\ndef save_message():\n    message = request.data\n    # save the message to database\n\n@app.route('/message', methods=['GET'])\ndef retrieve_message():\n    message = db.get_message()\n    return message\n\nif __name__ == '__main__':\n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_sorted(arr):\n    return arr == sorted(arr)\n\nprint(is_sorted([1, 2, 3, 4])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def median(array):\n    sorted_array = sorted(array)\n    length = len(sorted_array)\n    if (length % 2 == 0):\n        median = (sorted_array[length//2] + sorted_array[length//2 - 1]) / 2\n    else:\n        median = sorted_array[length//2]\n\n    return median\n\narray = [5, 4, 3, 2, 1]\nprint(median(array))  # Output: 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def intersection(list1, list2): \n    return list(set(list1) & set(list2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import datasets, linear_model\n\n# Loading the dataset\nX_train, y_train = datasets.load_wine(return_X_y=True)\n\n# Creating a Logistic Regression model\nlogreg = linear_model.LogisticRegression()\n\n# Training the model\nlogreg.fit(X_train, y_train)\n\n# Making predictions\npredictions = logreg.predict(X_test) \n\n# Evaluating the model\nprint(\"Accuracy: \", metrics.accuracy_score(y_test, predictions)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: a = 10\nb = 15\nc = a + b\n\nprint(c) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # calculate the number of elements in a set\n\nmy_set = {1, 2, 3, 4, 5}\nnum_elements = len(my_set)\n\nprint(\"Number of elements in the set:\", num_elements) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.model_selection import train_test_split\n\n# Read the data\ndf = pd.read_csv('data.csv')\n\n# Split the data into features and labels\nfeatures = df['text']\nlabels = df['label']\n\n# Extract features\nvectorizer = TfidfVectorizer()\nfeatures_transformed = vectorizer.fit_transform(features)\n\n# Split into train and test datasets\nx_train, x_test, y_train, y_test = train_test_split(features_transformed, labels, test_size = 0.2)\n\n# Build the classification model\nmodel = MultinomialNB()\nmodel.fit(x_train, y_train)\n\n# Make predictions\ny_pred = model.predict(x_test)\n\n# Calculate the accuracy\naccuracy = np.mean(y_pred == y_test)\n\n# Print the accuracy\nprint(\"Model accuracy: {}%\".format(accuracy*100)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_average(nums):\n    return float(sum(nums)) / float(len(nums)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply_matrix(matrixA, matrixB): \n    if len(matrixA[0]) != len(matrixB): \n        return \"Invalid matrices. Cannot multiply.\" \n    else: \n        result_rows = len(matrixA) \n        result_columns = len(matrixB[0]) \n        result = [[0 for x in range(result_columns)] for y in range(result_rows)] \n\n        # iterate through rows of matrixA \n        for i in range(len(matrixA)): \n            # iterate through columns of matrixB \n            for j in range(len(matrixB[0])): \n                # iterate through rows of matrixB \n                for k in range(len(matrixB)): \n                    result[i][j] += matrixA[i][k] * matrixB[k][j] \n\n        return result \n\nX = [[3, 2], \n     [4, 5]]\nY = [[4, 5, 6], \n     [6, 7, 8]]\n\nresult = multiply_matrix(X, Y)  \nfor r in result: \n    print(r) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print('Hello World!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Initialize a list\nfibonacci_numbers = [1, 1]\n\n# Generate the first 10 fibonacci numbers\nfor i in range(2, 10):\n    fibonacci_numbers.append(fibonacci_numbers[i - 1] + fibonacci_numbers[i - 2])\n\nprint(fibonacci_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import smtplib\n\ndef send_notification(email):\n    '''This function will send automated email notifications to customers when their orders have been delivered'''\n    sender = eamil@example.com\n    receiver = email\n    message = f\"Your order has been delivered. Thank you for choosing us. \"\n    try:\n        smtpObj = smtplib.SMTP('smtp.example.com', 587)\n        smtpObj.login('email@example.com', 'password')\n        smtpObj.sendmail(sender, receiver, message)\n        print('Notification sent successfully')\n    except Exception as e:\n        print('Could not send notification.')\n        print(e) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import modules\nimport speech_recognition as sr\n\n# Record audio\nr = sr.Recognizer()\nwith sr.Microphone() as source:\n print('Say something!')\n audio = r.listen(source)\n\n# Transform the audio file into text\ntext = r.recognize_google(audio)\n\nprint('You said: ', text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.tokenize import word_tokenize\nimport pycparser\nimport pylox\nimport slime\nimport os\n\nclass CodeGenerator:\n \n def __init__(self, language):\n self.language = language\n \n def generate(self, prompt):\n # Tokenize the prompt\n tokens = word_tokenize(prompt)\n \n # Parse the tokens\n parser = Parser(tokens)\n tree = parser.parse()\n \n # Generate code\n if self.language == 'python':\n code_generator = pycparser.CPythonGenerator()\n code = code_generator.generate_code(tree)\n \n elif self.language == 'javascript':\n code_generator = pylox.JavascriptGenerator()\n code = code_generator.generate_code(tree)\n \n elif self.language == 'java':\n code_generator = slime.JavaGenerator()\n code = code_generator.generate_code(tree)\n \n return code but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef simplify_user_input(user_input):\n    words = user_input.split(\" \")\n    filtered_words = [word for word in words if len(word) > 2]\n    return \" \".join(filtered_words)\n\nuser_input = \"I have a great idea   !    Let's  do it\"\nsimplified_string = simplify_user_input(user_input) # \"idea great Let's do\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_list(length):\n    lst = []\n    for i in range(length):\n        lst.append(random.randint(0, 100))\n    return lst but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import necessary packages\nimport pandas as pd\nimport numpy as np\nimport scipy as sp\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# read in data\ndata = pd.read_csv('tweets.csv')\n\n# transform data into feature vector\nvect = CountVectorizer()\nX = vect.fit_transform(data.tweet)\n\n# define target\ny = data.label\n\n# train model\nmodel = MultinomialNB()\nmodel.fit(X,y)\n\n# classify new tweets\nnew_tweets = [\"You are so stupid\", \"I totally hate you\"]\nX_new = vect.transform(new_tweets)\ny_pred = model.predict(X_new)\nprint(y_pred) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def two_sum(nums, target):\n    # Create a Map to store the lookup\n    lookup = {}\n    # Loop over the input array\n    for i, num in enumerate(nums):\n        # Check if the target-num is present in the lookup\n        if target-num in lookup:\n            return [lookup[target-num], i]\n        # Otherwise, add the num to the lookup\n        lookup[num] = i\n\nnums = [2, 7, 11, 15]\ntarget = 9\n\nprint(two_sum(nums, target)) # [0, 1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import smtplib\n\ndef send_email(sender, recipient, subject, message):\n    # set up the audience and message\n    message = \"\"\"\\\n\nFrom: %s\nTo: %s\nSubject: %s\n\n%s\n\"\"\" % (sender, recipient, subject, message)\n\n    # set up the SMTP connection and send the message\n    session = smtplib.SMTP('smtp.example.com', 25)\n    session.login(\"sender_username\", \"sender_password\")\n    session.sendmail(sender, recipient, message)\n    session.quit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_dictionary(list1, list2):\n  \"\"\"Generate a dictionary from two lists\"\"\"\n  # Check if both the lists have the same length\n  if len(list1) == len(list2):\n    # Create a dictionary\n    dictionary = {}\n    # Create a loop\n    for i in range(len(list1)):\n      # Map the corresponding elements of the lists\n      dictionary[list1[i]] = list2[i]\n    return dictionary\n  else:\n    raise Exception('Two lists must have the same length')\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3]\n    list2 = ['a', 'b', 'c']\n    result = generate_dictionary(list1, list2)\n    print('Dictionary from two lists: ', result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for word in list_of_strings:\n    print(word) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(x, y):\n \n    # Using Euclidean algorithm \n    while(y): \n        x, y = y, x % y \n  \n    return x \n  \n# Driver Code \na = 24\nb = 32\n  \ngcd = gcd(a, b) \nprint(\"GCD of\", a, \"and\", b, \"is:\", gcd) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: number_list = [-5, 0, 4, 78, -3]\nresult = [num ** 2 for num in number_list if num >= 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Str = \"apple, banana, orange, grapes\"\nmy_list = Str.split(\", \")\n\n# Output\nmy_list = [\"apple\",\"banana\",\"orange\",\"grapes\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def neighbors(cell):\n x, y = cell\n nb = [(x-1, y-1), (x, y-1), (x+1, y-1), (x-1, y), (x+1, y), (x-1, y+1), (x, y+1), (x+1, y+1)]\n return [nb for nb in nb if 0 <= nb[0] < 8 and 0 <= nb[1] < 8]\n\ndef conway(world):\n new_world = set()\n for cell in world:\n  total = sum(1 for neighbor in neighbors(cell) if neighbor in world)\n  if (total == 3) or (total == 2 and cell in world):\n   new_world.add(cell)\n return new_world\n\ndef main():\n world = {(0,0), (0, 1), (1, 0)}\n print('Initial World:', *world)\n while True:\n  world = conway(world)\n  print('Next World:', *world)\n\nif __name__ == '__main__':\n main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef shuffle_list(lst):\n    random.shuffle(lst)\n    return lst\n\nprint(shuffle_list([3, 8, 2, 5, 4])) # prints [2, 3, 5, 4, 8] or any other combination but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Importing libraries\nfrom keras import models, layers\nfrom sklearn.model_selection import GridSearchCV\nimport numpy as np\n\n# Creating model\nnum_inputs = X_train.shape[1]\nmodel = models.Sequential()\nmodel.add(layers.Dense(10, activation='relu', input_shape=(num_inputs,)))\nmodel.add(layers.Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\n# Creating grid search parameters\nparams = {'optimizer':['sgd', 'adam', 'rmsprop'],\n          'batch_size':[8, 16, 32, 64],\n          'epochs':[10, 20]}\n\n# Running grid search\ngrid_search = GridSearchCV(estimator=model,\n                           param_grid=params)\ngrid_search_results = grid_search.fit(X_train, y_train)\n\n# Outputting best parameters\nprint(\"Best parameters: {}\".format(grid_search_results.best_params_)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Copy the link to the website\nurl = 'https://www.example.com/'\n\n# Make a request for the page\nr = requests.get(url)\n\n# Parse the response using BeautifulSoup\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# Extract the text from the page\ntext = soup.find_all(text=True)\n\n# Output the text\nfor t in text:\n print(t.strip()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(0, 11):\n if i % 2 != 0:\n  print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printFibo(n):\n    first = 0\n    second = 1\n\n    print(first)\n    print(second)\n\n    for i in range(2, n):\n        next = first + second\n        print(next)\n        first = second\n        second = next\n\n#Test\nprintFibo(5) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def polar_to_cartesian(r, theta):\n    x = r * np.cos(theta)\n    y = r * np.sin(theta)\n    return x, y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math \n\ndef closest_pair(points):\n    # Initialize minimum distance \n    min_dist = float(\"inf\")\n\n    # Iterate over the points \n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n\n            # Calculate the euclidean distance\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            dist = math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\n            \n            # Update minimum distance if needed\n            if dist < min_dist:\n                min_dist = dist\n                closest_pair = (x1, y1), (x2, y2)\n\n    return closest_pair but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def concat_strings(str1, str2, str3):\n  return str1 + str2 + str3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def lambda_handler(event, context):\n    numbers = event['numbers']\n    result = [num ** 2 for num in numbers if num % 2 == 0]\n    return {'result': result} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The \"try\" block is used to test a piece of code to see if any errors occur while executing that code. If an error occurs, the code in the \"except\" block will be executed. The \"finally\" block is used to execute code regardless of whether an error occurs or not. The \"finally\" block should be used for cleanup tasks, such as releasing resources or closing files. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findUniqueCombos(targetSum): \n  result = []\n  for i in range(targetSum+1): \n    for j in range(i+1): \n      for k in range(j+1): \n        if i + j + k == targetSum: \n          uniqueCombo = [i, j, k] \n          result.append(uniqueCombo) \n  \n  return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Node class\nclass Node: \n    def __init__(self, val): \n        self.val = val\n        self.left = None\n        self.right = None\n\n# Function to construct a Binary Search Tree  \n# from a given array\ndef constructBst(arr): \n    # check if list is empty or not \n    if (len(arr) == 0): \n        return None\n  \n    # create a new root \n    root = Node(arr[0]) \n    arr.pop(0) \n  \n    # assign left and right child  \n    # of root node \n    left_arr, right_arr = [], []\n    for item in arr: \n        if (item <= root.val): \n            left_arr.append(item) \n        else: \n            right_arr.append(item)\n              \n    # recursively construct  \n    # left and right sub tree \n    root.left = constructBst(left_arr) \n    root.right = constructBst(right_arr) \n    return root \n\n# Function to traverse a Binary Search Tree  \n# and print its elements in inorder \ndef inorderTraversal(root): \n    if (root != None): \n        inorderTraversal(root.left) \n        print(root.val, end = \" \") \n        inorderTraversal(root.right) \n\n# Driver Code  \nif __name__ == '__main__': \n    arr =[4, 3, 8, 15, 1, 5]\n    root = constructBst(arr)  \n    inorderTraversal(root) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n \n# Make the API request\nurl = 'https://restcountries.eu/rest/v2/all'\nr = requests.get(url)\ndata = r.json()\n \n# Initialize an empty list for the results\nresults = []\n \n# Extract the relevant information and append to the list\nfor country in data:\n  results.append((country['name'], country['capital']))\n \n# Print the results\nfor result in results:\n print(f'{result[0]}: {result[1]}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Input array\narr = [\"Hello\", \"World\"]\n\n# Loop through each string\nfor s in arr:\n # Print the string in reverse order\n print(s[::-1])\n\n# Output\nolleH\ndlroW but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def read_csv(filename):\n    try:\n        with open(filename, 'r') as f: \n            data = f.readlines()\n            return data\n    except FileNotFoundError: \n        print(\"File not found. Please provide a valid filename\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n): \n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nresult = factorial(5)\nprint(result) # prints 120 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MYStack:\n    def __init__(self):\n        self._items = []\n\n    def push(self, item):\n        self._items.append(item)\n\n    def pop(self):\n        return self._items.pop()\n\n    def size(self):\n        return len(self._items)\n\n    def is_empty(self):\n        return self.size() == 0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_asc(lst):\n    return sorted(lst) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter as tk\n\nroot = tk.Tk()\n\ndef displayMessage():\n    print(\"Button was pressed!\")\n\nbutton = tk.Button(root,text=\"Press Me\",width=25,command=displayMessage)\nbutton.pack()\n\nroot.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: grammar = {\n \"not\": [\"do not\", \"doesn't\", \"no\"],\n \"verb\": [\"play\", \"study\", \"work\"],\n \"object\": [\"soccer\", \"math\", \"the guitar\"]\n}\n\nimport random\n\ndef generate():\n not_ = random.choice(grammar[\"not\"])\n verb = random.choice(grammar[\"verb\"])\n obj = random.choice(grammar[\"object\"])\n return f\"{not_} {verb} {obj}.\"\n \nprint(generate()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Date:\n    # Constructor\n    def __init__(self, day=1, month=1, year=1990):\n        self.day = day\n        self.month = month\n        self.year = year\n    \n    # String representation\n    def __str__(self):\n        return '%02d/%02d/%4d' % (self.day, self.month, self.year) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_and_min(a,b):\n    \"\"\"Function to find the maximum and minimum of two given numbers.\"\"\"\n    max = a if a > b else b\n    min = a if a < b else b\n    return max, min\n\n#Example:\nprint(\"Maximum is: \",max_and_min(a,b)[0])\nprint(\"Minimum is: \",max_and_min(a,b)[1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import taiko\n\n# Define the intents\nintents = {\n    'greeting': [\"Hi, I'm here to answer any questions you have about programming languages.\"],\n    'python': [\"Python is a high-level programming language, often used for creating dynamic web applications and data science.\"],\n    'javascript': [\"JavaScript is a scripting language for browsers used for creating dynamic web applications.\"],\n    'java': [\"Java is a general-purpose, object-oriented programming language often used for creating large-scale enterprise applications.\"]\n}\n\n# Define a function to check if an intent is present\ndef check_intent(message):\n    for intent, phrases in intents.items():\n        for phrase in phrases:\n            if phrase.lower() in message.lower():\n                return intent\n    return None\n\n# Initialize the Taiko bot\nbot = taiko.Bot()\nbot.set_greeting_message(\"Hello, I'm a chatbot that can answer questions about programming languages! What do you want to know about?\")\n\n# Set the response handler\n@bot.handle\ndef handle_message(message):\n    intent = check_intent(message)\n    if intent in intents:\n        return intents[intent]\n    else:\n        return \"I'm sorry, I didn't understand that. Could you please rephrase your question?\"\n\n# Run the bot\nbot.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\n\n# Load the data\ndata = pd.read_csv('data.csv')\n\n# Split into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(data['Text'], data['Label'], test_size=0.2)\n\n# Initialize a count vectorizer \ncount_vectorizer = CountVectorizer()\nX_train_counts = count_vectorizer.fit_transform(X_train)\nX_test_counts = count_vectorizer.transform(X_test)\n\n# Train a classifier\nclassifier = MultinomialNB()\nclassifier.fit(X_train_counts, y_train)\n\n# Make predictions\npredicted = classifier.predict(X_test_counts)\n\n# Evaluate accuracy\naccuracy = np.mean(predicted == y_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -*- coding: utf-8 -*-\n#\n# pwntools documentation build configuration file, created by\n# sphinx-quickstart on Wed May 28 15:00:52 2014.\n#\n# This file is execfile()d with the current directory set to its containing dir.\n#\n# Note that not all possible configuration values are present in this\n# autogenerated file.\n#\n# All configuration values have a default; values that are commented out\n# serve to show the default.\n\nimport os\nimport subprocess\nimport sys\n\nbuild_dash = tags.has('dash')\n\n# If extensions (or modules to document with autodoc) are in another directory,\n# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\nsys.path.insert(0, os.path.abspath('../..'))\n\nimport pwnlib\n\n# -- General configuration -----------------------------------------------------\n\n# If your documentation needs a minimal Sphinx version, state it here.\n#needs_sphinx = '1.0'\n\n# Add any Sphinx extension module names here, as strings. They can be extensions\n# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.\nextensions = [\n    'pwnlib.internal.dochelper',\n    'sphinx.ext.autodoc',\n    'sphinx.ext.doctest',\n    'sphinx.ext.linkcode',\n    'sphinx.ext.autosummary',\n    'sphinx.ext.coverage',\n    'sphinx.ext.todo',\n    'sphinx.ext.intersphinx',\n    'sphinxcontrib.autoprogram',\n    'sphinxcontrib.napoleon'\n]\n\ndoctest_global_setup = '''\nimport sys, os\nos.environ['PWNLIB_NOTERM'] = '1'\nos.environ['PWNLIB_RANDOMIZE'] = '0'\nimport pwnlib\npwnlib.context.context.reset_local()\npwnlib.context.ContextType.defaults['log_level'] = 'ERROR'\npwnlib.context.ContextType.defaults['randomize'] = False\npwnlib.term.text.when = 'never'\npwnlib.log.install_default_handler()\npwnlib.log.rootlogger.setLevel(1)\n\n# Sphinx modifies sys.stdout, and context.log_terminal has\n# a reference to the original instance.  We need to update\n# it for logging to be captured.\nclass stdout(object):\n    def __getattr__(self, name):\n        return getattr(sys.stdout, name)\n    def __setattr__(self, name, value):\n        return setattr(sys.stdout, name, value)\npwnlib.context.ContextType.defaults['log_console'] = stdout()\n'''\n\nautodoc_member_order = 'alphabetical'\n\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']\n\ndoctest_test_doctest_blocks = True\n\n# The suffix of source filenames.\nsource_suffix = '.rst'\n\n# The encoding of source files.\nsource_encoding = 'utf-8-sig'\n\n# The master toctree document.\nmaster_doc = 'index'\n\n# General information about the project.\nproject = u'pwntools'\ncopyright = u'2016, Gallopsled et al.'\n\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nrelease = pwnlib.__version__\nversion = release.rsplit('.', 1)[0]\n\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#language = \"zh_CN\"\n\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\nexclude_patterns = []\n\n# The reST default role (used for this markup: `text`) to use for all documents.\n#default_role = None\n\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n#add_module_names = True\n\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\n#show_authors = False\n\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n\n# A list of ignored prefixes for module index sorting.\n#modindex_common_prefix = []\n\n\n# -- Options for HTML output ---------------------------------------------------\n\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\nhtml_theme = 'sphinx_rtd_theme'\n\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#html_theme_options = {}\n\n# Add any paths that contain custom themes here, relative to this directory.\n#html_theme_path = []\n\n# The name for this set of Sphinx documents.  If None, it defaults to\n# \"<project> v<release> documentation\".\n#html_title = None\n\n# A shorter title for the navigation bar.  Default is the same as html_title.\n#html_short_title = None\n\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\n#html_logo = None\n\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\n#html_favicon = None\n\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = []\n\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n# using the given strftime format.\n#html_last_updated_fmt = '%b %d, %Y'\n\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.\n#html_use_smartypants = True\n\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n\n# If false, no module index is generated.\nhtml_domain_indices = not build_dash\n\n# If false, no index is generated.\nhtml_use_index = not build_dash\n\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n#html_show_sphinx = True\n\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n#html_show_copyright = True\n\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n\n# This is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = None\n\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'pwntoolsdoc'\n\n\n# -- Options for LaTeX output --------------------------------------------------\n\nlatex_elements = {\n# The paper size ('letterpaper' or 'a4paper').\n#'papersize': 'letterpaper',\n\n# The font size ('10pt', '11pt' or '12pt').\n#'pointsize': '10pt',\n\n# Additional stuff for the LaTeX preamble.\n#'preamble': '',\n}\n\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title, author, documentclass [howto/manual]).\nlatex_documents = [\n  ('index', 'pwntools.tex', u'pwntools Documentation',\n   u'2016, Gallopsled et al.', 'manual'),\n]\n\nintersphinx_mapping = {'python': ('https://docs.python.org/2.7', None),\n                       'paramiko': ('https://paramiko-docs.readthedocs.org/en/1.15/', None)}\n\n# The name of an image file (relative to this directory) to place at the top of\n# the title page.\n#latex_logo = None\n\n# For \"manual\" documents, if this is true, then toplevel headings are parts,\n# not chapters.\n#latex_use_parts = False\n\n# If true, show page references after internal links.\n#latex_show_pagerefs = False\n\n# If true, show URL addresses after external links.\n#latex_show_urls = False\n\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n\n# If false, no module index is generated.\n#latex_domain_indices = True\n\n\n# -- Options for manual page output --------------------------------------------\n\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    ('index', 'pwntools', u'pwntools Documentation',\n     [u'2016, Gallopsled et al.'], 1)\n]\n\n# If true, show URL addresses after external links.\n#man_show_urls = False\n\n\n# -- Options for Texinfo output ------------------------------------------------\n\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\ntexinfo_documents = [\n  ('index', 'pwntools', u'pwntools Documentation',\n   u'', 'pwntools', 'CTF exploit writing toolkit.',\n   'Miscellaneous'),\n]\n\n# Documents to append as an appendix to all manuals.\n#texinfo_appendices = []\n\n# If false, no module index is generated.\n#texinfo_domain_indices = True\n\n# How to display URL addresses: 'footnote', 'no', or 'inline'.\n#texinfo_show_urls = 'footnote'\n\nbranch = release\n\ntry:\n    git_branch = subprocess.check_output('git describe --tags', shell = True)\nexcept subprocess.CalledProcessError:\n    git_branch = '-'\n\ntry:\n    if '-' in git_branch:\n        branch = subprocess.check_output('git rev-parse HEAD', shell = True).strip()[:10]\nexcept subprocess.CalledProcessError:\n    pass\n\ndef linkcode_resolve(domain, info):\n    if domain != 'py':\n        return None\n    if not info['module']:\n        return None\n\n    import importlib, inspect, types\n    mod = importlib.import_module(info['module'])\n\n    # Try to find the value\n    val = mod\n    for k in info['fullname'].split('.'):\n        val = getattr(val, k, None)\n        if val == None:\n            break\n\n    # Special case for shellcraft\n    if info['module'].startswith('pwnlib.shellcraft.'):\n        filename = 'pwnlib/shellcraft/templates/%s' % val._relpath\n\n    # Case for everything else\n    else:\n        filename = info['module'].replace('.', '/') + '.py'\n\n        if isinstance(val, (types.ModuleType, types.ClassType, types.MethodType, types.FunctionType, types.TracebackType, types.FrameType, types.CodeType)):\n            try:\n                lines, first = inspect.getsourcelines(val)\n                filename += '#L%d-%d' % (first, first + len(lines) - 1)\n            except IOError:\n                pass\n\n    return \"https://github.com/Gallopsled/pwntools/blob/%s/%s\" % (branch, filename)\n\n\n# The readthedocs theme is used by the Dash generator. (Can be used for HTML too.)\n\nif build_dash:\n\n    # on_rtd is whether we are on readthedocs.org\n    on_rtd = os.environ.get('READTHEDOCS', None) == 'True'\n\n    if not on_rtd:  # only import and set the theme if we're building docs locally\n        import sphinx_rtd_theme\n        html_theme = 'sphinx_rtd_theme'\n        html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\n\n    # otherwise, readthedocs.org uses their theme by default, so no need to specify it\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from chatterbot import ChatBot\nfrom chatterbot.trainers import ListTrainer\n\nbot = ChatBot('Bot')\nbot.set_trainer(ListTrainer)\n\nconversation = [\n    'Hello',\n    'Hi there!',\n    'What is your name?',\n    'My name is Bot. Nice to meet you!'\n]\n\nbot.train(conversation)\n\nwhile True:\n    request = input('You: ')\n    response = bot.get_response(request)\n    print('Bot: ', response) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def apply_operations(dataset, operations):\n result = []\n for item in dataset:\n   item[0] = str(int(item[0]) - 1).upper()\n   item[1] = str(int(item[1]) - 1).upper()\n   result.append(item)\n return result\n\ndataset = [['Car', 'Red'], ['Bike', 'Blue'], ['Van', 'Green']]\noperations = [\"subtract 1 from each element and transform it to upper case\"]\n\nresult = apply_operations(dataset, operations)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def primeCounet(start, end):\n    count = 0\n    for num in range(start, end + 1): \n        if num > 1: \n            for i in range(2, num): \n                if (num % i) == 0: \n                    break \n            else: \n                count = count + 1\n    return count\n\nif __name__ == \"__main__\":\n    start = 10\n    end = 30\n    print(primeCounet(start, end)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def evaluateExpression(exp):\n  st = [] \n  exp = list(exp) \n\n  # Traverse the expression \n  for i in exp:\n    # If the current character in exp is a \n    # opening parenthesis, then push it  \n    # in stack \n    if i == \"(\": \n      st.append(i)\n\n    # If the current character in exp is a \n    # closing parenthesis, then pop from stack \n    elif i == \")\": \n      st.pop() \n      \n  # After complete traversal, if there \n  # is some starting parenthesis left in \n  # stack then \u201cnot balanced\u201d \n  if len(st) != 0:\n    return \"Not Balanced\"\n  else:\n    return \"Balanced\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def match_dict_keys(dict_1, dict_2):\n  new_dict = {}\n\n  for key in dict_1.keys():\n    if key in dict_2.keys():\n      new_dict[key] = (dict_1[key], dict_2[key])\n\n  return new_dict\n\nresult = match_dict_keys(dict_1, dict_2)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_fib(num):\n  if num == 0 or num == 1:\n    return True\n  first = 0\n  second = 1\n  while(num >= second):\n    if second == num:\n      return True\n    third = first + second\n    first = second\n    second = third\n  return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def smallest_of_list(nums):\n    smallest = float(\"inf\")\n    for num in nums:\n        if num < smallest:\n            smallest = num\n    return smallest\n\ndef largest_of_list(nums):\n    largest = float(\"-inf\")\n    for num in nums:\n        if num > largest:\n            largest = num\n    return largest\n\ndef avg_of_list(nums):\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum/len(nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_common_elements(set1, set2):\n    result = []\n    for element in set1:\n        if element in set2:\n            result.append(element)\n    \n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def addDecimals(a, b):\n    return a + b\n\nx = 3.4\ny = 2.6\nprint (addDecimals(x, y)) # 6.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Define a Feed-Forward Neural Network class in Python\nclass NeuralNetwork(object):\n\n    def __init__(self):\n        # Define the parameters of network\n        self.input_nodes = 0\n        self.hidden_nodes = 0\n        self.output_nodes = 0\n\n    def forward(self, inputs):\n        # Initialize the weights for the inputs and hidden layers\n        self.weights_input_to_hidden = np.random.normal(0.0, self.input_nodes**-0.5, \n                                       (self.input_nodes, self.hidden_nodes))\n\n        self.weights_hidden_to_output = np.random.normal(0.0, self.hidden_nodes**-0.5, \n                                       (self.hidden_nodes, self.output_nodes))\n\n        # Calculate signals going into hidden layer\n        hidden_inputs = np.dot(inputs, self.weights_input_to_hidden)\n        hidden_outputs = self.activation_function(hidden_inputs)\n        \n        # Calculate signals going into output layer\n        final_inputs = np.dot(hidden_outputs, self.weights_hidden_to_output)\n        final_outputs = final_inputs\n        \n        return final_outputs\n\n    def activation_function(self, x):\n        # Define a sigmoid activation function\n        return 1 / (1 + (np.exp(-x))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n\n    def get_name(self):\n        return self.name\n\n    def get_age(self):\n        return self.age\n\n    def get_gender(self):\n        return self.gender but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sequence = [\"Hello\", \"world\", \"Welcome\", \"to\", \"the\", \"Coding\", \"Revolution\"]\n\nsorted_sequence = sorted(sequence)\n\nfor word in sorted_sequence:\n    print(word) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_string(input_string): \n    return input_string.lower() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def create_dict(L):\n    dict = {}\n    for i in range(len(L)): \n        dict[L[i]] = i\n    return dict\n\ndict_list = dict(create_dict([\"a\",\"b\",\"c\"]))\nprint(dict_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: @app.route('/api/profile', methods=['GET'])\ndef get_user_profile():\n    user_id = request.args.get('user_id')\n    user = User.query.filter_by(id=user_id).first_or_404()\n    return jsonify({\n        'username': user.username,\n        'name': user.name,\n        'email': user.email\n    }) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\ndata = np.array([[50], [55], [53], [57], [52], [49], [54]]).reshape(-1, 1)\n\nmodel = LinearRegression()\nmodel.fit(data[:-1], data[1:])\n\npredicted_value = model.predict([[54]])\n\nprint(\"The trend of stock price next day:\", predicted_value[0][0])\n\n# Output: The trend of stock price next day: 53.428571429 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_palindrome(text):\n    longest_palindrome = \"\"\n    for index1, char1 in enumerate(text):\n        for index2 in range(len(text)-1, index1-1, -1):\n            if index2-index1+1 <= len(longest_palindrome):\n                break\n            if text[index1:index2+1] == text[index2:index1:-1]:\n                longest_palindrome = text[index1:index2+1]\n    return longest_palindrome but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_pair_sum(arr):\n    if len(arr) == 0:\n        return 0\n\n    max_sum = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_sum = max(max_sum, arr[i] + arr[j])\n    \n    return max_sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def validate_password(password, min_length, uppercase_required, special_character_required):\n  #check password length\n  if len(password) < min_length:\n    return False\n    \n  #check for uppercase\n  if uppercase_required and not any(char.isupper() for char in password):\n    return False\n    \n  #check for special characters\n  if special_character_required and not any(char.isalnum() for char in password):\n    return False\n  \n  #if all conditions are met, return True\n  return True\n  \nvalidate_password(password, min_length, uppercase_required, special_character_required) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_substring(string, old, new):\n  new_string = \"\"\n  l = len(old)\n  for i in range(len(string)-l+1):\n    if string[i:i+l] == old:\n      new_string += new\n    else:\n      new_string += string[i]\n  return new_string\n\nprint(replace_substring('Python is very old', 'old', 'new'))\n\n# Output: Python is very new but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: if cur_price > max_price:\n  max_price = cur_price but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Embedding, Dense, LSTM\n\n# For text data preprocessing\nfrom keras.preprocessing.text import Tokenizer\n\n# For splitting the data into train, test and validation sets\nfrom sklearn.model_selection import train_test_split\n\n# Initialize the tokenizer \ntokenizer = Tokenizer(num_words=None, lower=True)\n\n# Tokenize the text data\ntokenizer.fit_on_texts(tweets_data)\n\n# Generate sequence data\nsequences = tokenizer.texts_to_sequences(tweets_data)\n\n# Get the max_length of the sequences\nmax_length = max([len(seq) for seq in sequences])\n\n# Pad sequences\npadded_seq = pad_sequences(sequences, maxlen=max_length, padding='post')\n\n# Split data into train, test and validation sets\nX_train, X_test, y_train, y_test = train_test_split(padded_seq, \n                                                    target, \n                                                    test_size=0.2,\n                                                    random_state=42)\n\n# Define the model\nmodel = Sequential()\nmodel.add(Embedding(vocab_size, 64, input_length=max_length))\nmodel.add(LSTM(64))\nmodel.add(Dense(vocab_size, activation='softmax'))\n\n# Compile and fit the model\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(X_train, y_train, epochs=4, validation_data=(X_test,y_test)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n\tif n<0: \n\t\tprint(\"Incorrect input\") \n\t# First Fibonacci number is 0 \n\telif n==1: \n\t\treturn 0\n\t# Second Fibonacci number is 1 \n\telif n==2: \n\t\treturn 1\n\telse: \n\t\treturn Fibonacci(n-1)+Fibonacci(n-2) \n\t\t\n# Driver Program \n \nprint(Fibonacci(9)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt \n\n# Data to plot \ndata = [5, 8, 10, 12, 3, 6] \n\n# Plot the data \nplt.bar(data, data) \n\n# Set labels \nplt.xlabel('Data') \nplt.ylabel('Values') \n\n# Title \nplt.title('Bar Chart of Data Set') \n\n# Show the plot \nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quicksort(arr): \n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.naive_bayes import MultinomialNB\nimport pandas as pd\n\n# Data Preparation\n# Read the data\ndata = pd.read_csv('./data.csv')\n# Create train and test sets\nX_train, X_test, y_train, y_test = train_test_split(data['text'], data['label'], test_size=0.2, random_state=0)\n\n# Vectorization\n# Create a vectorizer object\nvectorizer = CountVectorizer()\n# Fit and transform the train and test sets\nX_train_vec = vectorizer.fit_transform(X_train)\nX_test_vec = vectorizer.transform(X_test)\n\n# Naive Bayes Classifier\n# Create a Naive Bayes Classifier\nclf = MultinomialNB()\n# Fit the model\nclf.fit(X_train_vec, y_train)\n# Print the accuracy\nprint(\"Accuracy:\", clf.score(X_test_vec, y_test)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def createSpiralMatrix(n):\n matrix = [[0] * n for i in range(n)]\n row = 0\n col = -1\n total = n * n\n spiral = 1\n\n while total > 0:\n # move left -> right\n while col + 1 < n and matrix[row][col + 1] == 0:\n col += 1\n matrix[row][col] = spiral\n total -= 1\n spiral += 1\n\n # move up -> down\n while row + 1 < n and matrix[row + 1][col] == 0:\n row += 1\n matrix[row][col] = spiral\n total -= 1\n spiral += 1\n\n # move right -> left\n while col - 1 >= 0 and matrix[row][col - 1] == 0:\n col -= 1\n matrix[row][col] = spiral\n total -= 1\n spiral += 1\n\n # move down -> up\n while row - 1 >= 0 and matrix[row - 1][col] == 0:\n row -= 1\n matrix[row][col] = spiral\n total -= 1\n spiral += 1\n\n # move left -> right\n while col + 1 < n and matrix[row][col + 1] == 0:\n col += 1\n matrix[row][col] = spiral\n total -= 1\n spiral += 1\n\n return matrix\n\ndef printSpiralMatrix(matrix):\n for row in matrix:\n print(*row)\n\ndef transposeSpiralMatrix(matrix):\n return [list(x) for x in zip(*matrix)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(nums):\n  for i in range(len(nums)):\n    min_value = min(nums[i:])\n    min_index = nums[i:].index(min_value)\n    nums[i], nums[i + min_index] = min_value, nums[i] \n  return nums\n\nunsorted_list = [3, 5, 2, 1, 4]\nsorted_list = sort_list(unsorted_list)\nprint(sorted_list) # [1, 2, 3, 4, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def checkEqual(arr):\n    if len(arr) == 0:\n        return False\n    return all(arr[0] == x for x in arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: miles = 10\nkilometers = miles * 1.60934\nprint(f\"{miles} miles is equal to {kilometers} kilometers\") but is not the same. just give one example and only return the code."}
