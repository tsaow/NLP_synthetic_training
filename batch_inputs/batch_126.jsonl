{"prompt": "make some code that functions the same as the following code: def remove_duplicates(string):\nwords = string.split(\" \")\nunique_words = set(words)\nreturn \" \".join(unique_words)\n\nremove_duplicates(\"I have to go go shopping shopping\") # \"I have to go shopping\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nimport random\n\ndef generate_answers(question):\n    # Use NLTK to process and tokenize the question\n    tokens = nltk.word_tokenize(question)\n\n    # Generate a preliminary answer\n    answer = \"I'm sorry I don't understand the question.\"\n\n    # Use keyword matching to generate a more accurate answer\n    keywords = ['product']\n\n    for token in tokens:\n        if token in keywords:\n            answer = 'This product is great and extremely versatile!'\n\n    return answer\n\n# Main Program\nwhile True:\n    question = input(\"What would you like to know about the product? : \")\n    answer = generate_answers(question)\n    print(answer) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_price_list(expenses):\n    print(\"Price list of items available:\")\n    print(\"-\" * 30)\n    print(\"Item\\tPrice\")\n    print(\"-\" * 30)\n    for item in expenses.keys():\n        print(\"{}\\t{}\".format(item, expenses[item]))\n    print(\"-\" * 30) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \nfrom bs4 import BeautifulSoup\n\n# We fetch the raw HTML using requests\nr = requests.get('https://news.example.com')\n\n# We turn the HTML into a BeautifulSoup object\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# We extract the headlines as a list\nheadlines = [h2.text for h2 in soup.find_all('h2')]\n\n# We print out the headlines to the console\nfor headline in headlines:\n print(headline) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef shuffle_list(numbers):\n random.shuffle(numbers)\n return numbers but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_strings(alphabet, length):\n    lst = []\n    \n    for a in alphabet:\n        for b in alphabet:\n            for c in alphabet:\n                s = a + b + c\n                lst.append(s)\n                \n    return lst\n\nresult = generate_strings(alphabet, length)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_string(string_list):\n    longest_str = string_list[0]\n    longest_len = len(longest_str)\n    for string in string_list:\n        if len(string) > longest_len:\n            longest_str = string\n            longest_len = len(string)\n    return longest_str\n\nstring_list = ['apple', 'bee', 'cat']\nlongest_str = longest_string(string_list)\nprint(longest_str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def caesar(message, shift):\n    encoded_message = \"\"\n\n    for char in message:\n        if char.isalpha():\n            num = ord(char)\n            num += shift\n\n            if char.isupper():\n                if num > ord('Z'):\n                    num -= 26\n                elif num < ord('A'):\n                    num += 26\n\n            elif char.islower():\n                if num > ord('z'):\n                    num -= 26\n                elif num < ord('a'):\n                    num += 26\n            encoded_message += chr(num)\n        else:\n            encoded_message += char\n\n    return encoded_message\n\n# Test the code\nmessage = \"hello world\"\nshift = 3\nencoded_message = caesar(message, shift)\nprint(encoded_message) # khoor zruog but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ArrayCounter:\n def __init__(self, array):\n self.array = array\n \n def count(self):\n return len(self.array)\n\narr_counter = ArrayCounter([1, 2, 3, 4])\nprint(arr_counter.count()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: <html>\n <head>\n  <title>Book List</title>\n  <style>\n   body{\n    font-family: 'Open Sans', sans-serif;\n   }\n   table {\n    width: 100%;\n    border-collapse: collapse;\n   }\n   table tr td, table tr th {\n    border: 1px solid #dddddd;\n    text-align: left;\n    padding: 8px;\n   }\n   table tr th {\n    background-color: #dddddd;\n   }\n  </style>\n </head>\n <body>\n  <h1>Book List</h1>\n  <table>\n   <thead>\n    <tr>\n     <th>Id</th>\n     <th>Book Name</th> \n     <th>Cost</th>\n    </tr>\n   </thead>\n   <tbody>\n    <tr>\n     <td>123456</td>\n     <td>Programming in Python</td>\n     <td>100</td>\n    </tr>\n    <tr>\n     <td>654321</td>\n     <td>Networking Essentials</td>\n     <td>200</td>\n    </tr>\n   </tbody>\n  </table>\n </body>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request\nimport sqlite3\n\napp = Flask(name)\n\nconn = sqlite3.connect('movies.db')\ncur = conn.cursor()\n\n@app.route('/api/movies', methods=['GET'])\ndef get_movie():\n title = request.args.get('title')\n language = request.args.get('language')\n year = request.args.get('year')\n \n query = 'SELECT * FROM movies WHERE title=' + title + ' AND language=' + language + ' AND year=' + year\n cur.execute(query)\n result = cur.fetchone()\n \n if not result:\n return {'error': 'No movie found for given parameters.'}, 400\n \n return {\n 'title': result[0],\n 'language': result[1],\n 'year': result[2]\n }\n\nif name == 'main':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_html(data):\n header = '<h1 class=\"title\">{title}</h1>'.format(title=data.get('title'))\n content = '<p class=\"content\">{content}</p>'.format(content=data.get('content'))\n html = '<div class=\"container\">{header}{content}</div>'.format(header=header, content=content)\n return html but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_ascii_codes(string):\n    ascii_codes = [] \n  \n    for char in string: \n        ascii_codes.append(ord(char)) \n  \n    return ascii_codes \n\n\nprint(get_ascii_codes(\"Hello\"))\n\n# Output: [72, 101, 108, 108, 111] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: <!DOCTYPE html>\n<html>\n<head>\n  <title>My Resume</title>\n  <style>\n    body { font-family: sans-serif; }\n    #resume_container {\n      width: 70%;\n      max-width: 600px;\n      margin: 0 auto;\n      padding: 20px;\n      border: 1px solid #ccc;\n      box-shadow: 3px 3px 8px #ccc;\n    }\n    .resume_item {\n      padding: 15px 0;\n      border-bottom: 1px solid #ccc;\n    }\n  </style>\n</head>\n<body>\n\n<div id=\"resume_container\">\n  <div class=\"resume_item\">\n   <h1>John Doe</h1>\n   <h2>Software Developer</h2>\n  </div>\n \n  <div class=\"resume_item\">\n   <h3>Education</h3>\n   <ul>\n    <li>University of XYZ, 2018 - 2021</li>\n   </ul>\n  </div>\n\n  <div class=\"resume_item\">\n   <h3>Professional Experience</h3>\n   <ul>\n    <li>Company ABC, Software Developer, 2020 - Present</li>\n    <li>Company XYZ, Software Developer Intern, 2019 - 2020</li>\n   </ul>\n  </div>\n \n  <div class=\"resume_item\">\n   <h3>Skills &amp; Tools</h3>\n   <ul>\n    <li>Python, SQL, JavaScript</li>\n    <li>HTML/CSS</li>\n   </ul>\n  </div>\n\n  <div class=\"resume_item\">\n   <h3>Achievements</h3>\n   <ul>\n    <li>Awarded \"Software Developer of the Year\" in 20 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\nclass DataAccess(object):\n \n def __init__(self, db_name):\n self.conn = sqlite3.connect(db_name)\n self.cur = self.conn.cursor()\n \n def save_data(self, table, id, name):\n self.cur.execute(f\"INSERT INTO {table} VALUES (?, ?)\", (id, name))\n self.conn.commit()\n \n def read_data(self, table, id):\n self.cur.execute(f\"SELECT * FROM {table} WHERE id = ?\", (id,))\n return self.cur.fetchone()\n \n def close_connection(self):\n self.conn.close()\n\nUserDAO = DataAccess('my_db.db') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\nimport immlib\nfrom immlib import LogBpHook, BpHook\n\n\nclass ReturnBP(BpHook):\n    def __init__(self):\n        BpHook.__init__(self)\n        \n    def run(self, regs):\n        imm = immlib.Debugger()\n        eip = regs[\"EIP\"]\n        imm.log(\"bp, EIP is 0x%08X \" % eip)\n        imm.addKnowledge(\"0x%08X\" % eip, eip)\n        #self.UnHook()\n        imm.deleteBreakpoint(eip, eip+4)\n        imm.run()\n        \nclass ReturnLog(LogBpHook):\n    def __init__(self):\n        LogBpHook.__init__(self)\n    \n    def run(self, regs):\n        imm = immlib.Debugger()\n        eip = regs[\"EIP\"]\n        imm.log(\"log, EIP is 0x%08X \" % eip)\n        imm.addKnowledge(\"0x%08X\" % eip, eip)\n        self.UnHook()\n        imm.deleteBreakpoint(eip, eip+4)\n\ndef main(args):    \n    imm = immlib.Debugger()    \n    module = imm.getModule(imm.getDebuggedName())\n    imm.log(\"module %s at 0x%08X\" % (module.getName(), module.getBase()))\n    use_log_bp = True\n\n    if len(args) > 0 and args[0] == \"false\":\n        imm.log(\"Using non logging bp\")\n        use_log_bp = False\n    \n    \n    # make sure module is analysed\n    if not module.isAnalysed():\n        module.Analyse()\n    knowledge = imm.listKnowledge()\n    hooked = 0\n    not_hooked = 0\n    \n    for f in imm.getAllFunctions(module.getBase()): \n        for ret in imm.getFunctionEnd(f):\n            if \"0x%08X\" % ret not in knowledge:\n                #imm.log(\"function 0x%08X ret at 0x%08X\" % (f, ret))\n                if use_log_bp:\n                    hook = ReturnLog()\n                    hook.add(\"ReturnLog 0x%08X\"%f, ret)                \n                    hooked +=1\n                else:\n                    hook = ReturnBP()\n                    hook.add(\"ReturnBP 0x%08X\"%f, ret)                \n                    hooked +=1\n                    \n                # i think fasthook because fast hook is over writing rets, getFunctionEnd is having trouble\n                #fast = immlib.FastLogHook(imm)\n                #fast.logFunction(ret)\n                #fast.logRegister(\"EIP\")\n                #fast.Hook()\n            else:\n                not_hooked += 1\n        \n    \n    imm.log(\"Hooked %i, skipped %i\" % (hooked, not_hooked))             \n    return \"Found returns, attached hooks\"\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class TreeNode:\n    def __init__(self, name, value, left=None, right=None):\n        self.name = name\n        self.value = value\n        self.left = left\n        self.right = right but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def harmonic_mean(product, summation):\n    # calculate denominator by subtracting sum from product\n    denominator = product - summation\n    # calculate harmonic mean by dividing sum by denominator \n    harmonic_mean = summation/denominator\n    return harmonic_mean but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def common_characters(str1, str2):\n    common_chars = set(str1).intersection(set(str2))\n    return list(common_chars) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport copy\n \ndef create_trigram_model(words_list):\n    trigram_model = {}\n    for i in range(len(words_list)-2):\n        w1 = words_list[i]\n        w2 = words_list[i+1]\n        w3 = words_list[i+2]\n \n        if (w1, w2) in trigram_model:\n            trigram_model[(w1, w2)].append(w3)\n        else:\n            trigram_model[(w1,w2)] = [w3]\n    return trigram_model\n \ndef generate_words(trigram_model):\n    new_string = []\n    keys = list(trigram_model.keys())\n    rand_start_word = keys[random.randint(0, len(keys)-1)]\n    new_string.extend(rand_start_word)\n     \n    while(True):\n        next_word_possible_list = trigram_model[tuple(new_string[-2:])]\n        if len(next_word_possible_list) == 0:\n            break\n        next_word = next_word_possible_list[random.randint(0, len(next_word_possible_list)-1)]\n        new_string.append(next_word)\n         \n        if len(new_string) > 20:\n            break\n     \n    return new_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Defining a function  \ndef calculate(s): \n    if s.isalpha()==True: \n        vowels = 0\n        consonants = 0\n        words = 1\n  \n        for i in s:  \n  \n            # checking vowel \n            if(i == 'a' or i == 'e' or i == 'i' \n                        or i == 'o' or i == 'u'): \n                vowels += 1\n\n            # checking consonants \n            else: \n                consonants += 1\n        \n        words+=1\n\n        print(\"Vowels:\", vowels) \n        print(\"Consonants:\", consonants)\n        print(\"Total words:\",words) \n\n# Driver program \ns = \"This is a sample text\"\ncalculate(s) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ClassName:\n    def __init__(self):\n        self.data = [] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MyClass:\n  def __init__(self, attr1, attr2):\n    self.attr1 = attr1\n    self.attr2 = attr2\n\n  def do_something(self):\n    print(\"Doing something!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(0, 11):\n  print(i**2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isAnagram(string1, string2):\n \"\"\"\n Function to check if two strings are anagrams\n \n Args: \n \u00a0\u00a0string1: First string\n \u00a0\u00a0string2: Second string\n Return:\n \u00a0\u00a0Returns true if the strings are anagrams otherwise returns false\n \"\"\"\n \n string1 = string1.lower()\n string2 = string2.lower()\n if len(string1) != len(string2):\n return False\n\n chars_seen = []\n for char in string1:\n if char in chars_seen:\n continue\n else:\n chars_seen.append(char)\n \u00a0\n for char in chars_seen:\n if string2.count(char) != string1.count(char):\n return False\n \n return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nReturn the largest number in a list\n\"\"\"\n\ndef largest_num(nums):\n    largest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n    return largest\n\nif __name__ == '__main__':\n    nums = [50, 30, 65, 80]\n    print(largest_num(nums)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_missing_number(lst): \n    n = len(lst) \n    total = (n + 1)*(n + 2)/2\n    sum_of_lst = sum(lst) \n    missing_number = total - sum_of_lst \n    return missing_number \n  \nlst = [1, 2, 4, 6, 7, 8] \nmissing_number = find_missing_number(lst) \nprint(missing_number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# Load the data\ndata = {\n 'name': ['John', 'Robert', 'Sue', 'John', 'Jeff', 'Robert'], \n 'score': [66, 52, 80, 74, 85, 62],\n 'type': ['math', 'reading', 'math', 'math', 'math', 'reading']\n}\n\ndf = pd.DataFrame(data)\n\n# Group the data\ngroups = df.groupby('type')\n\n# Calculate the mean per column\nprint(groups['score'].mean())\n\n# Output\ntype\nmath      75.666667\nreading   57.000000\nName: score, dtype: float64 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\n#create data\ndata = [3, 5, 2, 8, 9, 10]\n\n#set plot size\nplt.figure(figsize=(5, 2))\n\n#generate the bar chart\nplt.bar([str(i) for i in range(1, len(data)+1)], data)\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def getAnagrams(string):\n    #base case\n    if len(string) <= 1: \n        return [string] \n\n    #recursive case\n    all_possible_anagrams = []\n    for i, letter in enumerate(string): \n        #recursively iterate over the string without the fixed letter\n        sub_string = string[:i] + string[i+1:]\n\n        #get anagrams of sub string\n        anagrams_of_substring = getAnagrams(sub_string)\n\n        for sub_anagram in anagrams_of_substring:\n            #add the fixed letter to all the anagrams of sub string\n            anagram = letter + sub_anagram\n            all_possible_anagrams.append(anagram)\n\n    return all_possible_anagrams\n\nprint(getAnagrams(\"aabc\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.alexa.com/topsites'\n\n# download the page\nresponse = requests.get(url)\nhtml = response.text\n\n# parse the page\nsoup = BeautifulSoup(html, 'html.parser')\nsite_list = soup.find('div', {'class': 'td'})\n\n# store titles \ntitles = []\nfor site in site_list.find_all('a', {'target': '_blank'}):\n titles.append(site.text)\n\n# print the titles\nprint(titles[:10]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def parity (num):   \n    if num % 2 == 0: \n        return \"even\"\n    else: \n        return \"odd\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_profit(stock):\n  current_max, max_profit = 0, 0\n  for i in range(1, len(stock)):\n    current_max = max(0, current_max + stock[i] - stock[i - 1])\n    max_profit = max(current_max, max_profit)\n  return max_profit\n\nprofit = max_profit([9, 11, 8, 12, 10, 15, 8])\nprint(f\"The maximum profit is: {profit}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\nstring1 = \"Hello\"\nstring2 = \"heLLo\"\n\nif re.search(string1.lower(), string2.lower()):\n print(\"Strings are equal regardless of case.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def word_filter(words, filter_list):\n    filtered_words = []\n    for word in words:\n        if word not in filter_list:\n            filtered_words.append(word)\n    return filtered_words but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import scrapy\n\nclass BbcSpider(scrapy.Spider):\n name = 'bbc'\n start_urls = ['http://www.bbc.com/news']\n\ndef parse(self, response):\n for headline in response.css('h3.align-left'):\n yield {\n 'headline': headline.css('a ::text').extract_first(),\n }\n\nnext_page = response.css('.load-more__button ::attr(href)').extract_first()\nif next_page is not None:\n yield response.follow(next_page, callback=self.parse) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Get the character from user\nchar = input('Please enter a character: ')\n\n# Print the ASCII value\nprint(ord(char)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\ntext = soup.find_all(text=True)\n\ndef visible_text(elements):\n for element in elements:\n if element.parent.name in ['style', 'script', '[document]', 'head', 'title']:\n continue\n if isinstance(element, Comment):\n continue\n return element.strip()\n\ntext = filter(visible_text, text)\nprint(*text, sep=\"\\n\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def delete_from_list(my_list, element):\n    if element in my_list:\n        my_list.remove(element)\n    else:\n        return\n      \n    delete_from_list(my_list, element) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def permutations(str): \n    ans = []\n    if len(str) == 1: \n        ans = [str] \n    else: \n        for i, letter in enumerate(str):\n            for perm in permutations(str[:i] + str[i+1:]):\n                ans += [letter + perm]\n    return ans\n\nprint (permutations(\"ABC\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compute_product(arr1, arr2):\n     result = []\n     for i in range(len(arr1)):\n          result.append(arr1[i] * arr2[i])\n     return result\n\ndef foo(arr1,arr2):\n return compute_product(arr1,arr2)\n\ndef bar(arr1,arr2):\n return compute_product(arr1,arr2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_nums(nums):\n    return sum(nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nstyle.use(\"ggplot\")\n\n# K-means algorithm\ndef kmeans(X,k):\n\n# Initialize the centroids\ncentroids = np.zeros((k,X.shape[1]))\n\n# Iterate until convergence\nwhile True:\n # Calculate the distance of each point from each centroid\n distances = np.array([np.sum((x - c)**2, axis=1) for c in centroids])\n # Assign each point to the closest cluster\n cluster_labels = np.argmin(distances, axis=0)\n \n # Update centroid positions\n new_centroids = np.array([X[cluster_labels == i].mean(axis=0) for i in range(k)])\n \n # Check for convergence\n if np.allclose(centroids, new_centroids):\n break\n \n centroids = new_centroids\n \n # Return the assigned clusters\n return cluster_labels, centroids but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def extract_odd_pos(string):\n    odd_position = \"\"\n    for i in range(len(string)):\n        if i%2 == 0:\n            odd_position += string[i]\n    return odd_position but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_input(data):\n    if type(data) in [int, str, list, dict, set]:\n        return 'Valid'\n    else:\n        return 'Invalid' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_to_ascii_list(string):\n    ascii_list = []\n    for char in string:\n        ascii_list.append(ord(char))\n    return ascii_list\n\nprint(string_to_ascii_list(\"Hello World!\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(number):\n  total = 1\n  while number > 0: \n    total *= number\n    number -= 1\n  return total\n\nprint(factorial(5)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def label_data(dataset):\n    labeled_data = []\n    for data in dataset:\n        label = ''\n        for value in data:\n            if value % 2 == 0:\n                label += 'E'\n            else:\n                label += 'O'\n        labeled_data.append(label)\n    return labeled_data but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def encrypt_substitution(s):\n    result = ''\n    for c in s:\n        result += chr(ord(c) + 3)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: complex_number = complex(2,3) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\n \n# Load the input data\nX = ...\ny = ...\n \n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3)\n \n# Create and fit the Naive Bayes model\nclf = GaussianNB().fit(X_train, y_train)\n \n# Use the model to make predictions\npredictions = clf.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# send a request to the URL\nr = requests.get(url)\n\n# create the HTML parser\nsoup = BeautifulSoup(r.content, 'html.parser')\n\n# locate all of the product items\nproducts = soup.find_all('div', class_='product-item')\n\n# create an empty list for all the product info\nproduct_info = []\n\nfor product in products:\n  # locate the elements containing product info\n  product_name = product.find('div', class_='product-name').text\n  product_price = product.find('div', class_='product-price').text\n  product_ratings = product.find('div', class_='product-ratings').text\n  \n  # append the info to the list\n  product_info.append({\n    'name': product_name,\n    'price': product_price,\n    'ratings': product_ratings\n  })\n  \n# print the list\nprint(product_info) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_palindromic_substring(s):\n    longest = ''\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substr = s[i:j+1]\n            if is_palindrome(substr) and len(substr) > len(longest):\n                longest = substr\n    return longest\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\n# Find the longest palindromic substring in \"cabbad\"\nlongest = longest_palindromic_substring(\"cabbad\")\nprint(longest) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: result = x + y\nprint(result) # Prints 6 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Function Name: hello_world\n\nVariable Name: None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_to_string(list):\n return ','.join(str(x) for x in list)\n\nlist_of_integers = [1, 2, 3, 4]\nprint(list_to_string(list_of_integers)) // Outputs: 1,2,3,4 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fast_function(x):\n    y = 0\n    for i in range(250):\n        y += x * x * x * x\n    return y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_longest_increasing_sequence(arr): \n    # Initialize variable max_seq to 1 \n    max_seq = 1\n  \n    # Initialize variable curr_seq to 1 \n    curr_seq = 1\n  \n    # Traverse through the array \n    for i in range(1, len(arr)): \n  \n        # If next element is greater \n        # than previous element \n        if (arr[i] > arr[i - 1]): \n            curr_seq = curr_seq + 1\n  \n        # Update max_seq \n        else: \n            if (curr_seq > max_seq): \n                max_seq = curr_seq \n            curr_seq = 1\n  \n    # Update max_seq \n    if (curr_seq > max_seq): \n        max_seq = curr_seq \n  \n    return max_seq but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: positive_numbers = []\nnegative_numbers = []\n\nfor num in numbers:\n if num > 0:\n  positive_numbers.append(num)\n else:\n  negative_numbers.append(num)\n\nprint('Positive numbers:', positive_numbers)\nprint('Negative numbers:', negative_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: length = int(input(\"Enter the edge length of the cube: \"))\n\nvolume = length * length * length\n\nprint(\"The volume of the cube is\", volume) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseList(list): \n    list_len = len(list) \n  \n    # Traverse through the list \n    for i in range(list_len // 2): \n        temp = list[i] \n        list[i] = list[list_len - i - 1] \n        list[list_len - i - 1] = temp \n  \n# Driver Code \nmyList = [1, 2, 3, 4, 5] \nprint(\"Original list:\" + str(myList))\nreverseList(myList) \nprint(\"Reversed list:\" + str(myList)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MovieRatings:\n    def __init__(self):\n        self.movie_ratings = {}\n\n    def add_rating(self, movie_name, rating):\n        self.movie_ratings[movie_name] = rating\n\n    def get_rating(self, movie_name):\n        if movie_name in self.movie_ratings:\n            return self.movie_ratings[movie_name]\n        else:\n            return 'Movie not found.' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_largest_palindrome_in_range(min, max):\n    max_palindrome = 0\n    # Iterate over range\n    for x in range(min, max+1):\n        # Check if number is a palindrome\n        if str(x) == str(x)[::-1]:\n            # If this palindrome is larger, update the maximum\n            if x > max_palindrome:\n                max_palindrome = x\n\n    return max_palindrome but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\n\n# create data\nwine_data = pd.read_csv('wine.csv')\n# set features\nfeatures = ['alcohol', 'type', 'sulphates', 'pH', 'quality']\nx_train = wine_data[features]\ny_train = wine_data['type']\n\n# create model\nmodel = RandomForestClassifier(n_estimators=100)\nmodel.fit(x_train, y_train)\n\n# save model\n# model.save('wine_random_forest.h5') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def int_to_Roman(num):\nroma_numerals = {\n 1: \"I\",\n 4: \"IV\",\n 5: \"V\",\n 9: \"IX\",\n 10: \"X\",\n 40: \"XL\",\n 50: \"L\",\n 90: \"XC\",\n 100: \"C\",\n 400: \"CD\",\n 500: \"D\",\n 900: \"CM\",\n 1000: \"M\",\n}\n\nroman_num = \"\"\nfor key, value in sorted(roma_numerals.items(), reverse=True):\n while num >= key:\n roman_num += value\n num -= key\n\nreturn roman_num but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_permutation(first_string, second_string):\n permutation = \"\"\n for char in first_string:\n if char in second_string:\n permutation += char\n \n for char in second_string:\n if char not in first_string:\n permutation += char\n \n return permutation\n \nif __name__ == \"__main__\":\n first_string = \"abc\"\n second_string = \"xyz\"\n permutation = generate_permutation(first_string, second_string)\n print(\"Permutation of '{}' and '{}' is '{}'\".format(first_string, second_string, \npermutation))\n\n# Output: Permutation of 'abc' and 'xyz' is 'axbycz' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport tensorflow as tf\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n \n# Read in the data\ndata = pd.read_csv('building.csv')\n \n# Split into X and y\nX = data.drop('Energy', axis=1).values\ny = data['Energy'].values\n \n# Split into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=0)\n \n# Create the scaler\nsc = StandardScaler()\n \n# Fit and transform the training data\nX_train = sc.fit_transform(X_train)\n \n# Transform the test data\nX_test = sc.transform(X_test)\n \n# number of inputs\nn_inputs = X_train.shape[1]\n \n# Build the model\nmodel = tf.keras.models.Sequential()\n \n# First hidden layer\nmodel.add(tf.keras.layers.Dense(50, activation='relu', input_shape=(n_inputs,)))\n \n# Second hidden layer\nmodel.add(tf.keras.layers.Dense(50, activation='relu'))\n\n# Output layer\nmodel.add(tf.keras.layers.Dense(1))\n \n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='mean_squared_error') \n \n# Train the model\nmodel.fit(X_train, y_train, \n          validation_data=(X_test, y_test),\n          epochs=50,\n          batch_size=32) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nURL = \"https://www.indeed.com/jobs?q=python&l=\"\n\n# retrieve page\npage = requests.get(URL)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# extract job postings\njobs = soup.find_all('div', {'class': 'jobsearch-SerpJobCard'})\n\nfor job in jobs:\n title_div = job.find('div', {'class': 'title'})\n title = title_div.a.text.strip()\n company = job.find('span', {'class': 'company'}).text.strip()\n link = title_div.a['href']\n location = job.find('div', {'class': 'location'}).text.strip()\n\nprint('Job Title:', title)\nprint('Company:', company)\nprint('Link:', link)\nprint('Location:', location) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_pairs_with_sum(values, target):\n    indices_list = []\n    for i in range(len(values)):\n        x = target - values[i]\n        if x in values[i+1:]:\n            indices_list.extend([i, values.index(x)])\n    return indices_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route(\"/average\", methods=[\"POST\"])\ndef get_average():\n    list_of_numbers = request.get_json()\n    average = sum(list_of_numbers) / len(list_of_numbers)\n\n    return jsonify(average) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to automate sending an email\n\nimport smtplib\nfrom email.message import EmailMessage\n\n# Define the from and to address\nfromaddr = \"sender@example.com\"\ntoaddr = \"receiver@example.com\"\n\n# Create the message\nmsg = EmailMessage()\nmsg['Subject'] = 'Test Email'\nmsg['From'] = fromaddr\nmsg['To'] = toaddr\nmsg.set_content('This is a test email message.')\n\n# Send the email\nserver = smtplib.SMTP('smtp.example.com', 587)\nserver.starttls()\nserver.login(fromaddr, \"password\")\nserver.send_message(msg)\nserver.quit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Load the data\nwine_data = pd.read_csv(\"wine.csv\")\n\n# Split the data into training and test sets\nX = wine_data.drop(\"quality\", axis=1)\ny = np.array(wine_data[\"quality\"])\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Scale the data\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.fit_transform(X_test)\n\n# Create the model\nmodel = Sequential()\nmodel.add(Dense(128, input_shape=(len(X_train[0]),), activation=\"relu\"))\nmodel.add(Dense(64, activation=\"relu\"))\nmodel.add(Dense(32, activation=\"relu\"))\nmodel.add(Dense(16, activation=\"relu\"))\nmodel.add(Dense(1, activation=\"sigmoid\"))\n\n# Compile the model\nmodel.compile(optimizer=\"adam\", loss=\"mean_squared_error\", metrics=[\"accuracy\"])\n\n# Fit the model\nmodel.fit(\n X_train,\n y_train,\n validation_data=(X_test, y_test),\n epochs=500,\n batch_size=32\n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for x in range(1, 11):\n for y in range(1, 11):\n print(str(x) + \"x\" + str(y) + \"=\" + str(x * y))\n\nprint(\"The multiplication table of 8:\")\n\nfor x in range(1, 11):\n print(str(x) + \"x\" + \"8\" + \"=\" + str(x * 8)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n \n# Load dataset\niris = datasets.load_iris()\n \n# Create feature matrix\nX = iris.data\n \n# Create target vector\ny = iris.target\n \n# Split into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n \n# Define the classifiers list\nclassifiers = [\n    LogisticRegression(),\n    KNeighborsClassifier(),\n    DecisionTreeClassifier(),\n    SVC(),\n    RandomForestClassifier()]\n \n# Create a dictionary for saving results\nresults = {}\n \n# Train and test for each classifier\nfor classifier in classifiers:\n    kfold = StratifiedKFold(n_splits=10)\n    scores = []\n    for train_index, test_index in kfold.split(X, y):\n        model = classifier.fit(X_train[train_index], y_train[train_index])\n        y_pred = model.predict(X_test[test_index])\n        scores.append(accuracy_score(y_test[test_index],y_pred))\n    results[classifier.__class__.__name__] = scores\n \n# Print the scores    \nfor key, scores in results.items():\n    print(key, sum(scores)/len(scores)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_common_substring(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\ndocument1 = \"This is a test document for identifying the longest common string.\"\ndocument2 = \"This is another document for searching for the longest common string.\"\n\nprint(longest_common_substring(document1, document2))\n\n# Output: \"longest common string\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import base64\n\n# Encode a text into base64\ndef encode_base64(text):\n  # convert the text to bytes object\n  text_bytes = text.encode('ascii')\n  # encode it into base64\n  base64_bytes = base64.b64encode(text_bytes)\n  # convert it back to a string\n  base64_encoded_text = base64_bytes.decode('ascii')\n\n  return base64_encoded_text\n\nprint(encode_base64('This is a test')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def subset(s): \n    if len(s) == 0: \n        return [[]] \n    else: \n        pre_list = subset(s[1:]) \n        post_list = [] \n        for i in pre_list: \n            post_list.append(i+[s[0]]) \n  \n        return pre_list + post_list \n\nresult = subset([1, 2, 3]) \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack:\n def __init__(self):\n self.items = []\n \n def isEmpty(self):\n return self.items == []\n \n def push(self, item):\n self.items.append(item)\n \n def pop(self):\n return self.items.pop()\n \n def peek(self):\n return self.items[len(self.items)-1]\n \n def size(self):\n return len(self.items)\n\nstack = Stack()\nstack.push(1)\nstack.push(2)\nprint(stack.peek())\nprint(stack.pop())\nprint(stack.size()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\nimport pandas as pd\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# load the training data\nwith open(\"training_data.json\") as f:\n    training_data = json.load(f)\n    \n# create a dataframe from the training data\ndf = pd.DataFrame(training_data)\n\n# create count vectorizer \nvec = CountVectorizer()\nX = vec.fit_transform(df[\"text\"])\ny = df[\"class\"]\n\n# train the model\nclf = MultinomialNB()\nclf.fit(X, y)\n\n# predict the class of the text\ntext = \"this is a sample text\"\nx = vec.transform([text]) # transform the text into counts\nclf.predict(x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(string1, string2):\n    '''\n    A function to check if two strings are anagrams\n    '''\n    # convert strings to lower case\n    string1 = string1.lower()\n    string2 = string2.lower()\n\n    # sort string and compare\n    sorted1 = sorted(string1)\n    sorted2 = sorted(string2)\n    if sorted1 == sorted2:\n        return True\n    else:\n        return False\n\nA = \"earth\"\nB = \"heart\"\nprint(is_anagram(A, B))  # True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef get_random_name(first_names, last_names):\n    first_name = random.choice(first_names)\n    last_name = random.choice(last_names)\n    random_name = first_name + ' ' + last_name\n    return random_name but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printFibonacci(): \n    fib1 = 0\n    fib2 = 1\n    print(fib1, end = \" \") \n    while (fib2 < 1000): \n        print(fib2, end = \" \") \n        temp = fib2\n        fib2 = fib2 + fib1   \n        fib1 = temp but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def evaluate_expr(expr,x,y):\n    x = float(x)\n    y = float(y)\n\n    def eval_expr(expr):\n        return eval(expr)\n\n    evaluation = eval_expr(expr.replace(\"x\", str(x)).replace(\"y\", str(y)))\n    return evaluation\n \nexp = \"((x+y)^2)*(x+1)\"\nx = 2\ny = 3\nprint(evaluate_expr(exp,x,y)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: difference = set_1.difference(set_2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_unique(string):\n    if len(string) > 256:\n        return False\n    else:\n        my_set = set()\n        for character in string:\n            if character in my_set:\n                return False\n            else:\n                my_set.add(character)\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def roman_to_int(romanStr):\n    convMap = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n    num = 0\n    for i in range(0, len(romanStr)):\n        if i+1 < len(romanStr) and convMap[romanStr[i]] < convMap[romanStr[i+1]]:\n            num -= convMap[romanStr[i]]\n        else:\n            num += convMap[romanStr[i]]\n    return num\n\nnumeral = 'IX'\nprint(\"Integer value of the Roman numeral {} is {}\".format(numeral, roman_to_int(numeral))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python3\n\n'''Psychomotor Vigilance Task'''\n\n\n#########################################################\n# STAP constants and stdio\nimport json,sys\n\nif 'raw_input' in vars(__builtins__): input = raw_input\t\t#Fix for Python 2.x raw_input\n\ndef send(d): print(json.dumps(d)); sys.stdout.flush()\ndef recv(): return json.loads(input())\n\nCLEAR = None\n\ndef obj(id=None,content=NotImplemented,**options):\n\tif id is not None: options['id']=id\n\tif content is not NotImplemented: options['v']=content\n\treturn options\n#########################################################\n\n\nimport random,statistics\n\n\nTRIALS = 10\nINSTRUCTIONS = 'Click a button when one appears here'\nBUTTON = obj('Click Me',False,onin={'v':CLEAR})\n\ndef main():\n\tlog=[]\n\tums=0\n\t#announce required options\n\tsend({'require':{'options':['U','onin']},'template':'[type=\"bin\"][level=\"1\"]{height:200px}'})\n\t#display Trial and instructions containers; let user software know that any buttons inside the instructions container should be deleted once user-input (i.e. click) is detected\n\tsend([  obj('Trial',1,max=TRIALS),\n\t\t\tobj(INSTRUCTIONS,[])  ])\n\t#do trials\n\tfor trial in range(1,TRIALS+1):\n\t\t#set random time for button appearance\n\t\tbuttonAppearanceTime=ums+random.randrange(2000,10000)\n\t\t#update trial time, wait till buttonAppearanceTime, then add the 'Click me' button\n\t\tsend([\tobj('Trial',trial),\n\t\t\t\tobj(INSTRUCTIONS, [BUTTON], U=buttonAppearanceTime)  ])\n\t\t#get participant action\n\t\tums=recv()[0]\n\t\tlog.append(ums-buttonAppearanceTime)\n\t\tsend([ obj('Your response time is',log[-1],unit='ms') ])\n\t#display goodbye message in popup\n\tsend([  CLEAR,\n\t\t\tobj('Your mean response time is',statistics.mean(log)),\n\t\t\t'Thank you for your participation.'  ])\n\n\nif __name__=='__main__': main()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classifyList(list):\n \teven = True\n \todd = True\n \tfor num in list:\n \t\tif (num % 2 == 0):\n             odd = False\n \t\telse:\n            even = False\n \tif (even):\n \t\tprint(\"list contains only even numbers\")\n \tif (odd):\n \t\tprint(\"list contains only odd numbers\")\n \tif (odd == False and even == False):\n        print(\"list contains both even and odd numbers\")\n \t\nlist = [2,4,5,7]\nclassifyList(list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json \n\n#function for adding items \ndef add_item(name, price): \n    grocery_list.append({\"name\": name, \"price\": price}) \n\n#function to retrieve the list of items \ndef get_list(): \n    return json.dumps(grocery_list)\n\n#empty list to store the items \ngrocery_list = []\n\n# prompts for taking input name and price \nname = input(\"Enter the item name\") \nprice = int(input(\"Enter the item price\")) \n\n# store items in the list by calling the add_item function \nadd_item(name, price) \n\n# print the list \nprint(get_list()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: scale = int(input('Input scale: '))\nvalues = list(map(int, input('Input values: ').split()))\n\ndef print_table(scale, values):\n    for v in values:\n        print(f'{v:>{scale}}', end='\\t')\n    print()\n    for v in values:\n        print(f'{v**2:>{scale}}', end='\\t')\n    print()\n    for v in values:\n        print(f'{v**3:>{scale}}', end='\\t')\n    print()\n\nprint_table(scale, values) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: input_list = [3, 7, 2, 8, 10]\ninput_list.sort(reverse=True)\nprint(input_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: html_str = '<table><tr>'\n\nfor key in d:\n html_str += '<th>{}</th>'.format(key)\nhtml_str += '</tr>'\n\nfor i in range(len(d['col1'])):\n html_str += '<tr>'\n for key in d:\n html_str += '<td>{}</td>'.format(d[key][i])\n html_str += '</tr>'\n\nhtml_str += '</table>'\n\nprint(html_str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class QuadraticEquation:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n        \n    def get_roots(self):\n        d = (self.b**2) - (4*self.a*self.c)\n         \n        # find two solutions\n        sol1 = (-self.b-cmath.sqrt(d))/(2*self.a)\n        sol2 = (-self.b+cmath.sqrt(d))/(2*self.a)\n        \n        return (sol1, sol2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseString(InputString):\n    return InputString[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_unwanted_chars(text):\n    return ''.join(c for c in text if c.isalnum() or c in [' ', ','])\n\ntext = \"Hello, World!\"\nprint(\"Text after removing unwanted characters:\", remove_unwanted_chars(text)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_numbers(arr): \n    for i in range(len(arr)): \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n        arr[i], arr[min_idx] = arr[min_idx], arr[i] \n\narr = [2, 5, 1, 3, 8, 4] \nsort_numbers(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: dictionary = dict(zip(key_list, value_list))\nprint(dictionary) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def unique(arr): \n  unique_arr = [] \n  for i in arr: \n    if i not in unique_arr: \n      unique_arr.append(i) \n  return unique_arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\n\ndef sleep_for_the_night():\n while True:\n  start_time = time.time()\n  time.sleep(5)\n  end_time = time.time()\n  elapsed_time = end_time - start_time\n  if elapsed_time < 5:\n   time.sleep(5-elapsed_time)\n\nwhile True:\n sleep_for_the_night() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Book:\n    def __init__(self, isbn, title, author, publisher):\n        self.isbn = isbn\n        self.title = title\n        self.author = author\n        self.publisher = publisher\n\n    def get_isbn(self):\n        return self.isbn\n\n    def get_title(self):\n        return self.title\n\n    def get_author(self):\n        return self.author\n\n    def get_publisher(self):\n        return self.publisher but is not the same. just give one example and only return the code."}
