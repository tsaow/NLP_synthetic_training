{"prompt": "make some code that functions the same as the following code: def is_anagram(word1, word2):\n # split words into list of characters\n letters1 = list(word1)\n letters2 = list(word2)\n\n # sort lists\n letters1.sort()\n letters2.sort()\n\n # check if the sorted lists are equal\n return letters1 == letters2\n\n# main program\nwords = [ 'army', 'mary', 'cat', 'act', 'rat', 'tar' ]\n\nfor i in range(len(words)):\n for j in range(i + 1, len(words)):\n if is_anagram(words[i], words[j]):\n print('%s is an anagram of %s' % (words[i], words[j])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com'\n\nresp = requests.get(url)\nsoup = BeautifulSoup(resp.text, 'html.parser')\ntitle = soup.find('title').get_text()\n\nprint(title) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/bin/bash\nif [[ $1 -lt 0  ]]\n   then echo \"Incorrect input\"\nfi\npython3 fib.py $1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\n\n# Unix timestamp in seconds\nunix_timestamp = 1545732721\n\n# Convert to readable date format\ntimestamp = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(unix_timestamp))\n\nprint('Human readable date format:', timestamp) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def equation(x):\n    return (x**2 - 3*x + 2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_divisible_by_5(numbers):\n    res = []\n    for num in numbers:\n        if num % 5 != 0:\n            res.append(num)\n    return res\n\nfiltered_numbers = filter_divisible_by_5([11, 23, 7, 20, 44, 16, 9])\nprint(filtered_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Fibonacci sequence\ndef Fibonacci(n):\n a = 0\n b = 1\n if n < 0:\n print(\"Incorrect input\")\n elif n == 0:\n return a\n elif n == 1:\n return b\n else:\n for i in range(2,n):\n c = a + b\n a = b\n b = c\n return b\n\n# Driver Program\nprint(Fibonacci(7)) \n# Output: 13 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef find_prime_numbers(a, b):\n    result = []\n    for num in range(a, b + 1):\n        if is_prime(num):\n            result.append(num)\n    return result\n\n\nstart = 2\nend = 20\nprint(find_prime_numbers(start, end)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Vector3D(object):\n    def __init__(self, x=0, y=0, z=0):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def magnitude(self):\n         return math.sqrt(self.x**2 + self.y**2 + self.z**2)\n\n    def __add__(self, other):\n        return Vector3D(self.x + other.x,\n                        self.y + other.y,\n                        self.z + other.z) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_sum(list):\n    sum = 0\n    for num in list:\n        sum += num\n    return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_array_for_consecutive(arr):\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i+1] - arr[i] != 1:\n            return False\n    return True\n\narr = [2, 3, 4, 5, 6]\nprint(check_array_for_consecutive(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_valid_parentheses(s):\n    # maintain a stack\n    stack = []\n    longest_valid_len = 0\n\n    # traverse through the string\n    for i in range(len(s)):\n        # if current char is an opening bracket, push it to the stack\n        if s[i] == '(':\n            stack.append(i)\n        else:\n            # if closing bracket, check if the stack is empty\n            if stack:\n                # pop an opening bracket from the stack and calculate the length \n                current_len = i - stack.pop() + 1\n\n                if stack:\n                    # if the stack is not empty, subtract the top element from the current length\n                    current_len -= (stack[-1] + 1)\n\n                longest_valid_len = max(longest_valid_len, current_len)\n            else:\n                # if the stack is empty, reset the longest_valid_len\n                longest_valid_len = max(longest_valid_len, current_len)\n\n    return longest_valid_len\n\ns = '()(()())'\nprint(longest_valid_parentheses(s)) # 6 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findMaximizingParams(X_train,X_test,y_train,y_test):\n    best_score = float(\"-inf\")\n    best_params = None\n    p1s = [0,1,2]\n    p2s = [0.1,0.3,0.5]\n    p3s = [2,4,6]\n    for p1 in p1s:\n        for p2 in p2s:\n            for p3 in p3s:\n                curr_params = (p1,p2,p3)\n                model = Model(p1,p2,p3)\n                model.fit(X_train,y_train)\n                predictions = model.predict(X_test)\n                curr_score = mean_squared_error(y_test, predictions)\n                if curr_score > best_score:\n                    best_score = curr_score\n                    best_params = curr_params\n    return best_params but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list_of_tuples(input_list):\n    sorted_list = sorted(input_list, key=lambda tup: tup[1])\n    return sorted_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(head):\n    if head is None: \n        return None \n    current = head \n    while current.next: \n        if current.data == current.next.data: \n            current.next = current.next.next \n        else: \n            current = current.next\n    return head but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(arr):\n    '''This function returns the maximum element in the given array.'''\n    maxval = arr[0]\n    for num in arr:\n        if num > maxval:\n            maxval = num\n    return maxval but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # app.py \nimport webapp2\n\nclass MainPage(webapp2.RequestHandler):\n    def get(self):\n        self.response.headers['Content-Type'] = 'text/plain'\n        self.response.write('Hello, World!')\n\n#app.yaml\nruntime: python27\napi_version: 1\nthreadsafe: true\n\nhandlers:\n- url: /.*\n  script: app.app but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n): \n if n < 0: \n  print(\"Incorrect input\") \n elif n == 0: \n  return 0\n elif n == 1: \n  return 1\n else: \n  return fibonacci(n-1) + fibonacci(n-2) \n\nprint(fibonacci(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nimport numpy\nimport random\nimport string\nimport re\nf=open('chatbot.txt','r',errors = 'ignore')\nraw=f.read()\nraw=raw.lower()\n\n\n# Tokenization\nsent_tokens = nltk.sent_tokenize(raw) # converts to list of sentences \nword_tokens = nltk.word_tokenize(raw) # converts to list of words\n\n# Preprocessing\nlemmer = nltk.stem.WordNetLemmatizer()\ndef LemTokens(tokens):\n return [lemmer.lemmatize(token) for token in tokens]\nremove_punct_dict = dict((ord(punct), None) for punct in string.punctuation)\ndef LemNormalize(text):\n return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))\n\n# Keyword Matching\nGREETING_INPUTS = (\"hello\", \"hi\", \"greetings\", \"sup\", \"what's up\",\"hey\",)\nGREETING_RESPONSES = [\"hi\", \"hey\", \"*nods*\", \"hi there\", \"hello\", \"I am glad! You are talking to me\"]\n\ndef greeting(sentence):\n\nfor word in sentence.split():\n if word.lower() in GREETING_INPUTS:\n return random.choice(GREETING_RESPONSES)\n\n# Generating Response\ndef response(user_response):\n robo_response=''\n sent_tokens.append(user_response)\n TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words='english')\n tfidf = TfidfVec.fit_transform(sent_tokens)\n vals = cosine_similarity(tfidf[-1], tfidf)\n idx=vals.argsort()[0][-2]\n flat = vals.flatten()\n flat.sort()\n req_tfidf = flat[-2]\n if(req_tfidf==0):\n robo_response=robo_response+\"I am sorry! I don't understand you\"\n return robo_response\n else:\n robo_response = robo_response+sent_tokens[idx]\n return robo_response\n\nflag=True\nprint(\"ROBO: My name is Robo. I will answer your queries about Chatbots. If you want to exit, type Bye!\")\nwhile(flag==True):\n user_response = input()\n user_response=user_response.lower()\n if(user_response!='bye'):\n if(user_response=='thanks' or user_response=='thank you' ):\n flag=False\n print(\"ROBO: You are welcome..\")\n else:\n if(greeting(user_response)!=None):\n print(\"ROBO: \"+greeting(user_response))\n else:\n print(\"ROBO: \",end=\"\")\n print(response(user_response))\n sent_tokens.remove(user_response)\n else:\n flag=False\n print(\"ROBO: Bye! take care..\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num1 = 12\nnum2 = 44\n\nif (num1 > num2):\n    print(num1)\nelif (num2 > num1):\n    print(num2)\nelse:\n    print(\"Both numbers are equal\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport sqlite3\nfrom bs4 import BeautifulSoup\n\n# Get the web page content\nurl = 'https://blog.floydhub.com/'\npage = requests.get(url)\n\n# Parse the page\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Extract the posts\nposts = soup.find_all('div', {'class': 'post-content'})\n\n# Create a database connection\nconn = sqlite3.connect('blog_posts.db')\ncur = conn.cursor()\n\n# Create the table\ncur.execute('CREATE TABLE IF NOT EXISTS posts (title TEXT, content TEXT)')\n\n# Insert the posts into the database\nfor post in posts:\n title = post.find('h2').get_text()\n content = post.find('p').get_text()\n cur.execute('INSERT INTO posts VALUES (?,?)', (title,content))\n\n# Commit the changes\nconn.commit()\n\n# Close the connection\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(arr):\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\nresult = bubble_sort([12, 11, 13, 5, 6])\nprint(result) # Output: [5, 6, 11, 12, 13] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef extract_random_subset(li, size=100): \n    subset = [] \n    while len(subset) < size: \n        rand_ele = random.choice(li)\n        if rand_ele not in subset: \n            subset.append(rand_ele) \n    return subset but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string \nimport random\n\ndef generate_code():\n    '''This function will generate an 8-character string with uppercase letters, lowercase letters and digits.'''\n    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    code = ''.join(random.choice(chars) for _ in range(8))\n    return code but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: n = 5\n\n# printing the multiplication table\nfor i in range(1, 11): \n    print(n, 'x', i, '=', n * i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# Read in dataset \ndata = pd.read_csv('dataset.csv')\n\n# Remove any superfluous columns\ndata = data.drop(columns=['Unnamed', 'column'])\n\n# Normalize values \ndata['price'] = data['price'].apply(lambda x: x / max(data['price']))\n\n# Check for missing values\ndata = data.dropna()\n\n# Save cleaned dataset \ndata.to_csv('cleaned_dataset.csv', index=False) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: questions = [\n {\n 'question': question_1_text,\n 'possible_answers': question_1_possible_answers,\n 'correct_answer': question_1_correct_answer\n },\n {\n 'question': question_2_text,\n 'possible_answers': question_2_possible_answers,\n 'correct_answer': question_2_correct_answer\n },\n {\n  'question': question_3_text,\n  'possible_answers': question_3_possible_answers,\n  'correct_answer': question_3_correct_answer\n }\n]\n\ncorrect_answers = 0\n\nfor question in questions:\n print(question['question'])\n for answer in question['possible_answers']:\n print(answer)\n user_answer = input('Your answer: ')\n if user_answer == question['correct_answer']:\n correct_answers += 1\n\nif correct_answers == 3:\n print('You got all 3 questions right!')\nelif correct_answers == 2:\n print('You got 2 questions right!')\nelif correct_answers == 1:\n print('You got 1 question right!')\nelse:\n print('You got no questions right!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def rotate(y , n):\n    temp = y[0:n]\n    for i in range (len(y) - n):\n        y[i] = y[n + i]\n    for i in range (n):\n        y[i + len(y) - n] = temp[i]\n    return y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence = 'This is an example sentence'\nwords = [word for word in sentence.split() if len(word) > 3]\nprint (words)\n# Output: ['This', 'example', 'sentence'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def drawTriangle(n):\n    for i in range(n):\n        for j in range(i+1):\n            print(\"*\", end=\"\")\n        print(\"\\r\")\n\ndrawTriangle(5) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import gzip \nimport shutil \n\n# Source files to compress \nsource = '/files'\n  \n# Destination to store compressed files \ndestination = '/files/compressed'\n  \n# set the compression level \ncompression_level = 3\n\nshutil.make_archive(destination, 'gz', source, compression_level) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def threeSum(nums): \n\tres = [] \n\tnums.sort() \n\n\tfor i in range(len(nums)-2): \n\t\tif i > 0 and nums[i] == nums[i-1]: \n\t\t\tcontinue\n\t\t\t\n\t\tl, r = i+1, len(nums)-1\n\t\twhile l < r: \n\t\t\ts = nums[i] + nums[l] + nums[r]  \n\t\t\tif s > 0: \n\t\t\t\tr -= 1\n\t\t\telif s < 0: \n\t\t\t\tl += 1\n\t\t\telse: \n\t\t\t\tres.append([nums[i], nums[l], nums[r]]) \n\t\t\t\twhile l < r and nums[l] == nums[l+1]: \n\t\t\t\t\tl += 1\n\t\t\t\twhile l < r and nums[r] == nums[r-1]: \n\t\t\t\t\tr -= 1\n\t\t\t\tl += 1\n\t\t\t\tr -= 1\n\treturn res \n\nprint(threeSum(nums)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def prime_factorization(n):\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(str1, str2):\n    str1 = str1.replace(\" \", \"\").lower()\n    str2 = str2.replace(\" \", \"\").lower()\n\n    if len(str1) != len(str2):\n        return False\n\n    count = {}\n\n    for letter in str1:\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n    \n    for letter in str2:\n        if letter in count:\n            count[letter] -= 1\n        else:\n            count[letter] = 1\n    \n    for k in count:\n        if count[k] != 0:\n            return False\n        \n    return True\n\nstr1 = input(\"Enter the first string: \")\nstr2 = input(\"Enter the second string: \")\n\nif is_anagram(str1, str2):\n    print(\"The strings are anagrams.\")\nelse:\n    print(\"The strings are not anagrams.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_fibonacci(n):\n    \"\"\"\n    Calculates the n-th Fibonacci number.\n    Args:\n        n: the n-th Fibonacci number.\n    Returns:\n        The Fibonacci number at a given index.\n    \"\"\"\n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    # Calculate n-th Fibonacci number\n    return calculate_fibonacci(n-1) + calculate_fibonacci(n-2)\n\nfib = calculate_fibonacci(15)\nprint(fib) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef gradient_descent(X, y, n_iter=100, learning_rate=0.01):\n    \"\"\"\n    Perform Linear Regression using Stochastic Gradient Descent\n    :param X: Train set\n    :param y: Label set\n    :param n_iter: number of iterations (default=100)\n    :param learning_rate: learning rate (default=0.01)\n    :return: coefficient\n    \"\"\"\n    n_samples, n_features = X.shape\n    # initialize coefficients\n    coef = np.zeros(n_features)\n    # gradient vector\n    grad = np.zeros(n_features)\n    # iterate for n_iter\n    for i in range(n_iter):\n        # compute gradient\n        for idx, xi in enumerate(X):\n            error = y[idx] - np.dot(xi, coef)\n            grad += xi * error\n        # update coefficients\n        coef += learning_rate * grad\n    return coef but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nbot_template = \"BOT : {0}\"\nuser_template = \"USER : {0}\"\n\n# Define a dictionary with the predefined responses\nresponses = {\n  \"what's your name?\": \"My name is Chatbot.\",\n  \"what's the weather today?\": \"It's sunny today.\",\n  \"default\": \"Default message\"\n}\n\n# Return the matching response if there is one, default otherwise\ndef respond(message):\n    # Check if the message is in the responses\n    if message in responses:\n        # Return the matching message\n        bot_message = responses[message]\n    else:\n        # Return the \"default\" message\n        bot_message = responses[\"default\"]\n    return bot_message\n\n# Define a function that sends a message to the bot: send_message\ndef send_message(message):\n    # Print user_template including the user_message\n    print(user_template.format(message))\n    # Get the bot's response to the message\n    response = respond(message)\n    # Print the bot template including the bot's response.\n    print(bot_template.format(response))\n\n\n#\n# Send a message to the bot\nsend_message(\"what's your name?\")\nsend_message(\"what's the weather today?\")\nsend_message(\"some random message\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os, shutil\n\ndef delete_directory(path_to_dir):\n    # check if the path is a directory\n    if os.path.isdir(path_to_dir):\n        # delete the directory and all its content\n        shutil.rmtree(path_to_dir)\n        # print a message\n        print('The directory and all its content successfully deleted!')\n    else:\n        # if path is not a directory\n        print('ERROR: The path ' + path_to_dir + ' does not exist')\n\npath_to_dir = 'test_dir'\ndelete_directory(path_to_dir) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def word_count(sentence):\n    words = sentence.split(' ')\n    return len(words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimizeCode():\n  n = 10\n  arr = [i * i for i in range(n)]\n  print(arr)\n\noptimizeCode() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def format_phone_number(phone_num):\n    return f\"({phone_num[:3]}) {phone_num[3:6]}-{phone_num[6:]}\"\n\nnumber = \"1234567890\"\nformatted_number = format_phone_number(number)\nprint(formatted_number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countActiveSensors(ringOfSensors):\n    count = 0\n    for i in range(len(ringOfSensors)):\n        left_neighbor = ringOfSensors[(i - 1 + len(ringOfSensors)) % len(ringOfSensors)]\n        right_neighbor = ringOfSensors[(i + 1) % len(ringOfSensors)]\n        if left_neighbor == 1 and right_neighbor == 1:\n            count += 1\n\n    return count\n\nringOfSensors = [1, 0, 1, 0, 1]\nprint(countActiveSensors(ringOfSensors))\n\n// Output: 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: animal_list = [\"dog\", \"cat\", \"mouse\", \"snake\"] \n\nfor animal in animal_list:\n    print(animal) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(a, b): \n    if a == 0: \n        return b \n    return gcd(b % a, a) \n      \ndef reduceFraction(numerator, denominator): \n    common_divisor = gcd(numerator, denominator) \n      \n    reduced_numerator = numerator // common_divisor \n    reduced_denominator = denominator // common_divisor \n    return reduced_numerator, reduced_denominator \n\nnumerator = 12\ndenominator = 20\n\nreduced_numerator, reduced_denominator = reduceFraction(numerator, denominator) \nprint(f\"{numerator}/{denominator} is equivalent to {reduced_numerator}/{reduced_denominator}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # convert a string to list of numbers\ndef convert_to_list(s):\n    numbers = s.split(',')\n    return [int(num) for num in numbers]\n\ntext = \"3, 17, 2, 9, 11\"\nint_list = convert_to_list(text)\nprint(int_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nWrite a Python program to parse a JSON data and print the values\n\"\"\"\n\nimport json\n\n# Load the input data as a json string\ndata = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\n\n# Parse the json string into a dictionary\nparsed_data = json.loads(data)\n\n# Print out the values\nfor key, value in parsed_data.items():\n    print(f'{key}: {value}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(arr, x): \n    l = 0\n    r = len(arr) - 1\n    while l <= r: \n        mid = l + (r - l) // 2\n\n        if arr[mid] == x: \n            return mid \n        \n        elif arr[mid] < x: \n            l = mid + 1\n  \n        else: \n            r = mid - 1\n  \n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\n# Define the pattern\npattern = r'(apple|orange|banana)'\n\n# Test strings\nstrings = ['I ate an apple.',\n 'I love oranges!',\n 'This banana is delicious.',\n 'I cannot eat grapes.']\n\n# Create the regex object\nregex = re.compile(pattern, re.IGNORECASE)\n\n# Iterate through the strings\nfor string in strings:\n # Test if the regex matches\n if regex.search(string):\n print(f\"Matched: {string}\")\n# Output\n# Matched: I ate an apple.\n# Matched: I love oranges!\n# Matched: This banana is delicious. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import turtle\n\ndef draw_fish():\n    # draw the head\n    turtle.forward(40)\n    turtle.right(90)\n    turtle.forward(70) \n    turtle.left(150)\n    # draw the body\n    turtle.forward(100)\n    turtle.right(90)\n    turtle.forward(50)\n    # draw the tail\n    turtle.right(90)\n    turtle.forward(50)\n    turtle.right(130)\n    turtle.forward(90)\n    # draw the eyes\n    turtle.penup()\n    turtle.goto(30, 34)\n    turtle.pendown()\n    turtle.dot()\n    turtle.penup()\n    turtle.goto(70, 34)\n    turtle.pendown()\n    turtle.dot()\n\ndraw_fish() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def capitalize_more_than_3_characters(string):\n    words = string.split()\n    new_string = []\n    \n    for word in words:\n        if len(word) > 3:\n            new_string.append(word.capitalize())\n        else:\n            new_string.append(word)\n    \n    return \" \".join(new_string)\n    \nstring = \"this is a test string\"\nprint(capitalize_more_than_3_characters(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Transform each item to a string \nlist_ = [1, 2, 3]\n\n# Transform the list\nstring_list = [str(item) for item in list_]\n\n# Print the transformed list\nprint(string_list)\n\n# Output\n['1', '2', '3'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def cube_info(edge_length):\n    area = 6 * edge_length**2\n    volume = edge_length**3\n    return area,volume\n\nedge_length = 3\narea, volume = cube_info(edge_length)\nprint(\"Area of the Cube:\", area)\nprint(\"Volume of the Cube:\", volume) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: 100 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python3\n\n##ON APP MACHINE\n\nimport sys\n\nfrom os import listdir, mkdir\nfrom os.path import isdir, dirname, abspath\n\nimport os\nimport subprocess\n\nimport weakref\n\nfrom scipy import fftpack\nimport numpy as np\n\n## some global variables, this needs to be fixed at some point\ndefault_raw_data_loc = None#\"/exp_app2/appexp1/public/raw_data\"\ndefault_processed_data_loc = None#\"/home/brian/processed_files\"\n\nMetaData_directory =  dirname(abspath(__file__)) + '/data' ## change this if antenna_response_model is in a folder different from this module\n\n#### constants\nC = 299792458.0\nRTD = 180.0/3.1415926 ##radians to degrees\nn_air = 1.000293\nv_air = C/n_air\n\nlatlonCS002 = np.array([52.91512249, 6.869837540]) ## lattitude and longitude of CS002 in degrees\n\n#### log data to screen and to a file\n\nclass logger(object):\n    class std_writer(object):\n        def __init__(self, logger):\n            self.logger_ref = weakref.ref(logger)\n            \n        def write(self, msg):\n            logger=self.logger_ref()\n            logger.out_file.write(msg)\n            if logger.to_screen:\n                logger.old_stdout.write(msg)\n            \n        def flush(self):\n            logger=self.logger_ref()\n            logger.out_file.flush()\n    \n    \n    def __init__(self):\n        \n        self.has_stderr = False\n        self.has_stdout = False\n        \n        self.old_stderr = sys.stderr\n        self.old_stdout = sys.stdout\n        \n        self.set(\"out_log\")\n        \n    def set(self, fname, to_screen=True):\n        self.out_file = open(fname, 'w')\n        \n        self.set_to_screen( to_screen )\n        \n        \n    def __call__(self, *args):\n        for a in args:\n            if self.to_screen:\n                self.old_stdout.write(str(a))\n                self.old_stdout.write(\" \")\n                \n            self.out_file.write(str(a))\n            self.out_file.write(\" \")\n            \n        self.out_file.write(\"\\n\")\n        if self.to_screen:\n            self.old_stdout.write(\"\\n\")\n            \n        self.out_file.flush()\n        self.old_stdout.flush()\n        \n    def set_to_screen(self, to_screen=True):\n        self.to_screen = to_screen\n        \n    def take_stdout(self):\n        \n        if not self.has_stdout:\n            sys.stdout = self.std_writer(self)\n            self.has_stdout = True\n\t\t\t\t\t\t\t\n    def take_stderr(self):\n        \n        if not self.has_stderr:\n            sys.stderr = self.std_writer(self)\n            self.has_stderr = True\n            \n    def restore_stdout(self):\n        if self.has_stdout:\n            sys.stdout = self.old_stdout\n            self.has_stdout = False\n            \n    def restore_stderr(self):\n        if self.has_stderr:\n            sys.stderr = self.old_stderr\n            self.has_stderr = False\n            \n    def flush(self):\n        self.out_file.flush()\n            \n#    def __del__(self):\n#        self.restore_stderr()\n#        self.restore_stdout()\n        \n#log = logger()\n        \ndef iterate_pairs(list_one, list_two, list_one_avoid=[], list_two_avoid=[]):\n    \"\"\"returns an iterator that loops over all pairs of the two lists\"\"\"\n    for item_one in list_one:\n        if item_one in list_one_avoid:\n            continue\n        for item_two in list_two:\n            if item_two in list_two_avoid:\n                continue\n            yield (item_one, item_two)\n        \nimport re\nnatural_regex_pattern = re.compile('([0-9]+)')\ndef natural_sort( l ):\n    \"\"\" Sort the given iterable in the way that humans expect. Usefull for sorting station names.\"\"\"\n    convert = lambda text: int(text) if text.isdigit() else text\n    alphanum_key = lambda key: [ convert(c) for c in natural_regex_pattern.split(key) ]\n    return sorted(l, key = alphanum_key)\n        \n#### some file utils\n\ndef Fname_data(Fpath):\n    \"\"\" takes both pulse data file names and h5 file names and returns UTC_time, station_name, Fpath\"\"\"\n    Fname = Fpath.split('/')[-1]\n    data = Fname.split('_')\n    timeID = data[1]\n    station_name = data[2]\n    \n    if len(data[3][1:])==0:\n        file_number = 0\n    else:\n        file_number = int(data[3][1:])\n    \n    return timeID, station_name, Fpath, file_number\n\n\n##note that timeID is a string representing the datetime of a LOFAR trigger. such as:   D20130619T094846.507Z\n## the timeID is used to uniquely identify triggers\n\ndef get_timeID(fname):\n    data=fname.split(\"_\")\n    return data[1]\n\ndef year_from_timeID(timeID):\n    return timeID[1:5]\n\ndef raw_data_dir(timeID, data_loc=None):\n    \"\"\"gives path to the raw data folder for a particular timeID, given location of data structure. Defaults to  default_raw_data_loc\"\"\"\n    \n    if data_loc is None:\n        data_loc = default_raw_data_loc\n        if default_raw_data_loc is None:\n            print(\"ERROR: 'default_raw_data_loc' in utilities is not set.\")\n            quit()\n    \n    path = data_loc + '/' + year_from_timeID(timeID)+\"/\"+timeID\n    return path\n\ndef processed_data_dir(timeID, data_loc=None):\n    \"\"\"gives path to the analysis folders for a particular timeID, given location of data structure. Defaults to  default_processed_data_loc\n    makes the directory if it doesn't exist\"\"\"\n    \n    if data_loc is None:\n        data_loc = default_processed_data_loc\n        if default_processed_data_loc is None:\n            print(\"ERROR: 'default_processed_data_loc' in utilities is not set.\")\n            quit()\n    \n    path=data_loc + \"/\" + year_from_timeID(timeID)+\"/\"+timeID\n    if not isdir(path):\n        mkdir(path)\n    return path\n\n    \n## a python list where the keys are the number of a station and the values are the station name\nSId_to_Sname = [None]*209 #just to pre-initilize list, so syntax below is possible\nSId_to_Sname[1] = \"CS001\"\nSId_to_Sname[2] = \"CS002\"\nSId_to_Sname[3] = \"CS003\"\nSId_to_Sname[4] = \"CS004\"\nSId_to_Sname[5] = \"CS005\"\nSId_to_Sname[6] = \"CS006\"\nSId_to_Sname[7] = \"CS007\"\n#SId_to_Sname[8] = \"CS008\"\n#SId_to_Sname[9] = \"CS009\"\n#SId_to_Sname[10] = \"CS010\"\nSId_to_Sname[11] = \"CS011\"\n#SId_to_Sname[12] = \"CS012\"\nSId_to_Sname[13] = \"CS013\"\n#SId_to_Sname[14] = \"CS014\"\n#SId_to_Sname[15] = \"CS015\"\n#SId_to_Sname[16] = \"CS016\"\nSId_to_Sname[17] = \"CS017\"\n#SId_to_Sname[18] = \"CS018\"\n#SId_to_Sname[19] = \"CS019\"\n#SId_to_Sname[20] = \"CS020\"\nSId_to_Sname[21] = \"CS021\"\n#SId_to_Sname[22] = \"CS022\"\n#SId_to_Sname[23] = \"CS023\"\nSId_to_Sname[24] = \"CS024\"\n#SId_to_Sname[25] = \"CS025\"\nSId_to_Sname[26] = \"CS026\"\n#SId_to_Sname[27] = \"CS027\"\nSId_to_Sname[28] = \"CS028\"\n#SId_to_Sname[29] = \"CS029\"\nSId_to_Sname[30] = \"CS030\"\nSId_to_Sname[31] = \"CS031\"\nSId_to_Sname[32] = \"CS032\"\nSId_to_Sname[101] = \"CS101\"\n#SId_to_Sname[102] = \"CS102\"\nSId_to_Sname[103] = \"CS103\"\nSId_to_Sname[121] = \"CS201\"\nSId_to_Sname[141] = \"CS301\"\nSId_to_Sname[142] = \"CS302\"\nSId_to_Sname[161] = \"CS401\"\nSId_to_Sname[181] = \"CS501\"\n\n#SId_to_Sname[104] = \"RS104\"\n#SId_to_Sname[105] = \"RS105\"\nSId_to_Sname[106] = \"RS106\"\n#SId_to_Sname[107] = \"RS107\"\n#SId_to_Sname[108] = \"RS108\"\n#SId_to_Sname[109] = \"RS109\"\n#SId_to_Sname[122] = \"RS202\"\n#SId_to_Sname[123] = \"RS203\"\n#SId_to_Sname[124] = \"RS204\"\nSId_to_Sname[125] = \"RS205\"\n#SId_to_Sname[126] = \"RS206\"\n#SId_to_Sname[127] = \"RS207\"\nSId_to_Sname[128] = \"RS208\"\n#SId_to_Sname[129] = \"RS209\"\nSId_to_Sname[130] = \"RS210\"\n#SId_to_Sname[143] = \"RS303\"\n#SId_to_Sname[144] = \"RS304\"\nSId_to_Sname[145] = \"RS305\"\nSId_to_Sname[146] = \"RS306\"\nSId_to_Sname[147] = \"RS307\"\n#SId_to_Sname[148] = \"RS308\"\n#SId_to_Sname[149] = \"RS309\"\nSId_to_Sname[150] = \"RS310\"\nSId_to_Sname[166] = \"RS406\"\nSId_to_Sname[167] = \"RS407\"\nSId_to_Sname[169] = \"RS409\"\nSId_to_Sname[183] = \"RS503\"\nSId_to_Sname[188] = \"RS508\"\nSId_to_Sname[189] = \"RS509\"\n\nSId_to_Sname[201] = \"DE601\"\nSId_to_Sname[202] = \"DE602\"\nSId_to_Sname[203] = \"DE603\"\nSId_to_Sname[204] = \"DE604\"\nSId_to_Sname[205] = \"DE605\"\nSId_to_Sname[206] = \"FR606\"\nSId_to_Sname[207] = \"SE607\"\nSId_to_Sname[208] = \"UK608\"\n\n## this just \"inverts\" the previous list, discarding unused values\nSname_to_SId_dict = {name:ID for ID,name in enumerate(SId_to_Sname) if name is not None}\n\ndef even_antName_to_odd(even_ant_name):\n    even_num = int(even_ant_name)\n    odd_num = even_num + 1\n    return str( odd_num ).zfill( 9 )\n\ndef antName_is_even(ant_name):\n    return not int(ant_name)%2\n\ndef odd_antName_to_even(odd_ant_name):\n    odd_num = int(odd_ant_name)\n    even_num = odd_num + 1\n    return str( even_num ).zfill( 9 )\n    \n\n#### plotting utilities ####\ndef set_axes_equal(ax):\n    '''Make axes of 3D plot have equal scale so that spheres appear as spheres,\n    cubes as cubes, etc..  This is one possible solution to Matplotlib's\n    ax.set_aspect('equal') and ax.axis('equal') not working for 3D.\n    \n    \n\n    Input\n      ax: a matplotlib axis, e.g., as output from plt.gca().\n    '''\n\n    x_limits = ax.get_xlim3d()\n    y_limits = ax.get_ylim3d()\n    z_limits = ax.get_zlim3d()\n\n    x_range = abs(x_limits[1] - x_limits[0])\n    x_middle = np.mean(x_limits)\n    y_range = abs(y_limits[1] - y_limits[0])\n    y_middle = np.mean(y_limits)\n    z_range = abs(z_limits[1] - z_limits[0])\n    z_middle = np.mean(z_limits)\n\n    # The plot bounding box is a sphere in the sense of the infinity\n    # norm, hence I call half the max range the plot radius.\n    plot_radius = 0.5*max([x_range, y_range, z_range])\n\n    ax.set_xlim3d([x_middle - plot_radius, x_middle + plot_radius])\n    ax.set_ylim3d([y_middle - plot_radius, y_middle + plot_radius])\n    ax.set_zlim3d([z_middle - plot_radius, z_middle + plot_radius])\n\n    \n### some math functions? ###\n    \ndef normalize_angle_radians( angle_radians ):\n    \"\"\"For an angle in radians, return the equivalent angle that is garunteed be between -pi and pi\"\"\"\n    while angle_radians > np.pi:\n        angle_radians -= 2.0*np.pi\n    while angle_radians < -np.pi:\n        angle_radians += 2.0*np.pi\n    return angle_radians\n\ndef BoundingBox_collision(BB1, BB2):\n    \"\"\" return true if two N-D bounding boxes collide, False otherwise\"\"\"\n    for B1, B2 in zip(BB1,BB2):\n        if (B1[1] < B2[0]) or (B2[1] < B1[0]):\n            return False\n    return True\n\n### some build tools ####\ndef GSL_include():\n    \"\"\"return directory for location of GSL headers, useful when combining GSL and cython\"\"\"\n    \n    try:\n        gsl_include = subprocess.check_output('gsl-config --cflags', shell=True).decode('utf-8')[2:-1]\n    except subprocess.CalledProcessError:\n        gsl_include = os.getenv('LIB_GSL')\n        if gsl_include is None:\n            # Environmental variable LIB_GSL not set, use hardcoded path.\n            gsl_include = r\"c:\\Program Files\\GnuWin32\\include\"\n        else:\n            gsl_include += \"/include\"\n\n    assert gsl_include != '', \"Couldn't find gsl. Make sure it's installed and in the path.\"\n\n    return gsl_include\n\n\ndef GSL_library_dir():\n    \"\"\"return directory for location of GSL binaries, useful when combining GSL and cython\"\"\"\n    try:\n        lib_gsl_dir = subprocess.check_output('gsl-config --libs', shell=True).decode('utf-8').split()[0][2:]\n    except subprocess.CalledProcessError:\n        lib_gsl_dir = os.getenv('LIB_GSL')\n        if lib_gsl_dir is None:\n            # Environmental variable LIB_GSL not set, use hardcoded path.\n            lib_gsl_dir = r\"c:\\Program Files\\GnuWin32\\lib\"\n        else:\n            lib_gsl_dir += \"/lib\"\n\n    return lib_gsl_dir\n    \n    \n    \n     but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nWrite a Python program to remove the duplicate items from a list\n\"\"\"\n\n# Function to remove duplicates \ndef remove_duplicates(list_with_duplicates): \n  \n    list_without_duplicates = [] \n    for item in list_with_duplicates:\n        if item not in list_without_duplicates: \n            list_without_duplicates.append(item)\n  \n    return list_without_duplicates \n\n# main \nif __name__==\"__main__\": \n    # Given List \n    list1 = [10, 20, 30, 20, 10, 50, 60, 40, 80, 50, 40] \n    print(\"Original List\", list1) \n  \n    list2 = remove_duplicates(list1) \n    print(\"List without duplicates\", list2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [1, 5, 7, 2, 8]\nmy_list.sort()\nprint(my_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(num):\n    # Check for special cases\n    if num == 0:\n        return 1\n    else:\n        # Initialize the value of product\n        product = 1\n        # Multiply each number from 1 to num\n        for i in range(1, num + 1):\n            product *= i\n        # Return the product\n        return product but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculateSumSquare(lst):\n    sum = 0\n    for element in lst:\n        sum += element**2\n    return sum\n\nlst = [3, 5, 7]\nprint(calculateSumSquare(lst)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(lst):\n return sorted(lst, reverse=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_dicts(dict1, dict2):\n    new_dict = dict1.copy()\n    new_dict.update(dict2)\n    return new_dict\n\ndict1 = {'a': 10, 'b': 20, 'c': 30}\ndict2 = {'d': 40, 'e': 50, 'f': 60}\n\nprint(merge_dicts(dict1, dict2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nresponses = {\n\"What is Acme Corporation?\": \"Acme Corporation is a global leader in innovation and technology.\",\n\"What type of products does Acme Corporation sell?\": \"Acme Corporation offers a wide range of products and services, including hardware, software, and cloud-based solutions.\",\n\"How long has Acme Corporation been in business?\": \"Acme Corporation has been in business for over 50 years.\"\n}\n\ndef chatbot_response(user_input):\n if user_input in responses:\n return responses[user_input]\n else:\n return random.choice([\"I'm sorry, I don't understand.\", \"Can you provide more information?\", \"Can you rephrase your question?\"]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_to_length(list_strings):\n    return [len(string) for string in list_strings] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n \n# Generating random points\npoints = np.random.rand(10, 2)\n \n# Calculating distance between points\ndist_matrix = np.sqrt(np.sum(points**2, axis=1, keepdims=True) + \\\n          np.sum(points**2, axis=1, keepdims=True).T - \\\n          2*np.dot(points, points.T))\n \n# Clustering\ncluster_indices = np.argmin(dist_matrix, axis=1)\ncluster_points = [points[cluster_indices == i] for i in range(points.shape[0])] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from bs4 import BeautifulSoup\n\nhtml_doc = \"\"\"\n<div>\n\t<p>This is some text.</p>\n\t<p>This is another text.</p>\n\t<div>\n\t\t<span>Some more text.</span>\n\t</div>\n</div>\n\"\"\"\n\nsoup = BeautifulSoup(html_doc)\n\ntext = soup.get_text()\n\n# Output\n# This is some text.\n# This is another text.\n# Some more text. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # package imports\nimport nltk\nfrom nltk.corpus import stopwords \nfrom nltk.tokenize import word_tokenize, sent_tokenize \n\n# store the text document as a string\ntext = '''\nThis is a sample text document that will be used to find the keywords. \nIt has a few sentences that talk about different topics such as sports, \ntechnology, and entertainment.\n'''\n\n# tokenize sentences\nsentences = sent_tokenize(text) \n\n# store keyword set\nkeywords = set() \n\nfor i in sentences: \n\t\n\t# tokenize words\n\twords = word_tokenize(i) \n\t\n\t# remove stopwords\n\twords = [w for w in words if not w in stopwords.words('english')] \n\n\t# store keywords\n\tkeywords = keywords.union(set(words)) \n\nprint(keywords)\n\n# Output: \n{'different', 'sentences', 'sports', 'document', 'Technology', \n'entertainment', 'find', 'sample', 'text', 'topics'} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def edit_distance(string1, string2):\n    m = len(string1)\n    n = len(string2)\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif string1[i-1] == string2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i][j-1], \n                        dp[i-1][j], \n                        dp[i-1][j-1]) \n    return dp[m][n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef rand_list(n):\n\trand_num_list = []\n\tfor _ in range(n):\n\t\trand_num_list.append(random.randint(1,100))\n\treturn rand_num_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPerfectSquare(n):\n    root =  n ** 0.5\n    return root == int(root)\n\nresult = isPerfectSquare(36)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_sorted_lists(list1, list2):\n    result = []\n    i = 0  # Represents the index of list1\n    j = 0  # Represents the index of list2\n \n    # Compare elements of both lists and append the smaller one\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list2[j])\n            j += 1\n \n    # List1 or List2's elements are not added to the result yet\n    result += list1[i:]\n    result += list2[j:]\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\ndef measure_performance(fn, data):\n start = time.perf_counter()\n result = fn(*data)\n elapsed = 1000 * (time.perf_counter() - start) \n return result, elapsed\n\ndef add(x, y):\n return x + y\n\ndata = (3, 5)\nresult, elapsed = measure_performance(add, data)\nprint('Result:', result)\nprint('Elapsed time (ms):', elapsed) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sorted_dict = dict(sorted(dictionary.items(), key=lambda item: item[0])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_shortest_path(start, end):\n    # for holding visited and non visited vertices \n    visited = set()\n    unvisited = set([start])\n\n    # a dictionary of predecessor nodes to maintain the \n    # path between the start and the end node \n    predecessors = {}\n\n    # holds the distance between any two nodes\n    distance = {}\n    distance[start] = 0\n\n    while unvisited:\n        # pops the vertex with minimum distance \n        current_vertex = min(unvisited, key = distance.get)\n\n        # add the minimum distance vertex to the visited \n        visited.add(current_vertex)\n        \n        # remove it from the unvisited set \n        unvisited.remove(current_vertex)\n\n        # for every neighbour of the current node \n        for neighbour in current_vertex.neighbors:\n            if neighbour in visited:\n                continue\n            \n            # make sure each unvisited node is added to \n            # the unvisited set \n            if neighbour not in unvisited:\n                unvisited.add(neighbour)\n\n            # maintain the predecessor \n            predecessors[neighbour] = current_vertex\n\n            # calculate the new distance to the neighbour node \n            new_distance = distance[current_vertex] + current_vertex.distance(neighbour)\n            if new_distance < distance.get(neighbour, float('inf')):\n                # update the distance with the new distance \n                distance[neighbour] = new_distance\n\n    # for storing paths \n    path = []\n\n    # loop through the previous to start from end node \n    # and trace back the path from start to end node \n    while end != start:\n        path.append(end)\n        end = predecessors[end]\n    # return the shortest path\n    path.append(start) \n    return path[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import heapq\n\ndef create_heap(items):\n heapq.heapify(items)\n\ndef add_item(items, item):\n heapq.heappush(items, item)\n\ndef pop_item(items):\n return heapq.heappop(items)\n\nitems = [4, 5, 2, 33, 1]\ncreate_heap(items)\nadd_item(items, 6)\npop_item(items) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ntries = 0\ngoal = random.randint(1,100)\n\nwhile True:\n    guess = int(input('Enter a number: '))\n    tries += 1\n\n    if guess == goal:\n        print('You win! You guessed the number in {} tries.'.format(tries))\n        break\n    elif guess < goal:\n        print('Too low!')\n    else:\n        print('Too high!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\nX = [2,4,6,8,10]\nY = [5,10,15,20,25]\n\nplt.plot(X,Y)\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.title('Visual Representation')\nplt.grid()\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import necessary libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# load the dataset\ndf = pd.read_csv('data.csv')\n\n# separate the data into features (X) and target (y)\nX = df.drop('target', axis=1).values\ny = df['target'].values\n\n# split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# train the model\nregressor = LinearRegression()  \nregressor.fit(X_train, y_train)\n\n# evaluate the model\nscore = regressor.score(X_test, y_test)\nprint('Model accuracy on test set: ', score) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import defaultdict\n\ndef find_anagrams(words):\n   anagrams = defaultdict(list)\n\n   # Loop through each word and sort it\n   for word in words:\n    sorted_word = ''.join(sorted(word))\n\n    # Add to defaultdict\n    anagrams[sorted_word].append(word)\n\n   # Filter anagrams list by length > 1\n   anagrams = {k: v for k,v in anagrams.items() if len(v) > 1}\n\n   return anagrams\n\nprint(find_anagrams([\"bat\", \"cats\", \"tab\", \"dog\", \"act\"]))\n# Output: {'act': ['bat', 'tab'], 'act': ['cats', 'act']} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: seen = set()\nduplicates = []\nfor item in my_list:\n if item in seen:\n duplicates.append(item)\n else:\n seen.add(item)\n\nprint(duplicates)\n# Output: [3, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(randomString()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python3\n\n#\n#    Copyright (c) 2015-2017 Nest Labs, Inc.\n#    All rights reserved.\n#\n#    Licensed under the Apache License, Version 2.0 (the \"License\");\n#    you may not use this file except in compliance with the License.\n#    You may obtain a copy of the License at\n#\n#        http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n#    distributed under the License is distributed on an \"AS IS\" BASIS,\n#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#    See the License for the specific language governing permissions and\n#    limitations under the License.\n#\n\n##\n#    @file\n#       Implements HappyProcessStart class that stars process within virtual nodes.\n#\n#       Process runs a command in a virtual node, which itself\n#       is a logical representation of a network namespace.\n#\n\nfrom __future__ import absolute_import\nimport os\nimport subprocess\nimport sys\nimport time\nimport psutil\nimport warnings\n\nfrom happy.ReturnMsg import ReturnMsg\nfrom happy.Utils import *\nfrom happy.HappyNode import HappyNode\nfrom happy.HappyProcess import HappyProcess\nimport happy.HappyProcessStop\n\noptions = {}\noptions[\"quiet\"] = False\noptions[\"node_id\"] = None\noptions[\"tag\"] = None\noptions[\"command\"] = None\noptions[\"strace\"] = False\noptions[\"env\"] = {}\noptions[\"sync_on_output\"] = None\noptions[\"rootMode\"] = False\n\ndef option():\n    return options.copy()\n\n\nclass HappyProcessStart(HappyNode, HappyProcess):\n    \"\"\"\n    Starts a happy process.\n\n    happy-process-start [-h --help] [-q --quiet] [-i --id <NODE_NAME>]\n                        [-t --tag <DAEMON_NAME>] [-s --strace]\n                        [-e --env <ENVIRONMENT>] <COMMAND>\n\n        -i --id     Optional. Node on which to run the process. Find using\n                    happy-node-list or happy-state.\n        -t --tag    Required. Name of the process.\n        -s --strace Optional. Enable strace output for the process.\n        -e --env    Optional. An environment variable to pass to the node\n                    for use by the process.\n        <COMMAND>   Required. The command to run as process <DAEMON_NAME>.\n\n    Example:\n    $ happy-process-start BorderRouter ContinuousPing ping 127.0.0.1\n        Starts a process within the BorderRouter node called ContinuousPing\n        that runs \"ping 127.0.0.1\" continuously.\n\n    return:\n        0    success\n        1    fail\n    \"\"\"\n\n    def __init__(self, opts=options):\n        HappyNode.__init__(self)\n        HappyProcess.__init__(self)\n\n        self.quiet = opts[\"quiet\"]\n        self.node_id = opts[\"node_id\"]\n        self.tag = opts[\"tag\"]\n        self.command = opts[\"command\"]\n        self.strace = opts[\"strace\"]\n        self.env = opts[\"env\"]\n        self.sync_on_output = opts[\"sync_on_output\"]\n        self.output_fileput_suffix = \".out\"\n        self.strace_suffix = \".strace\"\n        self.rootMode = opts[\"rootMode\"]\n\n    def __stopProcess(self):\n        emsg = \"Process %s stops itself.\" % (self.tag)\n        self.logger.debug(\"[%s] daemon [%s]: %s\" % (self.node_id, self.tag, emsg))\n\n        options = happy.HappyProcessStop.option()\n        options[\"node_id\"] = self.node_id\n        options[\"tag\"] = self.tag\n        options[\"quiet\"] = self.quiet\n        stopProcess = happy.HappyProcessStop.HappyProcessStop(options)\n        stopProcess.run()\n\n        self.readState()\n\n    def __pre_check(self):\n        # Check if the new process is given\n        if not self.tag:\n            emsg = \"Missing name of the new process to start.\"\n            self.logger.error(\"[localhost] HappyProcessStart: %s\" % (emsg))\n            self.exit()\n\n        # Check if the name of new process is not a duplicate (that it does not already exists).\n        if self.processExists(self.tag):\n            emsg = \"virtual process %s already exist.\" % (self.tag)\n            self.logger.info(\"[%s] HappyProcessStart: %s\" % (self.node_id, emsg))\n            self.__stopProcess()\n\n        # Check if the process command is given\n        if not self.command:\n            emsg = \"Missing process command.\"\n            self.logger.error(\"[localhost] HappyProcessStart: %s\" % (emsg))\n            self.exit()\n\n        timeStamp = \"%010.6f\" % time.time()\n        pid = \"%06d\" % os.getpid()\n        emsg = \"Tag: %s PID: %s timeStamp : %s\" % (self.tag, pid, timeStamp)\n        self.logger.debug(\"[%s] HappyProcessStart: %s\" % (self.node_id, emsg))\n\n        self.output_file = self.process_log_prefix + pid + \\\n            \"_\" + timeStamp + \"_\" + self.tag + self.output_fileput_suffix\n        self.strace_file = self.process_log_prefix + pid + \\\n            \"_\" + timeStamp + \"_\" + self.tag + self.strace_suffix\n\n    def __poll_for_output(self):\n        poll_interval_sec = 0.01\n        max_poll_time_sec = 180\n        time_slept = 0\n        tail = open(self.output_file, \"r\")\n        self.logger.debug(\"[%s] HappyProcessStart: polling for output: %s\" % (self.node_id, self.sync_on_output))\n        while (True):\n            line = tail.readline()\n            if not line:\n                time.sleep(poll_interval_sec)\n                time_slept += poll_interval_sec\n                poll_interval_sec *= 2\n                if (time_slept > max_poll_time_sec):\n                    self.logger.debug(\"[%s] HappyProcessStart: can't find the output requested: %s\" %\n                                      (self.node_id, self.sync_on_output))\n                    raise RuntimeError(\"Can't find the output requested\")\n\n            elif self.sync_on_output in line:\n                self.logger.debug(\"[%s] HappyProcessStart: found output: %s in %s secs\" %\n                                  (self.node_id, self.sync_on_output, str(time_slept)))\n                break\n            else:\n                continue\n\n        tail.close()\n        return\n\n    def __start_daemon(self):\n        cmd = self.command\n\n        # We need to support 8 combinations:\n        # Who: user or root\n        # strace: yes or not\n        # env: yes or not\n\n        # Given this script called sayhello.sh:\n        #     #!/bin/bash\n        #     echo Hello ${USER}!\n        #     echo You passed the following opts $1, $2, $3\n        #     echo MYENVVAR is $MYENVVAR\n\n        # a successful run with an environment variable prints:\n        #     Hello andreello!\n        #     You passed the following opts a, b, c\n        #     MYENVVAR is hello\n\n        # The goal is to use the simples command line possible; in particular, we don't\n        # want to call sudo unless strictly necessary (for performance reasons).\n\n        # Here is how the CLI looks like if you use \"ip netns exec\" directly:\n\n        # user without env:\n        # sudo ip netns exec happy000 sudo -u andreello                                            ./sayhello.sh a b c\n\n        # user with env:\n        # sudo ip netns exec happy000 sudo -u andreello                             MYENVVAR=hello ./sayhello.sh a b c\n\n        # root without env:\n        #      ip netns exec happy000                                                              ./sayhello.sh a b c\n\n        # root with env\n        #      ip netns exec happy000                   bash -c                    'MYENVVAR=hello ./sayhello.sh a b c'\n\n        # user with strace, without env\n        # sudo ip netns exec happy000 sudo -u andreello strace -tt -o strace.out                   ./sayhello.sh a b c\n\n        # user with strace, with env\n        # sudo ip netns exec happy000 sudo -u andreello strace -tt -o strace.out -E MYENVVAR=hello ./sayhello.sh a b c\n\n        # root with strace, without env\n        #      ip netns exec happy000                   strace -tt -o strace.out                   ./sayhello.sh a b c\n\n        # root with strace, with env\n        #      ip netns exec happy000                   strace -tt -o strace.out -E MYENVVAR=hello ./sayhello.sh a b c\n\n        # Highlights:\n        # - to pass environment variables, either 'strace -E' or 'bash -c'\n        # - but, 'bash -c' requires the command to be in one string, while 'strace -E' requires the opposite\n        # - the examples above show the argument to 'bash -c' in quotes, but they are not necessary when passing\n        #   the list of strings to Popen()\n        # - also, the examples above show only one env var; if passing more than one to strace, they need to have\n        #   a '-E' each\n        # In summary, it's easier to build the cmd as a full string, and then split it the right way depending\n        # on strace vs bash.\n\n        # Here are a few examples of how the string is split into a list:\n        #\n        # user without env:\n        # ./bin/happy-process-start.py -i node01 -t HELLO ./sayhello.sh a b c\n        # [u'sudo', u'ip', u'netns', u'exec', u'happy000', u'sudo', u'-u', u'andreello', u'./sayhello.sh', u'a', u'b', u'c']\n        #\n        # user with env:\n        # ./bin/happy-process-start.py -i node01 -e \"MYENVVAR=hello\" -t HELLO ./sayhello.sh a b c\n        # [u'sudo', u'ip', u'netns', u'exec', u'happy000', u'sudo', u'-u', u'andreello',\n        #       u'MYENVVAR=hello', u'./sayhello.sh', u'a', u'b', u'c']\n        #\n        # root without env:\n        # sudo ./bin/happy-process-start.py -i node01  -t HELLO ./sayhello.sh a b c\n        # [u'ip', u'netns', u'exec', u'happy000', u'./sayhello.sh', u'a', u'b', u'c']\n        #\n        # user with env and strace:\n        # ./bin/happy-process-start.py -i node01 -e \"MYENVVAR=hello\" -s  -t HELLO ./sayhello.sh a b c\n        # [u'sudo', u'ip', u'netns', u'exec', u'happy000', u'sudo', u'-u', u'andreello', u'strace', u'-tt', u'-o',\n        #       u'/tmp/happy_..._HELLO.strace', u'-E', u'MYENVVAR=hello', u'./sayhello.sh', u'a', u'b', u'c']\n        #\n        # root with env:\n        # [u'ip', u'netns', u'exec', u'happy000', 'bash', '-c', u' MYENVVAR=hello ./sayhello.sh a b c']\n        #\n        # root with strace no env:\n        # sudo ./bin/happy-process-start.py -i node01 -s  -t HELLO ./sayhello.sh a b c\n        #\n        # root with strace and env:\n        # [u'ip', u'netns', u'exec', u'happy000', u'strace', u'-tt', u'-o', u'/tmp/happy_..._HELLO.strace',\n        #       u'-E', u'MYENVVAR=hello', u'./sayhello.sh', u'a', u'b', u'c']\n\n        need_internal_sudo = False\n        if os.getuid() != 0:\n            need_internal_sudo = True\n\n        if \"sudo\" in cmd.split():\n            # The command already has the inner sudo; typical case is that\n            # a normal user started Happy, and the script needs to run\n            # a command in a node as root. If sudo is for root, remove it.\n            # TODO: properly support \"sudo -u\" with strace\n            cmd = self.stripRunAsRoot(cmd)\n            need_internal_sudo = False\n\n        env_vars_list = []\n        cmd_list_prefix = []\n        need_bash = False\n\n        if \"bash -c\" in cmd:\n            tmp = cmd.split(\"bash -c\")\n            need_bash = True\n            cmd_list_prefix = tmp[0].split()\n            cmd = tmp[1]\n\n        for key, value in self.env.items():\n            tmp = \"\"\n            try:\n                tmp = \"\" + key + \"=\" + value\n                env_vars_list.append(tmp)\n            except:\n                self.logger.error(\"Failed to serialize environment variable %s\" % (key));\n\n        self.logger.debug(\"HappyProcessStart with env: > %s\" % (env_vars_list))\n\n        if self.strace:\n            cmd_list_prefix = [\"strace\", \"-tt\", \"-o\", self.strace_file] + cmd_list_prefix\n            tmp = []\n            for i in env_vars_list:\n                tmp.append(\"-E\")\n                tmp.append(i)\n            env_vars_list = tmp\n\n        elif need_internal_sudo:\n            pass\n        elif len(env_vars_list):\n            need_bash = True\n\n        if need_internal_sudo:\n            if self.rootMode:\n                tmp = self.getRunAsRootPrefixList()\n            else:\n                tmp = self.getRunAsUserPrefixList()\n            cmd_list_prefix = tmp + cmd_list_prefix\n\n        if self.node_id:\n            cmd_list_prefix = [\"ip\", \"netns\", \"exec\", self.uniquePrefix(self.node_id)] + cmd_list_prefix\n\n        cmd_list_prefix = self.getRunAsRootPrefixList() + cmd_list_prefix\n\n        try:\n            self.fout = open(self.output_file, \"wb\", 0)\n        except Exception:\n            emsg = \"Failed to open file %s.\" % (self.output_file)\n            self.logger.error(\"[%s] HappyProcessStart: %s.\" % (self.node_id, emsg))\n            self.exit()\n\n        self.logger.debug(\"HappyProcessStart: > %s\" % (cmd))\n\n        popen = None\n\n        try:\n            cmd_list = []\n            if need_bash:\n                env_vars_list = []\n                for key, value in self.env.items():\n                  tmp = \"\"\n                  try:\n                      tmp = \"\" + key + '=\"' + value.replace('\\\\','\\\\\\\\').replace('\"','\\\\\"') +'\"'\n                      env_vars_list.append(tmp)\n                  except:\n                      self.logger.error(\"Failed to serialize environment variable %s\" % (key));\n                cmd = \" \".join(env_vars_list) + ' ' + cmd\n                cmd_list = cmd_list_prefix + [\"bash\", \"-c\", cmd]\n            else:\n                cmd_list = cmd_list_prefix + env_vars_list + cmd.split()\n\n            self.logger.debug(\"[%s] HappyProcessStart: executing command list %s\" % (self.node_id, cmd_list))\n            popen = subprocess.Popen(cmd_list, stdin=subprocess.PIPE, stdout=self.fout)\n            self.child_pid = popen.pid\n            emsg = \"running daemon %s (PID %d)\" % (self.tag, self.child_pid)\n            self.logger.debug(\"[%s] HappyProcessStart: %s\" % (self.node_id, emsg))\n\n            # The following is guaranteed to fetch info about the right process (i.e. the PID has\n            # no chance of being reused) because even if the child process terminates right away, it'll stay\n            # around in <defunct> until the popen object has been destroyed or popen.poll() has\n            # been called.\n            p = psutil.Process(self.child_pid)\n\n            # At python.psutil 2.0.0, create_time changed from a data\n            # member to a member function. Try to access the modern member\n            # function first. If that throws, try the old data member.\n\n            try:\n                self.create_time = p.create_time()\n            except Exception:\n                self.create_time = p.create_time\n\n            emsg = \"Create time: \" + str(self.create_time)\n            self.logger.debug(\"[%s] HappyProcessStart: %s.\" % (self.node_id, emsg))\n\n            if self.sync_on_output:\n                self.__poll_for_output()\n\n        except Exception as e:\n            if popen:\n                # We need to kill the process tree; if popen succeeded,\n                # we assume we were also able to get the create_time\n                self.TerminateProcessTree(popen.pid, self.create_time)\n\n            emsg = \"Starting process with command %s FAILED with %s.\" % (cmd, str(e))\n            self.logger.error(\"[%s] HappyProcessStart: %s.\" % (self.node_id, emsg))\n            self.exit()\n\n    def __post_check(self):\n        pass\n\n    def __update_state(self):\n        emsg = \"Update State with tag %s running command: %s\" % \\\n            (self.tag, self.command)\n        self.logger.debug(\"[%s] HappyProcessStart: %s .\" % (self.node_id, emsg))\n\n        new_process = {}\n        new_process[\"pid\"] = self.child_pid\n        new_process[\"out\"] = self.output_file\n        new_process[\"strace\"] = self.strace_file\n        new_process[\"command\"] = self.command\n        new_process[\"create_time\"] = self.create_time\n\n        self.setNodeProcess(new_process, self.tag, self.node_id)\n\n        self.writeState()\n\n    def run(self):\n        with self.getStateLockManager():\n\n            self.readState()\n\n            self.__pre_check()\n\n            self.__start_daemon()\n\n            self.__update_state()\n\n            self.__post_check()\n\n        return ReturnMsg(0)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_array(arr):\n    arr.sort()\n    return arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n return render_template('home.html')\n\n@app.route('/create', methods=['GET', 'POST'])\ndef create():\n if request.method == 'GET':\n  return render_template('create.html')\n elif request.method == 'POST':\n  article = request.form['article']\n  # add article to database\n  return render_template('created.html')\n\n@app.route('/view')\ndef view():\n # get article from database\n return render_template('view.html', article=article)\n\n@app.route('/edit', methods=['GET', 'POST'])\ndef edit():\n if request.method == 'GET':\n  # get article from database\n  return render_template('edit.html', article=article)\n elif request.method == 'POST':\n  edited_article = request.form['edited_article']\n  # update article in database\n  return render_template('edited.html')\n\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\ndata = pd.read_csv('data.csv')\n\nX = data[['Age', 'Gender']]\ny = data['Bought']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nmodel = RandomForestClassifier()\nmodel.fit(X_train, y_train)\n\nscore = model.score(X_test, y_test)\n\nprint(score) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: people = [\n {\"name\": \"Alice\", \"age\": 8},\n {\"name\": \"Bob\", \"age\": 11},\n {\"name\": \"Charlie\", \"age\": 13},\n {\"name\": \"John\", \"age\": 15},\n]\n\n# Append a new record with data programmatically:\nrecord = {\"name\": \"John\", \"age\": 15}\npeople.append(record) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compute_std_dev(values):\n  n = len(values)\n  mean = 0\n  for i in range(n):\n    mean += values[i]\n  mean /= n\n  std_dev = 0\n  for i in range(n):\n    std_dev += (values[i] - mean)**2\n  std_dev /= n\n  return std_dev**(1/2)\n#Example:\ncompute_std_dev([12,14,11,20,13])\n#Output: 3.067 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class InsertionSort:\n    def sort(self, arr): \n        for i in range(1, len(arr)): \n            key = arr[i] \n            j = i-1\n            while j >=0 and key < arr[j] : \n                    arr[j+1] = arr[j] \n                    j -= 1\n            arr[j+1] = key\n        return arr\n\nInsertionSort().sort([5, 2, 4, 1, 3]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport bs4\n\n# Make the request to Amazon\nurl = 'https://www.amazon.com/best-sellers-books-Amazon/zgbs/books/ref=zg_bs_nav_0'\nres = requests.get(url)\n\n# Use BeautifulSoup to parse the HTML\nsoup = bs4.BeautifulSoup(res.text, 'html.parser')\n# Extract the top 10 books\nbooks = soup.select('.aok-inline-block.zg-item')[:10]\n# Extract the price for each book\nprices = []\nfor book in books:\n price = book.select('.p13n-sc-price')[0].text.strip()\n prices.append(price)\n \nprint(prices) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [(\"a\", 1), (\"b\", 2), (\"c\", 3), (\"d\", 4)]\n\nd = dict(list)\n\nprint(d)\n# Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: objectMap = {\n\"a\": \"apple\",\n\"b\": \"banana\",\n\"c\": \"carrot\",\n\"d\": \"date\",\n\"e\": \"eggplant\"\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The function `simple_func` is running very slowly. To speed up the function, one possible way is to use the built-in Python `sum` function that already exists, instead of looping over the `arr` list to manually add up the elements. Another possible option is to use vectorization with NumPy to perform arithmetic operations on the entire array at once, thus avoiding loops and significantly reducing the computation time. And finally, using Cython to compile the code from Python to C code may improved the performance even further. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ReverseString:\n def __init__(self, string):\n self.string = string\n\n def reverse(self):\n return self.string[::-1]\n\nstring_object = ReverseString('hello')\nreversed_string = string_object.reverse()\n\nprint(reversed_string) # olleh but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_outlier(arr):\n    mean = sum(arr)/len(arr)\n    stdev = (sum([(x-mean)**2 for x in arr])/len(arr))**(0.5)\n\n    for i in arr:\n        z_score = (i - mean)/stdev\n        if z_score >= 3 or z_score <= -3:\n            return i\n    \n    # no outliers found\n    return None\n    \narr = [30, 45, 12, 18, 32, 44, 25]\n \noutlier = find_outlier(arr)\nprint(outlier) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def cube_area(side):\n return 6 * (side ** 2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(lst):\n    for i in range(len(lst) - 1): \n        for j in range (0, len(lst) - i - 1): \n            if lst[j] > lst[j + 1] : \n                lst[j], lst[j + 1] = lst[j + 1], lst[j] \n    return lst\n\nsorted_list = bubble_sort([10, 6, 8, 4])\nprint(sorted_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def permutations(words):\n \n  if len(words) == 0:\n    return []\n  elif len(words) == 1: \n    return [words]\n  else:\n    perms = []\n    for word in words: \n      remaining_words = words[:] \n      remaining_words.remove(word)\n      z = permutations(remaining_words)   \n      for perm in z: \n        perms.append([word] + perm)\n    return perms\n \n# Test \nwords = ['cat', 'dog', 'bird']\nprint(permutations(words))\n\n# Output \n[['cat', 'dog', 'bird'], ['cat', 'bird', 'dog'], ['dog', 'cat', 'bird'], ['dog', 'bird', 'cat'], ['bird', 'cat', 'dog'], ['bird', 'dog', 'cat']] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sumNegatives(list): \n    count = 0\n    total = 0\n    for number in list:\n        if number < 0:\n            count += 1\n            total += number\n    return count, total\n\nnumList = [-2, 4, 3, -3, -4, 5]\nnegativeCount, negativeSum = sumNegatives(numList)\n\nprint('Number of Negative Numbers:', negativeCount) \nprint('Sum of Negative Numbers:', negativeSum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factor_of_three(n):\n  return len([i for i in range(1, n+1) if i % 3 == 0])\n  \nfactor_of_three(50) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com/'\nheaders = {'User-Agent': 'Mozilla/5.0'}\n\nresponse = requests.get(url, headers=headers)\nsoup = BeautifulSoup(response.text, 'lxml')\n\ndata = []\nfor item in soup.find_all('div', class_='blog-post'):\n    post_data = {\n        'title': item.h2.text,\n        'body': item.p.text,\n        'url': item.find('a')['href']\n    }\n    data.append(post_data) but is not the same. just give one example and only return the code."}
