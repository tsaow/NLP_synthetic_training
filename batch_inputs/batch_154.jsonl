{"prompt": "make some code that functions the same as the following code: def classify_data_points(data_points, labels):\n    classified_data_points = []\n    for data_point in data_points:\n        if data_point[0] == data_point[1]:\n            classified_data_points.append((data_point, labels[0]))\n        else:\n            classified_data_points.append((data_point, labels[1]))\n    return classified_data_points but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: square_numbers = [x**2 for x in range(10)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import http.server\n\ndef respond(handler):\n    handler.send_response(200)\n    handler.send_header('Content-type','text/html')\n    handler.end_headers()\n    handler.wfile.write(b'Hello World')\n\nclass MyWebRequestHandler(http.server.BaseHTTPRequestHandler):\n    def do_GET(self):\n        respond(self)\n\nif __name__=='__main__':\n    server = http.server.HTTPServer(('0.0.0.0', 8001), MyWebRequestHandler)\n    print('Starting server at port 8001...')\n    server.serve_forever() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(arr, key):\n    for index, element in enumerate(arr):\n        if element == key:\n            return index\n    return -1\n\nprint(linear_search(arr, key)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \nclass LinkedList: \n    def __init__(self): \n        self.head = None\n  \n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head \n        self.head = new_node \n  \n    def printList(self): \n        temp = self.head \n        while (temp): \n            print(temp.data) \n            temp = temp.next but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_longest_common_substring(s1, s2): \n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))] \n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)): \n        for y in range(1, 1 + len(s2)): \n            if s1[x - 1] == s2[y - 1]: \n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest: \n                    longest = m[x][y] \n                    x_longest = x \n            else: \n                m[x][y] = 0\n              \n    return s1[x_longest - longest: x_longest] \n  \n# Driver code \nstring1 = \"ABBABCD\"\nstring2 = \"ABCABC\"\n  \nprint(\"Longest Common Substring: \" + \n      find_longest_common_substring(string1, string2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_to_int(list_of_ints):\n number = 0\n for int in list_of_ints:\n  number = number*10 + int\n return number but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame({'Rooms': [3],\n 'Square_Footage': [2000],\n 'Zip_Code': [92101]\n })\n\n# Split the input data into independent and dependent variables\nX = data.iloc[:, :-1]\ny = data.iloc[:, -1]\n\n# Build the model\nfrom sklearn.linear_model import LinearRegression\n\nregressor = LinearRegression()\nregressor.fit(X, y)\n\n# Predict the price\nprediction = regressor.predict([[3, 2000, 92101]])\nprint(prediction) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Find the shortest path between two given points in a grid \ndef findShortestPath(grid, start, end): \n    # Create a queue for BFS \n    queue = [] \n    # Create visited array \n    visited= [[False for col in range(len(grid[0]))] for row in range(len(grid))]\n    # Create a Node object with the starting point \n    start_node = Node(start[0],start[1],0) \n    # Append the start node to the queue \n    queue.append(start_node) \n    # Check if the start and end coordinate is the same \n    if start== end: \n        return \"Both points are same,no need to search\"\n    # Flag that indicates if the target node is reached \n    target_found = False\n    while queue and not target_found: \n        # Get the front node \n        node = queue.pop(0) \n        i = node.x \n        j = node.y \n        # Check if the current node is the target \n        if([i,j] == end): \n            target_found = True\n            # Return the number of moves from the start node to the target node \n            return node.dist \n        # Check if the current node is unvisited and not an obstacle \n        if(not visited[i][j] and grid[i][j]!=1): \n            # Mark the current node as visited \n            visited[i][j] = True\n            # Add all possible adjacent nodes to the queue \n            # Move up \n            if(i+1<len(grid)): \n                queue.append(Node(i+1,j,node.dist + 1)) \n            # Move down \n            if(i-1>=0): \n                queue.append(Node(i-1,j,node.dist + 1)) \n            # Move left \n            if(j+1<len(grid[0])): \n                queue.append(Node(i,j+1,node.dist + 1)) \n            # Move right \n            if(j-1>=0): \n                queue.append(Node(i,j-1,node.dist + 1)) \n    return 0 \n\n# Create a Node class for storing each node \nclass Node: \n    def __init__(self,x,y,dist): \n        self.x = x \n        self.y = y \n        self.dist = dist but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [1, 3, 5, 3, 7, 3, 6]\ntarget = 3\n\ndef findIndex(arr, target): \n    for i in range(len(arr)): \n        if arr[i] == target: \n            return i \n  \n    return -1\n  \n# Driver Code \nindex = findIndex(arr, target) \nprint(\"Index of\", target, \"is\", index) \n\n// Output: Index of 3 is 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def word_lengths(string):\n    words = string.split(' ')\n    lengths = []\n    for word in words:\n        lengths.append(len(word))\n    return lengths \n\nword_lengths('Hello World') // [5, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_maximum(nums):\n    # Initialize the maximum number \n    max_num = nums[0]\n    # Loop through the list\n    for num in nums:\n        # Check if the current number is bigger\n        if num > max_num:\n            # If it is, save the number\n            max_num = num\n\n    return max_num\n\n# call the function\nmaximum = find_maximum(nums)\nprint(\"The maximum is \" + str(maximum)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def average_ignoring_ten(numbers):\n    total = 0\n    number_of_numbers = 0\n    \n    for number in numbers:\n        if number <= 10:\n            total += number\n            number_of_numbers += 1\n    \n    return total / number_of_numbers but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n \ndef generate_password(length):\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(password_chars) for i in range(length))\n \nprint(generate_password(20)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os\nimport sys\nfrom vulpo.utils import ShellCommand, get_ts\nimport vulpo\nimport vulpo.utils\n\nclass ScriptBase(object):\n\n    def __init__(self, config_file=None):\n        self.instance_id = vulpo.config.get('Instance', 'instance-id', 'default')\n        self.name = self.__class__.__name__\n        self.ts = get_ts()\n        if config_file:\n            vulpo.config.read(config_file)\n\n    def notify(self, subject, body=''):\n        vulpo.utils.notify(subject, body)\n\n    def mkdir(self, path):\n        if not os.path.isdir(path):\n            try:\n                os.mkdir(path)\n            except:\n                vulpo.log.error('Error creating directory: %s' % path)\n\n    def umount(self, path):\n        if os.path.ismount(path):\n            self.run('umount %s' % path)\n\n    def run(self, command, notify=True, exit_on_error=False, cwd=None):\n        self.last_command = ShellCommand(command, cwd=cwd)\n        if self.last_command.status != 0:\n            vulpo.log.error('Error running command: \"%s\". Output: \"%s\"' % (command, self.last_command.output))\n            if notify:\n                self.notify('Error encountered', \\\n                        'Error running the following command:\\n\\t%s\\n\\nCommand output:\\n\\t%s' % \\\n                        (command, self.last_command.output))\n            if exit_on_error:\n                sys.exit(-1)\n        return self.last_command.status\n\n    def main(self):\n        pass\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_avg_string_length(string_list):\n    total_length = 0\n\n    for item in string_list:\n        total_length += len(item)\n    \n    return total_length / len(string_list)\n\nlist_of_strings = [\"cat\", \"dog\", \"mouse\", \"elephant\"]\n\nresult = calculate_avg_string_length(list_of_strings)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef classify_sentiment(tweet):\n    sid = SentimentIntensityAnalyzer()\n    scores = sid.polarity_scores(tweet)\n    \n    if scores['compound'] > 0:\n        return 'positive'\n    elif scores['compound'] == 0:\n        return 'neutral'\n    else:\n        return 'negative'\n\ntweet = \"I'm so confused about everything I'm going through right now\"\nsentiment = classify_sentiment(tweet)\n\nprint(sentiment) # prints 'negative' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name, age, subjects):\n        self.name = name\n        self.age = age\n        self.subjects = subjects\n    \n    def getName(self):\n        return self.name\n    \n    def getAge(self):\n        return self.age\n    \n    def getSubjects(self):\n        return self.subjects but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom keras.layers import Dense\nfrom keras.models import Sequential\n\n# Prepare training data\nX = np.array([[1, 0, 1]])\ny = np.array([0])\n\n# Create model\nmodel = Sequential()\nmodel.add(Dense(3, input_dim=3, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(X, y)\n\n# Predict output\npred = model.predict(X) \nprint(pred) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef get_num_syllables(word):\n    #list of vowel characters\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    \n    #count the number of syllables\n    num_syllables = 0\n    for i in range(len(word)):\n        if word[i].lower() in vowels:\n            num_syllables += 1\n        #don't double count syllables\n        elif word[i] == 'e' and (i == len(word)-1 or not word[i+1].lower() in vowels):\n            num_syllables -= 1\n    \n    return num_syllables\n\nword = \"potato\"\n\nnum_syllables = get_num_syllables(word)\nprint(\"The word '\" + word + \"' has \" + str(num_syllables) + \" syllables.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def invert_dictionary(d): \n    inverse = dict() \n    for key in d: \n        # Go through the original dictionary \n        val = d[key] \n        # Check if key already exists in the inverse dictionary \n        if val not in inverse: \n            # If not, create a new key-value pair \n            inverse[val] = [key] \n        else: \n            inverse[val].append(key) \n    return inverse but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def csv_to_dict(s):\n    data_dict = {}\n    # split the string into list of elements\n    elements = s.split(',')\n    \n    # iterate through the list\n    for i in range(0, len(elements), 2):\n        # add each element as a key to the dictionary\n        data_dict[elements[i]] = elements[i+1]\n    \n    # return the dictionary\n    return data_dict but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def wordCount(str): \n    count = len(str.split()) \n    return count \n\nprint(wordCount(\"Example string\")) \n\n# Output: 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import ast\n\ntree = ast.parse(expression) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///db.sqlite'\n\ndb = SQLAlchemy(app)\n\nclass User(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n username = db.Column(db.String(80), unique=True, nullable=False)\n email = db.Column(db.String(120), unique=True, nullable=False)\n\ndb.create_all()\n\n@app.route('/users', methods=['GET'])\ndef get_users():\n users = User.query.all()\n return jsonify([user.serialize() for user in users])\n\n@app.route('/user/<int:user_id>', methods=['GET'])\ndef get_user_by_id(user_id):\n user = User.query.get(user_id)\n if user is None:\n  return jsonify({'error': 'User not found'}), 404\n return jsonify(user.serialize())\n\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create a data processing job\nimport boto3\n\njob_name = \"sagemaker-demo-stock-price-job\"\nrole = \"arn:aws:iam::aws:role/service-role/AmazonSageMaker-ExecutionRole-20200720T202051\"\n\ndataprocessing = boto3.client('sagemaker')\n\nresponse = dataprocessing.create_processing_job(\n    ProcessingInputs=[{\n        'InputName': 'stock_data',\n        'S3Input': {\n            'S3Uri': 's3://stock-data-bucket/data',\n            'LocalPath': '/opt/ml/processing/input'\n        }\n    }],\n    ProcessingOutputConfig={\n        'Outputs': [{\n            'OutputName': 'stock_data_processed',\n            'S3Output': {\n                'S3Uri': 's3://stock-data-bucket/processed-data',\n                'LocalPath': '/opt/ml/processing/output'\n            }\n        }],\n        'KmsKeyId': 'aws/sagemaker'\n    },\n    ProcessingJobName=job_name,\n    ProcessingResources={\n        'ClusterConfig': {\n            'InstanceCount': 1,\n            'InstanceType': 'ml.m5.xlarge',\n            'VolumeSizeInGB': 30\n        }\n    },\n    StoppingCondition={\n        'MaxRuntimeInSeconds': 1800\n    },\n    AppSpecification={\n        'ImageUri': '732703918919.dkr.ecr.us-east-1.amazonaws.com/sagemaker-stock-price-model:1.0.0',\n\t'ContainerEntrypoint': [\n            'python3',\n            '/opt/ml/processing/train.py'\n        ]\n    },\n    Environment={\n        'MaxRuntimeInSeconds': 1800,\n        'ResourceConfig': {\n            'VolumeKmsKeyId': 'aws/sagemaker'\n        }\n    },\n    RoleArn=role\n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Chatbot:\n    def __init__(self, name):\n        self.name = name\n \n    def greet(self):\n        print(\"Hey there! I'm {}. What's your name?\".format(self.name))\n \n    def handle_input(self, user_input):\n        if user_input == \"Hi\":\n            print(\"Hi there! What can I do for you?\")\n        elif user_input == \"Bye\":\n            print(\"Bye! Have a great day!\")\n        else:\n            print(\"I'm sorry, I don't understand.\")\n \nbot = Chatbot(\"Python Bot\")\nbot.greet()\nbot.handle_input(\"Hi\")\nbot.handle_input(\"Bye\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def clean_data(data):\n    cleaned_data = []\n    for row in data:\n        if row[1] != '' and row[2] != '':\n            cleaned_data.append(row)\n    \n    return cleaned_data but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcf(a, b):\n    if (a == 0):\n        return b\n    if (b == 0):\n        return a\n\n    if (a == b):\n        return a\n\n    if (a > b):\n        return gcf(a-b, b)\n    return gcf(a, b-a) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent(sequence): \n    return max(set(sequence), key = sequence.count) \n\nprint(most_frequent(sequence)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_dict_list(data):\n    \"\"\"\n    Sort a list of dictionaries based on their values and keys.\n    \n    Parameters:\n        data (list): List of dictionaries with key and value\n    \n    Returns:\n        list: Sorted list of dictionaries\n    \"\"\"\n    return sorted(data, key=lambda k: (k['name'], k['age']))\n\nif __name__ == '__main__':\n    data = [\n        {\"name\": \"John\", \"age\": 20},\n        {\"name\": \"Alex\", \"age\": 16},\n        {\"name\": \"David\", \"age\": 30}\n    ]\n    print(sort_dict_list(data)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(arr): \n    return max(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport json\nimport matplotlib.pyplot as plt\n\n# Fetch stock data from the API\nresponse = requests.get('https://api.iextrading.com/1.0/stock/{symbol}/chart/1d')\n\n# Parse the data into a dict\ndata = json.loads(response.text)\n\nx_values = [entry['minute'] for entry in data]\ny_values = [entry['average'] for entry in data]\n \n# Plot the data\nplt.plot(x_values, y_values)\nplt.title('Stock Market Data for Apple')\nplt.xlabel('Time (minutes)')\nplt.ylabel('Average Price')\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: x = y + 2*z - 7 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(input_string): \n    str = \"\" \n    for i in input_string: \n        str = i + str\n    return str\n  \nif __name__ == \"__main__\": \n    input_string = \"This is a Test string\"\n    print(reverse_string(input_string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_letter(string, n):\n    result = \"\"\n    for char in string:\n        if char == 'z':\n            result += 'b'\n        elif char == 'Z':\n            result += 'B'\n        else:\n            result += chr(ord(char) + n)\n    \n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport math\n \ndef get_random_points_in_circle(center, radius):\n points = []\n x_center, y_center = center\n \n while True:\n  x = random.uniform(x_center - radius, x_center + radius)\n  y = random.uniform(y_center - radius, y_center + radius)\n \n  dist = math.sqrt((x - x_center) ** 2 + (y - y_center) ** 2)\n \n  if dist <= radius:\n   points.append((x, y))\n \n  if len(points) >= 10:\n   break\n \n return points\n \nif __name__ == \"__main__\":\n points = get_random_points_in_circle((4, 4), 3)\n print(points) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n \n# parse json file\ndata = json.loads(<input>)\n \n# print key-value pairs for each item in json string\nfor item in data['data']:\n    print('ID:', item['id'])\n    print('Name:', item['name'])\n    print('Age:', item['age']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from Crypto.Cipher import AES\n\n# the block size for the cipher object; must be 16, 24, or 32 for AES\nBLOCK_SIZE = 16\n\n# the character used for padding--with a block cipher such as AES, the value\n# you encrypt must be a multiple of BLOCK_SIZE in length.  This character is\n# used to ensure that your value is always a multiple of BLOCK_SIZE\nPADDING = '{'\n\n# one-liner to sufficiently pad the text to be encrypted\npad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING\n\n# one-liners to encrypt/encode and decrypt/decode a string\n# encrypt with AES, encode with base64\nEncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s)))\nDecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)\n\n# generate a random secret key\nsecret = os.urandom(BLOCK_SIZE)\n\n# create a cipher object using the random secret\ncipher = AES.new(secret) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MyClass:\n    def __init__(self):\n        self.list = []\n        self.dictionary = {} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(name)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\ndb = SQLAlchemy(app)\n\nclass Item(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String)\n colour = db.Column(db.String)\n price = db.Column(db.Integer)\n\ndb.create_all()\n\n@app.route('/items', methods=['POST'])\ndef create_item():\n item = Item(name=request.json['name'], colour=request.json['colour'], price=request.json['price'])\n db.session.add(item)\n db.session.commit()\n return {'id': item.id}\n\n@app.route('/items/int:id', methods=['GET'])\ndef get_item(id):\n item = Item.query.get(id)\n return {'name': item.name, 'colour': item.colour, 'price': item.price}\n\n@app.route('/items/int:id', methods=['PUT'])\ndef update_item(id):\n item = Item.query.get(id)\n item.name = request.json['name']\n item.colour = request.json['colour']\n item.price = request.json['price']\n db.session.commit()\n return {'message': 'Item updated'}\n \n@app.route('/items', methods=['GET'])\ndef get_items():\n items = Item.query.all()\n return {'items': [{'name': item.name, 'colour': item.colour, 'price': item.price} for item in items]}\n\n@app.route('/items/int:id', methods=['DELETE'])\ndef delete_item(id):\n Item.query.filter_by(id=id).delete()\n db.session.commit()\n return {'message': 'Item deleted'}\n\nif name == 'main':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def swap(list_of_numbers):\n    list_of_numbers[0], list_of_numbers[-1] = list_of_numbers[-1], list_of_numbers[0]\n    return list_of_numbers but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # function to search an element  \n# in a list \ndef linear_search(list, x): \n    for index, element in enumerate(list): \n        if element == x: \n            return index \n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Lambda functions in Python allow us to create anonymous functions, which are functions that are not bound to a name. These functions are typically used when we need a quick function for a specific task, and do not plan to reuse it. Lambda functions can take any number of arguments, but can only have one expression. The expression is then evaluated and the result is returned. Lambda functions are typically written in a single line and are often used with higher order functions like map(), filter() and reduce(). but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_sum(numbers):\n    return sum(numbers)\n\nnumbers = [1, 2, 3, 4, 5]\ncalculate_sum(numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findLongestWord(string):\n # Split the string into an array of words\n words = string.split(\" \")\n\n # Initialize the longest word as empty string\n longestWord = \"\"\n\n# Iterate over the words and keep track of the longest one\n for word in words:\n if len(word) > len(longestWord):\n longestWord = word\n\n # Return the longest word\n return longestWord\n\n# Test\nstring = \"I love learning new things\"\nlongestWord = findLongestWord(string)\nprint(\"Longest word is \" + longestWord) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def minValue(root):\n  if root is None: # check if tree is empty\n   return -1\n  curr = root         \n  while curr.left:   # until we reach the leftmost leaf\n   curr = curr.left\n  return curr.data\n\n# Driver Program \nif __name__ == '__main__':  \n  \n   root = Node(4) \n   root.left = Node(2) \n   root.right = Node(7) \n   root.left.left = Node(1) \n   root.left.right = Node(3) \n   root.right.left = Node(6) \n   root.right.right = Node(8) \n  \n   print \"Minimum Element in BST is %d\" %(minValue(root)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def identify_most_frequent_value(arr):\n    counts = {}\n\n    # count the occurrence of each element\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n\n    # find the most frequent element\n    max_freq = 0\n    max_freq_num = 0\n    for num in counts:\n        if counts[num] > max_freq:\n            max_freq_num = num\n            max_freq = counts[num]\n\n    return max_freq_num but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\n\n# Get current datetime \nnow = datetime.datetime.now()\n\n# Print the current datetime in ISO 8601 format\nprint(now.isoformat()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"http://example.com/newspaper\"\n\n# fetch data from the given URL\nr = requests.get(url)\n\n# create a BeautifulSoup object\nsoup = BeautifulSoup(r.content, \"lxml\")\n\n# extract the title of all articles\nfor article_title in soup.find_all('h3', class_='title'):\n    print(article_title.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def powerset(s):\n    x = len(s)\n    powerset = []\n    for i in range(1 << x):\n        subset = [s[j] for j in range(x) if (i & (1 << j))]\n        powerset.append(subset)\n    return powerset but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: pip install pipenv\npipenv install \npipenv shell but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_array(array):\n  total = 0\n  for element in array:\n    total = total + element\n  return total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_long_words(list_of_words, integer):\n  long_words = []\n  for word in list_of_words:\n    if len(word) > integer:\n      long_words.append(word)\n  if len(long_words)>1:\n    print(long_words[0], long_words[1])\n  else:\n    print('No words found with length greater than ', integer) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(n):\n if n < 2:\n return False\n elif n == 2:\n return True\n elif n > 2 and n % 2 == 0:\n return False\n for i in range(3, int(n**0.5)+1, 2):\n if n % i == 0:\n return False\n return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: text = \"The cat was running in the park\"\n\nwords = text.split(' ')\nunique_words = []\n\nfor word in words:\n if word not in unique_words: \n  unique_words.append(word)\n\nprint(' '.join(unique_words)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nsample_dataset = [\n    [1,1,1],\n    [2,2,2],\n    [3,3,3],\n    [4,4,4]\n]\n\ndef data_augmentation(dataset):\n augmented_dataset = []\n for data in dataset:\n augmented_row = list(data)\n augmented_row.append(random.randint(-1,1))\n augmented_dataset.append(augmented_row)\n return augmented_dataset\n\naugmented_dataset = data_augmentation(sample_dataset)\n\nprint('Sample dataset:')\nprint(sample_dataset)\nprint('Augmented dataset:')\nprint(augmented_dataset) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ChargingStation:\n    def __init__(self, id, description, max_charge):\n        self.id = id\n        self.description = description\n        self.max_charge = max_charge\n\n    def check_status(self):\n        if self.max_charge > 0:\n            return \"Charging station is available\"\n        else:\n            return \"Charging station is not available\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef random_int_between_1_and_100():\n  return random.randint(1, 100) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \n\nclass KNNClassifier:\n def __init__(self, k):\n self.k = k\n\n def fit(self, X, y):\n self.X_train = X\n self.y_train = y\n\n def predict(self, X):\n predictions = []\n \n for row in X:\n distances = []\n for train_row in self.X_train:\n distances.append(np.linalg.norm(row - train_row))\n \n sorted_distances = np.argsort(distances) \n \n top_k_distances = sorted_distances[:self.k]\n \n top_k_labels = [self.y_train[i] for i in top_k_distances] \n \n label_counts = {}\n for label in top_k_labels:\n label_counts[label] = label_counts.get(label, 0) + 1\n \n sorted_label_counts = sorted(label_counts.items(), key = lambda x: x[1], reverse=True)\n \n predictions.append(sorted_label_counts[0][0])\n\n return predictions but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def invite_guests(guests):\n    for guest in guests:\n        print(\"Dear \"+ guest + \", You are invited to my birthday party!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/', methods=['POST'])\ndef generate_newtext():\n input_text = request.form.get('input_text')\n \n new_text = input_text + \" She had wonderful adventures exploring the world around her and filled her days with joy.\"\n \n return new_text\n \nif __name__ == '__main__':\n app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def evaluate_eq(x):\n    return 3*x*x + 7*x - 4 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence = \"The quick brown fox jumps over the lazy dog\"\nword_freq = {}\n\nfor word in sentence.split():\n  if word in word_freq:\n    word_freq[word] += 1\n  else:\n    word_freq[word] = 1\n\nprint(word_freq) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The issue with the code snippet is that the two lists are not being concatenated, but instead being added together, resulting in a list containing the sums of the corresponding elements in the two lists. The correct code snippet should be as following:\n\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nlist3 = list1 + list2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\nEMAIL_REGEX = re.compile(r\"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)\")\n\ndef is_email_valid(email):\n  return EMAIL_REGEX.match(email) != None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: matrix = [[1, 2, 3, 4, 5],\n         [6, 7, 8, 9, 0],\n         [1, 2, 3, 4, 5]]\n\nsubmatrix = [[matrix[0][0], matrix[0][1], matrix[0][2]],\n             [matrix[1][0], matrix[1][1], matrix[1][2]],\n             [matrix[2][0], matrix[2][1], matrix[2][2]]]\n\nprint(submatrix) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def solve_sudoku(board): \n \n    find = find_empty_location(board) \n    if not find: \n        return True\n    else: \n        row, col = find \n  \n    for i in range(1,10): \n        if is_valid(board, i, (row, col)): \n            board[row][col] = i \n  \n            if solve_sudoku(board): \n                return True\n  \n            # Undo the current cell for backtracking \n            board[row][col] = 0\n  \n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def play_f_sharp_major():\n    key_notes = ['F#', 'G#', 'A', 'A#', 'B', 'C#', 'D#']\n\n    for note in key_notes:\n        play_note(note) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# Read in the CSV file\ndf = pd.read_csv(\"data.csv\")\n\n# Calculate population density\ndf['Density'] = df['Population'] / df['Area']\n\n# Print the density of the first 5 countries\nprint(df.head()['Density']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_palindrome(text):\n    n = len(text) \n    result = 0\n    dp = [[False] * (n + 1) for _ in range(n + 1)] \n  \n    for l in range(1, n + 1): \n        for i in range(n - l + 1): \n  \n            j = i + l - 1\n            if l == 1: \n                dp[i][j] = True\n            elif l == 2 and text[i] == text[j]: \n                dp[i][j] = True\n            elif text[i] == text[j] and dp[i + 1][j - 1]: \n                dp[i][j] = True\n  \n            if dp[i][j] and l > result: \n                result = l \n  \n    return result \n\ntext = 'abbaacba'\nprint(longest_palindrome(text)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_deepest_node(root):\n    if root is None: \n        return \n    queue = [] \n    queue.append(root) \n  \n    deepest_node = None\n    while queue:\n        node = queue.pop(0)\n        deepest_node = node \n  \n        if node.left: \n            queue.append(node.left)\n        if node.right: \n            queue.append(node.right)\n    return deepest_node but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\nfrom tensorflow.examples.tutorials.mnist import input_data\n\n# Load the MNIST dataset\nmnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\n\n# Inputs and Outputs\nx = tf.placeholder(tf.float32, [None, 784])\ny_ = tf.placeholder(tf.float32, [None, 10])\n\n# Neural Network Model\nW = tf.Variable(tf.zeros([784, 10]))\nb = tf.Variable(tf.zeros([10]))\n\n# Softmax Output\ny = tf.nn.softmax(tf.matmul(x, W) + b)\n\n# Cost Function\ncross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))\n\n# Training\ntrain_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)\n\ninit = tf.initialize_all_variables()\n\nsess = tf.Session()\nsess.run(init)\n\n# Train\nfor i in range(10000):\n  batch_xs, batch_ys = mnist.train.next_batch(100)\n  sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})\n\n# Test\ncorrect_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\nprint(sess.run(accuracy, feed_dict={x: mnist.test.images, y_: mnist.test.labels})) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: myList = list(set(myList)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(arr):\n    if arr == arr[::-1]:\n        return True\n    return False\n\nresult = is_palindrome([3, 2, 1, 1, 2, 3])\nprint(result) # Output: True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def caesar_encrypt(text, key):\n encrypted = \"\"\n \n for char in text:\n   if char.isalpha():\n     if char.isupper():\n       encrypted += chr((ord(char) + key - 65) % 26 + 65)\n     else:\n       encrypted += chr((ord(char) + key - 97) % 26 + 97)\n   else:\n     encrypted += char\n return encrypted\n\ntext = \"Hello World!\"\nkey = 2\n\nencrypted_text = caesar_encrypt(text, key)\nprint(encrypted_text) #Hfnnq Yqgfgt! but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insertBeginningAndEnd(arr, str):\n    result = []\n    for element in arr:\n        result.append(str + element + str)\n\n    return result\n\nresult = insertBeginningAndEnd([\"hello\", \"world\"], \"***\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\nimport requests\n\n# Connect to the database\ndb = sqlite3.connect('api_data.db')\n\n# Create the statement\nstmt = 'INSERT INTO api_data (data) VALUES (?)'\n\n# Collect and save the data\ndata = requests.get(url).json()\ndb.execute(stmt, (data,))\ndb.commit()\ndb.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Load the data\ndata = pd.read_csv('data.csv')\n\n# Define the inputs and labels\nX = data[['square_feet', 'beds', 'baths']]\ny = data['price']\n\n# Create and train the model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Test the model\npredictions = model.predict(X) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(x): \n    if x <= 0: \n        return 0\n    elif x == 1: \n        return 1\n    else: \n        return Fibonacci(x-1) + Fibonacci(x-2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_password(length):\n    chars = string.ascii_letters + string.digits + string.punctuation\n    random.seed = (os.urandom(1024))\n  \n    password = ''.join(random.choice(chars) for i in range(length))\n    return password\n\npassword = generate_password(12) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_list(lst): \n  reversed_list = []\n  for i in range(len(lst)-1, -1, -1):\n    reversed_list.append(lst[i])\n  return reversed_list\n\nresult = reverse_list([1,2,3,4,5])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calc_paycheck(hours_worked, hourly_rate):\n return hours_worked * hourly_rate but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mark_asterisk(input):\n    res = \"\"\n    temp = input[0]\n    for char in input:\n        if char == temp:\n            res += '*'\n        else:\n            res += char\n            temp = char\n    return res but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num):\n    if num < 2:\n        return False\n    if num == 2 or num == 3: \n        return True\n\n    i = 2\n    while i*i <= num: \n        if (num % i) == 0: \n            return False\n        i += 1\n\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\nimport seaborn as sns\n\n#Read in data\ntitanic_data = pd.read_csv('titanic_data.csv')\n\n#Create a barplot for age\nax = sns.countplot(x=\"age\", data=titanic_data)\nax.set_title('Age Distribution of Titanic Passengers')\nax.set_ylabel('Number of Passengers')\nax.set_xlabel('Age')\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def index_of_word(w1, w2):\n    pos = 0\n    for i in w1:\n        if w1.find(w2,pos) > -1:\n            return w1.find(w2,pos)\n        pos +=1\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mean(numbers):\n    return sum(numbers) / len(numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ValuePair():\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n    \n    def get_key(self):\n        return self.key\n    \n    def get_value(self):\n        return self.value but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\ndate_string = input(\"Enter date in mm/dd/yyyy format:\")\ndate = datetime.datetime.strptime(date_string, \"%m/%d/%Y\")\nweekday = date.strftime(\"%A\")\nprint(\"The day for the date\",date_string,\"is\",weekday) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def alphabet_sort(string):\n    # Split the string into a list of chars\n    chars = list(string)\n    \n    # Sort the list alphabetically\n    chars.sort()\n    \n    # Join the list of chars\n    return \"\".join(chars) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent_chars(s):\n    d = {}\n    for i in s:\n        if i not in d:\n            d[i] = 0\n        d[i]+=1\n    d = sorted(d.items(),key = lambda x:x[1], reverse=True)\n    return [k  for k ,v in d[:3]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: We can create a library in Python to generate Fibonacci numbers. We can define a function that takes in the numbers of Fibonacci numbers to generate as an argument and returns a list of Fibonacci numbers. The function can maintain a cache of previously generated Fibonacci numbers to reduce computation time. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from __future__ import unicode_literals\n\nfrom graphql.language.ast import (BooleanValue, FloatValue, IntValue,\n                                  StringValue, ListValue, ObjectValue)\n\nfrom graphene.types.scalars import MIN_INT, MAX_INT\nfrom .scalars import Scalar\n\n\nclass GenericScalar(Scalar):\n    \"\"\"\n    The `GenericScalar` scalar type represents a generic\n    GraphQL scalar value that could be:\n    String, Boolean, Int, Float, List or Object.\n    \"\"\"\n\n    @staticmethod\n    def identity(value):\n        return value\n\n    serialize = identity\n    parse_value = identity\n\n    @staticmethod\n    def parse_literal(ast):\n        if isinstance(ast, (StringValue, BooleanValue)):\n            return ast.value\n        elif isinstance(ast, IntValue):\n            num = int(ast.value)\n            if MIN_INT <= num <= MAX_INT:\n                return num\n        elif isinstance(ast, FloatValue):\n            return float(ast.value)\n        elif isinstance(ast, ListValue):\n            return [GenericScalar.parse_literal(value) for value in ast.values]\n        elif isinstance(ast, ObjectValue):\n            return {field.name.value: GenericScalar.parse_literal(field.value) for field in ast.fields}\n        else:\n            return None\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize_sum(arr): \n  \n n = len(arr) \n  \n dp =[[0 for x in range(n)] for x in range(n)] \n  \n # initialize base cases \n for i in range(n): \n dp[i][i] = arr[i] \n  \n # Fill entries in dp[][] from bottom to top \n for start in range(n-2, -1, -1): \n for end in range(start + 1, n): \n dp[start][end] = max(arr[start] + min(dp[start + 1][end - 1], \n                               dp[start + 2][end]), \n                        arr[end] + min(dp[start][end - 2], \n                               dp[start + 1][end - 1])) \n  \n return dp[0][n - 1] \n\n# Driver code \narr = [5, 3, 8, 10] \nn = len(arr) \nprint (optimize_sum(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Getting the value of the 'name' key from the dictionary \ndict = {'name':'John', 'age': 30, 'city':'New York'}\nvalue = dict['name'] \n\n#Printing the value \nprint(value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(list):\n    list.sort()\n    return list\n    \nsort_list(my_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"example.com\"\nresponse = requests.get(url)\nhtml = response.text\n\nsoup = BeautifulSoup(html, \"html.parser\")\ndata = soup.find_all(class_=\"data-class\")\n\nfor item in data:\n    # Extract the data you need here\n    # ... but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\n\n# Define the model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(128, activation='relu', input_shape=(5,)),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(2, activation='softmax')\n])\n\n# Compile the model\nmodel.compile(\n    optimizer='adam',\n    loss='sparse_categorical_crossentropy',\n    metrics=['accuracy']\n) but is not the same. just give one example and only return the code."}
