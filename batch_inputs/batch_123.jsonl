{"prompt": "make some code that functions the same as the following code: def hasWhitespace(string):\n for c in string:\n  if c.isspace():\n   return True\n return False\n\nprint(hasWhitespace(\"Hello World\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = \"python is powerful\"\nlist_words = string.split()\noutput = [i.capitalize() for i in list_words] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_last_element(list):\n     return list[-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def solve_linear_eq(eq):\n    x, b = eq.split(' ')\n    a, op, constant_term = x.split('x')\n\n    a = int(a)\n    b = int(b)\n    constant_term = int(constant_term)\n    \n    if op == '+':\n        x = (constant_term - b) / a\n    elif op == '-':\n        x = (b - constant_term) / a\n    \n    return x\n\nsolution = solve_linear_eq('3x + 5 = 10')\nprint(\"x = \" + str(solution)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def format_money(amount, symbol):\n    return f\"{symbol}{amount:.2f}\"\n\nformat_money(95.50, '\u20ac') # returns \u20ac95.50 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(inputstring):\n    result = \"\"\n    for i in range(len(inputstring)):\n        if i == 0 or inputstring[i] != inputstring[i-1]:\n            result += inputstring[i]\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def automate_business_process(inputs):\n # Use a programming language such as Python to parse the inputs\n # ...\n\n# Use algorithms to generate the output\n def generate_output(inputs):\n ... but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request \nfrom flask_restful import Resource, Api \n \napp = Flask(__name__) \napi = Api(app) \n  \n# creating the necessary dictionaries to store blog posts\nblog_posts = {}\n\nclass BlogPost(Resource):\n    # endpoint to create a blog post \n    def post(self, post_id):\n        post_data = request.get_json()\n        post_title = post_data['title']\n        post_content = post_data['content']\n        blog_posts[post_id] = {\n            'title': post_title,\n            'content': post_content\n            }\n        return blog_posts[post_id], 201\n      \n    # endpoint to update a blog post \n    def put(self, post_id):\n        post_data = request.get_json()\n        post_title = post_data['title']\n        post_content = post_data['content']\n        blog_posts[post_id]['title'] = post_title\n        blog_posts[post_id]['content'] = post_content\n        return blog_posts[post_id], 200\n  \n    # endpoint to delete a blog post\n    def delete(self, post_id):\n        del blog_posts[post_id]\n        return 'Post deleted', 200\n  \n    # endpoint to list all blog posts\n    def get(self):\n        return blog_posts, 200\n \napi.add_resource(BlogPost, '/<string:post_id>') \n  \nif __name__ == '__main__': \n    app.run(debug = True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_length(str):\n    return len(str)\n\nstring = \"Hello World\"\nlength = string_length(string)\nprint(\"Length of the string is: %d\" % length) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n    def __init__(self, first_name, last_name, age):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n\n    def full_name(self):\n        return self.first_name + \" \" + self.last_name but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_str(): \n    char_set = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\n    random_str = ''.join(random.sample(char_set, 5))\n\n    return random_str but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n \ndef generate_matrix(length):\n    matrix = []\n    for _ in range(length):\n        row = []\n        for _ in range(length):\n            row.append(random.randint(0,100))\n        matrix.append(row)\n    return matrix\n \nprint(generate_matrix(3)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def rotate_sqr_matrix_clockwise(matrix):\n    N = len(matrix)\n    res = [[0] * N for i in range(N)]\n    for i in range(N):\n        for j in range(N): \n            res[i][j] = matrix[N - 1 - j][i] \n    return res but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(lst):\n    unique_lst = []\n    for i in lst:\n        if i not in unique_lst:\n            unique_lst.append(i)\n    return unique_lst but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(sorted_ary, n, target):\n\tfor i in range(0,n):\n\t\tif sorted_ary[i] == target:\n\t\t\treturn i\n\treturn -1\n\nresult = linear_search(sorted_ary, n, target)\n\nif result == -1:\n   print(\"Element is not present in array\")\nelse:\n   print(\"Element is present at index\", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: lst = [10, 3, 5, 8, 7]\n\nlst.sort(reverse=True)\n\nfor n in lst:\n    print(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def capitalize_first_letter(s): \n    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() + s[1:] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPool2D\nfrom tensorflow.keras import Model\n\n# Load MNIST dataset\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\nx_train, x_test = x_train / 255.0, x_test / 255.0\n\n# Reshape images to (28, 28, 1)\nx_train = x_train.reshape(-1, 28, 28, 1)\nx_test = x_test.reshape(-1, 28, 28, 1)\n\n# Build convolutional neural network\nclass CNN(Model):\n    def __init__(self):\n        super(CNN, self).__init__()\n        self.conv1 = Conv2D(32, (3, 3), activation='relu')\n        self.flatten = Flatten()\n        self.d1 = Dense(128, activation='relu')\n        self.d2 = Dense(10, activation='softmax')\n\n    def call(self, x):\n        x = self.conv1(x)\n        x = self.flatten(x)\n        x = self.d1(x)\n        return self.d2(x)\n\n# Build and compile model\nmodel = CNN()\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train model\nmodel.fit(x_train, y_train, epochs=10)\n\n# Test model\nmodel.evaluate(x_test, y_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_nums(nums_list):\n  result = 0\n  for num in nums_list:\n    result += num\n  return result\n\nprint(sum_nums(nums_list))\n\n# Output\n25 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: function myFunction(a, b) {\n return a + b;\n}\n\nmyFunction(3, 4); but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_to_n(n):\n\n    #edge cases\n    if n < 0: \n        return 0\n    if n == 0:\n        return 0\n\n    #binominal sum formula \n    return (n * (n+1)) / 2 \n\nprint(sum_to_n(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Motorcycle(Vehicle):\n    def __init__(self):\n        super().__init__()\n        self.num_wheels = 2\n        self.type = 'motorcycle'\n\n    def accelerate(self):\n        self.speed += 10\n\n    def brake(self):\n        self.speed = max(self.speed - 7, 0) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for a in range(1, 26):\n    for b in range(1, 26):\n        for c in range(1, 26):\n            if (a*a + b*b == c*c and a+b+c == 25):\n                print(\"Pythagorean triplet: \" + str(a) + \", \" + str(b) + \", \" + str(c)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def swap(a, b):\n  temp = a\n  a = b\n  b = temp\n\nx = 10\ny = 20\n\nswap(x, y)\n\nprint(x, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [1, 2, 2, 3, 4]\nnum = 2\n\ncount = 0\n\nfor i in arr:\n    if i == num:\n        count += 1\n\nprint(count) #outputs 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: text = \"Computer Science is awesome!\"\nfrom nltk.tokenize import word_tokenize \nfrom nltk.stem.wordnet import WordNetLemmatizer \nfrom nltk import pos_tag \nfrom nltk.corpus import stopwords \nfrom nltk.corpus import wordnet as wn \n  \nlemma = WordNetLemmatizer() \n  \n# personalized Stopwords and PosTags \nstopwords = set(stopwords.words('english')) \npos_tag = [\"MD\", \"NN\", \"VB\", \"NNS\"] \n  \nword_tokens = word_tokenize(text.lower()) \n  \nfiltered_sentence = [lemma.lemmatize(word) for word in word_tokens \n                        if word not in stopwords and pos_tag[0] in pos_tag] \n                       \nprint(\"Generated Text:\", \" \".join(filtered_sentence)) \n\nGenerated Text: computer science awesome ! but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(5): \n    for j in range(i): \n        print ('* ', end=\"\") \n    print('') \n  \nfor i in range(5,0,-1): \n    for j in range(i): \n        print('* ', end=\"\") \n    print('') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_array(A):\n    for i in range(len(A) - 1):\n        min = A[i]\n        min_index = i\n        for j in range(i + 1, len(A)):\n            if A[j] < min:\n                min = A[j]\n                min_index = j\n        if min_index != i:\n            A[i], A[min_index] = A[min_index], A[i]\n    return A but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack:\n    def __init__(self):\n        self.items = []\n        self. minvalue = None\n\n    def push(self, item):\n        self.items.append(item)\n        if self.minvalue is None or item < self.minvalue:\n            self.minvalue = item\n\n    def pop(self):\n        item = self.items.pop()\n        if self.minvalue == item:\n            if len(self.items) > 0:\n                self.minvalue = min(self.items)\n            else:\n                self.minvalue = None\n        return item but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_greater_than_threshold(list, threshold):\n    count = 0\n    for num in list:\n        if num > threshold:\n            count += 1\n    return count\nprint(count_greater_than_threshold(list, threshold)) # Prints 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def to_arr(this):\n    \"\"\"Returns Python array from Js array\"\"\"\n    return [this.get(str(e)) for e in xrange(len(this))]\n\n\nARR_STACK = set({})\n\nclass ArrayPrototype:\n    def toString():\n        # this function is wrong but I will leave it here fore debugging purposes.\n        func = this.get('join')\n        if not func.is_callable():\n            @this.Js\n            def func():\n                return '[object %s]'%this.Class\n        return func.call(this, ())\n\n    def toLocaleString():\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        # separator is simply a comma ','\n        if not arr_len:\n            return ''\n        res = []\n        for i in xrange(arr_len):\n            element = array[str(i)]\n            if element.is_undefined() or element.is_null():\n                res.append('')\n            else:\n                cand = element.to_object()\n                str_func = element.get('toLocaleString')\n                if not str_func.is_callable():\n                    raise this.MakeError('TypeError', 'toLocaleString method of item at index %d is not callable'%i)\n                res.append(element.callprop('toLocaleString').value)\n        return ','.join(res)\n\n    def concat():\n        array = this.to_object()\n        A = this.Js([])\n        items = [array]\n        items.extend(to_arr(arguments))\n        n = 0\n        for E in items:\n            if E.Class=='Array':\n                k = 0\n                e_len = len(E)\n                while k<e_len:\n                    if E.has_property(str(k)):\n                        A.put(str(n), E.get(str(k)))\n                    n+=1\n                    k+=1\n            else:\n                A.put(str(n), E)\n                n+=1\n        return A\n\n    def join(separator):\n        ARR_STACK.add(this)\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        separator = ',' if separator.is_undefined() else separator.to_string().value\n        elems = []\n        for e in xrange(arr_len):\n            elem = array.get(str(e))\n            if elem in ARR_STACK:\n                s = ''\n            else:\n                s = elem.to_string().value\n            elems.append(s if not (elem.is_undefined() or elem.is_null()) else '')\n        res =  separator.join(elems)\n        ARR_STACK.remove(this)\n        return res\n\n    def pop(): #todo check\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        if not arr_len:\n            array.put('length', this.Js(arr_len))\n            return None\n        ind = str(arr_len-1)\n        element = array.get(ind)\n        array.delete(ind)\n        array.put('length', this.Js(arr_len-1))\n        return element\n\n\n    def push(item): # todo check\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        to_put = arguments.to_list()\n        i = arr_len\n        for i, e in enumerate(to_put, arr_len):\n            array.put(str(i), e)\n        if to_put:\n            i+=1\n            array.put('length', this.Js(i))\n        return i\n\n\n    def reverse():\n        array = this.to_object() # my own algorithm\n        vals = to_arr(array)\n        has_props = [array.has_property(str(e)) for e in xrange(len(array))]\n        vals.reverse()\n        has_props.reverse()\n        for i, val in enumerate(vals):\n            if has_props[i]:\n                array.put(str(i), val)\n            else:\n                array.delete(str(i))\n        return array\n\n\n    def shift():  #todo check\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        if not arr_len:\n            array.put('length', this.Js(0))\n            return None\n        first = array.get('0')\n        for k in xrange(1, arr_len):\n            from_s, to_s = str(k), str(k-1)\n            if array.has_property(from_s):\n                array.put(to_s, array.get(from_s))\n            else:\n                array.delete(to)\n        array.delete(str(arr_len-1))\n        array.put('length', this.Js(str(arr_len-1)))\n        return first\n\n    def slice(start, end): # todo check\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        relative_start = start.to_int()\n        k = max((arr_len + relative_start), 0) if relative_start<0 else  min(relative_start, arr_len)\n        relative_end = arr_len if end.is_undefined() else end.to_int()\n        final =  max((arr_len + relative_end), 0) if relative_end<0 else min(relative_end, arr_len)\n        res = []\n        n = 0\n        while k<final:\n            pk = str(k)\n            if array.has_property(pk):\n                res.append(array.get(pk))\n            k += 1\n            n += 1\n        return res\n\n    def sort(cmpfn):\n        if not this.Class in {'Array', 'Arguments'}:\n            return this.to_object() # do nothing\n        arr = [this.get(str(i)) for i in xrange(len(this))]\n        if not arr:\n            return this\n        if not cmpfn.is_callable():\n            cmpfn = None\n        cmp = lambda a,b: sort_compare(a, b, cmpfn)\n        arr.sort(cmp=cmp)\n        for i in xrange(len(arr)):\n            this.put(unicode(i), arr[i])\n        return this\n\n    def splice(start, deleteCount):\n        # 1-8\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        relative_start = start.to_int()\n        actual_start = max((arr_len + relative_start),0) if relative_start<0 else min(relative_start, arr_len)\n        actual_delete_count =  min(max(deleteCount.to_int(),0 ), arr_len - actual_start)\n        k = 0\n        A = this.Js([])\n        # 9\n        while k<actual_delete_count:\n            if array.has_property(str(actual_start+k)):\n                A.put(str(k), array.get(str(actual_start+k)))\n            k += 1\n        # 10-11\n        items = to_arr(arguments)[2:]\n        items_len = len(items)\n        # 12\n        if items_len<actual_delete_count:\n            k = actual_start\n            while k < (arr_len-actual_delete_count):\n                fr = str(k+actual_delete_count)\n                to = str(k+items_len)\n                if array.has_property(fr):\n                    array.put(to, array.get(fr))\n                else:\n                    array.delete(to)\n                k += 1\n            k = arr_len\n            while k > (arr_len - actual_delete_count + items_len):\n                array.delete(str(k-1))\n                k -= 1\n        # 13\n        elif items_len>actual_delete_count:\n            k = arr_len - actual_delete_count\n            while k>actual_start:\n                fr = str(k + actual_delete_count - 1)\n                to = str(k + items_len - 1)\n                if array.has_property(fr):\n                    array.put(to, array.get(fr))\n                else:\n                    array.delete(to)\n                k -= 1\n        # 14-17\n        k = actual_start\n        while items:\n            E = items.pop(0)\n            array.put(str(k), E)\n            k += 1\n        array.put('length', this.Js(arr_len - actual_delete_count + items_len))\n        return A\n\n    def unshift():\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        argCount = len(arguments)\n        k = arr_len\n        while k > 0:\n            fr = str(k - 1)\n            to = str(k + argCount - 1)\n            if array.has_property(fr):\n                array.put(to, array.get(fr))\n            else:\n                array.delete(to)\n            k -= 1\n        j = 0\n        items = to_arr(arguments)\n        while items:\n            E = items.pop(0)\n            array.put(str(j), E)\n            j += 1\n        array.put('length', this.Js(arr_len + argCount))\n        return arr_len + argCount\n\n    def indexOf(searchElement):\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        if arr_len == 0:\n            return -1\n        if len(arguments)>1:\n            n = arguments[1].to_int()\n        else:\n            n = 0\n        if n >= arr_len:\n            return -1\n        if n >= 0:\n            k = n\n        else:\n            k = arr_len - abs(n)\n            if k < 0:\n                k = 0\n        while k < arr_len:\n            if array.has_property(str(k)):\n                elementK = array.get(str(k))\n                if searchElement.strict_equality_comparison(elementK):\n                    return k\n            k += 1\n        return -1\n\n    def lastIndexOf(searchElement):\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        if arr_len == 0:\n            return -1\n        if len(arguments)>1:\n            n = arguments[1].to_int()\n        else:\n            n = arr_len - 1\n        if n >= 0:\n            k = min(n, arr_len-1)\n        else:\n            k = arr_len - abs(n)\n        while k >= 0:\n            if array.has_property(str(k)):\n                elementK = array.get(str(k))\n                if searchElement.strict_equality_comparison(elementK):\n                    return k\n            k -= 1\n        return -1\n\n\n    def every(callbackfn):\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        if not callbackfn.is_callable():\n            raise this.MakeError('TypeError', 'callbackfn must be a function')\n        T = arguments[1]\n        k = 0\n        while k<arr_len:\n            if array.has_property(str(k)):\n                kValue = array.get(str(k))\n                if not callbackfn.call(T, (kValue, this.Js(k), array)).to_boolean().value:\n                    return False\n            k += 1\n        return True\n\n\n    def some(callbackfn):\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        if not callbackfn.is_callable():\n            raise this.MakeError('TypeError', 'callbackfn must be a function')\n        T = arguments[1]\n        k = 0\n        while k<arr_len:\n            if array.has_property(str(k)):\n                kValue = array.get(str(k))\n                if callbackfn.call(T, (kValue, this.Js(k), array)).to_boolean().value:\n                    return True\n            k += 1\n        return False\n\n    def forEach(callbackfn):\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        if not callbackfn.is_callable():\n            raise this.MakeError('TypeError', 'callbackfn must be a function')\n        T = arguments[1]\n        k = 0\n        while k<arr_len:\n            if array.has_property(str(k)):\n                kValue = array.get(str(k))\n                callbackfn.call(T, (kValue, this.Js(k), array))\n            k+=1\n\n    def map(callbackfn):\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        if not callbackfn.is_callable():\n            raise this.MakeError('TypeError', 'callbackfn must be a function')\n        T = arguments[1]\n        A = this.Js([])\n        k = 0\n        while k<arr_len:\n            Pk = str(k)\n            if array.has_property(Pk):\n                kValue = array.get(Pk)\n                mappedValue = callbackfn.call(T, (kValue, this.Js(k), array))\n                A.define_own_property(Pk, {'value': mappedValue, 'writable': True,\n                    'enumerable': True, 'configurable': True})\n            k += 1\n        return A\n\n    def filter(callbackfn):\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        if not callbackfn.is_callable():\n            raise this.MakeError('TypeError', 'callbackfn must be a function')\n        T = arguments[1]\n        res = []\n        k = 0\n        while k<arr_len:\n            if array.has_property(str(k)):\n                kValue = array.get(str(k))\n                if callbackfn.call(T, (kValue, this.Js(k), array)).to_boolean().value:\n                    res.append(kValue)\n            k += 1\n        return res # converted to js array automatically\n\n    def reduce(callbackfn):\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        if not callbackfn.is_callable():\n            raise this.MakeError('TypeError', 'callbackfn must be a function')\n        if not arr_len and len(arguments)<2:\n            raise this.MakeError('TypeError', 'Reduce of empty array with no initial value')\n        k = 0\n        if len(arguments)>1: # initial value present\n            accumulator = arguments[1]\n        else:\n            kPresent = False\n            while not kPresent and k<arr_len:\n                kPresent = array.has_property(str(k))\n                if kPresent:\n                    accumulator = array.get(str(k))\n                k += 1\n            if not kPresent:\n                raise this.MakeError('TypeError', 'Reduce of empty array with no initial value')\n        while k<arr_len:\n            if array.has_property(str(k)):\n                kValue = array.get(str(k))\n                accumulator = callbackfn.call(this.undefined, (accumulator, kValue, this.Js(k), array))\n            k += 1\n        return accumulator\n\n\n    def reduceRight(callbackfn):\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        if not callbackfn.is_callable():\n            raise this.MakeError('TypeError', 'callbackfn must be a function')\n        if not arr_len and len(arguments)<2:\n            raise this.MakeError('TypeError', 'Reduce of empty array with no initial value')\n        k = arr_len - 1\n        if len(arguments)>1: # initial value present\n            accumulator = arguments[1]\n        else:\n            kPresent = False\n            while not kPresent and k>=0:\n                kPresent = array.has_property(str(k))\n                if kPresent:\n                    accumulator = array.get(str(k))\n                k -= 1\n            if not kPresent:\n                raise this.MakeError('TypeError', 'Reduce of empty array with no initial value')\n        while k>=0:\n            if array.has_property(str(k)):\n                kValue = array.get(str(k))\n                accumulator = callbackfn.call(this.undefined, (accumulator, kValue, this.Js(k), array))\n            k -= 1\n        return accumulator\n\n\ndef sort_compare(a, b, comp):\n    if a is None:\n        if b is None:\n            return 0\n        return 1\n    if b is None:\n        if a is None:\n            return 0\n        return -1\n    if a.is_undefined():\n        if b.is_undefined():\n            return 0\n        return 1\n    if b.is_undefined():\n        if a.is_undefined():\n            return 0\n        return -1\n    if comp is not None:\n        res = comp.call(a.undefined, (a, b))\n        return res.to_int()\n    x, y = a.to_string(), b.to_string()\n    if x<y:\n        return -1\n    elif x>y:\n        return 1\n    return 0\n\n\n\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import secrets\n\n# Generate the random string\nrandom_string = secrets.token_hex(24)\n\nprint(random_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Steps to implement Bubble Sort Algorithm: \n# 1. Loop through the list with two indices, the current element and the NEXT element \n# 2. Compare current element with the NEXT element \n# 3. If current element is greater than NEXT element, swap them \n# 4. Repeat this till the list is sorted \n\ndef bubble_sort(list): \n    # Traverse through all elements of list \n    for i in range(0, len(list)-1): \n        for j in range(0, len(list)-i-1): \n            if list[j] > list[j+1]: \n                list[j], list[j+1] = list[j+1], list[j] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Get the URL\nurl = \"http://www.example.com\"\n\n# Get the HTML from the URL\nr = requests.get(url)\nhtml = r.text\n\n# Parse the HTML\nsoup = BeautifulSoup(html, 'html.parser')\n\n# Get the meta tags\nmetaTags = soup.find_all('meta')\n\n# Print out the meta tags\nfor metaTag in metaTags:\n print \"Name: %s Content: %s\" % (metaTag.get('name'), metaTag.get('content')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def authenticate(username, password):\n    \"\"\"Authenticate a user with username and password\"\"\"\n    # Your authentication implementation\n    return is_authenticated  # true or false but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: x, y = y, x but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: One alternative solution to the problem of identifying duplicate items in Python is to use a set to store the items. A set data structure only allows unique elements and so any duplicate items will be automatically discarded when added to the set. Thus, iterating through a list of items and adding them to a set will result in a set without any duplicate elements. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compute_sum(int_arry):\n    sum = 0\n    # loop through each element in the array\n    for i in int_arry:\n        sum += i\n    return sum\n\n# example testing code\nint_arry = [1, 2, 3, 4, 5]\ntotal_sum = compute_sum(int_arry)\n\nprint(\"Sum of array elements is\", total_sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(10):\n    print(\"Hello World!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_factors(numbers):\n    \n    for n in numbers:\n        print(\"Factors of {}:\".format(n)) \n        for i in range(1, n + 1):\n            if n % i == 0:\n                print(i)\n\nprint_factors([24, 75]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import libraries \nimport requests\nfrom bs4 import BeautifulSoup\n\n# url\nurl = 'https://www.google.com/search?q=best+budget+laptop'\n\n# get page using requests \npage = requests.get(url)\n\n# parse using BeautifulSoup\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# get all links from result page\nresults = soup.select('.r a')\n\n# iterate over each link\nfor item in results:\n  result_url = item.get('href')\n  # get the required data\n  print(result_url) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import uuid\n\ndef generate_uuid():\n    return str(uuid.uuid4())\n\nif __name__ == '__main__':\n    print(generate_uuid()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class PriorityQueue(object): \n    def __init__(self): \n        self.queue = [] \n  \n    def __str__(self): \n        return ' '.join([str(i) for i in self.queue]) \n  \n    # for checking if the queue is empty \n    def isEmpty(self): \n        return len(self.queue) == 0\n  \n    # for inserting an element in the queue \n    def insert(self, data): \n        self.queue.append(data) \n  \n    # for popping an element based on custom max function \n    def max_pop(self, max_func): \n        max_val = self.queue[0]\n        max_index = 0\n        for i in range(len(self.queue)):\n            if max_func(max_val, self.queue[i]) == self.queue[i]: \n                max_val = self.queue[i] \n                max_index = i \n        del self.queue[max_index] \n        return max_val but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isArmstrong(number): \n\t\n\tnum = number \n\tlength = len(str(number)) \n\tsum_of_the_power_of_digits = 0 \n\n\twhile num > 0:\n\t\trem = num % 10 \n\t\tsum_of_the_power_of_digits = sum_of_the_power_of_digits +  np.power(rem, length)\n\t\tnum //= 10\n\t\t\n\tif (sum_of_the_power_of_digits == number) : \n\t\treturn True \n\telse : \n\t\treturn False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer \nfrom sklearn.naive_bayes import MultinomialNB\n\n# Load the data from a file\ndf = pd.read_csv('Data.csv')\n\n# Extract the labels and text from the data\nlabels = df['category']\ntexts = df['text']\n\n# Create a count vectorizer\nvectorizer = CountVectorizer() \nvectors = vectorizer.fit_transform(texts) \n\n# Create a multinomial Naive Bayes classifier\nclassifier = MultinomialNB()\nclassifier.fit(vectors, labels)\n\n# Test the classifier with some input\ninput_text = \"It wasn't the best night.\"\ninput_vector = vectorizer.transform([input_text])\npredicted_label = classifier.predict(input_vector)[0]\n\nprint('Input text:', input_text)\nprint('Predicted label:', predicted_label) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to convert \n# infix expression to postfix \n\n# Class to convert the expression \nclass Conversion: \n\t\n\t# Constructor to initialize the class variables \n\tdef __init__(self, capacity): \n\t\tself.top = -1\n\t\tself.capacity = capacity\n\t\t# This array is used a stack \n\t\tself.array = [] \n\t\t# Precedence setting \n\t\tself.output = [] \n\t\tself.precedence = {'+':1, '-':1, '*':2, '/':2, '^':3} \n\t\n\t# check if the stack is empty \n\tdef isEmpty(self): \n\t\treturn True if self.top == -1 else False\n\t\n\t# Return the value of the top of the stack \n\tdef peek(self): \n\t\treturn self.array[-1] \n\t\n\t# Pop the element from the stack \n\tdef pop(self): \n\t\tif not self.isEmpty(): \n\t\t\tself.top -= 1\n\t\t\treturn self.array.pop() \n\t\telse: \n\t\t\treturn \"$\"\n\t\n\t# Push the element to the stack \n\tdef push(self, op): \n\t\tself.top += 1\n\t\tself.array.append(op) \n\n\t# A utility function to check is the given character \n\t# is operand \n\tdef isOperand(self, ch): \n\t\treturn ch.isalpha() \n\n\t# Check if the precedence of operator is strictly \n\t# less than top of stack or not \n\tdef notGreater(self, i): \n\t\ttry: \n\t\t\ta = self.precedence[i] \n\t\t\tb = self.precedence[self.peek()] \n\t\t\treturn True if a <= b else False\n\t\texcept KeyError: \n\t\t\treturn False\n\t\t\t\n\t# The main function that converts given infix expression \n\t# to postfix expression \n\tdef infixToPostfix(self, exp): \n\t\t\n\t\t# Iterate over the expression for conversion \n\t\tfor i in exp: \n\t\t\t# If the character is an operand, \n\t\t\t# add it to output \n\t\t\tif self.isOperand(i): \n\t\t\t\tself.output.append(i) \n\t\t\t\n\t\t\t# If the character is an '(', push it to stack \n\t\t\telif i == '(': \n\t\t\t\tself.push(i) \n\n\t\t\t# If the scanned character is an ')', pop and \n\t\t\t# output from the stack until and '(' is found \n\t\t\telif i == ')': \n\t\t\t\twhile( (not self.isEmpty()) and self.peek() != '('): \n\t\t\t\t\ta = self.pop() \n\t\t\t\t\tself.output.append(a) \n\t\t\t\tif (not self.isEmpty() and self.peek() != '('): \n\t\t\t\t\treturn -1\n\t\t\t\telse: \n\t\t\t\t\tself.pop() \n\n\t\t\t# An operator is encountered \n\t\t\telse: \n\t\t\t\twhile(not self.isEmpty() and self.notGreater(i)): \n\t\t\t\t\tself.output.append(self.pop()) \n\t\t\t\tself.push(i) \n\n\t\t# pop all the operator from the stack \n\t\twhile not self.isEmpty(): \n\t\t\tself.output.append(self.pop()) \n\n\t\tprint(\"\".join(self.output) ) \n\nexp = \"A * B + C\"\nobj = Conversion(len(exp)) \nobj.infixToPostfix(exp) \n\n# Output: AB*C+ but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Program to print \"Hello, World!\"\n\nprint(\"Hello, World!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef randomList(n):\n list = []\n \n for i in range(n):\n list.append(random.randint(0, n))\n \n return list\n\nprint(randomList(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_three(a, b, c):\n    m = max(a, b)\n    m = max(m, c)\n    return m but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def swap(x, y):\n    x, y = y, x \n    return x, y\n\nx, y = swap(x, y)\nprint('x =', x) \nprint('y =', y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_divisible_by_7(num):\n    if num % 7 == 0:\n        return True\n    else:\n        return False\n\nresult = is_divisible_by_7(28)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_password_string(length):\n    # Generate a random password string of length 8, consisting of upper and lower case characters, special characters and digits\n    password_characters = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(password_characters) for i in range(length))\n\nif __name__ == '__main__':\n    print(generate_password_string(8)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Capture two numbers from the command line\nnum1 = int(input(\"Please enter a number: \"))\nnum2 = int(input(\"Please enter a second number: \"))\n\n# Calculate the sum\nsum = num1 + num2\n\n# Print the result\nprint(\"The sum of the numbers is:\", sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Calculator:\n def __init__(self):\n self.values = []\n\n def add(self, x, y):\n self.values.append(x + y)\n\n def subtract(self, x, y):\n self.values.append(x - y)\n \ncalc = Calculator()\ncalc.add(2, 3)\ncalc.subtract(3, 4)\nprint(calc.values[-1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: input_text = 'This is an example of a string to test.'\n\nwords = input_text.split()\n\nfor word in words:\n  if 'a' in word:\n    print(word)\n\n# Output: \nan\nexample\na\nstring\ntest. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply(x, y):\n    result = 0\n    for i in range(y):\n        result += x\n    return result\n\ndef power(x, y):\n    result = 1\n    for i in range(y):\n        result *= x\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def heapSort(arr):\n    n = len(arr)\n  \n    # Build heap (rearrange array)\n    for i in range(n//2 - 1, -1, -1):\n        heapify(arr, n, i)\n  \n    # One by one extract an element from heap\n    for i in range(n-1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0] # swap\n        heapify(arr, i, 0)\n  \n# To heapify subtree rooted at index i\ndef heapify(arr, n, i):\n    largest = i # Initialize largest as root\n    l = 2 * i + 1\n    r = 2 * i + 2\n  \n    # See if left child of root exists and is\n    # greater than root\n    if l < n and arr[i] < arr[l]:\n        largest = l\n  \n    # See if right child of root exists and is\n    # greater than root\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n  \n    # Change root, if needed\n    if largest != i:\n        arr[i],arr[largest] = arr[largest],arr[i]\n  \n        # Heapify the root.\n        heapify(arr, n, largest) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_level_order(root):\n    if root is None:\n        return\n\n    queue = []\n\n    queue.append(root)\n    while(len(queue) > 0):\n        print(queue[0].data, end=\" \")\n        node = queue.pop(0)\n\n        if node.left is not None:\n            queue.append(node.left)\n\n        if node.right is not None:\n            queue.append(node.right) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef chatbot():\n prompt = \"> \"\n response = \"\"\n \n while response != \"goodbye\":\n response = input(prompt)\n \n if response == \"hello\":\n print(\"Hi there!\")\n elif response == \"how are you?\":\n responses = [\"I'm good!\", \"I'm doing alright!\", \"Not too bad!\"]\n print(random.choice(responses))\n \nchatbot() // Output: Hi there! but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.svm import SVC\nfrom sklearn.datasets import load_iris\n\n# Load the iris dataset \niris = load_iris()\n \n# Create the X (features) and y (target) arrays\nX = iris.data\ny = iris.target\n\n# Split the dataset into test and train\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n \n# Train the SVC classifier\nsvm_model_linear = SVC(kernel = 'linear', C = 1).fit(X_train, y_train)\n\n# Create predictions \npredictions = svm_model_linear.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_search(arr, num):\n\u00a0\u00a0\u00a0\u00a0\"\"\"\n\u00a0\u00a0\u00a0\u00a0Function to use binary search to find a given number in a given array.\n\n\u00a0\u00a0\u00a0\u00a0Arguments:\n\u00a0\u00a0\u00a0\u00a0arr -- input array\n\u00a0\u00a0\u00a0\u00a0num -- number to be found\n\n\u00a0\u00a0\u00a0\u00a0Returns:\n\u00a0\u00a0\u00a0\u00a0res -- boolean value\n\u00a0\u00a0\u00a0\u00a0\"\"\"\n\n\u00a0\u00a0\u00a0\u00a0# Initialize boolean variable\n\u00a0\u00a0\u00a0\u00a0res = False\n\n\u00a0\u00a0\u00a0\u00a0# Find the mid-point of the array\n\u00a0\u00a0\u00a0\u00a0mid = int(len(arr)/2)\n\n\u00a0\u00a0\u00a0\u00a0# initialize the beginning and end of the array\n\u00a0\u00a0\u00a0\u00a0start = 0\n\u00a0\u00a0\u00a0\u00a0end = len(arr) - 1\n\n\u00a0\u00a0\u00a0\u00a0# If the number is in the array, set boolean as True\n\u00a0\u00a0\u00a0\u00a0if num == arr[mid]:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res = True\n\n\u00a0\u00a0\u00a0\u00a0# If the number is less than the mid-point of the array, \n\u00a0\u00a0\u00a0\u00a0# make the end of the array the mid-point - 1\n\u00a0\u00a0\u00a0\u00a0elif num < arr[mid]:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0end = mid - 1\n\n\u00a0\u00a0\u00a0\u00a0# Else, make the start of the array the mid-point + 1\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0start = mid + 1\n\n\u00a0\u00a0\u00a0\u00a0# If the start and the end of the array have not met each other, \n\u00a0\u00a0\u00a0\u00a0# make a recursive call to the binary search function\n\u00a0\u00a0\u00a0\u00a0if start <= end:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return binary_search(arr[start:end+1], num)\n\n\u00a0\u00a0\u00a0\u00a0return res but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def contains(head, value):\n current = head\n while current is not None:\n if current.data == value:\n return True\n current = current.next\n return False\n\nhead = Node(4)\nhead.next = Node(8)\nhead.next.next = Node(15)\nhead.next.next.next = Node(16)\nhead.next.next.next.next = Node(23)\nhead.next.next.next.next.next = Node(42) \n\nval = 15\n\nprint(contains(head, val))\n# Output : True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def swap_two_numbers(a, b):\n    a = a + b \n    b = a - b\n    a = a - b\n    return a, b\n\na = 6\nb = 10\nprint(\"The value of a is %d and b is %d\" %(a, b))\na,b = swap_two_numbers(a,b)\nprint(\"The value of a is %d and b is %d\" %(a, b)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_word_length(string):\n    words = string.split(' ')\n    max_length = 0\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def matrix_mul(A, B):\n  res = [[0, 0], [0, 0]]\n  for i in range(len(A)):\n    for j in range(len(B[0])):\n      for k in range(len(B)):\n        res[i][j] += A[i][k] * B[k][j]\n  return res\n  \nA = [[1, 2],\n     [3, 4]] \nB = [[5, 6], \n     [7, 8]]\n\nres = matrix_mul(A, B)\n  \nprint(res)\n\n# Output\n# [[19, 22], [43, 50]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \n\nfrom time import time\nfrom struct import pack, unpack\nimport bson, sys, os, codecs\nfrom random import randint\nfrom traceback import print_exc\n\ndef int_to_int64_bytes(i):\n\treturn pack('>q', i)\n\ndef py_to_bson(val):\n\tif type(val) is int:\n\t\treturn bson.int64.Int64(val)\n\tif sys.version_info.major == 2 and type(val) is str:\n\t\treturn bson.binary.Binary(val)\n\treturn val\n\ndef exit_lymp():\n\t# closing 'python_log'\n\tsys.stdout.close()\n\texit(0)\n\n# A communication class, could be implemented using other ipc methods,\n# it only needs the methods 'send_bytes' and 'get_bytes'\nclass PipeReaderWriter:\n\n\tdef __init__(self, read_pipe_name, write_pipe_name):\n\t\tself.get_pipes(read_pipe_name, write_pipe_name)\n\n\tdef get_pipes(self, read_pipe_name, write_pipe_name):\n\t\t# Order of open matters, since it is blocking, should match OCaml order\n\t\t# 0 to be unbuffered, so we don't have to flush (better performance ?)\n\t\tself.write_pipe = open(write_pipe_name, 'wb', 0)\n\t\tself.read_pipe = open(read_pipe_name, 'rb', 0)\n\n\tdef send_bytes(self, byts):\n\t\t# '>q' to force signed 8 bytes integer\n\t\tself.write_pipe.write(pack('>q', len(byts)))\n\t\t#self.write_pipe.flush()\n\t\tself.write_pipe.write(byts)\n\t\t#self.write_pipe.flush()\n\n\tdef get_bytes(self):\n\t\t# '>q' to force signed 8 bytes integer\n\t\ttry:\n\t\t\tnb_bytes = unpack('>q', self.read_pipe.read(8))[0]\n\t\texcept:\n\t\t\t# ocaml process has been terminated\n\t\t\texit_lymp()\n\t\tbyts = b'' if sys.version_info.major == 3 else \"\"\n\t\twhile len(byts) < nb_bytes:\n\t\t\tbyts += self.read_pipe.read(nb_bytes)\n\t\treturn byts\n\nclass ExecutionHandler:\n\n\tto_ret_types = {\n\t\tint: \"i\",\n\t\ttuple: \"t\",\n\t\tlist: \"l\",\n\t\tstr: \"s\",\n\t\tfloat: \"f\",\n\t\ttype(None): \"n\",\n\t\tbool: \"b\",\n\t\tbytes: \"B\"\n\t}\n\t# for python 2, unicode is str and str is bytes\n\tif sys.version_info.major == 2:\n\t\tto_ret_types[unicode] = \"s\"\n\t\tto_ret_types[str] = \"B\"\n\n\tdef __init__(self, reader_writer):\n\t\tself.reader_writer = reader_writer\n\t\tself.modules = {}\n\t\tself.objs = {}\n\t\tself.ref_nb = 0\n\n\tdef loop(self):\n\t\t# don't recursively call .loop, to avoid stack overflow\n\t\twhile True:\n\t\t\tcommand_bytes = self.reader_writer.get_bytes()\n\t\t\tif command_bytes == b'done':\n\t\t\t\texit_lymp()\n\t\t\tinstruction = bson.BSON.decode(bson.BSON(command_bytes))\n\t\t\ttry:\n\t\t\t\tret = self.execute_instruction(instruction)\n\t\t\t\t# data may still be in the buffer\n\t\t\t\tsys.stdout.flush()\n\t\t\t\tself.send_ret(ret, ret_ref=(\"R\" in instruction))\n\t\t\texcept BaseException as e:\n\t\t\t\t# exception whilst executing, inform ocaml side\n\t\t\t\tprint_exc()\n\t\t\t\t# data may still be in the buffer\n\t\t\t\tsys.stdout.flush()\n\t\t\t\tself.send_ret(\"\", exception=True)\n\n\tdef ret_to_msg(self, ret, ret_ref):\n\t\tmsg = {}\n\t\t# reference (type not supported or explicitely asked to)\n\t\tif ret_ref or (type(ret) not in self.to_ret_types):\n\t\t\tself.ref_nb += 1\n\t\t\tself.objs[self.ref_nb] = ret\n\t\t\tmsg[\"t\"] = \"r\"\n\t\t\tmsg[\"v\"] = bson.code.Code(str(self.ref_nb))\n\t\telse:\n\t\t\tmsg[\"t\"] = self.to_ret_types[type(ret)]\n\t\t\t# tuples are just like lists, but their type \"t\" is \"t\" instead of \"l\"\n\t\t\tif type(ret) is tuple:\n\t\t\t\tret = list(ret)\n\t\t\t# if type is list, further resolve\n\t\t\tif type(ret) is list:\n\t\t\t\tmsg[\"v\"] = []\n\t\t\t\tfor elt in ret:\n\t\t\t\t\t# ret_ref is false here (would not be in the else otherwise)\n\t\t\t\t\tmsg[\"v\"].append(self.ret_to_msg(elt, False))\n\t\t\telse:\n\t\t\t\tmsg[\"v\"] = py_to_bson(ret)\n\t\treturn msg\n\n\tdef send_ret(self, ret, exception=False, ret_ref=False):\n\t\tif exception:\n\t\t\tmsg = {}\n\t\t\tmsg[\"t\"] = \"e\"\n\t\t\tmsg[\"v\"] = \"\"\n\t\telse:\n\t\t\tmsg = self.ret_to_msg(ret, ret_ref)\n\t\tmsg = bytes(bson.BSON.encode(msg))\n\t\tself.reader_writer.send_bytes(msg)\n\n\tdef resolve_args(self, args):\n\t\tnamed = {}\n\t\ti = 0\n\t\tfor arg in args:\n\t\t\t# resolve named args (list of size 2, first one being a bson.code.Code starting with \"!\")\n\t\t\tif type(arg) is list and len(arg) == 2 and type(arg[0]) is bson.code.Code and str(arg[0])[0] == \"!\":\n\t\t\t\tnamed[str(arg[0])[1:]] = self.resolve_args([arg[1]])[0][0]\n\t\t\t\tdel args[i]\n\t\t\t\tcontinue\n\t\t\t# if bytes\n\t\t\tif type(arg) is bson.binary.Binary:\n\t\t\t\targs[i] = bytes(arg)\n\t\t\t# resolve reference args (using bson jscode)\n\t\t\tif type(arg) is bson.code.Code:\n\t\t\t\targs[i] = self.objs[int(arg)]\n\t\t\tif type(arg) is bson.int64.Int64:\n\t\t\t\targs[i] = int(arg)\n\t\t\t# for python 2, if arg is str, convert to unicode\n\t\t\tif sys.version_info.major == 2 and type(arg) is str:\n\t\t\t\targs[i] = args[i].decode('utf-8')\n\t\t\t# for python 2, if arg is bytes, convert to str\n\t\t\tif sys.version_info.major == 2 and type(arg) is bson.binary.Binary:\n\t\t\t\targs[i] = str(arg)\n\t\t\t# if we have a list, we must recursively resolve\n\t\t\tif type(arg) is list:\n\t\t\t\targs[i] = self.resolve_args(arg)[0]\n\t\t\t# if we have a dict, it is a tuple inside \"v\"\n\t\t\tif type(arg) is dict:\n\t\t\t\targs[i] = tuple(self.resolve_args(arg[\"v\"])[0])\n\t\t\ti += 1\n\t\treturn args, named\n\n\tdef execute_instruction(self, instruction):\n\t\tif \"r\" in instruction:\n\t\t\t# if we are asked to realease an inexisting of already released reference\n\t\t\tif \"d\" in instruction and instruction[\"r\"] not in self.objs:\n\t\t\t\treturn None\n\t\t\t# module is the object referenced, later we call getattr to get the method called\n\t\t\tmodule = self.objs[instruction[\"r\"]]\n\t\t\t# if we were asked to 'detach' (release) the reference\n\t\t\tif \"d\" in instruction:\n\t\t\t\tdel self.objs[instruction[\"r\"]]\n\t\t\t\treturn None\n\t\t\t# if we were asked to return the reference\n\t\t\tif \"g\" in instruction:\n\t\t\t\treturn module\n\t\telse:\n\t\t\t# python 2 builtin module has a different name\n\t\t\tif sys.version_info.major == 2 and instruction[\"m\"] == \"builtins\":\n\t\t\t\tinstruction[\"m\"] = \"__builtin__\"\n\t\t\tif instruction[\"m\"] not in self.modules:\n\t\t\t\t__import__(instruction[\"m\"])\n\t\t\t\tself.modules[instruction[\"m\"]] = sys.modules[instruction[\"m\"]]\n\t\t\tmodule = self.modules[instruction[\"m\"]]\n\t\t# set attribute\n\t\tif \"s\" in instruction:\n\t\t\targs, named = self.resolve_args(instruction[\"a\"])\n\t\t\targ = args[0]\n\t\t\tsetattr(module, instruction[\"f\"], arg)\n\t\t\treturn None\n\t\tfunc_or_attr = getattr(module, instruction[\"f\"])\n\t\t# get attribute\n\t\tif \"t\" in instruction:\n\t\t\treturn func_or_attr\n\t\targs = instruction[\"a\"]\n\t\targs, named = self.resolve_args(args)\n\t\tret = func_or_attr(*args, **named)\n\t\treturn ret\n\nworking_directory = sys.argv[1]\nwrite_pipe_path = sys.argv[2]\nread_pipe_path = sys.argv[3]\n# changing dir\nos.chdir(working_directory)\nsys.path.insert(0, working_directory)\n# redirect stdout to 'python_log'\nsys.stdout = codecs.open('python_log', 'w', encoding='utf-8')\nsys.stderr = sys.stdout\ncommunication = PipeReaderWriter(read_pipe_path, write_pipe_path)\nhandler = ExecutionHandler(communication)\nhandler.loop()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password(password_length):\n    chars = string.ascii_letters + string.digits + string.punctuation\n    password_list = random.sample(list(chars), password_length)\n    password = \"\".join(password_list)\n    return password\n \nif __name__ == \"__main__\":\n    pwd_length = random.randint(8, 12)\n    new_password = generate_password(pwd_length)\n    print(new_password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import psycopg2\nimport sys\n\ntry:\n conn = psycopg2.connect(\"dbname = 'books' user = 'postgres' host = 'localhost' password = 'password'\")\nexcept psycopg2.Error as e:\n print e\n\ntry:\n cur = conn.cursor()\nexcept psycopg2.Error as e:\n print e\n\ndef createTable():\n query = \"CREATE TABLE books(title text, author text);\"\n try:\n cur.execute(query)\n except psycopg2.Error as e:\n print e\n\ndef addBook(title, author):\n query = \"INSERT INTO books (title, author) VALUES (%s, %s);\"\n try:\n cur.execute(query, (title, author))\n conn.commit()\n except psycopg2.Error as e:\n print e\n\ndef viewBooks():\n query = \"SELECT * FROM books;\"\n try:\n cur.execute(query)\n results = cur.fetchall()\n print results\n except psycopg2.Error as e:\n print e\n\ndef viewBook(title):\n query = \"SELECT * FROM books WHERE title = '%s';\" % title\n try:\n cur.execute(query)\n results = cur.fetchone()\n print results\n except psycopg2.Error as e:\n print e\n\nif __name__ == \"__main__\":\n createTable()\n addBook(\"The Catcher in the Rye\", \"J.D. Salinger\")\n viewBooks()\n viewBook(\"The Catcher in the Rye\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.naive_bayes import GaussianNB\n\n# Create Gaussian Naive Bayes classifier with built-in datasets\ngnb = GaussianNB()\n# Train the model using the training sets\ngnb.fit(X_train, y_train)\n# Predict the output using the test set\ny_pred = gnb.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef random_array(arr_length):\n    rnd_arr = []\n    for i in range(arr_length):\n        rnd_num = random.randint(0, arr_length) # picking random number\n        while rnd_num in rnd_arr:               # checking if not already in array\n            rnd_num = random.randint(0, arr_length)\n        rnd_arr.append(rnd_num)\n    return rnd_arr\n\narr_length = 10\nrandom_array(arr_length) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_combinations(chars):\n    \"\"\"Find all possible combinations of words that can be formed with a set of characters\"\"\"\n    characters = list(chars)  # Convert the characters into a list\n    combinations = set()  # Create an empty set to store the combinations\n\n    # Iterate over the list of characters\n    for i in range(len(characters)):\n        # Get the current character\n        char = characters[i]\n\n        # Create a new list with the other remaining characters\n        remaining_chars = characters[:i] + characters[i+1:]\n\n        # Create a temporary set to store all the combinations\n        # of the remaining characters\n        temp_set = set()\n        for c in remaining_chars:\n            temp_set.add(char + c)\n\n        # Add the temporary set to the main set of combinations\n        combinations = combinations | temp_set\n\n    return combinations\n\n# Test\ncombinations = find_combinations(\"abcd\")\n# Expected output: {'ac', 'bd', 'bc', 'ab', 'cd', 'ad', 'db', 'dc'}\nprint(combinations) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Generate a random color code (RGB) \nimport random\n\ndef get_random_color():\n    r = random.randint(0, 255)\n    g = random.randint(0, 255)\n    b = random.randint(0, 255)\n    return (r, g, b)\n\nif __name__ == '__main__':\n    print(get_random_color()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mean_of_three(num1, num2, num3):\n    return (num1 + num2 + num3) / 3\n\nif __name__ == '__main__':\n    print(mean_of_three(2, 4, 6)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: res = []\nfor num in arr:\n    res.append(num%100)\nprint(res) # [30, 93, 56] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python3\n\n# This takes an XML report extracted from an OpenVAS VA scanner and\n# creates issue tickets on ServiceNow and Redmine systems for tracking\n# purposes.\n#\n# Most parameters are specified in the 'ov_prefs.txt' file, however,\n# the XML report file may be specified on the command line.  If\n# specified this way, the script will ignore that line in the\n# preferences file, however, the line must still exist!\n\n# version 0.5\n\n#modules\nimport os\nimport sys\nimport csv\nimport json\nimport socket\nimport requests\nfrom redmine import Redmine\nimport xml.etree.ElementTree as ET\n\n## Configure your environment through preferences file\n# load prefs from ~/.incmgmt/prefs.txt\n# The parameters should be in the following format\n# DO NOT use comments or blank lines.\n# Redmine Project\n# Redmine URL\n# Redmine API key\n# ServiceNow URL\n# ServiceNow username\n# Servicenow password\n# severity level\n# OpenVAS XML report file  \n# Preamble: general info you want included in every ticket created\n\nos.chdir(os.path.expanduser(\"~\") + \"/.incmgmt/\")\nprefs = []\nfor line in open('ov_prefs.txt'):\n    prefs.append(line)\nredmine_project = prefs[0].rstrip() \nredmine_server = prefs[1].rstrip() \nredmine_key = prefs[2].rstrip()\nsn_server = prefs[3].rstrip() \nuser = prefs[4].rstrip()\npwd = prefs[5].rstrip() \nseverity_filter = prefs[6].rstrip()\nif len(sys.argv) == 1:   # test for command line arguments\n    ov_report = prefs[7].rstrip()\nelse:\n    ov_report = sys.argv[1]\npreamble =  prefs[8].rstrip() \n    \n# Define service now headers\nheaders = {\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}\n\n\n# Input the vulnerability report and parse the XML\nroot = ET.parse(ov_report)\n\n## determine criticality factors\n# impact and urgency are used for Service Now\n# priority is used for Redmine\ndef criticality(cvss):\n    global impact\n    global urgency\n    global priority\n    if float(cvss) > 7:\n        impact = 2\n        urgency = 1\n        priority = 5\n    elif float(cvss) < 4:\n        impact = 3\n        urgency = 3\n        priority = 3\n    else:\n        impact = 2\n        urgency = 2\n        priority = 4\n    return impact, urgency, priority\n\ndef reverse_lookup(ip):\n    try:\n        hostname = socket.gethostbyaddr(ip)[0]\n    except socket.herror:\n        hostname = \" \"\n    return hostname\n        \n\n## determine category\n\"\"\" Redmine reference\n0 nothing\n53 Database\n54 Networking\n56 Server - Unix\n55 Server - Windows\n57 Web Application  \"\"\"\n\n## Function to categorize the issue for all ticketing systems\n# categoy is used for redmine, and subcategory is used for\n# ServiceNow because it has a default high-level category for vulns\ndef categorize(family):\n    if family == \"Web application abuses\" or \"Web Servers\":\n        category = 57\n        subcategory = \"Internal Application\"\n    elif family == \"Databases\":\n        category = 53\n        subcategory = \"Internal Application\"\n    elif family == \"General\":\n        category = 56\n        subcategory = \"UNIX\"\n    elif \"CentOS\" in family:\n        category = 56\n        subcategory = \"UNIX\"\n    elif \"Windows\" in family:\n        category = 55\n        subcategory = \"Windows\"\n    else:\n        category = 0\n        subcategory = \" \"\n    return category, subcategory\n\n#Specify Redmine server params\nredmine = Redmine(redmine_server, requests={'verify': False}, key=redmine_key, version='2.5.1')\n\ndef redmine_issue(priority, subject, body, category):\n    ## Create an issue in Redmine to track the vulnerability\n    # and return information regarding the created ticket\n    new_issue = redmine.issue.create(project_id = redmine_project, \\\n        priority_id = priority, subject = subject, description = body,\\\n        tracker_id=19, category_id = category)\n    redmine_issue_id = str(new_issue.id)\n    redmine_url = redmine_server + \"/issues/\" + redmine_issue_id\n    print(\"redmine ticket created\")\n    return redmine_url, redmine_issue_id\n\ndef sn_issue(subject, redmine_url, subcategory, impact, urgency):\n    ## Create the incident in ServiceNow\n    # Construct the incident JSON object\n    incident_data = '{'  + \\\n        '\"short_description\":' + '\"' + subject + '\",' + \\\n        '\"description\":' + '\"For more information, see: ' + redmine_url + '\",' + \\\n        '\"u_category\":' + '\"Vulnerability Management\",' + \\\n        '\"u_subcategory\":' + '\"' + subcategory  + '\",' + \\\n        '\"impact\":' + '\"' + str(impact)  + '\",' + \\\n        '\"urgency\":' + '\"' + str(urgency)  + '\",' + \\\n        '\"contact_type\":\"Alert\"' + '}' \n    # Create the incident on the Service Now system\n    response = requests.post(sn_server, auth=(user, pwd), \\\n        headers=headers, data=incident_data)\n    # Capture the ticket number and unique identifier\n    sn_ticket = response.json()['result']['number']\n    sys_id = response.json()['result']['sys_id']\n    print(\"service now ticket created\")\n    return sn_ticket, sys_id\n\n# Update the Service Now ticket with a comment\ndef sn_update(sys_id, comment):\n    sn_url = sn_server + '/' + sys_id  # REST URL for the ticket\n    update = requests.patch(sn_url, auth=(user, pwd), headers=headers,\\\n            data='{\"comments\":\"' + comment +'\"}')\n    if update.status_code != 200: \n        print('Status:', response.status_code, 'Headers:',\\\n               response.headers, 'Error Response:',response.json())\n        exit()\n    print(\"Updated Service Now ticket\" + \" \" + sys_id)  # user output\n\n\n# checks for a ticket with the exact same \"subject\" or \"short\n# description\" on the Redmine system.\ndef CheckTickets(subject):\n    i = 0\n    project = redmine.project.get(redmine_project)\n    while i < len(project.issues):\n#        print(\"Checking: \" + str(project.issues[i]))\n        if str(project.issues[i]) == subject:\n            incident_id = project.issues[i].id\n            opentix_log = csv.reader(open('opentix.csv'))\n            # Generate a dictionary of the known open tickets.  This\n            # should really be performed at the beginning so it\n            # doesn't run everytime, but meh!\n            tix_dict = {}\n            for row in opentix_log:\n                tix_dict[row[0]]=row[2]\n            sn_sysid = tix_dict[str(incident_id)]\n            print(\"Found match: \" + tix_dict[str(incident_id)] + \" \" + str(project.issues[i]))  # debug\n            return sn_sysid # return a value for test\n        i += 1\n    return None  # if the test fails, return nothing\n            \n \ndef log(redmine_issue_id, sn_ticket, sys_id, redmine_url):\n    # Write log file of tickets created\n    ticket_log = open('ticketlog.csv','a')\n    opentix_log = open('opentix.csv','a')\n    ticket_log.write(redmine_issue_id + ',' + sn_ticket + ',' + \\\n        sys_id + ',' + redmine_url + ',' + '\\n')\n    opentix_log.write(redmine_issue_id + ',' + sn_ticket + ',' + \\\n        sys_id + '\\n')\n    ticket_log.close()\n    opentix_log.close()\n\n## Main program.  Extract the data, then call functions\n# Extract elements from the XML for use in creating the ticket\nfor result in root.findall(\"./report/results/result\"):\n    # only process vulnerabilities of a certain severity or higher\n    if result.find('overrides/override/new_severity') is not None:\n        cvss = result.find('overrides/override/new_severity').text\n    else:\n        cvss = result.find('severity').text\n    if float(cvss) >= float(severity_filter):\n        # Extract the elements from the XML\n        host_ip = result.find('host').text\n        severity = result.find('severity').text\n        if result.find('description').text is not None:\n            description = result.find('description').text\n        else:\n            description = \"no extended description available\"\n        short_desc = result.find('nvt/name').text\n        cvss = result.find('nvt/cvss_base').text\n        cve = result.find('nvt/cve').text\n        system_type = result.find('nvt/family')\n        # get some additional info based on extracted values\n        hostname = reverse_lookup(host_ip)  # perform name lookup\n        impact, urgency, priority = criticality(severity)\n        category, subcategory = categorize(system_type)\n        full_desc = result.find('nvt/tags').text\n        criticality(cvss)    # calc criticality levels\n        subject = short_desc + \" detected on \" + hostname + \" \" + host_ip\n        # Create the body of the ticket by combining multiple elements from \n        # the report file.\n        body = preamble + \"\\n \\n\" + full_desc + \"\\n \\n CVEs:\" + cve +\\\n            \"\\n \\n Description: \\n\" + description \n        # Check for currently active ticket for same issue.  This\n        previous = CheckTickets(subject)\n        # Create a new ticket if one does not exist.\n        if previous is not None:\n            sn_update(previous, \"Please provide an update for this ticket\")\n        else:\n            # create the issues in redmine and return info        \n            redmine_url, redmine_issue_id = redmine_issue(priority, \\\n                subject, body, category)\n            # create the issues in ServiceNow and return info\n            sn_ticket, sys_id = sn_issue(subject, redmine_url, \\\n                subcategory, impact, urgency)\n            log (redmine_issue_id, sn_ticket, sys_id, redmine_url)\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import schedule\nimport time\n\ndef executeScheduledJob():\n # Add your scheduled task code here\n print(\"Executing scheduled job...\")\n\n# Add your scheduled task\nschedule.every().day.at(\"10:00\").do(executeScheduledJob)\n\n# Run the schedule\nwhile True:\n schedule.run_pending()\n time.sleep(1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def avg(list):\n    if len(list) == 0:\n        return 0\n    else:\n        sum = 0\n        for num in list:\n            sum += num\n        return sum / len(list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: inputMatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n#traversing the matrix\nfor row in inputMatrix:\n    for column in row:\n        print(column, end=\" \")\n    print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortDescending(numbers):\n    for i in range(len(numbers)): \n        for j in range(i):\n            if numbers[j] < numbers[j+1]:\n                temp = numbers[j] \n                numbers[j] = numbers[j+1] \n                numbers[j+1] = temp \n  \n    return numbers\n\nprint(sortDescending([6,2,12,5])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_spam(email):\n    words = [\"discount\", \"offer\", \"free\", \"cheap\", \"50% off\", \"purchase now\"]\n    email_words = email.lower().split()\n    word_list = [word for word in email_words if word in words]\n    if len(word_list) > 0:\n        return 'spam'\n    else:\n        return 'not spam' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(arr):\n result = []\n \n for num in arr:\n if num not in result:\n result.append(num)\n \n return result\n\n# testing \narr = [1, 2, 2, 3, 3, 4]\nprint(remove_duplicates(arr)) # Output: [1, 2, 3, 4] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import platform\n\nprint(platform.platform()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countdown(num):\n    if num == 0:\n        return\n    else:\n        print(num)\n        num -= 1\n        countdown(num)\n\ncountdown(5) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter\nfrom tkinter import ttk\nfrom datetime import datetime\n\nroot = tkinter.Tk()\nroot.title = \"Time and Date\"\n\n# create a label\nlabel = ttk.Label(root, text=\"\")\nlabel.pack()\n\n# create two buttons\ndef click_me_1():\n    result = datetime.now()\n    label.config(text=f\"Current Time and Date: {result}\")\n\nbutton_1 = ttk.Button(root, text=\"Update Date and Time\", command=click_me_1)\nbutton_1.pack()\n\ndef click_me_2():\n    result = datetime.now().date()\n    label.config(text=f\"Today's Date: {result}\")\n\nbutton_2 = ttk.Button(root, text=\"Display Date Only\", command=click_me_2)\nbutton_2.pack()\n\nroot.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Square:\n    def __init__(self, length):\n        self.length = length\n\n    def find_area(self):\n        return self.length**2\n\nsqr = Square(4)\nprint(sqr.find_area()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\nclass BinaryTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, data):\n        new_node = Node(data)\n        if self.root is None:\n            self.root = new_node\n        else:\n            current = self.root\n            while current is not None:\n                if data < current.data:\n                    if current.left is None:\n                        current.left = new_node\n                        break\n                    else:\n                        current = current.left\n                elif data > current.data:\n                    if current.right is None:\n                        current.right = new_node\n                        break\n                    else:\n                        current = current.right but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndog_breeds = {\n  \"Labrador Retriever\": {\n    \"Origin\": \"United Kingdom\",\n    \"Temperament\": \"Friendly\",\n    \"Life Expectancy\": \"12-13 years\"\n  },\n  \"French Bulldog\": {\n    \"Origin\": \"France\",\n    \"Temperament\": \"Adaptable\",\n    \"Life Expectancy\": \"10-12 years\"\n  },\n  \"Siberian Husky\": {\n    \"Origin\": \"Russia\",\n    \"Temperament\": \"Outgoing, Cheerful\",\n    \"Life Expectancy\": \"12-14 years\"\n  },\n  \"Pug\": {\n    \"Origin\": \"China\",\n    \"Temperament\": \"Playful, Charming\",\n    \"Life Expectancy\": \"12-15 years\"\n  },\n  \"Bulldog\": {\n    \"Origin\": \"England\",\n    \"Temperament\": \"Friendly\",\n    \"Life Expectancy\": \"10-12 years\"\n  }\n}\n\nprint(json.dumps(dog_breeds, indent=4)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply(a, b):\n    return a * b\n\nans = multiply(3, 5)\nprint(ans) # 15 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \nfrom bs4 import BeautifulSoup \n  \ndef crawl_headlines(url): \n    \n    code = requests.get(url)  \n    plain = code.text  \n    soup = BeautifulSoup(plain, \"html.parser\")  \n  \n    headlines = [] \n    for headline in soup.find_all('a', {'class': 'story-link'}): \n        headlines.append(headline.string) \n          \n    return headlines \n  \n\nURL = \"https://www.example.com/news\"\nheadlines =  crawl_headlines(URL) \nprint(\"Headlines:\\n\") \n\nfor headline in headlines: \n    print(headline) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\nimport tweepy\nimport sys\nimport os\nimport codecs\nimport unicodecsv as csv\n\n# API and ACCESS KEYS\nAPI_KEY = 'jz3feMK2gN0kaN377FsTXY7uY'\nAPI_SECRET = 'sGfCEayfwORloC9SvHy6BmDjifUsUEIF0EF51SgiYUgs054n7H'\n\n# Don't buffer stdout, so we can tail the log output redirected to a file\nsys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)\n\n# Max Tweets\nmaxTweets = int(sys.argv[1])\n\n# Filename\nfName = sys.argv[2]\n\ntweetsPerQry = 200\n\n# List of users read from users.txt\nusers = []\n\n#open users.txt file and gets the list of users\nwith open('users.txt', 'r') as f:\n  for line in f:\n    users.append(line.strip())\n\nsinceId = None\n\nif(len(sys.argv) > 3):\n  if(sys.argv[3] != '-1'):\n    sinceId = sys.argv[3]\n\nlast_id = -1L\n\nif(len(sys.argv) > 4):\n  last_id = long(sys.argv[4])\n\ndef getHashtags(hashes):\n  hashStr = ''\n  for i, h in enumerate(hashes):\n    if i == len(hashes)-1:\n      hashStr = hashStr + h['text']\n    else:\n      hashStr = hashStr + h['text'] + ','\n  return hashStr\n\ndef getMentions(mentions):\n  mentionStr = ''\n  for i, m in enumerate(mentions):\n    if i == len(mentions)-1:\n      mentionStr = mentionStr + m['screen_name']\n    else:\n      mentionStr = mentionStr + m['screen_name'] + ','\n  return mentionStr\n\nauth = tweepy.AppAuthHandler(API_KEY, API_SECRET)\n\napi = tweepy.API(auth, wait_on_rate_limit=True, wait_on_rate_limit_notify=True)\n\nif (not api):\n  print (\"Can't Authenticate Bye!\")\n  sys.exit(-1)\n\ntweetCount = 0\nprint(\"Downloading max {0} tweets\".format(maxTweets))\n\nwith open(fName, 'ab') as f:\n  writer = csv.writer(f, encoding='utf-8')\n  writer.writerow(['Username','Created_at','ID','Tweet','RetweetCount','Name','Location','URL','Description','TweetCount','FollowersCount','FriendsCount','hashtags','mentions'])\n  for user in users:\n    tweetCount = 0\n    last_id = 0\n    while tweetCount < maxTweets:\n      print 'User is ' + user + ' Tweet count ' + str(tweetCount) + ' max Tweets ' + str(maxTweets) + ' SinceId ' + str(sinceId) + ' last_id ' + str(last_id)\n      try:\n        if (last_id <= 0):\n          if (not sinceId):\n            new_tweets = api.user_timeline(screen_name=user, count=tweetsPerQry)\n          else:\n            new_tweets = api.user_timeline(screen_name=user, count=tweetsPerQry, since_id=sinceId)\n\n        else:\n          if (not sinceId):\n            new_tweets = api.user_timeline(screen_name=user, count=tweetsPerQry, max_id=str(last_id - 1))\n          else:\n            new_tweets = api.user_timeline(screen_name=user, count=tweetsPerQry, max_id=str(last_id - 1), since_id=sinceId)\n\n        if not new_tweets:\n          print(\"No more tweets found\")\n          break\n        \n        for tweet in new_tweets:\n          try: \n            hashTags = getHashtags(tweet.entities.get('hashtags'))\n            mentions = getMentions(tweet.entities.get('user_mentions'))\n\n            writer.writerow([tweet.user.screen_name,tweet.created_at,tweet.id_str,tweet.text,str(tweet.retweet_count),tweet.user.name, tweet.user.location, str(tweet.user.url),tweet.user.description,str(tweet.user.statuses_count),str(tweet.user.followers_count),str(tweet.user.friends_count),hashTags,mentions])\n          except tweepy.TweepError as e:\n            print(\"some error : \" + str(e) + \" for user: \" + user)\n            break\n\n        tweetCount += len(new_tweets)\n        print(\"Downloaded {0} tweets\".format(tweetCount))\n        last_id = new_tweets[-1].id\n      except tweepy.TweepError as e:\n        # Just exit if any error\n        print(\"some error : \" + str(e))\n        break\n\nprint (\"Downloaded {0} tweets, Saved to {1}\".format(tweetCount, fName)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndata = '{\"apple\":[\"red\",\"green\"],\"pear\":[\"green\"],\"grapes\":[\"green\",\"red\"],\"banana\":[\"yellow\"]}'\n\njson_data = json.loads(data)\n\nfor item in json_data.items():\n    if len(item[1]) % 2 == 0:\n        print(item[0]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Book:\n    def __init__(self, title, author, year, isbn):\n        self.title = title\n        self.author = author\n        self.year = year\n        self.isbn = isbn\n    \n    def __str__(self):\n        return '{} by {} published in {}. ISBN: {}'.format(self.title, self.author, self.year, self.isbn) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n  \n# function to generate and \n# print a random list of 7 numbers  \n# between 1 to 100 \ndef randomList(): \n    randomNumbers = random.sample(range(1, 100), 7) \n    print (\"Random List is : \", end=\"\") \n    for num in randomNumbers: \n        print (num, end = \" \") \n       \nrandomList() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def matrix_mul(A,B):\n if len(A[0]) != len(B):\n   raise ValueError('The column of matrix A must be equal to the row of matrix B')\n \n # Create the result matrix C\n C = [[sum(A[i][k] * B[k][j] for k in range(len(B))) for j in range(len(B[0]))] for i in range(len(A))]\n \n return C\n \n A = [[1,2], [3,4]]\n B = [[5,6], [7,8]]\n \n product = matrix_mul(A,B)\n \n print(product) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class NaiveBayesClassifier:\n    \"\"\"\n    A simple Naive Bayes classifier implementation\n    \"\"\"\n    def __init__(self):\n        self.classes = []\n        self.word_counts = {}\n        self.priors = {}\n\n    def fit(self, X, y):\n        \"\"\"\n        Train the classifier \n        X: List of documents\n        y: List of labels\n        \"\"\"\n        # compute class priors\n        self.classes = list(set(y))\n        for c in self.classes:\n            self.priors[c] = (y.count(c) / len(y))\n\n        # compute count of words\n        for x, c in zip(X, y):\n            words = x.split()\n            for word in words:\n                if (c, word) not in self.word_counts:\n                    self.word_counts[(c, word)] = 0\n                self.word_counts[(c, word)] += 1\n\n    def predict(self, X):\n        \"\"\"\n        Predict classes for a list of documents\n        X: List of documents\n        \"\"\"\n        pred_y = []\n        for x in X:\n            pred_classes = []\n            # compute posterior for each class\n            for c in self.classes:\n                posterior = self.priors[c]\n                for word in  x.split():\n                    if (c, word) not in self.word_counts:\n                        count = 0\n                    else:\n                        count = self.word_counts[(c, word)]\n                    posterior *= (count + 1) / (sum([self.word_counts[(c, w)] for w in self.word_counts if w[0] == c]) +  len(self.word_counts))\n                pred_classes.append((c, posterior))\n            # select the most probable class\n            p = max(pred_classes, key=lambda x: x[1])\n            pred_y.append(p[0])\n\n        return pred_y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_digits(n): \n  \n   sum = 0\n  \n   # Separate the digits of the number  \n   while n > 0: \n      digit = n % 10\n      sum += digit\n      n //= 10\n  \n   return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to calculate \"nth\" root of a number \ndef root(number, root): \n\n\t# Choose a initial \n\t# approximation (smaller \n\t# than the result) \n\tx = 0.001 \n\n\t# Increment x by 1 until \n\t# \"x ^ root\" is less \n\t# than or equal to the number\t\n\twhile abs(x ** root - number) > 0.001: \n\t\tx += 1\n\n\treturn x \n\n# Driver Code\t\nnumber = 625 \nroot = 4\n\nfourthRoot = root(number, root) \n\nprint(\"Fourth root of\", number, \n\t\t\"is\", fourthRoot) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ComplexNumber:\n    def __init__(self, realpart, imagpart):\n        self.realpart = realpart\n        self.imagpart = imagpart\n\n    def __add__(self, other):\n        newRealPart = self.realpart + other.realpart\n        newImagPart = self.imagpart + other.imagpart\n        return ComplexNumber(newRealPart, newImagPart)\n\n    def __sub__(self, other):\n        newRealPart = self.realpart - other.realpart\n        newImagPart = self.imagpart - other.imagpart\n        return ComplexNumber(newRealPart, newImagPart)\n\n    def __str__(self):\n        return '{} + {}i'.format(self.realpart, self.imagpart) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort(arr):\n for i in range(len(arr)):\n min_idx = i\n for j in range(i+1, len(arr)):\n if arr[min_idx] > arr[j]:\n min_idx = j\n arr[i], arr[min_idx] = arr[min_idx], arr[i]\n\nlist = [3, 9, 8, 5, 6, 4, 2, 1, 10, 7]\nsort(list)\nprint(list) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\n'''\ntag_generator.py\n\nCopyright 2017 Long Qian\nContact: lqian8@jhu.edu\n\nThis script creates tags for your Jekyll blog hosted by Github page.\nNo plugins required.\n'''\n\nimport glob\nimport os\nimport re\n\npost_dir = '_posts/'\ntag_dir = 'tag/'\n\nfilenames = glob.glob(post_dir + '*')\n\ntotal_tags = []\nfor filename in filenames:\n    f = open(filename, 'r')\n    crawl = False\n    for line in f:\n        if crawl:\n            current_tags = line.strip().split()\n            if current_tags[0] == 'tags:':\n                total_tags.extend(current_tags[1:])\n                crawl = False\n                break\n        if line.strip() == '---':\n            if not crawl:\n                crawl = True\n            else:\n                crawl = False\n                break\n    f.close()\ntotal_tags = set(total_tags)\n\nold_tags = glob.glob(tag_dir + '*.md')\nfor tag in old_tags:\n    os.remove(tag)\n\nfor tag in total_tags:\n    sTag = re.sub(\"^\\.\", \"\", tag)\n    tag_filename = tag_dir + sTag.lower().replace('.', '-') + '.md'\n    f = open(tag_filename, 'a')\n    write_str = '---\\nlayout: tagpage\\ntitle: \\\"Tag: ' + tag + '\\\"\\ntag: ' + tag + '\\nrobots: noindex\\nexclude_from_search: true\\ntagline: \\'\"Creative Active Individuals can only grow up in a society that emphasizes learning instead of teaching.\" - Chris Alexander\\'\\n---\\n'\n    f.write(write_str)\n    f.close()\nprint(\"Tags generated, count\", total_tags.__len__())\n but is not the same. just give one example and only return the code."}
