{"prompt": "make some code that functions the same as the following code: def sort_tuple_list(tuple_list):\n    sorted_tuple_list = sorted(tuple_list, key=lambda x: x[2])\n    print(sorted_tuple_list)\n\ntuple_list = [(21, \"ABC\", 33), (9, \"XYZ\", 88), (67, \"MNO\", 37)]\nsort_tuple_list(tuple_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_string(strings):\n    longest_len = 0\n    longest_str = ''\n    for s in strings:\n        str_len = len(s)\n        if str_len > longest_len:\n            longest_str = s\n            longest_len = str_len\n    return longest_str\n\nstrings = ['cat', 'dog', 'elephant']\nlongest_str = longest_string(strings)\nprint(longest_str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def num_to_word(num):\n    switcher = {\n        1: 'one',\n        2: 'two',\n        3: 'three',\n        4: 'four',\n        5: 'five',\n        6: 'six',\n        7: 'seven',\n        8: 'eight',\n        9: 'nine',\n        10: 'ten',\n        11: 'eleven',\n        12: 'twelve',\n        13: 'thirteen',\n        14: 'fourteen',\n        15: 'fifteen',\n        16: 'sixteen',\n        17: 'seventeen',\n        18: 'eighteen',\n        19: 'nineteen',\n        20: 'twenty'\n    }\n    if num < 20:\n        return switcher.get(num, 'under twenty')\n    elif num < 100:\n        tens = num // 10\n        remainder = num % 10\n        return switcher.get(tens, 'under one hundred') + ' ' + switcher.get(remainder, '')\n    else:\n        hundreds = num // 100\n        remainder = num % 100\n        return switcher.get(hundreds, 'over one hundred') + ' hundred ' + num_to_word(remainder)\n\nprint(num_to_word(123))  # Output: one hundred twenty three but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MeanMedianModeCalculator:\n    \n    # Function to calculate the mean  \n    def calculate_mean(self, numbers):\n        return sum(numbers) / len(numbers)\n    \n    # Function to calculate the median  \n    def calculate_median(self, numbers):\n        numbers.sort()\n        mid_point = int(len(numbers) / 2)\n        if len(numbers) % 2 == 0:\n            return (numbers[mid_point - 1] + numbers[mid_point]) / 2\n        else: \n            return numbers[mid_point]\n            \n    # Function to calculate the mode \n    def calculate_mode(self, numbers):\n        max_count = 0\n        max_num = 0\n        count_dictionary = {}\n        \n        for number in numbers:\n            if number in count_dictionary.keys():\n                count_dictionary[number] += 1\n            else:\n                count_dictionary[number] = 1\n                \n            if count_dictionary[number] > max_count:\n                max_count = count_dictionary[number]\n                max_num = number\n                \n        return max_num but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def hill_climbing(data):\n # Initialize the best solution to the input solution\n best_solution = data\n best_score = evaluate(data)\n improvement = True\n\n # While there is an improvement\n while improvement:\n # Get the indices of the two nodes to swap\n a, b = get_swapping_indices(best_solution)\n\n # Create a new solution by swapping the two nodes\n new_solution = best_solution.copy()\n new_solution[a], new_solution[b] = new_solution[b], new_solution[a]\n\n # Evaluate the new solution\n new_score = evaluate(new_solution)\n\n # If it is better than the best solution\n if new_score > best_score:\n # Update the best solution and score\n best_solution = new_solution\n best_score = new_score\n # Otherwise, we cannot improve further\n else:\n improvement = False\n\n # Return the best solution\n return best_solution\n\ndef evaluate(solution):\n # Calculate the total distance travelled\n total_distance = 0\n\n for i in range(len(solution)):\n total_distance += abs(solution[i] - solution[(i+1) % len(solution)])\n\n # Return the total distance\n return total_distance\n\ndef get_swapping_indices(solution):\n # Choose two random indices\n a = random.randint(0, len(solution) - 1)\n b = random.randint(0, len(solution) - 1)\n\n # Make sure they are different\n while a == b:\n b = random.randint(0, len(solution) - 1)\n\n # Return the indices\n return a, b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# Read the dataset\ndata = pd.read_csv('data.csv')\nX = data.iloc[:, [0,1]]\ny = data.iloc[:, 2] \n\n# Split the dataset into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n\n# Create an instance of Logistic Regression model\nclassifier = LogisticRegression()\n\n# Fit the model on the training data\nclassifier.fit(X_train, y_train)\n\n# Make predictions using the test data\ny_pred = classifier.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef normalize_list(lst):\n    lst = np.array(lst)\n    normalized = lst / lst.sum()\n    return normalized\n\nlst = [2, 5, 8, 9, 12, 25]\nnormalized_list = normalize_list(lst)\nprint(normalized_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #This code uses Python Turtle library to create Fractal Design\nimport turtle\n\n#define the base fractal\nbaseFractal=\"FX\"\n\n#variable lookup table\nlookupTable={\"X\":\"X+YF+\", \"Y\":\"-FX-Y\"}\n\n#define the number of levels of recursion\nlevelsOfRecursion=7\n\n#this function recursively creates the fractal\ndef drawFractal(cmd, levelsOfRecursion):\n    for command in cmd:\n        #check if its a F,X or Y command\n        if(command==\"F\"):\n            turtle.forward(100/(levelsOfRecursion))\n        elif command==\"X\" or command==\"Y\":\n            #create newCommand by looking up the lookup table\n            newCmd=lookupTable[command]\n            #draw the replacement\n            drawFractal(newCmd, levelsOfRecursion-1)\n        elif command==\"+\":\n            #turn left\n            turtle.left(90)\n        elif command==\"-\":\n            #turn right\n            turtle.right(90)\n\n#initialize the Turtle\nturtle.setup(500,500)\nturtle.penup()\nturtle.goto(-150,150)\nturtle.pendown() \nturtle.speed(100)\n\n#call the fractal drawing function\ndrawFractal(baseFractal, levelsOfRecursion)\n    \n#hold the screen\nturtle.exitonclick() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def my_function(input_array):\n  output_array = set()\n  return output_array.union(input_array) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\n\ndef fill_missing_values(df, colname):\n\n    # get a list of all the users in the dataframe\n    users = df['username'].values.tolist()\n    \n    for i, user in enumerate(users):\n        if df[colname].isnull()[i] == True:\n            closest_neighbors = find_closest_neighbors(df, user, 3)\n            df[colname][i] = np.mean([df[colname][j] for j in closest_neighbors])\n    \n    return df\n\ndef find_closest_neighbors(df, user, k):\n    closest_neighbors = []\n    user_age = df[df.username == user].age.values[0]\n    for v in df.index:\n        if df.username[v] != user and len(closest_neighbors) < k:\n            # compute the Euclidean distance\n            dist = np.sqrt(np.abs(user_age - df.age[v])**2)\n            closest_neighbors.append((v, dist))\n    \n    closest_neighbors.sort(key=lambda x: x[1])\n    return [neighbor[0] for neighbor in closest_neighbors] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import flask\nimport mysql.connector\n\napp = flask.Flask(__name__)\nmydb = mysql.connector.connect(\n    host = \"localhost\",\n    user = \"yourusername\",\n    passwd = \"yourpassword\"\n)  \n\n@app.route('/users', methods=['GET', 'POST', 'PUT', 'DELETE'])\ndef users():\n    if request.method == 'GET':\n        # return all user records\n        cursor = mydb.cursor() \n        query = \"SELECT * FROM users\"\n        cursor.execute(query)\n        results = cursor.fetchall()\n        return jsonify(results)\n    \n    if request.method == 'POST':\n        # add a new user record\n        data = request.get_json()\n        sql_query = \"INSERT INTO users (name, age, email\") VALUES (%s, %s, %s)\"\n        val = (data['name'], data['age'], data['email'])\n        cursor.execute(sql_query, val)\n        mydb.commit()\n        return jsonify({'message': 'user added successfully'})\n    \n    if request.method == 'PUT':\n        # edit an existing user record\n        data = request.get_json()\n        sql_query = \"UPDATE users SET name = %s, age = %s, email = %s WHERE id = %s\" \n        val = (data['name'], data['age'], data['email'], data['id'])\n        cursor.execute(sql_query, val)\n        mydb.commit()\n        return jsonify({'message': 'user record updated successfully'})\n\n    if request.method == 'DELETE':\n        # delete a user record\n        data = request.get_json()\n        sql_query = \"DELETE FROM users WHERE id = %s\" \n        val = (data['id'],)\n        cursor.execute(sql_query, val)\n        mydb.commit()\n        return jsonify({'message': 'user record deleted successfully'}) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import socket\n\n# Create a socket object\ns = socket.socket()\n\n# Connect to local host\nhost = '127.0.0.1'\nport = 8888\ns.connect((host, port))\n\n# Receive data from server\ndata = s.recv(1024)\nprint(data)\n\n# Close the socket connection\ns.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from multiprocessing import Pool\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_prime_numbers(n):\n    primes = []\n    with Pool(processes=4) as pool:\n        primes = list(pool.map(is_prime, range(2, n)))\n    return primes but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def dictfromlists(l1, l2):\n    dict = {}\n    for i in range(len(l1)):\n        dict[l1[i]] = l2[i]\n        \n    return dict\n\nlist1 = [\"a\", \"b\", \"c\", \"d\"]\nlist2 = [1, 2, 3, 4]\nmy_dict = dictfromlists(list1, list2)\n\nprint(my_dict)\n\n# Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_pass(stringLength=8):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(stringLength))\n\npassword = generate_pass()\nprint(password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num):\n    if num <= 1:\n        return False\n\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n\n    return True\n\nnum = 7\nresult = is_prime(num)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def square_list(arr):\n    result = [num**2 for num in arr]\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: function hello_name(name) {\n   return \"Hello \" + name + \"!\";\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_numbers(x, y):\n    return x + y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(300, 501):\n    if i % 5 == 0 and i % 6 == 0:\n        print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #calculate the total\ntotal_cost = price * quantity\n\n#print the total\nprint(total_cost) # Output: 30 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def join_strings(strings, separator): \n    result = \"\" \n    for s in strings: \n        result += s + separator \n    return result[:-1]\n  \n# Example \nlist_of_strings = [\"Python\", \"is\", \"a\", \"programming\", \"language\"] \nresult = join_strings(list_of_strings, \" \") \nprint(result) # Output: Python is a programming language but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Load MNIST dataset\nimport pandas as pd\ndataset = pd.read_csv(\"MNIST.csv\")\n\n# Divide the dataset into inputs and labels\nX = dataset.iloc[:, 1:784].values \ny = dataset.iloc[:, 0].values\n\n# Reshape the dataset\nX = X.reshape(len(X), 28, 28, 1)\n\n# Preprocessing\nX = X / 255.0\n\n# Create the neural network\nfrom keras.models import Sequential\nfrom keras.layers import Convolution2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense\n\n# Initialize the CNN\nclassifier = Sequential()\n\n# Convolution Layer\nclassifier.add(Convolution2D(32, 3, 3, input_shape = (28, 28, 1), activation = 'relu'))\n\n# Pooling\nclassifier.add(MaxPooling2D(pool_size=(2, 2)))\n\n# Flattening\nclassifier.add(Flatten())\n\n# Fully Connected Layer\nclassifier.add(Dense(output_dim = 128, activation = 'relu'))\nclassifier.add(Dense(output_dim = 10, activation = 'sigmoid'))\n\n# Compiling the CNN\nclassifier.compile(optimizer='adam',loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n\n# Fit CNN to the training set\nclassifier.fit(X, y, batch_size=32, epochs=3, verbose=1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import the necessary libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\n\n# Load the dataset\ndata = pd.read_csv('CustomerChurn.csv')\n\n# Split the dataset into training and testing set.\nX = data.drop('Churn', axis=1)\ny = data['Churn']\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.20, random_state = 0)\n\n# Apply feature scaling \nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n\n# Train the model \nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)\n\n# Test the model\ny_pred = classifier.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\ndef http_request(url):\n    response = requests.get(url)\n    return response but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sumListElements(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum\n\nresult = sumListElements([1,2,3]) \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replaceXWithY(str, x, y):\n    while x in str:\n        str = str.replace(x, y)\n    return str\n\nresult = replaceXWithY(\"xx123xx456xx\", \"x\", \"y\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(str1, str2):\n    str1 = str1.replace(\" \", \"\").lower()\n    str2 = str2.replace(\" \", \"\").lower()\n\n    if len(str1) != len(str2):\n        return False\n\n    count = {}\n\n    for letter in str1:\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n\n    for letter in str2:\n        if letter in count:\n            count[letter] -= 1\n        else:\n            count[letter] = 1\n\n    for countval in count.values():\n        if countval != 0:\n            return False\n\n    return True\n\nis_anagram(\"listen\", \"silent\")\n# Output: True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(arr):\n    seen = set()\n    seen_add = seen.add\n    return [x for x in arr if not (x in seen or seen_add(x))]\n\narr = [1, 3, 2, 1, 5, 4, 8, 6, 7, 5]\nresult = remove_duplicates(arr)\n\nprint(result)\n# Output: [1, 3, 2, 5, 4, 8, 6, 7] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial_recursive(n):\n    # Base case: \n    # n is 1, return 1\n    if n == 1:\n        return 1\n    # Recursive case: \n    # return n * (n-1)\n    return n * factorial_recursive(n - 1)\n\n# Test\nprint(factorial_recursive(5)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_capitalize(string, n):\n    string_list = string.split() \n    reverse_list = string_list[-n:] + string_list[:-n] \n    new_string = \" \".join(reverse_list) \n    return new_string.title()\n\nstring = \"the quick brown fox\"\nn = 3\n\nprint(reverse_capitalize(string, n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# get the html from the website\nurl = \"https://www.example.com/stocks\"\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# find all table rows\ntable_rows = soup.find_all('tr')\n\n# iterate through each table row\nfor row in table_rows:\n # get the table data\n stock_data = row.find_all('td')\n\n # extract the data from each table data element\n stock_symbol = stock_data[0].text\n stock_name = stock_data[1].text\n stock_price = stock_data[2].text\n\n # Print the data\n print(\"Stock Symbol:\", stock_symbol)\n print(\"Stock Name:\", stock_name)\n print(\"Stock Price:\", stock_price) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to generate \n# n random numbers within a given range \nimport random \n  \n# Function to generate random numbers \ndef random_numbers(rangeStart, rangeEnd, numberOfNumbers): \n    res = [] \n    for j in range(numberOfNumbers): \n        res.append(random.randint(rangeStart, rangeEnd)) \n  \n    return res \n  \n# Driver Code \nrangeStart = -10\nrangeEnd = 10\nnumberOfNumbers = 20\n\nprint(random_numbers(rangeStart, rangeEnd, numberOfNumbers)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_nonalphanum(text):\n  new_string = \"\"\n  for char in text:\n    if char.isalnum():\n      new_string += char\n  return new_string\n\ncleaned_string = remove_nonalphanum(text)\nprint(cleaned_string) #prints \"ThisisaStringwithymbols\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name, id_number):\n        self.name = name\n        self.id_number = id_number but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generatePassword():\n  characters = string.ascii_letters + string.digits + string.punctuation\n  password = ''.join(random.choice(characters) for i in range(8))\n  return password\n \nprint(generatePassword()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n#define the model\nmodel = Sequential()\nmodel.add(Dense(units=64, activation='relu', input_dim=50))\nmodel.add(Dense(units=10, activation='softmax'))\n\n#compile the model\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='sgd',\n              metrics=['accuracy'])\n\n#train the model\nmodel.fit(x_train, y_train, epochs=5, batch_size=32)\n\n#evaluate the model\nloss_and_metrics = model.evaluate(x_test, y_test, batch_size=128) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_duplicates(lst):\n    seen = set()\n    duplicates = []\n    for item in lst:\n        if item in seen:\n            duplicates.append(item)\n        else:\n            seen.add(item)\n    \n    return duplicates but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef classify_sentiment(text):\n analyzer = SentimentIntensityAnalyzer()\n scores = analyzer.polarity_scores(text)\n\n if scores['compound'] > 0:\n  return 'positive'\n elif scores['compound'] == 0:\n  return 'neutral'\n else:\n  return 'negative'\n\nprint(classify_sentiment('The film was terrible'))\n# negative but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 6):\n    for j in range(i):\n        print(\"*\", end=\" \")\n    print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def unique_values(example_dict):\nreturn list(set(example_dict.values())) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: incorrect but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_bmi(weight, height):\n    bmi = weight / (height**2)\n    return bmi\n\nweight = 70\nheight = 1.80\n\nbmi = calculate_bmi(weight, height)\nprint(\"BMI: \" + str(bmi)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # define a function to calculate the GCD of two integers\ndef gcd(a, b):\n if a == 0: \n  return b \n return gcd(b%a, a) \n\n# take input from user\nnum1 = int(input(\"Enter the first number: \"))\nnum2 = int(input(\"Enter the second number: \"))\n\n# print the GCD\nprint(\"The GCD of \" + str(num1) + \" and \" + str(num2) + \" is: \" + str(gcd(num1, num2))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: In Python, you can use a \"for\" loop to iterate over a list. For example:\n \nmy_list = [1, 2, 3, 4, 5]\nfor x in my_list:\n    print(x)\n\nThis will print each of the elements in the list on a new line. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(\"Hello World!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nProgram to calculate the total amount of energy generated per hour by a wind turbine\n\"\"\"\n\n# Function to calculate the total energy generated\ndef calculate_energy(size, speed):\n    power_rating = size * speed**3  # calculate the power rating\n    return power_rating * 0.5  # return the total energy generated in kWh\n\nif __name__ == \"__main__\":\n    size = 100\n    speed = 10\n    result = calculate_energy(size, speed)\n    print(\"Total energy generated by the wind turbine in kWh: \" + str(result)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef get_random_array(max_size):\n    arr = []\n\n    for _ in range(random.randint(0, max_size)):\n        arr.append(random.randint(0, max_size))\n    \n    return arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\n\nsentence = \"Hello World\"\n\nwhile True:\n    print(sentence)\n    time.sleep(10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(10):\n  print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mean(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total / len(nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_even(arr): \n    count = 0\n    for x in arr: \n        if x % 2 == 0: \n            count += 1\n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def minOperations(n): \n  \n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n  \n    x = n \n  \n    for i in range(2, n): \n        if i>x: \n            break\n  \n        if n%i == 0: \n            x = minOperations(int(n/i)) +  i \n  \n    return x \n  \nresult = minOperations(18)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sum = 0\nfor i in range(1000):\n    if (i % 3 == 0 or i % 5 == 0):\n        sum = sum + i\n\nprint(sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list_by_length(list_of_strings):\n    return sorted(list_of_strings, key=len) \n\nlist_of_strings = [\"Python\", \"is\", \"a\", \"programming\", \"language\"]\nsorted_list = sort_list_by_length(list_of_strings) \n\nprint(sorted_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(list):\n    list.sort()\n    return list\n    \nsorted_list = sort_list([3, 2, 5, 1, 4])\nprint(sorted_list) # output: [1, 2, 3, 4, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_largest_number(numbers):\n    largest = numbers[0]\n    for number in numbers:\n        if number > largest:\n            largest = number\n\n    return largest but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def hello():\n    print(\"Hello world!\")\n\ndef goodbye():\n    print(\"Goodbye!\")\n\ndef greetings():\n    hello()\n    goodbye()\n\ngreetings() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n a, b = 0, 1\n for i in range(n):\n  a, b = b, a + b\n return a\n\nfor i in range(51):\n print(fibonacci(i)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: const arr = [\n {name: 'John', age: 19},\n {name: 'Mark', age: 22},\n {name: 'Mary', age: 17}\n];\n\nlet max_age = arr[0].age;\n\narr.forEach( (item) => {\n if(item.age > max_age){\n  max_age = item.age;\n }\n});\n\nconsole.log('The oldest person is ' + max_age + ' years old.');\n\n// Outputs: The oldest person is 22 years old. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nrandom_numbers = []\nfor _ in range(1000):\n    random_numbers.append(random.random())\n\nprint(random_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def two_sum(arr, target): \n    for i in range(0, len(arr)-1): \n        for j in range(i + 1, len(arr)): \n            if arr[i] + arr[j] == target: \n                return [arr[i], arr[j]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate(expression): \n    stack = [] \n    for i in expression: \n        if i.isdigit(): \n            stack.append(int(i)) \n        else: \n            val1 = stack.pop() \n            val2 = stack.pop() \n            if i == '+': \n                result = val2 + val1 \n            elif i == '-': \n                result = val2 - val1 \n            elif i == '*': \n                result = val2 * val1 \n            else: \n                result = val2/val1 \n            stack.append(result) \n\n    return stack.pop()  \n\nprint(calculate(\"10 + 2 * 5 - 3\")) # 19 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.ensemble import RandomForestClassifier\n\nfeatures = ['Gender', 'Income']\nX = df[features]\ny = df['Label']\n\nclf = RandomForestClassifier(n_estimators=100, max_depth=2, random_state=0)\nclf.fit(X, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def knapsack(weights, values, maxWeight):\n if len(weights) == 0 or len(values) == 0 or len(weights) != len(values):\n return 0\n \n if maxWeight == 0:\n return 0\n \n if len(weights) == 1:\n if weights[0] <= maxWeight:\n return values[0]\n else:\n return 0\n \n if weights[0] > maxWeight:\n return knapsack(weights[1:], values[1:], maxWeight)\n \n return max(values[0] + knapsack(weights[1:], values[1:], maxWeight - weights[0]),\n knapsack(weights[1:], values[1:], maxWeight))\n\n# Test\nweights = [2, 3, 5, 1, 6]\nvalues = [3, 8, 7, 2, 8]\nmaxWeight = 6\n\nknapsack(weights, values, maxWeight) # Output: 15 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_total_cost(item_prices, num_items):\n    total_cost = 0\n    for i in range(num_items):\n        total_cost += item_prices[i]\n    return total_cost\n\nif __name__ == '__main__':\n    total = calculate_total_cost([10, 15, 20, 25], 4)\n    print(\"Total cost of buying 4 items:\", total) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: dna_sequence = 'ACTGCTAGCTACTAGC'\ngc_count = 0\nfor base in dna_sequence:\n if base == 'G' or base == 'C':\n  gc_count += 1\ngc_percentage = gc_count / len(dna_sequence) * 100\nprint(gc_percentage) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_arrays(arrA, arrB):\n    for i in arrA:\n        if i not in arrB:\n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Movie: \n \n    def __init__(self, title, year, rating): \n        self.title = title \n        self.year = year\n        self.rating = rating \n  \n    def print_data(self):\n        print('The movie %s released in %d had a rating of %.1f.' \n        % (self.title, self.year, self.rating)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Parsing the string\nnumbers = [int(num) for num in string.split(',')]\n\nprint(numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import cmath\n\na = int(input(\"Enter a: \"))\nb = int(input(\"Enter b: \"))\nc = int(input(\"Enter c: \"))\n\n#calculate the discriminant\nd = (b**2) - (4*a*c)\n\n# find two solutions\nsol1 = (-b-cmath.sqrt(d))/(2*a)\nsol2 = (-b+cmath.sqrt(d))/(2*a)\n\nprint('The solutions are {0} and {1}'.format(sol1,sol2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Customer:\n    def __init__(self, name, email, phone):\n        self.name = name\n        self.email = email\n        self.phone = phone but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.naive_bayes import GaussianNB\n\n# Create a Gaussian Classifier \nmodel = GaussianNB()\n\n# Train the model using the training sets \nmodel.fit([[9, 'L'], \n [6, 'S']], [\"male\", \"female\"]) \n\n# Predict Output \npredicted= model.predict([[9, 'L']])\nprint(predicted) # output: [\"male\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import uuid\nfrom datetime import datetime, timedelta\n\ndef authenticate(username, password):\n  # Validate user credentials\n  # Generate an access token\n  access_token = uuid.uuid4().hex\n  expires = datetime.utcnow() + timedelta(minutes=60)\n  return access_token, expires\n\n# Usage\naccess_token, expires = authenticate('username', 'password') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter as tk\n\n# create the main GUI window\nwindow = tk.Tk()\nwindow.title(\"Python Graphing Program\")\nwindow.geometry(\"500x500\")\n\n# create a Canvas object\nc = tk.Canvas(window, width=480, height=480)\nc.pack()\n\n# create the X and Y axes\nc.create_line(10, 240, 470, 240)\nc.create_line(240, 10, 240, 470)\n\n# create the graph\n... but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findOddSums(arr):\n    sum = 0\n    for num in arr:\n        if num % 2 != 0:\n            sum += num\n    return sum\n\nodd_sums = findOddSums([2, 4, 5, 6])\nprint(odd_sums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from Cryptodome.Cipher import AES\n\ndef encrypt(message, key):\n    # Block size should match the chosen AES mode\n    block_size = 16\n    padding_length = block_size - len(message) % block_size\n\n    # Padding must always be present per the AES spec\n    if padding_length:\n        padded_message = message + (chr(padding_length) * padding_length)\n    else:\n        padded_message = message\n\n    # CBC Mode always works with 16 byte blocks\n    iv = b'\\x16\\x87r\\xb9\\x1b\\x8bho\\x04u\\x16\\xdb\\xbc\\x98\\x87\\xb7Y\\xc0'\n\n    # Create cipher and encrypt data\n    cipher = AES.new(key, AES.MODE_CBC, iv)\n    encrypted_message = cipher.encrypt(padded_message.encode('utf-8'))\n\n    return encrypted_message\n\nkey = b'#1\\x84\\xdc\\x06\\x0c\\x12\\xe8\\x0c\\xd7 \\x9d\\x03\\xd4*\\xdd[\\x85'\n\nencrypted_message = encrypt(\"My Secret Message\",key)\n\nprint(encrypted_message)\n# b\"B\\xf5{5<\\xec~\\xf9\\xc9\\x8f_3\\x04\\x95\\x15'\\x90\\xd2\\\\\\xfc\\xd9\\x03\\xdc\\x1dr\\x1b\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\nfrom lxml import etree\nimport gzip, re, copy, tempfile, subprocess, os\n\nSVG_NAMESPACE=\"http://www.w3.org/2000/svg\"\nINKSCAPE_NAMESPACE=\"http://www.inkscape.org/namespaces/inkscape\"\n_safe = re.compile(\"^[A-Za-z]+$\")\n\nsizes=[64,32,16,8,4]\n\ntree = etree.parse(gzip.open(\"Markers.svgz\"))\n\nlabels = etree.ETXPath(\"//{%s}g/@{%s}label\" % (SVG_NAMESPACE, INKSCAPE_NAMESPACE))(tree)\nfor l in labels:\n\tif not _safe.match(l): raise Exception(\"Label not safe: \"+l)\n\n\tctree = copy.deepcopy(tree)\n\tlayers = etree.ETXPath(\"//{%s}g[./@{%s}label]\" % (SVG_NAMESPACE, INKSCAPE_NAMESPACE))(ctree)\n\tfor layer in layers:\n\t\tl2 = layer.get(\"{%s}label\" % INKSCAPE_NAMESPACE)\n\t\tif l2 == l:\n\t\t\tlayer.attrib[\"style\"]=\"\"\n\t\telse:\n\t\t\tlayer.attrib[\"style\"]=\"display:none\"\n\n\tf = tempfile.NamedTemporaryFile(delete=False)\n\tf.write(etree.tostring(ctree))\n\tf.close()\n\tcmd=[\"rsvg-convert\",\n\t\t\"-w\", \"62\", \"-h\", \"62\",\n\t\t\"-o\", \"/tmp/%s.png\" % l,\n\t\tf.name]\n\tprint \"Running\", \" \".join(cmd)\n\tsubprocess.call(cmd)\n\tos.unlink(f.name)\n\nfor size in sizes:\n\tcmd = [\"montage\"]\n\tfor l in labels: cmd.append(\"/tmp/%s.png\" % l)\n\tcmd.extend([\"-geometry\", \"%sx%s+1+1\" % (size-2, size-2), \"-background\", \"none\", \"PNG32:markers-%s.png\" % size ])\n\tprint \"Running\", \" \".join(cmd)\n\tsubprocess.call(cmd)\nfor l in labels: os.unlink(\"/tmp/%s.png\" % l)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sequence = [7, 3, 12, 9, 4]\nmaxnum = 0\n\nfor num in sequence:\n if num > maxnum:\n  maxnum = num\n\nprint(maxnum) # Output: 12 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Define the pages\npages = {}\nfor page in webpages:\n pages[page[\"url\"]] = page[\"nodes\"]\n\n# Calculate page rank\nd = 0.85 # damping factor\nN = len(pages) # number of webpages\nr = [1/N] * N # page rank values (initialized to 1/N)\n\n# iterate until convergence\nwhile True:\n new_r = [0] * N\n for i, node in enumerate(pages):\n for neighbor in pages[node]:\n new_r[i] += r[pages[node].index(neighbor)] / len(pages[neighbor])\n new_r[i] *= d\n new_r[i] += (1 - d) / N\n if sum([abs(new_r[i] - r[i]) for i in range(N)]) < 0.001:\n break\n else:\n r = new_r\n\n# Print the results\nfor url, page_rank in zip(pages.keys(), r):\n print(url, \":\", page_rank) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\njsonString = '{\"name\": \"John Doe\", \"address\": \"123 Main Street\"}'\njsonObject = json.loads(jsonString)\ncopiedString = json.dumps(jsonObject)\n\nprint(copiedString) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maxDifference(arr): \n    n = len(arr) \n    max_diff = arr[1] - arr[0] \n  \n    for i in range(0, n): \n        for j in range(i + 1, n): \n            if (arr[j] - arr[i] > max_diff): \n                max_diff = arr[j] - arr[i] \n    return max_diff \n  \narr = [3, 8, 9, 6, 4, 10] \nprint( maxDifference(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = 'https://www.nytimes.com/2020/11/19/us/denver-police-protest.html'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n title = response.text.split(\"<title>\")[1].split(\"</title>\")[0]\n print(title) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_reverse(arr):\n    for i in range(len(arr)-1, -1, -1):\n        print(arr[i]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\n# Load the data and split into train and test sets\ndata = pd.read_csv('stock_data.csv')\nX = data.iloc[:, :-1].values\ny = data.iloc[:, -1].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Train the model\nmodel = RandomForestClassifier(n_estimators=100, random_state=0)\nmodel.fit(X_train, y_train)\n\n# Make a prediction for the test set\ny_pred = model.predict(X_test)\nprint(y_pred) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci_sequence(terms):\n    first_num, second_num = 0, 1\n    fibonacci_sequence = []\n\n    for i in range(terms):\n        next_term = first_num + second_num\n        first_num, second_num = second_num, next_term\n        fibonacci_sequence.append(next_term)\n\n    return fibonacci_sequence\n\nnterms = 10\nfibonacci_sequence = fibonacci_sequence(nterms)\nprint(fibonacci_sequence) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn import tree\nimport pandas as pd\n\n# Load the data\ndf = pd.read_csv(\"data.csv\")\n\n# Define the features and labels\nfeatures = [\"Age\", \"Income\", \"Gender\"]\nlabels = [\"Credit\"]\n\n# Create a Decision Tree classifier\nclf = tree.DecisionTreeClassifier()\n\n# Train the model using the training sets\nclf.fit(df[features], df[labels])\n\n# Make predictions using the testing set\npredictions = clf.predict(df[features]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_list_to_2d_array(l):\n    # calculate the size of the 2d array\n    n = int(len(l) ** 0.5) \n    # create the 2d array\n    matrix = [[None for i in range(n)] for j in range(n)] \n\n    # populate the 2d array\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = l[count]\n            count += 1 \n    return matrix\n\nprint(convert_list_to_2d_array([\"a\", \"b\", \"c\", \"d\", \"e\"])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def intersection(set1, set2):\n  return set1.intersection(set2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_checksum (data):\n    checksum = 0\n    for char in data:\n        checksum += ord(char)\n    return checksum % 256 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def foo(a, b):\n    return a + b\n\nx = foo(2, 3)\nprint(x)  # output is 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport bs4\n\n# set the url\nurl = \"Sample URL\"\n\n# send a request\nresponse = requests.get(url)\n\n# get the response\nhtml = response.text\n\n# parse the response\nsoup = bs4.BeautifulSoup(html, \"html.parser\")\n\n\n# extract the title\ntitle = soup.title.text\n\n# extract the meta description\nmeta = soup.find('meta', attrs={'name': 'description'})\ndescription = meta.get('content')\n\n# extract all h1-h6 tags\nheading_tags = \"\"\nfor tag in soup.find_all(re.compile(\"^h[1-6]\")):\n heading_tags += tag.text\n \nprint(\"Title:\", title)\nprint(\"Meta Description:\", description)\nprint(\"Heading Tags:\", heading_tags) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask\nfrom flask_restful import Resource, Api\nfrom nltk.corpus import wordnet\n\napp = Flask(__name__)\napi = Api(app)\n\nclass SynAntonyms(Resource):\n def get(self, word):\n syns = wordnet.synsets(word)\n synonyms = []\n antonyms = []\n for s in syns:\n for l in s.lemmas():\n synonyms.append(l.name())\n if l.antonyms():\n antonyms.append(l.antonyms()[0].name())\n return {\n 'synonyms': list(set(synonyms)),\n 'antonyms': list(set(antonyms))\n }\n\napi.add_resource(SynAntonyms, '/synantonyms/<string:word>')\n\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def squares(arr):\n  res = []\n  for i in arr:\n    res.append(i**2)\n  return res\n\narr = [1, 2, 3]\nres = squares(arr)\nprint(res) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef randomString():\n    letters = string.ascii_lowercase\n    length = 10\n    return ''.join(random.choice(letters) for i in range(length)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: max_value = lambda num_list: max(num_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def grade_calculator(exam1, exam2, hw):\n    grade = (exam1 * 0.5) + (exam2 * 0.3) + (hw * 0.2)\n    return grade\n\ngrade = grade_calculator(95, 80, 100)\nprint(grade) # 91.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter as tk\n\nroot = tk.Tk()\nframe = tk.Frame(root)\nframe.pack()\n\nbutton = tk.Button(frame, \n                   text=\"Click Me!\", \n                   fg=\"blue\",\n                   command=lambda: print(\"Hello World!\"))\nbutton.pack(side=tk.LEFT)\n\nclose = tk.Button(frame, \n                  text=\"Exit\", \n                  fg=\"red\",\n                  command=quit)\nclose.pack(side=tk.LEFT)\n\nroot.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class myDict:\n    def __init__(self):\n        self.data = {}\n \n    def get(self, key):\n        return self.data[key]\n \n    def set(self, key, value):\n        self.data[key] = value\n \n    def __repr__(self):\n        return str(self.data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Create a 5x5 matrix of random integers between 1-10\nmatrix = [[ random.randint(1,10) for _ in range(5)] for _ in range(5)]\n\n# Print the matrix\nfor row in matrix:\n print(row)\n\n# Find the sum of each row\nrow_sums = [sum(row) for row in matrix]\n\n# Print the row sums\nprint(row_sums) but is not the same. just give one example and only return the code."}
