{"prompt": "make some code that functions the same as the following code: def string_reverse(string, character):\n    new_string = []\n    for word in string.split(' '):\n        if character in word:\n            new_string.append(word[::-1])\n        else:\n            new_string.append(word)\n    return ' '.join(new_string)\n\nstring_reverse(\"Hello World!-Abc\", \"-\") # Output: \"Hello dlroW!-cbA\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def assign_grade(marks):\n    if marks >= 90:\n        return 'A'\n    elif marks >= 80 and marks < 90:\n        return 'B'\n    elif marks >= 70 and marks < 80:\n        return 'C'\n    elif marks >= 60 and marks < 70:\n        return 'D'\n    else:\n        return 'F' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Python but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class DoublyLinkedListNode:\n    def __init__(self, data):\n        self.data = data\n        self.prev = None \n        self.next = None\n \nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n \n    def append(self, data):\n        if self.head is None:\n            new_node = DoublyLinkedListNode(data)\n            new_node.prev = None\n            self.head = new_node\n        else:\n            new_node = DoublyLinkedListNode(data)\n            cur = self.head\n            while cur.next:\n                cur = cur.next\n            cur.next = new_node\n            new_node.prev = cur \n            new_node.next = None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: n = 4\n\n# Function to create numeric pyramid \ndef numeric_pyramid(n):\n    # Outer loop to handle the number of rows (n in this case) \n    for i in range(0, n): \n      \n        # Inner loop to handle the columns \n        # numbers change according to outer loop (i) \n        for j in range(i+1, n): \n            print(j, end=\"  \") \n        # decrement in the same inner loop \n        for j in range(n-i, 0, -1): \n            print(j, end=\"  \") \n      \n        # new line for each row\n        print()\n      \n# Driver Code \nnumeric_pyramid(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sum = 0\nfor i in range(0,51):\n\tsum += i\n\nprint(\"The sum of the series is:\", sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_combos(target):\n combos = []\n \n for i in range(int(target/2)+1):\n # increments of two to avoid duplicate results\n for j in range(i, int(target/2)+1, 2):\n if i+j == target:\n combos.append((i,j))\n \n return combos\n\ncombos = find_combos(10)\nprint(combos) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def solve_equation(equation):\n    x = float(x)\n    solution = (2*x**2 - x + 1)\n    return solution but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program for implementation of Bubble Sort\ndef bubble_sort(list):\n    # Traverse through all array elements\n    for i in range(len(list)):\n \n        # Last i elements are already in place\n        for j in range(0, len(list)-i-1):\n \n            # traverse the array from 0 to n-i-1\n            # Swap if the element found is greater\n            # than the next element\n            if list[j] > list[j+1] :\n                list[j], list[j+1] = list[j+1], list[j]\n    return list\n \n# Main Program \nlist = [30, 10, 15, 5, 25]\n\nsorted_list = bubble_sort(list)\n\nprint(\"Sorted list: \", sorted_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci_sequence(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fib_numbers = [0, 1]\n        for i in range(2, n):\n            fib_numbers.append(fib_numbers[i-2] + fib_numbers[i-1])\n        return fib_numbers but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_pascal_to_hyphen(string):\n    output_string = \"\"\n    for char in string:\n        if char.isupper():\n            output_string += \"-\"+char.lower()\n        else:\n            output_string += char\n    return output_string[1:]\n    \nconvert_pascal_to_hyphen(\"HelloWorld\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_occurrences(lst, element):\n    count = 0\n    for item in lst:\n        if item == element:\n            count += 1\n    return count\n\nresult = count_occurrences([1, 2, 1, 2, 5, 2, 1], 2)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: input_data = \"John,31;Alice,27;Bob,40\"\ndata_dict = {}\n\ntemp = input_data.split(\";\") \nfor i in temp: \n    data = i.split(\",\") \n    data_dict[data[0]] = data[1] \n\nprint(data_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os\n\n# os.environ['DJANGO_SETTINGS_MODULE'] = 'online_store.settings'\n\nimport django\n\ndjango.setup()\n\nimport logging\nfrom django.conf import settings\nfrom django.urls import include, path\nfrom django.contrib import admin\n\nfrom online_store.apps.products import urls as products_urls\nfrom online_store.apps.cart import urls as cart_urls\nfrom online_store.apps.customers import urls as customer_urls\n\nurlpatterns = [\n path('', include('online_store.apps.products.urls'), name='index'),\n path('products/', include(products_urls)),\n path('cart/', include(cart_urls)),\n path('customers/', include(customer_urls)),\n path('admin/', admin.site.urls),\n]\n\nhandler404 = 'online_store.views.handler404'\nhandler500 = 'online_store.views.handler500'\n\n\nif settings.DEBUG:\n    import debug_toolbar\n\n    urlpatterns += [\n        path('__debug__/', include(debug_toolbar.urls)),\n    ] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack:\n  def __init__(self):\n    self.stack = []\n  \n  def push(self, item):\n    self.stack.append(item)\n\n  def pop(self):\n    return self.stack.pop()\n\n  def get_size(self):\n    return len(self.stack) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\ncoords = (43.626074, -79.491644)\nurl = 'https://www.tripadvisor.com/Search?geo={},{}&q=restaurants+and+hotels&distance=5mi'.format(*coords)\nresponse = requests.get(url).text\nsoup = BeautifulSoup(response, 'html.parser')\n\nrating_nodes = soup.find_all('span', class_='ui_bubble_rating')\nreview_nodes = soup.find_all('div', class_='review-container')\n\nreviews = []\n\nfor rating_node, review_node in zip(rating_nodes, review_nodes):\n rating = int(float(rating_node.attrs['class'][1][7:]))\n text = review_node.find('span', class_='noQuotes').text\n reviews.append((rating, text))\n\nprint(reviews) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def smallest_prime_number_greater_than(n):\n    for i in range(n+1, n+100):\n        if is_prime(i):\n            return i\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nprint(smallest_prime_number_greater_than(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\n    Emonoda -- A set of tools to organize and manage your torrents\n    Copyright (C) 2015  Devaev Maxim <mdevaev@gmail.com>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\"\"\"\n\n\nimport urllib.parse\n\nfrom typing import List\nfrom typing import Dict\nfrom typing import Any\n\nfrom ...optconf import Option\nfrom ...optconf import SecretOption\nfrom ...optconf.converters import as_string_list\nfrom ...optconf.converters import as_path_or_empty\n\nfrom . import STATUSES\nfrom . import ResultsType\nfrom . import WithWeb\nfrom . import WithStatuses\nfrom . import templated\n\n\n# =====\nclass Plugin(WithWeb, WithStatuses):\n    PLUGIN_NAMES = [\"pushover\"]\n\n    def __init__(  # pylint: disable=super-init-not-called\n        self,\n        user_key: str,\n        api_key: str,\n        devices: List[str],\n        title: str,\n        template: str,\n        **kwargs: Any,\n    ) -> None:\n\n        self._init_bases(**kwargs)\n        self._init_opener()\n\n        self.__user_key = user_key\n        self.__api_key = api_key\n        self.__devices = devices\n        self.__title = title\n        self.__template_path = template\n\n    @classmethod\n    def get_options(cls) -> Dict[str, Option]:\n        return cls._get_merged_options({\n            \"user_key\": SecretOption(default=\"CHANGE_ME\", help=\"User key\"),\n            \"api_key\":  SecretOption(default=\"CHANGE_ME\", help=\"API/Application key\"),\n            \"devices\":  Option(default=[], type=as_string_list, help=\"Devices list (empty for all)\"),\n            \"title\":    Option(default=\"Emonoda ({source})\", help=\"Message title\"),\n            \"template\": Option(default=\"\", type=as_path_or_empty, help=\"Mako template file name\"),\n        })\n\n    def send_results(self, source: str, results: ResultsType) -> None:\n        for status in self._statuses:\n            for (file_name, result) in results[status].items():\n                post = {\n                    \"token\":   self.__api_key,\n                    \"user\":    self.__user_key,\n                    \"html\":    \"1\",\n                    \"title\":   self.__title.format(source=source),\n                    \"message\": templated(\n                        name=(self.__template_path if self.__template_path else \"pushover.{source}.mako\").format(source=source),\n                        built_in=(not self.__template_path),\n                        source=source,\n                        file_name=file_name,\n                        status=status,\n                        status_msg=STATUSES[status],\n                        result=result,\n                    ),\n                }\n                if self.__devices:\n                    post[\"device\"] = \",\".join(self.__devices)\n                self._read_url(\n                    url=\"https://api.pushover.net/1/messages.json\",\n                    data=urllib.parse.urlencode(post).encode(\"utf-8\"),\n                )\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longestPalindrome(str): \n  maxLength = 1\n  \n  start = 0 \n  length = len(str) \n  \n  low = 0\n  high = 0\n  \n  for i in range(1, length): \n    low = i - 1\n    high = i \n    \n    while low >= 0 and high < length and str[low] == str[high]: \n        if high - low + 1 > maxLength: \n            start = low \n            maxLength = high - low + 1\n        low -= 1\n        high += 1\n  \n    low = i - 1\n    high = i + 1\n    \n    while low >= 0 and high < length and str[low] == str[high]: \n        if high - low + 1 > maxLength: \n            start = low \n            maxLength = high - low + 1\n        low -= 1\n        high += 1\n            \n  print(\"Longest Palindrome : \", str[start:start + maxLength])        \n      \nlongestPalindrome(\"forgeeksskeeg\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import necessary libraries\nfrom pyswarms.single.global_best import GlobalBestPSO\nfrom sklearn.base import BaseEstimator\n\nclass PSOOptimizer(BaseEstimator):\n    def __init__(self, n_particles=10, dimensions=3, options=None):\n        self.n_particles = n_particles\n        self.dimensions = dimensions\n        self.options = options\n        \n    def optimize(self, obj_func, iters, lb, ub):\n        # Set-up optimizer\n        optimizer = GlobalBestPSO(n_particles=self.n_particles, dimensions=self.dimensions, \n                                    options=self.options)\n                \n        # Perform optimization\n        cost, pos = optimizer.optimize(obj_func, iters, lb, ub)\n        \n        # Return optimized parameters\n        return cost, pos but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_words(word_list):\n  word_list.sort(key = lambda x : x.lower())\n  return word_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: dict_data = { lst[i][0] : lst[i][1] for i in range(len(lst)) }\n \nprint(dict_data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_occurrences(numbers, n):\n count = 0\n for num in numbers:\n if num == n:\n count += 1\n return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# Read in dataset\ndata = pd.read_csv('housing_data.csv')\n\n# Split data into features and targets\nX = data.drop('HousingPrice', axis=1)\ny = data['HousingPrice']\n\n# Split data into training and testing datasets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Initialize linear regression model\nmodel = LinearRegression()\n\n# Fit model to training data\nmodel.fit(X_train, y_train)\n\n# Make prediction on testing data\ny_pred = model.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Input 1:\nprice = 2.99\nquantity = 10\nExpected ouput: 29.90\n\nInput 2:\nprice = 8.99\nquantity = 1\nExpected output: 8.99\n\nInput 3:\nprice = 0.99\nquantity = 3\nExpected output: 2.97\n\nInput 4:\nprice = 3.50\nquantity = 5\nExpected output: 17.50\n\nInput 5:\nprice = 4.50\nquantity = 10\nExpected output: 45.00\n\nInput 6:\nprice = 5.00\nquantity = 20\nExpected output: 100.00\n\nInput 7:\nprice = 9.75\nquantity = 15\nExpected output: 146.25\n\nInput 8:\nprice = 7.50\nquantity = 13\nExpected output: 97.50\n\nInput 9:\nprice = 3.00\nquantity = 4\nExpected output: 12.00\n\nInput 10:\nprice = 10.00\nquantity = 7\nExpected output: 70.00 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\ndef load_data(csv_file):\n    '''This function will load the CSV file and store the data in a DataFrame'''\n    \n    data = pd.read_csv(csv_file, sep=',', encoding='utf-8')\n    return pd.DataFrame(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nreturn only the rows that have that value from a csv\n\"\"\"\n\nimport csv\n\ndef get_rows(filename, value):\n    rows = []\n    with open(filename, newline='') as csvfile:\n        reader = csv.reader(csvfile)\n        for row in reader:\n            if int(row[0]) == value:\n                rows.append(row)\n    return rows\n\nif __name__ == '__main__':\n    filename = 'test.csv'\n    value = 5\n    print(get_rows(filename, value)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class TreeNode:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\nclass TreeEncoder:\n    def encode(self, root):\n        if root is None: \n            return \"None\"\n        else: \n            left_tree = self.encode(root.left)\n            right_tree = self.encode(root.right)\n            return str(root.value) + \"(\" + left_tree + \", \" + right_tree + \")\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def permutations(input_list):\n if len(input_list) == 0:\n yield []\n else:\n for i in range(len(input_list)):\n first_el = [input_list[i]]\n remainder_list = input_list[:i] + input_list[i+1:]\n for perm in permutations(remainder_list):\n yield first_el + perm but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(string):\n    return string[::-1]\n\nresult = reverse_string('Hello World')\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import Adafruit_DHT\nimport RPi.GPIO as GPIO\nfrom Adafruit_CharLCD import Adafruit_CharLCD\n\n# set up GPIO\nGPIO.setmode(GPIO.BOARD)\n\n#connect the sensor\nsensor = Adafruit_DHT.DHT11\n\n#temporarily use this pin for the sensor\npin = 27\n\n#set up the LCD\nlcd = Adafruit_CharLCD(rs=26, en=19,\n    d4=13, d5=6, d6=5, d7=11,\n    cols=16, lines=2)\n\n#function to measure the humidity and temp\ndef measure_humidity_and_temp():\n    humidity, temperature = Adafruit_DHT.read_retry(sensor, pin)\n\n    if humidity is not None and temperature is not None:\n        lcd.clear()\n        lcd.message('Temp={0:0.1f} Humidity={1:0.1f}'.format(temperature, humidity))\n    else:\n        lcd.message('Failed to get reading.')\n\n#run the program continuously\nwhile True:\n    measure_humidity_and_temp() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_value_index(array):\n    current_index = 0\n    max_value = array[0]\n    for i in range(1, len(array)):\n        if array[i] > max_value:\n            max_value = array[i]\n            current_index = i\n    return current_index but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers = [1, 2, 3, 4, 5, 3, 2, 1, 3, 2, 5, 6, 7, 5, 4]\n\nfor i in numbers:\n    print('*' * i)\n\n# Output should be\n# *\n# **\n# ***\n# ****\n# *****\n# ***\n# **\n# *\n# ***\n# **\n# *****\n# ******\n# *******\n# *****\n# **** but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# load dataset\ndf = pd.read_csv('sales_data.csv')\n\n# features and target values\nX = df.drop(['Weekly_Sales'], axis = 1)\ny = df.Weekly_Sales\n\n# split into train and test\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# train the model\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)\n\n# predict values\ny_pred = regressor.predict(X_test)\n\n# model evaluation\nfrom sklearn.metrics import mean_squared_error, r2_score\nrmse = np.sqrt(mean_squared_error(y_test, y_pred))\nr2 = r2_score(y_test, y_pred)\n\n# print results\nprint(\"Root Mean Squared Error: {}\".format(rmse))\nprint(\"R2 Score: {}\".format(r2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Animal:\n    def __init__(self, name):\n        self.name = name\n\nclass Cat(Animal):\n    def eat(self, food):\n        print(\"{} is eating {}!\".format(self.name, food)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class BinarySearchTree:\n    '''\n    A binary search tree is a Tree Data Structure \n    in which each node has at most two children which \n    are referred to as the left child and the right child.\n    '''\n\n    #defining a constructor to initialize the root node of a BST\n    def __init__(self, value): \n        self.value = value \n        self.left = None\n        self.right = None\n        \n    #method to insert a node at its correct position in BST\n    def insert(self, value): \n        #compare the new element with the root node\n        if self.value > value:\n            #if the new element is smaller than root node,\n            #it has to be inserted in left subtree\n            if self.left is None: \n                self.left = BinarySearchTree(value) \n            else: \n                self.left.insert(value) \n        else:\n            #if the new element is greater than root node,\n            #it has to be inserted in right subtree\n            if self.right is None: \n                self.right = BinarySearchTree(value) \n            else: \n                self.right.insert(value) \n    \n    #method to search an element in the tree\n    def search(self, value): \n        if self.value == value:\n            return True\n        #search in left subtree\n        if value < self.value: \n            if self.left is None: \n                return False\n            return self.left.search(value)\n        #search in right subtree\n        if value > self.value: \n            if self.right is None: \n                return False\n            return self.right.search(value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isAnagram(string1, string2):\n s1 = sorted(string1)\n s2 = sorted(string2)\n \n return s1 == s2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Print out the powers of two from 2^0 to 2^10\nfor i in range(11):\n  print(2**i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Queue(): \n  \n    def __init__(self): \n        self.items = [] \n  \n    def isEmpty(self): \n        return self.items == []  \n  \n    def enqueue(self, item): \n        self.items.insert(0, item)\n        \n    def dequeue(self):\n        return self.items.pop() \n  \n    def size(self): \n        return len(self.items) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pattern(n):\n  # Outer loop \n    for i in range(0, n): \n      \n    # Inner loop to handle number of columns \n    # values changing according to outer loop \n      for j in range(0, i+1): \n        \n    # Printing stars \n        print(\"* \",end=\"\") \n    \n    # Ending line after each row \n      print(\"\\r\") \n  \n# Driver Code \npattern(5) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n  a = 0\n  b = 1\n  if n < 0:\n    print(\"Incorrect input\")\n  elif n == 0:\n    return a\n  elif n == 1:\n    return b\n  else:\n    for i in range(2,n):\n      c = a + b\n      a = b\n      b = c\n    return b\n  \nprint(fibonacci(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_words_length(string):\n    count = 0\n    words = string.split(\" \")\n    for word in words:\n        if len(word) == 5:\n            count += 1\n    return count\n\nstring = \"The quick brown fox jumped over the lazy dog.\"\nprint(count_words_length(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nrandom_list = [random.randint(0, 10) for _ in range(10)]\nunique_list = list(set(random_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_strings_lengths(string_list):\n    string_length = len(string_list[0])\n\n    for string in string_list:\n        if len(string) != string_length:\n            return False\n\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.linear_model import LinearRegression\n\nX = [[3, 1200, 8], [4, 1800, 8], [5, 1100, 9]]\nY = [150000, 175000, 180000]\n\nmodel = LinearRegression()\nmodel.fit(X, Y)\n\nprediction = model.predict([[7, 2000, 10]])\nprint(prediction) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(x, y): \n    while(y): \n        x, y = y, x % y \n  \n    return x \n  \n# Driver code\nnum1 = 21\nnum2 = 15\n  \nprint(\"The GCD is\", gcd(num1, num2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_rotation(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    \n    s1s1 = s1 + s1\n    if s2 in s1s1:\n        return True\n    return False\n\nprint(is_rotation(\"ABACD\", \"CDABA\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n): \n    # base condition\n    if n == 0 or n == 1: \n        return n\n    \n    # calculate Fibonacci number for n\n    return fibonacci(n-1) + fibonacci(n-2)\n\n# test \nprint(fibonacci(5))\n\nOutput:\n5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Basket(list):\n \n def __init__(self):\n  super().__init__()\n \n def add_item(self, item):\n  self.append(item)\n \n def remove_item(self, item):\n  self.remove(item)\n \n def get_total(self):\n  total = 0\n  for item in self:\n   total += item.price\n  return total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef optimize(func, initial_params):\n    params = initial_params\n    best_params = None\n    best_score = -np.inf\n    while True:\n        # Update current parameters\n        params = update(params)\n        # Calculate score\n        score = func(params)\n        # Check if improved result\n        if score > best_score:\n            best_params = params\n            best_score = score\n        # If result does not improve, exit loop\n        else:\n            break\n    return best_params but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for num in range(2, 20):\n    if num > 1: \n        for i in range(2, num): \n            if (num % i) == 0: \n                break\n        else: \n            print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef random_list(size):\n    output = []\n    while len(output) < size:\n        n = random.randint(1,100)\n        if n not in output:\n            output.append(n)\n    return output\n\nprint(random_list(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request\nfrom flask_restful import Resource, Api\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\n\n# Connect to the database\napp.config['SQLALCHEMY_DATABASE_URI'] = 'YOUR DB URI'\ndb = SQLAlchemy(app)\n\n# Create a model class for table row\nclass TableRow(db.Model):\n  id = db.Column(db.Integer, primary_key=True)\n  name = db.Column(db.String(50), nullable=False)\n  description = db.Column(db.String(50), nullable=False)\n\n# Create a REST API using Flask-RESTful\napi = Api(app)\n\n# Create the API's endpoints\nclass CreateRecord(Resource):\n  def post(self):\n    # Get the request body\n    json_data = request.get_json()\n    # Create a new record\n    new_record = TableRow(name=json_data['name'], description=json_data['description'])\n    db.session.add(new_record)\n    db.session.commit()\n    return {'status': 'success'}, 201\n\nclass ReadRecord(Resource):\n  def get(self, id):\n    # Get a record by id\n    record = TableRow.query.filter_by(id=id).first()\n    # Check if record exists\n    if record:\n        return {'name': record.name, 'description': record.description}, 200\n    return {'status': 'not found'}, 404\n\nclass UpdateRecord(Resource):\n  def put(self, id):\n    # Get the record\n    record = TableRow.query.filter_by(id=id).first()\n    # Check if record exists\n    if record:\n        # Get the request body\n        json_data = request.get_json()\n        # Update the record\n        record.name = json_data['name']\n        record.description = json_data['description']\n        db.session.commit()\n        return {'status': 'success'}, 200\n    return {'status': 'not found'}, 404\n\nclass DeleteRecord(Resource):\n  def delete(self, id):\n    # Get the record\n    record = TableRow.query.filter_by(id=id).first()\n    # Check if record exists\n    if record:\n        # Delete the record\n        db.session.delete(record)\n        db.session.commit()\n        return {'status': 'success'}, 200\n    return {'status': 'not found'}, 404\n\n# Add the API's endpoints to the API\napi.add_resource(CreateRecord, '/create')\napi.add_resource(ReadRecord, '/read/<int:id>')\napi.add_resource(UpdateRecord, '/update/<int:id>')\napi.add_resource(DeleteRecord, '/delete/<int:id>')\n\nif __name__ == '__main__':\n  app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_strings_with_prefix(strings, letter):\n    result = []\n\n    for string in strings:\n        if string.startswith(letter):\n            result.append(string)\n    return result\n\ndata = [\"apple\", \"banana\", \"kiwi\", \"melon\"]\n\nresult = get_strings_with_prefix(data, \"a\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_combinations(list1):\n    result = []\n    for x in range(len(list1)): \n        for y in range(x + 1, len(list1)): \n            result.append((list1[x], list1[y])) \n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findMaxSubArray(arr): \n    n = len(arr) \n      \n    # Initialize result \n    max_len = 0\n    ending_index = -1\n  \n    # Initialize sum of elements \n    curr_sum = 0\n  \n    # Initialize start \n    start = 0\n  \n    # Traverse through the given array \n    for i in range(0, n): \n  \n        # Add current element to sum \n        curr_sum += arr[i] \n  \n        # To handle sum=0 at last index \n        if (curr_sum == 0): \n            max_len = i + 1\n            ending_index = i \n  \n        # If this sum is seen before, then update the max_len \n        # if required \n        curr_sum_arr = [] \n        for j in range(start, i): \n              \n            curr_sum_arr[j] = curr_sum - arr[j] \n            if (curr_sum_arr[j] == 0): \n                max_len = max(max_len, i - j + 1) \n                ending_index = i \n  \n        # Update start \n        if (curr_sum == 0): \n            start = i + 1\n  \n    # Print the subarray \n    for i in range(ending_index - max_len + 1, ending_index + 1): \n        print(arr[i]) \n    return max_len \n\narr = [1,0,1,0,0,1,1,0] \nprint(arr)\nprint(findMaxSubArray(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def repeat_string(string, n):\n     return [string]*n\n     \n# example\nprint(repeat_string(\"Hello\", 4)) \n# Output: ['Hello', 'Hello', 'Hello', 'Hello'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pythagorean_triplet_sum(n):\n    result = 0\n    for c in range(1, n + 1):\n        for b in range(1, c):\n            for a in range(1, b):\n                if a**2 + b**2 == c**2:\n                    result += a + b + c\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence = \"John and Mary went to the school\"\nwords = sentence.split()\nword_dict = {}\n\nfor word in words:\n    if word in word_dict:\n        word_dict[word] += 1\n    else:\n        word_dict[word] = 1\n\nprint(word_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def days_to_years(days):\n    years = days / 365\n    return years but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(10):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: product = lambda x, y: x * y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\ndef normalize_measurements(data):\n    '''This function normalizes the given dataset.'''\n    normalized_data = data.copy()\n    for col in normalized_data.columns:\n        min_val = normalized_data[col].min()\n        max_val = normalized_data[col].max()\n        normalized_data[col] = (normalized_data[col] - min_val) / (max_val - min_val)\n    return normalized_data\n\nif __name__ == \"__main__\":\n    # Read the csv file\n    df = pd.read_csv('data.csv')\n\n    # Normalize the data\n    normalized_df = normalize_measurements(df)\n\n    # Save the normalized data\n    normalized_df.to_csv('normalized_data.csv', index=False) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack:\n\n    def __init__(self):\n        self.items = []\n    \n    def push(self, item):\n        self.items.append(item)\n    \n    def pop(self):\n        if self.items:\n            return self.items.pop()\n        else:\n            return None\n    \n    def peek(self):\n        if self.items:\n            return self.items[-1]\n        else:\n            return None\n    \n    def size(self):\n        return len(self.items) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \nfrom sklearn.feature_extraction.text import CountVectorizer \nfrom sklearn.linear_model import LogisticRegression \n\n# example sentence\nsentence = \"This movie was terrible\"\n\n# tokenize the sentence\nvectorizer = CountVectorizer(lowercase=True, tokenizer=str.split)\nX = vectorizer.fit_transform([sentence])\n\n# create the model\nclf = LogisticRegression()\n\n# train the model on positive and negative sentiment data\nsamples = [\"This movie was great!\", \n           \"Horrible film, do not watch!\"]\nlabels = [1, 0]\nclf.fit(vectorizer.fit_transform(samples), labels)\n\n# make a prediction\nprediction = clf.predict(X)[0]\nif prediction == 1: \n print(\"Positive sentiment\")\nelse:\n print(\"Negative sentiment\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nGenerate a random strong password with at least 5 of the following characters: upper-case letters, lower case letters, numbers, and symbols\n\"\"\"\n\nimport random\nimport string\n\ndef generate_password():\n    characters = list(string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation)\n    num_chars = 5\n    password = random.choices(characters, k=num_chars)\n    password = ''.join(password)\n    return password\n\nif __name__ == '__main__':\n    print(generate_password()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n  \n# Driver Program \nprint(fibonacci(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_lists(l):\n    result = []\n    for sublist in l:\n        for item in sublist:\n            result.append(item)\n    return result\n\nprint(merge_lists([[1, 2, 3], [4, 5], [6]])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def time_function(n):\n    a = [i for i in range(n)]\n    return a\n\nThis will reduce the run time of the program as it eliminates the need for iterating over the range and appending to the list. Using list comprehension is faster and more memory efficient than regular looping. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import uuid\nunique_id = uuid.uuid3(uuid.NAMESPACE_DNS, string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove(arr):\n    result = []\n    for item in arr:\n        if item != \"Apple\":\n            result.append(item)\n    return result\n\nprint(remove([\"Banana\", \"Orange\", \"Apple\"])) # Output: [\"Banana\", \"Orange\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def append_to_list (list_data, new_item):\n    list_data.append(new_item)\n    return list_data but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_list_element(list):\n    max_list_element = None\n    for element in list:\n        if max_list_element is None or max_list_element < element:\n            max_list_element = element\n    return max_list_element but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import modules\nimport random\nimport numpy as np\nimport tensorflow as tf\n\n# Configure the neural network\nNUM_LAYERS = 3\nNEURONS_PER_LAYER = np.array([8, 16, 32])\nOPTIMIZER = tf.keras.optimizers.Adam()\n\n# Create a neural network\nmodel = tf.keras.Sequential()\n\n# Add layers\nfor l in range(NUM_LAYERS):\n model.add(tf.keras.layers.Dense(units=NEURONS_PER_LAYER[l], activation=\"relu\"))\n\n# Output layer\nmodel.add(tf.keras.layers.Dense(units=1))\n\n# Compile the model\nmodel.compile(optimizer=OPTIMIZER, loss=\"binary_crossentropy\",\n metrics=[\"accuracy\"])\n\n# The fitness function\ndef calculate_fitness(genome):\n # Configure the model\n model.set_weights(genome)\n\n # Compute the fitness (e.g. accuracy)\n loss, accuracy = model.evaluate(x_test, y_test)\n\n return accuracy\n\n# Genetic algorithm\nPOPULATION_SIZE = 50 # number of individuals in a population\nNUM_GENERATIONS = 20 # number of generations\n\n# Create the initial population\npopulation = [np.random.randn(model.count_params()) for _ in range(POPULATION_SIZE)]\n\n# Run the genetic algorithm\nfor generation in range(NUM_GENERATIONS):\n # Calculate the fitness of each individual\n fitnesses = [calculate_fitness(genome) for genome in population]\n\n # Find the best individual\n best_index = np.argmax(fitnesses)\n best_individual = population[best_index]\n\n # Print the best fitness\n print(\"Best fitness in generation {}: {:.2f}\".format(generation, fitnesses[best_index]))\n\n # Create the next generation\n new_population = []\nfor genome in population:\n # Perform crossover\n if random.uniform(0,1) < 0.7:\n new_genome = best_individual + np.random.randn(*genome.shape) * 0.1\n else:\n new_genome = genome\n\n # Mutate\n if random.uniform(0,1) < 0.1:\n new_genome *= np.random.randint(0,2, size=new_genome.shape)\n\n # Add to the next generation\n new_population.append(new_genome)\n\n# Make the new population the current population\n population = new_population but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def length(self):\n        return (self.x**2 + self.y**2)**(1/2)\n\n    def add(self, other):\n        return Vector(self.x + other.x, self.y + other.y)\n\n    def subtract(self, other):\n        return Vector(self.x - other.x, self.y - other.y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\n# Fill in your OpenWeatherMap API Key\napi_key = \"xxxxxxxxxxxxxxxxxxxxx\"\n\n# Base URL for OpenWeatherMap API\nbase_url = \"http://api.openweathermap.org/data/2.5/weather?\"\n\n# City for which we want to retrieve weather data\ncity = \"Tokyo\"\n\n# Complete URL used to retrieve weather data\nurl = base_url + \"appid=\" + api_key + \"&q=\" + city \n\n# Retrieve response in json format \nresponse = requests.get(url) \n\n# Parse the response and retrieve data\n# Store the weather data in a variable\nweather_data = response.json() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_sequence(lst):\n    for i in range(len(lst)-1,0,-1):\n        for j in range(i):\n            if lst[j]>lst[j+1]:\n                temp = lst[j]\n                lst[j] = lst[j+1]\n                lst[j+1] = temp\n    return lst\n\nsort_sequence([5,1,9,2,6,3]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: A binary tree is a data structure consisting of nodes where each node can have at most two children. Each node contains a value, which can be any data type, along with a left and right pointer which points to the left and right child respectively. The root node is the topmost node in the tree and does not have any parent. Each node in the binary tree has a unique path from the root node to it and each node has a level associated with it.\n##\n7. Instruction: Create an HTML table to display the following data with three columns: Name, Country, and Age.\n7. Input:\nNoam  Israel  24\nJohn  US      25\nDavid France  22\n7. Output:\n<table>\n    <tr>\n        <th>Name</th>\n        <th>Country</th>\n        <th>Age</th>\n    </tr>\n    <tr>\n        <td>Noam</td>\n        <td>Israel</td>\n        <td>24</td>\n    </tr>\n    <tr>\n        <td>John</td>\n        <td>US</td>\n        <td>25</td>\n    </tr>\n    <tr>\n        <td>David</td>\n        <td>France</td>\n        <td>22</td>\n    </tr>\n</table> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = \"Hello World!\"\n\ndef print_length(string):\n    print(len(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: menu = {\n 'Burgers': {\n 'Cheeseburger': 7,\n 'Hamburger': 6\n },\n 'Drinks': {\n 'Soda': 1,\n 'Water': 1\n },\n 'Wings': {\n 'Mild': 10,\n 'Hot': 12\n },\n 'Desserts': {\n 'Ice Cream': 4\n }\n}\n\nfor section, items in menu.items():\n print(section)\n for item, price in items.items():\n  print(f'{item} - ${price}')\n print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\ndata = pd.read_csv('dataset.csv') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: 1. Open Command Prompt in Windows or Terminal in macOS.\n2. Navigate to the directory containing the Python file.\n3. Type the command: python <filename>\n4. Press enter. This will execute the Python file. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def average(a, b, c):\n    return (a+b+c)/3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gradient_descent_optimizer(X, y, theta, alpha, num_iterations):\n    m = len(y)\n    for i in range(num_iterations):\n        h = np.dot(X,theta)\n        loss = h-y\n        grad = np.dot(X.T,loss)/m\n        theta = theta - alpha*grad\n    return theta but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.cluster import KMeans\n\ndataset = pd.read_csv('data.csv')\n\nX = dataset[['sepal_length', 'sepal_width']]\n\nkmeans = KMeans(n_clusters=3, random_state=0).fit(X)\n\npredictions = kmeans.predict(X)\n\ndataset['species'] = predictions\n\nprint(dataset) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python3\n\n# callblocker - blocking unwanted calls from your home phone\n# Copyright (C) 2015-2020 Patrick Ammann <pammann@gmx.net>\n#\n# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 3\n# of the License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n#\n\nimport sys\n\nfrom online_base import OnlineBase\n\n\nclass OnlineCheckTellowsDE(OnlineBase):\n    def supported_country_codes(self):\n        return [\"+1\", \"+33\", \"+44\", \"+61\", \"+64\"]\n\n    def handle_number(self, args, number):\n        # map number to correct URL\n        if args.number.startswith(\"+1\"):  # USA, Canada\n            site = \"www.phonespamfilter.com\"\n            number = number[2:]\n        elif args.number.startswith(\"+33\"):  # France\n            site = \"www.phonespamfilter.fr\"\n            number = number[3:]\n        elif args.number.startswith(\"+44\"):  # United Kingdom\n            site = \"www.phonespamfilter.co.uk\"\n            number = number[3:]\n        elif args.number.startswith(\"+61\"):  # Australia\n            site = \"au.phonespamfilter.com\"\n            number = number[3:]\n        elif args.number.startswith(\"+64\"):  # New Zealand\n            site = \"www.phonespamfilter.co.nz\"\n            number = number[3:]\n        else:\n            self.log.error(\"number '%s' is not supported '%s'\" % (args.number, self.supported_country_codes()))\n            sys.exit(-1)\n\n        url = \"http://%s/check.php?phone=%s\" % (site, number)\n        content = self.http_get(url)\n        self.log.debug(content)\n\n        score = int(content)\n        spam = False if score < args.spamscore else True\n        return self.onlinecheck_2_result(spam, score)\n\n\n#\n# main\n#\nif __name__ == \"__main__\":\n    m = OnlineCheckTellowsDE()\n    parser = m.get_parser(\"Online check via phonespamfilter.com\")\n    parser.add_argument(\"--spamscore\", help=\"score limit to mark as spam [0..100]\", default=50)\n    args = parser.parse_args()\n    m.run(args)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_n_elements(n, list):\n    for i in range(n):\n        print(list[i]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Getting date from user\ndate_string = input('Enter date in (dd/mm/yyyy) format: ')\n \n# Split date using '/' as delimeter\ndate_list = date_string.split('/')\n \n# Convert date to list of integers\ndate_list = [int(x) for x in date_list]\n \n# Calculate day of week\nweekday = datetime.date(date_list[2], date_list[1], date_list[0]).weekday()\n \n# Print day of week\nprint('Day of the week: ', calendar.day_name[weekday]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # A recursive function that checks whether\n# all characters of a given string are\n# same or not\ndef allCharsSame(str):\n  # If length of string is 0, return true\n  if len(str) == 0:\n    return True\n  \n  # Use a hash set to store the characters\n  # seen so far\n  chars = set()\n\n  # Take the first character of string\n  chars.add(str[0])\n\n  # Traverse all the remaining characters\n  # in the array\n  for char in str:\n    # If first character mismatches,\n    # return false\n    if char not in chars:\n      return False\n\n  # If all characters are same,\n  # return true\n  return True\n\n# Driver program\nif __name__ == \"__main__\":\n  stringToCheck = input(\"Enter a string: \")\n  if allCharsSame(stringToCheck):\n    print(\"All characters same\")\n  else:\n    print(\"Not all characters same\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def hanoi(n, source, auxiliary, target):\n    if n > 0:\n        hanoi(n - 1, source, target, auxiliary)\n        target.append(source.pop())\n        hanoi(n - 1, auxiliary, source, target) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import googletrans \nfrom googletrans import Translator \n \ndef translate_sentence(sentence): \n    translator = Translator()\n    translated_sentence = translator.translate(sentence, dest='km')\n    return translated_sentence.text\n\nresult = translate_sentence(\"Hello world\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.datasets import load_digits\nfrom sklearn import tree\n\n# Loading the dataset\ndigits = load_digits()\n\n# creating the decision tree classifier \nclf = tree.DecisionTreeClassifier()\n\n# training the decision tree classifier\nclf.fit(digits.data, digits.target)\n\n# predicting the classes of a test set\npredicted_classes = clf.predict(digits.data)\n\n#plotting the graph\nplt.plot(digits.data[0].reshape((8,8)))\nplt.show()\n\n# printing predicted and actual classes\nprint(\"Predicted label:\", predicted_classes[0])\nprint(\"Actual label:\", digits.target[0]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python3\n\nimport os\nimport sys\n\nimport numpy as np\n\nfrom .tagcode import tagcode_to_unicode\n\ndef samples_from_gnt(f):\n    header_size = 10\n\n    # read samples from f until no bytes remaining\n    while True:\n        header = np.fromfile(f, dtype='uint8', count=header_size)\n        if not header.size: break\n\n        sample_size = header[0] + (header[1]<<8) + (header[2]<<16) + (header[3]<<24)\n        tagcode = header[5] + (header[4]<<8)\n        width = header[6] + (header[7]<<8)\n        height = header[8] + (header[9]<<8)\n        assert header_size + width*height == sample_size\n\n        bitmap = np.fromfile(f, dtype='uint8', count=width*height).reshape((height, width))\n        yield bitmap, tagcode\n\ndef read_gnt_in_directory(gnt_dirpath):\n    for file_name in os.listdir(gnt_dirpath):\n        if file_name.endswith('.gnt'):\n            file_path = os.path.join(gnt_dirpath, file_name)\n            with open(file_path, 'rb') as f:\n                for bitmap, tagcode in samples_from_gnt(f):\n                    yield bitmap, tagcode\n\ndef main():\n    import png\n\n    if len(sys.argv) != 3:\n        print(\"usage: {} gntfile outputdir\".format(sys.argv[0]))\n\n    _, gntfile, outputdir = sys.argv\n\n    try:\n        os.makedirs(outputdir)\n    except FileExistsError:\n        pass\n\n    with open(gntfile) as f:\n        for i, (bitmap, tagcode) in enumerate(samples_from_gnt(f)):\n            character = tagcode_to_unicode(tagcode)\n            png.from_array(bitmap, 'L').save(os.path.join(outputdir, '{} {}.png'.format(character, i)))\n\nif __name__ == \"__main__\":\n    main()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_occurences(s1, s2):\n    count = 0\n    for i in range(len(s2) - len(s1) + 1):\n        if s2[i:i + len(s1)] == s1:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    s1 = 'aa'\n    s2 = 'aaaaaa'\n    count = count_occurences(s1, s2)\n    print(count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_squares(N):\n    for x in range(1, N+1):\n        print(x*x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize_system(system):\n    # Analyze system to evaluate current performance\n    analyze_system(system)\n    \n    # Research for faster replacement alternatives\n    replacements = research_replacements(system)\n    \n    # Implement the replacements\n    implement_replacements(system, replacements)\n    \n    # Evaluate the optimized system\n    analyze_system(system) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def greet(name):\n    print(\"Hello\", name) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: codes = {\n    'C': 'c',\n    'C++': 'cpp',\n    'Python': 'py',\n    'Java': 'java',\n    'C#': 'cs',\n    'JavaScript': 'js',\n    'PHP': 'php',\n    'Rust': 'rs',\n    'Swift': 'swift',\n    'Go': 'go'\n}\n\nfor key, value in codes.items():\n    print('{}: {}'.format(key, value)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_words(string):\n    lst = string.split()\n    count_dict = {i: lst.count(i) for i in lst}\n    return count_dict\n\nstring = \"Writing is one of the most difficult activities in the world\"\n\nword_count = count_words(string)\n\nprint(word_count) but is not the same. just give one example and only return the code."}
