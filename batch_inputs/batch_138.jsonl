{"prompt": "make some code that functions the same as the following code: print('  ( _ _ )')\nprint('  | o o |')\nprint('  |  ^  |')\nprint('  | \\_/ |') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_valid_phone_number(phone):\n \n  if len(phone) != 12:\n    return False\n \n  if phone[3] != '-' or phone[7] != '-':\n    return False\n \n  for i in range(0, 12):\n    if i != 3 and i != 7:\n      if not phone[i].isdecimal():\n        return False\n \n  return True\n\nresult = is_valid_phone_number(\"123-456-7890\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: name = input(\"What is your name? \")\n\n# greeting the user\nprint(f\"Hello {name}, nice to meet you!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import smtplib\nfrom email.message import EmailMessage\n\ndef send_email(to_address, subject, body):\n  # Set SMTP server\n  server = smtplib.SMTP('smtp.example.com')\n  # Create the message\n  message = EmailMessage()\n  message['Subject'] = subject\n  message['From'] = from_address\n  message['To'] = to_address\n  message.set_content(body)\n  # Send the message\n  server.send_message(message)\n  server.quit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Dictionary (object):\n    def __init__(self):\n        self.data = {} #initialize empty dictionary\n\n    def add(self, word, definition):\n        self.data[word] = definition #add a new word, definition pair\n\n    def remove(self, word):\n        if word in self.data:\n            del self.data[word] #removes a word, definition pair\n\n    def print_all(self):\n        for word in self.data.keys():\n            print(word + ':', self.data[word]) #prints all words, definitions stored but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def selection_sort(arr):\n    # Iterate through array indices\n    for i in range(len(arr) - 1):\n        smallest_index = i\n        # Iterate through unsorted elements\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[smallest_index]:\n                smallest_index = j\n        # Swaps elements\n        arr[i], arr[smallest_index] = arr[smallest_index], arr[i] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\ndocument = 'The quick brown fox jumped over the lazy dog.'\n\n# Split the string into words\nwords = document.split(' ')\n\n# Count word frequency\nword_freq = Counter(words)\n\n# Print the top 10 words and their frequencies\nfor word, count in word_freq.most_common(10):\n print('{}: {}'.format(word, count))\n\nOutput:\nthe: 2\nquick: 1\nbrown: 1\nfox: 1\njumped: 1\nover: 1\nlazy: 1\ndog.: 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPalindrome(string): \n    left, right = 0, len(string)-1\n    while right >= left: \n        if not string[left] == string[right]: \n            return False\n        left += 1\n        right -= 1\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findIntersection(list_a, list_b):\n  intersection_list = []\n\n  for element in list_a:\n    if element in list_b:\n      intersection_list.append(element)\n  \n  return intersection_list\n  \n# Main\nlist_a = [3, 5, 6, 9]\nlist_b = [4, 5, 8, 9]\nintersection_list = findIntersection(list_a, list_b)\n\nprint('Intersection of list_a and list_b:', intersection_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def repeat_string(s, n):\n    return s*n\n\nprint(repeat_string('Hello', 3))\n# Output: 'HelloHelloHello' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculator():\n    while True:\n        print(\"Options:\")\n        print(\"Enter 'add' to add two numbers\")\n        print(\"Enter 'subtract' to subtract two numbers\")\n        print(\"Enter 'quit' to end the program\")\n        user_input = input(\": \")\n\n        if user_input == \"quit\":\n            break\n        elif user_input == \"add\":\n            num1 = float(input(\"Enter a number: \"))\n            num2 = float(input(\"Enter another number: \"))\n            result = str(num1 + num2)\n            print(\"The answer is \" + result)\n        elif user_input == \"subtract\":\n            num1 = float(input(\"Enter a number: \"))\n            num2 = float(input(\"Enter another number: \"))\n            result = str(num1 - num2)\n            print(\"The answer is \" + result)\n        else:\n            print(\"Unknown input\")\n            \ncalculator() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def perfect_numbers(n):\n    perfect_nums = []\n    for num in range(1, n+1):\n        sum = 0\n        for i in range(1, num):\n            if num % i == 0:\n                sum += i\n        if sum == num:\n            perfect_nums.append(num)\n    return perfect_nums\n\nn = 30\nprint(perfect_numbers(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Patient:\n def __init__(self, name, age, weight, height, medical_conditions):\n  self.name = name\n  self.age = age\n  self.weight = weight\n  self.height = height\n  self.medical_conditions = medical_conditions\n\ndef get_bmi(self):\n return self.weight / (self.height * self.height)\n\npatient = Patient(\"John Doe\", 30, 180, 1.80, [\"diabetes\", \"hypertension\"])\nprint(patient.get_bmi()) # 22.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def square_root(n):\n    \"\"\"This function takes an integer n and prints its square root.\n    \n    Args:\n        n (int): The integer to calculate the square root of.\n    \n    Returns:\n        None\n    \"\"\"\n    import math\n    print(math.sqrt(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: str = \"The apple is red and the banana is yellow.\"\nwordfreq = {}\n \nfor rawword in str.lower().split():\n    word = rawword.replace(\".\",\"\")\n    if word not in wordfreq:\n        wordfreq[word] = 0\n    wordfreq[word] += 1\n    \nprint(\"Frequency of the words:\")\nfor key, value in wordfreq.items():\n  print(key, value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def capitalize_first_character(mystring):\n    return mystring[0].upper() + mystring[1:] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from bs4 import BeautifulSoup\n\nhtml_code = '''\n<div class='data-container'>\n  <span>John Smith</span>\n  <span>45 years old</span>\n  <span>Communications Engineer</span>\n</div>\n'''\n\nsoup = BeautifulSoup(html_code, 'html.parser')\nname = soup.find('span', text='John Smith').text\nage = soup.find('span', text='45 years old').text\njob_title = soup.find('span', text='Communications Engineer').text\n\nprint(f'Name: {name}, Age: {age}, Job Title: {job_title}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\n\ndef TextClassifier(x_train, y_train, x_test, y_test):\n    from sklearn.naive_bayes import MultinomialNB\n    model = MultinomialNB()\n    model.fit(x_train, y_train)\n    y_pred = model.predict(x_test)\n    accuracy = np.mean(y_test == y_pred)\n    return accuracy but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def caesar_cipher(plaintext, caesar_key):\n    ciphertext = \"\"\n\n    for char in plaintext:\n        if char.isalpha():\n            ascii_char = ord(char) - caesar_key\n            if ascii_char < 97:\n                ascii_char += 26\n            ciphertext += chr(ascii_char)\n        else:\n            ciphertext += char\n\n    return ciphertext\n\nplaintext = \"This is a secret message.\"\ncaesar_key = 0\n\nencoded_message = caesar_cipher(plaintext, caesar_key)\nprint(encoded_message) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(arr): \n    max_val = arr[0] \n  \n    for i in range(1, len(arr)): \n        if arr[i] > max_val: \n            max_val = arr[i] \n  \n    return max_val \n  \n# Driver code \narr = [10, 8, 12, 4, 6]\nresult = find_max(arr) \nprint(result) \n\n# Output: 12 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def monthly_mortgage_payment(loan_amount, annual_interest_rate, loan_duration_in_years):\n monthly_interest_rate = annual_interest_rate / 12\n number_of_payments = loan_duration_in_years * 12\n monthly_payment = loan_amount * (monthly_interest_rate / (1 - (1 + monthly_interest_rate)**(-number_of_payments)))\nreturn monthly_payment\n\nprint(monthly_mortgage_payment(loan_amount, annual_interest_rate, loan_duration_in_years))  # Output -> 585.89 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_arr(arr):\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list=[5,2,7,3,1]\nlist.sort()\nprint(list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: n = int(input(\"Enter an integer: \"))\nfor i in range(n):\n    for j in range(i + 1):\n        print(\"*\", end=\"\")\n    print(\"\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def evaluate_polynomial(eqn):\n  x = int(input(\"Enter the value of x: \"))\n  result = 0\n  for i in range(len(eqn)):\n    elem = eqn[i]\n    if elem[-1] == 'x':\n      coefficient = int(elem[:-1])\n      if i == 0:\n        result += coefficient * (x ** 2)\n      elif i == 1:\n        result += coefficient * x\n      else:\n        result += coefficient\n    else:\n      result += int(elem)\n\n  return result\n\nprint(evaluate_polynomial(\"2x2 + 3x + 4\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        for i in range(2,n+1):\n            c = a + b\n            a = b\n            b = c\n        return b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_password():\n # Generate a password of length 8\n # with random uppercase, lowercase, digits and symbols\n length = 8\n\n # Create a set of characters to choose from\n characters = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation \n password = \"\".join(random.choice(characters) for x in range(length))\n\n return password\n\nprint(generate_password()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num-1)\n \nnum = int(input(\"Enter a number:\"))\nprint(factorial(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_sorted_lists(list1, list2):\n    merged_list = []\n\n    while list1 and list2:\n        if list1[0] < list2[0]:\n            merged_list.append(list1.pop(0))\n        else:\n            merged_list.append(list2.pop(0))\n\n    merged_list += list1 + list2\n\n    return merged_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(data, key):\n    for i in range(len(data)):\n        if data[i] == key:\n            return i\n    return -1\n\ndata = [5, 4, 2, 8, 7]\nkey = 7\n\nresult = linear_search(data, key)\n\nif result != -1:\n    print(\"Element found at \" + str(result))\nelse:\n    print(\"Element not found\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Python but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals, absolute_import\nfrom os.path import abspath, dirname, join, normpath\n\nfrom setuptools import find_packages, setup\nimport sys\n\n\nINSTALL_PYTHON_REQUIRES = []\n# We are intending to keep up to date with the supported Django versions.\n# For the official support, please visit:\n# https://docs.djangoproject.com/en/3.0/faq/install/#what-python-version-can-i-use-with-django and you may change the version in the URL to suit your needs, and we will try to update that here too as we upgrade with django.\nif sys.version_info[1] == 5:\n    # py3.5 can run 1.11 < 2.2\n    django_python_version_install = 'Django>=2.2,<3.0',\n    INSTALL_PYTHON_REQUIRES.append(django_python_version_install)\nelif sys.version_info[1] == 6:\n    # py3.6 can run 1.11 < 3.1 (likely will be <4.0)\n    django_python_version_install = 'Django>=2.2,<3.2',\n    INSTALL_PYTHON_REQUIRES.append(django_python_version_install)\nelif sys.version_info[1] == 7:\n    # py3.7 is 1.11.17 < 3.1 (likely will be <4.0)\n    django_python_version_install = 'Django>=2.2,<3.2'\n    INSTALL_PYTHON_REQUIRES.append(django_python_version_install)\nelif sys.version_info[1] == 8:\n    # py3.8 is 2.2.8 < 3.1 (likely will be <4.0)\n    django_python_version_install = 'Django>=2.2.8,<3.2'\n    INSTALL_PYTHON_REQUIRES.append(django_python_version_install)\n\nsetup(\n\n    # Basic package information:\n    name='django-twilio',\n    version='0.13.1.post0',\n    packages=find_packages(),\n\n    # Packaging options:\n    zip_safe=False,\n    include_package_data=True,\n\n    # Package dependencies:\n    install_requires=[\n        'setuptools>=36.2',\n        'twilio>=6.3.0,<7',\n        'django-phonenumber-field>=0.6',\n        'phonenumbers>=8.10.22',\n    ] + INSTALL_PYTHON_REQUIRES,\n\n    # Metadata for PyPI:\n    author='Randall Degges',\n    author_email='rdegges@gmail.com',\n    maintainer=\"Jason Held\",\n    maintainer_email=\"jasonsheld@gmail.com\",\n    license='UNLICENSE',\n    url='https://github.com/rdegges/django-twilio',\n    keywords='twilio telephony call phone voip sms django django-twilio',\n    description='Build Twilio functionality into your Django apps.',\n    long_description=open(\n        normpath(join(dirname(abspath(__file__)), 'README.rst'))\n    ).read(),\n    project_urls={\n        \"Documentation\": \"https://django-twilio.readthedocs.io/en/latest/\",\n        \"Code\": \"https://github.com/rdegges/django-twilio\",\n        \"Tracker\": \"https://github.com/rdegges/django-twilio/issues\",\n    },\n    classifiers=[\n        'Framework :: Django',\n        'Framework :: Django :: 2.2',\n        'Framework :: Django :: 3.0',\n        'Intended Audience :: Developers',\n        'License :: Public Domain',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3 :: Only',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Internet :: WWW/HTTP',\n    ]\n\n)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_by_length(words):\n    return sorted(words, key=len) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_area(s1, s2, s3):\n    # calculate the semi-perimeter\n    s = (s1 + s2 + s3) / 2\n    # calculate area using Heron's formula\n    area = (s*(s-s1)*(s-s2)*(s-s3)) ** 0.5\n    return area\n\nif __name__==\"__main__\":\n    s1 = 3\n    s2 = 4\n    s3 = 5\n    area = calculate_area(s1, s2, s3)\n    print(\"Area of triangle is: {:.2f}\".format(area)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence = \"The quick brown fox jumped over the lazy dog\" \nwords = sentence.split(' ') \n  \n# 2nd and 5th words \nprint(words[1] + \" \" + words[4]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_equation(coefficients, variables):\n equation = \"\"\n for i, coeff in enumerate(coefficients):\n  equation += str(coeff) + variables[i] + \" + \"\n equation = equation[:-3]\n return equation but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def cost_function(x, y):\n    return (x**2 + y**2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\nimport secrets\nfrom typing import List\n\ndef split_secret(secret: bytes, nb_shares: int, min_required: int) -> List[int]:\n  # Generate random prime\n  r = secrets.randbelow(sys.maxsize)\n  while not is_prime(r):\n    r = secrets.randbelow(sys.maxsize)\n\n  # Generate random coefficients\n  coefficients = [secret] + [ secrets.randbelow(r) for i in range(min_required-1) ]\n\n  # Compute the shares\n  shares = []\n  for i in range(1, nb_shares + 1):\n    val = coefficients[0]\n    for e, c in enumerate(coefficients[1:]):\n        val += c * pow(i, e+1, r)\n    shares.append(val)\n\n  return shares\n\ndef is_prime(x):\n    return pow(2, x-1, x) == 1\n\n# Split secret\nsecret = b'ABCDEFGH'\nshares = split_secret(secret, 8, 5)\n\nprint(shares) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# read in data\nwine_data = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality.data')\nX = wine_data.drop(columns=['quality'])\ny = wine_data['quality']\n\n# split into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=42)\n\n# initialize model and fit to training data \nknn = KNeighborsClassifier()\nknn.fit(X_train, y_train)\n\n# predict on test set\ny_pred = knn.predict(X_test) \n\n# score the model\nscore = knn.score(X_test, y_test)\nprint(score) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: a = [3,4,6,2,1]\nfor x in a:\n print(x)\na.sort() \nfor x in a:\n print(x) \n\nOutput:\n1\n2\n3\n4\n6 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # List of non-empty strings\nitems = ['apple', 'banana', 'cat', 'dog', 'elephant']\nfor i, item in enumerate(items):\n    print('item ' + str(i) + ' is ' + item) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Calculator:\n    def __init__(self):\n        self.result = 0\n\n    def add(self, num):\n        self.result += num \n        return self.result \n\n    def subtract(self, num):\n        self.result -= num \n        return self.result \n\n    def multiply(self, num):\n        self.result *= num \n        return self.result \n\n    def divide(self, num):\n        self.result /= num \n        return self.result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# calculate the mean salary\nmean_salary = salaries['salary'].mean()\n\n# filter out employees whose salary is below the mean\nfiltered_salaries = salaries[salaries['salary'] >= mean_salary]\n\n# print the filtered data\nprint(filtered_salaries) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def createSubstrings(string): \n    length = len(string) \n    subString = []\n    \n    # Loops through the string  \n    # and the length of substring to be formed \n    for i in range(length): \n        for j in range(i + 1, length + 1): \n            subString.append(string[i:j]) \n  \n    return subString but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef genetic_algorithm(objective_func, pop_size, max_iters, elitism_ratio):\n    population = [random.randint(0, 100) for _ in range(pop_size)]\n    \n    # Iterate through the generations\n    for _ in range(max_iters):\n        # Score the current population\n        population_scores = [objective_func(num) for num in population]\n        \n        # Select the best individuals and breed them\n        elite_length = int(elitism_ratio * pop_size)\n        elite_indices = sorted(range(len(population_scores)), key=lambda k: population_scores[k], reverse=True)[:elite_length]\n        elite_population = [population[i] for i in elite_indices]\n        parent_pool = [population_scores.index(score) for score in population_scores\n            if population_scores.index(score) not in elite_indices]\n        breed_length = pop_size - len(elite_indices)\n        breed_children = [gene_crossover(population[i], population[j]) for i, j in zip(random.sample(parent_pool, breed_length // 2), random.sample(parent_pool, breed_length // 2))] + elite_population\n        \n        # Apply mutation\n        for i in range(len(breed_children)):\n            child = gene_mutation(breed_children[i])\n            breed_children[i] = child\n            \n        population = breed_children\n    \n    return max(population_scores) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isArmstrongNumber(x):  \n    sum = 0  \n    order = len(str(x))  \n    temp = x  \n    while temp > 0:  \n        digit = temp % 10  \n        sum += digit ** order  \n        temp //= 10  \n  \n    # If n is equal to the sum  \n    # of its digits raised to the power \n    # of the number of digits \n    if x == sum:  \n        return True\n    else:  \n        return False\n  \n# Driver Program \nn = 1634\nif isArmstrongNumber(n): \n    print(\"Yes\") \nelse: \n    print(\"No\")\n\n# Output:Yes but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\nfrom xml.dom import minidom\n\n# Get the website content\nurl = \"http://example.com\"\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, \"html.parser\")\n\n# Create the XML document\ndoc = minidom.Document()\nroot = doc.createElement('urlset')\nroot.setAttribute(\"xmlns\", \"http://www.sitemaps.org/schemas/sitemap/0.9\")\n\n# Parse the website pages\nfor link in soup.find_all('a'):\n        page = doc.createElement('url')\n        page.appendChild(doc.createElement('loc')).appendChild(doc.createTextNode(link.get('href')))\n        root.appendChild(page)\n\n# Generate the file\ndoc.appendChild(root)\nfilename = \"sitemap.xml\"\nf = open(filename,\"w\")\ndoc.writexml(f, indent=\"  \", addindent=\"  \", newl='\\n')\nf.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom sklearn.preprocessing import MinMaxScaler\n\n#import the data\ndata = pd.read_csv('stock-data.csv')\n\n#split the data\nX = data[['open', 'high', 'low', 'close']]\ny = data['Adj Close']\n\n#scaling the data\nscaler = MinMaxScaler()\nX_scaled = scaler.fit_transform(X)\n\n#fitting the model\nmodel = SVR(kernel='rbf', gamma='scale')\nmodel.fit(X_scaled, y)\n\n#make prediction\nprediction = model.predict(X_scaled)\n\n#plotting the results\nplt.scatter(prediction, y)\nplt.xlabel('Predicted Stock Prices')\nplt.ylabel('Actual Stock Prices')\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def strJoin(str1, str2, str3):\n    return [str1 + str2, str2 + str3, str1 + str3] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask\nfrom flask_restful import Resource, Api, reqparse\n\napp = Flask(__name__)\napi = Api(app)\n\nparser = reqparse.RequestParser()\nparser.add_argument('title')\nparser.add_argument('description')\nparser.add_argument('priority', type=int)\n\ntodoItems = []\n\nclass TodoItemList(Resource):\n def get(self):\n return todoItems\n\n def post(self):\n args = parser.parse_args()\n todoItem = {'title': args['title'], 'description': args['description'], 'priority': args['priority']}\n todoItems.append(todoItem)\n return todoItem, 201\n\nclass TodoItem(Resource):\n def get(self, todoItemId):\n return todoItems[todoItemId]\n\n def put(self, todoItemId):\n args = parser.parse_args()\n todoItem = {'title': args['title'], 'description': args['description'], 'priority': args['priority']}\n todoItems[todoItemId] = todoItem\n return todoItem\n\n def delete(self, todoItemId):\n del todoItems[todoItemId]\n return '', 204\n\napi.add_resource(TodoItemList, '/todoitems')\napi.add_resource(TodoItem, '/todoitems/<int:todoItemId>')\n\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def capitalizeCharacter(s, pos): \n    # Grab single characters from the string  \n    # starting from the given index \n    result = s[:pos] + s[pos].upper() + s[pos + 1:] \n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: In Python, a dictionary is an ideal data structure for efficient retrieval of data as it provides constant time complexity for lookup operations. This is because a dictionary is a data structure which creates a mapping between a key and its associated value, allowing access to its value by simply providing the key. Moreover, Python dictionary allows the user to add, modify, delete and retrieve data entries in constant time and thus provides an efficient retrieval of data. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport matplotlib.pyplot as plt\n \n# Define some constants \nG = 1\n \n# Define some parameters\nm1 = 1\nm2 = 1\n \n# Initial conditions\nx1_0 = 0 # initial position of the first mass\ny1_0 = 0 \nvx1_0 = 1 # initial velocity of the first mass (along the x-axis)\nvy1_0 = 0\n \nx2_0 = 3    # initial position of the second mass\ny2_0 = 0\nvx2_0 = 0 # initial velocity of the second mass (along the x-axis)\nvy2_0 = 0.5 \n \n# Simulation parameters\nN = 1000 # number of steps\ndt = 1e-3 # time step\n \n# Create arrays to hold the x,y positions of the masses\nx1 = np.zeros(N)\ny1 = np.zeros(N)\nx2 = np.zeros(N)\ny2 = np.zeros(N)\n \n# Initial conditions\nx1[0] = x1_0\ny1[0] = y1_0\nx2[0] = x2_0\ny2[0] = y2_0\n \n# Simulation loop\nfor i in range(N-1):\n    # Calculate the force for the first mass \n    dx = x2[i] - x1[i]\n    dy = y2[i] - y1[i]\n    r = np.sqrt(dx**2 + dy**2)\n    Fx1 = G*m2/r**3 * dx\n    Fy1 = G*m2/r**3 * dy\n    \n    # Calculate the force for the second mass \n    dx = x1[i] - x2[i]\n    dy = y1[i] - y2[i]\n    r = np.sqrt(dx**2 + dy**2)\n    Fx2 = G*m1/r**3 * dx \n    Fy2 = G*m1/r**3 * dy\n    \n    # Update the positions \n    x1[i+1] = x1[i] + vx1_0 * dt + Fx1 * dt**2 / 2 \n    y1[i+1] = y1[i] + vy1_0 * dt + Fy1 * dt**2 / 2 \n    x2[i+1] = x2[i] + vx2_0 * dt + Fx2 * dt**2 / 2 \n    y2[i+1] = y2[i] + vy2_0 * dt + Fy2 * dt**2 / 2 \n \n# Plot the results\nplt.plot(x1, y1, label=\"Mass 1\")\nplt.plot(x2, y2, label=\"Mass 2\")\nplt.xlabel(\"x-position\")\nplt.ylabel(\"y-position\")\nplt.legend(loc=\"lower right\")\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.decomposition import PCA\n\n\n# Input array\nX = np.array([[1,2,3],[4,5,6],[7,8,9]])\n\n# Create and fit the PCA\npca = PCA(n_components=2)\npca.fit(X)\n\n# Transform data into principal components\nX_pca = pca.transform(X)\n\n# Output the first principal component\nprint(X_pca[:,0]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def separate_numbers(list):\n    even_numbers = []\n    odd_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n        else:\n            odd_numbers.append(num)\n    return even_numbers, odd_numbers\n\nlist = [2, 3, 5, 6, 8, 9, 10]\neven_numbers, odd_numbers = separate_numbers(list)\nprint(\"Even numbers in the list:\", even_numbers)\nprint(\"Odd numbers in the list:\", odd_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = list(range(0, 30, 5))\nprint(my_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a python script to read in a list of numbers and find the maximum\n\"\"\"\n\n# define list of numbers\nnumbers = [3, 4, 5, 7, 10]\n\n# define function to get maximum value in list\ndef get_max(numbers):\n    max_value = numbers[0]\n    for i in numbers:\n        if i > max_value:\n            max_value = i\n    return max_value\n\n# call the function\nmax_value = get_max(numbers)\n\n# print the result\nprint(\"The maximum value is: {}\".format(max_value)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_factors(num):\n  factors = []\n  for i in range(2, num):\n    if (num % i == 0):\n      factors.append(i)\n  print(f\"Factors of {num}: {factors}\")\n\nfind_factors(60) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \nimport pandas as pd \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\n# Load the data \ndata = pd.read_csv('data.csv')\n# Define X and y \nX = data['text']\ny = data['sentiment']\n\n# Split into training and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 101) \n\n# Create a CountVectorizer\nvect = CountVectorizer(stop_words='english')\n\n# Fit and transform the training data\nX_train_vect = vect.fit_transform(X_train)\n\n# Transform the test data\nX_test_vect = vect.transform(X_test)\n\n# Fit a LogisticRegression model\nlr = LogisticRegression()\nlr.fit(X_train_vect, y_train)\n\n# Predict on the test set\nlr_pred = lr.predict(X_test_vect) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_average(nums):\n  sum = 0\n  count = 0\n  for num in nums:\n    if num > 0:\n      sum += num\n      count += 1\n  return sum/count\n\nprint (find_average([1, 2, 3, 4])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import Foundation\n\nfunc randomString(length: Int) -> String {\n    let letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n    return String((0..<length).map { _ in letters.randomElement()! })\n}\n\nlet str = randomString(length: 8)\nprint(str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import yfinance as yf\n\n# Get the data of the stocks for the given ticker\nticker = \"AAPL\"\ndata = yf.Ticker(ticker)\n\n# The Yahoo API token\ntoken = \"abc123\"\n\n# Get historical data for the ticker\ndata.history(period=\"1mo\", token=token)\n\n# Print the price\nprint(data.history(token=token)[\"Close\"].iloc[-1}) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = [\"these\", \"are\", \"some\", \"words\"]\nfor word in words:\n  print(word) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(a,b): \n  \n    # base case  \n    if (a == 0): \n        return b \n              \n    if (b == 0): \n        return a \n  \n    if (a == b): \n        return a \n  \n    if (a > b): \n        return gcd(a-b, b) \n                  \n    return gcd(a, b-a) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\n\ndef slow_function():\n    # some code that takes a long time to run\n    time.sleep(5)\n\nstart_time = time.time()\nslow_function()\nelapsed_time = time.time() - start_time\nprint(f\"Function took {elapsed_time} seconds.\")\n\n# Rewritten with optimisation\nimport time\nfrom functools import lru_cache\n\n@lru_cache()\ndef fast_function():\n    # some code that takes a long time to run\n    time.sleep(5)\n\nstart_time = time.time()\nfast_function()\nelapsed_time = time.time() - start_time\nprint(f\"Function took {elapsed_time} seconds.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(arr, key):\n  pos = 0 \n  while pos < len(arr):\n    if arr[pos] == key:\n      return pos \n    pos += 1\n  return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Load the data\ndata = pd.read_csv('data.csv')\n\n# Split the data into features and target\nX = data[['feature1','feature2','feature3']]\ny = data['outcome']\n\n# Train the model\nclf = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=42)\nclf.fit(X, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_unique_words(string):\n    return set(string.split()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #  -*- coding: utf-8 -*-\n# util.py ---\n#\n# Created: Fri Dec 30 23:27:52 2011 (+0200)\n# Author: Janne Kuuskeri\n#\n\n\nimport re\n\n\ncharset_pattern = re.compile('.*;\\s*charset=(.*)')\n\n\ndef camelcase_to_slash(name):\n    \"\"\" Converts CamelCase to camel/case\n\n    code ripped from http://stackoverflow.com/questions/1175208/does-the-python-standard-library-have-function-to-convert-camelcase-to-camel-cas\n    \"\"\"\n\n    s1 = re.sub('(.)([A-Z][a-z]+)', r'\\1/\\2', name)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1/\\2', s1).lower()\n\n\ndef strip_charset(content_type):\n    \"\"\" Strip charset from the content type string.\n\n    :param content_type: The Content-Type string (possibly with charset info)\n    :returns: The Content-Type string without the charset information\n    \"\"\"\n\n    return content_type.split(';')[0]\n\n\ndef extract_charset(content_type):\n    \"\"\" Extract charset info from content type.\n\n    E.g.  application/json;charset=utf-8  ->  utf-8\n\n    :param content_type: The Content-Type string (possibly with charset info)\n    :returns: The charset or ``None`` if not found.\n    \"\"\"\n\n    match = charset_pattern.match(content_type)\n    return match.group(1) if match else None\n\n\ndef get_charset(request):\n    \"\"\" Extract charset from the content type\n    \"\"\"\n\n    content_type = request.META.get('CONTENT_TYPE', None)\n    if content_type:\n        return extract_charset(content_type) if content_type else None\n    else:\n        return None\n\n\ndef parse_accept_header(accept):\n    \"\"\" Parse the Accept header\n\n    todo: memoize\n\n    :returns: list with pairs of (media_type, q_value), ordered by q\n    values.\n    \"\"\"\n\n    def parse_media_range(accept_item):\n        \"\"\" Parse media range and subtype \"\"\"\n\n        return accept_item.split('/', 1)\n\n    def comparator(a, b):\n        \"\"\" Compare accept items a and b \"\"\"\n\n        # first compare q values\n        result = -cmp(a[2], b[2])\n        if result is not 0:\n            # q values differ, no need to compare media types\n            return result\n\n        # parse media types and compare them (asterisks are lower in precedence)\n        mtype_a, subtype_a = parse_media_range(a[0])\n        mtype_b, subtype_b = parse_media_range(b[0])\n        if mtype_a == '*' and subtype_a == '*':\n            return 1\n        if mtype_b == '*' and subtype_b == '*':\n            return -1\n        if subtype_a == '*':\n            return 1\n        if subtype_b == '*':\n            return -1\n        return 0\n\n    if not accept:\n        return []\n\n    result = []\n    for media_range in accept.split(\",\"):\n        parts = media_range.split(\";\")\n        media_type = parts.pop(0).strip()\n        media_params = []\n        q = 1.0\n        for part in parts:\n            (key, value) = part.lstrip().split(\"=\", 1)\n            if key == \"q\":\n                q = float(value)\n            else:\n                media_params.append((key, value))\n        result.append((media_type, tuple(media_params), q))\n    result.sort(comparator)\n    return result\n\n#\n# util.py ends here\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_programming_language(code_snippet):\n # create a dictionary to store the keywords for each language \n language_keywords = {\n 'python': ['def', 'print'],\n 'java': ['public', 'static'],\n 'javascript': ['var', 'function'],\n 'c': ['int', 'printf']\n }\n # go through each language in the dictionary and check if any of the language keywords exist in the code snippet\n for language, keywords in language_keywords.items():\n if any(keyword in code_snippet for keyword in keywords):\n return language\n # if no language is identified, return None\n return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\n\nsentence = \"Is this a question?\"\nwords = nltk.word_tokenize(sentence)\n\n# Check if the sentence ends with a question mark\nif words[-1] == '?':\n print(\"This is a question.\")\nelse:\n print(\"This is not a question.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isDivisible(a, b):\n  return a % b == 0\n\nprint(isDivisible(number1, number2)) #True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python Program to find the factors of a number\n\n# define a function\ndef print_divisors(input):\n\n    # find all factors of the input number\n    for i in range(1, input + 1):\n        if input % i == 0:\n            print (i)\n\n# take input from the user\ninput = 28\n\n# print the divisors\nprint_divisors(input) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_cents_to_dollars(cents): \n    return cents / 100 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_reverse(arr): \n    for i in range(len(arr)-1, -1, -1): \n        print(arr[i], end=\" \") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: [Selection Sort]: O(n^2)\n[Insertion Sort] : O(n^2)\n[Merge Sort]: O(nlogn)\n[Quick Sort]: O(nlogn)\n[Heap Sort]: O(nlogn) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isAnagram(str1, str2): \n    str1 = str1.replace(\" \", \"\").lower()\n    str2 = str2.replace(\" \", \"\").lower()\n    \n    # edge case\n    if len(str1) != len(str2):\n        return False\n    \n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n            \n    for char in str2:\n        if char in count:\n            count[char] -= 1\n        else:\n            count[char] = 1\n    \n    for val in count.values():\n        if val != 0:\n            return False\n    return True\n\nstr1 = \"silent\"\nstr2 = \"listen\" \nif isAnagram(str1, str2): \n    print(\"The two strings are anagrams\")\nelse:\n    print(\"The two strings are not anagrams\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply(nums):\n    result = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            result.append(nums[i] * nums[j]) \n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(string):  \n    left_pos = 0\n    right_pos = len(string) - 1\n    \n    while right_pos >= left_pos:\n        if not string[left_pos] == string[right_pos]:\n            return False\n        left_pos += 1\n        right_pos -= 1\n    return True\n \ndef longest_palindrome(string):  \n    if len(string) <= 1:\n        return string\n    \n    longest = \"\"\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            if is_palindrome(substring) and len(substring) > len(longest):\n                longest = substring\n                \n    return longest \n \nstring = \"abcbaacj\" \nprint(\"Original Strings:\", string)\nlong_palindrome = longest_palindrome(string) \nprint(\"Longest Palindrome is:\", long_palindrome) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_even_integers(lst):\n    total = 0\n    for num in lst:\n        if num % 2 == 0:\n            total += num\n    return total\n\nprint(sum_even_integers([1, 2, 3, 4, 5, 6])) # 12 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_expression = set([x for x in list]) \n\nset_expression = set(list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class HashMap:\n \n def __init__(self):\n self.map = {}\n \n def put(self, key, value):\n self.map[key] = value\n \n def get(self, key):\n return self.map.get(key) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random, string \n\ndef randomPassword(length): \n  \n    # Generate a list of random characters \n    gen_pass = ''.join(random.choice(string.ascii_letters \n                        + string.digits) \n                   for _ in range(length)) \n  \n    return gen_pass \n  \nrandom_password = randomPassword(8) \nprint(random_password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n\narray = [9, 8, 11, 5]\nbubble_sort(array)\nprint(array) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_max_elem(nums):\n    max_elem = nums[0]\n    for num in nums:\n        if num > max_elem:\n            max_elem = num\n    return max_elem but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd \n\n# Load data sets \ndata1 = pd.read_csv('data1.csv') \ndata2 = pd.read_csv('data2.csv') \ndata3 = pd.read_csv('data3.csv') \n\n# Merge data sets \nmerged_data = pd.merge(data1, data2, on='ID')\nmerged_data = pd.merge(merged_data, data3, on='ID')\n\n# Print data \nprint(merged_data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: mydict = {\n    'a': 1,\n    'b': 2,\n    'c': 3 \n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from textblob import TextBlob \n \nprint('Enter your text:') \ntext = input()\n\nblob = TextBlob(text) \nsentiment = blob.sentiment \n\nif sentiment.polarity > 0: \n    print('Positive sentiment') \nelif sentiment.polarity == 0: \n    print('Neutral sentiment') \nelse: \n    print('Negative sentiment') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n# Copyright (c) 2015 J\u00e9r\u00e9mie DECOCK (http://www.jdhp.org)\n\n\"\"\"\nThis is a simple Python GTK+3 TreeView CellRenderText snippet.\n\nSee: http://python-gtk-3-tutorial.readthedocs.org/en/latest/cellrenderers.html#cellrenderertext\n\"\"\"\n\nfrom gi.repository import Gtk as gtk\nfrom gi.repository import Pango as pango\n\n# Countries, population (as in 2015) and continent.\nDATA_LIST = [(\"China\",         1370130000, \"Asia\"),\n             (\"India\",         1271980000, \"Asia\"),\n             (\"United States\", 321107000,  \"North America\"),\n             (\"Indonesia\",     255461700,  \"Asia\"),\n             (\"Brazil\",        204388000,  \"South America\"),\n             (\"Pakistan\",      189936000,  \"Asia\"),\n             (\"Nigeria\",       183523000,  \"Africa\"),\n             (\"Bangladesh\",    158425000,  \"Asia\"),\n             (\"Russia\",        146267288,  \"Eurasia\"),\n             (\"Japan\",         126880000,  \"Asia\")]\n\ndef main():\n    window = gtk.Window()\n    window.set_default_size(300, 450)\n    window.set_border_width(18)\n\n    # Creating the ListStore model\n    liststore = gtk.ListStore(str, int, str)\n    for item in DATA_LIST:\n        liststore.append(list(item))\n\n    # Creating the treeview and add the columns\n    treeview = gtk.TreeView(liststore)\n    for column_index, column_title in enumerate([\"Country\", \"Population\", \"Continent\"]):\n        renderer = gtk.CellRendererText()\n\n        column = gtk.TreeViewColumn(column_title, renderer, text=column_index)\n        column.set_resizable(True)       # Let the column be resizable\n\n        # Use ellipsize for the \"Population\" and \"Continent\" columns\n        if column_title in (\"Population\", \"Continent\"):\n            renderer.set_property(\"ellipsize\", pango.EllipsizeMode.END)\n            renderer.set_property(\"ellipsize-set\", True)\n\n        if column_title == \"Population\":\n            column.set_expand(True)      # This column will use all the space left\n\n        treeview.append_column(column)\n\n    # Scrolled window\n    scrolled_window = gtk.ScrolledWindow()\n    scrolled_window.set_border_width(0)\n    scrolled_window.set_shadow_type(gtk.ShadowType.IN)                              # should be gtk.ShadowType.IN, gtk.ShadowType.OUT, gtk.ShadowType.ETCHED_IN or gtk.ShadowType.ETCHED_OUT\n    scrolled_window.set_policy(gtk.PolicyType.AUTOMATIC, gtk.PolicyType.ALWAYS)     # should be gtk.PolicyType.AUTOMATIC, gtk.PolicyType.ALWAYS or gtk.PolicyType.NEVER\n    scrolled_window.add(treeview)\n\n    window.add(scrolled_window)\n\n    window.connect(\"delete-event\", gtk.main_quit) # ask to quit the application when the close button is clicked\n    window.show_all()                             # display the window\n    gtk.main()                                    # GTK+ main loop\n\nif __name__ == '__main__':\n    main()\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = {\n 'algorithm': 'a set of steps used to solve a specific problem',\n 'function': 'a set of instructions that when followed produces the desired output',\n 'string': 'a sequence of characters',\n 'variable': 'a named value that will store data',\n 'integer': 'a whole number',\n 'float': 'a number with a decimal point',\n 'boolean': 'true or false',\n 'array': 'a data structure containing multiple values',\n 'dictionary': 'a data structure containing key-value pairs',\n 'loop': 'a construct used to iterate over a set of items'\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\n# create connection\nconn = sqlite3.connect(\"example.db\")\nc = conn.cursor()\n\n# create table\nc.execute(\"\"\" CREATE TABLE IF NOT EXISTS example (\n              id INTEGER PRIMARY KEY,\n              title TEXT,\n              content TEXT\n            ) \"\"\")\n\n# insert row\nc.execute(\"INSERT INTO example(title, content) VALUES (?,?)\", (title, content))\n\n# edit row\nc.execute(\"UPDATE example SET content=? WHERE id=?\", (new_content, id))\n\n# commit changes\nconn.commit()\n\n# close connection\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport bs4\n \n# Get the source code for the websites\nurls = ['https://www.indeed.com/', 'https://www.monster.com/']\nsources = [requests.get(url).text for url in urls]\n\n# Parse the source code for job listings\njobs = []\nfor source in sources:\n  soup = bs4.BeautifulSoup(source, 'html.parser')\n  jobs_tags = soup.find_all('div', {'class': 'job'})\n  for job_tag in jobs_tags:\n    job = {}\n    job['title'] = job_tag.find('h2').text.strip()\n    job['location'] = job_tag.find('dd', {'class': 'location ft_location'}).text.strip()\n    job['description'] = job_tag.find('p').text.strip()\n    jobs.append(job)\n\nprint(jobs) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #include <iostream>\n\nint test_func(int A, int B)\n{\n return A + B;\n}\n\nint main()\n{\n int A = 10;\n int B = 20;\n \n std::cout << \"The value of A + B = \" << test_func(A, B) << std::endl;\n \n return 0;\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_vowels(string):\n    count = 0\n    for char in string:\n        if char in \"aeiouAEIOU\":\n            count += 1\n    return count\n\nstring = 'This is a test string for counting vowels.'\nvowel_count = count_vowels(string)\nprint('Number of vowels in the string :', vowel_count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.datasets import load_iris\nfrom sklearn import tree\nimport pandas as pd\n\n# Import dataset\ndata = load_iris()\n\n# Split dataset into features and labels\nX = data.data\ny = data.target\n\n# Train decision tree model\nclf = tree.DecisionTreeClassifier()\nclf.fit(X, y)\n\n# Make predictions\nprediction = clf.predict(X)\n\n# Print accuracy and confusion matrix\nprint(f'Accuracy: {clf.score(X, y)}')\npd.crosstab(data.target, prediction, rownames=['Actual'], colnames=['Predicted']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef approx_pi(n):\n    circle_points = 0\n    square_points = 0\n \n    for _ in range(n):\n        x = random.uniform(0, 1)\n        y = random.uniform(0, 1)\n        dist = x**2 + y**2\n        if dist <= 1:\n            circle_points += 1\n        square_points +=1\n \n    pi = 4 * (circle_points/square_points)\n    return round(pi, 4)\n\nprint(approx_pi(1000)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n# skeleton.py\n\ndef functionA():\n    pass\n\ndef functionB():\n    pass\n\ndef main():\n    functionA()\n    functionB()\n\nif __name__ == \"__main__\":\n    main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_largest_number(nums):\n    biggest = nums[0]\n    for num in nums:\n        if num > biggest:\n            biggest = num\n    return biggest\n\nnums = [-10, 10, 1, -100]\nprint(find_largest_number(nums)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tweepy \n\n# enter your authentication details\nconsumer_key = 'YOUR CONSUMER KEY'\nconsumer_secret = 'YOUR CONSUMER SECRET'\naccess_token = 'YOUR ACCESS TOKEN'\naccess_token_secret = 'YOUR ACCESS TOKEN SECRET'\n \nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name = 'twitter', count = 10, tweet_mode=\"extended\", include_rts=False)\n\nfor tweet in tweets:\n print(tweet.full_text)\n print(\"-------------------------------\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from datetime import datetime\n\ndef calculate_days_between(start_date, end_date):\n  start_date = datetime.strptime(start_date, '%Y-%m-%d')\n  end_date = datetime.strptime(end_date, '%Y-%m-%d')\n  delta = end_date - start_date\n  return delta.days but is not the same. just give one example and only return the code."}
