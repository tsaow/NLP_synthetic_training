{"prompt": "make some code that functions the same as the following code: from flask import Flask, jsonify\nimport sqlite3\n\napp = Flask(__name__)\n\n@app.route('/users')\ndef get_users():\n conn = sqlite3.connect('example.db')\n c = conn.cursor()\n\n c.execute('SELECT * FROM users')\n users = c.fetchall()\n\n return jsonify(users)\n\nif __name__ == '__main__':\n app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Project settings\nPROJECT_NAME = 'myproject'\n\n# Required Packages\nimport os, django\n\n# Setup Django\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', PROJECT_NAME + '.settings')\ndjango.setup()\n\n# Register Models\nfrom django.contrib.auth.models import User\n\n# Main app\nfrom django.urls import path\nfrom .views import *\n\nurlpatterns = [\n path('', HomePage.as_view(), name='home'),\n path('register/', UserRegistration.as_view(), name='register'),\n]\n\n# View functions\n\nfrom django.views.generic import TemplateView\nfrom django.contrib.auth.forms import UserCreationForm\n\nclass HomePage(TemplateView):\n template_name = 'home.html'\n\nclass UserRegistration(TemplateView):\n template_name = 'registration.html'\n\n def get_context_data(self, **kwargs):\n return {'form': UserCreationForm()} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_matrix(A, B):\n    \"\"\"Add two matrices of the same size.\"\"\"\n    n = len(A)\n    m = len(A[0])\n    result = [[0 for _ in range(m)] for _ in range(n)] \n    for i in range(n):\n        for j in range(m):\n            result[i][j] = A[i][j] + B[i][j]\n            \n    return result\n\n# Output\nprint(add_matrix(A,B)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\ndef get_html(url):\n r = requests.get(url)\n return r.text\n\n\ndef get_data(html):\n soup = BeautifulSoup(html, 'lxml')\n title = soup.find('title')\n if title is not None:\n title = title.text\n else:\n title = ''\n\n description = soup.find('meta', {\n 'name': 'description'\n })\n if description is not None:\n description = description.get('content')\n else:\n description = ''\n\n html = soup.find('body')\n if html is not None:\n html = html.prettify()\n else:\n html = ''\n\n return {\n 'title': title,\n 'description': description,\n 'html': html,\n }\n\nurl = 'https://example.com'\ndata = get_data(get_html(url))\nprint(data) # {'title': 'Example Domain', 'description': 'Example Domain', 'html': ...} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # @Author \n# Chloe-Agathe Azencott\n# chloe-agathe.azencott@mines-paristech.fr\n# April 2016\n\nimport argparse\nimport h5py\nimport numpy as np\nimport os\nimport sys\n\nimport CoExpressionNetwork\n\ndef main():\n    \"\"\" Create sample-specific co-expression networks for one fold and one repeat\n    of a cross-validation for which fold indices have already been computed.\n\n    The data will be stored under\n        <data_dir>/repeat<repeat idx>\n    with the following structure:\n        edges.gz: \n            Gzipped file containing the list of edges of the co-expression networks.\n            Each line is an undirected edge, formatted as:\n                <index of gene 1> <index of gene 2>\n            By convention, the index of gene 1 is smaller than that of gene 2.\n        For k=0..(numFolds-1):\n            <k>/lioness/edge_weights.gz:\n                gzipped file containing the (self.numSamples, numEdges) array\n                describing the edge weights of the LIONESS co-expression networks\n                for the training samples.\n            <k>/lioness/edge_weights_te.gz:\n                gzipped file containing the (self.numSamples, numEdges) array\n                describing the edge weights of the LIONESS co-expression networks\n                for the test samples.\n            <k>/regline/edge_weights.gz:\n                gzipped file containing the (self.numSamples, numEdges) array\n                describing the edge weights of the Regline co-expression networks\n                for the training samples.\n            <k>/regline/edge_weights_te.gz:\n                gzipped file containing the (self.numSamples, numEdges) array\n                describing the edge weights of the Regline co-expression networks\n                for the test samples.\n\n    Parameters\n    ----------\n    aces_dir: path\n        Path to the ACES folder.\n    data_dir: path\n        Path to the folder containing fold indices (under <data_dir>/repeat<repeat_idx>/fold<fold_idx>).\n    fold: int\n        Fold index.\n    repeat: int\n        Repeat index.\n\n    Example\n    -------\n        $ python setUpSubTypeStratifiedCV_computeNetworks.py ACES outputs/U133A_combat_RFS/subtype_stratified 0 0\n    \n    Reference\n    ---------\n    Allahyar, A., and Ridder, J. de (2015).\n    FERAL: network-based classifier with application to breast cancer outcome prediction.\n    Bioinformatics 31, i311--i319.\n    \"\"\"\n    parser = argparse.ArgumentParser(description=\"Build sample-specific co-expression networks\" + \\\n                                     \"for a 10-fold sub-type stratified CV on the RFS data\",\n                                     add_help=True)\n    parser.add_argument(\"aces_dir\", help=\"Path to ACES data\")\n    parser.add_argument(\"data_dir\", help=\"Path to the fold indices\")\n    parser.add_argument(\"fold\", help=\"Index of the fold\", type=int)\n    parser.add_argument(\"repeat\", help=\"Index of the repeat\", type=int)\n    args = parser.parse_args()\n\n    outDir = '%s/repeat%d' % (args.data_dir, args.repeat)\n\n    # Get expression data, sample labels.\n    # Do not normalize the data while loading it (so as not to use test data for normalization).\n    f = h5py.File(\"%s/experiments/data/U133A_combat.h5\" % args.aces_dir)\n    expressionData = np.array(f['U133A_combat_RFS']['ExpressionData'])\n    sampleLabels = np.array(f['U133A_combat_RFS']['PatientClassLabels'])\n    f.close()\n    \n    foldNr = args.fold\n    # Output directory\n    foldDir = \"%s/fold%d\" % (outDir, foldNr)\n\n    # Read train indices from file\n    trIndicesF = '%s/train.indices' % foldDir\n    trIndices = np.loadtxt(trIndicesF, dtype=int)\n    sys.stdout.write(\"Read training indices for fold %d from %s\\n\" % (foldNr, trIndicesF))\n\n    # Read test indices from file\n    teIndicesF = '%s/test.indices' % foldDir\n    teIndices = np.loadtxt(teIndicesF, dtype=int)\n    sys.stdout.write(\"Read training indices for fold %d from %s\\n\" % (foldNr, teIndicesF))\n    print teIndices\n    print teIndices.shape\n\n    # Create networks\n    CoExpressionNetwork.run_whole_data(expressionData, sampleLabels, foldDir,\n                                       trIndices=trIndices, teIndices=teIndices)\n\n\n\nif __name__ == \"__main__\":\n    main()\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack:\n def __init__(self):\n self.stack = []\n \n def push(self, item):\n self.stack.append(item)\n \n def pop(self):\n if self.is_empty():\n return None\n return self.stack.pop()\n \n def is_empty(self):\n return len(self.stack) == 0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sklearn.linear_model as lm\n\ndef fit_linear_model_prediction_x2(x, y):\n    \"\"\" \n    Function to fit a linear model focussing on predicting x2 from the given data.\n\n    Args:\n        x (list[list]): List of features vectors\n        y (list): List of target labels\n\n    Returns:\n        The fitted linear model\n    \"\"\"\n    # Select the specific feature corresponding to x2\n    x_new = np.array([x[:, 1]]).T\n\n    # Construct and fit the linear model\n    model = lm.LinearRegression()\n    model.fit(x_new, y)\n    \n    return model but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nWrite a Python program to print all possible words using the characters provided in an array\n\"\"\"\n \ndef all_words(char_arr):\n    for i in range(0, len(char_arr)):\n        for j in range(i + 1, len(char_arr) + 1):\n            print(\"\".join(char_arr[i:j]))\n\nif __name__ == '__main__':\n    char_arr = ['a', 't', 'o', 'm']\n    all_words(char_arr)\n\n# Output\n# a\n# at\n# ato\n# atom\n# t\n# to\n# tom\n# o\n# om\n# m but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def flatten(d): \n  flatten_d = {} \n  for key, value in d.items():\n    if isinstance(value, dict):\n      value = flatten(value) \n      for sub_key, sub_value in value.items(): \n        flatten_d[key + '.' + sub_key] = sub_value \n    else: \n      flatten_d[key] = value \n  return flatten_d but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # create a function to calculate median\ndef median(data):\n # sort the list\n data.sort()\n\n #get the length of the list\n n= len(data)\n\n # check if the length is odd or even\n if n%2 != 0:\n  #if odd, return the middle element\n  return data[int(n/2)]\n else:\n  #if even, return the average of two middle elements\n  return (data[int(n/2)] + data[int((n/2)-1)])/2\n\n#input data\ndata = [12, 64, 22, 17]\n#calculate median\nmedian = median(data)\n#print result\nprint(\"Median of the list is:\", median) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\nimport sys\nimport re\nimport string\n\nvariables = {}\nouts = {}\nmonomial = \"([a-zA-z]+\\d+)\"\nmn = re.compile(monomial)\n\ndef extractValues(strin):\n        xAddr1 = strin[2].strip()\n        xAddr2 = strin[4].strip()\n        if xAddr1 in variables:\n            x1 = variables[xAddr1]\n        else:\n            raise Exception(\"equationReader: variable \" + xAddr1 + \" not found\")\n        if mn.match(xAddr2):\n            if xAddr2 in variables:\n                x2 = variables[xAddr2]\n            else:\n                raise Exception(\"equationReader: variable \" + xAddr2 + \" not found\")\n        else:\n            x2 = bool(int(xAddr2))\n        return {'x1':x1, 'x2':x2}\n\nif len(sys.argv) != 3:\n    raise Exception(\"Usage: equationReader <input file> <output file>\")\n\nfin = open(sys.argv[1], \"r\")\n\n\nlines = fin.readlines()\ninputs = re.compile(\"\\d+ inputs\")\noutputs = re.compile(\"\\d+ outputs\")\nfor index, line in enumerate(lines):\n    if inputs.match(line):\n        #Creation of the x set\n        xLine = lines[index + 1]\n        xValueLine = lines[index + 2]\n        ins = string.split(xLine)\n        insValues = string.split(xValueLine)\n        if len(ins) != len(insValues):\n            print(line + xLine + xValueLine)\n            raise Exception(\"equationReader: you need to provide a starting value for each x inserted\")\n        for i in range(len(ins)):\n            x = ins[i].strip()\n            variables[x] = bool(int(insValues[i]))\n    else:\n        if outputs.match(line):\n            #Creation of the y set\n            yLine = lines[index + 1]\n            ins = string.split(yLine, \" \")\n            for y in ins:\n                y.strip()\n                outs[y] = None\n            else:\n                if line == \"begin\":\n                    #When the equations start we get to the next cicle which performs the calculations\n                    break\n\n#y = x + z\nequation_XOR = re.compile(monomial + \" = \" + monomial + \" \\+ (\" + monomial + \"|(0|1))\")\n#y = x * z\nequation_AND = re.compile(monomial + \" = \" + monomial + \" \\* (\" + monomial + \"|(0|1))\")\n#y = x\nequation_ASSIGNEMENT = re.compile(monomial + \" = (\" + monomial + \"|(0|1))\")\n\nfor index, line in enumerate(lines):\n    tmp = string.split(line, \" \")\n    print(line)\n    if equation_XOR.match(line):\n        xdict = extractValues(tmp)\n        yAddr = tmp[0]\n        y = xdict['x1'] ^ xdict['x2']\n        variables[yAddr] = y\n        if yAddr in outs:\n            outs[yAddr] = y\n    else:\n        if equation_AND.match(line):\n            xdict = extractValues(tmp)\n            yAddr = tmp[0]\n            y = xdict['x1'] & xdict['x2']\n            variables[yAddr] = y\n            if yAddr in outs:\n                outs[yAddr] = y\n        else:\n            if equation_ASSIGNEMENT.match(line):\n                yAddr = tmp[0].strip()\n                xAddr = tmp[2].strip()\n                if mn.match(xAddr):\n                    if xAddr in variables:\n                        x = variables[xAddr]\n                    else:\n                        raise Exception(\"equationReader: variable \" + xAddr + \" not found\")\n                else:\n                    x = bool(xAddr)\n                y = x\n                variables[yAddr] = y\n                if yAddr in outs:\n                    outs[yAddr] = y\n            else:\n                print(\"Skipping malformed equation:\" + line)\n\n#Printing out the results\nfin.close()\nfout = open(sys.argv[2], \"w\")\nfor key, value in outs.items():\n    fout.write(key + \" = {}\\n\".format(int(value)))\nfout.close()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Trip:\n    def __init__(self, distance=0, speed=0, stops=0):\n        self.distance = distance\n        self.speed = speed\n        self.stops = stops\n\n    def get_distance(self):\n        return self.distance\n\n    def get_speed(self):\n        return self.speed\n\n    def get_stops(self):\n        return self.stops \n\n    def set_distance(self, distance):\n        self.distance = distance\n\n    def set_speed(self, speed):\n        self.speed = speed\n\n    def set_stops(self, stops):\n        self.stops = stops but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_dicts_by_key(data, key):\n    return sorted(data, key=lambda k: k[key]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combine_strings(str1, str2):\n    return str1 + str2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sigmoid(x): \n    return 1 / (1 + math.exp(-x)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n): \n a = 0\n b = 1\n if n < 0:\n print(\"Incorrect input\")\n elif n == 0:\n return a \n elif n == 1:\n return b\n else:\n for i in range(2,n+1): \n c = a + b \n a = b \n b = c \n return b \n\nn = 10\nprint(fibonacci(n))\n\n# Output: 55 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef print_random_element(list):\n    index = random.randint(0, len(list)-1)\n    print(list[index]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def shuffle(arr):\n    \"\"\"Randomly shuffles an array of integers\"\"\"\n    # Using Fisher-Yates shuffle algorithm\n    for i in range(len(arr) - 1, 0, -1):\n        # Generate random index\n        j = random.randint(0, i)\n        # Swap elements\n        arr[i], arr[j] = arr[j], arr[i] \n    return arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n html = response.content\n soup = BeautifulSoup(html, 'html.parser')\n data = soup.find_all('p')\n \n for paragraph in data:\n print(paragraph.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def primes(start, end):\n    prime_list = []\n    for i in range(start, end + 1):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_list.append(i)\n    return prime_list\n\nprime_numbers = primes(start, end)\nprint(prime_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def encrypt_caesar_cipher(message, key):\n    encrypted_message = \"\"\n    for text in message:\n        if text.isupper():\n            encrypted_message += chr((ord(text) + key - 65) % 26 + 65) \n        elif text.islower():\n            encrypted_message += chr((ord(text) + key - 97) % 26 + 97) \n    return encrypted_message but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # get 3 numbers\nnum1 = int(input(\"Please enter number 1: \"))\nnum2 = int(input(\"Please enter number 2: \"))\nnum3 = int(input(\"Please enter number 3: \"))\n\n# sort numbers\nsorted_nums = sorted([num1, num2, num3])\n\n# print sorted numbers\nprint(*sorted_nums, sep=', ') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quicksort(array):\n    if len(array) < 2:\n        return array\n    else:\n        pivot = array[0]\n        less = [i for i in array[1:] if i <= pivot]\n        greater = [i for i in array[1:] if i > pivot]\n \n        return quicksort(less) + [pivot] + quicksort(greater) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def nthFibDivisibleBy3(n): \n    \n    prev, curr = 0, 1\n    i = 2\n  \n    while(i < n + 1):\n \n        prev, curr = curr, prev + curr\n  \n        if curr % 3 == 0:\n            nth = curr\n        i+=1\n  \n    return nth but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\ndata = {\n    'name': 'John',\n    'age': 25\n}\n\njson_data = json.dumps(data)\n# json_data = '{\"name\":\"John\",\"age\":25}' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_alphanumeric(items):\n    return sorted(items, key=lambda item: item.lower())\n\ndef main():\n    items = [\u201cWindows\u201d, \u201cMacOS\u201d, \u201cUnix\u201d, \u201cCentOS\u201d, \u201cRedHat\u201d]\n    sorted_items = sort_alphanumeric(items)\n    print(sorted_items)\n\nif __name__ == \u201c__main__\u201d:\n    main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_mean(nums):\n    return sum(nums) / len(nums)\n\nnums = [5,2,10,3,7]\nmean = calculate_mean(nums)\nprint(mean)  # Output: 5.6 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\nfrom tensorflow.keras import layers\n\n# Create an input layer\ninputs = tf.keras.Input(shape = (28, 28, 1))\n\n# Create a convolutional layer\nconv1 = layers.Conv2D(32,(3,3))(inputs)\n\n# Create a MaxPooling layer\npool1 = layers.MaxPooling2D((2, 2))(conv1)\n\n# Create a Flatten layer\nflat1 = layers.Flatten()(pool1)\n\n# Create a fully connected layer with 10 neurons\nfc1 = layers.Dense(10)(flat1)\n\n# Create an output layer\noutputs = layers.Softmax()(fc1)\n\n# Instantiate the model\nmodel = tf.keras.Model(inputs = inputs, outputs = outputs)\n\n# Compile the model\nmodel.compile(optimizer = 'adam', loss='categorical_crossentropy', metrics=['accuracy']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_elements(nested_list):\n    \n    for item in nested_list:\n        if type(item) == list:\n            print_elements(item)\n        else:\n            print(item)\n\nprint_elements(nested_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Vector3D:\n\n def __init__(self, x, y, z):\n self.x = x\n self.y = y\n self.z = z\n  \n def dot_product(self, vec2):\n return (self.x * vec2.x + self.y * vec2.y + self.z * vec2.z)\n  \n def cross_product(self, vec2):\n return Vector3D(\n  self.y * vec2.z - self.z * vec2.y,\n  self.z * vec2.x - self.x * vec2.z,\n  self.x * vec2.y - self.y * vec2.x\n )\n  \n def magnitude(self):\n return (self.x**2 + self.y**2 + self.z**2)**0.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for key in dictionary.keys():\n    print(key) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Creating the API\nfrom flask import Flask, request\nimport sqlite3\n\napp = Flask(__name__)\n\n#Connecting to the database\nconnection = sqlite3.connect('ibooks.db')\n\n@app.route('/search', methods=['GET'])\ndef search():\n title = request.args.get('title')\n author = request.args.get('author')\n ISBN = request.args.get('ISBN')\n \n query = 'SELECT * FROM Books WHERE'\n args = []\n \n # create query based on parameters\n if title:\n query += ' title=? AND'\n args.append(title)\n \n if author:\n query += ' author=? AND'\n args.append(author)\n \n if ISBN:\n query += ' ISBN=? AND'\n args.append(ISBN)\n \n # remove last 'AND' if present\n if args:\n query = query[:-4]\n \n # execute the query\n cursor = connection.cursor().execute(query, args)\n \n # fetch the results\n results = cursor.fetchall()\n \n # construct the response\n response = {\n 'books': []\n }\n \n for result in results:\n response['books'].append(\n {\n 'title': result[1],\n 'author': result[2],\n 'ISBN': result[3]\n }\n )\n \n return response\n\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Vector:\n  def __init__(self, x, y, z):\n    self.x = x\n    self.y = y\n    self.z = z\n\n  def __add__(self, other): \n    x = self.x + other.x \n    y = self.y + other.y \n    z = self.z + other.z \n    return Vector(x, y, z) \n \n  def __sub__(self, other): \n    x = self.x - other.x \n    y = self.y - other.y \n    z = self.z - other.z \n    return Vector(x, y, z) \n  \n  def __mul__(self, other): \n    x = self.x * other.x \n    y = self.y * other.y \n    z = self.z * other.z \n    return Vector(x, y, z) \n  \n  def __div__(self, other): \n    x = self.x / other.x \n    y = self.y / other.y \n    z = self.z / other.z \n    return Vector(x, y, z) \n  \n  def __str__(self): \n    return \"Vector({}, {}, {})\".format(self.x, self.y, self.z) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def solve_linear_equations(a, b, c):\n    \"\"\"\n    This function takes three parameters: a, b and c, which are the coefficients of a system of linear equations, \n    and returns a tuple of the solution of the system.\n    \"\"\"\n    x = (c - b) / (a - b)\n    y = (5 - a*x) / b\n    \n    return (x, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_object_table(obj): \n    print(\"Name\\t Age\\t Gender\\t City\")\n    print(\"----\\t----\\t-------\\t-------\")\n    print(obj['name'], \"\\t\", obj['age'], \"\\t\", obj['gender'], \"\\t\", obj['city'])\n\nprint_object_table({\n  'name': 'John', \n  'age': 32, \n  'gender': 'Male',\n  'city': 'New York'\n}) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply_list(nums):\n    product = 1\n    for num in nums:\n        product *= num\n    return product\n\nprint(multiply_list([3, 6, 5, 4])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n\nurl = 'url'\npage = requests.get(url)\nsoup = BeautifulSoup(page.text, 'html.parser')\n\nheadings = soup.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'])\nfor heading in headings:\n print(heading.text)\n\nparagraphs = soup.find_all('p')\nfor paragraph in paragraphs:\n print(paragraph.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_unique_words(s):\n    words = s.split()\n    unique_words = set(words)\n    return len(unique_words)\n\ninput_string = \"One two three four, five. Six seven eight nine, ten.\"\nprint(\"The number of unique words is\", count_unique_words(input_string))\n\n# Output\n# The number of unique words is 10 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nrandom_int = random.randint(1, 10)\nprint(random_int) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import spellchecker\n\nword = \"Hello\"\n\ncorrect_word = spellchecker.correction(word)\nif word != correct_word:\n print(\"Did you mean\", correct_word, \"?\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_word_count(text):\n    words = text.split()\n    return len(words)\n\nword_count = get_word_count(\"Hello world, this is a test.\")\nprint(word_count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n    def __init__(self, name, age, city):\n        self.name = name\n        self.age = age\n        self.city = city but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(a, b):\n if b == 0:\n  return a\n return gcd(b, a % b)\n\nresult = gcd(100, 12)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport re\nfrom bs4 import BeautifulSoup\n\ndef scrape_all_pages(url):\n    urls = []\n    titles = []\n    \n    while url:\n        response = requests.get(url)\n        html = response.text\n        soup = BeautifulSoup(html, 'html.parser')\n        for link in soup.find_all('a'):\n            if link.has_attr('href'):\n                absolute_url = link['href']\n                if re.match('^http', absolute_url):\n                    urls.append(absolute_url)\n                    titles.append(link.string)\n        url = soup.find('a', rel=\"next\")\n        if url:\n            url = url['href']\n    return urls, titles\n\nif __name__ == '__main__':\n    print(scrape_all_pages('https://www.example.com/')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \n  \n# defining the api-endpoint \nAPI_ENDPOINT = \"https://api.openweathermap.org/data/2.5/weather\"\n  \n# data to be sent to api \ndata = {\"q\" : \"Paris\", \"appid\" : YOUR_API_KEY} \n  \n# sending post request and saving response as response object \nr = requests.get(url = API_ENDPOINT, params = data) \n  \n# extracting response text  \npastebin_url = r.text \nprint(\"The current weather for Paris is :%s\"%pastebin_url) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_to_dictionary(numbers): \n d = {} \n for number in numbers: \n d[number] = number**2 \n return d\n\nresult = list_to_dictionary([1, 2, 3, 4])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_animal(features,description):\n    if(\"warm blooded\" in features and \"gives birth to live young\" in features):\n        return \"mammal\"\n    elif(\"feline\" in description and \"four legs\" in description):\n        return \"mammal\"\n    else:\n        return \"non-mammal\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: let m = 'Hello, World!';\nconsole.log(m); but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_prime_numbers(start, end): \n    prime_nums = []\n    for num in range(start, end + 1): \n        if num > 1:\n            for i in range(2, num): \n                if num % i == 0: \n                    break\n            else: \n                prime_nums.append(num)\n    return prime_nums\n    \nprint(find_prime_numbers(0, 10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # create the Django project\ndjango-admin startproject tip_calculator\n\n# create the application within the project\ncd tip_calculator\npython manage.py startapp calculator\n\n# define the model for the Tip\n# in calculator/models.py\n\nfrom django.db import models\n\nclass Tip(models.Model):\n    bill_amount = models.FloatField()\n    tip_percentage = models.FloatField()\n    tip_amount = models.FloatField()\n\n# define the calculator view\n# in calculator/views.py\n\nfrom django.shortcuts import render\nfrom .models import Tip\nfrom django.http import HttpResponse\n\ndef calculator(request):\n    if request.method == 'POST':\n        bill_amount = float(request.POST.get('bill_amount'))\n        tip_percentage = float(request.POST.get('tip_percentage'))\n\n        # calculate the tip amount\n        tip_amount = bill_amount * tip_percentage / 100\n\n        # save the tip to the database\n        tip = Tip(bill_amount=bill_amount,\n                  tip_percentage=tip_percentage,\n                  tip_amount=tip_amount)\n        tip.save()\n\n        return HttpResponse('Tip amount is: {}'.format(tip_amount))\n\n    else:\n        return render(request, 'calculator/calculator.html')\n\n# create the URL for accessing the calculator\n# in tip_calculator/urls.py\n\nfrom django.urls import path\nfrom calculator import views\n\nurlpatterns = [\n    path('calculator/', views.calculator),\n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re \nimport urllib.request \n\n#Enter the url to scrape\nurl = \"http://example.com/\"\n\n# Get the source code of the webpage\nresponse = urllib.request.urlopen(url)\nhtml = response.read()\n\n# Extract all the links from the source code\nlinks = re.findall('\"((http|ftp)s?://.*?)\"', str(html))\n\n#Print the extracted links\nfor link in links:\n print(link[0]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string capitalize_word(string word){\n    return string(1, toupper(word[0])) + word.substr(1);\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(arr):\n    # Insertion sort algorithm\n    for i in range(1, len(arr)):\n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n            arr[j+1] = arr[j] \n            j -= 1\n        arr[j+1] = key \n    return arr\n\nsorted_arr = sort_list([3, 9, 1, 4, 5]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n \n# Get the html content\nurl = \"https://www.example.com/articles\"\nr = requests.get(url)\nhtml_content = r.content\n \n# Parse the html content\nsoup = BeautifulSoup(html_content, 'html.parser')\n \n# Extract the title, author and publication date\ntitles = soup.find_all('h1', class_='title')\nauthors = soup.find_all('span', class_='author')\ndates = soup.find_all('span', class_='date')\n \nfor title, author, date in zip(titles, authors, dates):\n    print('Title: {}'.format(title.text))\n    print('Author: {}'.format(author.text))\n    print('Publication Date: {}'.format(date.text)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def flatten_dictionary(d):\n result = {}\n \n def traverse(k, v):\n  if isinstance(v, dict):\n   for k1, v1 in v.items():\n    traverse(k+\".\"+k1, v1)\n  else:\n   result[k] = v\n \n traverse(\"\", d)\n \n return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(list, query): \n    return query in list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: One way to convert a list of tuples into a Python dictionary is to use the Python built-in dict() constructor. The dict() constructor takes the list of tuples as its argument and returns a dictionary. For example, given the list of tuples [(1, \u2018a\u2019), (2, \u2018b\u2019), (3, \u2018c\u2019)], we can use the dict() constructor to convert it into a dictionary as follows: dict([(1, \u2018a\u2019), (2, \u2018b\u2019), (3, \u2018c\u2019)]). This will return a dictionary with the keys 1, 2 and 3, and respective values 'a', 'b' and 'c'. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: function showMessage(message) {\n console.log(message);\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_prime_numbers(numbers):\n    primes = []\n    for num in numbers:\n        if is_prime(num):\n            primes.append(num)\n    return primes\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculateSphereVolume(radius):\n    volume = (4/3) * (3.142) * (radius**3)\n    return round(volume, 2)\n\nradius = 5\nresult = calculateSphereVolume(radius)\nprint(result)  # Output: 523.6 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import libraries\nfrom sklearn import tree\nimport pandas as pd\n\n# Read data into a pandas DataFrame\ndata = pd.read_csv(\"movie_reviews.csv\")\ntext = data['text']\ny = data['sentiment']\n\n# Split data into training and testing sets\nfrom sklearn.model_selection import train_test_split\ntext_train, text_test, y_train, y_test = train_test_split(text, y, random_state=1)\n\n# Create a decision tree classifier\nclf = tree.DecisionTreeClassifier()\nclf.fit(text_train, y_train)\n\n# Predict sentiment for the test set\ny_pred = clf.predict(text_test)\n\n# Measure accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y_pred, y_test)\nprint(\"Accuracy:\", accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def construct_3d_array(arr1, arr2):\n    result = []\n    for i in range(len(arr1)):\n        sub_arr = []\n        for j in range(len(arr1[i])):\n            sub_arr.append([arr1[i][j], arr2[i][j]])\n        result.append(sub_arr)\n    return result\n\narr1 = [[0, 0, 0], [1, 1, 1]]\narr2 = [[2, 2, 2], [3, 3, 3]]\n\nprint(construct_3d_array(arr1, arr2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def nth_prime(n):\n  prime_numbers = [2]\n  num = 3\n  while len(prime_numbers) < n:\n    is_prime = True\n    for i in range(2, int(num ** 0.5)+1):\n      if num % i == 0:\n        is_prime = False\n        break\n    if is_prime:\n      prime_numbers.append(num)\n    num += 1\n  return prime_numbers[-1]\n\nprint(nth_prime(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python\ndigits = \"12\"\n\nfor i in range(len(digits)):\n for j in range(len(digits)):\n if i != j:\n print(digits[i] + digits[j])\n\n# 10, 11, 12, 21, 22 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_word(word):\n    return word[::-1]\n\nword = \"hello\"\nresult = reverse_word(word)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import psycopg2\nimport json\nfrom flask import Flask, request\n\n# Connect to the database\nconn = psycopg2.connect(dbname='user_db',\n                        user='postgres',host='localhost',port='5432')\n\n# Create the API\napp = Flask(__name__)\n\n@app.route('/user/<string:username>', methods=['GET'])\ndef get_user(username):\n    cur = conn.cursor()\n    cur.execute(\"SELECT * from users where username='{}'\".format(username))\n    user = cur.fetchone()\n    return json.dumps(user)\n \nif __name__ == \"__main__\":\n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack: \n  \n    def __init__(self): \n        self.stack = [] \n  \n    def push(self, data): \n        self.stack.append(data) \n  \n    def pop(self): \n        if len(self.stack) < 1:\n            return None \n        else: \n            return self.stack.pop() \n  \n    def top(self): \n        if len(self.stack) < 1:\n            return None \n        else: \n            return self.stack[-1] \n  \n    def is_empty(self): \n        return len(self.stack) == 0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(num): \n  x, y = 0, 1\n  while x < num:\n    print(x)\n    x, y = y, x + y\n\nfibonacci(20) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: user_input = input(\"Do you want to print 'Hello World'? (y/n): \")\n\nif user_input == 'y':\n    print(\"Hello World\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_common_element(arr1, arr2):\n    common = []\n    for num1 in arr1:\n        for num2 in arr2:\n            if num1 == num2:\n                common.append(num1)\n    return common\n\nfind_common_element(arr1, arr2) # return [2, 3] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nThis is a Python library for text annotation.\n \nIt provides users with a set of tools to extract, parse and analyze text.\n \nThe library can be used to annotate texts by adding tags, keywords, categories and other labels to them.\n \nIt also provides tools to segment and classify texts into different categories.\n \nText annotation is useful for a variety of tasks such as sentiment analysis, text summarization, named entity recognition and text classification.\n\"\"\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def dfs(graph, start, end):\n  stack = [(start, [start])]\n  while stack:\n    (vertex, path) = stack.pop()\n    for next in graph[vertex] - set(path):\n      if next == end:\n        return path + [next]\n      else:\n        stack.append((next, path + [next]))\n\ngraph = {'A': set(['B', 'C']),\n         'B': set(['A', 'D', 'E']),\n         'C': set(['A', 'F']),\n         'D': set(['B']),\n         'E': set(['B', 'F']),\n         'F': set(['C', 'E'])}\n\nprint(dfs(graph, 'A', 'F')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Vector3D:\n    def __init__(self, x=0, y=0, z=0):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    def add(self, vector):\n        x = self.x + vector.x\n        y = self.y + vector.y\n        z = self.z + vector.z\n        return Vector3D(x,y,z)\n\n    def subtract(self, vector):\n        x = self.x - vector.x\n        y = self.y - vector.y\n        z = self.z - vector.z\n        return Vector3D(x,y,z)\n\n    def magnitude(self):\n        return (self.x**2 + self.y**2+.self.z**2)**0.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr.sort() \n# arr is now [1, 5, 7, 8, 10] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import bradata.utils\nimport bradata.connection\n\nimport os\nimport io\nfrom zipfile import ZipFile\nimport pandas as pd\nimport glob\nimport yaml\nimport shutil\n\nimport luigi\nimport luigi.contrib.postgres\n\n\ndef _find_header(data_type, year, path):\n    with open(path, 'r') as f:\n        data = yaml.load(f)\n    a = data[data_type]['columns']\n\n    final = min(list(a.keys()))\n    for k in a.keys():\n        if int(year) >= k:\n            final = k\n\n    return str(a[final])\n\n\nclass Get_Headers(luigi.Task):\n\n    def output(self):\n        return luigi.LocalTarget(os.path.join(bradata.__download_dir__, 'tse', 'config', 'headers.csv'))\n\n    def run(self):\n        conn = bradata.connection.Connection()\n\n        result = conn.perform_request('https://raw.githubusercontent.com/labFGV/bradata/master/bradata/tse/headersTSE.csv')\n\n        if result['status'] == 'ok':\n            result = result['content']\n        else:\n            print('File was not dowloaded')\n\n        with self.output().open('w') as o_file:\n            o_file.write(result)\n\n\nclass Get_Header_Relation(luigi.Task):\n    def output(self):\n        return luigi.LocalTarget(os.path.join(bradata.__download_dir__, 'tse', 'config', 'header_relation.yaml'))\n\n    def run(self):\n        conn = bradata.connection.Connection()\n\n        result = conn.perform_request(\n            'https://raw.githubusercontent.com/labFGV/bradata/master/bradata/tse/header_relation.yaml')\n\n        if result['status'] == 'ok':\n            result = result['content']\n        else:\n            raise Warning ('Header Relation was not dowloaded')\n\n        with self.output().open('w') as o_file:\n            o_file.write(result)\n\n\nclass Download_Unzip(luigi.Task):\n    \"\"\"\n    Download and unzip\n    \"\"\"\n\n    year = luigi.Parameter()\n    data_type = luigi.Parameter()\n\n    def output(self):\n        \"\"\"\n        :return: the target output for this task.\n        :rtype: object (:py:class:`luigi.target.Target`)\n        \"\"\"\n        return luigi.LocalTarget(os.path.join(bradata.__download_dir__, 'tse', 'temp', '{}_{}'.format(self.data_type, self.year)))\n\n    def requires(self):\n        \"\"\"\n        * :py:class:`~.Streams`\n        :return: list of object (:py:class:`luigi.task.Task`)\n        \"\"\"\n        return Get_Header_Relation()\n\n    def run(self):\n        conn = bradata.connection.Connection()\n\n        with self.input().open('r') as input_file:\n            base_url = self.select_url(self.data_type)\n\n            url = base_url + bradata.utils._treat_inputs(self.year) + '.zip'\n\n            result = conn.perform_request(url, binary=True)\n\n            if result['status'] == 'ok':\n                result = result['content']\n            else:\n                raise Exception ('File was not dowloaded')\n\n            zipfile = ZipFile(io.BytesIO(result))\n\n            zipfile.extractall(self.output().path)\n\n    def select_url(self, data_type):\n\n        with open(self.input().path, 'r') as f:\n            data = yaml.load(f)\n\n        return data[data_type]['url']\n\n\nclass Aggregat(luigi.Task):\n    \"\"\"\n    Get all states csv files aggregate it to a unique file with header\n    \"\"\"\n\n    year = luigi.Parameter()\n    data_type = luigi.Parameter()\n\n    def requires(self):\n        \"\"\"\n        \"\"\"\n\n        return {'download': Download_Unzip(data_type=self.data_type, year=self.year),\n                'headers': Get_Headers(),\n                'header_relation': Get_Header_Relation()}\n\n    def output(self):\n        \"\"\"\n        \"\"\"\n        return luigi.LocalTarget(os.path.join(bradata.__download_dir__, 'tse', '{}_{}.csv'.format(self.data_type, self.year)))\n\n    def run(self):\n\n        headers = pd.read_csv(self.input()['headers'].path)\n        files = glob.glob(self.input()['download'].path + \"/*.txt\".format(self.year))\n\n        header = _find_header(self.data_type, self.year, self.input()['header_relation'].path)\n\n        df_list = []\n        for filename in sorted(files):\n            df_list.append(\n                pd.read_csv(filename, sep=';', names=headers[header].dropna().tolist(), encoding='latin1'))\n\n\n        full_df = pd.concat(df_list)\n\n        full_df.to_csv(self.output().path, index=False, encoding='utf-8')\n\n        print('Completed! Access your file at',\n              os.path.join(bradata.__download_dir__, 'tse', '{}_{}.csv'.format(self.data_type, self.year)))\n\n\nclass ToSQl(luigi.Task):\n\n    data_type = luigi.Parameter()\n    year = luigi.Parameter()\n\n    def requires(self):\n        return Aggregat(data_type=self.data_type, year=self.year)\n\n    def run(self):\n        with open('bradata/tse/config_server.yaml', 'r') as f:\n            server = yaml.load(f)\n\n        host = server['host']\n        database = server['database']\n        user = server['user']\n        password = server['password']\n        schema = 'tse'\n        table = '{}_{}'.format(self.data_type, self.year)\n\n        from sqlalchemy import create_engine\n        url = 'postgresql://{}:{}@{}/{}'\n        url = url.format(user, password, host, database)\n        engine = create_engine(url)\n\n        headers = pd.read_csv(self.input().path)\n        print('Inserting data do DB. It can take a while...')\n        headers.to_sql(table, engine, schema=schema, if_exists='replace')\n        print('The data is on your DB! Check schema {}, table {}'.format(schema, table))\n\n        with self.output().open('w') as f:\n            f.write('')\n\n    def output(self):\n        return luigi.LocalTarget(os.path.join(bradata.__download_dir__, 'tse', 'temp',\n                                              '{}_{}'.format(self.data_type, self.year), 'dumb.txt'))\n\n\nclass Fetch(luigi.WrapperTask):\n\n    data_types = luigi.Parameter()\n    years = luigi.Parameter()\n\n    def requires(self):\n\n        data_types = self.string_to_list(self.data_types)\n        years = self.string_to_list(self.years)\n\n        yield [ToSQl(data_type=t, year=y) for t in data_types for y in years]\n\n    def string_to_list(self, string):\n        string = string.replace(\"'\",'').replace('[', '').replace(']','').replace(' ', '')\n        return [s for s in string.split(',')]\n\n\nif __name__ == \"__main__\":\n    luigi.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def wordCount(text):\n    words = text.split(' ')\n\n    return len(words)\n\nprint(wordCount(\"I love programming\"))  # 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_with_maintained_order(array):\n    \"\"\"\n    Sort an array of integers\n    but maintain the order of similar elements.\n\n    Parameters\n    ----------\n    array : List[int]\n        The input array\n\n    Returns\n    -------\n    List[int]\n        The sorted array\n\n    \"\"\"\n    # Keep track of elements already seen\n    seen_elements = []\n\n    # Loop over the list in the original order\n    for element in array:\n        # Check if element appears for the first time\n        if element not in seen_elements:\n            # Only continue if it is the first appearance\n            seen_elements.append(element)\n            # Find the positions of all elements with this value\n            positions = [i for i, x in enumerate(array) if x == element]\n            # Resolve the order for this element\n            order = sorted([(i, array[i]) for i in positions], key=lambda x: x[1])\n            # Rearrange the elements in ascending order\n            for i, (pos, val) in enumerate(order):\n                array[pos] = i\n    return array but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_to_hms(time_in_seconds):\n    hours = int(time_in_seconds / 3600)\n    minutes = int((time_in_seconds % 3600) / 60)\n    seconds = int(time_in_seconds % 60)\n    return hours, minutes, seconds but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: const showMessage = (message) => console.log(message);\n\nconst thread = new Worker('./thread.js');\nthread.postMessage({message: 'Hello World!'});\n\n// thread.js\nonmessage = (msg) => postMessage(showMessage(msg.data.message)); but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import calendar\n\nc = calendar.TextCalendar(calendar.SUNDAY)\nstr = c.formatyear(2019, 2, 1, 1, 3)\nprint (str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_password(length, strength):\n    \"\"\"Generate a random password given a length and strength.\"\"\"\n    if strength == 'weak':\n        return ''.join(random.choices(string.ascii_letters, k=length))\n    elif strength == 'medium':\n        return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\n    elif strength == 'strong':\n        return ''.join(random.choices(string.ascii_letters + string.digits + string.punctuation, k=length)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def all_subsets(lst):\n    \n    res = [[]]\n    \n    for elem in lst:\n        res += [subset + [elem] for subset in res]\n        \n    return res\nall_subsets([1,2,3]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printPascalTriangle(n): \n\n\tfor line in range(1, n + 1): \n\t\tC = 1; # used to represent C(line, i) \n\t\tfor i in range(1, line + 1): \n\t\t\t# The first value in a line is always 1 \n\t\t\tprint(C, end = \" \"); \n\t\t\tC = int(C * (line - i) / i); # Calculating \n\t\t\t\t\t\t\t\t\t\t# the next value  \n\t\tprint(\"\"); # entered to move to the next line \n\n# Driver Code \nn = 5; \nprintPascalTriangle(n); \n\nOutput:\n1 \n1 1 \n1 2 1 \n1 3 3 1 \n1 4 6 4 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPrime(x): \n\tif x > 1: \n\t\tfor i in range(2,x): \n\t\t\tif (x % i) == 0: \n\t\t\t\treturn False\n\t\telse: \n\t\t\treturn True\n\telse: \n\t\treturn False\n\nnum = 21\nif(isPrime(num)) : \n\tprint(num, \"is a prime number\") \nelse : \n\tprint(num, \"is a composite number\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_items = ['apple', 'banana', 'pear', 'strawberry']\n\nindex = 0\nwhile index < len(list_items):\n   item = list_items[index]\n   print(item)\n   index += 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def flatten_list(input_list): \n    flattened_list = [] \n      \n    # traversing the 2d list  \n    for row in input_list: \n        # traversing the row \n        for column in row: \n            flattened_list.append(column) \n    return flattened_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: emp_dict = {\n    'name':[], \n    'salary':[], \n    'designation':[]\n}; but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class FrequencyTracker:\n    def __init__(self):\n        self.dictionary = {}\n    \n    def add_word(self,word):\n        if word in self.dictionary:\n            self.dictionary[word] += 1\n        else:\n            self.dictionary[word] = 1\n    \n    def get_frequency(self,word):\n        if word in self.dictionary:\n            return self.dictionary[word]\n        else:\n            return 0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import libraries\nimport numpy as np\nimport tensorflow as tf\n\n# define the neural network\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Flatten(input_shape=(28, 28)),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(3, activation='softmax')\n])\n\n# compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# fit the model\nmodel.fit(x_train, y_train, epochs=5)\n\n# evaluate the model\nloss, accuracy = model.evaluate(x_test, y_test)\nprint(\"Loss: {}, Accuracy: {}\".format(loss, accuracy)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\nx = np.array([1,2,3,4,5])\ny = np.array([2,3,4,5,6])\n\ncorr = np.corrcoef(x, y)\n\nprint(corr[0][1]) # 0.98999999999999999 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_list_tail_recursive(arr, reversed_list=None):\n    if reversed_list is None:\n        reversed_list = []\n    if len(arr) == 0:\n        return reversed_list\n    reversed_list.append(arr.pop())\n    return reverse_list_tail_recursive(arr, reversed_list)\n\nif __name__ == \"__main__\":\n    random_list = [10, 20, 30, 40, 50]\n    reversed_list = reverse_list_tail_recursive(random_list)\n    print(reversed_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\n# Data\npositive_texts = [\n    \"I really enjoyed the movie. It was really entertaining and I had a great time.\",\n    \"I loved the movie. It was really funny and I can't wait to watch it again!\",\n    \"The movie was great! I had a lot of fun and I would highly recommend it to others.\"\n]\n\nnegative_texts = [\n    \"I didn't like the movie at all. It was boring and I couldn't understand the plot.\",\n    \"I didn't enjoy the movie. It was too slow and there weren't enough action scenes.\",\n    \"I thought the movie was terrible. The plot was confusing and the acting was bad.\"\n]\n\nlabels = [1, 1, 1, 0, 0, 0]\n\n# Preprocessing\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts(positive_texts + negative_texts)\n\ndata = tokenizer.texts_to_sequences(positive_texts + negative_texts)\ndata = pad_sequences(data, maxlen=100)\n\n# Create the model\nmodel = keras.Sequential([\n    keras.layers.Embedding(len(tokenizer.word_index) + 1, 16),\n    keras.layers.GlobalAveragePooling1D(),\n    keras.layers.Dense(1, activation='sigmoid')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(data, labels, epochs=20)\n\n# Evaluate the model\nmodel.evaluate(data, labels) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a list of prime numbers ranging from 2 to n.\n\"\"\"\n\ndef prime_list(n):\n    prime_list = []\n    for num in range(2, n + 1):\n        for prime in prime_list:\n            if num % prime == 0: \n                break\n        else: \n            prime_list.append(num)\n    return prime_list\n\nif __name__ == '__main__':\n    n = 15\n    print(prime_list(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# List of ten random colors\ncolors = [\"#000000\", \"#FFFFFF\", \"#A52A2A\", \"#008080\", \"#DAA520\", \"#008000\", \"#FF00FF\", \"#808080\", \"#800000\", \"#808000\", \"#FFC0CB\"]\n\n# Function that randomly selects five colors from the list\ndef generate_colors():\n random.shuffle(colors)\n palette = colors[:5]\n return palette\n\n# Generates and prints random color palette\nprint (generate_colors()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nfor n in range(1, 101):\n    if is_prime(n):\n        print(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: @app.route('/parseJSON', methods=['POST'])\ndef parse_json():\n    data = request.get_json()\n    name = data['data']['name']\n    age = data['data']['age']\n\n    response = {\n        \"name\": name,\n        \"age\": age\n    }\n    return jsonify(response) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insert_element(arr, position, element):\n    arr.insert(position, element)\n\nprint(insert_element([1, 4, 5, 7], 2, 6)) # Output: [1, 4, 6, 5, 7] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def levenshtein(s1, s2):\n    l1 = len(s1)\n    l2 = len(s2)\n  \n    matrix = [[0] * (l2 + 1) for _ in range(l1 + 1)]\n  \n    for i in range(l1 + 1):\n        matrix[i][0] = i\n    for j in range(l2 + 1):\n        matrix[0][j] = j\n  \n    for i in range(1, l1 + 1):\n        for j in range(1, l2 + 1):\n            if s1[i - 1] == s2[j - 1]:\n                cost = 0\n            else:\n                cost = 1\n            matrix[i][j] = min(\n                matrix[i - 1][j] + 1,\n                matrix[i][j - 1] + 1,\n                matrix[i - 1][j - 1] + cost,\n            )\n  \n    return matrix[l1][l2] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def solve_equation(equation): \n    l, r = equation.split('=') \n      \n    left = 0\n    right = 0\n    sign = 1\n    cur_val = 0\n  \n    for x in l: \n        if x == '+': \n            left += sign * cur_val \n            sign = 1\n            cur_val = 0\n        elif x == '-': \n            left += sign *cur_val \n            sign = -1\n            cur_val = 0\n        elif x.isdigit(): \n            cur_val = cur_val * 10 + int(x) \n  \n    left += sign * cur_val \n    sign = 1\n    cur_val = 0\n      \n    for x in r: \n        if x == '+': \n            right += sign * cur_val \n            sign = 1\n            cur_val = 0\n        elif x == '-': \n            right += sign *cur_val \n            sign = -1\n            cur_val = 0\n        elif x.isdigit(): \n            cur_val = cur_val*10 + int(x) \n    \n    right += sign * cur_val \n  \n    ans = (right - left) // 2\n    return ans\n\nprint(solve_equation(\"2x+3=7\")) but is not the same. just give one example and only return the code."}
