{"prompt": "make some code that functions the same as the following code: count = sentence.count(word)\nprint(count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\ndata = pd.read_csv('sensor_data.csv')\n\n# Separate features and labels\nX = np.array(data.drop(['label'],1))\ny = np.array(data['label'])\n\n# Split dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Create the model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\naccuracy = model.score(X_test, y_test)\nprint('Model accuracy is:', accuracy)\n\n# Save the model\nimport pickle\npickle.dump(model, open('model.pkl','wb')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: a = 10\nb = 0\nwhile a > 0:\n b += a\n a //= 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPrime(num):\n  if num < 2:\n    return False\n\n  if num ==2:\n    return True\n\n  for i in range(2, num):\n    if num % i == 0:\n      return False\n\n  return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\n\nfor i in range(1, 11):\n print(i)\n time.sleep(1) # delay for one second but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def has_two_elements(arr):\n    return len(arr) >= 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add(a, b):\n    print('Sum =', a + b)\n    \nadd(5, 6) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\n# connect to SQL database\ndb = sqlite3.connect('example.db')\n\n# create cursor\ncur = db.cursor()\n\n# execute query\ncur.execute('SELECT * FROM \"example\"')\n\n# fetch all rows\nrows = cur.fetchall()\n\n# display all rows\nfor row in rows:\n    print row but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generatemaxcombo(arr):\n    max_combo = []\n    value = 1\n    for x in arr:\n        value = value * x\n        max_combo.append(value)\n    return max_combo\n\narr = [4, 2, 8, 12]\nmax_combo = generatemaxcombo(arr)\n\nprint(\"The maximum combination of {} is: {}\".format(arr, max_combo)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n   if n<0: \n      print(\"Incorrect input\") \n   # First Fibonacci number is 0 \n   elif n==1: \n      return 0\n   # Second Fibonacci number is 1 \n   elif n==2: \n      return 1\n   else: \n      return Fibonacci(n-1)+Fibonacci(n-2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup \n\n# Request page\n URL = 'https://example.com/product' \n page = requests.get(URL)\n\n# Parse page \nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Extract the price \nprice = soup.find(\"span\", class_=\"price\").get_text()\nprint(\"Price of the product is: \",price) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: int i = 0;\nwhile (i < 5) \n{\n    System.out.println(i);\n    i++;\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd \nimport sqlite3\n\nconn = sqlite3.connect('example_db.db')\n\ndf = pd.read_sql('SELECT * FROM orders', conn)\n\nsales_report = df.groupby('product')['quantity', 'price'].sum().reset_index()\nsales_report['total_sales'] = sales_report['quantity'] * sales_report['price']\n\nprint(sales_report)\n\n# Output:\n#    product  quantity  price  total_sales\n# 0  Product1         3    100         300\n# 1  Product2         4    150         600 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from datetime import datetime\n\ndef days_gap(date1, date2):\n    d1 = datetime.strptime(date1,\"%m/%d/%Y\")\n    d2 = datetime.strptime(date2,\"%m/%d/%Y\")\n    day_gap = abs((d2 - d1).days)\n    return day_gap but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_employee(employee_id):\n    conn = sqlite3.connect('database.db')\n    cursor = conn.cursor()\n    query = \"SELECT * FROM employee WHERE id=?\"\n    result = cursor.execute(query, (employee_id,))\n    row = result.fetchone()\n    if row:\n        employee = {\n            'name': row[1],\n            'age': row[2],\n            'designation': row[3]\n        }\n        return employee\n    else:\n        return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Patient:\n    def __init__(self,name, age, medical_history):\n        self.name = name\n        self.age = age\n        self.medical_history = medical_history\n        \n    def get_name(self):\n        return self.name\n        \n    def get_age(self):\n        return self.age\n    \n    def get_history(self):\n        return self.medical_history but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_primes(start, end):\n    # A list to store prime numbers\n    primes = []\n \n    # Iterate from start to end and\n    # check if number is prime or not\n    for num in range(start, end + 1):\n        isPrime = True\n        for i in range(2, num):\n            if (num % i == 0):\n                isPrime = False\n        if isPrime:\n            primes.append(num)\n \n    return primes but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_list():  \n  my_list = []\n  for i in range(0, 10001):\n    my_list.append(i)\n\n  return my_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_numbers(list):\n    new_list = [] \n    for number in list:\n        new_list.append(number + 5) \n    return new_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bin_from_text(text):\n    bin_text = \"\"\n    for char in text:\n        bin_text += bin(ord(char)).lstrip(\"0b\") + \" \"\n    return bin_text but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from subprocess import *\nimport re\nimport treetaggerwrapper\nimport sparqlQuerypy\nfrom bs4 import BeautifulSoup\n\nCONSTANTKEYVERBS=\"die, died, death, born, birth, sworn in\" #Set of words that if present in the sentence, then don't discard the sentence, we are interested.\ntagger = treetaggerwrapper.TreeTagger(TAGLANG = 'en', TAGDIR = '/home/vedu29/python/Gsoc/treetagger')\n\n\ndef jarWrapper(*args): # The helper function to use the jar file.\n    process = Popen(['java', '-jar']+list(args), stdout=PIPE, stderr=PIPE)\n    ret=[]\n    while process.poll() is None:\n        line = process.stdout.readline()\n        if line != '' and line.endswith('\\n'):\n            ret.append(line[:-1])\n        stdout, stderr = process.communicate()\n        ret += stdout.split('\\n')\n        if stderr != '':\n            ret += stderr.split('\\n')\n        ret.remove('')\n        return ret\n\ndef returnProperty(word): #helper function to map the verb to a property. This will be small considering the number of date properties in DBpedia.\n    if word in ['death', 'die']: return 'http://dbpedia.org/ontology/deathDate'\n    if word in ['birth', 'born', 'bear']: return 'http://dbpedia.org/ontology/birthDate'\n\n\ndef normalizeAnnotations(sentence): # helper function to remove the references annotation, that appear as square brackets at the end of the sentence.\n    return re.sub(r'\\[[0-9]*\\]', ' ', sentence)\n\ndef sentenceSplitter(sentence): # helper regular function to correctly find end of sentences.\n    return re.split(r'(?<!\\w\\.\\w.)(?<![A-Z][a-z]\\.)(?<=\\.|\\?)\\s', sentence)\n    \ndef normaliseResult(result):\n    normRes=[]\n    for sentence in result:\n        sent=normalizeAnnotations(sentence)\n        normRes += sentenceSplitter(sent)\n    return normRes\n\ndef findAndGenericAnnotateTime(sentence): #Replacing heidelTime tagged Timex tags to a generic 'TIME' so that treeTagger can work its magic without hiccups.\n    return re.sub('<TIMEX3((?!<TIMEX3).)*</TIMEX3>', 'TIME', sentence)\n\ndef treetag(sentence, encoding = None): # TreeTagger helper function.\n    if encoding != None:\n        return treetaggerwrapper.make_tags(tagger.tag_text(unicode(sentence, \"utf-8\")))\n    else:\n        return treetaggerwrapper.make_tags(tagger.tag_text(sentence))\n\ndef returnKeyverbs(): #formats the key verbs above.\n    return '|'.join(verb for verb in CONSTANTKEYVERBS.split(', '))\n\n\ndef findSubVerbsTime(tagsentence): # The main helper function that figures out the subject in the sentence and finds the correct core verbs marked by an '*'\n    pos=[]\n    pos2=[]\n    seenSubject=False\n    seenVerb=False\n    lastfew=0\n    for i, tags in enumerate(tagsentence):\n        if tags.pos=='NP' or tags.pos=='PP':\n            pos += [tags.word]\n            seenSubject=True\n            lastfew+=1\n        if re.match(u'V..|V.', tags.pos) != None and seenSubject:\n            if not seenVerb:\n                subject = pos[-lastfew:]\n                pos2 += [[subject]]\n            if re.match(u'VB.', tags.pos) != None:\n                pos2[-1] += [tags.word]\n            else:\n                pos2[-1] += [tags.word+'*']\n                seenVerb=True\n        if re.match(u'V..|V.', tags.pos) == None and seenVerb:\n            seenVerb=False\n            seenSubject=False\n            lastfew=0\n    return pos2\n\ndef lemmatizeMainVerb(item):\n    for verb in item[1:]:\n        if '*' in verb:\n            return treetag(verb)[0].lemma\n\n\ndef listTimes(sentence): # uses beautiful soup to get the date information.\n    soup = BeautifulSoup(sentence, 'html.parser')\n    return soup.find_all('timex3')\n\n\ndef main(args):\n    result = jarWrapper(*args)\n    for sentence in normaliseResult(result):\n        \n        sent=findAndGenericAnnotateTime(sentence)\n    \n        m = re.match(r\"(?P<first_part>.*) (?P<predicate>%s) (?P<second_part>.*)\"%(returnKeyverbs()), sent) #scans the sentences for this pattern.\n        if m!=None:       \n\n            left=treetag(m.group('first_part'), \"utf-8\")\n            middle=treetag(m.group('predicate'), \"utf-8\")\n            right=treetag(m.group('second_part'), \"utf-8\")\n            tagsentence = left + middle + right\n\n            if 'TIME' in m.group('first_part') or 'TIME' in m.group('second_part'): #Skip sentence if not date details.\n\n                subVerbTime = findSubVerbsTime(tagsentence)\n                for item in subVerbTime:\n                    subject=\" \".join(thing for thing in item[0])\n                    if subject.lower() in ['he','she', 'it']:\n                        subject=previousSubject\n                    annotate = sparqlQuerypy.findAnnotation(subject)\n                    annotatedSubject = annotate[0]['s']['value']\n                    previousSubject = subject  #heuristic that subject of this pronoun is in deed the previous subject, (not well thought through!)\n                    verbLemma=lemmatizeMainVerb(item)\n                    if verbLemma != None: prop=returnProperty(verbLemma)\n\n                timexList = listTimes(sentence)\n\n                i=0\n                while timexList[i]['type']not in [\"DATE\",\"TIME\"]:\n                    i+=1\n                time= timexList[i]['value']\n                date= sparqlQuerypy.findDate(annotatedSubject, prop)\n                if len(date) != 0:\n                    date= date[0]['z']['value']\n                    print '- - - - - - - - - - - - - - - - \\n \\n'\n                    print sentence\n                    print '     '\n                    print 'The subject is:', subject\n                    print 'The annotated subject is:', annotatedSubject\n                    print 'The property is:', prop\n                    print 'Date according to dbpedia:', date\n                    print 'Date mined from the text:', time\n                    print '\\n \\n'\n\nif __name__=='__main__':\n    args = ['de.unihd.dbs.heideltime.standalone.jar', 'input']\n    result = jarWrapper(*args)\n    tagger = treetaggerwrapper.TreeTagger(TAGLANG = 'en', TAGDIR = '/home/vedu29/python/Gsoc/treetagger')\n    \n    main(args)\n            \n\n            \n    \n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = 'https://example.com/api/v1/data'\n\nresponse = requests.get(url)\ndata = response.json()\n\n# process the data here\n# ... but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://www.example.com\"   \nresp = requests.get(url) \nsoup = BeautifulSoup(resp.text, 'html.parser') \nlinks = soup.find_all('a', href=True) \n\nfor link in links:\n print(link['href']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Book:\n    def __init__(self, title, author, isbn):\n        self.title = title\n        self.author = author\n        self.isbn = isbn but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def group_similar_items(list): \n    grouped_items = {} \n\n    for item in list: \n        if item in grouped_items: \n            grouped_items[item] += 1\n        else: \n            grouped_items[item] = 1\n\n    print(grouped_items)\n\ngroup_similar_items([\"dog\", \"cat\", \"cat\", \"fox\", \"dog\", \"elephant\"]) \n# Output: {'dog': 2, 'cat': 2, 'fox': 1, 'elephant': 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Load the data\ndata = [\n{'id':1, 'age':25, 'gender':'Male', 'priority':'High'},\n{'id':2, 'age':28, 'gender':'Male', 'priority':'Low'},\n{'id':3, 'age':35, 'gender':'Female', 'priority':'High'},\n{'id':4, 'age':18, 'gender':'Female', 'priority':'Low'},\n{'id':5, 'age':45, 'gender':'Male', 'priority':'Low'},\n{'id':6, 'age':27, 'gender':'Female', 'priority':'High'},\n]\n\n# Convert data into a pandas DataFrame\ndf = pd.DataFrame(data)\n\n# Create target variable\ndf['churn'] = [0, 0, 0, 1, 1, 0]\n\n# Convert categorical variables to dummy variables\ndf_dummy = pd.get_dummies(df, columns = ['gender', 'priority'], drop_first = True)\n\n# Split the data into train and test\nX = df_dummy.drop(['id', 'churn'], axis = 1)\ny = df_dummy['churn']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# Feature scaling\nsc = StandardScaler() \nX_train = sc.fit_transform(X_train) \nX_test = sc.transform(X_test)\n\n# Create the model\nclf = DecisionTreeClassifier() \nclf.fit(X_train, y_train) \n\n# Make predictions\ny_pred = clf.predict(X_test)\n\n# Evaluate the model\ny_prob = clf.predict_proba(X_test)[:, 1]\n\nprint(\"Accuracy:\", clf.score(X_test, y_test)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(numbers, x):\n    \"\"\"This function will perform a linear search on a list of numbers and return the index of the number if it is present in the list.\"\"\"\n    for i in range(len(numbers)):\n        if numbers[i] == x:\n            return i \n    # if the number is not found\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_email(email_list):\n    spam_count = 0\n    ham_count = 0\n    uncertain_count = 0\n    for email in email_list:\n        if 'offer' in email or 'discount' in email:\n            spam_count += 1\n        elif 'welcome' in email or 'company' in email:\n            ham_count += 1\n        else:\n            uncertain_count += 1\n    return {'spam': spam_count, 'ham': ham_count, 'uncertain': uncertain_count} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndef lambda_handler(event, context):\n\n question = event[\"queryStringParameters\"][\"question\"]\n\n if question == \"What is the capital of France?\":\n  response = {\n   \"statusCode\": 200,\n   \"body\": json.dumps({\"answer\": \"Paris\"})\n  }\n else: \n  response = {\n   \"statusCode\": 200,\n   \"body\": json.dumps({\"answer\": \"Sorry, I don't know the answer to that.\"})\n  }\n \n return response but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def square_root(number):\n    return number ** 0.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class BankAccount:\n def __init__(self, name, balance):\n self.name = name\n self.balance = balance\n\n def deposit(self, amount):\n self.balance += amount\n\n def withdraw(self, amount):\n if self.balance < amount:\n raise ValueError('Insufficient funds')\n self.balance -= amount\n\n def view_balance(self):\n return self.balance\n\n def transfer_money(self, other_account, amount):\n self.withdraw(amount)\n other_account.deposit(amount) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import cross_validate, train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\nstyle.use(\"seaborn-whitegrid\")\n\n# Load the dataset\ndf = pd.read_csv(\"dataset.csv\")\n\n# Preprocess the data\nle = preprocessing.LabelEncoder()\ndf['Sex'] = le.fit_transform(df['Sex'])\n\n# Feature selection\nX = df[['Pclass','Sex','Age','SibSp','Parch','Fare']]\ny = df['Survived']\n\n# Split into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\n\n# Create the model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\naccuracy = accuracy_score(y_test, y_pred)\nprint('Accuracy: ', accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: str = \"Hello, world\"\nsearch_substring = \"world\" \nreplace_substring = \"Earth\" \n\ndef replace_substring(str, search_substring, replace_substring):\n    if search_substring in str:\n        str = str.replace(search_substring, replace_substring)\n    return str\n\nprint(replace_substring(str, search_substring, replace_substring)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_sum(nested_list):\n    sum = 0\n    for item in nested_list:\n        for num in item:\n            sum += num\n    return sum\n\nnested_list = [[1,2], [3,4], [6,7]]\nprint(calculate_sum(nested_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\n# input string\nstring = \"In the morning, the sun rises in the east and sets in the west. In the evening, the stars come out and shine in the night sky. The moon rises in the east and sets in the west.\"\n\nwords = string.split(\" \")\n\n# set that contains the frequnt phrases\nphrases = set()\n\n# loop over the words in the string\nfor index, word in enumerate(words):\n    # loop over the words ahead of the current word\n    for ahead in range(index+1, min(index+4, len(words))):\n        # check if the phrase exists in the string\n        if \" \".join(words[index:ahead+1]) in string:\n            # add the phrase to the set\n            phrases.add(\" \".join(words[index:ahead+1]))\n\n# print the phrases\nprint(phrases) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_string(length):\n  # Generate a random string of given length\n  letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n  return ''.join(random.choice(letters) for i in range(length)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \n\nfrom sklearn.ensemble import RandomForestClassifier\n\n#data \nX =  np.array([[1,2,3], [1,2,3], [4,5,6], [4,5,6]])\ny = np.array([1,1,2,2])\n\n#Create a Random Forest Classifier\nclf = RandomForestClassifier(max_depth=2, random_state=0)\n\n#Training the model\nclf.fit(X,y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: @app.route(\"/get_top_user\", methods=[\"GET\"])\ndef get_top_user():\n    user_list = Users.query.order_by(desc(Users.score)).first()\n    return jsonify(user_list.serialize()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_subsets(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                count += 1\n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Item:\n    def __init__(self, name, description, price):\n        self.name = name\n        self.description = description\n        self.price = price\n\n    def print_info(self):\n        print(\"Name:\", self.name)\n        print(\"Description:\", self.description)\n        print(\"Price:\", self.price) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize_linear_equations(equations):\n \n    num_variables = len(equations[0]) - 1\n    system_of_equations = [0] * (num_variables + 1)\n \n    for equation in equations:\n        for i, coefficient in enumerate(equation):\n            system_of_equations[i] += coefficient\n \n    solution = [0] * num_variables\n \n    # solve the linear equations using Gaussian elimination\n    for i in range(num_variables):\n        divisor = system_of_equations[i][i]\n        for j in range(i, num_variables + 1):\n            system_of_equations[i][j] /= divisor\n        for j in range(i + 1, num_variables):\n            multiplier = system_of_equations[j][i]\n            for k in range(i, num_variables + 1):\n                system_of_equations[j][k] -= multiplier * system_of_equations[i][k]\n \n    for i in range(num_variables - 1, -1, -1):\n        solution[i] = system_of_equations[i][num_variables]\n        for j in range(num_variables - 1, i, -1):\n            solution[i] -= system_of_equations[i][j] * solution[j]\n \n    return solution but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def permutations(str):\n\tif len(str) <= 1:\n\t\treturn [str]\n\n\tperms = [] \n\tfor i in range(len(str)):\n\t\trest_strings = str[:i] + str[i+1:]\n\t\tfor perm in permutations(rest_strings):\n\t\t\tperms.append(str[i:i+1] + perm)\n\t\n\treturn perms\n\nstr = \"abc\"\nperms = permutations(str)\nprint(perms) # ['abc', 'acb', 'bac', 'bca', 'cab', 'cba'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import flask\nimport requests\nimport json\nfrom textblob import TextBlob\n\napp = flask.Flask(__name__)\n\n@app.route('/sentiment', methods=['POST'])\ndef sentiment_analysis():\n data = flask.request.get_json()\n text = str(data['sentence'])\n \n # Retrieve sentiment score\n sentiment = TextBlob(text).sentiment.polarity\n \n # Map sentiment score to 0-5 scale\n sentiment_mapped = round(5 * sentiment)\n \n # Return the sentiment score\n return flask.jsonify({'sentiment': sentiment_mapped})\n\nif __name__ == '__main__':\n app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def area(self):\n        return 3.14 * (self.radius ** 2)\n    \n    def circumference(self):\n        return 2 * 3.14 * self.radius\n\ncircle1 = Circle(7)\nprint(\"Area of circle1:\", circle1.area())\nprint(\"Circumference of circle1:\", circle1.circumference()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def modifiedArrangement(arr):\n    arr.sort() \n    result = [] \n\n    for i in range(len(arr)) : \n        result.append((arr[i]+1) - 1) \n        result.append(arr[i]) \n\n    return result \n\narr = [1, 4, 5, 2, 9, 0]\n# modified Arrangement \nresult = modifiedArrangement(arr) \n\n# Print the result \nprint(\"Modified arrangement : \" + str(result)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import collections\nimport re\n\n# clean and preprocess text\nwords = re.sub('\\W+', ' ', input_text).split()\n\n# find most common words\nword_counter = collections.Counter(words)\n\n# print top five most common words\nprint(word_counter.most_common(5))\n\n# Output:\n[('a', 1), ('Python', 1), ('is', 1), ('powerful', 1), ('general', 1)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 11):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_sublist(lst, n):\n    return [lst[i:i+n] for i in range(0,len(lst),n)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    if n < 0:\n        raise ValueError(\"Input must be a positive integer\")\n    if n == 0:\n        return 1\n    res = 1\n    for i in range(2,n+1):\n        res *= i\n    return res but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: myList = [\"Apple\", \"Banana\", \"Cherry\"]\n\ndef reverse(myList):\n    myList.reverse()\n    return myList\n\nprint(reverse(myList))  # [\"Cherry\", \"Banana\", \"Apple\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.tokenize import sent_tokenize,word_tokenize\n \ninitial_text = \"This course gives an overview of natural language processing and how it can be used to analyze text. It will introduce some of the most common techniques like part-of-speech tagging, syntactic parsing, and named entity recognition. These techniques can be used to extract important information from text, classify documents, and generate summary documents.\"\n \nwords = nltk.word_tokenize(initial_text)\nsentences = nltk.sent_tokenize(initial_text)\n \nword_freq = {}\nfor word in words:\n    if (word in word_freq):\n        word_freq[word] += 1\n    else:\n        word_freq[word] = 1\n \nmost_frequent_words = sorted(word_freq, key=word_freq.get, reverse=True)[:5]\n \nsummary = []\nfor sentence in sentences:\n    if (any(word in sentence for word in most_frequent_words)):\n        summary.append(sentence)\n \nsummary = \" \".join(summary)\nprint(summary)\n\nPrinted output: This course gives an overview of natural language processing and how it can be used to analyze text. It will introduce some of the most common techniques like part-of-speech tagging, syntactic parsing, and named entity recognition. These techniques can be used to extract important information from text, classify documents, and generate summary documents. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculateBMI(weight, height):\n    # convert height from cm to m\n    height = height/100\n    \n    # calculate BMI\n    BMI = weight / (height*height)\n    \n    return BMI\n    \nif __name__ == '__main__':\n    weight = 80  # in kg\n    height = 180 # in cm\n    BMI = calculateBMI(weight, height)\n    print(f'The BMI of the person is {BMI}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compute_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * compute_factorial(n-1)\n\ndef compute_factorial_optimized(n):\n    result = 1\n\n    for i in range(2, n + 1):\n        result *= i\n\t\n    return result\n\nprint(compute_factorial_optimized(5)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class BankAccount:\n    def __init__(self, owner, balance):\n        self.owner = owner\n        self.balance = balance\n        \n    def deposit (self, amount):\n        self.balance += amount\n        return self.balance\n        \n    def withdraw (self, amount):\n        self.balance -= amount\n        return self.balance but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password(length):\n password = ''\n for i in range(length):\n password += random.choice(string.ascii_letters + string.digits)\n return password\n\nprint(generate_password(8)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class BankAccount:\n def __init__(self):\n self.balance = 0\n \n def deposit(self, amount):\n self.balance += amount\n \n def withdraw(self, amount):\n self.balance -= amount\n \n def show_balance(self):\n print(\"Your balance is $%.2f\" % self.balance) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n\nprint(fibonacci(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(a, b): \n    if a == 0 : \n        return b \n    return gcd(b % a, a) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\n# Input list of strings\ninput_strings = [\"This\",\"is\",\"a\",\"list\",\"of\",\"strings\",\"this\",\"list\",\"contains\",\"duplicate\",\"words\"]\n\n# Create empty list for unique words\noutput_words = []\n\n# Loop through each string\nfor current_string in input_strings:\n    # Split strings into separate words\n    current_words = current_string.split(\" \")\n\n    # Loop through each word\n    for current_word in current_words:\n        # If word is not already in the output list, add it\n        if current_word not in output_words:\n            output_words.append(current_word)\n\n# Print out list of unique words\nprint(output_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def levenshtein_distance(s1, s2):\n    n = len(s1)\n    m = len(s2)\n\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][0] = i\n    for j in range(1, m + 1):\n        dp[0][j] = j\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            cost = 0 if s1[i - 1] == s2[j - 1] else 1\n            dp[i][j] = min(dp[i - 1][j] + 1, \n                            dp[i][j - 1] + 1, \n                            dp[i - 1][j - 1] + cost)\n    return dp[-1][-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        swaped = False\n        for j in range(0, n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                swaped = True\n \n        if swaped == False:\n            break\n\n# Driver code\nnums = [3, 5, 1, 4, 7]\nbubble_sort(nums)\nprint(nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def days_in_year(year): \n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): \n        return 366 \n    else: \n        return 365 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class VendingMachine:\n    def __init__(self):\n        self.items = []\n        self.balance = 0\n\n    def insert_coin(self, amount):\n        self.balance += amount\n\n    def add_item(self, item):\n        self.items.append(item)\n\n    def remove_item(self, item):\n        self.items.remove(item)\n\n    def purchase_item(self, item):\n        if self.balance >= item.price:\n            self.items.remove(item)\n            self.balance -= item.price\n\n    def return_change(self):\n        change = self.balance\n        self.balance = 0\n        return change but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maxValue(nums):\n maxValue = -1\n operators = ['+', '-', '*', '/']\n\n for i in range(4):\n if operators[i] == '+':\n maxValue = max(maxValue, nums[0] + nums[1] + nums[2])\n elif operators[i] == '-':\n maxValue = max(maxValue, nums[0] - nums[1] - nums[2])\n elif operators[i] == '*':\n maxValue = max(maxValue, nums[0] * nums[1] * nums[2])\n else:\n maxValue = max(maxValue, nums[0] / nums[1] / nums[2])\n \n return maxValue\n \nprint(maxValue([10, 5, 3]))\n#Output: 15.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import stripe \n\ndef make_payment(token, amount):\n    stripe.api_key = \"sk_test_xxx\"\n\n    charge = stripe.Charge.create(\n        amount=amount,\n        currency=\"usd\",\n        source=token,\n        description=\"example charge\"\n    )\n\n    return charge\n\ntoken = \"tok_xxx\"\namount = 500\n\ncharge = make_payment(token, amount)\nprint(charge) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence = \"Hello World. This is a sentence.\"\nwords = sentence.split()\nword_count = len(words)\n\nprint(f\"The sentence has {word_count} words.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \n  \nclass LinkedList: \n    def __init__(self): \n        self.head = None\n\n    def printList(self): \n        temp = self.head \n        while (temp): \n            print (temp.data) \n            temp = temp.next\n  \n    def insertAtBeginning(self, new_data):  \n        new_node = Node(new_data) \n        new_node.next = self.head \n        self.head = new_node \n  \n    def insertAtEnd(self, new_data):\n        if self.head is None:\n            self.head = Node(new_data)\n            return \n        last = self.head\n        while(last.next):\n            last = last.next\n        last.next = Node(new_data)\n\n    def insertAfter(self, prev_node, new_data): \n        if prev_node is None: \n            print(\"Previous node should be in the linked list.\")\n            return\n        new_node = Node(new_data) \n        new_node.next = prev_node.next\n        prev_node.next = new_node \n   \n    def deleteNode(self, data):\n        temp = self.head \n        if (temp == None):\n            return  \n        if (temp.data == data):\n            self.head = temp.next\n            temp = None\n            return  \n        while (temp != None):\n            if temp.data == data:  \n                break  \n            prev = temp\n            temp = temp.next\n        if (temp == None):\n            return  \n        prev.next = temp.next\n        temp = None\n \n \nllist = LinkedList() \nllist.insertAtBeginning(2)\nllist.insertAtEnd(3)\nllist.insertAtBeginning(1) \nllist.insertAfter(llist.head.next, 4)\nllist.printList() \nllist.deleteNode(2)\nprint(\"Updated list:\")\nllist.printList() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_greater_number(x, y):\n    if x > y:\n        return x\n    else:\n        return y\n\nx = 7\ny = 10\ngreater_number = get_greater_number(x, y)\nprint(greater_number) # 10 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insert_word(string, word):\n  mid_index = len(string)//2\n  start_string = string[:mid_index]\n  end_string = string[mid_index:]\n  new_string = start_string+word+end_string\n  return new_string\n\nstring = 'I am a programmer'\nword = 'software'\n\nprint(insert_word(string, word)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def average_length(sentence):\n    words = sentence.split()\n    char_count = 0\n    \n    for word in words:\n        char_count += len(word)\n    \n    average_length = char_count / len(words)\n    return average_length\n\naverage_length(\"This is a sample sentence with 8 words.\") # output: 3.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compute_average_price(goods):\n    result = {k: v['price'] * v['quantity'] / v['quantity'] for k, v in goods.items()}\n    return result\n\ngoods = {\n    'apple':{'price': 3.99, 'quantity':3},\n    'banana':{'price': 4.50, 'quantity':2},\n    'pear':{'price': 6.00, 'quantity':5},\n    }\n\naverage_price = compute_average_price(goods)\n\nprint(\"Result:\",average_price) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n# create an instance of the sentiment analyzer\nsid = SentimentIntensityAnalyzer()\n\n# analysis function\ndef sentiment_analysis(doc):\n    # tokenize the document\n    doc_tokens = nltk.word_tokenize(doc)\n    # generate sentiment analysis scores\n    scores = sid.polarity_scores(doc)\n    # get the sentiment\n    sentiment = scores['compound']\n    if sentiment >= 0.05:\n        sentiment = 'positive'\n    elif sentiment <= -0.05:\n        sentiment = 'negative'\n    else:\n        sentiment = 'neutral'\n    # print the sentiment\n    print(\"The document is {}\".format(sentiment))\n\ntext = \"This is a positive sentiment statement\"\nsentiment_analysis(text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_numbers(length):\n    numbers = []\n    while len(numbers) < length:\n        num = random.randint(0, length)\n        if num not in numbers:\n            numbers.append(num)\n    return numbers\n\nrandom_numbers = generate_random_numbers(10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python\ndef combine_arrays(arr1, arr2):\n  combined_arr = [x for x in arr1]\n  for i in arr2:\n    combined_arr.append(i)\n  return combined_arr\n\n# JavaScript \nfunction combineArrays(arr1, arr2) {\n  let combinedArr = [...arr1];\n  for (let i of arr2) {\n    combinedArr.push(i);\n  }\n  return combinedArr;\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(a, b): \n  \n    # base case \n    if a == 0 :  \n        return b \n       \n    return gcd(b % a, a) \n  \na = 24\nb = 60\n  \nprint (\"GCD of\", a , \"and\", b ,\"is\", gcd(a, b)) \n# GCD of 24 and 60 is 12 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk \nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer \n   \ntext = 'That movie was so great'\n   \n# Create a SentimentIntensityAnalyzer object. \nsid_obj = SentimentIntensityAnalyzer() \n   \n# polarity_scores method of SentimentIntensityAnalyzer  \n# oject gives a sentiment dictionary. \n# which contains pos, neg, neu, and compound scores. \nsentiment_dict = sid_obj.polarity_scores(text) \n   \nprint(sentiment_dict) \n\nif sentiment_dict['compound'] >= 0.05 : \n\tprint(\"Positive\") \nelif sentiment_dict['compound'] <= - 0.05 : \n\tprint(\"Negative\") \nelse : \n\tprint(\"Neutral\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_elements(numbers_list):\n result = []\n for x in range(0, len(numbers_list), 2):\n result.append(numbers_list[x])\n return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import speech_recognition as sr \n\n# create an instance of the speech recognition engine\nr = sr.Recognizer()\n\n# obtain an audio source\nwith sr.Microphone() as source:\n    # capture input audio\n    audio = r.listen(source)\n\n# recognize the speech input\ntry:\n    text = r.recognize_google(audio)\n    print(text)\nexcept Exception as e:\n    print(e) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply_without_operator(x, y):\n # Handle cases when either of the numbers is 0\n if x == 0 or y == 0:\n return 0\n \n # Initialize a result variable to 0 \n res = 0\n \n # Loop through y number of times and add x to res\n for i in range(abs(y)):\n res += abs(x)\n \n # Handle negative inputs\n if x < 0 and y < 0:\n return res\n elif x < 0 or y < 0:\n return -res\n \n # Case when both inputs are positive\n else:\n return res but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import mysql.connector\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Connect to MySQL database\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"root\",\n  passwd=\"\",\n  database=\"scrape\"\n)\nmycursor = mydb.cursor()\n\n# Get the website content\nr = requests.get('https://www.example.com')\n\n# Parse the website content \nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# Scrape the data\nfor tag in soup.find_all('p'):\n    data = tag.get_text()\n\n    # Insert the data to the database\n    mycursor.execute('INSERT INTO data VALUES (%s)', (data,))\n    \nmydb.commit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def wrapped(f, seq):\n    for x in seq:\n        print(f(x))\n\ndef my_function(x):\n    return x * x\n\nsequence = [1, 2, 3, 4, 5]\n\nwrapped(my_function, sequence)\n\n# Output: \n1\n4\n9\n16\n25 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def permutations(arr):\n    if len(arr) == 0:\n        return []\n\n    if len(arr) == 1:\n        return [arr]\n\n    l = []\n    for i in range(len(arr)):\n        m = arr[i]\n        remL = arr[:i] + arr[i+1:]\n        for p in permutations(remL):\n            l.append([m] + p)\n    return l\n\npermutations([1, 2, 3]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_numeric(input_list): \n    \n    num_list = [] \n  \n    for item in input_list:\n        if type(item) == int or type(item) == float: \n            num_list.append(item) \n   \n    return num_list \n  \ninput_list = [4, 2, 1, 15.6, 'p', 'y', 5.8] \nprint(filter_numeric(input_list)) \n#Output: [4, 2, 1, 15.6, 5.8] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: 1\n      2   5\n    3   4\n\ndef print_tree(numbers):\n node_space = max([len(str(num)) for num in numbers]) + 2\n for i, num in enumerate(numbers):\n if i == 0:\n  left_space = 0\n else:\n  left_space = (2 * (len(numbers[:i]) - 1) + 1) * node_space + 1\n right_space = (2 * (len(numbers[i+1:]) - 1) + 1) * node_space - 1\n print(' ' * left_space + '\u2193' + str(num) + '\u2192' + ' ' * right_space) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport pandas as pd\n\n# Set the request URL\nurl = \"http://example.com/products\"\n\n# Send the request and retrieve the data\ndata = requests.get(url).json()\n\n# Convert the data into a pandas DataFrame\ndf = pd.DataFrame(data)\n\n# Print the resulting table\nprint(df) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_to_dict(strings):\n    return {string: len(string) for string in strings} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com'\n\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ntext = soup.find_all(text=True)\n\nfor t in text:\n if (t.parent.name not in ['style', 'script', 'head', 'title', 'meta', '[document]']):\n  print(t) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack:\n \n    def __init__(self):\n        self.stack = []\n \n    # Add to the top of stack\n    def push(self, data):\n        self.stack.append(data)\n \n    # Remove from the top of stack\n    def pop(self):\n        if self.stack:\n            return self.stack.pop()\n \n    # Peek top element\n    def peek(self):\n        return self.stack[-1]\n \n    # Check if stack is empty\n    def is_empty(self):\n        return not bool(self.stack) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_digits(number):\n if len(str(number)) == 1:\n  return number\n else:\n  return number % 10 + sum_of_digits(number // 10)\n\n# example\nsum_of_digits(1234)\n# returns 10 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def double_array(arr):\n    return [element * 2 for element in arr] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def cumulative_sum(lst):\n    sum = 0\n    for i in lst:\n        sum += i\n        print(sum)\n\ncumulative_sum([1, 2, 3, 4, 5]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -*- coding: utf-8 -*-\n\nimport dateutil.parser\nimport csv\nfrom os.path import dirname, join\nimport re\nimport string\nimport codecs\n\nimport requests\n\nfrom django.core.management.base import BaseCommand\n\nfrom candidates.utils import strip_accents\nfrom candidates.views.version_data import get_change_metadata\n\nfrom elections.models import Election\n\nUNKNOWN_PARTY_ID = 'unknown'\nUSER_AGENT = (\n    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 '\n    '(KHTML, like Gecko) Ubuntu Chromium/38.0.2125.111 '\n    'Chrome/38.0.2125.111Safari/537.36'\n)\n\n\ndef get_post_data(api, election_id, province):\n    from candidates.cache import get_post_cached\n    from candidates.election_specific import AREA_DATA, AREA_POST_DATA\n    ynr_election_data = Election.objects.get_by_slug(election_id)\n    area_key = (ynr_election_data.area_types.first().name,\n                 ynr_election_data.area_generation)\n    areas_by_name = AREA_DATA.areas_by_name[area_key]\n    if province != 'Burkina Faso':\n        province = strip_accents(province).upper()\n    area = areas_by_name[province]\n    post_id = AREA_POST_DATA.get_post_id(\n        election_id, area['type'], area['id']\n    )\n    post_data = get_post_cached(api, post_id)['result']\n    return ynr_election_data, post_data\n\n\ndef get_existing_popit_person(vi_person_id):\n    from candidates.models import PopItPerson\n    from candidates.popit import get_search_url\n    # See if this person already exists by searching for the\n    # ID they were imported with:\n    query_format = \\\n        'identifiers.identifier:\"{id}\" AND ' + \\\n        'identifiers.scheme:\"{scheme}\"'\n    search_url = get_search_url(\n        'persons',\n        query_format.format(\n            id=vi_person_id, scheme='import-id'\n        ),\n        embed='membership.organization'\n    )\n    results = requests.get(search_url).json()\n    total = results['total']\n    if total > 1:\n        message = \"Multiple matches for CI ID {0}\"\n        raise Exception(message.format(vi_person_id))\n    if total == 0:\n        return None\n    # Otherwise there was exactly one result:\n    return PopItPerson.create_from_dict(results['result'][0])\n\n\ndef get_party_data(party_name):\n    from candidates.popit import get_search_url\n    # See if this person already exists by searching for the\n    # ID they were imported with:\n    party_name = party_name.replace('/', '')\n    party_name = party_name.decode('utf-8')\n    query_format = \\\n        'name:\"{name}\"'\n    search_url = get_search_url(\n        'organizations',\n        query_format.format(\n            name=party_name\n        )\n    )\n    print party_name\n    results = requests.get(search_url).json()\n    print results\n    total = results['total']\n    if total > 1:\n        message = \"Multiple matches for party {0}\"\n        raise Exception(message.format(party_name))\n    if total == 0:\n        return None\n    # Otherwise there was exactly one result:\n    return results['result'][0]\n\n\n\"\"\" These functions taken from the csv docs -\nhttps://docs.python.org/2/library/csv.html#examples\"\"\"\ndef unicode_csv_reader(unicode_csv_data, dialect=csv.excel, **kwargs):\n    # csv.py doesn't do Unicode; encode temporarily as UTF-8:\n    csv_reader = csv.reader(utf_8_encoder(unicode_csv_data),\n                            dialect=dialect, **kwargs)\n    for row in csv_reader:\n        # decode UTF-8 back to Unicode, cell by cell:\n        yield [unicode(cell, 'utf-8') for cell in row]\n\n\ndef utf_8_encoder(unicode_csv_data):\n    for line in unicode_csv_data:\n        yield line.encode('utf-8')\n\n\nclass Command(BaseCommand):\n\n    help = \"Import inital candidate data\"\n\n    def handle(self, username=None, **options):\n        from slumber.exceptions import HttpClientError\n        from candidates.election_specific import PARTY_DATA, shorten_post_label\n        from candidates.models import PopItPerson\n        from candidates.popit import create_popit_api_object\n\n        election_data = {\n            'prv-2015': 'listedescandidatsauxelectionslegislativeslisteprovincialeanptic.csv',\n            'nat-2015': 'listedescandidatsauxelectionslegislativesanptic.csv'\n            }\n\n        field_map = {\n            'prv-2015': {\n                'region': 1,\n                'party': 4,\n                'list_order': 5,\n                'first_name': 7,\n                'last_name': 6,\n                'gender': 8,\n                'birth_date': 9,\n                'party_short': 3\n            },\n            'nat-2015': {\n                'region': 0,\n                'party': 2,\n                'list_order': 3,\n                'first_name': 5,\n                'last_name': 4,\n                'gender': 6,\n                'birth_date': 7,\n                'party_short': 2\n            }\n        }\n\n        api = create_popit_api_object()\n\n        party_id_missing = {}\n        party_name_to_id = {}\n        for party_id, party_name in PARTY_DATA.party_id_to_name.items():\n            party_name_to_id[party_name] = party_id\n\n        for election_id, filename in election_data.items():\n            csv_filename = join(\n                dirname(__file__), '..', '..', 'data', filename\n            )\n\n            fields = field_map[election_id]\n\n            with codecs.open(csv_filename, 'r', encoding='windows-1252') as f:\n\n                initial = True\n                for candidate in unicode_csv_reader(f):\n                    # skip header line\n                    if initial:\n                        initial = False\n                        continue\n\n                    region = candidate[fields['region']]\n                    party = candidate[fields['party']]\n                    party_list_order = candidate[fields['list_order']]\n                    first_name = string.capwords(candidate[fields['first_name']])\n                    last_name = string.capwords(candidate[fields['last_name']])\n                    gender = candidate[fields['gender']]\n                    birth_date = None\n\n                    if candidate[fields['birth_date']] is not None:\n                        birth_date = str(dateutil.parser.parse(\n                            candidate[fields['birth_date']], dayfirst=True\n                        ).date())\n\n                    name = first_name + ' ' + last_name\n\n                    id = '-'.join([\n                        re.sub('[^\\w]*', '', re.sub(r' ', '-', strip_accents(name.lower()))),\n                        re.sub('[^\\w]*', '', candidate[fields['party_short']].lower()),\n                        birth_date\n                    ])\n\n                    # national candidate\n                    if region == 'PAYS':\n                        region = 'Burkina Faso'\n                    election_data, post_data = get_post_data(\n                        api, election_id, region\n                    )\n\n                    # debug\n                    # tmp = '%s %s %s (%s) - %s (%s)' % ( id, first_name, last_name, party, region, post_data['label'] )\n                    # print tmp\n\n                    person = get_existing_popit_person(id)\n                    if person:\n                        # print \"Found an existing person:\", person.get_absolute_url()\n                        pass\n                    else:\n                        print \"No existing person, creating a new one:\", name\n                        person = PopItPerson()\n\n                    person.set_identifier('import-id', id)\n                    person.family_name = last_name\n                    person.given_name = first_name\n                    person.name = name\n                    person.gender = gender\n                    if birth_date:\n                        person.birth_date = str(birth_date)\n                    else:\n                        person.birth_date = None\n\n                    standing_in_election = {\n                        'post_id': post_data['id'],\n                        'name': shorten_post_label(post_data['label']),\n                        'party_list_position': party_list_order,\n                    }\n\n                    if 'area' in post_data:\n                        standing_in_election['mapit_url'] = post_data['area']['identifier']\n\n                    person.standing_in = {\n                        election_data.slug: standing_in_election\n                    }\n\n                    change_metadata = get_change_metadata(\n                        None,\n                        'Imported candidate from CSV',\n                    )\n\n                    party_comp = re.sub(' +', ' ', party)\n                    party_id = UNKNOWN_PARTY_ID\n                    if party_comp in party_name_to_id.keys():\n                        party_id = party_name_to_id[party_comp]\n                        party = party_comp\n                    else:\n                        party_id = party_name_to_id['Unknown Party']\n                        party = 'Unknown Party'\n\n                    if party_id == UNKNOWN_PARTY_ID and party_comp not in party_id_missing.keys():\n                        party_id_missing[party_comp] = 1\n\n                    person.party_memberships = {\n                        election_data.slug: {\n                            'id': party_id,\n                            'name': party,\n                            'imported_name': party_comp\n                        }\n                    }\n\n                    person.record_version(change_metadata)\n                    try:\n                        person.save_to_popit(api)\n                    except HttpClientError as hce:\n                        print \"Got an HttpClientError:\", hce.content\n                        raise\n\n        if len(party_id_missing) > 0:\n            print \"Unmatched party names:\"\n            for name in party_id_missing.keys():\n                print name\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def infix_to_postfix(infix_expr):\n    prec = {}\n    prec[\"*\"] = 3\n    prec[\"/\"] = 3\n    prec[\"+\"] = 2\n    prec[\"-\"] = 2\n    prec[\"(\"] = 1\n    opStack = []\n    postfixList = []\n    tokenList = infix_expr.split()\n\n    for token in tokenList:\n        if token in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" or token in \"0123456789\":\n            postfixList.append(token)\n        elif token == '(':\n            opStack.append(token)\n        elif token == ')':\n            topToken = opStack.pop()\n            while topToken != '(':\n                postfixList.append(topToken)\n                topToken = opStack.pop()\n        else:\n            while (len(opStack) != 0) and (prec[opStack[-1]] >= prec[token]):\n                  postfixList.append(opStack.pop())\n            opStack.append(token)\n\n    while len(opStack) != 0:\n        postfixList.append(opStack.pop())\n    return \" \".join(postfixList) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mean(a, b):\n    return (a + b)/2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: function factorial(n) {\n    if (n == 1) {\n        return 1;\n    }\n    else {\n        return n * factorial(n-1);\n    }\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num):\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nprime_sum = 0 \ncount = 0\nnum = 2\n\nwhile count < 100:\n    if is_prime(num):\n        prime_sum += num\n        count += 1\n    num += 1\n\nprint(prime_sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_all_primes(n):\n primes = []\n for i in range(2,n+1):\n if all(i % j != 0 for j in range(2, i)):\n primes.append(i)\n return primes\n\n//Time Complexity: \n// Worst Case: O(n2),\n// Best Case: O(nlog n),\n// Average Case: O(nlog n). but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def diff_max_min(numbers):\n    return max(numbers) - min(numbers)\n  \nif __name__ == '__main__':\n    nums = [1,2,3,4,5]\n    diff = diff_max_min(nums)\n    print(diff) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string, random\n\ndef gen_password():\n chars = string.ascii_letters + string.digits + '!@#$%^&*'\n return ''.join(random.choice(chars) for _ in range(10))\n\nprint(\"Random Password :\",gen_password())\n`` but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: 1. Check your syntax \u2212 Check if there is any syntax error in your program. \n2. Check for runtime errors \u2212 Check if the program can be compiled without errors.\n3. Check the logic \u2212 Check if your program follows the intended logic and produces desired output. \n4. Add logging and debugging statements \u2212 Use print statements or logging functions for trace debugging and test the program execution.\n5. Use a debugger \u2212 A debugger allows you to step through the execution of a program and inspect the values of variables at each step. but is not the same. just give one example and only return the code."}
