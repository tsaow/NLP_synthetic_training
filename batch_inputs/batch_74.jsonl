{"prompt": "make some code that functions the same as the following code: def median(nums):\n    nums.sort()\n    length = len(nums)\n    is_even = length % 2 == 0\n    if is_even:\n        mid = length // 2\n        return (nums[mid] + nums[mid-1]) / 2\n    else:\n        return nums[length//2] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_data(url):\n    data = []\n    response = requests.get(url)\n    if response.status_code == 200:\n        data = response.json() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import itertools\n\narr = [1, 2, 3]\nn = 2\n\nresult = list(itertools.combinations(arr, n))\n\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os\n\n# Create the root directory\nos.mkdir(\"root\")\n\n# Switch to the root directory\nos.chdir(\"root\")\n\n# Create two child directories\nos.mkdir(\"child_dir_1\")\nos.mkdir(\"child_dir_2\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_strings_to_int(arr): \n  return list(map(int, arr))\n  \nlist_of_integers = convert_strings_to_int([\"1\", \"2\", \"3\", \"4\"]) # [1, 2, 3, 4] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insertionSort(array): \n    for i in range(1, len(array)): \n        key = array[i] \n        j = i-1\n        while j >=0 and key < array[j] : \n                array[j+1] = array[j] \n                j -= 1\n        array[j+1] = key \n  \narray = [12, 11, 13, 5, 6] \ninsertionSort(array) \n\nprint(array) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class BankAccount():\n    def __init__(self, starting_balance=0):\n        self.balance = starting_balance\n\n    def deposit(self, amount):\n        self.balance += amount\n        return self.balance\n\n    def withdraw(self, amount):\n        if amount > self.balance:\n            raise ValueError('Insufficient funds')\n        self.balance -= amount\n        return self.balance\n\n\nmy_account = BankAccount(1000)\nprint('Account balance: ', my_account.balance)\nmy_account.deposit(500)\nmy_account.withdraw(250)\nprint('Account balance: ', my_account.balance) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to calculate the sum \n# of three numbers \ndef SumOfThree (x, y, z): \n    sum = x + y + z \n    return sum\n\n# Print the sum \nprint(\"Sum of 3 numbers is: \", SumOfThree(4, 5, 6)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class CustomerData:\n  def __init__(self):\n    self.customers = {}\n    \n  def insert(self, name, customer_details):\n    self.customers[name] = customer_details\n    \n  def search(self, name):\n    return self.customers.get(name) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\ndef random_between_nums(num1, num2):\n    return random.randint(num1, num2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\n\ndef display_digital_clock():\n    \"\"\"\n    function to display a digital clock in terminal\n    \"\"\"\n    while True:\n        current_time = time.strftime(\"%H:%M:%S\", time.localtime())\n        print(current_time, end='\\r')\n        time.sleep(1)\n    \ndisplay_digital_clock() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class BankAccount:\n def __init__(self, owner, balance=0.0):\n self.owner = owner\n self.balance = balance\n \n def deposit(self, amount):\n self.balance += amount\n return self.balance\n \n def withdraw(self, amount):\n if amount > self.balance:\n return 'Insufficient funds'\n self.balance -= amount\n return self.balance\n \n def show_balance(self):\n print(f'Your balance is {self.balance}')\n\naccount = BankAccount('John Doe', 100.0)\naccount.show_balance() # Your balance is 100.0\naccount.deposit(50.0) # 150.0\naccount.withdraw(75.0) # 75.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter as tk\n\nroot = tk.Tk()\n\ntext_editor = tk.Text(root)\n\n# create and add scrollbar\nscrollbar = tk.Scrollbar(root)\nscrollbar.pack(side=tk.RIGHT, fill=tk.Y)\ntext_editor.config(yscrollcommand=scrollbar.set)\nscrollbar.config(command=text_editor.yview)\n\n# add functions to widgets\ntext_editor.pack(fill=tk.BOTH, expand=True)\n\n# create a menu and add commands\nmenu_bar = tk.Menu(root)\n\n# add menu bars\nroot.config(menu=menu_bar)\n\ndef quit():\n    root.destroy()\n\n# set menu bar items\nfile_menu= tk.Menu(menu_bar, tearoff=0)\nfile_menu.add_command(label=\"Open\", command=lambda: open_file())\nfile_menu.add_command(label=\"Save\", command=lambda: save_file())\nfile_menu.add_command(label=\"Quit\", command=lambda: quit())\n\n# add menu drop downs\nmenu_bar.add_cascade(label=\"File\", menu=file_menu)\n\n# create a file open dialog\ndef open_file():\n    file = tk.filedialog.askopenfile(mode=\"r\")\n    if file != None:\n        contents = file.read()\n        text_editor.insert('1.0', contents)\n\n# create a file save dialog\ndef save_file():\n    file = tk.filedialog.asksaveasfile(mode=\"w\")\n    if file != None:\n        data = text_editor.get('1.0', tk.END)\n        file.write(data)\n\nroot.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Flatten, Conv2D, MaxPooling2D\n\n# Building a neural network model\nmodel = Sequential()\nmodel.add(Dense(32, activation='relu', input_shape=(784,)))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))\n\n# Compiling the model\nmodel.compile(optimizer='adam',\n loss='categorical_crossentropy',\n metrics=['accuracy'])\n\n# Fit the model\nmodel.fit (x_train, y_train, epochs=5, batch_size=32)\n\n# Evaluate the model\nmodel.evaluate(x_test, y_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from operator import itemgetter\n\nnames_and_points = {\n  \"Dave\": 20,\n  \"John\": 40,\n  \"Rachel\": 55\n}\n\nsorted_dict = sorted(names_and_points.items(), key=itemgetter(1))\n\nprint(sorted_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_common_elements(set1, set2):\n    common_elements = []\n    for item in set1:\n        if item in set2 and item not in common_elements:\n            common_elements.append(item)\n    return common_elements but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\n# Get the GitHub user data from the repo\nurl = 'https://api.github.com/repos/user/example-repo/contents/data.json'\n\nr = requests.get(url)\ndata = r.json()\n\n# Print data to console\nfor d in data:\n print(d) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Generate a random number between 1 and 10\nrandom_number = random.randint(1, 10)\nprint(random_number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pythagorean_triplets(limit):\n    for a in range(1, limit):\n        for b in range(a, limit):\n            for c in range(b, limit):\n                if (a**2 + b**2) == c**2:\n                    yield [a, b, c]\n\nlimit = 20\ntriplets = pythagorean_triplets(limit)\nfor triplet in triplets: \n    print(triplet) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pulp \n\n# Define the problem \nmodel = pulp.LpProblem('Branch and Bound', pulp.LpMinimize)\n\n# Define the decision variables \nx = pulp.LpVariable('x', lowBound=0, cat='Continuous')\ny = pulp.LpVariable('y', lowBound=0, cat='Continuous')\n\n# Define the objective function \nmodel += 30*x + 40*y \n\n# Define the constraints \nmodel += (2*x + y == 1)\nmodel += (2*x + 3*y == 4)\nmodel += (x + y >= 3)\n\n# Solve the problem \nstatus = model.solve()\n\n# Print the results \nprint(pulp.LpStatus[status]) \nprint('Optimal Value: {}'.format(pulp.value(model.objective)))\nprint('Optimal x: {}'.format(pulp.value(x)))\nprint('Optimal y: {}'.format(pulp.value(y))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_spaces(string):\n    return string.replace(' ', '_')\n\nstring = 'Hello World'\n\nprint(replace_spaces(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 11):\n for j in range(1, 11):\n print(i*j, end='\\t')\n print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def send_email(recipient_address, subject, body):\n import smtplib\n from email.message import EmailMessage\n \n message = EmailMessage()\n message['From'] = 'example@example.com'\n message['To'] = recipient_address\n message['Subject'] = subject\n message.set_content(body)\n \n with smtplib.SMTP('smtp.gmail.com', 587) as smtp:\n smtp.ehlo()\n smtp.starttls()\n smtp.login('example@example.com', 'yourpassword')\n smtp.send_message(message) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: new_list = list[1:3] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_list(mylist, element):\n  \n  for i in range(len(mylist)):\n    if mylist[i] == element:\n      return i\n  \n  return -1\n\nmylist = [1, 4, 5, 8, 9]\nelement = 5\n\nindex = search_list(mylist, element)\n\nif index == -1:\n  print(\"Element not found.\")\nelse:\n  print(\"Element found at index:\", index) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def normalize(data):\n    \"\"\"Performs standard normalization of a given data\"\"\"\n    mean = sum(data)/len(data)\n    std_dev = (sum([(x-mean)**2 for x in data])/len(data)) ** 0.5\n    return [(x-mean)/std_dev for x in data]\n\ndata = [35,45,55,65,75]\n\nprint(normalize(data)) # output: [-1.0, -0.5, 0.0, 0.5, 1.0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef extract_random_items(lst, num):\nq = random.sample(lst, num)\nreturn q but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: nums = [x*x for x in range(1,11)] \nprint(\"The first 10 perfect squares are: \", nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: text = \"The quick brown fox jumps over the lazy dog\"\nwords = text.split(\" \")\n\nword_freq = {}\n\nfor w in words:\n    if w in word_freq:\n        word_freq[w] += 1\n    else:\n        word_freq[w] = 1\n\nprint(word_freq) # Output: {'The': 1, 'quick': 1, 'brown': 1, 'fox': 1, 'jumps': 1, 'over': 1, 'the': 1, 'lazy': 1, 'dog': 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply(a, b):\n    \"\"\"Computes the product of two numbers.\"\"\"\n    return a * b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def parse_string(string):\n words = []\n numbers = []\n\n for item in string.split(','):\n  try:\n   numbers.append(int(item))\n  except ValueError:\n   words.append(item)\n\nreturn words, numbers\n\nwords, numbers = parse_string('apple,10,cats,20')\nprint(words) # ['apple', 'cats']\nprint(numbers) # [10, 20] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [1, 2, 3, 4, 5]\nfor element in arr:\n   print(element * 2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\n\ndef measure_time():\n start = time.time()\n # Your code here...\n end = time.time()\n return end - start \n\nexecution_time = measure_time()\nprint(\"Time taken:\", execution_time, \"seconds\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [1, 5, 4, -3, 10]\n\ntotal = 0\n\nfor num in my_list:\n total += num\n\nprint(total) # prints 17 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_vowels(phrase): \n  vowels = ['a','e','i','o','u'] \n  return ''.join([c for c in phrase if c not in vowels]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\ndef get_book_details(title, author):\n url = f'http://example.com/search?title={title}&author={author}'\n response = requests.get(url)\n soup = BeautifulSoup(response.text, 'html.parser')\n book_details = soup.find('div', {'class': 'book-details'})\n title = book_details.find('div', {'class': 'title'}).get_text()\n author = book_details.find('div', {'class': 'author'}).get_text()\n isbn = book_details.find('div', {'class': 'isbn'}).get_text()\n return title, author, isbn\n\ntitle, author, isbn = get_book_details('The Cat in the Hat', 'Dr. Seuss')\nprint(f'Title: {title}\\nAuthor: {author}\\nISBN: {isbn}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sumOfSquares(n):\n  sum = 0\n  for i in range(n + 1):\n    sum += (i ** 2)\n  return sum\n\nprint(sumOfSquares(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: big_list = [value for value in list if value % 2 == 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://twitter.com/trends'\nr = requests.get(url)\n\nsoup = BeautifulSoup(r.text, 'html.parser')\ntrending_tweets = soup.find_all('a', {'class': 'trend-details'})\n\nfor tweet in trending_tweets[:5]:\n print(tweet.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from bs4 import BeautifulSoup\ndef parse_web_html(html):\n soup = BeautifulSoup(html, 'html.parser')\n text = soup.get_text()\n return text but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def celsius_to_fahrenheit(tempCelsius):\n    \"\"\"Convert temperature from Celsius to Fahrenheit.\n\n    Args:\n        tempCelsius (int): Temperature in Celsius\n\n    Returns:\n        float: Temperature in Fahrenheit\n    \"\"\"\n    return (tempCelsius * 1.8) + 32\n\ntempCelsius = 15\ntempFahrenheit = celsius_to_fahrenheit(tempCelsius)\nprint(f\"{tempCelsius}\u00b0C = {tempFahrenheit}\u00b0F\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(\"Welcome to the amazing world of programming!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max_val(array):\n    n = len(array)\n    max_val = array[0]\n    for i in range(1, n):\n        if array[i] > max_val:\n            max_val = array[i]\n    return max_val\n\nif __name__ == '__main__':\n    array = [1, 2, 3, 4, 5]\n    print(find_max_val(array)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ninput_string = \"This input contains \\\" special characters!\"\nfiltered_string = re.sub(r'[^a-zA-Z0-9]', '', input_string)\n\nprint(filtered_string) # Output: Thisinputcontainsspecialcharacters but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def area_perimeter_circle(radius):\n    \"\"\"Function to return the area and perimeter of a circle\"\"\"\n    area = 3.14 * (radius ** 2)\n    perimeter = 2 * 3.14 * radius\n    return area, perimeter\n\n# Driver code\nradius = 4\n\narea, perimeter = area_perimeter_circle(radius)\n\nprint(f'Area of the circle is {area} and Perimeter of the circle is {perimeter}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_longest_common_sequence(string1, string2):\n \n    m = len(string1)\n    n = len(string2)\n \n    # Create a matrix to store results of subproblems\n    dp = [[0] * (n+1) for i in range(m+1)]\n \n    max_length = 0\n \n    # Fill d[][] in bottom up manner\n    for i in range(m):\n        for j in range(n):\n            # If A[i] == B[j], include the character\n            #   and take diagonal path\n            if string1[i] == string2[j]:\n                dp[i+1][j+1] = dp[i][j] + 1\n                max_length = max(max_length, dp[i+1][j+1])\n            # If not same, take max from 3 adjacent cells\n            else:\n                dp[i+1][j+1] = max(dp[i+1][j], dp[i][j+1], dp[i][j])\n \n    return max_length\n\nstring1 = \"ABAZA\"\nstring2 = \"BAZAC\"\n\nprint(\"Length of Longest Common Sequence:\", find_longest_common_sequence(string1, string2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_mean(X):\n    # Compute the sum of all the elements in the list\n    sum_x = 0\n    for x in X:\n        sum_x += x\n    \n    # Compute the mean\n    mean = sum_x / len(X)\n    \n    return mean\n\nif __name__ == '__main__':\n    X = [2,4,6,8,10]\n    print(find_mean(X)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: [\u201dPear\u201d, \u201dWatermelon\u201d] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def construct_polynomial(input_str):\n    parts = input_str.split(\"+\")\n    \n    coefficients = []\n    for part in parts:\n        try:\n            coefficient = int(part)\n        except:\n            coefficient = 1\n            \n        coefficients.append(coefficient)\n    \n    \n    def polynomial(x):\n        output = 0\n        for i, coeff in enumerate(coefficients):\n            output += coeff * x**i\n        return output\n    \n    return polynomial but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def greatest_common_divisor(a, b):\n    # Ensure that a is greater than b\n    if a < b:\n        a, b = b, a\n\n    # Calculate the GCD of a and b\n    while b != 0:\n        # Get the remainder\n        rem = a % b\n        # Set a to b\n        a = b\n        # Set b to the remainder\n        b = rem\n\n    # Return the greatest common divisor\n    return a\n\nprint(greatest_common_divisor(18, 48)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(5):\n    print(\"hello world\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def evaluate(expression):\n    try:\n        return eval(expression)\n    except SyntaxError:\n        print('Invalid expression.')\n\nprint(evaluate(\"(20 * 8) + (2 * 4)\"))\n\nOutput: 164.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import the libraries\nfrom textblob import TextBlob\nfrom sklearn.naive_bayes import GaussianNB\n\n# Prepare the training data\ntrain = [('It is a great day.', 'pos'),\n        ('I am feeling quite good.', 'pos'),\n        ('The weather is terrible.', 'neg'),\n        ('My day has been horrible.', 'neg')]\n\n# Create feature and labels\nX = [ TextBlob(text).words for text, label in train ]\ny = [label for text, label in train ]\n\n# Train the classifier\nclf = GaussianNB()\nclf.fit(X, y)\n\n# Predict the class of new data\nprint(clf.predict([\"I am having a bad day\"])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to remove elements of an array that are greater than a given limit\n\ndef remove_above_limit(arr, limit):\n    new_arr = [x for x in arr if x <= limit]\n    return new_arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: students = [\"\"] * 10 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def LCS(A, B):\n\n# Initialize the 2D matrix\nm = len(A) \nn = len(B) \nL = [[0 for x in range(n+1)] for x in range(m+1)] \n  \n# Set the boolean values for the base cases\nfor i in range(0,m+1): \n    for j in range(0,n+1): \n        if i == 0 or j == 0 : \n            L[i][j] = 0\n  \n# Dynamic Programming Approach for populating the matrix\nfor i in range(1, m+1): \n    for j in range(1, n+1): \n        if A[i-1] == B[j-1]: \n            L[i][j] = L[i-1][j-1] + 1\n        else: \n            L[i][j] = max(L[i-1][j] , L[i][j-1]) \n  \n# Return the LCS\nreturn L[m][n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #------------------------------------------------------------------------------\n#                            cli_parser.py\n#------------------------------------------------------------------------------\n'''\n@author : rgiyer\nDate    : October 20th, 2014\n\nThis module is responsible for parsing command model defined in\ncliCommands.yaml and providing functions for:\n       - Validation of user-input\n       - invoking execution handle for CLI commands or macro expansions\n       - determine possible arg match for command auto-completion based \n         on context\n'''\n\n# Standard Python libraries\nimport os\nimport re\nimport inspect\nimport subprocess\n\n# Packages required for openclos\nimport yaml\n\n# openclos classes\nimport util\n\n# cli related classes\nfrom cli_handle_impl import CLIImplementor\n\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\nclass CLICommand:\n\n    def __init__ ( self, cmd_access, cmd_handle, cmd_macro, cmd_desc ):\n        self.cmd_access = cmd_access\n        self.cmd_handle = cmd_handle\n        self.cmd_macro  = cmd_macro\n        self.cmd_desc   = cmd_desc\n\n# end class CLICommand\n\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\nclass CLIUtil:\n\n    def __init__ ( self ):\n        commandConfFile = os.path.join ( util.configLocation, \n                                         'cliCommands.yaml' )\n        self.yaml_file_stream = open ( commandConfFile, 'r' )\n        raw_graph = yaml.load ( self.yaml_file_stream )\n        self.cmd_graph = {}\n        self.indentation = 8\n        self.dump_cmd ( raw_graph )\n        self.yaml_file_stream.close ()\n        \n\n#------------------------------------------------------------------------------\n    def get_implementor_handle ( self, class_instance, handle_name ):\n        handles = inspect.getmembers ( class_instance, \n                                       predicate = inspect.ismethod )\n        for function_tuple in handles:\n            if ( handle_name == function_tuple [ 0 ] ):\n                return function_tuple [ 1 ]\n\n        # no match found\n        return 0\n\n#------------------------------------------------------------------------------\n    # Parse through the dictionary iteratively:\n    def dump_cmd ( self,\n                   cmds,\n                   cmd_root=\"\", \n                   cmd_access=\"READ\",\n                   cmd_handle=\"\",\n                   cmd_macro=\"\",\n                   cmd_desc=\"\" ):\n\n        for cmd in cmds:\n            if ( cmd_root == \"\" ):\n                cmd_compound = cmd\n            else:\n                cmd_compound = cmd_root + \"_\" + cmd\n\n            cmd_data = cmds [ cmd ]\n\n            # Get command access\n            if cmd_data.has_key ( \"Access\" ):\n                cmd_access = cmd_data [ \"Access\" ]\n\n            # Get command handler\n            if cmd_data.has_key ( \"Handle\" ):\n                cmd_handle = cmd_data [ \"Handle\" ]\n            elif ( cmd_handle != \"\" ):\n                cmd_handle = \"\"\n\n            # Get command macro\n            if cmd_data.has_key ( \"Macro\" ):\n                cmd_macro = cmd_data [ \"Macro\" ]\n            elif ( cmd_macro != \"\" ):\n                cmd_macro = \"\"\n                \n\n            # Get command description\n            if cmd_data.has_key ( \"Desc\" ):\n                cmd_desc = cmd_data [ \"Desc\" ]\n            elif ( cmd_desc != \"\" ):\n                cmd_desc = \"\"\n\n            # Parse the arguments\n            if cmd_data.has_key ( \"Args\" ):\n                cmd_args = cmd_data [ \"Args\" ]\n                self.dump_cmd ( cmd_args, \n                                cmd_compound, \n                                cmd_access,\n                                cmd_handle,\n                                cmd_macro,\n                                cmd_desc )\n\n            if cmd_data.has_key ( \"Handle\" ):\n                self.cmd_graph [ cmd_compound ] = CLICommand ( cmd_access, \n                                                               cmd_handle,\n                                                               cmd_macro,\n                                                               cmd_desc )\n                if ( len ( cmd_compound ) > self.indentation ):\n                    self.indentation = len ( cmd_compound )\n\n#------------------------------------------------------------------------------\n    def normalize_command ( self, cmd ):\n        return cmd.replace ( \" \", \"_\" )\n\n#------------------------------------------------------------------------------\n    def get_indentation ( self, cmd ):\n        return ( self.indentation + 8 - len ( cmd ) )\n\n#------------------------------------------------------------------------------\n    def suffix_macro_to_cmd ( self, macro_list, cmd ):\n        ret_cmd = []\n        for macro in macro_list:\n            ret_cmd.append ( self.normalize_command ( cmd + \"_\" + macro ) )\n        return ret_cmd\n\n#------------------------------------------------------------------------------\n    def get_macro_list ( self, class_instance, macro_txt, add_help=None ):\n        fn_macro = self.get_implementor_handle ( class_instance, macro_txt )\n        return fn_macro ( add_help )\n\n#------------------------------------------------------------------------------\n    def include_macro ( self, macro_list, ret_list ):\n        for item in macro_list:\n            ret_list.append ( item )\n\n#------------------------------------------------------------------------------\n    def string_has_enter ( self, string ):\n        if ( re.search ( \"<enter>\", string ) != None ):\n            return 1\n        else:\n            return 0\n\n#------------------------------------------------------------------------------\n    def add_enter_instruction ( self, result_list ):\n        if ( len ( result_list ) ):\n            string = result_list [ 0 ]\n            if ( self.string_has_enter ( string ) == 1 ):\n                return 0\n\n        result_list.insert ( 0, \" <enter>\" + \" \" * self.get_indentation ( \"<enter\" ) + \"Execute the current command\" )\n        \n\n#------------------------------------------------------------------------------\n    def match_macro ( self, macro_list, needle, ret_list ):\n        for haystack in macro_list:\n            if ( len ( needle ) == len ( haystack ) ):\n                if ( re.match ( needle, haystack ) != None ):\n                    self.add_enter_instruction ( ret_list )\n            elif ( len ( needle ) < len ( haystack ) ):\n                if ( re.match ( needle, haystack ) != None ):\n                    ret_list.append ( haystack )\n            else:\n                print \"\"\n\n#------------------------------------------------------------------------------\n    def option_exists ( self, consider_option, ret_list ):\n        for option in ret_list:\n            if ( re.match ( option, consider_option ) != None ):\n                return 1\n        return 0\n\n#------------------------------------------------------------------------------\n    def complete_command ( self,\n                           part_cmd, \n                           full_cmd, \n                           end_index, \n                           cmd_helper, \n                           ret_list ):\n        unmatched_string = full_cmd [ end_index: ]\n\n        # This is an adjustment for \"<space>\" before tab / ? keypress\n        if ( part_cmd [ -1 ] == \"_\" ):\n            part_cmd = part_cmd [ 0:-1 ]\n            unmatched_string = \"_\" + unmatched_string\n    \n        if ( unmatched_string [ 0 ] == \"_\" ):\n            # attach possible matches\n            possible_option = unmatched_string.replace ( \"_\", \" \" ) + ( \" \" * self.get_indentation ( full_cmd ) )\n            possible_option = possible_option + \"<\" + cmd_helper.cmd_desc + \">\"\n            ret_list.append ( possible_option )\n        else:\n            # Get part of the command from part_cmd\n            match_object = re.search ( \"_\", part_cmd )\n            while ( match_object != None ):\n                part_cmd = part_cmd [ match_object.end (): ]\n                match_object = re.search ( \"_\", part_cmd )\n        \n            # Get rest of the command from unmatched_string\n            match_object = re.search ( \"_\", unmatched_string )\n            if ( match_object != None ):\n                unmatched_string = unmatched_string [ :(match_object.end()-1)]\n\n            complete_word = part_cmd + unmatched_string\n            if ( self.option_exists ( complete_word, ret_list ) == 0 ):\n                 ret_list.append ( complete_word )\n\n        return ret_list\n        \n\n#------------------------------------------------------------------------------\n    def get_all_cmds ( self ):\n        ret_list = []\n        for cmd in self.cmd_graph:\n            cmd_str = cmd.replace ( \"_\", \" \" )\n            cmd_str = cmd_str + ( \" \" * self.get_indentation ( cmd ) ) + \"<\" + self.cmd_graph [ cmd ].cmd_desc + \">\"\n            ret_list.append ( cmd_str )\n        return ret_list\n\n#------------------------------------------------------------------------------\n# Lot of reference here to needle and haystack, needle being the current\n# command context of the CLI, and haystack being the command model dict\n# created during CLIUtil instantiation\n#------------------------------------------------------------------------------\n    def get_match ( self, cmd ):\n        if  ( len ( cmd ) == 0 or re.search ( \"[a-z|A-Z|0-9]\", cmd ) == None ):\n            return self.get_all_cmds ()\n\n        # chomp input string\n        if ( cmd [ -1 ] == \" \" ):\n            cmd = cmd [ 0:-1 ]\n\n        needle = self.normalize_command ( cmd )\n        ret_list = []\n\n        for haystack in self.cmd_graph:\n            len_haystack = len ( haystack )\n            len_needle   = len ( needle )\n            cmd_helper = self.cmd_graph [ haystack ]\n\n            # Case 1: Full command is provided, without macro expansion\n            if ( len_needle == len_haystack ):\n                # check if we have a match\n                if ( re.match ( needle, haystack ) != None ):\n                    if ( cmd_helper.cmd_macro != \"\" ):\n                        self.include_macro ( self.get_macro_list ( CLIImplementor (), cmd_helper.cmd_macro, \"add help\" ), ret_list )\n                    else:\n                        self.add_enter_instruction ( ret_list )\n\n            # Case 2: Full command is provided with macro expansion\n            elif ( len_needle > len_haystack ):\n                match_object = re.match ( haystack, needle )\n                if ( match_object != None ):\n                    # Match exists - so get the macro\n                    cmd_macro = needle [ match_object.end (): ]\n                    if ( cmd_macro [ 0 ] == \"_\" and len ( cmd_macro ) > 1 ):\n                        cmd_macro = cmd_macro [ 1: ]\n\n                    if ( cmd_helper.cmd_macro != \"\" ):\n                        cmd_macro_list = self.get_macro_list ( CLIImplementor(),\n                                                          cmd_helper.cmd_macro )\n                        self.match_macro ( cmd_macro_list, cmd_macro, ret_list )\n\n            # Case 3: Part command is provided\n            elif ( len_needle < len_haystack ):\n                match_object = re.match ( needle, haystack )\n                if ( match_object != None ):\n                    # Match exists - get rest of the command\n                    balance_cmd = haystack [ match_object.end (): ]\n                    self.complete_command ( needle, \n                                            haystack, \n                                            match_object.end (), \n                                            self.cmd_graph [ haystack ],\n                                            ret_list )\n                \n\n        return ret_list\n\n#------------------------------------------------------------------------------\n    def chomp ( self, token ):\n        match_object = re.search ( \"[a-z|A-Z|0-9]\", token )\n        if ( match_object != None ):\n            token = token [ ( match_object.end () - 1): ]\n\n        token = token [ ::-1 ]\n        match_object = re.search ( \"[a-z|A-Z|0-9]\", token )\n        if ( match_object != None ):\n            token = token [ ( match_object.end () - 1): ]\n\n        token = token [ ::-1 ]\n\n        return token\n\n#------------------------------------------------------------------------------\n    def validate_command_and_execute ( self, full_cmd_context ):\n        # We will do the validation again in case this function is called\n        # outside the CLI context\n        best_cmd_match = \"\"\n        best_cmd_args  = \"\"\n        best_cmd_handle = None\n\n        for command in self.cmd_graph:\n            match_object = re.match ( command, \n                           self.normalize_command ( full_cmd_context ) )\n            if ( match_object != None ):\n                # Okay - we found a match. Get macros if included\n                command_args = \"\"\n                # TODO - different impl here for multiple args support\n                if ( len ( full_cmd_context ) > len ( command ) ):\n                    command_args = self.chomp ( full_cmd_context [ match_object.end (): ] )\n                if ( len ( best_cmd_match ) < len ( command ) ):\n                    best_cmd_match = command\n                    best_cmd_args  = command_args\n                    best_cmd_handle = self.get_implementor_handle ( CLIImplementor (), self.cmd_graph [ command ].cmd_handle )\n\n        if ( best_cmd_handle != 0 ):\n            return best_cmd_handle ( best_cmd_args )\n        else:\n            print self.cmd_graph [ best_cmd_match ].cmd_handle + \" not implemented\"\n\n#------------------------------------------------------------------------------\n    def print_results ( self, result_list ):\n        for result in result_list:\n            print \"\\t\" + result\n\n#------------------------------------------------------------------------------\n    def print_command_graph ( self, cmd_dict ):\n        for keys in cmd_dict:\n            print keys + \"=>\"\n            cmd = cmd_dict [ keys ]\n            if ( cmd.cmd_desc != \"\" ):\n                print \"    \" + cmd.cmd_desc\n            print \"    \" + cmd.cmd_access\n            if ( cmd.cmd_macro != \"\" ):\n                fn_macro = self.get_implementor_handle ( CLIImplementor (), \n                                                        cmd.cmd_macro )\n                if ( fn_macro != 0 ):\n                    print fn_macro ()\n                else:\n                    print \"    Macro not implemented\"\n            if ( cmd.cmd_handle != \"\" ):\n                fn_handle = self.get_implementor_handle ( CLIImplementor (), \n                                                     cmd.cmd_handle )\n                if ( fn_handle != 0 ):\n                    fn_handle ()\n                else:\n                    print \"    Handler not implemented\"\n\n# end class CLIUtil\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n\n#------------------------------------------------------------------------------\n#                              MAIN\n#------------------------------------------------------------------------------\ncli_util = CLIUtil ()\n    \n\nmatch_options = [ \"create cabling\",\n#                  \"create cabling-plan\",\n#                  \"create cabling-\",\n#                  \"create cabling\",\n#                  \"create cabling-plan pod\",\n#                  \"create cabling-plan pod pod_2\",\n#                  \"create\",\n#                  \"create dev\",\n#                  \"create device-config\",\n#                  \"create device-config p\",\n#                  \"create device-config pod\",\n#                  \"create device-config pod pod_1\",\n#                  \"run\",\n#                  \"update password\",\n#                  \"run r\",\n#                  \"run RE\",\n#                  \"create cab\",\n                  \"create pods\",\n                  \"create pods from\",\n                  \"create pods from-file\",\n                  \"\" ]\n\nif __name__ == '__main__':\n    for match in match_options:\n        print \"Matching results for \" + match + \" is:\"\n        cli_util.print_results ( cli_util.get_match ( match ) )\n        print \"------------------------------------------------------\"\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(s1, s2):\n    s1 = s1.lower()\n    s2 = s2.lower()\n    if len(s1) != len(s2):\n        return False\n    s1_dict = {}\n    for char in s1:\n        if char not in s1_dict:\n            s1_dict[char] = 1\n        else:\n            s1_dict[char] += 1\n    for char in s2:\n        if char not in s1_dict:\n            return False\n        else:\n            s1_dict[char] -= 1\n            if s1_dict[char] < 0:\n                return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_largest_and_second_largest(nums):\n    max1 = float('-inf')\n    max2 = float('-inf')\n    for n in nums:\n        if n > max1:\n            max2 = max1\n            max1 = n\n        elif n > max2 and n != max1:\n            max2 = n\n    return max1, max2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer \n\ndef sentiment_score(text):\n ss = SentimentIntensityAnalyzer() \n scores = ss.polarity_scores(text)\n return scores \n\ntext = 'This is an amazing movie!'\nscore = sentiment_score(text)\nprint('Positive score: ', score['pos'])\nprint('Negative score: ', score['neg'])\nprint('Neutral score: ', score['neu'])\nprint('Compound score: ', score['compound']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(numbers): \n numbers.sort()\n return numbers\n\nprint(sort_list([4, 3, 2, 5, 1])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\n#Initialize variables\nlist_urls = [\"https://www.google.com\", \"https://www.yahoo.com\"]\n\n#Loop through the list of URLs\nfor url in list_urls: \n    #Fetch the URL \n    r = requests.get(url)\n    #Output a status code \n    print(url+\" returned: \"+str(r.status_code))\n\n    #Output the time in milliseconds it took to connect to the server and get the response\n    print(\"Time elapsed: \"+str(r.elapsed.total_seconds()*1000)+\"ms\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Imports\nimport smtplib\n\n# Define the email addresses\nrecipients = ['person1@mail.com', 'person2@mail.com', 'person3@mail.com']\n\n# Connect to SMTP server\nwith smtplib.SMTP('smtp.mail.com', 587) as server:\n\t# Start TLS\n\tserver.starttls()\n\n\t# Login\n\tserver.login('your_email_address', 'your_password')\n\n\t# Construct the message\n\tmessage = '''\n\tSubject: Your Subject Here\n\t\n\tMessage body here\n\t'''\n\n\t# Send mail\n\tserver.sendmail('your_email_address', recipients, message) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask\nfrom flask import render_template\nfrom flask import request\n\n@app.route('/')\ndef form():\n    return render_template('form.html')\n\n@app.route('/', methods=['POST']\ndef save_data():\n   name = request.form['name']\n   age = request.form['age']\n   # Save user data to database \n   return render_template('success.html') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from textblob import TextBlob\n\ntext = 'This product is a great example of quality craftsmanship and excellent engineering.'\nblob = TextBlob(text)\n\nsentiment_score = blob.sentiment.polarity\n\nif sentiment_score > 0:\n print('Positive sentiment')\nelif sentiment_score < 0:\n print('Negative sentiment')\nelse:\n print('Neutral sentiment') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def min_distance_words(s, w1, w2):\n    list_str = s.split(\" \")\n    index1 = -1\n    index2 = -1\n    min_dist = float(\"inf\")\n    for i in range(len(list_str)):\n        if list_str[i] == w1:\n            index1 = i\n            if index2 != -1:\n               min_dist = min(min_dist, abs(index1 - index2))\n        elif list_str[i] == w2:\n            index2 = i \n            if index1 != -1:\n               min_dist = min(min_dist, abs(index1 - index2))\n    if min_dist == float(\"inf\"):\n        return -1\n    else:\n        return min_dist but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_divisible_by_7(number):\n    return number % 7 == 0\n\nresult = is_divisible_by_7(42)\nprint(result) # True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import defaultdict \ndef groupByType(list):\n    res = defaultdict(list) \n    for item in list: \n        res[item['type']].append(item['name']) \n    return res \n\nlist = [\n        { 'name': 'item1', 'type': 'A' },\n        { 'name': 'item2', 'type': 'B' },\n        { 'name': 'item3', 'type': 'A' },\n        { 'name': 'item4', 'type': 'A' },\n        { 'name': 'item5', 'type': 'B' }\n       ]\n \n\nres = groupByType(list)\n\nprint(dict(res))\n\n# output:\n# {'A': ['item1', 'item3', 'item4'], 'B': ['item2', 'item5']} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_duplicates(arr):\n    seen = set()\n    \n    for element in arr:\n        if element in seen:\n            return True\n        else:\n            seen.add(element)\n    return False\n\narr = [3, 5, 8, 1, 2, 3]\nresult = check_duplicates(arr)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def repeat(s1, s2):\n n = int(s1)\n return s2 * n\n\nprint(repeat('3','hello'))\n# Output: hellohellohello but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = 'http://newsapi.org/v2/top-headlines?country=us&apiKey=YOUR_API_KEY'\nresponse = requests.get(url)\ndata = response.json()\n\nfor article in data['articles']:\n print(article['title'])\n// Output: Headline 1, Headline 2, Headline 3, etc. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def letter_frequency(sentence):\n    # Count the frequency of each letter\n    letter_freq = {}\n    for char in sentence:\n        if char in letter_freq:\n            letter_freq[char] += 1\n        else:\n            letter_freq[char] = 1\n    \n    # Print the result\n    for char, freq in letter_freq.items():\n        print(f\"{char}: {freq}\")\n\nif __name__ == \"__main__\":\n    sentence = input(\"Enter a sentence: \")\n    letter_frequency( sentence ) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_longest_pattern(string):\n    \"\"\"Function to find the longest pattern in the given string\"\"\"\n    longest_pattern = \"\"\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            pattern = string[i:j]\n            if pattern == pattern[::-1]:\n                longest_pattern = max(pattern, longest_pattern, key=len)\n    return longest_pattern but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: dict['Python'] = 10 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_divisible(lst, n):\n    new_list = []\n    for item in lst:\n        if item % n != 0:\n            new_list.append(item)\n    return new_list\n\nmylist = [7, 8, 15, 21, 24]\nnum = 3\n\nprint(remove_divisible(mylist, num)) # [7, 8, 21] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # using the sorted function with key parameter \nlist_of_ints = [8, 0, 7, 4, 5, 6, 9]\n\nsorted_list_ints = sorted(list_of_ints, key=lambda num: -num)\n\nprint(sorted_list_ints) #[9, 8, 7, 6, 5, 4, 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_1 = [\"Hello\", \"World\"]\nlist_2 = [\"Python\", \"Programming\"]\nseparator = \",\"\n\nresult = separator.join(list_1 + list_2)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_search(arr, low, high, x): \n    if high >= low:  \n        mid = (low + high) // 2\n        if arr[mid] == x: \n            return mid \n\n        elif arr[mid] > x: \n            return binary_search(arr, low, mid - 1, x) \n        else: \n            return binary_search(arr, mid + 1, high, x) \n    else: \n        return -1\n\narr = [2, 3, 5, 6, 8, 11, 14, 18]\nx = 11\nres = binary_search(arr, 0, len(arr)-1, x) \nif res != -1: \n    print(\"Element is present at index\", str(res)) \nelse: \n    print(\"Element is not present in array\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import speech_recognition as sr\nfrom os import system\n\ndef listen_command():\n    r = sr.Recognizer()\n    with sr.Microphone() as source:\n        print(\"Listening...\")\n        audio = r.listen(source)\n \n    try:\n        command = r.recognize_google(audio)\n        print(\"I heard: \" + command)\n        return command\n    except sr.UnknownValueError:\n        print(\"I could not understand audio\")\n \nlisten_command()\nif listen_command() == \u2018Please turn on the lights\u2019:\n    system(\"/usr/bin/python3 /home/pi/script.py\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isIsomorphic(s1, s2):\n    # Create a dictionary to map character from one string to another\n    map_dict = {}\n\n    if len(s1) != len(s2):\n        return False\n\n    for i in range(len(s1)):\n        if s1[i] not in map_dict:\n            # Check if the mapped character already occurs in target string\n            if s2[i] in map_dict.values():\n                return False\n            # Store the mapping  \n            map_dict[s1[i]] = s2[i]\n        elif map_dict[s1[i]] != s2[i]:\n            return False\n\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_char(string, char_rep, char_rep_with):\n    new_string = string.replace(char_rep, char_rep_with)\n    return new_string\n\nresult = replace_char('Hello World!', 'l', 't')\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import collections\n\ndef most_common_words(text):\n    words = text.split()\n    counts = collections.Counter(words)\n    return counts.most_common(10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Age():\n\n    def __init__(self, date_of_birth):\n        self.date_of_birth = date_of_birth\n\n    def age(self):\n        from datetime import datetime\n        today = datetime.now().date()\n        return (today.year - self.date_of_birth.year - \n        ((today.month, today.day) < (self.date_of_birth.month, self.date_of_birth.day)))\n\ndob = Age(datetime.strptime('27/12/1989','%d/%m/%Y'))\nprint(dob.age()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = 'https://example.com/api'\n\nresponse = requests.get(url)\n\nif response.status_code == 200:\n data = response.json()\n print(data)\nelse:\n print('Error:', response.status_code) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Read in data\ndata = pd.read_csv('[path/to/file]')\n\n# Split into features and target\nX = np.array(data[['feature1', 'feature2', ... , 'featureN']]) \ny = np.array(data['target'])\n\n# Create linear regression object\nmodel = LinearRegression()\n\n# Train the model\nmodel.fit(X, y)\n\n# Make prediction\nprediction = model.predict(X) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The output of the code is [1, 2, 3, 4, 5], which is the sorted version of the list nums. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_dict(dict):\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n\ndictionary = { 'a': 1, 'b': 2, 'c': 3 }\nprint(sum_dict(dictionary)) # 6 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_sum(n):\n    # base case\n    if n == 0:\n        return 0\n    # recursive case\n    else:\n        return n + find_sum(n-1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_strings(string1, string2):\n  if len(string1) > len(string2):\n    return True\n  else:\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n  \n#Function to generate text \ndef generate_text(grammar_rules, start): \n  \n    if start not in grammar_rules: \n        return start\n  \n    expansions = grammar_rules[start] #List of possible expansions \n    expanded = random.choice(expansions) #Pick a random one \n  \n    finals = [generate_text(grammar_rules, x) for x in expanded.split()] \n    output = \" \".join([str(x) for x in finals]) \n  \n    return output but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n#create cards list\ncards = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"]*2\n\n#shuffle cards\nrandom.shuffle(cards)\n\n#create a shuffled cards instance\ncards_hand = set(cards)\n\n#while loop \nwhile len(cards_hand) > 0:\n    #my hand\n    my_hand = set(random.sample(cards_hand, 2))\n    #computer hand \n    comp_hand = set(random.sample(cards_hand, 2))\n\n    #check if my hand and computer had matched \n    if my_hand == comp_hand:\n        print(f\"congratulation!!! you matched the cards..\")\n    else:\n        #break\n        break\n\n    #remove all cards from hand \n    cards_hand -= my_hand\n    cards_hand -= comp_hand\n\n#if the loop run out\nif len(cards_hand) == 0:\n    #print the result \n    print(\"you won the game\")\nelse:\n    print(\"you lost the game\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def getAverageScores(list):\n    output = []\n    for item in list:\n        name = item[0]\n        scores = item[1:]\n        average_score = sum(scores) / len(scores)\n        output.append([name, average_score])\n    \n    return output\n\nlist = [['Bob', 43, 54, 66], ['James', 53, 45, 42], \n        ['Grace', 43, 44, 59], ['Martin', 42, 42, 51]]\n\naverageScores = getAverageScores(list)\nprint(\"Name: Average Score\")\nfor item in averageScores:\n    print(\"{}: {:.2f}\".format(item[0], item[1])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import the necessary libraries\nimport math\nfrom collections import Counter\n\n#function to calculate the inverse document frequency\ndef inverse_document_frequency(term, documents):\n    num_documents_containing_term = 0\n    for document in documents:\n        if term in document:\n            num_documents_containing_term += 1\n    return math.log(float(len(documents)) / num_documents_containing_term)\n    \n#function to calculate the tf*idf score\ndef tf_idf_score(term, document, documents):\n    tf = float(document.count(term)) / sum(document.count(word) for word in document)\n    idf = inverse_document_frequency(term, documents)\n    return tf * idf\n\n#function to find the relevant documents\ndef search(query, documents):\n    query_terms = query.split(' ')\n    scores = {document_index: 0 for document_index in range(len(documents))}\n    for term in query_terms:\n        for document_index, document in enumerate(documents):\n            scores[document_index] += tf_idf_score(term, document, documents)\n    return scores\n\n#test data\ndocuments = [\"this is a sentence\", \"this is another sentence\", \"this sentence is irrelevant\"]\n\n#search for a sentence\nquery = \"this sentence\"\nresult = search(query, documents)\n\n#print the relevent documents\nprint(result) # {0: 0.6931471805599453, 1: 0.6931471805599453, 2: 0.0} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_odd(number):\n  if number % 2 == 0:\n    return False\n  else:\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def nth_term_fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# training data\nX = np.array([[3.6, 4.6], [4.7, 5.1], [6.8, 7.2], [5.5, 6.5], [7.1, 8.2]])\ny = np.array([1, 0, 1, 1, 0])\n\n# test data\nX_test = np.array([[2.2, 3.2], [8.2, 9.2]])\n\n# K=3\nknn_classifier = KNeighborsClassifier(3)\nknn_classifier.fit(X, y)\ny_test = knn_classifier.predict(X_test)\n\nprint(y_test) # will output [1, 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n \n # Make a get request to get the JSON data\nr = requests.get('https://jsonplaceholder.typicode.com/todos/1')\n \n# Parse the JSON data\ndata = r.json()\n\n# Extract the data\ntodo_id = data['id']\ntodo_text = data['title']\ntodo_completed = data['completed']\n \n# Print the data\nprint('Todo ID: ', todo_id)\nprint('Todo Text: ', todo_text)\nprint('Todo Completion Status: ', todo_completed) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [10,20,30,40]\n\ntotal = 0\nfor num in my_list:\n    total += num\n\nprint(\"The sum of all elements in the list is: \" + str(total)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_to_dict(lst):\n return {x:i for i,x in enumerate(lst)} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(\"Hello, World!\") but is not the same. just give one example and only return the code."}
