{"prompt": "make some code that functions the same as the following code: def filterList(lst):\n  result = []\n\n  for s in lst:\n    if 3 <= len(s) <= 7:\n      result.append(s)\n  \n  return result\n\nprint(filterList(['apple', 'banana', 'strawberry', 'orange'])) # ['apple', 'banana', 'orange'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence = input('Enter a sentence: ') \nwords = sentence.split()\nword_freq = {} \n  \nfor word in words: \n    if word in word_freq: \n        word_freq[word] += 1\n    else: \n        word_freq[word] = 1\n  \nfor key, value in word_freq.items(): \n    print (key,\":\", value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def solveSudoku(board):\n    if not findUnassignedLocation(board):\n        return True\n \n    for num in range(1, 10):\n        if isSafe(board, row, col, num):\n            board[row][col] = num\n \n            if solveSudoku(board): \n                return True\n            board[row][col] = 0\n    return False\n\ndef findUnassignedLocation(board):\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 0:\n                return (i, j)\n    return None\n\ndef isSafe(board, row, col, num):\n    # Check row\n    for i in range(9):\n        if board[row][i] == num:\n            return False\n \n    # Check column\n    for i in range(9):\n        if board[i][col] == num:\n            return False\n \n    # Check sub-grid\n    row_start = (row // 3) * 3\n    col_start = (col // 3) * 3\n    for i in range(row_start, row_start + 3):\n        for j in range(col_start, col_start + 3):\n            if board[i][j] == num:\n                return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pig_latin(sentence):\n    words = sentence.split(\" \")\n    result = \"\"\n    for word in words:\n        result += word[1:] + word[0] + \"ay \"\n    return result[:-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_name(names):\n longest_name = ''\n\n for name in names:\n  if len(name) > len(longest_name):\n   longest_name = name\n \n return longest_name\n\nNames = ['John', 'Michael', 'Scott', 'Steve']\n\nlongest = longest_name(Names)\n\nprint(longest) # Michael but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculateSum(arr):\n sums = [0] * len(arr[0])\n for r in arr:\n  for i in range(len(r)):\n   sums[i] += r[i]\n return sums\n\ndef getRowsSum(arr):\n rowSums = []\n for r in arr:\n  rowSums.append(sum(r))\n return rowSums\n\narr = [[2, 3, 5], \n [5, 7, 1], \n [4, 6, 9]]\n\ncolumnSums = calculateSum(arr)\nrowSums = getRowsSum(arr)\n\nprint(\"Row sums:\", rowSums)\nprint(\"Column sums:\", columnSums)\n\n# Output: Row sums: [10, 13, 15] Column sums: [11, 16, 15] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(s1, s2):\n    s1 = s1.replace(\" \",\"\").lower()\n    s2 = s2.replace(\" \",\"\").lower()\n    return sorted(s1) == sorted(s2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Python but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\n#Read data into array\ndata = [list of data points]\n\n#Define plot dimensions\nn = len(data[0])\n\nif n == 2:\n x = [x for x,y in data]\n y = [y for x,y in data]\n plt.scatter(x,y)\n plt.show()\nelif n == 3:\n x = [x for x,y,z in data]\n y = [y for x,y,z in data]\n z = [z for x,y,z in data]\n figure = plt.figure()\n axis = figure.add_subplot(111, projection='3d')\n axis.scatter(x, y, z)\n plt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Import the Flask library\nfrom flask import flask\n\n# Initialize the Flask app\napp = Flask(__name__)\n\n#Define the hello function\n@app.route('/')\ndef hello():\n    return \"Hello, world!\"\n\n# Have the Flask app listen on port 500\nif __name__ == '__main__':\n    app.run(port=500) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_digits(n):\n    s = 0\n    while (n > 0):\n        s = s + n % 10\n        n = n//10\n    return s\n\nn = 1234\nprint(sum_digits(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def roman_numeral(number):\n    romans = [\n        (1000, \"M\"), (900, \"CM\"), (500, \"D\"), (400, \"CD\"),\n        (100, \"C\"), (90, \"XC\"), (50, \"L\"), (40, \"XL\"),\n        (10, \"X\"), (9, \"IX\"), (5, \"V\"), (4, \"IV\"),\n        (1, \"I\")\n    ]\n    result = \"\"\n    for value, numeral in romans:\n        result += numeral * (number // value)\n        number %= value\n    return result\n\nresult = roman_numeral(1314)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convertFahrenheitToCelsius(fahrenheit):\n    celsius = (fahrenheit - 32) * 5/9\n    print(\"{}\u00b0F is {}\u00b0C\".format(fahrenheit,celsius))\n\nconvertFahrenheitToCelsius(100) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n  \nrandom_number = random.randint(10, 50) \n  \nprint(\"Random number between 10 and 50 is\", random_number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re #importing library for regular expressions\n\nuser_input = \"\" #Initializing user_input\n\nwhile user_input != \"exit\": \n    user_input = input(\"Type your message: \")\n    if re.search(\"hi|hello\", user_input): #Using regural expressions to make the chatbot response to greetings\n        print(\"Hello, I am a chatbot. How can I help you?\")\n    else:\n        print(\"Sorry, I don't understand.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def detect_cycle(head): \n    slow_p = head \n    fast_p = head \n    while(slow_p and fast_p and fast_p.next) : \n        slow_p = slow_p.next\n        fast_p = fast_p.next.next\n        if slow_p == fast_p : \n            return True\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import the necessary libraries\nimport json \nfrom collections import OrderedDict \nimport pandas as pd\n\n# Load the data \nwith open('collection1.json') as json_file:\n    collection1 = json.load(json_file)\n\nwith open('collection2.json') as json_file:\n    collection2 = json.load(json_file)\n\n# Create a DataFrame from both collections\ndf1 = pd.DataFrame(collection1)\ndf2 = pd.DataFrame(collection2)\n\n# Calculate the probability of matching items\nmatch_probs = {}\n\nfor item1 in df1.item.unique():\n    for item2 in df2.item.unique():\n        item1_obs = df1.loc[df1['item'] == item1]\n        item2_obs = df2.loc[df2['item'] == item2]\n        match_prob = (len(item1_obs) * len(item2_obs)) / (len(df1) * len(df2))\n        match_probs[(item1,item2)] = match_prob\n\n# Print the results\nmatch_probs = OrderedDict(sorted(match_probs.items(), key=lambda x: x[1], reverse=True))\nprint(match_probs) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_duplicates(numbers):\n    seen = set()\n    duplicates = set()\n\n    for number in numbers:\n        if number in seen:\n            duplicates.add(number)\n        else:\n            seen.add(number)\n    \n    return duplicates but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The languages used for writing a Python program to scrape a website for email addresses would be Python and HTML. Python is used for writing the web scraper and HTML is used to define the structure and content of the website, which the scraper accesses in order to scrape the email addresses. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: maxnum = max(list1)\nminnum = min(list1)\nprint(\"Maximum number is:\", maxnum) \nprint(\"Minimum number is:\", minnum) \n#prints Maximum number is: 7   Minimum number is: 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classifyValue(value):\n    if isinstance(value, bool):\n        return \"Boolean\"\n    elif isinstance(value, int):\n        return \"Integer\"\n    else:\n        return \"Other\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_second_occurence(given_string):\n    # Split the given string \n    split_string = given_string.split(' ') \n  \n    # Find the index of the second occurence\n    index = [i for i,x in enumerate(split_string) \n              if x == split_string[0]][1] \n  \n    # Print the second occurence\n    print(\"Second occurrence of given word:\", \n          split_string[index]) \n  \n# Driver function \ngiven_string = \"This is this is a sample string\"\nfind_second_occurence(given_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The highest value is 8.\n\nlist_ints = [2, 5, 3, 4, 8]\n\nhighest_value = max(list_ints)\n\nprint('The highest value is ' + str(highest_value) + '.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentiment_analyzer = SentimentIntensityAnalyzer()\n\nsentiment_score = sentiment_analyzer.polarity_scores(\"The movie was awesome!\")\n\nif sentiment_score['compound'] >= 0.05:\n    sentiment = \"positive\"\nelif sentiment_score['compound'] <= -0.05:\n    sentiment = \"negative\"\nelse:\n    sentiment = \"neutral\"\n    \nprint(\"Sentiment of the sentence is\", sentiment) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def flatten_list(lst):\n    return [item for sublist in lst for item in sublist] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_string = \"Welcome to GPT world!\"\nprint(my_string.upper()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isArmstrong(x): \n  \n    # Calculate the number of \n    # digits in x \n    n = len(str(x)) \n  \n    sum1 = 0\n  \n    # For every digit calculate \n    # its sum of nth power \n    temp = x \n    while temp > 0: \n        d = temp % 10\n        sum1 = sum1 + d ** n \n        temp = temp//10\n  \n    # Check whether sum1 is equal to x \n    if sum1 == x: \n        return True\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def concatStringsWithSpace(str1, str2):\n  return str1 + \" \" + str2\n\nresult = concatStringsWithSpace(\"Programming\", \"is Fun\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nWrite a Python program to create a KMeans model and cluster iris data into 3 clusters.\n\"\"\"\n\nimport pandas as pd\nfrom sklearn.cluster import KMeans\nfrom sklearn import datasets\n\n# Load the iris data\niris = datasets.load_iris()\nX = pd.DataFrame(iris.data)\ny = pd.DataFrame(iris.target)\n\n# Create the KMeans model \nmodel = KMeans(n_clusters=3, random_state=0)\nmodel.fit(X)\n\n# Predict the clusters\nprediction = model.predict(X)\n\n# Add the prediction to the data frame\nX.insert(0, \"cluster\", prediction)\n\n# Print the result\nprint(X) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef is_palindrome(s):\n    pattern = r'^[a-zA-Z0-9]*$'\n    if re.match(pattern, s):\n        return s == s[::-1]\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import datetime module\nimport datetime\n\n# Get the current time\nnow = datetime.datetime.now()\n\n# Print the current time in the format hh:mm:ss\nprint(now.strftime(\"%H:%M:%S\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def concatenate(str1, str2):\n    return str1 + str2\n\n# example \nstr1 = \"Hello\"\nstr2 = \" World\"\nresult = concatenate(str1, str2)\nprint(result) # Hello World but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n    \ndataset = [['Male', 'Doctor'], \n           ['Female', 'Teacher'], \n           ['Female', 'Lawyer']]\n\ndf = pd.DataFrame(dataset, columns = ['Gender', 'Occupation'])\n\ndf_dummies = pd.get_dummies(df, columns=['Gender'])\n\nprint(df_dummies)\n\n# Output \n   Occupation  Gender_Female  Gender_Male\n0     Doctor              0            1\n1    Teacher              1            0\n2     Lawyer              1            0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacciGenerator(num):\n    a = 0\n    b = 1\n    \n    for i in range(0, num):\n        c = a + b\n        a = b\n        b = c\n        yield a\n\nnumbers = fibonacciGenerator(10)    \n\nfor num in numbers:\n    print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def minimum_cost(cart): \n    min_cost = 0\n    for item, cost in cart.items():\n        min_cost += int(cost) \n    return min_cost\n\nprint(minimum_cost(cartItems)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n  def __init__(self, name, year):\n    self.name = name\n    self.year = year\n\nperson = Person(\"Jane\", 1998) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \nfrom bs4 import BeautifulSoup\n\n# Get request to the URL\npage = requests.get(\"http://example.com\")\n\n# Create a BeautifulSoup object from the response\nsoup = BeautifulSoup(page.content, 'html.parser') \n\n# Get all emails from the page\nemails = soup.find_all('a', {'href': 'mailto'})\n\nfor email in emails:\n    print(email.get('href').replace(\"mailto:\", \"\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\n\ndateTimeObj = datetime.datetime.now()\n\nprint('Current Date and Time:', dateTimeObj) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# load the data\ndf = pd.read_csv('dataset.csv')\n\n# split into features and labels\nfeatures = df.drop('label', axis=1).values\nlabels = df['label'].values\n\n# split into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state=42)\n\n# create a random forest classifier\nclf = RandomForestClassifier(n_estimators=1000, random_state=42)\n\n# train the classifier\nclf.fit(X_train, y_train)\n\n# make predictions\ny_pred = clf.predict(X_test)\n\n# calculate accuracy\naccuracy = np.mean(y_pred == y_test)\nprint('Accuracy:', accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortNumbers(nums): \n    for i in range(len(nums)-1): \n        minPos = i \n        for j in range(i+1,len(nums)): \n            if nums[minPos] > nums[j]: \n                minPos = j \n        nums[i],nums[minPos] = nums[minPos],nums[i] \n\nnums = [3, 2, 7, 1, 9, 5]\nsortNumbers(nums) \nprint(nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def lowest_common_multiple(x, y): \n    if x > y:\n        greater = x \n    else: \n        greater = y \n\n    while(True): \n        if((greater % x == 0) and (greater % y == 0)): \n            lcm = greater \n            break\n        greater += 1\n\n    return lcm \n\nprint(lowest_common_multiple(x, y)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_sum(list):\n    total = 0\n    for num in list:\n        total += num\n    return total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pyautogui\n\ndef type_text(text, textbox_id):\n # Locate the textbox by id\n element = driver.find_element_by_id(textbox_id)\n \n # Move the mouse to the textbox\n pyautogui.moveTo(element.location['x'], element.location['y'])\n \n # Simulate typing in the text\n pyautogui.typewrite(text)\n``` but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef rand_list(start, end, n):\n    rand_list = []\n    for i in range(n):\n        rand_list.append(random.randint(start, end))\n    return rand_list\n\nnums = rand_list(1, 10, 5)\nprint(nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack:\n def __init__(self):\n self.queue1 = []\n self.queue2 = []\n \n def push(self, value):\n self.queue1.append(value)\n \n def pop(self):\n if self.queue1:\n while len(self.queue1) > 1:\n self.queue2.append(self.queue1.pop(0))\n\n return self.queue1.pop(0)\n \n else:\n while len(self.queue2) > 1:\n self.queue1.append(self.queue2.pop(0))\n\n return self.queue2.pop(0) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def shortest_path(start_point, end_point):\n    path = []\n    current_point = start_point\n    while current_point != end_point:\n        x_dist = end_point[0] - current_point[0]\n        y_dist = end_point[1] - current_point[1]\n\n        # move right if x_dist is greater than or equal to\n        # y_dist, and move up otherwise\n        if x_dist >= y_dist:\n            current_point[0] += 1\n        else:\n            current_point[1] += 1\n        path.append(current_point[:])\n\n    return path\n\nresult = shortest_path([3, 4], [9, 8])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\ndf = pd.read_csv('data.csv')\n\nprint(df.head())\nprint(df.info())\nprint(\"Average age of passengers:\", df['Age'].mean())\nprint(\"Number of female passengers:\", df[df['Sex'] == 'female'].shape[0])\nprint(\"Oldest passenger:\", df.loc[df['Age'].idxmax()]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_dict_alphabetically(dictionary):\n    sorted_keys = sorted(dictionary.keys())\n    for key in sorted_keys:\n        print(f\"{key}: {dictionary[key]}\")\n\nprint_dict_alphabetically({\n 'Mark': '68',\n 'Carol': '35',\n 'John': '42'\n}) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\nclass PasswordGenerator:\n def generate_password(length):\n password_characters = string.ascii_letters + string.digits + string.punctuation\n return ''.join(random.choice(password_characters) for i in range(length))\n\npassword = PasswordGenerator.generate_password(16)\nprint(password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# load the data\nlabels = ['spam', 'not spam']\ndata = [...] # example data of emails and labels\n\n# convert the text to a bag of words model\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(data)\n\n# split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, labels, test_size=0.2)\n\n# fit the classification model\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n\n# evaluate the model\nscore = model.score(X_test, y_test)\nprint('Test score: ', score) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\nimport traceback\n\ndef visualize_program_calls():\n  def trace_calls(frame, event, arg):\n    if event != 'call':\n      return\n    co = frame.f_code\n    func_name = co.co_name\n    if func_name == 'write':\n      # Ignore write() calls from print statements\n      return\n    func_line_no = frame.f_lineno\n    func_filename = co.co_filename\n    caller = frame.f_back\n    caller_line_no = caller.f_lineno\n    caller_filename = caller.f_code.co_filename\n    print('Call to %s on line %s of %s from line %s of %s' % \\\n        (func_name, func_line_no, func_filename,\n         caller_line_no, caller_filename))\n    return\n\n  sys.setprofile(trace_calls)\n\ndef _visualize_program_returns(*args):\n  for thread_id, frame in sys._current_frames().items():\n    print('Return from %s on line %s of %s' % \\\n        (frame.f_code.co_name, frame.f_lineno, frame.f_code.co_filename))\n\nsys.settrace(_visualize_program_returns) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from selenium import webdriver\n\n# set chrome driver\ndriver = webdriver.Chrome()\n\n# open google\ndriver.get(\"https://www.google.com/\")\n\n# find search box and enter \"GPT\"\nsearch = driver.find_element_by_name(\"q\")\nsearch.send_keys(\"GPT\")\n\n# click search\nsearch.submit()\n\n# print h2 element\nh2 = driver.find_element_by_tag_name(\"h2\")\nprint(h2.text)\n\n# close browser\ndriver.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Car:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter as tk\nfrom tkinter import font\nimport datetime\n \nwindow = tk.Tk()\n \nwindow.title(\"Current Date and Time\")\n \nhelv36 = font.Font(family='Helvetica', size=36, weight='bold')\n \ntime = datetime.datetime.now().strftime(\"%H:%M:%S\")\ndate = datetime.datetime.now().strftime(\"%d/%m/%Y\")\n \nclock_frame = tk.Frame(\n    master = window,\n    relief = tk.RAISED,\n    borderwidth = 1)\nclock_frame.pack(fill = tk.BOTH)\n \ndate_label = tk.Label(\n    master = clock_frame,\n    text = date,\n    font = helv36)\ndate_label.pack(side = tk.TOP, expand = True)\n \ntime_label = tk.Label(\n    master = clock_frame,\n    text = time,\n    font = helv36)\ntime_label.pack(side = tk.BOTTOM, expand = True)\n \nwindow.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial_memoization(n): \n\n\t#Creating table to store result \n\tfactorial_table = [1] * (n+1) \n\n\t# Calculating factorial and storing in \n\t# the table \n\tfor i in range(1, n+1): \n\t\tfactorial_table[i] = i * factorial_table[i - 1] \n\n\treturn factorial_table[n] \n\nresult = factorial_memoization(5)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# Load data into a dataframe\nemails = pd.DataFrame([\n    {'text': 'You won the lottery!', 'label': 'spam'},\n    {'text': 'Check out this offer!', 'label': 'spam'},\n    {'text': 'Can you help me with my project?', 'label': 'not_spam'},\n    {'text': 'Are you free for lunch tomorrow?', 'label': 'not_spam'},\n])\n\n# Train the ML model\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\nX = emails['text']\ny = emails['label']\n\nvectorizer = CountVectorizer()\nX_train = vectorizer.fit_transform(X)\n\nnb = MultinomialNB()\nnb.fit(X_train, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to display the power of 2 from 0 to 10\n \nfor i in range(0,11):\n    print(\"2**\",i,\"=\",2**i)\n   \n# Output:\n# 2** 0 = 1\n# 2** 1 = 2\n# 2** 2 = 4\n# 2** 3 = 8\n# 2** 4 = 16\n# 2** 5 = 32\n# 2** 6 = 64\n# 2** 7 = 128\n# 2** 8 = 256\n# 2** 9 = 512\n# 2** 10 = 1024 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\nclass Perceptron:\n    def __init__(self, num_inputs, learning_rate=0.01):\n        self.learning_rate = learning_rate\n        # Initiailizing the weights to random values\n        self.weights = np.random.rand(num_inputs)\n    \n    def predict(self, inputs):\n        # Compute the dot product between inputs and weights\n        weighted_sum = np.dot(inputs, self.weights)\n        # The output is either 0 or 1 depending on the weighted sum\n        result = int(weighted_sum > 0)\n        return result\n    \n    def train(self, inputs, desired_output):\n        # Calculate the prediction error\n        prediction = self.predict(inputs)\n        error = desired_output - prediction\n        # Update the weights\n        self.weights += self.learning_rate * error * inputs but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(a, b):\n    while b != 0:\n        temp = a\n        a = b\n        b = temp % b\n    return a\n\nprint(gcd(20,45)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to convert given number of seconds into days, hours, minutes and seconds\ndef convert_seconds(seconds):\n    # Get the number of days\n    days = seconds // 86400\n    # Get the remaining seconds\n    secs = seconds % 86400\n    # Get the number of hours\n    hours = secs // 3600\n    # Get the remaining seconds\n    secs = secs % 3600\n    # Get the number of minutes\n    minutes = secs // 60\n    # Get the remaining seconds\n    secs = secs % 60\n    \n    return days, hours, minutes, secs\n\n# Main Program \nseconds = int(input(\"Enter a number of seconds: \"))\n\ndays, hours, minutes, secs = convert_seconds(seconds)\n\nprint(\"Days:\", days)\nprint(\"Hours:\", hours)\nprint(\"Minutes:\", minutes)\nprint(\"Seconds:\", secs) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_closest_pair(points):\n    min_distance = float('inf')\n    min_pair = []\n\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            distance = get_euclidean_distance(points[i], points[j])\n            if distance < min_distance:\n                min_distance = distance\n                min_pair = points[i], points[j]\n    return min_pair\n\ndef get_euclidean_distance(point1, point2):\n    diffx = point1[0] - point2[0]\n    diffy = point1[1] - point2[1]\n    return math.sqrt(diffx**2 + diffy**2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: data = [{'name':'John', 'grade':'A'}, \n        {'name':'Steve', 'grade':'B'}, \n        {'name':'Bob', 'grade':'C'}]\n\n# Create a dictionary of students\nstudent_dict = {}\nfor student in data:\n    student_dict[student['name']] = student['grade']\n\n# Print the dictionary\nprint(student_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\ndef get_seasons():\n  season_dates = {\n    'spring': ('March 20', 'June 20'),\n    'summer': ('June 21', 'September 21'),\n    'autumn': ('September 22', 'December 21'),\n    'winter': ('December 22', 'March 19')\n  }\n  return season_dates\n\nseasons = get_seasons()\n\ndf = pd.DataFrame(columns=['Season', 'Start_Date', 'End_Date'])\n\nfor season, dates in seasons.items():\n  start_date, end_date = dates\n  df = df.append({'Season': season, 'Start_Date': start_date, 'End_Date': end_date}, ignore_index=True)\n  \nprint(df) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def even_sum(low, high):\n    sum = 0\n    for i in range(low, high+1):\n        if i % 2 == 0:\n            sum += i\n    return sum\n\nresult = even_sum(10, 20)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.layers import Embedding, LSTM\nfrom keras.models import Sequential\n\n# tokenizing the text\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts(<some text>)\nsequences = tokenizer.texts_to_sequences(<some text>)\n\nvocab_size = len(tokenizer.word_index) + 1\n\n# create the language model\nmodel = Sequential()\nmodel.add(Embedding(vocab_size, 50, input_length=3))\nmodel.add(LSTM(100, return_sequences=True))\nmodel.add(LSTM(100))\nmodel.add(Dense(vocab_size, activation='softmax'))\n\n# compile the model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# fit the model\nmodel.fit(sequences, X, epochs=100, verbose=2)\n\n# evaluate the model\nloss, accuracy = model.evaluate(sequences, X, verbose=0) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nPlot a sine wave in Python.\n\n\"\"\"\n# Import matplotlib and numpy libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Set the x axis range \nx_axis = np.arange(0, 2*np.pi, 0.1)\n\n# Set the y axis range \ny_axis = np.sin(x_axis)\n\n# Plot the sine wave\nplt.plot(x_axis, y_axis)\n\n# Set the figure title\nplt.title('Sine Wave')\n\n# Set the x and y labels\nplt.xlabel('x axis')\nplt.ylabel('y axis')\n\n# Set the x and y limits\nplt.xlim(0, 2*np.pi)\nplt.ylim(-1, 1)\n\n# Draw the graph\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create API endpoint\n@app.route('/api/average', methods=['POST'])\ndef average():\n    # Get data from request\n    data = request.get_json()\n\n    # Calculate average\n    avg = np.mean(data)\n\n    # Return result\n    return jsonify({'result': avg}) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_majority_element(array):\n    count = 0\n    majority_element = None\n\n    for element in array:\n        if count == 0:\n            majority_element = element\n\n        count += (1 if element == majority_element else -1)\n\n    return majority_element but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_star_pyramid(n):\n  # Outer loop to handle number of lines\n  for i in range(0, n):\n    # Inner loop to handle number of columns\n    for j in range(0, i+1):\n      #  Will print star\n      print(\"* \", end=\"\")\n    # Line break\n    print(\"\\r\")\n\n# Program to demonstrate star pyramid\nn = 5\nprint_star_pyramid(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Create an array of 100 random integers between 1 to 1000\narray = [random.randint(1, 1000) for i in range(100)]\nprint(array) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\n# Load training data\ntrain_data = pd.read_csv(\"train.csv\")\nX_train = train_data[\"Name\"].values\ny_train = train_data[\"Gender\"].values\n\n# Create the vectorizer\nvectorizer = CountVectorizer()\n\n# Fit the vectorizer\nvectorizer.fit(X_train)\n\n# Transform the vectorizer\nX_train_vectorized = vectorizer.transform(X_train)\n\n# Create a model\nmodel = LogisticRegression()\n\n# Fit the model\nmodel.fit(X_train_vectorized, y_train) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: updated_sentence = sentence.replace(\"hello\", \"hi\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # create a new Django project\n$ django-admin startproject mysite\n\n# create a new application \n$ python manage.py startapp myapp\n\n# add the new application in INSTALLED_APPS in the settings.py file \nINSTALLED_APPS = [ \n    'myapp',\n    ...\n]\n\n# define the urls in urls.py file \nurlpatterns = [ \n    path('', myapp.views.index, name='index'), \n    ...\n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\nconn = sqlite3.connect(\"movies.db\")\ncur = conn.cursor()\n\n# create the table if it does not exist\ncur.execute(\"CREATE TABLE IF NOT EXISTS movie(title TEXT, year_released INTEGER,\ngenre TEXT, rating REAL, director TEXT)\")\n\n# update the record\nrecord = cur.execute(\"UPDATE movie SET genre = 'Thriller', rating = 8.2,\ndirector = 'Jason Burke' WHERE title = 'The King's Speech' and\nyear_released = '2010'\")\nconn.commit()\n\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd \n  \n# Initialize the data \ndata = [['John', 20, 'New York'], \n        ['George', 18, 'London'], \n        ['Ringo', 25, 'Tokyo']] \n  \n# Create the dataframe \ndf = pd.DataFrame(data, columns = ['Name', 'Age', 'City']) \n  \n# Print the dataframe \nprint (df)\n\n\n   Name  Age      City\n0  John   20  New York\n1  George   18    London\n2  Ringo   25     Tokyo but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = \"https://www.youtube.com/feed/trending\"\n\nresponse = requests.get(url)\ndata = response.json()\n\ntrending_videos = []\n\nfor video in data[\"items\"]:\n    video_title = video[\"snippet\"][\"title\"]\n    video_url = \"https://www.youtube.com/watch?v=\" + video[\"id\"][\"videoId\"]\n\n    trending_videos.append(\"Title: \" + video_title + \" | URL \" + video_url)\n\nfor i in range(10):\n    print(trending_videos[i]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Rectangle():\n    def __init__(self,length,width):\n        self.length = length \n        self.width = width\n  \n    def area(self):\n        return self.length * self.width\n\n    def perimeter(self):\n        return 2 * (self.length + self.width) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup \n\nurl = 'https://www.example.com'\n\nr = requests.get(url)\nsoup = BeautifulSoup(r.content, 'html.parser')\n\ntitle = soup.title.string\ndescription = soup.find('meta', attrs={'name': 'description'})['content']\n\nprint('Title:', title)\nprint('Description:', description) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_integers(num1, num2):\n return num1 + num2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n    a = 0\n    b = 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\nprint(fibonacci(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ParseJSON:\n def __init__(self, jsonObject):\n self.jsonObject = jsonObject\n\n def getNames(self):\n names = []\n for item in self.jsonObject['items']:\n  name = item['name']\n  names.append(name)\n return names\n\njsonObject = {\"items\": [{\"name\": \"item1\"}, {\"name\": \"item2\"}, {\"name\": \"item3\"}]}\npp = ParseJSON(jsonObject)\nresult = pp.getNames()\nprint(result) # ['item1', 'item2', 'item3'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter as tk\n\nroot = tk.Tk()\n\n# Create the two checkboxes\ncat_var = tk.IntVar()\ndog_var = tk.IntVar()\ncat_checkbox = tk.Checkbutton(root, text=\"Cat\", variable=cat_var)\ndog_checkbox = tk.Checkbutton(root, text=\"Dog\", variable=dog_var)\ncat_checkbox.pack()\ndog_checkbox.pack()\n\n# Create the button\nbutton = tk.Button(root, text=\"Submit\")\nbutton.pack()\n\n# Define the button handler\ndef button_handler():\n if cat_var.get():\n print(\"Cat is checked\")\n else:\n print(\"Cat is not checked\")\n\n if dog_var.get():\n print(\"Dog is checked\")\n else:\n print(\"Dog is not checked\")\n\n# Set the button handler\nbutton.configure(command=button_handler)\nroot.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def dot_product(u, v):\n    if len(u) != len(v):\n        raise ValueError(\"Vectors u and v must be of the same length!\")\n\n    result = 0\n    for i in range(len(u)):\n        result += u[i] * v[i]\n    return result\n\nu = [1, 2, 3]\nv = [4, 5, 6]\n\nprint(\"Dot product of u and v is:\" , dot_product(u, v)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words_dict = {}\nsentence = \"I love to code\"\nwords = sentence.split()\n\nfor word in words:\n if word in words_dict:\n words_dict[word] += 1\n else:\n words_dict[word] = 1\n\nprint(words_dict)\n\n# Output:\n# {'I': 1, 'love': 1, 'to': 1, 'code': 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_noun_phrases(sentence):\n    noun_phrases = []\n    \n    words = word_tokenize(sentence)  \n    tagged_sentence = pos_tag(words)\n    chunks = ne_chunk(tagged_sentence)\n\n    for chunk in chunks:\n        if type(chunk) == Tree:\n            phrase = \" \".join([word[0] for word in chunk])\n            noun_phrases.append(phrase)\n    \n    return noun_phrases but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maxSubArraySum(arr, length):  \n    max_so_far = 0\n    max_ending_here = 0 \n    for i in range(0, length):  \n        max_ending_here = max_ending_here + arr[i]  \n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif max_so_far < max_ending_here: \n            max_so_far = max_ending_here  \n    return max_so_far but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def smallest_num(lst):\n   min_num = lst[0]\n   \n   for num in lst:\n       if num < min_num:\n           min_num = num\n           \n   return min_num\n\nlst = [4, 5, 6, 7, 8, 1, 2]\n\nprint(smallest_num(lst)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_a = [1,2,3,4,5]\nlist_b = [6,7,8,9,10]\n\nd = dict(zip(list_a, list_b)) \n\nprint(d) // {1: 6, 2: 7, 3: 8, 4: 9, 5: 10} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_divisible(number1, number2):\n   return number1 % number2 == 0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_dict(d, key): \n return sorted(d.items(), key=lambda x: x[1][key])\n\n#Test\nd = {\"apple\": 10, \"banana\": 5, \"pear\": 7} \n\nprint(sort_dict(d, \"price\"))\n# Output: [('banana', {'price': 5}), ('pear', {'price': 7}), ('apple', {'price': 10})] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def parse_text(text, word):\n  word_count = 0\n  words = text.split()\n  for w in words:\n    if w == word:\n      word_count += 1\n  return word_count\n  \ntext = 'This is an example text.'\nword = 'example'\nword_count = parse_text(text, word)\nprint('The word \"{}\" appears {} times in the text.'.format(word, word_count)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def dot_product(list1, list2):\n  product = 0\n  for x, y in zip(list1, list2):\n    product += x*y\n  return product but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Input data\ntexts = [\u201cThis is a good movie\u201d, \u201cThis movie is bad\u201d]\nlabels = [1, 0]\n\n# Create the feature vectors\ncv = CountVectorizer()\nx = cv.fit_transform(texts)\n\n# Split the dataset to train and test sets\nx_train, x_test, y_train, y_test = train_test_split(x, labels, test_size=0.2)\n\n# Build the ML model\nmodel = MultinomialNB()\nmodel.fit(x_train, y_train)\n\n# Make predictions\npredictions = model.predict(x_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_transactions(transaction_list):\n    results = []\n    for transaction in transaction_list:\n        category = 'Expense'\n        if transaction['amount'] >= 0:\n            category = 'Income'\n        results.append({\n            'description': transaction['description'],\n            'amount': transaction['amount'],\n            'category': category\n        })\n    return results but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\ndef sort_linked_list(head):\n    if head is None:\n        return None\n\n    # Initialize the sorted linked list\n    dummy_head = Node(None)\n    prev = dummy_head\n\n    # Traverse the linked list\n    curr = head\n    while curr:\n        # Store the next node\n        next_node = curr.next\n\n        # Find the correct position in the sorted list\n        while prev.next and prev.next.val < curr.val:\n            prev = prev.next\n        \n        # Insert the current node\n        curr.next = prev.next\n        prev.next = curr\n\n        # Move to the next node\n        prev = dummy_head\n        curr = next_node\n\n    return dummy_head.next but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printMultiplicationTable(num):\n\n for i in range(1, 11):\n print(\"{} x {} = {}\".format(num, i, num * i))\n\nprintMultiplicationTable(8) \n# Output:\n# 8 x 1 = 8\n# 8 x 2 = 16\n# 8 x 3 = 24\n# 8 x 4 = 32\n# 8 x 5 = 40\n# 8 x 6 = 48\n# 8 x 7 = 56\n# 8 x 8 = 64\n# 8 x 9 = 72\n# 8 x 10 = 80 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mae(data): \n  # Calculate the mean of the data\n  mean = sum(data) / len(data) \n\n  # Calculate the absolute difference of the data values from the mean\n  abs_differences = [abs(value - mean) for value in data] \n\n  # Calculate the mean absolute error\n  mae = sum(abs_differences) / len(abs_differences) \n\n  return mae but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Define the two numbers\nnum1 = 37\nnum2 = 22\n\n# Print the larger number\nif num1 > num2:\n    print(num1)\nelse:\n    print(num2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Define a function for finding the sum of the elements of a list\ndef find_sum(list):\n    # Initialise the sum to 0\n    total = 0\n    # Iterate through each element\n    for item in list:\n        # Add the element to the total\n        total += item\n    # Return the total\n    return total\n\n# Example list\nlst = [1, 2, 3, 4]  \n\n# Call the function\nprint(find_sum(lst)) but is not the same. just give one example and only return the code."}
