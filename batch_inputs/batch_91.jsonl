{"prompt": "make some code that functions the same as the following code: def calculate_square(numbers):\n    return [number * number for number in numbers] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # feature scaling function\ndef feature_scale(arr):\n    min_arr = min(arr)\n    max_arr = max(arr)\n    y = (arr-min_arr)+1\n    scaled = y/(max_arr-min_arr)\n    return scaled\n\n# example usage\narr = [1,2,3,4,5]\nscaled_arr = feature_scale(arr)\nprint(scaled_arr) # Output: [0.  0.2 0.4 0.6 0.8] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\npattern = r'myname=(?P<name>.+?)&email=(?P<email>.+?)&age=(?P<age>.+)'\nstring = 'myname=Linda&email=linda@example.com&age=30'\n\n# Extract values\nmatch = re.search(pattern, string)\nname = match.group('name')\nemail = match.group('email')\nage = match.group('age')\n\n# Print results\nprint('Name:', name)\nprint('Email:', email)\nprint('Age:', age) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import base64\n\ndef encode(string):\n encoded = base64.b64encode(string.encode())\n return encoded.decode('utf-8')\n\ndef decode(encoded_string):\n decoded = base64.b64decode(encoded_string.encode())\n return decoded.decode('utf-8')\n\nif __name__ == \"__main__\":\n original_string = \"Hello World!\"\n encoded_string = encode(original_string)\n decoded_string = decode(encoded_string)\n print(f'Original string: {original_string}\n Encoded string: {encoded_string}\n Decoded string: {decoded_string}\n ') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: unsorted_list = [52, 34, 12, 33, 16]\n\nsorted_list = sorted(unsorted_list)\n\nprint(sorted_list) # prints [12, 16, 33, 34, 52] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_ints(a, b): \n  return a + b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list1 = [12, 121, 3]\n\n# Iterate through the list\nfor element in list1:\n    # Convert the element to a string\n    element = str(element)\n    \n    # Check if the element is a palindrome\n    if element == element[::-1]:\n        print(element + \" is a palindrome\")\n    else:\n        print(element + \" is not a palindrome\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(list, query): \n    results = []\n    for item in list:\n        if item == query: \n            results.append(item) \n    return results\n\nlist = [1, 2, 3, 4, 5, 6]\nquery = 4\n\nresult = search(list, query)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef sentiment_analysis(text):\n    # split the sentences \n    sentences = nltk.sent_tokenize(text)\n    # create a sentiment analyzer object\n    sid = SentimentIntensityAnalyzer()\n    sentiment_scores = []\n    for sentence in sentences:\n        # get the sentiment scores for the sentence \n        ss = sid.polarity_scores(sentence)\n        sentiment_scores.append(ss)\n    # get overall sentiment of the text\n    compound_score = 0\n    for score in sentiment_scores:\n        compound_score += score['compound']\n    if compound_score >= 0.05:\n        return f\"The sentiment score of the text is Positive with {compound_score}.\"\n    elif compound_score <= -0.05:\n        return f\"The sentiment score of the text is Negative with {compound_score}.\"\n    else:\n        return f\"The sentiment score of the text is Neutral with {compound_score}.\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quick_sort(arr):\n    \"\"\"\n    Quick sort is a sorting algorithm that uses the divide-and-conquer approach to sort a given array.\n    \n    Parameters\n    ----------\n    arr: List[int]\n        list of integers to be sorted\n    \n    Returns\n    -------\n    List[int]\n        sorted list of integers\n   \n    \"\"\"\n    if arr is None or len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left_arr, right_arr = [], []\n    for i in range(len(arr)):\n        if arr[i] < pivot:\n            left_arr.append(arr[i])\n        elif arr[i] > pivot:\n            right_arr.append(arr[i])\n    return quick_sort(left_arr) + [pivot] + quick_sort(right_arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [1,4,8,10]\n\ndef calculate_sum(list):\n sum = 0\n for number in list:\n sum += number\n return sum\n\nsum = calculate_sum(list)\nprint(sum) # Output: 23 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countChars(firstStr, secondStr):\n    combinedStr = firstStr + secondStr\n    return len(combinedStr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n \ndata = {\n  \"num1\": \"4\",\n  \"num2\": \"3\",\n  \"num3\": \"2\",\n  \"num4\": \"1\"\n}\n \nfor key, value in data.items():\n    print(key, value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nWrite an algorithm in Python that takes a string of characters and \nprints out the frequency of each character.\n\"\"\"\n\ndef count_frequency(text):\n    freq = {}\n    for c in text:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    for key,value in freq.items():\n        print(key + ': ' + str(value))\n\nif __name__ == '__main__':\n    text = \"Hello, world!\"\n    count_frequency(text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_sum(list1, list2):\n # initialize sum with 0\n total_sum = 0 \n \n # iterate over each element in list1\n for num in list1: \n     # add to sum\n     total_sum += num \n\n # iterate over each element in list2\n for num in list2: \n     # add to sum\n     total_sum += num \n\nreturn total_sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def highest_number(arr):\n    '''\n    Function to get the highest number in an array of integers\n    \n    Parameters\n    arr: list of integers\n    \n    Returns\n    highest number in the array\n    '''\n    highest_num = arr[0]\n    for num in arr:\n        if num > highest_num:\n            highest_num = num\n    return highest_num but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_spaces(str): \n    new_str = \"\"\n\t\n    # loop through each character in the string\n    for letter in str: \n        if letter != \" \":\n            new_str = new_str + letter \n\t\t\n    return new_str \n\n# main program\nstr = \"Hello World\"\nnew_str = remove_spaces(str)\n\n#print the new string\nprint(\"String without spaces:\", new_str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: data = [100.0, 74.0, 56.2, 45.5, 27.8, 21.0, 8.2, 4.1]\n\ndef get_top_five_values(data):\n    sorted_data = sorted(data, reverse=True)\n    top_five_values = sorted_data[:5]\n    return top_five_values\n\ntop_five_values = get_top_five_values(data)\nprint(top_five_values) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(string):\n result = []\n \n for i in string:\n result.insert(0,i)\n \n return ''.join(result)\n \nif __name__ == \"__main__\":\nstring = \"Hello Python!\"\nprint(reverse_string(string))  # Output: !nohtyP olleH but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacciSequence(n): \n    fibSequence = []\n    a, b = 0, 1\n    while b < n:\n        fibSequence.append(b)\n        a, b = b, a + b\n    return fibSequence\n\nn = 7\n\nprint(fibonacciSequence(n)) // [1, 1, 2, 3, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: d = {} \n  \n# Let us add 10 key-value pairs to dictionary \nfor i in range(1,11): \n    d[i] = i ** 2 \n  \n# Print the dictionary items \nprint(d.items()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Python and JavaScript are both powerful, dynamic programming languages that offer a wide range of features and benefits. Python is well-liked for its readability and constructs that make it easier to learn and code, while JavaScript excels at interactive web-building and is flexible enough to be adapted to a variety of applications. Together, they offer developers a wide range of options for creating apps and websites. Python offers an easy, high-level language with a strong emphasis on readability & decrease in development time, while JavaScript is great for building interactive websites and applications. Lastly, both languages have an active community, supportive tools, and a large number of libraries available. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import socket \n  \n# socket object \nserversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) \n  \n# ensures that multiple instances  \n# of the application cannot bind \n# to the same port \nserversocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) \n  \n# IP address and port of server \nIP_address = socket.gethostname()\nPort = 12345\n  \n# binds IP and port  \nserversocket.bind((IP_address, Port)) \n  \n# specifies number of connections  \n# the server can handle simultaneous \nserversocket.listen(10) \n  \nwhile True:\n  \n    # establishes connection \n    clientsocket, address = serversocket.accept()   \n   \n    # prints the address of the  \n    # client making the connection \n    print(\"Connection from \" + str(address))  \n  \n    # generates response \n    message = \"The server grants your request.\\r\\n\"\n  \n    # send an answer to the client    \n    clientsocket.send(message.encode('ascii')) \n  \n    # closes the connection \n    clientsocket.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculateDistance(x1,y1,z1,x2,y2,z2): \n\tdist = math.sqrt((x2 - x1)**2 + (y2 - y1)**2 + (z2 - z1)**2) \n\treturn dist \n\nprint(calculateDistance(8,-4,1,5,8,-2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print('My favorite color is blue.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Linked List Node \nclass Node: \n\t\n\t# Constructor to initialise the node object \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.next = None\n\n# Linked List class contains a Node object \nclass LinkedList: \n\n\t# Function to initialize head \n\tdef __init__(self): \n\t\tself.head = None\n\n     # Traverses linked list and prints its elements \n\tdef traverse(self): \n\n\t\t# Set current to head node \n\t\tcurrent = self.head \n\t\t\n\t\twhile current is not None: \n\t\t\t\n\t\t\t# If the data of a node is greater \n\t\t\t# than 10 \n\t\t\tif current.data > 10: \n\t\t\t\t\n\t\t\t\t# Print the data of the node \n\t\t\t\tprint(current.data) \n\t\t\t\n\t\t\t# Go to next node \n\t\t\tcurrent = current.next but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.svm import SVC\n\ndf = pd.DataFrame(dataset)\nX = df['text']\ny = df['sentiment']\n\n# Create the vectorizer\nvectorizer = TfidfVectorizer()\n\n# Fit and transform the vectorizer to X\nX_vect = vectorizer.fit_transform(X)\n\n# Initialize the SVM classifier\nclf = SVC()\n\n# Fit the SVM classifier to the data\nclf.fit(X_vect, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ProductTableRetriever:\n\n    def __init__(self, database_connection):\n        self.connection = database_connection\n\n    def get_prices(self):\n        cursor = self.connection.execute(\"SELECT name, price FROM products\")\n        return {product[0]: product[1] for product in cursor} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mean(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total / len(numbers)\n\nten_numbers = [15,18,14,21,12,21,19,6,17,18]\nmean = mean(ten_numbers)\nprint(\"Mean of ten numbers:\", mean) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import gensim\n\n# Load the pre-trained Word2Vec model\nmodel = gensim.models.KeyedVectors.load_word2vec_format('GoogleNews-vectors-negative300.bin', binary=True)\n\nsentence = 'word embeddings are very useful'\nwords = sentence.split()\n\n# Embed each word in sentence\nembed = []\nfor word in words:\n    word_embedding = model[word]\n    embed.append(word_embedding)\n\nprint(embed) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer \n\nsentences = [\"This product is mediocre.\"]\nsid = SentimentIntensityAnalyzer() \n\nfor sentence in sentences: \n print(sentence)\n ss = sid.polarity_scores(sentence) \n sentiment_type = \"\"\n\nif ss['compound'] >= 0.5: \n sentiment_type = \"positive\"\n\nelif ss['compound'] <= -0.5:\n sentiment_type = \"negative\"\n\nelse: \n sentiment_type = \"neutral\"\n\nprint('Sentiment type:', sentiment_type) \n\n# Output:\n# Sentiment type: neutral but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combine_dict(dict1, dict2):\n    combined_dict = dict1.copy()\n    combined_dict.update(dict2)\n    return combined_dict but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent(lst):\n    count = 0\n    max_element = 0\n    for element in lst:\n        curr_count = lst.count(element)\n        if curr_count > count:\n            count = curr_count\n            max_element = element\n    return max_element but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortList(nums): \n \n    # sort the list in descending order \n    nums.sort(reverse = True) \n   \n    # return the sorted list \n    return nums \n   \n# driver code \nlist = [5, 4, 3, 2, 1] \nprint(sortList(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_array(arr):\n    \"\"\"This function reverses the elements of a given array of numbers\n    \n    Parameters: \n        arr (list): The list of numbers to reverse.\n\t\n    Returns: The reversed array\n    \"\"\"\n    return arr[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef random_list():\n    random_list = []\n    for _ in range(10):\n        num = random.randint(1, 10)\n        random_list.append(num)\n    return random_list\n\nlist = random_list()\nprint(list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(arr, target):\n for i in range(len(arr)):\n if arr[i] == target:\n return i\n \n return -1\n\n# Test array \narr = [1, 4, 3, 2, 5] \ntarget = 3\n\n# Function call \nresult = linear_search(arr, target) \n  \nif result != -1: \n print (\"Element is present at index\", result) \nelse: \n print (\"Element is not present in array\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def matrix_mul3x3(matrix1, matrix2):\n    result = [[0, 0, 0], \n            [0, 0, 0], \n            [0, 0, 0]]\n\n    for i in range(len(matrix1)):\n        for j in range(len(matrix2[0])):\n            for k in range(len(matrix2)):\n                result[i][j] += matrix1[i][k] * matrix2[k][j]\n    return result\n\nmatrix1 = [[1, 2, 3],\n           [4, 5, 6],\n           [7, 8, 9]]\nmatrix2 = [[10, 11, 12], \n           [13, 14, 15], \n           [16, 17, 18]]\n                    \nresult = matrix_mul3x3(matrix1, matrix2) \nfor r in result:\n    print(r) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentence = \"I love the way you smile.\"\n\n# Initialize sentiment Analyzer\nsia = SentimentIntensityAnalyzer()\n\n# Assign sentiment scores\nsentiment_scores = sia.polarity_scores(sentence)\n\n# Print overall sentiment analysis\nprint(\"The overall sentiment of the sentence is: \", sentiment_scores['compound']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_matrix():\n    matrix = []\n    for _ in range(5):\n        row = [0] * 5\n        matrix.append(row)\n    return matrix\n        \nif __name__ == '__main__':\n    matrix = generate_matrix()\n    print(matrix) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\nconn = sqlite3.connect('reservation_system.db')\n\nconn.execute(''' CREATE TABLE IF NOT EXISTS products\n(\nproduct_id INTEGER PRIMARY KEY,\nproduct_name VARCHAR(20) NOT NULL, \nprice DECIMAL NOT NULL\n)''')\n\nconn.execute(\"INSERT INTO products VALUES(1, 'Sofa', 499.99)\")\nconn.execute(\"INSERT INTO products VALUES(2, 'Table', 149.99)\")\nconn.execute(\"INSERT INTO products VALUES(3, 'Chair', 79.99)\")\n\nconn.execute(''' CREATE TABLE IF NOT EXISTS reservations\n(\nreservation_id INTEGER PRIMARY KEY,\nproduct_id INTEGER NOT NULL,\nuser_name VARCHAR(20) NOT NULL,\nreservation_date DATETIME NOT NULL\n)''')\n\ndef register_user(username):\n conn.execute(\"INSERT into users (username) VALUES (?)\", (username,))\n\ndef make_reservation(product_id, username, date):\n conn.execute(\"INSERT into reservations (product_id, user_name, reservation_date) VALUES (?, ?, ?)\", (product_id, username, date))\n\nconn.commit()\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef calculate_std_dev(nums):\n    n = len(nums) \n    std_dev = np.std(nums, axis=0) \n    return std_dev\n\nnums = [3, 7, 12, 22, 35]\nprint(\"Standard Deviation: {:.3f}\".format(calculate_std_dev(nums)))\n# Output: Standard Deviation: 11.106 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for number in numbers:\n if number % 3 == 0:\n  print(f'{number} is a multiple of 3')\n else:\n  print(f'{number} is not a multiple of 3')\n\n# Output:\n# 2 is not a multiple of 3\n# 7 is not a multiple of 3\n# 8 is not a multiple of 3\n# 15 is a multiple of 3\n# 24 is a multiple of 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Generate a flag made up of *\nflagString = \"\"\n\nfor i in range(flagSize):\n    flagString += \"*\"\n\nprint(flagString) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_vowels(string): \n    vowels = ('a', 'e', 'i', 'o', 'u') \n    for x in string.lower(): \n        if x in vowels: \n            string = string.replace(x, \"X\") \n  \n    # Print string without vowels \n    print(string) \n  \n# Driver program \nif __name__ == \"__main__\": \n    string = \"Hello, world!\"\n    replace_vowels(string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_grid(rows, columns):\n for i in range(rows):\n  for j in range(columns):\n   print(chr(i*j+65), end=' ')\n  print('\\n')\n\nprint_grid(5,5)\n\n#Output:\nA  B  C  D  E  \nA  C  E  G  I \nA  F  K  P  U \nA  I  P  W  E \nA  N  U  E  N but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # function to remove punctuations and special characters\ndef clean_string(str):\n # remove all punctuation\n no_punc = ''.join(c for c in str if c not in '!@#$%^&*()_+-={}[]:\"|;\\<>,./?')\n # remove all special characters\n final_string = ''.join(c for c in no_punc if ord(c) >= 32 and ord(c) <= 126)\n return final_string\n\n# sample input\ninput_str = \"this&is#some$sampletext\"\n\n# call the function to remove punctuations and special characters\nclean_str = clean_string(input_str)\n\n# print the clean string\nprint(clean_str)\n\n## Output:\nthisissomesampletext but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name, age, class_name, grade):\n        self.name = name\n        self.age = age\n        self.class_name = class_name\n        self.grade = grade\n\n    def get_name(self):\n        return self.name \n    \n    def get_age(self):\n        return self.age\n\n    def get_class_name(self):\n        return self.class_name\n\n    def get_grade(self):\n        return self.grade but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mix_words(word1, word2):\n \n    # Create an empty result string\n    result = \"\"\n \n    # Iterate through each letter in each word\n    for i in range(max(len(word1), len(word2))):\n        # Check if the letter exists in both words\n        if i < len(word1):\n            result += word1[i]\n        if i < len(word2):\n            result += word2[i]\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findSum(nums, value):\n total = 0\n \n for num in nums:\n if num > value:\n total += num\n \n return total\n \nnums = [1, 4, 5, 10, 12]\nvalue = 6\n\nres = findSum(nums, value)\n\nprint(res) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def truncatedBubbleSort(arr): \n    n = len(arr) \n  \n    # outer loop will run n-2 times \n    for i in range(0, n - 2): \n  \n        swapped = False\n  \n        # inner loop will run n-i-1 times \n        for j in range(0, n - i - 1): \n  \n            # Swap if element found greater \n            # than the next element \n            if arr[j] > arr[j + 1]: \n                arr[j], arr[j + 1] = arr[j + 1], arr[j] \n                swapped = True\n  \n        # If no two elements were swapped \n        # by inner loop, then break \n        if swapped == False: \n            break\n  \n    return arr, i\n\narr = [7, 3, 5, 9]\nres, swaps = truncatedBubbleSort(arr) \nprint(res)\nprint(\"Number of swaps needed: \" + str(swaps)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef linear_regression(x, y):\n    x_mean = np.mean(x)\n    y_mean = np.mean(y)\n    \n    num = 0\n    den = 0\n    for i in range(len(x)):\n        num += (x[i] - x_mean)*(y[i] - y_mean)\n        den += (x[i] - x_mean)**2\n    m = num / den\n    c = y_mean - m*x_mean\n    return m, c but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route('/', methods = ['POST', 'GET'])\ndef index():\n if request.method == 'POST':\n user_input = request.form.get('user_input')\n output = user_input[::-1]\n return render_template('index.html', output=output)\n return render_template('index.html')\n\nif __name__ == '__main__':\n app.run(debug = True)\n\nIndex.html:\n<form method=\"POST\">\n <input type=\"text\" name=\"user_input\">\n <input type=\"submit\" value=\"Reverse String\">\n</form>\n {{ output }} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: abbreviations = {\n    'AD': 'advertisement',\n    'ASAP': 'as soon as possible',\n    'ATM': 'automated teller machine',\n    'AV': 'audio-visual',\n    'CEO': 'chief executive officer'\n    # Add more abbreviations and meanings\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_vowels(word):\n    vowels = 'aeiou'\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Game resources \n# Rooms, items, NPCs \n\n# Global Variables \nplayer_location = 'room1'\nplayer_items = []\n\n# Functions \ndef process_input():\n    input_string = input(\"What do you want to do? \")\n\n    if input_string == 'go north':\n        if player_location == 'room1':\n            player_location = 'room2'\n        elif player_location == 'room2':\n            player_location = 'room3'\n        else:\n            print('You can\\'t go that way')\n\n    elif input_string == 'go south':\n        if player_location == 'room2':\n            player_location = 'room1'\n        elif player_location == 'room3':\n            player_location = 'room2'\n        else:\n            print('You can\\'t go that way')\n    print('You are in ' + player_location)\n\n# Game Loop \nwhile True:\n    process_input() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def median(nums):\n    sorted_nums = sorted(nums)\n    length = len(nums)\n    if length % 2 == 0:\n        return (sorted_nums[length//2] + sorted_nums[length//2 - 1]) / 2\n    else:\n        return sorted_nums[length//2] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def function1(list1):\n    max_sum = 0\n    for i in range(len(list1)):\n        sublist_sum = 0\n        for j in range(i, len(list1)):\n            sublist_sum += list1[j]\n            max_sum = max(max_sum, sublist_sum)\n    return max_sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n        \n    def get_area(self):\n        return 3.14 * (self.radius ** 2)\n        \n    def get_circumference(self):\n        return 2 * 3.14 * self.radius but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_lists(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    if sorted(list1) == sorted(list2):\n        return True\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_dark_colors(colors):\n    dark_colors = []\n    for color in colors:\n        if color == 'Black' or color == 'Purple':\n            dark_colors.append(color)\n    return dark_colors\n\nresult = find_dark_colors(['Red', 'Orange', 'Green', 'Purple', 'Black', 'White'])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [1, 2, 3, 4, 5]\nprint(\"The list is: \")\nfor i in list:\nprint(i, end=\" \") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import collections \n\ntexts = [\n    \"This is a test.\",\n    \"This is another test.\",\n    \"This is a different test.\"\n]\n\n# split the text into words\nwords = []\nfor text in texts:\n    words.extend(text.split())\n\n# count the frequencies of each word\nword_freq = collections.Counter(words)\n\n# get the most common words\nmost_common_words = word_freq.most_common(3)\n\nfor word, count in most_common_words:\n    print('{}: {}'.format(word, count))\n\n#Output:\n#This: 3\n#is: 3\n#a: 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/bin/bash\n\n# OS check\nif [ $(uname) == 'Darwin' ];\nthen\n    echo \"Mac OS detected\"\nelif [ $(uname) == 'Linux' ];\nthen\n    echo \"Linux OS detected\"\nfi\n\n# install homebrew\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n\n# install git\nbrew install git\n\n# install node\nbrew install node\n\n# install nvm\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash\n\n# install yarn\nbrew install yarn\n\n# install postgres\nbrew install postgres\n\n# create local postgres database\ncreatedb your_dbname\n\n# install python\nbrew install python\n\n# start postgres server\npg_ctl -D /usr/local/var/postgres start but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [15, -12, 0, 14, 23, -2]\n\ndef insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i-1\n        while j>=0 and key<arr[j]:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = key\n    return arr\n\nprint(insertion_sort(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_words_with_four_vowels(words):\n    vowels = \"aeiou\"\n    result = []\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter in vowels:\n                count += 1 \n        if count >= 4:\n            result.append(word)\n    return result\n\nwords = [\"algorithm\", \"machine\", \"programming\", \"beast\"]\nresult = find_words_with_four_vowels(words)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maxStringLength(stringList):\n    maxLength = 0 \n    maxString = \"\"\n    for s in stringList:\n        if len(s) > maxLength:\n            maxLength = len(s)\n            maxString = s\n    return maxString\n\nstringList = [\"Hello\", \"World\", \"Avengers\", \"Captain America\"]\nresult = maxStringLength(stringList)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import base64\n\ndef encode_string(string):\n    # Encode the bytes of the given string\n    encoded_bytes = base64.b64encode(string.encode(\"utf-8\"))\n\n    # Get the string representation of the encoded bytes\n    encoded_string = str(encoded_bytes, \"utf-8\")\n\n    return encoded_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def average(numbers):\n sum = 0\n for number in numbers:\n sum += number\n return sum / len(numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\nfrom bs4 import BeautifulSoup\n\nhtml = '''\n<html>\n<a href=\"https://www.example.com\">Example Link</a>\n<a href=\"http://www.example.org\">Another Link</a>\n</html>\n'''\n\nsoup = BeautifulSoup(html, 'html.parser')\n\nlinks = soup.find_all('a', href=re.compile('.*'))\n\nfor link in links:\n    print(link['href'])\n\n# Output:\n# https://www.example.com\n# http://www.example.org but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Import library\nimport pandas as pd\n\n#Read data\ndata = pd.read_csv('dataset.csv')\n\n#Get data from columns\ncolumn1 = data['col1']\ncolumn2 = data['col2']\n\n#Get the stats of column 1\ncolumn1_mean = column1.mean()\ncolumn1_std = column1.std()\n\n#Analyize column 2\ncolumn2_unique_values = set(column2)\n\n#Print results\nprint('The mean of column1 is', column1_mean)\nprint('The standard deviation of column1 is', column2_std)\nprint('The unique values of column2 are', column2_unique_values) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(list, item):\n    \"\"\"\n    Implement linear search in a given list.\n    list: the list to be searched\n    item: the item to be searched for\n    \"\"\"\n    for i in range(len(list)):\n        if list[i] == item:\n            return i \n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortDescending(arr):\n    arr.sort(reverse=True)\n    return arr\n\narray = [3, 7, 1, 5]\nsortedArray = sortDescending(array) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = \"Hello, World, I am here\"\n\nlist = string.split(\", \")\nprint(list)\n\n# Output\n['Hello', 'World', 'I am here'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combine_strings(str1, str2):\n    result = [] \n    for i in range(len(str1)): \n        for j in range(len(str2)): \n            result.append(str1[i] + str2[j]) \n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# Read the data\ndata = pd.read_csv(\"bitcoin.csv\")\n\n# Separate features and labels\nX = data.loc[:, data.columns != 'Close']\ny = data['Close']\n\n# Train the linear regression model\nmodel = LinearRegression().fit(X, y)\n\n# Predict the bitcoin price next week\nprediction = model.predict(X) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from IPython.utils.traitlets import \n\nclass CustomMenu(IPython.config.configurable.Configurable):\n    \"\"\"A customizable menu container\n    \"\"\"\n    def __init__(self):\n        super(CustomMenu, self).__init__(config=None)\n        self._buttons = []\n \n    def add_button(self, label, action):\n        \"\"\"Add a new button to the menu\n        \"\"\"\n        self._buttons.append((label,action))\n \n    def _render_menu(self):\n        \"\"\"Renders the button\n        \"\"\"\n        html = []\n        for label, action in self._buttons:\n            html.append('<a href=\"javascript:{}\">{}</a>'.format(action,label))\n        return '&nbsp;'.join(html)\n \n    def _ipython_display_(self):\n        \"\"\"Renders the menubar\n        \"\"\"\n        display(IPython.core.display.HTML(self._render_menu())) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: a = 10\nb = 20\n\nprint(\"sum is\", a+b) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\nstring = \"This movie was released in 1980\"\n\n# search for substring of 4 digits\nresult = re.search(r'\\d{4}', string)\n\n# print the year\nif result:\n    print(result.group()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_origin(lower, upper):\n \n for i in range(lower, upper+1):\n  num = i\n  origin = \"\"\n \n  # check if the number is a multiple of 3\n  if num % 3 == 0:\n   origin += \"Fizz\"\n \n  # check if the number is a multiple of 5\n  if num % 5 == 0:\n   origin += \"Buzz\"\n \n  # if number is not a multiple of 3 or 5, leave origin empty\n  if origin == \"\":\n   origin = num\n \n  print(origin)\n\nfind_origin(1, 1000) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import spacy\n\n# Load the spacy language model\nnlp = spacy.load('en')\n\n# Create the chatbot's response function\ndef chatbot_response(sentence):\n  # Parse the user's input using the spacy nlp object\n  doc = nlp(sentence)\n\n  # Iterate over the parsed words\n  for word in doc:\n    # Check for an adjective\n    if word.pos_ == 'ADJ':\n      return 'That sounds interesting!'\n\n  # If no adjective is found, the chatbot has nothing to reply\n  return 'I see.' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \nfrom scipy.optimize import curve_fit\n\n# Define the x-coordinate values \nxData = np.arange(-5, 5, 0.1) \n\n# Define the y-coordinate values\nyData = 3*xData**2 + 2*xData + 3 \n\n# Define the polynomial function \ndef func(x, a, b, c): \n    return a*x**2 + b*x + c \n\n# Fit the polynomial \nparams, params_covariance = curve_fit(func, xData, yData) \n\n# Extract parameters from the params array \na = params[0] \nb = params[1] \nc = params[2]\n\nprint('Fitted polynomial: {0:.2f}x^2 + {1:.2f}x + {2:.2f}'.format(a, b, c))\n\nOutput: Fitted polynomial: 3.00x^2 + 2.00x + 3.00 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import spacy\nfrom spacy.tokens import Span\n\nnlp = spacy.load('en_core_web_sm')\n\ndoc = nlp(\"John went to the store. He bought an apple.\")\n\n# Find all coreferences that have not been resolved\nreferences = set()\nfor token in doc:\n if token._.in_coref:\n references.add(token._.coref_cluster)\n\nnew_clusters = []\nfor cluster in references:\n # Get the span for the given cluster\n span = Span(doc, cluster.main.start, cluster.main.end, label=cluster.main.label)\n \n # Add all antecedents to the span\n for antecedent in cluster.ants:\n span = span._.set_antecedent(antecedent)\n new_clusters.append(span)\n \n # Overwrite the doc's coref attribute with the newly created clusters\n doc._.coref_clusters = new_clusters\n\nprint([(ent.text, ent._.ancestor.text) for ent in doc.ents])\n\n# Output: [('John', 'He'), ('the store', 'He')] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Install library for formatting and justifying paragraphs\npip install justify\n\n# Function for formatting and justifying paragraphs\ndef format_and_justify_paragraphs(paragraph):\n    from justify import Justify\n    formatted_text = Justify(paragraph, width=90).format()\n    return formatted_text\n\n# Example\nparagraph = \"Paragraph with improper formatting\";\nformatted_text = format_and_justify_paragraphs(paragraph)\nprint(formatted_text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: public class Factorial {\n    public static int fact(int n) {\n        if (n < 0) {\n            return 0;\n        }\n\n        if (n == 0) {\n            return 1;\n        }\n\n        return n * fact(n - 1);\n    }\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: listC = [x for x in listA if x not in listB]\nprint(listC) # prints [1, 3, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_even_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(list): \n    for i in range(len(list)-1): \n        for j in range(0, len(list)-i-1):\n            if list[j] > list[j+1] : \n                list[j], list[j+1] = list[j+1], list[j]\nlist = [3, 7, 1, 4, 5]\nsort_list(list)\nprint(list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_even_numbers(numbers):\n    odd_numbers = []\n    for number in numbers:\n        if number % 2 != 0:\n            odd_numbers.append(number)\n    return odd_numbers\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nodd_numbers = remove_even_numbers(numbers)\nprint(odd_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = 'https://www.example.com/'\n\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    print('Success!')\nelse:\n    print('An error has occurred.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\nprofile_data = {\n  \"name\":\"John Smith\",\n  \"age\":32,\n  \"email\":\"john.smith@example.com\"\n}\n\ndata = json.loads(profile_data)\n\nprint(\"Name: {}\".format(data[\"name\"]))\nprint(\"Age: {}\".format(data[\"age\"]))\nprint(\"Email: {}\".format(data[\"email\"]))\n\n# Output: \n# Name: John Smith\n# Age: 32\n# Email: john.smith@example.com but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: soup = BeautifulSoup(html, 'html.parser')\ntitle = soup.find('title').text\nprint(title) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(num):\n    result = 1\n    if num > 1:\n        for i in range(2,num+1):\n            result *= i\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Initialize a list\nprimes = []\n\nfor x in range(2, 101):\n    prime = True\n    for y in range(2, x):\n        if x % y == 0:\n            prime = False\n            break\n    if prime:\n        primes.append(x)\n        \nprint(primes) # Output: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Read Boston housing data in\nboston_df = pd.read_csv(\n    'https://raw.githubusercontent.com/PacktWorkshops/The-Data-Science-Workshop/master/Chapter02/Dataset/boston_house_prices.csv'\n)\n\n# Visualize data\nplt.style.use('ggplot')\nplt.scatter(boston_df.RM, boston_df.MEDV, color='black')\nplt.xlabel('Average number of rooms per dwelling (RM)')\nplt.ylabel('Median Value of Homes in $1000s (MEDV)')\nplt.title(\"Modeling Simple Linear Regression in Boston Housing Data\")\n\n# Calculate regression line\nX = boston_df[['RM']]\ny = boston_df['MEDV']\n\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Calculate predicted value\npredicted_MEDV = model.predict(X)\n\n# Plot regression line\nplt.plot(boston_df.RM, predicted_MEDV, color='blue', linewidth=2)\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math \n\ndef area(a, b, c): \n\ts = (a + b + c) / 2\n\treturn (s*(s-a)*(s-b)*(s-c)) ** 0.5\n\na = 3\nb = 4\nc = 5\n\nprint('Surface Area of triangle is: {:.2f}'.format(area(a, b, c))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def append_list(list_to_append, list_to_add):\n    return list_to_append + list_to_add but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def double_list(list_nums):\n for num in list_nums:\n print(num * 2)\n \nlist_nums = [4, 6, 2, 8]\ndouble_list(list_nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maxArea(heights):\n  max_area = 0\n  left = 0\n  right = len(heights) - 1\n\n  while left < right:\n    h = min(heights[left], heights[right])\n    max_area = max(max_area, h * (right - left))\n    if heights[left] < heights[right]:\n      left += 1\n    else: \n      right -= 1\n\n  return max_area\n\nprint(maxArea(heights)) # 8 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(arr):\n    n = len(arr)\n   \n    # Traverse through all array elements \n    for i in range(n): \n\n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n\n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n\narr = [5, 4, 3, 7, 1] \nbubble_sort(arr) \n       \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]), but is not the same. just give one example and only return the code."}
