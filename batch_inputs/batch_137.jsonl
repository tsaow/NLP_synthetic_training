{"prompt": "make some code that functions the same as the following code: def sortArray(arr):\n    n = len(arr) \n\t  \n    # Traverse through all array elements \n    for i in range(n): \n\n        # Find the minimum element in remaining \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, n): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n\n        # Swap the found minimum element with \n        # the first element         \n        arr[i], arr[min_idx] = arr[min_idx], arr[i] \n  \n    return arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findGCD(a,b): \n    if (a == 0) \n        return b \n    if (b == 0) \n        return a \n    \n    if (a == b): \n        return a \n          \n    # If a is greater \n    if (a > b): \n        return findGCD(a-b, b) \n    return findGCD(a, b-a) \n\nif __name__ == '__main__': \n      a = 48 \n      b = 18 \n      print(\"GCD of\", a , b, \"is:\", findGCD(a, b)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_list(list, value): \n    i = 0\n    while(i < len(list)): \n        if list[i] == value: \n            return i \n        i = i + 1\n  \n    return -1\n  \nlist = [2, 3, 5, 9] \nvalue = 5\nresult = search_list(list, value) \n  \nif result != -1: \n    print(\"Element is present at index\", result) \nelse: \n    print(\"Element is not present in list\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student():\n    def __init__(self, name, age, gender):\n        self.name=name\n        self.age=age\n        self.gender=gender\n    def generate(self, args):\n        return Student(*args) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n#create a list to store the stock prices\nstock_prices = []\n\n#loop through each stock symbol\nfor symbol in [\"MSFT\", \"AAPL\", \"GOOGL\"]:\n url = \"https://example.com/stocks/\" + symbol\n page = requests.get(url)\n soup = BeautifulSoup(page.content, 'html.parser')\n\n# find the price in the page and add it to the list of stock prices\n price = soup.find('span', attrs={'id':'stock_price'}).text\n stock_prices.append(price)\n\nprint(stock_prices) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def average(lst):\n sum = 0\n for num in lst:\n  sum += num\n\n return sum/len(lst)\n\nnums = [2, 4, 6, 8, 10]\nresult = average(nums)\nprint(result) # 6.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\n\ndef is_pangram(sentence):\n    sentence = sentence.lower()\n    alphabet = string.ascii_lowercase\n    for letter in alphabet:\n        if letter not in sentence:\n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: features = [a, c, 2] # Selecting a, c from list A and 2 from list B. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(list, item):\n    # Traverse through all elements in the list\n    for i in range(len(list)):\n        if list[i] == item:\n            return i  # Return the index of the element\n    return -1 # Return -1 if the item is not found but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: <!DOCTYPE html>\n<html>\n    <head>\n        <title>Programming Languages by Market Share</title>\n        <style type=\"text/css\">\n            table {\n                font-family: verdana, arial, sans-serif;\n                border-collapse: collapse;\n                width: 100%;\n            }\n        \n            td, th {\n                border: 1px solid #dddddd;\n                text-align: left;\n                padding: 8px;\n            }\n        </style>\n    </head>\n    <body>\n        <table>\n            <caption>Programming Languages by Market Share</caption>\n            <tr>\n                <th>Programming Language</th>\n                <th>Market Share</th>\n                <th>Features</th>\n            </tr>\n            <tr>\n                <td>Java</td>\n                <td>27.2%</td>\n                <td>Platform independence, wide support from the development community, good scalability</td>\n            </tr>\n            <tr>\n                <td>C</td>\n                <td>15.2%</td>\n                <td>Widely used among developers, efficiency, well-used in embedded systems</td>\n            </tr>\n            <tr>\n                <td>C++</td>\n                <td>9.2%</td>\n                <td>Object-oriented features, used in various industries, platform independent</td>\n            </tr>\n            <tr>\n                <td>Python</td>\n                <td>8.2%</td>\n                <td>Easy to learn and use, dynamic programming language, good scalability</td>\n            </tr>\n            <tr>\n                <td>C#</td>\n                <td>7.4%</td>\n                <td>Object-oriented, popular for enterprise development, reliable memory management</td>\n            </tr>\n        </table>\n    </body>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n\n# List of words to detect\nwords_to_detect = ['green', 'blue']\n\n# Set the URL\nurl = 'https://example.com'\n\n# Get the content\npage = requests.get(url).text\n\n# Create a BeautifulSoup object from the content\nsoup = BeautifulSoup(page, 'html.parser')\n\n# Get all a tags (links)\nlinks = soup.find_all('a')\n\nfor link in links:\n\n # Loop through the words to detect\n for word in words_to_detect:\n\n  # Check if the link text contains any of the words\n  if word in link.text:\n\n   # Print the link\n   print(link['href']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport re \nimport nltk\nfrom nltk.stem.wordnet import WordNetLemmatizer\nfrom nltk.corpus import twitter_samples, stopwords\nfrom nltk.tag import pos_tag\nfrom nltk.tokenize import word_tokenize\n\ndef create_chatbot():\n    \"\"\"Write a Python program to build a chatbot using natural language processing and machine learning.\"\"\"\n    # Build a corpus of words \n    words = []\n    for word in twitter_samples.strings('tweets.20150430-223406.json'):\n        words.extend(word_tokenize(word)) \n    words = set(words)\n\n    # Lemmatize the words\n    lemmatizer = WordNetLemmatizer()\n    words = [lemmatizer.lemmatize(word) for word in words] \n \n    # Remove the stopwords\n    words = [word for word in words if word not in stopwords.words(\"english\")]\n\n    # Compute pairs of words and their frequencies\n    pairs = {}\n    for word in words:\n        pairs[word] = [word]\n\n    # Build the chatbot\n    chatbot = {}\n    for word, similar_words in pairs.items():\n        chatbot[word] = random.choice(similar_words)\n        \n    return chatbot\n\nchatbot = create_chatbot() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nprint(is_prime(17)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def to_lowercase(strings):\n    return [string.lower() for string in strings]\n    \nresult = to_lowercase(['CoDE', 'OF', 'LinK'])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_monthly_payment(amount, interest, term): \n  monthly_interest_rate = interest / 12 \n  number_of_payments = term * 12\n\n  monthly_payment = (amount * monthly_interest_rate) / (1 - pow((1 + monthly_interest_rate), (-number_of_payments)))\n  \n  return monthly_payment\n\namount = 2000\ninterest_rate = 10\nterm = 3\npayment = calculate_monthly_payment(amount, interest_rate, term)\nprint(f'The monthly payment is {payment:.2f}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_uppercase(text):\n    if text[0].isupper():\n        print(\"True\")\n    else:\n        print(\"False\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_for_word(text_file, query_word):\n    words = []\n\n    with open(text_file, \"r\") as file:\n        for line in file:\n            words.extend(line.split())\n\n    if query_word in words:\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, render_template\nimport pymysql\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    # Create connection to database\n    connection = pymysql.connect(host='localhost',\n                                 port=3306,\n                                 user='user',\n                                 password='P@ssw0rd',\n                                 db='db')\n    # Get all users from database\n    with connection.cursor() as cursor:\n        query = 'SELECT * FROM users'\n        cursor.execute(query)\n        result = cursor.fetchall()\n    # Close connection\n    connection.close()\n    return render_template('index.html', users=result)\n\nif __name__ == '__main__':\n    app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def create_pair(a,b):\n    c = a+1\n    d = b+1\n    return (c, d) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python -u\n\nimport datetime\nimport modbus_tcp_sim\nimport os\nimport sys\nfrom twisted.internet import reactor\nfrom fronius_sim import FroniusSim\n\napp_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nbottle_dir = os.path.normpath(os.path.join(app_dir, '..', '..', 'software', 'ext', 'bottle'))\nsys.path.extend([bottle_dir, app_dir])\n\nimport bottle\n\napplication = bottle.default_app()\n\ninverters = [\n\tFroniusSim(id='1', device_type=232, unique_id='1234', custom_name='SouthWest', has_3phases=True, modbus_enabled=False),\n\tFroniusSim(id='2', device_type=224, unique_id='4321', custom_name='', has_3phases=False, modbus_enabled=False),\n\tFroniusSim(id='3', device_type=208, unique_id='1111', custom_name='Tmp', has_3phases=False, modbus_enabled=True)\n]\n\nsma_inverter = FroniusSim(id='126', device_type=None, unique_id='10988912', custom_name='SMA', has_3phases=False, modbus_enabled=True)\n\n\n@bottle.route('/solar_api/GetAPIVersion.cgi')\ndef get_api_version():\n\treturn dict(APIVersion=1, BaseUrl='solar_api/v1/')\n\n\n@bottle.route('/solar_api/v1/GetInverterInfo.cgi')\ndef get_inverter_info():\n\treturn {\n\t\t'Head': create_head({}),\n\t\t'Body': {\n\t\t\t'Data': dict((x.id, {\n\t\t\t\t'DT': x.device_type,\n\t\t\t\t'PVPower': 5000,\n\t\t\t\t'Show': 1,\n\t\t\t\t'UniqueID': x.unique_id,\n\t\t\t\t'ErrorCode': 0,\n\t\t\t\t'StatusCode': 7,\n\t\t\t\t'CustomName': x.custom_name })\n\t\t\t\tfor x in inverters)}}\n\n\n@bottle.route('/solar_api/v1/GetInverterRealtimeData.cgi')\ndef get_inverter_realtime_data():\n\tscope = bottle.request.query.Scope\n\tdevice_id = bottle.request.query.DeviceId\n\tdata_collection = bottle.request.query.DataCollection\n\tif scope == 'Device':\n\t\ttry:\n\t\t\tinverter = next((i for i in inverters if i.id == device_id))\n\t\texcept StopIteration:\n\t\t\treturn {\n\t\t\t\t'Head': create_head({\n\t\t\t\t\t'Scope': scope,\n\t\t\t\t\t'DeviceId': device_id,\n\t\t\t\t\t'DataCollection': data_collection},\n\t\t\t\t\terror_code=1,\n\t\t\t\t\terror_message='device not found')}\n\t\tif data_collection == 'CumulationInverterData':\n\t\t\treturn {\n\t\t\t\t'Head': create_head({\n\t\t\t\t\t'Scope': scope,\n\t\t\t\t\t'DeviceId': device_id,\n\t\t\t\t\t'DataCollection': data_collection}),\n\t\t\t\t'Body': {\n\t\t\t\t\t'Data': {\n\t\t\t\t\t\t'PAC': {'Value': 3373, 'Unit': 'W'},\n\t\t\t\t\t\t'DAY_ENERGY': {'Value': 8000, 'Unit': 'Wh'},\n\t\t\t\t\t\t'YEAR_ENERGY': {'Value': 44000, 'Unit': 'Wh'},\n\t\t\t\t\t\t'TOTAL_ENERGY': {'Value': 45000, 'Unit': 'Wh'},\n\t\t\t\t\t\t'DeviceStatus': {\n\t\t\t\t\t\t\t'StatusCode': 7,\n\t\t\t\t\t\t\t'MgmtTimerRemainingTime': -1,\n\t\t\t\t\t\t\t'ErrorCode': 0,\n\t\t\t\t\t\t\t'LEDCode': 0,\n\t\t\t\t\t\t\t'LEDColor': 2,\n\t\t\t\t\t\t\t'LEDState': 0,\n\t\t\t\t\t\t\t'StateToReset': False}}}}\n\t\tif data_collection == 'CommonInverterData':\n\t\t\treturn {\n\t\t\t\t'Head': create_head({\n\t\t\t\t\t'Scope': scope,\n\t\t\t\t\t'DeviceId': device_id,\n\t\t\t\t\t'DataCollection': data_collection}),\n\t\t\t\t'Body': {\n\t\t\t\t\t'Data': {\n\t\t\t\t\t\t'PAC': {'Value': inverter.main.power, 'Unit': 'W'},\n\t\t\t\t\t\t'SAC': {'Value': 3413, 'Unit': 'VA'},\n\t\t\t\t\t\t'IAC': {'Value': inverter.main.current, 'Unit': 'Hz'},\n\t\t\t\t\t\t'UAC': {'Value': inverter.main.voltage, 'Unit': 'V'},\n\t\t\t\t\t\t'FAC': {'Value': 50, 'Unit': 'Hz'},\n\t\t\t\t\t\t'IDC': {'Value': 8.2, 'Unit': 'A'},\n\t\t\t\t\t\t'UDC': {'Value': 426, 'Unit': 'V'},\n\t\t\t\t\t\t'DAY_ENERGY': {'Value': 8000, 'Unit': 'Wh'},\n\t\t\t\t\t\t'YEAR_ENERGY': {'Value': 44000, 'Unit': 'Wh'},\n\t\t\t\t\t\t'TOTAL_ENERGY': {'Value': inverter.main.energy, 'Unit': 'Wh'},\n\t\t\t\t\t\t'DeviceStatus': {\n\t\t\t\t\t\t\t'StatusCode': 7,\n\t\t\t\t\t\t\t'MgmtTimerRemainingTime': -1,\n\t\t\t\t\t\t\t'ErrorCode': 0,\n\t\t\t\t\t\t\t'LEDCode': 0,\n\t\t\t\t\t\t\t'LEDColor': 2,\n\t\t\t\t\t\t\t'LEDState': 0,\n\t\t\t\t\t\t\t'StateToReset': False}}}}\n\t\tif data_collection == '3PInverterData':\n\t\t\tif not inverter.has_3phases:\n\t\t\t\treturn {\n\t\t\t\t\t'Head': create_head({\n\t\t\t\t\t\t'Scope': scope,\n\t\t\t\t\t\t'DeviceId': device_id,\n\t\t\t\t\t\t'DataCollection': data_collection},\n\t\t\t\t\t\terror_code=2,\n\t\t\t\t\t\terror_message='not supported')}\n\t\t\treturn {\n\t\t\t\t'Head': create_head({\n\t\t\t\t\t'Scope': scope,\n\t\t\t\t\t'DeviceId': device_id,\n\t\t\t\t\t'DataCollection': data_collection}),\n\t\t\t\t'Body': {\n\t\t\t\t\t'Data': {\n\t\t\t\t\t\t'IAC_L1': {'Value': inverter.l1.current, 'Unit': 'A'},\n\t\t\t\t\t\t'IAC_L2': {'Value': inverter.l2.current, 'Unit': 'A'},\n\t\t\t\t\t\t'IAC_L3': {'Value': inverter.l3.current, 'Unit': 'A'},\n\t\t\t\t\t\t'UAC_L1': {'Value': inverter.l1.voltage, 'Unit': 'V'},\n\t\t\t\t\t\t'UAC_L2': {'Value': inverter.l2.voltage, 'Unit': 'V'},\n\t\t\t\t\t\t'UAC_L3': {'Value': inverter.l3.voltage, 'Unit': 'V'},\n\t\t\t\t\t\t'T_AMBIENT': {'Value': 27, 'Unit': 'V'},\n\t\t\t\t\t\t'ROTATION_SPEED_FAN_FL': {'Value': 83, 'Unit': 'RPM'},\n\t\t\t\t\t\t'ROTATION_SPEED_FAN_FR': {'Value': 83, 'Unit': 'RPM'},\n\t\t\t\t\t\t'ROTATION_SPEED_FAN_BL': {'Value': 83, 'Unit': 'RPM'},\n\t\t\t\t\t\t'ROTATION_SPEED_FAN_BR': {'Value': 83, 'Unit': 'RPM'}}}}\n\telif scope == 'System':\n\t\treturn {\n\t\t\t'Head': create_head({'Scope': scope}),\n\t\t\t'Body': {\n\t\t\t\t'Data': {\n\t\t\t\t\t'PAC': {'Value': 3373, 'Unit': 'W'},\n\t\t\t\t\t'DAY_ENERGY': {'Value': 8000, 'Unit': 'Wh'},\n\t\t\t\t\t'YEAR_ENERGY': {'Value': 44000, 'Unit': 'Wh'},\n\t\t\t\t\t'TOTAL_ENERGY': {'Value': 45000, 'Unit': 'Wh'}}}}\n\telse:\n\t\traise Exception('Unknown scope')\n\n\ndef create_head(args, error_code=0, error_message=''):\n\treturn {\n\t\t'RequestArguments': args,\n\t\t'Status': {\n\t\t\t\"Code\": error_code,\n\t\t\t\"Reason\": error_message,\n\t\t\t\"UserMessage\": \"\"},\n\t\t'Timestamp': datetime.datetime.now().isoformat()}\n\n\nclass TwistedServer(bottle.ServerAdapter):\n\tdef start(self, handler):\n\t\tfrom twisted.web import server, wsgi\n\t\tfrom twisted.python.threadpool import ThreadPool\n\t\tfrom twisted.internet import reactor\n\t\tthread_pool = ThreadPool(minthreads=0, maxthreads=1)\n\t\tthread_pool.start()\n\t\treactor.addSystemEventTrigger('after', 'shutdown', thread_pool.stop)\n\t\tfactory = server.Site(wsgi.WSGIResource(reactor, thread_pool, handler))\n\t\treactor.listenTCP(self.port, factory, interface=self.host)\n\t\t# reactor.run()\n\n\nif __name__ == '__main__':\n\t# host='0.0.0.0': accept connections from all sources\n\tserver = TwistedServer(host='0.0.0.0', port=8080, debug=True)\n\tserver.start(application)\n\tmodbus_tcp_sim.start_server(inverters + [sma_inverter])\n\treactor.run()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Conv2D, Flatten, Dropout, MaxPooling2D\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\n# Initializing training data\n# Images should be in the same folder\nimage_generator = ImageDataGenerator(rescale=1./255)\ndata_gen = image_generator.flow_from_directory(\n directory='data/',\n target_size=(150, 150),\n batch_size=32,\n class_mode='binary'\n)\n\n# Building the model\nmodel = Sequential([\n Conv2D(16, 3, padding='same', activation='relu', \n input_shape=(150, 150 ,3)),\n MaxPooling2D(),\n Dropout(0.2),\n Conv2D(32, 3, padding='same', activation='relu'),\n MaxPooling2D(),\n Dropout(0.2),\n Conv2D(64, 3, padding='same', activation='relu'),\n MaxPooling2D(),\n Dropout(0.2),\n Flatten(),\n Dense(512, activation='relu'),\n Dense(1)\n])\n\n# Compiling the model\nmodel.compile(optimizer='adam',\n loss=tf.keras.losses.BinaryCrossentropy(from_logits=True),\n metrics=['accuracy'])\n\n# Training the model\nmodel.fit(\n data_gen,\n steps_per_epoch=20,\n epochs=10\n)\n\n# Testing the model\ntest_loss, test_acc = model.evaluate(data_gen, steps=20)\nprint('Test accuracy:', test_acc) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sum = 0\nfor i in range (1,11):\n    if i % 2 == 0:\n        sum += i\nprint(sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def format_string(s):\n    string_arr = s.split(\"--\")\n    return ' '.join(string_arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def letter_count(s):\n    count = {}\n    for c in s:\n        if c not in count:\n            count[c] = 1\n        else:\n            count[c] += 1\n    return count\n\ns = \"hello world\"\ncount = letter_count(s)\nprint(count) # {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\n\ndef check_grammar(sentence):\n    # tokenize the sentence into words\n    tokens = nltk.word_tokenize(sentence)\n    # tag each token with part-of-speech\n    tagged = nltk.pos_tag(tokens)\n\n    grammar = \"NP: {<DT>?<JJ>*<NN>}\"\n    # create a parser\n    cp = nltk.RegexpParser(grammar)\n    result = cp.parse(tagged)\n\n    if len(result) == len(tokens):\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a Python program that takes in a list of email addresses and stores them in a CSV.\n\"\"\"\n\nimport csv\n\ndef store_emails(emails):\n    with open('emails.csv', 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        for email in emails:\n            writer.writerow([email])\n\nif __name__ == '__main__':\n    emails = [\"example@gmail.com\",\"example2@gmail.com\",\"example3@gmail.com\"]\n    store_emails(emails) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport json\n\ndef ask_question(query):\n    #make a get request\n    r = requests.get(\"<URL>/query?q=\"+query)\n\n    #process the response\n    resp_json = json.loads(r.text)\n    answer = resp_json['results'][0]['fulfillment']['speech']\n    return answer\n\nif __name__ == \"__main__\":\n    #Accept a question from the user\n    query = input(\"You: \")\n    answer = ask_question(query)\n    print(\"Chatbot: %s\" % answer) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nFunction to take an input and return a list of its prime factors\n\"\"\"\ndef prime_factorize(n): \n\n    prime_factors = [] \n\n    d = 2\n    while d*d <= n: \n        while (n % d) == 0: \n            prime_factors.append(d)  \n            n /= d \n        d += 1\n    \n    if n > 1: \n        prime_factors.append(n)\n    \n    return prime_factors \n\nif __name__ == '__main__':\n    print(prime_factorize(81)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def align_columns(text):\n        words = text.split(\" \")\n        max_len = 0\n        for w in words:\n            if len(w) > max_len:\n                max_len = len(w)\n        for i, w in enumerate(words):\n            words[i] = w.ljust(max_len) \n        return \" \".join(words)\n\nif __name__ == '__main__':\n    text = \"This is a test text to be aligned in columns\"\n    print(\"Aligned in columns:\", align_columns(text)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import xml.etree.ElementTree as ET\n\ndef extract_attribute(xml_str):\n    root = ET.fromstring(xml_str)\n    attribs = []\n    for element in root.iter():\n        attribs.append(element.tag + \": \" + element.attrib.get('title',''))\n    \n    return attribs\n\nif __name__ == '__main__':\n    xml_str = \"\"\"\n<bookstore>\n  <book>\n    <title>The Autobiography of Benjamin Franklin</title>\n    <author>\n      <first-name>Benjamin</first-name>\n      <last-name>Franklin</last-name>\n    </author>\n    <price>8.99</price>\n  </book>\n</bookstore>\n    \"\"\"\n    print(\"Attributes:\", extract_attribute(xml_str)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_contiguous(arr):\n    if (len(arr) == 0):\n        return True\n    arr.sort()\n    for i in range(len(arr) - 1):\n        if (arr[i] + 1 != arr[i+1]):\n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef get_n_random_numbers(max_num, num_of_nums):\n    random_numbers = []\n    for _ in range(num_of_nums):\n        random_numbers.append(random.randrange(max_num))\n    return random_numbers but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Biodata:\n    def __init__(self, name, age, gender, height, weight, date_of_birth):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.height = height\n        self.weight = weight\n        self.date_of_birth = date_of_birth but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_common_subsequence(string1, string2):\n    \"\"\"\n    Find the longest common subsequence of two strings.\n\n    Args:\n        string1 (str): first string\n        string2 (str): second string\n\n    Returns:\n        str: longest common subsequence\n    \"\"\"\n    m = len(string1)\n    n = len(string2)\n    dp = [[None]*(n+1) for i in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n\n            elif string1[i-1] == string2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    lcs = ''\n    i, j = m, n\n    while i > 0 and j > 0:\n        if string1[i-1] == string2[j-1]:\n            lcs += string1[i-1]\n            i -= 1\n            j -= 1\n\n        elif dp[i-1][j] > dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(11):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def unique_list(nums):\n  return list(set(nums)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nAutomating web form filling\n\"\"\"\n\nimport requests\n\ndef fill_form(url, data):\n    \"\"\"\n    Takes in a url and a data dictionary and fills out an online form\n    \"\"\"\n\n    # Make a POST request to the url with data\n    response = requests.post(url, data=data)\n\n    # Check if the request was successful\n    if response.status_code == 200:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    # Provide the url and data to be used\n    URL = 'http://www.example.com'\n    DATA = {\n        'name': 'John',\n        'email': 'john@example.com'\n    }\n\n    # Call the fill_form function\n    result = fill_form(URL, DATA)\n\n    if result:\n        print('Form filled successfully!')\n    else:\n        print('Form fill failed!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_arrays(a, b):\n    c = []\n    n = len(a)\n    for i in range(n):\n        c.append(a[i] + b[i])\n    return c\n\na = [2, 3, 4]\nb = [5, 6, 7]\nresult = add_arrays(a, b)\nprint(result) # prints [7, 9, 11] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_min_max(numbers):\n max_num = max(numbers)\n min_num = min(numbers)\n new_list = []\n for i in numbers:\n  if i == max_num or i == min_num:\n   new_list.append(i)\n return new_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def contains_duplicates(lst):\n    seen = set()\n    for x in lst:\n        if x in seen:\n            return True\n        seen.add(x)\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # define substitution cipher key\nkey = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef encode(message):\n    encoded_message = \"\"\n\n    # iterate through the message\n    for char in message:\n        # check if character is a letter\n        if char.isalpha():\n            # convert character to uppercase\n            char = char.upper()\n            # find the index of the encryption key where the letter is located\n            index = key.index(char)\n            # replace the character with the next letter in the encryption key\n            char = key[(index + 1) % len(key)]\n        # add the character to form the encoded message\n        encoded_message += char\n\n    return encoded_message\n\n# test\nmsg = 'It is a secret'\nencoded = encode(msg)\nprint(encoded) # JUJVBTBTFDSFUJFT but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nWrite a Python program to remove the duplicates in a list and print the list in ascending order\n\"\"\"\n\ndef remove_duplicates_ascending(l):\n    return sorted(list(set(l)))\n\nif __name__ == \"__main__\":\n    l = [10,7,9,12,11,7,9,10]\n    res = remove_duplicates_ascending(l)\n    print(res) # [7, 9, 10, 11, 12] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [3, 6, 9, 1, 4, 8]\n\nlist.sort()\n\nprint(list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_element_in_list(list_a, target):\n return target in list_a\n\nis_element_in_list(list_a, target) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def my_decorator(func):\n    def wrapper():\n        print(\"Something is happening before the function is called.\")\n        func()\n        print(\"Something is happening after the function is called.\")\n    return wrapper\n\n@my_decorator\ndef say_hello():\n    print(\"Hello!\")\n\nsay_hello()\n\n# Output\n# Something is happening before the function is called.\n# Hello!\n# Something is happening after the function is called. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name, grade):\n        self.name = name\n        self.grade = grade\n\n    \nclass Course:\n    def __init__(self, name, teachers):\n        self.name = name\n        self.teachers = teachers\n    \n    \nclass School:\n    def __init__(self, name):\n        self.name = name\n        self.students = []\n        self.courses = [] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ninput_file = open('text.txt', 'r')\noutput_file = open('output.txt', 'w')\n\nfor line in input_file:\n    if not re.search(r'deleted', line):\n        output_file.write(line)\n\ninput_file.close()\noutput_file.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(x, y): \n    if x == 0: \n        return y \n    if y == 0: \n        return x \n    if x == y: \n        return x \n    if x > y: \n        small = y \n    else: \n        small = x \n    for i in range(1, small+1): \n        if((x % i == 0) and (y % i == 0)): \n            gcd = i \n    return gcd but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: s=73\nmean=10.428571\nmedian=9\n \n# Program to calculate the sum,mean,median of the data\n \ndataset = [1,5,8,9,12,17,20]\n \n# calculate the sum\ns = 0\nfor items in dataset:\n    s = s + items\n \n# calculate mean\nmean = s/len(dataset)\n \n# calculate median\ndataset_sorted = sorted(dataset)\nm_m = len(dataset_sorted)\n \nif m_m%2 == 0:\n    # n is even\n    m1 = dataset_sorted[int(m_m/2) - 1]\n    m2 = dataset_sorted[int((m_m/2))]\n    median = (m1 + m2)/2\nelse:\n    # n is odd\n    median = dataset_sorted[int((m_m+1)/2 - 1)]\n \n# display the results\nprint(\"sum:\", s)\nprint(\"mean:\", mean)\nprint(\"median:\", median) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nDesign a python program to detect anagrams from a given list of words. \n\"\"\"\n\nwords=['dog','bar','home','god','act','chair']\n\n# Create a dictionary to store the sorted words\nsortedWords = {}\n\n# Sort all the words and store in the dictionary, with the key being the sorted words\nfor word in words:\n    sortedWord = ''.join(sorted(word))\n    if sortedWord not in sortedWords:\n        sortedWords[sortedWord] = []\n    sortedWords[sortedWord].append(word)\n\n# Look for anagrams in the dictionary\nanagrams = []\nfor key, value in sortedWords.items():\n    if len(value) > 1:\n        anagrams.append(value)\n    \nprint(anagrams) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Book:\n    def __init__(self, title, author, pages):\n        self.title = title\n        self.author = author\n        self.pages = pages\n\n    def __str__(self):\n        return '{} by {} ({} pages)'.format(self.title, self.author, self.pages) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Circle:\n    def __init__(self, radius, x=0, y=0):\n        self.x = x\n        self.y = y\n        self.radius = radius\n\n    def area(self):\n        return (self.radius ** 2) * math.pi\n\n    def circumference(self):\n        return 2 * math.pi * self.radius\n\n    def __str__(self):\n        return f'Circle  at ({self.x}, {self.y}) with radius {self.radius}' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_dict(keys, values):\n n = len(keys)\n if n != len(values):\n  return None\n\n dct = {}\n for i in range(n):\n  dct[keys[i]] = values[i] if i == (n-1) else generate_dict(keys[:i+1], values[i])\n\n return dct\n\nkeys = [\u2018a\u2019, \u2018b\u2019, \u2018c\u2019, \u2018d\u2019]\nvalues = [1, 2, 3, 4]\nresult = generate_dict(keys, values)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\ndef download_data(url):\n    r = requests.get(url)\n    # determine the file format\n    content_type = r.headers.get('content-type')\n\n    # depending on file format, set appropriate encoding\n    if content_type == \"image/jpeg\":\n        encoding = 'binary'\n    elif content_type == \"application/pdf\":\n        encoding = 'utf-8'\n    else:\n        encoding = 'utf-8'\n    \n    # decode data and store it in file\n    with open(url.split('/')[-1], 'wb') as f:\n        f.write(r.content)\n\nurl = \"https://example.com/data\"\ndownload_data(url) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com/'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# scrape the website using soup but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport pandas as pd\n\n# Get website content\nurl = 'http://www.example.com'\ncontent = requests.get(url).content\n\n# Create pandas data frame\ndf = pd.read_html(content)[0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_word(word, dictionary):\n    if word in dictionary.keys():\n        return dictionary[word]\n    else:\n        return None\n\ndictionary = {'hello': 'string', 'goodbye': 'bye'}\n\nword = 'hello'\n\nresult = search_word(word, dictionary)\n\nif result:\n    print('Word found in dictionary: ' + result)\n\nelse:\n    print('Word not found in dictionary.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n \n# Function to simulate coin toss\ndef coin_toss(num_tosses):\n    head_count = 0\n    tail_count = 0\n    for _ in range(num_tosses):\n        random_choice = random.choice([1, 0])\n        if random_choice == 1:\n            head_count += 1\n            print(\"Heads\")\n        else:\n            tail_count += 1\n            print(\"Tails\")\n    return head_count\n \n# Driver code\nnum_tosses = int(input(\"Enter the number of coin tosses: \"))\nhead_count = coin_toss(num_tosses)\nprint(\"Number of heads:\", head_count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \n\ndef find_empty_location(arr, l): \n    for row in range(9): \n        for col in range(9): \n            if(arr[row][col]==0): \n                l[0]=row \n                l[1]=col \n                return True\n    return False\n\ndef used_in_row(arr, row, num): \n    for i in range(9): \n        if(arr[row][i] == num): \n            return True\n    return False\n\ndef used_in_col(arr, col, num): \n    for i in range(9): \n        if(arr[i][col] == num): \n            return True\n    return False\n\ndef used_in_box(arr, row, col, num): \n\n    for i in range(3): \n        for j in range(3): \n            if(arr[i + row][j + col] == num): \n                return True\n    return False\n\ndef check_location_is_safe(arr, row, col, num): \n\n    return not used_in_row(arr, row, num) and not used_in_col(arr, col, num) and not used_in_box(arr, row - row % 3, col - col % 3, num) \n\ndef solve_sudoku(arr): \n    l=[0,0] \n      \n    if(not find_empty_location(arr,l)): \n        return True\n      \n    row=l[0] \n    col=l[1] \n\n    for num in range(1,10): \n          \n        if(check_location_is_safe(arr,row,col,num)): \n              \n            arr[row][col]=num \n  \n            if(solve_sudoku(arr)): \n                return True\n  \n            arr[row][col] = 0\n              \n    return False \n\n# Driver main function to solve Sudoku problem \nsolve_sudoku(board) \n\nprint(np.matrix(board)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: categories = []\n\nfor sentence in sentences:\n if \"great\" in sentence or \"happy\" in sentence:\n categories.append(\"positive\")\n elif \"terrible\" in sentence or \"sad\" in sentence:\n categories.append(\"negative\")\n elif \"not sure\" in sentence or \"don't know\" in sentence:\n categories.append(\"unknown\")\n else:\n categories.append(\"neutral\")\n\nprint(categories)\n# Output: [\"positive\", \"negative\", \"unknown\", \"unknown\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\n\nclass ConnectFour:\n\n# Variables\n \n C4_COLUMNS = 7\n C4_ROWS = 6\n \n def __init__(self):\n self.field = [[0 for i in range(self.C4_COLUMNS)] for i in range(self.C4_ROWS)]\n \n def print_field(self):\n for r in range(self.C4_ROWS):\n for c in range(self.C4_COLUMNS):\n print(self.field[r][c], end = \" \")\n \n print()\n\n# Create the game\ndef populate_field(self):\n \n # The field needs to be populated \n # with pieces of two players:\n # 1 - player 1, 2 - player 2\n \n player = 1\n \n print(\"Player {} is at turn\".format(player))\n while True:\n \n # Take column from the player\n column = int(input(\"Choose a column (0-6): \"))\n if  0 <= column < self.C4_COLUMNS:\n \n # Check if there is room in the column\n if self.field[0][column] == 0:\n \n # Place the piece in the lowest\n # empty space in the column\n for r in reversed(range(self.C4_ROWS)):\n if self.field[r][column] == 0:\n self.field[r][column] = player\n break\n \n # Check conditions for victory\n if self.check_victory(player, r, column):\n print(\"Player {} won!\".format(player))\n sys.exit()\n \n # Change player\n player = 1 if player == 2 else 2\n \n else:\n # Column number is not correct\n print(\"Column number is not correct\")\n else:\n print(\"Column is full!\")\n \n # Print the field\n self.print_field()\n \n print(\"Player {} is at turn\".format(player))\n \n# Check victory condition\ndef check_victory(self, player, r, column):\n \n # Check the same pieces\n # in horizontal direction\n cnt_horizontal = 0\n for c in range(self.C4_COLUMNS):\n if self.field[r][c] == player:\n cnt_horizontal += 1\n \n if cnt_horizontal == 4:\n return True\n \n # Check the same pieces\n # in vertical direction\n cnt_vertical = 0\n for rr in range(self.C4_ROWS):\n if self.field[rr][column] == player:\n cnt_vertical += 1\n \n if cnt_vertical == 4:\n return True\n \n # Check the same pieces\n # in diagonal direction\n cnt_diagonal1 = 0\n rrr = r\n ccc = column\n \n # Go up-left\n while rrr >= 0 and ccc >= 0:\n if self.field[rrr][ccc] == player:\n cnt_diagonal1 += 1\n rrr -= 1\n ccc -= 1\n \n # Go down-right\n rrr = r\n ccc = column\n while rrr < self.C4_ROWS and ccc < self.C4_COLUMNS:\n if self.field[rrr][ccc] == player:\n cnt_diagonal1 += 1\n rrr += 1\n ccc += 1\n \n if cnt_diagonal1 == 4:\n return True\n \n # Check for another diagonal\n cnt_diagonal2 = 0\n rrr = r\n ccc = column\n \n # Go up-right\n while rrr >= 0 and ccc < self.C4_COLUMNS:\n if self.field[rrr][ccc] == player:\n cnt_diagonal2 += 1\n rrr -= 1\n ccc += 1\n \n # Go down-left\n rrr = r\n ccc = column\n while rrr < self.C4_ROWS and ccc >= 0:\n if self.field[rrr][ccc] == player:\n cnt_diagonal2 += 1\n rrr += 1\n ccc -= 1\n \n if cnt_diagonal2 == 4:\n return True\n \n return False\n\n# Create the game\nif __name__ == '__main__':\n game = ConnectFour()\n game.populate_field() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: nums = [1, 2, 3, 4, 5]\n\n# Function to calculate the standard deviation \ndef standardDeviation(nums): \n \n # Compute mean (average of elements) \n mean = sum(nums) / len(nums) \n \n # Compute sum squared distances to the mean \n sum_sq_dist = 0\n for num in nums: \n sum_sq_dist += (num - mean) ** 2 \n \n # Compute standard deviation and return result \n return (sum_sq_dist / len(nums) - - - 1)** 0.5\n\n# Print the standard deviation \nprint(standardDeviation(nums)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(word):\n    word_list = list(word)\n    if word_list == word_list[::-1]:\n        return True\n    else:\n        return False\n\nresult = is_palindrome('madam')\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(len(numbers)):\n  print(numbers[i]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport os\nimport time\n\nwhile True:\n    response = requests.get(\"https://medium.com/top-stories\")\n    if response.status_code == 200:\n        with open(\"trending-articles.html\", \"w\") as f:\n            f.write(response.text)\n            time.sleep(300)\n    else:\n        print(\"Error fetching webpage.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def celsius_to_fahrenheit(cel):\n  return cel * 1.8 + 32\n\ntemp_in_fahrenheit = celsius_to_fahrenheit(20)\nprint(\"Temperature in Fahrenheit:\", temp_in_fahrenheit) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from __future__ import unicode_literals\nfrom . import BaseProvider\nfrom . import date_time\nfrom datetime import datetime\nimport random\n\n\nclass Provider(BaseProvider):\n    user_agents = ('firefox', 'chrome', 'internet_explorer', 'opera', 'safari')\n\n    windows_platform_tokens = (\n        'Windows NT 6.2', 'Windows NT 6.1', 'Windows NT 6.0', 'Windows NT 5.2', 'Windows NT 5.1',\n        'Windows NT 5.01', 'Windows NT 5.0', 'Windows NT 4.0', 'Windows 98; Win 9x 4.90',\n        'Windows 98', 'Windows 95', 'Windows CE'\n    )\n\n    linux_processors = ('i686', 'x86_64',)\n\n    mac_processors = ('Intel', 'PPC', 'U; Intel', 'U; PPC')\n\n    langs = ('en-US', 'sl-SI', 'it-IT')\n\n    @classmethod\n    def mac_processor(cls):\n        return cls.random_element(cls.mac_processors)\n\n    @classmethod\n    def linux_processor(cls):\n        return cls.random_element(cls.linux_processors)\n\n    @classmethod\n    def user_agent(cls):\n        name = cls.random_element(cls.user_agents)\n        return getattr(cls, name)()\n\n    @classmethod\n    def chrome(cls):\n        saf = str(random.randint(531, 536)) + str(random.randint(0, 2))\n\n        platforms = (\n            \"({0}) AppleWebKit/{1} (KHTML, like Gecko) Chrome/{2}.0.{3}.0 Safari/{4}\".format(\n                cls.linux_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf),\n            \"({0}) AppleWebKit/{1} (KHTML, like Gecko) Chrome/{2}.0.{3}.0 Safari/{4}\".format(\n                cls.windows_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf),\n            \"({0}) AppleWebKit/{1} (KHTML, like Gecko) Chrome/{2}.0.{3}.0 Safari/{4}\".format(\n                cls.mac_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf),\n        )\n\n        return 'Mozilla/5.0 ' + cls.random_element(platforms)\n\n    @classmethod\n    def firefox(cls):\n        ver = (\n            'Gecko/{0} Firefox/{1}.0'.format(\n            date_time.Provider.date_time_between(datetime(2011, 1, 1)), random.randint(4, 15)),\n            'Gecko/{0} Firefox/3.6.{1}'.format(\n                date_time.Provider.date_time_between(datetime(2010, 1, 1)), random.randint(1, 20)),\n            'Gecko/{0} Firefox/3.8'.format(date_time.Provider.date_time_between(datetime(2010, 1, 1)), ),\n        )\n\n        platforms = (\n            \"({0}; {1}; rv:1.9.{2}.20) {3}\".format(\n                cls.windows_platform_token(), cls.random_element(cls.langs), random.randint(0, 2), random.choice(ver)),\n            \"({0}; rv:1.9.{1}.20) {2}\".format(cls.linux_platform_token(), random.randint(5, 7), random.choice(ver)),\n            \"({0}; rv:1.9.{1}.20) {2}\".format(cls.mac_platform_token(), random.randint(2, 6), random.choice(ver)),\n        )\n\n        return 'Mozilla/5.0 ' + cls.random_element(platforms)\n\n    @classmethod\n    def safari(cls):\n        saf = \"{0}.{1}.{2}\".format(random.randint(531, 535), random.randint(1, 50), random.randint(1, 7))\n        if random.randint(0, 1) == 0:\n            ver = \"{0}.{1}\".format(random.randint(4, 5), random.randint(0, 1))\n        else:\n            ver = \"{0}.0.{1}\".format(random.randint(4, 5), random.randint(1, 5))\n\n        platforms = (\n            '(Windows; U; {0}) AppleWebKit/{1} (KHTML, like Gecko) Version/{2} Safari/{3}'.format(\n                cls.windows_platform_token(), saf, ver, saf),\n            '({0} rv:{1}.0; {2}) AppleWebKit/{3} (KHTML, like Gecko) Version/{4} Safari/{5}'.format(\n                cls.mac_platform_token(), random.randint(2, 6), cls.random_element(cls.langs), saf, ver, saf),\n            '(iPod; U; CPU iPhone OS {0}_{1} like Mac OS X; {2}) AppleWebKit/{3} (KHTML, like Gecko) Version/{4}.0.5 Mobile/8B{5} Safari/6{6}'.format(\n                random.randint(3, 4), random.randint(0, 3), cls.random_element(cls.langs), saf, random.randint(3, 4),\n                random.randint(111, 119), saf\n            )\n        )\n\n        return 'Mozilla/5.0 ' + cls.random_element(platforms)\n\n    @classmethod\n    def opera(cls):\n\n        platforms = (\n            '({0}; {1}) Presto/2.9.{2} Version/{3}.00'.format(\n                cls.linux_platform_token(), cls.random_element(cls.langs), random.randint(160, 190),\n                random.randint(10, 12)),\n            '({0}; {1}) Presto/2.9.{2} Version/{3}.00'.format(\n                cls.windows_platform_token(), cls.random_element(cls.langs), random.randint(160, 190),\n                random.randint(10, 12)),\n        )\n\n        return 'Opera/{0}.{1}.{2}'.format(random.randint(8, 9), random.randint(10, 99), cls.random_element(platforms))\n\n    @classmethod\n    def internet_explorer(cls):\n        return 'Mozilla/5.0 (compatible; MSIE {0}.0; {1}; Trident/{2}.{3})'.format(\n            random.randint(5, 9),\n            cls.windows_platform_token(),\n            random.randint(3, 5),\n            random.randint(0, 1)\n        )\n\n    @classmethod\n    def windows_platform_token(cls):\n        return cls.random_element(cls.windows_platform_tokens)\n\n    @classmethod\n    def linux_platform_token(cls):\n        return 'X11; Linux {0}'.format(cls.random_element(cls.linux_processors))\n\n    @classmethod\n    def mac_platform_token(cls):\n        return 'Macintosh; {0} Mac OS X 10_{1}_{2}'.format(\n            cls.random_element(cls.mac_processors), random.randint(5, 8), random.randint(0, 9))\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [3,4,1,5,2]\n\n# Function to find the minimum index \ndef minIndex(arr, num): \n    minIndex = -1\n    min_val = float('inf') \n  \n    # Find the minimum index \n    for j in range(0, len(arr)):  \n        if num == arr[j] and min_val > j: \n            min_val = j \n            minIndex = min_val  \n  \n    return minIndex \n\n# Driver Code \nnum = 5\nprint(minIndex(arr, num)) # Output: 3 (i.e. minimum index of 5 is 3 in array) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to find number of characters in a sentence \n  \n# Function to calculate number of characters \ndef find_char(s): \n    return(len(s)) \n  \n# Taking the sentence from the user \nstr = input(\"Enter a sentence: \") \n  \n# Calling the function \ncount = find_char(str) \n  \n# Printing the result \nprint(\"Number of characters:\", count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isStringLengthMoreThanTwo(list): \n    new_list = [] \n  \n    for string in list:\n        if len(string) >= 2: \n            new_list.append(string) \n     \n    return new_list\n  \n# Driver Code \nlist = ['dog', 'cat', 'mouse', 'snake', 'python', 'go']\nprint(isStringLengthMoreThanTwo(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\n  \ndef size_of_object(obj): \n    return (sys.getsizeof(obj)) \n  \nobject1 = 10\nprint(size_of_object(object1)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import urllib.request\n\nurl = 'https://www.example.com'\n\ntry:\n response = urllib.request.urlopen(url)\n content = response.read()\n filename = url.split('/')[-1]\n with open(filename, 'w') as file:\n file.write(content)\nexcept Exception as e:\n print(e) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class FahrenheitToCelsius:\n  def __init__(self, temp_fahrenheit):\n    self.temp_fahrenheit = temp_fahrenheit\n\n  def fahrenheit_to_celsius(self):\n    temp_celsius = (self.temp_fahrenheit - 32) * 5 / 9\n    return temp_celsius but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Define the model\nmodel = Sequential()\nmodel.add(Dense(8, input_dim=6, activation='relu'))\nmodel.add(Dense(4, activation='softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Function in Python to compute the Fibonacci sequence of numbers up to 10 terms using a recursive method. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# the URL of the page to scrape\nurl = 'https://www.amazon.com/books-used-books-textbooks/b/ref=sv_b_5?ie=UTF8&node=283155'\n\n# download the HTML of the page\nr = requests.get(url)\nhtml = r.text\n\n# create a BeautifulSoup object\nsoup = BeautifulSoup(html, 'html.parser')\n\n# find all elements with the desired info\nbooks = soup.find_all('div', {'class': 'a-row a-spacing-mini'})\n\n# create an output file\noutfile = open('output.txt', 'w', encoding='utf-8')\n\n# loop through each book\nfor book in books:\n # get the title\n title = book.find('a', {'class': 'a-link-normal a-text-normal'}).text\n \n # get the author\n author = book.find('span', {'class': 'a-size-small a-color-secondary'}).text\n \n # get the publication date\n date_string = book.find('span', {'class': 'a-size-small a-color-secondary a-text-normal'}).text\n date = date_string.split('on')[1]\n \n # write the info to the file\n outfile.write(title + ',' + author + ',' + date + '\\n')\n\n# close the output file\noutfile.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nGenerate all permutations of a string in Python.\n\"\"\"\n\ndef permutations(string): \n    if len(string) == 1: \n        return string \n  \n    perm_list = [] # resulting list \n    for perm in permutations(string[1:]): \n        for i in range(len(string)): \n            perm_list.append(perm[:i] + string[0:1] + perm[i:]) \n  \n    return perm_list\n\nstring = \"ABC\"\npermutations = permutations(string)\nprint(permutations)\n\n# Output:\n# ['ABC', 'ACB', 'BAC', 'BCA', 'CAB', 'CBA'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def intersection(arr1,arr2): \n    result = 0\n    resultSet = set(arr1) & set(arr2)\n    result = len(resultSet)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def modified_list(num, lst):\n    modified_list = []\n    for item in lst:\n        modified_list.append(str(num) + item)\n    return modified_list\n    \nprint(modified_list(2, [\"Hello\", \"World\"]))\n# Output: [\"2Hello\", \"2World\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [1, 4, 6, 8, 10, 15, 20]\n\nfiltered_list = [item for item in my_list if item >= 5]\n\nprint(filtered_list)  # Output: [6, 8, 10, 15, 20] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_odd(n):\n  if(n % 2 == 0):\n    return \"Even\"\n  else:\n    return \"Odd\"\n \nprint(is_odd(21)) # Outputs: \"Odd\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_average(nums):\n nums_list = nums.split(\",\")\n total = 0\n for num in nums_list:\n total += float(num)\n return total / len(nums_list)\n \n# test code\nprint(calculate_average(\"3, 4, 5, 6, 7\")) # should print 5.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def cross_product_magnitude(vector_a, vector_b):\n \"\"\" Calculate the magnitude of the cross product of two 3D vectors \"\"\"\n vector_a_x, vector_a_y, vector_a_z = vector_a\n vector_b_x, vector_b_y, vector_b_z = vector_b\n \n # Calculate the cross product\n cross_x = vector_a_y * vector_b_z - vector_a_z * vector_b_y\n cross_y = vector_a_z * vector_b_x - vector_a_x * vector_b_z\n cross_z = vector_a_x * vector_b_y - vector_a_y * vector_b_x\n \n # Calculate the magnitude\n magnitude = math.sqrt(cross_x ** 2 + cross_y ** 2 + cross_z ** 2)\n \n return magnitude but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def contains_duplicates(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\nif __name__ == '__main__':\n    nums = [1, 4, 5, 1]\n    contains = contains_duplicates(nums)\n    if contains:\n        print('The list contains duplicates.')\n    else:\n        print('The list doesn\\'t contain duplicates.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def three_sum(list_of_integers, target):\n  results = []\n  for i in range(len(list_of_integers)):\n    for j in range(i+1, len(list_of_integers)):\n      for k in range(j+1, len(list_of_integers)):\n        if list_of_integers[i] + list_of_integers[j] + list_of_integers[k] == target:\n          results.append([list_of_integers[i], list_of_integers[j], list_of_integers[k]])\n  return results\n  \nlist_of_integers = [1, 3, 5, 7, 10, 2, 4, 8]\ntarget = 15\n\nprint(three_sum(list_of_integers, target))\n\n# Output: [[5, 7, 3], [8, 4, 3]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def common_elements(list1, list2):\n    return list(set(list1) & set(list2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_place_type(place_name):\n    # Split the place name into its constituent parts \n    parts = place_name.split()\n    \n    # Initialize a variable for the type of place\n    place_type = None\n    \n    # Check for certain keywords to indicate the place type \n    if 'City' in parts:\n        place_type = 'City'\n    elif 'Town' in parts:\n        place_type = 'Town'\n    elif 'Village' in parts:\n        place_type = 'Village'\n    elif 'River' in parts:\n        place_type = 'River'\n    elif 'Mountain' in parts:\n        place_type = 'Mountain'\n    elif 'Island' in parts:\n        place_type = 'Island'\n    \n    # Return the detected place type\n    return place_type but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import necessary modules\nimport sqlite3 \nimport random \n\n# establish connection to database\nconn = sqlite3.connect('database.db')\ncursor = conn.cursor()\n\n# specify initial message\n# and list of greetings\nmessage = 'Hello, how can I help you?' \ngreetings = ['hi', 'hello', 'hey', 'hi there'] \n\n# define a function to get\n# appropriate response\ndef getResponse(user_input): \n # if user input is in greetings\n if user_input.lower() in greetings: \n response = random.choice(greetings) \n  \n # if user input is a question     \n elif user_input.endswith('?'): \n # execute query to database\n query = 'SELECT * FROM products'\n cursor.execute(query)\n record = cursor.fetchall()\n products = [record[i][1] for i in range(len(record))]\n  \n # provide appropriate response \n if user_input in products:\n response = 'Yes, we have this product in stock!'\n else:\n response = 'Sorry, we do not have this product.'\n  \n # if user input is any statement \n else: \n response = 'I can answer questions about our products, try asking me something!'\n  \n # return the response \n return response \n  \n# main loop to continuously prompt user\nwhile True: \n # display initial message \n print('BOT:', message) \n  \n # get user input \n user_input = input('USER: ').lower()\n  \n # display bot response \n message = getResponse(user_input) \n print('BOT:', message) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_dicts(dicts):\n    results = {}\n    for d in dicts:\n        results.update(d)\n    return results but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: user_list = [2, 7, 4, 5]\nsorted_list = sorted(user_list)\nprint(sorted_list)\n# Output: [2, 4, 5, 7] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 11):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_largest_three_numbers(numbers): \n    numbers.sort(reverse=True) \n    print(*numbers[:3], sep = \", \") \n\nprint_largest_three_numbers([5, 1, 10, 25, 74, 17, 2])\n\nOutput:\n74, 25, 17 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: SELECT * FROM (SELECT @curRow := @curRow + 1 AS row_number FROM\n(SELECT 0 UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 ) AS t1\nCROSS JOIN\n(SELECT 0 UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 ) AS t2\nCROSS JOIN \n(SELECT @curRow := 0) AS t3 ) AS numbers \nWHERE row_number < 6; but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Split the string into words \nwords = string.split(' ') \n\n# Print the list of words \nprint(words) # Output: ['This', 'is', 'a', 'test', 'string'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import scrapy\n\nclass NewsSpider(scrapy.Spider):\n name = 'news'\n start_urls = [\n 'http://www.example.com/news/',\n ]\n\ndef parse(self, response):\n for article in response.css('article'):\n yield {\n 'title': article.css('h2::text').get(),\n } but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_sum_contiguous_subarray(arr):\n    max_sum = 0\n    curr_sum = 0\n \n    for i in range(len(arr)):\n        curr_sum = max(curr_sum + arr[i], arr[i])\n        max_sum = max(max_sum, curr_sum)\n \n    return max_sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Class to represent a booking system\nclass Booking:\n    def __init__(self, name, date, time):\n        self.name = name\n        self.date = date\n        self.time = time\n    \n    def view_details(self):\n        print(\"Name: \", self.name)\n        print(\"Date: \", self.date)\n        print(\"Time: \", self.time)\n    \n    def edit_details(self):\n        self.name = input(\"Enter new name: \")\n        self.date = input(\"Enter new date: \")\n        self.time = input(\"Enter new time: \")\n    \n    def cancel_booking(self):\n        self.name = None\n        self.date = None\n        self.time = None\n        print(\"Booking cancelled successfully.\") but is not the same. just give one example and only return the code."}
