{"prompt": "make some code that functions the same as the following code: class StatisticOperation():\n    def __init__(self, data):\n        self.__data = data \n   \n    def get_average(self):\n        total = 0.0 \n        for elem in self.__data:\n            total += elem \n        return total / len(self.__data)\n\n    def get_median(self):\n        self.__data.sort()\n        return self.__data[len(self.__data) // 2] \n\n    def get_mode(self): \n        data_map = {}\n        best_mode = self.__data[0]\n        mode_max_count = 0\n        for elem in self.__data:\n            if elem in data_map: \n                data_map[elem] += 1\n                if data_map[elem] > mode_max_count:\n                    mode_max_count = data_map[elem]\n                    best_mode = elem\n            else:\n                data_map[elem] = 1\n\n        return best_mode but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_user_info(username):\n    query = 'SELECT * FROM users WHERE username = %s'\n    result = Database.execute_query(query, (username,))\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_number(min_range, max_range):\n    return random.randint(min_range, max_range)\n\nmin_range = 3\nmax_range = 7\nrandom_number = generate_random_number(min_range, max_range)\nprint(random_number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import libraries\nimport pandas as pd\nfrom sklearn.svm import SVC\n\n# Set up data\ndata = pd.DataFrame({\n    'features': [0.24, 0.34, 0.37],\n    'label': ['spam']\n})\n\n# Separate data into training and testing\nX_train = data.drop('label', axis=1)\ny_train = data.label\n\n# Train the model\nmodel = SVC()\nmodel.fit(X_train, y_train)\n\n# Make predictions\npredictions = model.predict(X_train)\n\n# Print accuracy\nprint(accuracy_score(y_train, predictions)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_numbers(n):\n    \"\"\"\n    Computes the sum of the first `n` natural numbers\n    \"\"\"\n    s = 0\n    for i in range(n):\n        s += i+1\n    return s\n\nprint(sum_numbers(100)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.naive_bayes import GaussianNB \ngnb = GaussianNB() \n\nx_train = np.array(X)\ny_train = np.array(Y)\ngnb.fit(x_train,y_train) \n\n# predict new data \nx_new = [['Periodic', 'no', 'yes']]\nprediction = gnb.predict(x_new) \nprint (\"Predicted Value:\", prediction[0]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack:\n    def __init__(self):\n        # Create an empty stack\n        self.stack = []\n    \n    def push(self, item):\n        # Push an item onto the top of the stack\n        self.stack.append(item)\n    \n    def pop(self):\n        # Pop an item off the top of the stack\n        return self.stack.pop()\n    \n    def peek(self):\n        # Get the top item off the stack\n        return self.stack[-1]\n    \n    def is_empty(self):\n        # Return true if the stack is empty\n        return not self.stack\n    \n    def get_size(self):\n        # Return the size of the stack\n        return len(self.stack) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nrandom_number = random.randint(1, 10)\nprint(f\"Random number between 1 and 10: {random_number}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.neural_network import MLPClassifier\n\nX = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\ny = np.array([0, 1, 1, 0])\n\nclf = MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(5, 2), random_state=1)\nclf.fit(X, y)\n\npredictions = clf.predict(X) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: myList = [\"item1\", \"item2\", \"item3\"]\n\nfor item in myList:\n    print(item) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Finding smallest number\nlist_of_nums = [2, 5, 3, 8, 10, 11, 9]\nsmallest_num = min(list_of_nums)\nprint('The smallest number is:', smallest_num)\n\n# Finding largest number\nlist_of_nums = [2, 5, 3, 8, 10, 11, 9]\nlargest_num = max(list_of_nums)\nprint('The largest number is:', largest_num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    \n    return a\n\nfibonacci_number = fibonacci(5)\nprint(fibonacci_number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def prod(a, b):\n    return a*b\n\ndef total(mylist):\n    sum = 0\n    for num in mylist:\n        sum += num\n    return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_search(arr, x): \n    # Set the initial midpoint\n    start = 0\n    end = len(arr) - 1 \n    mid = 0\n  \n    while (start<=end): \n  \n        mid = (start + end) // 2\n  \n        # Check if x is present at mid \n        if arr[mid] < x: \n            start = mid + 1\n  \n        # If x is greater, ignore left half \n        elif arr[mid] > x: \n            end = mid - 1 \n  \n        # If x is present at mid \n        else: \n            return mid \n  \n    # If we reach here, then the element \n    # was not present \n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_to_rna(DNA):\n    rna = \"\"\n    # iterate through each character\n    for char in DNA:\n        # check character\n        if char == \"A\":\n            rna += \"U\"\n        elif char == \"T\":\n            rna += \"A\"\n        elif char == \"C\":\n            rna += \"G\"\n        elif char == \"G\":\n            rna += \"C\"\n    return rna but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_smallest(array):\n    smallest_item = array[0][0]\n    for row in array:\n        for item in row:\n            if item < smallest_item:\n                smallest_item = item\n    return smallest_item but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * (self.radius**2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: str = \"1, 2, 3, 4\"\nlist = str.split(', ') \nprint(list) # Output is ['1', '2', '3', '4'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_valid_decimal(n):\n    try:\n        float(n)\n        return True\n    except ValueError:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: userInput = input('Enter your input (or \"quit\" to stop): ')\n\nresponses = []\n\nwhile userInput != 'quit':\n    responses.append(userInput)\n    userInput = input('Enter your input (or \"quit\" to stop): ')\n\nprint(responses) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\nimport pymongo\n\n# connect to MongoDB\nclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\ndb = client[\"my_database\"]\ncollection = db[\"scraped_data\"]\n\n# make a GET request to the website\npage = requests.get(\"https://example.com/\")\n\n# parse content of the request with BeautifulSoup\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# store scraped data in MongoDB\nrecords = soup.find_all('div', class_= \"example\")\n\nfor record in records:\n  data = {\n    'title': record.find('h2').text, \n    'description': record.find('p').text\n  }\n  collection.insert_one(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n# arrayToList() function \ndef arrayToList(arr): \n\n    # Create a reference to root \n    root = None\n\n    # Create a reference to prev node \n    prev = None\n\n    # Iterate through the given array \n    for x in arr: \n\n        # Allocate a new node in heap \n        curr = ListNode(x) \n\n        # Linked the prev node \n        # to the current node. \n        if prev != None: \n            prev.next = curr \n\n        # If root is None, \n        # assign it as curr node. \n        if root == None: \n            root = curr \n\n        # Store the current node \n        # as prev node for next \n        # iteration \n        prev = curr \n\n    # Return the root node of \n    # linked list. \n    return root \n\n# Sample array \narr = [22, 7, 34, 15] \n\n# Root node reference \nroot = arrayToList(arr) \n\n# Print the converted Linked List \nlist_print(root) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPalindrome(str): \n    for i in range(0, int(len(str)/2)):  \n        if str[i] != str[len(str)-i-1]: \n            return False\n    return True\n\ninputStr = 'madam'\n\nif (isPalindrome(inputStr)): \n    print(\"Yes\")\nelse: \n    print(\"No\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef clean_phone_number(phone_number):\n    #remove special characters\n    phone_number = re.sub(r'[^\\d]', '', phone_number)\n    #check length\n    if len(phone_number) != 10:\n        return None\n    \n    #parse number\n    area_code = phone_number[:3]\n    exchange = phone_number[3:6]\n    last_4 = phone_number[6:]\n    return f'({area_code}) {exchange}-{last_4}'\n  \nphone_numbers = ['(800) 555-1234','(032)536-9222', '541-766-4455']\n\nformatted_numbers = []\n\n#clean the phone numbers\nfor number in phone_numbers: \n    formatted_number = clean_phone_number(number)\n    if formatted_number is not None:\n        formatted_numbers.append(formatted_number)\n\nprint(formatted_numbers) #output: ['(800) 555-1234', '(032) 536-9222', '(541) 766-4455'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_frequencies(strings):\n    frequencies = {}\n    for string in strings:\n        if string in frequencies:\n            frequencies[string] += 1\n        else:\n            frequencies[string] = 1\n    return [(string, frequency) for string, frequency in frequencies.items()] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\nimport threading\n \n \ndef do_something(seconds):\n    print(\"Sleeping for {} seconds\".format(seconds))\n    time.sleep(seconds)\n \n \nstart = time.perf_counter()\n \nt1 = threading.Thread(target=do_something, args=[1])\nt2 = threading.Thread(target=do_something, args=[1])\nt3 = threading.Thread(target=do_something, args=[1])\nt4 = threading.Thread(target=do_something, args=[1])\n \nt1.start()\nt2.start()\nt3.start()\nt4.start()\n\nt1.join()\nt2.join()\nt3.join()\nt4.join()\n \nfinish = time.perf_counter()\n \nprint(f'Finished in {round(finish-start, 2)} second(s)') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for num in range(1, 11):\n    print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_list(list):\n  return list[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Program to compute age difference between two persons\n\n# Input\nname1 = input('Enter name of first person: ')\nname2 = input('Enter name of second person: ')\n\n# Compute age difference\nages = {\n 'John Doe': 35,\n 'Jane Doe': 27\n}\n\ndiff = abs(ages[name1] - ages[name2])\n\n# Output\nprint(f'The age difference between {name1} and {name2} is {diff}.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_average_age(names, ages):\n    result = 0\n    for i in range(len(names)):\n        result += ages[i]\n    return round(result / len(names), 2)\n\nnames = ['Bob', 'Jack', 'John', 'David']\nages = [12, 27, 45, 16]\n\nprint(calculate_average_age(names, ages)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef categorize_text(text):\n    \"\"\"Categorizes the given text into positive, negative or neutral.\"\"\"\n    text = text.lower()\n    if re.search(r\"\\b(happy|glad|fun)\\b\", text):\n        return \"positive\"\n    elif re.search(r\"\\b(sad|angry|fearful)\\b\", text):\n        return \"negative\"\n    else:\n        return \"neutral\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import scrapy\n\nclass DataSpider(scrapy.Spider):\n name = 'DataSpider'\n start_urls = [url]\n\ndef parse(self, response):\n data = response.css('body').getall()\n yield { 'data': data } but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\ndef frequency(string):\n    count = Counter()\n    for letter in string:\n        count[letter] += 1\n    return count\n\nif __name__ == \"__main__\":\n    input_string = input(\"Enter the string: \")\n    count = frequency(input_string)\n    print(count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_integer(number):\n    reversed_number = 0\n    while number > 0: \n        remainder = number % 10\n        reversed_number *= 10\n        reversed_number += remainder\n        number //= 10\n      \n    return reversed_number\n\nnumber = 12345\nprint(\"Reversed Number:\", reverse_integer(number)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_numbers_in_string(string):\n    number_list = []\n    for word in string.split(' '):\n        if word.isdigit():\n            number_list.append(int(word))\n\n    return sum(number_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python2.7\n#-*- coding: UTF-8 -*-\n\nfrom category import Category\nfrom gi.repository import Wnck, Gdk, Gtk, GObject, Notify, GLib\nfrom activityrecord import ActivityRecord\nfrom threading import Thread, Event\nfrom time import sleep, time\nimport copy\n\nclass TimeTracker(Thread):\n    \"\"\"Core module of this project. It's running in separated thread\n    to not block GUI.\"\"\"\n    stopthread = Event()\n    track = Event()\n    mode = Event()\n    \n    def __init__(self, _stat, _categories, _activities, _configuration):\n        Thread.__init__(self)\n        self.categories = _categories\n        self.activities = _activities\n        self.stat = _stat\n        self.lastActivity = ActivityRecord()\n        self.screen = Wnck.Screen.get_default()\n        self.n = Notify.Notification()\n        self.tmpName = ''\n        \n        if _configuration.getValue('state'):\n            self.track.set()\n        else:\n            self.track.clear()\n            \n        if _configuration.getValue('mode'):\n            self.mode.set()\n        else:\n            self.mode.clear()\n        \n    def run(self):\n        \"\"\"Start tracking user activities\"\"\"\n        \n        while not self.stopthread.isSet():\n            sleep(1)\n            \n            \"\"\"Skip tracking if it's disabled\"\"\"\n            if not self.track.isSet():\n                continue\n                \n            Gdk.threads_enter()\n            GObject.idle_add(self.screen.force_update)\n            active_window = self.screen.get_active_window()\n\n            \"\"\"Skip if there is no active window\"\"\"\n            if active_window == None:\n                Gdk.threads_leave()\n                continue\n            \n            appName = active_window.get_application().get_name()\n            appPid = active_window.get_application().get_pid()\n            \n            \"\"\"If the learning mode is activive, only append an activity\"\"\"\n            if self.mode.isSet():\n                self.activities.addActivity(appName)\n                Gdk.threads_leave()\n                continue\n            \n            if self.lastActivity.getActivity().getPid() == appPid:\n                \"\"\"Still the same activity, just actualize the end time\"\"\"\n                self.lastActivity.setEndTime(time())\n                \n            else:\n                \"\"\"New activity, actualize the lastActivity and append\n                the new activity\"\"\"\n                if self.lastActivity.getActivity().getPid() != 0:\n                    tmp = copy.deepcopy(self.lastActivity)\n                    self.stat.appendActivityRecord(tmp)\n                    self.activities.addActivity(tmp.getActivity().getName())\n                    print \"DBG: Zmena aktivity! Ulozena aktivita %s (%s)\" % (tmp.getActivity().getName(), tmp.getCategory())\n\n                self.lastActivity.getActivity().setName(appName)\n                self.lastActivity.getActivity().setPid(appPid)\n                self.lastActivity.setCategory('OTHER')\n                self.getCorrectCategory()\n                self.lastActivity.setStartTime(time())\n                self.lastActivity.setEndTime(time())\n                \n            Gdk.threads_leave()\n           \n        if self.track.isSet() and not self.mode.isSet():\n            tmp = copy.deepcopy(self.lastActivity)\n            self.stat.appendActivityRecord(tmp)\n            print \"DBG: Ulozena aktivita %s (%s)\" % (tmp.getActivity().getName(), tmp.getCategory())\n        \n        \"\"\"Store all records to file to make them persistent\"\"\"\n        self.stat.storeRecords()\n        self.activities.storeActivities()\n\n    def stop(self):\n        \"\"\"Stop the tracking system, uses id stored in initialization\"\"\"\n        self.stopthread.set()\n        \n    def getCorrectCategory(self, _activity = None):\n        \"\"\"Find out category where the activity belongs to\"\"\"\n        if _activity == None:\n            _activity = self.lastActivity.getActivity()\n\n        activityCategories = self.categories.getContainingCategories(_activity)\n        if len(activityCategories) == 0:\n            \"\"\"The activity isn't in any category\"\"\"\n            self.lastActivity.setCategory('OTHER')\n        elif len(activityCategories) == 1:\n            \"\"\"The activity is in exactly one category\"\"\"\n            self.lastActivity.setCategory(activityCategories[0].name)\n        else:\n            \"\"\"The activity is in more than one category.\n            The Waktu needs to ask user.\"\"\"\n            lastOccurrence = self.stat.getLastOccurrence(_activity.getName())\n            if lastOccurrence == None or (time() - lastOccurrence.getEndTime()) > 600 : # 10 minutes is the default time to remember users choice \n                self.askUser(_activity, activityCategories)\n            else:\n                self.lastActivity.setCategory(lastOccurrence.getCategory()) \n\n    def askUser(self, _activity, _categories):\n        \"\"\"Creates a notification and asks a user where the activity belongs to\"\"\"\n        if not Notify.is_initted():\n            Notify.init('Waktu')\n            \n        self.n.clear_hints()\n        self.n.clear_actions()\n        self.n.set_property('summary','Kam pat\u0159\u00ed aktivita %s?' % _activity.getName())\n        self.n.set_property('body', 'Zd\u00e1 se, \u017ee tuto aktivitu m\u00e1te zvolenou ve v\u00edce kategori\u00edch. Zvolte, pros\u00edm, n\u00ed\u017ee jednu, do kter\u00e9 spad\u00e1 tato aktivita pr\u00e1ve te\u010f.')\n        self.n.set_property('icon_name','dialog-question')\n        self.n.set_urgency(Notify.Urgency.NORMAL)\n        self.n.set_timeout(Notify.EXPIRES_NEVER)\n        self.n.set_hint(\"resident\", GLib.Variant('b',True))\n        \n        for cat in _categories:\n            self.n.add_action(cat.name, cat.name, self.getUserAnswer, _activity, None)\n\n        self.n.add_action(\"OTHER\", \"Jinam\", self.getUserAnswer, _activity, None)\n        \n        self.n.show()\n        \n    def getUserAnswer(self, n, _action, _data):\n        \"\"\"Process user answer and delegate result\"\"\"\n        n.close()\n        \n        if self.lastActivity.getActivity().getName() == _data.getName():\n            \"\"\"The focused app is still the same\"\"\"\n            self.lastActivity.setCategory(_action)\n        else:\n            \"\"\"There is another activity, need to find it backwards\"\"\"\n            self.stat.getLastOccurrence(_data.getName()).setCategory(_action)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Define a 3x3 board\nboard = [['_','_','_'],\n         ['_','_','_'], ['_','_','_']]\n\n# Function to display the board\ndef print_board(board):\n  for i in range(3):\n    for j in range(3):\n      print(board[i][j] + \" \", end=\"\")\n    print()\n\n# Define a player A, who plays a piece 'X' at location (0,0)\nboard[0][0] = 'X'\n\n# Print the board\nprint_board(board) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def average_grade(grades):\n total = 0\n for grade in grades:\n total += grade\n return total / len(grades)\n\n>>> average_grade([90, 99, 75, 72, 85])\n84.2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def setup_list():\n    my_list = [[0] * 10000 for _ in range(10000)]\n    return my_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_data(data_points):\n    classified_data = []\n    for point in data_points:\n        if point % 2 == 0:\n            classified_data.append('green')\n        else:\n            classified_data.append('red')\n    return classified_data but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from pulp import *\n\n# Define problem\nmodel = LpProblem(\"Maximize Profit\", LpMaximize)\n\n# Define Decision Variables\nx1 = LpVariable(\"x1\", 5, 10)\nx2 = LpVariable(\"x2\", 0, 5)\nx3 = LpVariable(\"x3\", 0, 15)\n\n# Objective function\nmodel += 10 * x1 + 25 * x2 + 20 * x3\n\n# Constraints\nmodel += x1 + x2 <= 10\nmodel += x2 + x3 <= 15\n\n# Solve model\nmodel.solve()\n\n# Output results\nprint(\"Solution:\")\nfor variable in model.variables():\n print(\"{} = {}\".format(variable.name, variable.varValue)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to calculate number of days in a month\ndef num_days_in_month(month, year):\n    # List of all months\n    months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \n              \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    \n    # List of all number of days in a month\n    num_of_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    # Check if the year is a leap year\n    if (year % 400 == 0) or ((year % 4 == 0) and (year % 100 != 0)):\n        num_of_days[1] = 29\n    \n    # Return the number of days\n    return num_of_days[months.index(month)]\n\n# Driver Code \nmonth = \"May\"\nyear = 2020\nprint(\"Number of days in {} {} are {}\".format(month, year, num_days_in_month(month, year)))\n\n# Output:\n# Number of days in May 2020 are 31 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_punctuation(s):\n    punctuation = \"\"\"!\"#$%&'()*+, -./:;<=>?@[\\]^_`{|}~\"\"\"\n    s_no_punct = \"\"\n    for ch in s:\n        if ch not in punctuation:\n            s_no_punct += ch\n        else:\n            s_no_punct += \" \"\n    return s_no_punct\n\ns = \"Hello, world!\"\ns_no_punct = remove_punctuation(s)\nprint(s_no_punct) # Output: \"Hello  world \" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nrand_num = random.randint(0,1)\nif rand_num == 0:\n    print(\"Heads\")\nelse:\n    print(\"Tails\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\n\ndef classify_sentiment(sentence):\n    # Tokenize the sentence\n    tokens = nltk.word_tokenize(sentence)\n \n    # Tag the tokens\n    tagged_tokens = nltk.pos_tag(tokens)\n \n    # Define our sentiment classifier\n    sentiment_classifier = nltk.NaiveBayesClassifier.train([('positive', 'Positive'), ('negative', 'Negative'), ('neutral', 'Neutral')])\n \n    # Classify the sentiment of the sentence\n    sentiment = sentiment_classifier.classify(dict(tagged_tokens))\n \n    return sentiment\n \nsentence = 'I am feeling really good today!'\nclassified_sentiment = classify_sentiment(sentence)\n \nprint(\"The sentiment of the sentence '{}' is: {}\".format(sentence, classified_sentiment)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\nimport boto3\n\ndef lambda_handler(event, context):\n    # parse the payload\n    data = json.loads(event)\n\n    # store to Amazon S3\n    s3 = boto3.client('s3')\n    s3.put_object(\n        Bucket='my-bucket',\n        Key='data.json',\n        Body=json.dumps(data)\n    )\n\n    # return a response\n    return {\n        'statusCode': 200,\n        'body': json.dumps('Data stored successfully')\n    } but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: I would use a framework such as Python with the Django web framework as it is a powerful and easy to use web framework that has an excellent ecosystem of tools, libraries and functionalities. I would also use a library such as Celery which is a Python library for scheduling tasks and background jobs. This library allows you to schedule the emails to be sent at a specific point in time and this is the perfect use case. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Retrieve the webpage\nurl = 'https://en.wikipedia.org/wiki/Machine_learning'\nresponse = requests.get(url)\n\n# Parse the page\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# Get the links\nlinks = soup.find_all('a')\n\n# Get the text of all articles\nfor link in links:\n article_url = link.get('href')\n if article_url.startswith('/wiki/'):\n  article_response = requests.get('https://en.wikipedia.org' + article_url)\n  article_soup = BeautifulSoup(article_response.text, 'html.parser')\n  print(article_soup.find('div', id='mw-content-text').text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import Libraries\nimport numpy as np\n\n# Build dictionary containing necessary data\nwords = {\n 'come': ['spam', 'ham'],\n 'free': ['spam', 'ham'],\n 'money': ['spam', 'ham'],\n 'here': ['spam', 'ham'],\n 'win': ['spam', 'ham'],\n 'now': ['spam', 'ham'],\n 'urgent': ['spam', 'ham'],\n 'discount': ['spam', 'ham'],\n 'buy': ['spam', 'ham'],\n 'promo': ['spam', 'ham'],\n}\n\n# Number of Spam and non-Spam words\nspam_words = 0\nham_words = 0\n\n#Calculate number of words in each class\nfor key in words.keys():\n if 'spam' in words[key]:\n  spam_words += 1\n if 'ham' in words[key]:\n  ham_words += 1\n\n# Probabilities of each class\nP_spam = spam_words / (spam_words + ham_words)\nP_ham = ham_words / (spam_words + ham_words)\n\n# Probability of each word in each class\nwords_spam_prob = [0] * len(words)\nwords_ham_prob = [0] * len(words)\ni=0\n\nfor key in words.keys():\n if 'spam' in words[key]:\n  words_spam_prob[i] = words[key].count('spam') / spam_words\n if 'ham' in words[key]:\n  words_ham_prob[i] = words[key].count('ham') / ham_words\n i += 1\n\n# Function to classify spam and non-spam\ndef classify(comment):\n # Split comment into words\n words_in_comment = comment.split()\n \n # Calculate probability of comment being spam\n p_spam_comment = np.log(P_spam)\n p_ham_comment = np.log(P_ham)\n \n # Iterate through words in comment and calculate probability of comment being each class\n for word in words_in_comment:\n  if word in words:\n   p_spam_comment += np.log(words_spam_prob[list(words.keys()).index(word)])\n   p_ham_comment += np.log(words_ham_prob[list(words.keys()).index(word)])\n \n # Determine and return class of comment\n if p_spam_comment > p_ham_comment:\n  return 'spam'\n else:\n  return 'ham' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_cycle_detected(array):\n    # create a set to store visited indices\n    visited = set()\n    for i, num in enumerate(array):\n        # check if num has been visited\n        if i in visited or num not in visited:\n            return False\n        # mark the index as visited\n        visited.add(i)\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def threeNumSum(arr, targetSum):\n    combinations = []\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == targetSum:\n                    combination = [arr[i], arr[j], arr[k]]\n                    combinations.append(combination)\n    \n    return combinations\n\narr = [2, 3, 4, 5, 6]\ntargetSum = 7\nprint(threeNumSum(arr, targetSum)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndata = [1, 2, 3, 4, 5]\n\ndata_json = json.dumps(data)\n\nprint(data_json) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\n\n# read the data from the dataset\ndf = pd.read_csv('patient-data.csv')\n\n# create the features and labels\nX = df[['age', 'gender', 'smoker', 'bloodPressure']]\ny = df['target']\n\n# split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# train the Random Forest model\nmodel = RandomForestRegressor(n_estimators=100, max_depth=3)\nmodel.fit(X_train, y_train)\n\n# score the model on the test set\nscore = model.score(X_test, y_test)\nprint('Model Score: %.3f' % score) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The built-in sorting function of Python is called \"sorted()\". The sorted() function takes an iterable object as an argument and returns a sorted list. By default, it sorts the elements of the iterable object in ascending order. However, it also provides an optional argument for specifying the desired sorting order (e.g. descending order) as well as different sorting algorithms (e.g. insertion sort, selection sort, bubble sort). Additionally, it can be used to sort both numbers and strings. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: dct = {\n \"name\": \"John\",\n \"age\": 20,\n \"species\": \"Human\"\n}\ndesired_pairs = {\"name\": \"Alex\", \"species\": \"AI\"}\n\n# Generate the new dictionary\nnew_dct = {**dct, **desired_pairs}\n\nprint(new_dct)\n\n# Output: {'name': 'Alex', 'age': 20, 'species': 'AI'} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [4, 6, 8, 10, 11, 12, 22, 34, 36, 37] \n  \n# calculate sum of the list numbers \nsum_numbers = sum(my_list) \n  \n# length of the list \nlength = len(my_list) \n  \n# average of the list \naverage = sum_numbers/length \n  \n# print the result \nprint(average) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnum = 5\n\nprint(\"The factorial of\", num, \"is\", factorial(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def starts_with(string, substring):\n  if string[:len(substring)] == substring:\n    return True\n  else:\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(5):\n    print(\"I love coding!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Comparable:\n    def __init__(self, value):\n        self.value = value\n        \n    def compareTo(self, b):\n        if self.value > b.value:\n            return 1\n        elif self.value < b.value:\n            return -1\n        else:\n            return 0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_prime_list(max_num):\n    prime_list = []\n    for number in range(2, max_num + 1):\n        for divider in range(2, number):\n            if number % divider == 0:\n                break\n        else:\n            prime_list.append(number)\n    return prime_list\n\nprime_list = generate_prime_list(50)\nprint(prime_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 20, 2):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nproducts = ['Product 1', 'Product 2', 'Product 3', 'Product 4', 'Product 5', 'Product 6', 'Product 7', 'Product 8', 'Product 9', 'Product 10']\n\nfor product in products:\n url = f'http://www.example.com/{product}'\n response = requests.get(url)\n html = response.content\n soup = BeautifulSoup(html, 'html.parser')\n \n # retrieve product and price\n title_element = soup.find('h1', {'class': 'title'})\n title = title_element.text\n price_element = soup.find('span', {'class': 'price'})\n price = price_element.text\n \n print(title + ' - ' + price) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: @app.route('/multiple_params', methods=['GET'])\ndef multiple_params(): \n    name = request.args.get('name') \n    age = request.args.get('age') \n    city = request.args.get('city') \n    response = { \n        'name': name, \n        'age' : age, \n        'city': city \n    } \n    return jsonify(response) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Calendar:\n def __init__(self):\n  self.events = []\n\n def add_event(self, event):\n  self.events.append(event)\n\n def get_events(self, date):\n  return [event for event in self.events if event.date == date]\n\nclass Event:\n def __init__(self, date, title, description):\n  self.date = date\n  self.title = title\n  self.description = description\n\n def __str__(self):\n  return f'{self.title} on {self.date}'\n\nclass Date:\n def __init__(self, year, month, day):\n  self.year = year\n  self.month = month\n  self.day = day\n\n def __str__(self):\n  return f'{self.month}/{self.day}/{self.year}' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression()\n\nmodel.fit(X, y)\n\ndef predict_class(X):\n pred = model.predict([X])\n return pred but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_list(nums):\n sum = 0\n for n in nums:\n  sum += n\n return sum\n\nresult = sum_list([1, 24, 47, 98, 22, 45])\nprint(\"Sum of the list is\", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers = [1, 7, 25, 8, 14]\n\n# Sort the list in descending order\nnumbers.sort(reverse=True)\n\n# Print the sorted list\nprint(numbers)\n\n# Output\n[25, 14, 8, 7, 1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubbleSort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re \nfrom collections import defaultdict \n  \n# define the main function, which handles user input \ndef main(): \n    # prompt the user for input \n    search_query = input(\"Please enter your programming query: \") \n  \n    # split the query into words \n    query_words = search_query.split(' ') \n  \n    # save the words in a list \n    query_words_list = [] \n  \n    # remove stopwords \n    for word in query_words: \n        if word not in stopwords: \n            query_words_list.append(word) \n  \n    # select a database of questions and answers \n    database = questions_and_answers \n  \n    # create an empty set for storing results \n    result = set() \n  \n    # loop over the words to find related questions \n    for word in query_words_list: \n        if word in database.keys(): \n            result = result | database[word] \n  \n    #display final results \n    print(\"Questions related to your query: \")\n    for result in result:\n        print(result) \n  \n# store the questions and answers database \nquestions_and_answers = defaultdict(set)\n  \n# initialise the questions_and_answers database\nquestions_and_answers['Python'] = {\n    'What is Python?',\n    'What are the advantages of using Python?'\n    }\n   \nquestions_and_answers['Arrays'] = {\n    'How do you create an empty array in Python?',\n    'What is an array in programming?'\n    }\n   \n# store the stopwords \nstopwords = {\n    'a',\n    'an',\n    'the',\n    }\n\n# call the main function \nif __name__== \"__main__\": \n    main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http://example.com'\n\nr = requests.get(url)\nsoup = BeautifulSoup(r.text, 'html.parser')\n\nlinks = [link.get('href') for link in soup.find_all('a')]\nprint(links) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: function calculateArea(width, height) {\n    return width * height;\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class OrderStatus:\n  def __init__(self, status):\n    self.status = status\n\n  def show_status(self):\n    print(f\"Order Status: {self.status}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max_min(mylist):\n  max_num = mylist[0]\n  min_num = mylist[0]\n\n  for num in mylist:\n    if num > max_num:\n      max_num = num\n    if num < min_num:\n      min_num = num\n  \n  return [min_num, max_num]\n\nlist1 = [9,6,7,11,14,5]\n\nprint(find_max_min(list1)) #[5, 14] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_square_root(num): \n   # Taking a square root of number \n   return num ** 0.5\n  \n# Driver Code \nnum = 16\nprint(calculate_square_root(num)) \n\n# Output \n4.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to check prime or not\ndef isPrime(n): \n    result = True\n  \n    # check if number is divisible from 2 to n-1 or not\n    for i in range(2, n): \n        if n%i == 0: \n            result = False\n            break\n          \n    return result \n  \n# printing prime numbers between 1 to 50\nfor n in range(1, 51):\n    if isPrime(n): \n        print(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortRecords(records):\n    sortedRecords = sorted(records, key = lambda x: x[2], reverse=True)\n    return sortedRecords\n\nrecords = [\n    [\"Bob\", 30, 80.50], \n    [\"James\", 32, 65.78], \n    [\"Cameron\", 27, 97.89],\n    [\"Grace\", 24, 76.67]\n]\n\nsortedRecords = sortRecords(records)\n\nprint(\"Sorted records: \", sortedRecords) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_unique_combos(lst):\n    combos = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            combos.append(lst[i:j])\n    return list(set(tuple(x) for x in combos))\n\nprint(find_unique_combos([1,2,3,4])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: filtered_df = df[df['rating'] >= 4]\n\nfiltered_df\n   customer product  rating             content\n0     John  Widget       5       Loved this product\n1     Kate  Widget       4       I was satisfied\n3   Daniel  Widget       4  Generally liked it\n4   Edward   Phone       5      Didn't like it\n7  Michael   Phone       5           Loved it! but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def substitute_username(input):\n    output = input.replace(\"$username\", input.username)\n    return output but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: paragraph = \"This is a sample paragraph.\"\n\n# split the string into words\nwords = paragraph.split()\n\n# sort the words alphabetically\nwords.sort()\n\n# remove duplicates\nunique_words = []\nfor word in words:\n    if word not in unique_words:\n        unique_words.append(word)\n\n# print the unique words\nprint(\", \".join(unique_words)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_area_circle(radius): \n    pi = 3.14\n    area = pi * (radius * radius) \n    return area \n  \n# Output\nprint(\"Area of circle is: \", calculate_area_circle(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ntext = \"This text contains some non-alphabetic characters, like \u201c%.\u201d\"\n\nclean_text = re.sub(r'[^a-zA-Z ]', '', text)\n\nprint(clean_text)\n\n# Output: This text contains some alphabetic characters but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import IsolationForest\n\n# Load the data\ndata = pd.read_csv(\"data.csv\")\n\n# Create training and test sets\nx_train, x_test = train_test_split(data, test_size=0.2)\n\n# Train the Isolation Forest\nisolation_forest = IsolationForest(random_state=0).fit(x_train)\n\n# Make predictions\npreds = isolation_forest.predict(x_test)\n\n# Detect and mark anomalies\nanomalies_index = np.where(preds == -1)[0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class TicTacToe:\n    def __init__(self):\n        self.board = [['-' for x in range (3)] for y in range(3)]\n\n    def print_board(self):\n        for row in range(3):\n            print(' | '.join(self.board[row]))\n\n    def make_move(self, x,y, mark):\n        self.board[x][y] = mark but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_word(string):\n    modified_string = string.replace(\"dog\", \"cat\")\n    return modified_string\n\nresult = replace_word(\"I love my dog\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_n(n):\n    result = (n * (n+1)) / 2\n    return result\n\nn = 10\n\nsum = sum_n(n)\nprint(sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def spam(divideBy):\n    try:\n        return 42 / divideBy\n    except ZeroDivisionError:\n        print('Error: Invalid argument.')\n\nprint(spam(2))\nprint(spam(12))\nprint(spam(0)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask\nfrom flask_restful import Resource, Api\n \napp = Flask(__name__)\napi = Api(app)\n \nclass TableData(Resource):\n def get(self):\n  # Get data from table\n  return {'data': 'formatted data'}\n  \n def post(self):\n # Post data to table\n return {'message': 'Data posted successfully'}\n \napi.add_resource(TableData, '/table')\n\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(string):\n    return string[::-1]\n\nstring = \"Hello world!\"\nprint(reverse_string(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def prime_nums_in_range(start, end): \n prime_list = [] \n for num in range(start, end + 1): \n if num > 1: # check for cases greater than 1 \n for i in range(2, num): \n if (num % i) == 0: \n break \n else: \n prime_list.append(num) \n return prime_list \n\nstart = 2 \nend = 20 \nprint(prime_nums_in_range(start, end)) \n# Output: [2, 3, 5, 7, 11, 13, 17, 19] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # imports \nimport requests\nfrom bs4 import BeautifulSoup\n\n# define variables\nurl = \"https://myuniversity.edu/transcripts/cs-123\"\n\n# fetch the content from url\npage = requests.get(url)\n\n# parse html\nsoup = BeautifulSoup(page.text, 'html.parser')\n\n# find the transcript data \ntranscript_data = soup.find('div', attrs={'class': 'transcript'})\n\n# extract the text\nfull_transcript = transcript_data.text\n\n# print the transcript\nprint(full_transcript) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\nimport websocket\n\n# Server script to send realtime notifications to subscribed users \n# Connect to websocket host\nws = websocket.WebSocket()\nws.connect(\"ws://localhost:8888/\")\n\n# handle incoming messages\nwhile True:\n msg = ws.recv()\n print(f\"Notification to users: {msg}\")\n \n# broadcast the message to subscribed users\nws.send(msg)\n\n# wait for 5 seconds \ntime.sleep(5) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def user_number(number):\n    number_py = '{}'.format(number)\n    print(\"The Python equivalent of {} is {}\".format(number, number_py)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(arr):\n    for i in range(len(arr) - 1):\n        for j in range(len(arr) - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr\n\nresult = bubble_sort([1, 8, 4, 6, 2, 5])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import libraries \nfrom chatterbot import ChatBot \nfrom chatterbot.trainers import ChatterBotCorpusTrainer \nfrom chatterbot.trainers import ListTrainer \n  \n# Create a new chatbot named Charlie \nchatbot = ChatBot('Charlie') \n  \n# Create a new trainer for the chatbot \ntrainer = ChatterBotCorpusTrainer(chatbot) \n  \n# Train the chatbot based on the english corpus \ntrainer.train(\"chatterbot.corpus.english\") \n  \n# Train based on english greetings corpus \ntrainer.train(\"chatterbot.corpus.english.greetings\") \n  \n# Train based on the english conversations corpus \ntrainer.train(\"chatterbot.corpus.english.conversations\") \n  \n# Get a response to an input statement \nresponse = chatbot.get_response(\"Hello, how are you today?\") \nprint(response) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum(nums):\n    result = 0\n    for i in range(len(nums)):\n        result += nums[i]\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python 3 program to check if an element \n# exists in the given array\n\n# function to check if an element exists in the array\ndef search(arr, item): \n    for element in arr: \n        if element == item: \n            return True\n    return False\n  \n# Driver code \narr = [1, 2, 3, 4, 5]\n  \n# Function Call\nitem = 5\nif search(arr,item):\n    print(\"Element is present\")\nelse:\n    print(\"Element is not present\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Chatbot program for customer service\nimport random\n\ngreetings = [\"Hi, how may I help you?\", \"Hi there, how can I help you today?\", \"Hi, how can I be of assistance?\"]\n\ndef chatbot():\n    print(\"Welcome to our customer service chatbot! How may I help you today?\")\n    while True:\n        userInput = input()\n        if userInput.lower() == \"quit\":\n            break\n        else:\n            message = random.choice(greetings)\n            print(message)\n\nchatbot() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize(list1, list2):\n    best_combination = (0, 0)\n    best_value = -float('inf')\n    for x in list1:\n        for y in list2:\n            value = x + y\n            if value > best_value:\n                best_value = value\n                best_combination = (x, y)\n    return best_combination\n\nlist1 = [1, 2, 3, 4]\nlist2 = [5, 6, 7, 8]\nbest_combination = optimize(list1, list2)\nprint(best_combination) but is not the same. just give one example and only return the code."}
