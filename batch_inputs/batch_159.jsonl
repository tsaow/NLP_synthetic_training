{"prompt": "make some code that functions the same as the following code: def find_target(numbers, target):\n    \"\"\"This function returns True if the target is present in the given list of numbers.\"\"\"\n    # Use set to improve the lookup performance\n    num_set = set(numbers)\n    if target in num_set:\n        return True\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: ## @file\n# process OptionROM generation from INF statement\n#\n#  Copyright (c) 2007, Intel Corporation. All rights reserved.<BR>\n#\n#  This program and the accompanying materials\n#  are licensed and made available under the terms and conditions of the BSD License\n#  which accompanies this distribution.  The full text of the license may be found at\n#  http://opensource.org/licenses/bsd-license.php\n#\n#  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.\n#\n\n##\n# Import Modules\n#\nimport RuleSimpleFile\nimport RuleComplexFile\nimport Section\nimport OptionRom\nimport Common.GlobalData as GlobalData\n\nfrom Common.DataType import *\nfrom Common.String import *\nfrom FfsInfStatement import FfsInfStatement\nfrom GenFdsGlobalVariable import GenFdsGlobalVariable\n\n##\n#\n#\nclass OptRomInfStatement (FfsInfStatement):\n    ## The constructor\n    #\n    #   @param  self        The object pointer\n    #\n    def __init__(self):\n        FfsInfStatement.__init__(self)\n        self.OverrideAttribs = None\n\n    ## __GetOptRomParams() method\n    #\n    #   Parse inf file to get option ROM related parameters\n    #\n    #   @param  self        The object pointer\n    #\n    def __GetOptRomParams(self):\n\n        if self.OverrideAttribs == None:\n            self.OverrideAttribs = OptionRom.OverrideAttribs()\n\n        if self.OverrideAttribs.NeedCompress == None:\n            self.OverrideAttribs.NeedCompress = self.OptRomDefs.get ('PCI_COMPRESS')\n            if self.OverrideAttribs.NeedCompress is not None:\n                if self.OverrideAttribs.NeedCompress.upper() not in ('TRUE', 'FALSE'):\n                    GenFdsGlobalVariable.ErrorLogger( \"Expected TRUE/FALSE for PCI_COMPRESS: %s\" %self.InfFileName)\n                self.OverrideAttribs.NeedCompress = \\\n                    self.OverrideAttribs.NeedCompress.upper() == 'TRUE'\n\n        if self.OverrideAttribs.PciVendorId == None:\n            self.OverrideAttribs.PciVendorId = self.OptRomDefs.get ('PCI_VENDOR_ID')\n\n        if self.OverrideAttribs.PciClassCode == None:\n            self.OverrideAttribs.PciClassCode = self.OptRomDefs.get ('PCI_CLASS_CODE')\n\n        if self.OverrideAttribs.PciDeviceId == None:\n            self.OverrideAttribs.PciDeviceId = self.OptRomDefs.get ('PCI_DEVICE_ID')\n\n        if self.OverrideAttribs.PciRevision == None:\n            self.OverrideAttribs.PciRevision = self.OptRomDefs.get ('PCI_REVISION')\n\n#        InfObj = GenFdsGlobalVariable.WorkSpace.BuildObject[self.PathClassObj, self.CurrentArch]\n#        RecordList = InfObj._RawData[MODEL_META_DATA_HEADER, InfObj._Arch, InfObj._Platform]\n#        for Record in RecordList:\n#            Record = ReplaceMacros(Record, GlobalData.gEdkGlobal, False)\n#            Name = Record[0]\n    ## GenFfs() method\n    #\n    #   Generate FFS\n    #\n    #   @param  self        The object pointer\n    #   @retval string      Generated .efi file name\n    #\n    def GenFfs(self):\n        #\n        # Parse Inf file get Module related information\n        #\n\n        self.__InfParse__()\n        self.__GetOptRomParams()\n        #\n        # Get the rule of how to generate Ffs file\n        #\n        Rule = self.__GetRule__()\n        GenFdsGlobalVariable.VerboseLogger( \"Packing binaries from inf file : %s\" %self.InfFileName)\n        #FileType = Ffs.Ffs.ModuleTypeToFileType[Rule.ModuleType]\n        #\n        # For the rule only has simpleFile\n        #\n        if isinstance (Rule, RuleSimpleFile.RuleSimpleFile) :\n            EfiOutputList = self.__GenSimpleFileSection__(Rule)\n            return EfiOutputList\n        #\n        # For Rule has ComplexFile\n        #\n        elif isinstance(Rule, RuleComplexFile.RuleComplexFile):\n            EfiOutputList = self.__GenComplexFileSection__(Rule)\n            return EfiOutputList\n\n    ## __GenSimpleFileSection__() method\n    #\n    #   Get .efi files according to simple rule.\n    #\n    #   @param  self        The object pointer\n    #   @param  Rule        The rule object used to generate section\n    #   @retval string      File name of the generated section file\n    #\n    def __GenSimpleFileSection__(self, Rule):\n        #\n        # Prepare the parameter of GenSection\n        #\n\n        OutputFileList = []\n        if Rule.FileName != None:\n            GenSecInputFile = self.__ExtendMacro__(Rule.FileName)\n            OutputFileList.append(GenSecInputFile)\n        else:\n            OutputFileList, IsSect = Section.Section.GetFileList(self, '', Rule.FileExtension)\n\n        return OutputFileList\n\n\n    ## __GenComplexFileSection__() method\n    #\n    #   Get .efi by sections in complex Rule\n    #\n    #   @param  self        The object pointer\n    #   @param  Rule        The rule object used to generate section\n    #   @retval string      File name of the generated section file\n    #\n    def __GenComplexFileSection__(self, Rule):\n\n        OutputFileList = []\n        for Sect in Rule.SectionList:\n            if Sect.SectionType == 'PE32':\n                if Sect.FileName != None:\n                    GenSecInputFile = self.__ExtendMacro__(Sect.FileName)\n                    OutputFileList.append(GenSecInputFile)\n                else:\n                    FileList, IsSect = Section.Section.GetFileList(self, '', Sect.FileExtension)\n                    OutputFileList.extend(FileList)\n\n        return OutputFileList\n\n     but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_inc_subseq_sum(arr):\n  n = len(arr)\n \n  max_sum = [0]*n\n \n  for i in range(n):\n    max_sum[i] = arr[i]\n \n  for i in range(1, n):\n    for j in range(i):\n      if arr[i] > arr[j] and max_sum[i] < max_sum[j] + arr[i]:\n        max_sum[i] = max_sum[j] + arr[i]\n \n  return max(max_sum)\n\nprint(max_inc_subseq_sum([10, 12, 4, 6, 5, 3]))\n# Output: 22 (4 + 6 + 12) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: ls = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = []\n\nfor num in ls:\n if num % 2 == 0:\n result.append(num)\n \nprint(result) # prints [2, 4, 6, 8, 10] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Recursion is a programming concept which involves a function invoking itself. Instead of using loops, recursion makes use of a function calling itself with a different input value each time. An example of recursive function in Python is the factorial function, defined as follows:\n\ndef factorial(x):\n    if x == 1:\n        return 1\n    else:\n        return x * factorial(x-1)\n\nThe function factorial(x) takes a single parameter x and returns x multiplied by the factorial of x-1. This recursive process will continue until it reaches the base case, which is x==1, where the function returns the value 1. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: CREATE TABLE IF NOT EXISTS users (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  name TEXT NOT NULL,\n  skills TEXT NOT NULL,\n  location TEXT NOT NULL\n);\n\nINSERT INTO users (name, skills, location)\nVALUES ('John', 'Python, HTML, CSS', 'Europe'),\n('Jim', 'Java, Bash, Go', 'Asia'); but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply_list(lst, num):\n    res = []\n    for item in lst:\n        res.append(item*num)\n    return res but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countWays(n):  \n if (n == 0): \n return 1\n elif (n < 0): \n return 0\n else: \n return countWays(n-1) + countWays(n-3) + countWays(n-4)\n\nn = 8\nresult = countWays(n)\n\nprint(\"The number of different ways to express\", n, \"as the sum of 1, 3 and 4 is:\", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def removeMiddleChar (word): \n    middle = len(word)//2\n      \n    # length of the substring \n    # which is to be removed \n    length = 1\n      \n    # to make sure the middle character is removed \n    # check the character's index \n    if len(word) % 2 == 0: \n        length = 2 \n          \n    # slicing the word of middle value \n    word = word[:middle] + word[middle + length:]  \n  \n    return word but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_seq(nums):\n    longest_seq = []\n    current_seq = [nums[0]]\n    for n in nums[1:]:\n        if n > current_seq[-1]:\n            current_seq.append(n)\n            if len(current_seq) > len(longest_seq):\n                longest_seq = current_seq\n        else:\n            current_seq = [n]\n    return longest_seq\n\nlongest = longest_seq([2, 3, 7, 4, 9, 6])\nprint(longest) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack:\n\ndef __init__(self):\n    self.items = []\n\ndef push(self, item):\n    self.items.append(item)\n\ndef pop(self):\n    return self.items.pop()\n\ndef is_empty(self):\n    return self.items == []\n\ndef peek(self):\n    if not self.is_empty():\n        return self.items[-1]\n\ndef get_stack(self):\n    return self.items but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os\n\ndef get_filename_from_path(path):\n    return os.path.basename(path)\n\nfilename = get_filename_from_path('/Users/john/Documents/Github/myproject/myfile.py')\nprint(filename) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_strings_by_sum_of_ascii(strings):\n    count = 0\n    for string in strings:\n        ascii_sum = 0\n        for char in string:\n            ascii_sum += ord(char)\n        if ascii_sum % 3 == 0:\n            count += 1\n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from subprocess import call\nfrom os import path\nimport hitchpostgres\nimport hitchselenium\nimport hitchpython\nimport hitchserve\nimport hitchredis\nimport hitchtest\nimport hitchsmtp\n\n\n# Get directory above this file\nPROJECT_DIRECTORY = path.abspath(path.join(path.dirname(__file__), '..'))\n\n\nclass ExecutionEngine(hitchtest.ExecutionEngine):\n    \"\"\"Engine for orchestating and interacting with the app.\"\"\"\n\n    def set_up(self):\n        \"\"\"Ensure virtualenv present, then run all services.\"\"\"\n        python_package = hitchpython.PythonPackage(\n            python_version=self.settings['python_version']\n        )\n        python_package.build()\n\n        call([\n            python_package.pip, \"install\", \"-r\",\n            path.join(PROJECT_DIRECTORY, \"requirements/local.txt\")\n        ])\n\n        postgres_package = hitchpostgres.PostgresPackage()\n        postgres_package.build()\n\n        redis_package = hitchredis.RedisPackage()\n        redis_package.build()\n\n        self.services = hitchserve.ServiceBundle(\n            project_directory=PROJECT_DIRECTORY,\n            startup_timeout=float(self.settings[\"startup_timeout\"]),\n            shutdown_timeout=float(self.settings[\"shutdown_timeout\"]),\n        )\n\n        postgres_user = hitchpostgres.PostgresUser(\"project_soa\", \"password\")\n\n        self.services['Postgres'] = hitchpostgres.PostgresService(\n            postgres_package=postgres_package,\n            users=[postgres_user, ],\n            databases=[hitchpostgres.PostgresDatabase(\"project_soa\", postgres_user), ]\n        )\n\n        self.services['HitchSMTP'] = hitchsmtp.HitchSMTPService(port=1025)\n\n        self.services['Django'] = hitchpython.DjangoService(\n            python=python_package.python,\n            port=8000,\n            settings=\"project_soa.settings.local\",\n            needs=[self.services['Postgres'], ],\n            env_vars=self.settings['environment_variables'],\n        )\n\n        self.services['Redis'] = hitchredis.RedisService(\n            redis_package=redis_package,\n            port=16379,\n        )\n\n        self.services['Firefox'] = hitchselenium.SeleniumService(\n            xvfb=self.settings.get(\"xvfb\", False),\n            no_libfaketime=True,\n        )\n\n#        import hitchcron\n#        self.services['Cron'] = hitchcron.CronService(\n#            run=self.services['Django'].manage(\"trigger\").command,\n#            every=1,\n#            needs=[ self.services['Django'], ],\n#        )\n\n        self.services.startup(interactive=False)\n\n        # Docs : https://hitchtest.readthedocs.org/en/latest/plugins/hitchselenium.html\n        self.driver = self.services['Firefox'].driver\n\n        self.webapp = hitchselenium.SeleniumStepLibrary(\n            selenium_webdriver=self.driver,\n            wait_for_timeout=5,\n        )\n\n        # Add selenium steps\n        self.click = self.webapp.click\n        self.wait_to_appear = self.webapp.wait_to_appear\n        self.wait_to_contain = self.webapp.wait_to_contain\n        self.wait_for_any_to_contain = self.webapp.wait_for_any_to_contain\n        self.click_and_dont_wait_for_page_load = self.webapp.click_and_dont_wait_for_page_load\n\n        # Configure selenium driver\n        self.driver.set_window_size(self.settings['window_size']['width'], self.settings['window_size']['height'])\n        self.driver.set_window_position(0, 0)\n        self.driver.implicitly_wait(2.0)\n        self.driver.accept_next_alert = True\n\n    def pause(self, message=None):\n        \"\"\"Stop. IPython time.\"\"\"\n        if hasattr(self, 'services'):\n            self.services.start_interactive_mode()\n        self.ipython(message)\n        if hasattr(self, 'services'):\n            self.services.stop_interactive_mode()\n\n    def load_website(self):\n        \"\"\"Navigate to website in Firefox.\"\"\"\n        self.driver.get(self.services['Django'].url())\n        self.click(\"djHideToolBarButton\")\n\n    def fill_form(self, **kwargs):\n        \"\"\"Fill in a form with id=value.\"\"\"\n        for element, text in kwargs.items():\n            self.driver.find_element_by_id(element).send_keys(text)\n\n    def confirm_emails_sent(self, number):\n        \"\"\"Count number of emails sent by app.\"\"\"\n        assert len(self.services['HitchSMTP'].logs.json()) == int(number)\n\n    def click_on_link_in_last_email(self, which=1):\n        \"\"\"Click on the nth link in the last email sent.\"\"\"\n        self.driver.get(\n            self.services['HitchSMTP'].logs.json()[-1]['links'][which - 1]\n        )\n\n    def wait_for_email(self, containing=None):\n        \"\"\"Wait for, and return email.\"\"\"\n        self.services['HitchSMTP'].logs.out.tail.until_json(\n            lambda email: containing in email['payload'] or containing in email['subject'],\n            timeout=25,\n            lines_back=1,\n        )\n\n    def time_travel(self, days=\"\"):\n        \"\"\"Make all services think that time has skipped forward.\"\"\"\n        self.services.time_travel(days=int(days))\n\n    def on_failure(self):\n        \"\"\"Stop and IPython.\"\"\"\n        if not self.settings['quiet']:\n            if self.settings.get(\"pause_on_failure\", False):\n                self.pause(message=self.stacktrace.to_template())\n\n    def on_success(self):\n        \"\"\"Pause on success if enabled.\"\"\"\n        if self.settings.get(\"pause_on_success\", False):\n            self.pause(message=\"SUCCESS\")\n\n    def tear_down(self):\n        \"\"\"Shut down services required to run your test.\"\"\"\n        if hasattr(self, 'services'):\n            self.services.shutdown()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: str1, str2 = 'Hello', 'World'\nstr1, str2 = str2, str1\n\nprint(\"After swapping: str1 =\", str1, \"and str2 =\", str2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n \nurl = \"http://example.com/data\"\ndata = {\"name\":\"John Doe\",\"age\":30}\n \nresponse = requests.post(url, data = data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class FlaggedEmails:\n    def __init__(self):\n        self.flagged_emails = []\n  \n    def add_email(self, email):\n        self.flagged_emails.append(email)\n  \n    def unflag_all(self):\n        while self.flagged_emails:\n            self.flagged_emails.pop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Vehicle:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n    \n    def getMake(self):\n        return self.make\n    \n    def getModel(self):\n        return self.model\n    \n    def getYear(self):\n        return self.year but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: x = 3\ny = 4\n\ntemp = x \nx = y \ny = temp \n\nprint(\"x =\", x) \nprint(\"y =\", y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countFreq(str): \n      \n    # break the string into words  \n    str = str.split(\" \")  \n      \n    # Count each word using Dictionary  \n    freq = {} \n    for word in str: \n        if word in freq: \n            freq[word] += 1\n        else: \n            freq[word] = 1\n    return freq but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calc_elec_bill(one_off, night_rate, standard_rate, total_kwh):\n    one_off_fee = one_off\n    night_rate_fee = night_rate * total_kwh\n    standard_rate_fee = standard_rate * total_kwh\n    return one_off_fee + night_rate_fee + standard_rate_fee\n\none_off = 25.00\nnight_rate = 0.20\nstandard_rate = 0.30\ntotal_kwh = 350.00\n\nprint(\"Total electricity bill: $\"+str(calc_elec_bill(one_off, night_rate, standard_rate, total_kwh))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_even_nums(n):\n    sum = 0\n    for i in range(0, n+1):\n        if i%2 == 0:\n            sum += i\n    return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt \nimport numpy as np\n\nsampling_rate = 100\nsine_frequency = 20\ntime_period = 1.0/sampling_rate\nx_values = np.arange(0, 1, time_period)\ny_values = np.sin(2 * np.pi * sine_frequency * x_values)\n\nplt.plot(x_values, y_values)\nplt.xlabel('Time')\nplt.ylabel('Amplitude')\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_indeed(url):\n jobs = []\n page = requests.get(url).content\n\n soup = BeautifulSoup(page, 'html.parser')\n job_cards = soup.find_all('div', class_='jobsearch-SerpJobCard unifiedRow row result clickcard')\n \n for job_card in job_cards:\n title = job_card.find('div', class_='title').text\n company = job_card.find('span', class_='company').text\n location = job_card.find('div', class_='location').text\n link = 'https://www.indeed.com/' + job_card.find('a').get('href')\n job = {\n 'title': title,\n 'company': company,\n 'location': location,\n 'link': link\n }\n jobs.append(job)\n \n return jobs\n\nif __name__ == '__main__':\n jobs = scrape_indeed('https://www.indeed.com/jobs?q=web+developer&l=San+Francisco%2C+CA')\n print(jobs) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/', methods=['GET'])\ndef main_page():\n    return render_template('userinfoForm.html')\n\n@app.route('/user-info', methods=['POST'])\ndef get_user_info():\n    # get user info from form\n    name = request.form.get('name')\n    email = request.form.get('email')\n    address = request.form.get('address')\n    occupation = request.form.get('occupation')\n    return render_template('success.html', name=name, email=email, address=address, occupation=occupation)\n\nif __name__ == '__main__':\n    app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def validate_email(email):\n    # check if the email address is valid or not\n\n    if '@' not in email:\n        return False\n    if '.' not in email:\n        return False\n    username = email.split('@')[0]\n    domain = email.split('@')[1]\n    if username == \"\" or domain == \"\":\n        return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Get the page\nurl = 'http://finance.yahoo.com/quote/AAPL/'\npage = requests.get(url)\n\n# Parse the content\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Find the element which contains the stock price\nprice_element = soup.find('span', class_=\"Fl(end) Ta(end) Fw(b) Fz(36px) Mb(-4px)\")\n\n# Extract and print the stock price\nprint(price_element.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_summary(object_list):\n    for object in object_list:\n        print('Name: {}\\nAge: {}\\n'.format(object['name'], object['age']))\n\nprint_summary([{'name': 'John', 'age': 23}, {'name': 'Mary', 'age': 35}]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: wordFrequencies = {\n 'cat': 2,\n 'dog': 5,\n 'bird': 3\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name, age, marks):\n        self.name = name\n        self.age = age\n        self.marks = marks\n        \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n    \n    def get_total_marks(self):\n        return sum(self.marks) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: output_board = [\n  [7,8,5,4,3,9,1,2,6],\n  [6,1,2,8,7,5,3,4,9],\n  [4,9,3,6,2,1,5,7,8],\n  [8,5,7,9,4,3,2,6,1],\n  [2,6,1,7,5,8,9,3,4],\n  [9,3,4,1,6,2,7,8,5],\n  [5,7,6,3,9,4,8,1,2],\n  [1,2,8,5,8,7,4,9,6],\n  [3,4,9,2,1,6,5,7,7]\n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def selection_sort(arr):\n    for i in range(len(arr)):\n        min_index = i\n        \n        for j in range(i + 1, len(arr)):\n            if arr[min_index] > arr[j]:\n                min_index = j\n                \n        arr[i], arr[min_index] = arr[min_index], arr[i]\n        \n    return arr\n\narr = [4, 1, 6, 5, 7, 2, 0]\nprint(selection_sort(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def concat(str1: str, str2: str) -> str:\n    \"\"\"Concatenate two strings.\n\n    Args:\n        str1: The first string\n        str2: The second string\n\n    Returns:\n        str: The concatenated string\n    \"\"\"\n    return str1 + str2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Generate grid of characters\ngrid_rows = 3\ngrid_cols = 5\n\ngrid = []\nfor row in range(grid_rows):\n row_data = []\n\nfor col in range(grid_cols):\n row_data.append(random.choice(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n\ngrid.append(row_data)\n\nprint(grid) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: d = {\"name\": \"John\", \"age\": 35, \"city\": \"New York\"}\nvalue = d.get(\"age\")\nprint(value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import required packages\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# define Fibonacci sequence\ndef fibonacci_sequence(length):\n    fibonacci_nums = [1,1]\n    for i in range(length-2):\n        fibonacci_nums.append(fibonacci_nums[i]+fibonacci_nums[i+1])\n    return np.array(fibonacci_nums)\n\n# define model\nmodel = Sequential()\nmodel.add(Dense(1, input_dim=len(fibonacci_sequence(8)), activation='linear'))\n\n# compile model\nmodel.compile(loss='mean_squared_error', optimizer='adam', metrics=['accuracy'])\n\n# fit model\nmodel.fit(fibonacci_sequence(8).reshape(7,1), fibonacci_sequence(9)[1:], epochs=500, batch_size=2, verbose=0)\n\n#predict next number\nnext_num = model.predict(fibonacci_sequence(10).reshape(9,1))\n\n# print the result\nprint('The next number from the Fibonacci sequence is: ', next_num[-1][0]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(str1, str2):\n    \"\"\"\n    Check if two strings are anagrams.\n\n    Parameters:\n        str1 (str): First string\n        str2 (str): Second string\n\n    Returns:\n        bool: True if the strings are anagrams, False other wise\n    \"\"\"\n    str1 = str1.lower().replace(\" \", \"\")\n    str2 = str2.lower().replace(\" \", \"\")\n\n    if sorted(str1) == sorted(str2):\n        return True\n    else:\n        return False\n    \nif __name__ == '__main__':\n    s1 = 'listen'\n    s2 = 'silent'\n    print(is_anagram(s1, s2))  # True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter\nwindow = tkinter.Tk()\nwindow.title('My Application')\nwindow.geometry('200x200')\nlbl = tkinter.Label(window,text=\"Welcome to our application!\")\nlbl.pack()\nwindow.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_elem_in_list(data, elem, val):\n  return [val if x==elem else x for x in data]\n\nprint(replace_elem_in_list([1,2,3,3], 3, 0))\n# Output: [1, 2, 0, 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def min_length_index(arr):\n  min = float('infinity')\n  min_i = 0\n  for i in range(len(arr)):\n    if len(arr[i]) < min:\n      min = len(arr[i])\n      min_i = i\n  return min_i\n\nprint(min_length_index([\"Hello\", \"World\", \"Python\", \"is\", \"Fun\"])) # 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def armstrong_numbers(start, end):\n    armstrong_numbers = []\n    for number in range(start, end + 1):\n        digits = [int(d) for d in str(number)]\n        sum_of_digits = 0\n        for digit in digits:\n            sum_of_digits += digit**len(digits)\n        if sum_of_digits == number:\n            armstrong_numbers.append(number)\n    return armstrong_numbers but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from bs4 import BeautifulSoup\n\nhtml_doc = \"\"\"\n<html>\n    <head>\n        <title>Parsing example</title>\n    </head>\n    <body>\n        <h1>Heading</h1>\n        <ul>\n            <li>Item 1</li>\n            <li>Item 2</li>\n        </ul>\n        <p>This is a paragraph.</p>\n    </body>\n</html>\n\"\"\"\n\nsoup = BeautifulSoup(html_doc, 'html.parser')\n\nheading = soup.find(\"h1\").get_text()\nitems = soup.find_all(\"li\")\npara = soup.find(\"p\").get_text()\n\nprint(\"Heading: \" + heading)\nprint(\"Items:\")\nfor item in items:\n    print(\"- \" + item.get_text())\nprint(\"Paragraph: \" + para) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def celsiusToFahrenheit(celsius): \n    return (celsius * 1.8) + 32 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_increasing_subsequence(arr):\n n = len(arr)\n dp = [1] * n\n for i in range(1, n):\n max_length_so_far = 0\n for j in range(i):\n if arr[j] < arr[i]:\n max_length_so_far = max(max_length_so_far, dp[j])\n dp[i] = max_length_so_far + 1\n return max(dp)\n\narr = [1, 10, 4, 2, 6, 12, 15]\nresult = longest_increasing_subsequence(arr)\nprint(result)\n# Output: 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def getMaxDifference(elementList): \n    maxDifference = 0\n    for i in range(len(elementList)): \n        for j in range(i + 1, len(elementList)): \n            if (elementList[j] - elementList[i] > maxDifference): \n                maxDifference = elementList[j] - elementList[i] \n    return maxDifference\n\nlist = [3, 14, 5, 2, 9]\nprint (getMaxDifference(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: try:\n    a = 1\n    b = 0\n    c = a / b\n    print(c)\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_words(words):\n    # Sort the list in ascending alphabetical order.\n    sorted_words = sorted(words)\n    # Return the sorted list.\n    return sorted_words\n    \nwords = [\"apple\", \"banana\", \"orange\", \"kiwi\"]\n\nsorted_words = sort_words(words)\n\nprint(sorted_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import libraries\nimport numpy as np\nimport tensorflow as tf\nimport keras\nfrom keras.preprocessing.text import one_hot\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Flatten, Embedding\n\n# Set up the corpus of data\ncorpus = []\nwith open('data.txt', encoding='utf8') as f:\n    for line in f.readlines():\n        corpus.append(line.strip().lower())\n\n# Create one-hot representations of the data\nvocab_size=5000\nencoded_docs=[one_hot(d,vocab_size) for d in corpus]\nmax_length=1\npadded_docs=pad_sequences(encoded_docs,maxlen=max_length,padding='post')\n\n# Set up the model\nmodel=Sequential()\nmodel.add(Embedding(vocab_size,8,input_length=max_length))\nmodel.add(Flatten())\nmodel.add(Dense(1000,activation='relu'))\nmodel.add(Dense(1000,activation='relu'))\nmodel.add(Dense(1,activation='sigmoid'))\n\n# Compile the model\nmodel.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])\n\n# Fit the model\nmodel.fit(padded_docs,labels,epochs=50,verbose=1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n#load the historical data\ndata = pd.read_csv('stock-data.csv')\n\n#prepare the feature and target variables\nX = data.iloc[:, :-1]\ny = data['Close']\n\n#fit the linear regression model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n#make predictions\nX_test = 'Input the stock's historical closing prices for the future month here'\npredictions = model.predict(X_test)\n\n#display the predictions\nprint(predictions) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence = \"The cat is playing with a ball.\"\nwords = sentence.split()\n\nverbs = []\nnouns = []\n\nfor word in words:\n  if word in [\"is\", \"playing\"]:\n    verbs.append(word)\n  elif word in [\"The\", \"cat\", \"a\", \"ball\"]:\n    nouns.append(word)\n\nprint(\"Verbs:\", verbs)\nprint(\"Nouns:\", nouns) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def subsequence(seq, sub):\n    if sub == \"\":\n        return True\n    \n    sub_index = 0\n    sequence_length = len(seq)\n    sub_length = len(sub)\n    \n    for index in range(sequence_length):\n        if sub[sub_index] == seq[index]:\n            sub_index +=1\n            if sub_index == sub_length:\n                return True\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_generator(strings):\n  for string in strings:\n    yield string\n\nfor string in string_generator(['cat', 'dog', 'bird']):\n  print(string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_palindrome(string):\n longest_str = \"\"\n for i in range(len(string)):\n for j in range(i, len(string)):\n cur_str = string[i:j+1]\n if cur_str == cur_str[::-1] and len(cur_str) > len(longest_str):\n longest_str = cur_str\n return longest_str\n \nprint(longest_palindrome(\"The racecar stopped to rest, so we can start again.\"))\n# Output: racecar but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef random_binary_array(n):\n    \"\"\"Return a random array of length n with binary values.\"\"\"\n    array = []\n    for i in range(n):\n        array.append(random.choice([0, 1]))\n    return array but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_password(characters=\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+{}:\"):\n    password = \"\"\n    for _ in range(8):\n        password += random.choice(characters)\n    return password but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linearSearch(arr, value):\n    \n    for i in range(len(arr)):\n        if arr[i] == value:\n            return i\n        \n    return -1\n\narr = [10, 20, 80, 30, 60, 50, 110, 100, 130, 170]\nvalue = 110\n\nidx = linearSearch(arr, value)\n\nif idx != -1:\n    print(\"Element is present at index\", idx)\nelse:\n    print(\"Element is not present in the array\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compute_similarity(s1, s2):\n    len1 = len(s1)\n    len2 = len(s2)\n    max_len = max(len1, len2)\n    count = 0\n\n    for i in range(max_len):\n        if i >= len1 or i >= len2:\n            break\n        if s1[i] == s2[i]:\n            count += 1\n    \n    return count / max_len but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: source = [0, 1, 2]\n \ndest = []\n \nfor item in source:\n    dest.append(item)\n    \nprint(dest) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def increase_number(number):\n    return number + 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef is_prime(n):\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n\nprint(is_prime(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Quicksort is a divide-and-conquer algorithm that works by recursively partitioning a list into two sublists of items based on a pivot value. The left sublist contains all items less than the pivot value and the right sublist contains all items greater than the pivot value. The quicksort algorithm then recursively sorts these sublists and combines them back together to form the final sorted list.\n\nIn Python, one implementation of the quicksort algorithm is as follows:\n\ndef quicksort(arr): \n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quicksort(left) + middle + quicksort(right) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef randomPasswordGenerator(length):\n    # Generate a random password consisting of 10 alphabet characters, 9 digits and the symbols @, # and $\n    generated_password = ''.join(random.choice(\n        string.ascii_letters + string.digits + \"@#$\") for i in range(length))\n    return generated_password\n\nlength = 10\nprint(\"Random Password:\", randomPasswordGenerator(length)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # This code filters a list of numbers and prints out only the even ones\nnumbers = [1,2,3,4,5,6,7,8]\n\n# Use list comprehension to filter the list\neven_numbers = [x for x in numbers if x % 2 == 0]\n\n# Print out the even numbers\nfor num in even_numbers:\n  print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node: \n    def __init__(self, data): \n        self.data = data  \n        self.left = None\n        self.right = None\n  \ndef generateTree(root, level): \n    if level == 1: \n        root.left = Node(2*level) \n        root.right = Node(2*level + 1) \n    else: \n        root.left = Node(2*level) \n        root.right = Node(2*level + 1) \n        generateTree(root.left, level-1) \n        generateTree(root.right, level-1)\n\nroot = Node(0) \nlevel = 4\ngenerateTree(root, level) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk, numpy\nfrom nltk.stem.lancaster import LancasterStemmer\nstemmer = LancasterStemmer()\n \n# importing our intents file\nimport json\nwith open('intents.json') as json_data:\n    intents = json.load(json_data)\n \n# tokenizing patterns\nwords = []\nclasses = []\ndocuments = []\nignore_words = ['?']\n# loop through each sentence in our intents patterns\nfor intent in intents['intents']:\n    for pattern in intent['patterns']:\n        # tokenize each word in the sentence\n        w = nltk.word_tokenize(pattern)\n        # add to our words list\n        words.extend(w)\n        # add to documents in our corpus\n        documents.append((w, intent['tag']))\n        # add to our classes list\n        if intent['tag'] not in classes:\n            classes.append(intent['tag'])\n \n# stem and lower each word and remove duplicates\nwords = [stemmer.stem(w.lower()) for w in words if w not in ignore_words]\nwords = sorted(list(set(words)))\n \n# remove duplicates\nclasses = sorted(list(set(classes)))\n \n# create our training data\ntraining = []\noutput = []\n# create an empty array for our output\noutput_empty = [0] * len(classes)\n# training set, bag of words for each sentence\nfor doc in documents:\n    # initialize our bag of words\n    bag = []\n    # list of tokenized words for the pattern\n    pattern_words = doc[0]\n    # stem each word\n    pattern_words = [stemmer.stem(word.lower()) for word in pattern_words]\n    # create our bag of words array\n    for w in words:\n        bag.append(1) if w in pattern_words else bag.append(0)\n    \n    training.append(bag)\n    # output is a '0' for each tag and '1' for current tag\n    output_row = list(output_empty)\n    output_row[classes.index(doc[1])] = 1\n    output.append(output_row)\n \n# sample training/output\ni = 0\nw = documents[i][0]\nprint ([stemmer.stem(word.lower()) for word in w])\nprint (training[i])\nprint (output[i])\n\n# import tensorflow\nimport numpy\nimport tflearn\nimport tensorflow as tf\nimport random \n \n# seed\nrandom.seed(1)        \n# transform as a numpy array\ntraining = numpy.array(training)\noutput = numpy.array(output)\n \n# build deep neural network \nnet = tflearn.input_data(shape=[None, len(training[0])])\nnet = tflearn.fully_connected(net, 8)\nnet = tflearn.fully_connected(net, 8)\nnet = tflearn.fully_connected(net, len(output[0]), activation=\"softmax\")\nnet = tflearn.regression(net)\n \n# define model and setup tensor board\nmodel = tflearn.DNN(net, tensorboard_dir='tflearn_logs')\n# start training (apply gradient descent algorithm)\nmodel.fit(training, output, n_epoch=1000, batch_size=8, show_metric=True)\nmodel.save('model.tflearn')\n \nimport pickle\npickle.dump( {'words':words, 'classes':classes, 'train_x':training, 'train_y':output}, open( \"training_data\", \"wb\" ) ) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_pattern(string):\n    nums = string.split()\n    nums = [int(num) for num in nums]\n\n    curr = nums[0]\n    count = 1\n\n    for num in nums[1:]:\n        if num == curr:\n            count += 1\n        else:\n            if count > 1:\n                if count - 1 != curr:\n                    return False\n            curr = num\n            count = 1\n\n    if count > 1:\n        if count - 1 != curr:\n            return False\n\n    return True\n\nif __name__ == \"__main__\":\n    string = \"1 2 3 3 3 4 4 4 4 5 5 5 5\"\n    print(check_pattern(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sum(lst)/len(lst) # This is equivalent to (1+2+3+4)/4 = 2.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import urllib.request\nfrom urllib.parse import urlparse\nimport os\n\ndef save_webpage(url, path):\n parsed_url = urlparse(url)\n path = os.path.join(path, parsed_url.netloc + parsed_url.path)\n if not os.path.exists(os.path.dirname(path)):\n os.makedirs(os.path.dirname(path))\n urllib.request.urlretrieve(url, path) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_strings_by_length(strings):\n    # Sort strings by length in ascending order\n    strings.sort(key=len)\n    return strings but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: new_string = string.replace('is', 'was') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random(n, m):\n random_numbers = []\n for i in range(n):\n random_number = random.randint(0, m)\n random_numbers.append(random_number)\n return random_numbers\n\nrandom_numbers = generate_random(n, m)\nprint(random_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: [number for number in range(10) if number % 3 == 0 and number % 5 == 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def desc_sort_dict(my_dict):\n  return {k: v for k, v in sorted(my_dict.items(), key=lambda item: item[1], reverse=True)} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n    var1, var2 = 0, 1\n    while var1 < n:\n        print(var1, end=' ') \n        var1, var2 = var2, var1 + var2\n    return\n\ndef FibonacciFast(n): \n    result = []\n    var1, var2 = 0, 1\n    while var1 < n:\n        result.append(var1)\n        var1, var2 = var2, var1 + var2\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(input_string):\n  characters = set()\n  output_string = \"\"\n  for character in input_string:\n    if character not in characters:\n      output_string += character\n      characters.add(character)\n\n  return output_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.ensemble import RandomForestClassifier \n\n# Create a random forest classifier \nclf = RandomForestClassifier(n_estimators=100) \n\n# Train the model using the training sets \nclf.fit(X_train, y_train) \n\n# Create predictions\ny_pred = clf.predict(X_test) \n\n# Evaluate the model\nprint('Accuracy Score :', accuracy_score(y_test, y_pred)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def letter_frequency(str):\n    freq = {}\n    for letter in str:\n        if letter in freq:\n            freq[letter] += 1\n        else:\n            freq[letter] = 1\n    return freq\n        \nresult = letter_frequency(\"Hello World\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\n \ndatetime_object = datetime.datetime.now()\nprint(datetime_object.strftime(\"%A, %B %d, %Y\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_words(words): \n    words.sort() \n    return words \n\nwords = [\"software\", \"engineering\", \"programming\"]\nprint(sort_words(words)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Evaluate the expression (5 - 22 ) +18  \nresult = (5 - 22) + 18  \n \nprint(\"The result is:\", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport json\n\nurl = 'https://random-places.p.rapidapi.com/v1/get'\n\nquerystring = {'language': 'en-US', 'size': '1', 'types': 'city'}\n\nheaders = {\n'x-rapidapi-host': 'random-places.p.rapidapi.com',\n'x-rapidapi-key': <Your RapidAPI Key>\n}\n\nresponse = requests.request('GET', url, headers=headers, params=querystring)\n\ndata = json.loads(response.text)\n\ndestination = data['data'][0]\n\nprint(f'Destination: {destination[\"name\"]}, {destination[\"country\"]}')\nprint(f'Coordinates: {destination[\"lat\"]}, {destination[\"lng\"]}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_list(arr): \n    return arr[::-1] \n\nInput_list = [1, 2, 3, 4, 5]\nprint(\"Original List:\", Input_list) \nRev_list = reverse_list(Input_list) \nprint(\"Reversed List:\", Rev_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def number_to_digits(number):\n  digits = []\n  while (number>0):\n    digits.append(number % 10)\n    number = number // 10\n  \n  digits.reverse()\n  return digits but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: SELECT name \nFROM pages \nWHERE title LIKE '%Python%'; but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # An array to store the board\nboard = ['_', '_', '_', \n         '_', '_', '_',\n         '_', '_', '_']\n \n# Variable to keep track of the turn\nturn = 'X'\n \n# Variable to check if the game is over\ngame_is_over = False\n \nwhile not game_is_over:\n # Check if the game is over\n if turn == 'X':\n  player = 'X'\n else:\n  player = 'O'\n \n # Print out the board\n print('------------')\n for i in range(len(board)):\n  print(board[i], end=' ')\n  if i == 2 or i == 5 or i == 8:\n   print()\n print('------------')\n \n # Ask for position\n board_position = int(input('Player ' + player + ' where do you want to move? '))\n \n # Place the piece\n board[board_position - 1] = turn\n \n # Switch the turn\n if turn == 'X':\n  turn = 'O'\n else:\n  turn = 'X'\n \n # Check if there is a winner\n if board[0] == board[1] == board[2] or board[3] == board[4] == board[5] or board[6] == board[7] == board[8]:\n  print('Player ' + player + ' won!')\n  game_is_over = True\n \n # Check if the board is full\n counter = 0\n for n in board:\n  if n != '_':\n   counter += 1\n \n if counter == 9:\n  print('Draw!')\n  game_is_over = True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup \n  \n# url of the website to crawl \nURL = \"https://www.example.com/\"\n  \n# get the whole page content in  \n# the form of text \npage = requests.get(URL).text\n  \n# number of words in the page \nword_count = 0\n  \n# create a Beautiful Soup parsable string \nsoup = BeautifulSoup(page, 'html.parser') \n  \n# find all the tags of type p \nparagraphs = soup.find_all('p') \nfor para in paragraphs: \n    words = para.text.split() \n    word_count += len(words) \n  \n# print the word count \nprint(\"Total words in the page:\", word_count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_vowels(string):\n    vowels = 'aeiou'\n    new_string = ''\n\n    for c in string:\n        if c.lower() not in vowels:\n            new_string += c\n    \n    return new_string\n\nif __name__ == '__main__':\n    string = \"Beau tiful\"\n    print(remove_vowels(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndef parse_json(input_string):\n    data = json.loads(input_string)\n    return data but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # optimized version \nwords = [\"cat\", \"dog\", \"snake\", \"elephant\"]\n\nfirst_letters = [word[0] for word in words] # list of first letters\nlast_letters = [word[-1] for word in words] # list of last letters\n\n# print the results\nprint(first_letters)\nprint(last_letters) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import textwrap\n\ndef wrap(text):\n  return textwrap.fill(text, 80) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_square_odd(n1, n2):\n    sum = 0\n    for i in range(n1, n2+1):\n        if i % 2 != 0:\n            sum += i*i\n    return sum\n\nsum = sum_square_odd(n1, n2)\nprint(sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(lst, target):\n for i in range(len(lst)):\n  if lst[i] == target:\n   return i\n return -1\n\nsearch([1, 4, 6, 8, 10], 8)  # Output: 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import csv\nimport sqlite3\n\n# Read .csv file\ndata = csv.reader(open('example.csv'), delimiter=',')\n\n# Connect to database\nconn = sqlite3.connect('example.db')\n\n# Process and store data in database\nfor row in data:\n    conn.execute('INSERT INTO table (column1, column2, column3) VALUES (?, ?, ?)', row)\nconn.commit()\n\n# Generate report\ncursor = conn.execute('SELECT * FROM table')\n\nreport = open('report.txt', 'w')\nfor row in cursor:\n    row = ' '.join(row)\n    report.write(row)\n\nreport.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/bin/bash\n\n# Run the python program in the background\npython myscript.py &\n\n# Print the process id\necho \"Process id: $!\"\n\n# Wait for a keypress\nread -p \"Press any key to exit\"\n\n# Kill the process\nkill $! but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def largest_prime_factor(number):\n largest_factor = 1\n for i in range(2, number+1):\n while number % i == 0:\n largest_factor = i\n number //= i\n return largest_factor\n\nlargest_prime_factor(35) # Output: 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: inp = \"name1=123&name2=456&name3=789\"\nkv = inp.split(\"&\")\nd = {}\nfor i in kv:\n    k,v = i.split(\"=\")\n    d[k] = v\n\nprint(d) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_words(string):\n    words = string.split(\" \")\n    words.reverse()\n    output_string = \" \".join(words)\n    return output_string\n\nprint(reverse_words(\"Hello, World!\")) # Output: \"World! Hello,\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to find the maximum and minimum of a list\ndef find_max_min(nums):\n    max = nums[0]\n    min = nums[0]\n    for num in nums:\n        if num > max:\n            max = num\n        if num < min:\n            min = num\n    return (max, min)\n\n# Test program\nnums = [3, 2, 8, 9, 5]\nmax, min = find_max_min(nums)\nprint('Maximum:', max)\nprint('Minimum:', min) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def f_to_c(F):\n    C = (F - 32) * 5/9\n    return C but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import the built-in \"requests\" package\nimport requests\n\n# Set the URL\nurl = \"https://example.com/index.html\"\n\n# Retrieve the data\ndata = requests.get(url)\n\n# Output the retrieved data\nprint(data.text) but is not the same. just give one example and only return the code."}
