{"prompt": "make some code that functions the same as the following code: def max_consecutive_sum(numbers):\n    \"\"\"\n    Finds the maximum consecutive sum of a list of numbers. \n    \n    Args:\n        numbers (list of ints): The list of numbers.\n    \n    Return:\n        int: The maximum consecutive sum.\n    \"\"\"\n\n    # Set the initial maximum sum\n    max_sum = float('-inf')\n\n    # Iterate through the numbers and find the maximum sum\n    running_sum = 0\n    for number in numbers:\n        running_sum += number\n        if running_sum > max_sum:\n            max_sum = running_sum\n        if running_sum < 0:\n            running_sum = 0\n    \n    return max_sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn import tree\n\n# Load the data\ndata = np.genfromtxt(\"data.csv\", delimiter=\",\")\nX = data[:,:-1]\ny = data[:,-1]\n\n# Create and train the decision tree model\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X, y)\n\n# Use the model to predict values\npredictions = clf.predict(X) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn import tree\n\n# Create the data\nx = np.array([[0, 0], [1, 1]])\ny = np.array([0, 1])\n\n# Train the tree\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(x, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_longest_word(sentence):\n    # Split sentence into a list of words\n    words = sentence.split()\n    # Track the longest word\n    longest_word = ''\n    # Iterate over the list of words\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    # Return the longest word\n    return longest_word\n\nprint(find_longest_word(\"My name is John\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_sort(alist):\n    if len(alist)>1:\n        mid = len(alist)//2\n        lefthalf = alist[:mid]\n        righthalf = alist[mid:]\n\n        merge_sort(lefthalf)\n        merge_sort(righthalf)\n\n        i=0\n        j=0\n        k=0\n        while i < len(lefthalf) and j < len(righthalf):\n            if lefthalf[i] < righthalf[j]:\n                alist[k]=lefthalf[i]\n                i=i+1\n            else:\n                alist[k]=righthalf[j]\n                j=j+1\n            k=k+1\n\n        while i < len(lefthalf):\n            alist[k]=lefthalf[i]\n            i=i+1\n            k=k+1\n\n        while j < len(righthalf):\n            alist[k]=righthalf[j]\n            j=j+1\n            k=k+1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# our tic-tac-toe board\nboard = []\n\n# function to generate a random 3x3 tic-tac-toe board\ndef generate_board():\n  # create a 3x3 board\n  board = [[0 for i in range(3)] for j in range(3)]\n\n  # populate the board randomly\n  for row in range(3):\n    for col in range(3):\n      board[row][col] = random.choice(['X','O'])\n\n  return board\n\n# print the generated board\nboard = generate_board()\nfor row in board:\n  print(row) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_profile_details():\n    \n    name = input(\"Please enter your name: \")\n    age = int(input(\"Please enter your age: \"))\n    city = input(\"Please enter your city: \")\n    country = input(\"Please enter your country: \")\n    occupation = input(\"Please enter your occupation (if any): \")\n    \n    profile_details = {\n        'name': name,\n        'age': age,\n        'city': city,\n        'country': country,\n        'occupation': occupation\n    }\n    \n    return profile_details\n\n# Driver code\nprint(get_profile_details()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convertDateFormat(inputDate):\n    dateList = inputDate.split('-')\n    newFormat = dateList[1] + \"-\" + dateList[0] + \"-\" + dateList[2]\n    return newFormat but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Read the data into a pandas DataFrame \ndf = pd.read_csv('StockData.csv') \n\n# Create the independent variable x which is a 2D array \nx = df['Days'].values.reshape(-1,1) \n  \n# Create the dependent variable Y \ny = df['Price'].values.reshape(-1,1) \n  \n# Create the linear regression model  \nlr = LinearRegression() \n  \n# Fit the model  \nlr.fit(x, y) \n  \n# Get the slope of the model \nslope = lr.coef_ \nprint(\"Slope of the model is\", slope) \n  \n# Get the y-intercept of the model \nintercept = lr.intercept_ \nprint(\"y-intercept of the model is\", intercept) \n  \n# Get the predictions for the x values\ny_pred = lr.predict(x)\n\n# Get the trend of the stock\ntrend = np.sign(np.mean(y_pred)).astype('int')\nprint(\"Trend of the stock is\", trend) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: a, b = 0, 1\nfor i in range(10):\n    print(a)\n    a, b = b, a + b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\n\nlabel1 = 'sports'\nlabel2 = 'science'\ntext = 'Football is a team sport popular all over the world'\n\n# Tokenize the sentence\ntokens = nltk.word_tokenize(text)\n\n# Define a training dataset\ntraining_data = [['Football is a popular team sport',label1], \n           ['Molecular Biology deals with genetics',label2]]\n\n# Extract the vocabulary from the dictionary\nword_features = set([word for (sent,cat) in training_data for word in sent.split()])\n\n# Create word dictionary\ndef feature_dictionary(tokens):\n  token_words = set(tokens)\n  features = {}\n  for word in word_features:\n    features['w_({})'.format(word)] = (word in token_words)\n  return features\n\n# Classify the input text\ninput_features = feature_dictionary(tokens)\n\nif input_features['w_(Football)']:\n  print('The sentence belongs to the sports category.')\nelif input_features['w_(Molecular)']:\n  print('The sentence belongs to the science category.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\n\nWe need two special hostnames to connect to: \n\nStationA\n\nand \n\nStationB\n\n\"\"\"\n\n\nfrom __future__ import with_statement, print_function\nfrom fabric.api import local, settings, abort, run, sudo, cd, hosts, env, execute\nfrom fabric.contrib.console import confirm\nfrom fabric.operations import put, get\nfrom fabric.contrib.project import rsync_project\n\nimport re\nimport subprocess as sp \nimport os.path \nfrom   StringIO import StringIO\n\n\ncurrent_dir = os.path.dirname(os.path.realpath(__file__))\n\n\nVNC_LICENSE = [\n    \"xxxxx-xxxxx-xxxxx-xxxxx-xxxxx\"\n]\n\n\n# TODO: Put a proper deployment mechanism here.\nenv.key_filename = '/home/alcides/.ssh/zunzun_ec2_keypair_0.pem'\n\nStationA_H = 'ubuntu@54.149.116.230'\nStationB_H = 'ubuntu@54.149.116.233'\nBeefy_H    = 'ubuntu@52.11.217.155'\n# TODO: Make the IP number below deployment-specific...\nBeefy_InternalIP = '192.168.112.131'\nStationA_InternalIP = '192.168.112.129'\nStationB_InternalIP = '192.168.112.130'\nHomeDir_Name = \"ubuntu\"\n\n\n@hosts(StationA_H)\ndef StationA():\n    \"\"\"\n    Copies code to StationA \n    \"\"\"\n    rsync_project(\n        local_dir = \"scripts/StationA\",\n        remote_dir = (\"/home/{HomeDir_Name}/\".format(HomeDir_Name=HomeDir_Name))\n        )\n    run(\"ln -sf /home/{HomeDir_Name}/StationA/onstartup.py /home/{HomeDir_Name}/onstartup.py\".format(HomeDir_Name=HomeDir_Name))\n\n\n@hosts(StationB_H)\ndef setup_dns_masq():\n    sudo(\"apt-get install -y dnsmasq\")\n    put(\n        local_path  = StringIO(\"addn-hosts=/home/{HomeDir_Name}/dnsmasq_more.conf\\n\".format(HomeDir_Name=HomeDir_Name)),\n        remote_path = \"/etc/dnsmasq.conf\",\n        use_sudo=True)\n\n\n\n@hosts(StationB_H)\ndef StationB():\n    \"\"\"\n    Copies both the chrome plugin and the DNSMasq watcher \n    \"\"\"\n    rsync_project(\n        local_dir = \"scripts/StationB\",\n        remote_dir = (\"/home/{HomeDir_Name}/\".format(HomeDir_Name=HomeDir_Name))\n        )\n    rsync_project(\n        local_dir = \"scripts/StationA/chrome_captures_hars\",\n        remote_dir = ((\"/home/{HomeDir_Name}/StationB/\".format(HomeDir_Name=HomeDir_Name)).format(HomeDir_Name=HomeDir_Name))\n        )\n    run(\"ln -sf /home/{HomeDir_Name}/StationB/onstartup.py /home/{HomeDir_Name}/onstartup.py\".format(HomeDir_Name=HomeDir_Name))\n\n\n@hosts(StationB_H)\ndef install_updatednsmasq_service():\n    with settings(warn_only=True):\n        sudo(\"service updatednsmasq stop\")\n    put(\n        local_path = \"scripts/StationB/configure_dnsmasq.py\",\n        remote_path = \"/home/{HomeDir_Name}/StationB/configure_dnsmasq.py\".format(HomeDir_Name=HomeDir_Name) ,\n        use_sudo = True\n        )\n    put(\n        local_path = StringIO(\"\"\"\ndescription \"Update dnsmasq\"\n\nstart on runlevel [2345]\nstop on runlevel [!2345]\n\numask 022\n\nconsole log\n\nenv PATH=/opt/openssl-1.0.2/bin/:/usr/bin:/usr/local/bin:/usr/sbin:/bin \nexport PATH\nenv LD_LIBRARY_PATH=/opt/openssl-1.0.2/lib\nexport LD_LIBRARY_PATH\nenv USER={HomeDir_Name}\nexport USER\n\nscript \n    exec /usr/bin/python /home/{HomeDir_Name}/StationB/configure_dnsmasq.py\nend script\n\n\"\"\".format(HomeDir_Name=HomeDir_Name)),\n        remote_path = \"/etc/init/updatednsmasq.conf\",\n        use_sudo=True )\n    sudo(\"service updatednsmasq start\")\n\n\n@hosts(Beefy_H)\ndef Beefy():\n    sudo(\"apt-get update\")\n    sudo(\"apt-get -y install libgmp-dev\")\n\n\n@hosts(Beefy_H)\ndef BeefyRehMimic():\n    with settings(warn_only=True):\n        sudo(\"service mimic stop\")\n    put(\n        local_path  = \"dist/build/reh-mimic/reh-mimic\",\n        remote_path = \"/home/{HomeDir_Name}/reh-mimic\".format(HomeDir_Name=HomeDir_Name)\n        )\n    run(\"chmod ugo+x /home/{HomeDir_Name}/reh-mimic\".format(HomeDir_Name=HomeDir_Name))\n    sudo(\"rm /home/{HomeDir_Name}/mimic -rf\".format(HomeDir_Name=HomeDir_Name) )\n    rsync_project(\n        local_dir  = \"mimic\",\n        remote_dir = \"/home/{HomeDir_Name}/\".format(HomeDir_Name=HomeDir_Name),\n        )\n    put(\n        local_path  = \"scripts/mimic.conf\",\n        remote_path = \"/etc/init/mimic.conf\",\n        use_sudo    = True\n        )\n    sudo(\"touch /root/.rnd\")\n    sudo(\"service mimic start\")\n\n\n\n@hosts(Beefy_H, StationA_H, StationB_H )\ndef configure_logging():\n    if env.host_string == StationA_H:\n        put(\n            local_path = StringIO(\"\"\"$template Logentries,\"199fb2e1-8227-4f73-9150-70a34a5d5e0c %HOSTNAME% %syslogtag%%msg%\\\\n\"\n*.* @@api.logentries.com:10000;Logentries\"\"\"),\n            remote_path = \"/etc/rsyslog.d/70-logentries.conf\",\n            use_sudo = True )\n    elif env.host_string == StationB_H:\n        put(\n            local_path = StringIO(\"\"\"$template Logentries,\"3d2fd756-407a-4764-b130-1dd6f22a1b62 %HOSTNAME% %syslogtag%%msg%\\\\n\"\n*.* @@api.logentries.com:10000;Logentries\"\"\"),\n            remote_path = \"/etc/rsyslog.d/70-logentries.conf\",\n            use_sudo = True )\n    else:\n        put(\n            local_path = StringIO(\"\"\"$template Logentries,\"7551d4e0-fa76-466f-8547-8c9a347a9363 %HOSTNAME% %syslogtag%%msg%\\\\n\"\n*.* @@api.logentries.com:10000;Logentries\"\"\"),\n            remote_path = \"/etc/rsyslog.d/70-logentries.conf\",\n            use_sudo = True )\n        \n    sudo(\"service rsyslog restart\")\n    # Check logging works...\n    sudo(\"logger -t test Hello there Logentries\")\n\n\n@hosts (StationA_H, StationB_H)\ndef deploy_specific():\n    if env.host_string == StationA_H:\n        print(\"StationA deploy\")\n        StationA()\n    elif env.host_string == StationB_H:\n        print(\"StationB deploy\")\n        StationB()\n    else: \n        print(\"Beefy station deploy\")\n        Beefy()\n\n\n@hosts(StationA_H, StationB_H)\ndef apt_stations():\n    sudo(\"apt-get update\")\n    sudo(\"apt-get install -y xutils xbase-clients xfonts-base xfonts-75dpi xfonts-100dpi\")\n    sudo(\"apt-get install -y python-pip\")\n    sudo(\"apt-get install -y xdotool\")\n    sudo(\"apt-get install -y xfwm4\") \n\n\n@hosts(StationA_H, StationB_H)\ndef pythonlibs():\n    sudo(\"pip install python-daemon>=2.0\")\n    sudo(\"pip install raven\")\n\n\n@hosts(Beefy_H, StationA_H, StationB_H)\ndef ssl():\n    \"\"\"\n    Copies Openssl and curl to the target hosts...\n    \"\"\"\n    sudo(\"mkdir -p /opt/openssl-1.0.2/\")\n    sudo((\"chown {HomeDir_Name} /opt/openssl-1.0.2/\".format(HomeDir_Name=HomeDir_Name)))\n    rsync_project(\n        local_dir = \"/opt/openssl-1.0.2\",\n        remote_dir = \"/opt/\",\n        extra_opts=\"-avz\"\n        )\n    put(\n        local_path = \"scripts/ca-certificates.crt\",\n        remote_path = \"/etc/ssl/certs/ca-certificates.crt\",\n        use_sudo = True\n        )\n\n\n@hosts(Beefy_H, StationA_H, StationB_H)\ndef ca():\n    \"\"\"\n    Copies the ca certificate to the home...\n    \"\"\"\n    put(\n        local_path = \"mimic-here/config/ca/cacert.pem\",\n        remote_path = (\"/home/{HomeDir_Name}/cacert.pem\".format(HomeDir_Name=HomeDir_Name)),\n        use_sudo = True\n        )\n\n\n@hosts(StationA_H, StationB_H)\ndef install_vnc():\n    \"\"\"\n    \n    \"\"\"\n    # run(\"curl -L -o VNC.tar.gz https://www.realvnc.com/download/binary/1720/\")\n    # run(\"tar xvf VNC-5.2.3-Linux-x64-ANY.tar.gz\")\n\n\n    put(\n        local_path = \"scripts/VNC-5.2.3-Linux-x64-ANY.tar.gz\",\n        remote_path = (\"/home/{HomeDir_Name}/VNC-5.2.3-Linux-x64-ANY.tar.gz\".format(HomeDir_Name=HomeDir_Name)),\n        use_sudo = True\n        )\n    run((\"tar -xzf /home/{HomeDir_Name}/VNC-5.2.3-Linux-x64-ANY.tar.gz\".format(HomeDir_Name=HomeDir_Name)))\n    # Get a handier name.... \n    run(\"rm -rf vnc\")\n    run((\"mv /home/{HomeDir_Name}/VNC-5.2.3-Linux-x64 /home/{HomeDir_Name}/vnc\".format(HomeDir_Name=HomeDir_Name)))\n    sudo((\"/home/{HomeDir_Name}/vnc/vnclicense -add {VncLicense}\".format(\n        HomeDir_Name= HomeDir_Name,\n        VncLicense = VNC_LICENSE[0]\n    )))\n    # Will demand some for of interactive input...\n    run((\"mkdir -p /home/{HomeDir_Name}/.vnc/\".format(HomeDir_Name=HomeDir_Name)))\n    run((\"mkdir -p /home/{HomeDir_Name}/.vnc/config.d/\".format(HomeDir_Name=HomeDir_Name)))\n    sudo((\"/home/{HomeDir_Name}/vnc/vncpasswd /home/{HomeDir_Name}/.vnc/config.d/Xvnc\".format(HomeDir_Name=HomeDir_Name)))\n    vnc_fix_permissions()\n\n@hosts(StationA_H, StationB_H)\ndef vnc_fix_permissions():\n    sudo((\"chown {HomeDir_Name} /home/{HomeDir_Name}/.vnc -R\").format(HomeDir_Name=HomeDir_Name))\n\n@hosts(StationA_H, StationB_H)\ndef install_vnc_xstartup():\n    run((\"mkdir -p /home/{HomeDir_Name}/.vnc/\".format(HomeDir_Name=HomeDir_Name)))\n    run((\"mkdir -p /home/{HomeDir_Name}/.vnc/config.d/\".format(HomeDir_Name=HomeDir_Name)))\n    put(\n        local_path = \"scripts/vnc-xstartup\",\n        remote_path = (\"/home/{HomeDir_Name}/.vnc/xstartup\".format(HomeDir_Name=HomeDir_Name))\n        )\n    run(\"chmod ugo+x /home/{HomeDir_Name}/.vnc/xstartup\".format(HomeDir_Name=HomeDir_Name))\n    put(\n        local_path = \"scripts/xvncfontpath\",\n        remote_path = (\"/home/{HomeDir_Name}/.vnc/config.d/xvncfontpath\".format(HomeDir_Name=HomeDir_Name))\n        )\n\n\n@hosts(StationA_H, StationB_H)\ndef setup_google_chrome():\n    put(\n        local_path = \"scripts/google-chrome-stable_current_amd64.deb\",\n        remote_path = (\"/home/{HomeDir_Name}/google-chrome-stable_current_amd64.deb\".format(HomeDir_Name=HomeDir_Name)),\n        use_sudo = True\n        )\n    really_setup_google_chrome()\n\n\n@hosts(Beefy_H, StationA_H, StationB_H)\ndef ensure_local_hosts():\n    # Get the contents of /etc/hosts\n    local_file = StringIO()\n    get(\n        local_path = local_file,\n        remote_path = \"/etc/hosts\",\n        use_sudo = True \n        )\n    hosts_file = local_file.getvalue()\n    snippet =  \"\"\"# DO NOT EDIT BELOW BY HAND\n{Beefy_InternalIP} instr.httpdos.com\n192.168.112.129 ip-192-168-112-129\n192.168.112.130 ip-192-168-112-130\n192.168.112.131 ip-192-168-112-131\n# END DO NOT EDIT BELOW\"\"\".format(\n    StationA_InternalIP = StationA_InternalIP,\n    Beefy_InternalIP    = Beefy_InternalIP\n    )\n    mo = re.search(r\"# DO NOT EDIT BELOW BY HAND\\n(.*?)\\n# END DO NOT EDIT BELOW\", hosts_file, re.MULTILINE)\n    if mo:\n        part_before = hosts_file[:mo.start(0)]\n        part_after = hosts_file[mo.end(0):]\n        hosts_file = part_before + snippet + part_after\n    else:\n        hosts_file += \"\\n\" + snippet\n\n    put(\n        local_path = StringIO(hosts_file),\n        remote_path = \"/etc/hosts\",\n        use_sudo = True\n        )\n\n\n@hosts(StationA_H, StationB_H)\ndef really_setup_google_chrome():\n    sudo(\"apt-get update\")\n    sudo((\"apt-get -f install -y\".format(HomeDir_Name=HomeDir_Name)))\n    sudo(\"apt-get install -y --fix-missing xdg-utils\")\n    sudo((\"dpkg -i --force-depends /home/{HomeDir_Name}/google-chrome-stable_current_amd64.deb\".format(HomeDir_Name=HomeDir_Name)))\n    sudo((\"apt-get -f install -y\".format(HomeDir_Name=HomeDir_Name)))\n\n\n@hosts(StationA_H, StationB_H)\ndef setup_vnc_service():\n    put(\n        local_path = \"scripts/vncserv-{HomeDir_Name}.conf\".format(HomeDir_Name=HomeDir_Name),\n        remote_path = \"/etc/init/vncserv.conf\",\n        use_sudo = True\n        )\n    put(\n        local_path = \"scripts/undaemon.py\",\n        remote_path = \"/home/{HomeDir_Name}/undaemon.py\".format(HomeDir_Name=HomeDir_Name)\n        )\n    run(\"chmod ugo+x /home/{HomeDir_Name}/undaemon.py\".format(HomeDir_Name=HomeDir_Name))\n    with settings(warn_only=True):\n        sudo(\n            \"service vncserv start\"\n            )\n\n\n@hosts(StationA_H, StationB_H)\ndef  disable_lightdm():\n    contents = StringIO(\"manual\")\n    put(\n        local_path = contents, \n        remote_path = \"/etc/init/lightdm.override\",\n        use_sudo=True\n        )\n\n\n@hosts(StationA_H, StationB_H)\ndef touch_xauthority():\n    run(\"touch $HOME/.Xauthority\")\n\n\n@hosts(StationA_H, StationB_H)\ndef deploy():\n    execute(apt_stations)\n    execute(setup_dns_masq)\n    execute(setup_google_chrome)\n    execute(deploy_specific)\n    execute(touch_xauthority)\n    execute(disable_lightdm)\n    execute(StationA)\n    execute(StationB)\n    execute(Beefy)\n    execute(ca)\n    execute(ssl)\n    execute(install_vnc)\n    execute(install_vnc_xstartup)\n    execute(ensure_local_hosts)\n    execute(setup_vnc_service)\n    execute(pythonlibs)\n    execute(BeefyRehMimic)\n    execute(install_updatednsmasq_service)    \n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\ndef train_model(X_train, y_train):\n    vectorizer = CountVectorizer()\n    vectorizer.fit(X_train)\n    X_train_vectorized = vectorizer.transform(X_train)\n    nb_model = GaussianNB()\n    nb_model.fit(X_train_vectorized.toarray(), y_train)\n    return nb_model, vectorizer\n\ndef predict(X_test, nb_model, vectorizer):\n    X_test_vectorized = vectorizer.transform(X_test)\n    predictions = nb_model.predict(X_test_vectorized.toarray())\n    return predictions but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Get the data\ndata = pd.read_csv('data.csv')\n\n# Create the features and target arrays\nX = data.drop(columns=['has_cancer'])\ny = data['has_cancer']\n\n# Split into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33)\n\n# Train the model\nmodel = RandomForestClassifier(n_estimators=100)\nmodel.fit(X_train, y_train)\n\n# Make predictions\nprediction = model.predict([[25, 'male', 25, 0]])\n\nif prediction[0] == 1:\n    print('The patient has cancer.')\nelse:\n    print('The patient does not have cancer.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_tuples_by_second(tuples):\n tuple_order = sorted(tuples, key=lambda x: x[1])\n return tuple_order but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import uuid\n\ndef generate_uuid():\n    return str(uuid.uuid4()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a class to generate an invoice from a given order in Python. \n\"\"\"\n\nclass Invoice:\n    def __init__(self, order):\n        self.order = order\n    \n    def generate_invoice(self):\n        invoice = dict()\n        order_item_amounts = [order.price * order.quantity for order in self.order]\n        invoice['subtotal'] = sum(order_item_amounts)\n        invoice['tax_rate'] = 0.15\n        invoice['tax_amount'] = invoice['subtotal'] * invoice['tax_rate']\n        invoice['total_amount'] = invoice['subtotal'] + invoice['tax_amount']\n    \n        return invoice\n    \n    def print_invoice(self):\n        invoice = self.generate_invoice()\n        print('subtotal: {}\\ntax rate: {}\\ntax amount:{}\\ntotal amount: {}'.format(\n            invoice['subtotal'], \n            invoice['tax_rate'], \n            invoice['tax_amount'], \n            invoice['total_amount']\n            )) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def assignGrades(scores):\n    grades = []\n    for score in scores:\n        if score >= 90:\n            grades.append(\"A\")\n        elif score >= 80:\n            grades.append(\"B\")\n        elif score >= 70:\n            grades.append(\"C\")\n        elif score >= 65:\n            grades.append(\"D\")\n        else:\n            grades.append(\"F\")\n            \n    return grades but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generateTriplets(arr):\n  result = []\n\n  for i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n      for k in range(j + 1, len(arr)):\n        if (arr[i] + arr[j] + arr[k] == 0):\n          result.append([arr[i], arr[j], arr[k]])\n\n  return result\n\narr = [-3, 4, 6, 0, -2]\nprint(generateTriplets(arr))\n\n# Output: [[-3, 0, 3], [-2, 0, 2]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def increasingPattern(arr):\n\tstatus = False\n\tcheck = arr[0]\n\tfor i in range(1,len(arr)): \n\t\tif check < arr[i]:\n\t\t\tcheck = arr[i]\n\t\t\tstatus = True\n\t\telse:\n\t\t\tstatus = False\n\t\t\tbreak\n\treturn status\n\n\n# Test case\narr = [2, 3, 4, 5, 6, 7, 8, 1]\nprint(increasingPattern(arr))  # Output: False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [3, 5, 10, 15]\ninteger = 17\n\ntotal = 0\n\nfor i in list:\n for j in list:\n total = i + j\n if total == integer:\n print(\"Two numbers that add up to\", integer, \"are\", i, \"and\", j)\n break but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\n# Define the data\nx_vals = np.array([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\ny_vals = np.array([1.0, 2.9, 3.2, 4.2, 5.3, 6.3])\n\n# Estimate the linear regression weights\nA = np.array([x_vals, np.ones(len(x_vals))])\nweights = np.linalg.lstsq(A.T, y_vals)[0] # obtaining the weights\n\n# Calculate the best fit line\nbest_fit_line = np.dot(x_vals, weights[0]) + weights[1]\n\n# Calculate the squared error\nsquared_error = np.sum((y_vals - best_fit_line)**2)\nprint(squared_error) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a Spell Checker\n\"\"\"\n\nimport enchant\n\ndef check_spelling(text):\n    # Create a spell checker\n    spell_checker = enchant.Dict(\"en_US\")\n\n    # Split the text into words\n    words = text.split()\n\n    # Check the spelling of each word\n    for i, word in enumerate(words):\n        if not spell_checker.check(word):\n            # Word is misspelled, suggest a correction\n            words[i] = spell_checker.suggest(word)[0]\n    \n    # Join the words back together\n    corrected_text = ' '.join(words)\n\n    return corrected_text\n\nif __name__ == '__main__':\n    text = 'Ths is a languige exersice'\n    corrected_text = check_spelling(text)\n    print(corrected_text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nDesign a Python class with methods to compute the square and cube of a \ngiven number.\n\"\"\"\n\nclass MathOperations:\n\n    # constructor\n    def __init__(self, number):\n        self.number = number\n\n    # method to compute the square\n    def square(self):\n        return self.number * self.number\n\n    # method to compute the cube\n    def cube(self):\n        return self.number * self.number * self.number\n\n# create an object of the MathOperations class\nobj = MathOperations(2)\n\n# calling methods\nprint(\"Square of 2 is:\", obj.square())\nprint(\"Cube of 2 is:\", obj.cube()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPermutation(x, y): \n    # Count the number of elements in each of X and Y\n    x_len = len(x)\n    y_len = len(y)\n\n    # Compare the lengths\n    if x_len != y_len:\n        return False\n    \n    # Vectorize the comparison\n    comparison = (x == y)\n    if not comparison.all():\n        return False\n\n    # Vectorize the sorting\n    x.sort()\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\nmovie_name = ['Jareth and Sarah', 'Garreth and Martha', 'Pam and Joe']\ndistance = [77.4, 4.3, 22.6]\n\nplt.bar(movie_name, distance)\nplt.xlabel('Movie Name')\nplt.ylabel('Distance (miles)')\nplt.title('Movie Name vs Distance')\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a random string of length 8 consisting of alphabets and numbers\n\"\"\"\n\nimport random\nimport string\n\ndef random_string_generator():\n    \"\"\"\n    This function generates a random string of length 8 consisting\n    of alphabets and numbers\n    \"\"\"\n    list_of_characters = string.ascii_letters + string.digits\n    rnd_string = ''.join(random.choice(list_of_characters) for _ in range(8))\n    return rnd_string\n\nif __name__ == '__main__':\n    print(random_string_generator()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport matplotlib.pyplot as plt \n\ndef mandelbrot(width, height):\n    # Super sample size (larger number of iterations for high-quality image)\n    ssample = 4\n    # Width and height of the image\n    width *= ssample\n    height *= ssample\n    # Maximum iterations for each point on the complex plane.\n    max_iteration = 100\n\n    # Initialize an empty array for storing the iteration count.\n    cmap = np.zeros([height, width])\n    x0, x1 = -2., 1.\n    y0, y1 = -1.5, 1.5\n\n    # Loop over a grid of points on the complex plane.\n    for y in range(height):\n        zy = y * (y1 - y0) / (height - 1) + y0\n        for x in range(width):\n            zx = x * (x1 - x0) / (width - 1) + x0\n            z = zx + zy * 1j\n            c = z\n\n            # Iterate until the iteration count exceeds the maximum.\n            for n in range(max_iteration):\n            \t# Calculate the next value in the sequence\n                z = z * z + c\n                # Check if the absolute value of 'z' has exceeded 2\n                if abs(z) > 4:\n                    break\n            # Set the iteration count (cmap) for the current point.\n            cmap[y, x] = n\n\n    cmap = cmap / (np.max(cmap) / 255.) # Rescale for better visibility\n    cmap = cmap[::ssample, ::ssample] # Resize\n    plt.imsave('mandelbrot.png', cmap, cmap='nipy_spectral')\n\nmandelbrot(800, 600) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def alphabet_order(sentence):\n    output = \"\"\n    for character in sentence:\n        if character.isalpha():\n            ascii_value = ord(character)\n            ascii_value += 1\n            output += chr(ascii_value)\n        else:\n            output += character\n    return output\n\n#Main\nprint(alphabet_order(\"Hello, World!\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_grade_level(grades):\n  average = sum(grades) / len(grades)\n  if average >= 90:\n    grade_level = 'A'\n  elif average >= 80:\n    grade_level = 'B'\n  elif average >= 70:\n    grade_level = 'C'\n  elif average >= 60:\n    grade_level = 'D'\n  else:\n    grade_level = 'F'\n\n  return grade_level but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The code is obfuscated but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: lastTwoElements = [1, 2, 3, 4, 5][-2:]\n\nprint(lastTwoElements)\n#Output: [4, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ContactList:\n def __init__(self):\n self.contacts = []\n \n def add_contact(self, contact):\n self.contacts.append(contact)\n \n def update_contact(self, contact_id, contact):\n for i, c in enumerate(self.contacts):\n if c.id == contact_id:\n self.contacts[i] = contact\n \n def delete_contact(self, contact_id):\n for i, c in enumerate(self.contacts):\n if c.id == contact_id:\n del self.contacts[i]\n break\n \n def search_contact(self, name):\n result = []\n for c in self.contacts:\n if c.name == name:\n result.append(c)\n return result\n\nclass Contact:\n def __init__(self, id, name, phone_number):\n self.id = id\n self.name = name\n self.phone_number = phone_number\n \n contact_list = ContactList()\n \n #add contact\n contact_list.add_contact(Contact(1, \"John Smith\", \"+1-202-555-0175\"))\n \n #update contact\n contact_list.update_contact(1, Contact(1, \"John Doe\", \"+1-202-555-0175\"))\n \n #delete contact\n contact_list.delete_contact(1)\n \n #search contact\n result = contact_list.search_contact(\"John Doe\")\n if result:\n print(result[0].phone_number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        swapped = False\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                swapped = True\n        if swapped == False:\n            break\n    return arr\n\narr = [5, 7, 1, 9, 3]\narr = bubble_sort(arr)\nprint (\"Sorted array :\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]), but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_words(input_string):\n  words_count = {}\n  words = input_string.split()\n  for word in words:\n    if word in words_count:\n      words_count[word] += 1\n    else:\n      words_count[word] = 1\n  return words_count\n\nwords_count = count_words(input_string)\nprint(words_count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\n\ndef knn(features, target, neighbors):\n    target = np.array(target)\n    num_samples = target.shape[0]\n\n    # Calculate Euclidean distances from each sample point\n    distances = np.sqrt(((features - features[:,np.newaxis])**2).sum(axis=2))\n\n    # Get indices of the k nearest neighbors\n    indices = np.argsort(distances, axis=1)[:, :neighbors]\n\n    # Count frequencies of each class among k nearest neighbors\n    nbors_classes = target[indices]\n    nbors_freq = np.apply_along_axis(lambda x: np.bincount(x, minlength=2), 1, nbors_classes)\n\n    # Make predictions\n    pred = np.argmax(nbors_freq, axis=1)\n    return pred but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = [\"hello\",\"world\",\"hello\",\"python\",\"hello\"] \n\n# counting frequency of each word in a list \nwordFrequencyDict = {}\nfor word in words: \n    if (word in wordFrequencyDict): \n        wordFrequencyDict[word] += 1\n    else: \n        wordFrequencyDict[word] = 1\n\nprint(wordFrequencyDict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_median(input_list): \n   \n    # Sort the list\n    sorted_list = sorted(input_list)\n    length = len(sorted_list)\n  \n    # Check if number of elements are even \n    if (length % 2 == 0) :  \n        # If true, get the 2 middle elements \n        first = length//2 -1\n        second = length//2\n  \n        # Get the median value\n        median = (sorted_list[first] + sorted_list[second]) / 2\n    else : \n        # If odd, get the middle element \n        median = sorted_list[length//2]\n\n    return median\n\n# Call the function\ninput_list = [3, 5, 2, 8, 6, 5]\nprint(calculate_median(input_list))\n\n# Output: 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_password():\n    password = ''\n    characters = string.ascii_letters + string.digits + string.punctuation\n    for i in range(10):\n        password += random.choice(characters)\n    if not any(c.islower() for c in password):\n        password = generate_password()\n    if not any(c.isupper() for c in password):\n        password = generate_password()\n    if not any(c.isdigit() for c in password):\n        password = generate_password()\n    return password\n\nprint(generate_password()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# set the target URL\nurl = \"https://www.example.com\"\n\n# get the HTML from the page\npage = requests.get(url).text\n\n# parse the html\nsoup = BeautifulSoup(page, \"html.parser\")\n\n# find the comment elements\ncomments = soup.find_all(\"div\", {\"class\": \"comment\"})\n\n# loop the comments\nfor comment in comments:\n  text = comment.find(\"p\").text\n  user = comment.find(\"span\", {\"class\": \"name\"}).text\n  print(user + \": \" + text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num1 = float(input(\"Enter your first number: \"))\nnum2 = float(input(\"Enter your second number: \"))\nop = input(\"Enter the operator : \")\n\nif op == \"+\":\n  result = num1 + num2\nelif op == \"-\":\n  result = num1 - num2\nelif op == \"*\":\n  result = num1 * num2\nelif op == \"/\":\n  result = num1 / num2\n\nprint(\"The result is : \", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Farenheit_to_Celsius(temperature):\n  celsius = (temperature - 32) * 5/9\n  return celsius\n\ntemp_F = 94\ntemp_C = Farenheit_to_Celsius(temp_F)\n\nprint('{}\u00b0F is equal to {}\u00b0C'.format(temp_F, temp_C)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Square:\n def __init__(self, side):\n self.side = side\n\n def calculate_area(self):\n return self.side * self.side\n\n def calculate_perimeter(self):\n return self.side * 4 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countWords(sentence): \n \n    # split the sentence into words \n    words = sentence.split() \n    wordCount = len(words) \n   \n    return wordCount \n  \n# Driver code \nsentence = \"This is a sentence with seven words.\"\nwordCount = countWords(sentence) \nprint(\"Number of words in the sentence =\", wordCount) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linearSearch(array, element): \n    for i in range(len(array)): \n        if array[i]==element: \n            return i\n    return -1\n\nlinearSearch([1, 2, 3, 4, 5], 4) # returns 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maximum_subarray(arr): \n max_so_far = 0\n max_ending_here = 0\n\n for i in arr: \n max_ending_here = max_ending_here + i \n if max_ending_here % 0: \n max_ending_here = 0\n elif max_so_far < max_ending_here: \n max_so_far = max_ending_here \n return max_so_far\n\nmaximum_subarray(array)  # Returns 7 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge(list1, list2): \n    merged_list = [] \n    i = 0\n    j = 0\n  \n    while i < len(list1) and j < len(list2): \n        if list1[i] < list2[j]: \n            merged_list.append(list1[i]) \n            i+= 1\n        else: \n            merged_list.append(list2[j]) \n            j+= 1\n   \n    merged_list += list1[i:]\n    merged_list += list2[j:]\n  \n    return merged_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: try:\n    for n in file_name[:20]:\n        print(n)\nexcept Exception as e:\n    print(e) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_array(array): \n    for i in range(len(array)): \n        for j in range(i+1, len(array)): \n            if array[j] < array[i]: \n                array[j], array[i] = array[i], array[j] \n  \n    return array but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Circle:\n    def __init__(self, radius):\n        self.radius = radius \n \n    def area(self):\n        return 3.14 * self.radius * self.radius\n \n    def circumference(self):\n        return 2 * 3.14 * self.radius\n \n# Driver code \nc = Circle(2)\nprint('Area = ', c.area())\nprint('Circumference = ', c.circumference()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: function_name = lambda x: x * 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def palindrome_checker(strings):\n    is_palindrome = True\n    for string in strings:\n        if string  != string[::-1]:\n            is_palindrome = False\n            break\n    return is_palindrome\n\nstrings = ['abba', 'bob', 'acca']\n\nprint(palindrome_checker(strings)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def series_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n\nprint(series_sum(5)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.cluster import KMeans\n\n# Load data\ndata = pd.read_csv('data.csv')\n\n# Train the model\nmodel = KMeans(n_clusters=6).fit(data)\n\n# Predict the clusters\nclusters = model.predict(data)\n\n# Visualize the clusters\nplt.scatter(data[:,0], data[:,1], c=clusters)\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def hex_to_binary(h): \n    return bin(int(h, 16)) \n  \nprint(hex_to_binary('0x56')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Deck:\ndef __init__(self, suits, ranks):\n self.suits = suits\n self.ranks = ranks\n self.cards = [(suit, rank) for suit in self.suits for rank in self.ranks]\n \ndef draw_card(self):\n return self.cards.pop()\n \ndef shuffle_deck(self):\n random.shuffle(self.cards) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\nX = np.array([[1, 0], [0, 1]])\ny = np.array([1, 0])\n\nfrom sklearn.linear_model import LinearRegression \n\nmodel = LinearRegression().fit(X, y) \n  \npredictions = model.predict(X) \n  \nprint(\"Sentiment:\", predictions) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\n\nclass DateChecker:\n\n    def __init__(self,date1,date2):\n        self.date1 = date1\n        self.date2 = date2\n\n    def check_dates(self):\n        if self.date1 < self.date2:\n            return \"date1 is before date2\"\n        elif self.date1 == self.date2:\n            return \"date1 is equal to date2\"\n        else:\n            return \"date1 is after date2\"\n\nif __name__  ==  \"__main__\":\n    date1 = datetime.datetime(2020, 8, 3)\n    date2 = datetime.datetime(2020, 8, 10)\n\n    date_checker = DateChecker(date1, date2)\n    result  =  date_checker.check_dates()\n    print(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nperson = Person('John', 34) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compound_interest(principal, rate, time):\n    return principal * (1 + rate/100)**time but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def scrape_website(url):\n    page= requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n    for link in soup.find_all('a'):\n        link_url= link.get('href')\n        if link_url.startswith('/'): \n            link_url= url + link_url # form absolute url\n        if '#' not in link_url and link_url.startswith(url): # check for navigation and fragment\n            page_to_get = requests.get(link_url)\n            soup = BeautifulSoup(page_to_get.content, 'html.parser')\n            # do something with the data but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n): \n    if n == 0 or n == 1: \n        return 1\n    else: \n       return n * factorial(n - 1)\n\nresult = factorial(7)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class QuadraticEquation:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n     \n    def getDiscriminant(self):\n        return (self.b**2) - 4*self.a*self.c\n     \n    def getRoot1(self):\n        if self.getDiscriminant() >= 0:\n            return ((-self.b + (self.getDiscriminant() ** 0.5))/(2*self.a))\n        else:\n            return 0\n     \n    def getRoot2(self):\n        if self.getDiscriminant() >= 0:\n            return ((-self.b - (self.getDiscriminant() ** 0.5))/(2*self.a))\n        else:\n            return 0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(arr): \n  \n  max_value = arr[0] \n  \n  for i in range(1, len(arr)): \n      if arr[i]> max_value: \n          max_value = arr[i] \n          \n  return max_value \n  \n#Test Array \narr = [8, 15, 7, 6, 16] \n\n#Function call \nmaxvalue = find_max(arr) \n\nprint(\"Maximum value:\",maxvalue) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\n\nname = sys.argv[1]\nprint(\"Hello {}\".format(name)) # Output: Hello John but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_shortest_word(words):\n    shortest_length = float('inf')\n    for word in words:\n        if len(word) < shortest_length:\n            shortest_word = word\n            shortest_length = len(word)\n\n    return shortest_word but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The code could improve by using the built-in sum() from the Python library. Also, you should use a more meaningful variable name instead of list_num to better explain the intent of the code. Lastly, you could use type hinting to specify the type of variables passed into the function. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n if n == 0:\n  return 0\n elif n == 1:\n  return 1\n else:\n  return fibonacci(n-1) + fibonacci(n-2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n\n# function to scrape a page for information\ndef scrape_page(url): \n    page = requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n    info = soup.find_all('div', class_='info') \n    for item in info:\n        headline = item.find('span', class_='headline') \n        print(headline.text) \n\n# main function to scrape multiple pages\ndef main(): \n    urls = [\n        'http://example.com/page1',\n        'http://example.com/page2',\n        'http://example.com/page3'\n        ] \n    for url in urls:\n        scrape_page(url)\n\n# call the main function \nif __name__ == '__main__': \n    main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_even(num):\n if num % 2 == 0:\n return True\n else:\n return False\n\nnumber = int(input(\"Enter a number: \"))\n\nif is_even(number):\n print(\"The number is even\")\nelse:\n print(\"The number is odd\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(string):\n    # convert the string to lowercase\n    str = string.lower()\n    # reverse the string\n    revStr = str[::-1]\n    # check for the condition\n    if str == revStr:\n        return True\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to print the pyramid pattern\ndef print_pyramid(n):\n    k = 2*n - 2\n \n    # outer loop to print rows\n    for i in range(0, n):\n      \n        # inner loop to print columns\n        for j in range(0, k):\n            print(end=\" \")\n      \n        # decrementing k after each loop\n        k = k - 1\n     \n        # inner loop to print foo pattern\n        for j in range(0, i+1):       \n            print(\"* \", end=\"\")\n        print(\"\\r\")\n\n# Driver Code\nn = 5\nprint_pyramid(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = str.split(\" \") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseString(s): \n    return s[::-1] \n  \nstring = \"hello world\"\n\nprint(\"Original String:\", string) \nprint(\"Reversed String:\", reverseString(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add(x, y):\n    return x + y\n\nsum = add(10, 20)\nprint(sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(arr):\n    # Traverse through all array elements \n    for i in range(len(arr)): \n        # Last i elements are already in place \n        for j in range(0, len(arr)-i-1): \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n    return arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # This program will ask the user to input three numbers and calculate the average\ndef main():\n    # Collect the input\n    num1 = float(input(\"Please enter a number: \"))\n    num2 = float(input(\"Please enter another number: \"))\n    num3 = float(input(\"Please enter a third number: \"))\n\n    # Calculate the average\n    average = (num1 + num2 + num3) / 3\n\n    # Print the result\n    print(\"Average of the three numbers is: \", average)\n\nmain() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nGenerate a visual ASCII art in Python\n\"\"\"\n\ndef generate_ascii(drawing): \n    height = len(drawing) + 2\n    width = len(drawing[0]) + 2\n\n    def get_ascii_cell(cell):\n        # Define the character in the ASCII art\n        if cell == '*':\n            return '*'\n        if cell == ' ':\n            return ' '\n        if cell == '.':\n            return '.'\n\n    # Render the picture as ASCII\n    result = ''\n    for row in range(height):\n        for col in range(width):\n            if row == 0 or row == height - 1 or col == 0 or col == width - 1:\n                result += '*'\n            else:\n                result += get_ascii_cell(drawing[row-1][col-1])\n        result += '\\n'\n    return result\n\nif __name__ == '__main__':\n    drawing = [['*', ' ', '*'],\n               [' ', '*', ' '],\n               ['*', ' ', '*']]\n    print(generate_ascii(drawing)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insertSort(sortedArray, x): \n    n = len(sortedArray) \n    sortedArray.append(x) \n    for i in range(n-1, -1, -1): \n        if sortedArray[i] > x: \n            sortedArray[i + 1] = sortedArray[i] \n            sortedArray[i] = x \n    return sortedArray\n\nprint(insertSort(sortedArray, x)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class StringList:\n    def __init__(self, string):\n        self.stringlist = [string]\n    \n    def printString(self):\n        for s in self.stringlist:\n            print(s + ' was stored')\n\nmylist = StringList('Hello World')\nmylist.printString() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def collect_contact_information(numbers):\n    \n    results = []\n    \n    for number in numbers:\n        contact_info = {}\n        contact_info[\"number\"] = number\n        \n        # collect rest of contact info from number\n        # e.g. enter into database and look up address, etc.\n        \n        results.append(contact_info)\n        \n    return results but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class TableData:\n    def __init__(self, data):\n        self.data = data\n        self.column_names = list(data[0].keys())\n        self.row_count = len(data)\n\n    def get_rows(self):\n        rows = []\n        for row in self.data:\n            rows.append(list(row.values()))\n\n        return rows\n\n    def get_columns(self):\n        columns = []\n        for name in self.column_names:\n            column = []\n            for row in self.data:\n                column.append(row[name])\n            \n            columns.append(column)\n\n        return columns\n\n    def get_column_names(self):\n        return self.column_names\n\n    def get_row_count(self):\n        return self.row_count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nSuggest new lines of code to optimize a given Python algorithm\n\"\"\"\n\ndef factorial(n):\n  # Use memoization to enable faster execution\n  memo = {}\n\n  def memo_factorial(n):\n    if n == 1:\n      return 1\n    try:\n      return memo[n]\n    except KeyError:\n      memo[n] = n * memo_factorial(n-1)\n      return memo[n]\n  \n  return memo_factorial(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def threeSum(nums): \n # Find all unique triplets of number in an array that sums up to 0 \n \n res = [] \n nums.sort() \n for i in range(len(nums) - 2): \n # avoid duplicate triplets \n if i > 0 and nums[i] == nums[i - 1]: \n continue\n # two pointer \n l = i + 1 \n r = len(nums) - 1\n while l < r: \n s = nums[i] + nums[l] + nums[r] \n if s > 0: \n r -= 1 \n elif s < 0: \n l += 1 \n else: \n res.append((nums[i], nums[l], nums[r])) \n l += 1 \n r -= 1 \n # handle duplicate\n while l < r and nums[l] == nums[l + 1]: \n l += 1 \n while l < r and nums[r] == nums[r - 1]: \n r -= 1 \n return res\n\narray = [-1, 0, 1, 2, -1, -4]\n\nprint(threeSum(array))\n\n# Output: [(-1, 0, 1), (-1, -1, 2)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\ndef find_most_frequent(lst): \n    counter = Counter(lst) \n    topthree = counter.most_common(3)\n    return topthree\n\nfind_most_frequent([3, 7, 5, 6, 2, 1, 5, 6, 3, 9]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def long_function(lst):\n    counter = 0\n    for i in lst:\n        counter += i\n    return counter but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Calculate the Slope of the line\ndef findSlope(x1, y1, x2, y2):\n    m = (y2-y1)/(x2-x1)\n    return m\n\nx1 = 5\ny1 = 9\nx2 = 15\ny2 = 40\n\nresult = findSlope(x1, y1, x2, y2)\nprint(\"The slope of the line is\", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_dicts(dict1, dict2):\n  # Iterate through keys in both dictionaries and compare values\n  for key, value in dict1.items():\n    if key not in dict2 or dict2[key] != value:\n      return False\n \n  # If all elements matched\n  return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(sent1, sent2):\n    sent1 = sent1.replace(\" \", \"\").lower()\n    sent2 = sent2.replace(\" \", \"\").lower()\n\n    if len(sent1) != len(sent2):\n        return False\n\n    counter = {}\n\n    for letter in sent1:\n        if letter in counter:\n            counter[letter] += 1\n        else:\n            counter[letter] = 1\n\n    for letter in sent2:\n        if letter in counter:\n            counter[letter] -= 1\n        else:\n            counter[letter] = 1\n\n    for k in counter:\n        if counter[k] != 0:\n            return False\n\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create the project\ndjango-admin startproject blog\n\n# Create the application\ncd blog\npython manage.py startapp posts\n\n# Add the application to the project\n# Edit the settings.py file\nINSTALLED_APPS = [\n 'posts',\n # ...\n]\n\n# Create the database\npython manage.py makemigrations\npython manage.py migrate\n\n# Create the models\n# Edit the models.py file\nfrom django.db import models\nclass Post(models.Model):\n title = models.CharField(max_length=200)\n body = models.TextField()\n\n# Create the Admin page\npython manage.py createsuperuser\n# Follow the prompts to create the superuser\n\n# Create the URLs\n# Edit the urls.py file\nfrom django.urls import path\nfrom django.contrib import admin\nfrom posts.views import HomePageView, CreatePost\n\nurlpatterns = [\n path('admin/', admin.site.urls),\n path('', HomePageView.as_view(), name=\"home\"),\n path('post/new/', CreatePost.as_view(), name=\"create_post\")\n]\n\n# Create Views\n# Edit the views.py file\nfrom django.views.generic.base import TemplateView\nfrom django.views.generic.edit import CreateView\nfrom posts.models import Post\n\nclass HomePageView(TemplateView):\n template_name = \"index.html\"\n\nclass CreatePost(CreateView):\n model = Post\n fields = ['title', 'body']\n template_name = \"create_post.html\"\n \n success_url = '/'\n\n# Create Templates\n# Create the templates directory\n# Create the index.html file\n<html>\n <head>\n <title>Blog</title>\n </head>\n <body>\n {% for post in posts %}\n <h1>{{ post.title }}</h1>\n <p>{{ post.body }}</p>\n {% endfor %}\n <a href=\"/post/new/\">Create a new post</a>\n </body>\n</html>\n\n# Create the create_post.html file\n<html>\n <head>\n <title>Create Post</title>\n </head>\n <body>\n <h1>Create a New Post</h1>\n <form method=\"post\">\n {% csrf-token %}\n {{ form.as_p }}\n <button type=submit>Create Post</button>\n </form>\n </body>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def solve(bo):\n    find = find_empty(bo)\n    if not find:\n        return True\n    else:\n        row, col = find\n\n    for i in range(1,10):\n        if valid(bo, i, (row, col)):\n            bo[row][col] = i\n\n            if solve(bo):\n                return True\n\n            bo[row][col] = 0\n\n    return False\n\n\ndef valid(bo, num, pos):\n    # Check row\n    for i in range(len(bo[0])):\n        if bo[pos[0]][i] == num and pos[1] != i:\n            return False\n\n    # Check column\n    for i in range(len(bo)):\n        if bo[i][pos[1]] == num and pos[0] != i:\n            return False\n\n    # Check box\n    box_x = pos[1] // 3\n    box_y = pos[0] // 3\n\n    for i in range(box_y*3, box_y*3 + 3):\n        for j in range(box_x * 3, box_x*3 + 3):\n            if bo[i][j] == num and (i,j) != pos:\n                return False\n\nreturn True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def simple_calculator():\n    num1 = float(input(\"Enter the first number: \")) \n    num2 = float(input(\"Enter the second number: \"))  \n    oper = input(\"Enter your operation (+, -, *, /): \")  \n      \n    if oper == \"+\":\n        print(\"Result:\", num1 + num2)  \n    elif oper == \"-\":\n        print(\"Result:\", num1 - num2)  \n    elif oper == \"*\":\n        print(\"Result:\", num1 * num2)  \n    elif oper == \"/\":\n        print(\"Result:\", num1 / num2)  \n    else:\n        print(\"Invalid operation\")\n\nsimple_calculator() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def solution(pointA, pointB):\n    graph = [[0, 10, 15, 20],\n             [5, 0, 9, 10],\n             [6, 13, 0, 12],\n             [8, 8, 9, 0]]\n    start = pointA\n    end = pointB\n \n    # Shortest Path\n    infinity = float(\"inf\")\n    distances = [infinity] * len(graph)\n    previous = [None] * len(graph)\n    visited = [False] * len(graph)\n    distances[start] = 0\n    for i in range(len(graph)):\n        minimum = infinity + 1\n        for j in range(len(graph)):\n            if visited[j] is False and distances[j] < minimum:\n                minimum = distances[j]\n                index = j\n        visited[index] = True\n        # If a shorter path is found\n        for j in range(len(graph)):\n            if graph[index][j] > 0 and visited[j] is False:\n                if distances[index] + graph[index][j] < distances[j]:\n                    distances[j] = distances[index] + graph[index][j]\n                    previous[j] = index\n    path = []\n    k = end\n    while k is not None:\n        path.append(k)\n        k = previous[k]\n    path = path[::-1] # reverse the path\n    return path but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_lexicographically(arr):\n    n = len(arr) \n    for i in range(n):\n        min_index = i\n        for j in range(i + 1, n):\n            if arr[min_index] > arr[j]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr\n \nprint(sort_lexicographically(arr)) # Output: ['C', 'C++', 'Java', 'JavaScript', 'Python'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: total_row_sum = [sum(row) for row in [[1, 2, 3], [4, 5, 6], [7, 8, 9]]]\n\nprint(total_row_sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(string):\n  reversed_string = \"\"\n  \n  for char in string:\n    reversed_string = char + reversed_string\n  \n  return reversed_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nThis program will use Python to determine the prime factorization for a given number.\n\"\"\"\ndef prime_factorization(n): \n    # Initialize the prime factor list\n    prime_factors = [] \n  \n    # Find the smallest prime factor of the number\n    while n % 2 == 0: \n        prime_factors.append(2) \n        n //= 2\n          \n    # Check the odd numbers to find the prime factors \n    for i in range(3, int(n**0.5)+1, 2): \n        while n % i == 0: \n            prime_factors.append(i) \n            n //= i\n  \n    # If the number is greater than 2, it is a prime factor \n    if n > 2: \n        prime_factors.append(n)\n  \n    return prime_factors but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class SumArray:\n    def __init__(self, numbers):\n        self.numbers = numbers\n    \n    def get_sum(self):\n        sum = 0 \n        for number in self.numbers:\n            sum += number\n        return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\nemails = ['user@example.com', 'user@invalid']\n\ndef validate_email(email): \n regex = r\"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)\"\n if (re.search(regex, email)): \n return 1\n else: \n return 0\n\nfor email in emails: \n is_valid = validate_email(email)\n if is_valid: \n print(email, 'is valid')\n else: \n print(email, 'is invalid') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# URL of the S&P 500 Website\nurl = 'https://en.wikipedia.org/wiki/List_of_S%26P_500_companies'\n\n# Send GET request \nresp = requests.get(url)\n\n# Parse response as HTML\nsoup = BeautifulSoup(resp.text, 'html.parser')\n\n# Find the table containing data\ntable = soup.find('table', {'class': 'wikitable sortable'})\n\n# Extract the companies from the table\ncompanies = []\nfor row in table.findAll(\"tr\"):\n    # Skip the headers\n    if not row.findAll(\"th\"): \n        tds = row.findAll(\"td\")\n        companies.append([td.text.strip() for td in tds[1:2]])\n\nprint(\"List of S&P 500 Companies:\")\nfor company in companies:\n    print(company[0]) but is not the same. just give one example and only return the code."}
