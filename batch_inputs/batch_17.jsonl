{"prompt": "make some code that functions the same as the following code: from sklearn.naive_bayes import MultinomialNB \n\n# Initializing the model\nmodel = MultinomialNB()\n\n# Training the model\nmodel.fit(X_train,y_train)\n\n# Testing the model\ny_pred = model.predict(X_test)\n\n# Evaluating the model\naccuracy = model.score(X_test,y_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def main():\n numbers = [3, 5, 2, 4, 9, 7]\n numbers.sort()\n \n print('The 2nd largest number is', numbers[-2])\n print('The 3rd smallest number is', numbers[2])\n \nif __name__ == '__main__':\n main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_array(A):\n    if len(A) <= 1:\n        return A\n\n    pivot = A[0]\n    left = [item for item in A if item < pivot]\n    right = [item for item in A if item > pivot]\n\n    return sort_array(left) + [pivot] + sort_array(right) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n a, b = 0, 1\n fibonacci_list = [a]\n \n for _ in range(n):\n a, b = b, a + b\n fibonacci_list.append(b)\n \n return fibonacci_list\n\nprint(fibonacci(n)) # Prints [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import email\nfrom collections import defaultdict\n\n# function to group emails by their subject\ndef group_emails(emails):\n    # dictionary to store emails with same subject\n    grouped_emails = defaultdict(list)\n\n    # loop through emails\n    for email in emails:\n        # get subject\n        subject = email.get('Subject', '')\n        # add to dict\n        grouped_emails[subject].append(email)\n\n    # return grouped emails\n    return grouped_emails\n\n# function to merge emails with the same subject into one single email\ndef merge_emails(grouped_emails):\n    merged_emails = []\n\n    # loop through grouped emails\n    for subject, emails in grouped_emails.items():\n        # list to store all email bodies\n        email_bodies = []\n\n        # loop through emails in the group\n        for email in emails:\n            # get email body\n            body = email.get_body()\n            # add it to the list\n            email_bodies.append(body)\n\n        # combine the email bodies\n        combined_body = \"\\n\\n\".join(email_bodies)\n\n        # create new email\n        merged_email = email.Address.new_message(subject, combined_body)\n\n        # add the merged eail to the list\n        merged_emails.append(merged_email)\n\n    # return the merged emails\n    return merged_emails but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_min_max(numbers):\n \n min_num = float('inf')\n max_num = float('-inf')\n \n for num in numbers:\n  if num < min_num:\n   min_num = num\n  if num > max_num:\n   max_num = num\n \n return [min_num, max_num]\n\nnumbers = [1, 10, 3, 8, 6]\nprint(find_min_max(numbers))\n\n# Output: [1, 10] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_string(string, search):\n    count = 0 \n    for i in range(len(string)):\n        if string[i] == search:\n            count += 1\n    return count\n\nsearched_string = search_string(\"Hello World!\", \"l\") \nprint(searched_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ShoppingCart:\n def __init__(self, products):\n self.products = products\n self.total_price = 0\n\n def add_product(self, product):\n self.products.append(product)\n\n def calculate_total_price(self):\n self.total_price = 0\n for product in self.products:\n self.total_price += product['price']\n return self.total_price\n\n def make_purchase(self):\n self.total_price = self.calculate_total_price()\n print('You purchased {} items with a total price of {}'.format(len(self.products), self.total_price)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Get the webpage\nurl = input(\"Enter the URL of the webpage:\")\nr = requests.get(url)\nsoup = BeautifulSoup(r.text, \"html.parser\")\n\n# Get all the text\ntext = soup.get_text()\n\n# Split text into words\nwords = text.split()\n\n# Count words\nword_count = {}\nfor word in words:\n    if word in word_count:\n        word_count[word] += 1\n    else:\n        word_count[word] = 1\n\n# Sort word counts\nsorted_words = sorted(word_count, key=word_count.get, reverse=True)\n\n# Print top ten words\nprint(sorted_words[:10]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n  \ndef generate_password(length): \n    password_str = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+\"\n    password =  \"\".join(random.sample(password_str,length )) \n    return password\n\n# Driver Code \nlength = 20\nprint(generate_password(length)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def evaluate(expression):\n    return eval(expression)\n\nprint(evaluate(expression))\n\n# Output\n16 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_common_items(list_1, list_2):\n    common_items = []\n  \n    for i in list_1:\n        for j in list_2:\n            if i == j:\n                common_items.append(i)\n    return common_items\n\nlist_1 = [1, 2, 3, 4, 5]\nlist_2 = [2, 4, 6, 8]\n\nprint(get_common_items(list_1, list_2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\ndef create_anagrams(word):\n    result = []\n    if len(word) == 1:\n        result = [word]\n    else:\n        for i, letter in enumerate(word):\n            for j in create_anagrams(word[:i]+word[i+1:]):\n                result.append(str(letter)+str(j))\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortListInDescendingOrder(list):\n    return sorted(list, reverse=True)\n\nlist1 = [30, 10, 40, 20]\nsortedList = sortListInDescendingOrder(list1)\nprint(sortedList) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_length(string):\n    return len(string)\n\nlength = get_length(\"Hello\")\nprint(length) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_str_list(x):\n    return x.split()\n\nprint(convert_str_list(\"This is a test\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_limits(numbers):\n    largest = numbers[0]\n    smallest = numbers[0]\n    for num in numbers:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    \n    return largest, smallest but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request\nimport requests\n\napp = Flask(__name__)\n\n@app.route('/wikipedia', methods=['GET'])\ndef search_wikipedia():\n query = request.args.get('query')\n response = requests.get(\n 'https://en.wikipedia.org/w/api.php',\n params={\n 'action': 'query',\n 'list': 'search',\n 'format': 'json',\n 'srsearch': query\n}).json()\n\n return response\n\nif __name__ == '__main__':\n app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_to(num):\n    sum = 0\n    for i in range(num+1):\n        sum += i\n    return sum\n \nnum = 5\nprint(sum_to(num))   # 15 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def HammingDistance(str1,str2): \n    # find out the length of the longest string \n    l1 = len(str1) \n    l2 = len(str2) \n  \n    # create a matrix of size l1 x l2 \n    m = [[None]*(l2+1) for i in range(l1+1)] \n  \n    # initialize the first row of the matrix \n    for i in range(l2+1): \n        m[0][i] = i \n  \n    # initialize the first column \n    for i in range(l1+1): \n        m[i][0] = i \n  \n    # traverse the matrix row by row \n    for i in range(1,l1+1): \n        for j in range(1, l2+1):\n            if str1[i-1] == str2[j-1]: \n                m[i][j] = m[i-1][j-1] \n            else:\n                m[i][j] = 1 + min(m[i][j-1], m[i-1][j], m[i-1][j-1]) \n  \n    return m[l1][l2] \n  \n# Driver code \nstr1,str2 = \"Random String1\", \"This is a random string\"\nprint(HammingDistance(str1,str2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_three_nums(arr):\n    max_three = []\n\n    for i in range(3):\n        max_element = 0 \n        for j in range(len(arr)): \n            if max_element < arr[j]:\n                max_element = arr[j] \n        arr.remove(max_element) \n        max_three.append(max_element) \n    return max_three \n    \narr = [7, 9, 15, 10, 11] \nprint(max_three_nums(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: n = 20\nprimes = []\nfor num in range(2, n+1):\n    is_prime = True\n    for div in range(2, num):\n        if (num % div == 0):\n            is_prime = False\n            break\n    if is_prime:\n        primes.append(num)\nprint(primes) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(s):\n    s = s.lower().replace(\" \", \"\")\n    l = len(s)\n    for i in range(l // 2):\n        if s[i] != s[l-1-i]:\n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n): \n    fact = 1\n    for i in range(2, n+1):\n        fact *= i\n    return fact but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n \n# Create lists of data to plot\n# Current year's temperatures\ntemperatures = [10, 12, 14, 13, 14, 14, 15]\n \n# Create a chart of average temperatures\nplt.plot(temperatures)\n \n# Label the chart\nplt.title('Average Temperatures in Celcius')\nplt.xlabel('Month')\nplt.ylabel('Temperature (Celsius)')\n \n# Show the chart\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: BeautifulSoup is a popular library for web scraping and data extraction from HTML and XML documents. It is designed to work with HTML/XML parsers like html5lib, lxml and html.parser. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import the necessary packages\nimport pygame\nimport requests\nfrom gtts import gTTS\n\n# define an API call to scrape website text\nurl = 'example.com'\ncontent = requests.get(url).text\n\n# initialize the pygame module\npygame.mixer.init()\n\n# generate the text-to-speech audio\ntts = gTTS(content)\n\n# save the text-to-speech audio\ntts.save('text.mp3')\n\n# play the audio\npygame.mixer.music.load('text.mp3')\npygame.mixer.music.play()\n\n# wait for the audio to finish\nwhile pygame.mixer.music.get_busy(): \n    pygame.time.Clock().tick(10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def euclidean_distance(point_a, point_b):\n    sum_squares = 0\n    for i in range(len(point_a)):\n        sum_squares += (point_a[i] - point_b[i]) ** 2\n    return (sum_squares ** 0.5)\n\npoint_a = (1, 2, 3)\npoint_b = (4, 5, 6)\n\ndistance = euclidean_distance(point_a, point_b)\nprint(\"Distance between points: {}\".format(distance)) #5.19615 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def cosine_similarity(list1, list2):\n sum1, sum2, sum_sq1, sum_sq2, p_sum = 0, 0, 0, 0, 0\n for i in range(len(list1)):\n sum1 += list1[i]\n sum2 += list2[i]\n sum_sq1 += list1[i]**2\n sum_sq2 += list2[i]**2\n p_sum += list1[i] * list2[i]\n num = p_sum - (sum1 * sum2 / len(list1))\n den = (sqrt(sum_sq1 - pow(sum1, 2) / len(list1)) * (sqrt(sum_sq2 - pow(sum2, 2) / len(list1))))\n if den == 0:\n return 0\n return num/den but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_circumference(radius):\n    circumference = 2 * 3.14 * radius\n    return circumference\n\nif __name__ == '__main__':\n    radius = 10\n    circumference = calculate_circumference(radius)\n    print(circumference) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # function to calculate edit distance\ndef edit_distance(s1, s2):\n  if len(s1) == 0:\n  return len(s2)\n  if len(s2) == 0:\n  return len(s1)\n  if s1[-1] == s2[-1]:\n  cost = 0\n  else:\n  cost = 1\n\n  res = min([edit_distance(s1[:-1], s2)+1,\n            edit_distance(s1, s2[:-1])+1,\n            edit_distance(s1[:-1], s2[:-1]) + cost])\n  return res\n\n# example\ns1 = 'cat'\ns2 = 'cot'\nprint(edit_distance(s1, s2))  # output: 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findMax(l): \n    max = l[0] \n    for x in l: \n        if x > max: \n            max = x \n    return max \n  \n# Driver code \nl = [2, -1, 15, 8, 9, 10] \nprint(findMax(l)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(num): \n    if num == 0: \n        return 1 \n  \n    return num * factorial(num - 1) \n  \nnum = 6\nprint(\"Factorial of\", num, \"is\", factorial(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_sum(nums): \n total = 0\n \n for num in nums:\n   total += num\n \n return total\n\nlist_sum([1, 3, 5, 8]) # output: 17 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def parse_json(json_string):\n    return json.loads(json_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import csv\n\ndef avg_month_temp(city):\n result = 0\n counter = 0\n temperatures = csv.reader(open('weatherdata.csv'))\n for row in temperatures:\n if row[1] == city:\n result += float(row[2])\n counter += 1\n return result/counter but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport unittest\nfrom mock import MagicMock\nimport json\nimport urllib\nimport urllib2\nimport sys\nimport os\nsys.path.append(os.getcwd())\n\nimport interactivespaces\n\nTEST_ACTIVITY_DATA = {\n                      \"id\":\"53\",\n                      \"bundleContentHash\":\"hjkl\",\n                      \"identifyingName\":\"com.endpoint.lg.browser\",\n                      \"lastUploadDate\":1398288057444,\n                      \"description\":\"Browser Activity to present \\\"webui\\\" activties to the user\",\n                      \"name\":\"Browser Activity\",\n                      \"lastStartDate\":1401901320867,\n                      \"metadata\":{},\n                      \"version\":\"1.0.0.dev\"\n}\n\nTEST_LIVEACTIVITY_DATA = {\n                          \"lastDeployDate\":\"Mon May 05 12:50:36 PDT 2014\",\n                          \"outOfDate\":False,\n                          \"id\":\"110\",\n                          \"description\":\"\",\n                          \"name\":\"Evdev Demuxer on 42-a\",\n                          \"active\": {\n                            \"numberLiveActivityGroupRunning\":1,\n                            \"runtimeState\":\"ACTIVE\",\n                            \"deployState\":\"UNKNOWN\",\n                            \"lastStateUpdate\":\"Wed Jun 04 11:17:21 PDT 2014\",\n                            \"runtimeStateDescription\":\"space.activity.state.active\",\n                            \"directRunning\":False,\n                            \"directActivated\":False,\n                            \"numberLiveActivityGroupActivated\":1,\n                            \"deployStateDescription\":\"space.activity.state.unknown\",\n                            \"deployStateDetail\":None,\n                            \"runtimeStateDetail\":\"<p>foo</p>\"\n                          },\n                          \"controller\": {\n                            \"id\":\"2\",\n                            \"name\":\"ISCtlDispAScreen00\",\n                            \"uuid\":\"372f0f95-6b48-487a-a1ac-383ba580fc1c\"\n                          },\n                          \"uuid\":\"88816d20-22f6-4f78-95ba-7843696c6bc5\",\n                          \"activity\": {\n                            \"id\":\"61\",\n                            \"bundleContentHash\":\"qwerty\",\n                            \"identifyingName\":\"com.endpoint.lg.evdev.demuxer\",\n                            \"lastUploadDate\":1398288062862,\n                            \"description\":\"Separates and aggregates different types of input events.\",\n                            \"name\":\"Event Device Demuxer\",\n                            \"lastStartDate\":1401905841864,\n                            \"metadata\":{},\n                            \"version\":\"1.0.0.dev\"\n                          },\n                          \"metadata\":{}\n}\n\nTEST_LIVEACTIVITYGROUP_DATA = {\n                               \"id\":\"301\",\n                               \"description\":\"\",\n                               \"name\":\"Google Earth\",\n                               \"metadata\":{}\n}\n\nTEST_SPACE_DATA = {\n                   \"id\":\"401\",\n                    \"description\":\"\",\n                    \"name\":\"LG Express\",\n                    \"metadata\":{}\n}\n\nTEST_CONTROLLER_DATA = {\n                        \"state\":\"RUNNING\",\n                        \"hostId\":\"ctldispascreen00\",\n                        \"mode\":\"ENABLED\",\n                        \"id\":\"2\",\n                        \"stateDescription\":\"space.controller.state.running\",\n                        \"modeDescription\":\"space.controller.mode.enabled\",\n                        \"description\":\"Controller for Screen 00 on Display Node A\",\n                        \"lastStateUpdateDate\":\"Wed Jun 04 12:25:57 PDT 2014\",\n                        \"name\":\"ISCtlDispAScreen00\",\n                        \"dataBundleStateDescription\":\"space.controller.dataBundle.state.none\",\n                        \"uuid\":\"372f0f95-6b48-487a-a1ac-383ba580fc1c\",\n                        \"dataBundleState\":\"NO_REQUEST\",\n                        \"lastDataBundleStateUpdateDate\":None,\n                        \"metadata\":{}\n}\n\nTEST_NAMEDSCRIPT_DATA = {\n                        \"id\":\"3\",\n                        \"name\":\"foo\",\n                        \"description\":\"bar\"\n}\n\nTEST_POST = {\"foo\":\"bar\"}\nTEST_QUERY = {\"zot\":\"zing\"}\nTEST_SESSION = 'e2s1'\n\nTEST_HOST = '1.2.3.4'\nTEST_PORT = 12345\n\ndef test_get_collection(data, method_to_test, expected_type, path_name):\n    \"\"\"Helper for testing collection getters.\"\"\"\n    master = interactivespaces.Master(TEST_HOST, TEST_PORT)\n    master._api_get_json = MagicMock(return_value=[data])\n\n    result = method_to_test(master)\n    master._api_get_json.assert_called_once_with('{}/all'.format(path_name))\n\n    return result\n\nclass MasterTests(unittest.TestCase):\n    def test_constructor(self):\n        \"\"\"Test construction with valid arguments.\"\"\"\n        master = interactivespaces.Master(TEST_HOST, TEST_PORT)\n        self.assertEqual(master.host, TEST_HOST)\n        self.assertEqual(master.port, TEST_PORT)\n\n    def test_api_get_json(self):\n        \"\"\"Test a valid call to Master._api_get_json().\"\"\"\n        class MockResponse(object):\n            def read():\n                return '{\"result\":\"success\",\"data\":{\"foo\":\"bar\"}}'\n            def getcode():\n                return 200\n\n    master = interactivespaces.Master(TEST_HOST, TEST_PORT)\n    master._urlopen = MagicMock(return_value=MockResponse())\n\n    command = 'activity/all'\n    response = master._api_get_json(command)\n\n    master._urlopen.assert_called_once_with(\n      'http://{}:{}/{}.json'.format(TEST_HOST, TEST_PORT, command)\n    )\n    self.assertEqual('bar', response['foo'])\n\n    def test_api_get_html(self):\n        \"\"\"Test a valid call to Master._api_get_html().\"\"\"\n\nclass MockResponse(object):\n    def read():\n        return 'asdf'\n    \n    def getcode():\n        return 200\n\n    master = interactivespaces.Master(TEST_HOST, TEST_PORT)\n    master._urlopen = MagicMock(return_value=MockResponse())\n\n    command = 'activity/new'\n    response = master._api_get_html(command, {\"foo\":\"bar\"})\n\n    master._urlopen.assert_called_once_with(\n      'http://{}:{}/{}.html?{}'.format(\n        TEST_HOST,\n        TEST_PORT,\n        command,\n        urllib.urlencode(TEST_QUERY)\n      )\n    )\n    self.assertEqual('asdf', response.read())\n    self.assertEqual(200, response.getcode())\n\n    def test_api_post_json(self):\n        \"\"\"Test a valid call to Master._api_post_json().\"\"\"\n    \n\nclass MockResponse(object):\n    def read():\n        return '{\"result\":\"success\"}'\n    def getcode():\n        return 200\n\n    master = interactivespaces.Master(TEST_HOST, TEST_PORT)\n    master._urlopen = MagicMock(return_value=MockResponse())\n\n    command = 'liveactivity/42/configure'\n    master._api_post_json(command, TEST_QUERY, TEST_POST)\n\n    master._urlopen.assert_called_once_with(\n      'http://{}:{}/{}.json?{}'.format(\n        TEST_HOST,\n        TEST_PORT,\n        command,\n        urllib.urlencode(TEST_QUERY)\n      ),\n      urllib.urlencode(TEST_POST)\n    )\n\n    def test_api_post_html(self):\n        \"\"\"Test a valid call to Master._api_post_html().\"\"\"\n\nclass MockResponse(object):\n    def read():\n        return 'asdf'\n    def getcode():\n        return 200\n\n    master = interactivespaces.Master(TEST_HOST, TEST_PORT)\n    master._urlopen = MagicMock(return_value=MockResponse())\n\n    command = 'namescript/new'\n    master._api_post_html(command, TEST_QUERY, TEST_POST)\n\n    master._urlopen.assert_called_once_with(\n      'http://{}:{}/{}.html?{}'.format(\n        TEST_HOST,\n        TEST_PORT,\n        command,\n        urllib.urlencode(TEST_QUERY)\n      ),\n      urllib.urlencode(TEST_POST)\n    )\n\n    def test_get_all_activities(self):\n        \"\"\"Test Master.get_activities() with no pattern.\"\"\"\n        expected_type = interactivespaces.Activity\n        result = test_get_collection(\n                                     data=TEST_ACTIVITY_DATA,\n                                     method_to_test=interactivespaces.Master.get_activities,\n                                     expected_type=expected_type,\n                                     path_name='activity'\n                                     )\n        self.assertEqual(1, len(result))\n        self.assertIsInstance(result[0], expected_type)\n\n    def test_get_live_activities(self):\n        \"\"\"Test Master.get_live_activities() with no pattern.\"\"\"\n        expected_type = interactivespaces.LiveActivity\n        result = test_get_collection(\n                                     data=TEST_LIVEACTIVITY_DATA,\n                                     method_to_test=interactivespaces.Master.get_live_activities,\n                                     expected_type=expected_type,\n                                     path_name='liveactivity'\n                                     )\n        self.assertEqual(1, len(result))\n        self.assertIsInstance(result[0], expected_type)\n\n    def test_get_live_activity_groups(self):\n        \"\"\"Test Master.get_live_activity_groups() with no pattern.\"\"\"\n        expected_type = interactivespaces.LiveActivityGroup\n        test_get_collection(\n                            data=TEST_LIVEACTIVITYGROUP_DATA,\n                            method_to_test=interactivespaces.Master.get_live_activity_groups,\n                            expected_type=expected_type,\n                            path_name='liveactivitygroup'\n                            )\n        self.assertEqual(1, len(result))\n        self.assertIsInstance(result[0], expected_type)\n\n    def test_get_spaces(self):\n        \"\"\"Test Master.get_spaces() with no pattern.\"\"\"\n        expected_type = interactivespaces.Space\n        test_get_collection(\n                            data=TEST_SPACE_DATA,\n                            method_to_test=interactivespaces.Master.get_spaces,\n                            expected_type=expected_type,\n                            path_name='space'\n                            )\n        self.assertEqual(1, len(result))\n        self.assertIsInstance(result[0], expected_type)\n\n    def test_get_controllers(self):\n        \"\"\"Test Master.get_controllers() with no pattern.\"\"\"\n        expected_type = interactivespaces.Controller\n        test_get_collection(\n                            data=TEST_CONTROLLER_DATA,\n                            method_to_test=interactivespaces.Master.get_controllers,\n                            expected_type=expected_type,\n                            ath_name='spacecontroller'\n                            )\n        self.assertEqual(1, len(result))\n        self.assertIsInstance(result[0], expected_type)\n\n    def test_get_named_scripts(self):\n        \"\"\"Test Master.get_named_scripts() with no pattern.\"\"\"\n        expected_type = interactivespaces.NamedScript\n        test_get_collection(\n                            data=TEST_NAMEDSCRIPT_DATA,\n                            method_to_test=interactivespaces.Master.get_named_scripts,\n                                expected_type=expected_type,\n                                path_name='namedscript'\n                                )\n        self.assertEqual(1, len(result))\n        self.assertIsInstance(result[0], expected_type)\n\n    def test_new_live_activity(self):\n        \"\"\"Test a valid call to Master.new_live_activity().\"\"\"\n        master = interactivespaces.Master(TEST_HOST, TEST_PORT)\n\nclass MockFirstResponse():\n    def getcode():\n        return 200\n    def geturl():\n        return 'http://{}:{}/liveactivity/new.html?execution={}'.format(\n                                                                        TEST_HOST,\n                                                                        TEST_PORT,\n                                                                        TEST_SESSION\n                                                                        )\n\nclass MockSecondResponse():\n    def getcode():\n        return 200\n\n    master._api_get_html = MagicMock(return_value=MockFirstResponse())\n    master._api_post_html = MagicMock(return_value=MockSecondResponse())\n\n\nclass MockActivity():\n    self.id = TEST_LIVEACTIVITY_DATA['activity']['id']\n\n\nclass MockController():\n    self.id = TEST_LIVEACTIVITY_DATA['controller']['id']\n\n    test_live_activity = master.new_live_activity(\n                                                  TEST_LIVEACTIVITY_DATA['name'],\n                                                  TEST_LIVEACTIVITY_DATA['description'],\n                                                  MockActivity(),\n                                                  MockController()\n                                                  )\n    master._api_get_html.assert_called_once_with(\n      'liveactivity/new',\n      {\"mode\": \"embedded\"}\n    )\n    master._api_post_html.assert_called_once_with(\n      'liveactivity/new',\n      {\"execution\": TEST_SESSION},\n      {\n        \"liveActivity.name\": TEST_LIVEACTIVITY_DATA['name'],\n        \"liveActivity.description\": TEST_LIVEACTIVITY_DATA['description'],\n        \"activityId\": TEST_LIVEACTIVITY_DATA['activity']['id'],\n        \"controllerId\": TEST_LIVEACTIVITY_DATA['controller']['id'],\n        \"_eventId_save\": \"Save\"\n      }\n    )\n\n    self.assertIsInstance(\n      test_live_activity,\n      interactivespaces.LiveActivity\n    )\n\ndef main():\n  unittest.main()\n\nif __name__ == '__main__':\n  main()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(query, text):\n  n = len(query)\n  result = []\n  # Loop through the text\n  for i in range(len(text)): \n    # Compare the current n characters of the text \n    # with the query string\n    if text[i: i + n] == query: \n      # If matches, append the current index of text to \n      # the result \n      result.append(i) \n  # Return the list of indices  \n  return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_of_integers = [x for x in range(0, 101)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_names(names):\n valid_names = []\n for name in names:\n if re.match('[a-zA-Z]{3,20}', name):\n valid_names.append(name)\n return valid_names\n\nprint(filter_names(['Alex', 'Mark', 'John21', '12345']))\n# Output: ['Alex', 'Mark'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Define the Employee class\nclass Employee:\n    def __init__(self, name, email, id, salary):\n        self.name = name \n        self.email = email\n        self.id = id\n        self.salary = salary\n# Create an empty dictionary to store employee details\nemployee_details = {} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nlinks = []\nfor link in soup.find_all('a'):\n links.append(link.get('href'))\n\nprint(links) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Create data frame from input\ndf = pd.DataFrame([{\n \u201cdescription\u201d: \u201cGently used Apple iPhone 8 Plus, 64GB, unlocked. Great condition!\u201d\n}])\n\n# Create feature columns\ndf['Length'] = df['description'].apply(len)\n\n# Create target column\ndf['Sale Price'] = np.nan\n\n# Split data into X (features) and y (target)\nX = df[['Length']]\ny = df['Sale Price']\n\n# Create and fit model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Make prediction\ndf.loc[0, 'Sale Price'] = model.predict(X)[0]\n\nprint('Predicted Sale Price:', df.loc[0, 'Sale Price']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# define the size of the array\nx, y = 10, 10\n\n# create an empty array of the given size\narr = [[0 for j in range(x)] for i in range(y)]\n\n# fill the array with random numbers\nfor i in range(x):\n for j in range(y):\n arr[i][j] = random.randint(0, 9)\n\n# print the array\nfor i in range(x):\n print(arr[i]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def common_in_two_lists(list1, list2):\n    common_elements = []\n    for number in list1:\n        if number in list2:\n            common_elements.append(number)\n    return common_elements but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Generate a random list of numbers\nnums = []\nfor _ in range(25):\n   nums.append(random.randint(0, 10))\n\nprint(nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import libraries\nimport nltk\nfrom nltk.tokenize import sent_tokenize, word_tokenize\nfrom nltk.corpus import stopwords\nfrom nltk.probability import FreqDist\nfrom heapq import nlargest\n \n# Define text summarization function\ndef summarize(text):\n    # Tokenize text\n    words = word_tokenize(text)\n \n    # Calculate word frequencies\n    word_frequencies = FreqDist(words)\n    # Identify the most frequecny words\n    most_frequent_words = nlargest(100, word_frequencies, key=word_frequencies.get)\n \n    # Identify sentences\n    sentences = sent_tokenize(text)\n \n    # Calculate sentence score based on most frequent words\n    sentence_scores = {} \n    for sentence in sentences:\n        score = 0\n        for word in word_tokenize(sentence.lower()):\n            if word in most_frequent_words:\n                score += 1\n        sentence_scores[sentence] = score\n \n    # Choose the highest score sentences from the list\n    summarized_text = nlargest(7, sentence_scores, key=sentence_scores.get)\n \n    return ' '.join(summarized_text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: A static method is a method that is associated with a class, but its definition cannot access the data of individual instances of the class. A static method will always have the same output, no matter what class instance it is called on. \n\nA class method on the other hand is associated with a class and it is able to access the data of individual instances of the class. A class method will change its output depending on the instance of the class that it is called on. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Create the data\ndata = {'Monthly Income': [1900, 2300, 2800, 3500],\n        'Monthly Expenses': [750, 850, 950, 1250]}\ndf = pd.DataFrame(data)\n\n# Train the model\nx = df['Monthly Income'].values.reshape(-1, 1)\ny = df['Monthly Expenses'].values\nreg = LinearRegression().fit(x, y)\n\n# Create the prediction\nprediction = reg.predict([[2300]])\nprint('Predicted total monthly expenses: ', prediction) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: i = 0\n\nwhile i <= 20:\n    if i % 2 == 0:\n        print(i)\n    i += 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_duplicate_in_array(arr):\n    result = False\n    for i in range(len(arr) - 2):\n        if arr[i] == arr[i + 1] == arr[i + 2]:\n            result = True\n            break\n    return result\n\narr = [4, 2, 8, 2, 1, 4, 19, 4]\nprint(check_duplicate_in_array(arr)) # Output: True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class BankAccount:\n    def __init__(self):\n        self._balance = 0\n\n    def get_balance(self):\n        return self._balance\n\n    def deposit(self, amount):\n        if amount < 0:\n            raise ValueError(\"Amount must be greater than 0\")\n\n        self._balance += amount\n\n    def withdraw(self, amount):\n        if amount < 0:\n            raise ValueError(\"Amount must be greater than 0\")\n        if amount > self._balance:\n            raise ValueError(\"Insufficient funds\")\n\n        self._balance -= amount but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Import necessary libraries\nimport cv2\nimport numpy as np\n\n#Load the classifier for frontal face detection\nhaar_face_cascade = cv2.CascadeClassifier(\"haarcascade_frontal_face.xml\")\n\n#Create a VideoCapture object\ncapture = cv2.VideoCapture(\"Sample_image.jpg\")\nimg = capture.read()\n\n#Convert the image into grayscale\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\n#Detect facial features\nfaces = haar_face_cascade.detectMultiScale(gray, 1.3, 5)\n\n#Draw a rectangle around the faces\nfor (x,y,w,h) in faces:\n    cv2.rectangle(img, (x,y), (x+w, y+h), (255,0,0), 2)\n\n#Write the image into a file\ncv2.imwrite('face_detect.jpg',img) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(a,b): \n      \n    if b == 0: \n        \n        return a \n      \n    return gcd(b, a % b) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(list_a):\n    result = []\n    for a in list_a:\n        if a not in result:\n            result.append(a)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_rain(temp, humidity):\n    if temp < 70 and humidity > 0.7:\n        return 'raining'\n    else:\n        return 'not raining' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def greedy_algorithm(solutions):\n best_solution = None\n best_solution_value = float(\"-inf\")\n for solution in solutions:\n # calculate value of current solution\n    current_solution_value = calculate_solution_value(solution)\n # update best solution if current solution is better\n    if current_solution_value > best_solution_value:\n        best_solution = solution\n        best_solution_value = current_solution_value\n \n return best_solution but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nimport random\nfrom nltk.classify import NaiveBayesClassifier\nfrom nltk.corpus import movie_reviews\n\n# Create a list of the tuples needed for training the model\ndocuments = []\n\nfor category in movie_reviews.categories():\n    for fileid in movie_reviews.fileids(category):\n        documents.append( (list(movie_reviews.words(fileid)), category) )\n\n# Shuffle the documents\nrandom.shuffle(documents)\n\n# Get all words in all documents\nall_words = []\n\nfor w in movie_reviews.words():\n    all_words.append(w.lower())\n\n# Get a frequency distribution of all words\nall_words = nltk.FreqDist(all_words)\n\n# Extract the 2000 most common words\nword_features = list(all_words.keys())[:2000]\n\n# Define a function to find the 2000 most common words in a document\ndef find_features(document):\n    words = set(document)\n    features = {}\n    for w in word_features:\n        features[w] = (w in words)\n\n    return features\n\n# Create a feature set \nfeaturesets = [(find_features(rev), category) for (rev, category) in documents]\n\n# Train the Naive Bayes model\ntraining_set = featuresets[:1900]\ntesting_set = featuresets[1900:]\n\nclassifier = NaiveBayesClassifier.train(training_set)\n\n# Check accuracy\nprint(\"Naive Bayes Algo accuracy percent:\", (nltk.classify.accuracy(classifier, testing_set)) * 100)\nclassifier.show_most_informative_features(15) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\nusers = {\n    \"users\": [\n        {\n            \"name\": \"John\",\n            \"age\": 26\n        },\n        {\n            \"name\": \"Mark\",\n            \"age\": 32\n        },\n        {\n            \"name\": \"Alice\",\n            \"age\": 21\n        }\n    ]\n}\n\nsearch_term = \"Alice\"\n\nfor user in users[\"users\"]:\n    if user[\"name\"] == search_term:\n        print(\"Found user with name '{}' and age {}\".format(user[\"name\"], user[\"age\"])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def normalize(lst):\n return [word.lower() for word in lst] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n\ndata = [[120, 250], [110, 200], [140, 300]]\n\n# Convert data to a numpy array\ndata = np.array(data)\n\n# Train the KMeans model with the data\nkmeans = KMeans(n_clusters=2).fit(data)\n\n# Generate centroid coordinates\ncentroids = kmeans.cluster_centers_\n\n# Plot the centroids for the clusters\nplt.scatter(centroids[:, 0], centroids[:, 1], marker='x', s=200, linewidths=3, c='r')\n\n# Plot all datapoints\nplt.scatter(data[:, 0], data[:, 1], marker='*', s=100)\n\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isAnagram(word1, word2): \n  \n    # Get lengths of both strings \n    n1 = len(word1) \n    n2 = len(word2) \n  \n    # If both strings have different lengths, they \n    # cannot be anagrams \n    if (n1 != n2): \n        return False\n  \n    # Sort both strings \n    word1 = sorted(word1) \n    word2 = sorted(word2) \n  \n    # Compare sorted strings \n    for i in range(n1): \n        if word1[i] != word2[i]: \n            return False\n  \n    return True\n  \n# Driver program \nwords = (\"dear\", \"read\")\n  \nif isAnagram(words[0], words[1]): \n    print(\"The word\", words[0], \"and\", words[1], \"are anagrams\") \nelse: \n    print(\"The word\", words[0], \"and\", words[1], \"are not anagrams\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insertionSort(arr): \n    # Traverse through 1 to len(arr) \n    for i in range(1, len(arr)): \n  \n        key = arr[i] \n  \n        # Move elements of arr[0..i-1], that are\n        # greater than key, to one position ahead\n        # of their current position \n        j = i-1\n        while j >= 0 and key < arr[j] : \n                arr[j + 1] = arr[j] \n                j -= 1\n        arr[j + 1] = key \n##\n5. Instruction: Create a Python program to detect a cycle in a linked list.\n5. Input:\nNot applicable\n5. Output:\ndef detectLoop(head): \n    slowPtr = head \n    fastPtr = head \n  \n    while(slowPtr and fastPtr and fastPtr.next): \n        slowPtr = slowPtr.next\n        fastPtr = fastPtr.next.next\n  \n        if slowPtr == fastPtr: \n            return True\n  \n    return False ## No cycle detected but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\ndef send_request(url):\n    response = requests.get(url)\n    \n    if response.status_code == 200:\n        print(\"Success! The website responded with: \")\n        print(response.text)\n    else:\n        print(\"Error! The website responded with: \")\n        print(\"Status code: \", response.status_code) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_words(string, target, new): \n    words = string.split(' ')\n    result = []\n\n    for word in words:\n        if word == target:\n            result.append(new)\n        else:\n            result.append(word)\n    \n  return \" \".join(result)\n\nresult = replace_words(\"Hello, how are you today? How is your day going?\", \"how\", \"what\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport nltk \nnltk.download('punkt')\n\n# remove punctuation and capitalization \ndef remove_punctuation_and_make_lowercase(data):\n  table = str.maketrans({key: None for key in string.punctuation})\n  data_without_punctuation = data.translate(table).lower()\n  return data_without_punctuation\n\ndata = \"The product was good, but customer service was slow\"\n\ndata_without_punctuation = remove_punctuation_and_make_lowercase(data)\nprint(data_without_punctuation)\n\n# tokenize\ndata_tokenized = nltk.word_tokenize(data_without_punctuation)\nprint(data_tokenized) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # take a number \nnumber = int(input(\"Please enter a number: \")) \n  \n#initialize sum\nsum = 0\n  \n#Find the sum of the digits of the number\ntemp = number\nwhile temp > 0: \n   digit = temp % 10\n   sum += digit \n   temp //= 10\n  \n# print the output\nprint(\"The sum of the digits of the given number is\", sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #initialize variables\nlist = [1, 3, 5, 7]\nnum = 3\n\n# compute sum\nsum = 0\nfor i in list:\n    sum = sum + i\n\n# compute product\nresult = sum * num\n\n# Print result\nprint(\"Result: \", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def common_elements(lst1, lst2):\n  return [element for element in lst1 if element in lst2]\n\nlist1 = [1, 2, 3, 4]\nlist2 = [2, 4, 6]\ncommon_elements = common_elements(list1, list2)\n\nprint(\"Common elements:\", common_elements) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Training data\nx = np.array([[1.4, 60],[1.8, 70],[2.2, 80],[2.5, 90]])\ny = np.array([12, 18, 24, 30])\n\n# Create model\nmodel = LinearRegression()\nmodel.fit(x, y)\n\n# Predicted age for height 1.6m and weight 65kg\nmodel.predict([[1.6, 65]]) # output: [16.7] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [i for i in range(11) if i % 2 == 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_object(features, classes):\n    max_feature = max(features)\n    index = features.index(max_feature)\n    return classes[index]\n\nprint(classify_object([2.5, 4.5, 2.5], [\"apple\", \"orange\", \"pear\"])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bin_to_dec(binary_str):\n # Initialize the result\n result = 0\n \n # Iterate through the string and add each digit to the result\n for d in binary_str:\n  # Multiply the result by 2 for each digit of the string\n  result = result * 2\n  # Add the current digit to the result\n  result += int(d)\n \n # Return the result\n return result\n\nbinary_str = '10101'\nprint(bin_to_dec(binary_str))\n# Output: 21 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n a, b = 0, 1\n for _ in range(n):\n a, b = b, a + b\n return b\n \nprint(fibonacci(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Calculator(object):\n    def __init__(self):\n        pass\n    \n    def add(self, x, y):\n        return x + y\n   \n    def subtract(self, x, y):\n        return x - y\n    \n    def multiply(self, x, y):\n        return x * y\n    \n    def divide(self, x, y):\n        return x / y\n\n#Main Program\nc = Calculator()\nprint(c.add(4, 8))\nprint(c.subtract(4, 8))\nprint(c.multiply(4, 8))\nprint(c.divide(4, 8)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nFind the minimum element in a Python list called 'nums'\n\"\"\"\n\ndef find_min(nums):\n    min = nums[0]\n    for num in nums:\n        if num < min:\n            min = num\n    return min\n    \nif __name__ == '__main__':\n    nums = [2, 3, 4, 1, 7, 8, 5]\n    print(find_min(nums)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maxProfit(prices):\n maxProfit = 0\n minPrice = float('inf')\n\n for price in prices:\n minPrice = min(minPrice, price)\n maxProfit = max(maxProfit, price - minPrice)\n\n return maxProfit\n\n# example\nmaxProfit([5, 7, 1, 3, 6, 8]) # returns 7 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def median(lst):\n    lst = sorted(lst)\n    if len(lst) % 2 == 0:\n        mid = int(len(lst) / 2)\n        return (lst[mid] + lst[mid-1]) / 2\n    else:\n        mid = int(len(lst) / 2)\n        return lst[mid]\n\nmedian([3, 4, 1, 2, 5]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci_series(n): \n    # Creating an array to store fibonacci numbers till 10th index \n    fibonacci = [0, 1] \n      \n    # Append the next number in the series till 10th index \n    while(len(fibonacci) < n + 1): \n        fibonacci.append(fibonacci[-1] + fibonacci[-2]) \n      \n    # return the value at 10th index \n    return fibonacci[n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortByDivisible(numbers, integer):\n sortedList = []\n\n for num in numbers:\n if (num % integer == 0):\n sortedList.append(num)\n\n for num in numbers:\n if (num % integer != 0):\n sortedList.append(num)\n\n return sortedList\n\nnumbers = [10, 7, 3, 9, 12, 15]\ninteger = 3\n\nprint(sortByDivisible(numbers, integer))\n# Output: [9, 12, 3, 10, 7, 15] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_numbers(numbers):\n    \"\"\"\n    Find the sum of a given list of numbers.\n    Args:\n        numbers: a list of numbers.\n    Returns:\n        The sum of the numbers.\n    \"\"\"\n    sum = 0\n\n    # Iterate over numbers\n    for num in numbers:\n        # Add number to total\n        sum += num\n\n    return sum\n\ntotal = add_numbers([4, 7, 6, 2])\n\nprint(total) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countValues(dataframe):\n counts = {}\n for column in dataframe.columns:\n counts[column] = dataframe[column].count()\n return counts but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\njson_object = { \"name\": \"John\", \"age\": 30, \"City\": \"New York\" }\n\ndict = json.loads(json.dumps(json_object))\n\nprint(dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Defining the sentence and keyword\nsentence = \"This is a sample sentence for the purpose of the example. \"\nkeyword = \"example\"\n\n#Counting the occurences\ncount = sentence.count(keyword)\n\n#Printing the result\nprint(\"The keyword appears \" + str(count) + \" time(s) in the sentence.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(input_str):\n reversed_str = input_str[::-1]\n return input_str == reversed_str but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_two_numbers(a, b):\n    return a + b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Naive Bayes Classifier\n\nimport numpy as np\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Sample data\n# Each item is a string of text\nX = [\"I am spam\", \"Help me now\", \"You won the lottery\", \"Buy this product now\", \n    \"Don't miss this great offer\", \"Open an account with us\", \"Get rich quick\",\n    \"This is not a scam\", \"Don't believe this offer\", \"Invest with us now\"]\n\n# Labels for the example data\n# 1: Spam, 0: Ham\ny = np.array([1,0,1,1,1,0,1,0,1,0])\n\n# Create the classifier\nclf = MultinomialNB()\n\n# Train the classifier\nclf.fit(X, y)\n\n# Test the classifier\ntest_example = \"Claim your prize now\"\ntest_example_label = clf.predict([test_example])\nprint(\"Test example classified as:\", test_example_label[0]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(a): \n    if a<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif a==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif a==2: \n        return 1\n    else: \n        return Fibonacci(a-1)+Fibonacci(a-2) \n  \n# Driver Program \n\nlimit = int(input('Enter the limit of fibonacci series:'))\nfor i in range(1,limit+1): \n    print(Fibonacci(i)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import the required libraries \nimport base64 \nfrom cryptography.hazmat.backends import default_backend \nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC \n  \n# message to be encrypted \nmessage = \"This is an example\" \n  \n# encode the message in UTF-8 format \nencoded_message = message.encode('utf-8') \n  \n# generate a random salt \nsalt = os.urandom(16) \n  \n# derive an encryption key from the message, \n# salt and number of iterations \nkdf = PBKDF2HMAC( \n    algorithm=hashes.SHA256(), \n    length=32, \n    salt=salt, \n    iterations=100000, \n    backend=default_backend() \n) \nkey = base64.urlsafe_b64encode(kdf.derive(message)) \n  \n# encode the message \nencoded_message = base64.b64encode(message.encode('utf-8')) \n  \n# encrypt the message  \nencrypter = Cipher(algorithms.AES(key), modes.GCM(salt), backend=default_backend()).encryptor() \n  \n# finally calculate the encrypted message \nct = encrypter.update(encoded_message) + encrypter.finalize() \n\nprint(ct) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_permutations(s): \n\tres = [] \n\tfind_permutations_recur(s, \"\", res) \n\treturn res \n\ndef find_permutations_recur(str, prefix, res): \n\tn = len(str)\n\tif n == 0:\n\t\tres.append(prefix) \n\t\treturn\n\n\tfor i in range(n):\n\t\tremaining = str[0:i] + str[i+1:] \n\t\tfind_permutations_recur(remaining, prefix + str[i], res) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a virtual environment in Python to manage project dependencies\n\"\"\"\n\n# Create the virtual environment\npython3 -m venv env\n\n# Activate the virtual environment\nsource env/bin/activate\n\n# Install project requirements\npip install -r requirements.txt but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: input_list = [1,2,3]\n\nnum_elements = len(input_list)\n\ndef create_symmetric_matrix(input_list):\n    matrix = [[0 for x in range(num_elements)] for y in range(num_elements)]\n    \n    for i in range(num_elements):\n        for j in range(num_elements):\n            if i == j:\n                matrix[i][j] = input_list[i]\n            else:\n                matrix[i][j] = input_list[j]\n                \n    return matrix\n\nres = create_symmetric_matrix(input_list)\nprint(res) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.cluster import KMeans\n\n# create KMeans object\nkmeans = KMeans(n_clusters=3)\n\n# fit the data\nkmeans.fit(data)\n\n# predict the clusters\npredicted_clusters = kmeans.predict(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import mysql.connector\n\n# Connect to local MySQL Server\nconn = mysql.connector.connect(\n    user='root',\n    password='root',\n    host='localhost',\n    database='test'\n)\ncursor = conn.cursor()\n\n# Execute SQL Query\nsql = \"SELECT * FROM users\"\ncursor.execute(sql)\n\n# Fetch and print results\ndata = cursor.fetchall()\nfor record in data:\n    print(record) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\n\n# Get the input number\ninput_num = int(input(\"Enter a number: \"))\n\n# Convert to binary \nbinary_num = bin(input_num)\n\n# Print the result\nprint(\"The binary of {} is {}\".format(input_num, binary_num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_numbers(n):\n    return int(n * (n + 1) / 2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_mean_median_mode(arr):\n mean = 0\n sum = 0\n mode = None\n for i in range(len(arr)):\n sum += arr[i]\n mean = sum / len(arr)\n arr.sort()\n if len(arr) % 2 == 0:\n median = (arr[int(len(arr) / 2)] + arr[int(len(arr) / 2) - 1]) / 2\n else:\n median = arr[int(len(arr) / 2)]\n count = 0\n max_count = 0\n for i in range(len(arr)):\n current_count = 0\n for j in range(len(arr)):\n if arr[i] == arr[j]:\n current_count += 1\n if current_count > max_count:\n max_count = current_count\n mode = arr[i]\n return [mean, median, mode] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_differences(str1, str2): \n    differences = 0 \n    for letter1, letter2 in zip(str1, str2): \n        if letter1 != letter2: \n            differences +=1 \n    return differences but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(arr): \n    # go through each element in the list\n    for elem in arr: \n        # compare one elem with each of the successive elements\n        for i in range(len(arr)-1): \n            if arr[i] > arr[i+1]: \n                temp = arr[i] \n                arr[i] = arr[i+1] \n                arr[i+1] = temp \n  \n    return arr \n  \narr = [7,2,5,1,3]\nsorted_arr = bubble_sort(arr)\nprint(\"Sorted array:\",sorted_arr)\n\nOutput: Sorted array: [1,2,3,5,7] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def item_freq(list_input):\n    freq = {} \n  \n    for item in list_input: \n        if (item in freq): \n            freq[item] += 1\n        else: \n            freq[item] = 1\n  \n    for key, value in freq.items(): \n        print (\"% s : % d\"%(key, value)) but is not the same. just give one example and only return the code."}
