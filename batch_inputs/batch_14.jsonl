{"prompt": "make some code that functions the same as the following code: def isAnagram(str1, str2):\n    # Convert the strings to lowercase\n    str1 = str1.lower()\n    str2 = str2.lower()\n\n    # Sort the strings\n    str1sorted = ''.join(sorted(str1))\n    str2sorted = ''.join(sorted(str2))\n\n    # Check if sorted strings are equal \n    if(str1sorted == str2sorted):\n        return True\n    else:\n        return False\n\n# Test\nprint(isAnagram('Hello', 'World')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\nwords = [\"word1\", \"word2\", \"word3\", \"word4\"]\nfrequencies = [5, 8, 3, 2]\n\nplt.bar(words, frequencies)\nplt.title(\"Word Frequency Chart\")\nplt.xlabel(\"Words\")\nplt.ylabel(\"Frequency\")\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_nth_element(list_input, n):\n    return list_input[n]\n\nprint(get_nth_element(list_input, n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_list(input_list): \n    left = 0\n    right = len(input_list) - 1\n    while left < right:\n        input_list[left], input_list[right] = input_list[right], input_list[left]\n        left += 1\n        right -= 1\n        \n    return input_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: names = [\"John\", \"Paul\", \"George\", \"Ringo\", \"Adam\", \"Peter\", \"Alice\", \"Karen\", \"Jerry\"]\n\nfor name in names:\n if 'a' in name:\n print(name)\n\n# Output\nAdam\nAlice\nKaren but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countOccurrences(words, target):\n    count = 0\n    for word in words:\n        if word == target:\n            count += 1\n    \n    return count\n\nprint(countOccurrences([\"how\", \"how\", \"are\", \"you\", \"how\", \"are\", \"you\"], \"how\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_larger_number_divisible_by_smaller(num1, num2):\n  max_num = max(num1, num2)\n  min_num = min(num1, num2)\n\n  return max_num if max_num % min_num == 0 else None\n\nresult = get_larger_number_divisible_by_smaller(10, 20)\nprint(result) # 20 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_number(a, b):\n    try:\n        return a + b \n    except TypeError:\n        print(\"Please enter numeric values\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # This file is part of Buildbot.  Buildbot is free software: you can\n# redistribute it and/or modify it under the terms of the GNU General Public\n# License as published by the Free Software Foundation, version 2.\n#\n# This program is distributed in the hope that it will be useful, but WITHOUT\n# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n# details.\n#\n# You should have received a copy of the GNU General Public License along with\n# this program; if not, write to the Free Software Foundation, Inc., 51\n# Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n#\n# Copyright Buildbot Team Members\n\n\nimport copy\nimport sys\n\nfrom mock import Mock\n\nfrom twisted.internet import defer\nfrom twisted.trial import unittest\n\nfrom buildbot import config\nfrom buildbot.process.results import CANCELLED\nfrom buildbot.process.results import EXCEPTION\nfrom buildbot.process.results import FAILURE\nfrom buildbot.process.results import SUCCESS\nfrom buildbot.process.results import WARNINGS\nfrom buildbot.reporters.notifier import NotifierBase\nfrom buildbot.test.fake import fakedb\nfrom buildbot.test.fake import fakemaster\nfrom buildbot.test.util.config import ConfigErrorsMixin\nfrom buildbot.test.util.misc import TestReactorMixin\nfrom buildbot.test.util.notifier import NotifierTestMixin\n\npy_27 = sys.version_info[0] > 2 or (sys.version_info[0] == 2\n                                    and sys.version_info[1] >= 7)\n\n\nclass TestMailNotifier(ConfigErrorsMixin, TestReactorMixin,\n                       unittest.TestCase, NotifierTestMixin):\n\n    def setUp(self):\n        self.setUpTestReactor()\n        self.master = fakemaster.make_master(self, wantData=True, wantDb=True,\n                                             wantMq=True)\n\n    @defer.inlineCallbacks\n    def setupNotifier(self, *args, **kwargs):\n        mn = NotifierBase(*args, **kwargs)\n        mn.sendMessage = Mock(spec=mn.sendMessage)\n        mn.sendMessage.return_value = \"<message>\"\n        yield mn.setServiceParent(self.master)\n        yield mn.startService()\n        return mn\n\n    def test_init_enforces_tags_and_builders_are_mutually_exclusive(self):\n        with self.assertRaises(config.ConfigErrors):\n            NotifierBase(tags=['fast', 'slow'], builders=['a', 'b'])\n\n    def test_init_warns_notifier_mode_all_in_iter(self):\n        with self.assertRaisesConfigError(\n               \"mode 'all' is not valid in an iterator and must be passed in as a separate string\"):\n            NotifierBase(mode=['all'])\n\n    @defer.inlineCallbacks\n    def test_buildsetComplete_sends_message(self):\n        _, builds = yield self.setupBuildResults(SUCCESS)\n        mn = yield self.setupNotifier(buildSetSummary=True,\n                                      mode=(\"failing\", \"passing\", \"warnings\"),\n                                      builders=[\"Builder1\", \"Builder2\"])\n\n        mn.buildMessage = Mock()\n        yield mn.buildsetComplete('buildset.98.complete',\n                                  dict(bsid=98))\n\n        mn.buildMessage.assert_called_with(\n            \"whole buildset\",\n            builds, SUCCESS)\n        self.assertEqual(mn.buildMessage.call_count, 1)\n\n    @defer.inlineCallbacks\n    def test_buildsetComplete_doesnt_send_message(self):\n        _, builds = yield self.setupBuildResults(SUCCESS)\n        # disable passing...\n        mn = yield self.setupNotifier(buildSetSummary=True,\n                                      mode=(\"failing\", \"warnings\"),\n                                      builders=[\"Builder1\", \"Builder2\"])\n\n        mn.buildMessage = Mock()\n        yield mn.buildsetComplete('buildset.98.complete',\n                                  dict(bsid=98))\n\n        self.assertFalse(mn.buildMessage.called)\n\n    @defer.inlineCallbacks\n    def test_isMessageNeeded_ignores_unspecified_tags(self):\n        _, builds = yield self.setupBuildResults(SUCCESS)\n\n        build = builds[0]\n        # force tags\n        build['builder']['tags'] = ['slow']\n        mn = yield self.setupNotifier(tags=[\"fast\"])\n        self.assertFalse(mn.isMessageNeeded(build))\n\n    @defer.inlineCallbacks\n    def test_isMessageNeeded_tags(self):\n        _, builds = yield self.setupBuildResults(SUCCESS)\n\n        build = builds[0]\n        # force tags\n        build['builder']['tags'] = ['fast']\n        mn = yield self.setupNotifier(tags=[\"fast\"])\n        self.assertTrue(mn.isMessageNeeded(build))\n\n    @defer.inlineCallbacks\n    def test_isMessageNeeded_schedulers_sends_mail(self):\n        _, builds = yield self.setupBuildResults(SUCCESS)\n\n        build = builds[0]\n        # force tags\n        mn = yield self.setupNotifier(schedulers=['checkin'])\n        self.assertTrue(mn.isMessageNeeded(build))\n\n    @defer.inlineCallbacks\n    def test_isMessageNeeded_schedulers_doesnt_send_mail(self):\n        _, builds = yield self.setupBuildResults(SUCCESS)\n\n        build = builds[0]\n        # force tags\n        mn = yield self.setupNotifier(schedulers=['some-random-scheduler'])\n        self.assertFalse(mn.isMessageNeeded(build))\n\n    @defer.inlineCallbacks\n    def test_isMessageNeeded_branches_sends_mail(self):\n        _, builds = yield self.setupBuildResults(SUCCESS)\n\n        build = builds[0]\n        # force tags\n        mn = yield self.setupNotifier(branches=['master'])\n        self.assertTrue(mn.isMessageNeeded(build))\n\n    @defer.inlineCallbacks\n    def test_isMessageNeeded_branches_doesnt_send_mail(self):\n        _, builds = yield self.setupBuildResults(SUCCESS)\n\n        build = builds[0]\n        # force tags\n        mn = yield self.setupNotifier(branches=['some-random-branch'])\n        self.assertFalse(mn.isMessageNeeded(build))\n\n    @defer.inlineCallbacks\n    def run_simple_test_sends_message_for_mode(self, mode, result, shouldSend=True):\n        _, builds = yield self.setupBuildResults(result)\n\n        mn = yield self.setupNotifier(mode=mode)\n\n        self.assertEqual(mn.isMessageNeeded(builds[0]), shouldSend)\n\n    def run_simple_test_ignores_message_for_mode(self, mode, result):\n        return self.run_simple_test_sends_message_for_mode(mode, result, False)\n\n    def test_isMessageNeeded_mode_all_for_success(self):\n        return self.run_simple_test_sends_message_for_mode(\"all\", SUCCESS)\n\n    def test_isMessageNeeded_mode_all_for_failure(self):\n        return self.run_simple_test_sends_message_for_mode(\"all\", FAILURE)\n\n    def test_isMessageNeeded_mode_all_for_warnings(self):\n        return self.run_simple_test_sends_message_for_mode(\"all\", WARNINGS)\n\n    def test_isMessageNeeded_mode_all_for_exception(self):\n        return self.run_simple_test_sends_message_for_mode(\"all\", EXCEPTION)\n\n    def test_isMessageNeeded_mode_all_for_cancelled(self):\n        return self.run_simple_test_sends_message_for_mode(\"all\", CANCELLED)\n\n    def test_isMessageNeeded_mode_failing_for_success(self):\n        return self.run_simple_test_ignores_message_for_mode(\"failing\", SUCCESS)\n\n    def test_isMessageNeeded_mode_failing_for_failure(self):\n        return self.run_simple_test_sends_message_for_mode(\"failing\", FAILURE)\n\n    def test_isMessageNeeded_mode_failing_for_warnings(self):\n        return self.run_simple_test_ignores_message_for_mode(\"failing\", WARNINGS)\n\n    def test_isMessageNeeded_mode_failing_for_exception(self):\n        return self.run_simple_test_ignores_message_for_mode(\"failing\", EXCEPTION)\n\n    def test_isMessageNeeded_mode_exception_for_success(self):\n        return self.run_simple_test_ignores_message_for_mode(\"exception\", SUCCESS)\n\n    def test_isMessageNeeded_mode_exception_for_failure(self):\n        return self.run_simple_test_ignores_message_for_mode(\"exception\", FAILURE)\n\n    def test_isMessageNeeded_mode_exception_for_warnings(self):\n        return self.run_simple_test_ignores_message_for_mode(\"exception\", WARNINGS)\n\n    def test_isMessageNeeded_mode_exception_for_exception(self):\n        return self.run_simple_test_sends_message_for_mode(\"exception\", EXCEPTION)\n\n    def test_isMessageNeeded_mode_warnings_for_success(self):\n        return self.run_simple_test_ignores_message_for_mode(\"warnings\", SUCCESS)\n\n    def test_isMessageNeeded_mode_warnings_for_failure(self):\n        return self.run_simple_test_sends_message_for_mode(\"warnings\", FAILURE)\n\n    def test_isMessageNeeded_mode_warnings_for_warnings(self):\n        return self.run_simple_test_sends_message_for_mode(\"warnings\", WARNINGS)\n\n    def test_isMessageNeeded_mode_warnings_for_exception(self):\n        return self.run_simple_test_ignores_message_for_mode(\"warnings\", EXCEPTION)\n\n    def test_isMessageNeeded_mode_passing_for_success(self):\n        return self.run_simple_test_sends_message_for_mode(\"passing\", SUCCESS)\n\n    def test_isMessageNeeded_mode_passing_for_failure(self):\n        return self.run_simple_test_ignores_message_for_mode(\"passing\", FAILURE)\n\n    def test_isMessageNeeded_mode_passing_for_warnings(self):\n        return self.run_simple_test_ignores_message_for_mode(\"passing\", WARNINGS)\n\n    def test_isMessageNeeded_mode_passing_for_exception(self):\n        return self.run_simple_test_ignores_message_for_mode(\"passing\", EXCEPTION)\n\n    @defer.inlineCallbacks\n    def run_sends_message_for_problems(self, mode, results1, results2, shouldSend=True):\n        _, builds = yield self.setupBuildResults(results2)\n\n        mn = yield self.setupNotifier(mode=mode)\n\n        build = builds[0]\n        if results1 is not None:\n            build['prev_build'] = copy.deepcopy(builds[0])\n            build['prev_build']['results'] = results1\n        else:\n            build['prev_build'] = None\n        self.assertEqual(mn.isMessageNeeded(builds[0]), shouldSend)\n\n    def test_isMessageNeeded_mode_problem_sends_on_problem(self):\n        return self.run_sends_message_for_problems(\"problem\", SUCCESS, FAILURE, True)\n\n    def test_isMessageNeeded_mode_problem_ignores_successful_build(self):\n        return self.run_sends_message_for_problems(\"problem\", SUCCESS, SUCCESS, False)\n\n    def test_isMessageNeeded_mode_problem_ignores_two_failed_builds_in_sequence(self):\n        return self.run_sends_message_for_problems(\"problem\", FAILURE, FAILURE, False)\n\n    def test_isMessageNeeded_mode_change_sends_on_change(self):\n        return self.run_sends_message_for_problems(\"change\", FAILURE, SUCCESS, True)\n\n    def test_isMessageNeeded_mode_change_sends_on_failure(self):\n        return self.run_sends_message_for_problems(\"change\", SUCCESS, FAILURE, True)\n\n    def test_isMessageNeeded_mode_change_ignores_first_build(self):\n        return self.run_sends_message_for_problems(\"change\", None, FAILURE, False)\n\n    def test_isMessageNeeded_mode_change_ignores_first_build2(self):\n        return self.run_sends_message_for_problems(\"change\", None, SUCCESS, False)\n\n    def test_isMessageNeeded_mode_change_ignores_same_result_in_sequence(self):\n        return self.run_sends_message_for_problems(\"change\", SUCCESS, SUCCESS, False)\n\n    def test_isMessageNeeded_mode_change_ignores_same_result_in_sequence2(self):\n        return self.run_sends_message_for_problems(\"change\", FAILURE, FAILURE, False)\n\n    @defer.inlineCallbacks\n    def setupBuildMessage(self, **mnKwargs):\n\n        _, builds = yield self.setupBuildResults(SUCCESS)\n\n        mn = yield self.setupNotifier(**mnKwargs)\n\n        mn.messageFormatter = Mock(spec=mn.messageFormatter)\n        mn.messageFormatter.formatMessageForBuildResults.return_value = {\"body\": \"body\", \"type\": \"text\",\n                                                                         \"subject\": \"subject\"}\n        yield mn.buildMessage(\"mybldr\", builds, SUCCESS)\n        return (mn, builds)\n\n    @defer.inlineCallbacks\n    def test_buildMessage_nominal(self):\n        mn, builds = yield self.setupBuildMessage(mode=(\"change\",))\n\n        build = builds[0]\n        mn.messageFormatter.formatMessageForBuildResults.assert_called_with(\n            ('change',), 'mybldr', build['buildset'], build, self.master,\n            None, ['me@foo'])\n\n        self.assertEqual(mn.sendMessage.call_count, 1)\n        mn.sendMessage.assert_called_with('body', 'subject', 'text', 'mybldr', SUCCESS, builds,\n                                          ['me@foo'], [], [])\n\n    @defer.inlineCallbacks\n    def test_buildMessage_addLogs(self):\n        mn, builds = yield self.setupBuildMessage(mode=(\"change\",), addLogs=True)\n        self.assertEqual(mn.sendMessage.call_count, 1)\n        # make sure the logs are send\n        self.assertEqual(mn.sendMessage.call_args[0][8][0]['logid'], 60)\n        # make sure the log has content\n        self.assertIn(\n            \"log with\", mn.sendMessage.call_args[0][8][0]['content']['content'])\n\n    @defer.inlineCallbacks\n    def test_buildMessage_addPatch(self):\n        mn, builds = yield self.setupBuildMessage(mode=(\"change\",), addPatch=True)\n        self.assertEqual(mn.sendMessage.call_count, 1)\n        # make sure the patch are sent\n        self.assertEqual(mn.sendMessage.call_args[0][7],\n                         [{'author': 'him@foo',\n                           'body': b'hello, world',\n                           'comment': 'foo',\n                           'level': 3,\n                           'patchid': 99,\n                           'subdir': '/foo'}])\n\n    @defer.inlineCallbacks\n    def test_buildMessage_addPatchNoPatch(self):\n        SourceStamp = fakedb.SourceStamp\n\n        class NoPatchSourcestamp(SourceStamp):\n\n            def __init__(self, id, patchid):\n                super().__init__(id=id)\n        self.patch(fakedb, 'SourceStamp', NoPatchSourcestamp)\n        mn, builds = yield self.setupBuildMessage(mode=(\"change\",), addPatch=True)\n        self.assertEqual(mn.sendMessage.call_count, 1)\n        # make sure no patches are sent\n        self.assertEqual(mn.sendMessage.call_args[0][7], [])\n\n    @defer.inlineCallbacks\n    def test_workerMissingSendMessage(self):\n\n        mn = yield self.setupNotifier(watchedWorkers=['myworker'])\n\n        yield mn.workerMissing('worker.98.complete',\n                               dict(name='myworker',\n                                    notify=[\"workeradmin@example.org\"],\n                                    workerinfo=dict(admin=\"myadmin\"),\n                                    last_connection=\"yesterday\"))\n\n        self.assertEqual(mn.sendMessage.call_count, 1)\n        text = mn.sendMessage.call_args[0][0]\n        recipients = mn.sendMessage.call_args[1]['users']\n        self.assertEqual(recipients, ['workeradmin@example.org'])\n        self.assertIn(\n            b\"has noticed that the worker named myworker went away\", text)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import necessary libraries\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, accuracy_score\nfrom sklearn.svm import SVC\n\n#load the dataset\ndataset = datasets.load_iris()\n\n#split the data into train and test datasets\nx_train, x_test, y_train, y_test = train_test_split(dataset.data, dataset.target, \n                                                    test_size=0.2, random_state=42)\n\n#build the model\nsvc = SVC()\nsvc.fit(x_train, y_train)\n\n#predict for test data\ny_pred = svc.predict(x_test)\n\n#evaluate the model\naccuracy = accuracy_score(y_test, y_pred)\nprint('accuracy: ', accuracy)\n\nprint(classification_report(y_test, y_pred)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def power_iterative(n, exponent):\n  # First, set an initial product value\n  product = 1\n  # Iterate up to the desired power\n  for _ in range(exponent):\n    product *= n\n  # Return the product\n  return product\n\npower = power_iterative(3, 4)\nprint(power) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify(animal):\n    if animal == \"hummingbird\":\n        return \"Bird\" \n    else:\n        return \"Mammal\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nDevelop a program to detect and remove a given pattern in a string\n\ndef remove_pattern(string, pattern):\n    # Replace the pattern in the string with an empty string \n    modified_string = string.replace(pattern, '')\n    \n    return modified_string\n\nif __name__ == '__main__':\n    string = 'I am learning Python programming'\n    pattern = 'learning'\n    print(remove_pattern(string, pattern))\n\"\"\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for num in range (0, 1000):\n    order = len(str(num))\n    s = 0\n    x = num\n    while x > 0:\n        d = x % 10\n        x = x // 10\n        s += d ** order\n    if num == s:\n        print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class InputValidator:\n    def __init__(self, userInput):\n        self.userInput = userInput\n \n    def is_valid_quantity(self):\n        try:\n            int(self.userInput) # Check if user input is an integer.\n            return True\n        except ValueError:\n            return False\n\n# Create a class instance\ninputValidator = InputValidator(\"10\") \nresult = inputValidator.is_valid_quantity()\nprint(result) # Displays True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Get the HTML from the URL\nurl = \"https://www.reddit.com/r/ProgrammerHumor/comments/hfpmoo/people_ask_me_why_i_learn_so_many_programming/\"\nresponse = requests.get(url)\n\n# Parse the HTML\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# Get all the comments from the page\ncomments = []\nfor comment in soup.find_all(\"div\", class_=\"md\"):\n    comments.append(comment.text)\n\n# Print all the comments\nfor comment in comments:\n    print(comment) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sphere_surfacearea(radius):\n    \"\"\"\n    Calculates surface area of a sphere given its radius\n    :param radius: Radius of sphere\n    :return: Surface area of a sphere\n    \"\"\"\n    return 4 * math.pi * (radius ** 2)\n\ndef sphere_volume(radius):\n    \"\"\"\n    Calculates the volume of a sphere given its radius\n    :param radius: Radius of sphere\n    :return: Volume of a sphere\n    \"\"\"\n    return (4 / 3) * math.pi * (radius ** 3) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(5, 16): \n    print (i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(list):\n    for i in range(len(list)):\n        for j in range(len(list)-1):\n            if list[j]>list[j+1]:\n                list[j],list[j+1] = list[j+1],list[j]\n    return list\n\nif __name__ == '__main__':\n    list = [3,5,2,4,7,5]\n    print(bubble_sort(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n    def __init__(self, first_name, last_name):\n        self.first_name = first_name\n        self.last_name = last_name\n\nperson = Person(\"John\", \"Doe\")\nprint(person.first_name, person.last_name) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def levenshteinDistance(str1, str2): \n    m = len(str1) \n    n = len(str2) \n    dp = [[0 for x in range(n + 1)] for x in range(m + 1)] \n  \n# base cases \n    for i in range(m + 1): \n        dp[i][0] = i \n    for j in range(n + 1): \n        dp[0][j] = j\n  \n    # fill the dp table \n    for i in range(1, m + 1): \n        for j in range(1, n + 1): \n            if str1[i - 1] == str2[j - 1]: \n                dp[i][j] = dp[i - 1][j - 1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j - 1],        # Insert \n                                   dp[i - 1][j],        # Remove \n                                   dp[i - 1][j - 1])    # Replace \n  \n    return dp[m][n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(arr):\n  seen = set()\n  result = []\n\n  for item in arr:\n    if item not in seen:\n      seen.add(item)\n      result.append(item)\n\n  return result\n\narr = [1, 8, 10, 4, 1, 8, 8]\n\nprint(remove_duplicates(arr)) # Output: [1, 8, 10, 4] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\nboard = np.array([[0, 0, 0],\n [0, 0, 0],\n [0, 0, 0]])\n\ndef is_valid(x, y):\n return 0 <= x < 3 and 0 <= y < 3\n\ndef make_move(player, x, y):\n if is_valid(x, y):\n board[x, y] = player\n else:\n raise ValueError(\"Invalid move\")\n\ndef check_victory():\n xs, ys = np.where(board == 0)\n # Check vertically\n vertical = board == board.T\n # Check diagonally\n diagonal = np.diag(board).all() or np.diag(np.flipud(board)).all()\n \n if any(vertical) or diagonal:\n return True\n \n return False\n\ndef ai_make_move(player):\n xs, ys = np.where(board == 0)\n for x, y in zip(xs, ys):\n board[x, y] = player\n if check_victory():\n return\n board[x, y] = 0 # Reset\n\nif __name__ == \"__main__\":\n # Set the board state\n board = np.array([[1, 0, -1],\n [-1, 1, 0],\n [0, 0, 1]])\n\n # AI player\n ai_make_move(-1)\n print(board) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Create an empty list\ndata = []\n\n# Generate 20 names and ages\nfor i in range(20):\n name = 'Name ' + str(i)\n age = random.randint(18, 70)\n\n# Append the data to the list\n data.append([name, age])\n\n# Print out the list\nprint(data)\n\n# [['Name 0', 64],\n#  ['Name 1', 18],\n#  ['Name 2', 24],\n#  ['Name 3', 36],\n#  ['Name 4', 34],\n#  ['Name 5', 28],\n#  ['Name 6', 56],\n#  ['Name 7', 42],\n#  ['Name 8', 68],\n#  ['Name 9', 24],\n#  ['Name 10', 50],\n#  ['Name 11', 20],\n#  ['Name 12', 54],\n#  ['Name 13', 40],\n#  ['Name 14', 61],\n#  ['Name 15', 40],\n#  ['Name 16', 41],\n#  ['Name 17', 38],\n#  ['Name 18', 56],\n#  ['Name 19', 41]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# define the url\nurl = \"https://www.example.com/titles\"\n\n# send the request and get the response\nresponse = requests.get(url)\n\n# parse the response\nsoup = BeautifulSoup(response.content, 'html.parser')\n\n# find all the <h3> elements in the page\nh3_elements = soup.find_all('h3')\n\n# extract the titles from the <h3> elements and print them\nfor element in h3_elements:\n print(element.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# fetch the html from the BBC news website\nhtml = requests.get('https://www.bbc.co.uk/news').content\nsoup = BeautifulSoup(html, 'html.parser')\n\n# extract the titles and URLs of the trending news stories\ntrending_stories = soup.find('div', {'aria-label': 'Top stories'})\nstories = trending_stories.find_all('div', class_='gs-container gs-u-ph-')\n\ntitles = [s.find('h3', {'class': 'gs-u-mb-0'}).get_text() for s in stories]\nurls = [s.find('a')['href'] for s in stories]\n\n# print the titles and URLs\nfor title, url in zip(titles, urls):\n print(title, url) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortString(inputString): \n  \n    words = inputString.split() \n    words.sort() \n  \n    for i in words: \n        print(i) \n          \nsortString(inputString) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def create_tree(max_depth):\n    depth = random.randint(0, max_depth)\n    if depth == 0:\n        return random.choice([0, 1])\n    else:\n        left = create_tree(depth - 1)\n        right = create_tree(depth - 1)\n        return (left, right) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def avg(list): \n\tsum = 0\n\tfor item in list:\n\t\tsum += item \n\treturn sum / len(list) \n\nlist1 = [7, 8, 10, 4, 11]\nresult = avg(list1) \n  \nprint(\"Average of all items: \", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_permutation(s1, s2):\n    s1 = s1.lower() # Convert both strings to lowercase\n    s2 = s2.lower()\n    if len(s1) != len(s2):\n        return False # If the lengths are not equal, the strings must not be permutations\n    for c in s1:\n        if c not in s2: # Check if every character in s1 appears in s2\n            return False\n    return True\n\nresult = is_permutation(\"hello\", \"lloeh\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [-3, -2, 0, 4, 5]\n\nlist = [x for x in list if x >= 0] \n\nprint(list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortArray(list): \n    for i in range(len(list)-1):\n        minIndex = i \n        for j in range(i+1, len(list)):\n            if list[minIndex] > list[j]:\n                minIndex = j \n        list[i], list[minIndex] = list[minIndex], list[i]\n    return list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\nrandom_numbers = np.random.uniform(0, 1, 100000) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_similarity_score(str1, str2):\n    str1_words = str1.split()\n    str2_words = str2.split()\n\n    common_words = set(str1_words).intersection(str2_words)\n    num_common_words = len(common_words)\n\n    score = num_common_words / len(str1_words) * len(str2_words)\n    return score but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef square_root(num):\n    return math.sqrt(num)\n\nnum = 49\nprint(\"Square root of \", num, \" is: \", square_root(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Multiply(a, b):\n    product = 0\n    i = 0 \n    while i < b:\n        product = product + a\n        i = i + 1\n    return product but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: x is an integer, name is a string, and y is a list. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The purpose of Python decorators is to modify a function's behavior without having to change the actual function's code. Decorators are functions, or objects that respond to a function call, that are applied to other functions. They can be used to modify existing functions by wrapping them in a layer of additional logic. For example, a decorator function might be used to add debug code to print out a function's arguments, or to make sure that a function is only called with the correct number and type of arguments. Decorators can also be used to cache the results of a function so that it does not need to be recalculated each time it is called. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Load libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\n\n# Load dataset\ndata = pd.read_csv('basketball_players.csv')\n\n# Split into features and target\nX = data.drop(columns=['position'])\ny = data['position'] \n\n# Split into train and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=1)\n\n# Fit Naive Bayes classifier\nmodel = GaussianNB()\nmodel.fit(X_train, y_train) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.cluster import KMeans\nimport numpy as np\n\n# generate dataset\nX = np.array([[2, 34], [3, 4], [7, 24], [5, 14], [8, 22], [10, 21]])\n\n# train K-Means\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\n# assign clusters\nclusters = kmeans.predict(X)\n\n# print data with respective clusters\nprint(\"Data | Cluster\")\nfor i in range(len(X)):\n print(X[i], \"|\", clusters[i]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #! /usr/bin/env python\n\n# Written by Vasaant S/O Krishnan Friday, 19 May 2017\n# Run without arguments for instructions.\n\nimport sys\nusrFile = sys.argv[1:]\n\nif len(usrFile) == 0:\n    print \"\"\n    print \"# Script to read in file of the CODA format and perform some basic\"\n    print \"# statistical computations. An index.txt and chain.txt file must be\"\n    print \"# provided and the script will automatically identify them for internal\"\n    print \"# use. Options are:\"\n    print \"\"\n    print \"# print = Outputs mean, std and confidence interval (default 95%).\"\n    print \"# var   = Specify your required variable for hist, trace.\"\n    print \"# per   = Specify your required confidence interval (requires var=).\"\n    print \"# hist  = Plot histogram (requires var=).\"\n    print \"# bins  = Choose bin size (default bins=100)\"\n    print \"# trace = Trace plot (requires var=).\"\n    print \"\"\n    print \" -->$ coda-script.py CODAindex.txt CODAchain.txt per=xx var=xx bins=xx print hist trace\"\n    print \"\"\n    exit()\n\nimport re\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.mlab as mlab\n\n\n\n#=====================================================================\n#   Define variables.\n#\nints         = '\\s+?([+-]?\\d+)'              # Integers for regex\n#floats       = '\\s+?([+-]?\\d+(?:\\.\\d+)?)'    # Floats or int\nfloats       = '\\s+?([+-]?\\d+(?:\\.\\d+)?|\\.\\d+)([eE][+-]?\\d+)?'    # Floats or int or scientific\ncodaFiles    = []                            # CODAindex and CODAchain files\nindexFileFnd = False                         # CODAindex file identified?\nchainFileFnd = False                         # CODAchain file identified?\nindexCodes   = {}                            # Dictionary containing CODAindex info.\n# chainIndx    = []                          # Indexes/Column 1 of CODAchain.txt file\nchainData    = []                            #    Data/Column 2 of CODAchain.txt file\npercentile   = 95.0                          # Default percentile\nbins         = 100                           # Default number of bins for histogram\nreqIndxCode  = ''                            # User requested varible for hist, trace\n#=====================================================================\n\n\n\n#=====================================================================\n#   Determine which are the CODAindex and CODAchain files and\n#   automatically assign them to their respective variables.\n#\nfor i in usrFile:\n    codaSearch = re.search('.txt',i)\n    if codaSearch:\n        codaFiles.append(i)\n\nif len(codaFiles) == 2:    # Assuming 1 index and 1 chain file\n    for j in codaFiles:\n        with open(j,'r') as chkTyp:    # Run a quick check on the first line only\n            firstLine = chkTyp.readline()\n            codaIndex = re.search('^(\\S+)' + ints   + ints + '$', firstLine)\n            codaChain = re.search('^(\\d+)' + floats +        '$', firstLine)\n            if codaIndex:\n                indexFile = j\n                indexFileFnd = True\n            if codaChain:\n                chainFile = j\n                chainFileFnd = True\nelse:\n    print \"Insfficient files of CODA*.txt format.\"\n    print \"Check your input files.\"\n#=====================================================================\n\n\n\n#=====================================================================\n#   Determine percentile\n#\nfor i in usrFile:\n    userPercentile = re.search('per=([+-]?\\d+(?:\\.\\d+)?)',i)\n    if userPercentile:\n        percentile = abs(float(userPercentile.group(1)))\n        usrFile.append('print')\n#=====================================================================\n\n\n\n#=====================================================================\n#   Determine user requested variable from CODAIndex file\n#\nfor i in usrFile:\n    userReqCodaIndx = re.search('var=(\\S+)',i)\n    if userReqCodaIndx:\n        reqIndxCode = str(userReqCodaIndx.group(1))\n\n#   ... same for number of bins:\nfor i in usrFile:\n    userReqBins = re.search('bins=(\\d+)',i)\n    if userReqBins:\n        bins = int(userReqBins.group(1))\n        usrFile.append('hist')\n#=====================================================================\n\n\n\nif indexFileFnd and chainFileFnd:\n    #=====================================================================\n    #    Harvest index file for the variable list and corresponding\n    #    [start,stop] coords:\n    #\n    for line in open(indexFile, 'r'):\n        reqIndex = re.search('^(\\S+)' + ints   + ints + '$', line)\n        if reqIndex:\n            key   =  str(reqIndex.group(1))\n            value = [int(reqIndex.group(2)), int(reqIndex.group(3))]\n        indexCodes[key] = value\n\n    maxElement = max(indexCodes, key = indexCodes.get)    # The key with the largest value\n    chainLen   = max(indexCodes[maxElement])              # The largest value (expected amt. of data)\n    #=====================================================================\n\n\n\n    #=====================================================================\n    #    I thought that initialising the arrays before filling them\n    #    would be faster. It is not.\n    #\n    # chainIndx = np.zeros(chainLen)\n    # chainData = np.zeros(chainLen)\n    # with open(chainFile, 'r') as harvestVals:\n    #     for i in range(chainLen):\n    #         currLine = harvestVals.readline()\n    #         reqChain = re.search('^(\\d+)' + floats + '$', currLine)\n    #         if reqChain:\n    #             chainIndx[i] =   int(reqChain.group(1))\n    #             chainData[i] = float(reqChain.group(2))\n    #=====================================================================\n\n\n\n    #=====================================================================\n    #    Harvest chain file\n    #\n    for line in open(chainFile, 'r'):\n        reqChain = re.search('^(\\d+)' + floats + '$', line)\n        if reqChain:\n            #chainIndx.append(  int(reqChain.group(1)))\n            chainData.append(float(reqChain.group(2)))\n    #chainIndx = np.array(chainIndx)\n    chainData = np.array(chainData)\n    #=====================================================================\n\n\n\n    #=====================================================================\n    #    Basic check on the harvest by comparing harvested vs. expected\n    #    no. of data.\n    #\n    if len(chainData) != chainLen:\n        print \"    Warning! \"\n        print \"    %10d lines expected  from %s.\"%(chainLen,indexFile)\n        print \"    %10d lines harvested from %s.\"%(len(chainData),chainFile)\n    #=====================================================================\n\n\n\n    #=====================================================================\n    #    Output some basic statistics to the terminal.\n    #\n    if 'print' in usrFile:\n        print \"\\n%20s %10s %10s\"%(\"mean\",\"std\",str(percentile)+\"%\")\n        for i in indexCodes:\n            strtIndx = indexCodes[i][0] - 1    # Python starts from 0. CODAindex from 1\n            stopIndx = indexCodes[i][1]        # ... but np.array needs this to get to the end\n\n            npPerTile = np.percentile(chainData[strtIndx:stopIndx],[0,percentile])    # Numpy sorts internally\n            minPer    = npPerTile[0]\n            maxPer    = npPerTile[1]\n            print \"%8s  %10.4f %10.4f %6d, %6.3f\"%(i, chainData[strtIndx:stopIndx].mean(),\n                                                      chainData[strtIndx:stopIndx].std(),\n                                                     minPer,maxPer\n                                                  )\n        print \"\"\n    #=====================================================================\n\n\n\n    #=====================================================================\n    #    Trace plot that gives the variable value as a function of its\n    #    rank (or position in the chain)\n    #\n    if 'trace' in usrFile:\n        if reqIndxCode != '':\n            for i in indexCodes:\n                if reqIndxCode == i:\n                    strtIndx = indexCodes[i][0] - 1    # Python starts from 0. CODAindex from 1\n                    stopIndx = indexCodes[i][1]        # ... but np.array needs this to get to the end\n                    traceRank = range(stopIndx-strtIndx)\n                    plt.plot(traceRank,chainData[strtIndx:stopIndx])\n                    plt.xlabel('Rank')\n                    plt.ylabel('Variable: '+i)\n                    plt.show()\n        else:\n            print \"No variable selected by user for trace plot.\"\n    #=====================================================================\n\n\n\n    #=====================================================================\n    #    Histogram\n    #\n    if 'hist' in usrFile:\n        if reqIndxCode != '':\n            for i in indexCodes:\n                if reqIndxCode == i:\n                    strtIndx = indexCodes[i][0] - 1    # Python starts from 0. CODAindex from 1\n                    stopIndx = indexCodes[i][1]        # ... but np.array needs this to get to the end\n                    [n, bins, patches] = plt.hist(chainData[strtIndx:stopIndx],\n                                                  bins    =  bins,\n                                                  normed  =  True,\n                                                  histtype= 'step'\n                                                  )\n\n                    y = mlab.normpdf(bins, chainData[strtIndx:stopIndx].mean(),\n                                           chainData[strtIndx:stopIndx].std()\n                                     )\n\n                    npPerTile = np.percentile(chainData[strtIndx:stopIndx],[0,percentile])\n                    maxPer    = npPerTile[1]\n                    plt.axvline(x=maxPer, color='k', label=str(percentile)+'%',ls=':',lw=0.8)\n\n                    plt.plot(bins,y,'--')\n                    plt.ylabel('Variable: '+i)\n                    plt.legend(frameon=False)\n                    plt.show()\n        else:\n            print \"No variable selected by user for histogram.\"\n    #=====================================================================\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: joined_string = 'Programmingpython' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ninput_string = \"Hello World\"\n\n#Split the given string\nstring_list = list(input_string)\nrandom.shuffle(string_list)\n\n#Form the scrambled string\nscrambled_string = \"\".join(string_list) \n\nprint(\"Scrambled string:\",scrambled_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(5):\n  print(\"Welcome\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from spellchecker import SpellChecker\n\nspell = SpellChecker() \n\n# Find all the possible words that are misspelled\nmisspelled = spell.unknown(text.split())\n\n# Print out each misspelled word and its correction\nfor word in misspelled:\n    print(f'Incorrect word: {word}\\tCorrection: {spell.correction(word)}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import itertools\n\nset_ABC = set(list('ABC'))\nall_permutations = list(itertools.permutations(set_ABC))\n\n# print all obtained permutations\n{print(''.join(words)) for words in all_permutations} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import statistics\ndef calculate_std_dev(arr):\n\treturn statistics.stdev(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_password(length=8):\n password = ''.join(random.choice(string.ascii_letters + string.digits + string.punctuation) for i in range(length))\n return password\n\nlength = int(input('Please enter a length for the passwords (minimum 8 characters): '))\nfor i in range(10):\n print(generate_password(length)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_isomorphic(s1, s2):\n    if len(s1) != len(s2):\n        return False\n\n    s1_dict = dict()\n    for i, char in enumerate(s1):\n        if char in s1_dict:\n            if s1_dict[char] != s2[i]:\n                return False\n        else:\n            s1_dict[char] = s2[i]\n\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\ndef most_frequent(input_list):\n    count = Counter(input_list)\n    max_freq = max(count.values())\n    for num, freq in count.items():\n        if freq == max_freq:\n            most_frequent_element = num\n    return most_frequent_element\n\nresult = most_frequent([2, 3, 4, 2, 5, 3])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: word = input('Enter word: ')\n\nif word.lower() == 'super':\n print('Object found') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_sum_even_factors(n):\n    sum = 0\n    for i in range(2, n+1):\n        if (n % i == 0) and (i % 2 == 0):\n            sum = sum + i\n    return sum\n\n# Test \ninput_num = 50\nprint(get_sum_even_factors(input_num)) # returns 196 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Game Options\nROCK = 'rock'\nPAPER = 'paper'\nSCISSORS = 'scissors'\ngame_options = [ROCK, PAPER, SCISSORS]\n\n# Game logic which determines the winner\ndef find_winner(player_option, computer_option):\nif player_option == computer_option:\n return 'draw'\n\nif player_option == ROCK:\n if computer_option == PAPER:\n  return 'computer'\n else:\n  return 'player'\n\nif player_option == PAPER:\n if computer_option == SCISSORS:\n  return 'computer'\n else:\n  return 'player'\n\nif player_option == SCISSORS:\n if computer_option == ROCK:\n  return 'computer'\n else:\n  return 'player'\n\n# Main game loop\nwhile True:\n# Get user input\nplayer_option = input('Enter Rock, Paper, or Scissors: ').lower()\n\n# Check to make sure input is valid\nif player_option in game_options:\n\n# Get computer's option\ncomputer_option = random.choice(game_options)\n\n# Print out computer's option\nprint(f'Computer chose {computer_option}')\n\n# Determine the winner\nwinner = find_winner(player_option, computer_option)\n\n# Print out the winner\nif winner == 'computer':\n print('Computer won!')\nelif winner == 'player':\n print('Congratulations, you won!')\nelse:\n print('It was a draw!')\n\n# Check if player wants to play another game\nplay_again = input('Do you want to play again? [y/n] ')\nif play_again == 'n':\n break\n\nelse:\n print('Please enter a valid option.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def odd_count(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if i%2 != 0:\n            count += 1\n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [1, 2, 3, 4]\n\nprint(len(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_binary(n):\n if n == 0:\n  return\n \n print_binary(n-1)\n print(bin(n))\n \nprint_binary(3)\n \n# Output: \n# 0b1\n# 0b10\n# 0b11 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(lst): \n\treturn list(set(lst)) \nremove_duplicates([1,1,3,4,4,5]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\n# read dataset\ndataset = pd.read_csv('customer_churn.csv')\n\n# separate features(X) and labels (y)\ny = dataset.churn\nX = dataset.drop('churn', axis=1)\n\n# split dataset into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n\n# create and train the model\nmodel = LogisticRegression(solver='liblinear').fit(X_train, y_train)\n\n# predict using the model\ny_pred = model.predict(X_test)\n\n# calculate accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint('accuracy: ', accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: [\u2018Python\u2019, \u2018is\u2019, \u2018a\u2019, \u2018programming\u2019, \u2018language\u2019] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import gym\nimport numpy as np\n\nfrom stable_baselines.common.policies import MlpPolicy\nfrom stable_baselines.common.vec_env import DummyVecEnv\nfrom stable_baselines import PPO2\n\n# Training hyperparameters\nn_timesteps = 500000\n\n# Create the environment\nenv = gym.make('Tetris-v0')\nenv = DummyVecEnv([lambda: env])\n\n# Create the agent\nmodel = PPO2(MlpPolicy, env, n_timesteps=n_timesteps)\n\n# Train the agent\nmodel.learn(total_timesteps=n_timesteps)\n\n# Test the agent\nenv.reset()\nstate, done = env.reset(), False\ntotal_reward = 0\n\nwhile not done:\n    action, _states = model.predict(state)\n    state, reward, done, info = env.step(action)\n    total_reward += reward # accumulate the reward\n\nprint('Total Reward: ', total_reward) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def area_triangle(base, height):\n    return (base * height) / 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # define the function\ndef calculate_probability(probability_data, event):\n # define the probability of the event\n probability = 0\n\n # iterate over each probability in the data\n for p in probability_data:\n # check if the event matches\n if event == p:\n # add the probability to the sum\n probability += p\n\n # return the calculated probability\n return probability\n\n# the input\nprobability_data = [0.4, 0.6, 0.2, 0.9]\nevent = \"A\"\n\n# call the function\nprobability = calculate_probability(probability_data, event)\n\n# print the result\nprint(f\"The probability of event {event} happening is {probability}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import the necessary packages\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Dropout\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom keras.optimizers import Adam\nfrom sklearn.model_selection import train_test_split\n\n# Create the neural network\ndef build_model(input_dim):\n    model = Sequential()\n    model.add(Dense(64,input_dim=input_dim, activation='relu'))\n    model.add(Dropout(0.4))\n    model.add(Dense(32, activation='relu'))\n    model.add(Dropout(0.4))\n    model.add(Dense(2, activation='softmax'))\n    model.compile(loss='categorical_crossentropy', optimizer=Adam(lr=0.001),\n    metrics=['accuracy'])\n    return model\n\n# Load and prepare the data\nX = np.load(\"x_data.npy\")\ny = np.load(\"y_data.npy\")\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Initialize the model and train it\ninput_dim = X_train.shape[1]\nmodel = KerasClassifier(build_fn=lambda: build_model(input_dim))\nmodel.fit(X_train, y_train, epochs=22, batch_size=32, verbose=1)\n\n# Evaluate the model accuracy\naccuracy = model.score(X_test, y_test)\nprint(\"Accuracy: \", accuracy)\n##\n\n6. Instruction: Create a react app for a small business website. The app should include an About Us page, a Contact Us page, and pages for each of the services offered by the business.\n\n6. Input:\nNot applicable\n\n6. Output:\nimport React from 'react';\nimport {\n  Route,\n  Link,\n  Switch\n} from 'react-router-dom';\n\nimport './App.css';\nimport './AboutUs.css';\nimport './ContactUs.css';\nimport './Services.css';\n\nimport AboutUs from './AboutUs.js';\nimport ContactUs from './ContactUs.js';\nimport Services from './Services.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Business Name</h1>\n        <nav>\n          <Link to=\"/\">Home</Link>\n          <Link to=\"/about-us\">About Us</Link>\n          <Link to=\"/contact-us\">Contact Us</Link>\n        </nav>\n      </header>\n      <Switch>\n        <Route path=\"/\" exact>\n          <Services />\n        </Route>\n        <Route path=\"/about-us\">\n          <AboutUs />\n        </Route>\n        <Route path=\"/contact-us\">\n          <ContactUs />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App; but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def lcs(a, b): \n    lengths = [[0 for j in range(len(b)+1)] for i in range(len(a)+1)] \n    \n    # row 0 and column 0 are initialized to 0 already \n    for i, x in enumerate(a): \n        for j, y in enumerate(b): \n            if x == y: \n                lengths[i+1][j+1] = lengths[i][j] + 1\n            else: \n                lengths[i+1][j+1] = \\\n                    max(lengths[i+1][j], lengths[i][j+1]) \n  \n    # read the substring out from the matrix \n    result = \"\" \n    x, y = len(a), len(b) \n    while x != 0 and y != 0: \n        if lengths[x][y] == lengths[x-1][y]: \n            x -= 1\n        elif lengths[x][y] == lengths[x][y-1]: \n            y -= 1\n        else: \n            assert a[x-1] == b[y-1] \n            result = a[x-1] + result \n            x -= 1\n            y -= 1\n              \n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def detect_spam(email):\n  \"\"\"This function uses a combination of keyword matching, regex pattern matching \n  and machine learning algorithms to detect spam emails.\"\"\"\n  \n  # Keyword matching\n  spam_keywords = [\"unsubscribe\", \"offer\", \"discount\", \"special\"]\n  for keyword in spam_keywords:\n    if keyword in email:\n      return 1\n  \n  # Regex pattern matching\n  spam_pattern = r\"\\d{5}-\\d{5}-\\d{5}-\\d{5}\"\n  matches = re.search(spam_pattern, email)\n  if matches:\n    return 1\n  \n  # Machine learning\n  # Train a machine learning model and predict whether or not the given email is a spam\n  \n  return 0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_password():\n  password_length = 12\n  char_list = list(string.ascii_letters) + list(string.digits) + list(string.punctuation)\n  random.shuffle(char_list)\n  return ''.join(char_list[:password_length])\n\nprint(generate_password()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(s1, s2):\n    # Sort the strings \n    s1 = sorted(s1) \n    s2 = sorted(s2) \n  \n    # If sorted strings are equal \n    return s1 == s2 \n  \n# Driver code \ns1 = \"listen\"\ns2 = \"silent\"\nif (is_anagram(s1, s2)): \n    print(\"The strings are anagrams.\") \nelse: \n    print(\"The strings aren't anagrams.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(string): \n    return string[::-1] \n    \n# Time Complexity: O(n)\n# Space Complexity: O(1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef scrape_tags(text):\n regex = r\"<h1>(.*?)</h1>(.*?)<p>(.*?)</p>\"\n result = re.findall(regex, text)\n\n if result:\n return result[0][2]\n else:\n return None\n\ntext = '<h1>This is a title</h1>Some text before the tags<p>This should be scraped</p>Some text after the tags'\nprint(scrape_tags(text)) # This should be scraped but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nHangman Game in Python\n\"\"\"\n \nimport random\n \ndef get_word(): \n\twords = [\"television\", \"hydrogen\", \"graduate\", \"programming\", \"python\", \"puppy\", \"application\"] \n\treturn random.choice(words) \n \ndef play(word): \n\tword_completion = \"_\" * len(word) \n\tguessed = False\n\tguessed_letters = [] \n\tguessed_words = [] \n\ttries = 6\n\tprint(\"Let's play Hangman!\") \n\tprint(display_hangman(tries)) \n\tprint(word_completion) \n\tprint(\"\\n\")\n\t\n\twhile not guessed and tries > 0: \n\t\tguess = input(\"Please guess a letter or word: \").lower() \n\t\tif len(guess) == 1 and guess.isalpha(): \n\t\t\tif guess in guessed_letters: \n\t\t\t\tprint(\"You already guessed the letter\", guess) \n\t\t\telif guess not in word: \n\t\t\t\tprint(guess, \"is not in the word.\") \n\t\t\t\ttries -= 1\n\t\t\t\tguessed_letters.append(guess) \n\t\t\telse: \n\t\t\t\tprint(\"Good job,\", guess, \"is in the word!\") \n\t\t\t\tguessed_letters.append(guess) \n\t\t\t\tword_as_list = list(word_completion) \n\t\t\t\tindices = [i for i, letter in enumerate(word) \n\t\t\t\t\t\t\tif letter == guess] \n\t\t\t\tfor index in indices: \n\t\t\t\t\tword_as_list[index] = guess \n\t\t\t\tword_completion = \"\".join(word_as_list) \n\t\t\t\tif \"_\" not in word_completion: \n\t\t\t\t\tguessed = True\n\t\telif len(guess) == len(word) and guess.isalpha(): \n\t\t\tif guess in guessed_words: \n\t\t\t\tprint(\"You already guessed the word\", guess) \n\t\t\telif guess != word: \n\t\t\t\tprint(guess, \"is not the word.\") \n\t\t\t\ttries -= 1\n\t\t\t\tguessed_words.append(guess) \n\t\t\telse: \n\t\t\t\tguessed = True\n\t\t\t\tword_completion = word \n\t\telse: \n\t\t\tprint(\"Not a valid guess.\") \n\t\t\t\n\t\tprint(display_hangman(tries)) \n\t\tprint(word_completion) \n\t\tprint(\"\\n\")\n \n\tif guessed: \n\t\tprint(\"Congrats, you guessed the word! You win!\")\n\telse: \n\t\tprint(\"Sorry, you ran out of tries. The word was \" + word + \". Maybe next time!\") \n\ndef display_hangman(tries): \n\tstages = [ \n\t\t\t\t\"  =========\\n  |        \\n  |        \\n  |        \\n  |        \\n  |        \\n  |        \\n__|__\", \n\t\t\t\t\"  =========\\n  |     O \\n  |        \\n  |        \\n  |        \\n  |        \\n  |        \\n__|__\", \n\t\t\t\t\"  =========\\n  |     O \\n  |     | \\n  |        \\n  |        \\n  |        \\n  |        \\n__|__\", \n\t\t\t\t\"  =========\\n  |     O \\n  |    /| \\n  |        \\n  |        \\n  |        \\n  |        \\n__|__\",\n\t\t\t\t\"  =========\\n  |     O \\n  |    /|\\\\ \\n  |        \\n  |        \\n  |        \\n  |        \\n__|__\", \n\t\t\t\t\"  =========\\n  |     O \\n  |    /|\\\\ \\n  |    /  \\n  |        \\n  |        \\n  |        \\n__|__\", \n\t\t\t\t\"  =========\\n  |     O \\n  |    /|\\\\ \\n  |    / \\\\ \\n  |        \\n  |        \\n  |        \\n__|__\"] \n\treturn stages[tries] \n \n \ndef main(): \n\tword = get_word() \n\tplay(word) \n\twhile input(\"Play Again? (Y/N) \").upper() == \"Y\": \n\t\tword = get_word() \n\t\tplay(word) \n \nif __name__ == \"__main__\":\n\tmain() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_hexvals_to_decimal(hexvals):\n    # Split hexvals on whitespace\n    hexvals_list = hexvals.split()\n    # Reverse hexvals list\n    hexvals_list.reverse()\n    decimal_val = 0\n    # Loop through hexvals list\n    for index, hexval in enumerate(hexvals_list):\n        # Multiply hexval by 16^index to calculate decimal value\n        decimal_val += int(hexval, 16)*(16**index)\n    # Return decimal value\n    return decimal_val\n    \ndecimal = convert_hexvals_to_decimal(\"7a 0d 72\")\nprint(decimal) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef find_max(lst):\n max_val = max(lst)\n\n return max_val\n\nlst = [random.randint(1, 100) for _ in range(20)]\nprint(lst)\nanswer = find_max(lst)\nprint(answer) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string1 = 'Inception'\nstring2 = 'Interstellar'\n\nif len(string1) > len(string2):\n    print(string1)\nelse:\n    print(string2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: lst = sorted(lst, key=len) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sorted_d = dict(sorted(d.items(), key = lambda kv:(kv[1], kv[0]), reverse = True))\nprint(sorted_d) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nrandom_number_list = random.sample(range(1, 100), 50)\nprint(random_number_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import psycopg2\n\ntry:\n    conn = psycopg2.connect(\"dbname='testdb' user='user1' host='localhost' password='password'\")\nexcept:\n    print(\"Connection failed\")\n\ncur = conn.cursor() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Define Neural Network\nmodel = tf.keras.Sequential([\n    # First Hidden Layer \n    tf.keras.layers.Dense(50, activation='relu', input_dim=input_dim),\n    # Second Hidden Layer \n    tf.keras.layers.Dense(40, activation='relu'),\n    # Third Hidden Layer \n    tf.keras.layers.Dense(30, activation='relu'),\n    # Output Layer \n    tf.keras.layers.Dense(num_classes, activation='softmax')\n]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Car:\n  def __init__(self, make, model, year):\n    self.make = make\n    self.model = model\n    self.year = year\n\n  def get_make(self):\n    return self.make\n  \n  def get_model(self):\n    return self.model\n  \n  def get_year(self):\n    return self.year but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_substring(string_1, string_2):\n    \n    if string_1 in string_2:\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_elements(arr):\n result = 0\n for i in arr:\n result += i\n return result\n\nprint(sum_elements([1,2,3,4,5])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n \ndef generate_random_letter():\n    alphabet = list(map(chr, range(65, 91)))\n    random_letter = random.choice(alphabet)\n \n    return random_letter\n \nrandom_letter = generate_random_letter()\nprint(random_letter) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def capitalize_words(string):\n words = string.split(' ')\n capitalized = [word.capitalize() for word in words]\n return ' '.join(capitalized) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def intersection_arr(arr1, arr2):\n    # create an empty list for storing the elements\n    result = []\n    \n    for element in arr1:\n        if element in arr2: \n            result.append(element)\n    \n    return result\n\na = [1, 2, 3, 4, 5]\nb = [3, 4, 5, 6, 7]\n\nintersect = intersection_arr(a, b)\nprint(intersect) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_median(num_list):\n    sorted_list = sorted(num_list)\n    length = len(sorted_list)\n    if (length % 2 == 0):\n        median = (sorted_list[length//2] + sorted_list[length//2 -1])/2.0\n    else:\n        median = sorted_list[length//2]\n    return median but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask\nfrom flask_restful import Api, Resource, reqparse\n\napp = Flask(name)\napi = Api(app)\n \nemployees = [\n {\n \"name\": \"John Doe\",\n \"salary\": 10000,\n \"experience\": 3\n },\n {\n \"name\": \"Alice Smith\",\n \"salary\": 12000,\n \"experience\": 4\n }\n]\n \nclass Employee(Resource):\n def get(self, name):\n for employee in employees:\n if(name == employee[\"name\"]):\n return employee, 200\n return \"Employee not found\", 404\n \n def post(self, name):\n parser = reqparse.RequestParser()\n parser.add_argument(\"salary\")\n parser.add_argument(\"experience\")\n args = parser.parse_args()\n \n for employee in employees:\n if(name == employee[\"name\"]):\n return \"Employee with name {} already exists\".format(name), 400\n \n employee = {\n \"name\": name,\n \"salary\": args[\"salary\"],\n \"experience\": args[\"experience\"]\n }\n employees.append(employee)\n return employee, 201\n\ndef put(self, name):\n parser = reqparse.RequestParser()\n parser.add_argument(\"salary\")\n parser.add_argument(\"experience\")\n args = parser.parse_args()\n \n for employee in employees:\n if(name == employee[\"name\"]):\n employee[\"salary\"] = args[\"salary\"]\n employee[\"experience\"] = args[\"experience\"]\n return employee, 200\n \n employee = {\n \"name\": name,\n \"salary\": args[\"salary\"],\n \"experience\": args[\"experience\"]\n }\n employees.append(employee)\n return employee, 201\n\ndef delete(self, name):\n global employees\n employees = [employee for employee in employees if employee[\"name\"] != name]\n return \"{} is deleted.\".format(name), 200\n \napi.add_resource(Employee, \"/employee/<string:name>\")\n \napp.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def stringToUpper(str):\n    return str.upper()\n\ninputStr = \"hello world\"\n\noutputStr = stringToUpper(inputStr)\n\nprint(outputStr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Read in the stock data\ndata = pd.read_csv('aapl_stock_data.csv')\n\n# Create the features and labels datasets\nX = data[['High', 'Low', 'Close', 'Volume']]\ny = data['Adj Close']\n\n# Create a linear regression model\nreg = LinearRegression().fit(X, y)\n\n# Make predictions\npredictions = reg.predict(X)\n\n# Calculate the error between predictions and actual values\nerror = np.mean(np.abs((y - predictions) / y) * 100)\n\n# Print out the results\nprint('Mean Absolute Percent Error: {:.2f}%'.format(error)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Car:\n    def __init__(self, top_speed, make, color):\n        self.top_speed = top_speed\n        self.make = make\n        self.color = color but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseString(userString):\n wordList = userString.split(\" \")\n reversedStringList = list(reversed(wordList))\n\n return reversedStringList\n\nprint(reverseString(\"The quick brown fox.\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Start by loading in the data\ndata = pd.read_csv('sales_data.csv')\n\n# Extract the inputs and the targets\ninputs = data[['date', 'time', 'price', 'category', 'discount']]\ntargets = data.sales\n\n# Create the model and train it\nmodel = LinearRegression()\nmodel.fit(inputs, targets)\n\n# Make predictions\npredictions = model.predict(inputs) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def word_count(string):\n    words = string.split()\n    return len(set(words))\n\nif __name__ == '__main__':\n    output = word_count(\"The quick brown fox jumped over the lazy dog\")\n    print(output) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_string():\n    chars = string.ascii_letters + string.digits\n    string = ''.join(random.choice(chars) for _ in range(8))\n    return string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply_by_index(numbers):\n    for i in range(len(numbers)):\n        numbers[i] *= i\n    return numbers but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: word_lengths = [len(word) for word in words]\n\nprint(word_lengths) # [5, 5, 1, 4, 3] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Movie:\n    def __init__(self, title, rating):\n        self.title = title\n        self.rating = rating but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: strings = [\"apple\", \"banana\", \"cherry\"]\n\nfor string in strings:\n    print(string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_numbers(list):\n    '''This function will classify the list of numbers into positives and negatives'''\n\n    positives = []\n    negatives = []\n\n    for n in list:\n        if n >= 0:\n            positives.append(n)\n        else:\n            negatives.append(n)\n\n    return positives, negatives but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(arr): \n    n = len(arr)\n  \n    for i in range(n-1): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \narr = [1, 9, 3, 8, 4]\n\nbubble_sort(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to generate all prime numbers between two given numbers \n  \ndef generate_prime_numbers(low,high): \n    if low == 1: \n        low += 1\n    for num in range(low,high + 1):    # Iterating over the range \n        if num > 1: \n            for i in range(2,num): \n                if (num % i) == 0: \n                    break \n            else: \n                print(num) \n  \nlow = 1\nhigh = 10\n\ngenerate_prime_numbers(low,high) but is not the same. just give one example and only return the code."}
