{"prompt": "make some code that functions the same as the following code: class Person():\n    def __init__(self):\n        self.name = None\n        self.age = None\n    \n    def set_name(self, name):\n        self.name = name\n    \n    def set_age(self, age):\n        self.age = age\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: {\n    \"Name\": \"John\",\n    \"Age\": 30,\n    \"Cities\": [\"New York\", \"London\", \"Paris\"]\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Load the dataset \ndata = pd.read_csv('data.csv')\n\n# Separate the features and labels\nX = data.iloc[:, :-1].values\ny = data.iloc[:, -1].values\n\n# Create an instance of the DecisionTreeClassifier\nclf = DecisionTreeClassifier()\n\n# Fit the model \nclf.fit(X, y)\n\n# Make predictions \ny_pred = clf.predict(X) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(s):\n  #reverse string and compare \n  rev = s[::-1]\n  if (s == rev): \n    return True\n  else: \n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import base64\nfrom Crypto.Cipher import AES\n\ndef encrypt(key, text):\n cipher = AES.new(key, AES.MODE_EAX)\n nonce = cipher.nonce\n ciphertext, tag = cipher.encrypt_and_digest(text.encode('utf-8'))\n return (nonce, tag, ciphertext)\n\nkey = b'Sixteen byte key'\ntext = \"hello world\"\n\nnonce, tag, ciphertext = encrypt(key, text)\n\nencoded_nonce = base64.b64encode(nonce)\nencoded_tag = base64.b64encode(tag)\nencoded_ciphertext = base64.b64encode(ciphertext)\n\nprint(\"Encrypted Text:\", encoded_nonce, encoded_tag, encoded_ciphertext) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Node class  \nclass Node: \n   \n    # Function to initialize the node object \n    def __init__(self, data): \n        self.data = data  # Assign data \n        self.next = None  # Initialize next as null \n\n# Linked List class \nclass LinkedList: \n  \n    # Function to initialize the Linked List object \n    def __init__(self):   \n        self.head = None\n\n# A helper function to check if a given linked list is a palindrome  \ndef checkPalindrome(root): \n    #base case\n    if root == None:\n        return True\n        \n    # Find length of list\n    lenList = 0\n    iterator = root\n    while iterator != None:\n        lenList = lenList+1\n        iterator = iterator.next\n    \n    # Find middle pointer\n    # If length is even, moving the second pointer right \n    # So, we can get two middle pointers \n    midPtr = root\n    for i in range(int(lenList/2)-1):\n        midPtr = midPtr.next\n    \n    # Now pointer is at the exact middle \n    # Checking each next node if its same\n    currentNode = midPtr\n    prevNode = None\n    while currentNode != None:\n        nextn = currentNode.next\n        currentNode.next = prevNode\n        prevNode = currentNode\n        currentNode = nextn\n    \n    # now both the halves are swapped \n    # checking each node one by one\n    startPtr1 = root\n    startPtr2 = prevNode\n    \n    # if length is odd\n    # move the second pointer one step right \n    if lenList%2!=0:\n        startPtr2 = startPtr2.next\n        \n    palindrome = True\n    while startPtr1 != None:\n        if startPtr1.data != startPtr2.data:\n            palindrome = False\n            break\n            \n        startPtr1 = startPtr1.next\n        startPtr2 = startPtr2.next\n    \n    # Re-linking both the pointers \n    currentNode = prevNode\n    prevNode = None\n    while currentNode != None:\n        nextn = currentNode.next\n        currentNode.next = prevNode\n        prevNode = currentNode\n        currentNode = nextn\n        \n    return palindrome\n\n# Driver Code \n\n# Create a linked list with  \n# 1->2->3->2->1 \nhead = Node(1) \nfirstNode = Node(2) \nsecondNode = Node(3) \nthirdNode = Node(2) \nfourthNode = Node(1) \n  \n# Now link the next pointers \nhead.next = firstNode \nfirstNode.next = secondNode \nsecondNode.next = thirdNode \nthirdNode.next = fourthNode \n  \nif(checkPalindrome(head)): \n    print (\"Linked List is palindrome\")\nelse: \n    print (\"Linked List is not palindrome\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_first_occurrence(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\narr = [1, 7, 3, 5, 4, 7, 8, 10, 6, 9]\ntarget = 7\n\nindex = find_first_occurrence(arr, target)\nif index != -1:\n    print(\"The first occurrence of the number is at index\", index)\nelse:\n    print(\"The number does not exist in the array.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name, age, gender, gpa, college):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.gpa = gpa\n        self.college = college\n    \n    def __str__(self):\n        return f\"Name: {self.name}, Age: {self.age}, Gender: {self.gender}, GPA: {self.gpa}, College: {self.college}\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: name = \"John Doe\"\nage = 23\ncourse = \"Data Science\"\n\nprint(\"Name: \" + name)\nprint(\"Age: \" + str(age))\nprint(\"Course: \" + course) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nA game loop for a game of Pong using Python\n\"\"\"\nimport pygame\nimport time\n\n# Define constants\nBLACK = (0, 0, 0)\nWIDTH = 600\nHEIGHT = 400\nRADIUS = 20\nPADDLE_WIDTH = 10\nPADDLE_HEIGHT = 75 \n\n# Initialize game\npygame.init()\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"Pong\") \ncenter_point = WIDTH/2, HEIGHT/2\nclock = pygame.time.Clock()\n\n# Game variables\npaddleA_y = HEIGHT / 2\npaddleB_y = HEIGHT / 2\nball_x = WIDTH / 2\nball_y = HEIGHT / 2\nball_change_x = 2\nball_change_y = 2\n\n# Begin game loop\nwhile True:\n    # Reset screen\n    screen.fill(BLACK)\n    \n    # Drawing objects\n    ball = pygame.draw.circle(screen, (255,255,255), (int(ball_x), int(ball_y)), RADIUS)\n    paddleA = pygame.draw.rect(screen, (255,255,255), (0, paddleA_y, PADDLE_WIDTH, PADDLE_HEIGHT)) \n    paddleB = pygame.draw.rect(screen, (255,255,255), (WIDTH - PADDLE_WIDTH, paddleB_y, PADDLE_WIDTH, PADDLE_HEIGHT))\n\t\n    # Event loop \n    for event in pygame.event.get():\n        if event.type == pygame.QUIT: \n            pygame.quit()\n            exit()\n\n    # Movement of paddles\n    keys = pygame.key.get_pressed()\n    if keys[pygame.K_w]:\n        paddleA_y -= 3\n    elif keys[pygame.K_s]:\n        paddleA_y += 3\n    elif keys[pygame.K_UP]:\n        paddleB_y -= 3\n    elif keys[pygame.K_DOWN]:\n        paddleB_y += 3\n\n    # Limit the position of the paddles\n    if paddleA_y < 0:\n       paddleA_y = 0\n    elif paddleA_y > HEIGHT - PADDLE_HEIGHT:\n       paddleA_y = HEIGHT - PADDLE_HEIGHT\n    if paddleB_y < 0:\n       paddleB_y = 0\n    elif paddleB_y > HEIGHT - PADDLE_HEIGHT:\n       paddleB_y = HEIGHT - PADDLE_HEIGHT\n\n    # Ball bouncing to the left\n    if (ball.left <= paddleA.right + 10) and ball.colliderect(paddleA):\n        ball_change_x = -ball_change_x\n\n    # Ball bouncing to the right\n    if (ball.right >= paddleB.left - 10) and ball.colliderect(paddleB):\n        ball_change_x = -ball_change_x\n\n    # Ball bouncing up\n    if (ball.top <= 0) or (ball.bottom >= HEIGHT):\n        ball_change_y = -ball_change_y\n    \n    # Ball movement\n    ball_x += ball_change_x\n    ball_y += ball_change_y\n\t\n    #Update display\n    pygame.display.flip()\n    clock.tick(30) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from queue import PriorityQueue \n\nclass Process: \n    def __init__(self, id, cpuburst, priority): \n        self.id = id \n        self.cpuburst = cpuburst \n        self.priority = priority \n        return\n  \n    def __lt__(self, other):\n        return self.priority < other.priority\n\ndef Scheduler(processes): \n    \n    ready_queue = PriorityQueue() \n    result = [] \n    \n    for process in processes: \n        ready_queue.put(process) \n    \n    while (not ready_queue.empty()): \n        process = ready_queue.get() \n        result.append([process.id, process.cpuburst]) \n    \n    return result \n  \nif __name__ ==\"__main__\": \n    processes = [Process(1, 10, 1), Process(2, 6, 4), Process(3, 4, 5)] \n    print(Scheduler(processes)) \n\nOutput:\n[[1, 10],[2, 6],[3, 4]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def matrixMultiplication(A, B):\n\tN = len(A)\n\tC = [[0 for x in range(N)] for y in range(N)]\n\n\tfor i in range(N):\n\t\tfor j in range(N):\n\t\t\tfor k in range(N):\n\t\t\t\tC[i][j] += A[i][k] * B[k][j]\n\n\treturn C\n\nA = [[1,2],\n     [3,4]]\nB = [[4,3],\n     [2,1]]\n\nprint(matrixMultiplication(A, B))\n\n#output: [[8, 5], [20, 13]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pygame\n\n# Game constants \nWIDTH = 800\nHEIGHT = 600\nFPS = 30\n\n# Initialize pygame\npygame.init()\n\n# Create window\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\n\n# Game loop\nrunning = True\nwhile running:\n    # Process events\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n            \n    # Logic \n\n    # Rendering\n    screen.fill(0, 0, 0)\n    pygame.display.flip()\n\n# Terminates the game\npygame.quit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re \n\ndef find_match(string1, string2):\n return re.findall(r'(?i)'+re.escape(string2), string1)\n\nstring1 = \"Hello world\" \nstring2 = \"World\"\n\nprint(find_match(string1, string2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def my_function():\n  print_loop(0, 5, 'loop 1')\n  print_loop(0, 5, 'loop 2')\n\ndef print_loop(start, end, tag):\n  for i in range(start, end):\n    print(tag + ':', i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: dictionary = {\n \"data\": {\n  \"user\": {\n   \"id\": \"123\",\n   \"name\": \"John Doe\",\n   \"email\": \"john@example.com\"\n  }\n }\n}\n\n# extract values from dict\nuser_id = dictionary[\"data\"][\"user\"][\"id\"]\nuser_name = dictionary[\"data\"][\"user\"][\"name\"]\nuser_email = dictionary[\"data\"][\"user\"][\"email\"]\n\nprint(user_id, user_name, user_email) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nOptimized Python code:\n\nimport time\n\ndef foo():\n    iter = 0\n    max_val = 10000000\n    i = 0\n    while i < max_val:\n        iter += i\n        i += 1\n    return iter\n\nstart = time.time()\nfoo()\nend = time.time()\nduration = end - start\nprint(\"Time taken: \", duration)\n\"\"\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_substring(string1, string2): \n    if string1 in string2:\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_of_numbers = [int(x) for x in input(\"Please enter a list of numbers: \").split(',')]\n\nc = collections.Counter(list_of_numbers)\n\nmost_common_num = c.most_common(1)[0][0]\n\nprint(\"The most common number in the list is \" + str(most_common_num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # create a list\nsample_list = [\"cat\", \"bird\", \"dog\", \"zebra\", \"ant\"]\n \n# sort the list\nsample_list.sort()\n \n# reverse the list\nsample_list.reverse()\n \n# print the reversed list\nprint(sample_list)\n# ['zebra', 'dog', 'cat', 'bird', 'ant'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_min(arr):\n  max = arr[0]\n  min = arr[0]\n  \n  for i in range(1, len(arr)):\n    if arr[i] > max:\n      max = arr[i]\n    if arr[i] < min:\n      min = arr[i]\n  \n  return max, min\n\nmax, min = max_min(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: int sum_list(vector<int>& numbers) {\n  int result = 0;\n  for (auto& n : numbers) {\n    result += n;\n  }\n  return result;\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def knapsack(n, W, weights, values): \n    # create a 2D array, dp[n+1][W+1], and fill with zeros \n    dp = [[0 for x in range(W+1)] for x in range(n+1)] \n\n\u3000\u3000#iterating over array rows \n    for i in range(n+1): \n        #iterating over array columns \n        for w in range(W+1): \n            if i==0 or w==0 : \n                dp[i][w] = 0\n            elif weights[i-1] <= w: \n                dp[i][w] = max(values[i-1] + dp[i-1][w-weights[i-1]],  dp[i-1][w]) \n            else: \n                dp[i][w] = dp[i-1][w] \n  \n    return dp[n][W] \n\n# test\nprint(knapsack(5, 8, [2, 3, 4, 5, 6], [2, 5, 6, 12, 9]))\n# Output: 20 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_list(input_list):\n    total = 0\n    for item in input_list:\n        total += item\n    return total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(str):\n    reversed_str = \"\"\n    for i in range(len(str) - 1, -1, -1): \n        reversed_str += str[i]\n\n    if str == reversed_str: \n        return True\n    else: \n        return False\n\nstring = \"madam\"\nresult = is_palindrome(string)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def int_to_bin(n):\n bin_num = bin(n)\n bin_num = bin_num[2:].zfill(8)\n return bin_num\n\nprint(int_to_bin(10)) # Output: 00001010 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import the python testing library\nimport unittest\n\n#import the function to be tested\nfrom mycode import myfunction\n\n# Create an instance of the test\ntest = unittest.TestCase()  \n\n# Create a list of inputs to test\ninputs = [[1,2], [3,4], [5,6]]\n\n# Create expected outputs\nexpected_outputs = [3, 7, 11]\n\n# Check the outputs for all inputs \nfor i in range(len(inputs)):  \n     result = myfunction(inputs[i][0], inputs[i][1])\n     test.assertEqual(result, expected_outputs[i]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_substring(s, t):\n    start_index = s.find(t)\n    end_index = s.find(t, start_index + len(t))\n    if start_index == -1 or end_index == -1:\n        return \"\" \n    else:\n        return s[start_index + len(t) : end_index]\n    \ns = \"ab-Hello World-ab\"\nt = \"ab\"\nprint(get_substring(s, t))\n// Output: Hello World but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import asyncio\nimport websockets\n\nasync def handler(websocket, path):\n    message = await websocket.recv()\n    print(f\"Received {message}\")\n    await websocket.send(message)\n\nstart_server = websockets.serve(handler, 'localhost', 8765)\n\nasyncio.get_event_loop().run_until_complete(start_server)\nasyncio.get_event_loop().run_forever() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef circle_area(radius):\n  \"\"\"\n  Returns the area of a circle based on its radius\n  \"\"\"\n  return math.pi * (radius**2)\n\nif __name__ == '__main__':\n    print(circle_area(4)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a neural network in Python to recognize the handwritten digits from 0 to 9.\n\"\"\"\n\nimport tensorflow as tf\nimport numpy as np\nfrom tensorflow import keras\n\n# load the MNIST dataset\nmnist = keras.datasets.mnist\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\n# normalize the data\nx_train, x_test = x_train/255.0, x_test/255.0\n\n# build the model\nmodel = keras.Sequential([\n    keras.layers.Flatten(input_shape=(28, 28)),\n    keras.layers.Dense(256, activation='relu'),\n    keras.layers.Dense(10, activation='softmax')\n])\n\n# compile and fit the model\nmodel.compile(optimizer='adam', \n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=10)\n\n# evaluate the model\ntest_loss, test_acc = model.evaluate(x_test, y_test)\nprint(\"Test accuracy: \", test_acc) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def opposite_int(num):\n  return -1 * num but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n-1) \n  \n# Driver Code \nnum = 5\nprint(factorial(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_list(numbers):\n return numbers[::-1]\n\ndef flip_array_order(numbers):\n new_list = []\n for i in range(0, len(numbers)):\n  new_list.append(numbers[len(numbers) - i - 1])\n return new_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# Load dataset\nspeech_data = pd.read_csv(\"speech_data.csv\")\n\n# Preprocessing\nX_features = speech_data[\"speech_text\"]\nY_target = speech_data[\"student_id\"]\n\n# Split into training and test sets\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X_features, Y_target, test_size = 0.2, random_state = 0)\n\n# Generate Model\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression()\nclassifier.fit(X_train, Y_train)\n\n# Evaluate Model\naccuracy = classifier.score(X_test, Y_test)\nprint('Accuracy of logistic regression classifier on test set: {:.2f}'.format(accuracy)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef dice_predict(sides):\n    '''Returns a random outcome of dice roll between 1 and specified number of sides.'''\n    return random.randint(1, sides) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for num in range(6): \n  print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n    count = 0\n\n    def __init__(self):\n        Employee.count += 1\n\n    @staticmethod\n    def get_employee_count():\n        return Employee.count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def euclidean_distance(x1, y1, x2, y2): \n    # Calculating distance \n    return math.sqrt(math.pow(x2 - x1, 2) + math.pow(y2 - y1, 2)) \n  \n# Driver Code \nx1 = int(input(\"Enter x1:\"))\ny1 = int(input(\"Enter y1:\"))\nx2 = int(input(\"Enter x2:\"))\ny2 = int(input(\"Enter y2:\"))\n\nprint(euclidean_distance(x1,y1,x2,y2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\nx = [i for i in range(-10, 10)]\ny1 = [5*i + 2 for i in x]\ny2 = [-3*i + 6 for i in x]\n\nplt.plot(x, y1, label='y = 5x + 2')\nplt.plot(x, y2, label='y = -3x + 6')\nplt.legend()\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt \n\n# define data \nage = [15, 17, 20, 22, 25, 28, 33, 35, 37, 45, 50] \nsex = [\"female\",\"male\",\"male\",\"female\",\"female\",\"male\",\"female\",\"male\",\"male\",\"female\",\"female\"] \nincome = [20000, 24000, 25000, 27000, 28000, 26000, 29000,\n          33000, 31000, 50000, 52000] \n\n# create figure for plotting\nfig = plt.figure()\n\n# create 2D scatter graph of data\nplt.scatter(age, income, c=sex, s=150) \n\n# add axis labels \nplt.xlabel('Age')\nplt.ylabel('Income')\n\n# add legend\nplt.legend([\"Female\",\"Male\"])\n\n# show graph \nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python Program to Implement \n# Traveling Salesman Problem using Genetic Algorithm \nimport numpy as np \nfrom GeneticAlgorithm import GeneticAlgorithm \nclass TSP(GeneticAlgorithm): \n\tdef __init__(self, distances): \n\t\tsuper().__init__(distances) \n\t\tself.distances = distances \n\t\tself.n_cities = len(self.distances) \n\t\tself.init_population(pop_size= 150, chromosome_length=self.n_cities) \n\n\tdef init_population(self, pop_size, chromosome_length):\t \n\t\tself.population = np.zeros((pop_size, chromosome_length)).astype(np.uint8) \n\t\tfor i, chromosome in enumerate(self.population): \n\t\t\tnp.random.shuffle(chromosome)\n                      \n\tdef fitness(self, chromosome): \n\t\tcurrent = 0\n\t\tfitness = 0\n\t\tfor gene in chromosome: \n\t\t\tfitness += self.distances[current][gene] \n\t\t\tcurrent = gene \n                    \n\t\treturn fitness \n              \n\tdef selection(self): \n\t\treturn np.argsort(self.fitness_value)[::-1][:int(self.pop_size/2)] \n          \n\tdef crossover(self, parent_1, parent_2): \n\t\tindex = np.random.randint(1, self.chromosome_len - 1) \n        \n\t\tchild_1 = np.hstack((parent_1[0:index], parent_2[index:])) \n\t\tchild_2 = np.hstack((parent_2[0:index], parent_1[index:])) \n        \n\t\treturn child_1, child_2\n          \n\tdef mutation(self, chromosome): \n\t\tindex_1 = np.random.randint(0, self.chromosome_len) \n\t\tindex_2 = np.random.randint(0, self.chromosome_len) \n        \n\t\ttemp = chromosome[index_1] \n\t\tchromosome[index_2] = temp \n\t\treturn chromosome\n          \nif __name__ == '__main__': \n\tdistances = [[0, 755, 463, 493], \n\t             [755, 0, 689, 582], \n\t             [463, 689, 0, 744], \n\t             [493, 582, 744, 0]] \n\n\ttsp = TSP(distances) \n\ttsp.run() \n\ttsp.show_result() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\ndef parse_html(url):\n  # Send a get request\n  response = requests.get(url)\n  \n  # Create a BeautifulSoup object\n  soup = BeautifulSoup(response.text, 'lxml')\n\n  # Find the required data\n  data = soup.find_all('div', class_='content')\n\n  # Return the data\n  return data but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: {\n \"name\": \"John Doe\",\n \"age\": 34,\n \"skills\": [\n  \"JavaScript\",\n  \"Python\"\n ]\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_by_name(lst): \n    return sorted(lst, key=lambda item: item[\"name\"]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(arr, x): \n    for i in range(len(arr)): \n        if arr[i] == x: \n            return i \n    return -1\n  \narr = [2, 3, 4, 10, 40] \nx = 10\n\nresult = linear_search(arr, x) \nif result == -1: \n    print(\"Element is not present in array\") \nelse: \n    print(\"Element is present at index\", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_of_nums = [1, 2, 3, 4, 5] \nlist_of_squares = []\n\nfor num in list_of_nums: \n list_of_squares.append(num**2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def average_list_items(list_items):\n  list_length = len(list_items)\n  list_sum = sum(list_items)\n  average = list_sum/list_length\n  return average but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def format_sentence(sentence):\n    sentence = sentence.split()\n    sentence = [word.capitalize() for word in sentence]\n    return ' '.join(sentence)\n\nprint(format_sentence(\"He went to the store\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Alphabet string \nalphabets = 'abcdefghijklmnopqrstuvwxyz'\n\n# Function to encode \ndef encoding(text): \n\t\n\t# Empty string to store encoded string \n\tencoded_string = \"\" \n\n\t# iterate through all characters of text \n\tfor i in range(len(text)): \n\n\t\t# store the corresponding index \n\t\t# of current character \n\t\tc = alphabets.index(text[i]) \n\n\t\t# append the corresponding alphabet \n\t\t# from alphabet string \n\t\tencoded_string += alphabets[25-c] \n\t\n\t# Return the encoded string \n\treturn encoded_string \n\n# Function to decode \ndef decoding(encoded_string): \n\n\t# Empty string to store decoded string \n\tdecoded_string = \"\" \n\n\t# iterate through all characters of encoded string \n\tfor i in range(len(encoded_string)): \n\n\t\t# store the corresponding index \n\t\t# of current character \n\t\tc = alphabets.index(encoded_string[i]) \n\n\t\t# append the corresponding alphabet \n\t\t# from alphabet string \n\t\tdecoded_string += alphabets[25-c] \n\t\n\t# Return the decoded string \n\treturn decoded_string \n\n# Driver code \nencoded_string = encoding(\"Hello World\") \nprint(encoded_string) \n\ndecoded_string = decoding(encoded_string) \nprint(decoded_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python Program to find the area of triangle\na = 3\nb = 4\nc = 5\n# calculate the semi-perimeter\ns = (a + b + c) / 2\n# calculate the area\narea = (s*(s-a)*(s-b)*(s-c)) ** 0.5\nprint('The area of the triangle is %0.2f' %area) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_subarray_sum_to_zero(arr):\n    maxlen = 0 # maxlen of the subarray whose sum equals 0\n    sums = 0   # current sum\n    sum_dict = {0: -1} # used to store previous sums\n\n    for i in range(len(arr)):\n        sums += arr[i] \n        if sums in sum_dict:\n            maxlen = max(maxlen, i - sum_dict[sums])\n        else:\n            sum_dict[sums] = i\n\n    return maxlen but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\n\ntime_now = time.strftime(\"%Y-%m-%d %H:%M:%S\")\nprint(time_now) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent(input_list):\n    # Create a dictionary to store frequency of each item\n    frequency_dict = {}\n    for item in input_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n\n    # Find the most frequent item\n    most_frequent_item = max(frequency_dict, key=frequency_dict.get)\n\n    return most_frequent_item\n\ninput_list = [1, 2, 3, 4, 1, 2, 5, 2, 4]\nmost_frequent_item = most_frequent(input_list)\n\nprint(most_frequent_item) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: input_string = '82.0, 84.3, 69.6, 78.2'\n\ntemperatures = [float(temp) for temp in input_string.split(',')]\n\nmin_temp = min(temperatures)\nmax_temp = max(temperatures)\nmedian_temp = statistics.median(temperatures)\n\nprint(f'Minimum temperature: {min_temp}, Maximum temperature: {max_temp}, Median temperature: {median_temp}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport sqlite3\n\n# Connect to the database\nconn = sqlite3.connect('urls.db')\nc = conn.cursor()\n\n# Scrape the website\nr = requests.get('http://example.com')\n\n# Extract all URLs from the webpage\nlinks = r.html.absolute_links\n\n# Insert the URLs into the database\nfor link in links:\n c.execute(\"INSERT INTO urls VALUES (?)\", (link,))\n\n# Save changes to the database\nconn.commit() \nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: dictionary = {'apple': 1, 'banana': 2, 'orange': 3}\nkey = 'mango'\nvalue = 4\n\ndictionary[key] = value\nprint(dictionary)\n# {'apple': 1, 'banana': 2, 'orange': 3, 'mango': 4} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(string): \n    return string[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Solution\n[x for x in range(0,5) if (x%2 == 0)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def create_new_table(table_name, columns):\n conn = sqlite3.connect('database.db')\n c = conn.cursor()\n c.execute(f'CREATE TABLE IF NOT EXISTS {table_name} ({columns})')\n c.execute(f'INSERT INTO {table_name} (SELECT id, name || ' ' || age AS full_name FROM Table_1)')\n conn.commit()\n conn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\nproduct1 = [10, 15, 12, 18, 20]\nproduct2 = [5, 8, 9, 10, 15]\n\nplt.plot(product1, marker='o', label='Product 1')\nplt.plot(product2, marker='o', label='Product 2')\n\nplt.title('Comparing sales of two products')\nplt.xlabel('Products')\nplt.ylabel('Sales')\nplt.legend()\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The output of the code is 12. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\nmessages = {}\n\n@app.route('/messages', methods=['GET', 'POST'])\ndef all_messages():\n if request.method == 'POST':\n message = request.get_json()\n messages[message['id']] = message\n return jsonify(messages)\n \n elif request.method == 'GET':\n return jsonify(messages)\n \n\n@app.route('/messages/<int:message_id>', methods=['GET', 'PUT', 'DELETE'])\ndef single_message(message_id):\n if request.method == 'GET':\n if message_id in messages:\n return jsonify(messages[message_id])\n \n elif request.method == 'PUT':\n message = request.get_json()\n messages[message_id] = message\n return jsonify(messages[message_id])\n \n elif request.method == 'DELETE':\n del messages[message_id]\n return jsonify({'message': 'Message deleted'})\n\n\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def all_substrings(input_string):\n substrings = []\n for i in range(len(input_string)):\n  for j in range(i + 1, len(input_string) + 1):\n   substring = input_string[i:j]\n   substrings.append(substring)\n \n return substrings\n \n#example:\nall_substrings(\"Hello\") # returns ['H', 'He', 'Hel', 'Hell', 'Hello', 'e', 'el', 'ell', 'ello', 'l', 'll', 'llo', 'l', 'lo', 'o'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_coupon(length, characters):\n coupon_code = ''\n for i in range(length):\n  coupon_code += random.choice(characters)\n return coupon_code\n\ncoupon_code = generate_coupon(8, '0123456789ABCDEF')\nprint(coupon_code) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add(array):\n    sum = 0\n    \n    for element in array:\n        sum = sum + element\n    return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Define menu\nmenu = ['Calculator', 'Quiz', 'Message Board', 'Live Chat']\n\n# Print menu\nprint(\"Menu:\")\nfor item in menu:\n  print(\"-\", item)\n\n# Run a loop until user quits the program\ndone = False\nwhile not done:\n  # Print list of options\n  selection = input(\"Type the name of the action you want to select (or type 'Quit to exit): \")\n  if selection == 'Calculator':\n    # Code for Calculator\n    print(\"Calculator....\")\n  elif selection == 'Quiz':\n    # Code for Quiz\n    print(\"Quiz....\")\n  elif selection == 'Message Board':\n    # Code for Message Board\n    print(\"Message Board....\")\n  elif selection == 'Live Chat':\n    # Code for Live Chat\n    print(\"Live Chat....\")\n  elif selection == 'Quit':\n    done = True\n  else:\n    print(\"Invalid selection, please choose from the list of options.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_strings(strings):\n    # initialize lists for each classification\n    short = []\n    long = []\n    # classify each string\n    for s in strings:\n        if len(s) <= 6:\n            short.append(s)\n        else:\n            long.append(s)\n    # return classified lists\n    return [short, long]\n\nif __name__ == '__main__':\n    strings = ['short', 'longer_string', 'medium_length', 'very_long_string']\n    print(classify_strings(strings)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name, age, course):\n        self.name = name\n        self.age = age\n        self.course = course\n    \n    def getCourse(self):\n        return self.course but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def split_list(input_list):\n    # Create two empty lists to hold the even and odd length strings \n    even_list = []\n    odd_list = []\n\n    # Iterate through the given list \n    for element in input_list:\n        # If the current length of element is even append it to even_list\n        if len(element) % 2 == 0:\n            even_list.append(element)\n        # Else append it to odd_list \n        else:\n            odd_list.append(element)\n    return even_list, odd_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Factorial:\n    @staticmethod\n    def compute_factorial(n):\n        if n < 0:\n            return None\n            \n        if n == 0 or n == 1:\n            return 1\n        \n        factorial = 1\n        while n > 1:\n            factorial *= n\n            n -= 1\n            \n        return factorial\n    \n# Compute factorial of 5\nresult = Factorial.compute_factorial(5)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_word(sentence, word):\n    words = sentence.split()\n    new_words = [w for w in words if w != word]\n    return ' '.join(new_words)\n\nnew_sentence = remove_word(sentence, 'Python') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortTuples(l): \n    l.sort(key = lambda x: x[1]) \n    return l\n \n# Sample Output \n# [(4, 1), (1, 3), (6, 4), (2, 5)] \nprint(sortTuples(l)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: input_string = input(\"Enter a string: \")\n\n# Reverse the string\nreverse_string = input_string[::-1]\n\n# Print the reversed string\nprint(reverse_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def create_matrix(n): \n    matrix = [[i * j for j in range(n)] for i in range(n)]\n    return matrix but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_words(n):\n    words = [\"hello\", \"world\", \"foobar\", \"python\", \"code\"]\n    output = \"\"\n\n    for _ in range(n):\n        output += random.choice(words)\n        output += \" \"\n\n    return output[:-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pattern(n):\n m = 0\n for i in range(1, n+1):\n for j in range(1, m+1):\n print(\"*\", end=\"\")\n m = m + 2\n \n for k in range(1, n-i+1):\n print(\"#\", end=\"\")\n print()\n\npattern(5) \n/* Output: \n*#*#*\n**#**\n***#\n****\n*/ but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def concatenate_strings(str1, str2):\n    '''This function concatenates two strings, str1 and str2.'''\n    return str1 + str2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math \ndef get_sqrt_list(lst): \n    sqrt_list = [] \n    for el in lst: \n        sqrt_list.append(math.sqrt(el)) \n    return sqrt_list \nprint(get_sqrt_list([4, 9, 16, 25])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def largest_of_three():\n num1 = int(input(\"Enter the first number: \"))\n num2 = int(input(\"Enter the second number: \"))\n num3 = int(input(\"Enter the third number: \"))\n\n largest = max(num1, num2, num3)\n\n print(\"The largest number is: \", largest) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_min_max(numbers):\n  minimum = min(numbers)\n  maximum = max(numbers)\n  return minimum, maximum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 21):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nbase_url = 'https://www.example.com'\nr = requests.get(base_url)\nsoup = BeautifulSoup(r.content, 'html.parser')\nall_links = soup.find_all('a', href=True)\n\nfor link in all_links:\n page_url = base_url + link['href']\n page_response = requests.get(page_url)  \n page_content = BeautifulSoup(page_response.content, 'html.parser')\n page_title = page_content.find('title').text\n print(page_title) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(length):\n  fibonacci_list = [1, 1]\n  while len(fibonacci_list) < length:\n    last_item = fibonacci_list[-1]\n    second_last_item = fibonacci_list[-2]\n    next_item = last_item + second_last_item\n    fibonacci_list.append(next_item)\n  return fibonacci_list\n\nlength = 10\nprint(fibonacci(length)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nclass CardGame:\n\n    deck = None\n    scores = None\n\n    def __init__(self):\n        self.deck = self.generateDeck()\n        self.scores = {'player1': 0, 'player2': 0}     \n\n    def generateDeck(self):\n        suits = ['Clubs', 'Diamonds', 'Hearts', 'Spades']\n        ranks = ['2','3','4','5','6','7','8','9','10','J','Q','K','A']\n        deck = []\n        for suit in suits:\n            for rank in ranks:\n                deck.append([suit, rank])\n        random.shuffle(deck)\n        return deck\n\n    # Returns total points of a player's cards\n    def getScore(self, player):\n        score = 0\n        for card in self.deck:\n            if card[1] in ['J', 'Q', 'K']:\n                score += 10\n            elif card[1] == 'A':\n                score += 11\n            else:\n                score += int(card[1])\n        self.scores[player] = score\n        return score\n\n    # Check if a player won or there is a tie\n    def isWinner(self, player1, player2):\n        score1 = self.getScore(player1)\n        score2 = self.getScore(player2)\n\n        if score1 > score2:\n            print(f'{player1} Wins')\n        elif score2 > score1:\n            print(f'{player2} Wins')\n        else:\n            print('It is a tie') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def divide_list(numbers, divisor):\n return [i/divisor for i in numbers] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n   a = 0\n   b = 1\n   if n < 0: \n      print(\"Incorrect input\") \n   elif n == 0: \n      return a \n   elif n == 1: \n      return b \n   else: \n      for i in range(2,n+1): \n          c = a + b \n          a = b \n          b = c \n      return b \n  \nprint(Fibonacci(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from datetime import datetime\n\ndef current_date_time():\n    now = datetime.now()\n    return now\n\nresult = current_date_time()\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def lengthWord(inp):\n    result = []\n    for word in inp.split(' '):\n        result.append(len(word))\n    return result\n\n# Driver Code\ninp = \"Generating a code generation task instructions\"\nprint(lengthWord(inp)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(10):\n    print(\"Hello World\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef round_off(a): \n    if (a - math.floor(a) >= 0.5): \n        a = math.ceil(a) \n    else: \n        a = math.floor(a) \n    return int(a) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def num_routes(grid_dim, start, end):\n    paths = 1\n    xdiff = end[0] - start[0]\n    ydiff = end[1] - start[1]\n    num_rows, num_cols = grid_dim\n    max_x = num_rows - 1 - xdiff\n    max_y = num_cols - 1 - ydiff\n    for x in range(0, max_x):\n        paths *= (x+ydiff+1)\n    for y in range(0, max_y):\n        paths *= (y+xdiff+1)\n    return int(paths/math.factorial(xdiff+ydiff))\n\nprint(num_routes([4,6], [0,0], [3,5])) // Output: 126 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python3\n\nimport argparse\nimport base64\nimport errno\nimport hashlib\nimport logging\nimport mimetypes\nimport os\nimport random\nimport shutil\nimport ssl\nimport string\nimport sys\nimport time\nimport urllib.parse\nimport yaml\n\nfrom sleekxmpp.componentxmpp import ComponentXMPP\nfrom threading import Event\nfrom threading import Lock\nfrom threading import Thread\n\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\nfrom socketserver import ThreadingMixIn\n\nLOGLEVEL=logging.DEBUG\n\nglobal files\nglobal files_lock\nglobal config\nglobal quotas\n\ndef normalize_path(path, sub_url_length):\n    \"\"\"\n    Normalizes the URL to prevent users from grabbing arbitrary files via `../'\n    and the like.\n    \"\"\"\n    return os.path.normcase(os.path.normpath(path))[sub_url_length:]\n\ndef expire(quotaonly=False, kill_event=None):\n    \"\"\"\n    Expire all files over 'user_quota_soft' and older than 'expire_maxage'\n\n        - quotaonly - If true don't delete anything just calculate the\n          used space per user and return. Otherwise make an exiry run\n          every config['expire_interval'] seconds.\n        - kill_event - threading.Event to listen to. When set, quit to\n          prevent hanging on KeyboardInterrupt. Only applicable when\n          quotaonly = False\n    \"\"\"\n    global config\n    global quotas\n\n    while True:\n        if not quotaonly:\n            # Wait expire_interval secs or return on kill_event\n            if kill_event.wait(config['expire_interval']):\n                return\n\n        now = time.time()\n        # Scan each senders upload directories seperatly\n        for sender in os.listdir(config['storage_path']):\n            senderdir = os.path.join(config['storage_path'], sender)\n            quota = 0\n            filelist = []\n            # Traverse sender directory, delete anything older expire_maxage and collect file stats.\n            for dirname, dirs, files in os.walk(senderdir, topdown=False):\n                removed = []\n                for name in files:\n                    fullname = os.path.join(dirname, name)\n                    stats = os.stat(fullname)\n                    if not quotaonly:\n                        if now - stats.st_mtime > config['expire_maxage']:\n                            logging.debug('Expiring %s. Age: %s', fullname, now - stats.st_mtime)\n                            try:\n                                os.unlink(fullname)\n                                removed += [name]\n                            except OSError as e:\n                                logging.warning(\"Exception '%s' deleting file '%s'.\", e, fullname)\n                                quota += stats.st_size\n                                filelist += [(stats.st_mtime, fullname, stats.st_size)]\n                        else:\n                            quota += stats.st_size\n                            filelist += [(stats.st_mtime, fullname, stats.st_size)]\n                if dirs == [] and removed == files:    # Directory is empty, so we can remove it\n                    logging.debug('Removing directory %s.', dirname)\n                    try:\n                            os.rmdir(dirname)\n                    except OSError as e:\n                            logging.warning(\"Exception '%s' deleting directory '%s'.\", e, dirname)\n\n            if not quotaonly and config['user_quota_soft']:\n                # Delete oldest files of sender until occupied space is <= user_quota_soft\n                filelist.sort()\n                while quota > config['user_quota_soft']:\n                    entry = filelist[0]\n                    try:\n                        logging.debug('user_quota_soft exceeded. Removing %s. Age: %s', entry[1], now - entry[0])\n                        os.unlink(entry[1])\n                        quota -= entry[2]\n                    except OSError as e:\n                        logging.warning(\"Exception '%s' deleting file '%s'.\", e, entry[1])\n                    filelist.pop(0)\n            quotas[sender] = quota\n\n        logging.debug('Expire run finished in %fs', time.time() - now)\n\n        if quotaonly:\n            return\n\n\nclass MissingComponent(ComponentXMPP):\n    def __init__(self, jid, secret, port):\n        ComponentXMPP.__init__(self, jid, secret, \"localhost\", port)\n        self.register_plugin('xep_0030')\n        self.register_plugin('upload',module='plugins.upload')\n        self.add_event_handler('request_upload_slot',self.request_upload_slot)\n\n    def request_upload_slot(self, iq):\n        global config\n        global files\n        global files_lock\n        request = iq['request']\n        maxfilesize = int(config['max_file_size'])\n        if not request['filename'] or not request['size']:\n            self._sendError(iq,'modify','bad-request','please specify filename and size')\n        elif maxfilesize < int(request['size']):\n            self._sendError(iq,'modify','not-acceptable','file too large. max file size is '+str(maxfilesize))\n        elif 'whitelist' not in config or iq['from'].domain in config['whitelist'] or iq['from'].bare in config['whitelist']:\n            sender = iq['from'].bare\n            sender_hash = base64.urlsafe_b64encode(hashlib.sha1(sender.encode()).digest()).decode('ascii').rstrip('=')\n            if config['user_quota_hard'] and quotas.setdefault(sender_hash, 0) + int(request['size']) > config['user_quota_hard']:\n                msg = 'quota would be exceeded. max file size is %d' % (config['user_quota_hard'] - quotas[sender_hash])\n                logging.debug(msg)\n                self._sendError(iq, 'modify', 'not-acceptable', msg)\n                return\n            filename = request['filename']\n            folder = ''.join(random.SystemRandom().choice(string.ascii_uppercase + string.ascii_lowercase + string.digits) for _ in range(int(len(sender_hash) / 2)))\n            sane_filename = \"\".join([c for c in filename if (c == '_' or c == '.' or ord(c) >= 48 and ord(c) <= 122)]).rstrip()\n            path = os.path.join(sender_hash, folder)\n            if sane_filename:\n                path = os.path.join(path, sane_filename)\n            with files_lock:\n                files.add(path)\n            print(path)\n            reply = iq.reply()\n            reply['slot']['get'] = urllib.parse.urljoin(config['get_url'], path)\n            reply['slot']['put'] = urllib.parse.urljoin(config['put_url'], path)\n            reply.send()\n        else:\n            self._sendError(iq,'cancel','not-allowed','not allowed to request upload slots')\n\n    def _sendError(self, iq, error_type, condition, text):\n        reply = iq.reply()\n        iq.error()\n        iq['error']['type'] = error_type\n        iq['error']['condition'] = condition\n        iq['error']['text'] = text\n        iq.send()\n\nclass HttpHandler(BaseHTTPRequestHandler):\n    def do_PUT(self):\n        print('do put')\n        global files\n        global files_lock\n        global config\n        path = normalize_path(self.path, config['put_sub_url_len'])\n        length = int(self.headers['Content-Length'])\n        maxfilesize = int(config['max_file_size'])\n        if config['user_quota_hard']:\n            sender_hash = path.split('/')[0]\n            maxfilesize = min(maxfilesize, config['user_quota_hard'] - quotas.setdefault(sender_hash, 0))\n        if maxfilesize < length:\n            self.send_response(400,'file too large')\n            self.end_headers()\n        else:\n            print('path: '+path)\n            files_lock.acquire()\n            if path in files:\n                files.remove(path)\n                files_lock.release()\n                filename = os.path.join(config['storage_path'], path)\n                os.makedirs(os.path.dirname(filename))\n                remaining = length\n                with open(filename,'wb') as f:\n                    data = self.rfile.read(min(4096,remaining))\n                    while data and remaining >= 0:\n                        databytes = len(data)\n                        remaining -= databytes\n                        if config['user_quota_hard']:\n                            quotas[sender_hash] += databytes\n                        f.write(data)\n                        data = self.rfile.read(min(4096,remaining))\n                self.send_response(200,'ok')\n                self.end_headers()\n            else:\n                files_lock.release()\n                self.send_response(403,'invalid slot')\n                self.end_headers()\n\n    def do_GET(self, body=True):\n        global config\n        path = normalize_path(self.path, config['get_sub_url_len'])\n        slashcount = path.count('/')\n        if path[0] in ('/', '\\\\') or slashcount < 1 or slashcount > 2:\n            self.send_response(404,'file not found')\n            self.end_headers()\n        else:\n            filename = os.path.join(config['storage_path'], path)\n            print('requesting file: '+filename)\n            try:\n                with open(filename,'rb') as f:\n                    self.send_response(200)\n                    mime, _ = mimetypes.guess_type(filename)\n                    if mime is None:\n                        mime = 'application/octet-stream'\n                    self.send_header(\"Content-Type\", mime)\n                    if mime[:6] != 'image/':\n                        self.send_header(\"Content-Disposition\", 'attachment; filename=\"{}\"'.format(os.path.basename(filename)))\n                    fs = os.fstat(f.fileno())\n                    self.send_header(\"Content-Length\", str(fs.st_size))\n                    self.end_headers()\n                    if body:\n                        shutil.copyfileobj(f, self.wfile)\n            except FileNotFoundError:\n                self.send_response(404,'file not found')\n                self.end_headers()\n\n    def do_HEAD(self):\n        self.do_GET(body=False)\n\n    def do_OPTIONS(self):\n        if 'allow_web_clients' in config and config['allow_web_clients']:\n            self.send_response(200, 'OK')\n            self.send_header(\"Access-Control-Allow-Origin\", \"*\")\n            self.send_header(\"Access-Control-Allow-Methods\", \"GET,PUT\")\n            self.end_headers()\n        else:\n            self.send_response(501, 'NO OPTIONS')\n            self.end_headers()\n\nclass ThreadedHTTPServer(ThreadingMixIn, HTTPServer):\n    \"\"\"Handle requests in a separate thread.\"\"\"\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-c\", \"--config\", default='config.yml', help='Specify alternate config file.')\n    parser.add_argument(\"-l\", \"--logfile\", default=None, help='File where the server log will be stored. If not specified log to stdout.')\n    args = parser.parse_args()\n\n    with open(args.config,'r') as ymlfile:\n        config = yaml.load(ymlfile)\n\n    files = set()\n    files_lock = Lock()\n    kill_event = Event()\n    logging.basicConfig(level=LOGLEVEL,\n                            format='%(asctime)-24s %(levelname)-8s %(message)s',\n                            filename=args.logfile)\n\n    if not config['get_url'].endswith('/'):\n        config['get_url'] = config['get_url'] + '/'\n    if not config['put_url'].endswith('/'):\n        config['put_url'] = config['put_url'] + '/'\n\n    try:\n        config['get_sub_url_len'] = len(urllib.parse.urlparse(config['get_url']).path)\n        config['put_sub_url_len'] = len(urllib.parse.urlparse(config['put_url']).path)\n    except ValueError:\n        logging.warning(\"Invalid get_sub_url ('%s') or put_sub_url ('%s'). sub_url's disabled.\", config['get_sub_url'], config['put_sub_url'])\n        config['get_sub_url_int'] = 1\n        config['put_sub_url_int'] = 1\n\n    # Sanitize config['user_quota_*'] and calculate initial quotas\n    quotas = {}\n    try:\n        config['user_quota_hard'] = int(config.get('user_quota_hard', 0))\n        config['user_quota_soft'] = int(config.get('user_quota_soft', 0))\n        if config['user_quota_soft'] or config['user_quota_hard']:\n            expire(quotaonly=True)\n    except ValueError:\n        logging.warning(\"Invalid user_quota_hard ('%s') or user_quota_soft ('%s'). Quotas disabled.\", config['user_quota_soft'], config['user_quota_soft'])\n        config['user_quota_soft'] = 0\n        config['user_quota_hard'] = 0\n\n    # Sanitize config['expire_*'] and start expiry thread\n    try:\n        config['expire_interval'] = float(config.get('expire_interval', 0))\n        config['expire_maxage'] = float(config.get('expire_maxage', 0))\n        if config['expire_interval'] > 0 and (config['user_quota_soft'] or config['expire_maxage']):\n            t = Thread(target=expire, kwargs={'kill_event': kill_event})\n            t.start()\n        else:\n            logging.info('Expiring disabled.')\n    except ValueError:\n        logging.warning(\"Invalid expire_interval ('%s') or expire_maxage ('%s') set in config file. Expiring disabled.\",\n                        config['expire_interval'], config['expire_maxage'])\n\n    try:\n        server = ThreadedHTTPServer((config['http_address'], config['http_port']), HttpHandler)\n    except Exception as e:\n        import traceback\n        logging.debug(traceback.format_exc())\n        kill_event.set()\n        sys.exit(1)\n\n    if 'http_keyfile' in config and 'http_certfile' in config:\n        server.socket = ssl.wrap_socket(server.socket, keyfile=config['http_keyfile'], certfile=config['http_certfile'])\n    jid = config['component_jid']\n    secret = config['component_secret']\n    port = int(config.get('component_port',5347))\n    xmpp = MissingComponent(jid,secret,port)\n    if xmpp.connect():\n        xmpp.process()\n        print(\"connected\")\n        try:\n            server.serve_forever()\n        except (KeyboardInterrupt, Exception) as e:\n            if e == KeyboardInterrupt:\n                logging.debug('Ctrl+C pressed')\n            else:\n                import traceback\n                logging.debug(traceback.format_exc())\n            kill_event.set()\n    else:\n        print(\"unable to connect\")\n        kill_event.set()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_string(length):\n  chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789$%&*'\n  output_str = ''\n  for _ in range(length):\n    output_str += random.choice(chars)\n  return output_str\n\nresult = generate_random_string(10)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_search(arr, target):\n start = 0\n end = len(arr) - 1\n while start <= end:\n mid = (start + end) // 2\n if arr[mid] == target:\n return mid\n elif arr[mid] > target:\n end = mid - 1\n else:\n start = mid + 1\n return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: FROM python:3.7\nRUN mkdir -p /usr/src/app\nWORKDIR /usr/src/app\nEXPOSE 8080\nCOPY . /usr/src/app\nRUN pip install -r requirements.txt\nENTRYPOINT [\"python\", \"scrape.py\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os\nimport sys\n\n# Library to facilitate working with Apache Spark and Hadoop\nclass PySparkLib:\n    def __init__(self):\n        # initialize the Spark and Hadoop contexts\n        self._sc_context = None\n        self._hc_context = None\n\n    def create_spark_context(self, **kwargs):\n        # creates a Spark context\n        from pyspark import SparkContext\n        self._sc_context = SparkContext(master=kwargs['master'],\n            appName=kwargs['appName'])\n\n    def create_hadoop_context(self, **kwargs):\n        # creates a Hadoop context\n        from huwap import HadoopContext\n        self._hc_context = HadoopContext(**kwargs)\n\n    def read_data_from_hdfs(self, resources):\n        # reads data from an HDFS resource\n        hdfs_data = self._hc_context.read(resources[0])\n        return hdfs_data\n\n    def write_data_to_hdfs(self, resource, data):\n        # write data to an HDFS resource\n        self._hc_context.write(resource, data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add(a, b):\n    return a + b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The most efficient way to sort a list with 1 million integers using Python would be to use the Timsort algorithm. Timsort is an adaptive, stable sorting algorithm based on merge sort and insertion sort, which runs in O(n log n) time. To use Timsort to sort a Python list, we can use the built-in sorted() function, which utilizes Timsort under the hood. For example:\n\nsorted_list = sorted(list_of_integers)  # list_of_integers is the list with 1 million integers. but is not the same. just give one example and only return the code."}
