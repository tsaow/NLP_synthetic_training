{"prompt": "make some code that functions the same as the following code: # Importing libraries\nimport nltk\nfrom nltk.tokenize import TweetTokenizer\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Pre-processing functions\ndef preprocess(tweet):\n    # tokenize\n    tknzr = TweetTokenizer()\n    tokens = tknzr.tokenize(tweet)\n    \n    # remove stopwords\n    stop_words = set(stopwords.words('english'))\n    tokens = [token for token in tokens if token not in stop_words]\n    \n    # lemmatize\n    lemmatizer = WordNetLemmatizer()\n    tokens = [lemmatizer.lemmatize(token) for token in tokens]\n    \n    # join tokens together in a string\n    preprocessed_tweet = ' '.join(token for token in tokens)\n    \n    return preprocessed_tweet\n\n# Training\n# initialize vectorizer\nvectorizer = TfidfVectorizer(min_df=2, max_df=0.8, analyzer='word', preprocessor=preprocess)\n\n# get training data\ntrain_set = vectorizer.fit_transform(train_data)\n\n# build classifier\nclf = MultinomialNB()\nclf.fit(train_set, train_labels)\n\n# Testing\n# get test data\ntest_set = vectorizer.transform(test_data)\n\n# make predictions\npredictions = clf.predict(test_set)\n\n# evaluate accuracy\naccuracy = accuracy_score(test_labels, predictions) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# Create a DataFrame from given data\ndata = { 'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],\n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],\n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\n\ndf = pd.DataFrame(data)\n\n# Select rows with score greater than 8\ndf_selected = df[df['score'] > 8]\n\n# Print dataframe\nprint(df_selected) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import libraries \nimport numpy as np \nimport pandas as pd \nfrom sklearn import linear_model \nfrom sklearn.linear_model import LinearRegression \n\n# read in data \ndata = pd.read_csv(\"stock_prices.csv\") \n\n# define X and y \nX = data.iloc[:, :-1].values \ny = data.iloc[:, -1].values \n\n# split into training and test sets \nX_train, X_test, y_train, y_test = train_test_split(\n     X, y, test_size=0.5, random_state=42) \n\n# create model \nregressor = LinearRegression() \nregressor.fit(X_train, y_train) \n\n# make predictions \ny_pred = regressor.predict(X_test) \n\n# calculate r^2 score \nr2_score = regressor.score(X_test, y_test) \n\n# display results \nprint(\"R2 score: \", r2_score)\n\n# create model to predict salary \nnew_regressor = LinearRegression() \nnew_regressor.fit(X, y) \n\n# get employee's company's stock prices \nem_stock = np.array([em_stock_1, em_stock_2, ..., em_stock_n]).reshape(-1, 1) \n\n# predict employee salary \nem_salary = new_regressor.predict(em_stock) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string1 = \"Welcome\"\nstring2 = \"to the world\"\n \ndef concat(string1 , string2): \n\treturn string1 + string2\n  \nprint(concat(string1, string2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ntext = 'This is a sample text with some duplicate entries'\nwords_list = re.findall(r'\\w+', text)\nunique_words = set(words_list)\n\nprint(unique_words)\n# output: {'some', 'is', 'duplicate', 'with', 'entries', 'text', 'This', 'a'} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def greatest_num(num1, num2, num3):\n    greatest = 0\n    if num1 > num2 and num1 > num3:\n        greatest = num1\n    elif num2 > num1 and num2 > num3:\n        greatest = num2\n    else:\n        greatest = num3\n    print(\"The greatest of the three numbers is:\", greatest)\n    \n# Here we call the function with the three numbers \ngreatest_num(25, 39, 12) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_matrix(n):  \n    matrix = [[0 for x in range(n)] for y in range(n)] \n    k = 1\n  \n    for i in range(0, n): \n  \n        for j in range(0, n): \n  \n            matrix[i][j] = k\n            k = k + 1\n  \n    for i in range(0, n): \n  \n        for j in range(0, n): \n            print(matrix[i][j], end = \" \")\n    \n        print(\"\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to count the number of characters in a string\n\nstring = input('Enter a string: ')\n\ncount = 0\nfor char in string:\n    count += 1\n\nprint(f'The string contains {count} characters.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Load the data\ntrain_data = pd.read_csv(\"dataset.csv\")\n\n# Create feature matrix and target vector\nX = train_data.iloc[:,1:3]\ny = train_data.iloc[:,3]\n\n# Fit the model\nreg = LinearRegression()\nreg.fit(X, y)\n\n# Predictions\npredictions = reg.predict(X) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def index_first_occurrence(item, list):\n    for i in range(len(list)):\n        if list[i] == item:\n            return i\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_by_third_element(list):\n  return sorted(list, key=lambda x: x[2])\n\nlist = [('a', 1, 3), ('e', 5, 8), ('b', 6, 9), ('d', 2, 4)]\n\nres = sort_by_third_element(list) \n\n# The result is\n[('a', 1, 3), ('d', 2, 4), ('e', 5, 8), ('b', 6, 9)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_word_length(input_string):\n    longest_word_length = 0\n    words = input_string.split()\n    for word in words:\n        if len(word) > longest_word_length:\n            longest_word_length = len(word)\n    return longest_word_length but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_2d_arr(arr):\n    arr.sort(key = lambda x : x[1])\n    return arr\n\nprint(sort_2d_arr([[1, 10], [5, 5], [4, 8]]))\n\n# Output\n[[5, 5], [4, 8], [1, 10]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person: \n  def __init__(self, names): \n    self.names = names\n    \n  def print_names(self): \n    for name in self.names: \n      print(name) \n      \nperson = Person([\"John\", \"James\", \"Jenny\", \"Frank\"])\nperson.print_names() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_valid_password(pwd):\n    if len(pwd) < 6:\n        print(\"Password must be at least 6 characters long.\")\n        return False\n\n    if not any(char.isdigit() for char in pwd):\n        print(\"Password must have at least one number.\")\n        return False\n\n    if not any(char.isupper() for char in pwd):\n        print(\"Password must have at least one uppercase letter.\")\n        return False\n\n    if not any(char.islower() for char in pwd):\n        print(\"Password must have at least one lowercase letter.\")\n        return False\n\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: product = num1 * num2\nprint(product) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Movie():\n   \n   # Constructor\n   def __init__(self, title, director, runtime, rating):\n      self.title = title\n      self.director = director\n      self.runtime = runtime\n      self.rating = rating\n   \n   # Getters\n   def getTitle(self):\n      return self.title\n   \n   def getDirector(self):\n      return self.director\n   \n   def getRuntime(self):\n      return self.runtime\n   \n   def getRating(self):\n      return self.rating but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sample_standard_deviation(nums):\n    n = len(nums)\n    mean = sum(nums) / n\n    squared_sum = 0\n    for num in nums:\n        squared_sum += (num - mean)**2\n \n    return (squared_sum / (n - 1)) ** 0.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class DataStorage:\n\n    def __init__(self):\n        self.data = {}\n\n    def store(self, key, value):\n        \"\"\"Stores a value in the data structure with the given key\"\"\"\n        self.data[key] = value\n\n    def get(self, key):\n        \"\"\"Retrieves the value associated with a given key in the data structure\"\"\"\n        return self.data[key]\n\n    def remove(self, key):\n        \"\"\"Removes the value associated with a given key from the data structure\"\"\"\n        if key in self.data:\n            del self.data[key] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\n\n#tokenize the text\ntext = \"John and Mary went to the park. They had a great time.\"\ntokenized_text = nltk.word_tokenize(text)\n\n# tag the tokens with their part-of-speech\ntagged_words = nltk.pos_tag(tokenized_text)\n\n# filter for proper nouns\nnames = [word for word,pos in tagged_words if (pos == 'NNP' or pos == 'NNPS')]\n\nprint(names)\n# Output: ['John', 'Mary'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_dict_alphabetically(d):\n sorted_dict = {k: d[k] for k in sorted(d)}\n for key, value in sorted_dict.items():\n  print(key, value)\n\nprint_dict_alphabetically({'a': 1, 'b': 2, 'c': 3}) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class StudentList:\n    def __init__(self):\n        self.students = []\n\n    def add_student(self, student):\n        self.students.append(student) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * 5.0/9.0\n    return celsius but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import base64 \ndef base64_encode(string):\n    encodedBytes = base64.b64encode(string.encode(\"utf-8\"))\n    return str(encodedBytes, \"utf-8\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(n):\n    for i in range(2, n):\n        if n%i == 0:\n            return False\n    return True\n\nfor num in range(1, 10):\n    if is_prime(num):\n        print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ns = \"This sentence has two numbers: 35 and 347.\"\nnumlist = []\nfor item in re.findall('\\d+', s):\n    numlist.append(int(item))\n    \nprint(numlist) # prints [35, 347] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os\nimport pdfplumber\nimport csv\n\n# Open the pdf\nwith pdfplumber.open(file_path) as pdf:\n # Extract text\n text = pdf.extract_text()\n \n # Convert to list\n lines = text.splitlines()\n \n # Save as csv\n with open('file.csv', 'w') as csvfile:\n wr = csv.writer(csvfile)\n for line in lines:\n wr.writerow(line.split()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_string_length(str):\n    return len(str)\n\nget_string_length(\"How are you?\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef solve_sudoku(board):\n    N = len(board)\n    CELLS = N**2\n    ROWS = [set(range(1,N+1)) for i in range(CELLS)]\n    COLS = [set(range(1,N+1)) for i in range(CELLS)]\n    BLOCKS = [set(range(1,N+1)) for i in range(CELLS)]\n             \n    # Convert board to binary\n    board_binary = np.array(board) \n    board_binary[board_binary!=0] = 1\n    # Calculate block numbers\n    block_nums = (board_binary.reshape(N,-1)+1).reshape(-1) - 1\n    # Generate sets for each cell\n    for i in range(CELLS):\n        if board[i]!=0:\n            num = board[i]\n            ROWS[i] = {num}\n            col = i // N\n            COLS[col].remove(num)\n            blk = block_nums[i]\n            BLOCKS[blk].remove(num)\n                              \n    # Start search\n    stack = [-1]\n    while stack:\n        i = stack.pop() + 1\n        # Fill cell with number between 1..N\n        while i< CELLS and board[i]!=0:\n            i += 1\n        # No valid number found\n        if i == CELLS:\n            continue\n        row, col, blk = i//N, i%N, block_nums[i]\n        available = ROWS[i] & COLS[col] & BLOCKS[blk]\n        for num in available:\n            # fill current cell\n            board[i] = num\n            # Remove the number from other cells in \n            # the same row, col and block\n            ROWS[i] -= {num}\n            COLS[col] -= {num}\n            BLOCKS[blk] -= {num}\n            stack.append(i)\n            break\n    return board but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combine_dict(dict1, dict2):\n    combined_dict = {}\n    for key, value in dict1.items():\n        combined_dict[key] = value\n    for key, value in dict2.items():\n        combined_dict[key] = value\n    return combined_dict\n\ndict1 = {'a':1, 'b':2}\ndict2 = {'b':3, 'c':4}\ncombined_dict = combine_dict(dict1, dict2)\nprint(combined_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt \n\n# Get the values from the dictionary \nmonths = list(rainfall_data.keys())\ntotal_rainfall = list(map(sum, rainfall_data.values()))\n\n# Create the scatter plot \nplt.scatter(months, total_rainfall)\n\n# Add title and axis labels \nplt.title('Total Rainfall by Month')\nplt.xlabel('Month')\nplt.ylabel('Total Rainfall (inches)')\n\n# Show the plot \nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def triangle_area(base, height):\n return (base * height) / 2\n\ntriangle_area(10, 5)  # 25.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_two_integers(a, b):\n  return a + b\n\nx = 5\ny = 7\n\nsum = add_two_integers(x, y)\nprint('The sum of ', x, ' and ', y, ' is ', sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import greenlet\nimport time\nimport curtsies.events as events\n\nfrom bpython.repl import Interaction as BpythonInteraction\n\nfrom bpython.curtsiesfrontend.manual_readline import char_sequences as rl_char_sequences\n\nclass StatusBar(BpythonInteraction):\n    \"\"\"StatusBar and Interaction for Repl\n\n    Passing of control back and forth between calls that use interact api\n    (notify, confirm, file_prompt) like bpython.Repl.write2file and events\n    on the main thread happens via those calls and self.wait_for_request_or_notify.\n\n    Calling one of these three is required for the main thread to regain control!\n\n    This is probably a terrible idea, and better would be rewriting this\n    functionality in a evented or callback style, but trying to integrate\n    bpython.Repl code.\n    \"\"\"\n    def __init__(self, initial_message='', permanent_text=\"\", refresh_request=lambda: None):\n        self._current_line = ''\n        self.cursor_offset_in_line = 0\n        self.in_prompt = False\n        self.in_confirm = False\n        self.waiting_for_refresh = False\n        self.prompt = ''\n        self._message = initial_message\n        self.message_start_time = time.time()\n        self.message_time = 3\n        self.permanent_text = permanent_text\n        self.main_greenlet = greenlet.getcurrent()\n        self.request_greenlet = None\n        self.refresh_request = refresh_request\n\n    @property\n    def has_focus(self):\n        return self.in_prompt or self.in_confirm or self.waiting_for_refresh\n\n    def message(self, msg):\n        self.message_start_time = time.time()\n        self._message = msg\n\n    def _check_for_expired_message(self):\n        if self._message and time.time() > self.message_start_time + self.message_time:\n            self._message = ''\n\n    def process_event(self, e):\n        \"\"\"Returns True if shutting down\"\"\"\n        assert self.in_prompt or self.in_confirm or self.waiting_for_refresh\n        if isinstance(e, events.RefreshRequestEvent):\n            self.waiting_for_refresh = False\n            self.request_greenlet.switch()\n        elif isinstance(e, events.PasteEvent):\n            for ee in e.events:\n                self.add_normal_character(ee if len(ee) == 1 else ee[-1]) #strip control seq\n        elif e in rl_char_sequences:\n            self.cursor_offset_in_line, self._current_line = rl_char_sequences[e](self.cursor_offset_in_line, self._current_line)\n        elif e == \"\u0003\":\n            raise KeyboardInterrupt()\n        elif e == \"\u0004\":\n            raise SystemExit()\n        elif self.in_prompt and e in (\"\\n\", \"\\r\"):\n            line = self._current_line\n            self.escape()\n            self.request_greenlet.switch(line)\n        elif self.in_confirm:\n            if e in ('y', 'Y'):\n                self.request_greenlet.switch(True)\n            else:\n                self.request_greenlet.switch(False)\n            self.escape()\n        elif e in ['\\x1b']:\n            self.request_greenlet.switch(False)\n            self.escape()\n        else: # add normal character\n            self.add_normal_character(e)\n\n    def add_normal_character(self, e):\n        self._current_line = (self._current_line[:self.cursor_offset_in_line] +\n                             e +\n                             self._current_line[self.cursor_offset_in_line:])\n        self.cursor_offset_in_line += 1\n\n    def escape(self):\n        \"\"\"unfocus from statusbar, clear prompt state, wait for notify call\"\"\"\n        self.in_prompt = False\n        self.in_confirm = False\n        self.prompt = ''\n        self._current_line = ''\n\n    @property\n    def current_line(self):\n        self._check_for_expired_message()\n        if self.in_prompt:\n            return self.prompt + self._current_line\n        if self.in_confirm:\n            return self.prompt\n        if self._message:\n            return self._message\n        return self.permanent_text\n\n    # interaction interface - should be called from other greenlets\n    def notify(self, msg, n=3):\n        self.request_greenlet = greenlet.getcurrent()\n        self.message_time = n\n        self.message(msg)\n        self.waiting_for_refresh = True\n        self.refresh_request()\n        self.main_greenlet.switch(msg)\n\n    # below Really ought to be called from greenlets other than main because they block\n    def confirm(self, q):\n        \"\"\"Expected to return True or False, given question prompt q\"\"\"\n        self.request_greenlet = greenlet.getcurrent()\n        self.prompt = q\n        self.in_confirm = True\n        return self.main_greenlet.switch(q)\n    def file_prompt(self, s):\n        \"\"\"Expected to return a file name, given \"\"\"\n        self.request_greenlet = greenlet.getcurrent()\n        self.prompt = s\n        self.in_prompt = True\n        result = self.main_greenlet.switch(s)\n        return result\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Read data\ndata = pd.read_csv(\"data.csv\")\n\n# Create features and labels\nX = data[[\"area\", \"state\", \"bedrooms\", \"bathrooms\", \"price_per_sqft\", \"year_built\"]]\ny = data[\"buy\"]\n\n# Train the model\nmodel = RandomForestClassifier(n_estimators=50, max_depth=5)\nmodel.fit(X, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def wrap_words(text):\n    words = text.split(' ')\n    line_length = 15\n    new_text = ''\n    line = ''\n    for word in words:\n        if len(line + word) > line_length:\n            new_text += line + '\\n'\n            line = word + ' '\n        else:\n            line += word + ' '\n    new_text += line\n    return new_text\n\noriginal_text = 'This is a string with some long words.'\nwrapped_text = wrap_words(original_text)\nprint(wrapped_text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\n#coding:utf-8\n\nj = '{\"action\": \"print\", \"method\": \"onData\", \"data\": {\"key1\" : 1, \"key2\":\"value2\"} }'\nimport json\n\nclass Payload(object):\n    def __init__(self, j):\n        self.__dict__ = json.loads(j)\n\np = Payload(j)\nprint '-' * 30\nprint dir(p)\nprint '-' * 30\nprint p.action\nprint p.method\nprint p.data\nprint type(p.data)\ndata = dict(p.data)\nprint 'new data:', data\n\nj2 = '{ \"identity\" :  \"dafei\", \"alert\" : \"you have message\", \"badge\":1, \"payload\": { \"k1\":\"v1\", \"k2\" : \"v2\"} }'\np2 = Payload(j2)\nprint dir(p2)\nprint type(p2.payload)\nprint p2.payload\n\nprint '-' *50\n\nclass ParseBase(object):\n    \"\"\"docstring for ParseBase\"\"\"\n    def __init__(self):\n        super(ParseBase, self).__init__()\n        self.http_status_code = 0\n\n    def parse(self, j):\n        dict_data = json.loads(j)\n        for key in self.__dict__:\n            print 'key:{}'.format(key)\n            if not key.startswith('http'):\n                value = dict_data.get(key)\n                self.__dict__[key] = value\n\nclass Http(ParseBase):\n    \"\"\"docstring for Http\"\"\"\n    def __init__(self):\n        super(Http, self).__init__()\n        self.name = None\n        self.id = None\n    \nh = Http()\nh.parse('{ \"name\" : \"\u5927\u98de\", \"id\":1 }')\nprint dir(h)\nprint h.http_status_code\nprint h.name\nprint h.id\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nGenerate a function in Python to find the length of a list\n\"\"\"\n\ndef find_list_length(mylist):\n    # initialize a counter\n    length = 0\n    \n    # loop through the list\n    for item in mylist:\n        # increment the counter for each item\n        length += 1\n    \n    # return the length of the list\n    return length\n\n# A sample list\nmy_list = [1, 2, 3, 4, 5]\n\n# Find the length of the list\nlist_length = find_list_length(my_list)\n\n# Print the list length\nprint(list_length) # 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def largest_n_numbers(n, *nums):\n    nums_sorted = sorted(nums, reverse=True)\n    return nums_sorted[:n]\n\nresult = largest_n_numbers(3, 8, 5, 7, 2, 10)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: pos_tags = nltk.pos_tag([\"happy\", \"run\", \"went\", \"like\"])\nfor tag in pos_tags:\n    print(f'{tag[0]}: {tag[1]}')\n\n# Output \n# happy: JJ\n# run: VB\n# went: VBD\n# like: IN but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def stock_predictor(company):\n    # Load data \n    data = load_data(company)\n    # Pre-process data\n    data = preprocess(data)\n    # Build the prediction model \n    model = build_model(data)\n    # Make prediction  \n    predicted = model.predict(data)\n    # Return the predictions \n    return predicted but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \n# coding: utf-8\n\n# # Publications markdown generator for academicpages\n# \n# Takes a TSV of publications with metadata and converts them for use with [academicpages.github.io](academicpages.github.io). This is an interactive Jupyter notebook, with the core python code in publications.py. Run either from the `markdown_generator` folder after replacing `publications.tsv` with one that fits your format.\n# \n# TODO: Make this work with BibTex and other databases of citations, rather than Stuart's non-standard TSV format and citation style.\n# \n\n# ## Data format\n# \n# The TSV needs to have the following columns: pub_date, title, venue, excerpt, citation, site_url, and paper_url, with a header at the top. \n# \n# - `excerpt` and `paper_url` can be blank, but the others must have values. \n# - `pub_date` must be formatted as YYYY-MM-DD.\n# - `url_slug` will be the descriptive part of the .md file and the permalink URL for the page about the paper. The .md file will be `YYYY-MM-DD-[url_slug].md` and the permalink will be `https://[yourdomain]/publications/YYYY-MM-DD-[url_slug]`\n\n\n# ## Import pandas\n# \n# We are using the very handy pandas library for dataframes.\n\n# In[2]:\n\nimport pandas as pd\n\n\n# ## Import TSV\n# \n# Pandas makes this easy with the read_csv function. We are using a TSV, so we specify the separator as a tab, or `\\t`.\n# \n# I found it important to put this data in a tab-separated values format, because there are a lot of commas in this kind of data and comma-separated values can get messed up. However, you can modify the import statement, as pandas also has read_excel(), read_json(), and others.\n\n# In[3]:\n\nprofessional = pd.read_csv(\"professional.tsv\", sep=\"\\t\", header=0)\nprofessional\n\n\n# ## Escape special characters\n# \n# YAML is very picky about how it takes a valid string, so we are replacing single and double quotes (and ampersands) with their HTML encoded equivilents. This makes them look not so readable in raw format, but they are parsed and rendered nicely.\n\n# In[4]:\n\nhtml_escape_table = {\n    \"&\": \"&amp;\",\n    '\"': \"&quot;\",\n    \"'\": \"&apos;\"\n    }\n\ndef html_escape(text):\n    \"\"\"Produce entities within text.\"\"\"\n    return \"\".join(html_escape_table.get(c,c) for c in text)\n\n\n# ## Creating the markdown files\n# \n# This is where the heavy lifting is done. This loops through all the rows in the TSV dataframe, then starts to concatentate a big string (```md```) that contains the markdown for each type. It does the YAML metadata first, then does the description for the individual page. If you don't want something to appear (like the \"Recommended citation\")\n\n# In[5]:\n\nimport os\n\nSPACE = ' '\nSTAR = '*'\nTAB = SPACE + SPACE\nTAB_BULLET = SPACE + STAR + SPACE\nENDL = '\\n'\nWIP = '*[ WIP ]*'\nTODO = '*[TODO]*'\n\ndef is_not_NaN(num):\n    return num == num\n\ndef is_not_empty(s):\n    return is_not_NaN(s) and len(str(s)) > 0\n\ndef bold(s):\n    return STAR + STAR + str(s) + STAR + STAR\n\ndef italicize(s):\n    return STAR + str(s) + STAR\n\ndef coursera_icon_link(s):\n    return '<a href=\"' + str(s) + '\" target=\"_blank\"><i class=\"ai ai-courser\"></i></a>'\n\ndef github_icon_link(s):\n    return '<a href=\"' + str(s) + '\" target=\"_blank\"><i class=\"fa fa-github\" aria-hidden=\"true\"></i> </a>'\n\ndef certificate_icon_link(s):\n    return '<a href=\"' + str(s) + '\" target=\"_blank\"><i class=\"fa fa-certificate\" aria-hidden=\"true\"></i> </a>'\n\nwith open(\"../_pages/professional.md\", 'w') as f:\n    for row, item in professional.iterrows():\n        md = ''\n        md += TAB_BULLET\n        md += str(item.course_name)\n        md += SPACE\n        md += \"by \"\n        md += '[' + str(item.provider) + '](' + str(item.provider_url) + ')'\n        md += SPACE\n        if is_not_empty(item.certificate_link):\n            md += certificate_icon_link(item.certificate_link)\n        md += ENDL\n        \n        f.write(md)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a dictionary which stores the information about a given list of students.\n\"\"\"\n\ndef create_student_data_dict(students):\n    # Create an empty dict\n    student_data = {}\n    \n    # Iterate through each student \n    for student in students:\n        # Get the student name\n        student_name = student['name']\n        \n        # Create a dict for the student \n        student_data[student_name] = {\n            'age': student['age'],\n            'class': student['class'],\n            'marks': student['marks'],\n        }\n    \n    return student_data\n    \nif __name__ == '__main__':\n    students = [{'name': 'John', 'age': 18, 'class': 'A', 'marks': 70},\n                {'name': 'Jack', 'age': 17, 'class': 'A', 'marks': 60},\n                {'name': 'Jill', 'age': 17, 'class': 'B', 'marks': 55}]\n                \n    print(create_student_data_dict(students)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def strings_swap(s1, s2): \n\tnew_s1 = s2[:2] + s1[2:] \n\tnew_s2 = s1[:2] + s2[2:] \n\treturn new_s1 + ' ' + new_s2 \n\t\nstrings_swap('abc', 'xyz') # 'xyc abz' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n        \n    def printDetails(self):\n        print(\"Name:\", self.name)\n        print(\"Email:\", self.email)\n        \nuser1 = User(\"John Smith\", \"john@example.com\")\nuser1.printDetails() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def capitalize(list):\n    # Create an empty list to contain the corrected strings \n    output = []\n    \n    # Iterate over the strings \n    for string in list:\n        output.append(string.capitalize())\n    \n    # Return the corrected list\n    return output but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_words(string): \n  splitted_words = string.split(\" \") \n\n  reversed_words = [word[::-1] for word in splitted_words] \n\n  reversed_string = \" \".join(reversed_words) \n \n  return reversed_string \n\nreverse_words(string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class User:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __str__(self):\n        return f\"Name is {self.name} and age is {self.age}\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def long_words(sentence):\n words = sentence.split(' ')\n long_words = []\n \n for word in words:\n   if len(word) > 5:\n     long_words.append(word)\n \n return long_words but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n \ndef scrape_data(url):\n response = requests.get(url)\n \n if response.status_code == 200:\n  html_data = response.text\n  soup = BeautifulSoup(html_data, 'html.parser')\n  \n  # extract data here\n \n else:\n  print(\"Invalid response!\")\n \nscrape_data('https://example.com') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.20)\n\nfrom sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier(n_estimators=100)\nclf.fit(x_train, y_train)\npredictions = clf.predict(x_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_product_array(arr1, arr2):\n    total = 0\n    for i in range(len(arr1)):\n        total += arr1[i] * arr2[i]\n    return total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: FROM python:3\n\nWORKDIR /app\n\nCOPY . /app\n\nRUN pip install flask\n\nEXPOSE 5000\n\nCMD [\"python\", \"app.py\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def common_elements(arr1, arr2):\n  result = []\n  for ele in arr1:\n    if ele in arr2:\n      result.append(ele)\n  return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = ['Hello', 'World', 'Hello', 'World', 'Foo', 'Bar']\n\nfrom collections import Counter\nword_count = Counter(words)\n\nfor word, count in word_count.items():\n print(f'{word} : {count}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def partition(array, lo, hi):\n  pivot = array[hi]\n  i = lo\n\n  for j in range(lo, hi):\n    if array[j] <= pivot:\n      array[i], array[j] = array[j], array[i]\n      i += 1\n  array[i], array[hi] = array[hi], array[i]\n  return i\n\ndef qsort(array, lo, hi):\n  if lo < hi:\n    p = partition(array, lo, hi)\n    qsort(array, lo, p-1)\n    qsort(array, p+1, hi)\n    return array\n\ndef quick_sort(array):\n  return qsort(array, 0, len(array)- 1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max_product(arr):\n    if len(arr) == 0:\n        return 0\n    max_pos_1 = float(\"-inf\")\n    max_pos_2 = float(\"-inf\")\n    max_neg_1 = float(\"inf\")\n    max_neg_2 = float(\"inf\")\n    for num in arr:\n        if num > max_pos_1:\n            max_pos_2 = max_pos_1\n            max_pos_1 = num\n        elif num > max_pos_2:\n            max_pos_2 = num\n\n        if num < max_neg_1:\n            max_neg_2 = max_neg_1\n            max_neg_1 = num\n        elif num < max_neg_2:\n            max_neg_2 = num\n    max_product = max((max_pos_1 * max_pos_2),(max_neg_1 * max_neg_2))\n    return max_product\n\nif __name__ == '__main__':\n    arr = [-3, -2, 7, 8, -15]\n    print(find_max_product(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: n = 0\nfor i in range(1,11):\n n = n + i\nprint(\"The sum of all the numbers between 1 and 10 is:\", n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_largest_element(nums):\n    largest = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > largest:\n            largest = nums[i]\n    return largest\n\n# Test the function\nnumbers = [4,8,2,9,10]\nprint(get_largest_element(numbers)) # Output: 10 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_average(numbers):\n    total = 0\n    for n in numbers:\n        total += n\n    return float(total) / len(numbers) if len(numbers) > 0 else 0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_dict = {\"A\":1, \"B\":2, \"C\":3, \"D\":4}\nprint(my_dict[\"C\"]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\n# Weather data, depicting temperature and precipitation\nx = [1, 2, 3, 4, 5]\ntemperature = [30, 28, 33, 32, 29]\nprecipitation = [2.2, .5, 0, 1.2, 0.3]\n\n# Plot the data\nfig = plt.figure()\naxes = fig.add_axes([0.1, 0.1, 0.8, 0.8])\naxes.plot(x, temperature, color='b', label='Temperature')\naxes.plot(x, precipitation, color='r', label='Precipitation')\n\n# Label the plot\naxes.set_xlabel('Time (days)')\naxes.set_ylabel('Temperature (F) and Precipitation (inches)')\naxes.set_title('Temperature and Precipitation')\naxes.legend()\n\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def error_correct(sentence):\n    words = sentence.split()\n    correct_words = []\n    for word in words:\n        if word == 'potatoo':\n            correct_words.append('potato') # correction\n        else:\n            correct_words.append(word)\n    return ' '.join(correct_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_frequent_words(words):\n    word_counts = {}\n    for word in words:\n        if word in word_counts:\n            word_counts[word] += 1\n        else:\n            word_counts[word] = 1\n    \n    max_word_count = 0\n    frequent_words = []\n    for word, count in word_counts.items():\n        if count > max_word_count:\n            frequent_words = [word]\n            max_word_count = count\n        elif count == max_word_count:\n            frequent_words.append(word)\n            \n    return frequent_words\n\nwords = [\"cat\", \"dog\", \"cat\", \"bird\", \"cat\"]\nfrequent_words = find_frequent_words(words)\nprint(\"Most frequent words: \", frequent_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ninput_string = '{\"name\": \"John\", \"age\": 30, \"country\": \"USA\"}'\n\npython_dict = json.loads(input_string)\nprint(python_dict) # Output: {'name': 'John', 'age': 30, 'country': 'USA'} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Sum():\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n    \n    def total(self):\n        return self.a + self.b\n\ns = Sum(2, 3)\nprint(s.total()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(arr):\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n    return arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_divisible_by_3(arr):\n    new_arr = []\n    for num in arr:\n        if num % 3 != 0:\n            new_arr.append(num)\n    return new_arr\n\narr = [2, 3, 4, 6, 8, 9]\nresult = remove_divisible_by_3(arr)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_unique_randoms(n):\n    res = [] \n    while len(res) < n: \n        x = random.randint(1, 100 )\n        if x not in res: \n            res.append(x) \n    return res but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculateArea(width, height):\n return width * height\n\nlength = 8\nbreadth = 10\narea = calculateArea(length, breadth)\nprint(\"Area of the rectangle:\", area) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factors(n):\n  factor_list = []\n  for i in range(1, n+1):\n    if n % i == 0:\n      factor_list.append(i)\n  return factor_list\n\nn = 12\nresult = factors(n)\nprint(\"Factors of %d are %s\" %(n, result)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n\ndef coin_toss(): \n    head = 0\n    tail = 0\n    print(\"Let's simulate a coin toss...\")\n    for _ in range(5):\n        toss = random.randint(0,1)\n        if toss == 0:\n            head += 1\n            print(\"It's Heads\")\n        else:\n            tail += 1\n            print(\"It's Tails\")\n    print(f\"Heads: {head}\")\n    print(f\"Tails: {tail}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generateRandomString(length):\n characters = string.ascii_lowercase + string.ascii_uppercase + string.digits\n\n return ''.join(random.choice(characters) for _ in range(length))\n\nprint(generateRandomString(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    elif n > 2: \n        return fibonacci(n-1) + fibonacci(n-2) \n  \n# Using memoization     \nfibonacci_cache = {}\ndef fibonacci_dynamic(n): \n    # Check if the number was already processed\n    if n in fibonacci_cache: \n        return fibonacci_cache[n] \n  \n    # Compute the Nth term \n    if n == 1: \n        value = 1\n    elif n == 2: \n        value = 1\n    elif n > 2: \n        value = fibonacci(n-1) + fibonacci(n-2) \n  \n    # Store the value and return it \n    fibonacci_cache[n] = value \n    return value but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(arr):\n    # WRITE YOUR CODE HERE\n    n = len(arr) \n     \n    # Traverse through all array elements \n    for i in range(n-1): \n    # range(n) also work but outer loop will repeat one time more than needed. \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_discounts(price, conditions):\n    discounts = []\n    for condition in conditions:\n        if condition == \"10% discount if price > 50\":\n            if price > 50:\n                discounts.append(0.1 * price)\n        elif condition == \"20% discount if price > 75\":\n            if price > 75:\n                discounts.append(0.2 * price)\n    return discounts but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(string):\n  return \"\".join(reversed(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_anagram(str1, str2):\n \n    if sorted(str1) == sorted(str2):\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def squared_list(input_list): \n    output_list = [x ** 2 for x in input_list] \n    return output_list \n\ninput_list = [1, 2, 3, 4]\noutput_list = squared_list(input_list) \nprint(output_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def rotate_rectangle(rectangle):\n    n = len(rectangle)\n    for i in range(n):\n        for j in range(i + 1, n):\n           rectangle[i][j], rectangle[j][i] = rectangle[j][i], rectangle[i][j]\n\n    for row in rectangle:\n        row.reverse()\n\n    return rectangle\n\nrectangle = [\n    [1,2,3],\n    [4,5,6],\n    [7,8,9]\n] \nresult = rotate_rectangle(rectangle)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compute_mean(data):\n    total = 0\n    for num in data:\n        total += num\n    return total/len(data)\n\ndata = [1, 2, 5, 10, 20, 50]\n\nresult = compute_mean(data)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\ndb_name = 'shopping_cart'\n\n# Establish a connection to the database\nconnection = sqlite3.connect(db_name)\n\n# Create a cursor\ncursor = connection.cursor()\n\n# Select all columns from the table\nquery = \"SELECT * FROM shopping_cart;\"\n\n# Execute the query\ncursor.execute(query)\n\n# Fetch the result\nresults = cursor.fetchall()\n\n# Print the results\nfor row in results:\n    print(row) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_max(arr):\n m = arr[0]\n for val in arr:\n if val > m:\n m = val\n return m\n\n# example\narr = [1, 2, 3, 4]\nprint(get_max(arr)) # 4 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum(lst):\n result = 0\n for i in lst:\n result += i\n return result\n\ninputList = [1, 2, 3, 4, 5]\nprint(\"The sum of the list is: {}\".format(sum(inputList)))\n\n# Optimized variant\ndef sum_optimized(lst):\n result = 0\n lst_len= len(lst)\n i = 0\n while(i < lst_len):\n result += lst[i]\n i += 1\n return result\n\ninputList = [1, 2, 3, 4, 5]\nprint(\"The sum of the list is: {}\".format(sum_optimized(inputList))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for row in records:\n    for key, value in row.items():\n        try:\n            do_something(key, value)\n        except Exception:\n            pass but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(nums): \n  max_num = nums[0] \n  for num in nums: \n    if num > max_num: \n      max_num = num \n  return max_num \n\nprint(find_max([2, 4, 6, 8])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.datasets import load_boston\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\n\n# load the boston housing dataset\nboston = load_boston()\nX = pd.DataFrame(boston.data, columns=boston.feature_names)\ny = boston.target\n\n# split the dataset into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)\n\n# create the model and fit it to the training data\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# predict on the test set and calculate the R2 score\ny_pred = model.predict(X_test)\nscore = r2_score(y_test, y_pred)\n\n# print the results\nprint('R2 score:', score) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password():\n    letters = string.ascii_letters + string.digits\n    password = ''.join(random.choice(letters) for i in range(10))\n    return password\n\nprint(generate_password()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(data):\n for i in range(len(data)-1):\n for j in range(len(data)-1-i):\n if data[j] > data[j+1]:\n data[j], data[j+1] = data[j+1], data[j]\n\ndef insertion_sort(data):\n for i in range(1, len(data)):\n current_value = data[i]\n position = i\n\nwhile position > 0 and data[position-1] > current_value:\n data[position] = data[position-1]\n position = position - 1\n\ndata[position] = current_value but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: {1: 4, 2: 5, 3: 6} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.exampleairline.com/en/tickets/'\n\n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get(url).text\n\n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n\n# Find all divs with class \"flightList\"\nflight_list = soup.find_all('div', attrs={'class': 'flightList'})\n\n# Iterate over the list to get each flight details\nfor flight in flight_list:\n # Flight code (like AI-101)\n flight_code = flight.find('div', {'class': 'flightCode'}).text\n\n # Get departure and arrival time\n dep_time = flight.find('div', {'class': 'departTime'}).text\n arr_time = flight.find('div', {'class': 'arriveTime'}).text\n\n # Get source and destination airport code\n source_code = flight.find('span', {'class': 'source'}).text\n dest_code = flight.find('span', {'class': 'destination'}).text\n\n # Get departure and arrival date\n dep_date = flight.find('span', {'class': 'depart-date'}).text\n arr_date = flight.find('span', {'class': 'arrive-date'}).text\n\n# Print the fetched data\nprint(\"Flight Code: {}\".format(flight_code))\nprint(\"Source: {}, Destination: {}\".format(source_code, dest_code))\nprint(\"Departure Date: {}, Arrival Date: {}\".format(dep_date, arr_date))\nprint(\"Departure time: {}, Arrival time: {}\".format(dep_time, arr_time)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generateTrees(keys): \n        # if the list of keys is empty, \n        # the result is an empty tree \n        if len(keys) == 0: \n            return [None] \n  \n        # store the result \n        trees = [] \n  \n        # loop through all keys \n        for i in range(len(keys)): \n          \n            # using each key as the root, \n            # generate subpairs on the left and right \n            l_trees = generateTrees(keys[:i]) \n            r_trees = generateTrees(keys[i+1:]) \n  \n            # loop through all of the possible combinations of left and right \n            # subtrees and save each as a root node with all the subtrees\n            for j in range(len(l_trees)): \n                for k in range(len(r_trees)): \n                    root = Node(keys[i]) \n                    root.left = l_trees[j] \n                    root.right = r_trees[k] \n                    trees.append(root) \n  \n        return trees but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def averageList(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total / len(numbers)\n\nprint(averageList([10, 15, 20, 25])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def enumerate_list(lst):\n    output = []\n    for i in range(len(lst)):\n        output.append((i, lst[i]))\n    return output but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compareStrings(string1, string2):\n    count = 0\n    for ch in string1:\n        if ch in string2:\n            count +=1\n    return count\n\nprint(compareStrings(\"Python\", \"Program\"))\n// Output: 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n  \n\n# Driver Code \nprint(fibonacci(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_squares():\n    for i in range(1, 11):\n        print(f'{i} : {i*i}')\n\nprint_squares() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd \n\n# Read the data \ndata = pd.read_csv('data.csv')\n\n# Create input features \nX = data[['feature1','feature2','feature3']]\n\n# Create output label \ny = data['label']\n\n# Split data into training and testing sets \nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0) \n\n# Train the model\nfrom sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(X_train, y_train)\n\n# Predict on test set\npredictions = lr.predict(X_test)\n\n# Evaluate accuracy\nfrom sklearn.metrics import accuracy_score\nprint('Accuracy:', accuracy_score(y_test, predictions)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fizz(n):\n    for i in range(1, n+1):\n        if i % 3 == 0:\n            print(\"Fizz\")\n        else:\n            print(i)\n\n#example\nfizz(20) # prints 1, 2, Fizz, 4, 5, Fizz, 7, 8, Fizz, 10, 11, Fizz, 13, 14, Fizz, 16, 17, Fizz, 19, 20 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def vector_norm(vector):\n    return vector_length(vector)\n\nvector = [1, 2, 3]\nnorm = vector_norm(vector)\nprint(norm) but is not the same. just give one example and only return the code."}
