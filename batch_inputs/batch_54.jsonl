{"prompt": "make some code that functions the same as the following code: list = [1,2,3,4,5]\nfor i in reversed(list):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseString(string):\n    newString = \"\"\n    length = len(string)\n    for i in range(length - 1, -1, -1):\n        newString += string[i]\n    return newString\n\nprint(reverseString(\"Hello World!\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import libraries\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import BernoulliNB\n\n# read data\ndf = pd.read_csv('data.csv')\n\n# set up dependent and independent variables\nX = df['text']\ny = df['sentiment']\n\n# creating document term matrix\nvectorizer = CountVectorizer() \nX_dtm = vectorizer.fit_transform(X).toarray() \n\n# split data into train and test set\nX_train, X_test, y_train, y_test = train_test_split(X_dtm, y, test_size = 0.2, random_state = 0)\n\n# train model\nnb = BernoulliNB() \nnb.fit(X_train, y_train) \n\n# evaluate model\naccuracy = nb.score(X_test, y_test) \n\n# predicting sentiment\ntext = 'I love it when the weather is good.'\ndata = vectorizer.transform([text]).toarray()\nprediction = nb.predict(data)\nprint(prediction)\n# Output: ['positive'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def median_list(list_of_numbers):\n    list_of_numbers.sort()\n    length_list = len(list_of_numbers)\n\n    if length_list % 2 == 0:\n        return (list_of_numbers[length_list//2] + list_of_numbers[(length_list//2)-1])/2\n    else:\n        return list_of_numbers[length_list//2] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def min_sum_array(arr):\n minimum = arr[0]\n total = 0\n\n for i in range (0, len(arr)):\n  element = arr[i]\n  if element < minimum:\n   minimum = element\n   total += element\n \n return total\n\narr = [13, -2, 7, -6, 5]\nmin_sum = min_sum_array(arr)\nprint(min_sum) # Output: -11 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = []\nfor i in range(1, 50, 3):\n    my_list.append(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Read data\ndata = pd.read_csv('arrhythmaiadata.csv')\n\n# Select features and targets\nX = data.drop('arrhythmia', axis=1)\ny = data.arrhythmia\n\n# Split data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train model\nmodel = RandomForestClassifier(n_estimators=100, random_state=42)\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Calculate accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint('Accuracy: %.2f' % (accuracy)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MyList:\n    def __init__(self):\n        self.elements = []\n\n    def add_element(self, element):\n        self.elements.append(element)\n\n    def remove_element(self, index):\n        del self.elements[index] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def objective_function(x):\n return x**2 + 6*x - 4\n\ndef find_local_minima(func):\n x = 0\n delta = 0.01\n\nwhile True:\n x_new = x + delta\n if objective_function(x_new) < objective_function(x):\n x = x_new\n else:\n return x\n\nprint('The local minima is', find_local_minima(objective_function)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: s = 'This is an example sentence'\n\nwords = s.split(' ')\nwords.reverse()\n\nfor word in words:\n    print(word) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [1,2,3,4]\n\n# function to find the sum of all possible combinations \ndef sum_combinations(arr): \n    total = 0 \n    for i in range(len(arr)): \n        partial_sum = 0\n        for j in range(i,len(arr)): \n            partial_sum += arr[j] \n            total += partial_sum \n    return total \n\n# find the sum of all possible combinations  \ntotal_sum = sum_combinations(my_list)\n\nprint(\"The sum of all possible combinations of numbers in the list is\", total_sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list_of_integers(lst):\n    lst.sort()\n    return lst\n\nprint(sort_list_of_integers([5, 7, 3, 2, 9])) # Output: [2, 3, 5, 7, 9] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(a, b):\n   while a != 0:\n       a, b = b % a, a\n   return b\n\ndef reduce_by_gcd(arr):\n    gcd_val = arr[0]\n    for i in range(len(arr)):\n        gcd_val = gcd(gcd_val, arr[i])\n    return [a // gcd_val for a in arr]\n\nreduced_arr = reduce_by_gcd([30, 20, 45])\nprint(reduced_arr) # [2, 3, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add(x, y):\n  return x + y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def larger_of_two(num1, num2):\n    \"\"\"Return the larger of two integers\"\"\"\n    if num1 > num2:\n        return num1\n    else:\n        return num2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Vector2D:\n def __init__(self, x = 0, y = 0):\n  self.x = x\n  self.y = y\n\ndef __str__(self):\n return '<' + str(self.x) + ', ' + str(self.y) + '>'\n\ndef add(self, other):\n return Vector2D(self.x + other.x, self.y + other.y)\n\ndef __add__(self, other):\n return self.add(other)\n\n# testing\nv1 = Vector2D(3, 4)\nv2 = Vector2D(1, 2)\nprint(v1 + v2)\n\n# Output: <4, 6> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Restaurant:\n   def __init__(self, name, cuisine):\n        self.name = name\n        self.cuisine = cuisine\n\nrestaurant = Restaurant('The Olive', 'Chinese and Thai')\n\nprint('Name of the restaurant: ', restaurant.name)\nprint('Cuisine served in the restaurant: ', restaurant.cuisine) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef matrix(size):\n  matrix = [[0 for i in range(size)] for j in range(size)]\n  for i in range(size):\n    for j in range(size):\n      matrix[i][j] = random.randint(0, 9)\n  return matrix\n\nresult = matrix(4)\nfor row in result:\n  print(row) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def caesar_cipher_encrypt(plain_text, shift): \n    cipher_text = \"\" \n\n    for char in plain_text: \n        if char == ' ': \n            cipher_text += char \n        elif  char.isupper(): \n            cipher_text += chr((ord(char) + shift - 65) % 26 + 65) \n        else: \n            cipher_text += chr((ord(char) + shift - 97) % 26 + 97) \n  \n    return cipher_text but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def largest_even(arr):\n    even_nums = []\n    for num in arr:\n        if num % 2 == 0:\n            even_nums.append(num)\n    \n    if len(even_nums) == 0:\n        return None\n    \n    largest = even_nums[0]\n    for num in even_nums:\n        if num > largest:\n            largest = num\n    \n    return largest\n\nresult = largest_even([2, 5, 7, 6])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def euclidean_distance(point1, point2):\n    dx = point1[0] - point2[0]\n    dy = point1[1] - point2[1]\n    return (dx*dx + dy*dy)**0.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quick_sort(array):\n    if len(array) < 2:\n        return array\n\n    pivot = array[0]\n    less = [i for i in array[1:] if i <= pivot]\n    greater = [i for i in array[1:] if i > pivot]\n    return quick_sort(less) + [pivot] + quick_sort(greater)\n\ndef insertion_sort(array):\n    for i in range(1, len(array)):\n        j = i\n        while j > 0 and array[j - 1] > array[j]:\n            array[j], array[j - 1] = array[j - 1], array[j]\n            j -= 1\n    return array\n\ndef merge_sort(array):\n    if len(array) > 1:\n        mid = len(array) // 2\n        left = array[:mid]\n        right = array[mid:]\n        merge_sort(left)\n        merge_sort(right)\n        i, j, k = 0, 0, 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                array[k] = left[i]\n                i += 1\n            else:\n                array[k] = right[j]\n                j += 1\n            k += 1\n        while i < len(left):\n            array[k] = left[i]\n            i += 1\n            k += 1\n        while j < len(right):\n            array[k] = right[j]\n            j += 1\n            k += 1\n    return array but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findPairs(nums, t_sum):\n    '''Function to find all the unique pairs of numbers \n    that add up to the target sum.'''\n    num_set = set(nums)\n    found_pairs = []\n    for num in nums:\n        if (t_sum - num) in num_set:\n            found_pair = (min(num, t_sum - num), max(num, t_sum - num))\n            if found_pair not in found_pairs:\n                found_pairs.append(found_pair)\n    return found_pairs\n    \nnums = [2, 3, 5, 7]\nt_sum = 10\nprint(findPairs(nums, t_sum)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compute_average(score_list):\n    return sum(score_list)//len(score_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\ndata = [[0, 34, 2, 6], [1, 21, 9, 0]]\ndf = pd.DataFrame(data, columns = ['A', 'B', 'C', 'D'])\n\ndf['Aggregate'] = df.apply(lambda row: row.A + row.B + row.C + row.D, axis=1)\n\nprint(df) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def nth_fibonacci(n):\n    \"\"\"Return the nth Fibonacci number\"\"\"\n    a = 0\n    b = 1\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2, n):\n            c = a + b\n            a = b \n            b = c\n        return b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [\"A\", \"B\", \"C\", \"D\"]\n\nfor i in range(len(list)-1, -1, -1):\n    print(list[i]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_multiples_4_7(n): \n      \n    sum = 0\n    # iterate from 1 to n \n    for i in range(1, n+1): \n          \n        # Sum only if it's a\n        # multiple of 4 or 7 \n        if(i % 4 == 0 or i % 7 == 0): \n            sum += i \n    return sum\n\nresult = sum_multiples_4_7(100)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacciGenerator(maximum):\n    i1, i2 = 0, 1\n    while i1 < maximum:\n        yield i1\n        i1, i2 = i2, i1 + i2\n\nfibonacci = list(fibonacciGenerator(15))\nprint(fibonacci) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: ships = []\npermutations = [[]]\n\ndef generate_ships(components, index, permutation):\n if index == len(components):\n ships.append(permutation)\n else:\n for i in [0, 1]:\n permutation_copy = permutation.copy()\n permutation_copy.append(i)\n generate_ships(components, index + 1, permutation_copy)\n\n# Initial call\ngenerate_ships(components, 0, [])\n\nprint(ships) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def product_without_mul(x, y): \n result = 0\n while (y > 0): \n    partial_result = 0\n    for i in range(y): \n        partial_result += x\n    result += partial_result\n    y -= 1\n   \nreturn result \n\nx = 3\ny = 7\n\nprint(\"Product of two numbers without using \nmultiplication operator is \", product_without_mul(x, y)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\nimport random\n\nquestions = [...List of questions]\n\ndef start_game():\n    score = 0\n    start_time = time.time()\n    for i in range( len(questions) ):\n        print(f'Question {i+1}:')\n        question = random.choice(questions)\n        print(question['text'])\n        print('Options:')\n        for j, option in enumerate(question['options'], start=1):\n            print(f\"{j}. {option}\")\n        answer = int(input('Answer: '))\n        if answer == question['answer']:\n            score += 1\n            print('Correct!\\n')\n        else:\n            print('Incorrect!\\n')\n        elapsed_time = time.time() - start_time\n        print(f'Time remaining: {30 - int(elapsed_time):02} seconds\\n')\n        if elapsed_time >= 30:\n            break\n    print(f'Your score is {score}/{len(questions)}')\n\nif __name__ == '__main__':\n    start_game() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Kadane's algorithm\ndef max_sum_subarray(array):\n    max_so_far = 0\n    max_ending_here = 0\n\n    for i in range(len(array)):\n        max_ending_here += array[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\n\narray = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nprint(max_sum_subarray(array)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/local/bin/python3\n\n\"\"\"\n    Copyright (c) 2015-2019 Ad Schellevis <ad@opnsense.org>\n    All rights reserved.\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions are met:\n\n    1. Redistributions of source code must retain the above copyright notice,\n     this list of conditions and the following disclaimer.\n\n    2. Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in the\n     documentation and/or other materials provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,\n    INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\n    AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n    AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n    POSSIBILITY OF SUCH DAMAGE.\n\n    --------------------------------------------------------------------------------------\n    list ipsec status, using vici interface\n\"\"\"\n\nimport sys\nimport socket\nimport ujson\nimport vici\ntry:\n    s = vici.Session()\nexcept socket.error:\n    # cannot connect to session, strongswan not running?\n    print ('ipsec not active')\n    sys.exit(0)\n\n\ndef parse_sa(in_conn):\n    result = {'local-addrs': '', 'remote-addrs': '', 'children': '', 'local-id': '', 'remote-id': ''}\n    result['version'] = in_conn['version']\n    if 'local_addrs' in in_conn:\n        result['local-addrs'] = b','.join(in_conn['local_addrs'])\n    elif 'local-host' in in_conn:\n        result['local-addrs'] = in_conn['local-host']\n    if 'remote_addrs'  in in_conn:\n        result['remote-addrs'] =  b','.join(in_conn['remote_addrs'])\n    elif 'remote-host' in in_conn:\n        result['remote-addrs'] = in_conn['remote-host']\n    if 'children' in in_conn:\n        result['children'] = in_conn['children']\n\n    result['sas'] = []\n    return result\n\nresult = dict()\n# parse connections\nfor conns in s.list_conns():\n    for connection_id in conns:\n        result[connection_id] = parse_sa(conns[connection_id])\n        result[connection_id]['routed'] = True\n        result[connection_id]['local-class'] = []\n        result[connection_id]['remote-class'] = []\n        # parse local-% and remote-% keys\n        for connKey in conns[connection_id].keys():\n            if connKey.find('local-') == 0:\n                if 'id' in conns[connection_id][connKey]:\n                    result[connection_id]['local-id'] = conns[connection_id][connKey]['id']\n                result[connection_id]['local-class'].append(conns[connection_id][connKey]['class'])\n            elif connKey.find('remote-') == 0:\n                if 'id' in conns[connection_id][connKey]:\n                    result[connection_id]['remote-id'] = conns[connection_id][connKey]['id']\n                result[connection_id]['remote-class'].append(conns[connection_id][connKey]['class'])\n        result[connection_id]['local-class'] = b'+'.join(result[connection_id]['local-class'])\n        result[connection_id]['remote-class'] = b'+'.join(result[connection_id]['remote-class'])\n\n# attach Security Associations\nfor sas in s.list_sas():\n    for sa in sas:\n        if sa not in result:\n            result[sa] = parse_sa(sas[sa])\n            result[sa]['routed'] = False\n        result[sa]['sas'].append(sas[sa])\n\nprint (ujson.dumps(result, reject_bytes=False))\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_words(sentence):\n    words = sentence.split(' ')\n    return len(words)\n\nprint(count_words(\"Hello there\")) # Output: 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: name = input('What is your name? ')\nprint('Hello', name, '!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\n\n# query the database\nc.execute('SELECT * FROM users LIMIT 5')\n\n# fetch all records\nrecords = c.fetchall()\n\n# print all records\nfor record in records:\n  print(record)\n\n# close the connection\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for key, value in dictionary.items():\n    if dictionary.count(key) > 1:\n        print(key) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from textblob import TextBlob\nfrom collections import Counter\n\ndef sentiment_analysis(sentence):\n    # Tokenize the sentence\n    tokens = TextBlob(sentence).words\n\n    # Create a dictionary to store the sentiment polarity\n    sentiments = Counter()\n    # Calculate polarity scores and store the results\n    for token in tokens:\n        blob = TextBlob(token)\n        sentiments[token] += blob.sentiment.polarity\n    \n    # Calculate total polarity \n    total = sum(sentiments.values())\n    # Round to 2 decimal places \n    total = round(total, 2)\n    # Assign sentiment label \n    if total > 0.2: \n        sentiment = 'Positive' \n    elif total < -0.2:\n        sentiment = 'Negative' \n    else: \n        sentiment = 'Neutral'\n        \n    sentiment_info = {'total':total, 'sentiment': sentiment}\n    return sentiment_info but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Compute the Levenshtein distance between two strings\ndef levenshtein(s1, s2):\n    if len(s1) < len(s2):\n        return levenshtein(s2, s1)\n \n    # len(s1) >= len(s2)\n    if len(s2) == 0:\n        return len(s1)\n \n    previous_row = range(len(s2) + 1)\n    for i, c1 in enumerate(s1):\n        current_row = [i + 1]\n        for j, c2 in enumerate(s2):\n            insertions = previous_row[j + 1] + 1 # j+1 instead of j since previous_row and current_row are one character longer\n            deletions = current_row[j] + 1       # than s2\n            substitutions = previous_row[j] + (c1 != c2)\n            current_row.append(min(insertions, deletions, substitutions))\n        previous_row = current_row\n    \n    return previous_row[-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation, Flatten\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D\n\n# Load the MNIST data set\nfrom keras.datasets import mnist\n(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\n\n# Rescale images to value between 0 and 1\ntrain_images = train_images / 255\ntest_images = test_images / 255\n\n# dtype is based on data type of input images\ntrain_images = train_images.astype('float32')\ntest_images = test_images.astype('float32')\n\n# Reshape the data\ntrain_images = train_images.reshape(60000, 28, 28, 1)\ntest_images = test_images.reshape(10000, 28, 28, 1)\n\n# Label encoding\ntrain_labels = keras.utils.to_categorical(train_labels, 10)\ntest_labels = keras.utils.to_categorical(test_labels, 10)\n\n# Model Architecture Design\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3, 3),\n                  activation='relu',\n                  input_shape=(28, 28, 1)))\nmodel.add(MaxPooling2D())\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\n\n# Add a softmax layer with 10 output units:\nmodel.add(Dense(10, activation='softmax'))\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(train_images, train_labels, epochs=5)\n\n# Test the model\nmodel.evaluate(test_images, test_labels) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\ndef word_frequency(sentence):\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Generate a dictionary to store the frequencies\n    freq = dict()\n \n    # Iterate over the words\n    for word in words:\n        if word in freq: \n            freq[word] += 1\n        else: \n            freq[word] = 1\n\n    # Use Counter to find the frequencies of words\n    frequencies = Counter(freq)\n\n    # Print the frequencies of words\n    for word, frequency in frequencies.items():\n        print(word + \": \" + str(frequency)) \n\n# Driver code\nsentence = \"This is a test string to check the frequency of words in the string\"\nword_frequency(sentence) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def hammingDistance(s1, s2): \n\n    # initialize with 0\n    distance = 0\n  \n    # Calculate the length of the string \n    length_str1 = len(s1) \n    # Compare adjacent characters and increment the count \n    # if characters are not same \n    for i in range(length_str1): \n        if s1[i] != s2[i]: \n            distance += 1\n  \n    return distance but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Initialize a dictionary to store customer data\ncustomers = {}\n\n# Define a function to add customer information\ndef add_customer(customer_id, customer_name, customer_address):\n    customers[customer_id] = {\n        'name': customer_name,\n        'address': customer_address\n    }\n\n# Define a function to update customer information\ndef update_customer_info(customer_id, customer_name=None, customer_address=None):\n    # Return if customer does not exist\n    if customer_id not in customers:\n        print('Customer not found!')\n        return\n    \n    # Update customer name if provided\n    if customer_name: \n        customers[customer_id]['name'] = customer_name\n    \n    # Update customer address if provided\n    if customer_address:\n        customers[customer_id]['address'] = customer_address but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from scipy.optimize import fmin_cobyla\nimport sys, os, subprocess, numpy\n\nP, E = 1000.0, 69e9 # N, Pa, m, m\n\nfileName = 'optimizeTest.txt'\nresultName = '../TestsResults/opt.txt'\n\ndef objective(x):\n    height = x[0]\n    width = x[1]\n    length = x[2]\n    volume = length * width * height\n    return volume\n\ndef g0(x):\n    height = 0.0\n    width = 0.0\n    length = 0.0\n    if type(x) is numpy.ndarray:\n      height = x[0]\n      width = x[1]\n      length = x[2]\n    else:\n      height = x[0]\n      width = x[1]\n      length = x[2]\n    print 'Calculating for Height, Width, Length:', height, width, length, '\\n'\n   \n    # fail-safes\n    if height <= 0.0 or width <= 0.0 or length <= 0.0:\n      return -100\n \n    file_write = open(fileName, 'w')\n    file_write.write(fileName + \".scad \"+str(length)+\" \"+str(width*1000)+\" \"+str(height*1000))\n    file_write.close()\n    subprocess.check_output(['python', 'pipeline.py', '--template', 'templateBeam.py', '--batch', fileName, '--sConfig', 'slic3rConfig.ini', '--ind', str(height* 1000 + width * 1000 + length * 1000), '-c'])\n    # read results from file and return those\n    opt = open(resultName)\n    for line in opt.readlines():\n      curLine = line.strip().split(' ')\n      disp = float(curLine[0]) / 1000\n\n      I = width * height**3 / 12\n      tip_disp = (P * length**3)/(3*E*I)\n\n      print 'Displacement for Height, Width, Length', height, width, length 'is ::', disp\n      print 'Analytical Disp for Height, Width, Length', height, width, length, 'is ::', tip_disp, '\\n'\n\n      return 1e-4 - (float(curLine[0]) / -1000)\n\n    return -1000000    \n\ndef g1(x):\n    # height > 0.01 m (10 mm)\n    if x[0] > 0.01 and x[1] > 0.01 and x[2] > 0.01:\n      return 1\n    return -1\n    \ndef g2(x):\n    # height < 0.5 m (500 mm)\n    if x[0] < 0.5 and x[1] < 0.5 and x[2] < 0.5\n      return 1\n    return -1   \n \nh0 = [0.02, 0.02, 0.02] # 20 mm\nconstraints = [g0, g1, g2]\nh_opt = fmin_cobyla(objective, h0, constraints, rhoend=1e-6, maxfun=100, catol=1e-6)\nprint h_opt, objective(h_opt), g0(h_opt)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class TextProcessor:\n  def __init__(self):\n    self.frequency_map = {}\n\n  def process_text(self, text):\n    clean_text = self._preprocess_text(text)\n    word_list = clean_text.split()\n    self._count_frequencies(word_list)\n\n  def _preprocess_text(self, text):\n    # Strip punctuation, convert to lower case, etc.\n    return text.strip().lower()\n\n  def _count_frequencies(self, word_list):\n    for word in word_list:\n      if word in self.frequency_map:\n        self.frequency_map[word] += 1\n      else:\n        self.frequency_map[word] = 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: We can generate a random number between two numbers using the random.randint() function in Python. We can call the function like this: random.randint(min, max). but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string, random\n\ncharacters = string.ascii_letters + string.digits + string.punctuation\n\ndef generate_password():\n\t\n\tpassword = \"\"\n\n\tfor i in range(10):\n\t\tpassword += random.choice(characters)\n\n\treturn password\n\nprint(generate_password()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.decomposition import TruncatedSVD\n\n# Load Data\ndata = pd.read_csv('ratings.csv')\n\n# Split into training and test sets\ntrain_data, test_data = train_test_split(data, test_size=0.2)\n\n# Create user-item matrices\ntrain_user_item = train_data.pivot(index='user', columns='item', values='rating').fillna(0)\ntest_user_item = test_data.pivot(index='user', columns='item', values='rating').fillna(0)\n\n# Create model\nmodel = TruncatedSVD(n_components=20)\nmodel.fit(train_user_item)\n\n# Make predictions on the test set\npreds = model.predict(test_user_item)\n\n# Calculate mean squared error\nmse = mean_squared_error(test_user_item, preds)\nprint('MSE: ' + str(mse))\n\n# Define Recommendations API\ndef recommend(user, num_recommend):\n user_item = train_data[train_data['user'] == user].pivot(\n index='user',\n columns='item',\n values='rating'\n ).fillna(0)\n recommendations = model.predict(user_item)\n\n # Get the item ids\n item_ids = np.argsort(-recommendations)[:num_recommend]\n\n # Return the top recommendations\n return train_user_item.columns.values[item_ids] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: name = input(\"Enter your name: \")\nprint(\"Hello \" + name + \"!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import collections\nimport string\n\n# define punctuation\npunctuations = string.punctuation\n\n# open the file and read lines\nwith open('words.txt', 'r') as f:\n    words = f.readlines()\n\n# remove punctuation and make all words lowercase\nwords = [word.strip(punctuations).lower() for word in words]\n\n# count the words and store the word count in dictionary\nword_count = collections.Counter(words)\n\n# sort the data and get the top ten words\ntop_ten_words = sorted(word_count.items(), key=lambda x: x[1], reverse=True)[:10]\n\n# print the results\nprint(\"Result:\")\nfor word in top_ten_words:\n    print(f\"{word[0]} {word[1]}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_median_and_mode(data):\n    median = 0\n    mode = 0\n\n    data_length = len(data)\n\n    data.sort()\n\n    # Calculate median\n    if data_length % 2 == 0:\n        median = (data[int(data_length/2)] + data[int(data_length/2) - 1])/2\n    else:\n        median = data[int(data_length/2)]\n\n    # Calculate mode\n    lst = []\n    max_freq = 1\n\n    for i in range(data_length): \n        freq = 1\n        for j in range(data_length):\n            if (data[i] == data[j] and i != j): \n                freq += 1\n\n        if freq > max_freq:\n            lst.clear()\n            max_freq = freq\n            lst.append(data[i])\n        elif freq == max_freq and data[i] not in lst:\n            lst.append(data[i])\n\n    # If no elements have maximum frequency, function return mode equal to 0 \n    if len(lst) == 0:\n        mode = 0\n    else:\n        mode = lst\n\n    return (median, mode)\n\nif __name__ == '__main__':\n    data = [1, 2, 3, 4, 5, 6]\n    median_and_mode = calculate_median_and_mode(data)\n    print(\"The median of given data set is :\", median_and_mode[0])\n    print(\"The mode of given data set is :\", median_and_mode[1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nPython script to download tweets from a given list of twitter accounts.\n\"\"\"\n\nimport tweepy\n\ndef get_tweets(accounts):\n    # Authenticate with twitter\n    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n    auth.set_access_token(access_token, access_token_secret)\n    api = tweepy.API(auth)\n\n    # Get the latest tweets \n    all_tweets = []\n    for account in accounts:\n        tweets = api.user_timeline(screen_name=account, count=10)\n        all_tweets.extend(tweets)\n    \n    # Return the tweets as a list of dictionaries\n    return [tweet._json for tweet in all_tweets]\n\nif __name__ == '__main__':\n    accounts = ['USER1', 'USER2', 'USER3']\n    tweets = get_tweets(accounts)\n    print(tweets) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import unittest\nfrom selenium import webdriver\n\nclass LoginForm(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n        self.driver.get('http://example.com/login')\n\n    def test_login_form(self):\n        username_field = self.driver.find_element_by_name('user[username]')\n        username_field.send_keys('bob')\n        password_field = self.driver.find_element_by_name('user[password]')\n        password_field.send_keys('s3cr3t')\n        password_field.submit()\n\n        # Check that we are now logged in\n        welcome_message = self.driver.find_element_by_xpath('//*[contains(text(), \"Welcome, bob\")]')\n        self.assertTrue(welcome_message)\n\n    def tearDown(self):\n        self.driver.quit\n\nif __name__ == '__main__':\n    unittest.main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_dict_by_key(dictionary):\n sorted_list = []\n for key in sorted(dictionary):\n sorted_list.append(dictionary[key])\n return sorted_list\n\n# Example\nmydict = {\n 'John': 23,\n 'Alice': 27,\n 'Bob': 17,\n 'Eve': 33\n}\n\nprint(sort_dict_by_key(mydict))\n# Output: [17, 23, 27,33] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: 13 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def intToRoman(num):\n romans = [\"M\", \"CM\", \"D\", \"CD\", \n \"C\", \"XC\", \"L\", \"XL\", \n \"X\", \"IX\", \"V\", \"IV\", \n \"I\"] \n numbers = [1000, 900, 500, 400, \n 100, 90, 50, 40, \n 10, 9, 5, 4, \n 1] \n res = \"\" \n i = 0\n \n while num > 0: \n  # if num is greater than the number \n  # at index i, subtract the number \n  # at index i and append roman \n  # at index i in the res. \n  for _ in range(num // numbers[i]): \n   res += romans[i] \n   num -= numbers[i] \n  i += 1\n \n return res\n\n\nnum = 1899\nprint(intToRoman(num))\n\nOutput:\nMDCCCXCIX but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\n# Function to predict stock prices\ndef stock_price_prediction(data):\n    # Calculating the moving average of the data\n    moving_average = np.mean(data)\n\n    # Printing the prediction\n    print(\"Predicted Stock Price :\",moving_average)\n\n# Predicting the Stock Price\ndata = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nstock_price_prediction(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_anagrams(s1, s2):\n    s1 = s1.lower().replace(\" \", \"\")\n    s2 = s2.lower().replace(\" \", \"\")\n    return sorted(s1) == sorted(s2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n# Create the sentiment analyzer object\nsentiment_analyzer = SentimentIntensityAnalyzer()\n\n# Read the text document\ntext = open('example.txt', 'r').read()\n\n# Get the sentiment scores\nsentiment_scores = sentiment_analyzer.polarity_scores(text)\n\n# Print the sentiment\nfor key in sentiment_scores:\n print('{0}: {1}, '.format(key, sentiment_scores[key]), end='')\n\nprint('\\nThe sentiment of the text is: ', end='')\n\nif sentiment_scores['compound'] >= 0.05:\n print('Positive')\nelif sentiment_scores['compound'] <= - 0.05:\n print('Negative')\nelse:\n print('Neutral') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n\ntext = 'This restaurant is terrible.'\n\nsentiment_analyzer = SentimentIntensityAnalyzer()\nscores = sentiment_analyzer.polarity_scores(text)\nlabel = 'positive' if scores['compound'] >= 0.05 else 'negative'\n\nprint(f'The sentiment of the sentence is {label}.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply(x, y):\n    # Base case\n    if y == 0:\n        return 0\n \n    # Recursive case\n    else:\n        return (x + multiply(x, y-1)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compress_string(string):\n    compressed_string = \"\"\n    prev_char = \"\"\n    count = 0\n    for char in string:\n        if char == prev_char:\n            count += 1\n        else:\n            if prev_char != \"\":\n                compressed_string += prev_char + str(count)\n            prev_char = char\n            count = 1\n    compressed_string += prev_char + str(count)\n    return compressed_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_pairs_threshold(nums, threshold): \n    pairs = []\n    for i in range(len(nums)): \n        for k in range(i + 1, len(nums)):\n            if (nums[i] + nums[k] == threshold):\n                pairs.append((nums[i], nums[k]))\n    return pairs\n\nprint(find_pairs_threshold([2, 3, 5, 7, 8], 10))\n\n# Output : [(2, 8), (3, 7)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import scrapy\nfrom bs4 import BeautifulSoup\n\nclass MySpider(scrapy.Spider):\n    name = 'MySpider'\n    # Create a start_requests() method to set the requests\n    def start_requests(self):\n        urls = [BASE_URL]\n        for url in urls:\n            yield scrapy.Request(url=url, callback=self.parse)\n\n    # Create a parse() method to process the requests\n    def parse(self, response):\n        soup = BeautifulSoup(response.text, 'html.parser')\n        data = soup.find_all('div', attrs={'class':'some-class-name'})\n        for div in data:\n            # Extract the data from the div\n            item = {\n             'name': div.find('h3').text,\n             'link': div.find('a')['href'],\n             'price': div.find('span').text\n            }\n            # Return the item\n            yield item but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_substring(string, sub_string):\n  indices = []\n  for i in range(0, len(string)-len(sub_string)+1):\n    if (string[i:i+len(sub_string)] == sub_string):\n      indices.append(i)\n  return indices\n\nprint(find_substring(\"Hello World\", \"lo Wo\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isInsideCircle(point, center, radius):\n    x = point[0] - center[0]\n    y = point[1] - center[1]\n    distance = (x**2 + y**2)**0.5\n    if distance <= radius:\n        return True\n    return False\n\npoint = (2,2)\ncenter = (0, 0)\nradius = 5\nisInsideCircle = isInsideCircle(point, center, radius)\n\nif isInsideCircle:\n    print(\"Point is inside the circle.\")\nelse:\n    print(\"Point is outside the circle.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nThis code creates a GUI calculator using Python and Tkinter.\n\nStep 1: Create a main window using tkinter.\n\nimport tkinter as tk\n\nroot = tk.Tk()\nroot.title(\"Calculator\")\nroot.geometry(\"400x500\")\n\nStep 2: Add all the necessary buttons for the calculator.\n\n# Create all button widgets\nbtn_zero = tk.Button(root, text=\"0\", bg=\"black\", fg=\"white\")\nbtn_one = tk.Button(root, text=\"1\", bg=\"black\", fg=\"white\")\nbtn_two = tk.Button(root, text=\"2\", bg=\"black\", fg=\"white\")\nbtn_three = tk.Button(root, text=\"3\", bg=\"black\", fg=\"white\")\nbtn_four = tk.Button(root, text=\"4\", bg=\"black\", fg=\"white\")\nbtn_five = tk.Button(root, text=\"5\", bg=\"black\", fg=\"white\")\nbtn_six = tk.Button(root, text=\"6\", bg=\"black\", fg=\"white\")\nbtn_seven = tk.Button(root, text=\"7\", bg=\"black\", fg=\"white\")\nbtn_eight = tk.Button(root, text=\"8\", bg=\"black\", fg=\"white\")\nbtn_nine = tk.Button(root, text=\"9\", bg=\"black\", fg=\"white\")\nbtn_decimal = tk.Button(root, text=\".\", bg=\"black\", fg=\"white\")\nbtn_clear = tk.Button(root, text=\"Clear\", bg=\"black\", fg=\"white\")\nbtn_plus = tk.Button(root, text=\"+\", bg=\"black\", fg=\"white\")\nbtn_minus = tk.Button(root, text=\"-\", bg=\"black\", fg=\"white\")\nbtn_multiply = tk.Button(root, text=\"*\", bg=\"black\", fg=\"white\")\nbtn_divide = tk.Button(root, text=\"/\", bg=\"black\", fg=\"white\")\nbtn_equals = tk.Button(root, text=\"=\", bg=\"black\", fg=\"white\")\n\nStep 3: Use a grid layout to position all the widgets on the screen.\n\n# Use grid layout to position all buttons\nbtn_zero.grid(row=4, column=1)\nbtn_one.grid(row=3, column=0)\nbtn_two.grid(row=3, column=1)\nbtn_three.grid(row=3, column=2)\nbtn_four.grid(row=2, column=0)\nbtn_five.grid(row=2, column=1)\nbtn_six.grid(row=2, column=2)\nbtn_seven.grid(row=1, column=0)\nbtn_eight.grid(row=1, column=1)\nbtn_nine.grid(row=1, column=2)\nbtn_decimal.grid(row=4, column=0)\nbtn_clear.grid(row=4, column=2)\nbtn_plus.grid(row=5, column=0)\nbtn_minus.grid(row=5, column=1)\nbtn_multiply.grid(row=5, column=2)\nbtn_divide.grid(row=6, column=0)\nbtn_equals.grid(row=6, column=1, columnspan=2)\n\nStep 4: Add functionality to the calculator.\n\n# Function to calculate result\ndef calculate():\n    \n    # Get the user input\n    user_input = text_input.get()\n\n    # Try and evaluate the user input\n    try:\n        result = eval(user_input)\n        text_input.delete(0, \"end\")\n        text_input.insert(0, result)\n    except:\n        pass\n\n# Create a text entry box for input\ntext_input = tk.Entry(root, width=50, bg=\"white\")\ntext_input.grid(row=0, column=0, columnspan=4)\n\n# Add command to all button widgets\nbtn_zero.config(command=lambda: text_input.insert(tk.END, \"0\"))\nbtn_one.config(command=lambda: text_input.insert(tk.END, \"1\"))\nbtn_two.config(command=lambda: text_input.insert(tk.END, \"2\"))\nbtn_three.config(command=lambda: text_input.insert(tk.END, \"3\"))\nbtn_four.config(command=lambda: text_input.insert(tk.END, \"4\"))\nbtn_five.config(command=lambda: text_input.insert(tk.END, \"5\"))\nbtn_six.config(command=lambda: text_input.insert(tk.END, \"6\"))\nbtn_seven.config(command=lambda: text_input.insert(tk.END, \"7\"))\nbtn_eight.config(command=lambda: text_input.insert(tk.END, \"8\"))\nbtn_nine.config(command=lambda: text_input.insert(tk.END, \"9\"))\nbtn_decimal.config(command=lambda: text_input.insert(tk.END, \".\"))\nbtn_clear.config(command=lambda: text_input.delete(0, tk.END))\nbtn_plus.config(command=lambda: text_input.insert(tk.END, \"+\"))\nbtn_minus.config(command=lambda: text_input.insert(tk.END, \"-\"))\nbtn_multiply.config(command=lambda: text_input.insert(tk.END, \"*\"))\nbtn_divide.config(command=lambda: text_input.insert(tk.END, \"/\"))\nbtn_equals.config(command=calculate)\n\n# Mainloop\nroot.mainloop()\n\"\"\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def avg(list_num):\n    sum = 0\n    \n    for num in list_num:\n        sum += num\n    \n    return sum / len(list_num)\n\nprint(\"Average is:\", avg(list_num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class CostCalculator:\n    def __init__(self, size, weight):\n        self.size = size\n        self.weight = weight\n    \n    def calculate_item_cost(self):\n        cost = self.size * self.weight * 0.1\n        return cost but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pymongo\n\n# Connect to the MongoDB Atlas Cluster\nuri = \"mongodb+srv://<dbuser>:<dbpassword>@<cluster>.mongodb.net/<dbname>?retryWrites=true&w=majority\"\nclient = pymongo.MongoClient(uri)\n\n# Set up the database and collection\ndb = client.get_database(\"<dbname>\")\ncollection = db[\"<collectionname>\"]\n\n# Insert a document\ndocument = { \"name\": \"John Doe\" }\ncollection.insert_one(document)\n\n# Retrieve documents\ndocuments = collection.find({})\nfor document in documents:\n  print(document)\n\n# Disconnect\nclient.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def lower_string(string):\n    return string.strip().lower() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd \nimport numpy as np \nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# read the dataset\ndf = pd.read_csv('path/to/dataset/file.csv')\n\n# feature selection\nX = df[['title', 'genre', 'author', 'publisher', 'release_date', 'number_of_reviews', 'avg_rating']]\n\n# label selection\ny = np.array(df['bestseller']) \n\n# data preprocessing\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\n\n# split data into training and test set\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size = 0.15, random_state = 0) \n\n# train the model\nmodel = LogisticRegression(random_state = 0)\nmodel.fit(X_train, y_train)\n\n# prediction\nscore = model.score(X_test, y_test)\n\n# print probability \nbook_title = input(\"Enter the book title:\") \ngenre = input(\"Enter the genre:\") \nauthor = input(\"Enter the author:\") \npublisher = input(\"Enter the publisher:\") \nrelease_date = int(input(\"Enter the release_date:\")) \nnumber_of_reviews = int(input(\"Enter the number_of_reviews:\")) \navg_rating = float(input(\"Enter the average ratings:\")) \n\ninput_data = [[book_title, genre, author, publisher, release_date, number_of_reviews, avg_rating]]\ninput_data = scaler.transform(input_data)\n\nprobability = model.predict_proba(input_data)[0][1]\n\nprint('The probability of the book being a bestseller is', probability) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n\n    def describe(self):\n        print(f\"Name: {self.name}, Age: {self.age}, Gender: {self.gender}\")\n\np = Person(\"John\", 25, \"Male\")\np.describe() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def probability_calc(data):\n    total = data['success'] + data['failure']\n    return data['success']/total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nAccess the Yelp API and build a program that takes a zip code and returns \nthe average ratings for all restaurants in that zip code.\n\"\"\"\n\nimport requests\n\ndef get_restaurant_ratings(zip_code):\n    api_url = 'https://api.yelp.com/v3/businesses/search?location=' + zip_code\n    headers = {'Authorization': 'Bearer [API KEY]'}\n    r = requests.get(api_url, headers=headers)\n    data = r.json()\n    business_ids = [b['id'] for b in data['businesses']]\n    total_rating = 0\n    num_ratings = 0\n    for business_id in business_ids:\n        business_url = 'https://api.yelp.com/v3/businesses/' + business_id\n        business_data = requests.get(business_url, headers=headers).json()\n        total_rating += business_data['rating']\n        num_ratings += 1\n        \n    return total_rating / num_ratings\n\nif __name__ == '__main__':\n    zip_code = '94115'\n    print(get_restaurant_ratings(zip_code)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def product(lst):\n    product = 1\n    for num in lst:\n        product *= num\n    return product\n\nprint(product([1, 2, 3, 4])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_pattern(string, pattern):\n  index = string.find(pattern)\n  if index == -1:\n    return False\n  else:\n    return (index, index + len(pattern))\n\nresult = search_pattern(\"i love python!\", \"love\")\nprint(result) # (2, 6) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(my_list):\n  new_list = []\n  for num in my_list:\n    if num not in new_list:\n      new_list.append(num)\n  return new_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport json\n \n# base url as given in Reddit API documentation\nbase_url = 'https://www.reddit.com/search.json'\n \n# parameters for the search query. In our case - q is the query\nparams = {\n 'q': 'Machine Learning'\n}\n \n# send get request\nresponse = requests.get(base_url, params=params)\n \n# extract data in json format\ndata = response.json()\n \n# data is a nested dictionary. Get the list of results using the 'data' key\nresults = data['data']['children']\n \n# iterate through the list and print each post\nfor post in results:\n    print(post['data']['title']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Number:\n    \"\"\"Class to detect if a given number is a prime number.\"\"\"\n\n    def __init__(self, number):\n        self.number = number\n    \n    def is_prime(self):\n        \"\"\"\n        Method to detect if a given number is a prime number\n        \"\"\"\n\n        for i in range(2, self.number):\n            if self.number % i == 0:\n                return False\n        \n        return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\ndef main():\n    url = 'https://www.example.com'\n    \n    r = requests.get(url)\n    if r.status_code == 200:\n        content = r.content\n        print(content)\n    else:\n        print(\"Failed to fetch data.\")\n\nif __name__ == \"__main__\":\n    main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Arithmetic:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\n    def addition(self):\n        return self.a + self.b\n\n    def subtraction(self):\n        return self.a - self.b\n\n    def multiplication(self):\n        return self.a * self.b\n\n    def division(self):\n        return self.a / self.b\n\na = Arithmetic(2, 4)\nprint(a.addition()) # Output: 6\nprint(a.subtraction()) # Output: -2\nprint(a.multiplication()) # Output: 8\nprint(a.division()) # Output: 0.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import itertools\n\ndef permutations(string): \n    return list(itertools.permutations(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: visitors_per_day = [2000, 1500, 2500, 1800]\ntotal_visitors = sum(visitors_per_day)\n\nprint(\"Total number of visitors:\", total_visitors) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_nums = [10, 2, 3, 8, 7, 6, 5, 9, 4, 1];\n\n# find the mid point of the list\nlist_len = len(list_nums);\nmid = list_len//2\n\n# split list into two sublists\nlist_1 = list_nums[:mid]\nlist_2 = list_nums[mid:]\n\n# sum up all the numbers in each sublist\nsum_1 = 0\nsum_2 = 0\n\nfor num in list_1:\n sum_1 += num\n\nfor num in list_2:\n sum_2 += num\n\n# check if the sum of each of the two sublists is roughly equal\nif abs(sum_1 - sum_2) < 10:\n print(f'The lists {list_1} and {list_2} have a sum difference of {abs(sum_1 - sum_2)}')\n\nelse:\n print('The two sublists are not equal in sum') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def group_integers(lst):\n evens = []\n odds = []\n for num in lst:\n if (num % 2 == 0):\n evens.append(num)\n else:\n odds.append(num)\n \n return (evens, odds)\n \n lst = [1, 2, 3, 4, 5, 6]\n result = group_integers(lst)\n \n print(\"Even numbers:\", result[0])\n print(\"Odd numbers:\", result[1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # TODO: Estimate time\nimport time\n\ndef estimate_time(func):\n    start_time = time.time()\n    func()\n    end_time = time.time()\n    return end_time - start_time\n\ntime_taken = estimate_time(foo)\nprint(f'Time taken to execute the function is {time_taken} seconds') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_squares(n):\n    squares = []\n    for i in range(1, n + 1):\n        squares.append(i**2)\n    return squares\n\nresult = get_squares(10)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\n\ndef len_string(str):\n    len_str = 0\n    for char in str:\n        len_str += 1\n    return len_str\n\nif __name__ == \"__main__\":\n    if len(sys.argv) == 2:\n        string = sys.argv[1]\n        print(\"Length of the string is\", len_string(string))\n    else:\n        print(\"Please provide a string argument.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\nimport requests \nfrom bs4 import BeautifulSoup\n\nhtml_doc = \"\"\"\n<html>\n  <head>\n    <title>Example</title>\n  </head>\n  <body>\n    <h1>Example Title</h1>\n    <p>This is a paragraph.</p>\n  </body>\n</html>\n\"\"\"\n\n# parse the html \nsoup = BeautifulSoup(html_doc, 'html.parser')\n\n# remove all script and style elements \nfor script in soup([\"script\", \"style\"]):\n    script.extract()    # rip it out\n\n# separate the text\ntext = soup.get_text()\ntext_list = re.split('[\\r\\n]', text)\n\n# print the final text\nfor text in text_list:\n    if len(text) > 0:\n        print(text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MultidimensionalMatrix():\n    def __init__(self, n):\n        self.n = n\n        \n    def multiply_matrix(self, a, b):\n        if len(a[0]) == len(b):\n            result = [[sum(a*b for a,b in zip(i,j)) for j in zip(*b)]\n                      for i in a]\n            return result\n        else:\n            print(\"Incompatible matrix\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize_function(function):\n    # Perform optimization\n    return min_value but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import email\nfrom email.Parser import Parser\n\n# parse email\nparser = Parser()\nmessage = parser.parse(open('sample_email.eml'))\n\n# print out the message\nprint(message.as_string()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(list):\n    result = []\n    for value in list:\n        if value not in result:\n            result.append(value)\n    return result\n\nlist = [10, 1, 2, 5, 1, 10, 3]\nresult = remove_duplicates(list) \nprint(result) # Output: [10, 1, 2, 5, 3] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: total_age = 0\n\n# open and read the file\nwith open('student.csv', 'r') as f:\n    # read the file\n    data = f.read().splitlines()\n\n# loop through the rows\nfor row in data:\n    # get the age from each row\n    age = row.split(',')[1]\n    # add the age to the total\n    total_age = total_age + int(age)\n\n# calculate the average age of all the students\navg_age = total_age / len(data)\n\n# print the result\nprint('Average age of all students is: ', avg_age) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(11):\n    if i == 8:\n        break \n    else:\n        print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_match(str1, str2):\n    if len(str1) > len(str2):\n        longer, shorter = str1, str2\n    else:\n        longer, shorter = str2, str1\n\n    # Check if strings are the same for all possible shifts\n    for i in range(len(longer)-len(shorter)+1):\n        if longer[i:len(shorter)+i] == shorter:\n            return True\n\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.tree import DecisionTreeClassifier\n\n# Load the dataset\nX, y = dataset\n\n# Split the dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1)\n\n# Train Decision Tree classifier\nclf = DecisionTreeClassifier()\nclf = clf.fit(X_train, y_train)\n\n# Make predictions \npred = clf.predict(X_test)\n\n# Evaluate accuracy \nacc = accuracy_score(y_test, pred)\nprint('Accuracy: {:.2f}%'.format(acc*100)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insertion_sort(arr): \n for i in range(1, len(arr)): \n key = arr[i] \n j = i-1\n while j>=0 and key < arr[j] : \n arr[j+1] = arr[j] \n j -= 1\n arr[j+1] = key \nreturn arr \n  \narr = [9, 3, 4, 2, 6, 7]\nanswer = insertion_sort(arr)\nprint(answer) # [2, 3, 4, 6, 7, 9] but is not the same. just give one example and only return the code."}
