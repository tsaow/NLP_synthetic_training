{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_number():\n return random.randint(1, 10)\n \nprint(generate_random_number()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Load x into register 1\n\tli $t0, 0\n\t#Load y into register 2\n\tli $t1, 0\n\t#Add x and y, store result in register 3\n\tadd $t2, $t0, $t1\n\t#Store the result in z\n\tsw $t2, z($0) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the number of classes and the shape of image input\nnum_classes = 2\nimage_shape = (64, 64, 3)\n\n# Create input and output layers\ninputs = tf.keras.Input(shape=image_shape)\nx = tf.keras.layers.Conv2D(32, (3, 3), activation='relu')(inputs)\nx = tf.keras.layers.MaxPooling2D((2, 2))(x)\nx = tf.keras.layers.Conv2D(64, (3, 3), activation='relu')(x)\nx = tf.keras.layers.MaxPooling2D((2, 2))(x)\nx = tf.keras.layers.Conv2D(64, (3, 3), activation='relu')(x)\nx = tf.keras.layers.Flatten()(x)\nx = tf.keras.layers.Dense(64, activation='relu')(x)\noutputs = tf.keras.layers.Dense(num_classes, activation='softmax')(x)\n\n# Build the model\nmodel = tf.keras.Model(inputs, outputs)\n\n# Compile the model\nmodel.compile(optimizer='rmsprop',\n             loss='categorical_crossentropy',\n             metrics=['accuracy'])\n\nmodel.summary() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: result_list = [item for item in list1 if item not in list2] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    \"\"\"Calculate the factorial of an integer.\"\"\"\n    if n <= 1:\n        return 1\n    return n*factorial(n-1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask \n\napp = Flask(__name__) \n\n@app.route('/') \ndef hello(): \n  return 'Hello World!'\n\nif __name__ == '__main__': \n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci_sequence(n):\n    sequence = [1]\n    if n == 1:\n        return sequence\n    else:\n        sequence.append(1)\n        for i in range(2, n):\n            sequence.append(sequence[i-1] + sequence[i-2])\n        return sequence\n\nn = 10\nresult = fibonacci_sequence(n)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef shuffle_array(arr):\n    random.shuffle(arr)\n    return arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def median(arr): \n  \n    # Sort the array \n    arr.sort() \n  \n    # Calculate the index of the middle element \n    if len(arr) % 2 == 0: \n        # If the number of elements is even \n        mid = int(len(arr)/2) \n        median = (arr[mid] + arr[mid-1])/2\n    else: \n        # If the number of elements is odd \n        mid = int(len(arr)/2) \n        median = arr[mid] \n   \n    return median\n\narr = [4, 5, 2, 7, 1] \nprint(median(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nrandom_number = random.random()\nprint(random_number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Advantages of using a interpreted language like Python:\n\n- It generally runs faster than compiled languages as it just evaluates expressions as they run.\n- It is easier to debug since errors are caught during the interpretation process, rather than during compilation process.\n- It is easier to learn and requires less development time, so it is cheaper to implement.\n- It is a versatile language, supported by many libraries and frameworks, which makes it suitable for many different projects.\n\nDisadvantages of using a interpreted language like Python:\n\n- It tends to be slower than compiled languages as the code must be interpreted each time it is run.\n- Code can be difficult to optimize, resulting in less efficient programs.\n- Interpreted languages are not always suitable for resource-intensive tasks, such as video game development.\n- Interpreted languages can be more vulnerable to security issues. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_char(string, char):\n    count = 0\n    for c in string:\n        if c == char:\n            count += 1\n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import scrapy\n\nclass ArticleSpider(scrapy.Spider):\n name = 'articles'\n start_urls = ['https://www.some-website.com/latest']\n \n def parse(self, response):\n for article in response.css('article'):\n yield {\n 'title': article.css('h2 ::text').extract_first(),\n 'url': article.css('a ::attr(href)').extract_first(),\n }\n\nnext_page = response.css('li.next a ::attr(href)').extract_first()\nif next_page is not None:\n yield response.follow(next_page, callback=self.parse) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_missing_number(arr):\n # Set to store all numbers from 1 to the last element in the array\n # For an array of length n, the last element has value n \n all_nums = set(range(1, arr[-1] + 1)) \n \n # Set to store all numbers present in the array\n arr_nums = set(arr) \n  \n return list(all_nums - arr_nums)[0] \n\n# Test\nprint(find_missing_number([1, 2, 3, 4, 6, 7, 8, 9]))\n# Output: 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_optimizer(input_list):\n    maximum = max(input_list)\n    return maximum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortDictByValue(dictionary):\n sorted_dictionary = sorted(dictionary.items(), key=lambda x: x[1])\n return dict(sorted_dictionary)\n     \ndictionary = {\n 'a': 10,\n 'b': 3,\n 'c': 5\n}\n\nprint(sortDictByValue(dictionary)) \n// Output: {'b': 3, 'c': 5, 'a': 10} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse(head):\n    prev = None\n    current = head\n    while current:\n        next = current.next\n        current.next = prev\n        prev = current\n        current = next\n    return prev but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def split_list(list, x):\n    return [list[i * x:(i + 1) * x] for i in range((len(list) + x - 1) // x )] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def encrypt(text,s): \n    result = \"\" \n  \n    # traverse text \n    for i in range(len(text)): \n        char = text[i] \n  \n        # Encrypt uppercase characters \n        if (char.isupper()): \n            result += chr((ord(char) + s-65) % 26 + 65) \n  \n        # Encrypt lowercase characters \n        else: \n            result += chr((ord(char) + s - 97) % 26 + 97) \n  \n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list3 = list(zip(list1, list2))\nprint(list3) \n# Output: [(1, 5), (2, 6), (3, 7), (4, 8)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Singleton:\n    instance = None\n\n    @staticmethod\n    def get_instance():\n        if Singleton.instance is None:\n            Singleton.instance = Singleton()\n        return Singleton.instance but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nDesign a Python program to print out the first 10 prime numbers\n\"\"\"\n\ndef get_prime_numbers(n):\n    prime_numbers = []\n    x = 2\n    while len(prime_numbers) < n:\n        is_prime = True\n        for num in prime_numbers:\n            if x % num == 0:\n                is_prime = False\n                break\n\n        if is_prime:\n            prime_numbers.append(x)\n\n        x += 1\n\n    return prime_numbers\n\nif __name__ == '__main__':\n    result = get_prime_numbers(10)\n    print(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from bs4 import BeautifulSoup\n\nhtml_doc = \"\"\"\n<html>\n <head>\n <title>Example HTML Document</title>\n </head>\n <body>\n <p>This is an example of a HTML document.</p>\n <ul>\n <li>Item 1</li>\n <li>Item 2</li>\n <li>Item 3</li>\n </ul>\n </body>\n</html>\n\"\"\"\n\nsoup = BeautifulSoup(html_doc, 'html.parser')\n\ntitle = soup.find('title').text\nprint(title)\n\nitems = [item.text for item in soup.findAll('li')]\nprint(items) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\n\n\n#### Import modules\nfrom selenium import selenium\nfrom selenium import webdriver\nimport sys, time, re, string, getopt\n\n#### Constants\ndefault_crew = 'elotrolado'\nlogin_url = 'https://socialclub.rockstargames.com/profile/signin'\nbase_crew_url = 'http://socialclub.rockstargames.com/crew'\npath_gtav_base_url = '/games/gtav'\npath_gtav_overview_url = '/career/overview/gtaonline'\n\n#### Global\nusername = ''\npassword = ''\ncrew_name = ''\noutput_file = ''\nverbose_flag = ''\n\n#### Class definition\nclass crew_member:\n    def __init__(self):\n        self.id = ''\n        self.psn = ''\n        self.url = ''\n        self.level = ''\n        self.playtime = ''\n        self.country = ''\n        self.rank = ''\n        self.crew = ''\n        self.platform = ''\n        self.error = 'All ok.'\n\n#### Function definitions\n\ndef print_help():\n    print 'gtav_crew_exporter.py -c <crew_name> [-u <username> -p <password>] [-o <output_file>] [-v]'\n\ndef arg_parser(argv):\n    global crew_name\n    global username\n    global password\n    global output_file\n    global verbose_flag\n    try:\n        opts, args = getopt.getopt(argv,\"hvu:p:c:o:\",[\"verbose\",\"username\",\"password\",\"crew=\",\"ofile=\"])\n    except getopt.GetoptError:\n        print_help()\n        debug(2)\n    for opt, arg in opts:\n        if opt == '-h':\n            print_help()\n            debug()\n        elif opt in (\"-c\", \"--crew\"):\n            crew_name = arg\n        elif opt in (\"-o\", \"--ofile\"):\n            output_file = arg\n            if not output_file: print_help()\n        elif opt in (\"-v\", \"--verbose\"):\n            verbose_flag = 1\n        elif opt in (\"-u\", \"--username\"):\n            username = arg\n            if not username: print_help()\n        elif opt in (\"-p\", \"--password\"):\n            password = arg\n            if not password: print_help()\n\n    if not crew_name:\n        crew_name = default_crew\n\n    return 0\n\ndef debug(msg):\n    global verbose_flag\n    if verbose_flag: print 'DBG : ' + msg\n\ndef WaitForElement(webdriver, path):\n    limit = 10   # waiting limit in seconds\n    inc = 1   # in seconds; sleep for 500ms\n    c = 0\n    while (c < limit):\n        try:\n            webdriver.find_element_by_xpath(path)\n            return 1        # Success\n        except:\n            time.sleep(inc)\n            c = c + inc \n \n    # print sys.exc_info()\n    return 0   \n\n####\ndef LoginSocialClub(driver):\n\n    if not username or not password:\n        print '!! Without login and password, only username and rank are available:'\n        return 1\n    \n    driver.get(login_url)\n        \n    path = '//*[@id=\"submitBtn\"]'\n    result = WaitForElement(driver, path)\n\n    if not result:              # interprets returned value\n    #        driver.close()\n        debug(\"\\nThe page is not loaded yet.\")\n    else:\n        debug('web - page fully loaded!')\n\n    path='//input[@id=\"login-field\"]'\n    driver.find_element_by_xpath(path).clear()\n    driver.find_element_by_xpath(path).send_keys(username)\n\n    path='//input[@id=\"password-field\"]'\n    driver.find_element_by_xpath(path).clear()\n    driver.find_element_by_xpath(path).send_keys(password)\n\n    path = '//*[@id=\"submitBtn\"]'\n    driver.find_element_by_xpath(path).click()\n\n    driver.get(login_url)\n        \n    path = '//*[@id=\"panelaccounts\"]'\n    result = WaitForElement(driver, path)\n\n    if not result:              # interprets returned value\n    #        driver.close()\n        debug(\"\\nThe page is not loaded yet.\")\n    else:\n        debug('web - page fully loaded!')\n\n    return 0\n\n\n#### \ndef GetMembersList(driver):\n\n    crew_url = base_crew_url + '/' + crew_name + '/hierarchy'\n    driver.get(crew_url)\n        \n    path = '//*[@id=\"muscleList\"]'\n    result = WaitForElement(driver, path)\n\n    if not result:              # interprets returned value\n    #        driver.close()\n        debug(\"\\nThe page is not loaded yet.\")\n    else:\n        debug('web - page fully loaded!')\n        \n\n    path = '//a[@data-ga=\"footer_selectlanguage_en\"]'\n    viewall = driver.find_element_by_xpath(path)\n\n    if not viewall:\n        debug(\"meh.\")\n    else:\n        debug(\"web - set page in english.\")\n    #    viewall.click()\n\n    path = '//a[@class=\"viewAll\"]'\n    \n    try:\n        viewall = driver.find_element_by_xpath(path)\n        debug(\"web - unfold users.\")\n        viewall.click()\n    except:\n        debug(\"web - all users visible.\")\n\n    path = '//div[contains(@id, \"crewRank_\")]'\n    hierarchy = driver.find_elements_by_xpath(path)\n\n    crew_members = list()\n\n    for rank in hierarchy:\n\n    #    print rank.get_attribute('id')\n        path = '//div[@id=\"' + rank.get_attribute('id') + '\"]//i[@class=\"icon-info\"]'\n        rank_name = rank.find_element_by_xpath(path).get_attribute('data-name')\n        \n    #    print rank_name\n\n        path = '//div[@id=\"' + rank.get_attribute('id') + '\"]//ul[@id=\"' + rank_name + 'List\"]//div[@class=\"member\"]//img'\n        members = rank.find_elements_by_xpath(path)\n\n        for member in members:\n            \n            cm = crew_member()\n            cm.id = member.get_attribute('data-original-title')\n            cm.url = member.find_element_by_xpath('..').get_attribute('href')\n            cm.rank = rank_name\n\n            crew_members.append(cm)\n\n    return crew_members\n\n#### Function definitions\ndef GetMemberInfo(driver, member):\n\n    debug('[' + member.id + ']')\n    \n\n    retry = 0\n    max_retry = 5\n\n    # Add retry to avoid errors\n    for rety in range(max_retry): \n\n        ## Load profile page\n        driver.get(member.url)\n        \n        path = '//*[@id=\"cardInfoVitals\"]'\n        result = WaitForElement(driver, path)\n\n        if not result:              # interprets returned value\n        #        driver.close()\n            debug(\"web - The page is not loaded yet. [\" + str(retry) + \"]\")\n            retry += 1\n        else:\n            debug('web - page fully loaded! [' + str(retry) + ']')\n            break\n\n    ## Check if profile is private\n\n    try:\n        path = '//div[@id=\"no-profile\"]'\n        profail = driver.find_element_by_xpath(path) \n        debug('[' + member.id + '] Profile is private!')\n        member.error = 'Private profile.'\n        return 1        # Success\n\n    except: \n        ## Crew Principal\n        path = '//div[@class=\"crew-info\"]/a'\n        member.crew = driver.find_element_by_xpath(path).get_attribute(\"href\").rsplit('/',1)[1]\n\n        debug('[' + member.id + '] main crew: ' + member.crew)\n\n        try:\n            ## PSN ID\n            path = '//div[@class=\"PSN\"]/h5'\n            member.psn = driver.find_element_by_xpath(path).text\n        except:\n            member.psn = ''\n\n        debug('[' + member.id + '] PSN ID: ' + member.psn)\n        \n        try:\n            ## Language\n            path = '//div[@id=\"cardInfoFooter\"]//span[contains(@class,\"Country\")]'\n            member.country = driver.find_element_by_xpath(path).get_attribute(\"data-original-title\")\n        except:\n            member.country = ''\n\n        debug('[' + member.id + '] country: ' + member.country)\n    \n        driver.get(member.url + '/'+ path_gtav_base_url + '/ps3' + path_gtav_overview_url)\n    \n        path = '//div[@id=\"freemodeRank\"]'\n        result = WaitForElement(driver, path)\n        \n        if not result:              # interprets returned value\n            #        driver.close()\n            debug(\"\\nThe page is not loaded yet.\")\n        else:\n            debug('web - page fully loaded!')\n\n        try:\n            path = '//div[@id=\"freemodeRank\"]//h3'\n            member.level = driver.find_element_by_xpath(path).text\n        except:\n            member.level = ''\n\n        if member.level == 0:\n            member.platform = 'XBOX360'\n\n            driver.get(member.url + '/'+ path_gtav_base_url + '/xbox' + path_gtav_overview_url)\n    \n            path = '//div[@id=\"freemodeRank\"]'\n            result = WaitForElement(driver, path)\n        \n            if not result:              # interprets returned value\n                #        driver.close()\n                debug(\"\\nThe page is not loaded yet.\")\n            else:\n                debug('web - page fully loaded!')\n\n            try:\n                path = '//div[@id=\"freemodeRank\"]//h3'\n                member.level = driver.find_element_by_xpath(path).text\n            except:\n                member.level = ''\n\n        else:\n            member.platform = 'PS3'\n\n        debug('[' + member.id + '] rank: ' + member.rank)\n            \n        try:\n            ## Language\n            path = '//div[@id=\"freemodeRank\"]//div[@class=\"rankBar\"]/h4'\n            member.playtime = driver.find_element_by_xpath(path).text.rsplit(':',1)[1]\n        except:\n            member.playtime = ''\n\n        debug('[' + member.id + '] playtime: ' + member.playtime)\n    \n        \n\n    # print sys.exc_info()\n    return member \n\n#### Main function\n\nif __name__ == \"__main__\":\n    arg_parser(sys.argv[1:])\n\n    debug('web - starting browser')\n    driver = webdriver.Firefox()\n\n    print 'Crew: ' + crew_name\n    \n    crew_members = GetMembersList(driver)\n    print 'Crew Size: ' + str(len(crew_members)) + ' members'\n\n    error = LoginSocialClub(driver)\n\n    if error:\n        print 'Crew Members :'\n        for cm in crew_members:\n            print cm.rank + \", \" + cm.id + \", \" + cm.url\n\n        debug('You need to provide login information to view each member info.')\n\n    for cm in crew_members:\n        cm = GetMemberInfo(driver, cm)\n\n    if output_file:\n        f = open(output_file,'w')\n        \n    for cm in crew_members:\n        member_csv = str(cm.id) + ', ' \\\n                    + str(cm.country) + ', ' \\\n                    + str(cm.psn) + ', ' \\\n                    + str(cm.platform) + ', ' \\\n                    + str(cm.crew) + ', ' \\\n                    + str(cm.rank) + ', ' \\\n                    + str(cm.level)  + ', ' \\\n                    + str(cm.playtime) + ', ' \\\n                    + str(cm.error)\n        if output_file:\n            f.write(member_csv + '\\n')\n        else:\n            print member_csv\n\n    if output_file:\n        print 'Output saved as ' + output_file + '.'\n        f.close() # you can omit in most cases as the destructor will call if\n      \n    driver.close()\n\n    sys.exit()\n\n    # Grab URL\n    #url = str(sys.argv[1])\n    # Check if it's malformed\n    #regex = re.compile(\n    #        r'^(?:http|ftp)s?://' # http:// or https://\n    #        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n    #        r'localhost|' #localhost...\n    #        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n    #        r'(?::\\d+)?' # optional port\n    #        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    #vurl = regex.match(url)\n    #if vurl:\n    #\tprint (\"Good url : %s\" % url)\n    #else:\n    #\tdebug (\"Malformed url : %s\" % url)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def area_of_right_triangle(base, height): \n  \"\"\"Calculate the area of a right angled triangle\"\"\"\n  return (1/2) * base * height but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class AnagramDetector:\n    def __init__(self, sentence1, sentence2):\n        self.sentence1 = sentence1\n        self.sentence2 = sentence2\n    \n    def is_anagram(self):\n        # put words in sentences in lowercase\n        s1_words = [word.lower() for word in self.sentence1.split()]\n        s2_words = [word.lower() for word in self.sentence2.split()]\n        \n        # compare the length of the words\n        if len(s1_words) != len(s2_words):\n            return False\n        \n        # compare the words in both list\n        for word in s1_words:\n            if word not in s2_words:\n                return False\n        \n        return True\n\ndetector = AnagramDetector(sentence1, sentence2)\nresult = detector.is_anagram()\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sum = 0\nfor num in [3, 4, 7, 1]:\n  sum += num\n\nprint(sum) # Output is 15 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error \n\n#Loading the dataset\ndata = pd.read_csv('house_pricing.csv')\nX = data[['square_feet', 'bedrooms', 'bathrooms', 'location']]\ny = data['price']\n\n#Splitting the data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=2020)\n\n#Training the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n#Evaluating the model\ny_pred = model.predict(X_test)\nmse = mean_squared_error(y_test, y_pred)\n\n#Optimizing the model\noptimized_model = LinearRegression(normalize = True)\noptimized_model.fit(X_train, y_train)\n\n#Evaluating the optimized model\ny_pred_opt = optimized_model.predict(X_test)\nmse_opt = mean_squared_error(y_test, y_pred_opt)\n\n#Printing results\nprint('Mean Squared Error (Unoptimized) : {:.4f}'.format(mse))\nprint('Mean Squared Error (Optimized) : {:.4f}'.format(mse_opt)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create a function to compute the total cost of purchasing the items\ndef compute_cost(items):\n total = 0\n for item in items:\n total += item['price']\n return total\n\n# Create a function for computing the maximum cost of purchasing the items\ndef compute_maximum_cost(items, budget):\n max_cost = 0\n n = len(items)\n \n # Generate all possible combinations of items\n for i in range(1 << n):\n  current_cost = 0\n  for j in range(n):\n   if i & (1 << j):\n    current_cost += items[j]['price']\n \n  if current_cost <= budget and current_cost > max_cost:\n   max_cost = current_cost\n \n return max_cost\n\n # Create a function for determining the optimal set of items to purchase\n def compute_optimal_items(items, budget):\n  n = len(items)\n  max_cost = compute_maximum_cost(items, budget)\n  optimal_set = []\n  \n  # Generate all possible combinations of items\n  for i in range(1 << n):\n   current_cost = 0\n   for j in range(n):\n    if i & (1 << j):\n     current_cost += items[j]['price']\n \n   if current_cost == max_cost:\n    for j in range(n):\n     if i & (1 << j):\n      optimal_set.append(items[j]['name'])\n  return optimal_set but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_to_int(s):\n return int(s) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_prime_numbers(num):\n    for i in range(2, num+1):\n        for j in range(2, i):\n            if (i % j) == 0:\n                break\n        else:\n            print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_password(length):\n chars = string.ascii_letters + string.digits + '$#&'\n return ''.join(random.choice(chars) for _ in range(length))\n\nlength = 8\npassword = generate_password(length)\nprint(password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_friends = [\"Greg\", \"Emily\", \"Sam\", \"Jess\", \"Leo\"]\n\nfor i in range(len(my_friends)):\n    print(my_friends[i]) \n\n# Output\n# Greg\n# Emily\n# Sam\n# Jess\n# Leo but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def updateList(myList):\n myList.append(1)\n \nmyList = [1, 2, 3]\nupdateList(myList)\nprint(myList) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nfrom nltk.tokenize import word_tokenize\n\n# input text\narticle = \"\"\"\nThis article is about Harry Potter and how he saves the day. \nIt is a feel-good story of triumph and courage in the face of adversity.\n\"\"\"\n\n# create sentiment analyzer \nsentiment_analyzer = SentimentIntensityAnalyzer()\n\n# tokenize the input text into separate words\ntokens = word_tokenize(article)\n\n# perform sentiment analysis\nsentiment_scores = {}\nfor token in tokens:\n    sentiment_score = sentiment_analyzer.polarity_scores(token)\n    sentiment_scores[token] = sentiment_score\n\n# print the sentiment scores \nprint(sentiment_scores)\n\n// Output:\n// {'This': {'neg': 0.0, 'neu': 0.323, 'pos': 0.677, 'compound': 0.4939}, \n// 'article': {'neg': 0.0, 'neu': 0.451, 'pos': 0.549, 'compound': 0.6249}, \n// 'is': {'neg': 0.0, 'neu': 1.0, 'pos': 0.0, 'compound': 0.0}, \n// 'about': {'neg': 0.0, 'neu': 1.0, 'pos': 0.0, 'compound': 0.0}, \n// \u2026 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_prefix_suffix(lst, prefix, suffix): \n\treturn [prefix + i + suffix for i in lst] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for num in list: \n    if num % 2 == 0: \n        print(num, \"is an even number\") \n    else: \n        print(num, \"is an odd number\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiplyByThree(number):\n  return number*3\n\nmultiplied_value = multiplyByThree(4)\nprint(multiplied_value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_total(order_items, tax_rate):\n    total = 0.00\n    for item in order_items:\n        total += (item[\"Price\"] * item[\"Qty\"])\n    total += total * tax_rate\n    return total\n\norder_items = [{\"Name\":\"Apples\",\"Price\":2.00,\"Qty\":2},{\"Name\":\"Milk\",\"Price\":2.50,\"Qty\":1},{\"Name\":\"Eggs\",\"Price\":3.00,\"Qty\":6}]\ntax_rate = 0.08\n\ntotal = calculate_total(order_items, tax_rate)\nprint(total) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printPrimeNum(n): \n  \n    prime_list = [] \n   \n    for num in range(2, n + 1): \n        prime = True\n        for i in range(2, num): \n            if (num % i == 0): \n                prime = False\n        if prime:\n            prime_list.append(num) \n              \n    print(prime_list)\n  \n  \nnum = 25 \nprintPrimeNum(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(0, 101):\n  if i % 3 == 0:\n    print(i)\n\n# Output\n0\n3\n6\n9\n12\n15\n18\n21\n24\n27\n30\n33\n36\n39\n42\n45\n48\n51\n54\n57\n60\n63\n66\n69\n72\n75\n78\n81\n84\n87\n90\n93\n96\n99 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Circle():\n    \"\"\"\n    Accurately define a circle in Python\n    \"\"\"\n    def __init__(self, x, y, radius):\n        \"\"\"\n        Constructor for Circle\n        \"\"\"\n        self.x = x\n        self.y = y\n        self.radius = radius\n    \n    def get_area(self):\n        \"\"\"\n        Returns area of the circle\n        \"\"\"\n        return 3.14*self.radius**2\n    \n    def get_perimeter(self):\n        \"\"\"\n        Returns perimeter of the circle\n        \"\"\"\n        return 2*3.14*self.radius\n    \n    def get_centre(self):\n        \"\"\"\n        Returns the centre point of the circle\n        \"\"\"\n        return self.x, self.y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack:\n    def __init__(self): \n        self.stack = [] \n  \n    def is_empty(self): \n        return self.stack == [] \n  \n    def push(self, data): \n        self.stack.append(data) \n      \n    def pop(self): \n        data = self.stack[-1] \n        del self.stack[-1] \n        return data \n  \n    def peek(self): \n        return self.stack[-1] \n      \n    def size_stack(self): \n        return len(self.stack) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def delete_element_at_index(arr, index):\n    if index >= len(arr):\n        raise Exception('index out of range')\n    \n    # Delete the element at the index\n    del arr[index]\n\n# Example array and index\nmy_arr = [1,2,3,4,5];\nindex = 3;\n\n# Call the function\ndelete_element_at_index(my_arr, index)\n\n# Print the array\nprint(my_arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import LinearSVC\n\n# Load the data\ndata = pd.read_csv('data.csv')\n\n# Create the feature vector\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(data['text']) \n\n# Create labels\ny = np.where(data['sentiment']=='positive', 1, 0)\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train the classifier\nmodel = LinearSVC()\nmodel.fit(X_train, y_train)\n\n# Make a prediction\nsentence = 'The food at this restaurant is terrible'\npreds = model.predict(vectorizer.transform([sentence])) \n\n# Print the prediction\nprint('Sentiment:', 'Positive' if preds[0] else 'Negative') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Search a given word in a sentence and return the index\ndef find_word(sentence, word):\n    index = -1\n    for i in range(len(sentence)-len(word)+1):\n        if sentence[i:i+len(word)] == word:\n            index = i\n            break\n    return index\n\nsentence = \"Python is a powerful programming language.\"\nword = \"powerful\"\nindex = find_word(sentence, word)\n\nprint('The index of the word is', index)\n\n# Output\nThe index of the word is 14 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport json\n\nAPI_KEY = 'myapikey'\n\ndef get_weather(location):\n url = 'http://api.openweathermap.org/data/2.5/weather?q={}&APPID={}'.format(location, API_KEY)\n response = requests.get(url)\n data = json.loads(response.text)\n return data\n\ndef store_weather(location, data):\n # store the weather data in a database\n pass\n\n# main application\nif __name__ == '__main__':\n location = 'London'\n data = get_weather(location)\n store_weather(location, data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ntext = 'The quick brown fox jumped over the lazy dog'\nsearch = 'fox'\n\nresult = re.findall(search, text)\n\nif result:\n    print('Found!');\nelse:\n    print('Not Found!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pattern(n): \n  \n    # outer loop to handle number of rows \n    for i in range(0, n): \n      \n        # inner loop to handle number of columns \n        for j in range(0, i+1): \n              \n            # printing stars \n            if j%2 == 0: \n                print(\"* \",end=\"\") \n            else:\n                print(\"# \",end=\"\")\n              \n        # ending line after each row \n        print(\"\\r\") \n  \n# Driver Code \nn = 6\npattern(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import PyPDF2\n\n# open and read the pdf file\nfile = open('document.pdf', 'rb')\nreader = PyPDF2.PdfFileReader(file)\n\n# read complete document\nfor page in range(reader.numPages):\n    print(reader.getPage(page).extractText())\n\nfile.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\nfrom datetime import datetime\nimport sqlite3\n\n#Specify the URL\nurl = 'https://www.news.example.com/'  \n  \n#Send a request to the website and fetch the response \nr = requests.get(url) \n  \n#Parse the response using BeautifulSoup \nsoup = BeautifulSoup(r.content, 'html.parser') \n  \n#Retrive all the articles\narticles = soup.find_all('article')\n\n# Create a database connection\nconn = sqlite3.connect(\"news.db\")\nc = conn.cursor()\n\n# Create a table in the database\nc.execute('CREATE TABLE IF NOT EXISTS articles('\n\t\t  'id INTEGER PRIMARY KEY AUTOINCREMENT,'\n\t\t  'headline VARCHAR(255),'\n\t\t  'author VARCHAR(255),'\n\t\t  'date DATETIME,'\n\t\t  'link VARCHAR(255))')\n\n#Iterate over the articles \nfor article in articles: \n    headline = article.h2.a.text \n    author = article.find('span', attrs = {'class':'author'}).text\n    date = article.span.text\n    link = article.h2.a['href']\n\t\n\t# Insert data in the table\n    c.execute('INSERT INTO articles(headline, author, date, link)' \n              'VALUES(?, ?, ?, ?)', (headline, author, date, link))\n\t\n#Commit the changes\nconn.commit()\n\n#Close the connection\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: High Level Languages: \n1. JavaScript \n2. Python\n\nLow Level Languages: \n1. C \n2. Assembly but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python code\n\nn = 90\n\nfor num in range(2, n+1):\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\n# Set the x-axis to a list of strings for each month.\nx_axis = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n\n# Set the y-axis to a list of floats as the total fare in US dollars accumulated for each month.\ny_axis = [10.02, 23.24, 39.20, 35.42, 32.34, 27.04, 43.82, 10.56, 11.85, 27.90, but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def all_combinations(list_of_numbers): \n    if len(list_of_numbers) == 0: \n        return [] \n  \n    if len(list_of_numbers) == 1: \n        return [list_of_numbers] \n  \n    combinations = [] \n    for combination in all_combinations(list_of_numbers[1:]): \n        combinations.append(combination) \n        combinations.append([list_of_numbers[0]] + combination) \n  \n    return combinations but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter as tk\n\nroot = tk.Tk()\nroot.title('My App')\n\n# Create a label\nlabel = tk.Label(root, text=\"Hello, World!\")\nlabel.pack()\n\n# Create a button\nbutton = tk.Button(root, text = \"Click Me!\")\nbutton.pack()\n\nroot.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1,11):\n print('5 *', i, '=', 5 * i)\n\n# Output\n# 5 * 1 = 5\n# 5 * 2 = 10\n# 5 * 3 = 15\n# 5 * 4 = 20\n# 5 * 5 = 25\n# 5 * 6 = 30\n# 5 * 7 = 35\n# 5 * 8 = 40\n# 5 * 9 = 45\n# 5 * 10 = 50 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nURL = 'http://example.com/data'\n\n# Send a request to the URL\npage = requests.get(URL)\n\n# Parse the page\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Get the data\ndata = soup.find_all('div', class_='data')\n\n# Print the data\nfor item in data:\n print(item.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn import tree\n\n# [Height, Weight, Shoe Size]\ndata = [[6, 170, 9], [5.5, 150, 6], [5.7, 160, 8], [5.9, 180, 10]]\ntarget = ['male', 'female', 'female', 'male']\n\nclf = tree.DecisionTreeClassifier()\nclf.fit(data, target)\n\nheight = 6\nweight = 170\nshoe_size = 9\n\npredict = clf.predict([[height, weight, shoe_size]])\n\nif predict == 'male':\n    print('Male')\nelif predict == 'female':\n    print('Female') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print('Please enter a number:')\nn = int(input()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\nclass CustomerData:\n \n    def __init__(self):\n        self.db = sqlite3.connect('customers.db')\n \n    def write(self, customer):\n        with self.db:\n            self.db.execute('INSERT INTO customers VALUES(?, ?)', (customer.name, customer.age))\n        return customer\n \n    def get(self, customer_name):\n        with self.db:\n            row = self.db.execute('SELECT * FROM customers WHERE name=?', (customer_name,)).fetchone()\n            if row:\n                return Customer(*row)\n            else:\n                return None\n \n    def delete(self, customer_name):\n        with self.db:\n            self.db.execute('DELETE FROM customers WHERE name=?', (customer_name,))\n \nclass Customer:\n \n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n \n    def __str__(self):\n        return f'{self.name}, {self.age}' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [12, 15, 8, 10]\narr[:] = [x for x in arr if x % 3 != 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Circle:\n \n    def __init__(self, radius):\n        self.radius = radius \n \n    def area(self):\n        \"\"\"Returns the area of a circle given the radius\"\"\"\n        return (self.radius**2) * 3.14159\n \n \n# Usage example:\n \nmy_circle = Circle(2)\nprint(my_circle.area()) # 12.56636 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n    def __init__(self, name, age, salary, designation):\n        self.name = name\n        self.age = age\n        self.salary = salary\n        self.designation = designation\n        \n    # other methods\n    \n    def update_salary(self, salary):\n        self.salary = salary but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def information_gain(data, feature):\n    \"\"\"\n    Calculates the information gain of the given feature in a dataset.\n    \n    Args:\n        data (list of dicts): The dataset.\n        feature (str): The feature for which to calculate the information gain.\n        \n    Returns: \n        float: The information gain of the given feature.\n    \"\"\"\n       \n    # Calculate the entropy of the dataset\n    data_entropy = __calc_entropy(data)\n    \n    # Calculate the weighted average of the entropy of each bin\n    weighted_avg_entropy = __calc_weighted_avg_entropy(data, feature)\n    \n    # Calculate the information gain\n    info_gain = data_entropy - weighted_avg_entropy\n    \n    return info_gain but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\narr = np.zeros(4, dtype=int)\n \nfor i in range(len(arr)):\n    arr[i] = i but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.ensemble import RandomForestClassifier\n\n# Initialize the Random Forest model\nmodel = RandomForestClassifier(n_estimators=100)\n\n# Train the model using the training data\nmodel.fit(train_x, train_y)\n\n# Use the model to predict the class\npredictions = model.predict(test_x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re \nimport operator\n\nuser_input = input(\"Please enter a sentence: \\n\")\nwords = re.findall(r'\\w+', user_input) \nword_frequency = {} \n\nfor word in words: \n\tif word in word_frequency: \n\t\tword_frequency[word] += 1 \n\telse: \n\t\tword_frequency[word] = 1\n\n# Sort words by frequency in descending order\nsorted_words = sorted(word_frequency.items(), key=operator.itemgetter(1), reverse=True) \n\nprint(\"Most Frequent Words: \\n\")\nfor k,v in sorted_words:\n\tprint(k + \": \" + str(v)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def area(self):\n        return self.length * self.width\n\n    def perimeter(self):\n        return 2 * (self.length + self.width) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_marshmallow import Marshmallow\n\napp = Flask(name)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\ndb = SQLAlchemy(app)\nma = Marshmallow(app)\n\nclass Books(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n title = db.Column(db.String(50))\n author = db.Column(db.String(50))\n\ndb.create_all()\n\nclass BookSchema(ma.Schema):\n class Meta:\n  model = Books\n  fields = ('title', 'author')\n\nbook_schema = BookSchema(strict=True)\nbooks_schema = BookSchema(many=True, strict=True)\n\n@app.route('/books', methods=['POST'])\ndef add_book():\n title = request.json['title']\n author = request.json['author']\n new_book = Books(title=title, author=author)\n db.session.add(new_book)\n db.session.commit()\n return book_schema.jsonify(new_book)\n\n@app.route('/books', methods=['GET'])\ndef get_books():\n all_books = Books.query.all()\n result = books_schema.dump(all_books)\n return jsonify(result.data)\n\nif name == 'main':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef generate_matrix(m, n, k):\n    matrix = np.random.randint(k + 1, high=9, size=(m, n))\n    return matrix\n\nm = 5\nn = 5\nk = 6\nmatrix = generate_matrix(m, n, k)\nprint(matrix) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 11):\n    for j in range(1, 11):\n        print(i*j, end='\\t')\n    print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max_sum(matrix):\n    row = len(matrix)\n    col = len(matrix[0])\n    max_sum = 0\n    max_row = 0\n    max_col = 0\n\n    for i in range(row):\n        for j in range(col):\n            # Iterating over top, bottom, left, right columns\n            top_val = 0\n            left_val = 0\n            if i > 0:\n                top_val = matrix[i - 1][j]\n            if j > 0:\n                left_val = matrix[i][j - 1]\n            cur_sum = matrix[i][j] + top_val + left_val\n            if cur_sum > max_sum:\n                max_sum = cur_sum\n                max_row = i\n                max_col = j\n\n    return max_sum\n\nresult = find_max_sum(\n    [[1, 2, 3], \n    [4, 5, 6], \n    [7, 8, 9]]\n)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from tensorflow.keras.layers import Dense, Input\nfrom tensorflow.keras.models import Sequential\n\nmodel = Sequential()\ninput = Input(shape=(1,))\n\nx = Dense(32, activation='relu')(input)\nx = Dense(32, activation='relu')(x)\nx = Dense(1, activation='sigmoid')(x)\n\nmodel = Model(inputs=input, outputs=x)\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com/product'\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nreviews = []\nfor review in soup.findAll('div', {'data-hook': 'review'}):\n rating = review.find('span', {'class': 'a-icon-alt'}).text\n date = review.find('span', {'data-hook': 'review-date'}).text\n review_comment = review.find('span', {'data-hook': 'review-body'}).text\n reviews.append([rating, date, review_comment])\n \nprint(reviews) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\ndef web_crawler(url):\n    response = requests.get(url)\n    if response.status_code == 200:\n        html = response.text\n        soup = BeautifulSoup(html, \"lxml\")\n        text = soup.findAll(text=True)\n        return text but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_digit(str, num):\n    new_str = \"\"\n    for char in str:\n        if char.isnumeric():\n            new_str += str(num)\n        else:\n            new_str += char\n    \n    return new_str\n\nnew_str = replace_digit(str, num)\nprint(new_str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def median(nums):\n sorted_list = sorted(nums)\n if len(sorted_list) % 2 == 0:\n mid = int(len(sorted_list) / 2)\n return (sorted_list[mid] + sorted_list[mid-1]) / 2\n else:\n return sorted_list[int(len(sorted_list)/2)]\n\nmedian([3, 4, 1, 2, 5]) # Output: 3.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def common_elements(list1, list2):\n    common = []\n    for num in list1:\n        if num in list2:\n            common.append(num)\n    return common\n\nprint(common_elements([1, 3, 5, 7], [3, 4, 5, 8])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def functionA(x):\n    answer = 0\n    for i in range(x):\n        answer += x-i\n    return answer but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def set_negative_to_zero(arr):\n    new_arr = []\n    for num in arr:\n        if num < 0:\n            new_arr.append(0)\n        else:\n            new_arr.append(num)\n    return new_arr\n\nresult = set_negative_to_zero([2, 5, -8, 0, 1, -6])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: number = int(input(\"Please enter a 3-digit integer: \")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import modules\nimport math\n\n# function to calculate the distance\ndef route_distance(A, B):\n    dX = B[0] - A[0]\n    dY = B[1] - A[1]\n    return math.sqrt(dX * dX + dY * dY)\n\n# Driver code \nA = (1.2, -2.6) \nB = (7.9, 5.3)\n\ndist = route_distance(A, B)\n\nprint(\"Distance from A to B is:\", dist) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python 3 program to find the nth\n# Fibonacci number\ndef Fibonacci(n):\n    if n<0:\n        print(\"Incorrect input\")\n    # First Fibonacci number is 0\n    elif n==1:\n        return 0\n    # Second Fibonacci number is 1\n    elif n==2:\n        return 1\n    else:\n        return Fibonacci(n-1)+Fibonacci(n-2)\n \n# Driver Program\nprint(Fibonacci(10))\n\n# Output\n34 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_longest_string(string_list):\n    longest_string = ''\n    for string in string_list:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def capitalize(string):\n    words = string.split() \n    capitalized_words = [word[0].upper() + word[1:] for word in words]\n    return \" \".join(capitalized_words)\n\nprint(capitalize(\"this is a sentence\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_except_last(arr):\n    total = 0\n    for i in range(len(arr) - 1):\n        total += arr[i]\n    return total\n\nif __name__ == '__main__':\n    output = sum_except_last([1,2,3,4,5])\n    print(output) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_ints(int1, int2):\n    return int1 + int2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_descending(numbers): \n    numbers.sort(reverse=True) \n    return numbers \n\nprint(sort_descending(numbers)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num = 1\nsum = 0\nwhile num <= 10:\n    sum = sum + num\n    num = num + 1\n\nprint(sum)  # Output: 55 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: a, b = 0, 1\n\nfibonacci = [a]\n\nwhile b < 10:\n    fibonacci.append(b)\n    a, b = b, a + b\n\nprint(fibonacci) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def prime_numbers(upper_limit):\n prime_nums = []\n for i in range(2, upper_limit + 1):\n for j in range(2, i):\n if i % j == 0:\n break\n else:\n prime_nums.append(i)\n return prime_nums\n\n# Create Template\noutput_html = \"\"\" \n<!DOCTYPE html>\n<html>\n<head>\n <title>Prime Numbers</title>\n</head>\n<body>\n <h1>Prime Numbers between 1 and {}</h1> \n <p>\n\"\"\"\n\nupper_limit = 10\n# Calculate prime numbers\nprime_nums = prime_numbers(upper_limit)\n# Construct HTML\noutput_html += \" <br>\".join(str(x) for x in prime_nums)\n# Finalize HTML\noutput_html += \"\"\"\n </p>\n</body>\n</html>\"\"\"\n\n# Print HTML to screen\nprint(output_html) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def order_list(mylist):\n    mylist.sort()\n    return mylist\n\nprint(\"Ordered list: \", order_list(mylist)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: x = 10\ny = 5\n\nresult = (x*x) - (y*y)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = \"Hello, World!\"\nfor char in string:\n count = string.count(char)\n print(char + \" appears \" + str(count) + \" times\")\n\n# Output\nH appears 1 times\ne appears 1 times\nl appears 3 times\no appears 2 times\n, appears 1 times\n  appears 1 times\nW appears 1 times\nr appears 1 times\nd appears 1 times\n! appears 1 times but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef shuffle_array(array):\n    for i in range(len(array)):\n        random_idx = random.randint(i, len(array) - 1)\n        array[i], array[random_idx] = array[random_idx], array[i]\n    return array\n\nprint(shuffle_array([1,2,3,4,5])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: fruits_dict = {\n    'apple':'fruit', \n    'orange':'fruit', \n    'mango':'fruit', \n    'banana':'fruit', \n    'pineapple':'fruit', \n    'pear':'fruit', \n    'strawberry':'fruit', \n    'blueberry':'fruit', \n    'plum':'fruit', \n    'peach':'fruit'\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: _list = ['digger', 'dog', 'deer']\nstring = 'The'\n\n# Create an empty list to store the modified elements\nnew_list = []\n\n# Iterate through the old list and create the modified list\nfor item in _list:\n    new_list.append(string + ' ' + item)\n\n# Print the modified list\nprint(new_list) # Output: ['The digger', 'The dog', 'The deer'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_common_element(arr):\n count_dict = {}\n \n for i in arr:\n  if i in count_dict:\n   count_dict[i] += 1\n  else:\n   count_dict[i] = 1\n   \n max_key = None\n max_value = 0\n\n for key, value in count_dict.items():\n  if value > max_value:\n   max_key = key\n   max_value = value\n \n return max_key\n \narray = [-1, -2, 2, 5, 2, -3, 0, 1]\nresult = find_common_element(array)\n\nprint (result) // 2 but is not the same. just give one example and only return the code."}
