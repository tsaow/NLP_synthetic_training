{"prompt": "make some code that functions the same as the following code: \"\"\"\nFind the total time an animation takes to play in an HTML page\n\"\"\"\n\nimport re\n\ndef get_total_animation_time(html):\n   # extract the values from the HTML\n   durations = re.findall('data-duration-seconds=\"(.*?)\"', html)\n   # convert them to floats\n   durations = [float(x) for x in durations]\n   # sum them\n   total = sum(durations)\n   return total\n   \nif __name__ == '__main__':\n    html = '''\n    <div class='anim-container'>\n      <div class='anim-one'>\n        <div class=\"sprite1\" data-duration-seconds=\"2.2\"></div>\n        <div class=\"sprite2\" data-duration-seconds=\"1.2\"></div>\n      </div>\n      <div class=\"anim-two\">\n        <div class=\"sprite3\" data-duration-seconds=\"5.5\"></div>\n      </div>\n    </div>\n    '''\n    print(get_total_animation_time(html)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def normalize(nums):\n    min_Num = min(nums)\n    max_num = max(nums)\n    \n    for i in range(len(nums)):\n        nums[i] = (nums[i] - min_Num)/ (max_num - min_Num)\n    \n    return nums but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(s, ch):\n    for i, c in enumerate(s):\n        if c == ch:\n            return i\n    return -1\n\nstring = \"helloworld\"\ncharacter = \"o\"\n\nindex = search(string, character)\nif index == -1:\n    print(\"Character not found\")\nelse:\n    print(\"Index of the character is\", index) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nrandomNumber = random.randint(1, 10)\nprint(randomNumber) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiplication_table(n): \n  \n    for i in range(1, 11): \n        print(\"{0:>2} X {1:2} = {2:2}\".format(n, i, n*i)) \n  \nmultiplication_table(6) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(str1, str2):\n    # first check that the strings are of equal length\n    if len(str1) == len(str2):\n         # convert strings to lists and sort lists\n        str1_list = list(str1)\n        str1_list.sort()\n        str2_list = list(str2)\n        str2_list.sort()\n        # check if sorted lists are equal\n        if str1_list == str2_list:\n            return True \n    # if they were not equal, return false \n    return False\n\nstr1 = 'anagram'\nstr2 = 'gramana'\nprint(is_anagram(str1,str2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize(x, alpha):\n grad = 2 * x\n x = x - alpha * grad\n return x\n\nfor i in range(1000):\n x = optimize(x, 0.1) \n\nprint(x) # Output: 0.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \nimport pandas as pd \nfrom sklearn.feature_extraction.text import CountVectorizer \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB \n  \n# Load the data \ndf = pd.read_csv('path/to/data')\n  \n# Create the Training and Test sets \nX_train, X_test, y_train, y_test = train_test_split(df['text'], df['label'], random_state=0) \n  \n# Vectorise the data \nvect = CountVectorizer().fit(X_train) \nX_train_vectorised = vect.transform(X_train) \n  \n# Fit the model \nmodel = MultinomialNB(alpha=1).fit(X_train_vectorised, y_train) \n  \n# Make predictions \npredictions = model.predict(vect.transform(X_test)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_even_numbers(n):\n    for i in range(0, n+1):\n        if i % 2 == 0:\n            print(i)\n\nprint_even_numbers(10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nimport pandas as pd\nimport sklearn\n\n# Tokenize the text\nfrom nltk.tokenize import word_tokenize\n\n# Remove Stopwords\nfrom nltk.corpus import stopwords\n\n# Text Normalization\nfrom nltk.stem.porter import PorterStemmer\n\n# Create a dataframe\ndf = pd.read_csv('data.csv')\n\n# Text Preprocessing\nstop_words = list(set(stopwords.words('english')))\nporter = PorterStemmer()\n\n# Create a list to store the preprocessed text\nprocessed_words = []\n\n# Preprocess the text in the dataframe\nfor i in range(0, len(df)):\n words = word_tokenize(df['text'][i])\n words = [w for w in words if not w in stop_words]\n words = [porter.stem(w) for w in words]\n processed_words.append(words)\n\n# Vectorization\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(max_features=2500)\nX = cv.fit_transform(df['text']).toarray()\n\n# Label Encoding\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ny = le.fit_transform(df['sentiment'])\n\n# Train the data\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20)\n\n# Train the Naive Bayes model\nfrom sklearn.naive_bayes import MultinomialNB\nnb = MultinomialNB().fit(X_train, y_train)\n\n# Test the model and get the predictions\ny_pred = nb.predict(X_test)\n\n# Evaluate the model\nprint(\"Confusion Matrix: \\n\", confusion_matrix(y_pred, y_test))\nprint(\"Accuracy:\", accuracy_score(y_pred, y_test)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import collections\n\ndef extract_top_words(file_name):\n    with open(file_name, 'r') as f:\n        data = f.read()\n        words = data.split()\n\n    counts = collections.Counter(words).most_common(10)\n    return counts\n\nfile_name = 'test.txt'\ntop_words = extract_top_words(file_name) \nprint(top_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_search(list, x):\n    low = 0\n    high = len(list) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if list[mid] == x:\n            return mid\n        elif list[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n# Driver Code\nmy_list = [...] # Assume list contains 1 million random elements\nx = 3 # Element to be searched\nresult = binary_search(my_list, x)\n\nif result != -1:\n    print('Element is present at index', str(result))\nelse: \n    print('Element is not present in list') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nsite_urls = [\"http://www.example1.com\" , \"http://www.example2.com\"]\n\nfor url in site_urls:\n response = requests.get(url)\n page_source = response.content\n print(page_source) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def missing_numbers(arr):\n    arr_set = set(arr)\n    for i in range(1, 101):\n        if i not in arr_set:\n            print(i)\n\nmissing_numbers([4,5,1,9, 8,5]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_spaces(user_string):\n    '''This function will remove all the spaces from a string'''\n    user_string = re.sub(r'\\s','',user_string)\n    return user_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: name = input(\"Enter your name:\") \n \nprint(\"Welcome to my program \" + name + \"!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport bs4\n\ndef webscraper(url):\n    page = requests.get(url)\n    soup = bs4.BeautifulSoup(page.text, \"html.parser\")\n    return soup but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nClass for a given type of rational number, with methods for adding, subtracting, multiplying, and dividing rational numbers.\n\"\"\"\n\nclass Rational:\n    def __init__(self, numerator, denominator):\n        self.numerator = numerator\n        self.denominator = denominator\n\n    def __str__(self):\n        return f\"{self.numerator}/{self.denominator}\"\n\n    def add(self, other):\n        numerator = self.numerator * other.denominator + self.denominator * other.numerator\n        denominator = self.denominator * other.denominator\n        return Rational(numerator, denominator)\n    \n    def subtract(self, other):\n        numerator = self.numerator * other.denominator - self.denominator * other.numerator\n        denominator = self.denominator * other.denominator\n        return Rational(numerator, denominator)\n    \n    def multiply(self, other):\n        numerator = self.numerator * other.numerator\n        denominator = self.denominator * other.denominator\n        return Rational(numerator, denominator)\n    \n    def divide(self, other):\n        numerator = self.numerator * other.denominator\n        denominator = self.denominator * other.numerator\n        return Rational(numerator, denominator) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def arrange(arr): \n\n    #traverse the list \n    for i in range(len(arr)): \n          \n        # swapping \n        for j in range(i+1, len(arr)): \n              \n            # comparing the adjacent element \n            if arr[i] > arr[j]: \n                temp = arr[i] \n                arr[i] = arr[j] \n                arr[j] = temp \n                  \n    return arr \n\n# Driver Code \narr = [16, 41, 0, 7, 13, 24]  \narr = arrange(arr) \n\n# Printing the sorted array \nprint (\"The rearranged array is : \") \nfor i in range(len(arr)): \n    print (arr[i], end=\" \") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_vowel_strings(string_list):\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    filtered_list = []\n    for string in string_list:\n        if string.startswith(vowels):\n            filtered_list.append(string)\n    return filtered_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #! /usr/bin/python3\n#\n# This source code is part of icgc, an ICGC processing pipeline.\n#\n# Icgc is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Icgc is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see<http://www.gnu.org/licenses/>.\n#\n# Contact: ivana.mihalek@gmail.com\n#\n\n# some pathways do not have the associated genes listed, probably by mistake\n# examples:\n# R-HSA-1483171       | Synthesis of BMP\n# R-HSA-2408499       | Formation of selenosugars for excretion\n\nfrom icgc_utils.common_queries import quotify\nfrom icgc_utils.reactome import *\nfrom config import Config\n############\ndef print_genes(cursor, gene_ids, depth):\n\tif len(gene_ids)<1:\n\t\tprint(\"\\t\"*depth, \"no genes listed\")\n\t\treturn\n\t#print(\"\\t\"*depth, \"print genes here\")\n\tgene_id_string = \",\".join([quotify(z) for z in gene_ids])\n\tqry = \"select ensembl_gene_id, approved_name from hgnc  where ensembl_gene_id in (%s)\" % gene_id_string\n\tgene_names = dict(hard_landing_search(cursor, qry))\n\tqry = \"select ensembl_gene_id, approved_symbol from hgnc  where ensembl_gene_id in (%s)\" % gene_id_string\n\tgene_symbols = dict(hard_landing_search(cursor, qry))\n\n\tfor gene in gene_ids:\n\t\tprint(\"\\t\"*depth, gene_symbols.get(gene,\"\"), gene_names.get(gene,\"\"))\n\treturn\n\n\n##############\ndef characterize_subtree(cursor, graph, pthwy_id, gene_groups, depth,  verbose=True):\n\t# this is the whole subtree\n\t# children = [node for node in nx.dfs_preorder_nodes(graph, pthwy_id)]\n\t# A successor of n is a node m such that there exists a directed edge from n to m.\n\tchildren = [node for node in graph.successors(pthwy_id)]\n\tif len(children)==0: return False\n\tnode_id_string = \",\".join([quotify(z) for z in children])\n\tqry_template = \"select * from reactome_pathways where reactome_pathway_id in (%s)\"\n\tchildren_names = hard_landing_search(cursor, qry_template % node_id_string)\n\tfor child_id, child_name in children_names:\n\t\t# number_of_genes = genes related to nodes without descendants\n\t\tgenes = genes_in_subgraph(cursor, graph, child_id)\n\t\tif verbose: print(\"\\t\"*depth, child_id, child_name, len(genes))\n\t\tif len(genes)<100:\n\t\t\tif verbose: print_genes(cursor, genes, depth+1)\n\t\t\tgene_groups[child_name] = genes\n\t\t\tcontinue\n\t\tif not characterize_subtree(cursor, graph, child_id, gene_groups, depth+1, verbose=verbose): # no further subdivisions\n\t\t\tif verbose: print_genes(cursor, genes, depth+1)\n\t\t\tgene_groups[child_name] = genes\n\t\t\tcontinue\n\treturn True\n\n#########################################\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\ndef hist_plot(gene_groups):\n\tdata = [len(gene_list) for gene_list in list(gene_groups.values())]\n\t# fixed bin size\n\tbins = np.arange(0, 505, 5) # fixed bin size\n\tplt.xlim(0,500)\n\tplt.hist(data, bins=bins, alpha=0.5)\n\t# plt.title('')\n\tplt.xlabel('number of genes in group (bin size = 5)')\n\tplt.ylabel('number of groups')\n\t#\n\tplt.show()\n\n####################################################\ndef main():\n\n\tverbose = False\n\n\tdb     = connect_to_mysql(Config.mysql_conf_file)\n\tcursor = db.cursor()\n\n\tswitch_to_db(cursor, 'icgc')\n\n\t# are there children with multiple parents? Yes. So I need some kind of\n\t# directed graph, rather tha a tree.\n\tqry = \"select child, count(distinct parent) as ct from reactome_hierarchy \"\n\tqry += \"group by child having ct>1\"\n\tret = search_db(cursor, qry)\n\tprint(\"number of children with multiple parents:\", len(ret))\n\n\t# feed the parent/child pairs as edges into graph\n\tgraph = build_reactome_graph(cursor, verbose=True)\n\t# candidate roots\n\tzero_in_degee_nodes = get_roots(graph)\n\n\tnode_id_string = \",\".join([quotify(z) for z in zero_in_degee_nodes])\n\tqry_template = \"select * from reactome_pathways where reactome_pathway_id in (%s)\"\n\troot_names  = hard_landing_search(cursor, qry_template% node_id_string)\n\tgene_groups = {}\n\tfor pthwy_id, name in root_names:\n\t\tif \"disease\" in name.lower(): continue\n\t\tif verbose: print(pthwy_id, name)\n\t\tcharacterize_subtree(cursor, graph, pthwy_id,  gene_groups,  1, verbose=verbose)\n\n\tprint(\"\\n===========================\")\n\tmax_group=0\n\tfor group, genes in gene_groups.items():\n\t\tgroupsize = len(genes)\n\t\tif max_group< groupsize: max_group=groupsize\n\t\tprint (group, len(genes))\n\tprint(\"\\n===========================\")\n\tprint(\"number of groups\", len(gene_groups))\n\tprint(\"largest group\", max_group)\n\tprint(\"\\n===========================\")\n\tfor pthwy_name, genes in gene_groups.items():\n\t\tif len(genes)<=150: continue\n\t\tprint(\"\\n\",pthwy_name, len(genes))\n\t\t#print_genes(cursor, genes, 1)\n\n\n\t#hist_plot(gene_groups)\n\tcursor.close()\n\tdb.close()\n\n\n#########################################\nif __name__ == '__main__':\n\tmain()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nGenerate a random integer between 0 and 9\n\"\"\"\n\nimport random\n\ndef generate_random_integer():\n    # Generate a random number in the range [0, 9] \n    x = random.randint(0,9) \n    return x\n\nif __name__ == '__main__':\n    print(generate_random_integer()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: valid_words = [\"apple\", \"banana\", \"orange\"]\n\nMAX_GUESSES = 6\n\nclass Hangman:\n    def __init__(self):\n        self.secret_word = self.get_random_word()\n        self.incorrect_guesses = 0\n        self.masked_word = ['_'] * len(self.secret_word)\n        self.guessed_letters = []\n    \n    def get_random_word(self):\n        return random.choice(valid_words)\n    \n    def guess_letter(self, letter):\n        self.guessed_letters.append(letter)\n        if letter in self.secret_word:\n            for i, letter in enumerate(self.secret_word):\n                if letter == self.guessed_letters[-1]:\n                    self.masked_word[i] = letter\n            return True\n        else:\n            self.incorrect_guesses += 1\n            return False\n            \n    def is_game_over(self):\n        return self.incorrect_guesses >= MAX_GUESSES or '_' not in self.masked_word but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import modules\nimport matplotlib.pyplot as plt\n\n# Get input data\ndata = [1,3,1,2,3,2,4,3,1,2]\n\n# Create a dictionary to count each number's occurrence\ncounts = {x: data.count(x) for x in data}\n\n# Set up the graph\nplt.xlabel('Number')\nplt.ylabel('Frequency')\n\n# Plot the histogram\nplt.bar(counts.keys(), counts.values())\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nclass NimAgent():\n    # This stores the history of moves \n    # each game.\n    game_history = []\n\n    def __init__(self):\n        self.move_choice = None\n        self.game_won = False\n\n    def reset(self):\n        self.move_choice = None\n        self.game_ won = False\n\n    def get_move(self, board):\n        # starting condition, no history recorded\n        if len(self.game_history) == 0:\n            return random.randint(1,3)\n\n        # check if the game has been won in the last move\n        if sum(board) == 0:\n            self.game_won = True\n            return -1\n\n        # analyze the game history   \n        # look for patterns\n        optimalMove = self.analyze_game_history()\n        return optimalMove\n    \n    def analyze_game_history(self): \n        #TODO: implement the analysis of game history \n        # to play the optimal move\n        pass\n\n    def update_move_history(self, board):\n        # Add the current game board state to the history\n        self.game_history.append(tuple(board)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\nimport sqlite3\n\ndata = {'name': 'John', 'age': 30, 'job': 'Software Engineer'}\n\nwith sqlite3.connect(\"database.db\") as con:\n cur = con.cursor()\n cur.execute(\"CREATE TABLE IF NOT EXISTS people(name TEXT, age INTEGER, job TEXT)\")\n cur.execute(\"INSERT INTO people (name, age, job) VALUES (?, ?, ?)\", (data['name'], data['age'], data['job']))\n con.commit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nGenerate a dictionary that keeps count of how many times each word appears in a given sentence\n\nParameters:\nsentence (str): a sentence\n\nReturn:\ndict: a dictionary with word as key and count as value\n\"\"\"\n\ndef count_words(sentence):\n    word_count = {}\n    words = sentence.split()\n    for word in words:\n        if word not in word_count:\n            word_count[word] = 1\n        else:\n            word_count[word] += 1\n    return word_count\n\nif __name__ == '__main__':\n    sentence = \"the quick brown fox jumps over the lazy dog\"\n    print(count_words(sentence)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Lib imports\nimport nltk\nfrom nltk.classify import NaiveBayesClassifier\n\n# Tokenize words\ndef tokenize_words(text):\n tokens = nltk.word_tokenize(text)\n return tokens\n\n# Convert the words into features\ndef convert_features(words):\n features = {}\n for word in words:\n features[word] = True\n return features\n\n# Prepare the training instances\ntraining_data = [\n ({\" President\": True, \" Trump\": True, \" immigration\": True}, \"Politics\"),\n ({\" Apple\": True, \" share\": True, \" market\": True}, \"Business\"),\n ({\" Singer\": True, \" concert\": True, \" stage\": True}, \"Entertainment\"),\n ({\" Player\": True, \" goal\": True, \" team\": True}, \"Sports\")\n]\n\n# Initialize a classification model\nmodel = NaiveBayesClassifier.train(training_data)\n\narticle = \"President Trump is expected to unveil a new immigration plan on Wednesday.\"\narticle_tokens = tokenize_words(article)\narticle_features = convert_features(article_tokens)\ncategory = model.classify(article_features)\n\nprint(\"The article is classified into the category: \", category) # The article is classified into the category: Politics but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range (100,0,-1):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_descending(list):\n    sorted_list = sorted(list, reverse=True)\n    return sorted_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndata = [{'name': 'John', 'age': '22'}, {'name': 'Bob', 'age': '33'}]\n\njson_str = json.dumps(data)\nprint(json_str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import uuid\n\ndef generateUniqueId():\n return str(uuid.uuid4())\n\nuniqueId = generateUniqueId()\nprint(uniqueId) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: name = input('What is your name? ')\nprint(f'Hello {name}!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_min(a, b):\n    return min(a, b)\n\nresult = find_min(5, 3)\nprint(result) # 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef coin_flip():\n  # Get a random number between 0 and 1\n  coin = random.randint(0, 1)\n\n  # if the number is 0, outcome is heads\n  if coin == 0:\n    return \"Heads\"\n\n  # if the number is 1, outcome is tails\n  else:\n    return \"Tails\"\n\nprint(coin_flip()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string \n\ndef generate_password(length): \n    password_characters = string.ascii_letters + string.digits\n    return ''.join(random.choice(password_characters) for i in range(length))\n\npassword = generate_password(8)\nprint(\"Password is:\", password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tweepy\nfrom textblob import TextBlob\n\nCONSUMER_KEY = ''\nCONSUMER_SECRET = ''\nACCESS_TOKEN = ''\nACCESS_SECRET = ''\n\nauth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)\nauth.set_access_token(ACCESS_TOKEN, ACCESS_SECRET)\n\napi = tweepy.API(auth)\n\ntweet_count = 10\nsearch_query = '#python'\n\ntweets = tweepy.Cursor(api.search, q=search_query, lang=\"en\").items(tweet_count)\n\ntweet_polarities = []\n\nfor tweet in tweets:\n    analysis = TextBlob(tweet.text)\n    tweet_polarities.append(analysis.sentiment.polarity)\n\nprint('Tweet count:', tweet_count)\nprint('Detailed sentiment analysis:', tweet_polarities) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ParentClass:\n    def __init__(self):\n        self.message = 'Hello, Parent'\n\nclass ChildClass(ParentClass):\n    def __init__(self):\n        ParentClass.__init__(self)\n        self.message = 'Hello, Child'\n\nobj = ChildClass()\nprint(obj.message) //Prints 'Hello, Child' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def partition(lst, n):\n return [lst[i:i+n] for i in range(0, len(lst), n)]\n \nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\npartitions = partition(list, 3)\n \nfor p in partitions:\n print(p)\n\n# Output\n# [1, 2, 3]\n# [4, 5, 6]\n# [7, 8, 9]\n# [10] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def largest_smallest(array):\n    smallest = array[0]\n    largest = array[0]\n\n    for element in array:\n        if element > largest:\n            largest = element\n        elif element < smallest: \n            smallest = element\n\n    return (smallest, largest)\n\nlargest_smallest([7, 9, 5, 4, 8, 1]) => (1, 9) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import java.util.Base64;\n\npublic String encode(String message) {\n byte[] messageBytes = message.getBytes();\n String encodedMessage = Base64.getEncoder().encodeToString(messageBytes);\n return encodedMessage;\n}\n\nString message = \"Python\";\nString encodedMessage  = encode(message);\nSystem.out.println(encodedMessage); // Output: UHl0aG9u but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classifyNumber(num): \n    if num % 2 == 0: \n        return \"even\"\n    else: \n        return \"odd\" \n  \nprint(classifyNumber(3)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n  factorial = 1\n  while n > 0:\n    factorial *= n\n    n -= 1\n  return factorial but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom scipy.optimize import linprog\n\n# Transform the problem to standard form\nc = np.array([2, 3])\nA_ub = np.array([[1,2],[-3,1]])\nb_ub = np.array([10, -6])\n\n# Solve the problem\nres = linprog(-c, A_ub, b_ub)\n\n# Print the solution\nprint(res) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: FROM python:3.8.5-slim\n\nRUN apt-get update\nRUN apt-get install -y mysql-server-5.7 nginx\n\nRUN service mysql start && \\\n\tmysql -e \"CREATE DATABASE new_database;\"\n\t\nEXPOSE 80\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: the_list = [1,2,3,4,5]\n\nfor i in range (len(the_list)):\n    print(the_list[i]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\n# Read in the data\ntext = open('noisy.txt').read()\n\n# Clean the data by removing special characters and translating to lowercase\nclean_text = re.sub(r\"[^a-zA-Z0-9\\s]\", \"\", text).lower()\n\n# Print the cleaned text\nprint(clean_text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pygame\nimport time\n \n# defines the size of the window\nWINDOW_SIZE = (400, 400)\n \n# initializes pygame\npygame.init()\nscreen = pygame.display.set_mode(WINDOW_SIZE)\n \n# game parameters\ndone = False\nclock = pygame.time.Clock()\n\n# game loop\nwhile not done:\n # gets all events\n for event in pygame.event.get():\n  if event.type == pygame.QUIT:\n   done = True\n  \n  if event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:\n   done = True \n\n # draw something\n pygame.draw.rect(screen, (255, 20, 147), pygame.Rect(30, 30, 60, 60))\n \n # updates the display\n pygame.display.flip()\n \n # delays the loop iteration\n time.sleep(1/30)\n \n# terminate pygame\npygame.quit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\n\n#  Copyright \u00a9 2015-2019 Cask Data, Inc.\n#\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n\nimport argparse\nimport os\nimport json\nfrom youtube import API\n\nMAX_RESULTS = 50\nCHANNEL_ID='UCfkRcekMTa5GA2DdNKba7Jg'\n\napi = None\n\ndef search_videos(page_token):\n  return api.get('search', part='id,snippet', channelId=CHANNEL_ID, maxResults=MAX_RESULTS, pageToken=page_token, type='video')\n\ndef video_preview(video):\n  preview_size = ['maxres', 'high', 'medium', 'standard', 'default']\n  thumbnails = video['snippet']['thumbnails']\n  preview = ''\n  for size in preview_size:\n    if size in thumbnails:\n      preview = thumbnails[size]['url']\n      break\n  return preview\n\ndef extract_video_data(video):\n  preview = ''\n  video_data = {}\n  video_data['videoId'] = video['id']['videoId']\n  video_data['title'] = video['snippet']['title']\n  video_data['description'] = video['snippet']['description']\n  video_data['preview'] = video_preview(video)\n  return video_data\n\ndef fetch_videos():\n  all_videos = []\n  total_items = MAX_RESULTS\n  page_token = ''\n  while page_token is not None:\n    response = search_videos(page_token)\n    if 'nextPageToken' in response:\n      all_videos = all_videos + list(map(extract_video_data, response['items']))\n      page_token = response['nextPageToken']\n    else:\n      page_token = None\n\n  return all_videos\n\ndef get_original_videos(path):\n  try:\n    with open(path) as video_file:\n      return json.load(video_file)\n  except:\n    print('File not found: %s. Will create new one.' % path)\n    return {\n      'videos': []\n    }\n\ndef merge_videos(original_videos, youtube_videos, visible, update, update_props):\n  props = update_props.split(',')\n  marked = []\n  for video in youtube_videos:\n    matched_video = next((v for v in original_videos['videos'] if v['videoId'] == video['videoId']), None)\n    if matched_video is None:\n      marked = [video['videoId']] + marked\n      video['visible'] = visible\n      original_videos['videos'] = [video] + original_videos['videos']\n      print('Added new video:\\n Link: https://www.youtube.com/watch?v=%s \\n Title: %s \\n' % (video['videoId'], video['title']) )\n    else:\n      marked = [video['videoId']] + marked\n      if update is not False:\n        for prop in props:\n          matched_video[prop] = video[prop]\n  original_videos['videos'] = list(filter(lambda v: v['videoId'] in marked, original_videos['videos']))\n  return original_videos\n\ndef save_videos(data, file_path):\n  with open(file_path, 'w') as outfile:\n    json.dump(data, outfile, indent=2)\n\ndef main():\n  parser = argparse.ArgumentParser()\n  parser.add_argument('-o', '--output', help='Absolute path to output file. Output file can exist.', required=True)\n  parser.add_argument('-k', '--api-key', help='Youtube API key.', required=True)\n  parser.add_argument('-v', '--visible', help='Append new videos as visible.', default=False)\n  parser.add_argument('-u', '--update', help='Update video in output file if it exists.', default=False)\n  parser.add_argument('--update-attributes', '--update-attributes', help='Comma separated list of attributes allowed to update. Works only when --update flag is true', default='description,title,preview')\n  args = parser.parse_args()\n\n  global api\n  api = API(api_key=args.api_key, client_secret='', client_id='')\n\n  original_videos = get_original_videos(args.output)\n  youtube_videos = fetch_videos()\n  merged_videos = merge_videos(original_videos, youtube_videos, args.visible, args.update, args.update_attributes)\n  save_videos(merged_videos, args.output)\n\nif __name__ == '__main__':\n  main()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def double_list(numbers):\n    doubled_list = []\n    for num in numbers:\n        doubled_list.append(num*2)\n    return doubled_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from tinydb import TinyDB, Query\n\n# Initialize database\ndb = TinyDB('my_db.json')\n\n# Insert data\ndb.insert({'name': 'John', 'age': 30, 'city': 'New York'})\ndb.insert({'name': 'Adam', 'age': 25, 'city': 'London'})\n\n# Fetch data\nsearch_results = db.search(Query().name == 'John')\nprint(search_results)  # [{'name': 'John', 'age': 30, 'city': 'New York'}] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def stringLength(string):\n    return len(string)\n\nresult = stringLength(\"Hello World\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def swap(list, i, j):\n temp = list[i]\n list[i] = list[j]\n list[j] = temp\n\ndef quickSort(list, key):\n if len(list) <= 1:\n  return list\n\n pivot = len(list) // 2\n pivotVal = list[pivot][key]\n \n less = [x for x in list if x[key] < pivotVal]\n equal = [x for x in list if x[key] == pivotVal]\n more = [x for x in list if x[key] > pivotVal]\n \n return quickSort(less, key) + equal + quickSort(more, key)\n\nlist = [\n     {\"name\": \"John\", \"address\": \"123 Main Street\"},\n     {\"name\": \"Adam\", \"address\": \"456 First Avenue\"},\n     {\"name\": \"Mike\", \"address\": \"789 Street Street\"}\n]\nsortedList = quickSort(list, \"name\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_all_substrings(string):\n    substrings = []\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            substrings.append(string[i:j])\n    return substrings but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_fibonacci_list(n):\n    fibonacci = [0, 1]\n    for _ in range(2, n):\n        fibonacci.append(fibonacci[-2] + fibonacci[-1])\n    return fibonacci\n\nfibonacci_list = generate_fibonacci_list(10)\nprint(fibonacci_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_prime_numbers(n):\n    # Ask the user for a number\n    user_input = int(input(\"Please enter a number: \"))\n    \n    primes = []\n    \n    for i in range(2, user_input + 1):\n        if is_prime(i):\n            primes.append(i)\n    \n    return primes\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = para.split(' ')\ntotal = 0\nfor word in words:\n    total += 1\nprint(total) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: people = [\n    {'name': 'John', 'age': 25}, \n    {'name': 'Mia', 'age': 28}, \n    {'name': 'Jack', 'age': 33}\n]\n\ntotal_age = 0\n\nfor person in people:\n    total_age += person['age']\n\naverage_age = total_age / len(people)\n\nprint(\"Average age: {}\".format(average_age)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # combine the two lists\ncombined_list = list1 + list2\n\n# sort the list in ascending order\ncombined_list.sort() \nprint(combined_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list_by_first_char(strings):\n    return sorted(strings, key=lambda s: s[0])\n\nstrings = [\"yesterday\", \"today\", \"tomorrow\"]\nprint(sort_list_by_first_char(strings)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef haversine(point1, point2):\n # Calculate the latitude and longitude distances\n lat1, lon1 = point1\n lat2, lon2 = point2\n lat_dist = math.radians(lat2 - lat1)\n lon_dist = math.radians(lon2 - lon1)\n\n # Use the haversine formula\n a = math.sin(lat_dist / 2)**2 + math.cos(math.radians(lat1)) * \\\n     math.cos(math.radians(lat2)) * math.sin(lon_dist / 2)**2\n c = 2 * math.asin(math.sqrt(a))\n return 6371 * c but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: try:\n  name = input('What is your name? ')\n  print('Hello, ' + name)\nexcept:\n  print('There was an error parsing your name.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def lcs(x,y): \n    m = len(x) \n    n = len(y) \t\n  \n    L = [[0]*(n+1) for i in range(m+1)] \n  \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif x[i-1] == y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n  \n    return L[m][n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Copyright 2019, OpenCensus Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom setuptools import find_packages, setup\n\nfrom version import __version__\n\nsetup(\n    name='opencensus-ext-requests',\n    version=__version__,  # noqa\n    author='OpenCensus Authors',\n    author_email='census-developers@googlegroups.com',\n    classifiers=[\n        'Intended Audience :: Developers',\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n    ],\n    description='OpenCensus Requests Integration',\n    include_package_data=True,\n    long_description=open('README.rst').read(),\n    install_requires=[\n        'opencensus >= 0.8.dev0, < 1.0.0',\n        'wrapt >= 1.0.0, < 2.0.0',\n    ],\n    extras_require={},\n    license='Apache-2.0',\n    packages=find_packages(exclude=('tests',)),\n    namespace_packages=[],\n    url='https://github.com/census-instrumentation/opencensus-python/tree/master/contrib/opencensus-ext-requests',  # noqa: E501\n    zip_safe=False,\n)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def rotate_left(arr):\n    first_element = arr[0]\n    for i in range(len(arr) - 1):\n        arr[i] = arr[i + 1]\n    arr[len(arr) - 1] = first_element\n\nrotate_left(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sumArray(arr):\n    sum = 0\n    for x in arr:\n        sum += x\n    return sum\n\npublic static int sumArray(int[] arr) {\n    int sum = 0;\n    for(int ele : arr) {\n        sum += ele;\n    }\n    return sum;\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\n\nstr = \"This, is a test-string.\"\nstr = str.translate(str.maketrans('', '', string.punctuation))\nprint(str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\n# Generating random coordinates\nx = np.random.randint(0,100,100)\ny = np.random.randint(0,100,100)\n\n# Use the coordinates to plot a black and white shape\nplt.scatter(x, y, c='black')\nplt.fill_between(x, y, color='white')\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_numbers():\n    random_numbers = set()\n    while len(random_numbers) < 100: \n        random_numbers.add(random.randint(1, 100)) \n\n    return random_numbers but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: a = 4\nb = 8\nprint(a + b) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request \nfrom requests import get \n\napp = Flask(__name__) \n\n@app.route('/', methods=['GET']) \ndef home():\n    api_key = # API key for open weather API\n    url = f'http://api.openweathermap.org/data/2.5/weather?q=current&units=imperial&APPID={api_key}'\n    output = request.get(url).json()\n    temp = output['main']['temp']\n    return f\"The current temperature in Fahrenheit is {temp} F\"\nif __name__ == '__main__': \n    app.run(debug=True, host='0.0.0.0', port=8989) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def parse_url(url): \n    res = dict()\n    elems = url.split(\"?\")[1].split(\"&\")\n    for elem in elems: \n        k, v = elem.split(\"=\")\n        res[k] = v\n    return res but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import itertools \n  \n# initializing list \nnum_list = [1, 2, 3, 4] \n  \n# printing all possible combinations \nresult = itertools.combinations(num_list, 3) \n  \n# printing the result \nprint(\"All possible combinations are : \") \nfor item in result: \n    print(item) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def getAbsoluteValue(number):\n    if (number < 0):\n        return number * -1\n    else:\n        return number\n\nprint(getAbsoluteValue(-3)) # Outputs 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for num in [2, 4, 7, 14, 21]: \n    if num % 2 == 0: \n        print(num, end = \" \") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def create_sequence():\n    i = 0\n    while i < 8:\n        yield i\n        i += 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n def __init__(self, name, age):\n  self.name = name\n  self.age = age\n\ndef describe_person(self): \n print(f\"Name: {self.name}, Age: {self.age}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def message():\n print(\"Hello World!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\nHEX_COLOR_REGEX = re.compile(r'^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\ndef get_connection():\n    # connects to a database given the database name\n    conn = sqlite3.connect(\"my_database.db\")\n    return conn\n\ndef run_command():\n    # takes a command from the user and runs it in the SQL database\n    query = input(\"Enter your command: \")\n    conn = get_connection()\n    c = conn.cursor()\n    c.execute(query)\n    results = c.fetchall()\n    conn.close()\n    return results\n\nif __name__ == '__main__':\n    results = run_command()\n    print(results) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class TVShow:\n  def __init__ (self, title, season_number, episode_number, rating):\n    self.title = title\n    self.season_number = season_number\n    self.episode_number = episode_number\n    self.rating = rating\n    \n  def get_title(self):\n    return self.title\n  \n  def get_season_number(self):\n    return self.season_number\n  \n  def get_episode_number(self):\n    return self.episode_number\n  \n  def get_rating(self):\n    return self.rating but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def intersection(a, b): \nintersection_list = []\nfor item1 in a:\n    if item1 in b:\n        intersection_list.append(item1)\nreturn intersection_list\n\na = [1, 5, 8, 9, 10], b = [2, 3, 5, 8, 9, 10]\nprint(intersection(a,b))\n# Output: [5, 8, 9, 10] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_number(list):\n    max_num = 0\n    for i in list:\n        if i > max_num:\n            max_num = i\n    return max_num\n\nmax_num = max_number(list)\nprint(\"The maximum number is:\", max_num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import libraries \nimport random\nimport json \n\n# get user input \ndef get_input():\n    message = input('USER: ')\n    return message\n\n# respond to user \ndef respond(message):\n    if message in greetings:\n        return random.choice(greetings)\n    elif message in football:\n        return random.choice(football_responses)\n    else:\n        return random.choice(default_response)\n\n# define greetings \ngreetings = ['hello', 'hi', 'hey']\n\n# define football related terms \nfootball = ['football', 'messi', 'ronaldo', 'manchester united', 'chelsea']\n\n# define football responses \nfootball_responses = [\n    'Did you hear about the latest match?',\n    'Which player do you think is the best?',\n    'What team do you support?'\n]\n\n# define default responses \ndefault_response = [\n    'I am sorry, I do not understand what you said.',\n    'Can you please elaborate?',\n    'What do you mean?'\n]\n\n# start the chat \nwhile True:\n    message = get_input()\n    response = respond(message)\n    print('BOT:', response)\n    if message == 'quit':\n        break but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def harmonic_mean(x, y):\n    return 2.0 * (x * y) / (x + y)\n\nharmonic_mean_value = harmonic_mean(7, 9)\n\nprint(harmonic_mean_value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import classification_report\n\n# Read the data \ndata = pd.read_csv('spam.csv')\n\n# Extract the features \nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(data['Message'].values).toarray()\n\n# Extract labels\ny = data['Label'].values\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=42)\n\n# Train a SVM classifier model\nsvc_model = SVC(kernel='linear')\nsvc_model.fit(X_train, y_train)\n\n# Evaluate the model performance \ny_pred = svc_model.predict(X_test)\nprint(classification_report(y_test, y_pred)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(str):\n    str_rev = ''\n    i = len(str) - 1\n\n    while i >= 0:\n        str_rev += str[i]\n        i -= 1\n\n    return str_rev but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_knight_moves(position):\n    x = int(position / 10)\n    y = position % 10\n    count = 0 \n    \n    # Possible moves the knight can make \n    xmove = [-2, -2, -1, -1,  1, 1,  2, 2] \n    ymove = [-1,  1, -2,  2, -2, 2, -1, 1] \n      \n    # Check if knight is on the boundary \n    if x <= 0 or y <= 0 or x > 8 or y > 8:\n        return 0 \n      \n    for k in range(len(xmove)):\n        if (x + xmove[k] <= 8) and (y + ymove[k] <= 8): \n            count += 1\n             \n    return count \n\nposition = 42\nmoves = count_knight_moves(position)\nprint(\"The knight can make %d moves from E3\" %moves) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndata = json.loads(json_string)\n\nprint(data['name'])\n\n# Output: John but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport bs4\n\ndef download_news(url):\n    r = requests.get(url)\n    soup = bs4.BeautifulSoup(r.content, 'lxml')\n    links = [link.get('href') for link in soup.find_all('a')]\n    \n    for link in links:\n        r = requests.get(link)\n        download_name = link.split('/')[-1]\n        with open(download_name, 'w') as f:\n            f.write(r.text)\n            print(\"Downloaded article:\", download_name) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: lst=[1,2,3,4]\nfor i in range(len(lst)):\n    lst[i] = lst[i]*10\nprint(lst) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gradient_descent(x, y, iters=1000, lr=0.01):\n    m = b = 0\n    n = len(x)\n\n    # First-order Update\n    m_update = 0\n    b_update = 0\n\n    for i in range(iters):\n        y_pred = m * x + b\n\n        # Gradient\n        dm = -(2/n) * sum([x[i] * (y[i] - y_pred[i]) for i in range(n)])\n        db = -(2/n) * sum([y[i] - y_pred[i] for i in range(n)])\n\n        # Updates\n        m_update -= lr * dm\n        b_update -= lr * db\n\n        # Update the parameters\n        m += m_update\n        b += b_update but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_average(numbers):\n    total = 0\n    for number in numbers:\n        total = total + number\n    return total / len(numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_sum(a,b):\n    return (b*(b+1))//2 - ((a-1)*a)//2\n\nsum = calculate_sum(1, 10)\nprint(sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, render_template\nimport requests\n\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n response = requests.get('https://api.themoviedb.org/3/movie/popular?api_key=YOUR_API_KEY')\n movies = response.json()\n return render_template('index.html', movies=movies)\n\nif __name__ == '__main__':\n app.run(debug=True)\n\n# index.html\n<table>\n <thead>\n <th>Name</th>\n <th>Poster</th>\n </thead>\n <tbody>\n {% for movie in movies['results'] %}\n <tr>\n <td>{{ movie['title'] }}</td>\n <td><img src=\"{{ movie['poster_path'] }}\" width=\"200\" /></td>\n </tr>\n {% endfor %}\n </tbody>\n</table> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Load the data\ndf = pd.DataFrame(sample_data)\n\n# Define the features and target\nX = df.purchase_history\ny = df.customer_id\n\n# Create the model\nmodel = RandomForestClassifier()\n\n# Fit the model\nmodel.fit(X, y)\n\n# Use the model to predict whether a customer is likely to buy a product\npredictions = model.predict([[1, 0, 0, 0, 1], [0, 1, 0, 0, 0], [0, 0, 1, 0, 1]])\nprint(predictions) # [1, 2, 3] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(nums):\n    for i in range(len(nums)-1):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n  if n <= 1:\n    return 1\n  else:\n    return n * factorial(n-1)\n\nprint(factorial(5)) # 120 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCalculate the sum of series 1 + 1/3 + 1/5 + ...\n\"\"\"\n\ndef sum_series(n):\n    result = 0 \n    for i in range(1, n+1):\n        result += (1 / (2 * i - 1))\n    return result\n \nif __name__ == '__main__':\n    n = 5\n    print(sum_series(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [1, 2, 3, 4, 5]\n\n# Function to find the length of a given list\ndef find_length(my_list):\n  # Variable to store the length of the list\n  length = 0\n  \n  # Loop through the list and increment length by 1 for every element in the list\n  for element in my_list:\n    length += 1\n  \n  # return the length of the list\n  return length\n\n# Call the function \nprint(\"Length of the list is:\", find_length(my_list)) # 5 but is not the same. just give one example and only return the code."}
