{"prompt": "make some code that functions the same as the following code: def selection_sort(arr): \n    n = len(arr) \n  \n    # One by one move boundary of unsorted subarray \n    for i in range(n): \n        # Find the minimum element in unsorted array \n        min_index = i \n        for j in range(i+1, n): \n            if arr[min_index] > arr[j]: \n                min_index = j \n  \n        # Swap the found minimum element with the first element         \n        arr[i], arr[min_index] = arr[min_index], arr[i] \n  \n    return arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Counter:\n def __init__(self):\n  self.count = 0\n \n def increment(self):\n  self.count += 1\n \n def get_count(self):\n  return self.count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_permutation(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    \n    c1 = [0] * 256\n    c2 = [0] * 256\n\n    for i in range(len(s1)):\n        c1[ord(s1[i])] += 1\n        c2[ord(s2[i])] += 1\n\n    if c1 == c2:\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Candies:\n    def __init__(self, candies):\n        self.candies = candies\n    \n    def add_candy(self, name, quantity):\n        self.candies[name] = quantity \n    \n    def remove_candy(self, name):\n        del self.candies[name]\n        \n    def get_list_candy(self):\n        return list(self.candies.keys())\n\ncandies = Candies({\"sourpatchkids\": 10, \"snickers\": 5})\ncandies.add_candy(\"mars\", 7)\ncandies.remove_candy(\"snickers\")\ncandy_list = candies.get_list_candy() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list[2] # returns \"Cherry\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Item():\n    def __init__(self, name, price, quantity):\n        self.name = name\n        self.price = price\n        self.quantity = quantity\n\n    def update_item(self, quantity):\n        self.quantity += quantity\n        \n    def get_item_price(self):\n        return self.price * self.quantity\n\nclass VendingMachine():\n    def __init__(self, items):\n        self.items = items\n\n    def calculate_total_price(self, items):\n        total_price = 0\n        for item in items:\n            total_price += item.get_item_price()\n        return total_price\n\n# Create your items\ncoke = Item('Coke', 1.00, 1)\nchips = Item('Chips', 0.75, 1)\n\n# Create your Vending machine \nvending_machine = VendingMachine([coke, chips])\n\n# Calculate total price\nprice = vending_machine.calculate_total_price([coke, chips])\n\nprint(price) \n\nOutput:\n1.75 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(inp):\n    rev_inp = inp[::-1]\n    if inp == rev_inp:\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for value in list_of_values:\n    print(value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_tuple(tuples):\n    # sort by 2nd item of the tuple\n    tuples.sort(key=lambda x: x[1])\n    return tuples\n\n# Test\ntuples = [(\"b\", 0), (\"a\", 1), (\"c\", -1)]\nsorted_tuples = sort_tuple(tuples)\nprint(sorted_tuples) # [(\"c\", -1), (\"b\", 0), (\"a\", 1)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(array, target):\n # Iterate over array\n for i in range(len(array)):\n # Check if current index equals target\n if array[i] == target:\n return i\n\nreturn -1\n\n# Test\narray = [1, 5, 10, 15, 20]\ntarget = 15\n\nindex = search(array, target)\n\nif index >= 0:\n print(f\"Target found at index {index}\")\nelse:\n print(\"Target not found\")\n\n# Output: Target found at index 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\nfrom datetime import datetime\n\ndef get_latest_articles(url):\n    r = requests.get(url)\n    html = r.text\n    soup = BeautifulSoup(html, \"html.parser\")\n    articles = soup.find_all('article')\n    latest_articles = []\n    for article in articles:\n        pub_date = article.find('time')['datetime']\n        if (datetime.now() - datetime.fromisoformat(pub_date)).total_seconds() < 1814400:\n            latest_articles.append(article.text)\n    return latest_articles[: 10] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import Python libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score \n\n# Load data\ndata = pd.read_csv('data.csv')\n\n# Preprocess data\nX = data[['Height','Weight','Length']].values\ny = data['Label'].values\n\n# Encode labels\nencoder = LabelEncoder()\ny_encoded = encoder.fit_transform(y)\n\n# Split data\nX_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2)\n\n# Train classifier\nclf = SVC()\nclf.fit(X_train, y_train)\n\n# Make predictions \ny_pred = clf.predict(X_test)\n\n# Evaluate accuracy\naccuracy = accuracy_score(y_test, y_pred)\n\nprint('Classification accuracy: ', accuracy * 100, '%') but is not the same. just give one example and only return the code."}
