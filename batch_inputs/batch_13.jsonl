{"prompt": "make some code that functions the same as the following code: def sort_words(words):\n  return sorted(words)\n\nwords = [\"dog\", \"cat\", \"apple\", \"banana\"]\n\nsorted_words = sort_words(words)\n\nprint(sorted_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: max_length = 0\n\nfor string in list_of_strings:\n    max_length = max(max_length, len(string))\n\nprint(max_length) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \nimport os\nimport json\nfrom dateutil.parser import parse\n\nimport plotly\nfrom plotly.graph_objs import Histogram, Scatter, Scatter3d, Data, Layout, XAxis, YAxis, ZAxis, Figure\n\n\n__version__ = '0.0.1'\n\n\ndef is_numeric(x):\n    \n    try:\n        float(x)\n        return True\n    except ValueError:\n        return False\n\n\ndef is_date(d):\n    \n    try:\n        parse(d)\n        return True\n    except ValueError, AttributeError:\n        return False\n\n\ndef is_string(x):\n    return is_numeric(x) + is_date(x) == 0\n\n\ndef format_data(data):\n    \n    data = json.loads(''.join(data))\n    \n    keys = data[0].keys()\n    \n    # Check column type\n    sidx = [ idx for idx, key in enumerate(keys) if is_string(data[0][key]) ]\n    \n    values = [ [ d.get(key) for key in keys ] for d in data ]\n    values = zip(*values)\n    \n    if len(sidx) == 1:\n        text = values.pop(sidx[0])\n        keys.pop(sidx[0])\n    else:\n        text = None\n    \n    return {\n        'layout': {\n            'axes': keys\n        },\n        'data': {\n            'values': values,\n            'text': text\n        }\n    }\n\n\ndef get_histogram(data):\n    \n    values = data['values']\n    return Data([\n        Histogram(\n            x=values\n        )\n    ])\n\n\ndef get_scatter2d(data):\n    \n    values = data['values']\n    return Data([\n        Scatter(\n            x=values[0],\n            y=values[1],\n            mode='markers',\n            text=data['text']\n        )\n    ])\n\n\ndef get_scatter3d(data):\n    \n    values = data['values']\n    return Data([\n        Scatter3d(\n            x=values[0],\n            y=values[1],\n            z=values[2]\n        )\n    ])\n\n\ndef post(filename, data, fileopt='new', title=None, world_readable=True):\n    \n    # Get username and api key\n    username = os.environ.get('PLOTLY_USERNAME')\n    api_key = os.environ.get('PLOTLY_API_KEY')\n    \n    plotly.tools.set_credentials_file(username=username, api_key=api_key)\n    \n    axes = data['layout']['axes']\n    \n    nAxes = len(axes)\n    \n    get_data = {\n        1: get_histogram,\n        2: get_scatter2d,\n        3: get_scatter3d\n    }\n    \n    axes_kwargs = ['xaxis', 'yaxis', 'zaxis']\n    axes_obj = [XAxis, YAxis, ZAxis]\n    \n    layout_kwargs = { axes_kwargs[idx]: axes_obj[idx](title=axis) for idx, axis in enumerate(axes) }\n    dataobj = get_data[nAxes](data['data'])\n    layout = Layout(**layout_kwargs)\n    \n    fig = Figure(data=dataobj, layout=layout)\n    \n    r = plotly.plotly.plot(fig, filename=filename)\n    print r\n     but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\ntext = \"The cat jumped over the fence\"\npattern = \"cat\"\nmatch = re.search(pattern, text)\nif match:\n    print(\"Pattern found!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Valid Python statement. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Python is a great language for text classification tasks and there are several libraries that could be used, including scikit-learn and NLTK. Additionally, pytorch provides a number of utilities for text classification. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys \n\ndef progress_bar(iteration, total, length=50, fill='\u2588'):\n    iteration = iteration + 1\n    percent = (\"{0:.1f}\").format(100 * (iteration / float(total)))\n    filledLength = int(length * iteration // total)\n    bar = fill * filledLength + '-' * (length - filledLength)\n    sys.stdout.write('\\r |{}| {}% {}'.format(bar,percent, \"Complete\"))\n    sys.stdout.flush() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\n# Connect to the database\ncon = sqlite3.connect('customer_requests.db')\ncursor = con.cursor()\n\n# Create the customer table\ncursor.execute(\"CREATE TABLE IF NOT EXISTS customer_requests(request_id INTEGER PRIMARY KEY, request TEXT NOT NULL)\")\n\n# Create and run the chatbot\ndef chatbot():\n    print(\"Welcome to the chatbot! Enter 'exit' to quit.\\n\")\n    while True:\n        response = input(\"You: \")\n        if response == 'exit':\n            break\n        else:\n            print(\"Chatbot: Your request has been recorded.\\n\")\n            # Store the request in the database\n            con.execute(f\"INSERT INTO customer_requests(request) VALUES ('{response}')\")\n            con.commit()\n\nchatbot() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_first_two(list):\n    return list[:2]\n\nlist = [1,2,3,4,5] \nprint(get_first_two(list)) # returns [1,2] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Generate a list of prime numbers between 2 and 30\n\n# Generate a list of all numbers between 2 and 30\nnumbers = range(2, 31)\n\n# Loop over all numbers\nfor num in numbers:\n    prime_flag = True\n    # Check if the number is divisible by any other between 2 and itself\n    for i in range(2, num):\n        if (num % i == 0):\n            prime_flag = False\n            break\n \n    # If the number is not divisible by any other number, it is prime\n    if prime_flag:\n        print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_number(number, from_base, to_base): \n    # convert number to base 10 \n    result = int(str(number), from_base) \n  \n    # convert base 10 to new base \n    res = \"\"\n    while result > 0:\n        res += str(result % to_base)\n        result //= to_base\n    res = res[::-1] \n  \n    return res but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def flatten_list(arr):\n  result = []\n  for element in arr:\n    if type(element) == list:\n      result += flatten_list(element)\n    else:\n      result.append(element)\n  return result\n\narr = [[1,2,[3]],4]\n\nprint(flatten_list(arr)) # [1, 2, 3, 4] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\n# list of cities for which we want the weather forecast\ncities = [\"New York\", \"London\", \"Beijing\", \"Los Angeles\", \"Berlin\", \"Tokyo\", \"Mumbai\", \"Moscow\"]\n\n# api key\napi_key = YOUR_API_KEY\n\n# base url for the weather api\nurl = \"http://api.openweathermap.org/data/2.5/weather?q={}&APPID=\" + api_key\n\n# create an empty list to store weather data\nweather_data = []\n\n# loop through the cities and get the weather data\nfor city in cities:\n\t# make a request to the api\n\tr = requests.get(url.format(city)).json()\n\t# store the weather data in the list\n\tweather_data.append(r)\n\n# print the weather data\nprint(weather_data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def index_of(number, lst): \n    hi = len(lst) \n    lo = 0\n    index = -1\n\n    while hi > lo: \n        mid = (hi + lo)//2\n        if lst[mid] < number: \n            lo = mid + 1\n        elif lst[mid] > number: \n            hi = mid \n        else: \n            index = mid \n            return index \n    return index but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Book:\n    # Attributes\n    title = \"\"\n    author = \"\"\n    pages = 0\n\n    # Constructor\n    def __init__(self, title, author, pages):\n        self.title = title\n        self.author = author\n        self.pages = pages\n\n# Create a book object\nbook = Book(\"The Catcher in the Rye\", \"JD Salinger\", 277) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom tensorflow.keras.callbacks import TensorBoard\n\n# Load the MNIST dataset\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n\n# Reshape and normalize the data\nx_train = x_train.reshape((x_train.shape[0], 28, 28, 1))\nx_test = x_test.reshape((x_test.shape[0], 28, 28, 1))\nx_train, x_test = x_train / 255.0, x_test / 255.0\n\n# Build the model\nmodel = tf.keras.Sequential([\n tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n tf.keras.layers.MaxPooling2D(),\n tf.keras.layers.Flatten(),\n tf.keras.layers.Dense(128, activation='relu'),\n tf.keras.layers.Dense(10, activation='softmax')\n])\n\n# Compile and train the model\nmodel.compile(\n optimizer='adam', \n loss='sparse_categorical_crossentropy',\n metrics=['accuracy']\n)\n\nmodel.fit(x_train, y_train, epochs=5, callbacks=[TensorBoard('logs')])\n\n# Evaluate the model\nmodel.evaluate(x_test, y_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\np = Person(\"John\", 18)\nprint(p.name, p.age) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python \nclass Node: \n  def __init__(self, data): \n    self.data = data \n    self.children = [] \n  \ndef buildTree(relationships): \n  tree = {} \n  for parent, child in relationships: \n    if parent not in tree: \n      tree[parent] = Node(parent) \n    parent_node = tree[parent] \n    if child not in tree: \n      tree[child] = Node(child) \n    child_node = tree[child] \n    parent_node.children.append(child_node) \n  return tree[1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def tic_tac_toe():\n    game_board = [[0,0,0],\n                  [0,0,0],\n                  [0,0,0]]\n    player_1 = True\n    while not game_over():\n        move = get_ai_move()\n        if player_1:\n            game_board[move[0]][move[1]] = 1\n            player_1 = False\n        else:\n            game_board[move[0]][move[1]] = -1\n            player_1 = True\n\ndef get_ai_move():\n    # Use AI algorithms to find the best move\n    best_move = 0\n    # Return the best move\n    return best_move\n\ndef game_over():\n    # Game is over if there's a winner or a tie\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\n# create database connection\nconn = sqlite3.connect('user_data.db')\nc = conn.cursor()\n\n# create database table\nc.execute('''CREATE TABLE users\n       (name TEXT, age INTEGER, city TEXT)''')\n\n# add user data\nc.execute(\"INSERT INTO users VALUES ('John', 24, 'New York')\")\nc.execute(\"INSERT INTO users VALUES ('Thomas', 28, 'Chicago')\")\nc.execute(\"INSERT INTO users VALUES ('Emily', 32, 'Los Angeles')\")\n\n# save and close database connection\nconn.commit()\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def primeFactors(n): \n      \n    factors = []\n    while n % 2 == 0: \n        factors.append(2) \n        n = n / 2\n  \n    for i in range(3, int(sqrt(n))+1, 2): \n          \n        while n % i== 0: \n            factors.append(i) \n            n = n / i \n          \n    if n > 2: \n        factors.append(n) \n  \n    return factors \n  \nn = 315\nprint(primeFactors(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def number_to_words(num):\n  units = [\"\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \n           \"eight\", \"nine\"]\n  teens = [\"\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \n           \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"]\n  tens = [\"\", \"ten\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \n          \"seventy\", \"eighty\", \"ninety\"]\n  hundreds = [\"\", \"onehundred\", \"twohundred\", \"threehundred\", \"fourhundred\",\n              \"fivehundred\", \"sixhundred\", \"sevenhundred\", \"eighthundred\",\n              \"ninehundred\"]\n\n  num_str = str(num)\n  result = \"\"\n\n  if num == 0:\n    result = \"zero\"\n\n  elif len(num_str) == 3:\n    result += hundreds[int(num_str[0])] + \" \"\n    if int(num_str[1:]) != 0:\n      result += number_to_words(int(num_str[1:]))\n\n  elif len(num_str) == 2:\n    if int(num_str[0]) == 1:\n      result += teens[int(num_str[1])]\n    else:\n      result += tens[int(num_str[0])] + \" \"\n      if int(num_str[1]) != 0:\n        result += units[int(num_str[1])]\n\n  elif len(num_str) == 1:\n    result += units[int(num_str[0])]\n\n  return result\n  \nprint(number_to_words(259)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndef convert_to_json(data):\n    \"\"\"Convert any data format into a JSON format.\"\"\"\n    try:\n        # check if data is string\n        if isinstance(data, str):\n            return json.loads(data)\n        # check if data is xml\n        elif data.tag == 'note':\n            return {\n                'to': data.find('to').text,\n                'from': data.find('from').text, \n                'heading': data.find('heading').text,\n                'body': data.find('body').text,\n            }\n    except Exception as e:\n        raise e but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_subset(input_set):\n    subsets = [[]]\n \n    for elem in input_set:\n        n = len(subsets)\n        for i in range(n):\n            current_subset = subsets[i]\n            subsets.append(current_subset + [elem])\n \n    return subsets but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci_n(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n\nn = 9\nprint(fibonacci_n(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to convert degrees Celsius to degrees Fahrenheit\ndef celsius_to_fahrenheit(celsius):\n return (celsius * 9/5) + 32\n\n# Input Celsius value\ncelsius = 32\n\n# Calculate Fahrenheit\nfahrenheit = celsius_to_fahrenheit(celsius)\nprint(f'{celsius} Celsius is {fahrenheit} Fahrenheit') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def greedy_solution(arr):\n    arr.sort()\n    cur_max = arr[0]\n    result = [cur_max]\n    for i in range(1, len(arr)):\n        if arr[i] > cur_max + 1:\n            cur_max = arr[i]\n            result.append(cur_max)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create a dictionary to store the count of each letter \nletter_counts = {}\n\n# Loop through each letter in the given sentence\nfor letter in 'The quick brown fox jumps over the lazy dog.':\n     # Check if the letter is present in the dictionary\n     if letter in letter_counts:\n         # Increment the count if the key is present\n         letter_counts[letter] += 1\n     else:\n         # Initialize the count if the key is not present\n         letter_counts[letter] = 1\n\n# Print the output in a nice format\nfor key,val in letter_counts.items():\n    print(key, '-', val) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_numbers_in_string(string):\n    numbers = [int(s) for s in string.split() if s.isdigit()]\n    print(numbers)\n\nstring_1 = \"The temperature is 24 degrees Celsius\"\nprint_numbers_in_string(string_1)\n\n# Output\n# [24] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers = [4, 7, 2, 3]\nnumbers.sort(reverse=True)\nprint(numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.cluster import KMeans\n\ndef k_means_clustering(data, num_clusters):\n    kmeans = KMeans(n_clusters=num_clusters, random_state=0).fit(data)\n    labels = kmeans.labels_\n    return labels but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import relevant modules\nimport requests\nimport json\n\n# Url for API\nURL = \"https://api.example.com/geocode\"\n\n# Create function to fetche location information\ndef get_location_info(lat, lon):\n    PARAMS = {'lat': lat, 'lon': lon}\n    response = requests.get(url=URL, params=PARAMS)\n    output = json.loads(response.text)\n    return output\n\n# Call the function\nlocation_info = get_location_info(lat, lon) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def capitalize(string):\n    words = string.split()\n    capitalized_words = [word.capitalize() for word in words]\n    return \" \".join(capitalized_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_elements_with_letter(arr,letter):\n   count = 0\n   for a in arr:\n      if letter in a:\n         count += 1 \n   \n   return count \n\ncount_elements_with_letter(['cat','dog','fish','apple'], 'a')\n# output: 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def extract_words_with_length_greater_equal_than(input_string, length):\n    words = input_string.split(' ')\n    \n    result = []\n    for word in words:\n        if len(word) >= length:\n            result.append(word)\n    \n    return result\n\nresult = extract_words_with_length_greater_equal_than(input_string, 4)       \nprint(result) # This should print ['This', 'sample', 'string'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndef str_to_json(json_string):\n    # convert the string to dictionary\n    json_dict = json.loads(json_string) \n    # convert the dictionary to json\n    json_data = json.dumps(json_dict) \n    # return json\n    return json_data but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import base64\nfrom Crypto.Cipher import AES\n\ndef encrypt(key, message):\n cipher = AES.new(key.encode(), AES.MODE_ECB)\n padded_msg = message.encode() + ((16 - len(message) % 16) * '{'.encode())\n encrypted = cipher.encrypt(padded_msg)\n encoded = base64.b64encode(encrypted)\n return encoded.decode()\n\nencrypt('mykey123', 'My secret message') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef random_matrix(n, m):\n    matrix = []\n    for i in range(n):\n        row = []\n        for j in range(m):\n            row.append(random.randint(1,100))\n        matrix.append(row)\n    return matrix\n\nres = random_matrix(3, 2)\nprint(res) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def min_and_max(array):\n    min_element = array[0]\n    max_element = array[0]\n    for element in array:\n        if element < min_element:\n            min_element = element\n        elif element > max_element:\n            max_element = element \n    return (min_element, max_element) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def define_category(num, criteria):\n    if num >= criteria[\"low\"][0] and num <= criteria[\"low\"][1]:\n        return \"low\"\n    elif num >= criteria[\"medium\"][0] and num <= criteria[\"medium\"][1]:\n        return \"medium\"\n    elif num >= criteria[\"high\"][0] and num <= criteria[\"high\"][1]:\n        return \"high\"\n    else:\n        return \"not found\"\n\nnum = 28 \ncriteria = {\n    \"low\": [0,15],\n    \"medium\": [16,30],\n    \"high\": [31,99]\n}\n\ncategory = define_category(num, criteria)\n\nprint(category) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_list(strings):\n    unique_strings = []\n    for string in strings:\n        if string not in unique_strings:\n            unique_strings.append(string)\n    return unique_strings\n\nstrings = [\"abc\", \"def\", \"abc\", \"ghi\", \"jkl\", \"mno\", \"abc\", \"pqr\"]\nfiltered_strings = filter_list(strings)\nprint(filtered_strings)\n\n# Output: ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: s = \"\"\nfor i in range(0, 10):\n    for x in range(0, 10):\n        s += str(i) + str(x) + ''.join([str(y) for y in range(0, 10)]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sentence_to_upper(sentence):\n    return sentence.upper()\n\nprint(sentence_to_upper(\"This is an example sentence.\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef coin_flip():\n\tif random.random() < 0.5:\n\t\treturn \"Heads\"\n\telse:\n\t\treturn \"Tails\"\n\nprint(coin_flip()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def array_to_char_count_dict(arr):\n    character_count = {}\n    for string in arr:\n        for char in string:\n            if char in character_count:\n                character_count[char] += 1\n            else:\n                character_count[char] = 1\n    return character_count\n\narr = [\"hello\", \"world\", \"the\"]\nprint(array_to_char_count_dict(arr))\n# Output: {'h': 1, 'e': 2, 'l': 3, 'o': 2, 'w': 1, 'r': 1, 'd': 1, 't': 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_fibonacci_seq(n):\n    a, b = 0, 1\n    while a < n:\n        print(a, end=' ')\n        a, b = b, a + b\n\nif __name__ == '__main__':\n    n = 100\n    print_fibonacci_seq(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python function to delete a node \n# in a Linked List. \nclass Node: \n    # Constructor to initialize the node object \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n\n# Function to delete node from Linked List \ndef deleteNode(head, position): \n    # If linked list is empty \n    if head == None: \n        return \n\n    temp = head \n \n    # If head needs to be removed \n    if position == 0: \n        head = temp.next\n        temp = None\n        return head \n\n    # Find previous node of the node to be deleted \n    for i in range(position -1 ): \n        temp = temp.next\n        if temp is None: \n            break\n \n    # If position is more than number of nodes \n    if temp is None: \n        return \n \n    if temp.next is None: \n        return \n\n    # Node temp.next is the node to be deleted \n    # store pointer to the next of node to be deleted \n    next = temp.next.next\n\n    # Unlink the node from linked list \n    temp.next = None\n \n    temp.next = next \n\n    return head but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def simplify(numerator, denominator):\n    \n    # find the gcd (greatest common divisor)\n    gcd = gcd(numerator, denominator)\n\n    # divide both numerator and denominator by the gcd\n    simplified_numerator = int(numerator/gcd)\n    simplified_denominator = int(denominator/gcd)\n\n    return simplified_numerator, simplified_denominator but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def same_case(string1, string2): \n\n    # Take the lengths of two strings into consideration \n    if len(string1) != len(string2): \n        return False\n        \n    # Compare character by character \n    # If any one of the characters are not of same case \n    # return false \n    for x, y in zip(string1, string2): \n        if x.islower() != y.islower(): \n            return False\n\n    # If execution reaches this point \n    # it means that all characters of both strings \n    # are having same case \n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(lst):\n    for i in range(len(lst)-1,0,-1):\n        for j in range(i):\n            if lst[j] > lst[j+1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n    return lst but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_duplicate(arr):\n    return len(arr) != len(set(arr))\n\nis_duplicate(arr) # returns True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(lst): \n    final_list = [] \n    for num in lst: \n        if num not in final_list: \n            final_list.append(num) \n    return final_list \n    \nlst = [1, 1, 2, 3, 4, 4, 5] \nprint(remove_duplicates(lst)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter as tk\n\n# Create window\nroot = tk.Tk()\n\n# Create two buttons\nstop_button = tk.Button(root, text=\"Stop Program\", command=stop_program)\nstart_button = tk.Button(root, text=\"Start Program\", command=start_program)\n\n# Place two buttons in the window\nstop_button.pack()\nstart_button.pack()\n\n# Display window\nroot.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: names.sort()\nprint(names) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def to_dict(lst): \n    # Initialize a new dictionary \n    new_dict = {}\n      \n    # Iterate over the list and assign the square root of each element as value  \n    for item in lst:\n        new_dict[item] = item**0.5\n      \n    # Return the dictionary  \n    return new_dict but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\t\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import git\n\n# Clone a remote Git repository\nrepo = git.Repo.clone_from(\"https://github.com/username/repo.git\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n if n == 0:\n   return 1\n else:\n   return n * factorial(n-1)\n\nnum = int(input(\"Enter a number: \"))\n\nfactorial = factorial(num)\n\nprint(\"The factorial of\",num,\"is\",factorial) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\n# Generate 8 random characters, including special characters and numbers\nsize = 8\npassword = ''.join(random.choices(string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation, k=size))\n\nprint(password) # Output: eu$y6c17 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = \"hello world\"\nwords = words.split()\n\nnew_words = [word.capitalize() for word in words]\nmodified_string = \" \".join(new_words)\n\nprint(modified_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_common_substring(s1, s2):\n    \"\"\"\n    This function takes two strings and returns the longest substring\n    that is common to both strings.\n    :param s1: string\n    :param s2: string\n    :return: longest common substring\n    \"\"\"\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_prime_numbers():\n for num in range(0, 101):\n if num > 1:\n for i in range(2, num):\n if (num % i) == 0:\n break\n else:\n print(num)\n\nprint_prime_numbers() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def unique_words_freq(string): \n words = string.split() \n words_freq = {}\n for word in words: \n if word not in words_freq.keys(): \n words_freq[word] = 1 \n else: \n words_freq[word] += 1 \n \n return words_freq\n\nresult = unique_words_freq(\"Hello world, hello world\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Maze Class \nclass Maze: \n  \n    # Maze constructor \n    def __init__(self): \n        self.n = 5\n        self.maze = [[ 1, 0, 0, 0, 1 ], \n                     [ 1, 1, 1, 0, 1 ], \n                     [ 0, 0, 0, 0, 0 ], \n                     [ 0, 1, 1, 1, 1 ], \n                     [ 0, 1, 0, 0, 1 ]] \n   \n    # function to print the maze \n    def printMaze(self): \n        for i in range(self.n): \n            for j in range(self.n): \n                print(self.maze[i][j], end =\" \") \n            print () \n   \n    # function to check if maze is solved or not \n    def isSolved(self, x, y): \n        if x == self.n - 1 and y == self.n - 1: \n            return True\n        return False\n\n# Driver Function \nif __name__ == \"__main__\": \n    mazeObj = Maze() \n    mazeObj.printMaze() \n    print(\"Is the maze solved? :\", \n          mazeObj.isSolved(0, 0)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binarySearch2D(arr, key):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid][0] == key:\n            return True\n        elif arr[mid][0] > key:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return False\n\narr = [[1, 5, 8], [2, 15, 20], [3, 25, 30], [11, 13, 16]]\nkey = 3\n\nif binarySearch2D(arr, key):\n    print(True) \nelse :\n    print(False) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nimport re\n\ndef summarize_text(text):\n \"\"\"\n A basic text summarizer that takes a text input and returns a summary of the text in two sentences.\n \"\"\"\n\n # Tokenize the text\n tokens = nltk.sent_tokenize(text)\n # Get the frequency of each word\n word_frequencies = {}\n for word in nltk.word_tokenize(text):\n if word not in word_frequencies.keys():\n word_frequencies[word] = 1\n else:\n word_frequencies[word] += 1\n\n # Get the maximum frequency\n maximum_frequency = max(word_frequencies.values())\n\n # Compute the weight of each word\n for word in word_frequencies.keys():\n word_frequencies[word] = (word_frequencies[word]/maximum_frequency)\n\n # Generate the summary\n sentence_scores = {}\n for sent in tokens:\n for word in nltk.word_tokenize(sent.lower()):\n if word in word_frequencies.keys():\n if len(sent.split(' ')) < 30:\n if sent not in sentence_scores.keys():\n sentence_scores[sent] = word_frequencies[word]\n else:\n sentence_scores[sent] += word_frequencies[word]\n\n # Get the two highest-scoring sentences\n summary_sentences = heapq.nlargest(2, sentence_scores, key=sentence_scores.get) \n\n # Construct the summary\n summary = ' '.join(summary_sentences)\n return summary but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \n\n# api-endpoint \nURL = \"https://www.example.com/page1\"\n  \n# sending get request and saving the response as response object \nr = requests.get(url = URL) \n  \n# extracting data in json format \ndata = r.json() \n  \n# extracting relevant data \nstatus = data['status'] \nsub_title = data['sub_title'] \nmax_clients = data['max_clients'] \n\n# printing extracted data  \nprint(\"Status:\", status) \nprint(\"Sub Title:\", sub_title)\nprint(\"Max Clients:\", max_clients) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_duplicates(arr):\n    duplicates = []\n    seen = set()\n    for i in arr:\n        if i not in seen:\n            seen.add(i)\n        else:\n            duplicates.append(i)\n    return duplicates but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort(array):\n    for i in range(len(array)):\n        low = i\n        for j in range(i+1, len(array)):\n            if array[low] > array[j]:\n                low = j\n        array[i], array[low] = array[low], array[i]\n    return array\n \nexample = [25, 6, 7, 3, 12, 89, 74, 55]\nsorted_array = sort(example)\nprint(sorted_array) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n \nurl = 'http://example.com'\n \nr = requests.get(url)\nhtml = r.text\n \nwith open('page.html', 'w') as f:\n f.write(html) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def largest_prime_in_range(start, end):\n    largest_prime = 0\n    # Iterate over the range\n    for i in range(start, end + 1):\n        # Check if number is prime\n        is_prime = True\n        if i > 1:\n            for j in range(2, ceil(sqrt(i))+ 1):\n                if i % j == 0:\n                    is_prime = False\n                    break\n        # Check if number is the largest prime\n        if is_prime and i > largest_prime:\n            largest_prime = i\n\n    return largest_prime\n\nif __name__ == '__main__':\n    output = largest_prime_in_range(3, 22)\n    print(output) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_two(x, y):\n  result = 0\n  for i in range(x, y+1):\n    result += i\n  return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers = [x for x in range(1, 11)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Circle:\n    def __init__(self, center, radius):\n        self.center = center\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * self.radius * self.radius\n\n    def circumference(self):\n        return 2 * 3.14 * self.radius\n\ncircle = Circle((1, 2), 5)\nprint(f\"Area of the circle: {circle.area()}\")\nprint(f\"Circumference of the circle: {circle.circumference()}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: max_val = arr[0]\nfor num in arr:\n    if num > max_val:\n        max_val = num\nprint(max_val) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_subpolygon_sum(N, points):\n  maximum_sum = 0\n  for i in range(N):\n    for j in range(i+1, N):\n      for k in range(j+1, N):\n        for l in range(k+1, N):\n          current_sum = points[i][0] + points[j][1] + points[k][0] + points[l][1]\n          maximum_sum = max(maximum_sum, current_sum)\n  return maximum_sum\n\nmax_sum = max_subpolygon_sum(N, points)\nprint(f'The maximum sum of any subpolygon within the given array of points is {max_sum}.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def evaluate_string(string):\n if string == 'The sky is blue':\n  return True\n else:\n  return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef random_number():\n    return random.randint(1, 1000)\n\nprint(random_number()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\ndef extract_domain_name(url):\n    regex = r\"://([^/]+)/?\"\n    match = re.search(regex, url)\n \n    if match:\n        return match.group(1)\n\nurl = \"http://www.google.com\"\ndomain_name = extract_domain_name(url)\nprint(domain_name)\n \n# Output: \n# google.com but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sumArray(arr):\n  sum = 0\n  for i in range(len(arr)):\n    for j in range(len(arr[i])):\n      sum += arr[i][j]\n      \n  return sum\n\nsumArray([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) # returns 45 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_fibonacci(length):\n    a = 0 \n    b = 1\n\n    while length > 0:\n        print(a)\n        temp = a \n        a = b \n        b = temp + b \n        length = length - 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(list):\n   for i in range(len(list)-1):          # loop over index i from 0 to n-2\n       small = i                         # set minimum index to i\n       for j in range(i + 1, len(list)): # loop over index j from i+1 to n-1\n           if list[j] < list[small]:      # compare list[j] with list[small]\n               small = j                  # update minimum index\n       list[i], list[small] = list[small], list[i]  # swap list[i] and list[small]\n   return list\n\n\n# Main program\nlist = [ 3, 8, 4, 6, 2, 9, 7]\nprint (\"Original list:\", list)\nsort_list(list)\nprint (\"Sorted list:\", list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python2\n# Copyright (c) 2015 The Deuscoin Core developers\n# Distributed under the MIT/X11 software license, see the accompanying\n# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n#\n\nfrom test_framework.test_framework import ComparisonTestFramework\nfrom test_framework.util import *\nfrom test_framework.mininode import CTransaction, NetworkThread\nfrom test_framework.blocktools import create_coinbase, create_block\nfrom test_framework.comptool import TestInstance, TestManager\nfrom test_framework.script import CScript, OP_1NEGATE, OP_NOP3, OP_DROP\nfrom binascii import hexlify, unhexlify\nimport cStringIO\nimport time\nimport itertools\n\n'''\nThis test is meant to exercise BIP forks\nConnect to a single node.\nregtest lock-in with 108/144 block signalling\nactivation after a further 144 blocks\nmine 2 block and save coinbases for later use\nmine 141 blocks to transition from DEFINED to STARTED\nmine 100 blocks signalling readiness and 44 not in order to fail to change state this period\nmine 108 blocks signalling readiness and 36 blocks not signalling readiness (STARTED->LOCKED_IN)\nmine a further 143 blocks (LOCKED_IN)\ntest that enforcement has not triggered (which triggers ACTIVE)\ntest that enforcement has triggered\n'''\n\n\n\nclass BIP9SoftForksTest(ComparisonTestFramework):\n\n    def __init__(self):\n        self.num_nodes = 1\n\n    def setup_network(self):\n        self.nodes = start_nodes(1, self.options.tmpdir,\n                                 extra_args=[['-debug', '-whitelist=127.0.0.1']],\n                                 binary=[self.options.testbinary])\n\n    def run_test(self):\n        self.test = TestManager(self, self.options.tmpdir)\n        self.test.add_all_connections(self.nodes)\n        NetworkThread().start() # Start up network handling in another thread\n        self.test.run()\n\n    def create_transaction(self, node, coinbase, to_address, amount):\n        from_txid = node.getblock(coinbase)['tx'][0]\n        inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n        outputs = { to_address : amount }\n        rawtx = node.createrawtransaction(inputs, outputs)\n        tx = CTransaction()\n        f = cStringIO.StringIO(unhexlify(rawtx))\n        tx.deserialize(f)\n        tx.nVersion = 2\n        return tx\n\n    def sign_transaction(self, node, tx):\n        signresult = node.signrawtransaction(hexlify(tx.serialize()))\n        tx = CTransaction()\n        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n        tx.deserialize(f)\n        return tx\n\n    def generate_blocks(self, number, version, test_blocks = []):\n        for i in xrange(number):\n            block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n            block.nVersion = version\n            block.rehash()\n            block.solve()\n            test_blocks.append([block, True])\n            self.last_block_time += 1\n            self.tip = block.sha256\n            self.height += 1\n        return test_blocks\n\n    def get_bip9_status(self, key):\n        info = self.nodes[0].getblockchaininfo()\n        for row in info['bip9_softforks']:\n            if row['id'] == key:\n                return row\n        raise IndexError ('key:\"%s\" not found' % key)\n\n\n    def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignature):\n        # generate some coins for later\n        self.coinbase_blocks = self.nodes[0].generate(2)\n        self.height = 3  # height of the next block to build\n        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n        self.nodeaddress = self.nodes[0].getnewaddress()\n        self.last_block_time = int(time.time())\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'defined')\n\n        # Test 1\n        # Advance from DEFINED to STARTED\n        test_blocks = self.generate_blocks(141, 4)\n        yield TestInstance(test_blocks, sync_every_block=False)\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n\n        # Test 2\n        # Fail to achieve LOCKED_IN 100 out of 144 signal bit 1\n        # using a variety of bits to simulate multiple parallel softforks\n        test_blocks = self.generate_blocks(50, activated_version) # 0x20000001 (signalling ready)\n        test_blocks = self.generate_blocks(20, 4, test_blocks) # 0x00000004 (signalling not)\n        test_blocks = self.generate_blocks(50, activated_version, test_blocks) # 0x20000101 (signalling ready)\n        test_blocks = self.generate_blocks(24, 4, test_blocks) # 0x20010000 (signalling not)\n        yield TestInstance(test_blocks, sync_every_block=False)\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n\n        # Test 3\n        # 108 out of 144 signal bit 1 to achieve LOCKED_IN\n        # using a variety of bits to simulate multiple parallel softforks\n        test_blocks = self.generate_blocks(58, activated_version) # 0x20000001 (signalling ready)\n        test_blocks = self.generate_blocks(26, 4, test_blocks) # 0x00000004 (signalling not)\n        test_blocks = self.generate_blocks(50, activated_version, test_blocks) # 0x20000101 (signalling ready)\n        test_blocks = self.generate_blocks(10, 4, test_blocks) # 0x20010000 (signalling not)\n        yield TestInstance(test_blocks, sync_every_block=False)\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n\n        # Test 4\n        # 143 more version 536870913 blocks (waiting period-1)\n        test_blocks = self.generate_blocks(143, 4)\n        yield TestInstance(test_blocks, sync_every_block=False)\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n\n        # Test 5\n        # Check that the new rule is enforced\n        spendtx = self.create_transaction(self.nodes[0],\n                self.coinbase_blocks[0], self.nodeaddress, 1.0)\n        invalidate(spendtx)\n        spendtx = self.sign_transaction(self.nodes[0], spendtx)\n        spendtx.rehash()\n        invalidatePostSignature(spendtx)\n        spendtx.rehash()\n        block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n        block.nVersion = activated_version\n        block.vtx.append(spendtx)\n        block.hashMerkleRoot = block.calc_merkle_root()\n        block.rehash()\n        block.solve()\n\n        self.last_block_time += 1\n        self.tip = block.sha256\n        self.height += 1\n        yield TestInstance([[block, True]])\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'active')\n\n        # Test 6\n        # Check that the new sequence lock rules are enforced\n        spendtx = self.create_transaction(self.nodes[0],\n                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n        invalidate(spendtx)\n        spendtx = self.sign_transaction(self.nodes[0], spendtx)\n        spendtx.rehash()\n        invalidatePostSignature(spendtx)\n        spendtx.rehash()\n\n        block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n        block.nVersion = 5\n        block.vtx.append(spendtx)\n        block.hashMerkleRoot = block.calc_merkle_root()\n        block.rehash()\n        block.solve()\n        self.last_block_time += 1\n        yield TestInstance([[block, False]])\n\n        # Restart all\n        stop_nodes(self.nodes)\n        wait_deuscoinds()\n        shutil.rmtree(self.options.tmpdir)\n        self.setup_chain()\n        self.setup_network()\n        self.test.clear_all_connections()\n        self.test.add_all_connections(self.nodes)\n        NetworkThread().start() # Start up network handling in another thread\n\n\n\n    def get_tests(self):\n        for test in itertools.chain(\n                self.test_BIP('csv', 536870913, self.sequence_lock_invalidate, self.donothing),\n                self.test_BIP('csv', 536870913, self.mtp_invalidate, self.donothing),\n                self.test_BIP('csv', 536870913, self.donothing, self.csv_invalidate)\n        ):\n            yield test\n\n    def donothing(self, tx):\n        return\n\n    def csv_invalidate(self, tx):\n        '''Modify the signature in vin 0 of the tx to fail CSV\n        Prepends -1 CSV DROP in the scriptSig itself.\n        '''\n        tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_NOP3, OP_DROP] +\n                                      list(CScript(tx.vin[0].scriptSig)))\n\n    def sequence_lock_invalidate(self, tx):\n        '''Modify the nSequence to make it fails once sequence lock rule is activated (high timespan)\n        '''\n        tx.vin[0].nSequence = 0x00FFFFFF\n        tx.nLockTime = 0\n\n    def mtp_invalidate(self, tx):\n        '''Modify the nLockTime to make it fails once MTP rule is activated\n        '''\n        # Disable Sequence lock, Activate nLockTime\n        tx.vin[0].nSequence = 0x90FFFFFF\n        tx.nLockTime = self.last_block_time\n\nif __name__ == '__main__':\n    BIP9SoftForksTest().main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_min_max(arr):\n    min, max = arr[0], arr[0]\n    for item in arr:\n        if item < min:\n            min = item\n        if item > max:\n            max = item\n    return min, max\n\n# test\narr = [3, 7, 1, 12, 5]\nmin, max = find_min_max(arr)\nprint(f'min: {min}, max: {max}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MedianCalculator:\n    def __init__(self, arr_size):\n        self.arr_size = arr_size\n        self.arr = []\n    \n    def calculate_median(self):\n        if self.arr_size == 0:\n            return 0\n        elif self.arr_size == 1:\n            return self.arr[0]\n        else:\n            self.arr.sort()\n            if self.arr_size % 2 == 0:\n                mid1 = self.arr_size // 2 - 1\n                mid2 = self.arr_size // 2\n                return (self.arr[mid1] + self.arr[mid2]) / 2\n            else:\n                return self.arr[self.arr_size // 2] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\nhtml_str = \"\"\"\n<html>\n<head>\n  <title>Page title</title>\n</head>\n<body>\n  <p>For more information email us at info@example.com.</p>\n  <p>You can also contact john@example.com.</p>\n</body>\n</html>\"\"\"\n\nemails = re.findall(r'\\S+@\\S+', html_str)\nprint(emails)\n\n# Output: ['info@example.com', 'john@example.com'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -*- coding: utf-8 -*-\n\n\nimport tempfile\n\nfrom dp_tornado.engine.helper import Helper as dpHelper\n\n\nclass ImageHelper(dpHelper):\n    def compare(self, i1, i2, error=0):\n        i1 = self.load(i1)\n        i2 = self.load(i2)\n\n        if not i1 or not i2:\n            return None\n\n        s1 = i1.size\n        s2 = i2.size\n\n        if s1[0] != s2[0] or s2[1] != s2[1]:\n            print('size ne,', s1, s2)\n            return False\n\n        i1 = i1.load()\n        i2 = i2.load()\n\n        for i in range(s1[0]):\n            for j in range(s1[1]):\n                if i1[i, j] != i2[i, j]:\n                    if error:\n                        for k in range(len(i1[i, j])):\n                            if abs(i1[i, j][k] - i2[i, j][k]) > error:\n                                print('pixel ne,', i1[i, j], i2[i, j], abs(i1[i, j][k] - i2[i, j][k]), error)\n                                return False\n                    else:\n                        return False\n\n        return True\n\n    def _driver(self, options=None, **kwargs):\n        if not options and kwargs:\n            options = kwargs\n\n        if options and 'driver' in options and options['driver'] == 'wand':\n            return self.helper.io.image.driver.wand\n\n        return self.helper.io.image.driver.pillow\n\n    def load(self, src, options=None, **kwargs):\n        if not options and kwargs:\n            options = kwargs\n\n        tmp = None\n        drivers = []\n\n        pillow_image = self.helper.io.image.driver.pillow.Image\n        wand_image = self.helper.io.image.driver.wand.Image\n\n        if pillow_image:\n            drivers.append(pillow_image)\n\n        if wand_image:\n            drivers.append(wand_image)\n\n        try:\n            if isinstance(src, tuple(drivers)):\n                return src\n\n            elif self.helper.web.url.validate(src):\n                code, res = self.helper.web.http.get.raw(src)\n\n                if code != 200:\n                    raise Exception('The specified image url is invalid.')\n\n                tmp = tempfile.NamedTemporaryFile(delete=False)\n                tmp.write(res)\n                tmp.close()\n\n                tmp = tmp.name\n\n            else:\n                tmp = None\n\n            if not tmp and not src:\n                raise Exception('The specified image is invalid.')\n\n            img = self._driver(options=options).load(tmp if tmp else src)\n\n            if not img:\n                raise Exception('The specified image is invalid.')\n\n            return img\n\n        except Exception as e:\n            self.logging.exception(e)\n\n            return False\n\n        finally:\n            if tmp:\n                self.helper.io.file.remove(tmp)\n\n    def execute(self, src, fn, options=None, **kwargs):\n        if not options and kwargs:\n            options = kwargs\n\n        img = self.load(src, options=options)\n\n        if not img:\n            return False\n\n        try:\n            return fn(img, options)\n\n        except Exception as e:\n            self.logging.exception(e)\n\n            return False\n\n    def size(self, src, options=None, **o_kwargs):\n        if not options and o_kwargs:\n            options = o_kwargs\n\n        def fn(img, kwargs):\n            if not img:\n                return -1, -1\n\n            return img.width, img.height\n\n        return self.execute(src, fn, options=options)\n\n    def crop(self, src, options=None, **o_kwargs):\n        if not options and o_kwargs:\n            options = o_kwargs\n\n        def fn(img, kwargs):\n            crop = kwargs['crop'] if 'crop' in kwargs else None\n\n            if not crop:\n                return img\n\n            e_top = 0\n            e_left = 0\n            e_right = 0\n            e_bottom = 0\n\n            if self.helper.misc.type.check.string(crop):\n                crop = crop.split(',')\n                crop = [int(e.strip()) for e in crop]\n\n            if self.helper.misc.type.check.numeric(crop):\n                e_top = e_left = e_right = e_bottom = crop\n\n            elif isinstance(crop, (tuple, list)):\n                if len(crop) == 1:\n                    e_top = e_left = e_right = e_bottom = crop[0]\n\n                elif len(crop) == 2:\n                    e_top = e_bottom = crop[0]\n                    e_left = e_right = crop[1]\n\n                elif len(crop) == 4:\n                    e_top = crop[0]\n                    e_right = crop[1]\n                    e_bottom = crop[2]\n                    e_left = crop[3]\n\n            img = self._driver(options=kwargs).crop(img, e_left, e_top, img.size[0] - e_right, img.size[1] - e_bottom)\n\n            return img\n\n        return self.execute(src, fn, options=options)\n\n    def border(self, src, options=None, **o_kwargs):\n        if not options and o_kwargs:\n            options = o_kwargs\n\n        def fn(img, kwargs):\n            border = int(kwargs['border']) if 'border' in kwargs else 0\n            border_color = kwargs['border_color'] if 'border_color' in kwargs else '#000000'\n\n            if not border:\n                return img\n\n            if '_org' in kwargs and 'radius' in kwargs and kwargs['radius']:\n                return img\n\n            img = self._driver(options=kwargs).border(img, border, border_color)\n\n            return img\n\n        return self.execute(src, fn, options=options)\n\n    def radius(self, src, options=None, **o_kwargs):\n        if not options and o_kwargs:\n            options = o_kwargs\n\n        def fn(img, kwargs):\n            radius = int(kwargs['radius'] or 0) if 'radius' in kwargs else None\n            border = int(kwargs['border']) if 'border' in kwargs else 0\n            border_color = kwargs['border_color'] if 'border_color' in kwargs else '#000000'\n\n            if not radius:\n                return img\n            elif '__radius_processed__' in img.__dict__:\n                return img\n\n            img = self._driver(options=kwargs).radius(img, radius, border, border_color)\n            img.__dict__['__radius_processed__'] = True\n\n            return img\n\n        return self.execute(src, fn, options=options)\n\n    def colorize(self, src, options=None, **o_kwargs):\n        if not options and o_kwargs:\n            options = o_kwargs\n\n        def fn(img, kwargs):\n            colorize = kwargs['colorize'] if 'colorize' in kwargs else None\n\n            if not colorize:\n                return img\n\n            img = self._driver(options=kwargs).colorize(img, colorize)\n\n            return img\n\n        return self.execute(src, fn, options=options)\n\n    def resize(self, src, options=None, **o_kwargs):\n        if not options and o_kwargs:\n            options = o_kwargs\n\n        def fn(img, kwargs):\n            size = kwargs['size'] if 'size' in kwargs else None\n            mode = kwargs['mode'] if 'mode' in kwargs else None\n            scale = int(kwargs['scale']) if 'scale' in kwargs else 1\n            limit = True if 'limit' in kwargs and kwargs['limit'] else False\n            border = int(kwargs['border']) if 'border' in kwargs else 0\n\n            if not size:\n                return img\n\n            width_new, height_new = size\n            width_origin, height_origin = img.size\n\n            if scale > 1:\n                if limit:\n                    scale_max_width = float(width_origin) / float(width_new)\n                    scale_max_height = float(height_origin) / float(height_new)\n\n                    scale_max = min(scale, scale_max_width, scale_max_height)\n                else:\n                    scale_max = scale\n\n                if scale_max > 1:\n                    width_new = int(width_new * scale_max)\n                    height_new = int(height_new * scale_max)\n\n            if not width_new:\n                width_new = width_origin * height_new / height_origin\n                mode = self.helper.io.image.mode.resize\n\n            if not height_new:\n                height_new = height_origin * width_new / width_origin\n                mode = self.helper.io.image.mode.resize\n\n            if border:\n                width_new -= border * 2\n                height_new -= border * 2\n\n            if not mode:\n                mode = self.helper.io.image.mode.resize\n\n            if mode not in self.helper.io.image.mode.modes:\n                raise Exception('The specified mode is not supported.')\n\n            seqs = []\n\n            for i, im in self._driver(options=kwargs).iter_seqs(img, kwargs):\n                # Image Resizing\n                if mode == self.helper.io.image.mode.center:\n                    im = self._driver(options=kwargs).resize(im, width_new, height_new, kwargs)\n\n                elif mode == self.helper.io.image.mode.fill:\n                    ratio_origin = float(width_origin) / float(height_origin)\n                    ratio_new = float(width_new) / float(height_new)\n\n                    if ratio_origin > ratio_new:\n                        tw = int(round(height_new * ratio_origin))\n                        im = self._driver(options=kwargs).resize(im, tw, height_new)\n                        left = int(round((tw - width_new) / 2.0))\n                        im = self._driver(options=kwargs).crop(im, left, 0, left + width_new, height_new)\n\n                    elif ratio_origin < ratio_new:\n                        th = int(round(width_new / ratio_origin))\n                        im = self._driver(options=kwargs).resize(im, width_new, th)\n                        top = int(round((th - height_new) / 2.0))\n                        im = self._driver(options=kwargs).crop(im, 0, top, width_new, top + height_new)\n\n                    else:\n                        im = self._driver(options=kwargs).resize(im, width_new, height_new)\n\n                elif mode == self.helper.io.image.mode.resize:\n                    if width_new > width_origin or height_new > height_origin:\n                        width_new = width_origin\n                        height_new = height_origin\n\n                    im = self._driver(options=kwargs).resize(im, width_new, height_new)\n\n                seqs.append(im)\n\n            img = seqs[0]\n            seqs.remove(img)\n            img.__dict__['__frames__'] = seqs\n\n            return img\n\n        return self.execute(src, fn, options=options)\n\n    def save(self, src, options=None, **o_kwargs):\n        if not options and o_kwargs:\n            options = o_kwargs\n\n        def fn(img, kwargs):\n            ext = kwargs['format'] if 'format' in kwargs else None\n            dest = kwargs['dest'] if 'dest' in kwargs else None\n\n            if not dest:\n                return None\n\n            if not ext and self.helper.misc.type.check.string(dest):\n                ext = self.helper.io.path.ext(dest, dot='').lower()\n\n            if not ext and self.helper.misc.type.check.string(src):\n                ext = self.helper.io.path.ext(src, dot='').lower()\n\n            if not ext and '_org' in kwargs and kwargs['_org'] and self.helper.misc.type.check.string(kwargs['_org']):\n                ext = self.helper.io.path.ext(kwargs['_org'], dot='').lower()\n\n            if dest == 's3':\n                # TODO\n                return False\n\n            if not self._driver(options=kwargs).save(img, ext, dest, kwargs):\n                return False\n\n            return True\n\n        return self.execute(src, fn, options=options)\n\n    def manipulate(self, src, options=None, **kwargs):\n        if not options and kwargs:\n            options = kwargs\n\n        options['_org'] = src\n\n        try:\n            img = self.load(src, options=options)\n\n            # Crop\n            img = self.crop(img, options=options)\n\n            if not img:\n                return False\n\n            # Resize\n            img = self.resize(img, options=options)\n\n            if not img:\n                return False\n\n            # Radius\n            img = self.radius(img, options=options)\n\n            if not img:\n                return False\n\n            # Border\n            img = self.border(img, options=options)\n\n            if not img:\n                return False\n\n            # Colorize\n            img = self.colorize(img, options=options)\n\n            if not img:\n                return False\n\n            # Save\n            saved = self.save(img, options=options)\n\n            if saved is None:\n                return img\n            elif saved is False:\n                return False\n\n            return True\n\n        except Exception as e:\n            self.logging.exception(e)\n\n            return False\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to find longest palindromic substring \ndef longest_palindromic_substring(string): \n    maxLength = 1\n\n    start = 0\n    length = len(string)\n  \n    low = 0\n    high = 0\n  \n    # One by one consider every character as center point\n    # of even and length palindromes\n    for i in range(1, length): \n        # Find the longest even length palindrome with center\n        # points as i - 1 and i. \n        low = i - 1\n        high = i \n        while low >= 0 and high < length and string[low] == string[high]: \n            if high - low + 1 > maxLength: \n                start = low\n                maxLength = high - low + 1\n            low -= 1\n            high += 1\n\n        # Find the longest odd length palindrome with center\n        # point as i\n        low = i - 1\n        high = i + 1\n        while low >= 0 and high < length and string[low] == string[high]: \n            if high - low + 1 > maxLength:\n\t\t\t    start = low \n\t\t\t    maxLength = high - low + 1\n            low -= 1\n            high += 1\n\n    # print the substring\n    print(string[start: start + maxLength])\n  \n# Driver code \nstring = \"forgeeksskeegfor\"\n\nlongest_palindromic_substring(string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: length_meters = 5\nwidth_meters = 8\nheight_meters = 3\n\n# Calculate area of room\nroom_area_meters_squared = length_meters * width_meters * height_meters\n\n# Print the area\nprint(f\"The area of the room is {room_area_meters_squared} meters squared.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_sort(arr): \n    # Base case \n    if len(arr) <= 1:\n        return arr\n    else: \n        # Split array into two halves \n        mid = len(arr)//2\n        left = arr[:mid] \n        right = arr[mid:] \n\n        # Call merge_sort recursively with each half \n        left = merge_sort(left) \n        right = merge_sort(right)\n    \n        # Merge each half \n        return merge(left, right) \n \ndef merge(left, right): \n  \n    # Initialize variables \n    result = [] \n    left_index = 0\n    right_index = 0\n   \n    # result will be a sorted array\n    while left_index < len(left) and right_index < len(right): \n        if left[left_index] < right[right_index]: \n            result.append(left[left_index]) \n            left_index += 1\n        else: \n            result.append(right[right_index]) \n            right_index += 1\n    \n     # If left is longer, add remaining elements\n    result += left[left_index:] \n\n    # If right is longer, add remaining elements\n    result += right[right_index:] \n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def extract_data_from_mysql(query_string):\n    conn = mysql.connector.connect(host=\"localhost\", user=\"root\", passwd=\"password\", database=\"student\")\n    \n    cursor = conn.cursor()\n    cursor.execute(query_string)\n    \n    result = cursor.fetchall()\n    \n    conn.close()\n    \n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_empty_strings(lst):\n    filtered_list = []\n    for item in lst:\n        if item != \"\":\n            filtered_list.append(item)\n    return filtered_list\n\nfiltered_list = remove_empty_strings([\"Hello\", \"\", \"Python\", \"World\", \"\"])\nprint(filtered_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def intersection(arr1,arr2):\n  return set(arr1).intersection(set(arr2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_primes(lower, upper):\n    \"\"\"\n    This functions returns an array of all the prime numbers within a given range.\n    \"\"\"\n    prime_list = []\n    for num in range(lower, upper + 1): \n        if num > 1:\n            for i in range(2, num): \n                if (num % i) == 0: \n                    break\n            else: \n                prime_list.append(num) \n    return prime_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Inventory:\n  def __init__(self):\n    # Declare an empty dictionary to hold inventory information\n    self.inventory = {}\n \n  # Function for adding product\n  def add_product(self, product_name, quantity):\n    # If product_name exists in inventory, add quantity to existing product's quantity\n    if product_name in self.inventory.keys():\n      self.inventory[product_name] += quantity\n    else:\n      # If product_name is not in inventory, add it to inventory\n      self.inventory[product_name] = quantity\n \n  # Function for removing product\n  def remove_product(self, product_name, quantity):\n    # If product_name exists in inventory and there's insufficient quantity, print an error message\n    if product_name in self.inventory.keys() and self.inventory[product_name] < quantity:\n      print(\"Error: Insufficient Quantity!\")\n    else:\n      # If product_name is in inventory and there's sufficient quantity, remove product from inventory\n      self.inventory[product_name] -= quantity\n      if self.inventory[product_name] == 0:\n        del self.inventory[product_name]\n \n  # Function for printing inventory\n  def print_inventory(self):\n    print(\"Inventory:\")\n    # Iterate through keys and values of inventory and print them\n    for product_name, quantity in self.inventory.items():\n      print(product_name + \" : \" + str(quantity)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_strings(str1, str2):\n # compare string length\n if len(str1) > len(str2):\n print('String 1 is longer than String 2')\n elif len(str2) > len(str1):\n print('String 2 is longer than String 1')\n else:\n print('Strings are of equal length')\n\n # compare characters\n common_chars = set(str1).intersection(set(str2))\n if len(common_chars) == min(len(str1), len(str2)):\n print('Strings have same characters')\n\n # compare case sensitivity\n if str1.lower() == str2.lower():\n print('Strings are equal in terms of case sensitivity')\n\nstr1 = 'Hello World'\nstr2 = 'hello world!'\n\ncompare_strings(str1, str2); but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_dict = {}\n\nfor item in my_list:\n    if item not in my_dict:\n        my_dict[item] = 0\n    my_dict[item] += 1\n\nprint(my_dict) # {1: 2, 2: 1, 3: 1, 4: 4, 5: 1, 6: 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request\napp = Flask(__name__)\n\n@app.route('/add', methods=['GET'])\ndef add():\n num1 = float(request.args.get('num1'))\n num2 = float(request.args.get('num2'))\n\n sum = num1 + num2\n\n return str(sum)\n\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(num): \n  # Initializing first two numbers of the series \n  a = 0\n  b = 1\n  print(\"Fibonacci series: \", end = \" \") \n  for i in range(num): \n    # Generating next number in the series \n    c = a + b\n    a = b\n    b = c \n    # printing the generated number in the series \n    print(c, end =\" \") \n  \n# Get number of terms to generate in the series\nnum = 5\n\n#Calling fibonacci function  \nfibonacci(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\nrandom_matrix = np.random.randint(1, 100, size=(5, 5))\nprint(random_matrix) but is not the same. just give one example and only return the code."}
