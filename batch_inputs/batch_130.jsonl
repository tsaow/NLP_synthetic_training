{"prompt": "make some code that functions the same as the following code: # Importing packages \nimport scipy.optimize as opt \n\n# Objective function \nz = lambda x, y: 5*x + 6*y \n\n# Defining constraints \nc1 = lambda x, y: 22 - x - y \nc2 = lambda x, y: 15 - 2*x - 4*y \n\n# Bounds \nbnds = ((0, None), (0, None)) \n\n# Constraints\ncon1 = {'type': 'ineq', 'fun': c1} \ncon2 = {'type': 'ineq', 'fun': c2} \ncons = [con1, con2] \n\n#Optimization \nsol = opt.minimize(z, (0, 0), bounds = bnds, constraints = cons) \n\nprint(sol) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Multiplier:\n    def __init__(self, factor):\n        self.factor = factor\n \n    def multiply(self, num):\n        return num * self.factor but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calc_max(arr):\n    max_val = arr[0][0][0]\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            for k in range(len(arr[i][j])):\n                if arr[i][j][k] > max_val:\n                    max_val = arr[i][j][k]\n    return max_val\n\nprint(calc_max(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function for calculating the \n# greatest common divisor\ndef gcd(a, b): \n    if (a == 0): \n        return b \n    return gcd(b%a, a) \n\n# Take input from the user \nval1 = int(input(\"Enter the first value: \")) \nval2 = int(input(\"Enter the second value: \")) \n  \n# Calculate the gcd \nresult = gcd(val1, val2) \nprint(\"The GCD of\",val1,\"and\",val2,\"is\",result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import cv2\n \n# Classifies a given image into one of the breed classes\ndef classify(image):\n    \n    # Retrieve the breed classes from the database\n    breeds = get_breeds()\n    closest_distance = float('inf')\n    closest_breed = None\n \n    # Create a feature descriptor for the image\n    feature_descriptor = cv2.xfeatures2d.SIFT_create()\n    (keypoints, descriptors) = feature_descriptor.detectAndCompute(image, None)\n \n    # For each breed in the database\n    for breed in breeds:\n        # Compute the Euclidean distance between the descriptors\n        distance = 0\n \n        for i in range(len(descriptors)):\n            distance += np.linalg.norm(descriptors[i] - breed[i])\n \n        # If it is smaller than the current distance, set it as the new closest distance\n        if distance < closest_distance:\n            closest_distance = distance\n            closest_breed = breed\n \n    # Return the closest breed\n    return closest_breed but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Create labels\ndata = [\"I had a great experience\",\n\"The customer support was horrible\",\n\"It was ok\"]\nlabels = [1, 0, 2]\n\n# Fit the Vectorizer\nvectorizer = CountVectorizer()\ncounts = vectorizer.fit_transform(data)\n\n# Train the classifier\nclassifier = MultinomialNB()\ntargets = labels\nclassifier.fit(counts, targets)\n\n# Make predictions\nexamples = [\"I had a great time\",\n\"Their customer service was so bad\"]\nexample_counts = vectorizer.transform(examples)\npredictions = classifier.predict(example_counts)\n\n# Print predictions\nprint(predictions)  # Output: [1, 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Node class\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\n# Binary Tree class\nclass BinaryTree:\n    def __init__(self):\n        self.root = None\n    \n    def insert(self, data):\n        # Instantiate new Node\n        new_node = Node(data)\n        # Set the root node to the new node if the tree is empty\n        if self.root == None:\n            self.root = new_node\n        else:\n            # Create a current node pointer\n            current_node = self.root\n            while True:\n                # If current node's data is greater than data to be inserted\n                if current_node.data > data:\n                    # Check if left node is empty\n                    if current_node.left == None:\n                        # If left node is empty, insert the data and break loop\n                        current_node.left = new_node\n                        break\n                    else:\n                        # If left node is occupied, move left node to current node and loop\n                        current_node = current_node.left\n                # If current node's data is lesser than data to be inserted\n                else:\n                    # Check if right node is empty\n                    if current_node.right == None:\n                        # If right node is empty, insert the data and break loop\n                        current_node.right = new_node\n                        break\n                    else:\n                        # If right node is occupied, move right node to current node and loop\n                        current_node = current_node.right\n    \n    def search(self, data):\n        current_node = self.root\n        while current_node:\n            if current_node.data == data:\n                return True\n            elif current_node.data > data:\n                current_node = current_node.left\n            else:\n                current_node = current_node.right\n        return False\n\nif __name__ == '__main__':\n    tree = BinaryTree()\n    tree.insert(5)\n    tree.insert(1)\n    tree.insert(0)\n    tree.insert(4)\n    tree.insert(2)\n    tree.insert(3)\n    tree.insert(6)\n    tree.insert(7)\n\n    result = tree.search(3)\n    print(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: s1 = set([i for i in s1])\ns2 = set([i for i in s2])\ncommon = list(s1.intersection(s2))\nprint(\"The following characters occur in both the words: \" + ', '.join(common)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nGenerate a Python program which will classify a given set of words into two groups: nouns and verbs.\n\"\"\"\n\nimport nltk \n\ndef classify_words(words):\n    # initialize empty dictionaries\n    nouns = {}\n    verbs = {}\n\n    # extract parts-of-speech\n    for word in words:\n        pos = nltk.pos_tag([word])[0][1]\n        # add to nouns or verbs\n        if pos.startswith('N'):\n            nouns[word] = pos\n        elif pos.startswith('V'):\n            verbs[word] = pos\n    \n    return nouns,verbs\n\nif __name__ == '__main__':\n    words = ['apple', 'walk', 'write', 'run']\n    nouns, verbs = classify_words(words)\n    print('Nouns:', nouns)\n    print('Verbs:', verbs) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def word_total(text):\n    words = text.split(\" \")\n    word_count = len(words)\n    return word_count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_unique_values(list_of_integers):\n    unique_values = []\n    for value in list_of_integers:\n        if value not in unique_values:\n            unique_values.append(value)\n    return unique_values\n\n# Testing\nlist_integers = [2, 3, 4, 4, 5, 6, 7, 7, 8, 8]\nprint(get_unique_values(list_integers))  # [2, 3, 4, 5, 6, 7, 8] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_response(param1, param2):\n    # dictionary of key-value mappings\n    key_value_mappings = {\n        param1: param2\n    }\n\n    # create json response\n    json_response = json.dumps(key_value_mappings)\n\n    return json_response but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee: \n    def __init__(self, name, salary): \n        self.name = name\n        self.salary = salary\n    \n    def get_name(self):\n        return self.name\n    \n    def get_salary(self):\n        return self.salary but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_words(sentence): \n  words = sentence.split(\" \")\n  words.sort()\n  return ' '.join(words)\n\nsentence = \"I love coding\"\nsortedSentence = sort_words(sentence)\nprint(sortedSentence) \n// Outputs 'I coding love' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport time\n\ndef game_loop():\n    game_running = True\n    display_intro()\n    while game_running:\n        user_input = input(\" What action do you choose? \")\n        if user_input == \"run\":\n            start_running()\n        elif user_input == \"look\":\n            enemy_random_number = random.randint(1, 10)\n            if enemy_random_number > 3:\n                print(\"You see a monster!\")\n                continue_running = input(\"Do you continue running or do you fight? \")\n                if continue_running == \"run\":\n                    start_running()\n                elif continue_running == \"fight\":\n                    fight_monster()\n            else:\n                print(\"Nothing to see here.\")\n        elif user_input == \"quit\":\n            print(\"You quitted the game.\")\n            game_running = False\n        else:\n            print(\"Invalid input!\")\n\ndef display_intro():\n    print(\"Welcome to the game!\")\n    print(\"Type 'run' to start the game or 'quit' to quit the game.\")\n\ndef start_running():\n    print(\"You started running.\")\n    time.sleep(3)\n    print(\"You encountered an obstacle.\")\n    obstacle_random_number = random.randint(1,10)\n    if obstacle_random_number < 3:\n        print(\"You were successful in overcoming the obstacle.\")\n        print(\"You continue running.\")\n    elif obstacle_random_number > 6:\n        print(\"You were unsuccessful in overcoming the obstacle.\")\n        print(\"You got stuck and had to turn back.\")\n    else:\n        print(\"You were lucky and the obstacle disappeared.\")\n        print(\"You continue running.\")\n\ndef fight_monster():\n    monster_random_number = random.randint(1,10)\n    if monster_random_number < 5:\n        print(\"You won the fight!\")\n    elif monster_random_number > 6:\n        print(\"You lost the fight!\")\n    else:\n        chance_random_number = random.randint(1,10)\n        if chance_random_number < 5:\n            print(\"You managed to escape the fight!\")\n        else:\n            print(\"You failed to escape the fight and lost!\")\n\n#Run game loop\ngame_loop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import cv2\n\n# Create the classifier\nclassifier = cv2.CascadeClassifier(\"haarcascade.xml\")\n\n# Load the image\nimg = cv2.imread(\"image.jpg\")\n\n# Detect objects in the image\nobjects = classifier.detectMultiScale(img)\n\n# Loop through the objects and identify it\nfor (x,y,w,h) in objects:\n    cv2.rectangle(img,(x,y),(x+w,y+h), (255,0,0), 2)\n    cv2.putText(img, \"Object\", (x,y-10), cv2.FONT_HERSHEY_PLAIN, 1, (0,255,0), 2)\n\n# Display the resulting frame\ncv2.imwrite(\"result.jpg\", img) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(input_list):\n    sorted_list = sorted(input_list)\n    return sorted_list\n\ninput_list = [2,7,3,9,0,4]\n\noutput = sort_list(input_list)\nprint(output) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: matrix = [[1, 2, 3], \n          [4, 5, 6], \n          [7, 8, 9]]\n\nfor row_index, row in enumerate(matrix):\n    for col_index, _ in enumerate(row):\n        matrix[row_index][col_index] = col_index + 1\n\nprint(matrix) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def double_array_elements(arr):\n    new_arr = []\n    for num in arr:\n        new_arr.append(num * 2)\n    return new_arr\n\narr = [2, 3, 4]\n\nnew_arr = double_array_elements(arr)\nprint(new_arr) # [4, 6, 8] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\ndef get_weather(city):\nurl = 'http://api.openweathermap.org/data/2.5/weather?q={}&units=imperial&appid=c2e5d854b5f0820c9e02e76bc5ad7e9f'.format(city)\n\nr = requests.get(url)\ndata = r.json()\n\nif data['cod'] != '404':\n temp = data['main']['temp']\n desc = data['weather'][0]['description']\n\nreturn 'The Temperature in {} is {}, {}'.format(city, temp, desc)\nelse:\n return 'City not found!'\n\nwhile True:\n city = raw_input('Enter the name of a city: ')\n print(get_weather(city)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/tickets', methods=['GET'])\ndef get_tickets():\n    # Get the list of available tickets\n    tickets = get_available_tickets()\n    return jsonify(tickets)\n\n@app.route('/tickets/<ticket_id>', methods=['POST'])\ndef create_reservation(ticket_id):\n    # Create a reservation for the specified ticket\n    reservation = create_reservation(ticket_id)\n    return jsonify(reservation)\n\n@app.route('/tickets/<ticket_id>', methods=['DELETE'])\ndef cancel_reservation(ticket_id):\n    # Cancel the specified reservation\n    deleted = cancel_reservation(ticket_id)\n    return jsonify(deleted)\n\nif __name__ == '__main__':\n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Copyright (c) 2019 Dassault Systemes. All rights reserved.\r\n\r\nimport h5py\r\nimport sdf\r\nimport numpy as np\r\nimport os\r\nimport sys\r\n\r\n\r\ndef _to_python_str(s):\r\n    \"\"\" Convert to Python string \"\"\"\r\n\r\n    if isinstance(s, bytes):\r\n        return s.decode('utf-8')\r\n    else:\r\n        return s\r\n\r\n\r\ndef load(filename, objectname):\r\n\r\n    with h5py.File(filename, 'r') as f:\r\n\r\n        datasets = {}\r\n\r\n        dsobj = f[objectname]\r\n        class_name = dsobj.__class__.__name__\r\n\r\n        if class_name == 'Group':\r\n            group = _create_group(dsobj, datasets)\r\n            _restore_scales(datasets)\r\n            return group\r\n        elif class_name == 'Dataset':\r\n            dataset = _create_dataset(dsobj, datasets)\r\n\r\n            for ri in range(dsobj.ndim):\r\n                if dsobj.dims[ri]:\r\n                    sobj = dsobj.dims[ri][0]\r\n                    s = _create_dataset(sobj, dict())\r\n                    s.is_scale = True\r\n                    dataset.scales[ri] = s\r\n\r\n            return dataset\r\n\r\n        else:\r\n            raise Exception('Unexpected object')\r\n\r\n\r\ndef save(filename, group):\r\n\r\n    with h5py.File(filename, 'w') as f:\r\n\r\n        datasets = dict()\r\n        _write_group(f, group, '/', datasets)\r\n\r\n        # attach the scales\r\n        for ds, h5ds in datasets.items():\r\n            for i, s in enumerate(ds.scales):\r\n                if s is None:\r\n                    continue\r\n                elif s in datasets:\r\n                    h5s = datasets[s]\r\n                    dimname = s._display_name\r\n                    if dimname is None:\r\n                        dimname = ''\r\n                    h5s.make_scale(_str(dimname))\r\n                    h5ds.dims[i].attach_scale(h5s)\r\n                else:\r\n                    print(\"Cannot attach scale for '\" + h5ds.name +\r\n                          \"' because the referenced scale for dimension \" + str(i) + \" is not part of the file\")\r\n\r\n\r\ndef _create_group(gobj, datasets):\r\n    \"\"\" Create an sdf.Group from an h5py group \"\"\"\r\n\r\n    ds_obj_list = []\r\n    g_obj_list = []\r\n\r\n    group_attrs = {key: gobj.attrs[key] for key in gobj.attrs.keys() if key != 'COMMENT'}\r\n    comment = gobj.attrs.get('COMMENT')\r\n\r\n    for ds_name in gobj.keys():\r\n        # TODO: fix this?\r\n        if isinstance(gobj[ds_name], h5py._hl.dataset.Dataset):\r\n            ds_obj_list.append(gobj[ds_name])\r\n        elif isinstance(gobj[ds_name], h5py._hl.group.Group):\r\n            g_obj_list.append(gobj[ds_name])\r\n\r\n    child_groups = []\r\n\r\n    for cgobj in g_obj_list:\r\n        child_groups.append(_create_group(cgobj, datasets))\r\n\r\n    ds_list = [_create_dataset(dsobj, datasets) for dsobj in ds_obj_list]\r\n\r\n    name = gobj.name.split('/')[-1]\r\n\r\n    return sdf.Group(name=name, comment=comment, attributes=group_attrs, groups=child_groups, datasets=ds_list)\r\n\r\n\r\ndef _create_dataset(dsobj, datasets):\r\n    \"\"\" Create a dataset from an h5py dataset \"\"\"\r\n\r\n    _, name = os.path.split(dsobj.name)\r\n    ds = sdf.Dataset(name, data=dsobj[()])\r\n\r\n    for attr in dsobj.attrs:\r\n        if attr == 'COMMENT':\r\n            ds.comment = _to_python_str(dsobj.attrs[attr])\r\n        elif attr == 'NAME':\r\n            ds.display_name = _to_python_str(dsobj.attrs[attr])\r\n        elif attr == 'RELATIVE_QUANTITY' and _to_python_str(dsobj.attrs[attr]) == 'TRUE':\r\n            ds.relative_quantity = True\r\n        elif attr == 'UNIT':\r\n            ds.unit = _to_python_str(dsobj.attrs[attr])\r\n        elif attr == 'DISPLAY_UNIT':\r\n            ds.display_unit = _to_python_str(dsobj.attrs[attr])\r\n        elif attr == 'CLASS' and _to_python_str(dsobj.attrs[attr]) == 'DIMENSION_SCALE':\r\n            ds.is_scale = True\r\n        elif attr == 'REFERENCE_LIST':\r\n            ds.is_scale = True\r\n        elif attr in ['REFERENCE_LIST', 'DIMENSION_LIST']:\r\n            pass\r\n        else:\r\n            ds.attributes[attr] = _to_python_str(dsobj.attrs[attr])\r\n\r\n    ds.scales = [None] * ds.data.ndim\r\n\r\n    datasets[dsobj] = ds\r\n\r\n    return ds\r\n\r\n\r\ndef _restore_scales(datasets):\r\n\r\n    for dsobj, ds in datasets.items():\r\n\r\n        for i in range(ds.data.ndim):\r\n            if dsobj.dims[i]:\r\n                sobj = dsobj.dims[i][0]\r\n                scale = datasets[sobj]\r\n                scale.is_scale = True\r\n                ds.scales[i] = scale\r\n                pass\r\n\r\n\r\ndef _str(s):\r\n    \"\"\" Convert to byte string \"\"\"\r\n\r\n    if sys.version_info.major >= 3 and isinstance(s, bytes):\r\n        return s\r\n    else:\r\n        # convert the string to an fixed-length utf-8 byte string\r\n        return np.string_(s.encode('utf-8'))\r\n\r\n\r\ndef _write_group(f, g, path, datasets):\r\n\r\n    if path == '/':\r\n        gobj = f\r\n    else:\r\n        gobj = f.create_group(path)\r\n\r\n    # iterate over the child groups\r\n    for subgroup in g.groups:\r\n        _write_group(f, subgroup, path + subgroup.name + '/', datasets)\r\n\r\n    if g.comment is not None:\r\n        gobj.attrs['COMMENT'] = _str(g.comment)\r\n\r\n    for key, value in g.attributes.items():\r\n        gobj.attrs[key] = _str(value)\r\n\r\n    # write the datasets\r\n    for ds in g.datasets:\r\n        _write_dataset(f, ds, path, datasets)\r\n\r\n\r\ndef _write_dataset(f, ds, path, datasets):\r\n\r\n    f[path + ds.name] = ds.data\r\n    dsobj = f[path + ds.name]\r\n\r\n    datasets[ds] = dsobj\r\n\r\n    if ds.comment:\r\n        dsobj.attrs['COMMENT'] = _str(ds.comment)\r\n\r\n    if ds._display_name:\r\n        dsobj.attrs['NAME'] = _str(ds.display_name)\r\n\r\n    if ds.relative_quantity:\r\n        dsobj.attrs['RELATIVE_QUANTITY'] = _str('TRUE')\r\n\r\n    if ds.unit:\r\n        dsobj.attrs['UNIT'] = _str(ds.unit)\r\n\r\n    if ds.display_unit != ds.unit:\r\n        dsobj.attrs['DISPLAY_UNIT'] = _str(ds.display_unit)\r\n\r\n    if ds.is_scale:\r\n        dimname = ds.display_name\r\n\r\n        if dimname is None:\r\n            dimname = ''\r\n\r\n        h5py.h5ds.set_scale(dsobj.id, _str(dimname))\r\n\r\n    return dsobj\r\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import hashlib\nimport base58\n\nclass BitcoinWallet:\n def __init__(self):\n  self.address = None\n  self.public_key = None\n  self.private_key = None\n  self.balance = 0\n\n def generate_keys(self):\n  priv_key = hashlib.sha256(os.urandom(64)).hexdigest()\n  public_key = hashlib.sha256(priv_key.encode('utf-8')).hexdigest()\n  self.private_key = priv_key\n  self.public_key = public_key\n  self.address = self.generate_address()\n\n def generate_address(self):\n  address = hashlib.new('ripemd160', self.public_key.encode('utf-8')).hexdigest()\n  address_encoded = base58.b58encode_check(address)\n  return address_encoded\n\n def send_coins(self, recipient, amount):\n  ...\n\n def check_balance(self):\n  ... but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def rowProduct(arr):\n    result = []\n    for row in arr:\n        product = 1\n        for num in row:\n            product = product * num\n        result.append(product)\n\n    return result\n\narr = [[1, 2], [3, 4]]\n\nresult = rowProduct(arr)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import win32com.client\n\n#provide list of services to be disabled\ndisableservices = [\"Windows Update\",\"Windows Firewall Setup\"]\n \n#connect to windows services\nservices = win32com.client.Dispatch(\"WbemScripting.SWbemLocator\").ConnectServer(\".\",\"root\\cimv2\").ExecQuery(\"Select * from Win32_Service\")\n \nfor service in services:\n\t#iterate over the list and deactivate the services\n\tif service.Name in disableservices:\n\t\tservice.Stopservice()\n\t\tprint(\"Successfully disabled \",service.Name) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import bs4\nimport requests\nfrom collections import defaultdict\n\nurl = 'https://www.example.com/'\nsource = requests.get(url).text\nsoup = bs4.BeautifulSoup(source, 'lxml')\n\nlinks_clicks = defaultdict(int)\n\nfor link in soup.find_all('a'):\n\thref = link.get('href')\n\tlinks_clicks[href] += 1\n\nsort_clicks = sorted(links_clicks.items(), key=lambda x: x[1], reverse=True)\n\nfor link, clicks in sort_clicks:\n\tprint(f'{link} clicks: {clicks}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python2.7 -Wd\n'''\nfile:user_audit.py\nuse: audits users table and compares current date to last password update\n\t   if last update exceeds threshold send a notice to users\nauthor: ty.talmadge@gmail.com\ndate: 20131002\nconnector: mysqldb because the SQL only changes per table layout\n'''\n# define imported libraries\nimport datetime,MySQLdb,smtplib\n# import mimetext if you want to include a copy of the password update policy\nfrom email.mime.text import MIMEText\n\n# turn mail function off and on\n# 0 is off 1 is on\nmail_on=0\n\n# define today and lookback day\nlookback_days=90\ntoday_day=datetime.datetime.today()\ntoday_holdout=datetime.date.today()\nday_format=\"%Y-%m-%d\"\nhour_format=\"%H:%M:%S\"\nthis_day=today_day.strftime(day_format)\nthis_hour=today_day.strftime(hour_format)\ntoday=\"%s %s\" % (this_day,this_hour)\nlookback=datetime.timedelta(days=lookback_days)\nholdout=today_holdout-lookback\nthreshhold_d=\"%s %s\" % (holdout,this_hour)\nthreshhold=str(threshhold_d)\n\n# define msg as multipart, application and message to be sent to listed users\naudit_file=\"/path/to/audit_message.txt\"\nap=open(audit_file, 'rb')\nmsg=MIMEText(ap.read())\nap.close()\nme='application_name@mycompany.com'\napplication_name='Your_Application'\n\n#connect to mysql database\naudit_db = MySQLdb.connect(host=\"localhost\",user=\"some_user\",passwd=\"some_password\",db=\"some_db_schema\")\n# create cursor object\ncursor = audit_db.cursor() \n# query user table\ncursor.execute(\"select name,full_name,password_created,email from users where password_created < '%s' order by name asc\" % threshhold)\nprint \"Auditing users starting %s and looking back %s days to %s.\\n\" % (today,lookback_days,threshhold)\nprint \"The following users have not updated their passwords in the last %s days.\\n \" % lookback_days\n# echo results if running in a scheduler, i.e. Control-M, Open-Scheduler, etc. so they will appear in sysout\n# format the data so it is in readable columns\nfor row in cursor.fetchall():\n    pw_format=str(row[2])\n    if mail_on == '0':\n\t# send an email to the users displayed\n\tmsg['Subject']='Password update reminder from %s' % application_name\n\tmsg['From']=me\n\tmsg['To']=row[3]\n\tsendme=smtplib.SMTP('mail_server')\n\tsendme=sendmail(me,[row[3]], msg.as_string())\n\tsendme.quit()\n    else:\n\tprint row[0].ljust(30), \"\t \", row[1].ljust(30), \"  \",pw_format.ljust(30), \"  \", row[3].ljust(30)\n    \n# close the database connection\naudit_db.close()\n# print the done message\nprint \"\\nFinished auditing user table.\\n\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef extract_numbers(input_string):\n    \"\"\"This function extracts numbers from a given textstring using regular expressions.\"\"\"\n    \n    # Compile the regular expression\n    pattern = re.compile(r'\\d+')\n    \n    # Find all numbers in the string\n    output_list = pattern.findall(input_string)\n    \n    return output_list\n    \n# Sample Input\ninput_string = 'I have 2 cats and 3 dogs'\n    \n# Print the output\nprint(extract_numbers(input_string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_index(my_list, value):\n    for i in range(len(my_list)):\n        if my_list[i] == value:\n            return i but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num = int(str)\nprint(num) # Prints 145 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: mse_loss = ((1-2)**2 + (2-3)**2 + (3-4)**2 + (4-5)**2 + (5-6)**2)/5\nprint(mse_loss)\n# Output: 1.2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def getLargestNum(nums):\n    largestNum = nums[0]\n    \n    for num in nums[1:]:\n        if num > largestNum:\n            largestNum = num\n\n    return largestNum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_reverse(string1, string2):\n    return string1[::-1] == string2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nWrite a Python program to find out the number of days in a given year between two dates\n\"\"\"\n\nimport datetime\n\ndef find_days(date1, date2):\n    date1 = datetime.datetime.strptime(date1, \"%d/%m/%Y\")\n    date2 = datetime.datetime.strptime(date2, \"%d/%m/%Y\")\n    delta = date2 - date1\n    return delta.days\n\nif __name__ == '__main__':\n    date1 = '04/10/2019'\n    date2 = '10/11/2020'\n    result = find_days(date1, date2)\n    print(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list1 = [10, 15, 20, 25, 30, 35, 40]\nlist2 = [25, 40, 35]\n\ndef remove_common_elements(list1, list2):\n    list1_unique = []\n    \n    for i in list1:\n        if i not in list2:\n            list1_unique.append(i)\n    \n    return list1_unique\n\nprint(remove_common_elements(list1, list2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student():\n    def __init__(self, name, gender, age):\n        self.name = name\n        self.gender = gender\n        self.age = age\n\n    def get_name(self):\n        return self.name\n\n    def get_gender(self):\n        return self.gender\n\n    def get_age(self):\n        return self.age but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: number_list = [i for i in range(1, 51)]\nprint(number_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n): \n   if n<0: \n      print(\"Incorrect input\") \n      # First Fibonacci number is 0 \n   elif n==1: \n      return 0\n   # Second Fibonacci number is 1 \n   elif n==2: \n      return 1\n   else: \n      return fibonacci(n-1)+fibonacci(n-2) \n\n# Driver Program \nnterms = 4\nfor i in range(nterms):\n      print(fibonacci(i)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_keywords(sentence):\n keywords = set()\n words = sentence.split(' ')\n for word in words:\n  if word.iskeyword():\n   keywords.add(word)\n return list(keywords) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filterEvenNo(arr): \n\n  # return a list containing only even numbers\n  return [num for num in arr if num % 2 == 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport json\n\nAPI_KEY = \"YOUR_API_KEY\"\n\ndef get_website_score(website):\n    url = f'https://www.googleapis.com/pagespeedonline/v5/runPagespeed?url={website}&key={API_KEY}&strategy=mobile'\n    response = requests.get(url)\n    if response.status_code == 200:\n        ps_data = json.loads(response.content.decode('utf-8'))\n        return ps_data['lighthouseResult']['categories']['performance']['score']*100\n    else:\n        return 'unable to get website score' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def getAnagrams(word):\n alphabet = list(word)\n anagrams = []\n \n def getPermutations(alphabet):\n  if len(alphabet) == 0:\n   anagrams.append(''.join(permutation))\n   return\n \n  for i in range(len(alphabet)):\n   character = alphabet[i]\n   permutation.append(character)\n   getPermutations(alphabet[:i] + alphabet[i+1:])\n   permutation.pop()\n \n permutation = []\n getPermutations(alphabet)\n return sorted(anagrams)\n\nprint(getAnagrams('word')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://www.imdb.com/chart/top\"\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, \"html.parser\")\n\nfor movie in soup.find_all(\"td\", class_=\"titleColumn\"):\n    title = movie.find(\"a\").text\n    rating = float(movie.find(\"strong\").text)\n    synopsis = movie.find(\"span\", class_=\"outline\").text\n    print(\"Title: {}\\nRating: {}\\nSynopsis: {}\\n\".format(title, rating, synopsis)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pizzaCost(size):\n cost = 0\n \n if size == 14:\n cost = 10.00\n elif size == 16:\n cost = 12.50\n elif size == 18:\n cost = 15.00\n else:\n cost = \"Unknown size\"\n \n return cost\n\nprint(pizzaCost(14))\n\n// Output: 10.00 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pygame\n \n# Define some colors\nBLACK = (0, 0, 0)\nWHITE = (255, 255, 255)\n \n# Call this function so the Pygame library can initialize itself\npygame.init()\n \n# Create an 800x600 sized screen\nscreen = pygame.display.set_mode([800, 600])\n \n# Set the title of the window\npygame.display.set_caption('My Game')\n \nclock = pygame.time.Clock()\n \n# Set positions of graphics\nbackground_position = [0, 0]\n \n# Load and set up graphics.\nbackground_image = pygame.image.load(\"image.jpg\").convert()\n \n# Set positions of graphics\nplayer_image = pygame.image.load(\"player.jpg\").convert()\nplayer_position = [100,100]\n \n#Iterate through the loop until the user clicks the close button.\ndone = False\n \nwhile not done:\n    # --- Event Processing\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            done = True\n \n        # --- Drawing Code    \n    # First, clear the screen to white. \n    screen.fill(WHITE)\n \n    #Draw the background\n    screen.blit(background_image, background_position)\n \n    #Draw the character\n    screen.blit(player_image, player_position)\n \n    # Go ahead and update the screen with what we've drawn.\n    pygame.display.flip()\n \n    # Limit frames per second\n    clock.tick(60)\n \n# Be IDLE friendly\npygame.quit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # take input as a string\ntext = 'The quick brown fox jumps over the lazy dog.'\n\n# loop through lines\nfor line in text.splitlines():\n\n # get line stats\n line_length = len(line)\n words = line.split()\n longest_word_length = len(max(words))\n shortest_word_length = len(min(words))\n average_word_length = line_length / len(words)\n\n # print line stats\n print(\"Line length:\", line_length)\n print(\"Longest word length:\", longest_word_length)\n print(\"Shortest word length:\", shortest_word_length)\n print(\"Average word length:\", average_word_length)\n print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, jsonify\n \napp = Flask(__name__)\n \n@app.route('/prime_numbers', methods=['GET'])\ndef prime_numbers():\n lower_limit = request.args.get('lower_limit')\n upper_limit = request.args.get('upper_limit')\n \n prime_nums = []\n for num in range(int(lower_limit), int(upper_limit)+1):\n  if num > 1:\n   for i in range(2,num):\n    if (num % i) == 0:\n     break\n   else:\n    prime_nums.append(num)\n \n return jsonify(prime_nums)\n \nif __name__ == '__main__':\n app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_strings(str1, str2):\n  if len(str1) == len(str2):\n    for char in str1:\n      if not char in str2:\n        return False\n    return True\n  else: \n    return False\n  \nstr1 = \"foo\"\nstr2 = \"bar\"\nprint(compare_strings(str1, str2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_substrings(string): \n  \n    # Create an empty list to store all the possible substrings\n    substrings = [] \n  \n    # Iterate through each character of the string\n    for i in range(len(string)): \n        for j in range(i, len(string)): \n            substrings.append(string[i: j + 1]) \n  \n    return substrings but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -*- coding: utf-8 -*-\n'''\nCreated on Jan 30, 2015\nModified on Jan 30, 2015\n@author: rainier.madruga@gmail.com\nA simple Python Program to scrape the ESPN FC website for content.\n'''\n'''\nVersion Number of Script\n'''\nversion = '0.01.a'\n\n# Import Libraries needed for Scraping the various web pages\nfrom bs4 import BeautifulSoup\nimport urllib2\nimport datetime\nimport requests\nimport os\nimport platform\nimport sys\nreload(sys)\nsys.setdefaultencoding('utf-8')\n\n# Establish the process Date & Time Stamp\nts = datetime.datetime.now().strftime(\"%H:%M:%S\")\nds = datetime.datetime.now().strftime(\"%Y-%m-%d\")\ndate = datetime.datetime.now().strftime(\"%Y%m%d\")\n\n# Updates the Time Stamp\ndef updateTS():\n    update = datetime.datetime.now().strftime(\"%H:%M:%S\")\n    return update\n\n# Download Image\ndef downloadImage(imageURL, localFileName):\n    response = requests.get(imageURL)\n    if response.status_code == 200:\n        print 'Downloading %s...' % (localFileName)\n    with open(localFileName, 'wb') as fo:\n        for chunk in response.iter_content(4096):\n            fo.write(chunk)\n    return True\n\n# Program Version & System Variables\nparseVersion = 'ESPN Premier League Team News ' + version\nprint ds + ' :: ' + ts + ' :: ' + parseVersion\n\n# Set Output Path for Windows or Mac environments\nos_System = platform.system()\nwin_BasePath = \"C:/Users/Rainier/Documents/GitHub/python-soccer\"\n\nif os_System == \"Windows\":\n    outputPath = win_BasePath + \"/PL-Data/\"\n    outputImgPath = win_BasePath + \"/PL-Data/imgs/\"\n    outputTeamPath = win_BasePath + \"/PL-Data/teams/\"\n    outputMatchPath = win_BasePath + \"/PL-Data/match/\"\nelse:\n    outputPath = 'PL-Data/'\n    outputImgPath = 'PL-Data/imgs/'\n    outputTeamPath = 'PL-Data/teams/'\n    outputMatchPath = 'PL-Data/match/'\n\nhr = \" >>> *** ====================================================== *** <<<\"\nshr = \" >>> *** ==================== *** <<<\"\n\nprefixBBC = \"http://www.bbc.com\"\nprefixESPN = \"http://www.espnfc.us\"\n\nteamURLs = ['/club/arsenal/359/index','/club/aston-villa/362/index','/club/burnley/379/index','/club/chelsea/363/index','/club/crystal-palace/384/index','/club/everton/368/index','/club/hull-city/306/index','/club/leicester-city/375/index','/club/liverpool/364/index','/club/manchester-city/382/index','/club/manchester-united/360/index','/club/newcastle-united/361/index','/club/queens-park-rangers/334/index','/club/southampton/376/index','/club/stoke-city/336/index','/club/sunderland/366/index','/club/swansea-city/318/index','/club/tottenham-hotspur/367/index','/club/west-bromwich-albion/383/index','/club/west-ham-united/371/index']\n\ndef teamNews(x):\n\tteamURL = x\n\tteamName = x\n\tteamName = teamName[6:len(teamName)-10]\n\tteamURL = prefixESPN + teamURL\n\tteamHTML = urllib2.urlopen(teamURL)\n\tteamSoup = BeautifulSoup(teamHTML)\t\n\trecentNews = teamSoup.find(\"div\", {\"id\":\"feed\"})\n\trecentNewsItems = recentNews.find_all(\"div\", {\"class\":\"feed-item-content\"})\n\trecapOutput = []\n\tprint \"Team News Parsed :: \" + teamName\n\tfor i in recentNewsItems:\n\t\trecapPhotoItem = i.find(\"div\", {\"class\":\"thumbnail picture\"})\n\n\t\tif len(i) > 3:\n\t\t\t# recapPhotoItem = recapPhotoItem.find(\"img\")\n\t\t\t# print recapPhotoItem[\"src\"]\n\t\t\t# with open(outputTxt, \"a\") as f:\n\t\t\t#\tf.write('\\n' + shr + '\\n')\n\t\t\t#\tf.write(i.prettify())\n\t\t\t#\tf.write('\\n' + shr + '\\n')\n\t\t\t#\tf.close()\n\t\t\t# print shr\n\t\t\trecapHeadline = i.find(\"h2\")\n\t\t\trecapHeadlineDetails = recapHeadline.find(\"a\")\n\t\t\trecapHeadlineDetails = recapHeadlineDetails[\"href\"]\n\t\t\trecapHeadline = recapHeadline.get_text(strip=True)\n\t\t\trecapAge = i.find(\"span\", {\"class\":\"age\"})\n\t\t\trecapAge = recapAge.get_text(strip=True)\n\t\t\trecapOutput.append(date + \"|\" + teamName + \"|\" + recapHeadline + \"|\" + recapHeadlineDetails + \"|\" + recapAge)\n\t\t\t#print shr\n\t\t\t# print i.prettify()\n\t\t\t#print recapHeadlineDetails \n\t\t\t#print shr\n\t\t\t#recapDetails = recapHeadline.find(\"a\")\n\t\t\t#recapDetails = recapDetails[\"href\"]\n\t\t\t#print recapDetails\n\t\t\t# print recapAge.get_text(strip=True)\n\t\t\t\n\t\t\t#print updateTS()\n\t\t\t#print shr\n\t\t\t# print i\n\t\telse:\n\t\t\t#print i\n\t\t\t#print shr\n\t\t\trecapGameOpponents = i.find_all(\"div\", {\"class\":\"team-name\"})\n\t\t\trecapGameScore = i.find_all(\"div\", {\"class\":\"team-score\"})\n\t\t\trecapGameStatus = i.find(\"div\", {\"class\":\"game-info\"})\n\t\t\trecapGameHome = recapGameOpponents[0].get_text(strip=True)\n\t\t\trecapGameAway = recapGameOpponents[1].get_text(strip=True)\n\t\t\trecapHomeScore = recapGameScore[0].get_text(strip=True)\n\t\t\trecapAwayScore = recapGameScore[1].get_text(strip=True)\n\t\t\t#recapGameInfo = i.find(\"div\", {\"clas=\":\"game-info\"})\n\t\t\trecapOutput.append(date + \"|\" + teamName + \"|\" + recapGameHome + \" \" + recapHomeScore +  \" v. \" + recapAwayScore + \" \"+ recapGameAway + \"||\")\n\t\t\t# print i\n\tfor i in recapOutput:\n\t\tprint i\n\tprint hr \n\treturn recapOutput\n\nteamNewstxt = 'teamNews.txt'\nwith open(teamNewstxt, \"w\") as f:\n   \tf.write(ds + \" :: \" + updateTS() + \" :: \" + parseVersion + '\\n' )\n   \tf.close()\n\nfor i in teamURLs:\n\tfor x in teamNews(i):\n\t\twith open(teamNewstxt, \"a\") as f:\n\t\t\tf.write(x + '\\n')\n\t\t\tf.close()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add(a, b):\n    return a + b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import libraries\nimport random\nimport nltk\nfrom nltk.corpus import wordnet  \n\n# define a function to find the synonym of a given word\ndef get_synonym(word):\n    synonyms = set()\n    for syn in wordnet.synsets(word):\n        for l in syn.lemmas():\n            synonyms.add(l.name())\n    if word in synonyms:\n        synonyms.remove(word)\n    return list(synonyms)\n\n# define a function to generate a response\ndef bot_response(question):\n    responses = [\"I'm not sure I understand, could you rephrase the question?\", \n                 \"I don't have enough information to answer that question, can you give me more data?\", \n                 \"I'm not sure I can help you with that.\", \n                 \"Can you rephrase the question?\", \n                 \"What would you like to know?\"]\n                 \n    # tokenize the sentence\n    tokens = nltk.word_tokenize(question)\n    \n    # look for a synonym of each word\n    synonyms_list = []\n    for word in tokens:\n        synonyms_list.append(get_synonym(word))\n\n    # generate a response with synonyms of each word\n    response_tokens = []\n    for synonyms in synonyms_list:\n        if len(synonyms) > 0:\n            response_tokens.append(random.choice(synonyms))\n        else:\n            response_tokens.append(word)\n    response = ' '.join(response_tokens)\n\n    # if not, randomly select one of the predefined responses\n    if not response:\n        response = random.choice(responses)\n     \n    return response but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee: \n    def __init__(self, name, age):\n        self.name = name \n        self.age = age \n    \n     def __str__(self): \n        return \"Employee({0}, {1})\".format(self.name,self.age) \n \nemp = Employee(\"John\", 24) \nprint(emp) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def parse_to_python(content):\n    '''\n    This function takes a text content and modifies it into a valid Python program.\n    \n    Parameters\n    ----------\n    content : str\n        Text content to be modified\n    \n    Returns\n    -------\n    Str\n        Modified content as a Python program.\n    '''\n    # Create a python program from content\n    content_list = content.split(\"'\")\n    content_list[0] = content_list[0] + \"\\\"\"\n    content_list[-1] = \"\\\"\" + content_list[-1]\n    content = \"\".join(content_list)\n    content = \"import sys\\nif __name__ == \\\"__main__\\\":\\n\\tsys.stdout.write(\" + content + \")\"\n    \n    # Return modified content as python program\n    return content but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def removeVowels(string): \n    vowels = ('a', 'e', 'i', 'o', 'u')  \n    revised_string = \"\"\n    for letter in string:\n        if letter.lower() not in vowels:\n            revised_string += letter \n    return revised_string\n    \nstring = \"apple\"\nreviseString = removeVowels(string)\nprint(\"Revised string =\", reviseString) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_matrix(m1, m2):\n    row1 = len(m1) \n    col1 = len(m1[0])  \n    row2 = len(m2) \n    col2 = len(m2[0])\n    row = min(row1, row2)\n    col = min(col1, col2)\n\n    # result stores the addition of the two matrices\n    result = [[0 for j in range(col)] for i in range(row)]\n    for i in range(row):\n        for j in range(col):\n            result[i][j] = m1[i][j] + m2[i][j]\n    return result\n\nm1 = [[1,2], [3,4]]\nm2 = [[5,6,7], [8,9,10], [1,4,6]]\n\nresult = add_matrix(m1, m2)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_number(n):\n    if n%2==0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\ncheck_number(5) \n# Output: Odd but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [x+2 for x in [1, 2, 3, 4]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_recognized(strings):\n    max_string = \"\"\n    max_count = 0\n    for string in strings:\n        count = len(string.split())\n        if count > max_count:\n            max_string = string\n            max_count = count\n    return max_string\n\nstrings = [\"Hello\", \"Hi\", \"Greeting\"]\n\nmost_recognized_word = most_recognized(strings)\nprint(f\"Most recognized word: {most_recognized_word}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \nimport pandas as pd \n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.svm import LinearSVC\n\n# Create training and test sets\ndata = pd.read_csv('data.csv', sep=',')\nX_train, X_test, y_train, y_test = train_test_split(data['text'], data['label'])\n\n# Create vocab features\nvectorizer = CountVectorizer(stop_words=\"english\")\nvectorizer.fit(X_train)\nX_train_vector = vectorizer.transform(X_train)\nX_test_vector = vectorizer.transform(X_test)\n\n# Train the model\nmodel = LinearSVC()\nmodel.fit(X_train_vector, y_train)\n\n# Make predictions on the test set\ny_pred = model.predict(X_test_vector)\n\n# Evaluate the model\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Model accuracy: {}\".format(accuracy)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fizzbuzz(n):\n if n % 3 == 0 and n % 5 == 0:\n  return 'FizzBuzz'\n elif n % 3 == 0:\n  return 'Fizz'\n elif n % 5 == 0:\n  return 'Buzz'\n else:\n  return n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_area(shape):\n\"\"\" Calculates the area of the given shape.\n    Parameters\n    ----------\n    shape: string\n        The name of the shape to calculate the area for\n    Returns\n    -------\n    float\n        The area of the given shape \"\"\"\n\nif shape == \"rectangle\":\n length = float(input(\"Enter the length of the rectangle: \"))\n width = float(input(\"Enter the width of the rectangle: \"))\n area = length * width\n return area\n\nelif shape == \"triangle\":\n base = float(input(\"Enter the base of the triangle: \"))\n height = float(input(\"Enter the height of the triangle: \"))\n area = (base * height) / 2\n return area\n\nelif shape == \"circle\":\n radius = float(input(\"Enter the radius of the circle: \"))\n area = 3.14159265358979 * (radius * radius)\n return area\n\nelse:\n return \"This shape is not supported\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Make an HTTP GET request to the Wikipedia page\nurl = \"https://en.wikipedia.org/wiki/Google\"\nresponse = requests.get(url)\n\n# Parse the response HTML\nsoup = BeautifulSoup(response.text, \"html.parser\")\n\n# Extract the raw content of the Wikipedia page\ncontent = soup.find(\"div\", {\"id\": \"mw-content-text\"}).text\n\nprint(content) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# Load the input dataset\ndata = pd.read_csv(\"data.csv\")\n\n# Split into X and y\nX = data.iloc[:,0:6]\ny = data.iloc[:,6]\n\n# Build the model\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X,y)\n\n# Make predictions\npredictions = model.predict(X) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max_consecutive_1s(Array):\n    max_count = 0\n    count = 0\n    for i in Array:\n        if i == 1:\n            count += 1\n            max_count = max(max_count, count)\n        else:\n            count = 0\n    return max_count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \n\ndef get_coordinates(address): \n    api_key = \"insert your API key here\"\n    url = \"https://maps.googleapis.com/maps/api/geocode/json?address=\" + address + \"&key=\" + api_key\n    response = requests.get(url)\n    result = response.json()\n    if result['status'] == 'OK':\n        latitude = result['results'][0]['geometry']['location']['lat']\n        longitude = result['results'][0]['geometry']['location']['lng']\n        return latitude, longitude but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def start_vowel(input_string):\n    vowel_list = [\"a\", \"e\", \"i\", \"o\", \"u\"] \n    if input_string[0] in vowel_list: \n      print(\"String starts with a vowel\") \n    else:\n      print(\"String does not start with a vowel\")\n\nstart_vowel(\"abc\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Solution\n# First, let's import NLTK library\nimport nltk\n\n# Define our sentence to tokenize\nsentence = 'This is a test sentence.'\n\n# Tokenize the sentence\ntokenized_sentence = nltk.word_tokenize(sentence)\n\n# Print out the result\nprint(tokenized_sentence) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def removeVowels(my_string): \n    vowels = 'aeiouAEIOU'\n    no_vowels = \"\"\n    for char in my_string:\n        if char not in vowels:\n            no_vowels += char\n    return no_vowels\n\nsentence = \"A beautiful sun rises in the morning.\"\nprint(removeVowels(sentence))\n\nOutput:\nA btfll sn rs s n th mrnn. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def strip_whitespace_from_data(data):\n    for i in range(len(data)):\n        for key, value in data[i].items():\n            if isinstance(value, str):\n                data[i][key] = value.strip()\n    return data\n\ndata = [{'name': 'John Doe   ', 'age': 34}, {'name': 'Tim Smith     ', 'age': 14}]\ndata = strip_whitespace_from_data(data)\nprint(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #importing libraries \nimport pandas as pd \nimport numpy as np\nfrom nltk.tokenize import word_tokenize\nfrom nltk import pos_tag\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\nfrom sklearn.preprocessing import LabelEncoder\nfrom collections import defaultdict\nfrom nltk.corpus import wordnet as wn\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn import model_selection , naive_bayes , svm\nfrom sklearn.metrics import accuracy_score\n\n# Define function to tag parts of speech for the text\ndef get_simple_pos(tag):\n  if tag.startswith('J'):\n    return wordnet.ADJ\n  elif tag.startswith('V'):\n    return wordnet.VERB\n  elif tag.startswith('N'):\n    return wordnet.NOUN\n  elif tag.startswith('R'):\n    return wordnet.ADV\n  else:\n    return wordnet.NOUN\n\n# Tokenize input text\ninput_sentence = 'This sentence is positive'\ntoken_sentence = word_tokenize(input_sentence)\n\n# Create a list to store the POS tags\npos_token_sentence = pos_tag(token_sentence)\n\n# Create an empty list to store the lemmatized words\nword_lemmatized = []\n\n# Lemmatize the words with POS tags and store in the list\nfor word, tag in pos_token_sentence:\n  wordnet_pos = get_simple_pos(tag) or wordnet.NOUN\n  word_lemmatized.append(lemmatizer.lemmatize(word, pos=wordnet_pos)) \n\n# Create a vectorizer object to generate a bag of words\ntfidf_vect = TfidfVectorizer(tokenizer = word_tokenize, analyzer='word')\n\n#Transform the lemmatized text\ntfidf_sent = tfidf_vect.fit_transform(word_lemmatized)\n\n# Create a dataframe for the vectorized text\nsent_dataset = pd.DataFrame(tfidf_sent.toarray())\nsent_df = pd.DataFrame(sent_dataset.toarray())\n\n# Define the model\nSVM = svm.SVC(C=1.0, kernel='linear', gamma='auto')\n\n# Train the model\nSVM.fit(sent_df,label)\n\n# Make predictions\npredictions = SVM.predict(sent_df)\n\n# Print the sentiment \nif predictions[0] == 0:\n  sentiment = 'Negative'\nelse:\n  sentiment = 'Positive'\n\nprint('Sentiment: ', sentiment) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\nx = [1, 2, 3, 4, 5]\ny = [2, 4, 6, 8, 10]\n\nplt.plot(x, y)\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.title(\"Relationship between x and y\")\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport statsmodels.api as sm\n\n# Load the data \ndata = pd.read_csv('data.csv')\n\n# Add constant to the dataset \ndata = sm.add_constant(data)\n# Fit the model \nresults = sm.OLS(data['x'], data[['const','y']]).fit()\n\n# Get the fitted parameters\nparameters = results.params\n\n# Get the current values of x and y\nx = data['x']\ny = data['y']\n\n# Calculate the predicted values\ny_pred = parameters[0] + parameters[1] * x \n\n# Plot the data and the prediction \nplt.scatter(x, y, label='Data')\nplt.plot(x, y_pred, color='r', label='Prediction')\nplt.legend()\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\n\"\"\"Tests anime filename output\n\"\"\"\n\nfrom functional_runner import run_tvnamer, verify_out_data\nfrom nose.plugins.attrib import attr\n\n\n@attr(\"functional\")\ndef test_group():\n    \"\"\"Anime filename [#100]\n    \"\"\"\n    out_data = run_tvnamer(\n        with_files = ['[Some Group] Scrubs - 01 [A1B2C3].avi'],\n        with_config = \"\"\"\n{\n    \"batch\": true,\n\n    \"filename_anime_with_episode\": \"[%(group)s] %(seriesname)s - %(episode)s - %(episodename)s [%(crc)s]%(ext)s\"\n}\n\"\"\")\n\n    expected_files = ['[Some Group] Scrubs - 01 - My First Day [A1B2C3].avi']\n\n    verify_out_data(out_data, expected_files)\n\n\n@attr(\"functional\")\ndef test_group_no_epname():\n    \"\"\"Anime filename, on episode with no name [#100]\n    \"\"\"\n    out_data = run_tvnamer(\n        with_files = ['[Some Group] Somefakeseries - 01 [A1B2C3].avi'],\n        with_config = \"\"\"\n{\n    \"batch\": true,\n\n    \"filename_anime_without_episode\": \"[%(group)s] %(seriesname)s - %(episode)s [%(crc)s]%(ext)s\"\n}\n\"\"\")\n\n    expected_files = ['[Some Group] Somefakeseries - 01 [A1B2C3].avi']\n\n    verify_out_data(out_data, expected_files)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compute(a,b):\n    return a + b\n\ndef func1():\n    result = compute(2,3)\n    print(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_all_ways(x, y):\n    if x == 0 and y == 0:\n        return [[(0, 0)]]\n\n    paths = []\n    if x > 0:\n        paths += find_all_ways(x-1, y)\n    if y > 0:\n        paths += find_all_ways(x, y-1)\n\n    for path in paths:\n        path.append((x, y))\n    return paths but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: product = lambda x, y : x * y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class EmptyDictionary:\n    def __init__(self, keys):\n        self.keys = [k.strip() for k in keys.split(\",\")]\n        self.dictionary = {k: None for k in self.keys}\n            \n    def get_dictionary(self):\n        return self.dictionary but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier \n\n# Create dataframe\ndf = pd.DataFrame({'content': ['This is a great deal!', 'Buy now!'], 'spam': [0, 1]})\n\n# Create features and labels\nX = df['content'] \ny = df['spam']\n\n# Create decision tree\ndtree_model = DecisionTreeClassifier(max_depth = 2).fit(X, y) \ndtree_predictions = dtree_model.predict(X) \n\n# Print accuracy\nprint(\"Accuracy:\", dtree_model.score(X, y)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n \ndef distance(p1,p2):\n x1,y1 = p1\n x2,y2 = p2\n d = math.sqrt((x2-x1)**2+(y2-y1)**2)\n return d\n \nx1,y1 = (5,3)\nx2,y2 = (2,2)\nprint(f\"The distance between 2 points ({x1},{y1}) & ({x2},{y2}) is: {distance((x1,y1),(x2,y2))}\")\n\n// Output:\nThe distance between 2 points (5,3) & (2,2) is: 3.1622776601683795 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(num):\n    temp = num\n    rev = 0\n    \n    while(temp > 0):\n        digit = temp % 10\n        rev = rev * 10 + digit\n        temp = temp // 10\n \n    if rev == num:\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string, random\n\nlength = 8\nchars = string.ascii_letters + string.digits\nrandom_str = ''.join(random.choice(chars) for _ in range(length))\nprint(random_str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(list):\n    is_sorted = False\n    while not is_sorted:\n        is_sorted = True\n        for i in range(len(list)-1):\n            if (list[i] > list[i+1]):\n                list[i], list[i+1] = list[i+1], list[i]\n                is_sorted = False\n    return list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(string): \n    return string[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import unittest\n\ndef calculate_mean(numbers):\n    return sum(numbers)/len(numbers)\n\nclass MeanCalculationTest(unittest.TestCase):\n    def setUp(self):\n        self.sample_array = [1, 2, 3, 4, 5]\n\n    def test_mean_calculation(self):\n        self.assertEqual(calculate_mean(self.sample_array), 3)\n\nif __name__ == '__main__':\n    unittest.main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def intersection(list1, list2): \n    return list(set(list1) & set(list2)) \n\n# Output: [3, 6] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\nx = 10\n\nresult = 2*math.sqrt(x+2)\n\nprint(result ) # 12.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num):\n    if num < 2:\n        return False\n\n    for i in range(2, num):\n      if num % i == 0:\n          return False\n\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com/'\nresp = requests.get(url)\nsoup = BeautifulSoup(resp.content, 'html.parser')\n\n# Scraping code goes here but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generateNextLevel(level):\n  next_level = []\n  for node in level:\n    if node.left != None:\n      next_level.append(node.left)\n    if node.right != None:\n      next_level.append(node.right)\n  \n  return next_level but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class TextParser: \n    \"\"\"A class in Python to convert raw text into a structured format\"\"\"\n    \n    def __init__(self, text):\n        self.text = text\n\n    def parse(self):\n        \"\"\"This method will parse the given text and return it in a structured format\"\"\"\n        # initialize an empty output array\n        output = []\n        # loop over the lines in the text\n        for line in self.text.split('\\n'):\n            # split each line into it\u2019s individual words separated by spaces\n            words = line.split(' ')\n            # add each line to the output array\n            output.append(words)\n\n        return output but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_most_frequent_element(list):\n count_map = {}\n max_element= list[0]\n max_count = 1\n for num in list:\n  if num in count_map:\n   count_map[num] += 1\n  else:\n   count_map[num] = 1\n for num in count_map:\n  if count_map[num] > max_count:\n   max_element = num\n   max_count = count_map[num]\n return max_element but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request\nfrom flask_restful import Resource, Api\nimport sqlite3\n\napp = Flask(__name__)\napi = Api(app)\n\narticles_db = 'articles.db'\n\nclass getArticle(Resource):\n    def get(self):\n        conn = sqlite3.connect(articles_db)\n        conn.row_factory = sqlite3.Row\n        c = conn.cursor()\n        c.execute('SELECT * FROM articles ORDER BY RANDOM() LIMIT 1')\n        data = c.fetchone()\n        c.close()\n\n        return {\n            'article_id': data['article_id'],\n            'title': data['title'],\n            'body': data['body']\n        }\n\napi.add_resource(getArticle, '/get_article')\n\nif __name__ == '__main__':\n    app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def extract_words(word_list, given_letter):\n    extracted_words=[]\n    for word in word_list:\n        if word[0]==given_letter:\n            extracted_words.append(word)\n    return extracted_words but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calc_sum(a, b): \n    return a + b\n\nsum = 0 \nfor i in range(5): \n    sum += calc_sum(i, i + 1)\n\nprint(sum) \n\n# Suggested fix:\nsum = 0 \nfor i in range(0, 5):    # Use the range(start, stop) syntax\n    sum += sum + calc_sum(i, i + 1)\n\nprint(sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Initialize one variable to store result\nresult = 0\n\n# Use a loop to iterate through the given range\nfor num in range(10, 20):\n    result += num\n\n# Print the result\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findSmallest(arr):\n    smallest = arr[0]\n    for i in arr:\n        if i < smallest:\n            smallest = i\n    return smallest\n\nfindSmallest([3, 5, 2, 1, 4])\n# Output: 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: number = 92\n\nif (number % 7) == 0:\n    print(\"The number is divisible by 7\")\nelse:\n    print(\"The number is not divisible by 7\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Customer:\n\ndef __init__(self, name, email, phone_number):\n self.name = name\n self.email = email\n self.phone_number = phone_number\n\ndef getName(self):\n return self.name\n\ndef getEmail(self):\n return self.email\n\ndef getPhoneNumber(self):\n return self.phone_number but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password(length):\n password = \"\"\n for i in range(length):\n password += random.choice(string.ascii_letters + string.digits + string.punctuation)\n return password but is not the same. just give one example and only return the code."}
