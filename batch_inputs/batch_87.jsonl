{"prompt": "make some code that functions the same as the following code: # importing the requests library \nimport requests \n\n# api-endpoint \nURL = \"http://www.example.com\"\n\n# sending get request and saving the response as response object \nr = requests.get(url = URL) \n\n# extracting data in json format \ndata = r.text \n\n# printing the output \nprint(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def prime_factorization(number):\n    i = 2\n    factors = []\n    while i * i <= number:\n        if number % i:\n            i += 1\n        else:\n            number //= i\n            factors.append(i)\n    if number > 1:\n        factors.append(number)\n    return factors\n\nprime_factorization(number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password():\n    password_length = 8\n    all_chars = string.ascii_letters + string.digits + string.punctuation\n    password_string = ''.join(random.choice(all_chars) for i in range(password_length))\n\n    return password_string\n\ndef has_number(password):\n    return any(letter.isdigit() for letter in password)\n\ndef has_lowercase(password):\n    return any(letter.islower() for letter in password)\n\ndef has_uppercase(password):\n    return any(letter.isupper() for letter in password)\n\ndef has_special_char(password):\n    return any(letter in string.punctuation for letter in password)\n\nwhile True:\n    password = generate_password()\n\n    if(has_number(password) and has_lowercase(password) and has_uppercase(password) and has_special_char(password)):\n       print('Password generated:', password)\n       break but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Statement Type: Print Statement. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\n\ndef remove_punctuation(sentence):\n    translator = str.maketrans('', '', string.punctuation)\n    return sentence.translate(translator)\n\n#Test\nprint(remove_punctuation(\"This is a sentence; with, punctuation.\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_to_binary(nums):\n    binary = []\n    for num in nums:\n        binary.append(bin(num))\n    return binary\n\nresult = list_to_binary([3, 8, 6])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: combined = [{'a': 'b', 'c'}, {'d': 'e', 'f': 'g'}, {'h': 'i', 'j' : 'k'}, {'l': 'm'}] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_maze(m, n):\n    # Create an empty maze\n    maze = [[0] * n for _ in range(m)]\n    # Generate walls randomly\n    for i in range(m):\n        for j in range(n):\n            if random.randint(0, 1) == 1:\n                maze[i][j] = 1\n    # Generate the exit and entrance\n    maze[0][0] = 0\n    maze[m-1][n-1] = 0\n \n    # Use a breadth-first search algorithm to traverse the maze\n    # and find the path to the exit\n    start = (0, 0)\n    stack = []\n    stack.append(start)\n \n    while stack:\n        current = stack.pop()\n        i, j = current\n        if i == m-1 and j == n-1:\n            break\n        if i > 0 and maze[i-1][j] == 0:\n            stack.append((i-1, j))\n            maze[i-1][j] = 2\n        if i < m-1 and maze[i+1][j] == 0:\n            stack.append((i+1, j))\n            maze[i+1][j] = 2\n        if j > 0 and maze[i][j-1] == 0:\n            stack.append((i, j-1))\n            maze[i][j-1] = 2\n        if j < n-1 and maze[i][j+1] == 0:\n            stack.append((i, j+1))\n            maze[i][j+1] = 2\n \n    # Generate a unique representation of the maze\n    # 1 is for walls, 0 is for paths, 2 is for visited paths\n    for i in range(m):\n        s = ''\n        for j in range(n):\n            s += str(maze[i][j])\n        print(s)\n\nif __name__ == '__main__':\n    # Generate the random 5 x 5 maze\n    generate_maze(5, 5) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nImplement a stack data structure in Python.\n\"\"\"\n\nclass Stack(object):\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        if not self.is_empty():\n            return self.items.pop()\n \n    def peek(self):\n        if not self.is_empty():\n            return self.items[-1]\n \n    def is_empty(self):\n        return len(self.items) == 0\n \n    def size(self):\n        return len(self.items) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(nums):\n  new_list = []\n  for num in nums:\n    if num not in new_list:\n      new_list.append(num)\n  return new_list\n\nprint(remove_duplicates([1,2,3,4,2,2,4])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_key_by_value(dictionary, value):\n    keys_to_remove = []\n    for key, val in dictionary.items():\n        if val == value:\n            keys_to_remove.append(key)\n\n    for key in keys_to_remove:\n        del dictionary[key]\n    return dictionary but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def highest_value(d):\n    key, highest_val = None, -float(\"inf\")\n    for k, val in d.items():\n        if val > highest_val:\n            key, highest_val = k, val\n    return key\n\nhighest_key = highest_value(my_dict)\nprint(highest_key) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: celcius = 25\nfahrenheit = 77\nprint (\"{0}\u00b0 celcius is {1}\u00b0 fahrenheit\".format(celcius, fahrenheit)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to print a directory of a given folder \n\n\nimport os \n\n# Function to get Directory Listing \ndef directoryListing(dirname): \n\n\t# Create list to hold filenames \n\tfilenames = os.listdir(dirname) \n\n\t# Print the Directory Contents \n\tprint(\"Directory contents of \"+dirname +\": \") \n\tfor file in filenames: \n\t\tprint(file) \n\n# Driver Code \nif __name__ == '__main__': \n\n\t# Provide the relative path \n\tdirname = '.'\n\n\t# Calling Directory Listing Function \n\tdirectoryListing(dirname) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Contact:\n    def __init__(self, name, email, phone):\n        self.name = name\n        self.email = email\n        self.phone = phone but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_rep(num):\n    binary_string = \"\"\n    while num>0:\n        remainder = num%2\n        binary_string = str(remainder) + binary_string\n        num = num//2\n\n    print(binary_string)\n\nbinary_rep(23) # prints 10111 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def split_string(string, delimiter):\n    return string.split(delimiter) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def modify_solution(solution, requirements):\n code_lines = solution.splitlines()\n code_lines.pop()\n code_lines.append(\"item_index = item_list.index(new_item)\")\n code_lines.append(\"return item_index\")\n return \"\\n\".join(code_lines) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def evaluate(expr):\n    return eval(expr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max_min(numbers):\n    max_num = float(\"-inf\")\n    min_num = float(\"inf\")\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n    return (max_num, min_num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import operator\n\nops = {\n \"+\": operator.add,\n \"-\": operator.sub,\n \"*\": operator.mul,\n \"/\": operator.truediv\n}\n\nwhile True:\n print(\"\\nEnter 'q' to exit.\")\n num1 = input(\"\\nEnter a number: \")\n if num1 == 'q':\n break\n op = input(\"Enter an operator: \")\n num2 = input(\"Enter another number: \")\n \n answer = ops[op](float(num1), float(num2))\n print(\"The answer is:\", answer) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.tree import DecisionTreeClassifier\n\nX = [['basketball'],[\u2018tennis ball']]\ny = ['ball', 'ball']\n\nclf = DecisionTreeClassifier()\nclf.fit(X,y)\n\nprediction = clf.predict([['basketball']])\nprint(prediction)\n# Output: ['ball'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from django.db import models\n\n# Create your models here.\nclass Post(models.Model):\n title = models.CharField(max_length=255)\n text = models.TextField()\n\nclass Comment(models.Model):\n post = models.ForeignKey(Post, on_delete=models.CASCADE)\n text = models.TextField()\n\n# In your migrations file:\n\nfrom django.db import migrations, models\n\ndef create_posts_and_comments(apps, schema_editor):\n Post = apps.get_model('app', 'Post')\n Comment = apps.get_model('app', 'Comment')\n\n post = Post.objects.create(\n title='My first post',\n text='Hello world!'\n )\n\n Comment.objects.create(\n post=post,\n text='Nice post!'\n )\n\nclass Migration(migrations.Migration):\n dependencies = [\n # other dependencies\n ]\n\n operations = [\n migrations.CreateModel(\n name='Post',\n fields=[\n ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n ('title', models.CharField(max_length=255)),\n ('text', models.TextField()),\n ],\n ),\n migrations.CreateModel(\n name='Comment',\n fields=[\n ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n ('post', models.ForeignKey(on_delete=models.CASCADE, to='app.Post')),\n ('text', models.TextField()),\n ],\n ),\n migrations.RunPython(create_posts_and_comments)\n ] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_even(number):\n    if (number % 2 == 0):\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef binomial(n, p):\n  return np.random.binomial(n, p)\n\ndist = binomial(n, p) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_list(lst):\n  return lst[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nprint(\"Let's play a guessing game!\")\nnumber = random.randint(1, 10)\n\nguess = 0\nwhile guess != number:\n guess = int(input(\"Guess a number between 1 and 10: \"))\n \n if guess == number:\n print(\"You got it!\")\n else:\n print(\"Try again.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculateLevenshteinDistance(str1, str2): \n    n = len(str1)\n    m = len(str2)\n  \n    # Create a matrix to store results \n    dp = [[0 for x in range(m + 1)] for x in range(n + 1)] \n\n    # Initialize the first row and column with the difference of lengths\n    for i in range(n + 1): \n        for j in range(m + 1): \n    \n            if i == 0: \n                dp[i][j] = j\n            elif j == 0: \n                dp[i][j] = i\n  \n    # Iterate through the matrix and replace the \n    # cells with the required edit distance\n    for i in range(1, n + 1): \n        for j in range(1, m + 1): \n            if str1[i-1] == str2[j-1]: \n                dp[i][j] = dp[i-1][j-1]\n            else: \n                dp[i][j] = 1 + min(dp[i][j-1],        # Insert \n                                   dp[i-1][j],        # Remove \n                                   dp[i-1][j-1])    # Replace \n  \n    return dp[n][m] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_numbers(nums):\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            if nums[i] > nums[j]:\n                temp = nums[i]\n                nums[i] = nums[j]\n                nums[j] = temp\n    return nums but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isValid(s):\n    stack = []\n    dict = {\"]\":\"[\", \"}\":\"{\", \")\":\"(\"}\n    for char in s:\n        if char in dict.values():\n            stack.append(char)\n        elif char in dict.keys():\n            if stack == [] or dict[char] != stack.pop():\n                return False\n        else:\n            return False\n    return stack == []\n\nprint(isValid('[[{{}}]]')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_words(words):\n    words.sort()\n    return words\n\nwords = [\"Computer\", \"Science\", \"Engineering\", \"Technology\"]\nsorted_words = sort_words(words)\nprint(sorted_words) # Output: ['Computer', 'Engineering', 'Science', 'Technology'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import smtplib \n\n# Creates SMTP session \nserver = smtplib.SMTP('smtp.gmail.com', 587)\n\n# Start TLS for security \nserver.starttls() \n\n# Authentication \nserver.login('your_email_address', 'password') \n\n# Message to be sent\nmessage = 'This is a test email'\n\n# sending the mail \nserver.sendmail('sender_email_address', 'receiver_email_address', message) \n\n# terminating the session \nserver.quit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_list(lst): \n    return lst[::-1] \n  \nlst = [1, 3, 5, 6, 10] \nprint(reverse_list(lst)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def largest_prime_factor(n):\n    # Initialize maximum prime factor\n    max_prime = -1\n    # Print the number of 2s that divide n\n    while n % 2 == 0: \n        max_prime = 2\n        n /= 2  # equivalent to n = n / 2\n    # n must be odd at this point, \n    # thus skip the even numbers and \n    # iterate only for odd integers\n    for i in range(3, int(math.sqrt(n))+1, 2): \n        while n % i == 0: \n            max_prime = i \n            n = n / i \n    # This condition is to handle the case \n    # when n is a prime number greater than 2\n    if n > 2: \n        max_prime = n \n\n    return int(max_prime)\n\n# Driver code \nn = 21\nprint(largest_prime_factor(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from html.parser import HTMLParser\n\nclass LinkParser(HTMLParser):\n    def handle_starttag(self, tag, attrs):\n        if tag == 'a':\n            for (attrs,value) in attrs:\n                if attrs=='href':\n                    print(value)\n\nparser = LinkParser()\nparser.feed(html) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: function sum(a, b) {\n return a + b;\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # function to check whether a number is prime or not\ndef is_prime(num): \n    for i in range(2,num): \n        if (num % i == 0): \n            return False\n    else: \n        return True\n\n# list to store prime numbers\nprimes = []\n\n# create a list of prime numbers\nfor num in range(2,100): \n    if (is_prime(num)): \n        primes.append(num)\n\n# print the first 10 prime numbers\nfor x in range(10):\n    print(primes[x]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n# -*- coding: utf-8 -*-\n'''\nJos\u00e9 F. R. Fonseca\nSee Attached License file\n\nControls the access to the disk. Defines the class DIskAccessControl,\nan object to control the disk files. Multithread-writes the files\n'''\n\nimport ast\nimport os\nimport time\nfrom linecache import getline\nfrom threading import Thread\n\n'''\nONLY WRITES TO THE FILE WHEN THE CACHE OF LINES TO WRITE OVERCOMES\nTHIS MUCH BYTES, or if it is the last batch of files to be written.\n'''\nFILEACCESS_THRASHOLD = 1024*1024/32\n\n'''\nCLASSES\n'''\nclass DiskAccessControl():  # @IgnorePep8\n    '''\n    Control the access to the disk, being the middleware to read and write the\n    index files\n    '''\n    def __init__(self, invertedIndexFileName, fileLen=None,\n                 onMemInd=None, nameDict=None, mods=None):\n        '''\n        Instantiates the class as the only reference to the index files\n        :param invertedIndexFileName: string, name of the index file\n        :param fileLen: int, original number of lines of the index file, when\n        known\n        :param onMemInd: dictionary, on-memory index that translates terms\n        into file positions\n        :param nameDict: dictionary, on-memory index that translates the name\n        of each file indexed into a hash\n        into a hash\n        :param mods: dictionary, side-loaded modifications to be put into the\n        index manually.\n        '''\n        # loads the name of the index file\n        self.GENERATED_INVERTED_INDEX = invertedIndexFileName\n\n        # if there is a parameter fileLen, uses it. if not, counts the number\n        # of lines in the indexFile\n        if fileLen is None:\n            # print \"GETTING THE FILE # OF LINES!\"\n            lineNum = 0\n            # reads every line, and counts the number of lines in the index file @IgnorePep8\n            with open(self.GENERATED_INVERTED_INDEX, \"r\") as indFile:\n                for lineNum, dummy in enumerate(indFile):\n                    pass\n                self.fileLength = lineNum + 1\n        else:\n            self.fileLength = fileLen\n\n        # if there is a parameter onMemInd, uses it. if not, loads it from the\n        # memory dump file metaindex\n        if onMemInd is None:\n            print \"FILLING MEMORY INDEX WITH LAST SESSION'S!\"\n            # OnMemoryIndex: dictionary that maps WORD to HashWord\n            # Loads the metaindex file into main memory, into onMemoryIndex attribute @IgnorePep8\n            with open(\"metaIndex-\"+self.GENERATED_INVERTED_INDEX, \"r\") as metaindex:  # @IgnorePep8\n                data = metaindex.read()\n                self.onMemoryIndex = ast.literal_eval(data)\n        else:\n            self.onMemoryIndex = onMemInd\n\n        # if there is a parameter namesDict, uses it. if not, loads it from the\n        # memory dump file namesDict, mapping a file name to its hash\n        if nameDict is None:\n            print \"FILLING NAMES DICTIONARY WITH LAST SESSION'S!\"\n            # Loads the namesDict file into main memory, into namesDict attribute @IgnorePep8\n            with open(\"namesDict-\"+self.GENERATED_INVERTED_INDEX, \"r\") as namesDict:  # @IgnorePep8\n                data = namesDict.read()\n                self.namesDictionary = ast.literal_eval(data)\n        else:\n            self.namesDictionary = nameDict\n\n        # if there is a parameter mods, uses it. if not, creates a new empty\n        # python dictionary to retain on-memory changes to the index\n        if mods is None:\n            self.modifications = {}\n        else:\n            self.modifications = mods\n\n    '''\n    METHODS ###############################################\n    '''\n\n    def getIndexLine(self, word):\n        '''\n        GETS a line of the index file, containing the inverted list of the word\n        provided. If inexistent, returns an empty list\n        :return a list containing the index data of the word requested.\n        It may be: the inverted list on the index, the modifications done\n        to such list in memory, or an empty list for a new term to be indexed\n        :param word: string to retrieve the index data of it, a term\n        '''\n        # if the word is on the onMemoryIndex, and thereby on the file index,\n        if word in self.onMemoryIndex.keys():\n            # retrieves the hash of the word in wrd\n            wrd = self.onMemoryIndex[word]\n            # if that word has already been modified, its modifications will be\n            # on main memory, and do not need to be retrieved from the disk.\n            if wrd not in self.modifications.keys():\n                try:\n                    # retrieves a list of the data in the line of the index\n                    # file on disk that contains the inverted index of the\n                    # word, given its hash. The value of wrd must be\n                    # summed with 1 because there is no line 0 on files\n                    return ast.literal_eval(getline(self.GENERATED_INVERTED_INDEX, int(wrd)+1).split(\":::\")[1])  # @IgnorePep8\n                # prints-out eventual exceptions, as the hash searched in\n                # the index file, and the data recovered from it, as a string\n                # separated by \"(|||)\" rather than spaces\n                except:\n                    print wrd, \"(|||)\", getline(self.GENERATED_INVERTED_INDEX, int(wrd)+1)  # @IgnorePep8\n            else:\n                # returns the modifications to the index line, already on memory @IgnorePep8\n                return self.modifications[wrd]\n        # if the word searched is not in the index,\n        else:\n            # opens the index file, generates a new hash for the word to be\n            # indexed, and writes an empty list to the index file at the\n            # words's future position. Returns an empty list\n            with open(self.GENERATED_INVERTED_INDEX, \"a\") as indFile:\n                self.onMemoryIndex[word] = str(len(self.onMemoryIndex.keys()))  # @IgnorePep8\n                indFile.write(self.onMemoryIndex[word]+\":::\"+\"[]\"+\"\\n\")\n            self.fileLength += 1\n            return []\n\n    def pushIntoIndexFile(self, fileIndexedName, word, wordIndexTouple):\n        '''\n        Pushes the preshly produced inverted list of a term into the index\n        :param fileIndexedName: string, name of the file just indexed\n        :param word: string, term to be pushed into the index\n        :param wordIndexTouple: touple, containing the number of elements\n        in the positions list, and a (integer) positions list of occurences of\n        the term in the file indexed\n        '''\n        # gets the line of the index for the term pushed\n        indexLine = self.getIndexLine(word)\n        # if the file pushed has already been indexed before, recovers its\n        # hash name\n        if fileIndexedName in self.namesDictionary.keys():\n            hashName = self.namesDictionary[fileIndexedName]\n        # if not, creates a new hash for the file name, as a number\n        else:\n            self.namesDictionary[fileIndexedName] = hashName = str(len(self.namesDictionary.keys()))  # @IgnorePep8\n        try:\n            # includes the index of the new file pushed into the respective\n            # line in the on memory inverted list of the term, avoiding\n            # repetitions. Includes the name of the file, the number of\n            # occurences and the positions the term indexed happens to occur.\n            indexLine.append((hashName, wordIndexTouple[0], (list(set(wordIndexTouple[1]))), ))  # @IgnorePep8\n            # includes the freshly produced new index for the term in the\n            # on- memory modifications to be written on disk\n            self.modifications[self.onMemoryIndex[word]] = indexLine\n        # reveals an I/O error. bureaucracy\n        except IndexError:\n            print \"Got an IndexError!\"+str((word, self.onMemoryIndex[word], indexLine, ))  # @IgnorePep8\n\n    def merge(self, outerModifications):\n        '''\n        Pushes provided modifications (made by another thread, for example,\n        into this instance's modifications list\n        :param outerModifications: dictionary, mapping terms to inverted lists,\n        are modifications to the index file imported from another instance\n        '''\n        # for each key of the outer modifications dictionary,\n        for outKey in outerModifications.keys():\n            if outKey in self.modifications.keys():\n                # if the key is on the current modifications list, joins the\n                # contents of both lists, and sorts by the hash of the terms\n                self.modifications[outKey].extend(outerModifications[outKey])\n                self.modifications[outKey] = sorted(self.modifications[outKey],\n                                                    key=lambda mod: int(mod[0]))  # @IgnorePep8\n            # if the outer key is not on the current modifications list,\n            # adds to it\n            else:\n                self.modifications[outKey] = outerModifications[outKey]\n\n    def dumpMetafiles(self):\n        '''\n        Dumps the on-memory metafiles, the dictionaries mapping terms to file\n        positions (hashes) and file names to hashes, to disk files.\n        '''\n        with open(\"metaIndex-\"+self.GENERATED_INVERTED_INDEX, \"w\") as metaindex:  # @IgnorePep8\n            metaindex.write(str(self.onMemoryIndex))\n        with open(\"namesDict-\"+self.GENERATED_INVERTED_INDEX, \"w\") as namesDict:  # @IgnorePep8\n            namesDict.write(str(self.namesDictionary))\n\n    def dumpMemory(self):\n        '''\n        Dumps the metafiles and writes the modifications to the index. It is,\n        by far, the most time-costly operation on the entire program, what was\n        to be expected, since it involves heavy file writting and reading.\n        '''\n        # Creates a new thread to write the metafiles concurrently\n        metafileWriter = Thread(target=self.dumpMetafiles)\n        metafileWriter.start()\n        # string writting buffer, to be written on the file\n        printString = \"\"\n        # for each modification on memory, got in order, writes on the string\n        # buffer, and when it gets full, writes to a temporary disk file the\n        # results of merging the modification on each line of the index,\n        # and the unmodified lines, ordered by the hashes of the terms\n        modKeys = sorted([k for k in self.modifications.keys()])\n        with open(self.GENERATED_INVERTED_INDEX, \"r\") as oldIndexFile:  # @IgnorePep8\n            with open(\"TEMP_\"+self.GENERATED_INVERTED_INDEX, \"w+\") as newIndexFile:  # @IgnorePep8\n                for line in oldIndexFile:\n                    # reads the data in the old index file line\n                    lineNum = line.split(\":::\")[0]\n                    # if the modifications line is to be written in the string\n                    # writing buffer, because the read line was modified\n                    if lineNum in modKeys:  # @IgnorePep8\n                        printString += lineNum+\":::\"+str(self.modifications[lineNum])+\"\\n\"  # @IgnorePep8\n                    else:\n                        # if the original index line is to be written on the\n                        # file writing buffer, saves it\n                        printString += line\n                    # if the buffer is full to the threshold, writes it to\n                    # the disk file\n                    if len(printString) >= FILEACCESS_THRASHOLD:\n                        newIndexFile.write(printString)\n                        printString = \"\"\n        # renames the old inverted Index to become a backup\n        os.rename(self.GENERATED_INVERTED_INDEX, \"Backup_\"+str(time.time())+\"_\"+self.GENERATED_INVERTED_INDEX)  # @IgnorePep8\n        # rename the new to replace the old one\n        os.rename(\"TEMP_\"+self.GENERATED_INVERTED_INDEX, self.GENERATED_INVERTED_INDEX)  # @IgnorePep8\n        # assures that the metafile writer thread is done writing\n        metafileWriter.join()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class BankAccount:\n \n    def __init__(self, balance=0.0):\n        self.balance = balance\n \n    def deposit(self, amount):\n        self.balance += amount\n        return self.balance\n \n    def withdraw(self, amount):\n        self.balance -= amount\n        return self.balance but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(string):\n    return string[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: dictionary = { \n\"John Smith\": { \n    \"phone\": \"123-456-7890\", \n    \"address\": \"123 Main St.\", \n    \"city\": \"Seattle\", \n    \"state\": \"WA\"\n} \n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import Counter and open file\nfrom collections import Counter\nwith open('text.txt','r') as file:\n    # split file into words\n    words = file.read().split()\n    \n    # count and sort words\n    count_words = Counter(words)\n    sorted_count_words = count_words.most_common()\n    \n    # get the most frequent word\n    most_frequent_word = sorted_count_words[0][0]\n    number_of_occurences = sorted_count_words[0][1]\n    \n    # print results\n    print('The most frequently used word is \"{}\" with {} occurence(s).'.format(most_frequent_word, number_of_occurences)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [\"Apple\", \"Pear\", \"Banana\", \"Orange\"]\n\nfor item in reversed(my_list):\n print(item) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(11):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    if n == 0:\n        return 1\n    else: \n        return n * factorial(n-1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(a, b):\n if b == 0:\n return a\n   \n return gcd(b, a % b)\n \na = 21\nb = 15\n\nprint(gcd(a, b)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: user_preferences = {\n    'language': 'english',\n    'font_size': 12,\n    'background_color': '#FFFFFF'\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\ndata = [2, 3, 5, 6, 8, 4, 2, 4, 6, 9]\n\nplt.hist(data)\nplt.title(\"Histogram of Data\")\nplt.xlabel(\"Data Values\")\nplt.ylabel(\"Frequency\")\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def lcs(X, Y): \n    # find the length of the strings\n    m = len(X)\n    n = len(Y)\n  \n    # declaring the array for storing the dp values \n    L = [[None]*(n+1) for i in range(m+1)] \n  \n    \"\"\"Following steps build L[m+1][n+1] in bottom up fashion \n    Note: L[i][j] contains length of LCS of X[0..i-1] \n    and Y[0..j-1]\"\"\"\n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n  \n    # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1] \n    return L[m][n] \n\n# Driver program \nX = \"lmnopq\"\nY = \"abclmnopq\"\nprint(\"Length of LCS is \", lcs(X, Y)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def unique_list(lst):\n    unique = []\n    for item in lst:\n        if item not in unique:\n            unique.append(item)\n    return unique but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python code for Quick Sort\ndef quickSort(arr):\n    less = []\n    pivots = []\n    more = []\n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[0]\n        for i in arr:\n            if i < pivot:\n                less.append(i)\n            elif i > pivot:\n                more.append(i)\n            else:\n                pivots.append(i)\n        less = quickSort(less)\n        more = quickSort(more)\n        return less + pivots + more\n \n# Driver Code to test above\narr = [3, 4, 7, 1, 8, 5]  \n  \n# Function call \nsorted_array = quickSort(arr)  \n  \n# Print the sorted array  \nprint(sorted_array) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Get the specified URL\nurl = 'https://example.com/'\nresponse = requests.get(url)\n\n# Parse the response\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# Extract the desired data\ntitle = soup.find('title').text\nbody = soup.find('body').text\n\n# Print the extracted data\nprint(title)\nprint(body) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate(lst):\n    res = []\n    for i in range(1, len(lst) + 1):\n        for j in range(len(lst) - i + 1):\n            res.append(lst[j: j + i])\n    return res but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findMax(arr):\n    max_number = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_number:\n            max_number = arr[i]\n    return max_number\n\narr = [1, 4, 9, 3, 6, 5]\nmax_number = findMax(arr)\nprint(\"The maximum element in the array is:\", max_number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sumOfList(list):\n   if len(list) == 1:\n       return list[0]\n   else:\n       return list[0] + sumOfList(list[1:]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\nclass BinarySearchTree:\n    def __init__(self):\n        self.root = None\n\n    def add(self, val):\n        new_node = Node(val)\n        if not self.root:\n            self.root = new_node\n        else:\n            curr = self.root\n            while True:\n                if val < curr.val:\n                    if not curr.left:\n                        curr.left = new_node\n                        break\n                    curr = curr.left\n                else:\n                    if not curr.right:\n                        curr.right = new_node\n                        break\n                    curr = curr.right\n        return self.root\n \n    def search(self, val):\n        curr = self.root\n        while curr:\n            if val < curr.val:\n                curr = curr.left\n            elif val > curr.val:\n                curr = curr.right\n            else:\n                return curr\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def strip_whitespace(string):\n  return string.replace(' ', '') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num = int(input(\"Enter an integer: \"))\nprint(\"The number is:\", num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Function to web scrape news from CNN\ndef scrape_cnn():\n    url = \"https://www.cnn.com/\"\n    page = requests.get(url)\n    if page.status_code != 200:\n        return False\n    soup = BeautifulSoup(page.content, 'html.parser')\n    headlines = []\n    for headline in soup.find_all('h3', {'class': 'cd__headline'}):\n        headlines.append(headline.get_text().strip())\n    return headlines\n\n# Call the function to scrape news from CNN\nheadlines = scrape_cnn()\n\n# Print out the headlines\nfor headline in headlines:\n    print(headline) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string \n  \ndef rot13_encode(plaintext, key): \n    ciphertext = \"\" \n    for char in plaintext: \n        if char in string.ascii_lowercase: \n            ciphertext += chr((ord(char) - key - 97) % 26 + 97)\n        elif char in string.ascii_uppercase: \n            ciphertext += chr((ord(char) - key - 65) % 26 + 65) \n        else: \n            ciphertext += char \n    return ciphertext \n  \nprint(rot13_encode(\"attack at dawn\", 13)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize_equation(a, b, c, d):\n    # calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    x1 = (2*c)/(-b + (discriminant**0.5))\n    x2 = (-b - (discriminant**0.5))/(2*a)\n    \n    # return the optimized values\n    return (x1, x2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def num2words(number): \n    ones = [\"\", \"one \",\"two \", \"three \", \"four \", \n            \"five \", \"six \", \"seven \", \"eight \", \n            \"nine \", \"ten \", \"eleven \", \"twelve \", \n            \"thirteen \", \"fourteen \", \"fifteen \", \n            \"sixteen \", \"seventeen \", \"eighteen \", \n            \"nineteen \"] \n    tens = [\"\", \"\", \"twenty \", \"thirty \", \"forty \", \n            \"fifty \", \"sixty \", \"seventy \", \"eighty \", \n            \"ninety \"] \n    if(number == 0): \n        return \"zero\"\n    if(number < 0): \n        return \"minus \" + num2words(-1 * number) \n    if((number/1000) > 0): \n        return num2words(number/1000) + \"thousand \" + num2words(number%1000) \n    if((number / 100) > 0): \n        return num2words(number/100) + \"hundred \" + num2words(number%100) \n    if((number/10) > 1):\n        return tens[int(number//10)] + num2words(number % 10) \n    else:\n        return ones[int(number)]\n\nprint(num2words(213)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def intersection(list1, list2): \n    intersection_elements = set(list1) & set(list2) \n    return list(intersection_elements)\n\nintersection_list = intersection(list1, list2)\nprint(intersection_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: d = {hello:1, goodbye:2, test:3}\n\nmax_key = None\nmax_value = 0\nfor key, value in d.items():\n    if value > max_value:\n        max_key = key\n        max_value = value\n\nprint(max_key) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def triangle_area(side_a, side_b, side_c):\n    \"\"\"Calculates the area of a triangle using Heron's formula.\n\n    Args:\n      side_a (float): The length of the first side.\n      side_b (float): The length of the second side.\n      side_c (float): The length of the third side.\n\n    Returns:\n    float: The calculated area of the triangle.\n    \"\"\"\n\n    # Compute the semi-perimeter\n    s = (side_a + side_b + side_c) / 2\n    \n    # Calculate the area using the given sides\n    return (s * (s - side_a) * (s - side_b) * (s - side_c)) ** 0.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\n#----------------------------------------------------------------\n#\n#------------------------------------------------------\n# Usage:\n#\n#------------------------------------------------------\n# Copyright 2007, Oliver White\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n#------------------------------------------------------\nimport sys\nimport os\nfrom xml.sax import make_parser, handler\nimport xml\nfrom struct import *\n\nclass BinaryOsm(handler.ContentHandler):\n  def __init__(self):\n    pass\n\n  def encode(self, filename, output):\n    self.nextKID = 3\n    self.nextVID = 1\n    self.tags = {}\n    self.values = {}\n\n    if(not os.path.exists(filename)):\n      print \"No such data file %s\" % filename\n      return\n    try:\n      self.out = open(output, \"wb\")\n      parser = make_parser()\n      parser.setContentHandler(self)\n      parser.parse(filename)\n      self.out.write(\"X\")\n      self.out.close()\n    except xml.sax._exceptions.SAXParseException:\n      print \"Error loading %s\" % filename\n\n  def startElement(self, name, attrs):\n    \"\"\"Handle XML elements\"\"\"\n    if(name =='node'):\n      self.meta = { \\\n        'id':int(attrs.get('id')),\n        'lon':float(attrs.get('lat')),\n        'lat':float(attrs.get('lon'))\n        }\n      self.tags = {}\n    elif(name == 'way'):\n      self.meta = {'id':int(attrs.get('id'))}\n      self.tags = {}\n      self.waynodes = []\n    elif(name == 'relation'):\n      self.tags = {}\n    elif name == 'nd':\n      \"\"\"Nodes within a way -- add them to a list\"\"\"\n      self.waynodes.append(int(attrs.get('ref')))\n    elif name == 'tag':\n      \"\"\"Tags - store them in a hash\"\"\"\n      k,v = (attrs.get('k'), attrs.get('v'))\n      if not k in ('created_by'):\n        self.tags[k] = v\n\n  def endElement(self, name):\n    \"\"\"Handle ways in the OSM data\"\"\"\n    writeTags = False\n    if(name =='node'):\n      data = 'N' + pack(\"L\", self.meta['id']) + self.encodeLL(self.meta['lat'], self.meta['lon'])\n      self.out.write(data)\n      writeTags = True\n\n    elif(name == 'way'):\n      data = 'W' + pack(\"L\", self.meta['id'])\n      self.out.write(data)\n      self.out.write(pack('H', len(self.waynodes)))\n      for n in self.waynodes:\n        self.out.write(pack('L', n))\n      writeTags = True\n\n    if(writeTags):\n      n = len(self.tags.keys())\n      if(n > 255):\n        # TODO:\n        print \"Error: more than 255 tags on an item\"\n        return\n      self.out.write(pack('B', n))\n      for k,v in self.tags.items():\n        self.encodeTag(k, False, k)\n        volatile = k in ('name','ref','ncn_ref','note','notes','description','ele','time','url','website','postal_code','image','source_ref','source:ref','source:name','source_ref:name',\"FIXME\",\"fixme\",\"place_numbers\")\n        self.encodeTag(v,volatile,k)\n\n  def encodeTag(self,text,volatile,key):\n    text = text.encode('utf8')\n    if(not volatile):\n      try:\n        ID = self.values[text]\n        self.out.write(pack('H', ID))\n      except KeyError:\n        if(self.nextKID >= 65535):\n          # TODO\n          print \"Error: too many stored tags!\"\n          sys.exit()\n        print \"%d: %s %s\" % (self.nextKID, key,text)\n        self.values[text] = self.nextKID\n        self.out.write(pack('HHB', 1, self.nextKID, len(text)))\n        self.out.write(text)\n        self.nextKID = self.nextKID + 1\n    else:\n      self.out.write(pack('HB', 0, len(text)))\n      self.out.write(text)\n      #print \"Storing simple %s\" % (text)\n\n  def encodeLL(self,lat,lon):\n    pLat = (lat + 90.0) / 180.0\n    pLon = (lon + 180.0) / 360.0\n    iLat = self.encodeP(pLat)\n    iLon = self.encodeP(pLon)\n    return(pack(\"II\", iLat, iLon))\n\n  def encodeP(self,p):\n    i = int(p * 4294967296.0)\n    return(i)\n\n# Parse the supplied OSM file\nif __name__ == \"__main__\":\n  print \"Loading data...\"\n  Binary = BinaryOsm()\n  Binary.encode(sys.argv[1], sys.argv[2])\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_item(arr, item):\n    return [i for i in arr if i != item]\n\narr = [1,2,3,4]\nnew_arr = remove_item(arr, 3)\nprint(new_arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max_element(arr):\n  \n  max = arr[0]\n  \n  for i in range(1, len(arr)):\n    # compare current max with the next array element\n    if arr[i] > max:\n      max = arr[i]\n  \n  return max\n\narr = [2, 7, 1, 6, 5]\nmax_element = find_max_element(arr)\nprint(\"Max element in the array:\", max_element) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef roll_dice():\n    dice = random.randint(1, 8)\n    return dice\n\ndice = roll_dice()\nprint(f\"You rolled a {dice}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import necessary libraries\nimport numpy as np\nfrom keras.layers import Dense\nfrom keras.models import Sequential\n\n# define model\nmodel = Sequential()\n# first layer\nmodel.add(Dense(16, activation='relu', input_dim=2))\n# second layer\nmodel.add(Dense(8, activation='relu'))\n# output layer\nmodel.add(Dense(1, activation='sigmoid'))\n\n# compile the model\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num):\n for i in range(2, int(num**0.5) + 1):\n  if num % i == 0:\n   return False\n return True\n\ndef largest_prime_factor(n):\n for i in range(2, n + 1):\n  if n % i == 0 and is_prime(i):\n   lpf = i\n return lpf\n\nprint(largest_prime_factor(60))\n# Output: 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_element(arr):\n    \"\"\"\n    This function uses divide and conquer algorithm \n    to find the maximum element in a list\n    \"\"\"\n    # Base case\n    if len(arr) == 0:\n        return None\n\n    if len(arr) == 1:\n        return arr[0]\n\n    # Get the middle index of the array\n    mid_idx = len(arr) // 2\n\n    # Divide and Conquer\n    left_max = max_element(arr[:mid_idx])\n    right_max = max_element(arr[mid_idx:])\n\n    # Find the Maximum\n    if left_max > right_max:\n        return left_max\n    else:\n        return right_max but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import itertools\n\ndef powerset(lst):\n    powerset = []\n    for n in range(len(lst) + 1):\n        for subset in itertools.combinations(lst, n):\n            powerset.append(subset)\n    return powerset\n\narr = [1, 2, 3]\nprint(powerset(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_digits(n):\n  result = 0\n  while (n > 0):\n    result += n % 10;\n    n //= 10;\n  return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseSentence(sentence): \n    words = sentence.split(' ') \n  \n    newWords = [word[::-1] for word in words] \n      \n    newSentence = ' '.join(newWords) \n      \n    return newSentence \n  \nsentence = input(\"Enter a sentence: \")\nprint(reverseSentence(sentence)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def create_dict(tuples): \n  dictionary = {} \n  \n  for item in tuples: \n    dictionary[item[0]] = item[1]\n  \n  return dictionary \n  \ntuples = [(\"a\", \"b\"), (\"c\", \"d\"), (\"e\", \"f\")]\nprint(create_dict(tuples)) \n\n# Output\n{'a': 'b', 'c': 'd', 'e': 'f'} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\nemployees = [\n {'id': 1, 'name': 'John Doe', 'age': 30},\n {'id': 2, 'name': 'Jane Doe', 'age': 25}\n]\n\n@app.route('/employees/<int:employee_id>', methods=['GET'])\ndef get_employee(employee_id):\n employee = [employee for employee in employees if employee['id'] == employee_id]\n\n if len(employee) == 0:\n return jsonify({'message': 'Employee not found'})\n\n return jsonify({'employee': employee[0]})\n\napp.run(port=5000) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n\ndef generate_hopscotch_board(size):\n    board = []\n    for row in range(size):\n        board.append([])\n        for col in range(size):\n            board[row].append(random.randint(1,6))\n    return board\n\n# Generate a hopscotch board\nprint(generate_hopscotch_board(size)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: str = 'This is a sample string'\n\nnew_str = str.replace(' ', '*')\n\nprint(new_str) // This*is*a*sample*string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\n# input\nform_data = {\n 'firstname': 'Jane', \n 'lastname': 'Doe', \n 'email': 'janedoe@example.com', \n 'phone': '123-456-7890'\n}\n\n# process\nurl = 'https://example.com/register'\nresponse = requests.post(url, data=form_data)\n\n# output\nif response.status_code == 200:\n print('Registration was successful!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: results = {} \n\nfor animal in animals:\n name = animal[\"name\"]\n fur = animal[\"fur\"]\n \n # Group animals with a pale yellow fur.\n if fur == \"pale yellow\":\n if \"pale yellow\" not in results:\n results[\"pale yellow\"] = [] \n \n results[\"pale yellow\"].append(name)\n \n # Group animals with grey fur.\n elif fur == \"grey\":\n if \"grey\" not in results:\n results[\"grey\"] = [] \n \n results[\"grey\"].append(name)\n \n # Group animals with white fur and black spots.\n elif fur == \"white with black spots\":\n if \"white with black spots\" not in results:\n results[\"white with black spots\"] = [] \n \n results[\"white with black spots\"].append(name)\n \n # Group animals with pale yellow and brown spots.\n elif fur == \"pale yellow with brown spots\":\n if \"pale yellow with brown spots\" not in results:\n results[\"pale yellow with brown spots\"] = [] \n \n results[\"pale yellow with brown spots\"].append(name)\n \nprint(results) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def encrypt(string):\n    encrypted_string = \"\"\n    for i in range(len(string)):\n        char = string[i]\n        encrypted_string += chr(ord(char)+2)\n    return encrypted_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_in_range(number, lower_bound, upper_bound):\n    if (number >= lower_bound and number <= upper_bound):\n        return True\n    else:\n        return False\n\nnumber = 5\nlower_bound = 25\nupper_bound = 50\n\nin_range = check_in_range(number, lower_bound, upper_bound)\n\nif in_range:\n    print(\"Number is in given range.\")\nelse:\n    print(\"Number is not in given range.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_list(my_list):\n    rev_list = []\n    for val in reversed(my_list):\n        rev_list.append(val)\n    return rev_list\n\nreversed_list = reverse_list(my_list)\nprint(reversed_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def endswith(s, substring): \n    return s.endswith(substring) \n\n\ns = 'Hello World'\nsubstring = 'ld'\nprint(endswith(s, substring)) # prints True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \nimport string \n\nlength = 8\nrandom_str = ''.join(random.choices(string.ascii_letters + string.digits, k = length)) \nprint(random_str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Chatbot:\n def __init__(self):\n self.greeting_keywords = ('hi', 'hello', 'hey', 'hola')\n\n def check_for_greeting(self, sentence):\n for word in sentence.words:\n if word.lower() in self.greeting_keywords:\n return True\n\n def get_user_input(self):\n user_input = input('You: ')\n return user_input\n\n def respond(self, user_input):\n print('Chatbot: ', end='')\n if self.check_for_greeting(user_input):\n print('Hi there!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def edit_distance(str1, str2):\n    m = len(str1)\n    n = len(str2)\n\n    dp = [[ 0 for x in range(n+1)] for x in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n    \n    return dp[m][n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef gini_index(data):\n    data = np.array(data)\n    n_instances = data.shape[0]\n    sum_rows = data.sum(axis=1)\n    squares_sum_rows = np.square(sum_rows) \n    squared_sum_all = np.square(data).sum()\n    numerator = n_instances * squared_sum_all - np.sum(squares_sum_rows)\n    denominator = n_instances * sum_rows.sum()\n    return 1 - numerator/denominator\n\ndata = [[12,10,8],[8,7,6]]\nprint(\"Gini index:\", gini_index(data)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_document(doc, keyword):\n    # ensure that keyword is case insensitive\n    keyword = keyword.casefold()\n\n    # open the document\n    with open(doc, 'r') as f:\n        # read the document line by line\n        for line in f.readlines():\n            # lowercase the line\n            line = line.casefold() \n            # if the keyword is found in the line\n            if keyword in line:\n                # print the line\n                print(line)\n\n# an example document\ndoc = \"the_odyssey.txt\"\nkeyword = \"odyssey\"\nsearch_document(doc, keyword) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def predict(X_test):\n    predictions = []\n    for test_sample in X_test:\n        predictions.append(most_likely_outcome(test_sample))\n        \n    return predictions\n\ndef most_likely_outcome(test_sample):\n    probabilities = model.predict_proba(test_sample)\n    max_prob = 0.0\n    index = -1\n    for i in range(len(probabilities)):\n        if probabilities[i] > max_prob:\n            max_prob = probabilities[i]\n            index = i\n    \n    return index but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import statistics \nsequence = [3, -2, 4, 7, 10, 12, 11, -4, 8]\nmedian = statistics.median(sequence) \nprint(median) # Output: 7 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# Read the dataset\ndf = pd.read_csv('dataset.csv')\n\n# Get the number of rows and columns\nnum_rows, num_cols = df.shape\nprint('Number of rows: {}'.format(num_rows))\nprint('Number of columns: {}'.format(num_cols))\n\n# Get the data type of each column\ndata_types = df.dtypes.tolist()\nprint('Data type of columns: {}'.format(data_types))\n\n# Calculate the average of all numeric columns\nnumeric_columns = df.select_dtypes(include=['int64', 'float64']).columns.tolist()\navg = df[numeric_columns].mean().round(2)\nprint('Average of all numeric columns: {}'.format(avg))\n\n# Count the unique values for each column\nunique_values_count = {}\nfor col in df.columns:\n unique_values_count[col] = len(df[col].unique())\nprint('Unique values count: {}'.format(unique_values_count)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(\"Hello World\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\n\n# configure the database\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\ndb = SQLAlchemy(app)\n\n# create User model\nclass User(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(50), nullable=False)\n \n db.create_all()\n\n# create API endpoints\n@app.route('/users', methods=['POST'])\ndef create_user():\n user = User(name=request.json['name'])\n db.session.add(user)\n db.session.commit()\n return {'id': user.id}\n\n@app.route('/users/int:id', methods=['PUT'])\ndef update_user(id):\n user = User.query.get(id)\n user.name = request.json['name']\n db.session.commit()\n return {'message': 'User updated'}\n\n@app.route('/users/int:id', methods=['DELETE'])\ndef delete_user(id):\n User.query.filter_by(id=id).delete()\n db.session.commit()\n return {'message': 'User deleted'}\n\n@app.route('/users', methods=['GET'])\ndef list_users():\n users = User.query.all()\n return {'users': [user.name for user in users]}\n\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_list_with_value(list1, value):\n    list1[:] = [value] * len(list1) \n    return list1\n\nresult = replace_list_with_value(list1, value) \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Solution:\n    def int_to_Roman(self, num):\n        val = [\n            1000, 900, 500, 400,\n            100, 90, 50, 40,\n            10, 9, 5, 4,\n            1\n            ]\n        syb = [\n            \"M\", \"CM\", \"D\", \"CD\",\n            \"C\", \"XC\", \"L\", \"XL\",\n            \"X\", \"IX\", \"V\", \"IV\",\n            \"I\"\n            ]\n        roman_num = ''\n        i = 0\n        while  num > 0:\n            for _ in range(num // val[i]):\n                roman_num += syb[i]\n                num -= val[i]\n            i += 1\n        return roman_num but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n  if n == 0:\n    return 0\n  elif n == 1:\n    return 1\n  else:\n    return fibonacci(n-1) + fibonacci(n-2)\n\nn = int(input(\"Enter number of terms for Fibonacci sequence: \"))\n\nprint(\"Fibonacci sequence:\")\nfor i in range(n):\n  print(fibonacci(i)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Profile:\n    def __init__(self, first_name, last_name, occupation):\n        self.first_name = first_name \n        self.last_name = last_name \n        self.occupation = occupation \n        \n    def full_name(self): \n        return self.first_name + \" \" + self.last_name but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import necessary packages for ML\nimport numpy as np\nfrom sklearn.naive_bayes import GaussianNB\n\n# Create feature and target arrays\nX = np.array([[1, 0, 1], [1, 1, 0], [0, 0, 1], [0, 1, 1]])\ny = np.array([1, 1, 0, 0])\n\n# Create a Gaussian NB model\nmodel = GaussianNB()\nmodel.fit(X, y)\n\n# Make a prediction \nprediction = model.predict([[1, 0, 0]])\nif prediction == 1:\n print('This review is positive.')\nelse:\n print('This review is negative.')\n\n# Output:\nThis review is positive. but is not the same. just give one example and only return the code."}
