{"prompt": "make some code that functions the same as the following code: import json\n\njson_string = '{\"name\": \"John\", \"age\": 20, \"courses\": [\"English\", \"Maths\"]}'\n\ndata = json.loads(json_string)\nname = data['name']\nage = data['age']\ncourses = data['courses']\n\nprint('Name:', name)\nprint('Age:', age)\nprint('Courses:', courses) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\nimport matplotlib.pyplot as plt\n\n# Get the sentence\nsentence = \"This is a sentence with a lot of different words.\"\n\n# Get all the words\nwords = re.findall(r'\\w+', sentence)\n\n# Count the frequency of each word\nfrequency = {}\nfor word in words:\n    count = frequency.get(word, 0)\n    frequency[word] = count + 1\n\n# Create the labels and counts for the histogram\nlabels, counts = list(frequency.keys()), list(frequency.values())\n\n# Plot the histogram using matplotlib\nplt.bar(labels, counts, width=0.8, align='center')\nplt.title('Frequency of Words')\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max_min(list_of_numbers):\n    max_number = list_of_numbers[0]\n    min_number = list_of_numbers[0]\n    for number in list_of_numbers:\n        if number > max_number:\n            max_number = number\n        if number < min_number:\n            min_number = number\n    return max_number, min_number\n\nlist_of_numbers = [1, 5, 10, 3, 9, 4]\nmax_number, min_number = find_max_min(list_of_numbers)\nprint(f\"The maximum number is {max_number} and the minimum number is {min_number}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random():\n    my_list = [random.randint(0,100) for i in range(5)]\n    return my_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n if n < 0:\n raise ValueError(\"Negative number\")\n if n == 0 or n == 1:\n return n\n return fibonacci(n-1) + fibonacci(n-2)\n \n# calculate 9th Fibonacci number\nprint(fibonacci(9)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_of_dicts = [ \n    {\n        \"name\": \"John\",\n        \"age\": 32,\n        \"country\": \"USA\"\n    },\n    {\n        \"name\": \"Peter\",\n        \"age\": 28,\n        \"country\": \"Australia\"\n    },\n    {\n        \"name\": \"David\",\n        \"age\": 30,\n        \"country\": \"Canada\"\n    }\n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num):\n  if num <= 1:\n    return False\n  \n  for i in range(2, num):\n    if num % i == 0:\n      return False\n  \n  return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import telebot\n\nbot = telebot.TeleBot(\"<bot token>\")\n\n@bot.message_handler(commands=['start'])\ndef send_welcome(message):\n bot.reply_to(message,\n 'Welcome! Here are the commands this bot supports:\\n\\\n/list - list all items\\n\\\n/add - add a new item\\n\\\n/remove - remove an item\\n\\\n')\n\n# Bot logic\n\nbot.polling() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculateRowSums(arr: List[List[int]]): \n    sums = [] \n    for row in arr: \n        sums.append(sum(row)) \n    return sums \n  \nif __name__ == \"__main__\": \n    arr = [[1, 2, 3], [4, 5, 6]] \n    print(calculateRowSums(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\nphone = \"404-999-9999\"\n\npattern = r\"^[0-9]{3}-[0-9]{3}-[0-9]{4}$\"\n\nresult = re.match(pattern, phone)\n\nif result and len(phone) == 12:\n print(\"Valid phone number\")\nelse:\n print(\"Invalid phone number\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# Create a dataframe from the input data\ndf = pd.DataFrame([\n    {\"customer_id\": 1, \"month\": 1, \"amount\": 40000},\n    {\"customer_id\": 2, \"month\": 1, \"amount\": 10000},\n    {\"customer_id\": 3, \"month\": 1, \"amount\": 20000},\n    {\"customer_id\": 1, \"month\": 2, \"amount\": 30000},\n    {\"customer_id\": 2, \"month\": 2, \"amount\": 15000},\n    {\"customer_id\": 3, \"month\": 2, \"amount\": 50000},\n])\n\n# Group by customer and get the average purchase amount in each month\nresult = df.groupby('customer_id')['amount'].mean().sort_values(ascending=False).head(5)\n\n# Print the result\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_down(value):\n    ret = 1\n    while value > 0:\n        ret *= value\n        value -= 1\n    return ret but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_occurrences(items, string):\n  count = 0\n  for item in items: \n    if item == string:\n      count += 1\n  return count\n\nprint(count_occurrences(['Python', 'Python'], \"Python\"))\n\n# Output: 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nGenerate a new list containing the square of all numbers in a list\n\"\"\"\n# input list\nin_list = [1,2,3,4,5]\n\n# output list\nout_list = []\n\n# loop over the input list\nfor i in in_list:\n    # calculate the square of the element and append it to output list\n    out_list.append(i**2)\n\n# print the output list\nprint(out_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def double(value): \n    return value * 2\n\ndef triple(value): \n    return value * 3\n\ndef quad(value):\n    return value * 4\n\ndef calculate_value(n): \n    if n > 10: \n        return double(n) \n    elif n > 5: \n        return triple(n) \n    else: \n        return quad(n) \n    \nprint(calculate_value(-2))\nprint(calculate_value(8)) \nprint(calculate_value(13)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_dict = {\n 'apple': 'fruit',\n 'goat': 'animal',\n 'three': 'number'\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n#GREETINGS\ngreetings  = [\"Hi\", \"Hey\", \"Hello\", \"Hi there\", \"What's up?\"]\n\n#PROMPTS\nprompts = [\"how may I help you?\", \"want to talk about something?\", \"What do you want to talk about?\"]\n\n#Program\ndef respond(message):\n    if any(greeting in message for greeting in greetings):\n        index = random.randint(0, len(prompts)-1)\n        return prompts[index]\n    return \"\"\n\n#Example test\nuser_message = \"Hey\"\nbot_response = respond(user_message)\nprint(bot_response) # What do you want to talk about? but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import the required libraries \nimport pymongo\nimport json\n\n# Establish a connection to the database \nclient = pymongo.MongoClient(\"mongodb://localhost:27017\")\nmydb = client[\"mydb\"]\n\n# Define the API endpoints \n@app.route(\"/api/v1/getAll\", methods=[\"GET\"])\ndef api_get_all():\n    # Get all the documents from the database and return as JSON\n    documents = mydb.mycollection.find({})\n    data = [json.loads(d) for d in documents]\n    return json.dumps({\"data\": data})\n\n@app.route(\"/api/v1/add\", methods=[\"POST\"])\ndef api_add():\n    # Create a document from the `request.data` and insert it into the database\n    doc = json.loads(request.data)\n    mydb.mycollection.update(doc)\n    return json.dumps({\"message\": \"Document added successfully!\"}) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: board = [[0]*10 for _ in range(10)]\nfor i in range(10):\n for j in range(10):\n  if i%2 == j%2:\n   board[i][j] = 1\nprint board but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_sum_sequence(arr):\n    curr_max = 0\n    max_so_far = 0\n  \n    for i in range(0, len(arr)):\n        curr_max = max(arr[i], curr_max + arr[i])\n        max_so_far = max(max_so_far, curr_max)\n      \n    return max_so_far\n\narr = [2, 6, -2, -3, 8, 4]\nmax_sum = max_sum_sequence(arr)\nprint(max_sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Program to add two numbers\nnum1 = 3\nnum2 = 5\nprint(num1 + num2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findStudentsAboveSixty(students):\n    output = []\n    for student in students:\n        name = student[0]\n        mark = student[1]\n        if mark > 60:\n            output.append(name)\n    return output\n\nstudents = [['Bob', 90], ['James', 86], ['Grace', 78], ['Charles', 62], ['Martin', 64]]\n\npassedStudents = findStudentsAboveSixty(students)\nprint(\"Students with marks above 60: \" + str(passedStudents)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def contains_substring(string, substring):\n    return substring in string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import collections\n\n#Splitting the text into words\nwords=text.split()\n\n#Creating a frequency table\nword_freq = collections.Counter(words)\n\n#Printing the top 10 most frequent words\nfor word, frequency in word_freq.most_common(10):\n    print(word, frequency) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def encrypt(text, key): \n    cipher = \"\" \n    for c in text: \n        cipher += chr(ord(c) + key) \n    return cipher\n\n#Driver code \nif __name__ == '__main__': \n    plaintext = \"This is a secret message\"\n    key = 3\n    ciphertext = encrypt(plaintext, key) \n    print(ciphertext) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_letter(s, letter): \n    count = 0\n    for char in s:\n        if char == letter:\n            count += 1\n    return count\n\ns = \"Hello World\"\nletter = \"l\"\nprint(count_letter(s, letter)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_one_to_each_char(mystring):\n    new_str = \"\"\n    for c in mystring:\n        new_str += chr(ord(c) + 1)\n    return new_str but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_difference(input_dict):\n    max_val = max(input_dict.values())\n    min_val = min(input_dict.values())\n    return max_val - min_val\n\ninput_dict = {'a': 5, 'b': -2, 'c': 3}\ndifference = calculate_difference(input_dict)\nprint(difference) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_index(nums, element):\n    for i, num in enumerate(nums):\n        if num == element:\n            return i\n    \n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = 'This sentence will be reversed'\n\nwords = string.split()\n\nfor word in words:\n\tprint(word[::-1], end=\" \")\n\n# Output: sihT ecnetnes lliw eb desrever but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(s):\n    s = s.lower()\n    return s == s[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import smtplib\n\n# Email information\nsender = 'user@example.com'\nreceivers = 'example@example.com'\n\nmessage = \"\"\"From: From User <user@example.com>\nTo: To User <example@example.com>\nSubject: SMTP e-mail test\n\nThis is a test e-mail message.\n\"\"\"\n\ntry:\n   smtpObj = smtplib.SMTP('localhost')\n   smtpObj.sendmail(sender, receivers, message)         \n   print (\"Successfully sent email\")\nexcept SMTPException:\n   print (\"Error: unable to send email\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.decomposition import PCA\n\n# create PCA object\npca = PCA(n_components=None)\n\n# fit the object with the data\npca.fit(data)\n\n# transform the data into lower dimension\npca_data = pca.transform(data)\n\n# variance of each PC\npca.explained_variance_ratio_ but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findNumberType(x):\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\nx = 7\nprint(findNumberType(x))  # Odd but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(5):\n    print(\"Hello\", end=\"\\n\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, jsonify, request\napp = Flask(__name__)\n\n@app.route('/', methods=['GET'])\ndef home():\n return 'Welcome to the API'\n\n@app.route('/data', methods=['POST'])\ndef add_data():\n data = request.get_json()\n # Do something with data\n\n return jsonify({'message': 'Data added successfully'})\n\n@app.route('/data/int:id', methods=['GET'])\ndef get_data(id):\n data = # Retrieve data from database\n return jsonify({'data': data})\n\nif __name__ == '__main__':\n app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binarySearch(arr, number):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right)//2\n        if arr[mid] == number:\n            return mid\n        elif arr[mid] < number:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\nif __name__ == '__main__':\n    arr = [1, 3, 5, 7, 8, 9]\n    number = 7\n    result = binarySearch(arr, number)\n    print(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to check if the number is prime or not\ndef is_prime(n):\n \n    # Corner case\n    if n <= 1:\n        return False\n \n    # Check from 2 to n-1\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n \n# Driver Code\nnum = 11\n \n# Check if prime\nif is_prime(num):\n    print(\"{} is a prime number\".format(num))\nelse:\n    print(\"{} is not a prime number\".format(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def second_largest(x):\n    x.sort()\n    return x[-2] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_distance(x1, y1, x2, y2):\n    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def product(a, b):\n  return a * b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def create_dict(id_lst, name_lst): \n    dic = {}\n    \n    for i in range(len(id_lst)): \n        dic[id_lst[i]] = name_lst[i]\n    \n    return dic\n\nresult = create_dict(id_lst, name_lst) \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def anagramCheck(word1, word2):\n    # Removing whitespace characters\n    w1 = word1.replace(\" \", \"\")\n    w2 = word2.replace(\" \", \"\")\n    \n    # Check lengths\n    if len(w1) != len(w2):\n        return False\n    \n    # Convert to lowercase\n    w1 = w1.lower()\n    w2 = w2.lower()\n    \n    # Create dictionary to count frequency of each character\n    count_dict1 = dict()\n    count_dict2 = dict()\n    for ch in w1:\n        count_dict1[ch] = count_dict1.get(ch, 0) + 1\n    for ch in w2:\n        count_dict2[ch] = count_dict2.get(ch, 0) + 1\n    \n    # Check if character frequencies are equal\n    if count_dict1 != count_dict2:\n        return False        \n    return True\n\nword1 = 'rat'\nword2 = 'art'\nresult = anagramCheck(word1, word2)\nif result:\n    print('The words are anagrams.')\nelse:\n    print('The words are not anagrams.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n def __init__(self, data):\n  self.data = data\n  self.next = None\n\nclass SinglyLinkedList:\n def __init__(self):\n  self.head = None\n  self.tail = None\n  self.middle = None\n\n def addNode(self, node):\n  if self.head is None:\n   self.head = node\n   self.tail = node\n   self.middle = node\n  else:\n   self.tail.next = node\n   self.tail = node\n   # To mark the middle node\n   if self.head.next is self.middle:\n    self.middle = node\n\n def mark_middle(self):\n  if self.middle is None:\n   return\n  self.middle.data = 'Middle Node' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n    def __init__(self, name, age, salary, designation):\n        self.name = name\n        self.age = age\n        self.salary = salary\n        self.designation = designation\n \n    def show_details(self):\n        print(\"Employee Details\")\n        print(\"-------------------------------\")\n        print(\"Name:\", self.name)\n        print(\"Age:\", self.age)\n        print(\"Salary:\", self.salary)\n        print(\"Designation:\", self.designation)\n\nemp1 = Employee(\"John\", 25, 10000, \"Developer\")\nemp1.show_details() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\nfrom tensorflow.keras.layers import Input, Dense, Embedding, GRU, Dropout\n\ndef build_model(vocab_size, embedding_dim):\n    model = tf.keras.Sequential()\n    # Embedding layer\n    model.add(Embedding(vocab_size, embedding_dim, input_length=500))\n    # GRU layer\n    model.add(GRU(128, dropout=0.25))\n    # Dropout layer\n    model.add(Dropout(0.5))\n    # Output layer\n    model.add(Dense(vocab_size, activation='softmax'))\n    return model but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MinHeap:\n    def __init__(self):\n        self.heap_list = [0]\n        self.current_size = 0\n\n    def insert(self, item):\n        self.heap_list.append(item)\n        self.current_size += 1\n        self.fix_new_item()\n\n    def fix_new_item(self):\n        idx = self.current_size\n        while idx // 2 > 0:\n            if self.heap_list[idx] < self.heap_list[idx // 2]:\n                temp = self.heap_list[idx // 2]\n                self.heap_list[idx // 2] = self.heap_list[idx]\n                self.heap_list[idx] = temp\n            idx = idx // 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def has_duplicates(arr): \n    # Create an empty set \n    s = set() \n  \n    # Traverse through the list \n    for item in arr:\n        # If the element is present \n        # in the set then it is a duplicate \n        if item in s:\n            return True \n        else:\n            s.add(item) \n\n    # No duplicate element found \n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nimport sklearn\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\nsentence = 'The interface is very intuitive and user-friendly.'\n\n# Tokenize the sentence\ntokens = nltk.word_tokenize(sentence)\n\n# Get the features from the tokens\ncount_vect = CountVectorizer()\nword_count = count_vect.fit_transform(tokens)\n\n# Create a Multinomial Naive Bayes classifier\nclf = MultinomialNB().fit(word_count, ['positive'])\n\n# Predict the sentiment of the sentence\nprediction = clf.predict(word_count)\n\n# Print the result\nprint(f'The sentiment of the sentence is {prediction[0]}.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(lst):\n    new_list = []\n    for i in lst:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n\nprint(remove_duplicates([1, 2, 3, 2, 1])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# Read data\ndata = pd.read_csv(\"xyz.csv\")\n\n# Separate data for prediction\nX = np.array(data['Date']).reshape(-1, 1) \ny = np.array(data['Price']).reshape(-1, 1)\n\n# Train the model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Predict the prices\npredicted_price = model.predict(np.array([\"2020-10-01\"]).reshape(-1, 1))\nprint(\"Predicted Stock Price for 2020-10-01:\", predicted_price[0][0]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replacePattern(string, pattern, replacement):\n    return string.replace(pattern, replacement)\n\nresult = replacePattern(\"abcabcabc\", \"abc\", \"xyz\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_values(n):\n    \"\"\"Find the sum of all numbers between 1 and n (inclusive).\"\"\"\n    return sum(range(1, n+1)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(tree, searchTerm):\n if tree['value'] == searchTerm:\n return True\n \n if tree['left'] != None:\n if search(tree['left'], searchTerm):\n return True\n \n if tree['right'] != None:\n if search(tree['right'], searchTerm):\n return True\n \n return False\n\ntree = {value: 24, left: {value: 19, left: {value: 12, left: None, right: None}, right: None}, right: {value: 38, left: None, right: None}}\nsearch_term = 12\n\nif search(tree, search_term):\n print(\"Value found\")\nelse:\n print(\"Value not found\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Initialise the counter\ni = 0\n\n# Use a while loop to print numbers from 0 to 10\nwhile i <= 10:\n    print(i)\n    i += 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\nimport requests\n\n# Fetch data from OMDB API\ndef fetch_omdb_data(omdb_api_key):\n omdb_data = []\n\n # Query for movies\n omdb_url = f'http://www.omdbapi.com/?apikey={omdb_api_key}&s=movies'\n response = requests.get(omdb_url)\n data = response.json()\n for item in data['Search']:\n    omdb_data.append( (item['Title'], item['Year'], item['Type'], item['imdbID']) )\n\n# Fetch data from Football Data API\ndef fetch_football_data(football_api_key):\n football_data = []\n\n # Query for football matches\nfootball_url = f'http://api.football-data.org/v2/matches?apikey={football_api_key}'\nresponse = requests.get(football_url)\ndata = response.json()\nfor item in data['matches']:\n football_data.append( (item['competition']['name'], item['season']['startDate'], item['season']['endDate'], item['utcDate']) )\n\n# Merge data from both APIs\nmerged_data = []\nfor omdb_row in omdb_data:\n for football_row in football_data:\n if (omdb_row[1] >= football_row[1] and omdb_row[1] <= football_row[2]):\n merged_data.append(( *omdb_row, *football_row ))\n\n# Write merged data into JSON file\nwith open('merged_data.json', 'w') as outfile:\n json.dump(merged_data, outfile)\n\n# Run functions\nomdb_api_key = '12345678'\nfootball_api_key = '87654321'\nfetch_omdb_data(omdb_api_key)\nfetch_football_data(football_api_key) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\n\n# Load the dataset\ndata = pd.read_csv(\"data.csv\")\n\n# Split the dataset into training and testing sets\nX = data.drop(['genre', 'artist', 'song'], axis=1)\ny = data['genre']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Encode the labels\nencoder = LabelEncoder()\ny_train = encoder.fit_transform(y_train)\ny_test = encoder.transform(y_test)\n\n# Train a Support Vector Classifier model\nclf = SVC(kernel='linear')\nclf.fit(X_train, y_train)\n\n# Make predictions\ny_pred = clf.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify(x):\n  if (x > 0):\n    return 'positive'\n  else:\n    return 'negative' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def solveNQueens(n): \n  \n    # A utility function to check if \n    # a queen can be placed on board[row][col]\n    # Note that this function is called when \n    # \"col\" queens are already placed in columns \n    # from 0 to col -1. So we need to check \n    # only left side for attacking queens \n    def is_safe(row, col): \n  \n        # Check this row on left side \n        for i in range(col): \n            if board[row][i] == 1: \n                return False\n  \n        # Check upper diagonal on left side \n        for i, j in zip(range(row, -1, -1),  \n                        range(col, -1, -1)): \n            if board[i][j] == 1: \n                return False\n  \n        # Check lower diagonal on left side \n        for i, j in zip(range(row, n, 1),  \n                        range(col, -1, -1)): \n            if board[i][j] == 1: \n                return False\n  \n        return True\n  \n    # Place N queens on an NxN board \n    def solve(n): \n      \n        # A board for the queen positions \n        board = [[0 for _ in range(n)] for _ in range(n)] \n      \n        # A list to store the positions of the queens \n        result = [] \n  \n        # Start from the first column \n        solveQueen(board, 0, result) \n        return result \n  \n    # Function to check if the queen can be \n    # placed or not \n    def solveQueen(board, col, result): \n      \n        # If all the queens are already placed \n        if col == n: \n            # Add the result to the result list \n            # Append the list of a single result \n            result.append(list()) \n            # Add the queen's positions to the current list \n            for i in range(n): \n                current_result = [] \n                for j in range(n): \n                    # Add only the positions with the queen \n                    # in it to the current list \n                    if board[i][j] == 1: \n                        current_result.append(j + 1) \n                # Add the current list to the result list \n                result[-1].append(current_result) \n            return\n  \n        # Try the current row\n        for i in range(n): \n  \n            # If the column of the current row is safe \n            # for the queen\n            if is_safe(i, col): \n              \n                # Place the queen\n                board[i][col] = 1\n  \n                # Increase the column by 1 \n                # and recursively call the \n                # function for the next column \n                solveQueen(board, col + 1, result) \n  \n                # Else backtrack \n                board[i][col] = 0\n  \n    # start solving\n    result = solve(n) \n  \n    # Print the result\n    for res in result: \n        print(res) \n  \nn = 4\nsolveNQueens(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_missing_elements(list):\n    missing_elements = []\n    for i in range(min(list), max(list)):\n        if i not in list:\n            missing_elements.append(i)\n    return missing_elements but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\nnode_list = []\nfor i in range(10):\n    node_list.append(i)\n\nG = nx.Graph()\nG.add_nodes_from(node_list)\n\nnx.draw(G, with_labels=True)\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bin_to_dec(binary_string):\n    decimal = 0\n    for digit in binary_string:\n        decimal = decimal * 2 + int(digit)\n    return decimal\n\nprint(bin_to_dec('1100')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password(length=8):\n characters = string.ascii_letters + string.digits + string.punctuation\n return ''.join(random.choice(characters) for _ in range(length))\n\npassword = generate_password()\nprint(password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nPredicts the stock price of a given company in the next 30 days\n\"\"\"\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\n#Get the historical stock prices\ndata = pd.read_csv('historical_stock_prices.csv')\n\n#Train the linear regression model using the historical stock prices\nX = data['date'].values.reshape(-1,1)\ny = data['price'].values.reshape(-1,1)\nlinear_regressor = LinearRegression()  \nlinear_regressor.fit(X, y)\n\n#Predict the stock prices for the next 30 days\nnext_30_days = np.arange(X.flatten()[-1]+1, X.flatten()[-1]+30, 1).reshape(-1,1)\ny_pred = linear_regressor.predict(next_30_days)\n\n#Print the predicted stock prices\nprint(\"The predicted stock prices for the next 30 days are:\")\nfor i in range(30):\n  print(\"Date:\", next_30_days[i][0],\"Price:\",y_pred[i][0]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def capitalize_words(sentence):\n    words = sentence.split()\n    capitalized_words = []\n    for word in words:\n        capitalized_words.append(word.capitalize())\n    return ' '.join(capitalized_words)\n\nsentence = input(\"Enter a sentence: \")\n\nprint(capitalize_words(sentence)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def divisors(n):\n    for i in range(1,n+1):\n        if n % i == 0:\n            print(i)\n\nn = 15\ndivisors(15)\n# Output: 1 3 5 15 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(list): \n    max = list[0] \n    for i in list: \n        if i > max: \n            max = i \n    return max \n  \nlist = [10, 3, 16, 17, 8]\nprint(\"Maximum number in the list:\", find_max(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter\n \ndef mbutton():\n    t = tkinter.Toplevel()\n    t.geometry('400x400')\n    t.title('New Window')\n    tkinter.Button(t, text='Click me').pack()\n \nroot = tkinter.Tk()\nroot.geometry('200x200')\nb1 = tkinter.Button(root, text='Open new window', command=mbutton)\nb2 = tkinter.Button(root, text='Close', command=root.destroy)\nb1.pack()\nb2.pack() \nroot.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: items = [\n {'name': 'item1', 'amount': 10},\n {'name': 'item2', 'amount': 20},\n {'name': 'item3', 'amount': 30},\n]\n\ntotal = 0\n\nfor item in items:\n total += item['amount']\n\nprint(f\"Total: {total}\") # Output: Total: 60 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://www.example.com/\"\nr  = requests.get(url)\ndata = r.text\nsoup = BeautifulSoup(data, 'html.parser')\n\nphone_numbers = []\nfor tag in soup.find_all('a'):\n text = tag.text.replace(\" \", \"\").replace(\"-\",\"\")\n if (text.isdigit() and len(text) == 10):\n phone_numbers.append(text)\n\nprint(\"Phone Numbers: \", phone_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Program to find the sum of all elements in an array\n\ndef sum_arr(arr):\n    # faster sum using numpy\n    return np.sum(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: unsorted_list = [\"hello\", \"world\", \"from\", \"code\"]\n\nsorted_list = sorted(unsorted_list, key=lambda s: (-len(s), s))\n\nprint(sorted_list)\n# Output: [\"world\", \"hello\", \"from\", \"code\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os\n\ndef create_dir(path):\n    try:\n        os.mkdir(path)\n    except OSError:\n        print(\"Creation of the directory %s failed\" % path)\n    else:\n        print(\"Successfully created the directory %s \" % path) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\ndef edit_dataframe(df):\n\n    # Adding the column 'new_value'\n    df['new_value'] = df['value'] + 1\n\n    # Replacing values in the 'id' column\n    df['new_id'] = df['id'].map(lambda x: 'id_' + str(x))\n\n    # Updating the value in the 'value' column\n    df.value = df.value * 2\n\n    return df but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\ndef generate_bar_chart(data):\n    plt.bar(list(range(len(data))), data)\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.title('Bar Chart')\n    plt.show()\n\nif __name__ == '__main__':\n    generate_bar_chart(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_6_digit_number():\n    return random.randint(100000, 999999)\n\nnum = generate_6_digit_number()\nprint(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"Module containing python functions, which generate first order Redfield kernel.\n   For docstrings see documentation of module neumann1.\"\"\"\n\nimport numpy as np\nimport itertools\n\nfrom ...wrappers.mytypes import doublenp\nfrom ...wrappers.mytypes import complexnp\n\nfrom ..aprclass import Approach\nfrom .neumann1 import Approach1vN\n\n\n# ---------------------------------------------------------------------------------------------------\n# Redfield approach\n# ---------------------------------------------------------------------------------------------------\nclass ApproachRedfield(Approach):\n\n    kerntype = 'pyRedfield'\n\n    def prepare_arrays(self):\n        Approach1vN.prepare_arrays(self)\n\n    def clean_arrays(self):\n        Approach1vN.clean_arrays(self)\n\n    def generate_fct(self):\n        Approach1vN.generate_fct(self)\n\n    def generate_coupling_terms(self, b, bp, bcharge):\n        Tba, phi1fct = self.leads.Tba, self.phi1fct\n        si, kh = self.si, self.kernel_handler\n        nleads, statesdm = si.nleads, si.statesdm\n\n        acharge = bcharge-1\n        ccharge = bcharge+1\n\n        # --------------------------------------------------\n        for a, ap in itertools.product(statesdm[acharge], statesdm[acharge]):\n            if kh.is_included(a, ap, acharge):\n                bpap = si.get_ind_dm1(bp, ap, acharge)\n                ba = si.get_ind_dm1(b, a, acharge)\n                fct_aap = 0\n                for l in range(nleads):\n                    fct_aap += (+ Tba[l, b, a]*Tba[l, ap, bp]*phi1fct[l, bpap, 0].conjugate()\n                                - Tba[l, b, a]*Tba[l, ap, bp]*phi1fct[l, ba, 0])\n                kh.set_matrix_element(fct_aap, b, bp, bcharge, a, ap, acharge)\n        # --------------------------------------------------\n        for bpp in statesdm[bcharge]:\n            if kh.is_included(bpp, bp, bcharge):\n                fct_bppbp = 0\n                for a in statesdm[acharge]:\n                    bppa = si.get_ind_dm1(bpp, a, acharge)\n                    for l in range(nleads):\n                        fct_bppbp += +Tba[l, b, a]*Tba[l, a, bpp]*phi1fct[l, bppa, 1].conjugate()\n                for c in statesdm[ccharge]:\n                    cbpp = si.get_ind_dm1(c, bpp, bcharge)\n                    for l in range(nleads):\n                        fct_bppbp += +Tba[l, b, c]*Tba[l, c, bpp]*phi1fct[l, cbpp, 0]\n                kh.set_matrix_element(fct_bppbp, b, bp, bcharge, bpp, bp, bcharge)\n            # --------------------------------------------------\n            if kh.is_included(b, bpp, bcharge):\n                fct_bbpp = 0\n                for a in statesdm[acharge]:\n                    bppa = si.get_ind_dm1(bpp, a, acharge)\n                    for l in range(nleads):\n                        fct_bbpp += -Tba[l, bpp, a]*Tba[l, a, bp]*phi1fct[l, bppa, 1]\n                for c in statesdm[ccharge]:\n                    cbpp = si.get_ind_dm1(c, bpp, bcharge)\n                    for l in range(nleads):\n                        fct_bbpp += -Tba[l, bpp, c]*Tba[l, c, bp]*phi1fct[l, cbpp, 0].conjugate()\n                kh.set_matrix_element(fct_bbpp, b, bp, bcharge, b, bpp, bcharge)\n        # --------------------------------------------------\n        for c, cp in itertools.product(statesdm[ccharge], statesdm[ccharge]):\n            if kh.is_included(c, cp, ccharge):\n                cpbp = si.get_ind_dm1(cp, bp, bcharge)\n                cb = si.get_ind_dm1(c, b, bcharge)\n                fct_ccp = 0\n                for l in range(nleads):\n                    fct_ccp += (+ Tba[l, b, c]*Tba[l, cp, bp]*phi1fct[l, cpbp, 1]\n                                - Tba[l, b, c]*Tba[l, cp, bp]*phi1fct[l, cb, 1].conjugate())\n                kh.set_matrix_element(fct_ccp, b, bp, bcharge, c, cp, ccharge)\n        # --------------------------------------------------\n\n    def generate_current(self):\n        E, Tba = self.qd.Ea, self.leads.Tba\n        phi1fct, phi1fct_energy = self.phi1fct, self.phi1fct_energy\n\n        si = self.si\n        ncharge, nleads, statesdm = si.ncharge, si.nleads, si.statesdm\n\n        phi1 = self.phi1\n        current = self.current\n        energy_current = self.energy_current\n\n        kh = self.kernel_handler\n        for charge in range(ncharge-1):\n            ccharge = charge+1\n            bcharge = charge\n            for c, b in itertools.product(statesdm[ccharge], statesdm[bcharge]):\n                cb = si.get_ind_dm1(c, b, bcharge)\n\n                for l in range(nleads):\n                    current_l, energy_current_l = 0, 0\n\n                    for bp in statesdm[bcharge]:\n                        if not kh.is_included(bp, b, bcharge):\n                            continue\n                        phi0bpb = kh.get_phi0_element(bp, b, bcharge)\n\n                        cbp = si.get_ind_dm1(c, bp, bcharge)\n                        fct1 = phi1fct[l, cbp, 0]\n                        fct1h = phi1fct_energy[l, cbp, 0]\n\n                        phi1[l, cb] += Tba[l, c, bp]*phi0bpb*fct1\n                        current_l += Tba[l, b, c]*Tba[l, c, bp]*phi0bpb*fct1\n                        energy_current_l += Tba[l, b, c]*Tba[l, c, bp]*phi0bpb*fct1h\n\n                    for cp in statesdm[ccharge]:\n                        if not kh.is_included(c, cp, ccharge):\n                            continue\n                        phi0ccp = kh.get_phi0_element(c, cp, ccharge)\n\n                        cpb = si.get_ind_dm1(cp, b, bcharge)\n                        fct2 = phi1fct[l, cpb, 1]\n                        fct2h = phi1fct_energy[l, cpb, 1]\n\n                        phi1[l, cb] += Tba[l, cp, b]*phi0ccp*fct2\n                        current_l += Tba[l, b, c]*phi0ccp*Tba[l, cp, b]*fct2\n                        energy_current_l += Tba[l, b, c]*phi0ccp*Tba[l, cp, b]*fct2h\n\n                    current[l] += -2*current_l.imag\n                    energy_current[l] += -2*energy_current_l.imag\n\n        self.heat_current[:] = energy_current - current*self.leads.mulst\n# ---------------------------------------------------------------------------------------------------\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk \nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef sentiment_analysis(text): \n    analyzer = SentimentIntensityAnalyzer() \n    scores = analyzer.polarity_scores(text) \n    sentiment = None\n    if scores['compound'] > 0: \n        sentiment = 'positive'\n    elif scores['compound'] == 0: \n        sentiment = 'neutral'\n    else: \n        sentiment = 'negative'\n    return sentiment but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum(num1, num2):\n return num1 + num2\n\nsum(5, 10); // returns 15 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\n\ndef tokenize(string):\n    tokens = string.split()\n    tokens = [token.strip(string.punctuation) for token in tokens]\n    return tokens\n\ntokenized_str = tokenize('This sentence has commas, periods, and colons.')\nprint(tokenized_str)\n# Output: ['This', 'sentence', 'has', 'commas', 'periods', 'and', 'colons'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize_bst(tree):\n    \"\"\"Given a binary search tree, optimizes the tree for better search performance.\"\"\"\n    if tree is None:\n        return\n    optimize_bst(tree.left)\n    optimize_bst(tree.right)\n    if tree.left and tree.right:\n        tree.data = min(tree.left.data, tree.right.data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_intersection(list1, list2):\n  return [item for item in list1 if item in list2]\n\nlist1 = [1, 2, 3] \nlist2 = [3, 4, 5]\n\nintersectedList = list_intersection(list1, list2)\n\nprint(intersectedList)\n\n# Output: [3] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -*- coding: utf-8 -*-\n\"\"\"\nName: fitForecast.py\nAuthor: Collin Rooney\nLast Updated: 7/18/2017\nThis script will contain functions for all types of hierarchical modeling approaches.\nIt will use the prophet package as a forecasting tool.\nThe general idea of it is very similar to the hts package in R, but it is a little\nmore specific with how the dataframe is put together.\nCredit to Rob J. Hyndman and research partners as much of the code was developed with the help of their work\nhttps://www.otexts.org/fpp\nhttps://robjhyndman.com/publications/\nCredit to Facebook and their fbprophet package\nhttps://facebookincubator.github.io/prophet/\nIt was my intention to make some of the code look similar to certain sections in the Prophet and (Hyndman's) hts packages\n\"\"\"\n\nimport pandas as pd\nimport numpy as np\nfrom fbprophet import Prophet\nimport contextlib, os\nfrom scipy.special import inv_boxcox\n\n#%%\ndef fitForecast(y, h, sumMat, nodes, method, freq, include_history, cap, capF, changepoints, n_changepoints, \\\n                yearly_seasonality, weekly_seasonality, daily_seasonality, holidays, seasonality_prior_scale, \\\n                holidays_prior_scale, changepoint_prior_scale, mcmc_samples, interval_width, uncertainty_samples, \\\n                boxcoxT, skipFitting):\n   \n    forecastsDict = {}\n    mse = {}\n    resids = {}\n    nForecasts = sumMat.shape[0]\n    ##\n    # If you have a ditionary of Prophet Dataframes already, skip the prophet part, and put all the values into a dictionary\n    ##\n    if skipFitting == True:\n        for key in range(len(y.columns.tolist())-1):\n            forecastsDict[key] = pd.DataFrame(y.iloc[:,key+1])\n            forecastsDict[key] = forecastsDict[key].rename(columns = {forecastsDict[key].columns[0] : 'yhat'})\n            \n    if skipFitting == False:\n        \n        if method == 'FP':\n            nForecasts = sum(list(map(sum, nodes)))+1\n        \n        for node in range(nForecasts):\n            nodeToForecast = pd.concat([y.iloc[:, [0]], y.iloc[:, node+1]], axis = 1)\n            if isinstance(cap, pd.DataFrame):\n                cap1 = cap.iloc[:, node]\n            else:\n                cap1 = cap\n            if isinstance(capF, pd.DataFrame):    \n                cap2 = capF.iloc[:, node]\n            else:\n                cap2 = capF\n            if isinstance(changepoints, pd.DataFrame):\n                changepoints1 = changepoints[:, node]\n            else:\n                changepoints1 = changepoints\n            if isinstance(n_changepoints, list):\n                n_changepoints1 = n_changepoints[node]\n            else:\n                n_changepoints1 = n_changepoints\n            ##\n            # Put the forecasts into a dictionary of dataframes\n            ##\n            with contextlib.redirect_stdout(open(os.devnull, \"w\")):\n                # Prophet related stuff\n                nodeToForecast = nodeToForecast.rename(columns = {nodeToForecast.columns[0] : 'ds'})\n                nodeToForecast = nodeToForecast.rename(columns = {nodeToForecast.columns[1] : 'y'})\n                if capF is None:\n                    growth = 'linear'\n                    m = Prophet(growth=growth,\n                                changepoints=changepoints1,\n                                n_changepoints=n_changepoints1,\n                                yearly_seasonality=yearly_seasonality,\n                                weekly_seasonality=weekly_seasonality,\n                                daily_seasonality=daily_seasonality,\n                                holidays=holidays,\n                                seasonality_prior_scale=seasonality_prior_scale,\n                                holidays_prior_scale=holidays_prior_scale,\n                                changepoint_prior_scale=changepoint_prior_scale,\n                                mcmc_samples=mcmc_samples,\n                                interval_width=interval_width,\n                                uncertainty_samples=uncertainty_samples)\n                else:\n                    growth = 'logistic'\n                    m = Prophet(growth=growth,\n                                changepoints=changepoints,\n                                n_changepoints=n_changepoints,\n                                yearly_seasonality=yearly_seasonality,\n                                weekly_seasonality=weekly_seasonality,\n                                daily_seasonality=daily_seasonality,\n                                holidays=holidays,\n                                seasonality_prior_scale=seasonality_prior_scale,\n                                holidays_prior_scale=holidays_prior_scale,\n                                changepoint_prior_scale=changepoint_prior_scale,\n                                mcmc_samples=mcmc_samples,\n                                interval_width=interval_width,\n                                uncertainty_samples=uncertainty_samples)\n                    nodeToForecast['cap'] = cap1\n                m.fit(nodeToForecast)\n                future = m.make_future_dataframe(periods = h, freq = freq, include_history = include_history)\n                if capF is not None:\n                    future['cap'] = cap2\n                ##\n                # Base Forecasts, Residuals, and MSE\n                ##\n                forecastsDict[node] = m.predict(future)\n                resids[node] = y.iloc[:, node+1] - forecastsDict[node].yhat[:-h].values\n                mse[node] = np.mean(np.array(resids[node])**2)\n                ##\n                # If logistic use exponential function, so that values can be added correctly\n                ##\n                if capF is not None:\n                    forecastsDict[node].yhat = np.exp(forecastsDict[node].yhat)\n                if boxcoxT is not None:\n                    forecastsDict[node].yhat = inv_boxcox(forecastsDict[node].yhat, boxcoxT[node])\n                    forecastsDict[node].trend = inv_boxcox(forecastsDict[node].trend, boxcoxT[node])\n                    if \"seasonal\" in forecastsDict[node].columns.tolist():\n                        forecastsDict[node].seasonal = inv_boxcox(forecastsDict[node].seasonal, boxcoxT[node])\n                    if \"daily\" in forecastsDict[node].columns.tolist():\n                        forecastsDict[node].daily = inv_boxcox(forecastsDict[node].daily, boxcoxT[node])\n                    if \"weekly\" in forecastsDict[node].columns.tolist():\n                        forecastsDict[node].weekly = inv_boxcox(forecastsDict[node].weekly, boxcoxT[node])\n                    if \"yearly\" in forecastsDict[node].columns.tolist():\n                        forecastsDict[node].yearly = inv_boxcox(forecastsDict[node].yearly, boxcoxT[node])\n                    if \"holidays\" in forecastsDict[node].columns.tolist():\n                        forecastsDict[node].yearly = inv_boxcox(forecastsDict[node].yearly, boxcoxT[node])\n    ##\n    # Now, Revise them\n    ##\n    if method == 'BU' or method == 'AHP' or method == 'PHA':\n        y1 = y.copy()\n        nCols = len(list(forecastsDict.keys()))+1\n        if method == 'BU':\n            '''\n             Pros:\n               No information lost due to aggregation\n             Cons:\n               Bottom level data can be noisy and more challenging to model and forecast\n            '''\n            hatMat = np.zeros([len(forecastsDict[0].yhat),1]) \n            for key in range(nCols-sumMat.shape[1]-1, nCols-1):\n                f1 = np.array(forecastsDict[key].yhat)\n                f2 = f1[:, np.newaxis]\n                if np.all(hatMat == 0):\n                    hatMat = f2\n                else:\n                    hatMat = np.concatenate((hatMat, f2), axis = 1)\n            \n        if method == 'AHP':\n            '''\n             Pros:\n               Creates reliable aggregate forecasts, and good for low count data\n             Cons:\n               Unable to capture individual series dynamics\n            '''\n            if boxcoxT is not None:\n                for column in range(len(y.columns.tolist())-1):\n                    y1.iloc[:,column+1] = inv_boxcox(y1.iloc[:, column+1], boxcoxT[column])\n            ##\n            # Find Proportions\n            ##\n            fcst = forecastsDict[0].yhat\n            fcst = fcst[:, np.newaxis]\n            numBTS = sumMat.shape[1]\n            btsDat = pd.DataFrame(y1.iloc[:,nCols-numBTS:nCols])\n            divs = np.divide(np.transpose(np.array(btsDat)),np.array(y1.iloc[:,1]))\n            props = divs.mean(1)\n            props = props[:, np.newaxis]\n            hatMat = np.dot(np.array(fcst),np.transpose(props))\n            \n        if method == 'PHA':\n            '''\n             Pros:\n               Creates reliable aggregate forecasts, and good for low count data\n             Cons:\n               Unable to capture individual series dynamics\n            '''\n            if boxcoxT is not None:\n                for column in range(len(y.columns.tolist())-1):\n                    y1.iloc[:,column+1] = inv_boxcox(y1.iloc[:, column+1], boxcoxT[column])\n            ##\n            # Find Proportions\n            ##\n            fcst = forecastsDict[0].yhat\n            fcst = fcst[:, np.newaxis]\n            numBTS = sumMat.shape[1]\n            btsDat = pd.DataFrame(y1.iloc[:,nCols-numBTS:nCols])\n            btsSum = btsDat.sum(0)\n            topSum = sum(y1.iloc[:,1])\n            props = btsSum/topSum\n            props = props[:, np.newaxis]\n            hatMat = np.dot(np.array(fcst),np.transpose(props))\n        \n        newMat = np.empty([hatMat.shape[0],sumMat.shape[0]])\n        for i in range(hatMat.shape[0]):\n            newMat[i,:] = np.dot(sumMat, np.transpose(hatMat[i,:]))\n            \n    if method == 'FP':\n        newMat = forecastProp(forecastsDict, nodes)\n    if method == 'OLS' or method == 'WLSS' or method == 'WLSV':\n        if capF is not None:\n            print(\"An error might occur because of how these methods are defined (They can produce negative values). If it does, then please use another method\")\n        newMat = optimalComb(forecastsDict, sumMat, method, mse)\n    \n    for key in forecastsDict.keys():\n        values = forecastsDict[key].yhat.values\n        values = newMat[:,key]\n        forecastsDict[key].yhat = values\n        ##\n        # If Logistic fit values with natural log function to revert back to format of input\n        ##\n        if capF is not None:\n            forecastsDict[key].yhat = np.log(forecastsDict[key].yhat)\n        \n    return forecastsDict\n    \n#%%    \ndef forecastProp(forecastsDict, nodes):\n    '''\n     Cons:\n       Produces biased revised forecasts even if base forecasts are unbiased\n    '''\n    nCols = len(list(forecastsDict.keys()))+1\n    ##\n    # Find proportions of forecast at each step ahead, and then alter forecasts\n    ##\n    levels = len(nodes)\n    column = 0\n    firstNode = 1\n    newMat = np.empty([len(forecastsDict[0].yhat),nCols - 1])\n    newMat[:,0] = forecastsDict[0].yhat\n    lst = [x for x in range(nCols-1)]\n    for level in range(levels):\n        nodesInLevel = len(nodes[level])\n        foreSum = 0\n        for node in range(nodesInLevel):\n            numChild = nodes[level][node]\n            lastNode = firstNode + numChild\n            lst = [x for x in range(firstNode, lastNode)]\n            baseFcst = np.array([forecastsDict[k].yhat[:] for k in lst])\n            foreSum = np.sum(baseFcst, axis = 0)\n            foreSum = foreSum[:, np.newaxis]\n            if column == 0:\n                revTop = np.array(forecastsDict[column].yhat)\n                revTop = revTop[:, np.newaxis]\n            else:\n                revTop = np.array(newMat[:,column])\n                revTop = revTop[:, np.newaxis]\n            newMat[:,firstNode:lastNode] = np.divide(np.multiply(np.transpose(baseFcst), revTop), foreSum)\n            column += 1       \n            firstNode += numChild    \n    \n    return newMat\n\n#%%    \ndef optimalComb(forecastsDict, sumMat, method, mse):\n\n    hatMat = np.zeros([len(forecastsDict[0].yhat),1]) \n    for key in forecastsDict.keys():\n        f1 = np.array(forecastsDict[key].yhat)\n        f2 = f1[:, np.newaxis]\n        if np.all(hatMat == 0):\n            hatMat = f2\n        else:\n            hatMat = np.concatenate((hatMat, f2), axis = 1)\n    ##\n    # Multiply the Summing Matrix Together S*inv(S'S)*S'\n    ##\n    if method == \"OLS\":\n        optiMat = np.dot(np.dot(sumMat, np.linalg.inv(np.dot(np.transpose(sumMat), sumMat))),np.transpose(sumMat))\n    if method == \"WLSS\":\n        diagMat = np.diag(np.transpose(np.sum(sumMat, axis = 1)))\n        optiMat = np.dot(np.dot(np.dot(sumMat, np.linalg.inv(np.dot(np.dot(np.transpose(sumMat), np.linalg.inv(diagMat)), sumMat))), np.transpose(sumMat)), np.linalg.inv(diagMat))\n    if method == \"WLSV\":\n        diagMat = [mse[key] for key in mse.keys()]\n        diagMat = np.diag(np.flip(np.hstack(diagMat)+0.0000001, 0))\n        optiMat = np.dot(np.dot(np.dot(sumMat, np.linalg.inv(np.dot(np.dot(np.transpose(sumMat), np.linalg.inv(diagMat)), sumMat))), np.transpose(sumMat)), np.linalg.inv(diagMat))\n        \n    newMat = np.empty([hatMat.shape[0],sumMat.shape[0]])\n    for i in range(hatMat.shape[0]):\n        newMat[i,:] = np.dot(optiMat, np.transpose(hatMat[i,:]))\n        \n    return newMat but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list3 = [list1[i] + list2[i] for i in range(len(list1))] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\nfrom __future__ import division, print_function\nimport paho.mqtt.client as mqtt\nimport base64, sys, math\nfrom hashlib import md5\n\n# The callback for when the client receives a CONNACK response from the server.\ndef on_connect(client, userdata, flags, rc):\n    if rc != 0:\n        print(\"Connection Failed with result code {}\".format(rc))\n        client.disconnect()\n    else:\n        print(\"Connected with result code {}\".format(rc))\n\n    # calcluate firmware md5\n    firmware_md5 = md5(userdata['firmware']).hexdigest()\n    userdata.update({'md5': firmware_md5})\n\n    # Subscribing in on_connect() means that if we lose the connection and\n    # reconnect then subscriptions will be renewed.\n    client.subscribe(\"{base_topic}{device_id}/$implementation/ota/status\".format(**userdata))\n    client.subscribe(\"{base_topic}{device_id}/$implementation/ota/enabled\".format(**userdata))\n    client.subscribe(\"{base_topic}{device_id}/$fw/#\".format(**userdata))\n\n    # Wait for device info to come in and invoke the on_message callback where update will continue\n    print(\"Waiting for device info...\")\n\n\n# The callback for when a PUBLISH message is received from the server.\ndef on_message(client, userdata, msg):\n    # decode string for python2/3 compatiblity\n    msg.payload = msg.payload.decode()\n\n    if msg.topic.endswith('$implementation/ota/status'):\n        status = int(msg.payload.split()[0])\n\n        if userdata.get(\"published\"):\n            if status == 206: # in progress\n                # state in progress, print progress bar\n                progress, total = [int(x) for x in msg.payload.split()[1].split('/')]\n                bar_width = 30\n                bar = int(bar_width*(progress/total))\n                print(\"\\r[\", '+'*bar, ' '*(bar_width-bar), \"] \", msg.payload.split()[1], end='', sep='')\n                if (progress == total):\n                    print()\n                sys.stdout.flush()\n            elif status == 304: # not modified\n                print(\"Device firmware already up to date with md5 checksum: {}\".format(userdata.get('md5')))\n                client.disconnect()\n            elif status == 403: # forbidden\n                print(\"Device ota disabled, aborting...\")\n                client.disconnect()\n\n    elif msg.topic.endswith('$fw/checksum'):\n        checksum = msg.payload\n\n        if userdata.get(\"published\"):\n            if checksum == userdata.get('md5'):\n                print(\"Device back online. Update Successful!\")\n            else:\n                print(\"Expecting checksum {}, got {}, update failed!\".format(userdata.get('md5'), checksum))\n            client.disconnect()\n        else:\n            if checksum != userdata.get('md5'): # save old md5 for comparison with new firmware\n                userdata.update({'old_md5': checksum})\n            else:\n                print(\"Device firmware already up to date with md5 checksum: {}\".format(checksum))\n                client.disconnect()\n\n    elif msg.topic.endswith('ota/enabled'):\n        if msg.payload == 'true':\n            userdata.update({'ota_enabled': True})\n        else:\n            print(\"Device ota disabled, aborting...\")\n            client.disconnect()\n\n    if ( not userdata.get(\"published\") ) and ( userdata.get('ota_enabled') ) and \\\n       ( 'old_md5' in userdata.keys() ) and ( userdata.get('md5') != userdata.get('old_md5') ):\n        # push the firmware binary\n        userdata.update({\"published\": True})\n        topic = \"{base_topic}{device_id}/$implementation/ota/firmware/{md5}\".format(**userdata)\n        print(\"Publishing new firmware with checksum {}\".format(userdata.get('md5')))\n        client.publish(topic, userdata['firmware'])\n\n\ndef main(broker_host, broker_port, broker_username, broker_password, base_topic, device_id, firmware):\n    # initialise mqtt client and register callbacks\n    client = mqtt.Client()\n    client.on_connect = on_connect\n    client.on_message = on_message\n\n    # set username and password if given\n    if broker_username and broker_password:\n        client.username_pw_set(broker_username, broker_password)\n\n    # save data to be used in the callbacks\n    client.user_data_set({\n            \"base_topic\": base_topic,\n            \"device_id\": device_id,\n            \"firmware\": firmware\n        })\n\n    # start connection\n    print(\"Connecting to mqtt broker {} on port {}\".format(broker_host, broker_port))\n    client.connect(broker_host, broker_port, 60)\n\n    # Blocking call that processes network traffic, dispatches callbacks and handles reconnecting.\n    client.loop_forever()\n\n\nif __name__ == '__main__':\n    import argparse\n\n    parser = argparse.ArgumentParser(\n        description='ota firmware update scirpt for ESP8226 implemenation of the Homie mqtt IoT convention.')\n\n    # ensure base topic always ends with a '/'\n    def base_topic_arg(s):\n        s = str(s)\n        if not s.endswith('/'):\n            s = s + '/'\n        return s\n\n    # specify arguments\n    parser.add_argument('-l', '--broker-host',     type=str,            required=False,\n                        help='host name or ip address of the mqtt broker', default=\"127.0.0.1\")\n    parser.add_argument('-p', '--broker-port',     type=int,            required=False,\n                        help='port of the mqtt broker', default=1883)\n    parser.add_argument('-u', '--broker-username', type=str,            required=False,\n                        help='username used to authenticate with the mqtt broker')\n    parser.add_argument('-d', '--broker-password', type=str,            required=False,\n                        help='password used to authenticate with the mqtt broker')\n    parser.add_argument('-t', '--base-topic',      type=base_topic_arg, required=False,\n                        help='base topic of the homie devices on the broker', default=\"homie/\")\n    parser.add_argument('-i', '--device-id',       type=str,            required=True,\n                        help='homie device id')\n    parser.add_argument('firmware', type=argparse.FileType('rb'),\n                        help='path to the firmware to be sent to the device')\n\n    # workaround for http://bugs.python.org/issue9694\n    parser._optionals.title = \"arguments\"\n\n    # get and validate arguments\n    args = parser.parse_args()\n\n    # read the contents of firmware into buffer\n    fw_buffer = args.firmware.read()\n    args.firmware.close()\n    firmware = bytearray()\n    firmware.extend(fw_buffer)\n\n    # Invoke the business logic\n    main(args.broker_host, args.broker_port, args.broker_username,\n         args.broker_password, args.base_topic, args.device_id, firmware)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nFind all prime numbers in a given list of numbers\n\"\"\"\n\ndef is_prime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n        else:\n            return True\n\nnumbers = [13, 19, 23, 5, 7]\nfor num in numbers:\n    if is_prime(num):\n        print(num,\"is a prime number\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent_elements(lst):\n count = {}\n for item in lst:\n if item in count:\n count[item] += 1\n else:\n count[item] = 1\n max_count = 0\n max_element = None\n for item in count:\n if count[item] > max_count:\n max_count = count[item]\n max_element = item\n\nreturn max_element\n\nprint(most_frequent_elements([3, 4, 2, 5, 4, 3, 2, 5, 4]))\n# Output: 4 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def round_to_two_decimals(x):\n    return round(x, 2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n\n    def __init__(self, name, address, salary):\n        self.name = name\n        self.address = address\n        self.salary = salary\n    \n    def displayEmployeeDetails(self):\n        # This method prints employee details\n\n        print(\"Employee Details -\")\n        print(\"Name: {}\".format(self.name))\n        print(\"Address: {}\".format(self.address))\n        print(\"Salary: {}\".format(self.salary))\n\nemployee = Employee(\"John Doe\", \"NYC\", \"10000\")\nemployee.displayEmployeeDetails() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Set the URL\nurl = 'https://www.instagram.com/{username}'\n\n# Make a request\nresponse = requests.get(url)\n\n# Parse the response\nsoup = BeautifulSoup(response.text, 'lxml')\n\n# Extract the followers\nfollowers = soup.find('span', {'class': 'g47SY'}).next_sibling.text\n\n# Print the followers\nprint(f'Number of followers of the user: {followers}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_ascending(array):\n    n = len(array)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if array[j] > array[j+1]:\n                array[j], array[j+1] = array[j+1], array[j]\n    return array\n\narray = [3, 1, 5, 4, 2]\nprint(sort_ascending(array)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add(num1, num2):\n    return num1 + num2\n\nprint(add(1, 2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_numbers(lower_bound, upper_bound):\n for num in range(lower_bound, upper_bound+1):\n if num % 3 != 0:\n print(num)\n  \nprint_numbers(5, 15) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nn = 10\n\nmatrix = [[random.randint(1, 10) for _ in range(n)] for _ in range(n)]\n\nprint(matrix) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def createDict(arr):\n  res = {}\n  for i in range(len(arr)):\n    res[arr[i]] = i + 1\n  return res\n\nd = createDict([2, 3, 1])\nprint(d) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def second_largest(arr):\n  max_first = max(arr[0], arr[1])\n  max_second = min(arr[0], arr[1])\n  for i in range(2, len(arr)):\n    if arr[i] > max_first:\n      max_second = max_first\n      max_first = arr[i]\n    else: \n      if arr[i] > max_second:\n        max_second = arr[i]\n  return max_second\n\nprint(second_largest(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python code to implement factorial \ndef factorial(n): \n    # single line to find factorial \n    return 1 if (n==1 or n==0) else n * factorial(n - 1);  \n  \n# Driver Code \nnum = 5; \nprint(\"Factorial of\", num, \"is\",  factorial(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class SampleClass:\n    def __init__(self, attr1, attr2, attr3):\n        self.attr1 = attr1\n        self.attr2 = attr2\n        self.attr3 = attr3\n    \n    def method1(self):\n        # code here\n        \n    def method2(self):\n        # code here\n    \n    def method3(self):\n        # code here but is not the same. just give one example and only return the code."}
