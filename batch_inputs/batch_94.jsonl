{"prompt": "make some code that functions the same as the following code: def add(x, y): \n    return x + y\n \n# Driver code \nnum1 = 7\nnum2 = 9\nprint(\"Sum of {0} and {1} is {2}\" \n        .format(num1, num2, add(num1, num2))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_ascending(array): \n    for i in range(len(array)):   \n        min_idx = i \n        for j in range(i+1, len(array)):\n            if array[min_idx] > array[j]: \n                min_idx = j             \n        array[i], array[min_idx] = array[min_idx], array[i] \n    return array\n  \narr = [5,3,7,2,9] \nresult = sort_ascending(arr) \nprint(\"Array sorted in ascending order is:\") \nfor i in result: \n    print(i, end=\" \") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insertion_sort(arr):\n    for key in range(1,len(arr)):\n        j=key\n        while j>0 and arr[j-1] > arr[j]:\n            arr[j-1],arr[j]=arr[j],arr[j-1]\n            j-=1\n    return arr\n\nprint(insertion_sort([21, 3, 14, 15, 5, 21])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack: \n    def __init__(self): \n        self.stack = []\n  \n    def push(self, data): \n        self.stack.append(data)\n  \n    def pop(self):\n        if len(self.stack) == 0:\n            return -1\n        return self.stack.pop()\n  \n    def peek(self):\n        if len(self.stack) == 0:\n            return -1\n        return self.stack[-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_computer_move():\n    moves = ['rock', 'paper', 'scissors']\n    return random.choice(moves)\n\ndef calculate_winner(player_move, computer_move):\n    if player_move == computer_move:\n        return 'draw'\n\n    elif player_move == 'rock' and computer_move == 'scissors':\n        return 'player'\n    elif player_move == 'paper' and computer_move == 'rock':\n        return 'player'\n    elif player_move == 'scissors' and computer_move == 'paper':\n        return 'player'\n\n    else:\n        return 'computer' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: a, b = 0, 1\nfor _ in range(10):\n a, b = b, a + b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_random_password(n=10):\n    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    return ''.join(random.choice(chars) for _ in range(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from random import randint\n\nclass TicTacToeAgent:\n \n board = [[0,0,0],\n [0,0,0],\n [0,0,0]]\n \n def __init__(self):\n self.turn = 1\n \n def checkpattern(self):\n for i in range(3):\n if self.board[i][0]==self.board[i][1] and \\\n self.board[i][1]==self.board[i][2] and \\\n self.board[i][0]!=0:\n return True\n \n for j in range(3):\n if self.board[0][j]==self.board[1][j] and \\\n self.board[1][j]==self.board[2][j] and \\\n self.board[0][j]!=0:\n return True\n \n if self.board[0][0]==self.board[1][1] and \\\n self.board[1][1]==self.board[2][2] and \\\n self.board[0][0]!=0:\n return True\n \n if self.board[2][0]==self.board[1][1] and \\\n self.board[1][1]==self.board[0][2] and \\\n self.board[2][0]!=0:\n return True\n return False\n \n def turn(self,x,y):\n self.board[x][y] = self.turn\n self.turn = -self.turn\n \n def play(self):\n flag = 1\n while flag ==1:\n #user move\n i=int(input(\"input row: \"))\n j=int(input(\"input col: \"))\n self.turn(i,j)\n if self.checkpattern():\n print(\"user won\")\n flag = 0\n \n else:\n #AI move\n i = randint(0,2)\n j = randint(0,2)\n self.turn(i,j)\n if self.checkpattern():\n print(\"computer won\")\n flag = 0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_pair(arr, target): \n    myset = set() \n    for x in range(len(arr)): \n        if target-arr[x] in myset: \n            return True \n        myset.add(arr[x]) \n          \n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_string = 'Hello, world!'\npunctuation = '!,.'\nfor char in my_string: \n if char in punctuation: \n my_string = my_string.replace(char, \"\")\n\nprint(my_string)\n# Output: Hello world but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_leap_year(year):\n    # If a year is divisible by 4 and not divisible by 100, \n    #  it is a leap year.\n    # If a year is divisible by 4, 100 and 400, \n    #  it is also a leap year\n    \n    if year % 4 == 0 and year % 100 != 0:\n        return True\n    elif year % 4 == 0 and year % 100 == 0 and year % 400 == 0:\n        return True\n    else:\n        return False\n    \n    \n# Testing\nprint(is_leap_year(2020)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def powersOfTwo(n):\n    powers = []\n    for i in range(n + 1):\n        powers.append(2**i)\n    return powers\n\nn = 8\nprint(powersOfTwo(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_words(sentence):\n    words = sentence.split(\" \")\n    reversed_words = words[::-1]\n    return \" \".join(reversed_words)\n\nprint(reverse_words(\"Hello world!\"))\n# Output: world! Hello but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sqrt(x): \n    root = x \n    epsilon = 0.0001\n    while abs(x - root * root) > epsilon:\n        root = (x/root + root)/2\n    return root but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import libraries\nimport numpy as np\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import GridSearchCV\n\n# Define data\nX = np.array([[1000], [700], [500], [200]])\ny = np.array([1, 0.75, 0.5, 0.25])\n\n# Define model\nmodel = SVR(kernel='rbf', gamma='scale')\n\n# Define hyperparameters\nparams = {'C' : [0.1, 1, 10, 100],\n          'epsilon': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]}\n\n# Grid search for best hyperparameters\nmodel_cv = GridSearchCV(model, param_grid=params, cv=3, scoring='neg_mean_squared_error')\n\n# Fit the model\nmodel_cv.fit(X, y)\n\n# Best hyperparameters\nprint(\"Best hyperparameters:\", model_cv.best_params_)\n \n# Best score\nprint(\"Best score:\", model_cv.best_score_) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generateRandomIP():\n    ip = \".\".join(str(random.randint(0,255)) for i in range(4))\n    return ip\n\nip_address = generateRandomIP()\nprint(\"Random IP address:\", ip_address) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import flask\nfrom flask import request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = flask.Flask(name)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"sqlite:///users.sqlite3\"\ndb = SQLAlchemy(app)\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(50), unique=True, nullable=False)\n    password = db.Column(db.String(80), unique=True, nullable=False)\n\ndb.create_all()\n\n@app.route('/users/register', methods=['POST'])\ndef register():\n    user_data = request.get_json()\n    username = user_data['username']\n    password = user_data['password']\n\n    new_user = User(username=username, password=password)\n    db.session.add(new_user)\n    db.session.commit()\n    \n   return jsonify({\"message\": f\"User {username} was successfully created!\"}), 201\n\n@app.route('/users/login', methods=['POST'])\ndef login():\n    user_data = request.get_json()\n    username = user_data['username']\n    password = user_data['password']\n\n    user = User.query.filter_by(username=username, password=password).first()\n    if user:\n         return jsonify({\"message\": f\"User {username} is successfully logged in!\"}), 200 \n    \n    return jsonify({\"message\": \"Invalid credentials\"}), 401\n\nif name == 'main':\n    app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: even_numbers = [x for x in numbers if x % 2 == 0]\n\nprint(even_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def invert_dict(dictionary):\n    inverted_dict = {}\n    for key, value in dictionary.items():\n        inverted_dict[value] = key\n    return inverted_dict\n\ninverted_dict = invert_dict(my_dict)\nprint(inverted_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n \ndef generate_random_string(num_chars): \n    # Generate a random string of length num_chars\n    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    random_string = \"\"\n    for i in range(num_chars):\n        random_string += random.choice(chars)\n    return random_string\n \ndef generate_unique_url(base_url): \n    random_string = generate_random_string(8)\n    unique_url = base_url + random_string\n    return unique_url\n\nif __name__ == '__main__':\n    output = generate_unique_url('www.example.com/')\n    print(output) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent_element(arr):\n    frequencies = {}\n    max_frequency = 0\n    element = None\n    for item in arr:\n        if item in frequencies:\n            frequencies[item] += 1\n        else:\n            frequencies[item] = 1\n        if frequencies[item] > max_frequency:\n            max_frequency = frequencies[item]\n            element = item\n    return element\n\nif __name__ == '__main__':\n    arr = [3, 4, 6, 7, 3, 6, 8, 7, 6]\n    print(most_frequent_element(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combine_dicts(d1, d2): \n    new_dict = {} \n    for item in d1: \n        if item in d2: \n            new_dict[item] = d1[item] + d2[item] \n        else: \n            new_dict[item] = d1[item] \n  \n    for item in d2: \n        if item in d1: \n            new_dict[item] = d1[item] + d2[item] \n        else: \n            new_dict[item] = d2[item] \n    return new_dict \n\nd1 = {'a' : 100, 'b' : 200, 'c' : 300} \nd2 = {'a' : 300, 'b' : 200, 'd' : 400}\nprint(combine_dicts(d1, d2)) # {'a': 400, 'b': 400, 'c': 300, 'd': 400} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\n\ndef generate_random_word():\n    word = ''\n    for i in range(5):\n        word += random.choice(alphabet)\n    return word\n\nprint(generate_random_word()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import smtplib\n \n# Sender email address and password\nsender_email = \"example@gmail.com\"\npassword = \"your_password\"\n \n# Receiver email address\nrec_email = \"example@gmail.com\"\n \n# Message to send\nmessage = \"This is a message from Python\"\n \n# Email subject\nsubject = \"Automated Email from Python\"\n \n# Email body\nbody = \"Subject: {}\\n\\n{}\".format(subject, message)\n \n# Initialize the server\nserver = smtplib.SMTP(\"smtp.gmail.com\", 587)\nserver.starttls()\n \n# Login with sender email and password\nserver.login(sender_email, password)\n \n# Send the email\nserver.sendmail(sender_email, rec_email, body)\n \n# Quit the server\nserver.quit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create a multiplication table for a given number\nnum = 6\n\n# Loop to generate the table\nfor i in range(1, 11):\n  print(f'{num} x {i} = {num * i}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers.sort()\nprint(numbers) # prints [1, 2, 3, 4, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def validate_password(password, criteria):\n  isValid = True\n  criteriaList = criteria.split() # Split criteria into list\n\n  # Check length\n  if len(password) < 8:\n    isValid = False\n\n  # Check for uppercase\n  if not any(c.isupper() for c in password):\n    isValid = False\n\n  # Check for lowercase\n  if not any(c.is lower() for c in password):\n    isValid = False\n\n  # Check for number\n  if not any(c.isdigit() for c in password):\n    isValid = False\n\n  # Check for special character\n  specialCharacters = set(\"!@#$%^&*()_+=-/?.,><':;|][}{`~\")\n  if not any(c in specialCharacters for c in password):\n    isValid = False\n\n  return isValid but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The variable n is a float. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_first_occurrence(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countOccurences(str, char):\n    count = 0\n    for ch in str:\n        if ch == char:\n            count += 1\n    return count\n\nprint(countOccurences('abcdefg', 'a')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter as tk\n\ndef user_input():\n    entered_text = input_field.get()\n    output.configure(text= \"You entered: \" + entered_text)\n\n# basic window\nwindow = tk.Tk()\nwindow.title(\"My GUI Application\") # title of the window\nwindow.geometry(\"250x250\") # size of the window\n\n# adding a label\nlabel = tk.Label(window, text=\"Enter your input:\")\nlabel.pack()\n\n# adding a text box\ninput_field = tk.Entry(window)\ninput_field.pack()\n\n# button to submit data\nsubmit_button = tk.Button(window, text=\"Submit\", command=user_input)\nsubmit_button.pack()\n\n# output field\noutput = tk.Label(window, text=\"Output Here\")\noutput.pack()\n\nwindow.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\nimport string\nimport random\n\nlength = int(input(\"Enter the desired password length: \"))\ncharacters = string.ascii_letters + string.digits + string.punctuation\n\npassword = ''.join(random.choice(characters) for i in range(length))\n\nprint(f\"Generated password: {password}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# loading dataset\ndata = pd.read_csv('data.csv')\n\n# preprocessing age column\ndata['age'] = data['age'].apply(lambda x: int(x))\n\n# preprocessing job type\ndata['job type'].replace({\n 'manager': 1,\n 'clerk': 2,\n 'data analyst': 3\n}, inplace=True)\n\n# preprocessing region\ndata['region'].replace({\n 'east': 1,\n 'west': 2,\n 'south': 3,\n 'north': 4\n}, inplace=True)\n\n# preprocessing gender\ndata['gender'].replace({\n 'male': 1,\n 'female': 0\n}, inplace=True)\n\n# preprocessing salary \ndata['salary'].replace({\n 'low': 1,\n 'medium': 2,\n 'high': 3\n}, inplace=True)\n\n# preprocessing satisfaction\ndata['satisfaction'].replace({\n 'no': 0,\n 'yes': 1 \n}, inplace=True)\n\n# preprocessing feedback\ndata['feedback'] = data['feedback'].str.lower()\n\n# drop NA values\ndata.dropna(inplace=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import necessary libraries\nimport requests\nfrom bs4 import BeautifulSoup\n\n# specify URL\nURL = \"https://www.reddit.com/r/askreddit/\"\n\n# send GET request\nreq = requests.get(URL)\n\n# parse HTML\nsoup = BeautifulSoup(req.content, 'html.parser')\n\n# identify all comments\ncomments = soup.find_all('div', attrs = {\"class\": \"usertext-body\"})\n\n# store comments in a list\ncomments_list = []\n\n# extract and append comment contents to the list\nfor comment in comments:\n comments_list.append(comment.text.strip())\n\n# print the list of comments\nprint(comments_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def validate_syntax(code):\n    try: \n        compile(code, '<string>', 'exec')\n        return True\n    except SyntaxError: \n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\ndef clean_text(text):\n     text = re.sub('[^A-Za-z0-9]+', ' ', text)\n     text = text.lower()\n     return text\n\ndef train_test_split(data):\n\ttotal_values = len(data)\n\ttest_percent = 0.2\n\ttrain_values = int(total_values - (test_percent * total_values))\n\treturn data[0: train_values], data[train_values+1: total_values]\n\ndef create_model(data):\n\t# data cleaning\n\tfor i in range(len(data)):\n\t\tdata[i][0] = clean_text(data[i][0])\n\tx_train, x_test =  train_test_split(data)\n\t# feature extraction and model training\n\tcv = CountVectorizer()\n\tx_train_vec = cv.fit_transform(x_train[:, 0])\n\tx_test_vec = cv.transform(x_test[:, 0])\n\tclf = MultinomialNB()\n\tclf.fit(x_train_vec, x_train[:, 1])\n\t# model testing\n\tscore = clf.score(x_test_vec, x_test[:, 1])\n\treturn clf, score\n\n# Driver Code \ndata = [['this is an unwanted message', 0],['this is a legitimate message', 1]]\nmodel, score = create_model(data)\nprint(\"Model Accuracy:\", score) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_celsius(celsius):\n # Convert celsius to Fahrenheit\n fahrenheit = celsius * 9/5 + 32\n\n # Return fahrenheit value\n return fahrenheit\n\n# Test\ncelsius = 32\nprint(convert_celsius(celsius)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport mysql.connector\n\n# Connect to MySQL database\ndb = mysql.connector.connect(\n host=\"localhost\",\n user=\"yourusername\",\n passwd=\"yourpassword\",\n database=\"yourdatabase\"\n)\nmycursor = db.cursor()\n\n# Make the request to the website\nr = requests.get('http://example.com')\n\n# Parse the response\ncontent = r.content\nhtml_content = BeautifulSoup(content, 'html.parser')\ntable = html_content.find('table') \n\n# Store data in database\nfor row in table.find_all('tr'):\n cols = row.find_all('td')\n sql = \"INSERT INTO tablename (column1, column2, column3) VALUES (%s, %s, %s)\"\n val = (cols[0].text, cols[1].text, cols[2].text)\n mycursor.execute(sql, val)\n db.commit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for row in dataset.values():\n salary = row['Salary']\n if salary < 40000 or salary > 100000:\n print(\"Out-of-range value: {}\".format(salary)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def removeDuplicates(arr): \n    newArr = []\n    for i in arr: \n        if i not in newArr: \n            newArr.append(i) \n    return newArr\n\narr = [1, 3, 5, 4, 6, 3, 5, 4]\nresult = removeDuplicates(arr)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(arr):\n length = len(arr)\n \n for i in range(length - 1, 0, -1):\n for j in range(0, i):\n if arr[j] < arr[j + 1]:\n arr[j], arr[j + 1] = arr[j + 1], arr[j]\n \n return arr\n \na = [3, 5, 7, 2, 4, 1]\nprint(bubble_sort(a)) # [7, 5, 4, 3, 2, 1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Python\n\ndef remove_duplicates(arr):\n    new_arr = []\n    for i in arr:\n        if i not in new_arr:\n            new_arr.append(i)\n    return new_arr\n\narr = [1, 2, 3, 1, 4, 2, 3]\nprint(\"The array without duplicates is:\", remove_duplicates(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_array(array):\n    for i in range(len(array)):\n        lowest = i\n        for j in range(i + 1, len(array)):\n            if array[lowest] > array[j]:\n                lowest = j\n        array[i], array[lowest] = array[lowest], array[i]\n    return array\n\nresult = sort_array([1, 5, 3, 8, 4, 2])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_first_duplicate(arr):\n    seen = dict()\n\n    for i, n in enumerate(arr):\n        if n in seen:\n            return i\n        else:\n            seen[n] = True\n\n    return -1\n\narr = [5, 7, 9, 3, 1, 3]\nprint(find_first_duplicate(arr))\n# Output: 4 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd \n\ndf = pd.read_csv(\"credit_card_transactions.csv\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def word_count(words):\n    counter = {}\n    for word in words:\n        if word not in counter:\n            counter[word] = 0\n        counter[word] += 1\n    return counter\n    \nwords = [\"apple\", \"orange\", \"apple\", \"orange\", \"pear\"]\nword_count(words)\n\"\"\"\n{'apple': 2, 'orange': 2, 'pear': 1}\n\"\"\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import libraries\nimport numpy as np\nimport pandas as pd\n\n# Read in the dataset\ndata = pd.read_csv('dataset.csv')\n\n# Impute missing values\ndata.fillna(data.mean(), inplace=True)\n\n# Normalize data\ndata_norm = (data - data.min())/(data.max() - data.min()) \n\n# Scale data\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ndata_scale = scaler.fit_transform(data_norm)\n\n# Output the result\nprint(\"Data Preprocessing complete! \\n\", data_scale) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ntitles = soup.find_all('h2')\ndescriptions = soup.find_all('p')\n\nfor title in titles:\n print(title.text)\n\nfor description in descriptions:\n print(description.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def encrypt_message(message, key): \n    encrypted_message = \"\" \n      \n    for i in range(len(message)): \n        x = (ord(message[i]) + \n             ord(key[i % len(key)])) % 26\n        x += ord('A') \n        encrypted_message += chr(x) \n          \n    return encrypted_message but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [1, 2, 3, 4]\nresult = 0\n\nfor i in range(len(arr)):\n  result += arr[i] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(a, b): \n    if a == 0 : \n        return b  \n  \n    return gcd(b % a, a)  \n  \n# Driver program  \nprint(gcd(30,15)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person: \n  def __init__(self, name, age): \n    self.name = name \n    self.age = age \n  \n  def getInfo(self): \n    return (self.name, self.age) \n\n# Create an object \np1 = Person(\"John\", 36) \nprint(p1.getInfo()) \n\n# Modifying object properties \np1.age = 40\nprint(p1.getInfo()) \n\n# Deleting Object Properties \ndel p1.age \nprint(p1.getInfo()) \n\n# Deleting Objects \ndel p1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Max value in array\n\ndef max_val(array):\n    max_val = array[0]\n    for num in array[1:]:\n        if num > max_val:\n            max_val = num\n    return max_val but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Importing the libraries\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\n# Importing the dataset\ndataset = pd.read_csv('spam_emails.csv')\n\n# Preprocessing\ncorpus = dataset.iloc[:, 0].values\n\n# Create the DV\ny = dataset.iloc[:, -1].values\n\n# Create the bag of words model\ncv = CountVectorizer(max_features=2500)\nX = cv.fit_transform(corpus).toarray()\n\n# Fitting Logistic Regression to the Training set\nclassifier = LogisticRegression()\nclassifier.fit(X, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: options=[\"Create\",\"Update\",\"Delete\",\"Retrieve\",\"Quit\"]\n\ndef createUI():\n    \n    while True:\n        for i in range(len(options)): \n            print(str(i+1)+\" \"+options[i])\n        try:\n            inputValue=int(input('Make your selection:'))\n            if inputValue in range(1,len(options)+1):\n                break\n            else:\n                print('Please select a valid option!')\n        except:\n            print('Please select a valid option!')\n    return inputValue\n\nprint(createUI()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef score_sentiment(text, lexicon):\n    # Convert text to lowercase\n    text = text.lower()\n    \n    # Create a score\n    score = 0\n    for word in re.findall(r\"\\w+\", text):\n        if word in lexicon:\n            score += lexicon[word]\n    score = float(score) / len(text)\n    \n    # Convert score to 0-10\n    score = score * 10\n            \n    # Return score\n    return round(score, 2)\n    \nif __name__ == \"__main__\":\n    lexicon = {\n        'happy': 1,\n        'sad': -1,\n        'angry': -3\n    }\n    text = 'I am feeling happy'\n    score = score_sentiment(text, lexicon)\n    print ('Score:', score) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent(list): \n    return max(set(list), key = list.count) \n  \nlist = [4, 8, 9, 4, 6, 4, 8]\nprint(most_frequent(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Tree:\n    def __init__(self):\n        self.children = []\n        self.data = None\n\n    def add_child(self, child):\n        self.children.append(child)\n\n    def get_data(self):\n        return self.data\n\n    def set_data(self, data):\n        self.data = data but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(str1, str2):\n    list_str1 = list(str1)\n    list_str1.sort()\n    list_str2 = list(str2)\n    list_str2.sort()\n\n    return (list_str1 == list_str2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sum = 0\nfor x in [1,2,3,4,5]:\n sum += x\nprint(sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def hanoi(discs, start, temp, end):\n    if discs > 0:\n        hanoi(discs - 1, start, end, temp)\n        end.append(start.pop())\n        hanoi(discs - 1, temp, start, end) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: d = {\"name\": \"John\", \"age\": 24, \"class\": \"Engineering\"}\n\nsorted_d = sorted(d.items(), key=lambda x: x[0]) \n\nprint(sorted_d) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_nth_index(text, n):\n    return text[:n] + text[n + 1:] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sqrt(x):\n    guess = x\n    i = 0\n    while guess * guess != x and i < 20:\n        guess = (guess + x / guess) / 2.0\n        i += 1\n    return guess\n\nprint(sqrt(25)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nimport re\n\ndef classify_email(email):\n    email_words = re.findall(\"[a-zA-Z0-9]+\", email)\n    frequency = nltk.FreqDist(email_words)\n    common_words = frequency.most_common(30)\n\n    spam_words = [\"buy\", \"free\", \"unlimited\", \"cash\", \"click\", \"amazing\"]\n    is_spam = False\n\n    for word in common_words:\n        if word in spam_words:\n            is_spam = True\n \n    if is_spam:\n        print(\"This email is classified as SPAM.\")\n    else:\n        print(\"This email is classified as NOT SPAM.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def volume_of_cube(edge_length):\n    return edge_length ** 3\n    \nprint(volume_of_cube(3)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def number_divisible_by_3(list):\n    count = 0\n    for item in list:\n        if item % 3 == 0:\n            count += 1\n    return count\n\nresult = number_divisible_by_3(list)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.feature_extraction.text import CountVectorizer \nfrom sklearn.naive_bayes import MultinomialNB\n\n# Load the data\ndf = pd.read_csv('data.csv')\n\n# Split the data\nX_train, X_test, y_train, y_test = train_test_split(df['message'], df['label'], test_size=0.2)\n\n# Vectorize the data\nvec = CountVectorizer()\nX_train_count = vec.fit_transform(X_train.values)\nX_test_count = vec.transform(X_test.values)\n\n# Train the model\nclf = MultinomialNB()\nclf.fit(X_train_count, y_train)\n\n# Test the model\nscore = clf.score(X_test_count, y_test)\nprint(score) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def schedule(tasks):\n  # sort tasks by start time\n  tasks.sort(key=lambda x: x['start'])\n  \n  # track current time\n  time = 0\n  \n  # results list\n  results = []\n  \n  while len(tasks) > 0:\n    # find the next task that can be completed\n    next_task = None\n    for task in tasks:\n      if task['start'] >= time:\n        next_task = task\n        break\n      \n    # if no task can be completed, break out of the loop\n    if next_task == None:\n      break\n      \n    # remove the task from the list\n    tasks.remove(next_task)\n    \n    # add the task to the results and update the time\n    results.append(next_task)\n    time = next_task['end']\n  \n  return results\n  \nprint(schedule(tasks)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_element(lst):\n    max_element = lst[0]\n    for element in lst:\n        if element > max_element:\n            max_element = element\n    return max_element but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os.path\nimport hashlib\n\nfrom django.shortcuts import render_to_response\nfrom django.template.context import RequestContext\nfrom django.http import HttpResponseRedirect\n\n\ndef get_image_path(instance, filename):\n    \"\"\"\n    Converts an image filename to a hash.\n    \"\"\"\n    name = hashlib.md5(\"%s\" % instance.id).hexdigest()\n    ext = os.path.splitext(filename)\n    return os.path.join(\"%s/%s\" % (instance._meta.app_label, instance._meta.module_name), '%s%s' % (name, ext[1]))\n\n\ndef render(request, *args, **kwargs):\n    \"\"\"\n    Simple wrapper for render_to_response.\n    \"\"\"\n    kwargs['context_instance'] = RequestContext(request)\n    return render_to_response(*args, **kwargs)\n\n\ndef redirect(request, obj=None):\n    \"\"\"\n    Simple wrapper for HttpResponseRedirect that checks the request for a\n    'next' GET parameter then falls back to a given object or url string.\n    \"\"\"\n    next = request.GET.get('next', None)\n    redirect_url = '/'\n\n    if next:\n        redirect_url = next\n    elif isinstance(obj, str):\n        redirect_url = obj\n    elif obj and hasattr(obj, 'get_absolute_url'):\n        redirect_url = obj.get_absolute_url()\n    return HttpResponseRedirect(redirect_url) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from bs4 import BeautifulSoup\nimport requests\n\nurl = 'https://www.example.com'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nlinks = []\nfor link in soup.find_all('a'):\n    links.append(link.get('href'))\n\nprint(links) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseString(s): \n    if len(s) == 0: \n        return s \n    else: \n        return reverseString(s[1:]) + s[0] \n  \n# Driver code \ns = \"thequickbrownfox\"\n  \nprint (\"The original string  is : \",end=\"\") \nprint (s) \n  \nprint (\"The reversed string(using recursion) is : \",end=\"\") \nprint (reverseString(s)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: max_count = 0\nmax_element = None\nfor element in data:\n  count = data.count(element)\n  if count > max_count:\n    max_element = element\n    max_count = count\nprint(max_element) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.cluster import FuzzyCMeans\nimport numpy as np\n\n# Input data\ndata = np.array([[1.3, 2.3, 1.1], [2.2, 3.2, 1.7], [3.1, 4.1, 2.9], [4.2, 5.1, 3.7], [5.3, 6.2, 4.2]])\n\n# Fuzzy C-Means Clustering\n# Set the number of clusters\nnclusters = 3\n\n# Create the Fuzzy C-Means clustering object\nfcm = FuzzyCMeans(n_clusters=nclusters)\n\n# Train the model using the data\nfcm.fit(data)\n\n# Get the optimized cluster centers and membership values\ncluster_centers = fcm.cluster_centers_\nmemberships = fcm.u\n\n# Print the cluster centers\nprint('Optimized Cluster Centers: ')\nprint(cluster_centers)\n\n# Print the cluster memberships\nprint('Optimized Membership Values: ')\nprint(memberships) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(10):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nlength = 5\n\nrand_nums = [random.randint(0,100) for i in range(length)]\nprint(rand_nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n#Variable to indicate presence of Header\nhas_header = False\n\n#Read CSV\ndata = pd.read_csv('mydata.csv',header=None) \n\n#Check for presence of Header\nif data.iloc[0,0] != 'Column1':\n  has_header = True\n\n#Read again with header\nif has_header:\n  data = pd.read_csv('mydata.csv') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class TreeNode:\n    def __init__(self,data):\n        self.data = data\n        self.left = None\n        self.right = None\n\nclass BinarySearchTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self,data):\n        node = TreeNode(data)\n\n        if self.root is None:\n            self.root = node\n        else:\n            current = self.root\n            while True:\n                if data < current.data:\n                    if current.left:\n                        current = current.left\n                    else:\n                        current.left = node\n                        break\n                elif data > current.data:\n                    if current.right:\n                        current = current.right\n                    else:\n                        current.right = node\n                        break\n                else:\n                    break but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(x):\n    if x < 2:\n        return False\n    elif x == 2:\n        return True\n    elif x % 2 == 0:\n        return False\n    else:\n        for i in range(2, x):\n            if x % i == 0:\n                return False\n        return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_largest_number(arr):\n    largest = arr[0]\n    for num in arr:\n       if num > largest:\n           largest = num\n    return largest\n\nlargest_num = get_largest_number([2, 11, 15, 9, 5])\nprint(largest_num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_longest_sequence(arr):\n    max_length = 0\n    start_index = 0\n\n    # find first non-matching element\n    while start_index < len(arr) - 1 and arr[start_index] + 1 == arr[start_index + 1]:\n        start_index += 1\n\n    # compare subsequent elements\n    for i in range(start_index + 1, len(arr)):\n        prev = arr[i-1]\n        curr = arr[i]\n\n        # count length of consecutive sequence\n        if prev + 1 == curr:\n            length = i - start_index + 1\n\n            # update max length\n            if  length > max_length:\n                max_length = length\n        else:\n            # current sequence ended, reset\n            start_index = i\n    return max_length but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter \n\ndef most_frequent(arr): \n c = Counter(arr) \n return c.most_common(1)[0][0]\n\narr = [1, 3, 3, 3, 5, 4, 4, 6] \nprint(most_frequent(arr)) \n# Output: 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re \n  \ndef validate_email(email): \n  \n    regex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n  \n    if(re.search(regex,email)):  \n        domain = email.split('@')[1] \n        print(\"Domain name:\", domain)      \n    else:  \n        print(\"Invalid Email\")  \n  \n  \nemail = \"test@example.com\"\nvalidate_email(email) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n  \n    # Taking 1st two Fibonacci numbers as 0 and 1 \n    FibArray = [0, 1] \n      \n    for i in range(2, n): \n        FibArray.append(FibArray[i-2] + FibArray[i-1]) \n       \n    return FibArray[:n] \n\nprint(Fibonacci(7)) # [0, 1, 1, 2, 3, 5, 8] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\nclass CrossEntropy:\n    def __init__(self):\n        pass\n    \n    def loss(self, p, q):\n        return - np.sum(p * np.log(q)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_full_name(first, last):\n  full_name = f\"{first} {last}\"\n  return full_name\n\nname = get_full_name(\"John\", \"Smith\")\nprint(name) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef shuffle_list(lst):\n    random.shuffle(lst)\n    return lst\n\nmy_list = [1,2,3,4,5]\nshuffled_list = shuffle_list(my_list)\nprint(shuffled_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"http://example.com/articles\"\nr = requests.get(url)\nhtml = r.text\nsoup = BeautifulSoup(html, \"html.parser\")\n\ntitles = []\nfor art in soup.find_all(\"h2\"):\n titles.append(art.get_text())\n\nprint(titles) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from itertools import permutations \n\ndef possible_anagrams(words): \n    anagrams = set() \n    for word in words: \n        perm_words = [''.join(perm) for perm in permutations(word)] \n        for perm_word in perm_words: \n            if perm_word in words: \n                anagrams.add(perm_word) \n    return anagrams \n\npossible_anagrams(words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(10):\n print(\"------------\\n\"*10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentences = [\"Hello world!\", \"I am learning Python!\", \"How are you?\"]\n\nreversed_sentences = [sentence[::-1] for sentence in sentences]\n \nprint(reversed_sentences)\n# Output: [\"!dlrow olleH\", \"!nohtyP gninrael m'I\", \"?uoy era woH\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef extract_zip_codes(string):\n    zip_codes = re.findall(\"(?<=ZIP )\\d+\", string)\n    return zip_codes\n\nprint(extract_zip_codes(\"My address is 123 Main St, ZIP 12345\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_list(start, end):\n    result = []\n    for i in range(start, end+1):\n        if i%2 == 0:\n            result.append(i)\n    return result\n\nprint(generate_list(2, 20)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_element(list, element):\n    count = 0\n    for i in list:\n        if i == element:\n            count += 1\n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # define a string\nstring = \"12345\"\n\n# convert string to int\ninteger = int(string)\n\n# convert string to float\nfloating = float(string)\n\n# print results\nprint(\"String: \", string)\nprint(\"Integer: \", integer)\nprint(\"Float: \", floating)\n\n# Output\n# String: 12345\n# Integer: 12345\n# Float: 12345.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_non_alphabetic(string):\n    new_string = \"\"\n    for char in string:\n        if char.isalpha():\n            new_string += char\n    return new_string\n\nprint(remove_non_alphabetic(string)) # prints Thisisstring but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_item(lst, item):\n    while item in lst:\n        lst.remove(item)\n    return lst\n\nresult = remove_item([1, 2, 3, 4], 2)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask\nfrom flask_restful import Api, Resource, reqparse\n\napp = Flask(__name__)\napi = Api(app)\n\nclass Post(Resource):\n parser = reqparse.RequestParser()\n parser.add_argument('title',\n type=str,\n required=True,\n help=\"This field cannot be left blank!\")\n parser.add_argument('content',\n type=str,\n required=True,\n help=\"This field cannot be left blank!\")\n\ndef get(self,id):\n return {'post': None}, 404\n\ndef post(self,id):\n return {'message': 'post created successfully'}, 201\n\ndef delete(self,id):\n return {'message': 'post deleted successfully'}, 200\n\napi.add_resource(Post, '/post/<int:id>')\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printMultTable(n):\n    for i in range(1, 11):\n        print(n, 'x', i, '=', n*i)\n\nprintMultTable(4) but is not the same. just give one example and only return the code."}
