{"prompt": "make some code that functions the same as the following code: def max_frequency_char(string):\n    char_freq = {}\n    for char in string:\n        if char in char_freq.keys():\n            char_freq[char] += 1 \n        else:\n            char_freq[char] = 1\n    max_freq = 0 \n    max_char = None\n    for char, freq in char_freq.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_char = char \n    return max_char\n\nprint(max_frequency_char(sample_str)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_sort(arr): \n    if len(arr) >1: \n        mid = len(arr)//2\n        L = arr[:mid]\n        R = arr[mid:]\n  \n        merge_sort(L)\n        merge_sort(R)\n  \n        i = j = k = 0\n          \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                arr[k] = L[i] \n                i+=1\n            else: \n                arr[k] = R[j] \n                j+=1\n            k+=1\n          \n        while i < len(L): \n            arr[k] = L[i] \n            i+=1\n            k+=1\n          \n        while j < len(R): \n            arr[k] = R[j] \n            j+=1\n            k+=1\n\nif __name__ == '__main__':\n    arr = [0, 4, 1, 3, 6, 5, 8, 7]\n    print(\"Given array is\", arr)\n    merge_sort(arr) \n    print(\"Sorted array is: \", arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [1, 2, 3, 4, 5] \nnew_list = [x**2 for x in my_list if x % 2 == 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return fibonacci(n-1)+fibonacci(n-2) \n# Driver Program \nprint(fibonacci(9)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply(x, y):\n\tif y == 0:\n\t\treturn 0\n\telse:\n\t\treturn x + multiply(x, y - 1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_zeros(lst):\n  for i in range(len(lst)):\n    if lst[i] == 0:\n      lst[i] = -1\n  return lst\n\n# Main\ninput_list = [1, 0, 2, 4, 0, 5]\nnew_list = replace_zeros(input_list)\n\nprint('List after replacement:', new_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: n = 3\n\nfor i in range(1, n+1):\n    for j in range(1, n+1):\n        print(f'{i} x {j} = {i*j}', end='\\t')\n    print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to demonstrate Min Heap \nfrom heapq import heappop, heappush \n  \nclass MinHeap: \n   \n    def __init__(self): \n        self.heap = list() \n   \n    # Inserts a new key 'k'  \n    def push(self, k): \n        heappush(self.heap, k)            \n  \n    # Decrease value of key at index 'i' to new_val \n    # It is assumed that new_val is smaller than heap[i] \n    def decreaseKey(self, i, new_val): \n        self.heap[i] = new_val  \n        while(i != 0 and self.heap[int((i - 1) / 2)] > self.heap[i]): \n            //Swapping the two keys \n            self.heap[i] = self.heap[int((i - 1) / 2)] \n            self.heap[int((i - 1) / 2)] = self.heap[i] \n            i = int((i - 1) / 2); \n  \n    # Method to remove minium element from min heap \n    def pop(self): \n        if self.heap: \n            # Replace root with last element of the heap\n            self.heap[0] = self.heap[len(self.heap) - 1] \n            # Remove last element\n            self.heap.pop() \n            # Heapify the root element\n            self.minHeapify(0) \n        else: \n            return None\n   \n    # This function mainly calls minHeapify of the root. \n    def minHeapify(self, i): \n        l = 2 * i + 1     \n        r = 2 * i + 2     \n        smallest = i \n        if l < len(self.heap) and self.heap[i] > self.heap[l]: \n            smallest = l \n        if r < len(self.heap) and self.heap[smallest] > self.heap[r]: \n            smallest = r \n        if smallest != i: \n            self.heap[i], self.heap[smallest] = self.heap[smallest], self.heap[i] \n            self.minHeapify(smallest) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef get_area(a, b, c):\n    s = (a + b + c) / 2\n    area = math.sqrt(s*(s-a)*(s-b)*(s-c))\n    return area\n\ninput_data = 5, 6, 7\narea = get_area(*input_data)\nprint(area)  # Output: 14.696938456699069 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def biggest_number(num_list):\n  return max(num_list)\n\nbiggest = biggest_number([1, 5, 4, 9, 2])\nprint(biggest) # prints 9 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Set the number of turns\nMAX_GUESSES = 5\n\n# Create an empty list that will contain the guessed letters\nguessed_letters = []\n\n# Welcome the user\nprint(\"Welcome to Hangman!\")\n\n# Generate a random word\nwith open(\"words.txt\", \"r\") as f:\n    words = f.read().splitlines()\nword = random.choice(words)\n\n# Create a list for the hidden word\nhidden_word = [\"_\" for i in range(len(word))]\n\n# Main game loop\nfor i in range(MAX_GUESSES):\n    # Print the current state of the game\n    print(\"\\nTurn {}\".format(i+1))\n    print(\" \".join(hidden_word))\n    print(\"Letters guessed: {}\".format(\"\".join(guessed_letters)))\n    \n    # Get a guess from the user\n    guess = input(\"Enter a letter: \")\n    guessed_letters.append(guess)\n    \n    # Update the hidden_word with the guessed letter\n    if guess in word:\n        indices = [i for i, x in enumerate(word) if x == guess]\n        for index in indices:\n            hidden_word[index] = guess\n    \n    # Check if the user won\n    if \"_\" not in hidden_word:\n        print(\"You Win!\")\n        break\n\n# Check for a loss\nif \"_\" in hidden_word:\n    print(\"You Lose! The word was {}.\".format(word)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: result = []\nnum = 1\nwhile len(result) < 5:\n    if (num % 7 == 0) and (num % 5 != 0):\n        result.append(num)\n    num += 1\n    \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\ndef generate_random_integers(start, end):\n    return random.randint(start, end)\n\ngenerate_random_integers(1, 10); //Output: 8 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def get_area(self):\n        return 3.14 * self.radius * self.radius but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replaceChar(s, charToReplace, replacementChar): \n    newStr = \"\"\n    for char in s:\n        if char == charToReplace:\n            newStr += replacementChar\n        else: \n            newStr += char\n    return newStr\n\nprint(replaceChar(\"hello world\", \"l\", \"a\")) # Output: \"heaaao worad\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import required modules\nimport requests\nimport json\n\n# set the base url\nbase_url = 'http://api.datapoint.metoffice.gov.uk/'\n\n# set the query parameters\nparams = {\n    'key': 'YOUR_API_KEY',\n    'res': 'sport'\n}\n\n# get the response from API\nresponse = requests.get(base_url, params=params)\n\n# parse the response\ndata = json.loads(response.text)\n\n# get list of all sports data sets\ndata_sets = [d['name'] for d in data['resources']]\n\n# print all data sets\nfor d in data_sets:\n    print(d) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def whitelist_user(user_list, whitelist_user):\n    Whitelisted_users = []\n    for user in user_list: \n        if user == whitelist_user:\n            Whitelisted_users.append(user)\n    \n    return Whitelisted_users but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_binary_representation(num):\n    # base case \n    if num == 0: \n        return 0\n  \n    # stores the binary representation\n    bin_rep = \"\"  \n  \n    # to store the remainder \n    rem = 0\n  \n    while (num != 0): \n        # calculate remainder\n        rem = num % 2\n        bin_rep += str(rem)\n        num //= 2\n  \n    # reverse the string and return it\n    bin_rep = bin_rep[::-1]\n    return bin_rep\n\n\n# Main program\nnum = 42\nbinary_rep = find_binary_representation(num)\nprint(binary_rep) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_base10(num1, num2): \n    return num1 + num2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def swapPositions(list, pos1, pos2): \n  \n    first_ele = list[pos1] \n    list[pos1] = list[pos2] \n    list[pos2] = first_ele \n  \n    return list\n  \n# Driver function \nlist = [4, 8, 1, 5] \npos1, pos2  = 0, 3\n  \nprint(swapPositions(list, pos1, pos2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\nimport tkinter\n\n# create the Tkinter window\nroot = tkinter.Tk()\n\n# set up the sqlite connection\nconn = sqlite3.connect('movies.db')\ncursor = conn.cursor()\n\n# create the table\ncursor.execute(\"\"\"CREATE TABLE IF NOT EXISTS movies (\n title TEXT,\n genre TEXT\n)\"\"\")\n\n# create labels for the search boxes\nsearch_title = tkinter.Label(root, text=\"Title:\")\nsearch_genre = tkinter.Label(root, text=\"Genre:\")\n\n# create search boxes\ntitle_box = tkinter.Entry(root)\ngenre_box = tkinter.Entry(root)\n\n# create a button to submit the search\nsubmit_button = tkinter.Button(root,\n                       text=\"Submit\",\n                       command=search_movies)\n\n#function that handles the whole search\ndef search_movies():\n    title = title_box.get()\n    genre = genre_box.get()\n\n    # build the sql query\n    query = \"\"\"SELECT * FROM movies WHERE\"\"\"\n    if title != '':\n        query+=f\"\"\" title=\"{title}\" AND\"\"\"\n    if genre != '':\n        query+=f\"\"\" genre=\"{genre}\"\"\"\n    query = f\"\"\"{query} ORDER BY title asc;\"\"\"\n\n    # execute the query\n    cursor.execute(query)\n \u00a7\u00a7 1131\n    rows = cursor.fetchall()\n\n    #render the data in the table\n    for row in rows:\n        row_text = f\"\"\" Title: {row[0]}, Genre: {row[1]}\"\"\"\n        row_label = tkinter.Label(root, text=row_text)\n        row_label.pack()\n\n#pack the widgets\nsearch_title.pack()\ntitle_box.pack()\n\nsearch_genre.pack()\ngenre_box.pack()\n\nsubmit_button.pack()\n\nroot.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_longest_consecutive_sequence(arr):\n    longest_val = 0\n    current_val = 0\n    for i in range(0, len(arr)-1):\n        current_val = 0\n        j = i\n        while arr[j] + 1 == arr[j+1]:\n            j += 1\n            current_val += 1\n        if current_val > longest_val:\n            longest_val = current_val\n    return longest_val        \n\nprint(find_longest_consecutive_sequence([9, 6, 1, 3, 7, 5, 4, 8]))  # 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nrandom_int = random.randint(1, 100) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Bicycle:\n def __init__(self, type, size, price, speed):\n self.type = type\n self.size = size\n self.price = price\n self.speed = speed\n\n def get_type(self):\n return self.type\n\n def get_size(self):\n return self.size\n\n def get_price(self):\n return self.price\n\n def get_speed(self):\n return self.speed\n\n# Creating an instance of the Bicycle class\nbike = Bicycle(\"mountain\", \"medium\", 500, 20)\n\n# Accessing class attributes\nprint(bike.get_type())\nprint(bike.get_size())\nprint(bike.get_price())\nprint(bike.get_speed())\n\n# Output: \nmountain\nmedium\n 500 \n 20 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_whitespaces(string):\n    return ' '.join(string.split())\n \nprint(remove_whitespaces(\"This     string  contains   too     much whitespace!\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nDesign an algorithm in Python to detect if a given tree is a binary search tree\n\"\"\"\n\n#Define the Node class\nclass Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\n\n# Define the isBST function \ndef isBST(root): \n    # Base condition\n    if root is None: \n        return True\n  \n    # Check if the value is within range\n    if root.val < getMaxValue(root.left) or root.val > getMinValue(root.right): \n        return False\n  \n    # Check the subtrees\n    if (not isBST(root.left)) or (not isBST(root.right)): \n        return False\n  \n    # Pass all test cases\n    return True\n  \n# Find the minimum value in a tree\ndef getMinValue(root): \n    if root is None: \n        return float(\"inf\") \n    minv = root.val \n    minv = min(minv, getMinValue(root.left)) \n    minv = min(minv, getMinValue(root.right)) \n    return minv\n  \n  \n# Find the maximum value in a tree\ndef getMaxValue(root): \n    if root is None: \n        return -float(\"inf\") \n    maxv = root.val \n    maxv = max(maxv, getMaxValue(root.left)) \n    maxv = max(maxv, getMaxValue(root.right)) \n    return maxv but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(exampleString): \n    return exampleString[::-1] \n\nprint(reverse_string(exampleString)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def min_max(array):\n    min_val = array[0]\n    max_val = array[0]\n    for element in array:\n        if(element > max_val):\n            max_val = element\n        if(element < min_val):\n            min_val = element\n    return (min_val, max_val) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(string):\n    # reverse the string and compare\n    reversed_string = ''.join(reversed(string)) \n    if string == reversed_string:\n        print(\"Input string is a palindrome\")\n    else:\n        print(\"Input string is not a palindrome\")\n        \nis_palindrome(\"racecar\")  # Outputs: \"Input string is a palindrome\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: dictionary = { \"Tractors\": 100, \"Cars\": 50 } but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortScores(scores):\n    return sorted(scores, reverse=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Given a list of numbers\nnums = [1, 4, 10, 6]\n\n# Calculate the average\ntotal = 0\nfor num in nums:\n    total += num\n\naverage = total/ len(nums)\n\n# Output the average\nprint(average) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.ext.declarative import declarative_base\n \nengine = create_engine('sqlite:///mydb.db')\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = 'users'\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    email = Column(String)\n\nsession = sessionmaker(bind=engine)()\n\n#query\nusers = session.query(User).all() \nfor user in users: \n print(f\"User: {user.name}, Email: {user.email}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [1, 2, 3, 4, 5]\n\nfor i in reversed(my_list):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: int a = 10;\nint b = 20; \nint c = a + b; but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for key, value in my_dict.items():\n    if my_dict.values().count(value) > 1:\n        print(key, value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isAnagram(s1, s2): \n \n    # Remove white spaces and convert strings to lowercase \n    s1 = s1.replace(' ', '').lower()\n    s2 = s2.replace(' ', '').lower()\n    \n    # Return boolean for sorted match. \n    return sorted(s1) == sorted(s2) \n  \n# Driver code \ns1 = \"apple\"\ns2 = \"lepap\"\nif isAnagram(s1, s2):\n    print(\"True, The strings are anagram of each other\")\nelse:\n    print(\"False, The strings are not anagram of each other\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_closest_pair_of_points(points): \n  min_dist = float(\"inf\") \n  pair=[None, None]\n  for i in range(len(points)): \n    for j in range(i + 1, len(points)): \n      dist = dist_between_points(points[i], points[j]) \n      if dist < min_dist: \n        min_dist = dist \n        pair[0], pair[1] = points[i], points[j] \n  return pair \n\ndef dist_between_points(p1, p2): \n  x1, y1 = p1 \n  x2, y2 = p2 \n  return math.sqrt((x1 - x2)**2 + (y1 - y2)**2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n  def __init__(self, name, roll_number, courses):\n    self.name = name \n    self.roll_number = roll_number \n    self.courses = courses but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_password(length):\n    chars = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(chars) for _ in range(length))\n\nprint(generate_password(8)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import the necessary modules\nfrom flask import Flask, request\nimport sqlite3\n\n# Create the Flask application\napp = Flask(__name__)\n\n# Establish a connection to the database\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\n\n# Create a function to delete a record\n@app.route('/delete_record/<int:id>', methods=['DELETE'])\ndef delete_record(id):\n    c.execute(\"DELETE FROM records WHERE rowid = ?\", (id,))\n    conn.commit()\n    return \"Record deleted successfully\"\n\nif __name__ == '__main__':\n    app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack:\n \n def __init__(self):\n self.head = None\n\n def is_empty(self):\n return self.head is None\n\n def push(self, data):\n node = Node(data)\n node.next = self.head\n self.head = node\n\n def pop(self):\n if self.head is None:\n return None\n data = self.head.data\n self.head = self.head.next\n return data\n\nclass Node:\n \n def __init__(self, data):\n self.data = data\n self.next = None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\ndata = {'Square Footage': [30], 'Bedrooms': [3], 'Bathrooms': [2], 'Location': ['Brooklyn']}\ndata = pd.DataFrame(data, columns = ['Square Footage', 'Bedrooms', 'Bathrooms', 'Location'])\n\ntrain, test = train_test_split(data, test_size = 0.2)\n\nX_train = train.iloc[:,:-1]\ny_train = train.iloc[:,-1]\n\nX_test = test.iloc[:,:-1]\ny_test = test.iloc[:,-1]\n\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)\n\npredictions = regressor.predict(X_test)\ntest['Predicted House Price'] = predictions\n\nprint(test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Class but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: There are many important libraries in Python that are useful for data science, such as:\n\n\u2022 NumPy \u2013 for array and matrix manipulation\n\u2022 Pandas \u2013 for data manipulation, analysis, and wrangling\n\u2022 Matplotlib \u2013 for data visualization\n\u2022 Scikit-learn \u2013 for machine learning algorithms\n\u2022 Tensorflow \u2013 for deep learning\n\u2022 Seaborn \u2013 for statistical data visualization\n\u2022 statsmodels \u2013 for statistical data analysis and modeling\n\u2022 Keras \u2013 for building deep learning models but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def getValueAtIndex(my_list, index):\n    return my_list[index]\n\nresult = getValueAtIndex([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Triangle:\n    def __init__(self, side1, side2, side3):\n        self.side1 = side1\n        self.side2 = side2\n        self.side3 = side3\n    \n    def get_perimeter(self):\n        return self.side1 + self.side2 + self.side3\n    \n    def get_area(self):\n        s = self.get_perimeter() / 2\n        return (s * (s-self.side1) * (s-self.side2) * (s-self.side3)) ** 0.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age\n  \n  def get_name(self):\n    return self.name\n\n  def get_age(self):\n    return self.age\n\n  def set_name(self, name):\n    self.name = name\n\n  def set_age(self, age):\n    self.age = age but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import argparse\n\n# Create a parser\nparser = argparse.ArgumentParser()\n# Add the arguments\nparser.add_argument('--num1', type=int, help='First number')\nparser.add_argument('--num2', type=int, help='Second number')\n# Execute the parse_args() method\nargs = parser.parse_args()\n\n#Calculate the sum\nsum = args.num1 + args.num2\n#Print the sum\nprint(sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def minimum_subset(data):\n features = list(data[0].keys())[:-1] # get the feature names\n min_num_feature = float('inf')\n features_selected = []\n \n for i in range(1,len(features)+1):\n for combination in itertools.combinations(features,i):\n num_correct, num_total = 0, 0\n for datum in data:\n if all(datum[feat] > 0.5 for feat in combination):\n if datum['category'] == 1:\n num_correct += 1\n elif all(datum[feat] <= 0.5 for feat in combination):\n if datum['category'] == 0:\n num_correct += 1\n num_total += 1\n \n if num_total == 0:\n continue\n accuracy = num_correct / num_total\n \n if accuracy == 1 and min_num_feature > i:\n min_num_feature = i\n features_selected = combination\n \n return features_selected but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_lca(root, node1, node2):\n    if root is None:\n        return None\n\n    if root == node1 or root == node2:\n        return root\n    \n    left_lca = find_lca(root.left, node1, node2)\n    right_lca = find_lca(root.right, node1, node2) \n \n    if left_lca and right_lca:\n        return root\n\n    return left_lca if left_lca is not None else right_lca but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string1 = input(\"Enter a string: \")\nstring2 = input(\"Enter another string: \")\n\nif string1 == string2:\n print(\"The strings are equal\")\nelse:\n print(\"The strings are not equal\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, render_template\n\napp = Flask(__name__)\n\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n if request.method == 'POST':\n number = int(request.form['number'])\n incremented_number = number + 1\n return render_template('index.html', incremented_number=incremented_number)\n else:\n return render_template('index.html')\n\nif __name__ == '__main__':\n app.run(debug=True)\n\n<!DOCTYPE html>\n<html>\n<head>\n <title>Python Flask Example</title>\n</head>\n<body>\n\t<form method=\"post\">\n\t\t<input type=\"number\" name=\"number\" />\n\t\t<input type=\"submit\" value=\"Submit\" />\n\t</form>\n\t\n\t{% if incremented_number %}\n\t\t<p>{{ incremented_number }}</p>\n\t{% endif %}\n</body>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_combinations(s):\n    result = []\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            result.append(s[i:j])\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Pizza:\n def __init__(self, size, crust, *toppings):\n self.size = size\n self.crust = crust\n self.toppings = toppings\n\n def describe_pizza(self):\n print(f\"This pizza is a {self.size}-inch pizza with a {self.crust} crust and the following toppings:\")\n for topping in self.toppings:\n print(f\"- {topping}\")\n\nmy_pizza = Pizza(12, 'thin', 'mushrooms', 'olives', 'pepperoni')\nmy_pizza.describe_pizza() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\nfrom tensorflow.keras import layers\n\n# Create the model\nmodel = tf.keras.Sequential()\nmodel.add(layers.Dense(50, activation='relu', input_dim=2))\nmodel.add(layers.Dense(20, activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))\n \n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n \n# Fit the model\nmodel.fit(X_train, y_train, epochs=20)\n\n# Evaluate the model\nscore = model.evaluate(X_test, y_test, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_all(arr, number): \n    if len(arr) < number: \n        return False\n\n    temp = [False for i in range(number + 1)] \n  \n    # mark each position present in the given list. \n    for i in range(len(arr)): \n        if arr[i] <= number: \n            temp[arr[i]] = True\n    # check if all numbers are marked.  \n    for i in range(1, number + 1): \n        if temp[i] == False: \n            return False\n\n    return True\n\narr = [1, 3, 5, 2] \nnumber = 5\nprint(find_all(arr, number)) # True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [\"AB\", \"AC\", \"AB\", \"CD\", \"AC\"]\n\nseen = set()\nres = []\n\nfor item in list:\n    if item in seen:\n        continue\n    seen.add(item)\n    res.append(item)\n\nlist[:] = res\n\nprint(list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mergeSortedLists(list1, list2):\n    list3 = []\n    i = 0\n    j = 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            list3.append(list1[i])\n            i += 1\n        else:\n            list3.append(list2[j])\n            j += 1\n\n    while i < len(list1):\n        list3.append(list1[i])\n        i += 1\n\n    while j < len(list2):\n        list3.append(list2[j])\n        j += 1\n    return list3\n\nlist3 = mergeSortedLists(list1, list2);\nconsole.log(list3); but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import necessary libraries\nimport numpy as np\nfrom sklearn import tree\n\n# Create the two classes\nclass_1 = [1, 0]\nclass_2 = [0, 1]\n\n# Initialize the dataset of features\ndata_set = np.array([ \n    [172, 80, 10, 28, 0],\n    [188, 78, 11, 33, 0],\n    [150, 55, 8, 21, 1],\n    [170, 68, 9, 22, 1],    \n])\n\n# Initialize the labels\nlabels = np.array([class_1, class_2, class_2, class_1])\n\n# Create the decision tree classifier\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(data_set, labels)\n\n# Create a prediction\nprediction = clf.predict([[187,77,11,34,0]])\n\n# Output the prediction\nif prediction == class_1: \n    print(\"Prediction: Class 1\")\nelif prediction == class_2:\n    print(\"Prediction: Class 2\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Set the URL you want to webscrape from\nurl = 'https://www.bbc.co.uk/news/business/'\n\n# Connect to the URL\nresponse = requests.get(url)\n\n# Parse HTML and save to BeautifulSoup object\nsoup = BeautifulSoup(response.text, \"html.parser\")\n\n# To download the whole data set, let's do a for loop through all a tags\nfor link in soup.find_all('a'):\n    # Get the text of the link\n    headline = link.get('title')\n    if headline is not None and headline != \"\":\n        print(headline) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to find sum of all elements in a list \ndef list_sum_recursive(nums): \n    # Base case \n\tif len(nums) == 1: \n\t\treturn nums[0] \n\telse: \n\t\t# Divide & Conquer\n\t\tmid = len(nums) // 2\n\t\tleftsum = list_sum_recursive(nums[:mid])\n\t\trightsum = list_sum_recursive(nums[mid:])\n\t\treturn leftsum + rightsum\n\t\n# Driver code \nnums = [1, 2, 3, 4, 5] \nsum_nums = list_sum_recursive(nums) \nprint(sum_nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from datetime import date\n\ndef days_since(date_str):\n    today = date.today()\n    given_date = date.fromisoformat(date_str)\n    days = today - given_date\n    return days.days but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\nfrom flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n# Create a connection to the database\nconn = sqlite3.connect('example.db')\n\n# Create an endpoint to handle creating data\n@app.route('/', methods=['POST'])\ndef create_data():\n data = request.json\n conn.execute('INSERT INTO data (data) VALUES (?)', (data,))\n conn.commit()\n return jsonify({'inserted': data})\n\n# Create an endpoint to handle reading data\n@app.route('/<int:id>/', methods=['GET'])\ndef read_data(id):\n cursor = conn.execute('SELECT data FROM data WHERE id=?', (id,))\n row = cursor.fetchone()\n return jsonify({'id': id, 'data': row})\n\n# Create an endpoint to handle updating data\n@app.route('/<int:id>/', methods=['PUT'])\ndef update_data(id):\n data = request.json\n conn.execute('UPDATE data SET data=? WHERE id=?', (data, id))\n conn.commit()\n return jsonify({'updated': data})\n\n# Create an endpoint to handle deleting data\n@app.route('/<int:id>/', methods=['DELETE'])\ndef delete_data(id):\n conn.execute('DELETE FROM data WHERE id=?', (id,))\n conn.commit()\n return jsonify({'deleted': id})\n\nif __name__ == '__main__':\n app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -*- coding: utf-8 -*-\nfrom collections import Iterable\ntry:\n    from django.db.models.query import QuerySet\n    from django.db.models import Manager\nexcept ImportError:\n    QuerySet = None\n    Manager = None\n\nfrom aserializer.fields import ListSerializerField\nfrom aserializer.django.utils import get_local_fields, get_related_fields\n\n\nclass RelatedManagerListSerializerField(ListSerializerField):\n\n    def __init__(self, serializer, sort_by=None, use_prefetch=False, *args, **kwargs):\n        super(RelatedManagerListSerializerField, self).__init__(serializer=serializer, sort_by=sort_by, *args, **kwargs)\n        self.use_prefetch = use_prefetch\n\n    def pre_value(self, fields=None, exclude=None, **extras):\n        super(RelatedManagerListSerializerField, self).pre_value(fields=fields, exclude=exclude, **extras)\n        self.use_prefetch = extras.get('use_prefetch', self.use_prefetch)\n\n    def set_value(self, value):\n        if value is None:\n            return\n        elif isinstance(value, Iterable):\n            values = value\n        elif isinstance(value, (QuerySet, Manager)):\n            # if using prefetch_related, we can't use only as it will re-fetch the data\n            if not self.use_prefetch and (self.only_fields or self.exclude):\n                local_fields = get_local_fields(value.model)\n                related_fields = get_related_fields(value.model)\n                only_fields = [f.name for f in local_fields]\n                if self.only_fields:\n                    only_fields = [f for f in only_fields if f in self.only_fields]\n                exclude_fields = [f.name for f in local_fields if f.name in self.exclude]\n                if exclude_fields:\n                    only_fields = [f for f in only_fields if f not in exclude_fields]\n                only_fields += [f.name for f in related_fields]\n                # .only() returns a QuerySet of RelatedDjangoModel_Deferred objects?\n                values = value.only(*only_fields)\n            else:\n                values = value.all()\n        else:\n            return\n        self.items[:] = []\n        self._native_items[:] = []\n        self._python_items[:] = []\n        for item in values:\n            self.add_item(source=item)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isAnagram(str1, str2):\n    str1 = str1.replace(\" \", \"\")\n    str2 = str2.replace(\" \", \"\")\n    # remove all whitespaces\n \n    if sorted(str1) == sorted(str2):\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_prime_numbers(n):\n    nums = []\n    for x in range(2, n + 1):\n        for y in range(2, int(x ** 0.5) + 1):\n            if x % y == 0:\n                break\n        else:\n            nums.append(x)\n    return nums\n\nprint(generate_prime_numbers(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class User:\n    def __init__(self, name):\n        self.user_name = name; but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\n\ndef calc_diff(user1, user2):\n date1 = datetime.datetime.strptime(user1, \"%Y-%m-%d\")\n date2 = datetime.datetime.strptime(user2, \"%Y-%m-%d\")\n \n days_diff = (date2 - date1).days\n\n years_diff = int(days_diff / 365)\n months_diff = int(days_diff % 365 / 30)\n days_diff = int(days_diff % 365 % 30)\n\n return years_diff, months_diff, days_diff\n\nuser1 = \"1989-09-26\"\nuser2 = \"1997-03-15\"\n\nyears_diff, months_diff, days_diff = calc_diff(user1, user2)\n\nprint(f\"There is a difference of {years_diff} years, {months_diff} months, and {days_diff} days between the two users' birthdays.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for num in range(1,21):\n   sum = 0\n   temp = num\n   while temp > 0:\n       digit = temp % 10\n       sum += digit ** 3\n       temp //= 10\n   if num == sum:\n       print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sortedDict = dict(sorted(myDict.items()))\n\nprint(sortedDict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [2, 3, 4, 5]\nindex = 2\n# Replace the element at index with 0\narr[index] = 0\nprint(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_characters(string, char):\n    return sum([1 for x in string if x == char]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(a, b, c):\n    max = a\n    if b > max:\n        max = b\n    if c > max:\n        max = c\n    return max\n\nmax_number = find_max(10, 7, 4)\nprint('Maximum number is', max_number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Imports\nimport torch.nn as nn\nimport torch\n\n# CNN Model\nclass CNN(nn.Module):\n    def __init__(self):\n        super(CNN, self).__init__()\n        # Convolutional blocks\n        self.conv1 = nn.Sequential(\n            nn.Conv2d(1, 6, 3, 1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2))\n        self.conv2 = nn.Sequential(\n            nn.Conv2d(6, 16, 3, 1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2))\n        # Fully connected layers\n        self.fc1 = nn.Linear(5 * 5 * 16, 120)\n        self.fc2 = nn.Linear(120, 84)\n        self.fc3 = nn.Linear(84, 10)\n \n    def forward(self, x):\n        # Forward pass through convolutional blocks\n        out = self.conv1(x)\n        out = self.conv2(out)\n        # Flatten the tensor for use in fully connected layers\n        out = out.view(-1, 5 * 5 * 16)\n        # Forward pass through fully connected layers\n        out = self.fc1(out)\n        out = self.fc2(out)\n        out = self.fc3(out)\n        return out\n\n# Create an instance of the model \nmodel = CNN()\n# Move model to GPU if available\nif torch.cuda.is_available():\n  model.cuda() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LogisticRegression \n\n# Read the data \ndata = pd.read_csv('data.csv')\n\n# Create feature matrix \nX = data[['text', 'subject']]\n\n# Create target vector \ny = data['label']\n\n# Split the data into training and testing\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Fit the model \nlogistic = LogisticRegression()\nlogistic.fit(X_train, y_train)\n\n# Make predictions \ny_pred = logistic.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Load the dataset\nimport pandas as pd\ndata = pd.read_csv('dataset.csv')\n\n# Separate the features and target\nX = data.drop(['diabetes'], axis=1)\ny = data['diabetes']\n\n# Split the data into training and testing sets\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=42)\n\n# Fit the model\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Evaluate the model\nfrom sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y_test, y_pred)\nprint(accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import hashlib\n \noriginal_string = '<insert string here>'\n\n# Generate the encrypted hash\nencrypted_string = hashlib.sha256(original_string.encode()).hexdigest()\n\nprint('Encrypted hash: ' + encrypted_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_product_names():\n    unscanned_barcodes = [barcodes] #list of unscanned barcodes\n\n    while len(unscanned_barcodes) > 0:\n        barcode = unscanned_barcodes.pop(0)\n        product_name = scan_barcode(barcode) #function that returns product name\n        print(product_name) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.linear_model import LinearRegression\nimport numpy as np\n\n# Load the data\nX = np.array([[1000], [2000], [3000]])\ny = np.array([20000, 40000, 60000])\n\n# Create the linear regression model\nmodel = LinearRegression()\n\n# Train the model with the data\nmodel.fit(X, y)\n\n# Print the model parameters\nprint('Intercept:', model.intercept_) \nprint('Coefficient:', model.coef_) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_equal(seq_1, seq_2):\n  return sorted(seq_1) == sorted(seq_2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Powerset(arr): \n  \n    # variable to store the power sets \n    powerset = [[]] \n      \n    # generte the power sets \n    for ele in arr: \n          \n        # give token which stores the length  \n        # of the present power set \n        n = len(powerset) \n          \n        # loop to give powerset of all element \n        for i in range(0, n): \n            newset = powerset[i].copy() \n            newset.append(ele) \n            powerset.append(newset) \n  \n    return powerset \n  \n# Driver Code \narr = ['A', 'B', 'C'] \nprint(Powerset(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_elements_2dlist(list):\n    # Initialize sum\n    sum = 0\n    # Iterate through rows of the list\n    for row in list:\n        # Iterate through elements of a row\n        for element in row:\n            # Sum the element\n            sum += element\n    # Return the sum\n    return sum\n\nresult = sum_elements_2dlist(list)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num):\n    prime = True\n    if num <= 1:\n        prime = False\n    else: \n        for i in range(2, num):\n            if num % i == 0:\n                prime = False\n    return prime\n\ndef main():\n    num = 10\n    print(\"All prime numbers up to\", num, \"are:\")\n    for i in range(2, num+1):\n        if is_prime(i):\n            print(i)\n\nmain()\n\n# Outputs: 2 3 5 7 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef quadratic_equation_roots(a, b, c):\n  d = b**2 - 4*a*c\n\n  if d > 0:\n    x1 = (-b + math.sqrt(d)) / (2*a)\n    x2 = (-b - math.sqrt(d)) / (2*a)\n    return x1, x2\n  else:\n    return \"This equation has no real roots!\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: code = [1,2,3,2,2,3,1,3]\n\nmessage = \"\"\nfor d in code:\n    if d == 1:\n        message += \"A\"\n    elif d == 2:\n        message += \"B\"\n    elif d == 3:\n        message += \"C\"\nprint(message) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nWrite a code for implementing a stack in python that can handle max of 10 elements\n\"\"\"\n\nclass MyStack:\n    def __init__(self, capacity=10):\n        self.capacity = capacity\n        self.top = 0\n        self.stack = [None]*self.capacity\n\n    def push(self, item):\n        # check the stack is full or not\n        if self.top == self.capacity:\n            raise Exception('Stack is full!')\n        else:\n            self.stack[self.top] = item\n            self.top += 1\n\n    def pop(self):\n        # check the stack is empty or not\n        if self.top == 0:\n            raise Exception('Stack is empty!')\n        else:\n            item = self.stack[self.top-1]\n            self.stack[self.top-1] = None\n            self.top -= 1\n            return item but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_common_subsequence(s1, s2):\n    n1 = len(s1)\n    n2 = len(s2)\n\n    dp_table = [[0]*(n2+1) for _ in range(n1+1)]\n    for i in range(n1):\n        for j in range(n2):\n            if s1[i] == s2[j]: \n                dp_table[i+1][j+1] = dp_table[i][j] + 1\n            else:\n                dp_table[i+1][j+1] = max(dp_table[i][j+1], \n                                        dp_table[i+1][j])\n    lcs_length = dp_table[-1][-1]\n    lcs_string = \"\" \n    i, j = n1, n2\n    while i > 0 and j > 0: \n        if dp_table[i][j] == dp_table[i-1][j]: \n            i -= 1\n        elif dp_table[i][j] == dp_table[i][j-1]: \n            j -= 1\n        else: \n            lcs_string = s1[i-1] + lcs_string \n            i -= 1\n            j -= 1\n    \n    return lcs_string, lcs_length but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sum = 0\nfor i in range(11):\n  sum += i**2\n  \nprint(sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request\nfrom flask_restful import Resource, Api\n\napp = Flask(__name__)\napi = Api(app)\n\nclass Users(Resource):\n    def get(self, userId):\n        # return user object with userId\n        pass\n\n    def post(self):\n        # create new user\n        pass\n\n    def put(self, userId):\n        # update user object with userId\n        pass\n\n    def delete(self, userId):\n        # delete user object with userId\n        pass\n\nclass Courses(Resource):\n    def get(self,courseId):\n        # return course object with courseId\n        pass\n\n    def post(self):\n        # create new course\n        pass\n\n    def put(self,courseId):\n        # update course object with courseId\n        pass\n\n    def delete(self,courseId):\n        # delete course object with courseId\n        pass\n\nclass Grades(Resource):\n    def get(self,courseId):\n        # return grade object with courseId\n        pass\n\n    def post(self):\n        # create new grade\n        pass\n\n    def put(self,courseId):\n        # update grade object with courseId\n        pass\n\n    def delete(self,courseId):\n        # delete grade object with courseId\n        pass\n\napi.add_resource(Users, '/users/<userId>')\napi.add_resource(Courses, '/courses/<courseId>')\napi.add_resource(Grades, '/courses/<courseId>/grades')\n\nif __name__ == '__main__':\n    app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: evenArray = []\noddArray = []\nfor i in array:\n  if i % 2 == 0:\n    evenArray.append(i)\n  else:\n    oddArray.append(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def predict(data, tree):\n    if tree['node_type'] == 'leaf':\n        return tree['value']\n    feature_index = tree['feature_index']\n    if data[feature_index] < tree['value']:\n        return predict(data, tree['left_child'])\n    else:\n        return predict(data, tree['right_child']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_second_highest_num(nums):\n    first_max = nums[0]\n    second_max = float('-inf')\n    for num in nums:\n        if num > first_max:\n            second_max = first_max\n            first_max = num \n        if num < first_max and num > second_max:\n            second_max = num\n    return second_max\n\nnums = [8,9,1,5,7]\n\nprint(find_second_highest_num(nums)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nlist_of_names = [\"John\", \"Anna\", \"Bill\", \"Kim\", \"Claire\"]\nrandom_name = random.choice(list_of_names)\n\nprint(f'Randomly selected name from the list: {random_name}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: try:\n    exec(<python_code>)\nexcept Exception as e:\n    print(\"Error: \", e) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import yfinance as yf\n\n# Get stock data\ntsla = yf.Ticker(\"TSLA\")\n\n# Get maximum stock price\nmax_price = max(tsla.history(period=\"1d\")[\"Close\"])\n\n# Get opening stock price\nopen_price = tsla.history(period=\"1d\")[\"Open\"][0]\n\n# Print whether it closed higher or lower\nif max_price > open_price:\n print(\"TSLA closed higher than its opening price.\")\nelse:\n print(\"TSLA closed lower than its opening price.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport bs4\n \n# Make the request\nurl = 'https://example.com/store'\nresponse = requests.get(url)\n \n# Create the soup object\nsoup = bs4.BeautifulSoup(response.text, 'html.parser')\n \n# Extract the prices\nprices = []\nfor item in soup.find_all('div', {'class': 'product'}):\n    price = item.find('div', {'class': 'price'}).text\n    prices.append(price)\n \nprint(prices) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_sort(strings):\n    # Bubble sort algorithm\n    for i in range(len(strings)-1):\n        for j in range(i+1, len(strings)):\n            if strings[i] > strings[j]:\n                temp = strings[i]\n                strings[i] = strings[j]\n                strings[j] = temp\n    return strings\n\n# example usage\nstrings = [\"cat\", \"dog\", \"elephant\", \"apple\"]\nprint(string_sort(strings)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from datetime import timedelta, date\nimport requests\n\ndef get_pageview_data(date, page):\n  api_key = '<YOUR_API_KEY>'\n  base_url = 'https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/{page}/daily/{date}/{date}'\n \n  response = requests.get(base_url.format(page=page, date=date), headers={\n      'User-Agent': 'My Personal Analytics App',\n      'Accept': 'application/json',\n      'X-WMF-User-Agent': api_key\n      })\n  \n  response.raise_for_status()\n  return response.json()\n\n# Get the date from 30 days ago\ndate_before_30_days = date.today() - timedelta(days=30)\n\nmost_visited_sites = {}\n\nfor d in range(30):\n  date = date_before_30_days + timedelta(days=d)\n  date_string = date.strftime('%Y%m%d')\n  \n  # Get page view data for the current date\n  pageview_data = get_pageview_data(date_string, 'Main_Page')\n  \n  # Store page view data in a dictionary\n  most_visited_sites[date_string] = pageview_data[\"items\"][0][\"views\"]\n\n# Print log\nprint('Date\\t\\tViews')\nfor date, views in most_visited_sites.items():\n  print('{}\\t\\t{}'.format(date, views)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\n\ndef search(docs, key):\n results = []\n for doc in docs:\n words = doc.lower().translate(str.maketrans('', '', string.punctuation)).split()\n if key in words:\n results.append(doc)\n return results but is not the same. just give one example and only return the code."}
