{"prompt": "make some code that functions the same as the following code: import requests\n\ndef getStockPrice(ticker):\n  api_url = 'https://finnhub.io/api/v1/quote?symbol={}&token=YOUR_API_KEY'.format(ticker)\n  res = requests.get(api_url)\n  data = res.json()\n  return data['c']\n\nlargest_5_usa_companies = ['AAPL', 'MSFT', 'AMZN', 'GOOG', 'FB']\nfor company in largest_5_usa_companies:\n  price = getStockPrice(company)\n  print('{}: {}'.format(company, price)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPalindrome(num):\n    numString = str(num)\n    reversedString = numString[::-1]\n    if numString == reversedString:\n        return True\n    else:\n        return False\n\nnum = 12321\nif isPalindrome(num):\n    print(\"Number is a palindrome\")\nelse:\n    print(\"Number is not a palindrome\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef random_string(length):\n    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))\n\nprint(random_string(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_to_dict(input_list):\n result = {}\n for key, value in input_list:\n result[key] = value\n return result\n\nlist_to_dict([('a', 1), ('b', 2), ('c', 3)]) \n#{'a': 1, 'b': 2, 'c': 3} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max_min(lst):\n    if len(lst) == 1:\n        return lst[0], lst[0]\n    \n    elif len(lst) == 2:\n        return max(lst), min(lst)\n    \n    mid = len(lst)//2\n    left_max, left_min = find_max_min(lst[:mid])\n    right_max, right_min = find_max_min(lst[mid:])\n\n    return max(left_max, right_max), min(left_min, right_min)\n\nmax_num, min_num = find_max_min([5, 3, 8, 2, 10, 1])\n\nprint(\"The maximum number is\", max_num)\nprint(\"The minimum number is\", min_num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef get_available_positions(Board):\n    available_positions = []\n    for i in range(3):\n        for j in range(3):\n            if Board[i][j] == ' ':\n                available_positions.append((i, j))\n    return available_positions\n\ndef is_game_over(Board, depth):\n    if depth == 0:\n        return True\n\n    for i in range(3):\n        if (Board[i][0] == Board[i][1] == Board[i][2] and Board[i][0] != ' '):\n            return True\n        elif (Board[0][i] == Board[1][i] == Board[2][i] and Board[0][i] != ' '):\n            return True\n    if (Board[0][0] == Board[1][1] == Board[2][2] and Board[0][0] != ' ') or (Board[2][0] == Board[1][1] == Board[0][2] and Board[2][0] != ' '):\n        return True\n\n    available_positions = get_available_positions(Board)\n    if len(available_positions) == 0:\n        return True\n\n    return False\n\ndef get_next_move(Board, player, depth):\n    best_position = None\n    best_score = float('-inf')\n    if player == 'X':\n        player2 = 'O'\n    else:\n        player2 = 'X'\n\n    available_positions = get_available_positions(Board)\n\n    for position in available_positions:\n        Board[position[0]][position[1]] = player\n        score = minimax(Board, player2, depth-1)\n        Board[position[0]][position[1]] = ' '\n        if score > best_score:\n            best_score = score\n            best_position = position\n    return best_position\n\ndef minimax(Board, player, depth):\n    if is_game_over(Board, depth):\n        if player == 'X':\n            return -1\n        elif player == 'O':\n            return 1\n        else:\n            return 0\n\n    best_score = float('-inf')\n    if player == 'X':\n        player2 = 'O'\n    else:\n        player2 = 'X'\n    available_positions = get_available_positions(Board)\n    for position in available_positions:\n        Board[position[0]][position[1]] = player\n        score = minimax(Board, player2, depth-1)\n        Board[position[0]][position[1]] = ' '\n        best_score = max(score, best_score)\n    return best_score\n\nboard = [[' ', ' ', ' '],\n [' ', ' ', ' '],\n [' ', ' ', ' ']]\nplayer = 'X'\ndepth = 5\n\nnext_move = get_next_move(board, player, depth)\nprint(next_move) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #! /usr/bin/python\n\n'''\nImplement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.\nCalling next() will return the next smallest number in the BST.\nNote: next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.\n'''\n\nfrom node_struct import TreeNode\nclass BSTIterator:\n    # @param root, a binary search tree's root node\n    def __init__(self, root):\n        self.root = root\n        self.path = list()\n        next_node = root\n\n        while next_node:\n            self.path.append(next_node)\n            next_node = next_node.left\n\n    # @return a boolean, whether we have a next smallest number\n    def hasNext(self):\n        return len(self.path) > 0\n\n\n    # @return an integer, the next smallest number\n    def next(self):\n        res = self.path.pop()\n        if res.right:\n            next_node = res.right\n            while next_node:\n                self.path.append(next_node)\n                next_node = next_node.left\n        return res.val\n\n# Your BSTIterator will be called like this:\n# i, v = BSTIterator(root), []\n# while i.hasNext(): v.append(i.next())\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countVowels(string):\n    \n    vowels = 'aeiouAEIOU'\n    count = 0\n\n    for char in string:\n        if char in vowels:\n            count += 1\n    \n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mostCommonWords(text):\n    words = text.split()\n    counts = {word: words.count(word) for word in words}\n    return sorted(counts.items(), key=lambda x: x[1], reverse=True)\n\ninput = \"This is a sentence with some words used more often than others.\"\n\nresult = mostCommonWords(input)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max(a, b): \n    if a > b: \n        return a \n    else:  \n        return b \n  \n#Driver Code \na = 3\nb = 4\nprint(max(a, b)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: movie_dict = {\n    'Movie1': (9.2, 'DirectorA'),\n    'Movie2': (8.5, 'DirectorB'),\n    'Movie3': (7.3, 'DirectorC'),\n    'Movie4': (9.1, 'DirectorD'),\n    'Movie5': (8.4, 'DirectorE')\n}\n\n# Initialize variables\nmax_score = 0\nbest_movie = \"\"\ndirector = \"\"\n\n# Iterate through movies\nfor movie, (score, director) in movie_dict.items():\n    if score > max_score:\n        max_score = score\n        best_movie = movie\n        director = director\n\n# Print results\nprint(f\"The highest rated movie is '{best_movie}' with a score of {max_score} and directed by {director}.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def joinStrings(s1, s2):\n    return s1 + s2\n\nprint(joinStrings('Hello', 'World')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: stringLength = len(stringInput)\n\nprint(\"The length of the string is: \", stringLength) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def to_lower(arr): \n    return [item.lower() for item in arr] \n\nresult = to_lower(list) \nprint(result) \n\n# output \n['hello', 'friends', 'world'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(lst): \n    return list(dict.fromkeys(lst)) \n  \nlst = [1, 20, 4, 6, 20, 4, 1, 6] \nprint(remove_duplicates(lst)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndata = [{'name':'John', 'age':30},\n{'name':'Paul', 'age':22}]\n\nserialized_data = json.dumps(data)\nprint(serialized_data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from bs4 import BeautifulSoup\nimport requests\n\n# Get html of desired webpage\nurl = \"https://www.example.com/\"\nr = requests.get(url)\nhtml = r.text\n\n# Parse html using BeautifulSoup\nsoup = BeautifulSoup(html, 'html.parser')\n\n# Extract all links\nlinks = []\nfor link in soup.find_all('a'):\n    links.append(link.get('href'))\n\n# Print all links\nprint(links) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: category = \"medium\"\n\ndef classify(salary):\n if salary <= 10000:\n return \"low\"\n elif salary <=30000:\n return \"medium\"\n else:\n return \"high\"\n\nresult = classify(30000)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import necessary modules\nimport requests\nfrom bs4 import BeautifulSoup\n\n#make the request and get the HTML\nr = requests.get('https://www.example.com')\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n#find the product titles\nproduct_titles = soup.find_all('h2', class_='product-title')\n\n#initialize a list to store the titles\ntitles = []\n\n#loop through the product titles and store them in the list\nfor title in product_titles:\n titles.append(title.text)\n\n#find the product prices\nproduct_prices = soup.find_all('span', class_='product-price')\n\n#initialize a list to store the prices\nprices = []\n\n#loop through the product prices and store them in the list\nfor price in product_prices:\n prices.append(price.text)\n\n#print the titles and prices\nfor i in range(len(titles)):\n print(f'{titles[i]}: {prices[i]}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\nimport nltk\nfrom nltk.tokenize import word_tokenize\n\n# Read in the blog posts\nposts_raw = open('posts.txt', 'r').read()\n\n# Tokenize the posts and remove punctuations\nposts_tokens = [word_tokenize(post) for post in posts_raw.split('\\n')]\nposts_tokens = [[token for token in post if not re.match('[^\\w\\s]', token)] for post in posts_tokens]\n\n#Remove stopwords and identify topics\nstopwords = set(nltk.corpus.stopwords.words('english'))\nposts_filtered = [[token for token in post if token not in stopwords] for post in posts_tokens]\ntopic_counts = nltk.FreqDist( [token for post in posts_filtered for token in post] )\ntopics = topic_counts.most_common(20)\n\n# Generate textual summaries\ntopics_dict = {topic[0]:topic[1] for topic in topics}\nsummaries = []\nfor post in posts_filtered:\n summary = []\n for token in post:\n if token in topics_dict.keys():\n summary.append(token)\n summaries.append(' '.join(summary))\n\nprint(summaries) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_html_doc(solution):\n html = \"<html>\\n<head>\\n<title>Python Documentation</title>\\n</head>\\n<body>\\n\\n<h1>Solution</h1>\\n\\\n<pre>\\n\"\n html += solution + \"\\n</pre>\\n\\n</body>\\n</html>\"\n return html but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Vector2D:\n  def __init__(self, x, y):\n    self.x = x\n    self.y = y\n  \n  def add(self, other):\n    self.x += other.x\n    self.y += other.y\n\n  def subtract(self, other):\n    self.x -= other.x\n    self.y -= other.y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent(list): \n    counter = 0\n    num = list[0] \n      \n    for i in list: \n        curr_frequency = list.count(i) \n        if(curr_frequency> counter): \n            counter = curr_frequency \n            num = i \n  \n    return num but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def hammingDistance(string1, string2): \n if len(string1) != len(string2):\n  raise ValueError('Strings must be of equal length.')\n\n distance = 0\n\n for c1, c2 in zip(string1, string2):\n  if c1 != c2:\n   distance += 1\n\n return distance\n\nstring1 = \"Hello World!\"\nstring2 = \"Goodbye World!\"\ndistance = hammingDistance(string1, string2)\nprint(distance) # Outputs 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Car:\n def __init__(self, make, model, year):\n  self.make = make\n  self.model = model\n  self.year = year\n \n def get_make(self):\n  return self.make\n \n def get_model(self):\n  return self.model\n \n def get_year(self):\n  return self.year but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: new_list = [1,2,3,6,7,8] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def power(num, exponent):\n    result = 1\n    for _ in range(exponent):\n        result *= num\n    return result\n\nprint(power(5, 2)) # Output: 25 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_two_add_up_to_target(nums, target): \n    for num1 in nums:\n        for num2 in nums:\n            if num1 + num2 == target:\n                return True\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortList(numbers): \n    numbers.sort(key = len) \n    return numbers \n\nnumbers = sortList(numbers) \nprint(numbers)\n\n# Output: [4, 8, 1, 7, 9, 16] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_addition(a, b):\n    a_bin = bin(int(a,2))[2:]\n    b_bin = bin(int(b,2))[2:]\n    c_bin = bin(int(a_bin, 2) + int(b_bin, 2))[2:]\n    c = c_bin.zfill(max(len(a), len(b)))\n    return c\n\nresult = binary_addition('010', '101')\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class FindMostFrequentWords:\n    def __init__(self, sentence):\n        self.sentence = sentence\n    \n    def find_most_frequent_words(self):\n        # Split the sentence into words \n        words = self.sentence.split()\n        \n        # Create a list of words and their frequencies\n        frequency_list = [[word, words.count(word)] \n        for word in set(words)] \n        \n        # Sort the list by frequency\n        frequency_list.sort(key=lambda x: x[1], reverse=True) \n        \n        # Return the top 5 most frequent words in the sentence\n        return frequency_list[:5] \n\nsentence = 'The the quick brown fox jumped over the lazy dog'\n\nfmf_words = FindMostFrequentWords(sentence) \ntop_5_words = fmf_words.find_most_frequent_words() \nprint(top_5_words) \n\n# Output:\n# [['the', 2], ['quick', 1], ['brown', 1], ['fox', 1], ['jumped', 1]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_password(): \n    s = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@#$0123456789\"\n    p =  \"\".join(random.sample(s,8))\n    return p\n\nprint(generate_password()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # File: myproject/urls.py\n\nfrom django.urls import path\nfrom myapp.views import api\n\nurlpatterns = [\n    path('api/', api),\n]\n\n# File: myapp/views.py\n\nfrom django.http import HttpResponse\nfrom django.views.decorators.http import require_GET, require_POST\n\n@require_GET\ndef api(request):\n return HttpResponse('GET request received at /api/')\n\n@require_POST\ndef api(request):\n return HttpResponse('POST request received at /api/') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nWrite a python script that computes the sum of all the odd numbers between 1 and 1000.\n\"\"\"\n\n#define a function to compute the sum of the odd numbers\ndef sum_odd_numbers(n):\n    result = 0\n    for i in range(1,n+1):\n        #check if the current number is odd\n        if i%2 != 0:\n            result += i\n    \n    return result\n\n#test the function\ninput_n = 1000\nprint(sum_odd_numbers(input_n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def triangle_area(a, b, c): \n    # Semi-perimeter\n    s = (a + b + c) / 2\n    # calculate the area\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5    \n    return area \n\n# Driver code \na = 5\nb = 6\nc = 7\nprint(\"Area of the triangle is {:.2f}\".format(triangle_area(a, b, c))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: john = Employee(\"John\", 25) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport pymongo\n\n# Establish connection to MongoDB\nclient = pymongo.MongoClient('mongodb://localhost:27017/')\ndb = client['aggregated_data']\n\n# Make a request to each API and aggregate the data\ndata_points = []\nfor url in ['url_1', 'url_2', etc.]:\n req = requests.get(url)\n data_points.append(req.json())\n\n# Store the data in the MongoDB database\ndb.aggregated_data.insert_many(data_points) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_positions(numbers, pos1, pos2):\n sum = numbers[pos1] + numbers[pos2]\n return sum\n\nnumbers = [1, 4, 5, 8, 9]\npositions = (3, 5)\nprint(sum_positions(numbers, positions[0], positions[1])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\n\ndef measure_time(): \n    start_time = time.time() \n    # run your code \n    end_time = time.time() \n    time_taken = end_time - start_time\n  \n    return time_taken\n\ntime_taken = measure_time() \nprint (\"Time taken in seconds: \",time_taken) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_words(string):\n    counts = { }\n    for w in string.split():\n        counts[w] = counts.get(w, 0) + 1\n    return counts but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef inverse_multiplication(matrix):\n    inverseM = np.linalg.inv(matrix) \n    result = np.matmul(matrix, inverseM) \n    return result\n\nmatrix = [[3, 4],\n          [2, 16]]\n\nresult = inverse_multiplication(matrix)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import http.server\n\nclass MyHandler(http.server.BaseHTTPRequestHandler):\n    def do_GET(self):\n\n        # Build file path\n        url_tokens = self.path.split(\"/\")\n        file_path = \".\"\n        for token in url_tokens:\n            if token != '':\n                file_path += \"/\"+token\n\n        # Set content type\n        self.send_response(200)\n        if file_path.endswith(\".html\"):\n            self.send_header(\"Content-type\", \"text/html\")\n        elif file_path.endswith(\".css\"):\n            self.send_header(\"Content-type\", \"text/css\")\n        else:\n            self.send_header(\"Content-type\", \"text/plain\")\n        self.end_headers()\n\n        # Read and send back file content\n        f = open(file_path, \"rb\")\n        content = f.read()\n        self.wfile.write(content)\n\n        f.close()\n\n# Run server\nPORT = 8080\nserver_address = (\"\", PORT)\nserver = http.server.HTTPServer(server_address, MyHandler)\nserver.serve_forever() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_lottery_numbers():\n    # Generate 6 unique random numbers between 1 and 49\n    lottery_nums = random.sample(range(1, 50), 6)\n    return lottery_nums\n\nif __name__ == '__main__':\n    print(\"Lottery numbers:\", generate_lottery_numbers()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\n# Generate a random string of 8 characters\ncharacters = string.ascii_letters + string.digits + string.punctuation\nrandom_str = ''.join(random.choice(characters) for i in range(8))\n\n# Print the generated random string\nprint(\"Generated random string password is:\", random_str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_password(length):\n chars = string.ascii_letters + string.digits\n return ''.join(random.choice(chars) for _ in range(length))\n\nrandom_password = generate_password(8)\nprint(random_password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport re\n\nurl = \"https://www.example.com\"\nr  = requests.get(url)\ndata = r.text\n\n# Find all the links on the page\nlinks = re.findall(r'<a class=\"linkClass\" href=\"(.*?)\">', data)\n\n# Print the links\nfor link in links:\n    full_url = url + link\n    print(full_url) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n\nrandom_numbers = set(random.randint(1, 1000) for _ in range(1000))\n\ndef check_if_exists(n):\n    return n in random_numbers\n\nif __name__ == \"__main__\":\n    print(check_if_exists(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(mylist, x):\n    for i in range(len(mylist)):\n        if mylist[i] == x:\n            return i\n\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def capitalize(words):\n  return [word.capitalize() for word in words]\n\ninput_words = [\"apple\", \"banana\", \"strawberry\"]\ncapitalized_words = capitalize(input_words)\nprint(capitalized_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request\nfrom nltk.stem import WordNetLemmatizer\n\napp = Flask(__name__)\n\n@app.route(\"/lemmas\", methods=['POST'])\ndef lemmas():\n    text = request.form[\"text\"]\n    lemmatizer = WordNetLemmatizer()\n    words = text.split(\" \")\n    lemmas = [lemmatizer.lemmatize(word) for word in words]\n    return \" \".join(lemmas)\n    \napp.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 11):\n    print(\"4 x\", i, \"=\", 4*i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\n\nclass TimeseriesForecaster:\n def __init__(self, data):\n self.data = data\n\n# Perform time-series transformations\n def create_transformed_timeseries(self):\n #Create details and aggregated version of the timeseries\n detail_df, agg_df = self.transform_into_detail_and_aggregates()\n\n # Create transformed timeseries\n transformed_dt = self.transform_into_transformed_timeseries(detai_df, agg_df)\n return transformed_dt\n\n # Fit the time-series forecasting models\n def fit_model(self, transformed_dt, n_test):\n # Create train and test datasets\n train, test = self.create_train_test_data(transformed_dt, n_test)\n\n# Fit different models to the train dataset\n fitted_sarima_model = self.fit_sarima_model(train)\n fitted_gbm_model = self.fit_gbm_model(train)\n fitted_nn_model = self.fit_nn_model(train)\n\n# Return the fitted models\n return fitted_sarima_model, fitted_gbm_model, fitted_nn_model\n\n # Perform inference on the test data\n def inference(self, test, fitted_sarima_model, fitted_gbm_model, fitted_nn_model):\n # Perform inference with the fitted models\n sarima_predictions, gbm_predictions, nn_predictions = self.inference_with_fitted_models(fitted_sarima_model, fitted_gbm_model, fitted_nn_model, test)\n\n# Create a combined predictions array\n combined_predictions = self.create_combined_predictions(sarima_predictions, gbm_predictions, nn_predictions)\n \n # Return the combined predictions\n return combined_predictions but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password():\n    letters = string.ascii_letters + string.digits\n    return ''.join(random.choice(letters) for i in range(8)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_closest_pair(my_list):\n    closest_pair = None\n    smallest_diff = float('inf')\n    for i in range(len(my_list)):\n        for j in range(i+1, len(my_list)):\n            diff = abs(my_list[i] - my_list[j])\n            if diff < smallest_diff:\n                smallest_diff = diff\n                closest_pair = (my_list[i], my_list[j])\n    return closest_pair\n\nclosest_pair = find_closest_pair(my_list)\nprint(closest_pair) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_num(lst, num):\n  return [n for n in lst if n != num]\n\nprint(remove_num([1, 7, 3, 1, 4, 7, 9], 7))  # [1, 3, 1, 4, 9] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Read the data of company stocks price\ndf = pd.read_csv(\"company_stock_prices.csv\")\n\n# Create the features\nX = df.drop([\"Date\", \"Price\"], axis=1).values\n\n# Create the labels\ny = df[\"Price\"].values\n\n# Split the dataset into training and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train the model\nmodel = RandomForestRegressor()\nmodel.fit(X_train, y_train)\n\n# Make prediction on the test set\ny_pred = model.predict(X_test)\n\n# Make prediction for next 30 days\nX_new = df.drop([\"Date\", \"Price\"], axis=1).tail(30).values\n\ny_pred_30days = model.predict(X_new) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n if n == 0:\n return 1\n else:\n return n * factorial(n-1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_probability(num_cards, num_red, num_black):\n    return (num_red/num_cards)*(num_black/(num_cards-1)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def nested_dict_value(dictionary, keys): \n for key in keys: \n if key in dictionary.keys(): \n dictionary = dictionary[key] \n else: \n return None\n \n return dictionary\n\ndata = {\n\"first\" : {\n\"second\" : {\n\"third\" : 10\n}\n}\n}\n\nresult = nested_dict_value(data, [\"first\", \"second\", \"third\"])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def double_array(arr):\n    return [element * 2 for element in arr] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def average(nums):\n    sum = 0\n    for n in nums:\n        sum += n\n    return sum / len(nums)\n\nnums = [1, 4, 5, 6, 7]\nprint(average(nums)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python3 code to find LCM\ndef compute_lcm(x, y):\n   # choose the greater number\n   if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n\nlcm = compute_lcm(15, 10)\nprint(\"The Least Common Multiple of 15 and 10 is: \",lcm) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_strictly_increasing(numbers):\n for i in range(len(numbers) - 1):\n if numbers[i] >= numbers[i + 1]:\n return False\n return True\n\nnumbers = [3, 4, 5, 6, 7]\nresult = is_strictly_increasing(numbers)\nprint(result) # returns True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def two_dice_same(n_dice): \n total_prob = 0 \n for i in range(1, n_dice + 1): \n probability = (1/6)**i * (5/6)**(n_dice - i) \n total_prob += probability \n return total_prob\n\nresult = two_dice_same(2)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maxDivisible(arr):\n    max_num = arr[0] \n    # n is the size of array \n    n = len(arr) \n    for i in range(1, n): \n        if (arr[i] > max_num): \n            max_num = arr[i] \n  \n    div_num = 1\n    # effectivly checks every number up to maximum of array\n    for i in range(2, max_num + 1): \n        div_flag = True\n        # checks if number divisible from all elements  \n        for j in range(n): \n            if (arr[j] % i != 0): \n                div_flag = False\n    \n        if (div_flag): \n            div_num = i \n          \n    return div_num but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_even(num):\n\"\"\"\nThis function takes a number as input \nand checks whether it is even or odd.\n\nParameters\n----------\nnum : int\n    The number to be checked.\n\nReturns\n-------\nbool\n    Returns True if the number is even, \n    False otherwise.\n\"\"\"\n\nif num % 2 == 0:\n return True\nelse:\n return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\nimport numbers\n\nimport numpy as np\nimport pycuda.driver as drv\nimport pycuda.elementwise as elementwise\nimport pycuda.gpuarray as gpuarray\nfrom pycuda.tools import dtype_to_ctype\n\n# List of available numerical types provided by numpy: \n# XXX This try/except is an ugly hack to prevent the doc build on\n# ReadTheDocs from failing:\ntry:\n    num_types = [np.typeDict[t] for t in \\\n                 np.typecodes['AllInteger']+np.typecodes['AllFloat']]\nexcept TypeError:\n    num_types = []\n\n# Numbers of bytes occupied by each numerical type:\nnum_nbytes = dict((np.dtype(t), t(1).nbytes) for t in num_types)\n\ndef set_realloc(x_gpu, data):\n    \"\"\"\n    Transfer data into a GPUArray instance.\n\n    Copies the contents of a numpy array into a GPUArray instance. If\n    the array has a different type or dimensions than the instance,\n    the GPU memory used by the instance is reallocated and the\n    instance updated appropriately.\n    \n    Parameters\n    ----------\n    x_gpu : pycuda.gpuarray.GPUArray\n        GPUArray instance to modify.\n    data : numpy.ndarray\n        Array of data to transfer to the GPU.\n\n    Examples\n    --------\n    >>> import pycuda.gpuarray as gpuarray\n    >>> import pycuda.autoinit\n    >>> import numpy as np\n    >>> import misc\n    >>> x = np.asarray(np.random.rand(5), np.float32)\n    >>> x_gpu = gpuarray.to_gpu(x)\n    >>> x = np.asarray(np.random.rand(10, 1), np.float64)\n    >>> set_realloc(x_gpu, x)\n    >>> np.allclose(x, x_gpu.get())\n    True\n    \n    \"\"\"\n\n    # Only reallocate if absolutely necessary:\n    if x_gpu.shape != data.shape or x_gpu.size != data.size or \\\n        x_gpu.strides != data.strides or x_gpu.dtype != data.dtype:\n        \n        # Free old memory:\n        x_gpu.gpudata.free()\n\n        # Allocate new memory:\n        nbytes = num_nbytes[data.dtype]\n        x_gpu.gpudata = drv.mem_alloc(nbytes*data.size)\n    \n        # Set array attributes:\n        x_gpu.shape = data.shape\n        x_gpu.size = data.size\n        x_gpu.strides = data.strides\n        x_gpu.dtype = data.dtype\n        \n    # Update the GPU memory:\n    x_gpu.set(data)\n\ndef bufint(a):\n    \"\"\"\n    Return buffer interface to GPU array.\n\n    Parameters\n    ----------\n    a : pycuda.gpuarray.GPUArray\n        GPU array.\n\n    Returns\n    -------\n    b : buffer\n        Buffer interface to array. Returns None if `a` has a length of 0.\n    \"\"\"\n\n    assert isinstance(a, gpuarray.GPUArray)\n    if a.size:\n        return a.gpudata.as_buffer(a.nbytes)\n    else:\n        return None\n\ndef set_by_inds(dest_gpu, ind, src_gpu, ind_which='dest'):\n    \"\"\"\n    Set values in a GPUArray by index.\n\n    Parameters\n    ----------\n    dest_gpu : pycuda.gpuarray.GPUArray\n        GPUArray instance to modify.\n    ind : pycuda.gpuarray.GPUArray or numpy.ndarray\n        1D array of element indices to set. Must have an integer dtype.\n    src_gpu : pycuda.gpuarray.GPUArray\n        GPUArray instance from which to set values.\n    ind_which : str\n        If set to 'dest', set the elements in `dest_gpu` with indices `ind`\n        to the successive values in `src_gpu`; the lengths of `ind` and\n        `src_gpu` must be equal. If set to 'src', set the\n        successive values in `dest_gpu` to the values in `src_gpu` with indices\n        `ind`; the lengths of `ind` and `dest_gpu` must be equal.\n\n    Examples\n    --------\n    >>> import pycuda.gpuarray as gpuarray\n    >>> import pycuda.autoinit\n    >>> import numpy as np\n    >>> import misc\n    >>> dest_gpu = gpuarray.to_gpu(np.arange(5, dtype=np.float32))\n    >>> ind = gpuarray.to_gpu(np.array([0, 2, 4]))\n    >>> src_gpu = gpuarray.to_gpu(np.array([1, 1, 1], dtype=np.float32))\n    >>> misc.set_by_inds(dest_gpu, ind, src_gpu, 'dest')\n    >>> np.allclose(dest_gpu.get(), np.array([1, 1, 1, 3, 1], dtype=np.float32))\n    True\n    >>> dest_gpu = gpuarray.to_gpu(np.zeros(3, dtype=np.float32))\n    >>> ind = gpuarray.to_gpu(np.array([0, 2, 4]))\n    >>> src_gpu = gpuarray.to_gpu(np.arange(5, dtype=np.float32))\n    >>> misc.set_by_inds(dest_gpu, ind, src_gpu)\n    >>> np.allclose(dest_gpu.get(), np.array([0, 2, 4], dtype=np.float32))\n    True\n\n    Notes\n    -----\n    Only supports 1D index arrays.\n\n    May not be efficient for certain index patterns because of lack of inability\n    to coalesce memory operations.\n    \"\"\"\n\n    # Only support 1D index arrays:\n    assert len(np.shape(ind)) == 1\n    assert dest_gpu.dtype == src_gpu.dtype\n    assert issubclass(ind.dtype.type, numbers.Integral)\n    N = len(ind)\n\n    # Manually handle empty index array because it will cause the kernel to\n    # fail if processed:\n    if N == 0:\n        return\n    if ind_which == 'dest':\n        assert N == len(src_gpu)\n    elif ind_which == 'src':\n        assert N == len(dest_gpu)\n    else:\n        raise ValueError('invalid value for `ind_which`')\n    if not isinstance(ind, gpuarray.GPUArray):\n        ind = gpuarray.to_gpu(ind)\n    try:\n        func = set_by_inds.cache[(dest_gpu.dtype, ind.dtype, ind_which)]\n    except KeyError:\n        data_ctype = dtype_to_ctype(dest_gpu.dtype)\n        ind_ctype = dtype_to_ctype(ind.dtype)        \n        v = \"{data_ctype} *dest, {ind_ctype} *ind, {data_ctype} *src\".format(data_ctype=data_ctype, ind_ctype=ind_ctype)\n    \n        if ind_which == 'dest':\n            func = elementwise.ElementwiseKernel(v, \"dest[ind[i]] = src[i]\")\n        else:\n            func = elementwise.ElementwiseKernel(v, \"dest[i] = src[ind[i]]\")\n        set_by_inds.cache[(dest_gpu.dtype, ind.dtype, ind_which)] = func\n    func(dest_gpu, ind, src_gpu, range=slice(0, N, 1))\nset_by_inds.cache = {}\n\ndef set_by_inds_from_inds(dest_gpu, ind_dest, src_gpu, ind_src):\n    \"\"\"\n    Set values in a GPUArray by index from indexed values in another GPUArray.\n\n    Parameters\n    ----------\n    dest_gpu : pycuda.gpuarray.GPUArray\n        GPUArray instance to modify.\n    ind_dest : pycuda.gpuarray.GPUArray or numpy.ndarray\n        1D array of element indices in `dest_gpu` to set. Must have an integer dtype.\n    src_gpu : pycuda.gpuarray.GPUArray\n        GPUArray instance from which to set values.\n    ind_src : pycuda.gpuarray.GPUArray or numpy.ndarray\n        1D array of element indices in `src_gpu` to copy. Must have an integer dtype.\n    \"\"\"\n\n    assert len(np.shape(ind_dest)) == 1\n    assert len(np.shape(ind_src)) == 1\n    assert dest_gpu.dtype == src_gpu.dtype\n    assert ind_dest.dtype == ind_src.dtype\n    assert issubclass(ind_dest.dtype.type, numbers.Integral)\n    assert issubclass(ind_src.dtype.type, numbers.Integral)\n    N = len(ind_src)\n\n    # Manually handle empty index array because it will cause the kernel to\n    # fail if processed:\n    if N == 0:\n        return\n    assert N == len(ind_dest)\n    if not isinstance(ind_dest, gpuarray.GPUArray):\n        ind_dest = gpuarray.to_gpu(ind_dest)\n    if not isinstance(ind_src, gpuarray.GPUArray):\n        ind_src = gpuarray.to_gpu(ind_src)\n    try:\n        func = set_by_inds_from_inds.cache[(dest_gpu.dtype, ind_dest.dtype)]\n    except KeyError:\n        data_ctype = dtype_to_ctype(dest_gpu.dtype)\n        ind_ctype = dtype_to_ctype(ind_dest.dtype)        \n        v = \"{data_ctype} *dest, {ind_ctype} *ind_dest,\"\\\n            \"{data_ctype} *src, {ind_ctype} *ind_src\".format(data_ctype=data_ctype, ind_ctype=ind_ctype)        \n        func = elementwise.ElementwiseKernel(v,\n                \"dest[ind_dest[i]] = src[ind_src[i]]\")\n        set_by_inds_from_inds.cache[(dest_gpu.dtype, ind_dest.dtype)] = func\n    func(dest_gpu, ind_dest, src_gpu, ind_src, range=slice(0, N, 1))\nset_by_inds_from_inds.cache = {}\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mean_absolute_error(y_true, y_pred):\n    return np.mean(np.abs(y_true - y_pred)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import xml.etree.ElementTree as ET \n\ndef parseXML(xml_file):\n    root = ET.parse(xml_file).getroot()\n    person = dict()\n    person['age'] = root.attrib.get('age')\n    \n    name = dict()\n    name['first'] = root[0][0].text\n    name['last'] = root[0][1].text\n    person['name'] = name\n\n    return person but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def append_first_letter_end(list_of_strings):\n new_list_of_strings = []\n for string in list_of_strings:\n new_string = string + string[0]\n new_list_of_strings.append(new_string)\n return new_list_of_strings but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Fibonacci sequence generator\ndef fibonacci(n):\n  a = 0\n  b = 1\n  if n < 0:\n    print(\"Incorrect input\")\n  elif n == 1:\n    return a\n  elif n == 2:\n    return b\n  else:\n    for i in range(2,n):\n      c = a + b\n      a = b\n      b = c\n    return b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num = 8.374\nrounded_num = round(num, 2)\nprint(rounded_num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import necessary packages\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y)\n\n# Create and train the Support Vector Machine (SVM) model\nmodel = SVC()\nmodel.fit(X_train, y_train)\n\n# Accuracy of the model\nacc = model.score(X_test, y_test)\n\n# Predict labels for new data\npredictions = model.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\n\ndef diff_in_days(date1, date2):\n    d1 = datetime.datetime.strptime(date1, \"%d %B %Y\")\n    d2 = datetime.datetime.strptime(date2, \"%d %B %Y\")\n    delta = d2 - d1\n    return delta.days\n\ndate1 = \"29 June 1999\"\ndate2 = \"29 July 1999\"\n\ndifference = diff_in_days(date1, date2)\nprint(\"Difference is\", difference, \"days\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Creating the X and Y datasets \nx = []\ny = []\n\n# Adding the data\nx.append([59, 140])\ny.append(30)\n\nx = np.array(x)\ny = np.array(y)\n\n# Creating and fitting the model \nmodel = LinearRegression().fit(x, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Create a list of 10 random numbers between 0 and 100\nrandom_list = []\nfor i in range(10):\n    random_list.append(random.randint(0,100))\n\n# Print the list\nprint(random_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import asyncio\nimport graphene\nfrom graphene import ObjectType, InputObjectType, String\nfrom graphene_sqlalchemy import SQLAlchemyObjectType\n\nfrom models import Book\n\n# Declare a Book data type\nclass BookObject(SQLAlchemyObjectType):\n class Meta:\n model = Book\n\n# Define a Book Create Input type\nclass BookCreateInput(InputObjectType):\n title = String(required=True)\n author = String(required=True)\n\n# Create Book mutation\nclass CreateBook(graphene.Mutation):\n class Arguments:\n book_data = BookCreateInput(required=True)\n \n book = graphene.Field(BookObject)\n \n async def mutate(cls, info, book_data):\n loop = asyncio.get_running_loop()\n session = info.context['session']\n async with session.begin_nested():\n book = await loop.run_in_executor(None, lambda: Book(**book_data))\n session.add(book)\n await session.commit()\n return CreateBook(book=book)\n\n# Queries\nclass Query(ObjectType):\n book = graphene.Field(BookObject, title=String(required=True))\n \n def resolve_book(self, info, title):\n return Book.query.filter_by(title=title).first()\n\n# Mutations\nclass Mutation(ObjectType):\n create_book = CreateBook.Field()\n\nschema = graphene.Schema(query=Query, mutation=Mutation) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def split_str(str, n):\n    return [str[i:i+n] for i in range(0, len(str), n)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: quiz_questions = {\n 'What is the capital of France?': 'Paris',\n}\n\ndef quiz():\n print('Welcome to the quiz!')\n for question in quiz_questions:\n choices = quiz_questions[question].split(', ')\n print(question + '\\n')\n for idx, choice in enumerate(choices):\n print(f'{idx+1}) {choice}')\n user_answer = input('\\nEnter the number of the correct answer: ')\n if choices[int(user_answer)-1] == quiz_questions[question]:\n print('Correct!')\n else:\n print('Incorrect!')\n\nquiz() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def secondSmallest(arr):\n    m1, m2 = float('inf'), float('inf')\n    for x in arr:\n        if x <= m1:\n            m1, m2 = x, m1\n        elif x < m2:\n            m2 = x\n    return m2\n\narr = [1, 5, 3, 0, -1]\nprint(secondSmallest(arr)) # Outputs 0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def split_on_punctuation(s):\n    #Using re module\n    import re\n    out = re.split('[,]',s)\n    return out\n\nprint(split_on_punctuation('Hello,World!')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: count = 0\nfor row in arr:\n    for col in row:\n        if col > 5:\n            count += 1\nprint(count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n def __init__(self, name, age, height):\n self.name = name\n self.age = age\n self.height = height\n \n def get_name(self):\n return self.name\n \n def get_age(self):\n return self.age\n \n def get_height(self):\nreturn self.height but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify(items):\n    categories = ['shirts', 'pants', 'dresses', 'coats']\n    results = {}\n    for item in items:\n        for category in categories:\n            if item == category:\n                results[item] = category\n    return results but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_punctuation(string): \n new_string = \"\" \n for char in string: \n if char not in \",.?!;:\": \n new_string += char \n return new_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_to_string(b_string):\n s = \"\" \n for i in range(0, len(b_string), 8):\n byte = b_string[i: i + 8]\n s += chr(int(byte, 2))\n return s\n\nb_string = \"0100100001100101011011000110110001101111\"\nprint(binary_to_string(b_string))\n# Output: Hello but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: x = 2\ny = 4\n\nsum = x + y\nprint(sum) # 6 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_words(words):\n    '''\n    Function to sort a list of words alphabetically\n    \n    Parameters\n    words: list of strings\n    \n    Returns\n    sorted list of strings\n    '''\n    sorted_list = sorted(words)\n    return sorted_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def my_sort(items):\n    items.sort(reverse=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def make_acronym(name):\n    acronym = \"\".join([word[0] for word in name.split()]).upper()\n    return acronym\n\nresult = make_acronym(\"Oscar Thomas\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(lst): \n  non_duplicate_lst = [] \n\n  for i in lst: \n    if i not in non_duplicate_lst: \n      non_duplicate_lst.append(i) \n\n  return non_duplicate_lst \n\nlst = [1, 4, 2, 5, 6, 4, 1, 5]\nprint(remove_duplicates(lst)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_words(string):\n    \n    #split the string into individual words\n    words = string.split()\n    \n    #create an empty dictionary to store the word counts\n    word_counts = {}\n    \n    #loop through each word in the list\n    for word in words:\n        #if the word is not in the dictionary, add it with a count of 1\n        if word not in word_counts:\n            word_counts[word] = 1\n        #otherwise increment the count for that word\n        else:\n            word_counts[word] += 1\n            \n    #return the dictionary of word counts\n    return word_counts but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculateSum(n):\n    if n <= 0:\n        return 0\n    else:\n        return n + calculateSum(n-1)\n\nresult = calculateSum(5)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB, MultinomialNB\n\n# Load data\ndata = pd.read_csv('email.csv')\n\n# Separate features and labels\nX = data.drop('spam', axis=1).values\ny = data['spam'].values\n\n# Split data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Create and fit the model\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Evaluate accuracy\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint(f'Accuracy: {accuracy*100:.2f}%') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import scrapy\n\nclass MySpider(scrapy.Spider):  \n name = 'myspider'\n start_urls = [\n 'https://example.com/page1',\n 'https://example.com/page2',\n ]\n\ndef parse(self, response):\n for item in response.css('item'):\n yield {\n 'title': item.css('item-title::text').get(),\n 'description': item.css('item-description::text').get(),\n } but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nImplement quicksort algorithm\n\"\"\"\ndef partition(arr,low,high): \n    i = ( low-1 )          \n    pivot = arr[high]     \n    for j in range(low , high): \n        if arr[j] <= pivot:             \n            i = i+1 \n            arr[i],arr[j] = arr[j],arr[i] \n    arr[i+1],arr[high] = arr[high],arr[i+1] \n    return ( i+1 ) \n  \ndef quick_sort(arr,low,high): \n    if low < high: \n        pi = partition(arr,low,high) \n        quick_sort(arr, low, pi-1) \n        quick_sort(arr, pi+1, high) \n\nif __name__ == '__main__':\n    arr = [9,4,2,7,3,8,5,6]\n    n = len(arr) \n    quick_sort(arr,0,n-1)\n    print(\"The sorted array is:\")\n    for i in arr: \n        print (i), but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom scipy.optimize import minimize\n\n# read in data\ndf = pd.read_csv('data.csv')\n\n# objective function\ndef obj_func(weights, mean_returns, covariance_matrix):\n    # compute portfolio mean return\n    portfolio_mean_return = np.dot(mean_returns, weights)\n    \n    # compute portfolio variance\n    portfolio_variance = np.sqrt(np.dot(weights.T, np.dot(covariance_matrix, weights)))\n    \n    # return the negative of the Sharpe ratio\n    return -(portfolio_mean_return / portfolio_variance)\n\n# minimize function\ndef minimize_func(mean_returns, covariance_matrix):     \n    # define initial weights\n    init_weights = np.array([1/len(mean_returns)] * len(mean_returns))\n    \n    # define constraints\n    constraints = ({'type': 'eq', 'fun': lambda x: np.sum(x) - 1},\n                   {'type': 'ineq', 'fun': lambda x: x})\n    \n    # minimize the objective function\n    results = minimize(obj_func, init_weights, args=(mean_returns, covariance_matrix),\n                       method='SLSQP', constraints=constraints)\n    \n    return results.x\n\n# optimize and get optimal weights\nweights = minimize_func(df.mean(), df.cov())\nprint(weights) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_integers(a, b):\n    return a + b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from tree.gardening import TreeCloner\n\n\nimport optparse\nimport sys\nimport ROOT\nimport numpy\nimport re\nimport os.path\nimport math\nfrom math import *\nfrom array import array;\n\n\n#\n#\n#   \\  |                               |        |        |   | _)\n#  |\\/ |   _` |  __ \\   |   |          |   _ \\  __|      |   |  |   _` |   _` |   __|\n#  |   |  (   |  |   |  |   |      \\   |   __/  |        ___ |  |  (   |  (   | \\__ \\\n# _|  _| \\__,_| _|  _| \\__, |     \\___/  \\___| \\__|     _|  _| _| \\__, | \\__, | ____/\n#                      ____/                                      |___/  |___/ \n#\n#\n\n\n\n#\n# Examples:\n#\n#  cd /HWWAnalysis/ShapeAnalysis\n# source test/env.sh\n#\n# gardener.py  manyJetHiggsVar  /data2/amassiro/VBF/Data/All21Aug2012_temp_1/latino_2000_ggToH1000toWWTo2LAndTau2Nu.root    /data2/amassiro/VBF/Data/All21Aug2012_temp_2/latino_2000_ggToH1000toWWTo2LAndTau2Nu_TESTISITWORKING.root\n#\n#\n\n\nclass ManyJetsHiggsVarFiller(TreeCloner):\n\n    \n    def __init__(self):\n        pass\n\n    def help(self):\n        return '''Add new many jets system - Higgs variables'''\n\n\n    def addOptions(self,parser):\n        #description = self.help()\n        #group = optparse.OptionGroup(parser,self.label, description)\n        #group.add_option('-b', '--branch',   dest='branch', help='Name of something that is not used ... ', default='boh')\n        #parser.add_option_group(group)\n        #return group\n        pass\n\n\n    def checkOptions(self,opts):\n        pass\n\n    @staticmethod\n    def _deltamassw( jets ):\n        mW = 80.385\n        return math.fabs( mW - (jets[0] + jets[1]).M() )\n        \n\n    def process(self,**kwargs):\n        tree  = kwargs['tree']\n        input = kwargs['input']\n        output = kwargs['output']\n\n        self.connect(tree,input)\n        newbranches = ['m4j', 'm3j', 'mW1jj', 'mW2jj', 'pt4j', 'pt3j', 'eta4j', 'eta3j', 'phi4j', 'phi3j', 'dphill4j',  'dphill3j', 'best1', 'best2']\n        self.clone(output,newbranches)\n\n\n\n        m4j           = numpy.ones(1, dtype=numpy.float32)\n        m3j           = numpy.ones(1, dtype=numpy.float32)\n        mW1jj         = numpy.ones(1, dtype=numpy.float32)\n        mW2jj         = numpy.ones(1, dtype=numpy.float32)\n        pt4j          = numpy.ones(1, dtype=numpy.float32)\n        pt3j          = numpy.ones(1, dtype=numpy.float32)\n        eta4j         = numpy.ones(1, dtype=numpy.float32)\n        eta3j         = numpy.ones(1, dtype=numpy.float32)\n        phi4j         = numpy.ones(1, dtype=numpy.float32)\n        phi3j         = numpy.ones(1, dtype=numpy.float32)\n        dphill4j      = numpy.ones(1, dtype=numpy.float32)\n        dphill3j      = numpy.ones(1, dtype=numpy.float32)\n\n        best1         = numpy.ones(1, dtype=numpy.float32)\n        best2         = numpy.ones(1, dtype=numpy.float32)\n\n        self.otree.Branch('m4j'             ,  m4j           ,  'm4j/F'        )\n        self.otree.Branch('m3j'             ,  m3j           ,  'm3j/F'        )\n        self.otree.Branch('mW1jj'           ,  mW1jj         ,  'mW1jj/F'      )\n        self.otree.Branch('mW2jj'           ,  mW2jj         ,  'mW2jj/F'      )\n        self.otree.Branch('pt4j'            ,  pt4j          ,  'pt4j/F'       )\n        self.otree.Branch('pt3j'            ,  pt3j          ,  'pt3j/F'       )\n        self.otree.Branch('eta4j'           ,  eta4j         ,  'eta4j/F'      )\n        self.otree.Branch('eta3j'           ,  eta3j         ,  'eta3j/F'      )\n        self.otree.Branch('phi4j'           ,  phi4j         ,  'phi4j/F'      )\n        self.otree.Branch('phi3j'           ,  phi3j         ,  'phi3j/F'      )\n        self.otree.Branch('dphill4j'        ,  dphill4j      ,  'dphill4j/F'   )\n        self.otree.Branch('dphill3j'        ,  dphill3j      ,  'dphill3j/F'   )\n\n        self.otree.Branch('best1'           ,  best1         ,  'best1/F'   )\n        self.otree.Branch('best2'           ,  best2         ,  'best2/F'   )\n\n        nentries = self.itree.GetEntries()\n        print 'Total number of entries: ',nentries \n\n        # avoid dots to go faster\n        itree     = self.itree\n        otree     = self.otree\n\n        print '- Starting eventloop'\n        step = 5000\n        for i in xrange(nentries):\n            itree.GetEntry(i)\n\n            ## print event count\n            if i > 0 and i%step == 0.:\n                print i,'events processed.'\n\n            jetpt1 = itree.jetpt1\n            jetphi1 = itree.jetphi1\n            jeteta1 = itree.jeteta1\n\n            jetpt2 = itree.jetpt2\n            jetphi2 = itree.jetphi2\n            jeteta2 = itree.jeteta2\n\n            jetpt3 = itree.jetpt3\n            jetphi3 = itree.jetphi3\n            jeteta3 = itree.jeteta3\n\n            jetpt4 = itree.jetpt4\n            jetphi4 = itree.jetphi4\n            jeteta4 = itree.jeteta4\n\n            jet1 = ROOT.TLorentzVector()\n            jet1.SetPtEtaPhiM(itree.jetpt1, itree.jeteta1, itree.jetphi1, 0)\n            jet2 = ROOT.TLorentzVector()\n            jet2.SetPtEtaPhiM(itree.jetpt2, itree.jeteta2, itree.jetphi2, 0)\n            jet3 = ROOT.TLorentzVector()\n            jet3.SetPtEtaPhiM(itree.jetpt3, itree.jeteta3, itree.jetphi3, 0)\n            jet4 = ROOT.TLorentzVector()\n            jet4.SetPtEtaPhiM(itree.jetpt4, itree.jeteta4, itree.jetphi4, 0)\n\n            jets = [jet1,jet2,jet3,jet4]\n\n            jetSum4 = jet1 + jet2 + jet3 + jet4\n\n            jetSum3 = jet1 + jet2 + jet3\n\n            l1 = ROOT.TLorentzVector()\n            l1.SetPtEtaPhiE(itree.pt1, itree.eta1, itree.phi1, itree.pt1/sin(2*atan(exp(-itree.eta1))))\n\n            l2 = ROOT.TLorentzVector()\n            l2.SetPtEtaPhiE(itree.pt2, itree.eta2, itree.phi2, itree.pt2/sin(2*atan(exp(-itree.eta2))))\n\n            ll = ROOT.TLorentzVector()\n            ll = l1+l2;\n\n\n            mW1jj[0]    = -999\n            mW2jj[0]    = -999\n            m4j[0]      = -999\n            m3j[0]      = -999\n            pt4j[0]     = -999\n            pt3j[0]     = -999\n            eta4j[0]    = -999\n            eta3j[0]    = -999\n            phi4j[0]    = -999\n            phi3j[0]    = -999\n            dphill4j[0] = -999\n            dphill3j[0] = -999\n\n            best1[0]    = -999\n            best2[0]    = -999\n\n            if (jetpt4 > 0) :\n                m4j[0]      = jetSum4.M()\n                pt4j[0]     = jetSum4.Pt()\n                eta4j[0]    = jetSum4.Eta()\n                phi4j[0]    = jetSum4.Phi()\n                dphill4j[0] = jetSum4.DeltaPhi(ll)\n\n                # list of all possible couples\n                sjets = sorted([ (jets[i],jets[j]) for i in xrange(4) for j in xrange(4) if i<j], key=self._deltamassw)\n\n#                 for jA,jB in sjets:\n#                     print (jA+jB).M(),'->', self._deltamassw( (jA,jB) )\n\n                # choose best pair: the pair with one of the two W-candidates nearest to MW \n                best = sjets[0]\n                # the companion is made of the other 2 jets\n                other = tuple( [j for j in jets if j not in best] )\n\n                W1 = best[0] + best[1]\n                W2 = other[0]+other[1]\n\n                best1[0] = jets.index(best[0])\n                best2[0] = jets.index(best[1])\n\n                if W1.Pt() > W2.Pt() :\n                    mW1jj[0] = W1.M()\n                    mW2jj[0] = W2.M()\n                else :\n                    mW1jj[0] = W2.M()\n                    mW2jj[0] = W1.M()\n\n\n            if (jetpt3 > 0) :\n                m3j[0]      = jetSum3.M()\n                pt3j[0]     = jetSum3.Pt()\n                eta3j[0]    = jetSum3.Eta()\n                phi3j[0]    = jetSum3.Phi()\n                dphill3j[0] = jetSum3.DeltaPhi(ll)\n\n\n            otree.Fill()\n\n        self.disconnect()\n        print '- Eventloop completed'\n\n\n\n\n\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(word):\n    reversed_word = word[::-1]\n    if word == reversed_word:\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
