{"prompt": "make some code that functions the same as the following code: def filter_string(string):\n    filtered_string = ''\n    for c in string:\n        if c.isdigit():\n            filtered_string += c\n    return filtered_string\n\nprint(filter_string(\"4x4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n \ndef shuffle(list_data):\n  # Loop through the indices of the list\n  for i in range(len(list_data)-1, 0, -1):\n    # Generate a random index\n    random_index = random.randint(0, i)\n    # Swap the elements\n    temp = list_data[i]\n    list_data[i] = list_data[random_index]\n    list_data[random_index] = temp\n \n  # Return the shuffled list\n  return list_data but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/reverse', methods=['POST'])\ndef reverse():\n data = request.get_json()\n text = data['text']\n reversed_text = text[::-1]\n\n return jsonify({'reversed_text': reversed_text})\n\nif __name__ == '__main__':\n app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def secondSmallestElement(lst): \n    min1 = min(lst[0], lst[1]); \n    min2 = max(lst[0], lst[1]); \n   \n    for i in range(2, len(lst)): \n        if lst[i] < min1: \n            min2 = min1; \n            min1 = lst[i]; \n   \n    return min2; but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n  \n# Generates a random integer between 0 and 1000 \nx = random.randint(0,1000) \n  \nprint(x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countVowels(sentence):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for ch in sentence:\n        if ch in vowels:\n            count += 1\n    return count\n\nresult = countVowels('The quick brown fox jumps over the lazy dog')\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # python program to implement a personalized mailing system\n\ndef personalizedMailingSystem(user_preferences):\n    # user preferences is a dictionary \n    # containing the user's preferences\n    \n    # get user's name\n    name = user_preferences[\"name\"]\n    # get user's email address\n    email = user_preferences[\"email\"]\n    # get user's topic interests\n    topics = user_preferences[\"topics\"]\n    \n    # generate personalized emails for the user\n    for topic in topics:\n        message = \"Hi \" + name + \",\\n\\nWe hope you're doing well. We wanted to let you know that we've just released new content about \" + topic + \". We think you'd be interested in taking a look!\\n\\nThanks,\\nThe mail team \\n\"\n        print(\"Sending email to \" + email + \" about \" + topic)\n        send_email(email, message)\n\n# example usage\nuser_preferences = {\n    \"name\": \"John\", \n    \"email\": \"john@example.com\", \n    \"topics\": [\"AI\", \"Machine Learning\", \"Robotics\"]\n    }\npersonalizedMailingSystem(user_preferences) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\nimport csv\n \ndata = ... # your json data\n \nwith open('data.csv', 'w') as csvfile:\n writer = csv.writer(csvfile)\n writer.writerow(['Name', 'Age', 'Country'])\n \n for json_obj in data:\n  name = json_obj['name']\n  age = json_obj['age']\n  country = json_obj['country']\n  writer.writerow([name, age, country]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_substring(string1, string2):\n    if string2 in string1:\n        return True\n    else:\n        return False\n\n# example\nresult = check_substring(\"Hello world!\", \"world\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_colors():\n    colors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\"]\n    query = input(\"What color would you like to search for? \")\n    if query in colors:\n        print(\"The color exists in the list.\")\n    else:\n        print(\"The color does not exist in the list.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseString(s): \n    return s[::-1] \n  \ndef capitalizeString(s):\n    return s.capitalize() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_string_list(strings):\n  strings.sort()\n  return strings\n\nmy_list = ['cat', 'dog', 'apple', 'zebra']\nprint(sort_string_list(my_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def min(num1, num2):\n    if num1 < num2:\n        return num1\n    else:\n        return num2\n\nprint(min(2, 5)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class BankAccount:\n    def __init__(self, username, balance):\n        self.username = username\n        self.balance = balance\n\n    def show_balance(self):\n        print(f\"Balance of {self.username}'s account is {self.balance}\")\n    \n    def deposit(self, amount):\n        if amount > 0:\n            self.balance += amount\n            print(f\"{amount} was added to the balance. Current balance is {self.balance}\")\n        else:\n            print(\"Cannot deposit negative value\")\n    \n    def withdraw(self, amount):\n        if amount > 0:\n            if amount <= self.balance:\n                self.balance -= amount\n                print(f\"{amount} was withdrawn from the balance. Current balance is {self.balance}\")\n            else:\n                print(\"Cannot withdraw more than current balance\")\n        else:\n            print(\"Cannot withdraw negative value\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport numpy as np\n\nfrom deap import base\nfrom deap import creator\nfrom deap import tools\n\n# Create a new type with a fitness attribute\ncreator.create(\"FitnessMax\", base.Fitness, weights=(1.0,))\n\n# Provide a new type, inheriting from the list type\ncreator.create(\"Individual\", list, fitness=creator.FitnessMax)\n\n# Create the toolbox\ntoolbox = base.Toolbox()\n\n# Fill the toolbox with the attribute\ntoolbox.register(\"attr_float\", random.random)\n\n# Create the structure with two classes, Student and Teacher\ndef createStructure(student_attributes, teacher_attributes):\n structure = []\n for i in range(len(student_attributes)):\n structure.append(student_attributes[i])\n for i in range(len(teacher_attributes)):\n structure.append(teacher_attributes[i])\n return structure\n\n# Create the individual\ntoolbox.register(\"individual\", tools.initIterate, creator.Individual, toolbox.attr_float)\n\n# Set the evaluation function\ndef evaluateIndividual(individual):\n student_attributes = []\n teacher_attributes = []\n for i in range(len(individual)):\n if i < len(individual)/2:\n student_attributes.append(individual[i])\n else:\n teacher_attributes.append(individual[i])\n \n student_score = 0\n teacher_score = 0\n for attr in student_attributes:\n student_score += attr\n\n for attr in teacher_attributes:\n teacher_score += attr\n\n return student_score, teacher_score\n\n# Create the population\ntoolbox.register(\"population\", tools.initRepeat, list, toolbox.individual)\n\n# Create the genetic operators\ntoolbox.register(\"mate\", tools.cxTwoPoint)\ntoolbox.register(\"mutate\", tools.mutGaussian, mu=0.0, sigma=1.0, indpb=0.2)\ntoolbox.register(\"select\", tools.selTournament, tournsize=3)\n\n# Apply the evolutionary algorithm\ndef main():\n student_attr = [toolbox.attr_float() for i in range(2)]\n teacher_attr = [toolbox.attr_float() for i in range(2)]\n structure = createStructure(student_attr, teacher_attr)\n \n pop = toolbox.population(n=50)\n CXPB, MUTPB, NGEN = 0.5, 0.2, 40\n \n fitnesses = list(map(toolbox.evaluate, pop))\n for ind, fit in zip(pop, fitnesses):\n ind.fitness.values = fit\n \n for g in range(NGEN):\n offspring = toolbox.select(pop, len(pop))\n offspring = list(map(toolbox.clone, offspring))\n \n for child1, child2 in zip(offspring[::2], offspring[1::2]):\n if random.random() < CXPB:\n toolbox.mate(child1, child2)\n del child1.fitness.values\n del child2.fitness.values\n \n for mutant in offspring:\n if random.random() < MUTPB:\n toolbox.mutate(mutant)\n del mutant.fitness.values\n \n invalid_ind = [ind for ind in offspring if not ind.fitness.valid]\n fitnesses = map(toolbox.evaluate, invalid_ind)\n for ind, fit in zip(invalid_ind, fitnesses):\n ind.fitness.values = fit\n \n pop[:] = offspring\n \n best_ind = tools.selBest(pop, 1)[0]\n print(f\"Best individual is {best_ind}, Fitness: {best_ind.fitness.values}\")\n\nif __name__ == \"__main__\":\n main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: try:\n    # Code that might raise an error\nexcept TypeError:\n    # Code to handle type errors\nexcept KeyError:\n    # Code to handle key errors\nexcept ValueError:\n    # Code to handle value errors but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: This program is a function that displays a greeting specific to a person. If the name passed to the function is 'John', it will print 'Hello John!'; otherwise it will print 'Hello, stranger!' In the given example, it prints 'Hello John!' since 'John' is passed to the function. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import logging\n\ntry:\n    # Run code\nexcept Exception as e:\n    logging.error(\"An error occurred: {}\".format(e)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import libraries\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# create model\nmodel = Sequential()\nmodel.add(Dense(10, input_dim=1, activation='relu'))\nmodel.add(Dense(12, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# compile model\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# fit the model\nmodel.fit(x, y, epochs=100, batch_size=32) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #this program reads in a data set, and outputs the mean of the set \n# and the range (highest - lowest) of the set.\n\n#function to get the mean of given data set\ndef mean(input_list):\n    total = 0\n    for i in input_list:\n        total += i\n    return total/len(input_list)\n\n#function to get the range (highest - lowest) of the given data set\ndef range(input_list):\n    return max(input_list)-min(input_list)  \n\n#initialize an array\ninput_list = [2, 3, 6, 12, 21, 41]\n\n#get the mean\nmean = mean(input_list)\n\n#get the range\nthe_range = range(input_list)\n\n#print the output\nprint(\"The mean of given array is\",mean)\nprint(\"The range (highest - lowest) of given array is\",the_range) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = [\"I\", \"am\", \"all\", \"ears\"]\n\n#sort the words by length\nwords.sort(key = len)\n\n#print the sorted words\nfor word in words:\n print(word)\n\n# Output\nI\nam\nall\nears but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Triangle:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n    \n    def perimeter(self):\n        return self.a + self.b + self.c\n    def area(self):\n        s = self.perimeter()/2\n        area = (s*(s-self.a)*(s-self.b)*(s-self.c)) ** 0.5\n        return area\n\n# Driver code \nside1 = 3\nside2 = 4 \nside3 = 5\n\n# Creating object of the class \nt = Triangle(side1, side2, side3) \n\nprint(\"Perimeter is:\", t.perimeter()) \nprint(\"Area is:\",t.area()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: x = \"Hello\"\ny = \"World\"\n\nresult = x + y\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\nclass GeneticAlgo:\n\n    def __init__(self, start_state, end_state, max_mutation, population_size):\n        \"\"\"\n        Initializes the Genetic Algorithm\n\n        Args:\n            start_state (tuple): Start state of the algorithm\n            end_state (tuple): End state of the algorithm\n            max_mutation (int): Maximum number of mutations\n            population_size (int): Maximum size of the population\n        \"\"\"\n        self.start_state = start_state\n        self.end_state = end_state\n        self.max_mutation = max_mutation\n        self.population_size = population_size\n\n        # Store the starting state. Done to reset it after each generation\n        self.start_state_copy = start_state\n\n        # Create a population with random state members\n        self.population = self._generate_random_population()\n\n    def _generate_random_population(self):\n        \"\"\"\n        Generates a random population\n\n        Returns:\n            population: List containing tuples of random states\n        \"\"\"\n\n        population = []\n        for _ in range(self.population_size):\n            # Copy the starting state and then shuffle it\n            current_state = list(self.start_state_copy)\n            np.random.shuffle(current_state)\n\n            # Append this random state to the list\n            population.append(tuple(current_state))\n\n        return population\n\n    def _calculate_fitness(self, state):\n        \"\"\"\n        Calculates the fitness of the given state\n        Fitness is calculated by comparing the state with the end_state. The more different the two are, the lower is the fitness\n\n        Args:\n            state (tuple): Tuple containing the elements of the state\n\n        Returns:\n            fitness (int): Fitness of the given state\n        \"\"\"\n\n        fitness = 0\n        for index, element in enumerate(state):\n            if element == self.end_state[index]:\n                fitness += 1\n\n        return fitness\n\n    def _convert_population_to_fitness(self):\n        \"\"\"\n        Converts the population and returns a list of tuples containing each state's fitness\n        \"\"\"\n\n        # Empty list to store each state's fitness\n        population_fitness = []\n\n        # Loop through each state in the population\n        for state in self.population:\n            # Find the fitness of the given state\n            fitness = self._calculate_fitness(state)\n\n            # Add the state's fitness to the list\n            population_fitness.append((state, fitness))\n\n        return population_fitness\n\n    def _do_mutation(self, state):\n        \"\"\"\n        Does the mutation process\n        Mutation consists of swapping two elements in the state\n\n        Args:\n            state (tuple): Tuple containing the elements of the state\n\n        Returns:\n            mutated_state (tuple):  Tuple containing the elements of the mutated state\n        \"\"\"\n\n        # Make a copy of the state\n        mutated_state = list(state)\n\n        # Get two random indices and swap those elements\n        swap_indices = np.random.choice(len(mutated_state), size=2, replace=False)\n        mutated_state[swap_indices[0]], mutated_state[swap_indices[1]] = (\n            mutated_state[swap_indices[1]],\n            mutated_state[swap_indices[0]],\n        )\n\n        # Return the mutated state as a tuple\n        return tuple(mutated_state)\n\n    def solve(self):\n        \"\"\"\n        Solves the shortest path problem using the Genetic Algorithm\n        \"\"\"\n\n        # Find out the best solution from the current population\n        population_fitness = self._convert_population_to_fitness()\n        current_best_fitness = max([fitness for _, fitness in population_fitness])\n\n        # While the solution is still not found\n        while current_best_fitness < len(self.end_state):\n\n            # Create a list to store the new population\n            new_population = []\n\n            # Generate the new population\n            for _ in range(self.population_size):\n\n                # Select two parents randomly\n                parent_1, parent_2 = np.random.choice(\n                    self.population, size=2, replace=False\n                )\n\n                # Create child by combining features of the two selected parents\n                child = []\n                for p1, p2 in zip(parent_1, parent_2):\n                    # Flip a coin (biased in this case to favour the end_state)\n                    coin_toss = np.random.choice([0, 1], p=[0.5, 0.5])\n\n                    # If heads (with a probability of 0.5) select the corresponding element from the end_state\n                    if coin_toss == 0:\n                        child.append(self.end_state[p1])\n                    # Else select it from the parent\n                    else:\n                        child.append(p2)\n\n                # Mutate the child\n                for _ in range(self.max_mutation):\n                    child = self._do_mutation(child)\n\n                # Append the child to the list\n                new_population.append(tuple(child))\n\n            # Overwrite the existing population with the new population\n            self.population = new_population[:]\n\n            # Find out the best solution from the new population\n            population_fitness = self._convert_population_to_fitness()\n            current_best_fitness = max([fitness for _, fitness in population_fitness])\n\n        # Return the best solution\n        return max(population_fitness, key=lambda x: x[1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# get the HTML from the URL\nresponse = requests.get('https://example.com')\nhtml = response.text\n\n# create the BS4 object and get all the <a> elements\nbsobj = BeautifulSoup(html, 'html.parser')\nlinks = bsobj.find_all('a')\n\n# print all the links\nfor link in links:\n if link.has_attr('href'):\n   print(link['href']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# Load data\ndata = pd.read_csv(path_to_csv)\n\n# Remove irrelevant columns\ndata.drop(['irrelevant_column1', 'irrelevant_column2'], axis=1, inplace=True)\n\n# Scale numerical features\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\ndata[['numerical_feature1', 'numerical_feature2']] = scaler.fit_transform(data[['numerical_feature1', 'numerical_feature2']])\n\n# One Hot Encoding\ndata = pd.get_dummies(data, columns=['categorical_feature1', 'categorical_feature2'])\n\n# Split data into training and test sets\nX = data.drop['target']\ny = data['target']\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: str = \"Hello, World!\"\n\n# loop to iterate through string\nfor i in range(len(str)-1, -1, -1):\n  print(str[i],end=\"\")\n\nprint() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: if InputString.endswith(Substring):\n    print('The input string ends with the given substring.')\nelse:\n    print('The input string does not end with the given substring.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def edit_string(string):\n characters = list(string)\n np.random.shuffle(characters)\n edited_string = \"\".join(characters)\n return edited_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\ndef extract_links(url):\n    html = requests.get(url).content\n    soup = BeautifulSoup(html)\n    links = []\n    \n    for link in soup.find_all(\"a\"):\n        try:\n            if link[\"href\"].startswith(\"http\"):\n                links.append(link[\"href\"])\n        except KeyError:\n            pass\n            \n    return links\n    \nurl = \"<input>\"\n\nlinks = extract_links(url)\n\nfor link in links:\n  print(link) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import libraries\nimport requests\nfrom bs4 import BeautifulSoup\n\n# define the scrape_page function\ndef scrape_page(url):\n # make the request\n response = requests.get(url)\n # parse the response using BeautifulSoup\n soup = BeautifulSoup(response.text, 'html.parser')\n # an empty list to store the hyperlinks\n links = []\n # loop through all the anchor tags\n for link in soup.find_all('a'):\n # get the URL from the href attribute\n href = link.get('href')\n # add the URL to the list of links\n links.append(href)\n # return the list of links\n return links\n\n# call the function with a given URL\nurl = 'https://example.com'\nlinks = scrape_page(url)\nprint(links) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.imdb.com/chart/moviemeter'\n\n# Make a request to the url\nr = requests.get(url)\n\n# Parse the content of the request with BeautifulSoup\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# Get all the movies listed\nmovies = soup.find_all('td', class_='titleColumn')\n\n# Loop over each movie\nfor movie in movies:\n    # Get the movie title\n    title = movie.a.text\n    # Get the release year\n    year = movie.span.text[1:-1]\n    # Print the title and year\n    print(title + ' ('+year + ')') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findCombinations(arr, target): \n    result = [] \n    for i in range(len(arr)-2): \n        for j in range(i + 1, len(arr)-1):  \n            for k in range(j + 1, len(arr)): \n                if arr[i] + arr[j] + arr[k] == target: \n                    temp = [] \n                    temp.append(arr[i]) \n                    temp.append(arr[j]) \n                    temp.append(arr[k]) \n                    result.append(temp) \n  \n    return result\n  \n# Driver Code \narr = [2, 3, 4, 5] \nX = 9\nprint(findCombinations(arr, X)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request\nfrom collections import Counter\n\napp = Flask(name)\n\n@app.route('/word-frequency', methods=['POST'])\ndef word_frequency():\n string = request.json['string']\n counts = Counter(string.split())\n return {'frequency': counts}\n\nif name == 'main':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef encrypt(string):\n    \"\"\"Encrypts a given string using a random 2D matrix\"\"\"\n    \n    # Generate random 2D matrix\n    matrix = [[random.randint(0, 9) for x in range(len(string))] for y in range(len(string))]\n    encrypted_str = \"\"\n\n    # Encrypt the string\n    for col in range(len(string)):\n        for row in range(len(string)):\n            encrypted_str += str(matrix[row][col] ^ ord(string[row]))\n\n    return encrypted_str\n\ndef decrypt(string):\n    \"\"\"Decrypts a given encrypted string\"\"\"\n    encrypted_str = \"\"\n    matrix_size = int(len(string) ** 0.5)\n    encrypted_str = \"\"\n\n    # Generate a 2D matrix from the encrypted string \n    matrix = []\n    for row in range(matrix_size):\n        matrix.append([])\n        for col in range(matrix_size):\n            matrix[row].append(int(string[col + (row * matrix_size): col + (row * matrix_size) + 1]))\n    \n    # Decrypt the string\n    for col in range(matrix_size):\n        for row in range(matrix_size):\n            encrypted_str += chr(matrix[row][col] ^ matrix[row][0])\n        \n    return encrypted_str but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def transpose_matrix(matrix):\n    transposed_matrix = []\n    for i in range(len(matrix[0])):\n        row = []\n        for j in range(len(matrix)):\n            row.append(matrix[j][i])\n        transposed_matrix.append(row)\n    return transposed_matrix\n\nmy_matrix =[[1,2,3],[4,5,6]]\ntransposed_matrix = transpose_matrix(my_matrix)\nprint(transposed_matrix) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\nreview = \"The food was great and the atmosphere was friendly.\"\n\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts([review])\n\nencoded_review = tokenizer.texts_to_sequences([review])[0]\n\npadded_review = pad_sequences([encoded_review], maxlen=6, padding='post')\n\nmodel = tf.keras.models.Sequential([\n tf.keras.layers.Embedding(\n  input_dim=len(tokenizer.word_index) + 1,\n  output_dim=16,\n  input_length=6\n ),\n tf.keras.layers.Flatten(),\n tf.keras.layers.Dense(units=1, activation='sigmoid')\n])\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\nscore = model.predict(padded_review).round(2)[0][0]  # 0.87 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_input = [-2, -4, 0, 5, 10]\n\nlist_sum = sum(list_input)\nprint(\"Sum: \" + str(list_sum))\n\nlist_average = sum(list_input) / len(list_input)\nprint(\"Average: \" + str(list_average))\n\nlist_max = max(list_input)\nprint(\"Largest value: \" + str(list_max))\n\nlist_min = min(list_input)\nprint(\"Smallest value: \" + str(list_min)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: max(arr, key=len) # returns \"elephant\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [1, 2, 3, 4, 5]\n\nsum_list = sum(my_list)\nmean_list = sum_list / len(my_list)\n\nmy_list.sort()\nmiddle_index = int(len(my_list) / 2)\n\nif len(my_list) % 2 == 0:\n median_list = (my_list[middle_index] + my_list[middle_index - 1]) / 2\nelse:\n median_list = my_list[middle_index+1]\n\nprint('sum', sum_list)\nprint('mean', mean_list)\nprint('median', median_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program\ndef main(num1, num2):\n if num1 > num2:\n  print(num1)\n else:\n  print(num2)\n\nif __name__ == \"__main__\":\n num1 = int(input())\n num2 = int(input())\n main(num1, num2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import libraries\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\n# Input corpus\ncorpus = [\n    'This is a positive text',\n    'This is a negative text',\n    'This is another positive text',\n    'This is another negative text',\n]\n\nlabels = [1, 0, 1, 0]\n\n# Convert corpus into vectors \nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(corpus)\n\n# Train classifier\nclassifier = LogisticRegression()\nclassifier.fit(X, labels)\n\n# Classify new text\ntext = 'This is a text to classify'\nX = vectorizer.transform([text])\n\nprediction = classifier.predict(X)\nif prediction[0] == 1:\n    print('Classified as Positive')\nelse:\n    print('Classified as Negative') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_divisible_by_5(number):\n    if (number % 5 == 0):\n        return True\n    else:\n        return False\n    \nnumber = 10\nis_divisible_by_5(number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: if (temperature >= low_limit and temperature <= high_limit):\n    print(\"Temperature is in range\")\nelse:\n    print(\"Temperature is out of range\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def block_sites(proxy_url):\n    # Create a request instance\n    req = urllib.request.Request(proxy_url)\n    # Download page data\n    with urllib.request.urlopen(req) as response:\n       page_data = response.read()\n    # Parse page data\n    page_soup = BeautifulSoup(page_data, \"html.parser\")\n    # Extract block-list items\n    block_list = page_soup.find_all('ul', {'class': 'block-list'})\n    # Filter out sites on the block list\n    filtered_sites = [site.text.strip() for site in block_list]\n    return filtered_sites but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Vehicle:\n    def __init__(self, name, wheels):\n        self.name = name\n        self.wheels = wheels\n        \nclass Car(Vehicle):\n    def __init__(self, name, wheels, engine):\n        super().__init__(name, wheels)\n        self.engine = engine but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # importing required libraries\nimport pandas as pd\n\n# read csv file into a dataframe and check column types\ndf = pd.read_csv('dataset.csv')\n\n# get quartiles\nQ1 = df.quantile(0.25)\nQ3 = df.quantile(0.75)\nIQR = Q3 - Q1\n\n# remove outliers\ndf_no_outliers = df[~((df < (Q1 - 1.5 * IQR)) | (df > (Q3 + 1.5 * IQR))).any(axis=1)]\n\n# get the count of outliers\noutliers_count = df.shape[0] - df_no_outliers.shape[0]\n\n# prints the count of outliers\nprint(\"Count of outliers:\", outliers_count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: user_input = input(\"Enter a string: \")\nlength = len(user_input)\nprint(\"The length of the string is: \", length) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [1, 2, 3, 4, 5]\n\nif len(my_list) > 0:\n  element = my_list[0]\nelse:\n  element = None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\ndef check_if_keyword_exists(url, keyword):\n    response = requests.get(url)\n    if keyword in response.text:\n        return True\n    return False\n\nkeyword = \"python\"\nprint(check_if_keyword_exists(\"https://en.wikipedia.org/wiki/Python_(programming_language)\", keyword)) # Output: True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: items = [item for item in range(10)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to check if a string is a palindrome\ndef isPalindrome(s):\n # Reverse the string\n rev_s = s[::-1]\n\n # Check if the string is the same as its reverse\n if (s == rev_s):\n return True\n return False\n\n# Driver code\ns = 'racecar'\n\n# Check if the given word is a palindrome\nif (isPalindrome(s)):\n print(s) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_even_numbers(numbers):\n    even_numbers = filter(lambda num: num % 2 == 0, numbers)\n    return list(even_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pycuda.autoinit\nimport pycuda.driver as driver\nfrom pycuda.compiler import SourceModule\nimport numpy\n\nmod = SourceModule(\"\"\"\n__global__ void gpu_accelerate(float *a)\n{\n    int idx = threadIdx.x + blockIdx.x * blockDim.x;\n    a[idx] = a[idx] + 5;\n}\n\"\"\")\n\ngpu_accelerate = mod.get_function(\"gpu_accelerate\")\n\ndata = numpy.arange(128).astype(numpy.float32)\n\ngpu_accelerate(driver.In(data), block=(4,4,1), grid=(2,2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Generate code to read data from an Excel spreadsheet using Python's xlrd library. The code should read in the spreadsheet, open the first sheet, and then iterate over each row, reading the data and storing it in a data structure, such as a list. The code should also handle any errors that may arise. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import the necessary libraries\nimport unittest\n\n# The function to be tested\ndef add(a,b):\n return a+b\n\n# Create the test class\nclass TestAdd(unittest.TestCase):\n\n def test_add(self):\n # Test that add works correctly\n self.assertEqual(add(2,3), 5)\n self.assertEqual(add(4,5), 9)\n\nif __name__ == '__main__':\n unittest.main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Use two for loops to print pattern\nfor i in range(0, rows):\n    for j in range(0, i + 1):\n        print(\"* \", end=\"\")\n    print(\"\\r\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_array(lst):\n  for i in reversed(lst):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \nfrom bs4 import BeautifulSoup \n  \nURL = \"https://example.com/reviews\"\n  \nresponse = requests.get(URL) \n  \nsoup = BeautifulSoup(response.text, 'html.parser') \n  \nreviews = soup.find_all('div', class_='review') \n  \nfor review in reviews: \n    review_text = review.find('p', class_='review_text').text \n    rating = review.find('span', class_='rating').text \n    date = review.find('span', class_='date').text \n    print(review_text, rating, date) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to find the sum of digits\ndef sum_digits(num):\n # Variable to store the sum of digits\n sum = 0\n \n while num > 0:\n  digit = num % 10\n  sum = sum + digit\n  num = num // 10\n \n return sum\n \nnum = 1234\nsum = sum_digits(num)\nprint(\"Sum of digits of %d is %d\" % (num, sum))\n# Output: Sum of digits of 1234 is 10 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef parse_url(url):\n    regex = r\"^(https?://[^/]+)(.*)$\"\n    match = re.search(regex, url)\n    return match.group(1), match.group(2)\n\nurl, query = parse_url(\"https://www.example.com/index.php?p=1&q=2\")\nprint(\"URL:\", url)\nprint(\"Query:\", query) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [[1,2,3], [4,5,6], [7,8,9]]\n\nsum = 0\n\nfor row in arr:\n for col in row:\n  sum = sum + col\n\nprint(\"Sum:\", sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport nltk\nfrom nltk.corpus import stopwords\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\nimport db\nimport os\n\nDATASET_PATH = os.environ['HOME'] + '/nltk_data/corpora/twitter_samples/tweets.20150430-223406.json'\ndef calc_frequencies(words, words_n=50, lang='german'):\n    words = [word for word in words if len(word) > 1]\n    words = [word for word in words if not word.isnumeric()]\n    words = [word.lower() for word in words]\n    # words = [word for word in words if word not in all_stopwords]\n    # Stemming words seems to make matters worse, disabled\n    # stemmer = nltk.stem.snowball.SnowballStemmer(lang)\n    # words = [stemmer.stem(word) for word in words]\n\n    fdist = nltk.FreqDist(words)\n    return fdist.most_common(words_n)\n\ndef get_word_clouds(tweets, users, words_n=50, lang='english'):\n    default_stopwords = set(nltk.corpus.stopwords.words(lang))\n    stopwords_file = '../data/stopwords.txt'\n    custom_stopwords = set(open(stopwords_file, 'r').read().splitlines())\n    all_stopwords = default_stopwords | custom_stopwords\n\n    vectorizer = TfidfVectorizer(max_df=0.5, min_df=2, stop_words=list(all_stopwords))\n    X = vectorizer.fit_transform(tweets)\n    terms = vectorizer.get_feature_names()\n\n    word_cloud_per_person = {}\n    for doc in range(len(tweets)):\n        feature_index = X[doc, :].nonzero()[1]\n        tfidf_scores = zip(feature_index, [X[doc, x] for x in feature_index])\n        doc_terms = []\n        for word, score in [(terms[i], score) for (i, score) in tfidf_scores]:\n            doc_terms.append((word, score))\n        important_terms = [(word, score) for word, score in sorted(doc_terms, key=lambda x: x[1], reverse=True)][:words_n]\n        word_cloud_per_person[users[doc]] = important_terms\n    return word_cloud_per_person\n\ndef save_wordcloud_image(frequencies, filename):\n    wordcloud = WordCloud(width=1024, height=786, min_font_size=1).fit_words(frequencies)\n    fig = plt.figure()\n    fig.set_figwidth(12)\n    fig.set_figheight(16)\n    plt.imshow(wordcloud)\n    plt.axis(\"off\")\n    plt.savefig(filename, facecolor='k', bbox_inches='tight')\n    print('imaged created')\n\ndef load_example_data():\n    tweets = []\n    with open(DATASET_PATH) as f:\n        for line in f:\n            tweets.append(json.loads(line)['text'])\n    return tweets\n\ndef get_corpus_of_most_active_users(n_users=5):\n    tweets = []\n    texts = []\n    with open(DATASET_PATH) as f:\n        for line in f:\n            tweets.append(json.loads(line)['user']['screen_name'])\n            texts.append((json.loads(line)['user']['screen_name'], json.loads(line)['text']))\n\n    users = nltk.FreqDist(tweets).most_common(n_users)\n\n    dict = {}\n    for user, tweet in texts:\n        if user in dict:\n            dict[user] = \" \".join([dict[user],tweet])\n        else:\n            dict[user] = tweet\n\n    corpus = [dict[name] for name, _ in users]\n    user_names = [name for name, _ in users]\n    return  corpus, user_names\n\nif __name__ == \"__main__\":\n    corpus, users = get_corpus_of_most_active_users()\n    word_cloud_per_person = get_word_clouds(corpus, users, words_n=100, lang='english')\n    for user in users:\n        topic_frequencies = word_cloud_per_person[user]\n        print user\n        print topic_frequencies\n        db.save_word_frequencies('test_user_seb', dict(topic_frequencies))\n        exit()\n        # save_wordcloud_image(dict(topic_frequencies), 'plots/word_clouds/' + user + '.png')\n\n\n    # This is an example how to save a word_cloud in the database\n    # user_in_db = 'malechanissen'\n    # db.save_word_frequencies(user_in_db, {'w3':10, 'w4':20})\n    # db.save_word_frequencies(user_in_db, dict(topic_frequencies))\n\n    # db.save_word_frequencies('test_user_seb', {'w3':10, 'w4':20})\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Assume input is of the form:\n# {\n#  \"constraint1\": [[x1, y1, z1], [a1, b1, c1]],\n#  \"constraint2\": [[x2, y2, z2], [a2, b2, c2]],\n#  ...\n# }\ndef optimize_constraints(data):\n    # Initialize optimization problem\n    problem = Problem(\"Optimization problem\")\n\n    # Add variables to problem\n    for key, value in data.items():\n        for i in range(len(value)):\n            var = problem.add_variable(\"{}_{}\".format(key, i), type=float)\n            # Add constraints\n            problem.add_constraint(var == value[i], name=\"Constraint_{}_{}\".format(key, i))\n\n    # Solve problem\n    problem.solve()\n\n    # Return optimized constraints\n    solution = {}\n    for key, value in data.items():\n        solution[key] = [problem.get_value(\"{}_{}\".format(key, i))\n                         for i in range(len(value))]\n\n    return solution but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_time(speed, distance):\n time = distance / speed \n return time \n\nprint(calculate_time(100, 1000)) \n# Output: 10.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_words(input_str):\n    return input_str.split()\n\nresult = get_words(\"The quick brown fox jumps over the lazy dog\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nNormalize a list of numbers using Python\n\"\"\"\n\ndef normalize_list(list_numbers):\n  max_val = max(list_numbers)\n  normalized = [n/max_val for n in list_numbers]\n  return normalized\n\nif __name__ == '__main__':\n  list_numbers = [1, 4, 4, 5, 7]\n  print(normalize_list(list_numbers)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def selection_sort(arr): \n    for i in range(len(arr)): \n  \n        # Find the minimum element in remaining \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n  \n        # Swap the found minimum element with  \n        # the first element         \n        arr[i], arr[min_idx] = arr[min_idx], arr[i] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_value(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Node class \nclass Node: \n  \n    # Constructor to initialize the node object \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \n# Linked List class contains a Node object \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n  \n    # A recursive function to reverse linked list \n    def reverseUtil(self, curr, prev): \n          \n        # If last node mark it head \n        if curr.next is None : \n            self.head = curr  \n              \n            # Update next to prev node \n            curr.next = prev \n            return \n          \n        # Save curr.next node for recursive call \n        next = curr.next\n  \n        # And update next \n        curr.next = prev \n          \n        self.reverseUtil(next, curr)  \n  \n  \n    # This function mainly calls reverseUtil() \n    # with previous as None \n    def reverse(self): \n        if self.head is None: \n            return \n        self.reverseUtil(self.head, None) \n\n# Create a list \nllist = LinkedList() \n  \n# Create first node\nllist.head = Node(1) \n  \n# Create second node\nsecond = Node(2)  \n  \n# Create third node\nthird = Node(3) \n  \n# Create fourth node\nfourth = Node(4) \n\n# Now combine the four nodes \nllist.head.next = second; # Link first node with second  \nsecond.next = third; # Link second node with the third node \nthird.next = fourth; # Link third node with the fourth node \n\n# Reverse the LinkedList \nllist.reverse() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def round_to_two_decimals(number):\n    return round(number, 2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quickSort(arr): \n\tif len(arr) <= 1:\n\treturn arr \n\telse: \n\t\tpivot = arr[0] \n\t\tlessThanPivot = [number for number in arr[1:] if number <= pivot] \n\t\tmoreThanPivot = [number for number in arr[1:] if number > pivot] \n\t\treturn quickSort(lessThanPivot) + [pivot] + quickSort(moreThanPivot)\n\narr = [3, 8, 6, 10, 11, 4] \nprint(quickSort(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import itertools\n\ndef apriori(dataset, min_support=0.5, verbose=False):\n    # Get all unique items\n    item_set = set([item for sublist in dataset for item in sublist])\n    # Generate the initial frequent item sets\n    freq_set = frequent_item_sets(dataset, item_set, min_support, verbose)\n    # Use the initial sets to generate more\n    if verbose:\n        print(f'Frequent Item Sets: {freq_set}')\n    final_item_sets = freq_set.copy()\n    k = 2\n    while len(freq_set) > 0:\n        if verbose:\n            print(f'\\nGenerating item sets of size {k}')\n        k_item_sets = generate_k_item_sets(freq_set, k)\n        freq_set = frequent_item_sets(dataset, k_item_sets, min_support, verbose)\n        final_item_sets.update(freq_set)\n        k += 1\n    return final_item_sets\n\ndef generate_k_item_sets(item_sets, k):\n    return set([i.union(j) for i in item_sets for j in item_sets if len(i.union(j)) == k])\n\ndef frequent_item_sets(dataset, item_sets, min_support, verbose):\n    support_counts = {}\n    for item_set in item_sets:\n        for transaction in dataset:\n            if item_set.issubset(transaction):\n                try:\n                    support_counts[item_set] += 1\n                except KeyError:\n                    support_counts[item_set] = 1\n    n = len(dataset)\n    freq_set = set([item_set for item_set in support_counts if (support_counts[item_set] / n) >= min_support])\n    if verbose:\n        for item_set in support_counts:\n            print(f'{item_set}: {support_counts[item_set]}')\n    return freq_set\n\n# Test the apriori algorithm\ndataset = [['A', 'B', 'C', 'D'],\n           ['B', 'C', 'E'],\n           ['A', 'B', 'C', 'E'],\n           ['B', 'D', 'E'],\n           ['A', 'B', 'C', 'D']]\n\nfrequent_item_sets = apriori(dataset, 0.5, verbose=True)\nprint(f'\\nFrequent Item Sets: {frequent_item_sets}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_mean(numbers):\n    total_sum = 0\n    for num in numbers:\n        total_sum += num\n    mean = total_sum / len(numbers)\n    return mean\n\nlist_of_numbers = [1, 7, 11, 13]\nmean = calculate_mean(list_of_numbers)\nprint(mean) # 7.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def square(num):\n    return num ** 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Queue:\n    def __init__(self):\n        self.queue = []\n    \n    def enqueue(self, data):\n        self.queue.append(data)\n\n    def dequeue(self):\n        if len(self.queue) == 0:\n            print(\"Queue empty\")\n        else:\n            element = self.queue[0]\n            del self.queue[0]\n            return element\n    \n    def peek(self):\n        return self.queue[0]\n    \n    def size(self):\n        return len(self.queue) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_a = [1, 3, 5, 7]\nlist_b = [2, 4, 6, 8]\n\ndef merge_sorted_lists(list_a, list_b):\n    merged_list = []\n    i = 0\n    j = 0\n    while i < len(list_a) and j < len(list_b):\n        if list_a[i] < list_b[j]:\n            merged_list.append(list_a[i])\n            i+=1\n        else:\n            merged_list.append(list_b[j])\n            j+=1\n    while i < len(list_a):\n        merged_list.append(list_a[i])\n        i+=1\n    while j < len(list_b):\n        merged_list.append(list_b[j])\n        j+=1\n    return merged_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport matplotlib.pyplot as plt\n\n# Make a GET request to the API.\nresponse = requests.get('https://jsonplaceholder.typicode.com/todos')\n\n# Create an empty dictionary to store userID's and the number of their completed todos.\ncompleted_todos_by_user = {}\n\n# Loop through the response data to count completed todos for each userID.\nfor todo in response.json():\n    if (todo['completed']):\n        try:\n            completed_todos_by_user[todo['userId']] += 1\n        except KeyError:\n            completed_todos_by_user[todo['userId']] = 1\n\n# Create a list of x values (userID's) and a list of y values (total completed todos).\nx_values = list(completed_todos_by_user.keys())\ny_values = list(completed_todos_by_user.values())\n\n# Create a bar chart to demonstrate the data.\nplt.bar(x_values, y_values)\nplt.title('Completed Todos by User')\nplt.xlabel('UserID')\nplt.ylabel('Completed Todos')\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndata = {\n    'name': 'root',\n    'children': [\n        {\n            'name': 'a',\n            'children': [\n                {\n                    'name': 'b',\n                    'children': []\n                }\n            ]\n        }\n    ]\n}\n\njson_string = json.dumps(data, indent=4)\nprint(json_string)\n\n# output\n{\n    \"name\": \"root\",\n    \"children\": [\n        {\n            \"name\": \"a\",\n            \"children\": [\n                {\n                    \"name\": \"b\",\n                    \"children\": []\n                }\n            ]\n        }\n    ]\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class EmailClassifier: \n  \n    # Initialize the vectorizer and classifier \n    def __init__(self): \n        self.vectorizer = TfidfVectorizer(stop_words=\"english\") \n        self.classifier = MultinomialNB() \n  \n    # Fit the emails to the vectorizer \n    def fit(self, emails, labels): \n        self.vectorizer.fit(emails) \n        self.classifier.fit(self.vectorize(emails), labels) \n  \n    # Transform the emails to a vectorized form \n    def vectorize(self, emails): \n        return self.vectorizer.transform(emails) \n  \n    # Predict the labels for the emails \n    def predict(self, emails): \n        return self.classifier.predict(self.vectorize(emails)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\n\n# Load the dataset\nX, y = np.load('dataset.npy')\n\n# Split data into train and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y)\n\n# Initialize the model\nmodel = SVC(kernel='linear')\n\n# Fit the model on the training data\nmodel.fit(X_train, y_train)\n\n# Make predictions on the test set\ny_pred = model.predict(X_test)\n\n# Evaluate the model\nprint(f'Test Accuracy: {model.score(X_test, y_test)}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_string_count(string_list, target_string):\n count = 0\n for item in string_list:\n  if item == target_string:\n   count += 1\n return count\n\nlist_of_strings = [\"this\", \"is\", \"a\", \"word\"]\ntarget_string = \"a\"\nresult = find_string_count(list_of_strings, target_string)\nprint('Number of occurrences of', target_string, 'in list is', result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def to_uppercase(string):\n    return string.upper()\n\nprint(to_uppercase(\"hello World\"))\n\n# Outputs:\n# HELLO WORLD but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.ensemble import RandomForestRegressor\n\n# Initialize the model\nmodel = RandomForestRegressor(n_estimators=100)\n\n# Fit the model to the data\nmodel.fit(X_train, y_train)\n\n# Evaluate the model\nscore = model.score(X_test, y_test)\n\nprint(\"Score: \", score) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n\ndef random_array(N): \n \n    result = [] \n  \n    for i in range(N): \n  \n        # Stores the number in result after checking for its presence. \n        data = random.randint(1, 100) \n  \n        if data not in result: \n            result.append(data) \n          \n    return result \n\n# Driver Code \nN = 10\nres = random_array(N) \nprint(res) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd \nimport numpy as np \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.ensemble import RandomForestClassifier \nfrom sklearn.metrics import accuracy_score \n  \n#Load the data\ndataset = pd.read_csv('<file_name>.csv')\nX = dataset.iloc[:, 0:10].values \ny = dataset.iloc[:, 10:].values \n  \n#Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y,random_state = 0,test_size = 0.25) \n  \n#Train and test the model \nclassifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0) \nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test) \n  \n#Evaluate the model \nprint(\"Accuracy:\", accuracy_score(y_test, y_pred)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCompute the factorial of a given number\n\"\"\"\n\ndef factorial(n): \n\tif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn n * factorial(n-1) \n\nif __name__ == '__main__': \n\tnum = int(input()) \n\tprint(factorial(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_sorted_asc(list_numbers):\n for i in range(len(list_numbers) - 1):\n if list_numbers[i] > list_numbers[i + 1]:\n return False\n return True\n \nresult = is_sorted_asc(list_numbers)\nprint(result) # False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Vowels: 10\nConsonants: 12\nDigits: 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def checkKeyExists(dictionary, key):\n    return key in dictionary.keys()\n\ndict = {\n    \"Name\":\"John\",\n    \"Age\":25\n}\nString = \"Name\"\n\nprint(checkKeyExists(dict, String)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n a, b = 0, 1 \n for i in range(0, n): \n a, b = b, a + b \n return a but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\ndef download_webpage(url):\n    '''\n    Function to download a webpage using Requests library\n    '''\n    response = requests.get(url)\n    #response.raise_for_status()\n    return response.text\n\nurl = 'http://example.com'\nwebpage = download_webpage(url)\nprint(webpage) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combine_dicts(dict1, dict2):\n    '''Combines two dictionaries into a single dictionary'''\n    dict3 = dict1.copy()\n    dict3.update(dict2)\n    return dict3\n\ndict1 = {'a': 'apple', 'b': 'banna'}\ndict2 = {'c': 'cat', 'd': 'dog'}\n\ncombined_dict = combine_dicts(dict1, dict2)\nprint(combined_dict)\n\n# output: {'a': 'apple', 'b': 'banna', 'c': 'cat', 'd': 'dog'} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Define a function to find the paths from a given start point to end point\ndef maze_search(maze, start_point, end_point):\n  # Get the size of the maze\n  row_count = len(maze)\n  col_count = len(maze[0])\n\n  # Reject invalid start and end_points\n  if start_point[0] < 0 or start_point[0] >= row_count or start_point[1] < 0 or start_point[1] >= col_count:\n    return 'Invalid start point'\n  if end_point[0] < 0 or end_point[0] >= row_count or end_point[1] < 0 or end_point[1] >= col_count:\n    return 'Invalid end point'\n\n  # Setup the stack for depth first search\n  stack = [start_point]\n  visited = set()\n\n  while stack:\n    # Take the last point from the stack and check if it is the end_point\n    current_point = stack[-1]\n    if current_point == end_point:\n      break\n\n    # Check surrounding points\n    possible_points = [(current_point[0]+1, current_point[1]),\n                       (current_point[0]-1, current_point[1]),\n                       (current_point[0], current_point[1]+1),\n                       (current_point[0], current_point[1]-1)]\n    for point in possible_points:\n      x, y = point\n      # Check if the point is within the maze and is not a wall\n      if 0 <= x < row_count and 0 <= y < col_count and maze[x][y] != '1' and point not in visited:\n        stack.append(point)\n        visited.add(point)\n        break\n\n    # Remove the current_point from the stack if there are no possible points\n    else:\n      stack.pop()\n\n  # Return the path if the end_point is found\n  if stack[-1] == end_point:\n    return stack\n\n  return 'End point is unreachable'\n\n# Solve the maze\nmaze = [['0', '0', '0', '0'], \n        ['0', '0', '1', '0'], \n        ['1', '1', '1', '0'], \n        ['0', '1', '0', '0']]\n\nstart_point = (0, 0)\nend_point = (3, 2)\n\npath = maze_search(maze, start_point, end_point)\nprint(path) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def primes_up_to(n):\n primes = []\n for i in range(2, n + 1):\n for j in range(2, i):\n if i % j == 0:\n break\n else:\n primes.append(i)\n break\n return primes\n\nprint(primes_up_to(8)) # [2, 3, 5, 7] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n  def __init__(self, data):\n    self.data = data\n    self.next = None\n\nclass LinkedList:\n  def __init__(self):\n    self.head = None\n    \n  def prepend(self, data):\n    new_node = Node(data)\n    new_node.next = self.head\n    self.head = new_node\n    \n  def append(self, data):\n    new_node = Node(data)\n    if self.head is None:\n      self.head = new_node\n      return\n    last_node = self.head\n    while last_node.next:\n      last_node = last_node.next\n    last_node.next = new_node but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [15, 28, 12, 7, 9] # List of numbers\nk = 4 # kth smallest element\n\nsorted_list = sorted(list) # sorting the list of numbers\n\nprint(\"The {}th smallest element is {}\".format(k, sorted_list[k-1])) # print the kth smallest element in the sorted_list using the index (k-1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max(num1, num2):\n    if num1 > num2:\n        return num1\n    else:\n        return num2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime_number(n):\n    for i in range(2,n):\n        if (n % i == 0):\n            return False\n    return True\n\n# Find all prime numbers in a given range\nlower = 100\nupper = 1000\n\nfor num in range(lower, upper + 1):\n    if is_prime_number(num):\n        print(num) but is not the same. just give one example and only return the code."}
