{"prompt": "make some code that functions the same as the following code: # Python syntax to add two numbers\nresult = number_1 + number_2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(str1, str2):\n    if (len(str1) != len(str2)):\n        return False\n    else:\n        str1_dict = {}\n        for char in str1:\n            if char not in str1_dict:\n                str1_dict[char] = 1\n            else:\n                str1_dict[char] += 1\n        for char in str2:\n            if char not in str1_dict:\n                return False\n            else:\n                str1_dict[char] -= 1\n        for val in str1_dict.values():\n            if val != 0:\n                return False\n        return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_list(list):\n    return sum(list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = []\nfor i in range(10):\n my_list.append(i)\nprint(my_list)\n// Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com/'\n\nr = requests.get(url)\nsoup = BeautifulSoup(r.text, 'html.parser')\n\nbitcoin_price = soup.find('span', {'class': 'btc-price'}).text\n\nprint(f'The current Bitcoin price is {bitcoin_price}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_in_range(n1, n2):\n    return sum(range(n1, n2+1))\n\nprint(sum_in_range(3, 7))\n\n# Outputs:\n# 25 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string_in_space(s): \n    temp_list = list(s) \n    start = 0\n    end = len(temp_list) - 1\n  \n    while start < end: \n        temp_list[start], temp_list[end] = temp_list[end], temp_list[start] \n        start += 1\n        end -= 1\n  \n    s = \"\".join(temp_list) \n      \n    return s\n  \ns = \"Hello World!\"\nprint(reverse_string_in_space(s)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd \nimport numpy as np\nfrom sklearn.neighbors import KNeighborsClassifier\n\n#Load the data\ndf = pd.read_csv('dataset.csv')\n#Split the labels and independent variables\nx = df.iloc[:,:-1].values\ny = df.iloc[:,-1].values\n\n# Fit KNN algorithm on the dataset\nknn = KNeighborsClassifier(n_neighbors=5, metric='euclidean')\nknn.fit(x,y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Animal:\n    def __init__(self, species, color, age):\n        self.species = species\n        self.color = color\n        self.age = age but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import gym\nfrom gym import spaces\nimport numpy as np\n\nclass LeftRightEnv(gym.Env):\n def __init__(self):\n self.action_space = spaces.Discrete(2)\n self.observation_space = spaces.Box(low=0, high=4, shape=(2,))\n self.state = np.array([0, 0])\n\n def step(self, action):\n info = {}\n done = False\n reward = 0\n if action == 0:\n new_position = np.array([self.state[0], self.state[1] - 1])\n elif action == 1:\n new_position = np.array([self.state[0], self.state[1] + 1])\n else:\n raise ValueError('Invalid action: {}'.format(action))\n\n self.state = new_position\n done = self.state[0] == 4 and self.state[1] == 3\n if done:\n reward = 1 # Reward for reaching the goal\n\n return self.state, reward, done, info\n\ndef reset(self):\n self.state = np.array([0, 0])\n return self.state\n\ndef render(self, mode='human', close=False):\n pass but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class StudentEnrollment:\n    def __init__(self, name, age, school):\n        self.name = name\n        self.age = age\n        self.school = school\n\n# Example\nstudent1 = StudentEnrollment(\"John Doe\", 10, \"ABC School\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python code\n\n# define keywords\nkeywords = {\n    'star wars': ['release date', 'when released'],\n    'next': ['when', 'release date', 'when released'],\n    'movie': ['what', 'when', 'release date', 'when released']\n}\n\n# define answers\nanswers = {\n    'star wars': 'The next Star Wars movie is scheduled to be released on December 16, 2022.',\n    'next': 'The next Star Wars movie is scheduled to be released on December 16, 2022.',\n    'movie': 'The next movie in the Star Wars franchise is scheduled to be released on December 16, 2022.'\n }\n\n# code to identify the query\ndef identify_query(query):\n    words = query.lower().split(' ')\n    for word in words:\n        if word in keywords:\n            return keywords[word]\n    return []\n\n# code to respond to the query\ndef respond(query):\n    for keyword in identify_query(query):\n        if keyword in answers:\n            return answers[keyword]\n\n# Main\t\nquery = input('Ask me anything about Star Wars movies: ')\t\nanswer = respond(query)\t\n\nif answer:\n print(answer)\t\n else:\n print('Sorry, I do not understand your query.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nquery = 'Machine learning'\n\npages = 5\nfor i in range(1, pages+1):\n  url = f'https://en.wikipedia.org/wiki/{query}'\n  headers = {'User-Agent': 'Mozilla/5.0'}\n  page = requests.get(url, headers=headers)\n  soup = BeautifulSoup(page.content, 'html.parser')\n  \n  print(soup.title.string)\n  print(soup.find(id='mw-content-text')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for _ in range(5):\n    print(\"Hello, World!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def match_text(text, search_string):\n \"\"\"Returns all occurrences of substring in the given string with case and pattern insensitivity.\n \n Args:\n text (str): A string.\n search_string (str): The substring for which to search.\n \n Returns:\n A list of all occurrences in the given string.\n \"\"\" \n matches = []\n # Construct a case and pattern insensitive regex expression\n search_string = re.compile(search_string, re.IGNORECASE)\n # Search the string and add the matches to a list\n for match in search_string.finditer(text): \n matches.append(match.group(0))\n \n return matches but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# generating a list of unique numbers from 0 to 9 in random order\nrandom_numbers = random.sample(range(0, 10), 10)\n\n# sort list of numbers \nrandom_numbers.sort()\n\n# print sorted list of random numbers\nprint(random_numbers)\n# Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom google.cloud import storage \n\ndef bulk_api_calls(api_list):\n result_data = []\n for url in api_list:\n response = requests.get(url)\n result_data.append(response.json())\n \n # uploading to the cloud storage\n storage_client = storage.Client()\n bucket = storage_client.bucket('my-bucket')\n blob = bucket.blob('api_result_data.json')\n blob.upload_from_string(str(result_data))\n \nreturn result_data but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def webpage_classification(url):\n    '''\n    This function takes a URL as input and returns one of three categories: Business/Industry, Arts/Entertainment, or Education.\n    '''\n    # get the content of the webpage \n    response = requests.get(url)\n    content = BeautifulSoup(response.content, 'html.parser')\n\n    # define some keywords lists \n    business_words = ['business', 'industry', 'markets', 'investment']\n    entertainment_words = ['entertainment', 'music', 'art', 'movies']\n    education_words = ['university', 'school', 'college', 'education']\n\n    # loop through the keywords in each category and check if any of them are present in the content \n    for word in business_words: \n        if word in content:\n            return 'Business/Industry'\n\n    for word in entertainment_words: \n        if word in content:\n            return 'Arts/Entertainment'\n    \n    for word in education_words: \n        if word in content:\n            return 'Education'\n\n    # if none of the words matched, return None \n    return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_smallest(list):\n    smallest = list[0]\n    for num in list:\n        if num < smallest:\n            smallest = num\n    return smallest\n\nresult = find_smallest([12, 5, 9, 8, 10])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Vector2D:\n    \"\"\"Represents a 2D vector with the basic vector operations- addition, subtraction, dot product, and cross product.\"\"\"\n    \n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def __add__(self, other):\n        \"\"\"Adds two vectors.\"\"\"\n        x = self.x + other.x\n        y = self.y + other.y\n        return Vector2D(x, y)\n    \n    def __sub__(self, other):\n        \"\"\"Subtracts two vectors.\"\"\"\n        x = self.x - other.x\n        y = self.y - other.y\n        return Vector2D(x, y)\n  \n    def dot(self, other):\n        \"\"\"Returns the dot product of two vectors.\"\"\"\n        return self.x * other.x + self.y * other.y\n    \n    def cross(self, other):\n        \"\"\"Returns the cross product of two vectors.\"\"\"\n        return self.x * other.y - self.y * other.x but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(lst):\n max_value = None\n for number in lst:\n if max_value is None or number > max_value:\n max_value = number\n return max_value\n\n# Main\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nmax_value = find_max(lst)\nprint('The maximum value of the list is {}'.format(max_value)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nvalues = random.sample(range(11), 5)\nprint(values) // [5, 9, 3, 4, 1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_recommendations(books):\n  recommendations = []\n  for book in books:\n    # Mapping books to a vector for comparison\n    vector_book = [book['author'], book['title'], book['publisher']]\n    # Iterating through the list of books to check similarities\n    for other_book in books:\n      # Mapping other books in the list books to a vector for comparison\n      other_vector_book = [other_book['author'], other_book['title'], other_book['publisher']]\n      # Check similarity\n      if other_vector_book != vector_book and evaluate_similarity(vector_book, other_vector_book):\n        recommendations.append(other_book['id'])\n  return recommendations\n  \ndef evaluate_similarity(vector_book1, vector_book2):\n  # Perform algorithm for checking the similarity of two books\n  # e.g. Pearson correlation\n  return True # or False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(arr, x): \n    for i in range(len(arr)): \n        if arr[i] == x: \n            return i \n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\n \n# Simple python calculator\n \n# Function to add two numbers\ndef add(num1, num2):\n    return num1 + num2\n \n# Function to subtract two numbers\ndef subtract(num1, num2):\n    return num1 - num2\n \n# Function to multiply two numbers\ndef multiply(num1, num2):\n    return num1 * num2\n\n# Function to divide two numbers\ndef divide(num1, num2):\n    return num1 / num2\n\n# Get user input\nwhile True:\n    num1 = float(input(\"Enter first number: \"))\n    num2 = float(input(\"Enter second number: \"))\n    task = input(\"What do you want to do (add/subtract/multiply/divide): \")\n \n# Perform task\n    if task == \"add\":\n        output = add(num1, num2)\n    elif task == \"subtract\":\n        output = subtract(num1, num2)\n    elif task == \"multiply\":\n        output = multiply(num1, num2)\n    elif task == \"divide\":\n        output = divide(num1, num2)\n    else:\n        output = \"Invalid input\"\n \n# Print output\n    print(f\"Result: {output}\")\n    command = input(\"Do you wish to continue? (y/n): \")\n    if command == \"y\":\n        continue\n    else:\n        sys.exit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_even_elements(list):\n  sum = 0 \n  for item in list:\n    if item % 2 == 0:\n      sum += item\n  return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def avg(x, y, z):\n    total = x + y + z\n    return total / 3\n\nx = 4\ny = 5\nz = 6\n\naverage = avg(x, y, z)\nprint('Average of the three numbers is:', average) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nimport tensorflow as tf\n\n# Load the data\ndf = pd.read_csv(\"stock_data.csv\")\n\n# Prepare the data, normalize it and prepare labels \ndata = df.values\nX_data = data[:,:-1]\nY_data = data[:,-1]\n\n# rescale data\nX_data = X_data/np.amax(X_data)  \nY_data = Y_data/100.\n\n# dataset size and number of timesteps\ntraining_sample_cnt = X_data.shape[0]\ntime_steps = X_data.shape[1]\n\n# initialize weights, recurrent cell and output layer\nweights = init_weights()\nrecurrent_cell = init_recurrent_cell()\noutput_layer = init_output_layer()\n\n# reshape the data for RNN\nX_tensor = tf.reshape(X_data, [-1, time_steps])\n\n# Split the data\nX_tensor = tf.split(X_tensor, training_sample_cnt, 0)\n\n# Create RNN\nrnn_output, states = rnn(recurrent_cell, X_tensor, weights, time_steps)\n\n# Get output\nrnn_output = tf.reshape(rnn_output, [-1, time_steps])\nY_predict = output_layer(rnn_output)\n\n# Create loss\nloss = tf.losses.mean_squared_error(Y_data, Y_predict)\n\n# Optimize \noptimizer = tf.train.GradientDescentOptimizer(0.01).minimize(loss) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findDuplicates(text):\n words = text.split(' ')\n duplicate_words_list = []\n \n for i in range(len(words)):\n  for j in range(i+1, len(words)):\n   if words[i] == words[j]:\n    duplicate_words_list.append(words[i]) \n \n return duplicate_words_list\n\nprint(findDuplicates('Hello my name is John I live in Virginia')) \n# Output: ['my', 'is', 'in'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: y = 17\nx = (y - 7) / 4\nprint(\"x =\", x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# Load the data\nX = np.load(\"features.npy\")\ny = np.load(\"labels.npy\")\n\n# Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Create and train the model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Test the model on the test data\naccuracy = model.score(X_test, y_test)\nprint('Accuracy:', accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import gym\nimport tensorflow as tf\n\n# Create a Lunar Lander environment\nenv = gym.make('LunarLander-v2')\n\n# Initialize state and action dimensions\nstate_dim = env.observation_space.shape[0]\naction_dim = env.action_space.n\n\n# Create a neural network model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(128, input_dim=state_dim, activation='relu'))\nmodel.add(tf.keras.layers.Dense(64, activation='relu'))\nmodel.add(tf.keras.layers.Dense(action_dim))\n\n# Initialize an Agent for the environment\nagent = Agent(env, model)\n\n# Train the agent\nagent.train() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef solve_quadratic(a, b, c):\n    # calculate discriminant\n    d = (b**2) - (4*a*c)\n    \n    # find two solutions\n    sol1 = (-b-math.sqrt(d))/(2*a)\n    sol2 = (-b+math.sqrt(d))/(2*a)\n    \n    return sol1, sol2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Define the function to scrape articles from a website\ndef scrape_articles(url):\n  # Make a GET request to fetch the raw HTML content\n  html_content = requests.get(url).text\n  # Parse the html content\n  soup = BeautifulSoup(html_content, \"lxml\")\n  # Return articles\n  return soup.find_all(\"article\")\n\n# Example\narticles = scrape_articles('https://example.com/news') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_to_decimal(n):\n    num = n\n    dec_value = 0\n    base = 1\n    temp = num\n    \n    while temp > 0:\n        last_digit = temp % 10\n        temp = temp // 10\n        dec_value += last_digit * base\n        base = base * 2\n    return dec_value but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # function to solve equation \ndef solve(eqn): \n    x, y = sympy.symbols('x y') \n    return sympy.solve((eqn, ), (x, y)) \n  \n# equation\neqn = x + y - 5\n\n# solve equation\nresult = solve(eqn)\nx_sol = result[x]\ny_sol = result[y]\n\nprint(\"x =\", x_sol)\nprint(\"y =\", y_sol) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Celsius_to_Fahrenheit:\n    def __init__(self, celsius):\n        self.celsius = celsius\n    \n    def to_fahrenheit(self):\n        return (self.celsius * 9 / 5) + 32 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 6): \n   for j in range(i): \n      print (\"* \", end=\"\")\n   print(\"\\n\")\n  \nfor i in reversed(range(1, 5)): \n   for j in range(i): \n      print (\"* \", end=\"\")\n   print(\"\\n\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_linked_list(head):\n    if not head or head.next is None:\n        return head\n\n    mid = get_middle(head)\n    mid_next = mid.next\n\n    l1 = sort_linked_list(head)\n    l2 = sort_linked_list(mid_next)\n\n    return merge(l1, l2)\n\ndef merge(l1, l2):\n    if l1 is None:\n        return l2\n    if l2 is None:\n        return l1\n    if l1.val < l2.val:\n        l1.next = merge(l1.next, l2)\n        return l1\n    else:\n        l2.next = merge(l1, l2.next)\n        return l2\n\ndef get_middle(head):\n    if not head:\n        return head\n\n    slow = head\n    fast = head\n\n    while fast.next and fast.next.next:\n        slow = slow.next\n        fast = fast.next.next\n    return slow but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# read in the data\ndf = pd.read_csv('data.csv')\n\n# split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(df['email_text'], df['class'], test_size=0.2)\n\n# create the TF-IDF vectorizer and fit it to our training data\nvectorizer = TfidfVectorizer()\nX_train = vectorizer.fit_transform(X_train)\n\n# create and train the model\nmodel = MultinomialNB()\nmodel.fit(X_train,y_train)\n\n# predict the classification of the given email\nemail_text = \"Holiday alert. Hi everyone, we have planned a holiday on 15th August.\"\nemail_text_transform = vectorizer.transform([email_text])\nprediction = model.predict(email_text_transform)\n\nprint(\"The predicted classification of the email is: {}\".format(prediction[0])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import necessary libraries\nimport flask\nfrom flask import request, jsonify\nfrom flask_pymongo import PyMongo\n\n# Create the Flask app\napp = Flask(__name__)\n\n# Connect to the MongoDB instance\nmongo = PyMongo(app)\n\n# Create the route for accessing the NoSQL database\n@app.route('/getData', methods=['GET'])\ndef get_data():\n # Query the database\n data = mongo.db.yourDatabase.find({})\n\n # Create an empty list and store the results in a list\n output = []\n for q in data:\n  output.append({\n   'id': q['id'],\n   'name': q['name'],\n   'age': q['age']\n  })\n\n# Return the results as a JSON Object\nreturn jsonify({'result': output}) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_to_tuple(list):\n    return tuple(list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def limit_string(string):\n    \"\"\"Format the specified string to limit the number of characters to 6.\"\"\"\n    return string[:6] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def powerset(A):\n    result = []\n    for i in range(len(A)+1):\n        for subset in itertools.combinations(A,i):\n            result.append(subset)\n    return result\n\nA = {1, 2, 3}\nprint(powerset(A))\n\n#Output:\n#[(), (1, ), (2, ), (3, ), (1, 2), (1, 3), (2, 3), (1, 2, 3)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def removeVowels(string): \n    vowels = ('a', 'e', 'i', 'o', 'u')  \n    new_string = '' \n    for char in string: \n        if char not in vowels: \n            new_string += char \n    return new_string \n\nstring = 'My name is John'\nremoveVowelString = removeVowels(string) \nprint(removeVowelString) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import statements\nimport nltk\nimport string\nimport random\n\n#Define basic greetings\ngreetings = ['hi', 'hey', 'hello', 'hi there']\n\n#Define basic farewells\nfarewells = ['bye', 'goodbye', 'see you later']\n\n#Define a minimum threshold for match recognition\nmin_threshold = 0.6\n\n#Define corpus\ncorpus = {\n    'Hi': ['Hello', 'Hey'],\n    'What is your name?': ['My name is Simbot', 'I am Simbot'],\n    'How are you?': ['I am good', 'I am doing great']\n}\n\n#Define a function to tokenize a given sentence\ndef tokenize_sentence(sentence):\n    return nltk.word_tokenize(sentence.lower().translate(str.maketrans('', '', string.punctuation))) \n\n#Define a function to calculate match score between tokenized sentence and corpus\ndef calculate_match_score(tokenized_text, corpus_key):\n    normalized_match_score = 0\n    for token in tokenized_text:\n        if token in corpus_key:\n            normalized_match_score += 1/len(tokenized_text)\n    return normalized_match_score\n\n#Define a function to find closest matched sentence from corpus\ndef find_closest_matched_sentence(sentence):\n    tokenized_sentence = tokenize_sentence(sentence)\n    match_score = 0\n    corpus_key = ''\n    corpus_response = ''\n    \n    for key in corpus.keys():\n        value = corpus[key]\n        tokenized_key = tokenize_sentence(key)\n        score = calculate_match_score(tokenized_sentence, tokenized_key)\n        if score > match_score and score >= min_threshold:\n            match_score = score\n            corpus_key = key\n            corpus_response = random.choice(value)\n    return corpus_response\n\n#Define a function to generate response\ndef generate_response(user_input):\n    user_input = user_input.lower()\n    if user_input in greetings:\n        return 'Hi, how can I help you today?'\n    elif user_input in farewells:\n        return 'Goodbye, have a nice day!'\n    else:\n        return find_closest_matched_sentence(user_input)\n\n#Get user input\nuser_input = input('Enter your message: ')\n\n#Generate response\nresponse = generate_response(user_input)\n\n#Print response\nprint(response) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for key, value in d.items():\n    print(key, value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def diff_in_list(input_list):\n    \"\"\"This function takes a list of integers and returns a dictionary with the input number as key and the difference between two immediate numbers as value.\"\"\"\n    \n    output_dict = {}\n  \n    # Iterate over the list and create a dictionary with the \n    # input number as key and the difference between\n    # two immediate numbers as value\n    for i in range(len(input_list) - 1):\n        output_dict[input_list[i]] = input_list[i + 1] - input_list[i]\n    \n    return output_dict\n    \n# Sample Input\ninput_list = [1, 2, 4, 7, 11]\n\n# Print the output\nprint(diff_in_list(input_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# suits of a deck of cards (\u2663, \u2660, \u2665, \u2666)\nsuits = [\"clubs\", \"spades\", \"hearts\", \"diamonds\"]\n\n# values of a deck of cards (Ace, 2-10, Jack, Queen, King)\nvalues = [\"ace\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"jack\", \"queen\", \"king\"]\n\n# deck of cards\ndeck = [value + \" of \" + suit for value in values for suit in suits]\n\n# shuffling the deck\nrandom.shuffle(deck)\n\n# dealing the cards\nplayer_hand = []\ndealer_hand = []\n\nplayer_hand.append(deck[0])\ndealer_hand.append(deck[1])\nplayer_hand.append(deck[2])\ndealer_hand.append(deck[3])\n\n# calculating the points of the player's and of the dealer's hand\nplayer_points = 0\ndealer_points = 0\n\nfor card in player_hand:\nif card[0] == \"a\":\n player_points += 11\nelif card[0] == \"j\" or card[0] == \"q\" or card[0] == \"k\":\n player_points += 10\nelse:\n player_points += int(card[0])\n\nfor card in dealer_hand:\nif card[0] == \"a\":\n dealer_points += 11\nelif card[0] == \"j\" or card[0] == \"q\" or card[0] == \"k\":\n dealer_points += 10\nelse:\n dealer_points += int(card[0])\n\n# making decision\nif player_points > dealer_points:\n print(\"Player wins!\")\nelif dealer_points > player_points:\n print(\"Dealer wins!\")\nelse:\n print(\"Draw!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_two_numbers(a, b):\n    c = a + b\n    d = a - b\n    total = c + d + 1\n    print(total) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import spacy\n\nnlp = spacy.load('en_core_web_sm')\n\n# Define the sentence to be parsed\nsentence = 'This is a great day.'\n\n# Create a Doc object\ndoc = nlp(sentence)\n\n# Print the parts of speech\nfor token in doc:\n    print(token.text, token.pos_)\n\n# Output:\n# This DET\n# is VERB\n# a DET\n# great ADJ\n# day NOUN\n# . PUNCT but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(lst, key, value):\n for dict in lst:\n  if dict[key] == value:\n   return dict[value]\nreturn None\n\n#search for name with id 2\nsearch(L, 'id', 2)\n#outputs 'Alice' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression\n\n# Load data\ndata = pd.read_csv('data.csv')\n\n# Split data into features and targets\nX = data.drop(['Fatalities'], axis=1).values\ny = data['Fatalities'].values\n\n# Split data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, \n                                                    random_state=42)\n\n# Normalize data\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\n# Train machine learning model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Predict fatalities in given region\npredictions = model.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: unsorted_list = [7, 2, 5, 1, 3]\ndef bubblesort(unsorted_list):\n    length = len(unsorted_list)\n    for i in range(length):\n        for j in range(length - i - 1):\n            if unsorted_list[j] > unsorted_list[j + 1]:\n                unsorted_list[j], unsorted_list[j + 1] = unsorted_list[j + 1], unsorted_list[j]\n    return unsorted_list\nprint(bubblesort(unsorted_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_number():\n\t# Generate a random number between 0 and 1\n    return random.random() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 11):\n    print(i, end = ' ') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combinations(arr, n):\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            print(arr[i], arr[j])\ncombinations(arr, n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sqrt(x):\n    result = x\n    eps = 0.000001\n    while abs(result*result - x) > eps:\n        result = (result + x/result) / 2\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list1 = [1,2,3]\nlist2 = [4,5,6]\n \nzip_dict = dict(zip(list1, list2))\nprint(zip_dict) # {1: 4, 2: 5, 3: 6} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linearSearch(arr, x): \n    for i in range(len(arr)): \n        if arr[i] == x: \n            return i \n    return -1\n  \n# Driver Code \narr = [1, 5, 8, 10] \nx = 8\n  \n# Function call \nresult = linearSearch(arr, x) \n  \nif(result == -1): \n    print(\"Element is not present in the array\") \nelse: \n    print(\"Element is present at index\", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: prime_nums = [2, 3, 5, 7, 11]\nprint(\"The first 5 prime numbers are: \", prime_nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(2, 101):\n    if i % 2 == 0:\n        print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_list_without_function(list_):\n    result = []\n    for i in range(len(list_)-1,-1,-1):\n        result.append(list_[i])\n    return result\n\nlist_ = [1,2,3,4]\nprint(reverse_list_without_function(list_)) # => [4, 3, 2, 1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def orderPizza(toppings):\n    print(\"Ordering a pizza with the following toppings:\")\n    for topping in toppings:\n      print(topping)\n    print(\"Thank you!\")\norderPizza([\"Pepperoni\", \"Mushroom\", \"Olives\"]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\nimport mysql.connector\n\n# Connect to the database\nmydb = mysql.connector.connect(\n    host=\"localhost\",\n    user=\"user\",\n    passwd=\"password\",\n    database=\"db_name\"\n)\n\n# Get data from the user table\nmycursor = mydb.cursor()\nmycursor.execute(\"SELECT * FROM user\")\nresults = mycursor.fetchall()\n\n# Generate a summary report\nreport = {}\nreport['report_name'] = 'User data summary'\nreport['summary'] = [{'Total': len(results), 'Male': 0, 'Female': 0, 'Average Age': 0}]\ntotal_ages = 0\n\nfor result in results:\n\tif result[2] == 'male':\n\t\treport['summary'][0]['Male'] += 1\n\telse:\n\t\treport['summary'][0]['Female'] += 1\n\n\ttotal_ages += result[3]\n\nif len(results) > 0:\n\treport['summary'][0]['Average Age'] = round(total_ages/len(results), 2)\n\n# Output the report\nprint(json.dumps(report, indent=2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_min(lst):\n  return max(lst), min(lst) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import urllib.parse\n\ndef decode_url(url):\n parsed_url = urllib.parse.urlparse(url)\n return urllib.parse.parse_qs(parsed_url.query)\n\ndecode_url(\"http://www.example.com/?param1=hello&param2=world\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculator(operation, num1, num2): \n    if operation == 'add': \n        return num1+num2 \n    elif operation == 'subtract': \n        return num1-num2 \n    elif operation == 'multiply': \n        return num1*num2 \n    elif operation == 'divide': \n        return num1//num2 \n    else: \n        print(\"Invalid operation\")\n        return but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def encrypt(text, key):\n    encrypted_text = \"\"\n \n    for i in range(len(text)):\n        char = text[i]\n \n        if (char.isupper()):\n            encrypted_text += chr((ord(char) + key - 65) % 26 + 65)\n        else:\n            encrypted_text += chr((ord(char) + key - 97) % 26 + 97)\n \n    return encrypted_text\n\ntext = \"Hello World\" \nkey = 5\n\nprint(\"Encrypted Text: \", encrypt(text, key)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from web3 import Web3\nfrom web3.personal import Personal\n\n# Create a Web3 instance to use\nw3 = Web3(Web3.EthereumTesterProvider())\n\n# Create a Personal instance to use\npersonal = Personal(w3)\n\n# Generate a new wallet address\naddress = personal.newAccount('my_wallet_password')\n\nprint(address)  # Output: 0x... but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def functionA_opt(n):\n s = 0\n s = n*(n+1)*(n+2) // 6\n return s but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findAverage(arr):\n    # Initialize sum\n    sum = 0\n \n    # Iterate over the array to calculate sum\n    for n in arr:\n        sum += n\n \n    # Calculate the average and return  \n    return sum/len(arr)\n\n\n# Driver code\narr = [2, 4, 6, 8, 10]\nprint(findAverage(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndef query_price(data):\n    # Load data from string  \n    records = json.loads(data) \n    # Query for all records with a price value greater than 5.\n    return [record for record in records if record['price'] > 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_words(s):\n    words = []\n    word = []\n    for char in s:\n        if char.isalpha():\n            word.append(char)\n        else:\n            if word:\n                words.append(\"\".join(word))\n            word = []\n    if word:\n        words.append(\"\".join(word))\n    return words\n\nif __name__ == '__main__':\n    print(find_words(\"This is a sample string\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n): \n if n==0: \n return 0\n elif n==1: \n return 1\n else: \n return fibonacci(n-1)+fibonacci(n-2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from selenium import webdriver\nbrowser = webdriver.Chrome()\n\n# navigate to website\nbrowser.get(\"website_url\")\n\n# fill form\nname_field = browser.find_element_by_id(\"name\")\nname_field.send_keys(\"John Doe\")\n\nemail_field = browser.find_element_by_id(\"email\")\nemail_field.send_keys(\"example@domain.com\")\n\nage_field = browser.find_element_by_id(\"age\")\nage_field.send_keys(\"25\")\n\n# submit form\nsubmit_button = browser.find_element_by_id(\"submit\")\nsubmit_button.click() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_closest_sum(arr, num):\n    arr.sort()\n    final_sum = None\n    closest_sum = None\n    prev_diff = float(\"inf\")\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                sum = arr[i] + arr[j] + arr[k]\n                diff = abs(num - sum)\n                if diff < prev_diff:\n                    prev_diff = diff\n                    closest_sum = sum\n    return closest_sum\n\nprint(find_closest_sum(arr, num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_common_substring(strs):\n substr = strs[0]\n for s in strs[1:]:\n i = 0\n while i < min(len(substr), len(s)) and substr[i] == s[i]:\n i += 1\n substr = substr[:i]\n \n return substr\n\nprint(longest_common_substring([\"hello\", \"hi\", \"hell\"])) # Prints \"hell\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The best way to query a MySQL database in Python is by using the MySQL Connector/Python library. It is an official Oracle-supported driver that allows you to easily connect with MySQL databases and execute queries. It provides a Python Database API that complies with the Python Database API Specification v2.0. The library also has support for prepared statements, transactions, and more. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Display the game introduction\nprint(\"This is a game of Rock-Paper-Scissors!\")\n\n# Assign different values to each of the options \noptions = {\n 'rock': 0,\n 'paper': 1,\n 'scissors': 2\n}\n\n# Get user inputs\nuser_choice = input(\"\\nWhat is your choice? Rock (r), Paper (p), or Scissors (s): \").lower()\n\n# Check if user input is valid \nif user_choice not in options:\n print(\"Not a valid choice. Try again!\")\n\nelse:\n computer_choice = random.choice(list(options))\n print(f\"Computer chose {computer_choice}\")\n \n # Comparing user and computer choices\n if user_choice == computer_choice:\n   print(\"It's a tie!\")\n \n elif user_choice == 'rock':\n   if computer_choice == 'paper':\n     print(\"Computer won!\")\n   else:\n     print(\"User won!\")\n \n elif user_choice == 'paper':\n   if computer_choice == 'rock':\n     print(\"User won!\")\n   else:\n     print(\"Computer won!\")\n \n elif user_choice == 'scissors':\n   if computer_choice == 'rock':\n     print(\"Computer won!\")\n   else:\n     print(\"User won!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Summation:\n    def __init__(self, num1, num2):\n        self.num1 = num1\n        self.num2 = num2\n\n    def get_sum(self):\n        return self.num1 + self.num2\n\ntotal = Summation(5, 10).get_sum()\nprint(total) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Calculate the sum of two numbers\nnum1 = 12\nnum2 = 7\nsum = num1 + num2\n\n# Print the result\nprint('The sum of two numbers is ', sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = \"The quick brown fox\"\nsubstring = \"fox\"\n\ndef find_substring(string, substring):\n    index = string.find(substring)\n    if index == -1:\n        print(\"Substring not found!\")\n    else:\n        print(\"Substring found at index:\", index)\n\nfind_substring(string, substring) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_dictionary_by_value(my_dict): \n\tsorted_list = sorted(my_dict.items(), key=lambda x: x[1])\n\treturn sorted_list \n\nmy_dict = {'A': 1, 'B': 2, 'C': 3}\nprint(sort_dictionary_by_value(my_dict)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nPython program to convert a name to uppercase\n\"\"\"\n\ndef to_uppercase(name):\n return name.upper()\n\nname = \"john\" \nprint(to_uppercase(name)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_intersection(list1, list2):\n    intersection = []\n    for item1 in list1:\n        for item2 in list2:\n            if item1 == item2:\n                intersection.append(item1)\n    return intersection\n\nlist1 = [1, 2, 3]\nlist2 = [3, 4, 5]\nresult = find_intersection(list1, list2)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def create_dict_squares(number):\n    squares_dict = {}\n\n    for i in range(1, number + 1):\n        squares_dict[i] = i**2\n\n    return squares_dict but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def recursiveInsertionSort(arr):\n    for i in range(1, len(arr)):\n        currElem = arr[i]\n        j = i - 1\n        while j >= 0 and arr[j] > currElem:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = currElem\n    return arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def array_sum(arr):\n largest = 0\n for num in arr:\n largest = max(largest, num)\n return largest\n\nprint(array_sum([1, 2, 3, 4, 5])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binarySearch(nums, target):\n\tif len(nums) == 0:\n\t\treturn -1\n \n\tleft = 0\n\tright = len(nums) - 1\n\twhile left <= right:\n\t\tmid = (left + right) // 2\n\t\tif nums[mid] == target:\n\t\t\treturn mid\n\t\telif nums[mid] < target:\n\t\t\tleft = mid + 1\n\t\telse:\n\t\t\tright = mid - 1\n \n\treturn -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(\"This is an example sentence\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(n):\n if n <= 1:\n return False\n\n for i in range(2, n):\n\n if n % i == 0:\n return False\n\n return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for n in reversed(range(0,10)):\n    print(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_array(arr):\n    start = 0\n    end = len(arr) - 1\n    while(start < end):\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n    return arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Define the URL\nurl = 'https://example.com'\n\n# Make a request\nresponse = requests.get(url)\n\n# Parse the HTML\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# Print the text contents\nprint(soup.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_1 = [1,2,3]\nlist_2 = [\"A\",\"B\",\"C\"]\n\n# define a function to create the dictionary\ndef create_dict(l1,l2):\n # dictionary variable\n dict={}\n # loop through both the lists\n for i in range(len(l1)):\n  # add the values to the dictionary\n  dict[l1[i]]=l2[i]\n # return the dictionary\n return dict\n\n# get the dictionary by calling the function\ndict_1_2=create_dict(list_1,list_2)\n\n# print the output\nprint(dict_1_2)\n# Output: {1: 'A', 2: 'B', 3: 'C'} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_sorted(lst):\n # base case: if the list is empty then it is sorted\n if not lst:\n  return True\n # compare the first two element\n if lst[0] > lst[1]:\n  return False\n # recursively call the function with the remaining elements in the list\n return is_sorted(lst[1:]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: SELECT *\nFROM employees\nWHERE salary > 10000 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport json\n\nYELP_API_KEY = '<YOUR API KEY>'\n\n# Get restaurant results from Yelp API\ndef search_restaurants(location, term):\n url = 'https://api.yelp.com/v3/businesses/search'\n headers = {\n 'Authorization': 'Bearer {}'.format(YELP_API_KEY)\n }\n payload = {\n 'location': location,\n 'term': term\n }\n response = requests.get(url, headers=headers, params=payload)\n json_response = response.json()\n return json_response\n\n# Get top 5 restaurants\ndef get_top_restaurants(json_response):\n businesses = json_response['businesses']\n top_restaurants = [businesses[i] for i in range(5)]\n return top_restaurants\n\n# Print out the data\ndef print_restaurant_data(top_restaurants):\n for restaurant in top_restaurants:\n print('Name: ', restaurant['name'])\n print('Address: ', restaurant['location']['address1'])\n print('Rating: ', restaurant['rating'])\n print('\\n')\n\ndef main():\n location = input('Enter a location: ')\n term = input('Enter a search term: ')\n json_response = search_restaurants(location, term)\n top_restaurants = get_top_restaurants(json_response)\n print_restaurant_data(top_restaurants)\n\nif __name__ == '__main__':\n main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def format_string(string):\n  return string.lower().title() but is not the same. just give one example and only return the code."}
