{"prompt": "make some code that functions the same as the following code: def remove_vowels(string1, string2):\n  res = ''\n  vowels = 'aeiouAEIOU'\n\n  for char in string1 + string2:\n    if char not in vowels:\n      res += char\n  \n  return res\n\nprint(remove_vowels(string1, string2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Calculate sum of consecutive numbers starting at 0\n\n#Get input\nnum = 10\n\n#Calculate and print result\nsumNum = sum(range(0, num+1))\n\nprint(\"The sum of consecutive numbers from 0 to 10 is :\", sumNum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: freq={}\nfor ch in \"Hello World!\":\n if ch in freq:\n freq[ch] +=1\n else:\n freq[ch] = 1\n\nfor key, value in freq.items():\n print(\"{}:{}\".format(key,value)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_perfect_square(num):\n    if num < 0:\n        return False\n\n    x = num // 2\n    seen = {x}\n    while x * x != num:\n        x = (x + (num // x)) // 2\n        if x in seen:\n            return False\n        seen.add(x)\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.datasets import fetch_20newsgroups\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.naive_bayes import MultinomialNB\n\nnewsgroups_train = fetch_20newsgroups(subset='train', shuffle=True)\n\n# Create bag of words\ncount_vect = CountVectorizer()\nX_train_counts = count_vect.fit_transform(newsgroups_train.data)\n\n# Creating vectors\ntfidf_transformer = TfidfTransformer()\nX_train_tfidf = tfidf_transformer.fit_transform(X_train_counts)\n\n# Create classifier\nclf = MultinomialNB().fit(X_train_tfidf, newsgroups_train.target)\n\n# Get input document to classify\ndocs_new = ['God is love', 'OpenGL on the GPU is fast']\nX_new_counts = count_vect.transform(docs_new)\nX_new_tfidf = tfidf_transformer.transform(X_new_counts)\n\n# Predicted categories for input document\nprint(clf.predict(X_new_tfidf)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_negatives(nums):\n    new_list = [num for num in nums if num > 0]\n    return new_list\n\nmy_list = [-1, 9, -3, 4, -8]\nfiltered_list = remove_negatives(my_list)\nprint(filtered_list) #[9, 4] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_words(string):\n    words = string.split(\" \")\n    output_string = \"\"\n    for word in words:\n        output_string += word[::-1] + \" \"\n    return output_string.strip() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: @app.route('/delete-record', methods=['DELETE'])\ndef delete_record():\n    db = client.your_database  # specify the correct database\n    collection = db.your_collection  # specify the correct collection\n\n    # get the required ID from the request\n    id = request.args.get('id')\n\n    # perform the deletion\n    result = collection.delete_one({'_id': ObjectId(id)})\n\n    if result.deleted_count == 0:\n        # return an error if the record was not found\n        return {'message': 'Record not found'}, 404\n    else:\n        return {'message': 'Record deleted'}, 200 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_list(lst, item): \n    for i in range(len(lst)): \n        if lst[i] == item: \n            return i \n    return -1\n\nidx = search_list(list, item) \nif idx == -1: \n    print(\"Item not found\")\nelse:\n    print(\"Item found at index\", idx) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def DFS(graph, start, visited=None): \n if visited is None:\n visited = set() \n\n visited.add(start) \n \n for next in graph[start] - visited: \n DFS(graph, next, visited) \n \n return visited \n \ngraph = {'A': set(['B', 'C']), \n         'B': set(['A', 'D', 'E']), \n         'C': set(['A', 'F']), \n         'D': set(['B']), \n         'E': set(['B', 'F']), \n         'F': set(['C', 'E'])} \n\nDFS(graph, 'A') # returns {'E', 'D', 'F', 'A', 'C', 'B'} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maxNum(numsList):\n    maxNum = numsList[0]\n    for num in numsList:\n        if num > maxNum:\n            maxNum = num\n    return maxNum\n\nnumList = [4, 9, 10, 11, 12]\nprint(\"The maximum number in the list is:\", maxNum(numList)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_occurences(string, word):\n    count = 0\n    words = string.split(' ')\n    for w in words:\n        if w == word:\n            count += 1\n    return count\n \nstring = 'The quick brown fox'\nword = 'The'\n \noccurrences = count_occurences(string, word)\nprint('\"The\" occurs', occurrences , 'times in the string.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program for implementation of Bubble Sort \ndef bubbleSort(arr): \n\tn = len(arr) \n\n\t# Traverse through all array elements \n\tfor i in range(n): \n\n\t\t# Last i elements are already in place \n\t\tfor j in range(0, n-i-1): \n\n\t\t\t# traverse the array from 0 to n-i-1 \n\t\t\t# Swap if the element found is greater \n\t\t\t# than the next element \n\t\t\tif arr[j] > arr[j+1] : \n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def LongestCommonSubsequence(string1, string2):\n    n = len(string1)\n    m = len(string2)\n    dp = [[None]*(m+1) for i in range(n+1)] \n\n    for i in range(n+1): \n        for j in range(m+1): \n            if i == 0 or j == 0 : \n                dp[i][j] = 0\n            elif string1[i-1] == string2[j-1]: \n                dp[i][j] = dp[i-1][j-1]+1\n            else: \n                dp[i][j] = max(dp[i-1][j] , dp[i][j-1]) \n    return dp[n][m] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nrandom_numbers = []\n\nfor i in range(5):\n number = random.randint(0,100)\n random_numbers.append(number)\n print(random_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: n = int(input('Enter the number of employees: '))\n\n# Initializing dictionaries\nEmployee_ID = {}\nEmployee_Name = {}\nEmployee_Salary = {}\n \n# Looping to get details of each employee\nfor i in range (1, n+1):\n  print('For employee ', i)\n  Employee_ID[i] = int(input('Enter your ID: ' )) \n  Employee_Name[i] = input('Enter your name: '))\n  Employee_Salary[i] = int(input('Enter your salary: '))\n  \nprint('The Employee records are: ') \n  \n# printing data \nfor i in range(1, n+1): \n  print('Employee ID:', Employee_ID[i], 'Employee Name:', Employee_Name[i], 'Employee Salary:', Employee_Salary[i]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPalindrome(word): \n    left, right = 0, len(word) - 1\n    while right >= left: \n        if not word[left] == word[right]: \n            return False\n        left += 1\n        right -= 1\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_longest_increasing_subsequence(array):\n    n = len(array)\n    Length = [1] * n\n    SequenceArray = [None] * n\n    for index1 in range(n):\n        for index2 in range(index1):\n            if array[index2] < array[index1] and Length[index2] >= Length[index1]:\n                Length[index1] = Length[index2] + 1\n                SequenceArray[index1] = index2\n\n    maxIndex = Length.index(max(Length))\n    SubsequenceArray = [array[maxIndex]]\n    while SequenceArray[maxIndex] is not None:\n        maxIndex = SequenceArray[maxIndex]\n        SubsequenceArray.append(array[maxIndex])\n    SubsequenceArray.reverse()\n    return SubsequenceArray but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPalindrome(text):\n text = text.lower()\n return text == text[::-1]\n\n# Testing\n\nprint(isPalindrome(\"Mom\")) # Should return True\nprint(isPalindrome(\"Apple\")) # Should return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def evaluate_list(nums_list):\n    # set counter to 0\n    counter = 0\n    # set total as 0\n    total = 0 \n    # iterate through list\n    for num in nums_list:\n        # check if counter divides by 3\n        if counter%3 == 0:\n            # add number to total\n            total += num\n        # increment counter\n        counter += 1\n    #return total\n    return total\n\nnums_list = [3, 8, 7, 4, 9, 2, 1, 6]\nresult = evaluate_list(nums_list)\n\nprint(result)\n# Output: 14 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_password():\n chars = string.ascii_uppercase + string.ascii_lowercase + string.digits + '$#@'\n random.shuffle(list(chars))\n return ''.join(random.sample(chars, 8))\n\nprint(generate_password()) #nH3@r4y6 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.classify import AffinityPropagation\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\ntext = \"Bonjour tout le monde!\"\nvectorizer = TfidfVectorizer(min_df = 1, analyzer = nltk.word_tokenize)\nX = vectorizer.fit_transform([text])\nclf = AffinityPropagation()\nclf.fit(X)\n\nlabels = clf.labels_\nlanguage = clf.cluster_centers_indices_[labels[0]]\nprint(vectorizer.get_feature_names()[language]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_vowels(string):\n    count = 0\n    for character in string:\n        if character in 'aeiouAEIOU':\n            count += 1\n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack:\n  def __init__(self):\n    self.items = []\n\n  def push(self, item):\n    self.items.append(item)\n\n  def pop(self):\n    return self.items.pop()\n\n  def is_empty(self):\n    return self.items == [] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isLeapYear(year):\n\"\"\"\nReturns True if year is a leap year and False othwerwise.\n\"\"\"\n\nif (year % 400 == 0):\n    return True\nelif (year % 100 == 0):\n    return False\nelif (year % 4 == 0):\n    return True\nelse:\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\nlist = [1, 2, 3, 4, 5]\n\nplt.bar(range(len(list)), list)\nplt.xlabel('Index')\nplt.ylabel('Value')\nplt.title('My Bar Chart')\n\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef randomListGenerator():\n    randomList = []\n    for i in range(1, 21):\n        randomNumber = random.randint(1,20)\n        while randomNumber in randomList:\n            randomNumber = random.randint(1,20)\n        else:\n            randomList.append(randomNumber)\n    return randomList\n\nprint(randomListGenerator()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [2, 6, 9, 8, 4, 5]\nsum = 0 \nfor num in list:\n sum += num \n\n# calculate mean\nmean = sum / len(list)\n\n# print mean\nprint(\"Mean:\", mean)\n\n# Output\nMean: 5.8 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nquery = input('Search query: ')\nurl = 'https://www.google.com/search?q=' + query\n\nr = requests.get(url)\n\nif r.status_code == 200: \n    print('Search results:')\n    for item in r.json()['items']:\n        print(item['title'] + ' - ' + item['url'])\nelse:\n    print('An error occurred!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # calculate the mean\ndef mean(nums):\n    return sum(nums) / len(nums)\n \n# calculate the median\ndef median(nums):\n    nums.sort()\n    if len(nums) % 2 == 0:\n        return (nums[len(nums)//2-1] + nums[len(nums)//2]) / 2\n    else:\n        return nums[len(nums)//2]\n\n# calculate the mode\ndef mode(nums):\n    nums.sort()\n    max_count = 1\n    mode = nums[0]\n    current_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]: \n            current_count += 1\n            if current_count > max_count:\n                max_count = current_count \n                mode = nums[i]\n        else:\n            current_count = 1\n\n    return mode\n\n# test read \nnums = [1, 2, 3, 4, 5]\nprint(\"Mean = \", mean(nums))\nprint(\"Median = \", median(nums))\nprint(\"Mode = \", mode(nums)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: x = 5\n\ndef evaluate_expression(x):\n    y = (1 / x) + (x ** 2)\n    return y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: [int(d) for d in str(num)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def largest(array):\n largest = array[0]\n for i in range(1, len(array)):\n  if array[i] > largest:\n   largest = array[i]\n return largest but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_pattern(n):\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            print(j, end=\"\")\n        print(\"\")\n\nprint_pattern(5) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_items_with_budget(budget, item_list):\n  # create a dictionary for the items and the corresponding item cost\n    item_dict = dict(item_list)\n  # check the budget\n    if budget < min(item_dict.values()):\n        return 0\n  # initialize the maximum number of items\n    max_item = 0\n    for item, cost in item_dict.items():\n        num_items = budget // cost\n        if num_items > max_item:\n            max_item = num_items\n    return max_item\n\nif __name__ == '__main__':\n    budget = 1000\n    item_list = [('itemA', 10), ('itemB', 20), ('itemC', 30)]\n    print(max_items_with_budget(budget, item_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: primes_list = [num for num in range(2, 1000) if all(num % i != 0 for i in range(2, num))] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def to_binary(num): \n    # convert to a binary number\n    if num > 1: \n        to_binary(num // 2)\n    print(num % 2,end = '') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nnumber = random.randint(1, 10)\nprint (number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_odds(list):\n  odd_list = filter(lambda num: num%2==1, list)\n  return list(odd_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maxProduct(arr): \n    n = len(arr) \n    max_prod = 0\n    for i in range(0, n): \n        for j in range(i + 1, n): \n            if arr[i] > 0 and arr[j] > 0: \n                max_prod = max(max_prod, arr[i] * arr[j]) \n  \n    return max_prod \n\n# Input\narray = [6, -3, -10, 0, 2]\n\n# Output\nresult = maxProduct(array)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Check if point p3 lies on the line joining p1 and p2\ndef checkCollinearity(p1, p2, p3): \n    x1 = p1[0]\n    y1 = p1[1]\n    x2 = p2[0]\n    y2 = p2[1]\n    x3 = p3[0]\n    y3 = p3[1]\n  \n    # Calculating position of the point wrt the line joining the other two points. \n    position = ((y2 - y1) * (x3 - x1)) - ((y3 - y1) * (x2 - x1))\n\n    # Checking if collinear. If position is 0 then points are collinear.\n    if (position == 0): \n        return True\n    else: \n        return False\n\n# Counting collinear point pairs \ncollinear_pairs = 0\nfor i in range(len(points)): \n    for j in range(i+1, len(points)): \n        for k in range(j+1, len(points)): \n            p1 = points[i]\n            p2 = points[j]\n            p3 = points[k]\n\n            # Checking condition \n            if checkCollinearity(p1, p2, p3): \n                collinear_pairs = collinear_pairs + 1\n\nprint(\"Collinear Pairs = \", collinear_pairs) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def lis(sequence): \n    lis = [1 for _ in range(len(sequence))] \n  \n    for i in range (1 , len(sequence)): \n        for j in range(0 , i): \n            if sequence[i] > sequence[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n  \n    for i in range(len(sequence)): \n        maximum = max(maximum , lis[i]) \n  \n    return maximum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortTuplesByFirstElement(lst):\n    lst.sort(key = lambda x: x[0])\n    return lst\n\nsortedList = sortTuplesByFirstElement([(3, 'ape'), (1, 'cat'), (4, 'dog'), (2, 'bee')])\nprint(sortedList) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = ['apple', 'cat', 'elephant', 'banana', 'dog']\n\nfiltered_words = []\n\nfor word in words:\n    if len(word) >= 4:\n        filtered_words.append(word)\n\nprint(filtered_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nA dynamic temperature conversion program with user input in Python.\n\"\"\"\n\ndef convert_temperature():\n    # Prompt user for temperature to convert.\n    temp = int(input('Enter temperature to convert: '))\n\n    # Prompt for unit to convert from and to.\n    unit_from = input('Enter unit to convert from (Celsius or Fahrenheit): ')\n    unit_to = input('Enter unit to convert to (Celsius or Fahrenheit): ')\n\n    # Convert the temperature to specified unit.\n    if unit_from == 'Celsius' and unit_to == 'Fahrenheit':\n        converted_temp = (temp * 9/5) + 32\n    elif unit_from == 'Fahrenheit' and unit_to == 'Celsius':\n        converted_temp = (temp - 32) * 5/9\n    else:\n        converted_temp = temp\n\n    # Display the result.\n    print('The converted temperature is {} {}.'.format(converted_temp, unit_to))\n\nif __name__ == '__main__':\n    convert_temperature() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from Crypto.Cipher import AES\n\nkey = b'Sixteen byte key'\n\ndef encrypt(message):\n cipher = AES.new(key, AES.MODE_EAX)\n ciphertext, tag = cipher.encrypt_and_digest(message)\n \n return (cipher.nonce, tag, ciphertext)\n\ndef decrypt(ciphertext):\n cipher = AES.new(key, AES.MODE_EAX, nonce=nonce)\n plaintext = cipher.decrypt(ciphertext)\n \n try:\n \tcipher.verify(tag)\n \tprint(\"The message is authentic: \", plaintext)\n except ValueError:\n \tprint(\"Key incorrect or message corrupted\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\n\ndef convert_to_unix_time_stamp(date):\n    date_object = datetime.datetime.strptime(date, \"%d/%m/%Y\")\n    \n    return date_object.timestamp() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_inputs(lst):\n    result = []\n    for num in lst:\n        if num <= 0:\n            result.append('negative')\n        elif num > 0 and num <= 10:\n            result.append('non-negative')\n        else:\n            result.append('positive')\n    return result\n\nprint(classify_inputs([-2, 10, 11, 4, -1])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n):\n if n<0:\n  print(\"Incorrect input\")\n elif n==1:\n  return 0\n elif n==2:\n  return 1\n else:\n  a = [0] * (n+1)\n  a[0] = 0\n  a[1] = 1\n \n  for i in range(2, n+1):\n   a[i] = a[i-1] + a[i-2]\n  return a[n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\nimport keras\n\n# Create a model\nmodel = keras.Sequential([\n    keras.layers.Conv2D(32, (3, 3), input_shape=(28, 28, 1)),\n    keras.layers.MaxPooling2D((2, 2)),\n    keras.layers.Flatten(),\n    keras.layers.Dense(128, activation=\"relu\"),\n    keras.layers.Dense(10, activation=\"softmax\")\n])\n\n# Compile the model\nmodel.compile(optimizer=\"sgd\", loss=\"sparse_categorical_crossentropy\", metrics=[\"accuracy\"]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n\ndef roll_dice(): \n  # generate random number from 1 to 6 \n  dice = random.randint(1, 6) \n  return dice \n\n# take input from the user \nroll_again = \"yes\"\n\nwhile roll_again == \"yes\" or roll_again == \"y\": \n  print(\"Rolling the dices...\") \n  print(\"The values are....\") \n\n  # get two random values \n  dice1 = roll_dice() \n  dice2 = roll_dice() \n\n  print(dice1) \n  print(dice2) \n\n  roll_again = input(\"Roll the dices again?[y/n]\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: // Server\n\nconst express = require('express');\nconst app = express();\n\nlet products = [\n {\n name: 'Laptop',\n category: 'Electronics',\n price: 499.99\n },\n {\n name: 'Headphone',\n category: 'Electronics',\n price: 59.99\n },\n {\n name: 'Yoga Mat',\n category: 'Sports',\n price: 39.99\n }\n];\n\napp.get('/products', (req, res) => {\n res.send(products);\n});\n\napp.get('/products/:name', (req, res) => {\n let product = products.find(product => product.name === req.params.name);\n if (product) {\n res.send(product);\n } else {\n\u00a0res.send({message: 'Product not found'});\n }\n});\n\napp.listen(3000, () => console.log('Server started'));\n\n// Client\n\nlet productList;\n\nfetch('/products')\n .then(response => response.json())\n .then(data => {\n productList = data;\n renderProductList();\n});\n\nfunction renderProductList() {\n let productListElement = document.getElementById('product-list');\n for (let product of productList) {\n let li = document.createElement('li');\n li.innerHTML = `<b>${product.name}</b> (${product.category}): \\$${product.price}`;\n productListElement.appendChild(li);\n }\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_celsius_to_fahrenheit(celsius):\n    fahrenheit = celsius * 9/5 + 32\n    return fahrenheit\n\ncelsius = 32\nfahrenheit = convert_celsius_to_fahrenheit(celsius)\nprint('{} degree Celsius is {} degree Fahrenheit.'.format(celsius, fahrenheit)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_to_upper(string):\n    \"\"\"Function to convert the given string to all capital letters using an algorithm. 'Input should be a string.\"\"\"\n    result = ''\n    for char in string:\n        result += chr(ord(char) - 32)\n    return result\n\nprint(convert_to_upper('Hello world!')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\n# generates 16 random characters\ndef generate_random_password():\n    random_length = 16\n    characters = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(characters) for x in range (random_length))\n\n# generate and print the password\npassword = generate_random_password()\nprint(password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence = \"I am going to the store to buy food\"\n\nwords = sentence.split(' ')\n\n#Table to keep track of duplicates\ntable = []\n\nfor word in words:\n if word in table:\n print(\"Duplicate word found: \"+word)\n else:\n table.append(word) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def caesar_cipher(input_string, shift):\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    output_string = ''\n\n    for char in input_string:\n        if char in alphabet:\n            char_index = alphabet.find(char)\n            new_char_index = char_index + shift\n            output_string += alphabet[new_char_index % len(alphabet)]\n        else:\n            output_string += char\n\n    return output_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def str_to_int(lst):\n  int_lst = []\n  for i in lst:\n    int_lst.append(int(i))\n  return int_lst but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import the essential libraries\nimport numpy as np\nfrom deap import algorithms\nfrom deap import base\nfrom deap import creator\nfrom deap import tools\n\n# define the problem\ndef fitness_function(individual):\n    return sum(individual[0]**2 + 5*individual[1]**2, 3*individual[2]**2 + 2*individual[3] + 4, axis=1)\n\n# define the individual\ntoolbox = base.Toolbox()\ncreator.create(\"FitnessMax\", base.Fitness, weights=(1.0,))\ncreator.create(\"Individual\", list, fitness=creator.FitnessMax)\ntoolbox.register(\"attribute\", np.random.randint, 2, 4)\ntoolbox.register(\"individual\", tools.initRepeat, creator.Individual, toolbox.attribute, 4)\n\n# define the optimizer\ntoolbox.register(\"select\", tools.selTournament, tournsize=3)\ntoolbox.register(\"mutate\", tools.mutUniformInt, low=2, up=4, indpb=0.2)\ntoolbox.register(\"mate\", tools.cxUniform, indpb=0.5)\ntoolbox.register(\"evaluate\", fitness_function)\n\n# run the optimizer\nstats = tools.Statistics(lambda ind: ind.fitness.values)\nstats.register(\"avg\", np.mean)\nstats.register(\"std\", np.std)\nstats.register(\"min\", np.min)\nstats.register(\"max\", np.max)\n\npop = toolbox.population(n=40)\nresult = algorithms.eaSimple(pop, toolbox, 0.5, 0.2, 100, stats=stats) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = \"https://api.coinmarketcap.com/v2/ticker/\"\n\nresponse = requests.get(url)\n\ndata = response.json()\n\nprint(data['data'][0]['name'], data['data'][0]['quotes']['USD']['price'])\nfor i in range(1, 10):\n    print(data['data'][i]['name'], data['data'][i]['quotes']['USD']['price']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: employees = [record1, record2, ...]\n\ngroups = {}\nfor record in employees:\n    age = record[\"age\"]\n    if age in groups:\n        groups[age].append(record)\n    else:\n        groups[age] = [record]\n\nfor age, records in groups.items():\n    avg_age = sum([r[\"age\"] for r in records]) / len(records)\n    print(f\"The avg age of group of age {age} is {avg_age}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_words(sentence):\n    # split the sentence on whitespace\n    words = sentence.split()\n    \n    # return the length of the resulting list\n    return len(words)\n    \nsentence = 'This is a test sentence.'\n\n# count the number of words\nnum_words = count_words(sentence)\n\nprint('Number of words:', num_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False  \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nlist_of_primes = []\n\nfor i in range(2, 11):\n    if is_prime(i):\n        list_of_primes.append(i)\n\nprint(list_of_primes) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def int_to_binary(x):\n #initializing a variable to store the binary equivalent \n bin_str = ''\n\n #looping until the value of x is 0 \n while x > 0: \n  # calculated the remainder \n  remainder = x % 2 \n  #updating x \n  x >>= 1 \n  \n  #adding the remainder to the string\n  bin_str += str(remainder) \n  \n #reversing the string \n bin_str = bin_str[::-1]\n\n # return the binary string \n return bin_str but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countLetters(sentence): \n    counts = dict() \n    for c in sentence: \n        if c in counts: \n            counts[c] += 1\n        else: \n            counts[c] = 1\n  \n    return counts but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: max_func = lambda a, b, c : max(a,b,c)\nprint(max_func(3, 12, 7)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countWordOccurrences(sentence, word):\n count = 0\n \n sentenceArray = sentence.split(' ')\n \n for s in sentenceArray:\n if s == word:\n count += 1\n \n return count\n \nsentence = \"This is an example sentence\"\nword = \"example\"\n\ncount = countWordOccurrences(sentence, word)\n\nprint(count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Compute the average of the numbers\nnumbers = [1, 2, 3, 4, 5]\ntotal = 0\nfor number in numbers:\n    total += number\n\n# Divide the total by the number of elements in the list\naverage = total / len(numbers)\n\n# Print the average\nprint(average) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class DecisionTreeEvaluator():\n    \"\"\"\n    Decision Tree model evaluation implementation.\n    \"\"\"\n    def __init__(self):\n        self.model = model\n \n    def evaluate(self, X_test, y_test):\n        \"\"\"\n        Evaluates the given decision tree model on the given test data.\n \n        Parameters\n        ----------\n        X_test : array-like, shape = [n_samples, n_features]\n        Test samples.\n \n        y_test : array-like, shape = [n_samples]\n        True labels for X_test.\n \n        Returns\n        -------\n        accuracy : float\n        The accuracy of the decision tree model.\n        \"\"\"\n        y_pred = self.model.predict(X_test)\n        accuracy = accuracy_score(y_test, y_pred)\n        return accuracy but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: SELECT a.id, a.name, b.age\nFROM TableA a LEFT JOIN TableB b\nON a.id = b.id; but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_delete_duplicates(arr):\nseen = set() \nunique = []\ncount = 0\n\nfor x in arr:\n if x not in seen:\n  seen.add(x)\n  unique.append(x)\n else:\n  count += 1\nreturn count, unique but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def repopulate_missing(arr):\n    # Iterate the array \n    for i in range(len(arr)):\n        #Check if element is None\n        if arr[i] is None:\n            # Get neighbouring elements\n            before = arr[i - 1] if i > 0 else 0\n            after = arr[i + 1] if i < len(arr) - 1 else 0\n            \n            # Repopulate the element\n            arr[i] = (before + after) // 2\n       \n    return arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_intersection(list1, list2):\n    intersection = []\n    for element in list1:\n        if element in list2:\n            intersection.append(element)\n    return intersection but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Code snippet 1: Python\nCode snippet 2: C/C++ but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: grocery_list = []\n\ndef display_list(list):\n  print('\\nGrocery List:')\n  for item in list:\n    print(item)\n\ndef add_item(list):\n  item = input(\"What would you like to add? \")\n  list.append(item)\n  print('{} was added to the grocery list.'.format(item))\n\ndef delete_item(list):\n  item = input(\"What would you like to delete? \")\n  try:\n    list.remove(item)\n    print('{} was removed from the grocery list.'.format(item))\n  except:\n    print(\"{} was not in the grocery list.\".format(item))\n\nwhile True:\n  action = input(\"What would you like to do? [display/add/delete]\")\n  if action == \"display\":\n    display_list(grocery_list)\n  elif action == \"add\":\n    add_item(grocery_list)\n  elif action == \"delete\":\n    delete_item(grocery_list)\n  else:\n    print(\"I didn't understand what you mean.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def even_numbers(numbers):\n \n  # Initialize an empty array to store the even numbers\n  even_numbers_array = []\n  \n  # Iterate through the numbers array\n  for number in numbers:\n    \n    # Check if the number is even\n    if number % 2 == 0:\n      \n      # If the number is even, add it to the even_numbers_array\n      even_numbers_array.append(number)\n      \n  # Return the even_numbers_array  \n  return even_numbers_array\n  \n# Test it\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(even_numbers(numbers)) # Should return [2, 4, 6, 8] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \n\n# API wrapper for the given API \ndef api_wrapper(url): \n    # get the API response \n    response = requests.get(url) \n\n    # check the response status \n    if(response.status_code == 200): \n        # return json data \n        return response.json()\n    else: \n        return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [\"Paul\", \"John\", \"George\", \"Ringo\"]\nmy_list.sort() \nprint(my_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # creating an empty array \narray = [] \n  \n# loop for iterating over \nfor i in range(11): \n    array.append(i) \n  \n# print the array \nprint(array) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Calculator():\n    def __init__(self):\n        self.current_sum = 0\n\n    def add(self, value):\n        self.current_sum = self.current_sum + value \n\n    def subtract(self, value):\n        self.current_sum = self.current_sum - value\n\n    def get_total(self):\n        return self.current_sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\n\nx = np.arange(0, 50, 1)\ny = np.arange(0, 10, 1)\n\nxytable = []\n\nfor xi in x:\n    for yi in y:\n        xytable.append([xi, yi, xi*yi])\n\ntable = pd.DataFrame(xytable, columns=['X', 'Y', 'Product'])\n\nprint(table) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: x = int(input(\"Enter the first number: \"))\ny = int(input(\"Enter the second number: \"))\n\nmaximum = x if x > y else y\n\nprint(\"The maximum of two numbers is\", maximum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n \n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get('https://www.example.com/').text\n \n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n\n# Print all titles\ntitles = soup.find_all('title')\nfor title in titles:\n    print(title.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# create a dataframe\ndf = pd.DataFrame({\n 'Name': ['John', 'Mary', 'Chris'],\n 'Score': [90, 80, 95],\n})\n\n# function to calculate the grade\ndef calculate_grade(score):\n if score >= 90:\n return 'A'\n elif score >= 80:\n return 'B'\n else:\n return 'C'\n\n# apply the function to the dataframe\ndf['Grade'] = df['Score'].apply(calculate_grade)\n\nprint(df) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\nclass Chatbot:\n def __init__(self):\n # Initialize the list of predefined responses\n self.responses = {\n 'hello': 'Hi there!',\n 'how are you?': 'I am doing well. How about you?',\n 'goodbye': 'Goodbye, have a nice day!'\n }\n\ndef respond(self, input):\n # Extract the intent from the input\n intent = self.extract_intent(input)\n \n # Check if the intent is in the predefined responses\n response = self.responses.get(intent, None)\n \n # Return the response if there is a match, otherwise return None\n return response\n\ndef extract_intent(self, input):\n # Match the input using regular expressions\n match_intent = re.match('[A-Za-z]+', input)\n \n # Extract the intent if there is a match, otherwise return None\n if match_intent:\n return match_intent.group()\n else:\n return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n# Get the data\ndata_frame = pd.read_csv('stock_prices.csv')\n \n# Split the data into features and labels\nX = data_frame['historical_price'].values.reshape(-1,1) \ny = data_frame['price'].values\n \n# Train the model\nregressor = LinearRegression().fit(X, y)\n \n# Predict the price\npred_y = regressor.predict(X)\n \n# Plot the predictions\nplt.xlabel(\"Historical Price\") \nplt.ylabel(\"Actual and Predicted Price\")\nplt.plot(X, y, 'g--', label='Actual Price', linewidth=5)\nplt.plot(X, pred_y, 'r-', label='Predicted Price', linewidth=4)\nplt.legend()\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def concatenateStrings(string1, string2):\n  return string1 + string2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classifyIntegersByOddEven(arr):\n    evens = []\n    odds = []\n    \n    for num in arr:\n        if num % 2 == 0:\n            evens.append(num)\n        else:\n            odds.append(num)\n    \n    return evens, odds\n\nevens, odds = classifyIntegersByOddEven([1, 8, 4, 120])\nprint('Evens: ', evens)\nprint('Odds: ', odds) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\n\ntimestamp = 1594842400\nutc_time = time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(timestamp))\n\nprint(utc_time) # Output: 2020-07-17 02:00:00 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: group_by_column = df.groupby(\"B\").agg({'C': 'sum', 'D': 'mean'}) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = \"Hello World\"\ncharacter = 'l'\n\nindex = string.index(character)\nprint(index) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def function(arg):\n    for i in arg:\n        print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countFrequencies(string):\n    words = string.split()\n    freq_dict = {}\n    for word in words:\n        if word not in freq_dict:\n            freq_dict[word] = 1\n        else:\n            freq_dict[word] += 1\n    return freq_dict\n\n# example\nresult = countFrequencies(\"This is a test string\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(name_list, name): \n    for i in range(len(name_list)): \n        if name_list[i] == name: \n            return i \n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def more_than_five_characters(words):\n    result = []\n    for word in words:\n        if len(word) > 5:\n            result.append(word)\n    return result\n\nwords = [\"red\", \"green\", \"blue\", \"yellow\", \"orange\"]\nprint(more_than_five_characters(words)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\nmatrix = np.random.rand(3,3)\n\nprint(matrix)\n\n# Output\n[[0.88549813 0.66875685 0.3422321 ]\n [0.26914325 0.86840147 0.14631629]\n [0.97593031 0.79918964 0.28827702]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def squares(n):\n    return [x*x for x in range(1,n+1)]\n\nprint(squares(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Define item list\nitems = [('apple', 1.59),('banana', 0.99),('bread', 3.02),('soup', 1.79)]\n\n#Initialize total amount\ntotal_amount = 0\n\n#Loop through each item and add its price to the total\nfor item in items:\n    total_amount += item[1]\n    print(item[0] + ' added to total amount.')\n\n#Add tax to the total\ntax_rate = 0.055\ntotal_amount += (tax_rate * total_amount)\n\n#Print the final total\nprint('Total amount due: $' + str(total_amount)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(arr):\n    max = arr[0]\n    for i in arr: \n        if i > max: \n            max = i \n  \n    return max\n  \n# Driver Code  \narr = [10, 9, 11, 12, 5]\nmaximum = find_max(arr) \nprint(\"Maximum element is:\", maximum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\n\ndef set_reminder_in_minutes(minutes):\n    \"\"\" Fetches the user's current time and sets a reminder after the given minutes \"\"\"\n    current_time = time.time() \n    reminder_time = current_time + minutes * 60\n\n    # Set the reminder\n    # ... \n    \nif __name__ == \"__main__\":\n    set_reminder_in_minutes(30) but is not the same. just give one example and only return the code."}
