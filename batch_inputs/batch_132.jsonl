{"prompt": "make some code that functions the same as the following code: JavaScript: Scripting/Web\nPython: Scripting/General-purpose \nR: Statistical/Data Science\nPHP: Scripting/Web \nJava: Object-oriented/General-purpose \nC: Low-level/Systems programming but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_prime_numbers(n):\n  prime_numbers = []\n  count = 0\n  num = 2\n  while count < n:\n    is_prime = True\n    for i in range(2, num):\n      if num % i == 0:\n        is_prime = False\n        break\n    if is_prime:\n      prime_numbers.append(num)\n      count += 1\n    num += 1\n  return prime_numbers\n\nprimes = generate_prime_numbers(n)\nprint(primes)  # Outputs [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_first_100_natural_numbers():\n total = 0\n for i in range(1,101):\n total += i\n return total\n\n# example\nprint(sum_first_100_natural_numbers()) # output: 5050 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_distinct(lst):\n    seen = set()\n    distinct = []\n    for x in lst:\n        if x not in seen:\n            distinct.append(x)\n            seen.add(x)\n    print(distinct) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combination sums(nums, target):\n  result = []\n  for i in range(len(nums)):\n    x = nums[i]\n    for j in range(i + 1, len(nums)):\n      if (x + nums[j]) == target: \n        result.append([x,nums[j]]) \n  \n  return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n  \n# Driver Program \nprint(Fibonacci(9)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_sum(input_list):\n    \"\"\"Computes the sum of the items of a given list.\"\"\"\n    output = 0\n    for item in input_list:\n        output += item\n    return output\n\nprint(list_sum([3, 5, 6, 10])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import ast\nimport sys\n \nfrom cpp import parser, generator\n \n \ndef py2cpp(py_code):\n    py_ast = ast.parse(py_code)\n    cpp_ast = parser.convert(py_ast)\n    cpp_code = generator.convert(cpp_ast)\n    return cpp_code\n \nif __name__ == '__main__':\n    py_code = sys.stdin.read()\n    cpp_code = py2cpp(py_code)\n    sys.stdout.write(cpp_code) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class SimpleCalculator:\n    \"\"\"A simple class which has methods to do basic arithmetic operations.\"\"\"\n    def __init__(self):\n        \"\"\"Initializing an instance of the SimpleCalculator class.\"\"\"\n        self.result = 0\n    \n    def __str__(self):\n        \"\"\"Returns the string representation for the SimpleCalculator class.\"\"\"\n        return \"Simple Calculator\"\n    \n    def add(self, num1, num2):\n        self.result = num1 + num2\n        return self.result\n    \n    def subtract(self, num1, num2):\n        self.result = num1 - num2\n        return self.result\n    \n    def multiply(self, num1, num2):\n        self.result = num1 * num2\n        return self.result\n    \n    def divide(self, num1, num2):\n        self.result = num1 / num2\n        return self.result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: ''.join(str(x) for x in [\"Hello\", \"World\"]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Declare a function\ndef Fibonacci(num):\n    a = 0\n    b = 1\n    \n    # Iterate\n    for i in range(num):\n        print(a, end=\" \")\n        c = a + b\n        a = b\n        b = c\n    print()\n    \n# Print the sequence\nFibonacci(10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def starPattern(n):\n    # outer loop to handle number of rows\n    for i in range(0, n):\n        # inner loop to handle number of columns\n        for j in range(0, i + 1):\n            # printing stars\n            print(\"* \", end=\"\")\n        # ending line after each row\n        print(\"\\r\")\n\n# Driver code\nn = 5\nstarPattern(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from datetime import date \n  \n# Function to calculate number of days between two dates \ndef getNumberOfDays(date1, date2): \n    return (date2 - date1).days \n  \n# Driver program \ndate1 = date(2020, 8, 18) \ndate2 = date(2020, 9, 1) \nprint(getNumberOfDays(date1, date2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from Crypto.Cipher import AES \n\nplaintext = \"This is a secret message\"\nkey = b\"Sixteen Byte Key\"\n\ncipher = AES.new(key, AES.MODE_ECB) \nencrypted_text = cipher.encrypt(plaintext.encode('utf-8')) \n\nprint(encrypted_text.hex())\n\n# Output\nc3a40f3dce503efa1f00561d60e579b9 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: data = {'a': [1, 4], 'b': [2], 'c': [3]} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isArmstrong(num): \n  \n    temp = num \n    sum = 0 \n  \n    while temp > 0: \n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n  \n    if num == sum:\n        return True \n    else:\n        return False\n\nif __name__ == \"__main__\":\n    num = 371\n    result = isArmstrong(num)\n    if result == True:\n        print(f\"{num} is an Armstrong number\")\n    else:\n        print(f\"{num} is not an Armstrong number\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\nimport numpy as np\n\n# model definition\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\n# optimization\nmodel.compile(optimizer='sgd',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# data\ntrain_data = np.load('train_data.npy')\ntrain_labels = np.load('train_labels.npy')\n\nX_train = train_data/255.\ny_train = train_labels\n\n# fitting\nmodel.fit(X_train, y_train, epochs=10, validation_split=0.2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_password():\n  data = \"0123456789\"\n  length = 10\n  password = \"\".join(random.sample(data, length))\n  return password\n\nprint(generate_password()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\n# create an in-memory SQLite3 database\ndb_connection = sqlite3.connect(':memory:') \ncursor = db_connection.cursor()\n\n# Create a table called 'reviews'\ncursor.execute('''CREATE TABLE reviews\n                (movie_name text, review_text text, reviewer_name text, rating int)''')\n\ndb_connection.commit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def next_largest_palindrome(num):\n    # convert string to a number\n    num = int(num)\n    # increment number by 1\n    num += 1\n    while not is_palindrome(str(num)):\n        # increment number by 1\n        num += 1\n\n    return num\n\ndef is_palindrome(num):\n    return num == num[::-1]\n\nprint(next_largest_palindrome(\"1234\"))\n\n# Output: 1331 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(str1, str2): \n    if len(str1)!= len(str2): \n        return False\n    first_list = list(str1.lower())\n    second_list = list(str2.lower())\n    first_list.sort()\n    second_list.sort()\n    return first_list == second_list\n\nprint(is_anagram(\"apple\",\"pleap\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(lst):\n    new_list = []\n    for i in lst:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n\nprint(remove_duplicates([\"Python\", \"Python\", \"programming\", \"language\", \"language\"])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_combos(lst, num):\n result = []\n for i in range(len(lst)):\n for j in range(i+1, len(lst)):\n if lst[i] + lst[j] == num:\n result.append([lst[i], lst[j]])\n return result\n\nprint(find_combos([1, 2, 3, 4], 4))\n\n# Output: [[1, 3], [2, 2], [3, 1]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def area_rectangle(length, width):\n return length * width\n\nprint(area_rectangle(2, 3)) # Output: 6 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def encrypt_caesar(text, shift):\n    \"\"\"Encrypt the text using the Caesar cipher\"\"\"\n    encrypted_text = \"\"\n    for char in text:\n        if char.isalpha():\n            encrypted_char = chr(ord(char) + shift)\n            if encrypted_char.isalpha():\n                encrypted_text += encrypted_char\n            else:\n                encrypted_text += chr(ord(encrypted_char) - 26)\n        else:\n            encrypted_text += char\n    return encrypted_text\n\nresult = encrypt_caesar('abc', 2)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: NumPy > SciPy > Pandas but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Defining a function to flatten a nested list\ndef flatten(list):\n    flatlist = []\n    for item in list:\n        if isinstance(item, list):\n            flatlist.extend(flatten(item))\n        else:\n            flatlist.append(item)\n    return flatlist\n\n# Testing the flatten function\nlist = [[1,2,3], [4,5], [6]]\nprint(flatten(list)) # [1, 2, 3, 4, 5, 6] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"http://example.com/\"\n# Fetch the page\nr = requests.get(url)\nhtml = r.text\n\n# Parse the html\nsoup = BeautifulSoup(html, 'html.parser')\n\n# Extract headlines\nheadlines = soup.find_all('h3')\nfor headline in headlines:\n print(headline.get_text()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\ndf = pd.read_csv(\"data.csv\")\nfor index, row in df.iterrows():\n    print(\"Name:\", row['Name'], \"Phone:\", row['Phone']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class VendingMachine:\n    def __init__(self):\n        self.coins_inserted = 0\n\n    def insert_coins(self, quarters, dimes):\n        self.coins_inserted += quarters * 25 + dimes * 10\n\n    def get_coins_inserted(self):\n        return self.coins_inserted but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_paths(tree, path=[]):\n    all_paths = []\n    head = list(tree.keys())[0]\n    tail = tree[head]\n\n    if path: \n        cur_path = path + [head] \n    else: \n        cur_path = [head] \n\n    if not tail: \n        all_paths.append(cur_path) \n    else:\n        for node in tail.keys():\n            all_paths += list_paths(tail[node], cur_path)\n\n    return all_paths\n\nlist_paths(tree) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Defining a function to remove all the values in a list that are greater than a given value\ndef remove_greater(list, n):\n\u00a0\u00a0return [val for val in list if val <= n]\n\n# Testing the remove_greater() function\nlist = [10, 15, 20, 25, 30]\nprint(remove_greater(list, 15)) # [10, 15] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack:\n def __init__(self):\n  self._items = []\n\n def push(self, item):\n  self._items.append(item)\n\n def pop(self):\n  return self._items.pop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter \n\ndef most_frequent(string): \n\tdata = string.split(\" \") \n\tdata1 = Counter(data) \n\t\n\treturn data1.most_common(1)[0] \n\ntxt = \"Python is a powerful language that is used for a wide range of applications\"\nassert most_frequent(txt) == ('is', 2)\nprint(\"Most frequent word is : \", most_frequent(txt)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Define a function to get recommendations for a given user \ndef get_recommendations(user): \n    # Get the user preferences \n    user_preferences = user.get_preferences() \n  \n    # Initialize an empty list for recommendations \n    recommendations = [] \n    \n    # Get all products of type 'clothing' \n    clothing_products = get_all_products('clothing') \n  \n    # Iterate over the clothing products \n    for product in clothing_products: \n        # Calculate the similarity score \n        score = calculate_similarity_score(product, user_preferences) \n  \n        # If the score is greater than 0, add the product to the list of recommendations \n        if score > 0: \n            recommendations.append(product) \n  \n    # Return the list of recommendations \n    return recommendations but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(s, t):\n s_list = list(s)\n t_list = list(t)\n s_list.sort()\n t_list.sort()\n if s_list == t_list:\n return True\n else:\n return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Read the dataset\ndataset = pd.read_csv('dataset.csv')\n\n# Define features and labels\nX = dataset.iloc[:, :4]\ny = dataset.iloc[:, -1]\n\n# Split the dataset into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\n\n# Normalize the data\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\n# Create and train the model\nmodel = KNeighborsClassifier(n_neighbors=3)\nmodel.fit(X_train, y_train)\n\n# Test the model\naccuracy = model.score(X_test, y_test)\nprint('Accuracy: ', accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# define input data\nX = np.array([[2.0,5.0]])\ny = np.array([7.5])\n\n# initialise and train the model\nregr = LinearRegression()\nregr.fit(X, y)\n\n# The coefficients\nprint('Coefficient/Parameter: ', regr.coef_)\n\n# The intercept\nprint('Intercept: ', regr.intercept_)\n\n# The meaning of the parameters: \n# The coefficient/Parameters is the slope of the regression line. It indicates the effect that a unit change in one of the independent variables has on the dependent variable. \n# The intercept is the point where the regression line intersects the y-axis. It indicates the value of the dependent variable when all independent variables are equal to zero. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: x = 5\ndef add_two_numbers(x, y):\n    z = x + y\n    return z\n\nresult = add_two_numbers(x, 5)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\n\"\"\"\n  diff_controller.py - controller for a differential drive\n  Copyright (c) 2010-2011 Vanadium Labs LLC.  All right reserved.\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n      * Redistributions of source code must retain the above copyright\n        notice, this list of conditions and the following disclaimer.\n      * Redistributions in binary form must reproduce the above copyright\n        notice, this list of conditions and the following disclaimer in the\n        documentation and/or other materials provided with the distribution.\n      * Neither the name of Vanadium Labs LLC nor the names of its \n        contributors may be used to endorse or promote products derived \n        from this software without specific prior written permission.\n  \n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n  DISCLAIMED. IN NO EVENT SHALL VANADIUM LABS BE LIABLE FOR ANY DIRECT, INDIRECT,\n  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\"\"\"\n\nimport rospy\n\nfrom math import sin,cos,pi\n\nfrom geometry_msgs.msg import Quaternion\nfrom geometry_msgs.msg import Twist\nfrom nav_msgs.msg import Odometry\nfrom diagnostic_msgs.msg import *\nfrom tf.broadcaster import TransformBroadcaster\n\nfrom ax12 import *\nfrom controllers import *\nfrom struct import unpack\n\nclass DiffController(Controller):\n    \"\"\" Controller to handle movement & odometry feedback for a differential \n            drive mobile base. \"\"\"\n    def __init__(self, device, name):\n        Controller.__init__(self, device, name)\n        self.pause = True\n        self.last_cmd = rospy.Time.now()\n\n        # parameters: rates and geometry\n        self.rate = rospy.get_param('~controllers/'+name+'/rate',10.0)\n        self.timeout = rospy.get_param('~controllers/'+name+'/timeout',1.0)\n        self.t_delta = rospy.Duration(1.0/self.rate)\n        self.t_next = rospy.Time.now() + self.t_delta\n        self.ticks_meter = float(rospy.get_param('~controllers/'+name+'/ticks_meter'))\n        self.base_width = float(rospy.get_param('~controllers/'+name+'/base_width'))\n\n        self.base_frame_id = rospy.get_param('~controllers/'+name+'/base_frame_id', 'base_link')\n        self.odom_frame_id = rospy.get_param('~controllers/'+name+'/odom_frame_id', 'odom')\n\n        # parameters: PID\n        self.Kp = rospy.get_param('~controllers/'+name+'/Kp', 5)\n        self.Kd = rospy.get_param('~controllers/'+name+'/Kd', 1)\n        self.Ki = rospy.get_param('~controllers/'+name+'/Ki', 0)\n        self.Ko = rospy.get_param('~controllers/'+name+'/Ko', 50)\n\n        # parameters: acceleration\n        self.accel_limit = rospy.get_param('~controllers/'+name+'/accel_limit', 0.1)\n        self.max_accel = int(self.accel_limit*self.ticks_meter/self.rate)\n\n        # output for joint states publisher\n        self.joint_names = [\"base_l_wheel_joint\",\"base_r_wheel_joint\"]\n        self.joint_positions = [0,0]\n        self.joint_velocities = [0,0]\n\n        # internal data            \n        self.v_left = 0                 # current setpoint velocity\n        self.v_right = 0\n        self.v_des_left = 0             # cmd_vel setpoint\n        self.v_des_right = 0\n        self.enc_left = None            # encoder readings\n        self.enc_right = None\n        self.x = 0                      # position in xy plane\n        self.y = 0\n        self.th = 0\n        self.dx = 0                     # speeds in x/rotation\n        self.dr = 0\n        self.then = rospy.Time.now()    # time for determining dx/dy\n\n        # subscriptions\n        rospy.Subscriber(\"cmd_vel\", Twist, self.cmdVelCb)\n        self.odomPub = rospy.Publisher(\"odom\", Odometry, queue_size=5)\n        self.odomBroadcaster = TransformBroadcaster()\n\t\t\n        rospy.loginfo(\"Started DiffController (\"+name+\"). Geometry: \" + str(self.base_width) + \"m wide, \" + str(self.ticks_meter) + \" ticks/m.\")\n\n    def startup(self):\n        if not self.fake:\n            self.setup(self.Kp,self.Kd,self.Ki,self.Ko) \n    \n    def update(self):\n        now = rospy.Time.now()\n        if now > self.t_next:\n            elapsed = now - self.then\n            self.then = now\n            elapsed = elapsed.to_sec()\n\n            if self.fake:\n                x = cos(self.th)*self.dx*elapsed\n                y = -sin(self.th)*self.dx*elapsed\n                self.x += cos(self.th)*self.dx*elapsed\n                self.y += sin(self.th)*self.dx*elapsed\n                self.th += self.dr*elapsed\n            else:\n                # read encoders\n                try:\n                    left, right = self.status()\n                except Exception as e:\n                    rospy.logerr(\"Could not update encoders: \" + str(e))\n                    return\n                rospy.logdebug(\"Encoders: \" + str(left) +\",\"+ str(right))\n\n                # calculate odometry\n                if self.enc_left == None:\n                    d_left = 0\n                    d_right = 0\n                else:\n                    d_left = (left - self.enc_left)/self.ticks_meter\n                    d_right = (right - self.enc_right)/self.ticks_meter\n                self.enc_left = left\n                self.enc_right = right\n\n                d = (d_left+d_right)/2\n                th = (d_right-d_left)/self.base_width\n                self.dx = d / elapsed\n                self.dr = th / elapsed\n\n                if (d != 0):\n                    x = cos(th)*d\n                    y = -sin(th)*d\n                    self.x = self.x + (cos(self.th)*x - sin(self.th)*y)\n                    self.y = self.y + (sin(self.th)*x + cos(self.th)*y)\n                if (th != 0):\n                    self.th = self.th + th\n\n            # publish or perish\n            quaternion = Quaternion()\n            quaternion.x = 0.0 \n            quaternion.y = 0.0\n            quaternion.z = sin(self.th/2)\n            quaternion.w = cos(self.th/2)\n            self.odomBroadcaster.sendTransform(\n                (self.x, self.y, 0), \n                (quaternion.x, quaternion.y, quaternion.z, quaternion.w),\n                rospy.Time.now(),\n                self.base_frame_id,\n                self.odom_frame_id\n                )\n\n            odom = Odometry()\n            odom.header.stamp = now\n            odom.header.frame_id = self.odom_frame_id\n            odom.pose.pose.position.x = self.x\n            odom.pose.pose.position.y = self.y\n            odom.pose.pose.position.z = 0\n            odom.pose.pose.orientation = quaternion\n            odom.child_frame_id = self.base_frame_id\n            odom.twist.twist.linear.x = self.dx\n            odom.twist.twist.linear.y = 0\n            odom.twist.twist.angular.z = self.dr\n            self.odomPub.publish(odom)\n\n            if now > (self.last_cmd + rospy.Duration(self.timeout)):\n                self.v_des_left = 0\n                self.v_des_right = 0\n\n            # update motors\n            if not self.fake:\n                if self.v_left < self.v_des_left:\n                    self.v_left += self.max_accel\n                    if self.v_left > self.v_des_left:\n                        self.v_left = self.v_des_left\n                else:\n                    self.v_left -= self.max_accel\n                    if self.v_left < self.v_des_left:\n                        self.v_left = self.v_des_left\n                \n                if self.v_right < self.v_des_right:\n                    self.v_right += self.max_accel\n                    if self.v_right > self.v_des_right:\n                        self.v_right = self.v_des_right\n                else:\n                    self.v_right -= self.max_accel\n                    if self.v_right < self.v_des_right:\n                        self.v_right = self.v_des_right\n                self.write(self.v_left, self.v_right)\n\n            self.t_next = now + self.t_delta\n \n    def shutdown(self):\n        if not self.fake:\n            self.write(0,0)\n\n    def cmdVelCb(self,req):\n        \"\"\" Handle movement requests. \"\"\"\n        self.last_cmd = rospy.Time.now()\n        if self.fake:\n            self.dx = req.linear.x        # m/s\n            self.dr = req.angular.z       # rad/s\n        else:\n            # set motor speeds in ticks per 1/30s\n            self.v_des_left = int( ((req.linear.x - (req.angular.z * self.base_width/2.0)) * self.ticks_meter) / 30.0)\n            self.v_des_right = int( ((req.linear.x + (req.angular.z * self.base_width/2.0)) * self.ticks_meter) / 30.0)\n\n    def getDiagnostics(self):\n        \"\"\" Get a diagnostics status. \"\"\"\n        msg = DiagnosticStatus()\n        msg.name = self.name\n        msg.level = DiagnosticStatus.OK\n        msg.message = \"OK\"\n        if not self.fake:\n            msg.values.append(KeyValue(\"Left\", str(self.enc_left)))\n            msg.values.append(KeyValue(\"Right\", str(self.enc_right)))\n        msg.values.append(KeyValue(\"dX\", str(self.dx)))\n        msg.values.append(KeyValue(\"dR\", str(self.dr)))\n        return msg\n\n    ###\n    ### Controller Specification: \n    ###\n    ###  setup: Kp, Kd, Ki, Ko (all unsigned char)\n    ###\n    ###  write: left_speed, right_speed (2-byte signed, ticks per frame)\n    ###\n    ###  status: left_enc, right_enc (4-byte signed)\n    ### \n    \n    def setup(self, kp, kd, ki, ko):\n        success = self.device.execute(253, AX_CONTROL_SETUP, [10, kp, kd, ki, ko])\n\n    def write(self, left, right):\n        \"\"\" Send a closed-loop speed. Base PID loop runs at 30Hz, these values\n                are therefore in ticks per 1/30 second. \"\"\"\n        left = left&0xffff\n        right = right&0xffff\n        success = self.device.execute(253, AX_CONTROL_WRITE, [10, left%256, left>>8, right%256, right>>8])\n\n    def status(self):\n        \"\"\" read 32-bit (signed) encoder values. \"\"\"\n        values = self.device.execute(253, AX_CONTROL_STAT, [10])\n        left_values = \"\".join([chr(k) for k in values[0:4] ])        \n        right_values = \"\".join([chr(k) for k in values[4:] ])\n        try:\n            left = unpack('=l',left_values)[0]\n            right = unpack('=l',right_values)[0]\n            return [left, right]\n        except:\n            return None\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_common_substring(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n    maxi = 0\n    c = [[0 for x in range(n2+1)] for x in range(n1+1)] \n  \n    result = 0\n    for i in range(n1): \n        for j in range(n2): \n            if (str1[i] == str2[j]): \n                if(i == 0 or j == 0): \n                    c[i][j] = 1\n                else: \n                    c[i][j] = c[i -1][j-1] + 1\n                if (c[i][j] > maxi): \n                    maxi = c[i][j] \n                    result = i - maxi + 1\n    return str1[result:result + maxi]\n  \nprint(longest_common_substring(\"xyzabcd\", \"aabcdxyz\")) # abcd but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def predict_sentiment(sentence): \n    pred = model.predict([sentence])\n    if pred[0] == 0:\n        print(\"Negative sentiment\")\n    elif pred[0] == 1: \n        print(\"Neutral sentiment\")\n    else:\n        print(\"Positive sentiment\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: employee_data = {\n    \"Michael\": 45000,\n    \"Andrew\": 55000,\n    \"Mark\": 70000\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(n):\n  if n == 1:\n    return False\n\n  for i in range(2, int(n ** 0.5) + 1):\n    if n % i == 0:\n      return False\n   \n  return True\n\ndef get_prime_numbers(n):\n  result = []\n  for num in range(2, n+1):\n    if is_prime(num):\n      result.append(num)\n  return result\n\nprime_numbers = get_prime_numbers(15)\nprint(prime_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://en.wikipedia.org/wiki/Web_scraping\" \nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\ntext = soup.find_all('p')\nfor t in text:\n    print(t.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def missingNumbers(arr):\n        start = arr[0]\n        end = arr[len(arr)-1]\n        \n        result = []\n        \n        for i in range(start, end+1):\n            if i not in arr:\n                result.append(i)\n                \n        return result\n\n# Test Case\narr = [2, 3, 5, 6, 7, 8, 10]\nprint(missingNumbers(arr))\n\n# Output:\n# [4, 9] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Point:\n    def __init__ (self, x=0, y=0):\n        self.x = x\n        self.y = y\n \n    def __str__ (self):\n        return \"({0},{1})\".format(self.x,self.y)\n \n    def distance_from_origin (self):\n        return ((self.x ** 2) + (self.y ** 2)) ** 0.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import PyPDF2\n\n#open the pdf file\npdfFileObj = open('sample.pdf', 'rb')\n#create an object for pdf file\npdfReader = PyPDF2.PdfFileReader(pdfFileObj) \n#get number of pages\nnumPages = pdfReader.numPages\n#print no. of pages\nprint(\"Number of pages:\", numPages) \n\n#define a counter\ncount = 0\n#while loop to read each page\nwhile count < numPages:\n    #define a page object\n    pageObj = pdfReader.getPage(count) \n    #extract text from the page object\n    print  (pageObj.extractText()) \n    #increment the counter\n    count += 1 \n\n#closing pdf file object\npdfFileObj.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Function to check if a number is prime\ndef checkPrime(num):\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        return True\n    else:\n        return False\n\n#Function to find prime numbers in given range\ndef getPrimeNumbersInRange(low,high):\n    if low < high:\n        for i in range(low,high + 1):\n            if checkPrime(i):\n                print(i,\" is a prime number\")\n\n#Call the function\nlow = 30\nhigh = 50\ngetPrimeNumbersInRange(low, high) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python3 Program to print a \n# list of prime numbers \n  \n# Function to generate prime numbers \ndef generatePrimeNumbers(N): \n    checkprime = 1 # variable to check prime number \n    prime = [2] # List to store prime numbers \n    count = 1 # Counter to store number of prime numbers \n    for num in range(3, N + 1, 2): \n        for j in range(2, num): \n            # If anything neatly divides the number, don't consider it prime\n            if (num % j == 0): \n                checkprime = 0\n            # Otherwise check if it isPrime \n        if (checkprime != 0): \n            prime.append(num) \n            count += 1\n        checkprime = 1\n        # Store only First N Prime Numbers \n        if(count == N): \n            return prime\n\n# Driver code \nN = 10\nprime = generatePrimeNumbers(N) \nprint(\"First\", N, \"prime numbers are:\") \nfor i in range(0, N): \n    print(prime[i], end = \" \") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseString(string):\n    n = len(string) \n    # create an empty array\n    revString = [0 for i in range(n)] \n  \n    for i in range(n):\n        revString[n-i-1] = string[i] \n  \n    return \"(\" + ''.join(revString) + \")\"\nprint(reverseString(\"Hello World\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [4, 9, 2, 6, 5]\n\n# sort list in descending order\nlist.sort(reverse=True)\n\nprint(list) # [9, 6, 5, 4, 2] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: listA = [1, 2, 3]\nlistB = [4, 5, 6]\n\ncombined_list = listA + listB\nprint(combined_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_parentheses(n):\n    \"\"\"\n    Generates all possible valid parentheses combinations with n pairs of parentheses.\n    \"\"\"\n    res = []\n    def backtrack(s = '', left = 0, right = 0):\n        if len(s) == 2 * n:\n            res.append(s)\n            return\n        if left < n:\n            backtrack(s + '(', left+1, right)\n        if right < left:\n            backtrack(s + ')', left, right+1)\n            \n    backtrack()\n    return res\n\nprint(generate_parentheses(3)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request\nimport json\n\napp = Flask(__name__)\n\n@app.route('/web_service', methods=['POST'])\ndef web_service():\n    json_payload = request.get_json()\n\n    # Do stuff to manipulate the data\n    # ...\n\n    response_dictionary = {\n        'key1': 'val1',\n        'key2': 'val2',\n    }\n\n    return json.dumps(response_dictionary)\n\n\nif __name__ == '__main__':\n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def removeDuplicates(arr): \n    final_list = [] \n    for num in arr: \n        if num not in final_list: \n            final_list.append(num) \n    return final_list \n          \n# Driver Code \narr = [3, 8, 4, 3, 2, 8]  \nprint(removeDuplicates(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Circle:\n    \"\"\"Class to represent a circle.\"\"\"\n    def __init__(self, radius):\n        \"\"\"Initialize the circle.\"\"\"\n        self.radius = radius\n\n    def get_area(self):\n        \"\"\"Calculate and return the area of the circle.\"\"\"\n        return 3.14 * self.radius * self.radius but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def median(arr):\n    arr.sort()\n\n    if len(arr) % 2 != 0:\n        return arr[len(arr)//2]\n    else: \n        return (arr[len(arr)//2 - 1] + arr[len(arr)//2]) / 2\n\narr = [3, 5, 7, 4, 8, 1, 9]\n\nmed = median(arr)\nprint('Median of the given array is:', med) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef shuffleArray(arr):\n    random.shuffle(arr)\n    return arr\n\narray = [1, 2, 3, 4, 5, 6]\nshuffledArray = shuffleArray(array)\nprint(shuffledArray) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk \nfrom nltk.tokenize import sent_tokenize, word_tokenize\nfrom nltk.corpus import stopwords\nfrom collections import defaultdict\nfrom string import punctuation\nfrom heapq import nlargest\nimport numpy as np\n\n# Function to summarize the given text\ndef summarize(text, n):\n    # Tokenize the sentences in the text\n    sents = sent_tokenize(text)\n \n    # Tokenize the words in the text\n    words = word_tokenize(text.lower())\n \n    # Generate a list of stop words\n    stop_words = set(stopwords.words('english') + list(punctuation))\n \n    # Create a word frequency dictionary\n    word_freq = defaultdict(int)\n    for word in words:\n        if word not in stop_words:\n            word_freq[word] += 1\n \n    max_freq = max(word_freq.values()) \n \n    # Normalize the frequencies\n    for word in word_freq.keys():\n        word_freq[word] *= 1.0/max_freq\n \n    # Compute sentence scores\n    sent_scores = defaultdict(int) \n    for i, sent in enumerate(sents):\n        for word in word_tokenize(sent.lower()):\n            if word in word_freq.keys():\n                sent_scores[i] += word_freq[word]\n \n    # Identify the n highest scoring sentences\n    summary_sents = nlargest(n, sent_scores, key=sent_scores.get)\n    summary = [sents[j] for j in sorted(summary_sents)]   \n    return ' '.join(summary) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n \nURL = 'https://example.com/page'\nr = requests.get(URL)\n \nsoup = BeautifulSoup(r.content, 'html5lib')\n \n# Get all the links on the page\nlinks = soup.find_all('a')\n \n# Get the text from all the links\nlink_text = [link.text for link in links]\n \n# Get the URLs for all the links\nlink_urls = [link.get('href') for link in links] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def checkIfStringContainsSubstring(myString, substring):\n  for i in range(len(myString) - len(substring) + 1):\n    if myString[i:i+len(substring)] == substring:\n      return True\n  return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply(num1, num2):\n    return num1 * num2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = ['abc', 'hello', 'world']\n\nfor word in list:\n    if (len(word) % 2 != 0):\n        print(word) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply_matrices(matrix1, matrix2):\n  # Calculates the number of rows and columns of the matrices\n  rows_A = len(matrix1)\n  cols_A = len(matrix1[0])\n  rows_B = len(matrix2)\n  cols_B = len(matrix2[0])\n\n  # Check if the matrices have valid dimensions\n  if cols_A != rows_B:\n   print(\"Error! The matrices have invalid dimensions\")\n\n  # Initialize a new matrix as result\n  result = [[0 for row in range(cols_B)] for col in range(rows_A)]\n\n  # Iterate over the rows of the first matrix\n  for i in range(rows_A):\n   # Iterate over the columns of the second matrix\n   for j in range(cols_B):\n    # Iterate over the columns of the first matrix\n    for k in range(cols_A): \n     result[i][j] += matrix1[i][k] * matrix2[k][j]\n\n  return result\n\n# Input matrices  \nmatrix1 = [ [1, 2],         \n            [3, 4]\n          ]  \nmatrix2 = [ [5, 6],  \n            [7, 8]\n          ]\n\n# Call the function and print the result\nresult = multiply_matrices(matrix1, matrix2) \nprint(result) // [[19, 22], [43, 50]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def main():\n  val1 = 25\n  val2 = 6\n  sum = val1 + val2\n  print(sum)\n  return 0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef shuffleArray(array):\n    for i in range(len(array)):\n        randomIdx = random.randint(0,len(array)-1)\n        temp = array[i]\n        array[i] = array[randomIdx]\n        array[randomIdx] = temp\n    return array but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python\nimport googletrans\nfrom googletrans import Translator\n\ntranslator = Translator()\ntext = 'Hello, World!'\nresult = translator.translate(text, dest='fr') \n\nprint(result.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Book:\n def __init__(self, title, author):\n self.title = title \n self.author = author\n\n def __str__(self):\n return f'{self.title} by {self.author}' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(arr):\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-1-i):\n            if arr[j] > arr[j+1]:\n                arr[j],arr[j+1] = arr[j+1],arr[j]\n    return arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def particle_diameter(radius):\n    return 2 * radius\n\ndiameter = particle_diameter(0.75)\nprint(diameter) # Output: 1.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef is_ip_valid(ip):\n    pattern = r\"^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$\"\n    if re.match(pattern, ip):\n        return True\n    else:\n        return False\n\nprint(is_ip_valid(\"192.168.0.1\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # models.py\nfrom django.db import models\n\nclass Item(models.Model):\n name = models.CharField(max_length=255)\n\n# views.py\nfrom django.http import JsonResponse\nfrom .models import Item\n\ndef list_items(request):\n items = Item.objects.all()\n items_list = [item.name for item in items]\n return JsonResponse(items_list, safe=False)\n\ndef create_item(request):\n item = Item(name=request.POST['name'])\n item.save()\n return JsonResponse({'message': 'Item created'})\n\ndef delete_item(request):\n item = Item.objects.get(name=request.POST['name'])\n item.delete()\n return JsonResponse({'message': 'Item deleted'})\n\n# urls.py\nfrom django.urls import path\nfrom .views import list_items, create_item, delete_item \n\nurlpatterns = [\n path('items/', list_items, name='items-list'),\n path('items/create', create_item, name='items-create'),\n path('items/delete', delete_item, name='items-delete'),\n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # This Python 3 code prints the Fibonacci sequence up to n\n\ndef Fibonacci(n):\n  f0, f1 = 0, 1\n  for i in range(0, n):\n    print(f0,end=\" \");\n    next = f0 + f1;\n    f0 = f1;\n    f1 = next;\n\n# Driver Program\nprint(\"Fibonacci sequence up to n: \")\nFibonacci(10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef validate_input(input):\n # validate pattern:\n pattern = r\"^[a-zA-Z]*$\"\n # compile regex\n regex = re.compile(pattern)\n\n # check if input matches pattern\n if(regex.match(input)):\n  # format the input\n  input = input.lower().capitalize()\n  # return formatted input\n  return input\n else:\n # return error\n return \"Error: Invalid input\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import difflib\n\ndef detect_plagiarism(text1, text2):\n    sequenceMatcher = difflib.SequenceMatcher(None, text1, text2)\n    matchPercentage = sequenceMatcher.ratio() * 100\n    return matchPercentage\n\ndetect_plagiarism(\"This is a sample text\", \"This is a sample text.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef random_num_generator():\n    return random.randint(0, 9)\n\n# Print a number\nprint(random_num_generator()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef train_perceptron(X, y):\n    # initialize weights and bias values\n    weights = np.zeros(len(X[0]))\n    bias = 0\n\n    # define learning rate\n    lr = 0.01\n\n    # number of epochs\n    epochs = 100\n\n    # train the weights and bias\n    for _ in range(epochs):\n        for i in range(len(X)):\n            z = np.dot(X[i], weights) + bias\n            prediction = 1 if z >= 0 else 0\n\n            weights = weights + lr * (y[i] - prediction) * X[i]\n            bias = bias + lr * (y[i] - prediction)\n            \n    return weights, bias but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, Response\nimport json\nimport requests\n\napp = Flask(__name__)\n\n# replace THIS_IS_YOUR_SLACK_WEBHOOK_URL with the URL of Slack Webhook\nSLACK_WEBHOOK_URL = 'THIS_IS_YOUR_SLACK_WEBHOOK_URL'\n\n# create a route for the webhook\n@app.route('/slack', methods=['POST'])\ndef post_to_slack():\n # get the payload from the request\n data = request.get_json()\n\n # process the payload\n\n # post the message to the Slack webhook\n payload = {\n   'text': data['message']\n }\n response = requests.post(SLACK_WEBHOOK_URL, data=json.dumps(payload))\n\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = 'abcdef'\n\nprint(string[::-1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_odd_elements(int_list):\n    '''This function takes a list of integers and returns the sum of all the odd elements.'''\n    total = 0\n    for num in int_list:\n        if num % 2 != 0:\n            total += num\n    return total\n\nint_list = [2, 3, 4, 5, 6]\nsum = sum_odd_elements(int_list)\n\nprint(sum) # 8 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(lst):\n    new_list = []\n    for x in lst:\n        if x not in new_list:\n            new_list.append(x)\n    return new_list\n\nprint(remove_duplicates([\"apple\",\"apple\",\"banana\",\"orange\",\"pear\",\"banana\"])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string_words(string): \n    words = string.split(\" \") \n    words.reverse()\n    return ' '.join(words)  \n  \nstring = \"Python programming is fun\"\nprint(reverse_string_words(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import base64\n\nstring = \"Hello World!\"\n\ndata_bytes = string.encode('ascii')\nencoded_string = base64.b64encode(data_bytes)\n\nprint(encoded_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import textblob\n\nsentence = \"Life is full of surprises.\"\nsentiment = textblob.TextBlob(sentence).sentiment.polarity\n\nif sentiment == 0:\n # neutral sentiment\n print(\"Neutral Sentiment\")\nelif sentiment > 0:\n # positive sentiment\n print(\"Positive Sentiment\")\nelse:\n # negative sentiment\n print(\"Negative Sentiment\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef is_balanced(node):\n    if node is None:\n        return True\n    left_height = get_height(node.left)\n    right_height = get_height(node.right)\n\n    return (abs(left_height - right_height) <= 1\n        and is_balanced(node.left) == True\n        and is_balanced(node.right) == True\n        )\n\ndef get_height(node):\n    if node is None:\n        return 0\n    return 1 + max(get_height(node.left), get_height(node.right)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Imports\nimport numpy as np\nimport pandas as pd\nfrom sklearn import preprocessing\nimport tensorflow as tf\nimport keras\n\n# Read in the data\ndata = pd.read_csv('data/properties.csv')\n\n# Split data into features and labels\nX = data[['location', 'size']]\ny = data['price']\n\n# Preprocess the data\nscaler = preprocessing.StandardScaler()\nX = scaler.fit_transform(X)\n\n# Build the model\nmodel = keras.Sequential()\n\n# Input Layer\nmodel.add(tf.keras.layers.InputLayer(input_shape=(2,)))\n\n# Hidden Layers\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))\n\n# Output Layer\nmodel.add(tf.keras.layers.Dense(1))\n\n# Compile the model\nmodel.compile(\n optimizer='adam',\n loss='mean_squared_error',\n metrics=['mae']\n)\n\n# Train the model\nmodel.fit(X, y, epochs=10, batch_size=256)\n\n# Test the model\ntest_data = np.array([[127, 2123]], dtype=float)\ntest_data = scaler.transform(test_data)\nprediction = model.predict(test_data)\n\nprint(prediction) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(list1):\n    # Function to remove duplicates from a list\n    # convert the list into a set of unique elements\n    list_unique = set(list1)\n \n    # convert the set to a list\n    list_unique = list(list_unique)\n    return list_unique\n \n# input list\nlist1 = [1, 4, 2, 6, 4, 1, 2]\n \n# remove duplicates from the list\nlist1 = remove_duplicates(list1)\n \n# print the new list\nprint(list1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: x = 3\nresult = 2*(x**2) + 5*x + 3\n\nprint(result)\n\n# Outputs: 34 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_vowel(string):\n    vowels = ('a', 'e', 'o', 'u')\n    for x in vowels: \n        string = string.replace(x, \"\")\n    return string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_list(input_list):\n    \"\"\"Calculate the sum of the numbers in a given list\"\"\"\n    total = 0\n    for num in input_list:\n        total += num\n    return total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_letter_types(string):\n    lowercase_letters = []\n    uppercase_letters = []\n  \n    for letter in string:\n        if letter.isupper():\n            uppercase_letters.append(letter)\n        else:\n            lowercase_letters.append(letter)\n    return {\n        'lowercase_letters': lowercase_letters, \n        'uppercase_letters': uppercase_letters\n    } but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef calculate_distance(x1, y1, x2, y2):\n  x_diff = x2 - x1\n  y_diff = y2 - y1\n  distance = math.sqrt(x_diff**2 + y_diff**2)\n  return distance\n\nresult = calculate_distance(x1, y1, x2, y2)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def delete_duplicates(list_input):\n    # Initialize a new list to store non-duplicate elements\n    non_duplicate_list = []\n    # Iterate through the input list\n    for i in list_input:\n        # Check if the element is already in the non-duplicate list     \n        if i not in non_duplicate_list:\n            # If not, add the element to the non-duplicate list\n            non_duplicate_list.append(i)\n    # Return the list without any duplicate elements\n    return non_duplicate_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # an algorithm to search for a given keyword in a collection of documents\n\n# the algorithm takes two arguments\ndef search(documents, keyword):\n # create an empty list\n matches = []\n\n # loop over the documents\n for document in documents:\n # loop over the words in the document\n for word in document.words:\n # compare the word to the keyword\n if word == keyword:\n # add the document to the list\n matches.append(document)\n\n # return the list of matches\n return matches but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Use Python\nimport socket\n\n# Create socket object\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# Bind the socket to an address and port\ns.bind((\u2018127.0.0.1\u2019, 8888))\n\n# Listen for incomming connections\ns.listen()\n\n# Perform handshake to establish a secure connection\nwhile True:\n    # Accept connection\n    conn, addr = s.accept()\n    with conn:\n        print('Connected by', addr)\n        # Generate handshake messages\n        handshake_msg = generate_handshake_msg()\n        # Send handshake message\n        conn.send(handshake_msg)\n        # Receive message\n        received_msg = conn.recv(1024)\n        # Validate handshake message\n        if validate_handshake_msg(received_msg):\n            # Establish connection\n            print('Secure connection established!')\n            break but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_substring(string, substring):\n  \"\"\"Function to search substring within a string\"\"\"\n  \n  matches = []\n  \n  # Iterate over the search string\n  for i in range(len(string)):\n    temp = \"\"\n    \n    # Iterate over the substring\n    for j in range(len(substring)):\n      if substring[j] == string[i + j]:\n        temp += substring[j]\n      else:\n        break\n        \n    if temp == substring:\n      matches.append(i)\n      \n  # Return the list of matches\n  return matches\n\nstring = 'This is a test string'\nsubstring = 'test'\nresult = search_substring(string, substring)\n\n# Print the result\nprint(result)\n# Output\n# [10] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_all_paths(m, n): \n    # create a two dimensional array to store the path \n    path = [[0 for i in range(m)] for j in range(n)] \n    print_all_paths_util(m, n, 0, 0, path) \n  \n# utility function to print all paths  \ndef print_all_paths_util(m, n, row, col, path): \n    # if we reach the bottommost row, then append the  \n    # current position to the path array  \n    if (row == m-1): \n        for i in range(col, n): \n            path[row][i] = 1\n        print(path)\n\n    # If we reach the rightmost column, then append the  \n    # current position to the path array  \n    elif (col == n-1): \n        for i in range(row, m): \n            path[i][col] = 1\n        print(path)\n\n    # When neither row or the column indices  \n    # have reached the bottom or rightmost  \n    else:\n        # mark the current cell 1 \n        path[row][col] = 1\n  \n        # print all paths by exploring right \n        print_all_paths_util(m, n, row, col + 1, path) \n        # print all paths by exploring down \n        print_all_paths_util(m, n, row + 1, col, path) \n  \n        # mark the current cell 0  \n        path[row][col] = 0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers_dictionary = {}\nfor i in range(1,6): \n numbers_dictionary[i] = i*i\n\nprint(numbers_dictionary) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Function to add two numbers\ndef add(val1, val2):\n    return val1+val2\n\n#Function to subtract two numbers\ndef subtract(val1, val2):\n    return val1-val2\n\n#Function to multiply two numbers\ndef multiply(val1, val2):\n    return val1*val2\n\n#Function to divide two numbers\ndef divide(val1, val2):\n    return val1/val2\n\nwhile True:\n    print(\"Please provide the operator and operands\")\n    print(\"1. Add\")\n    print(\"2. Subtract\")\n    print(\"3. Multiply\")\n    print(\"4. Divide\")\n    print(\"5. Exit\")\n    \n    \n    # Take input from the user \n    choice = int(input(\"Enter your choice of operation: \")) \n  \n    # Check if choice is one of the four options\n    if choice in (1, 2, 3, 4): \n        num1 = float(input(\"Enter the first number: \")) \n        num2 = float(input(\"Enter the second number: \")) \n  \n        if choice == 1: \n            print(num1, \"+\", num2, \"=\", \n                    add(num1,num2)) \n  \n        elif choice == 2: \n            print(num1, \"-\", num2, \"=\", \n                    subtract(num1,num2)) \n  \n        elif choice == 3: \n            print(num1, \"*\", num2, \"=\", \n                    multiply(num1,num2)) \n  \n        elif choice == 4: \n            print(num1, \"/\", num2, \"=\", \n                    divide(num1,num2)) \n    \n    elif choice == 5:\n        print(\"Exiting Program!\")\n        break\n    else: \n        print(\"Please enter a valid option!\") but is not the same. just give one example and only return the code."}
