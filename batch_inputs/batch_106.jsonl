{"prompt": "make some code that functions the same as the following code: import re\n\npattern = re.compile(r\"\\b(word1)\\s(word2)\\b\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack:\n def __init__(self):\n self.items = []\n\n def push(self, item):\n self.items.append(item)\n\n def pop(self):\n return self.items.pop()\n\n def peek(self):\n return self.items[len(self.items)-1]\n\nmy_stack = Stack()\nmy_stack.push(1)\nmy_stack.push(2)\nmy_stack.push(3)\nprint(my_stack.peek()) # 3\nprint(my_stack.pop()) # 3\nprint(my_stack.pop()) # 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Importing the libraries\nimport numpy as np\n\n#Defining the list\nlist = [2, 3, 5, 8, 9]\n\n#Calculating the sum\nsum = np.sum(list)\n\n#Printing the result\nprint(sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\n# Define categories\ncategories = [\"Junk\", \"Not Junk\"]\n\n# Define regex for junk email\njunk_pattern = re.compile(r\"(limited time|offer|order now)\", re.IGNORECASE)\n\n# Check if email content matches the pattern\nmatch = junk_pattern.search(email_content)\n\n# Classify email\nif match:\n    print(\"Email is: Junk\")\nelse:\n    print(\"Email is: Not Junk\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Calculate power of a number \ndef power(base, exponent):\n    # Initialize result\n    result = 1\n    # Multiply result with base\n    # until exponent becomes 0\n    while exponent != 0:\n        result *= base\n        exponent -= 1\n \n    # Return result\n    return result\n\n# Print the power\nprint(power(base, exponent)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_numbers(n):\n numbers = [random.randint(1, 1000) for _ in range(n)]\n\n return numbers but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #importing the statistics module \nimport statistics \n  \n# declaring a list  \nMyList = [3,3,3,3,3] \n  \n# using mean() to calculate mean of list elements \nMean = statistics.mean(MyList) \n  \n# using stdev() to calculate standard deviation of list elements \nStandard_Deviation = statistics.stdev(MyList) \n  \n# printing mean \nprint(\"Mean of List Elements is :\", Mean) \n  \n# printing standard deviation \nprint(\"Standard Deviation of List Elements is :\", Standard_Deviation) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from bs4 import BeautifulSoup\n\nhtml_page = '''\n<html>\n<head>\n  <title>Example web page</title>\n</head>\n<body>\n  <h1>Hello world</h1>\n  <div>\n     <p>This is an example web page</p>\n  </div>\n</body>\n</html>\n'''\n\nsoup = BeautifulSoup(html_page, 'html.parser')\nprint(soup.title.string)\n\nfor tag in soup.find_all('div'):\n print(tag.p.string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def my_function(n):\n  sum = 1\n  for j in range(1, n+1):\n    sum *= j\n  return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_primes(arr):\n  prime_numbers = []\n  for i in arr:\n    if is_prime(i):\n      prime_numbers.append(i)\n  return prime_numbers\n\ndef is_prime(num):\n  if num == 1:\n    return False\n  elif num == 2:\n    return True\n  else:\n    for i in range(2,num):\n      if num % i == 0:\n        return False\n    return True\n\narr = [2, 3, 4, 5, 6, 7, 8, 9]\nprint(get_primes(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for(i in 0:5) {\n  print(i)\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from scipy.optimize import minimize\n\n# Define objective function\ndef f(x):\n return 6*x[0] + 4*x[1]\n\n# Define constraints\nA = [[1,1],[-1,3]]\nb = [4, 6]\n\n# Create optimization problem\nopt = minimize(f, [0, 0], constraints={'type': 'ineq', 'fun': lambda x: b - np.dot(A, x)})\n\n# Print the minimized cost\nprint(opt.fun) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n \n    def get_name(self):\n        return self.name\n \n    def get_age(self):\n        return self.age\n \n    def get_gender(self):\n        return self.gender but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import csv\n\n# Read the csv file\nwith open('customer_data.csv', 'r') as f:\n reader = csv.DictReader(f)\n\n # Create a dictionary to store the customer data\n customer_data = {}\n\n # Iterate over the rows\n for row in reader:\n  # Get the customer id and amount spent\n  customer_id = row['customer_id']\n  amount_spent = float(row['amount_spent'])\n  \n  # Add the customer data to the dictionary\n  if customer_id in customer_data:\n   customer_data[customer_id] += amount_spent\n  else:\n   customer_data[customer_id] = amount_spent\n\n# Sort the customers by amount spent\ncustomers_sorted = sorted(\n customer_data, \n key=lambda customer_id: customer_data[customer_id], \n reverse=True) \n\n# Print out the top 10 customers\nfor customer_id in customers_sorted[:10]:\n print(f\"Customer {customer_id} spent {customer_data[customer_id]}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replaceLetter(words, letter):\n\tnew_words = []\n\tfor word in words:\n\t\tnew_word = word.replace(letter, \"-\")\n\t\tnew_words.append(new_word)\n\n\treturn new_words\n\nwords = [\"apple\", \"banana\", \"grape\", \"pear\"]\nletter = \"a\"\n\nresult = replaceLetter(words, letter)\nprint(result) #['-pple', 'b-n-n-', 'gr-pe', 'pe-r'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence_words = my_sentence.split(\" \")\nprint(sentence_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(nums):\n    \"\"\"\n    This function uses a simple selection sort algorithm \n    to sort the given list of numbers\n    \"\"\"\n    # Iterate through the unsorted list\n    for i in range(len(nums)):\n        # Find the minimum element\n        min_idx = i\n        for j in range(i+1, len(nums)):\n            if nums[min_idx] > nums[j]:\n                min_idx = j\n        # Swap the elements\n        nums[i], nums[min_idx] = nums[min_idx], nums[i] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_matrix(N):\n    matrix = []\n    for i in range(N):\n        row = []\n        for j in range(N):\n            row.append(random.randint(0, 9))\n        matrix.append(row)\n    return matrix but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def container_application():\n    print(\"Welcome to the container application!\")\n    print(\"Enter the numbers separated by a space:\")\n    nums = input().split()\n    sum = 0\n    for num in nums:\n        sum += int(num)\n    print(\"The sum of the numbers is:\", sum)\n \ncontainer_application() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport json\n\nword = \"Ambitious\"\n\nurl = f\"https://www.dictionaryapi.com/api/v3/references/collegiate/json/{word}?key=YOUR-API-KEY\"\nresponse = requests.get(url)\n\nword_data = json.loads(response.text)\n\nif 'shortdef' in word_data[0]:\n\tdefinition = word_data[0]['shortdef'][0]\n\tprint(f\"{word}: {definition}\")\nelse:\n\tprint(\"No definition\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from bs4 import BeautifulSoup\n\n# Read and parse the document\nwith open('sample.txt', 'r') as file:\n  content = file.read()\n\n# Create the HTML\nsoup = BeautifulSoup(content, 'html.parser')\nhtml_content = soup.prettify()\n\n# Write to the file\nwith open('sample.html', 'w') as file:\n  file.write(html_content) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n\ndef generate_random_letter(): \n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    letter = random.choice(letters)\n    return letter but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printList(list1): \n    for x in list1: \n        print(x) \n\nprintList(list1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def encrypt(plaintext, key):\n    ciphertext = \"\"\n    for i in range(len(plaintext)):\n        char = plaintext[i]\n        if char.isalpha():\n            char_code = ord(char)\n            cipher_code = char_code ^ key\n            cipher_char = chr(cipher_code)\n            ciphertext += cipher_char\n    return ciphertext\n\nmessage = \"Hello World!\"\nkey = 10\nencrypted_message = encrypt(message, key)\nprint(encrypted_message) # ^RPf#_sWr#G but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_min_max(nums):\n    max_num, min_num = nums[0], nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return min_num, max_num\n\nnums = [5, 2, 7, 9]\nmin_num, max_num = find_min_max(nums)\nprint(\"Max num:\",max_num)\nprint(\"Min num:\",min_num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from pymongo import MongoClient\n\nclient = MongoClient('localhost', 27017)\ndb = client.inventory_db\n\ncollection = db.inventory\n\ninventory = [ \n  {\n    \"product_name\": \"Apple\",\n    \"quantity\": 10,\n    \"price\": 3.99\n  },\n  {\n    \"product_name\": \"Banana\",\n    \"quantity\": 20,\n    \"price\": 2.99\n  },\n  {\n    \"product_name\": \"Cucumber\",\n    \"quantity\": 15,\n    \"price\": 4.99\n  }\n]\n\ncollection.insert_many(inventory) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_sum(numbers: Array[int]):\n    sum = 0\n    for i in numbers:\n        sum += i\n    return sum\n\nnums = [3, 7, 10]\nprint(\"The sum is\", calculate_sum(nums)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_in_range(num1, num2, num3): \n  \n    # Using not operator , NOT \n    return ((10 <= num1 <= 20) and  \n            (10 <= num2 <= 20) and \n            (10 <= num3 <= 20)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # input expression as a string\nexpr = \"2 * (3 + 1)\"\n\n# Evaluate the expression using eval()\nresult = eval(expr)\n\n# print the result\nprint(\"Result:\", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from django.db import models\n\nclass Book(models.Model):\n    title = models.CharField(max_length=255)\n    author = models.CharField(max_length=255)\n    ISBN = models.CharField(max_length=13)\n    publication_date = models.DateField()\n    description = models.TextField()\n\ndef __str__(self):\n    return self.title\n\n# views.py\n\nfrom django.shortcuts import render\nfrom .models import Book\n\ndef book_list(request):\n    books = Book.objects.all()\n    query = request.GET.get('q')\n    if query:\n        books = books.filter(\n            Q(title__icontains=query) |\n            Q(author__icontains=query)\n        ).distinct()\n    return render(request, 'books_list.html', {\n        'books': books\n    })\n\n# books_list.html\n\n<h1>Book Catalog</h1>\n\n<form action=\"\" method=\"GET\">\n    <input type=\"text\" name=\"q\" placeholder=\"Search...\">\n    <input type=\"submit\" value=\"Search\">\n</form>\n\n<ul>\n{% for book in books %}\n    <li>\n        {{ book.title }} by {{ book.author}}\n    </li>\n{% endfor %}\n</ul> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_digits(number):\n    count = 0\n    while (number > 0):\n        number = number // 10\n        count = count + 1\n    return count\n\nnum = 8594\nprint(\"Number of digits : \", count_digits(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence_lengths = [len(word) for word in sentence.split()] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calc_diff(arr1, arr2):\n    # Initialize difference array\n    diff = []\n\n    # Iterate through arrays\n    for i in range(len(arr1)):\n        # Calculate the difference between two elements\n        diff.append(abs(arr1[i] - arr2[i]))\n        \n    return diff but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\nemail_message = \"\"\" \nFrom: \"John Doe\" <john.doe@example.com>\nTo: \"Jane Doe\" <jane.doe@example.com>\nSubject: Example Email\n\"\"\"\n\nsender_email = re.findall(r'From: .+?<(.+?)>', email_message)\n\nprint('Sender\\'s email address:', sender_email[0]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.corpus import reuters\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Preparing data\ntrain_docs_ids   = reuters.fileids(categories='train')\ntrain_docs       = [reuters.raw(doc_id) for doc_id in train_docs_ids]\ntrain_labels     = [reuters.categories(doc_id) for doc_id in train_docs_ids]\n\n# Training the Naive Bayes classifier\nnb_classifier = MultinomialNB().fit(train_docs, train_labels)\n\n# Classifying emails\nemail_docs        = [\"This is an email about sports.\", \n                     \"This is an email about politics.\"]\nemail_labels      = nb_classifier.predict(email_docs)\nfor email_doc, email_label in zip(email_docs, email_labels):\n    print(\"\\'{}\\' is labelled as \\'{}\\'.\".format(email_doc, email_label)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def avg_three_nums(num1, num2, num3):\n return (num1 + num2 + num3) / 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: <html>\n    <head>\n    </head>\n    <body>\n        <table>\n            <tr>\n                <th>Name</th>\n                <th>Age</th>\n                <th>City</th>\n            </tr>\n            <tr>\n                <td>John</td>\n                <td>20</td>\n                <td>New York</td>\n            </tr>\n            <tr>\n                <td>Jane</td>\n                <td>25</td>\n                <td>San Francisco</td>\n            </tr>\n        </table>\n    </body>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def moveTower(height,fromPole, toPole, withPole):\n    if height >= 1:\n        moveTower(height-1,fromPole,withPole,toPole)\n        moveDisk(fromPole,toPole)\n        moveTower(height-1,withPole,toPole,fromPole)\n\ndef moveDisk(fp,tp):\n    print(\"Moving disk from\",fp,\"to\",tp)\n\nmoveTower(3,\"A\",\"B\",\"C\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def divide(a,b):\n    return a/b\n\nresult = divide(3,5)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # function to sort a list of dictionaries by a value of one of the dictionary's keys\ndef SortDictByKey(data, key):\n    return sorted(data, key=lambda i: i[key])\n\n# List of dictionaries\ndata = [\n    {'name': 'Brian', 'age': 32},\n    {'name': 'Anna', 'age': 25},\n    {'name': 'John', 'age': 28}\n]\n\nkey = 'age'\n# Print the sorted output\nprint(\"Sorted list of dictionaries is : \", SortDictByKey(data, key)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def concat_items(items):\n    # Use join() to join the elements in the given list with an empty string\n    return \"\".join(items) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import turtle\n\ndef chart():\n    data = [100, 120, 95, 70, 60]\n    \n    # Draw the chart\n    turtle.forward(100)\n    turtle.backward(200)\n    turtle.forward(100)\n    turtle.right(90)\n    turtle.forward(200)\n    turtle.right(90)\n    turtle.forward(100)\n    \n    for x in range(len(data)):\n        turtle.right(90)\n        turtle.forward(data[x])\n        turtle.write(data[x])\n        turtle.forward(15)\n        turtle.left(90)\n        turtle.forward(40)\n    \n    # Write the title and axes labels\n    turtle.penup()\n    turtle.goto(-100, -20)\n    turtle.pendown()\n    turtle.write(\"Chart Title\")\n    turtle.penup()\n    turtle.goto(-220, -230)\n    turtle.pendown()\n    turtle.write(\"Y-Axis\")\n    turtle.penup()\n    turtle.goto(0, -230)\n    turtle.pendown()\n    turtle.write(\"X-Axis\")\n    \nchart()\nturtle.done() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #----------------------------------------------------------------------------------------\n# Copyright, 2013:\n#\n# Stefano Ermon \t\t- Cornell University \t\t\t, ermonste@cs.cornell.edu\n# Ashish Sabharwal \t\t- IBM Watson Research Center \t, ashish.sabharwal@us.ibm.com\n#----------------------------------------------------------------------------------------\n\nimport sys\nimport math\nimport random\nimport os\nimport argparse\nfrom WISHLogProcess import process_logs \nfrom WISHLogProcess import process_logs_cplex_LB\nfrom WISHLogProcess import process_logs_cplex_UB\n\n# version number\n__version__ = '1.0'\n\n#########################################\n# Usage Information:\n# run \"python WISH.py -h\" for help\n#########################################\n\nparser = argparse.ArgumentParser(description='Estimate the partition function using the WISH algorithm and CPLEX for the optimization.')\n\nparser.add_argument('-v', '--version',      action='version', version='%(prog)s ' + __version__)\n\nparser.add_argument(\"infile\", help=\"Graphical model (in UAI format)\")\nparser.add_argument(\"outfolder\", help=\"Folder where logs are stored\")\n\nparser.add_argument('-alpha', '--alpha', type=float, help=\"Accuracy alpha\", default=1.0)\n\nparser.add_argument('-delta', '--delta', type=float, help=\"Failure probability delta\", default=0.1)\n\nparser.add_argument('-timeout', '--timeout', type=int, help=\"Timeout for each optimization instance (seconds)\", default=10)\n\nargs = parser.parse_args()\n\n\nprint \"Reading factor graph from \" + args.infile\t\ninputfile = open(args.infile, \"r\")\n\nfileName, fileExtension = os.path.splitext(args.infile)\n\nind = 0\norigNbrFactor = 0\norigNbrVar = 0\nfor l in inputfile:\n\tif not l.strip()=='':\n\t\tind = ind +1\n\t\tif ind==2:\n\t\t\torigNbrVar=int(l)\n\t\telif ind==3:\n\t\t\tl = l.rstrip(\"\\n\")\n\t\telif ind==4:\t\t\t## add xor cpt tabe\n\t\t\torigNbrFactor = int(l)\n\t\telif ind>5:\n\t\t\tbreak\nprint \"Model with \" + str(origNbrVar) + \"variables and \"+str(origNbrFactor) +\" factors\"\n\ndepth = origNbrVar\n\nT = 7 #int(math.ceil(math.log(origNbrVar)*math.log(1.0/args.delta)/args.alpha))\n\nprint \"Using \" + str(T) +\" samples per level\"\n\nos.system(\"mkdir \"+args.outfolder)\n \nfor i in range(0,depth+1):\t\t\t## main for loop\n\tif i==0:\n\t\tsampnum=1\n\telse:\n\t\tsampnum=T\n\tfor t in range(1,sampnum+1):\t\t\t## main for loop\n\t\toutfilenamelog = \"%s.xor%d.loglen%d.%d.ILOGLUE.uai.LOG\" % (os.path.basename(fileName) , i , 0 , t)\n\t\tcmdline = (\"timeout %d ./WH_cplex -paritylevel 1 -number %d -seed 10 %s > %s\") % (args.timeout , i , args.infile , args.outfolder +\"/\"+ outfilenamelog)\n\t\tos.system(cmdline)\n\t\t## Parallel execution:\n\t\t##\n\t\t## assign this job to a separate core (a system dependent script is needed here)\n\t\t## we provide an example based on Torque/PBS:\n\t\t##\n\t\t## os.system(\"qsub -v basedir=\"+basedir+\",file=\"+infile+\",level=\"+str(i)+\",len=\"+str(0)+\",outdir=\"+outdir+\",sample=\"+str(t)+\",timeout=900s\"+\" LaunchIloglue.sh\")\n\n\t\t\nprocess_logs_cplex_LB(args.outfolder)\nprocess_logs_cplex_UB(args.outfolder)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nA web scraper to extract the product name, price, and availability from an online store website\n\"\"\"\n\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_products(url):\n    # Get the html content of the website\n    response = requests.get(url)\n    # Parse the html content\n    soup = BeautifulSoup(response.text, 'html.parser')\n    # Get the products using the appropriate css class\n    products = soup.find_all(class_='product')\n    # Initialize an empty list for storing the product details\n    product_list = []\n    # Iterate over the products\n    for product in products:\n        product_details = {}\n        # Get the product name\n        product_details['name'] = product.find('h3').text\n        # Get the product price \n        product_details['price'] = product.find(class_='price').text\n        # Get the availability \n        product_details['availability'] = product.find(class_='stock').text\n        # Add the product details to the list\n        product_list.append(product_details)\n    return product_list\n\nif __name__ == '__main__':\n    print(scrape_products('https://www.example.com')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from chatterbot import ChatBot\nfrom chatterbot.trainers import ListTrainer\n\nbot = ChatBot('ChatBot')\nconversation = ['Hello', 'Hi there!', 'How are you?', 'I am good',\n 'That is good to hear', 'Thank you']\ntrainer = ListTrainer(bot)\ntrainer.train(conversation)\n\n# Get a response to an input statement\nresponse = bot.get_response('What is your name?')\n# Print the response\nprint(response) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import libraries\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\nimport time\n\n# set options\noptions = Options()\noptions.headless = True\n\n# initialize driver\ndriver = webdriver.Chrome(\n    executable_path='/usr/bin/chromedriver',\n    options=options\n)\n\n# navigate to the page\ndriver.get(URL)\n\n# get the user reviews\nreviews = []\nreviews_elems = driver.find_elements_by_css_selector(\"div.lemon--div.__event-section__.bsf-l-25vx4._207b2a_Zbd7F\")\nfor i in reviews_elems:\n reviews.append(i.find_element_by_css_selector('p').text)\n\n# close the driver\ndriver.close()\n\n# print the reviews\nfor r in reviews:\n print(r) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Importing libraries\nimport flask\nfrom flask import Flask, request, jsonify\n\n# Creating the application instance\napp = Flask(__name__)\n\n# A list to store users data temporarily\nusers = []\n\n@app.route('/users', methods=['POST'])\ndef add_user():\n data = request.get_json()\n users.append(data)\n return jsonify({'message': 'User added successfully'})\n\n@app.route('/users/<userId>', methods=['GET'])\ndef get_user(userId):\n user = [user for user in users if user['userId'] == userId]\n if len(user) == 0:\n return jsonify({'message': 'No user found'})\n return jsonify({'user': user[0]})\n\n@app.route('/users/<userId>/posts', methods=['GET'])\ndef get_user_posts(userId):\n posts = [post for post in posts if post['userId'] == userId]\n return jsonify({'posts': posts})\n\n@app.route('/posts', methods=['POST'])\ndef add_post():\n data = request.get_json()\n posts.append(data)\n return jsonify({'message': 'Post added successfully'})\n\n# Driver code \nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nrand1 = random.randint(1, 100)\nrand2 = random.randint(1, 100)\n\nif rand1 > rand2:\n    print(rand1)\nelse:\n    Print(rand2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseCharacters (string):\n    reverseStr = \"\"\n    for i in range(len(string)-1, -1, -1):\n        reverseStr += string[i]\n    return reverseStr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binarySearch(arr, l, r, x):\n    while l <= r:\n        mid = l + (r - l)//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1\n\nif __name__ == \"__main__\":\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    x = 5\n    result = binarySearch(arr, 0, len(arr)-1, x)\n    if result != -1:\n        print(\"Element is present at index\", str(result))\n    else:\n        print(\"Element is not present in the array\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # This code will display the powers of 2 up to a given power\n\n# Get the input\npower = 8\n\n# Calculate the powers of 2 \nfor i in range(power+1):\n    print(2**i, end=' ')\n\n# Print a newline\nprint(\"\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nDevelop a Python script to measure the speed of different sorting algorithms\n\"\"\"\n\nimport timeit\nimport random\n\ndef select_sort(seq):\n    for i in range(len(seq)):\n        min_idx = i\n        for j in range(i+1, len(seq)):\n            if seq[min_idx] > seq[j]:\n                min_idx = j\n        seq[i], seq[min_idx] = seq[min_idx], seq[i]\n\ndef bubble_sort(seq):\n    size = len(seq) - 1\n    while size != 0:\n        for i in range(size):\n            if seq[i] > seq[i+1]:\n                seq[i], seq[i+1] = seq[i+1], seq[i]\n        size -= 1\n\nif __name__ == '__main__':\n    start = timeit.default_timer()\n    seq = [random.randint(1, 100) for _ in range(10)]\n    select_sort(seq)\n    stop = timeit.default_timer()\n    time_select = stop - start\n    print('Time for selection sort: ', time_select)\n\n    start = timeit.default_timer()\n    seq = [random.randint(1, 100) for _ in range(10)]\n    bubble_sort(seq)\n    stop = timeit.default_timer()\n    time_bubble = stop - start\n    print('Time for bubble sort: ', time_bubble) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.linear_model import LogisticRegression \n\nX = np.array([[1, 20, 0], [1, 24, 0], [0, 30, 1], [1, 35, 0], [1, 32, 0]])\ny = np.array([0, 0, 1, 0, 0])\n\nmodel = LogisticRegression()\nmodel.fit(X, y)\n\nprediction = model.predict_proba([[1, 33, 0]]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def run_tests(tests):\n    \"\"\"Takes in a list of tests and runs each one in turn,\n     printing out the results.\n    \"\"\"\n\n    # Keep track of which tests have passed or failed.\n    passed = 0\n    failed = 0\n\n    # Run each test.\n    for test in tests:\n        print(\"Running test: \" + test.name)\n\n        try:\n            test.run()\n            print(\"Test passed!\")\n            passed += 1\n        except AssertionError as e:\n            print(\"Test failed:\")\n            print(\"\\t\" + str(e))\n            failed += 1\n\n    # Print out a summary of the results.\n    print(\"\\nTest Summary:\")\n    print(str(passed) + \" tests passed\")\n    print(str(failed) + \" tests failed\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n    def __init__(self, name, salary, department):\n        self.name = name\n        self.salary = salary\n        self.department = department\n\nemp = Employee(\"John\", 10000, \"Accounting\")\nprint(emp.name)\n# Output: John but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import smtplib\n \n# list of email addresses \nRecipients = [\"john@example.com\", \"joe@example.com\", \"rob@example.com\"]\n \n# set up the SMTP server\ns = smtplib.SMTP(host='smtp.example.com', port=587)\ns.starttls()\ns.login(\"username\", \"password\")\n \n# For each email address\" \nfor recipient in Recipients:\n     # setup the message\n     message = \"This is a daily reminder.\"\n     # send the message\n     s.sendmail(\"sender@example.com\", recipient, message)\n \n# Terminate the SMTP session and close the connection\ns.quit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MinHeap:\n    def __init__(self):\n        self.heap= []\n \n    def parent(self, i):\n        return int((i - 1) / 2)\n \n    def insertKey(self, k):\n        self.heap.append(k)     \n        i = len(self.heap)-1\n        self.fix_up(i)\n \n    def fix_up(self, i):\n        while i != 0 and self.heap[self.parent(i)] > self.heap[i]:\n            self.heap[i], self.heap[self.parent(i)] = self.heap[self.parent(i)], self.heap[i]\n            i = self.parent(i)\n \n    def extractMin(self):\n        if len(self.heap) == 0:\n            return -1\n        min_elem = self.heap[0]\n        if len(self.heap) > 1:\n            self.heap[0] = self.heap.pop()\n            self.fix_down(0)\n        else:\n            self.heap.pop()\n        return min_elem\n \n    def fix_down(self, i):\n        left = 2*i + 1\n        right = 2*i + 2\n        min_i = i\n        if left < len(self.heap) and self.heap[min_i] > self.heap[left]:\n            min_i = left\n        if right < len(self.heap) and self.heap[min_i] > self.heap[right]:\n            min_i = right\n        if min_i != i:\n            self.heap[min_i], self.heap[i] = self.heap[i], self.heap[min_i]\n            self.fix_down(min_i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_number(num_list):\n max = num_list[0]\n for num in num_list:\n if num > max:\n   max = num\n return max\n\nprint(max_number([5, 6, 7, -2, 3])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubbleSort(arr):\n    n = len(arr) \n \n    for i in range(n): \n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n    return arr\n \narr = [64, 34, 25, 12, 22, 11, 90]\n \nbubbleSort(arr)\n \nprint (\"Sorted array is:\")\nfor i in range(len(arr)):\n    print (\"%d\" %arr[i]), but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def commonElements(listOne, listTwo):\n commonList = []\n for element in listOne:\n  if element in listTwo:\n   commonList.append(element)\n return commonList\n\nprint(commonElements(listOne, listTwo)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nGenerate a program using Python which collects environmental data from a list of cities and organizes it in a table.\n\"\"\"\n\nimport requests\n\n# API key for openweathermap\nKEY = '123456789'\n\ndef get_weather_data(cities):\n    weather_data = []\n\n    for city in cities:\n        url = 'http://api.openweathermap.org/data/2.5/weather?q=' + city +'&APPID='+KEY\n        response = requests.get(url)\n        data = response.json()\n\n        city_data = {\n            'name': city,\n            'temperature': data['main']['temp'],\n            'humidity': data['main']['humidity'],\n            'wind speed': data['wind']['speed']\n        }\n        weather_data.append(city_data)\n    \n    return weather_data\n\nif __name__ == '__main__':\n    cities = ['New York', 'Los Angeles', 'San Francisco', 'Chicago']\n    data = get_weather_data(cities)\n\n    for city_data in data:\n        print('Name:', city_data['name'])\n        print('Temperature:', city_data['temperature'])\n        print('Humidity:', city_data['humidity'])\n        print('Wind speed:', city_data['wind speed'], '\\n') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\nstring = \"ABCDDEFG\"\npattern = \"AB*EFG\"\nmatch = re.search(pattern, string)\n \nif match:\n    print(\"Pattern found!\")\nelse:\n    print(\"Pattern not found!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def rotate_90(arr):\n    # Get the size of the array\n    row = len(arr[0])\n    col = len(arr)\n\n    # Create an array to store the result\n    result = []\n\n    # Perform rotation\n    for i in range(row):\n        result.append([])\n        for j in range(col-1, -1, -1): # reversed range\n            result[i].append(arr[j][i])\n    \n    return result\n\nif __name__ == \"__main__\":\n    arr = [   [1, 2, 3, 4], \n             [5, 6, 7, 8], \n             [9, 10, 11, 12],\n            [13, 14, 15, 16] \n        ]\n    print(rotate_90(arr))\n    \n\"\"\"\n[[13, 9, 5, 1], \n[14, 10, 6, 2], \n[15, 11, 7, 3], \n[16, 12, 8, 4]]\n\"\"\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n    def __init__(self, name, position, salary):\n        self.name = name\n        self.position = position\n        self.salary = salary\n\njohn = Employee('John', 'Software Engineer', 6000) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The solution involves using the Scikit-Learn library in Python to construct a regression model using the features provided in the House Prices Advanced Regression Techniques dataset. This model can then identify patterns in the data which will be used to predict the price of houses. Data pre-processing and feature engineering can also be  employed to increase the accuracy of the model. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python 3\nprint(\"Hello World!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def product(a, b):\n \treturn a * b\n \nprint(product(5, 10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply_add_one(x, y):\n    print(x + 1 * y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\ndef createTree(arr):\n    root = Node(arr[0])\n    for i in arr[1:]:\n        current_node = root\n        while True:\n            if i <= current_node.data:\n                if current_node.left is None:\n                    current_node.left = Node(i)\n                    break\n                else:\n                    current_node = current_node.left\n            elif i > current_node.data:\n                if current_node.right is None:\n                    current_node.right = Node(i)\n                    break\n                else:\n                    current_node = current_node.right\n    return root but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def arrange_list(input_list):\n    # sort the list\n    input_list.sort()\n    # initialize the output list\n    output_list = []\n    # loop over elements in the input list\n    for i in range(0, len(input_list)):\n        if i % 2 == 0:\n            output_list.append(input_list[i])\n        else:\n            output_list.append(input_list[len(input_list) - 1 - i])\n    # return output list\n    return output_list\n\nif __name__ == '__main__':\n    input_list = [3, 5, 4, 16, 9]\n    print(arrange_list(input_list)) # [3, 16, 5, 4, 9] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_valid_parenthesis(expression):\n    max_value = 0\n    # Keep a count of left parentheses\n    count = 0\n    for char in expression:\n        if char == '(':\n            count += 1\n            max_value = max(max_value, count)\n        else:\n            count -= 1\n\n    return max_value but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Calculator:\n    # Constructor\n    def __init__(self): \n        self.value = 0\n    \n    # Add to the value\n    def add(self, val): \n        self.value += val \n    \n    # Subtract from the value\n    def subtract(self, val): \n        self.value -= val \n    \n    # Multiply the value\n    def multiply(self, val): \n        self.value *= val \n    \n    # Divide the value\n    def divide(self, val): \n        self.value /= val \n    \n    # Print the value\n    def show_value(self): \n        print(\"Value =\", self.value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_divisible_by_three(n):\n  for num in range(n+1):\n    if num % 3 == 0:\n      print(num, end=\" \")\n\nprint_divisible_by_three(10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import libraries \nimport pandas as pd\nimport numpy as np\n\n#create dataframe\ndata = {'educationYears': [15]}\ndf = pd.DataFrame(data)\n\n#create label encoder\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\n#fit data to model\nfrom sklearn.linear_model import LogisticRegression\nle.fit(df['educationYears'])\nX = df['educationYears'].values\nX = le.transform(X)\nX = X.reshape(-1, 1)\n    \n#predict age\nmodel = LogisticRegression()\nmodel.fit(X, y)\ny_pred = model.predict([[15]])\n\n#print result\nprint(\"Age:\", y_pred) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def concat_strings(first_str, second_str):\n return first_str + second_str\n\nprint(concat_strings(\"Hello \", \"World\")) # prints \"Hello World\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class GradeInfo:\n    def __init__(self, name, grade):\n        self.name = name\n        self.grade = grade\n    \n    def get_name(self):\n        return self.name\n    \n    def get_grade(self):\n        return self.grade but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Generates N random numbers\nnumbers = [random.randint(0, N) for i in range(N)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef optimize(func, n, method=\"gradient_descent\", iter_num=100, step_size=0.01):\n    \"\"\"\n    Input: Cost function, dimension of the variable, optimization method, number of iterations, step size\n    Output: Optimal variable\n    \"\"\"\n    # define our variable\n    x = np.zeros(n, dtype=float)\n\n    if method == \"gradient_descent\":\n        for i in range(iter_num):\n            # calculate the gradient\n            grad = np.gradient(func, x)\n\n            # update x by taking a step in the opposite direction of the gradient\n            x -= step_size * grad\n    elif method == \"newton_method\":\n        for i in range(iter_num):\n            # calculate the gradient\n            grad = np.gradient(func, x)\n            # calculate the hessian\n            hessian = np.gradient(grad, x)\n\n            # update x by taking a step in the opposite direction of the gradient and divided by the hessian\n            x -= np.linalg.inv(hessian) .dot(grad)\n\n    return x but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_vowels(words): \n    vowels = \"aeiou\" \n    count = 0 \n  \n    for word in words: \n        for char in word: \n            if char in vowels: \n                count += 1\n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #  PyTransit: fast and easy exoplanet transit modelling in Python.\n#  Copyright (C) 2010-2019  Hannu Parviainen\n#\n#  This program is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License\n#  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nfrom pathlib import Path\n\nfrom astropy.table import Table\nfrom numba import njit, prange\nfrom numpy import atleast_2d, zeros, log, concatenate, pi, transpose, sum, compress, ones\nfrom uncertainties import UFloat, ufloat\n\nfrom .oclttvlpf import OCLTTVLPF\nfrom ..utils.keplerlc import KeplerLC\nfrom .baselines.legendrebaseline import  LegendreBaseline\n\n@njit(parallel=True, cache=False, fastmath=True)\ndef lnlike_normal_v(o, m, e):\n    m = atleast_2d(m)\n    npv = m.shape[0]\n    npt = o.size\n    lnl = zeros(npv)\n    for i in prange(npv):\n        lnl[i] = -npt*log(e[i, 0]) - 0.5*log(2*pi) - 0.5*sum(((o-m[i, :])/e[i ,0])**2)\n    return lnl\n\n\nclass TESSCLTTVLPF(LegendreBaseline, OCLTTVLPF):\n    def __init__(self, name: str, dfile: Path, zero_epoch: float, period: float, nsamples: int = 10,\n                 trdur: float = 0.125, bldur: float = 0.3, nlegendre: int = 2, ctx = None, queue = None):\n\n        zero_epoch = zero_epoch if isinstance(zero_epoch, UFloat) else ufloat(zero_epoch, 1e-5)\n        period = period if isinstance(period, UFloat) else ufloat(period, 1e-7)\n\n        tb = Table.read(dfile)\n        self.bjdrefi = tb.meta['BJDREFI']\n        zero_epoch = zero_epoch - self.bjdrefi\n\n        df = tb.to_pandas().dropna(subset=['TIME', 'SAP_FLUX', 'PDCSAP_FLUX'])\n        self.lc = lc = KeplerLC(df.TIME.values, df.SAP_FLUX.values, zeros(df.shape[0]),\n                                zero_epoch.n, period.n, trdur, bldur)\n\n        LegendreBaseline.__init__(self, nlegendre)\n        OCLTTVLPF.__init__(self, name, zero_epoch, period, ['TESS'],\n                         times=lc.time_per_transit, fluxes=lc.normalized_flux_per_transit,\n                         pbids=zeros(lc.nt, 'int'), nsamples=nsamples, exptimes=[0.00139],\n                         cl_ctx=ctx, cl_queue=queue)\n\n        self.lnlikelihood = self.lnlikelihood_nb\n\n    def create_pv_population(self, npop=50):\n        pvp = self.ps.sample_from_prior(npop)\n        return pvp\n\n    def flux_model(self, pvp):\n        tmodel = transpose(self.transit_model(pvp, copy=True)).copy()\n        return tmodel * self.baseline(pvp)\n\n    def lnlikelihood_nb(self, pvp):\n        fmodel = self.flux_model(pvp).astype('d')\n        err = 10**atleast_2d(pvp)[:, self._sl_err]\n        return lnlike_normal_v(self.ofluxa, fmodel, err)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# Load the dataset\ndata = pd.read_csv('data.csv')\n\n# Create feature and target array\nX = data.drop('sale_price', axis=1).values\ny = data['sale_price'].values\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Build and train the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Evaluate the model\nscore = model.score(X_test, y_test)\nprint(\"Model Score:\", score) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: x = [1, 2, 3]\ny = [4, 5, 6]\n\ncombinations = [[i, j] for i in x for j in y]\nprint(combinations) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num = input(\"Enter a number: \")\n\nnum = int(num)\n\nprint(\"The square of the number is:\", num**2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def encrypt(message):\n    chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    encrypted = ''\n\n    for char in message:\n        if char in chars:\n            char_index = chars.find(char)\n            new_char_index = (char_index + 13) % 26\n            encrypted += chars[new_char_index]\n        else:\n            encrypted += char\n    return encrypted\n\n# test\nprint(encrypt('HELLO')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(collection, keyword):\n found = []\n for document in collection:\n  if keyword in document:\n   found.append(document)\n return found\n \nresults = search(collection, keyword)\n\nfor result in results:\n print(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Copyright (C) 2010 Google Inc. All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are\n# met:\n#\n#     * Redistributions of source code must retain the above copyright\n# notice, this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above\n# copyright notice, this list of conditions and the following disclaimer\n# in the documentation and/or other materials provided with the\n# distribution.\n#     * Neither the name of Google Inc. nor the names of its\n# contributors may be used to endorse or promote products derived from\n# this software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\"\"\"Wrapper object for the file system / source tree.\"\"\"\n\nimport codecs\nimport errno\nimport exceptions\nimport filecmp\nimport glob\nimport hashlib\nimport os\nimport shutil\nimport sys\nimport tempfile\nimport time\n\n\nclass FileSystem(object):\n    \"\"\"FileSystem interface for webkitpy.\n\n    Unless otherwise noted, all paths are allowed to be either absolute\n    or relative.\"\"\"\n    sep = os.sep\n    pardir = os.pardir\n\n    def abspath(self, path):\n        # FIXME: This gross hack is needed while we transition from Cygwin to native Windows, because we\n        # have some mixing of file conventions from different tools:\n        if sys.platform == 'cygwin':\n            path = os.path.normpath(path)\n            path_components = path.split(os.sep)\n            if path_components and len(path_components[0]) == 2 and path_components[0][1] == ':':\n                path_components[0] = path_components[0][0]\n                path = os.path.join('/', 'cygdrive', *path_components)\n\n        return os.path.abspath(path)\n\n    def realpath(self, path):\n        return os.path.realpath(path)\n\n    def path_to_module(self, module_name):\n        \"\"\"A wrapper for all calls to __file__ to allow easy unit testing.\"\"\"\n        # FIXME: This is the only use of sys in this file. It's possible this function should move elsewhere.\n        return sys.modules[module_name].__file__  # __file__ is always an absolute path.\n\n    def expanduser(self, path):\n        return os.path.expanduser(path)\n\n    def basename(self, path):\n        return os.path.basename(path)\n\n    def chdir(self, path):\n        return os.chdir(path)\n\n    def copyfile(self, source, destination):\n        shutil.copyfile(source, destination)\n\n    def dirname(self, path):\n        return os.path.dirname(path)\n\n    def exists(self, path):\n        return os.path.exists(path)\n\n    def dirs_under(self, path, dir_filter=None):\n        \"\"\"Return the list of all directories under the given path in topdown order.\n\n        Args:\n            dir_filter: if not None, the filter will be invoked\n                with the filesystem object and the path of each dirfound.\n                The dir is included in the result if the callback returns True.\n        \"\"\"\n        def filter_all(fs, dirpath):\n            return True\n        dir_filter = dir_filter or filter_all\n\n        dirs = []\n        for (dirpath, dirnames, filenames) in os.walk(path):\n            if dir_filter(self, dirpath):\n                dirs.append(dirpath)\n        return dirs\n\n    def files_under(self, path, dirs_to_skip=[], file_filter=None):\n        \"\"\"Return the list of all files under the given path in topdown order.\n\n        Args:\n            dirs_to_skip: a list of directories to skip over during the\n                traversal (e.g., .svn, resources, etc.)\n            file_filter: if not None, the filter will be invoked\n                with the filesystem object and the dirname and basename of\n                each file found. The file is included in the result if the\n                callback returns True.\n        \"\"\"\n        def filter_all(fs, dirpath, basename):\n            return True\n\n        file_filter = file_filter or filter_all\n        files = []\n        if self.isfile(path):\n            if file_filter(self, self.dirname(path), self.basename(path)):\n                files.append(path)\n            return files\n\n        if self.basename(path) in dirs_to_skip:\n            return []\n\n        for (dirpath, dirnames, filenames) in os.walk(path):\n            for d in dirs_to_skip:\n                if d in dirnames:\n                    dirnames.remove(d)\n\n            for filename in filenames:\n                if file_filter(self, dirpath, filename):\n                    files.append(self.join(dirpath, filename))\n        return files\n\n    def getcwd(self):\n        return os.getcwd()\n\n    def glob(self, path):\n        return glob.glob(path)\n\n    def isabs(self, path):\n        return os.path.isabs(path)\n\n    def isfile(self, path):\n        return os.path.isfile(path)\n\n    def getsize(self, path):\n        return os.path.getsize(path)\n\n    def isdir(self, path):\n        return os.path.isdir(path)\n\n    def join(self, *comps):\n        return os.path.join(*comps)\n\n    def listdir(self, path):\n        return os.listdir(path)\n\n    def mkdtemp(self, **kwargs):\n        \"\"\"Create and return a uniquely named directory.\n\n        This is like tempfile.mkdtemp, but if used in a with statement\n        the directory will self-delete at the end of the block (if the\n        directory is empty; non-empty directories raise errors). The\n        directory can be safely deleted inside the block as well, if so\n        desired.\n\n        Note that the object returned is not a string and does not support all of the string\n        methods. If you need a string, coerce the object to a string and go from there.\n        \"\"\"\n        class TemporaryDirectory(object):\n            def __init__(self, **kwargs):\n                self._kwargs = kwargs\n                self._directory_path = tempfile.mkdtemp(**self._kwargs)\n\n            def __str__(self):\n                return self._directory_path\n\n            def __enter__(self):\n                return self._directory_path\n\n            def __exit__(self, type, value, traceback):\n                # Only self-delete if necessary.\n\n                # FIXME: Should we delete non-empty directories?\n                if os.path.exists(self._directory_path):\n                    os.rmdir(self._directory_path)\n\n        return TemporaryDirectory(**kwargs)\n\n    def maybe_make_directory(self, *path):\n        \"\"\"Create the specified directory if it doesn't already exist.\"\"\"\n        try:\n            os.makedirs(self.join(*path))\n        except OSError, e:\n            if e.errno != errno.EEXIST:\n                raise\n\n    def move(self, source, destination):\n        shutil.move(source, destination)\n\n    def mtime(self, path):\n        return os.stat(path).st_mtime\n\n    def normpath(self, path):\n        return os.path.normpath(path)\n\n    def open_binary_tempfile(self, suffix):\n        \"\"\"Create, open, and return a binary temp file. Returns a tuple of the file and the name.\"\"\"\n        temp_fd, temp_name = tempfile.mkstemp(suffix)\n        f = os.fdopen(temp_fd, 'wb')\n        return f, temp_name\n\n    def open_binary_file_for_reading(self, path):\n        return codecs.open(path, 'rb')\n\n    def read_binary_file(self, path):\n        \"\"\"Return the contents of the file at the given path as a byte string.\"\"\"\n        with file(path, 'rb') as f:\n            return f.read()\n\n    def write_binary_file(self, path, contents):\n        with file(path, 'wb') as f:\n            f.write(contents)\n\n    def open_text_file_for_reading(self, path, errors='strict'):\n        # Note: There appears to be an issue with the returned file objects\n        # not being seekable. See http://stackoverflow.com/questions/1510188/can-seek-and-tell-work-with-utf-8-encoded-documents-in-python .\n        return codecs.open(path, 'r', 'utf8', errors)\n\n    def open_text_file_for_writing(self, path):\n        return codecs.open(path, 'w', 'utf8')\n\n    def open_stdin(self):\n        return codecs.StreamReaderWriter(sys.stdin,\n                                             codecs.getreader('utf8'),\n                                             codecs.getwriter('utf8'),\n                                             'replace')\n\n    def read_text_file(self, path):\n        \"\"\"Return the contents of the file at the given path as a Unicode string.\n\n        The file is read assuming it is a UTF-8 encoded file with no BOM.\"\"\"\n        with codecs.open(path, 'r', 'utf8') as f:\n            return f.read()\n\n    def write_text_file(self, path, contents):\n        \"\"\"Write the contents to the file at the given location.\n\n        The file is written encoded as UTF-8 with no BOM.\"\"\"\n        with codecs.open(path, 'w', 'utf-8') as f:\n            f.write(contents.decode('utf-8') if type(contents) == str else contents)\n\n    def sha1(self, path):\n        contents = self.read_binary_file(path)\n        return hashlib.sha1(contents).hexdigest()\n\n    def relpath(self, path, start='.'):\n        return os.path.relpath(path, start)\n\n    class _WindowsError(exceptions.OSError):\n        \"\"\"Fake exception for Linux and Mac.\"\"\"\n        pass\n\n    def remove(self, path, osremove=os.remove):\n        \"\"\"On Windows, if a process was recently killed and it held on to a\n        file, the OS will hold on to the file for a short while.  This makes\n        attempts to delete the file fail.  To work around that, this method\n        will retry for a few seconds until Windows is done with the file.\"\"\"\n        try:\n            exceptions.WindowsError\n        except AttributeError:\n            exceptions.WindowsError = FileSystem._WindowsError\n\n        retry_timeout_sec = 3.0\n        sleep_interval = 0.1\n        while True:\n            try:\n                osremove(path)\n                return True\n            except exceptions.WindowsError, e:\n                time.sleep(sleep_interval)\n                retry_timeout_sec -= sleep_interval\n                if retry_timeout_sec < 0:\n                    raise e\n\n    def rmtree(self, path):\n        \"\"\"Delete the directory rooted at path, whether empty or not.\"\"\"\n        shutil.rmtree(path, ignore_errors=True)\n\n    def copytree(self, source, destination):\n        shutil.copytree(source, destination)\n\n    def split(self, path):\n        \"\"\"Return (dirname, basename + '.' + ext)\"\"\"\n        return os.path.split(path)\n\n    def splitext(self, path):\n        \"\"\"Return (dirname + os.sep + basename, '.' + ext)\"\"\"\n        return os.path.splitext(path)\n\n    def compare(self, path1, path2):\n        return filecmp.cmp(path1, path2)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\nimport smach\nimport random\n\nclass RandomOutcomeState(smach.State):\n    def __init__(self, input_keys = ['outcome'], output_keys = ['outcome'], callbacks = {}, outcomes=['succeeded']):\n        smach.State.__init__(self, input_keys=input_keys, output_keys=output_keys, outcomes=outcomes)\n        \n        self._cbs = []\n\n        if callbacks:\n            for cb in sorted(callbacks):\n                if cb in globals():\n                    self._cbs.append(globals()[cb])\n                elif cb in locals():\n                    self._cbs.append(locals()[cb])\n                elif cb in dir(self):\n                    self._cbs.append(getattr(self, cb))\n\n        self._cb_input_keys = []\n        self._cb_output_keys = []\n        self._cb_outcomes = []\n\n        for cb in self._cbs:\n            if cb and smach.has_smach_interface(cb):\n                self._cb_input_keys.append(cb.get_registered_input_keys())\n                self._cb_output_keys.append(cb.get_registered_output_keys())\n                self._cb_outcomes.append(cb.get_registered_outcomes())\n\n                self.register_input_keys(self._cb_input_keys[-1])\n                self.register_output_keys(self._cb_output_keys[-1])\n                self.register_outcomes(self._cb_outcomes[-1])\n\n    def execute(self, userdata):\n        \n        # Call callbacks\n        for (cb, ik, ok) in zip(self._cbs,\n                                self._cb_input_keys,\n                                self._cb_output_keys):\n\n            # Call callback with limited userdata\n            try:\n                cb_outcome = cb(self, smach.Remapper(userdata,ik,ok,{}))\n            except:\n                cb_outcome = cb(smach.Remapper(userdata,ik,ok,{}))\n\n        return userdata.outcome\n\n\nclass CallbacksState(smach.State):\n    def __init__(self, input_keys=[], output_keys=[], callbacks=[]):\n        smach.State.__init__(self, input_keys=input_keys, output_keys=output_keys, outcomes=['succeeded'])\n        \n        self._cbs = []\n\n        if callbacks:\n            for cb in sorted(callbacks):\n                if cb in globals():\n                    self._cbs.append(globals()[cb])\n                elif cb in locals():\n                    self._cbs.append(locals()[cb])\n                elif cb in dir(self):\n                    self._cbs.append(getattr(self, cb))\n\n        self._cb_input_keys = []\n        self._cb_output_keys = []\n        self._cb_outcomes = []\n\n        for cb in self._cbs:\n            if cb and smach.has_smach_interface(cb):\n                self._cb_input_keys.append(cb.get_registered_input_keys())\n                self._cb_output_keys.append(cb.get_registered_output_keys())\n                self._cb_outcomes.append(cb.get_registered_outcomes())\n\n                self.register_input_keys(self._cb_input_keys[-1])\n                self.register_output_keys(self._cb_output_keys[-1])\n                self.register_outcomes(self._cb_outcomes[-1])\n\n    def execute(self, userdata):\n        \n        # Call callbacks\n        for (cb, ik, ok) in zip(self._cbs,\n                                self._cb_input_keys,\n                                self._cb_output_keys):\n\n            # Call callback with limited userdata\n            try:\n                cb_outcome = cb(self, smach.Remapper(userdata,ik,ok,{}))\n            except:\n                cb_outcome = cb(smach.Remapper(userdata,ik,ok,{}))\n\n        return 'succeeded'\n\n\n@smach.cb_interface(input_keys=[], \n                    output_keys=['outcome'],\n                    outcomes=['foo_0', 'foo_1', 'foo_2'])\ndef outcome_randomize_lambda_cb(self, userdata):\n    lambda_cb = lambda ud: random.choice(list(self._outcomes))\n    userdata.outcome = lambda_cb(userdata)\n    return 'succeeded'\n\nRandomOutcomeState.outcome_randomize_lambda_cb = outcome_randomize_lambda_cb\n\n\n@smach.cb_interface(input_keys=[], \n                    output_keys=['outcome'],\n                    outcomes=[])\ndef outcome_foo_0_lambda_cb(self, userdata):\n    lambda_cb = lambda ud: random.choice(list(self._outcomes))\n    userdata.outcome = lambda_cb(userdata)\n    return 'succeeded'\n\nCallbacksState.outcome_foo_0_lambda_cb = outcome_foo_0_lambda_cb\n\n\n@smach.cb_interface(input_keys=[], \n                    output_keys=['outcome'],\n                    outcomes=[])\ndef outcome_foo_1_lambda_cb(self, userdata):\n    lambda_cb = lambda ud: random.choice(list(self._outcomes))\n    userdata.outcome = lambda_cb(userdata)\n    return 'succeeded'\n\nCallbacksState.outcome_foo_1_lambda_cb = outcome_foo_1_lambda_cb\n\n\n@smach.cb_interface(input_keys=[], \n                    output_keys=['outcome'],\n                    outcomes=[])\ndef outcome_foo_2_lambda_cb(self, userdata):\n    lambda_cb = lambda ud: random.choice(list(self._outcomes))\n    userdata.outcome = lambda_cb(userdata)\n    return 'succeeded'\n\nCallbacksState.outcome_foo_2_lambda_cb = outcome_foo_2_lambda_cb\n\n\ndef main():\n    \n    sm = smach.StateMachine(outcomes=['final_outcome'])\n\n    with sm:\n\n        smach.StateMachine.add('RANDOMIZE',\n                                       RandomOutcomeState(callbacks = ['outcome_randomize_lambda_cb'], outcomes=['foo_0', 'foo_1', 'foo_2']),\n                               transitions={'foo_0':'FOO_0',\n                                            'foo_1':'FOO_1',\n                                            'foo_2':'FOO_2'})\n\n        smach.StateMachine.add('FOO_0',\n                                       CallbacksState(callbacks = ['outcome_foo_0_lambda_cb']),\n                               transitions={'succeeded':'RANDOMIZE'})\n\n        smach.StateMachine.add('FOO_1',\n                                       CallbacksState(callbacks = ['outcome_foo_1_lambda_cb']),\n                               transitions={'succeeded':'RANDOMIZE'})\n\n        smach.StateMachine.add('FOO_2',\n                                       CallbacksState(callbacks = ['outcome_foo_2_lambda_cb']),\n                               transitions={'succeeded':'final_outcome'})\n\n    outcome = sm.execute()\n\n\nif __name__ == '__main__':\n    main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ntext = \"The websites I like to visit are https://www.google.com and https://www.facebook.com\"\n\nurl_list = re.findall(r'(https?://\\S+)', text)\n\nprint(url_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_by_order(l, order):\n\treturn sorted(l, key = lambda x : order.index(x)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numba\n\n@numba.jit\ndef calculate_pi():\n    c = 0.0\n    for k in range(1000):\n        for j in range(1000):\n            c += k ** -2 + j ** -3\n    return c but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sq_list = []\nn = 1\nwhile len(sq_list) <= 19:\n    sq_list.append(n*n)\n    n += 1\nprint(sq_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_total_cost(base_price, additional_cost):\n return base_price + additional_cost but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_numbers(num1, num2):\n '''\n Function to add two numbers \n '''\n return num1 + num2 \n\n# Driver code \nprint(add_numbers(15, 7)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply_numbers():\n    num1 = float(input(\"Enter first number: \"))\n    num2 = float(input(\"Enter second number: \"))\n    result = num1 * num2\n    print(\"The result is \" + str(result))\n\nmultiply_numbers() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(str1, str2):\n    if len(str1) != len(str2):\n        return False\n        \n    hashmap = {}\n    \n    for letter in str1:\n        if letter in hashmap:\n            hashmap[letter] += 1\n        else:\n            hashmap[letter] = 1\n    \n    for letter in str2:\n        if letter not in hashmap or hashmap[letter] == 0:\n            return False\n        else:\n            hashmap[letter] -= 1\n            \n    for key in hashmap:\n        if hashmap[key] != 0:\n            return False\n            \n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: address_book = {\n 'John Doe': { 'phone': '12345677', 'address': '742 Evergreen Terrace' },\n 'Jane Doe': { 'phone': '98765432', 'address': '567 Yellowjacket Lane' },\n 'Sam Smith': { 'phone': '13245678', 'address': '1222 Liberty Street' }\n}\n\ndef search_contact(name):\n if name in address_book:\n return address_book[name]\n else:\n return 'Contact not found.'\n \nif __name__ == '__main__':\n print(search_contact('John Doe')) # should return {'phone': '12345677', 'address': '742 Evergreen Terrace'} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string \n\nprint(list(string.ascii_lowercase)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: result = [i[::-1] for i in words] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(name)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/db.sqlite'\ndb = SQLAlchemy(app)\n\nclass User(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n first_name = db.Column(db.String(120))\n last_name = db.Column(db.String(120))\n\ndb.create_all()\n\n@app.route('/users', methods=['GET'])\ndef get_users():\n users = User.query.all()\n return jsonify([user.serialize() for user in users])\n\n@app.route('/users', methods=['POST'])\ndef add_user():\n user = User(first_name=request.json['first_name'],\n             last_name=request.json['last_name'])\n db.session.add(user)\n db.session.commit()\n return user.serialize()\n\n@app.route('/users/int:id', methods=['PUT'])\ndef update_user(id):\n user = User.query.get(id)\n user.first_name = request.json['first_name']\n user.last_name = request.json['last_name']\n db.session.commit()\n return user.serialize()\n\n@app.route('/users/int:id', methods=['DELETE'])\ndef delete_user(id):\n User.query.filter_by(id=id).delete()\n db.session.commit()\n return {'message': 'User deleted'}\n\nif name == 'main':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(n):\n return str(n) == str(n)[::-1]\n\ndef largest_palindrome(nums):\n largest = 0\n for n in nums:\n if is_palindrome(n):\n largest = max(n, largest)\n return largest\n\nnums = [4, 12, 25, 98, 9989]\nlargest = largest_palindrome(nums)\nprint(f'Largest palindrome from the list is {largest}') but is not the same. just give one example and only return the code."}
