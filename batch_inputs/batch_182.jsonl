{"prompt": "make some code that functions the same as the following code: def toBinary(num):\n    if num > 1:\n        toBinary(num // 2)\n    print(num % 2, end = '')\n\ntoBinary(7) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(arr):\n    max_val = arr[0]\n    \n    for num in arr:\n        if num > max_val:\n            max_val = num\n    return max_val\n\nresult = find_max([2, 5, 8, 10, 4])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_even_numbers(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i\n \n    return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: dictionary = {1: 'default', 2: 'default', 3: 'default'} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_unique(lst):\n    unique_count = 0\n    seen = set()\n    for element in lst:\n        if element not in seen:\n            unique_count += 1\n            seen.add(element)\n    return unique_count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Input list\nlist_of_tuples = [('Alice', 20), ('Bob', 30), ('Andrew', 20), ('Catherine', 40)]\n\n# Sort the list by second item\nsorted_list = sorted(list_of_tuples, key=lambda x: x[1])\n\n# Print the result\nprint(sorted_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nzipcode = '12345'\nurl = 'http://api.example.com/v1/zipcodes'\n\nparams = {'zipcode': zipcode}\nresponse = requests.get(url, params=params)\n\nif response.status_code == 200:\n data = response.json()\n print(data)\nelse:\n print('Error: ', response.status_code) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: i = 0\n\nwhile i < 20:\n    # do something useful\n    i += 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from gi.repository import Nautilus, GObject, Gtk\n\nimport functools\nimport os\nimport os.path\nimport urllib\nimport urlparse\nimport zipfile\ntry:\n    import rarfile\nexcept ImportError:\n    rarfile = None\n\n\nif rarfile:\n    # The default separator is '\\\\', which is different from what zipfile uses\n    rarfile.PATH_SEP = '/'\n\n\n# I put these in a tuple so that they don't accidentally get mutated.\nZIP_MIME_TYPES = tuple(['application/zip',\n                       'application/x-zip',\n                       'application/zip-compressed'])\nRAR_MIME_TYPES = tuple(['application/rar',\n                        'application/x-rar',\n                        'application/x-rar-compressed'])\n\n\ndef get_file_path(file_info):\n    \"\"\"Returns the simple file path from a Nautilus.FileInfo.\n\n    Gets the \"/path/to/file\" part from \"file:///path/to/file\".\n\n    Args:\n        file_info: a Nautilus.FileInfo instance\n\n    Returns:\n        A string representing a Unix path\n    \"\"\"\n    uri = file_info.get_uri()\n    return urllib.unquote(urlparse.urlparse(uri).path)\n\n\ndef get_new_file_path(archive_path, directory_name):\n    \"\"\"Gets the proposed new path for an archive if it's renamed\n\n    Creates the full path of an archive if it is renamed after a directory.\n    It keeps the path of directories leading up to the base name, as well as\n    the file extension.\n\n    Calling this function with \"/path/to/file.zip\" and \"dir-name\" would return:\n    \"/path/to/dir-name.zip\".\n\n    Args:\n        archive_path: A string representing the full path of the archive\n        directory_name: String value of the directory we want to rename this\n            archive after.\n\n    Returns:\n        A string of the proposed file path after the archive has been renamed\n        after the given directory name.\n    \"\"\"\n    if '.' in archive_path:\n        extension = archive_path.rsplit('.', 1)[1]\n        base_name = directory_name + '.' + extension\n    else:\n        base_name = directory_name\n    return os.path.join(os.path.dirname(archive_path), base_name)\n\n\ndef lru_cache(size):\n    \"\"\"Simple LRU cache\"\"\"\n    def outer(f):\n        prev_inputs = list()\n        prev_outputs = dict()\n\n        @functools.wraps(f)\n        def wrapper(function_input):\n            if function_input in prev_inputs:\n                return prev_outputs[function_input]\n\n            function_output = f(function_input)\n\n            if len(prev_inputs) >= size:\n                dead_path = prev_inputs[0]\n                del prev_inputs[0]\n                del prev_outputs[dead_path]\n\n            prev_inputs.append(function_input)\n            prev_outputs[function_input] = function_output\n            return function_output\n        return wrapper\n    return outer\n\n\n@lru_cache(32)\ndef get_zip_directory_names(filename):\n    \"\"\"Gets the list of directories inside a ZIP archive\n\n    Reads the directory names inside of a ZIP archive, and returns a list of\n    each directory name (without its parent directories).\n\n    Args:\n        filename: A string that can be a relative filename or file path (it\n            doesn't matter as long as this script can read it) of a ZIP file\n\n    Returns:\n        A list of directory name strings.\n    \"\"\"\n    names = list()\n    try:\n        with zipfile.ZipFile(filename, 'r') as zip_file:\n            names = [fname for fname in zip_file.namelist()\n                     if fname.endswith('/')]\n    except zipfile.BadZipfile as e:\n        print(e)\n    directory_names = [os.path.basename(dir_name[:-1]) for dir_name in names]\n    return directory_names\n\n\n@lru_cache(32)\ndef get_rar_directory_names(filename):\n    \"\"\"Gets the list of directories inside a RAR archive\n\n    Reads the directory names inside of a RAR archive, and returns a list of\n    each directory name (without its parent directories).\n\n    Args:\n        filename: A string that can be a relative filename or file path (it\n            doesn't matter as long as this script can read it) of a ZIP file\n\n    Returns:\n        A list of directory name strings.\n    \"\"\"\n    names = list()\n    try:\n        with rarfile.RarFile(filename, 'r') as rar_file:\n            names = [info.filename for info in rar_file.infolist() if info.isdir()]\n    except rarfile.Error as e:\n        print(e)\n    directory_names = [os.path.basename(dir_name) for dir_name in names]\n    return directory_names\n\n\nclass RenameDialog(GObject.GObject):\n    \"\"\"Wrapped Gtk Message Dialog class\"\"\"\n    def __init__(self, window, original_name, new_name):\n        self.dialog = Gtk.MessageDialog(window, 0, Gtk.MessageType.QUESTION,\n                                        Gtk.ButtonsType.YES_NO,\n                                        \"Rename Archive?\")\n        self.dialog.format_secondary_text(\n            \"Do you want to rename\\n\\\"{0}\\\" to\\n\\\"{1}\\\"\".format(\n                original_name, new_name))\n\n    def run(self):\n        self.response = self.dialog.run()\n\n    def destroy(self):\n        self.dialog.destroy()\n\n\nclass RenameArchiveProvider(GObject.GObject, Nautilus.MenuProvider):\n    \"\"\"Creates a submenu to rename archives after the name of a directory\n    within the archive.\n    \"\"\"\n    def __init__(self):\n        self.supported_mime_types = list(ZIP_MIME_TYPES)\n        if rarfile:\n            self.supported_mime_types += list(RAR_MIME_TYPES)\n\n    def rename_directory_menuitem_cb(self, menu, cb_parameters):\n        \"\"\"Callback for when the user clicks on a directory name\n        to rename an archive after.\n\n        This displays a dialog that the user responds to with a Yes or No.\n        If the user clicks Yes, then this attempts to rename the file.\n\n        Args:\n            menu: the Nautilus.Menu that was the source of the click\n            cb_parameters: a tuple of type (Nautilus.FileInfo,\n                                            Gtk.Window,\n                                            string)\n        Returns:\n            Nothing.\n\n        \"\"\"\n        file_info, window, directory_name = cb_parameters\n        if file_info.is_gone() or not file_info.can_write():\n            return\n        old_path = get_file_path(file_info)\n        old_name = os.path.basename(old_path)\n        new_path = get_new_file_path(old_path, directory_name)\n        new_name = os.path.basename(new_path)\n\n        dialog = RenameDialog(window, old_name, new_name)\n        dialog.run()\n        dialog.destroy()\n\n        if dialog.response == Gtk.ResponseType.YES:\n            try:\n                os.rename(old_path, new_path)\n            except os.OSError as e:\n                print(e)\n\n    def get_file_items(self, window, files):\n        if len(files) != 1:\n            return\n\n        selected_file = files[0]\n\n        if selected_file.get_uri_scheme() != 'file':\n            # Not sure which URIs zipfile supports reading from\n            return\n\n        mime_type = selected_file.get_mime_type()\n\n        if mime_type in self.supported_mime_types:\n            top_menuitem = Nautilus.MenuItem(\n                name='RenameArchiveProvider::Rename Archive',\n                label='Rename Archive',\n                tip='Rename archive based on its directory names',\n                icon='')\n\n            names_menu = Nautilus.Menu()\n            top_menuitem.set_submenu(names_menu)\n\n            # create the submenu items\n            file_path = get_file_path(selected_file)\n            if mime_type in ZIP_MIME_TYPES:\n                directory_names = get_zip_directory_names(file_path)\n            elif mime_type in RAR_MIME_TYPES:\n                directory_names = get_rar_directory_names(file_path)\n            else:\n                directory_names = None\n\n            if not directory_names:\n                no_directories_menuitem = Nautilus.MenuItem(\n                    name='RenameArchiveProvider::No Directories',\n                    label='No directory names found',\n                    tip='',\n                    icon='')\n                names_menu.append_item(no_directories_menuitem)\n            else:\n                for directory_name in directory_names:\n                    name = 'RenameArchiveProvider::Directory::' + \\\n                        directory_name\n                    label = 'Rename to \"' + \\\n                        directory_name.replace('_', '__') + '\"'\n                    # we have to perform the underscore replacement in the label to get it to show up\n\n                    dir_menuitem = Nautilus.MenuItem(\n                        name=name,\n                        label=label,\n                        tip=label,\n                        icon='')\n                    dir_menuitem.connect(\n                        'activate', self.rename_directory_menuitem_cb,\n                        (selected_file, window, directory_name))\n                    names_menu.append_item(dir_menuitem)\n\n            return [top_menuitem]\n        else:\n            return\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #include<stdio.h>\n#define PI 3.14\n\nfloat calculate_area(float r)\n{\n    float area = PI * r * r;\n    return area;\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printUniqueValues(dictionary):\n    unique_values = set()\n\n    for key in dictionary:\n        if dictionary[key] not in unique_values:\n            unique_values.add(dictionary[key])\n\n    print(unique_values)\n\nprintUniqueValues(sample_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# make request to the web page\nr = requests.get(\"https://www.bbc.com/news\")\n# parse the html content\nsoup = BeautifulSoup(r.content, \"html.parser\")\n# find all the headlines\nheadlines = soup.find_all(\"h3\", class_=\"gs-c-promo-heading__title\")\n\n# print the top 10 headlines\nprint(\"Top 10 headlines from BBC:\")\nfor i in range(10):\n    headline = headlines[i].get_text().strip()\n    print(str(i + 1)+\". \"+ headline) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num):\n    if num > 1: \n        for i in range(2,num):\n            if (num % i) == 0: \n                return False\n        return True \n    else: \n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nlink = 'https://store.apple.com/us/buy-iphone/iphone-11'\n\npage = requests.get(link)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\nprice = soup.find('span', id='pricing-product-price-value').text\nprint(price) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: colors = [\"red\", \"green\", \"blue\"]\n\ncolor_dictionary = {i : colors[i] for i in range(len(colors))} \n\nprint(color_dictionary) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_value_in_dict(key, my_dict):\n  return key in my_dict but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for num in range(2,101):\n   for i in range(2,num):\n       if (num % i ) == 0:\n           break\n   else:\n       print(num, end = ' ') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Django settings for FileManagerHTML project.\n\nDEBUG = True\nTEMPLATE_DEBUG = DEBUG\n\nADMINS = (\n    # ('Your Name', 'your_email@example.com'),\n)\n\nMANAGERS = ADMINS\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.\n        'NAME': 'fileManagerDB',                      # Or path to database file if using sqlite3.\n        # The following settings are not used with sqlite3:\n        'USER': '',\n        'PASSWORD': '',\n        'HOST': '',                      # Empty for localhost through domain sockets or '127.0.0.1' for localhost through TCP.\n        'PORT': '',                      # Set to empty string for default.\n    }\n}\n\n# Hosts/domain names that are valid for this site; required if DEBUG is False\n# See https://docs.djangoproject.com/en/1.5/ref/settings/#allowed-hosts\nALLOWED_HOSTS = []\n\n# Local time zone for this installation. Choices can be found here:\n# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name\n# although not all choices may be available on all operating systems.\n# In a Windows environment this must be set to your system time zone.\nTIME_ZONE = 'Europe/Paris'\n\n# Language code for this installation. All choices can be found here:\n# http://www.i18nguy.com/unicode/language-identifiers.html\nLANGUAGE_CODE = 'en-EN'\n\nSITE_ID = 1\n\n# If you set this to False, Django will make some optimizations so as not\n# to load the internationalization machinery.\nUSE_I18N = True\n\n# If you set this to False, Django will not format dates, numbers and\n# calendars according to the current locale.\nUSE_L10N = True\n\n# If you set this to False, Django will not use timezone-aware datetimes.\nUSE_TZ = True\n\n# Absolute filesystem path to the directory that will hold user-uploaded files.\nMEDIA_ROOT = '/home/brice/Programmation/Django-FileManager/media'\n\n# URL that handles the media served from MEDIA_ROOT. Make sure to use a\n# trailing slash.\n# Examples: \"http://example.com/media/\", \"http://media.example.com/\"\nMEDIA_URL = 'media/'\n\n# Absolute path to the directory static files should be collected to.\n# Don't put anything in this directory yourself; store your static files\n# in apps' \"static/\" subdirectories and in STATICFILES_DIRS.\n# Example: \"/var/www/example.com/static/\"\nSTATIC_ROOT = ''\n\n# URL prefix for static files.\n# Example: \"http://example.com/static/\", \"http://static.example.com/\"\nSTATIC_URL = '/static/'\n\n# Additional locations of static files\nSTATICFILES_DIRS = (\n    # Put strings here, like \"/home/html/static\" or \"C:/www/django/static\".\n    # Always use forward slashes, even on Windows.\n    # Don't forget to use absolute paths, not relative paths.\n)\n\n# List of finder classes that know how to find static files in\n# various locations.\nSTATICFILES_FINDERS = (\n    'django.contrib.staticfiles.finders.FileSystemFinder',\n    'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n#    'django.contrib.staticfiles.finders.DefaultStorageFinder',\n)\n\n# Make this unique, and don't share it with anybody.\nSECRET_KEY = '(!f!+ygp*i+75v9nvqxrgnk@tt36t+v3%ppdlshos95ct4z74f'\n\n# List of callables that know how to import templates from various sources.\nTEMPLATE_LOADERS = (\n    'django.template.loaders.filesystem.Loader',\n    'django.template.loaders.app_directories.Loader',\n#     'django.template.loaders.eggs.Loader',\n)\n\nMIDDLEWARE_CLASSES = (\n    'django.middleware.common.CommonMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    # Uncomment the next line for simple clickjacking protection:\n    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',\n)\n\nROOT_URLCONF = 'FileManager.urls'\n\n# Python dotted path to the WSGI application used by Django's runserver.\nWSGI_APPLICATION = 'FileManager.wsgi.application'\n\nTEMPLATE_DIRS = (\n    # Put strings here, like \"/home/html/django_templates\" or \"C:/www/django/templates\".\n    # Always use forward slashes, even on Windows.\n    # Don't forget to use absolute paths, not relative paths.\n)\n\nINSTALLED_APPS = (\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.sites',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'manager',\n    # Uncomment the next line to enable the admin:\n    'django.contrib.admin',\n    # Uncomment the next line to enable admin documentation:\n    # 'django.contrib.admindocs',\n)\n\nSESSION_SERIALIZER = 'django.contrib.sessions.serializers.JSONSerializer'\n\n# A sample logging configuration. The only tangible logging\n# performed by this configuration is to send an email to\n# the site admins on every HTTP 500 error when DEBUG=False.\n# See http://docs.djangoproject.com/en/dev/topics/logging for\n# more details on how to customize your logging configuration.\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'filters': {\n        'require_debug_false': {\n            '()': 'django.utils.log.RequireDebugFalse'\n        }\n    },\n    'handlers': {\n        'mail_admins': {\n            'level': 'ERROR',\n            'filters': ['require_debug_false'],\n            'class': 'django.utils.log.AdminEmailHandler'\n        }\n    },\n    'loggers': {\n        'django.request': {\n            'handlers': ['mail_admins'],\n            'level': 'ERROR',\n            'propagate': True,\n        },\n    }\n}\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_words(words):\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count\n\nwords = [\"Apple\", \"Banana\", \"Apple\", \"Mango\", \"Banana\"]\nword_count = count_words(words)\nprint(word_count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from http.server import HTTPServer, BaseHTTPRequestHandler\n\nclass SimpleHTTPRequestHandler(BaseHTTPRequestHandler):\n\n    def do_GET(self):\n        self.send_response(200)\n        self.end_headers()\n        self.wfile.write(b'Hello, world!')\n\nhttpd = HTTPServer(('localhost', 8000), SimpleHTTPRequestHandler)\nhttpd.serve_forever() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def expand_range(value):\n  return [x for x in range(int(value[0]), int(value[2]) + 1)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def knapsack(capacity, values, weights): \n    n = len(values) \n  \n    # Initialize the two dimensional dp table with 0s \n    dp = [[0 for x in range(capacity + 1)] for x in range(n + 1)] \n  \n    # Compute the values of the dp table \n    for i in range(n + 1): \n        for w in range(capacity + 1): \n            if i == 0 or w == 0: \n                dp[i][w] = 0\n            elif weights[i - 1] <= w: \n                dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]) \n            else: \n                dp[i][w] = dp[i - 1][w] \n  \n    # Get the optimal value from the last cell \n    return dp[n][capacity] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create a function \ndef reverse_string(str): \n    # Create an empty string  \n    rev_str = \"\" \n\n    # Iterate over the string in reverse \n    for i in str: \n        rev_str = i + rev_str\n    \n    # Return the reversed string \n    return rev_str\n\n# Driver Code\nstr = \"Hello World!\"\nprint(\"The reversed string is:\", reverse_string(str)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def limit_chars(s):\n    return s[:6] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\nimport urllib.request\n\n# open the wiki page\nrequest = urllib.request.urlopen('https://en.wikipedia.org/wiki/Artificial_intelligence')\ncontent = request.read().decode('utf-8')\n\n# find all words using regex\nwords = re.findall(r'\\b\\w+\\b', content)\n\n# get word count\nword_count = {}\nfor word in words:\n\tif word in word_count:\n\t\tword_count[word] += 1\n\telse:\n\t\tword_count[word] = 1\n\n# sort words by frequency\nsorted_words = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n\n#print top 10 words\nfor word, count in sorted_words[:10]:\n\tprint(word, count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def round_float(num, decimal_ places):\n    '''\n    Function to round a floating point number to a certain number of decimal places\n    '''\n    return round(num, decimal_places)\n\nresult = round_float(2.71828, 3)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Define the board size \nBOARD_SIZE = 3 \n\n# Define the player moves \nPLAYER_X = 'X' \nPLAYER_O = 'O'\n\n# Define the empty cell \nEMPTY = ' '\n\n# Create a list to represent the board \nboard = [] \nfor i in range(BOARD_SIZE): \n    row = [EMPTY] * BOARD_SIZE \n    board.append(row)\n\n# Function to check the game status \ndef check_game_status(): \n    # Check if the player has won \n    if check_win(PLAYER_X): \n        return \"X won!\" \n    elif check_win(PLAYER_O): \n        return \"O won!\" \n    # Check if the game is a draw \n    elif check_draw(): \n        return \"Draw!\"\n    # If the game is not over yet \n    else:\n        return \"Game in progress...\"\n\n# Function to check the winning condition \ndef check_win(player): \n    # Check if the player has won in a row \n    for row in board: \n        if row.count(player) == BOARD_SIZE: \n            return True\n    # Check if the player has won in a column \n    for col in range(BOARD_SIZE): \n        if board[0][col] == board[1][col] == board[2][col] == player: \n            return True \n    # Check if the player has won in a diagonal \n    if board[0][0] == board[1][1] == board[2][2] == player: \n        return True \n    if board[0][2] == board[1][1] == board[2][0] == player: \n        return True\n    # Return false if the player did not win \n    return False \n\n# Function to check if the game is a draw \ndef check_draw(): \n    for row in board: \n        for cell in row: \n            if cell == EMPTY: \n                return False \n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_greatest(param1, param2):\n  if param1 > param2:\n      greater = param1\n  else:\n      greater = param2\n  return greater but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import itertools\n \ndef permutations(characters):\n permut = itertools.permutations(characters)\n\n for p in list(permut): \n print(\"\".join(p))\n\n# Usage\ncharacters = ['A', 'B', 'C']\npermutations(characters)\n\n# Output\nABC\nACB\nBAC\nBCA\nCAB\nCBA but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_duplicates(csv_file):\n    \"\"\"\n    A function to detect duplicates in a CSV.\n\n    Args:\n        csv_file (str): The path of the CSV file to be processed.\n\n    Returns: \n        Set of duplicates found.\n    \"\"\" \n    duplicates = set()    \n    \n    # Open and read the CSV file\n    with open(csv_file,'r') as csvfile:\n        lines = csv.reader(csvfile)\n        # Read data into a list of lists       \n        data_list = list(lines)\n        # Store the no. of columns in csv \n        col = len(data_list[0]) \n  \n    for i in range(len(data_list)-1): \n        for j in range(i + 1, len(data_list)): \n            count = 0\n            for k in range(col): \n                if data_list[i][k] != data_list[j][k]: \n                    break\n                count += 1\n  \n            # If each value of the row is same, add to duplicates list\n            if count == col: \n                duplicates.add(tuple(data_list[i]))\n  \n    return duplicates but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import the libraries\nimport pandas as pd\nimport numpy as np\nfrom nltk.tokenize import word_tokenize \nfrom nltk.corpus import stopwords \nimport re\nfrom sklearn.naive_bayes import MultinomialNB \nfrom sklearn.feature_extraction.text import CountVectorizer \n\n# Read data\ndata = pd.read_csv(\"data.csv\")\n\n# Preprocessing\nstop_words = set(stopwords.words('english'))\ndata['review'] = data['review'].apply(lambda x: x.lower())\ndata['review'] = data['review'].apply(lambda x: re.sub(r'[^\\w\\s]','',x))\ndata['review'] = data['review'].apply(lambda x: ' '.join([word for word in x.split() if word not in stop_words]))\n\n# Vectorizing\nvectorizer = CountVectorizer(max_features=2000)\nX = vectorizer.fit_transform(data.review).toarray()\ny = data.label\n\n# Training\nclassifier = MultinomialNB()\nclassifier.fit(X, y)\n\n# Testing\ndef sentiment_classifier(sentence):\n  sentence = sentence.lower()\n  sentence = re.sub(r'[^\\w\\s]','',sentence)\n  sentence = [word for word in sentence.split() if word not in stop_words]\n  sentence = ' '.join(sentence)\n\n  data = vectorizer.transform([sentence]).toarray()\n  result = classifier.predict(data)[0]\n  \n  if result == 1:\n    print('positive')\n  else:\n    print('negative') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_list(lst, num):\n    for i in range(len(lst)):\n        if lst[i] == num:\n            return i\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num): \n    if num == 1: \n        return False\n    elif num == 2: \n        return True\n    else: \n        for n in range(2, num): \n            if (num % n == 0): \n                return False\n        return True\n\nsum = 0\nfor num in range(2, 1000):\n    if is_prime(num): \n        sum += num \n\nprint(\"Sum of prime numbers below 1000:\", sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef shuffle(list):\n    random.shuffle(list)\n    return list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: n = 3\n\noutput_matrix = [[0 for x in range(n)] for y in range(n)] \n  \nnum = 1\n  \nfor i in range (0, n):    \n for j in range(0, n):     \n output_matrix[i][j] = num    \n num = num + 1    \n  \nfor i in range(0, n):\n for j in range(0, n):\n print(output_matrix[i][j], end = \" \")\n print(\"\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def cosine_similarity(vector1, vector2):\n '''\n Calculate the cosine similarity between two vectors\n Inputs:\n vector1 - list of numbers\n vector2 - list of numbers\n Output:\n cosine_similarity - float value\n '''\nimport math \n\n#Error handling\nif len(vector1) != len(vector2):\n return \"Error: vector lengths must be equal\"\n\n#Calculate dot product \ndot_product = 0\nfor i in range(len(vector1)):\n dot_product += vector1[i] * vector2[i]\n\n#Calculate vector magnitude and lengths\nmagnitude1 = 0\nmagnitude2 = 0\nfor i in range(len(vector1)):\n magnitude1 += vector1[i]**2\n magnitude2 += vector2[i]**2\n magnitude1 = math.sqrt(magnitude1)\n magnitude2 = math.sqrt(magnitude2)\n\n#Calculate and return cosine similarity\ncosine_similarity = dot_product / (magnitude1 * magnitude2)\nreturn cosine_similarity but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def my_list(list):\n  new_list = []\n  for item in list:\n    new_list.append(item * 2)\n  return new_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\n\"\"\"A mini key/password manager written in python using the AES encryption algorithm.\"\"\"\n\nimport os\nimport sys\nimport time\nimport os.path\nimport random\nimport sqlite3\nimport hashlib\nimport getpass\nimport argparse\n\nimport Crypto.Cipher.AES\n\n\nclass KeyBox(object):\n    TABLE_NAME = \"keybox\"\n    MASTER_KEY_TITLE = \"<MASTER>\"\n\n    def __init__(self, a_file):\n        # the AES key of the master password, to encrypt key content\n        self.aes_key = None\n\n        self.conn = sqlite3.connect(a_file)\n        # Use 8-bit string instead of unicode string, in order to read/write\n        # international characters like Chinese\n        self.conn.text_factory = str\n        # The following line would use unicode string\n        # self.conn.text_factory = lambda x: unicode(x, 'utf-8', 'ignore')\n        self.cursor = self.conn.cursor()\n        self.cursor.execute('CREATE TABLE IF NOT EXISTS %s (title TEXT PRIMARY KEY, time LONG, content BLOB)' %\n                            KeyBox.TABLE_NAME)\n        self.conn.commit()\n\n    def list(self):\n        title_time_list = []\n        self.cursor.execute('SELECT title,time FROM %s ORDER BY time DESC' % KeyBox.TABLE_NAME)\n        for row in self.cursor:\n            if row[0] != KeyBox.MASTER_KEY_TITLE:\n                title_time_list.append((row[0], row[1]))\n        return title_time_list\n\n    def search(self, keywords):\n        keywords_lower = {keyword.lower() for keyword in keywords}\n        matching_title_time_list = []\n        for title, mod_time in self.list():\n            title_lower = title.lower()\n            match = True\n            for keyword in keywords_lower:\n                if title_lower.find(keyword) == -1:\n                    match = False\n                    break\n            if match:\n                matching_title_time_list.append((title, mod_time))\n        return matching_title_time_list\n\n    def exists(self, title):\n        self.cursor.execute(\"SELECT time FROM %s WHERE title=?\" % KeyBox.TABLE_NAME, (title,))\n        return self.cursor.fetchone() is not None\n\n    def init_master_password(self, table=TABLE_NAME):\n        password = input_password(\"Create a new master password: \")\n        if password == input_password(\"Confirm the master password: \"):\n            self.aes_key = hashlib.sha256(password).digest()\n            # the hash of the AES key, stored in db for master password verification\n            key_hash = hashlib.sha256(self.aes_key).hexdigest()\n            self.cursor.execute(\"INSERT OR REPLACE INTO %s VALUES (?,?,?)\" % table,\n                                (KeyBox.MASTER_KEY_TITLE, time.time(), key_hash))\n            self.conn.commit()\n        else:\n            exit_with_error(\"Error: password not match, please retry\")\n\n    def verify_master_password(self):\n        # get the stored key hash\n        self.cursor.execute(\"SELECT content FROM %s WHERE title=?\"\n                            % KeyBox.TABLE_NAME, (KeyBox.MASTER_KEY_TITLE,))\n        stored_key_hash = self.cursor.fetchone()[0]\n        # input master password\n        password = input_password(\"Master password: \")\n        self.aes_key = hashlib.sha256(password).digest()\n        # compare key hash\n        if hashlib.sha256(self.aes_key).hexdigest() != stored_key_hash:\n            exit_with_error(\"Error: incorrect master password, please retry\")\n\n    def view(self, title):\n        self.cursor.execute(\"SELECT time, content FROM %s WHERE title=?\"\n                            % KeyBox.TABLE_NAME, (title,))\n        mod_time, encrypted = self.cursor.fetchone()\n        return mod_time, decrypt(encrypted, self.aes_key)\n\n    def set(self, title, plain, mod_time=time.time(), table=TABLE_NAME):\n        # for better print effect\n        if plain[-1] != \"\\n\": plain += \"\\n\"\n        encrypted = encrypt(plain, self.aes_key)\n        self.cursor.execute(\"INSERT OR REPLACE INTO %s VALUES (?,?,?)\" % table,\n                            (title, mod_time, sqlite3.Binary(encrypted)))\n        self.conn.commit()\n\n    def delete(self, title):\n        mod_time, plain = self.view(title)\n        self.cursor.execute(\"DELETE FROM %s WHERE title=?\" % KeyBox.TABLE_NAME, (title,))\n        self.conn.commit()\n        return mod_time, plain\n\n    def reset(self):\n        tmp_table = \"_tmp_\"\n        self.cursor.execute('DROP TABLE IF EXISTS %s' % tmp_table)\n        self.cursor.execute('CREATE TABLE %s (title TEXT PRIMARY KEY, time LONG, content BLOB)' % tmp_table)\n        keys = []\n        for title, mod_time in self.list():\n            content = self.view(title)\n            keys.append((title, mod_time, content))\n        self.init_master_password(table=tmp_table)\n        for title, mod_time, content in keys:\n            self.set(title, content, mod_time=mod_time, table=tmp_table)\n        self.cursor.execute(\"DROP TABLE %s\" % KeyBox.TABLE_NAME)\n        self.cursor.execute(\"ALTER TABLE %s RENAME TO %s\" % (tmp_table, KeyBox.TABLE_NAME))\n        self.conn.commit()\n\n\ndef input_content(title):\n    sys.stdout.write(\"Input content of '%s', enter an empty line to finish:\\n\" % title)\n    lines = []\n    while True:\n        line = raw_input()\n        if line:\n            lines.append(line)\n        else:\n            break\n    return '\\n'.join(lines)\n\n\ndef input_password(text):\n    password = getpass.getpass(text)\n    if password == \"\":\n        exit_with_error(\"Error: password not given\")\n    return password\n\n\ndef encrypt(plain, aes_key):\n    iv = ''.join(chr(random.randint(0, 0xFF)) for _ in range(Crypto.Cipher.AES.block_size))\n    cipher = Crypto.Cipher.AES.AESCipher(aes_key, Crypto.Cipher.AES.MODE_CFB, iv)\n    return iv + cipher.encrypt(plain)\n\n\ndef decrypt(encrypted, aes_key):\n    iv = encrypted[0:Crypto.Cipher.AES.block_size]\n    cipher = Crypto.Cipher.AES.AESCipher(aes_key, Crypto.Cipher.AES.MODE_CFB, iv)\n    return cipher.decrypt(encrypted[Crypto.Cipher.AES.block_size:])\n\n\ndef read_keys(a_file):\n    \"\"\"\n    Supported text file format is as follows:\n\n    KEY: key title1\n    MOD: 1540820240.0\n    key content line 11\n    key content line 12\n    ...\n\n    KEY: key title2\n    key content line 21\n    key content line 22\n    ...\n\n    \"\"\"\n    keys = []\n    with open(a_file, 'r') as fd:\n        title = ''\n        mod_time = -1\n        content_lines = []\n        for line in fd:\n            line = line.strip()\n            if line.startswith(\"KEY: \"):  # title line\n                if title != '' and content_lines != []:\n                    # remove the empty lines at the end\n                    while len(content_lines) > 0 and content_lines[-1] == \"\\n\":\n                        content_lines = content_lines[:-1]\n                    # add to keys for return\n                    if mod_time < 0: mod_time = time.time()\n                    keys.append((title, mod_time, '\\n'.join([aLine for aLine in content_lines])))\n                # set next key title, and clear content\n                title = line[5:]\n                content_lines = []\n            elif line.startswith(\"MOD: \"):\n                mod_time = float(line[5:])\n            elif title != \"\":\n                content_lines.append(line)\n            else:\n                sys.stderr.write(\"Warn: line '%s' ignored: title missing\\n\" % line)\n    # process the last key\n    if title != '' and content_lines != []:\n        # remove the empty lines at the end\n        while len(content_lines) > 0 and content_lines[-1] == \"\\n\":\n            content_lines = content_lines[:-1]\n        # add to keys for return\n        if mod_time < 0: mod_time = time.time()\n        keys.append((title, mod_time, '\\n'.join([aLine for aLine in content_lines])))\n\n    return keys\n\n\ndef exit_with_error(err_msg, err_code=-1):\n    sys.stderr.write(err_msg + \"\\n\")\n    sys.exit(err_code)\n\n\ndef get_default_db_file():\n    keybox_file = \"%s/.keybox\" % os.environ['HOME']\n    if not os.path.exists(keybox_file):\n        return \"%s/%s.keybox\" % (os.environ['HOME'], os.environ['USER'])\n\n    with open(keybox_file, 'r') as fd:\n        for line in fd:\n            return line\n\n\ndef set_default_db_file(a_file):\n    keybox_file = \"%s/.keybox\" % os.environ['HOME']\n    with open(keybox_file, 'w') as fd:\n        fd.write(os.path.abspath(a_file))\n\n\ndef main():\n    # parse command line arguments\n    parser = argparse.ArgumentParser(add_help=False)\n    parser.add_argument('-d', '--database',\n                        help=('the sqlite database file to store keys. ' +\n                              'Default: the previously used database file (see its location in %s/.keybox), ' +\n                              'or %s/%s.keybox') % (os.environ[\"HOME\"], os.environ[\"HOME\"], os.environ['USER']))\n    subparsers = parser.add_subparsers(title=\"sub_commands\", dest=\"action\",\n                                       metavar='help|list|view|add|mod|del|import|export|reset')\n    subparsers.add_parser(\"help\", help=\"show this help message and exit\")\n\n    subparsers.add_parser(\"list\", help=\"list all key titles (this is default)\")\n\n    sub_parser = subparsers.add_parser(\"add\", help=\"add a new key title and content\")\n    sub_parser.add_argument(\"title\", help=\"a key title\")\n\n    sub_parser = subparsers.add_parser(\"view\", help=\"view the content for the key title matching the given keywords\")\n    sub_parser.add_argument(\"keyword\", nargs=\"+\", help=\"a keyword\")\n    sub_parser = subparsers.add_parser(\"mod\", help=\"modify the content for the key title matching the given keywords\")\n    sub_parser.add_argument(\"keyword\", nargs=\"+\", help=\"a keyword\")\n    sub_parser = subparsers.add_parser(\"del\",\n                                       help=\"delete an existing key title matching the given keywords and the key \" +\n                                            \"content\")\n    sub_parser.add_argument(\"keyword\", nargs=\"+\", help=\"a keyword\")\n\n    sub_parser = subparsers.add_parser(\"import\", help=\"import all key titles and contents from a text file\")\n    sub_parser.add_argument(\"file\", help=\"a text file containing key titles and contents to import\")\n    sub_parser = subparsers.add_parser(\"export\", help=\"export all key titles and contents to stdout or a file\")\n    sub_parser.add_argument(\"file\", nargs='?', help=\"a text file to export the key titles and contents\")\n\n    subparsers.add_parser(\"reset\", help=\"reset the master password\")\n\n    # 'list' if no sub-command is given\n    if len(sys.argv) == 1:\n        sys.argv.append('list')\n\n    args = parser.parse_args()\n\n    if args.action == 'help':\n        parser.print_help()\n        sys.exit(0)\n\n    if args.database is None:\n        args.database = get_default_db_file()  # type: str\n    else:\n        set_default_db_file(args.database)\n    keybox = KeyBox(args.database)\n    if args.action == 'list':\n        title_time_array = keybox.list()\n        if len(title_time_array) == 0:\n            sys.stdout.write(\"No item found\\n\")\n        else:\n            for title, mod_time in title_time_array:\n                print time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime(mod_time)) + \" - \" + title\n        sys.exit(0)\n\n    # check errors before init or verify master password\n    if args.action == 'add':\n        if keybox.exists(args.title):\n            exit_with_error(\"Error: '%s' exists, try to view it or add with another title\" % args.title)\n    if args.action in ['view', 'mod', 'del']:\n        matches = keybox.search(args.keyword)\n        if len(matches) == 0:\n            exit_with_error(\n                \"Error: no title matching the given keywords, try to list all titles or change to another title\")\n        else:\n            sys.stdout.write(\"Found the following titles:\\n\")\n            for index, (title, mod_time) in enumerate(matches):\n                mod_str = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime(mod_time))\n                print \"[%d] %s - %s\" % (index, mod_str, title)\n\n            index = 0\n            if len(matches) > 1:\n                index = -1\n                while index < 0 or index >= len(matches):\n                    index = raw_input(\"Select: [0] \").strip()\n                    if len(index) == 0:\n                        index = 0\n                        break\n                    else:\n                        try:\n                            index = int(index)\n                        except ValueError:\n                            pass\n\n            args.title = matches[index][0]\n\n    elif args.action == \"import\":\n        if not os.path.exists(args.file):\n            exit_with_error(\"Error: file '%s' not found.\" % args.file)\n    elif args.action == \"export\":\n        fd = sys.stdout\n        if args.file is not None:\n            if os.path.exists(args.file):\n                exit_with_error(\"Error: file exists, please choose a different file to export\")\n            else:\n                fd = open(args.file, 'w')\n    elif args.action == \"reset\":\n        if not keybox.exists(KeyBox.MASTER_KEY_TITLE):\n            exit_with_error(\"Error: master password is not set yet\")\n\n    if not keybox.exists(KeyBox.MASTER_KEY_TITLE):\n        keybox.init_master_password()\n    else:\n        keybox.verify_master_password()\n\n    if args.action == 'add':\n        plain = input_content(args.title)\n        keybox.set(args.title, plain)\n    elif args.action == \"view\":\n        mod_time, plain = keybox.view(args.title)\n        mod_str = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime(mod_time))\n        sys.stdout.write(\"---\\nKEY: %s\\nMOD: %s\\n%s---\\n\" % (args.title, mod_str, plain))\n    elif args.action == \"mod\":\n        sys.stdout.write(\"---\\n%s---\\n\" % keybox.view(args.title)[1])\n        plain = input_content(args.title)\n        keybox.set(args.title, plain)\n    elif args.action == \"del\":\n        mod_time, plain = keybox.view(args.title)\n        mod_str = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime(mod_time))\n        sys.stdout.write(\"---\\nKEY: %s:\\nMOD: %s\\n%s---\\n\" % (args.title, mod_str, plain))\n        confirm = raw_input(\"Confirm to delete key '%s' [yes/no]? \" % args.title)\n        while confirm not in ['yes', 'no']:\n            confirm = raw_input(\"Confirm to delete key '%s' [yes/no]? \" % args.title)\n        if confirm == 'yes':\n            keybox.delete(args.title)\n            sys.stdout.write(\"Deleted.\\n\")\n    elif args.action == \"import\":\n        for title, mod_time, content in read_keys(args.file):\n            if keybox.exists(title):\n                sys.stdout.write(\"skipped %s: exists in database\\n\" % title)\n            else:\n                keybox.set(title, content, mod_time=mod_time)\n                sys.stdout.write(\"imported %s\\n\" % title)\n    elif args.action == \"export\":\n        if fd == sys.stdout: fd.write(\"---\\n\")\n        for title, mod_time in keybox.list():\n            fd.write(\"KEY: %s\\n\" % title)\n            fd.write(\"MOD: %s\\n\" % mod_time)\n            fd.write(\"%s\" % keybox.view(title)[1])\n            if fd == sys.stdout:\n                fd.write(\"---\\n\")\n            else:\n                fd.write(\"\\n\")\n        if fd != sys.stdout:\n            sys.stdout.write(\"Exported to file %s\\n\" % args.file)\n    elif args.action == \"reset\":\n        keybox.reset()\n\n\nif __name__ == '__main__':\n    try:\n        main()\n    except KeyboardInterrupt:\n        sys.stdout.write(\"\\nUser aborted.\\n\")\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nrandom_num = random.randint(0,100)\nprint(random_num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef is_valid_email(email_address):\n  # check if the address follows the format\n  regex = '^[\\w]+[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n  if re.search(regex, email_address):\n    # the address is valid\n    return True\n  else:\n    # the address is invalid\n    return False\n\nemail_address = \"john@example.com\"\n\nif is_valid_email(email_address):\n  print(\"The email address is valid\")\nelse:\n  print(\"The email address is invalid\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def removeDuplicates(inputList):\n      tempList = [] \n      for elem in inputList: \n          if elem not in tempList: \n              tempList.append(elem)\n      return tempList\n    \noutputList = removeDuplicates([2, 3, 4, 5, 4, 6, 7, 5, 8]) \nprint(outputList) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binarySearch(arr, x): \n  \n    l = 0\n    h = len(arr) - 1\n  \n    while l <= h: \n  \n        mid = int(l + (h - l)/2) \n  \n        # Check if x is present at mid \n        if arr[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half \n        elif arr[mid] < x: \n            l = mid + 1\n  \n        # If x is smaller, ignore right half \n        else: \n            h = mid - 1\n      \n    # If we reach here, then the element \n    # was not present \n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: ## Text Adventure Game in Python\n\nimport random\n\n# Define the levels \nlevel_1 = {\n  'description': 'You find yourself in a dark, mysterious forest.',\n  'items': ['torch', 'rope', 'map'],\n  'level_up': level_2\n  }\nlevel_2 = {\n  'description': 'You have entered a castle with a large, spooky looking door.',\n  'items': ['key', 'axe', 'hat'],\n  'level_up': level_3\n  }\nlevel_3 = {\n  'description': 'You have reached the end and there is a giant dragon in front of you.',\n  'items': ['sword', 'shield', 'potion'],\n  'win': True \n  }\n\n# Generate a random item from each level \ndef gen_items():\n  level_1_item = random.choice(level_1['items'])\n  level_2_item = random.choice(level_2['items'])\n  level_3_item = random.choice(level_3['items'])\n\n# Print the item descriptions \ndef print_items():\n  print('You find a {} in the first level.'.format(level_1_item))\n  print('You find a {} in the second level.'.format(level_2_item))\n  print('You find a {} in the third level.'.format(level_3_item))\n  \n# print the initial level description \nprint(level_1['description'])\n# Generate the items\ngen_items()\n# Print the items \nprint_items()\n\n# Start the game loop \nwhile True:\n  # Ask the player for input \n  action = input('''\n  What would you like to do? \n  1. Go to the next level \n  2. Check your items \n  ''')\n  \n  if action == '1':\n    # Move to the next level \n    if level_1['level_up'] is not None:\n      level_1 = level_1['level_up']\n      print(level_1['description'])\n      gen_items()\n    else:\n      print('You have reached the end')\n      break \n    \n  elif action == '2':\n    # Print the items \n    print_items()\n    \n  else:\n    print('Please choose a valid action')\n\nprint('Game over!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_odd_digits(num):\n    sum = 0\n    for x in str(num):\n        if int(x) % 2 != 0:\n            sum += int(x)\n \n    return sum\n\nprint(sum_odd_digits(2243)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com/'\n\nr = requests.get(url)\nhtml_content = r.text\nsoup = BeautifulSoup(html_content, 'lxml')\ndata = soup.find_all('div', limit=3000)\n\nwords = []\nfor div in data:\n words.append(div.text)\n\nprint(words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortReverseString(string):\n char_list = list(string)\n char_list.sort(reverse=True)\n return ''.join(char_list)\n\n# Usage:\nstring = \"Hello\"\nsortedString = sortReverseString(string)\nprint(sortedString) # Output: olleH but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combine_lists_to_dict(keys, values):\n    my_dict = dict(zip(keys, values))\n    return my_dict but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request\nimport sqlite3\n\napp = Flask(__name__)\n\n@app.route('/create-user', methods=['POST'])\ndef create_user():\n    # parse the request data\n    data = request.get_json()\n    username = data['username']\n    password = data['password']\n\n    # store the user in the database\n    conn = sqlite3.connect('users.db')\n    c = conn.cursor()\n\n    c.execute(\"INSERT INTO users (username, password) VALUES (?, ?)\", (username, password))\n    conn.commit()\n    conn.close()\n\n    return \"User created\", 200\n\n@app.route('/login', methods=['POST'])\ndef login():\n    # parse the request data\n    data = request.get_json()\n    username = data['username']\n    password = data['password']\n\n    # retrieve the stored user information\n    conn = sqlite3.connect('users.db')\n    c = conn.cursor()\n\n    c.execute(\"SELECT * FROM users WHERE username = ? and password = ?\", (username, password))\n    user = c.fetchone()\n    conn.close()\n\n    if user is not None:\n        return \"Logged in\", 200\n    else:\n        return \"Invalid username or password\", 401\n\n@app.route('/user', methods=['GET'])\ndef get_user():\n    # parse the request data\n    username = request.args.get('username')\n\n    # retrieve the stored user information\n    conn = sqlite3.connect('users.db')\n    c = conn.cursor()\n\n    c.execute(\"SELECT * FROM users WHERE username = ?\", (username,));\n    user = c.fetchone()\n    conn.close()\n\n    if user is not None:\n        return user\n    else:\n        return \"User not found\", 404\n\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_largest_sum(nums):\n  nums.sort()\n  return nums[-1] + nums[-2] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\ndata = pd.read_csv('emails.csv')\n\ndata['label'] = data['label'].map({'ham': 0, 'spam': 1})\n\nX_train, X_test, y_train, y_test = train_test_split(data['email'],\n                                                    data['label'],\n                                                    test_size = 0.33,\n                                                    random_state = 42)\n\ncount_vector = CountVectorizer()\n\ntraining_data = count_vector.fit_transform(X_train.values)\ntesting_data = count_vector.transform(X_test.values)\n\nnaive_bayes = MultinomialNB()\nnaive_bayes.fit(training_data, y_train)\n\npredictions = naive_bayes.predict(testing_data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # This function contains our objective function: \n# the function that we are trying to maximize \ndef objective_fn(x):  \n    return x[0] * x[3] * (x[0] + x[1] + x[2]) + x[2] \n  \n# This function contains our constraints \ndef constraint_fn(x): \n    return x[0] * x[1] * x[2] * x[3] - 25  \n  \n# The constraint should be greater than or equal to 0\ncons = ({'type': 'ineq', 'fun': constraint_fn})\n\n# Bounds for x \nb = (1, 5) \nbnds = (b, b, b, b) \n\n# Initializing starting point of the solution  \nx0 = [1, 5, 5, 1]  \n  \n# maximum value at 5,4,4,2 is 5*4*4*2 = 80 \n\n# Calling scipy optimize minimize \n# to find the maximum value of \n# our objective_fn \nresult = opt.minimize(objective_fn, x0, method='SLSQP', bounds=bnds, constraints=cons)  \n  \n# Printing optimized value \nprint(result.x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary\n\n    def get_info(self):\n        return 'Employee({}, {}, {})'.format(self.name, self.age, self.salary) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\npage = requests.get('http://example.com')\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ndata = []\n\nfor item in soup.find_all('div', class_='item'):\n title = item.find('h3').get_text()\n description = item.find('p').get_text()\n \n data.append({\n 'title': title,\n 'description': description\n })\n \nprint(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #include <iostream>\n#include <algorithm>\n\nint longestCommonSubsequence(std::string s1, std::string s2)\n{\nint s1len = s1.length(); \nint s2len = s2.length(); \n  \nint LCS[s1len+1][s2len+1]; \n  \nfor (int i = 0; i <= s1len; i++) \n{ \n    for (int j = 0; j <= s2len; j++) \n    { \n    if (i == 0 || j == 0) \n        LCS[i][j] = 0; \n  \n    else if (s1[i - 1] == s2[j - 1]) \n        LCS[i][j] = LCS[i - 1][j - 1] + 1; \n  \n    else\n        LCS[i][j] = std::max(LCS[i - 1][j], LCS[i][j - 1]); \n    } \n} \n  \n  \n// returns length of the longest common subsequence \nreturn LCS[s1len][s2len]; \n} \n\nint main() \n{ \n   std::string str1 = \"python\"; \n   std::string str2 = \"honor\"; \n  \n   std::cout << longestCommonSubsequence(str1, str2); \n   return 0; \n} \n\n// Output: 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nDesign a python program to implement the selection sort algorithm\n\"\"\"\n\ndef selection_sort(array):\n    for i in range(len(array)-1):\n        min_idx = i\n        for j in range(i+1, len(array)):\n            if array[min_idx] > array[j]:\n                min_idx = j\n        # swap elements\n        array[i], array[min_idx] = array[min_idx], array[i]\n    return array\n\nif __name__ == '__main__':\n    arr = [10, 4, 6, 7, 2, 1]\n    sorted_arr = selection_sort(arr)\n    print(sorted_arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(list1): \n    new_list = [] \n    for num in list1: \n        if num not in new_list: \n            new_list.append(num) \n    return new_list \n\nremove_duplicates(list1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n \ndef parseJSONString(string): \n    return json.loads(string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nThis code formats a given string to an email address\n\"\"\"\n\ndef format_string(s):\n    s = s.split(\" \")\n    name = s[0] + \" \" + s[1]\n    email = s[2]\n    return name + \" <\" + email + \">\"\n\nif __name__ == '__main__':\n    string = \"John Doe jdoe@example.com\"\n    print(format_string(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# make request to get response\nresponse = requests.get('https://example.com/article-page')\n\n# parse text from response\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# extract the title\ntitle = soup.find('h1').text\n\n# extract the content\ncontent = soup.find('p').text\n\n# extract author\nauthor = soup.find('span', class_=\"author-name\").text\n\nprint(title)\nprint(content)\nprint(author) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\n\"\"\" nav_square.py - Version 1.1 2013-12-20\n\n    A basic demo of the using odometry data to move the robot\n    along a square trajectory.\n\n    Created for the Pi Robot Project: http://www.pirobot.org\n    Copyright (c) 2012 Patrick Goebel.  All rights reserved.\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.5\n    \n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details at:\n    \n    http://www.gnu.org/licenses/gpl.html\n      \n\"\"\"\n\nimport rospy\nfrom geometry_msgs.msg import Twist, Point, Quaternion\nimport tf\nfrom frobo_nav.transform_utils import quat_to_angle, normalize_angle\nfrom math import degrees, radians, copysign, sqrt, pow, pi\n\nclass NavSquare():\n    def __init__(self):\n        # Give the node a name\n        rospy.init_node('nav_square', anonymous=False)\n        \n        # Set rospy to execute a shutdown function when terminating the script\n        rospy.on_shutdown(self.shutdown)\n\n        # How fast will we check the odometry values?\n        rate = 20\n        \n        # Set the equivalent ROS rate variable\n        r = rospy.Rate(rate)\n        \n        # Set the parameters for the target square\n        goal_distance = rospy.get_param(\"~goal_distance\", 3.0)      # meters\n        goal_angle = rospy.get_param(\"~goal_angle\", radians(90))    # degrees converted to radians\n        linear_speed = rospy.get_param(\"~linear_speed\", 0.1)        # meters per second\n        angular_speed = rospy.get_param(\"~angular_speed\", 0.6)      # radians per second\n        angular_tolerance = rospy.get_param(\"~angular_tolerance\", radians(0)) # degrees to radians\n        \n        # Publisher to control the robot's speed\n        self.cmd_vel = rospy.Publisher('/cmd_vel', Twist)\n         \n        # The base frame is base_footprint for the TurtleBot but base_link for Pi Robot\n        self.base_frame = rospy.get_param('~base_frame', '/base_link')\n\n        # The odom frame is usually just /odom\n        self.odom_frame = rospy.get_param('~odom_frame', '/odom')\n\n        # Initialize the tf listener\n        self.tf_listener = tf.TransformListener()\n        \n        # Give tf some time to fill its buffer\n        rospy.sleep(2)\n        \n        # Set the odom frame\n        self.odom_frame = '/odom'\n        \n        # Find out if the robot uses /base_link or /base_footprint\n        try:\n            self.tf_listener.waitForTransform(self.odom_frame, '/base_footprint', rospy.Time(), rospy.Duration(1.0))\n            self.base_frame = '/base_footprint'\n        except (tf.Exception, tf.ConnectivityException, tf.LookupException):\n            try:\n                self.tf_listener.waitForTransform(self.odom_frame, '/base_link', rospy.Time(), rospy.Duration(1.0))\n                self.base_frame = '/base_link'\n            except (tf.Exception, tf.ConnectivityException, tf.LookupException):\n                rospy.loginfo(\"Cannot find transform between /odom and /base_link or /base_footprint\")\n                rospy.signal_shutdown(\"tf Exception\")  \n                \n        # Initialize the position variable as a Point type\n        position = Point()\n\n        # Initialize the movement command\n        move_cmd = Twist()\n            \n        # Set the movement command to forward motion\n        move_cmd.linear.x = linear_speed\n            \n        # Get the starting position values     \n        (position, rotation) = self.get_odom()\n        initPosition = position\n\trospy.loginfo(\"Initial position at \" + str(position) + \" and rotation \" + str(degrees(rotation)) + \" degrees\")\n                        \n        x_start = position.x\n        y_start = position.y\n            \n        # Keep track of the distance traveled\n        distance = 0\n            \n        # Enter the loop to move along a side\n        while distance < goal_distance and not rospy.is_shutdown():\n            # Publish the Twist message and sleep 1 cycle         \n            self.cmd_vel.publish(move_cmd)\n               \n            r.sleep()\n        \n            # Get the current position\n            (position, rotation) = self.get_odom()\n                \n            # Compute the Euclidean distance from the start\n            distance = sqrt(pow((position.x - x_start), 2) + \n                            pow((position.y - y_start), 2))\n                \n        # Stop the robot when we are done\n        self.cmd_vel.publish(Twist())\n\n        #print result\n        (position, rotation) = self.get_odom()\n\trospy.loginfo(\"Final position at \" + str(position) + \" and rotation \" + str(degrees(rotation)) + \" degrees\")\n        rospy.loginfo(\"Difference (position.x - initPosition.x) \" + str(position.x - initPosition.x) + \"m\")\n        \n    def get_odom(self):\n        # Get the current transform between the odom and base frames\n        try:\n            (trans, rot)  = self.tf_listener.lookupTransform(self.odom_frame, self.base_frame, rospy.Time(0))\n        except (tf.Exception, tf.ConnectivityException, tf.LookupException):\n            rospy.loginfo(\"TF Exception\")\n            return\n\n        return (Point(*trans), quat_to_angle(Quaternion(*rot)))\n            \n    def shutdown(self):\n        # Always stop the robot when shutting down the node\n        rospy.loginfo(\"Stopping the robot...\")\n        self.cmd_vel.publish(Twist())\n        rospy.sleep(1)\n\nif __name__ == '__main__':\n    try:\n        NavSquare()\n    except rospy.ROSInterruptException:\n        rospy.loginfo(\"Navigation terminated.\")\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_to_pig_latin(sentence):\n words = sentence.split()\n pig_latin_words = []\n for word in words:\n Pig_latin = word[1:] + word[0] + 'ay'\n pig_latin_words.append(pig_Latin)\n pig_latin_sentence = ' '.join(pig_latin_words)\n return pig_latin_sentence but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: first_list = [1, 2, 3, 4, 5]\nsecond_list = [3, 4]\n\nnew_list = []\n\nfor item in first_list:\n    if item not in second_list:\n        new_list.append(item)\n        \nprint(new_list) # [1, 2, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(n):\n n = str(n)\n \n return n == n[::-1]\n \nnum = 123321\nif is_palindrome(num):\n print(f\"{num} is a palindrome\")\nelse:\n print(f\"{num} is not a palindrome\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_substring(string, substring):\n  if substring in string:\n    return \"Substring found!\"\n  else:\n    return \"Substring not found.\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def palindrome(num):\n    num = str(num)\n    if num == num[::-1]:\n        print(num + \" is a palindrome number\")\n    else: \n        print(num + \" is not a palindrome number\")\n\npalindrome(121)\n// Output: 121 is a palindrome number but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def intersect(a, b):\n  intersection = [] \n  for i in a:\n    for j in b:\n      if i == j and i not in intersection:\n        intersection.append(i)\n  return intersection\n\nprint(intersect([1, 7, 11, 58, 80], [11, 13, 7, 32, 80])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt \n\n# Data to plot\ndata = [0, 4, 5, 10, 11, 15]\n\n# Create a histogram \nplt.hist(data, bins = [0,5,10,15,20])\n\n# Label the x and y axis \nplt.xlabel(\"Value\") \nplt.ylabel(\"Number of Occurrences\") \n\n# Show the plot \nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fill_blanks(string): \n    return string.replace(\" \", \".\") \n  \n# Driver code \nstring = \"Python Programming\"\nprint(fill_blanks(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort(data):\n    n = len(data)\n    for i in range(n - 1):\n        min_index = i\n        for j in range(i + 1, n):\n            if data[min_index] > data[j]:\n                min_index = j\n        data[i], data[min_index] = data[min_index], data[i] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef roll_dice():\n    dice_roll = random.randint(1, 6)\n    print(\"You rolled a\", dice_roll)\n\nroll_dice() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def concatenate_strings(list_of_strings):\n    result = \"\"\n    for string in list_of_strings:\n        result += string\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def divide_without_operator(a, b):\n    return a // b + (a % b != 0)\n\nprint(divide_without_operator(9, 3)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, render_template, request\n\n#Initialize the app\napp = Flask(__name__)\n\n# Create a list of products\nproducts = [\n {'name': 'Apple', 'price': 3.99},\n {'name': 'Banana', 'price': 2.99},\n {'name': 'Kiwi', 'price': 4.99}\n]\n\n# Route for displaying the list of products\n@app.route('/')\ndef home():\n return render_template('index.html', products=products)\n\n# Route for adding a new product\n@app.route('/add_product', methods = ['POST'])\ndef add_product():\n new_product = { 'name': request.form['name'], 'price': request.form['price'] }\n products.append(new_product)\n return render_template('index.html', products=products)\n\n# Run the app\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def predict_label(features):\n    # write your code here\n    label = None\n    \n    if features[0] > 10 and features[1] > 20:\n        label = \"A\"\n    elif features[0] > 10 and features[1] < 20:\n        label = \"B\"\n    else:\n        label = \"C\"\n        \n    return label\n\nfeatures = [10, 20, 30]\nlabel = predict_label(features)\nprint(label) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mean(lst):\n    total = 0\n    for n in lst:\n        total += n\n    return total / len(lst)\n\nresult = mean([1, 5, 8, 9])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def encrypt_string(string):\n    letters = {}\n    for i in range(len(string)):\n        letters[string[i]] = i\n    encrypted_text = \"\"\n    for char in string:\n        encrypted_text += str(letters[char])\n    return encrypted_text but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_bmi(weight, height):\n    bmi = weight / ((height/100) ** 2)\n    if bmi < 18.5:\n        return bmi, \"Underweight\"\n    elif 18.5 <= bmi < 25:\n        return bmi, \"Normal weight\"\n    elif 25 <= bmi < 30:\n        return bmi, \"Overweight\"\n    else:\n        return bmi, \"Obese\"\n\nweight = 50\nheight = 170\n\nbmi, status = calculate_bmi(weight, height)\n\nprint(\"Your BMI is {:.1f}. You are {}.\".format(bmi, status)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: multiplication_table = {\n 1: { 1 : 1, 2 : 2, 3 : 3, 4 : 4, 5 : 5, 6 : 6, 7 : 7, 8 : 8, 9 : 9, 10 : 10 },\n 2: { 1 : 2, 2 : 4, 3 : 6, 4 : 8, 10 : 20 },\n 3: { 1 : 3, 2 : 6, 3 : 9, 4 : 12, 5 : 15, 6 : 18, 7 : 21, 8 : 24, 9 : 27, 10 : 30 },\n 4: { 1 : 4, 2 : 8, 3 : 12, 4 : 16, 5 : 20, 6 : 24, 7 : 28, 8 : 32, 9 : 36, 10 : 40 },\n 5: { 1 : 5, 2 : 10, 3 : 15, 4 : 20, 5 : 25, 6 : 30, 7 : 35, 8 : 40, 9 : 45, 10 : 50 },\n 6: { 1 : 6, 2 : 12, 3 : 18, 4 : 24, 5 : 30, 6 : 36, 7 : 42, 8 : 48, 9 : 54, 10 : 60 },\n 7: { 1 : 7, 2 : 14, 3 : 21, 4 : 28, 5 : 35, 6 : 42, 7 : 49, 8 : 56, 9 : 63, 10 : 70 },\n 8: { 1 : 8, 2 : 16, 3 : 24, 4 : 32, 5 : 40, 6 : 48, 7 : 56, 8 : 64, 9 : 72, 10 : 80 },\n 9: { 1 : 9, 2 : 18, 3 : 27, 4 : 36, 5 : 45, 6 : 54, 7 : 63, 8 : 72, 9 : 81, 10 : 90 },\n 10: { 1 : 10, 2 : 20, 3 : 30, 4 : 40, 5 : 50, 6 : 60, 7 : 70, 8 : 80, 9 : 90, 10: 100 }\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tweepy\nfrom tweepy import OAuthHandler\nimport json\n\n# Authorization Tokens\nconsumer_key = 'XXXXX'\nconsumer_secret = 'XXXXX'\naccess_token = 'XXXXX'\naccess_secret = 'XXXXX'\n\n# Creating the authentication object\nauth = OAuthHandler(consumer_key, consumer_secret)\n\n# Setting your access token and secret\nauth.set_access_token(access_token, access_secret)\n\n# Creating the API object while passing in auth information\napi = tweepy.API(auth) \n\n# Searching for the given keyword\nresult = api.search(q='#jokeoftheday',count=10)\n\n# Printing the output\nfor tweet in result:\n data = json.dumps(tweet._json, indent=2)\n print(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_index(a, x):\n    indices = []\n    if x not in a:\n        return -1\n    else:\n        for i in range(len(a)):\n            if a[i] == x:\n                indices.append(i)\n    return indices\n\nindices = find_index(a, x)\nprint(\"The index of element 2 in the list is\", indices) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_set(s):\n    result = []\n    for x in s:\n        if x not in result:\n            result.append(x)\n    print(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify(items):\n    cheap_items = []\n    expensive_items = []\n\n    for item in items:\n       if item[1] < 5:\n            cheap_items.append(item)\n       else:\n            expensive_items.append(item)\n\n    return (cheap_items, expensive_items)\n\nitems = [('fruit', 2.5), ('beer', 10), ('shampoo', 3), ('chocolate', 6)]\ncheap, expensive = classify(items)\nprint(cheap)\nprint(expensive) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insertion_sort(arr):\n    for i in range(1, len(arr)):\n        current_value = arr[i]\n        j = i - 1\n        while j >= 0 and arr[j] > current_value:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = current_value\n    return arr\n\narr = [4, 1, 3, 6, 2, 5]\nprint(insertion_sort(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_common_substring(str1, str2):\n    if len(str1) == 0 or len(str2) == 0:\n        return \"\"\n    matrix = [[0 for _ in range(0, len(str2)+1)] for _ in range(0, len(str1)+1)]\n    longest_string = \"\"\n    for i in range(1, len(str1)+1):\n        for j in range(1, len(str2)+1):\n            if str1[i-1] == str2[j-1]:\n                matrix[i][j] = matrix[i-1][j-1] + 1\n                if matrix[i][j] > len(longest_string):\n                    longest_string = str1[i-1 - matrix[i][j]+1 : i]\n            else:\n                matrix[i][j] = 0\n    return longest_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_contiguous_sum(arr):\n    max_sum = 0\n    current_sum = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import library\nimport random\n\n# Generate random numbers\nrandom_nums = []\n\nfor i in range(5):\n    random_nums.append(random.randint(0,100))\n\n# Print random numbers\nprint(random_nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_equal(num1, num2):\n return num1 == num2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_even_elems(arr):\n    sum_of_even = 0\n    for elem in arr:\n        if elem % 2 == 0:\n            sum_of_even += elem\n    return sum_of_even\n\narr = [1,2,3,4,5,6]\nprint(sum_even_elems(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: K-means clustering is an unsupervised machine learning algorithm for clustering data points into distinct groups. The goal is to partition the given data points into k distinct clusters. To perform k-means clustering in Python, you need to import the KMeans class from the scikit-learn library and initialize it with the number of clusters (k) you want to generate. Then, you need to fit the data points to the model and predict their labels. Finally, you can use the labels to group the data points into their respective clusters. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sum_of_docs = 0\nfor i in range(1000):\n     if i % 2 == 0 or i % 3 == 0 or i % 5 == 0:\n          sum_of_docs += i\n \nprint(sum_of_docs) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isMultipleOf5(num1, num2):\n # Calculate the sum\n sum = num1 + num2\n \n # Check if the sum is divisible by 5\n if sum % 5 == 0:\n return True\n else:\n return False\n\n# Take user input\nnum1 = int(input(\"Enter the first number: \"))\nnum2 = int(input(\"Enter the second number: \"))\n\n# Execute the function\nresult = isMultipleOf5(num1, num2)\n\n# Print the result\nprint(\"The sum is a multiple of 5:\", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: a = int(input(\"Enter first number: \"))\nb = int(input(\"Enter second number: \"))\nc = int(input(\"Enter third number: \"))\n\nminimum = min(a, b, c)\n\nprint(\"The smallest of the three numbers is\", minimum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef find_primes(n):\n  primes = [i for i in range(2, n) if all(i % j for j in range(2, int(math.sqrt(i))+1))]\n  return primes but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def number_to_words(number):\n    if number == 0:\n        return \"Zero\"\n \n    # Variables to keep track of output\n    output = \"\"\n    \n    # Placeholders for each of the three digits\n    ones_place = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    tens_place = [\"\", \"\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n    hundred_placements = [\"\", \"One Hundred\", \"Two Hundred\", \"Three Hundred\", \"Four Hundred\", \"Five Hundred\", \"Six Hundred\", \"Seven Hundred\", \"Eight Hundred\", \"Nine Hundred\"]\n    \n    # Hundreds place\n    if number % 100 == 0 and number > 100:\n        output = output + (hundred_placements[int(number/100)])\n        number = number % 100\n    else:\n        output = output + (hundred_placements[int(number/100)]) + \" \"\n        number = number % 100\n    \n    # Tens place    \n    if number >= 20: \n        output = output + (tens_place[int(number/10)]) + \" \"\n        number = number % 10\n    else:\n        output = output + (ones_place[number])\n        number = 0\n \n    # Adding the last number\n    if number > 0:\n        output = output + (ones_place[int(number/1)])\n \n    # Returns output\n    return output but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: original_list = [1, 1, 2, 2, 3, 4, 5, 5, 6]\n\ndef remove_duplicates(lst):\n    new_list = []\n    for item in lst:\n        if item not in new_list:\n            new_list.append(item)\n    return new_list\n\nprint(remove_duplicates(original_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(arr, N):\n  for i in range(len(arr)):\n    if arr[i] == N:\n      return i+1\n  return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def change_case(txt):\n    result = \"\"\n    for ch in txt:\n        if ch.isupper():\n            result += ch.lower()\n        elif ch.islower():\n            result += ch.upper()\n    return result\n\ntxt = \"This Is A Test String\"\nresult = change_case(txt)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def prime_factors(n):\n    prime_factors = []\n    while n % 2 == 0: \n        prime_factors.append(2)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        while n % i == 0: \n            prime_factors.append(int(i))\n            n = n / i\n    if n > 2: \n        prime_factors.append(int(n))\n    return prime_factors but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: multiples_of_3 = [num for num in range(0, 101) if num % 3 == 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_people_in_age_range(ageGroup1, ageGroup2):\n total = 0\n for age in ageGroup1 + ageGroup2:\n  if age >= 10 and age <= 20:\n   total += 1\n return total but is not the same. just give one example and only return the code."}
