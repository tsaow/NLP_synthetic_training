{"prompt": "make some code that functions the same as the following code: import random\n\nn = 10\nlst = [random.randrange(1, 101) for _ in range(n)]\nsum_lst = sum(lst)\n\nprint(\"Random list: \", lst)\nprint(\"Sum of the list: \", sum_lst) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def func1(a):\n    return a**2\n\ndef func2(a):\n    return a**2 + 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nPerformance tests based on tests/highlevel/high-in-low6-memory.py\nSee also auth-*py.\n\n- Data overhead is now at ~6.5 ms / MB.\n  A lot of the data overhead comes from json.dumps. This is to build mixed cells.\n  The rest is from get_hash.\n  Pure Python version (with get_hash and dumps) is at 6.3 ms / MB,\n  so the rest of the data overhead is fine!\n\n- Database upload overhead is about the same (7 ms / MB) with a flatfile backend\n  Database download is almost free.\n\n- A structured cell auth operation is about 10 ms.\n\n- map-list macro evaluation is cheap, 5 ms per (parallel) transformation\n\n- re-translation is about 20 ms per transformation (on top of the macro)\n\n- expression evaluation is about 10 ms + 0.5 ms / MB (of input + output) per transformation\n  (speculative relationship!)\n\n- BUT: Non-linear scaling:\n  between 100 and 1000 parallel transformations, a x4 slowdown is observed for the last three overheads above.\n\n\nNOTE: Mixed-to-str conversion is expensive, don't do it!\n\n\n\n\"\"\"\n\nimport sys\nimport seamless\n\nimport seamless.core.execute\nseamless.core.execute.DIRECT_PRINT = True\n\nseamless.database_sink.connect()\nseamless.database_cache.connect()\n#seamless.set_ncores(2)\n#seamless.set_parallel_evaluations(5)\n\nseamless.set_ncores(8) ###\nseamless.set_parallel_evaluations(100)  ###\n\n# for the big testing, 20 evaluations\nseamless.set_parallel_evaluations(20)  ###\n\n\"\"\"\nimport logging\nlogging.basicConfig()\nlogging.getLogger(\"seamless\").setLevel(logging.DEBUG)\n\"\"\"\n\nfrom seamless.highlevel import Context, Cell, Macro\nfrom seamless.highlevel.library import LibraryContainer\n\nimport time\nimport cProfile\ncProfile.profiler = cProfile.Profile()\n\nmylib = LibraryContainer(\"mylib\")\nmylib.map_list_N = Context()\ndef constructor(ctx, libctx, context_graph, inp, result):\n    m = ctx.m = Macro()\n    m.graph = context_graph\n    m.pins.result = {\"io\": \"output\", \"celltype\": \"mixed\", \"hash_pattern\": {\"!\": \"#\"}}\n\n    ctx.inp = Context()\n    ctx.cs_inp = Context()\n    inp_prefix = \"INPUT_\"\n    m.inp_prefix = inp_prefix\n    for key in inp:\n        c = Cell()\n        ctx.inp[key] = c\n        c.hash_pattern = {\"!\": \"#\"}\n        inp[key].connect(c)\n        ctx.cs_inp[key] = Cell(\"checksum\")\n        ctx.cs_inp[key] = ctx.inp[key]\n        setattr(m, inp_prefix + key , ctx.cs_inp[key])\n\n    def map_list_N(ctx, inp_prefix, graph, **inp):\n        #print(\"INP\", inp)\n        first_k = list(inp.keys())[0]\n        length = len(inp[first_k])\n        first_k = first_k[len(inp_prefix):]\n        for k0 in inp:\n            k = k0[len(inp_prefix):]\n            if len(inp[k0]) != length:\n                err = \"all cells in inp must have the same length, but '{}' has length {} while '{}' has length {}\"\n                raise ValueError(err.format(k, len(inp[k0]), first_k, length))\n\n        print(\"LENGTH\", length)\n\n        from seamless.core import Cell as CoreCell\n        from seamless.core.unbound_context import UnboundContext\n        pseudo_connections = []\n        ctx.result = cell(\"mixed\", hash_pattern = {\"!\": \"#\"})\n\n        ctx.sc_data = cell(\"mixed\", hash_pattern = {\"!\": \"#\"})\n        ctx.sc_buffer = cell(\"mixed\", hash_pattern = {\"!\": \"#\"})\n        ctx.sc = StructuredCell(\n            data=ctx.sc_data,\n            buffer=ctx.sc_buffer,\n            inchannels=[(n,) for n in range(length)],\n            outchannels=[()],\n            hash_pattern = {\"!\": \"#\"}\n        )\n\n        for n in range(length):\n            #print(\"MACRO\", n+1)\n            hc = HighLevelContext(graph)\n\n            subctx = \"subctx%d\" % (n+1)\n            setattr(ctx, subctx, hc)\n\n            if not hasattr(hc, \"inp\"):\n                raise TypeError(\"map_list_N context must have a subcontext called 'inp'\")\n            hci = hc.inp\n            if not isinstance(hci, UnboundContext):\n                raise TypeError(\"map_list_N context must have an attribute 'inp' that is a context, not a {}\".format(type(hci)))\n\n            for k0 in inp:\n                k = k0[len(inp_prefix):]\n                if not hasattr(hci, k):\n                    raise TypeError(\"map_list_N context must have a cell called inp.'{}'\".format(k))\n                if isinstance(hci[k], StructuredCell):\n                    raise TypeError(\"map_list_N context has a cell called inp.'{}', but its celltype must be mixed, not structured\".format(k))\n                if not isinstance(hci[k], CoreCell):\n                    raise TypeError(\"map_list_N context must have an attribute inp.'{}' that is a cell, not a {}\".format(k, type(hci[k])))\n                if hci[k].celltype != \"mixed\":\n                    raise TypeError(\"map_list_N context has a cell called inp.'{}', but its celltype must be mixed, not {}\".format(k, hci[k].celltype))\n\n                con = [\"..\" + k], [\"ctx\", subctx, \"inp\", k]\n                pseudo_connections.append(con)\n                cs = inp[k0][n]\n                hci[k].set_checksum(cs)\n\n            resultname = \"result%d\" % (n+1)\n            setattr(ctx, resultname, cell(\"mixed\"))\n            c = getattr(ctx, resultname)\n            hc.result.connect(c)\n            c.connect(ctx.sc.inchannels[(n,)])\n            con = [\"ctx\", subctx, \"result\"], [\"..result\"]\n            pseudo_connections.append(con)\n\n        ctx.sc.outchannels[()].connect(ctx.result)\n        ctx._pseudo_connections = pseudo_connections\n        print(\"/MACRO\")\n\n        \"\"\"\n        import logging\n        logging.basicConfig()\n        logging.getLogger(\"seamless\").setLevel(logging.DEBUG)\n        \"\"\"\n\n        import cProfile\n        cProfile.profiler.enable()\n\n    m.code = map_list_N\n    ctx.result = Cell()\n    ctx.result.hash_pattern = {\"!\": \"#\"}\n    ctx.result = m.result\n    result.connect_from(ctx.result)\n\n\nmylib.map_list_N.constructor = constructor\nmylib.map_list_N.params = {\n    \"context_graph\": \"context\",\n    \"inp\": {\n        \"type\": \"celldict\",\n        \"io\": \"input\"\n    },\n    \"result\": {\n        \"type\": \"cell\",\n        \"io\": \"output\"\n    },\n}\n\nctx = Context()\nctx.adder = Context()\nsctx = ctx.adder\nsctx.inp = Context()\nsctx.inp.a = Cell(\"mixed\")\nsctx.inp.b = Cell(\"mixed\")\nsctx.a = Cell(\"mixed\")\nsctx.b = Cell(\"mixed\")\nsctx.a = sctx.inp.a\nsctx.b = sctx.inp.b\ndef add(a,b):\n    print(\"ADD\", a[:10])\n    return a+b\nsctx.add = add\nsctx.add.a = sctx.a\nsctx.add.b = sctx.b\nsctx.result = sctx.add\nsctx.result.celltype = \"mixed\"\nctx.compute()\n\nctx.data_a = Cell()\nctx.data_a.hash_pattern = {\"!\": \"#\"}\nctx.data_b = Cell()\nctx.data_b.hash_pattern = {\"!\": \"#\"}\nctx.compute()\n\n# Next section is 14.5 secs (if the database is filled), but can be elided to ~0.5s by setting checksum directly (if in flatfile cache).\n# Not having a DB at all is also 13 secs, so DB request communication (without upload) doesn't cost much.\n\nrepeat = int(10e6)\n#repeat = int(5)\n#for n in range(1000): # 2x10 GB\n#for n in range(100): # 2x1 GB\nfor n in range(1000):\n    a = \"A:%d:\" % n + str(n%10) * repeat\n    b = \"B:%d:\" % n + str(n%10) * repeat\n    ctx.data_a[n] = a\n    ctx.data_b[n] = b\n    if n % 20 == 0:\n        ctx.compute()\n    print(n+1)\n\nctx.compute()\nprint(ctx.data_a.checksum)\nprint(ctx.data_b.checksum)\n\n\"\"\"\nctx.data_a.set_checksum(\"d07050610c50de8c810aa1d1e322786ed8932cf6eafa0fbe1f132b2c881af9c2\")\nctx.data_b.set_checksum(\"374c02504f89ed0a760b03c3e1fd2258988576b919d763254709b66fc7bfb22e\")\nctx.compute()\n\n\"\"\"\n\n#\n### For repeat=10 million, 1000 items\n### ctx.data_a.set_checksum(\"fa4e6aa7e7edaa6feb036fd5e8c28ffc48575cefc332187552c5be4bf0511af8\")\n### ctx.data_b.set_checksum(\"2988c44780790e4ffceb1f97391e475f165e316f27a656957282a2998aee9d4f\")\n\n### For repeat=10 million, 200 items\n### ctx.data_a.set_checksum(\"d07050610c50de8c810aa1d1e322786ed8932cf6eafa0fbe1f132b2c881af9c2\")\n### ctx.data_b.set_checksum(\"374c02504f89ed0a760b03c3e1fd2258988576b919d763254709b66fc7bfb22e\")\n\n### For repeat=10 million\n### ctx.data_a.set_checksum(\"983730afb7ab41d524b72f1097daaf4a3c15b98943291f96e523730849cabe8c\")\n### ctx.data_b.set_checksum(\"46dabc02b59be44064a9e06dd50bc6841833578c2b6339fbc43f090cc17831fa\")\n\n### For repeat=5\n### ctx.data_a.set_checksum(\"9b4a551a6c1c5830d6070b9c22ae1788b9743e9637be47d56103bcda019a897c\")\n### ctx.data_b.set_checksum(\"9820f1ab795db7b0d195f21966ecb071d76e9ce2fd3a90845974a3905584eb3e\")\nctx.compute()\n\n\"\"\"\nIf there is no database (100 x repeat 10e6):\n- 13 secs up to here (6.5 ms per MB)\n- 0.5 secs to evaluate the macro\n- 2.3 secs (2.8 - 0.5) for re-translation (23 ms per transformer)\n- 32 secs total time, which leaves 32 - 13 - 0.5 = 18.5 secs for transformation and expression evaluation\n  Since 13 secs is required for calculate checksum and decoding, that means ~5.5 secs (55 ms per transformer) overhead\n  This is a supplement of 32 ms over just re-translation\n\nIf there is no database (100 x repeat 5):\n- 2.3 secs up to here (12 ms per auth operation)\n- Still 0.5 secs to evaluate the macro\n- Still 2.3 secs (2.8 - 0.5) for re-translation (23 ms per transformer, independent of data size!)\n- 6.2 secs total time, which leaves 6.2 - 2.3 - 0.5 = 3.5 secs for transformation and expression evaluation\n  This is an overhead of 35 ms per transformer, a supplement of just 12 ms over re-translation\n  The 20 ms reduction compared to above comes from not handling 2x10 MB of input and 20 MB of output,\n  so that's 0.5 ms/MB.\n\nIf there is no database (1000 x repeat 5):\n- 11.7 secs up to here (12 ms per auth operation). So scales linearly.\n- 6.5 secs to evaluate the macro, so scales about linearly\n- 98 secs (104.5 - 6.5) for re-translation, which is 4x slower than above  (98 ms)\n- 145 secs total time, which leaves 145 - 11.7 - 6.5 = 127 secs for transformation and expression evaluation\n  This is an overhead of 127 ms per transformer, which is 4x slower than above (127 ms).\n  => So in principle, 90 sconds slower than might be\n    - Some 45 secs is await-upon-connection-tasks, this could be optimized?\n    - 12 seconds from isinstance is probably unavoidable\n    - 9 seconds comes from validate deep structure, that may be unavoidable\n    - 5 seconds each from taskmanager.add_task (61k tasks) and asyncio.Task.done (119 million tasks). Avoidable?\n  => do maplist-inside-maplist\n\nIf the database has not been filled:\n- 27.5 secs up to here\nIf the database has been filled:\n- 14 secs up to here: to synthesize the data, and to verify that all is present\n  So the raw upload is 13.5 seconds (27.5 - 14); and communication with the DB delays only 1 sec.\n- 1.5 secs up to here, with the above elision.\n\nWith the database:\n- 1.5 secs to evaluate the macro (DB slows down!)\n- 5.5 secs for re-translation\n- 45.7 secs total time, which leaves 45.7 - 5.5 - 1.5 = 38.5 secs for transformation and expression evaluation\n  Compare this to the 18.5 secs w/o database, this is a loss of 20 secs.\n  But we have to count the download of the inputs and upload of the results.\n  When removing the tfr entries from the database, transformations will be repeated, but no buffers will be uploaded,\n  as the sink knows them already.\n  This brings total time down to 32 secs, the same as no database!\n  So all of the extra overhead is from upload, and download is almost free. (This could be hard disk caching, though)\n- 5.5 secs total time with pulling transformation results out of the DB. Again, download is almost free.\n\n\nBig test with the database (1000 x repeat 10e6):\n- Total time 940 secs. Data upload overhead should be ~120 secs, and Seamless data overhead should be ~140 secs.\n- 142 secs for re-translation + macro evaluation (142 ms / transformation), a factor 6 slowdown\n- 940 - 142 - 120 - 140 = ~540 secs for evaluation\n   I.e. 540 ms per transformation. If the same slowdown applies, it would have been 90.\n   But we would have expected 30. So a larger slowdown (fewer parallel expressions may have been a cause too)\n\"\"\"\n\nctx.result = Cell()\nctx.result.hash_pattern = {\"!\": \"#\"}\nctx.compute()\n\nctx.include(mylib.map_list_N)\nctx.inst = ctx.lib.map_list_N(\n    context_graph = ctx.adder,\n    inp = {\"a\": ctx.data_a, \"b\": ctx.data_b},\n    result = ctx.result\n)\nctx.compute()\n\nprint(\"Exception:\", ctx.inst.ctx.m.exception)\nprint(ctx.result.data)\n\nimport pstats\nsortby = 'tottime'\nps = pstats.Stats(cProfile.profiler).sort_stats(sortby)\nps.print_stats(40)\n\nt0 = time.time()\n\"\"\"\nprint(\"Re-set\")\ngraph = ctx.get_graph()\nctx_dummy = Context()\ndummy_graph = ctx_dummy.get_graph()\nctx.set_graph(dummy_graph)\nctx.translate(force=True)\nctx.compute()\nprint(time.time()-t0)\nprint(\"Re-eval\")\nctx.set_graph(graph)\n\"\"\"\n\"\"\"\nctx.translate(force=True)\nctx.compute()\nprint(time.time()-t0)\n\"\"\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def probability_of_two_events(probability_of_first_event, probability_of_second_event):\n    \"\"\"\n    Calculates the probability of two independent events occurring simultaneously.\n    \n    Args:\n        probability_of_first_event (float): The probability of the first event occuring.\n        probability_of_second_event (float): The probability of the second event occuring.\n    \n    Returns: \n        float: The probability of both events occurring simultaneously.\n    \"\"\"\n       \n    probability = probability_of_first_event * probability_of_second_event\n    \n    return probability but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(array): \n    result = set() \n    for element in array: \n        result.add(element) \n  \n    return list(result) \n  \nresult = remove_duplicates(array) \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\nimport pandas as pd\n\ndata = {\n \"Name\": \"John Smith\",\n \"Age\": 25,\n \"Location\": \"New York, USA\"\n}\n\ndf = pd.DataFrame.from_dict(json.loads(json.dumps(data)))\nprint(df)\n\nOutput\n   Name  Age      Location\n0  John   25  New York, USA but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Circle:\n \n    def __init__(self, radius):\n        self.radius = radius\n \n    def area(self):\n        return self.radius**2 * 3.14\n \n    def circumference(self):\n        return 2 * 3.14 * self.radius but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\nimport requests\n\n# Handler function\ndef handler(event, context):\n # Make request\n response = requests.get('https://api.example.com/data')\n \n # Parse response\n data = response.json()\n \n return {\n 'statusCode': 200,\n 'body': json.dumps(data)\n } but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Define a list of possible moves\nmoves = [\"rock\", \"paper\", \"scissors\"]\n\n# Define the AI's move\ndef ai_move():\n    ai_choice = random.choice(moves)\n    return ai_choice\n\n# Define the function to determine the winner\ndef play_round(player_move, ai_move):\n    if player_move == ai_move:\n        result = \"tie\"\n    elif (player_move == \"rock\" and ai_move == \"scissors\") or (player_move == \"paper\" and ai_move == \"rock\") or (player_move == \"scissors\" and ai_move == \"paper\"):\n             result = \"player\"\n    else:\n        result = \"ai\"\n    return result\n\n# Define a function to check the opponent's last move\ndef check_opponent_move(opponent_move):\n    if opponent_move == \"rock\":\n        ai_choice = \"paper\"\n    elif opponent_move == \"paper\":\n        ai_choice = \"scissors\"\n    elif opponent_move == \"scissors\":\n        ai_choice = \"rock\"\n    return ai_choice\n\n# Play the game\nplayer_move = input(\"Choose your move: \")\nopponent_move = input(\"What was your opponent's last move? \")\n\nai_choice = check_opponent_move(opponent_move)\nresult = play_round(player_move, ai_choice)\n \nif result == \"player\":\n    print(\"You won!\")\nelif result == \"ai\":\n    print(\"You lost!\")\nelse:\n    print(\"It's a tie!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n   if n<0: \n      print(\"Incorrect input\") \n# First Fibonacci number is 0 \n   elif n==1: \n      return 0\n# Second Fibonacci number is 1 \n   elif n==2: \n      return 1\n   else: \n      return Fibonacci(n-1)+Fibonacci(n-2) \n\n# Input number of terms in the Fibonacci sequence\nnterms = 10\n\n# Check if the input number is valid\nif nterms <= 0:\n   print(\"Incorrect input\")\nelse:\n   print(\"Fibonacci sequence:\")\n   for i in range(nterms):\n       print(Fibonacci(i))\n       \n# This can be used to solve the Fibonacci Sequence puzzle\n# The puzzle is -\n# Given a number n, find the nth Fibonacci number\n# That can be easily done using the above code but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findMax(arr):\n    max = arr[0]\n    for num in arr:\n        if num > max:\n            max = num\n    return max\n\nprint(findMax(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef gradient_descent(x, y, alpha=1e-4, tol=1e-4):\n    n,m = x.shape\n    weights = np.zeros(m)\n    y_pred = np.matmul(x, weights)\n    SSE = np.sum((y - y_pred)**2)\n    prev_SSE = 0.\n    weights_list=[]\n    while np.abs(SSE - prev_SSE) > tol:        \n        prev_SSE = SSE\n        gradient = np.matmul(x.T,(y - y_pred))\n        weights += alpha * gradient\n        weights_list.append(weights)\n        y_pred = np.matmul(x, weights)\n        SSE = np.sum((y - y_pred)**2)\n\n    return weights_list, SSE but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os\nimport collections\n\ndef create_inverted_index(documents):\n    inverted_index = collections.defaultdict(list)\n\n    for doc_id, document in enumerate(documents):\n        # Go through each word in the document\n        for word in document.split():\n            # Add the doc_id to the entry in the inverted_index\n            # for this word\n            inverted_index[word].append(doc_id)\n\n    return inverted_index\n\nif __name__ == \"__main__\":\n    documents = [\n    \"It was the best of times, it was the worst of times\",\n    \"It was the age of wisdom, it was the age of foolishness\",\n    \"It was the epoch of belief, it was the epoch of incredulity\" \n    ]\n\n    inverted_index = create_inverted_index(documents)\n    print(inverted_index) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: <!DOCTYPE html>\n<html>\n\n<head>\n <title>HTML and Python</title>\n <script>\n  // Function to submit data to python program\n  function submitData() {\n   let myForm = document.getElementById(\"myForm\");\n   let formData = new FormData(myForm);\n   formData.append(\"inputData\", document.getElementById(\"inputData\").value);\n\n   fetch('/submit', {\n    method: 'POST',\n    body: formData\n   });\n  }\n </script>\n</head>\n\n<body>\n <form id=\"myForm\" action=\"/submit\" method=\"POST\">\n  <input type=\"text\" id=\"inputData\"/>\n  <input type=\"submit\" value=\"Send data\" onclick=\"submitData()\">\n </form>\n</body>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sklearn\nimport numpy as np\n\n# load the classifier\nclf = sklearn.svm.SVC()\n\n# load the pre-trained classifier\nwith open('classifier.pkl', 'rb') as f:\n    clf = pickle.load(f)\n\ndef classify_text(texts):\n    # compile the inputs into a single array\n    data = np.array(texts)\n    \n    # predict the labels\n    labels = clf.predict(data)\n    \n    return labels\n\nlabels = classify_text([\n    \"This article discusses climate change in Europe.\",\n    \"This article discusses the economic impact of the coronavirus pandemic.\"\n])\n\nprint(labels) # -> ['Climate Change', 'Economic Impact'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Cell:\n    def __init__(self, row, col):\n        self.row = row\n        self.col = col \n\n    def move_left(self):\n        self.col -= 1\n\n    def move_right(self):\n        self.col += 1\n\n    def move_up(self):\n        self.row -= 1\n\n    def move_down(self):\n        self.row += 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def capitalize_words(string):\n  words = string.split()\n  capitalized_words = [word.capitalize() for word in words]\n  return ' '.join(capitalized_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_dicts(dict1, dict2):\n    dict3 = {**dict1, **dict2} \n    return dict3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_strings(s1, s2):\n m = len(s1)\n n = len(s2)\n \n # Create a table to store results of subproblems\n dp = [[0 for x in range(n + 1)] for x in range(m + 1)]\n \n # Fill d[][] in bottom up manner\n for i in range(m + 1):\n  for j in range(n + 1):\n   if i == 0 or j == 0:\n    dp[i][j] = 0\n   elif s1[i - 1] == s2[j - 1]:\n    dp[i][j] = 1 + dp[i - 1][j - 1]\n   else:\n    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n \n # LCS will be last entry in the lookup table\n return dp[m][n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: word_count = {}\n\nfor word in words:\n    if word not in word_count:\n        word_count[word] = 1\n    else:\n        word_count[word] += 1\n\nprint(word_count) # output: {'Hello': 2, 'World': 1, 'again': 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n): \n    if n == 0: \n        return 1\n    return n*factorial(n-1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def extract_substring(string, start, end):\n    substr = string[start : end]\n    return substr\n\nstring = 'Python is fun'\nstart = 7\nend = 11\n\nprint(extract_substring(string, start, end)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compute_average(numbers):\nsum = 0\nfor num in numbers:\n sum += num\nreturn sum/len(numbers)\n\nnumbers = [1, 3, 5, 7, 9]\naverage = compute_average(numbers)\nprint(\"Average is \" + str(average)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk \nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentences = [\"I am happy.\", \"I am not happy.\", \"This is great!\"]\n\nanalyzer = SentimentIntensityAnalyzer()\n\nfor sentence in sentences:\n    scores = analyzer.polarity_scores(sentence)\n    print(f\"{sentence} : {scores}\")\n\n# Output: \n# I am happy. : {'neg': 0.0, 'neu': 0.357, 'pos': 0.643, 'compound': 0.6249}\n# I am not happy. : {'neg': 0.504, 'neu': 0.496, 'pos': 0.0, 'compound': -0.5859}\n# This is great! : {'neg': 0.0, 'neu': 0.312, 'pos': 0.688, 'compound': 0.6249} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\n\nwhile True:\n    localtime = time.localtime()\n    result = time.strftime(\"%I:%M:%S %p\", localtime)\n    print(result, end=\"\\r\")\n    time.sleep(1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MergeTwoLists():\n    def merge(self, left_list, right_list):\n        \"\"\"Merge two sorted lists\"\"\"\n        i = 0\n        j = 0\n        merged_list = []\n        while i < len(left_list) and j < len(right_list):\n            if left_list[i] < right_list[j]:\n                merged_list.append(left_list[i])\n                i += 1\n            else:\n                merged_list.append(right_list[j])\n                j += 1\n\n        merged_list += left_list[i:]\n        merged_list += right_list[j:]\n        return merged_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_non_alpha(string):\n    new_string = \"\"\n    for char in string:\n        if char.isalpha():\n            new_string += char\n    return new_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.cluster import KMeans\nimport numpy as np\n \n#create array of data points \ndata_points = np.array([[0, 0], [5, 5], [10, 10], [15, 15], [20, 20]])\n \n# Build and fit model\nkmeans = KMeans(n_clusters=2).fit(data_points)\n \n# Predict clusters\nlabels = kmeans.predict(data_points) \n \n# Label data points\nlabels_mapped = lables.tolist()\nlabel_dict = dict(zip(data_points.tolist(),labels_mapped))\n \n# Print result\nfor data_point, label in label_dict.items():\n    print(\"Data point:\", data_point, \", Label:\", label) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def prime_factorization(n):\n    # list to store prime factors\n    prime_factors = [] \n  \n    # remove any factors of 2 first\n    while n % 2 == 0: \n        prime_factors.append(2) \n        n = n / 2\n  \n    # n must be odd at this point \n    for i in range(3,int(math.sqrt(n))+1,2): \n          \n        # while i divides n , print i ad divide n \n        while n % i== 0: \n            prime_factors.append(int(i)) \n            n = n / i \n      \n    # Condition if n is a prime \n    # number greater than 2 \n    if n > 2: \n        prime_factors.append(int(n)) \n    \n    return prime_factors but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(string): \n    string = string[::-1] \n    return string \n  \n# Driver code \nstring = \"Python Programming\"\nprint(reverse_string(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import csv\nfrom datetime import datetime\n\n#open CSV file for reading\nwith open('source.csv', 'r') as file_in:\n #open other CSV file for writing\n with open('destination.csv', 'w', newline='') as file_out:\n  reader = csv.reader(file_in)\n  writer = csv.writer(file_out)\n\n  for row in reader:\n   if row[0] == \"name\": #skip the first row\n    #write old header\n    writer.writerow(row)\n   else:\n    #convert date format\n    dt = datetime.strptime(row[1], '%m/%d/%Y').strftime('%d/%m/%Y')\n    #write data with new format\n    writer.writerow([row[0], dt]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def separate_odd_even(numbers):\n  even = []\n  odd = []\n\n  for number in numbers:\n    if number % 2 == 0:\n      even.append(number)\n    else:\n      odd.append(number)\n\n  return even, odd\n\nnumbers = [2, 4, 7, 8, 11, 9]\n\neven, odd = separate_odd_even(numbers)\n\nprint(\"Even numbers: \", even)\nprint(\"Odd numbers: \", odd) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_the(text):\n    count = 0\n    words = text.split()\n    for word in words:\n        if word == \"the\":\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    text = \"The quick brown fox jumps over the lazy dog\"\n    print(count_the(text)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_sorted_lists(list1, list2):\n merged_list = []\n \n\t#loop through each element and add to list in sorted order\n\twhile list1 != [] and list2 != []:\n\t\tif list1[0] <= list2[0]:\n\t\t\tmerged_list.append(list1[0])\n\t\t\tlist1.remove(list1[0])\n\t\telse:\n\t\t\tmerged_list.append(list2[0])\n\t\t\tlist2.remove(list2[0])\n \n\t #if any elements left\n\tif list1 != []:\n\t\tmerged_list.extend(list1)\n\tif list2 != []:\n\t\tmerged_list.extend(list2)\n \n\treturn merged_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nnumber = random.randint(1, 10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def tsp(graph, start, end): \n    # Create an unvisited list \n    unvisited = {vertex: None for vertex in graph} \n    current = start \n    unvisited[current] = current \n    visited = dict() \n    route = list() \n  \n    while True: \n        visited[current] = current \n        route.append(current) \n        unvisited.pop(current, None) \n        if current == end: \n            break\n  \n        min_dist = float('inf')\n        for neighbour in graph[current].keys(): \n            if neighbour not in unvisited: \n                continue\n            dist = graph[current][neighbour]\n            if dist < min_dist: \n                min_dist = dist \n                next_vertex = neighbour \n  \n        current = next_vertex \n  \n    route.append(end) \n    return route but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_sum_subarray(arr):\n    max_sum = None\n \n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            total_sum = 0\n            for y in range(i, len(arr)):\n                for x in range(j, len(arr[y])):\n                    total_sum += arr[y][x]\n \n            if max_sum is None or total_sum > max_sum:\n                max_sum = total_sum\n \n    return max_sum\n \narr = [[1, -2, 3], [4, 5, -6], [7, 8, 9]]\nprint(max_sum_subarray(arr))\n\n# Output should be 19 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\ndf = pd.read_sql_query(\"SELECT Customer_Name, COUNT(Order_Id) AS Number_of_Orders FROM Orders GROUP BY Customer_Name\", con)\nresult = df.to_dict('records') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nPython program to convert a given string of mathematical expression from infix notation to postfix notation.\n\"\"\"\n\n# Import Stack\nfrom stack import Stack\n\n# Function to convert Infix expression to Postfix\ndef infixToPostfix(exp):\n\n\t# Create a stack to store operators. \n\ts = Stack()\n\n\t# Create a string to store postfix expression\n\tpostfix = \"\"\n\t\n\t# Scan through the expression one character at a time.\n\tfor c in exp:\n\t\t\n\t\t# If character is an operand, append it in postfix\n\t\tif (c.isalpha()):\n\t\t\tpostfix += c\n\t\t\t\n\t\t# If character is an operator ( +, - or * )\n\t\telif (c == \"+\" or c == \"-\" or c == \"*\"):\n\t\t\t\n\t\t\t# If the stack is empty, push the operator\n\t\t\tif s.isempty():\n\t\t\t\ts.push(c)\n\t\t\t\n\t\t\t# If the stack is not empty\n\t\t\telse:\n\t\t\t\t# pop all operators from stack\n\t\t\t\t# until an operator with lower precedence \n\t\t\t\t# is found\n\t\t\t\twhile s.isempty() == False and precedence(c) <= precedence(s.top()):\n\t\t\t\t\tpostfix = postfix + s.pop()\n\t\t\t\t\n\t\t\t\t# Push the operator onto stack\n\t\t\t\ts.push(c)\n\t\t\n\t\t# If character is ( or ), push it to stack\n\t\telif c == \"(\":\n\t\t\ts.push(c)\n\t\telif c == \")\":\n\t\t\t\n\t\t\t# pop all operators from stack\n\t\t\t# until an opening bracket is found\n\t\t\twhile s.top() != \"(\":\n\t\t\t\tpostfix = postfix + s.pop()\n\t\t\t\n\t\t\t# Remove the opening bracket\n\t\t\ts.pop()\n\t\t\t\n\t# append all operators to postfix\n\twhile s.isempty() == False:\n\t\tpostfix = postfix + s.pop()\n\t\n\treturn postfix\n\n# Function to return precedence of operators \ndef precedence(operator): \n\tif operator == '+' or operator == '-': \n\t\treturn 1 \n\tif operator == '*': \n\t\treturn 2 \n\treturn 0 \n\n# Driver program to test above function\nexp = \"A+B*C\"\nprint(infixToPostfix(exp)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import networkx as nx \n\ndef rank_influential_bloggers(data):\n G = nx.Graph()\n\n # Create a NetworkX graph based on the given dataset\n # ...\n\n # Calculate the influence of each node in the graph\n influencer_scores = nx.pagerank(G)\n\n # Sort the influencer scores in descending order\n sorted_influence_scores = sorted(influencer_scores.items(), key=lambda x: x[1], reverse=True)\n\n # Get the top 5 most influential bloggers\n top_influencers = [tuple[0] for tuple in sorted_influence_scores[:5]]\n\n return top_influencers but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\n from nltk.sentiment.vader import SentimentIntensityAnalyzer \n \nsid = SentimentIntensityAnalyzer()\n\ndef predict_sentiment(tweet):\n scores = sid.polarity_scores(tweet)\n if scores['compound'] >= 0.5:\n return 'Positive'\n elif scores['compound'] <= -0.5:\n return 'Negative'\n else:\n return 'Neutral'\n \ntweet = \"I am feeling positive about life today!\"\n\nprint(predict_sentiment(tweet))\n# Output: Positive but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def lcp(arr):\n    if len(arr) == 0:\n        return \"\"\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        prefix = arr[0]\n        for i in range(1, len(arr)):\n            while arr[i].find(prefix) != 0:\n                prefix = prefix[:-1]\n        return prefix\n\nresult = lcp([\"flower\",\"flow\",\"flight\"])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Get user input\ninput = input('Enter \"repeat\" to repeat the code: ')\n\n# Execute the code while user input is \"repeat\" \nwhile input == 'repeat':\n\tprint(\"Hello World\")\n\tinput = input('Enter \"repeat\" to repeat the code: ') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(string):\n    return string[::-1]\n\nresult = reverse_string(\"Hello\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\nimport urllib\nimport re\nfrom urllib.request import urlopen\nfrom bs4 import BeautifulSoup, NavigableString\n\nimport nltk\n\nnltk.download('punkt')\n\nfrom nltk import sent_tokenize\n\ndef parseRes2(soup, title, url, cur, author, date, collectiontitle):\n    chapter = 0\n    sen = \"\"\n    num = 1\n    [e.extract() for e in soup.find_all('br')]\n    [e.extract() for e in soup.find_all('table')]\n    [e.extract() for e in soup.find_all('span')]\n    [e.extract() for e in soup.find_all('a')]\n    for x in soup.find_all():\n        if len(x.text) == 0:\n            x.extract()\n    getp = soup.find_all('p')\n    #print(getp)\n    i = 0\n    for p in getp:\n        # make sure it's not a paragraph without the main text\n        try:\n            if p['class'][0].lower() in ['border', 'pagehead', 'shortborder', 'smallboarder', 'margin',\n                                         'internal_navigation']:  # these are not part of the main t\n                continue\n        except:\n            pass\n        if p.b:\n            chapter = p.b.text\n            chapter = chapter.strip()\n        else:\n            sen = p.text\n            sen = sen.strip()\n            if sen != '':\n                num = 0\n                for s in sent_tokenize(sen):\n                    sentn = s.strip()\n                    num += 1\n                    cur.execute(\"INSERT INTO texts VALUES (?,?,?,?,?,?,?, ?, ?, ?, ?)\",\n                                (None, collectiontitle, title, 'Latin', author, date, chapter,\n                                 num, sentn, url, 'prose'))\n\n\ndef main():\n    # get proper URLs\n    siteURL = 'http://www.thelatinlibrary.com'\n    biggsURL = 'http://www.thelatinlibrary.com/johannes.html'\n    biggsOPEN = urllib.request.urlopen(biggsURL)\n    biggsSOUP = BeautifulSoup(biggsOPEN, 'html5lib')\n    textsURL = []\n\n    title = 'Johannes de Plano Carpini'\n\n    author = title\n    collectiontitle = 'JOHANNES DE PLANO CARPINI LIBELLUS HISTORICUS IOANNIS DE PLANO CARPINI'\n    date = '1246 A.D.'\n\n    with sqlite3.connect('texts.db') as db:\n        c = db.cursor()\n        c.execute(\n        'CREATE TABLE IF NOT EXISTS texts (id INTEGER PRIMARY KEY, title TEXT, book TEXT,'\n        ' language TEXT, author TEXT, date TEXT, chapter TEXT, verse TEXT, passage TEXT,'\n        ' link TEXT, documentType TEXT)')\n        c.execute(\"DELETE FROM texts WHERE author = 'Johannes de Plano Carpini'\")\n        parseRes2(biggsSOUP, title, biggsURL, c, author, date, collectiontitle)\n\n\nif __name__ == '__main__':\n    main()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Server:\n\nimport socket \n\ns = socket.socket()\nhost = '127.0.0.1'\nport = 12345\n\ns.bind((host, port))\ns.listen(5)\nwhile True:\n c, addr = s.accept()\n print('Got connection from', addr)\n c.send(b'Thank you for connecting!')\n message = c.recv(1024)\n print('Received:', message)\n c.close()\n\n# Client: \n\nimport socket \n\ns = socket.socket()\nhost = '127.0.0.1'\nport = 12345\n\ns.connect((host, port))\nprint(s.recv(1024))\ns.send(b'Hello, this is client!')\ns.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def move_zeroes(nums):\n    \"\"\"\n    Moves all the zeros in a given list to the end.\n    @param nums: List\n    @return: List\n    \"\"\"\n    i = 0\n    for num in nums:\n        if num != 0:\n            nums[i] = num\n            i += 1\n    while i < len(nums):\n        nums[i] = 0\n        i += 1\n    return nums but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nPython program to show the product of all odd numbers in an array\n\"\"\"\n\ndef product_of_odds(arr):\n    product = 1\n    for num in arr:\n        if num % 2 != 0:\n            product *= num\n    return product\n\nif __name__ == '__main__':\n    arr = [3, 4, 5, 6, 7]\n    print(product_of_odds(arr)) # 105 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_random_password(length):\n    characters = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.sample(characters, length))\n\npassword_length = 6\npassword = generate_random_password(password_length)\nprint(password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\n# Copyright (c) 2014, Robot Control and Pattern Recognition Group, Warsaw University of Technology\n# All rights reserved.\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#     * Redistributions of source code must retain the above copyright\n#       notice, this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of the Warsaw University of Technology nor the\n#       names of its contributors may be used to endorse or promote products\n#       derived from this software without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL <COPYright HOLDER> BE LIABLE FOR ANY\n# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nimport roslib\nroslib.load_manifest('velma_controller')\n\nimport rospy\n\nfrom geometry_msgs.msg import *\nfrom cartesian_trajectory_msgs.msg import *\nimport actionlib\nfrom actionlib_msgs.msg import *\nimport tf\nimport tf_conversions.posemath as pm\nimport PyKDL\n\ndef moveImpedance(k, t):\n    global action_impedance_client\n    action_impedance_goal = CartesianImpedanceGoal()\n    action_impedance_goal.trajectory.header.stamp = rospy.Time.now() + rospy.Duration(0.2)\n    action_impedance_goal.trajectory.points.append(CartesianImpedanceTrajectoryPoint(\n    rospy.Duration(t),\n    CartesianImpedance(k,Wrench(Vector3(0.7, 0.7, 0.7),Vector3(0.7, 0.7, 0.7)))))\n    action_impedance_client.send_goal(action_impedance_goal)\n\ndef moveWrist( wrist_frame, tool_frame, t, max_wrench):\n    global action_trajectory_client\n    # we are moving the tool, so: T_B_Wd*T_W_T\n    wrist_pose = pm.toMsg(wrist_frame*tool_frame)\n\n    action_trajectory_goal = CartesianTrajectoryGoal()\n    action_trajectory_goal.trajectory.header.stamp = rospy.Time.now() + rospy.Duration(0.01)\n    action_trajectory_goal.trajectory.points.append(CartesianTrajectoryPoint(\n    rospy.Duration(t),\n    wrist_pose,\n    Twist()))\n    action_trajectory_goal.wrench_constraint = max_wrench\n    action_trajectory_client.send_goal(action_trajectory_goal)\n\ndef moveTool(tool_frame, t):\n    global action_tool_client\n    tool_pose = pm.toMsg(tool_frame)\n    action_tool_goal = CartesianTrajectoryGoal()\n    action_tool_goal.trajectory.header.stamp = rospy.Time.now()\n    action_tool_goal.trajectory.points.append(CartesianTrajectoryPoint(\n    rospy.Duration(t),\n    tool_pose,\n    Twist()))\n    action_tool_client.send_goal(action_tool_goal)\n\n\nif __name__ == '__main__':\n\n    a = []\n    for arg in sys.argv:\n        a.append(arg)\n\n    if (len(a) > 1) and ((a[1]==\"left\") or (\"right\")):\n        prefix = a[1]\n    else:\n        print \"Usage: %s prefix\"%a[0]\n        exit(0)\n\n    rospy.init_node('impedance_riser')\n\n    listener = tf.TransformListener();\n\n    action_impedance_client = actionlib.SimpleActionClient(\"/\" + prefix + \"_arm/cartesian_impedance\", CartesianImpedanceAction)\n    action_impedance_client.wait_for_server()\n\n    action_trajectory_client = actionlib.SimpleActionClient(\"/\" + prefix + \"_arm/cartesian_trajectory\", CartesianTrajectoryAction)\n    action_trajectory_client.wait_for_server()\n\n    action_tool_client = actionlib.SimpleActionClient(\"/\" + prefix + \"_arm/tool_trajectory\", CartesianTrajectoryAction)\n    action_tool_client.wait_for_server()\n\n    rospy.sleep(1.0)\n\n    # save current wrist position\n    time_now = rospy.Time.now() - rospy.Duration(1.0)\n    listener.waitForTransform('torso_base', prefix+'_arm_7_link', time_now, rospy.Duration(4.0))\n    pose = listener.lookupTransform('torso_base', prefix+'_arm_7_link', time_now)\n    T_B_W = pm.fromTf(pose)\n\n    T_W_T = PyKDL.Frame()    # tool transformation\n    print \"setting the tool to %s relative to wrist frame\"%(T_W_T)\n    # move both tool position and wrist position - the gripper holds its position\n    print \"moving wrist\"\n    # we assume that during the initialization there are no contact forces, so we limit the wrench\n    moveWrist( T_B_W, T_W_T, 2.0, Wrench(Vector3(20, 20, 20), Vector3(4, 4, 4)) )\n    print \"moving tool\"\n    moveTool( T_W_T, 2.0 )\n    rospy.sleep(2.0)\n\n    # change the stiffness\n    print \"changing stiffness for door approach\"\n    moveImpedance(Wrench(Vector3(1200.0, 1200.0, 1200.0), Vector3(300.0, 300.0, 300.0)), 4.0)\n    rospy.sleep(4.0)\n\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -*- coding: utf-8 -*-\n\nfrom module.plugins.internal.MultiHoster import MultiHoster, create_getInfo\n\n\nclass ZeveraCom(MultiHoster):\n    __name__    = \"ZeveraCom\"\n    __type__    = \"hoster\"\n    __version__ = \"0.25\"\n\n    __pattern__ = r'http://(?:www\\.)?zevera\\.com/.+'\n\n    __description__ = \"\"\"Zevera.com hoster plugin\"\"\"\n    __license__     = \"GPLv3\"\n    __authors__     = [(\"zoidberg\", \"zoidberg@mujmail.cz\")]\n\n\n    def handlePremium(self):\n        if self.account.getAPIData(self.req, cmd=\"checklink\", olink=self.pyfile.url) != \"Alive\":\n            self.fail(_(\"Offline or not downloadable\"))\n\n        header = self.account.getAPIData(self.req, just_header=True, cmd=\"generatedownloaddirect\", olink=self.pyfile.url)\n        if not \"location\" in header:\n            self.fail(_(\"Unable to initialize download\"))\n\n        self.link = header['location']\n\n\n    def checkFile(self):\n        super(ZeveraCom, self).checkFile()\n\n        if self.checkDownload({\"error\": 'action=\"ErrorDownload.aspx'}) is \"error\":\n            self.fail(_(\"Error response received - contact Zevera support\"))\n\n\ngetInfo = create_getInfo(ZeveraCom)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(9):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def set_value(store, key, value):\n  store[key] = value\n\ndef get_value(store, key):\n  return store[key]\n\ndef delete_value(store, key):\n  del store[key] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def isPalindrome(self):\n        # your code here\n        slow_ptr = self.head\n        fast_ptr = self.head\n        rev_head = None\n        \n        while(fast_ptr):\n            fast_ptr = fast_ptr.next\n            if fast_ptr:\n                fast_ptr = fast_ptr.next\n                prev = slow_ptr\n                slow_ptr = slow_ptr.next\n            \n            prev.next = rev_head\n            rev_head = prev\n        \n        fast_ptr = self.head\n        while(rev_head):\n            if fast_ptr.data != rev_head.data:\n                return False\n            fast_ptr = fast_ptr.next\n            rev_head = rev_head.next\n        \n        return True\n    \n    def removeDuplicates(self):\n        # your code here\n        cur_node = self.head\n        while cur_node:\n            prev_node = cur_node\n            next_node = cur_node.next\n            while next_node:\n                if next_node.data == cur_node.data:\n                    prev_node.next = next_node.next\n                else:\n                    prev_node = next_node\n                next_node = next_node.next\n            cur_node = cur_node.next but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: word_lengths = {\n    \"apple\": 5,\n    \"strawberry\": 10,\n    \"coffee\": 6\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: pattern = re.compile(r\"^(\\w+):(\\w+)$\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n# MusicPlayer, https://github.com/albertz/music-player\n# Copyright (c) 2012, Albert Zeyer, www.az2000.de\n# All rights reserved.\n# This code is under the 2-clause BSD license, see License.txt in the root directory of this project.\n\nimport sys, os, random, fnmatch\n\n# Our parent path might contain a self-build musicplayer module. Use that one.\nsys.path = [os.path.abspath((os.path.dirname(__file__) or \".\") + \"/..\")] + sys.path\n\nimport musicplayer\nprint \"Module:\", musicplayer.__file__\n\n# ffmpeg log levels: {0:panic, 8:fatal, 16:error, 24:warning, 32:info, 40:verbose}\nmusicplayer.setFfmpegLogLevel(20)\n\ntry:\n\timport better_exchook\n\tbetter_exchook.install()\nexcept ImportError: pass # doesnt matter\n\ntry:\n\timport faulthandler\n\tfaulthandler.enable(all_threads=True)\nexcept ImportError:\n\tprint \"note: module faulthandler not available\"\n\t\nclass Song:\n\tdef __init__(self, fn):\n\t\tself.url = fn\n\t\tself.f = open(fn)\n\t\t\n\tdef __eq__(self, other):\n\t\treturn self.url == other.url\n\t\n\tdef readPacket(self, bufSize):\n\t\ts = self.f.read(bufSize)\n\t\t#print \"readPacket\", self, bufSize, len(s)\n\t\treturn s\n\n\tdef seekRaw(self, offset, whence):\n\t\tr = self.f.seek(offset, whence)\n\t\t#print \"seekRaw\", self, offset, whence, r, self.f.tell()\n\t\treturn self.f.tell()\n\nfiles = []\ndef getFiles(path):\n\tfor f in sorted(os.listdir(path), key=lambda k: random.random()):\n\t\tf = os.path.join(path, f)\n\t\tif os.path.isdir(f): getFiles(f) # recurse\n\t\tif len(files) > 1000: break # break if we have enough\n\t\tif fnmatch.fnmatch(f, '*.mp3'): files.append(f)\ngetFiles(os.path.expanduser(\"~/Music\"))\nrandom.shuffle(files) # shuffle some more\nfiles = sys.argv[1:] + files\nassert files, \"give me some files or fill-up ~/Music\"\n\ni = 0\n\ndef songs():\n\tglobal i, files\n\twhile True:\n\t\tyield Song(files[i])\n\t\ti += 1\n\t\tif i >= len(files): i = 0\n\ndef peekSongs(n):\n\tnexti = i + 1\n\tif nexti >= len(files): nexti = 0\n\treturn map(Song, (files[nexti:] + files[:nexti])[:n])\n\nplayer = musicplayer.createPlayer()\nplayer.outSamplerate = 48000\nplayer.queue = songs()\nplayer.peekQueue = peekSongs\nplayer.playing = True\n\ndef formatTime(t):\n\tif t is None: return \"?\"\n\tmins = long(t // 60)\n\tt -= mins * 60\n\thours = mins // 60\n\tmins -= hours * 60\n\tif hours: return \"%02i:%02i:%02.0f\" % (hours,mins,t)\n\treturn \"%02i:%02.0f\" % (mins,t)\n\nimport termios\n\ndef prepareStdin():\n\tfd = sys.stdin.fileno()\n\t\n\tif os.isatty(fd):\t\t\n\t\told = termios.tcgetattr(fd)\n\t\tnew = termios.tcgetattr(fd)\n\t\tnew[3] = new[3] & ~termios.ICANON & ~termios.ECHO\n\t\t# http://www.unixguide.net/unix/programming/3.6.2.shtml\n\t\tnew[6][termios.VMIN] = 0\n\t\tnew[6][termios.VTIME] = 1\n\t\t\n\t\ttermios.tcsetattr(fd, termios.TCSANOW, new)\n\t\ttermios.tcsendbreak(fd, 0)\n\n\t\timport atexit\n\t\tatexit.register(lambda: termios.tcsetattr(fd, termios.TCSANOW, old))\t\n\n\t\tprint \"Console control:\"\n\t\tprint \"  <space>:        play / pause\"\n\t\tprint \"  <left>/<right>: seek back/forward by 10 secs\"\n\t\tprint \"  <return>:       next song\"\n\t\tprint \"  <q>:            quit\"\n\ndef getchar():\n\tfd = sys.stdin.fileno()\n\tch = os.read(fd, 7)\n\treturn ch\n\nprepareStdin()\n\nwhile True:\n\tsys.stdout.write(\"\\r\\033[K\") # clear line\n\tif player.playing: sys.stdout.write(\"playing, \")\n\telse: sys.stdout.write(\"paused, \")\n\tcurSong = player.curSong\n\tif curSong:\n\t\turl = os.path.basename(curSong.url)\n\t\tif len(url) > 40: url = url[:37] + \"...\"\n\t\tsys.stdout.write(\n\t\t\turl + \" : \" +\n\t\t\tformatTime(player.curSongPos) + \" / \" +\n\t\t\tformatTime(player.curSongLen))\n\telse:\n\t\tsys.stdout.write(\"no song\")\n\t\n\tch = getchar()\n\tif ch == \"\\x1b[D\": # left\n\t\tplayer.seekRel(-10)\n\telif ch == \"\\x1b[C\": #right\n\t\tplayer.seekRel(10)\n\telif ch == \"\\x1b[A\": #up\n\t\tpass\n\telif ch == \"\\x1b[B\": #down\n\t\tpass\n\telif ch == \"\\n\": # return\n\t\tplayer.nextSong()\n\telif ch == \" \":\n\t\tplayer.playing = not player.playing\n\telif ch == \"q\":\n\t\tprint\n\t\tsys.exit(0)\n\tsys.stdout.flush()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_in_range(arr, start, end):\n     # create a count array to store the count of each number \n    count = [0 for i in range(start, end+1)]\n    output = []\n    # count the occurance of each number in the array\n    for num in arr:\n        count[num] += 1\n    # append the number to the output array for each occurance\n    for i in range(start, end+1):\n        for c in range(0, count[i]):\n            output.append(i)\n    return output but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class TicTacToe(object):\n    def __init__(self):\n        self.board = [[0, 0, 0],\n                      [0, 0, 0],\n                      [0, 0, 0]]\n        self.x_player = 1\n        self.o_player = -1\n        self.empty = 0\n\n    def get_available_moves(self):\n        moves = []\n        for row in range(3):\n            for col in range(3):\n                if self.board[row][col] == self.empty:\n                    moves.append((row, col))\n        return moves\n\n    def _evaluate(self):\n        winner = self.get_winner()\n\n        if winner == self.x_player:\n            return +1\n        elif winner == self.o_player:\n            return -1\n        else:\n            return 0\n\n    def get_winner(self):\n        for row in range(3):\n            if self.board[row][0] == self.board[row][1] == self.board[row][2]:\n                return self.board[row][0]\n        for col in range(3):\n            if self.board[0][col] == self.board[1][col] == self.board[2][col]:\n                return self.board[0][col]\n        if self.board[0][0] == self.board[1][1] == self.board[2][2]:\n            return self.board[0][0]\n        elif self.board[0][2] == self.board[1][1] == self.board[2][0]:\n            return self.board[1][1]\n        else:\n            return None\n\n    def make_move(self, row, col, player):\n        self.board[row][col] = player\n\n    def minimax(self, depth, player):\n        if player == self.x_player:\n            best = [-1, -1, -1000]\n        else:\n            best = [-1, -1, 1000]\n\n        if depth == 0 or self.get_winner() != None:\n            score = self._evaluate()\n            return [-1, -1, score]\n\n        for move in self.get_available_moves():\n            row = move[0]\n            col = move[1]\n\n            self.make_move(row, col, player)\n            score = self.minimax(depth - 1, -player)\n            self.make_move(row, col, self.empty)\n\n            score[0] = row\n            score[1] = col\n\n            if player == self.x_player:\n                if score[2] > best[2]:\n                    best = score\n            else:\n                if score[2] < best[2]:\n                    best = score\n\n        return best but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_dict = dict(zip([\"apple\", \"bat\", \"cat\"], [\"red\", \"grey\", \"black\"]))\n\n#Print the dictionary\nprint(my_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findUniqueChars(str):\n    result = \"\"\n    for char in str:\n        if str.count(char) == 1:\n            result += char\n\n    return result \n\nresult = findUniqueChars(\"This is a test\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent(list1): \n\treturn max(set(list1), key = list1.count) \n\nlist1 = [1, 2, 3, 4, 4, 3, 3, 3]\nprint(\"Number that occurs the most in the list is : \", most_frequent(list1)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def prime_factors(n):\n    factors = []\n    divisor = 2 \n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n/divisor\n        else:\n            divisor += 1\n    return factors but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Given a list\n\nlist = [1, 2, 3, 4, 5]\n \n# Calculate sum\nsum_val = 0\nfor num in list:\n sum_val += num\n \n# Print the result\nprint(sum_val) # returns 15 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# define url\nurl = \"https://www.example.com/news\"\n\n# send GET request to the specified url\npage = requests.get(url)\n\n# create BeautifulSoup object for parsing\nsoup = BeautifulSoup(page.text, 'html.parser')\n\n# extract all article titles, publication dates, and authors\nitems = soup.find_all('article')\nfor item in items:\n    title = item.find('h2').text\n    pub_date = item.find('time').text\n    author = item.find('span').text\n    print(title + ' | ' + pub_date + ' | ' + author) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nGenerate a Python class for a race car that has the attributes of engine, transmission, and color\n\"\"\"\n\nclass RaceCar:\n    \"\"\"\n    A class to represent a race car with engine, transmission, and color attributes\n    \"\"\"\n    \n    def __init__(self, engine, transmission, color):\n        \"\"\"\n        Initialize the race car with engine, transmission, and color attributes\n        \n        Parameters:\n        engine (string): The type of engine\n        transmission (string): The type of transmission\n        color (string): The color of the car\n        \"\"\"\n        self.engine = engine\n        self.transmission = transmission\n        self.color = color\n    \n    def __str__(self):\n        \"\"\"\n        Return a string representation of the race car\n        \"\"\"\n        return f\"Race car with {self.engine} engine and {self.transmission} transmission; color is {self.color}\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(word):\n    reversed_word = word[::-1]\n    if reversed_word == word:\n        return True\n    else:\n        return False\n\nresult = is_palindrome(\"noon\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_by_tuple_second(tuple_list):\n    tuple_list.sort(key=lambda x: x[1])\n    return tuple_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndef detect_errors(json_string):\n try:\n     data = json.loads(json_string)\n     return None\n except Exception as e:\n     return e but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def solve_scheduling(tasks):\n    # Sort tasks by their finish time\n    tasks.sort(key=lambda task: task[\"end\"])\n\n    # Initialize the solution sequence\n    sequence = [tasks[0]]\n\n    # Loop over the rest of the tasks in order\n    for curr_task in tasks[1:]:\n        last_task = sequence[-1]\n        if curr_task[\"start\"] >= last_task[\"end\"]:\n            sequence.append(curr_task)\n\n    return sequence\n\ntasks = [{\"start\":3, \"end\":7}, {\"start\":1, \"end\":2}, {\"start\":6, \"end\":10}, {\"start\":8, \"end\":11}, {\"start\":12, \"end\":15}]\nsequence = solve_scheduling(tasks)\n\nprint(\"The sequence of tasks is:\")\nfor task in sequence:\n    print(task) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def has_even_product(numbers):\n for i in range(len(numbers)):\n for j in range(i+1, len(numbers)):\n if numbers[i] * numbers[j] % 2 == 0:\n return True\n return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http://www.example.com'\n\nhtml = requests.get(url).text\nsoup = BeautifulSoup(html, 'html.parser')\n\nfor link in soup.find_all('a'):\n print(link.get('href')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compute_average(x, y):\n\treturn (x + y) / 2\n\nprint(compute_average(x,y)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import xml.etree.ElementTree as ET\n\ndata = '''<?xml version=\"1.0\"?>\n<data>\n <customer>\n <name>John Smith</name>\n <email>john@example.com</email>\n </customer>\n <customer>\n <name>Jane Doe</name>\n <email>jane@example.com</email>\n </customer>\n</data>'''\n\nroot = ET.fromstring(data)\n\nfor customer in root.findall('customer'):\n name = customer.find('name').text\n email = customer.find('email').text\n print(f'Name: {name}, Email: {email}')\n\n# Output\n# Name: John Smith, Email: john@example.com\n# Name: Jane Doe, Email: jane@example.com but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\n\ndictionary={}\n\nfor line in sys.stdin:\n words_in_line = line.split()\n for word in words_in_line:\n word=word.lower()\n if word in dictionary:\n dictionary[word]+=1\n else:\n dictionary[word]=1\n\nfor word in dictionary:\n print(word +\":\"+ str(dictionary[word])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #include <iostream>\n#include <string>\n\nvoid say_hello(std::string name=\"\") {\n    if (name.empty()) {\n        std::cout << \"Hello World\" << std::endl;\n    } else {\n        std::cout << \"Hello, \" << name << \"!\" << std::endl;\n    }\n}\n\nint main() {\n    say_hello();\n    say_hello(\"John\");\n    return 0;\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n\narr = [64, 34, 25, 12, 22, 11, 90]\n \nsort(arr) \n \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]), but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(lst): \n\tlst.sort(key = lambda x: x[1]) \n\treturn lst \n\n# Driver code \nlst = [(3, 4), (2, 5), (1, 6)] \nprint(sort_list(lst)) \n\n# Output: [(3, 4), (2, 5), (1, 6)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(nums):\n    size = len(nums)\n    for i in range(size):\n        for j in range(size-1):\n            if nums[j] > nums[j+1]:\n                temp = nums[j]\n                nums[j] = nums[j+1]\n                nums[j+1] = temp\n    return nums\n\nprint(bubble_sort([2,1,3,4,6,5])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def even_numbers():\n    even_list = []\n    for number in range(1, 21):\n        if number % 2 == 0:\n            even_list.append(number)\n    return even_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(word): \n    word = word.lower() \n    rev_word = word[::-1] \n    if word == rev_word: \n        return True\n    else: \n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n    def __init__(self, first_name, last_name, salary):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.salary = salary\n \n    def get_full_name(self):\n        return self.first_name + \" \" + self.last_name\n \n    def get_annual_salary(self):\n        return self.salary * 12 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num1 = int(input(\"Enter the first number: \"))\nnum2 = int(input(\"Enter the second number: \"))\n\ntemp = num1\nnum1 = num2\nnum2 = temp\n\nprint(\"After swapping:\")\nprint(\"First number:\", num1)\nprint(\"Second number:\", num2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(2, 6): \n for j in range(1, 11): \n  print('{} x {} = {}'.format(i, j, i * j)) \n print(\" \") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nURL = 'https://www.readersdigest.com/features/fun-facts'\npage = requests.get(URL)\n\nsoup = BeautifulSoup(page.content, 'html.parser')\nresults = soup.find_all('div', class_='field-item')\n\nfor result in results:\n    print(result.find('h3').text)\n    print(result.find('p').text)\n    print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers = [1, 2, 3, 4, 5]\nsquares = [n*n for n in numbers] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n \ncharacters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\nlength = 8\n \nrandstring = ''.join(random.choice(characters) for i in range(length)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify(data):\n  # Initialize two empty lists\n  classA = []\n  classB = []\n  \n  # Iterate over data\n  for k,v in data.items():\n    # Populate classA and classB\n    if v == 1:\n      classA.append(k)\n    else:\n      classB.append(k)\n    \n  # Return the two classes\n  return classA, classB\n\n# Input data  \nData = {\"A\": 1, \"B\": 0, \"C\": 1, \"D\": 1, \"E\": 0}\n\n# Call the classify function\nclassA, classB = classify(Data)\n\n# Print the results\nprint(classA) # ['A', 'C', 'D']\nprint(classB) # ['B', 'E'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_primes(x, y):\n    result = []\n    for num in range(x, y + 1):\n        if num > 1:\n            isPrime = True\n            for i in range(2, num//2 + 1):\n                if num % i == 0:\n                    isPrime = False\n                    break\n            if isPrime:\n                result.append(num)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num = 49\n\nif num % 7 == 0:\n    print(\"The number %d is divisible by 7!\" %num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_dict = {} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n   if n<0: \n      print(\"Incorrect input\") \n   elif n==1: \n      return 0\n   elif n==2: \n      return 1\n   else: \n      return Fibonacci(n-1)+Fibonacci(n-2) \n \n# Driver Program \nn = 6\nprint(Fibonacci(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_five_times(input_string):\n    for _ in range(5):\n        print(input_string)\n\nprint_five_times(\"Hello World!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\n# Classification Banner\n#\n# Last update was 02 July 2018\n#\n# Script: classification-banner.py\n# Description: Displays a Classification for an Xwindows session\n# Copyright: Frank Caviggia, 2017\n# Author: Frank Caviggia <fcaviggia (at) gmail.com>\n# Version: 1.6.6\n# License: GPLv2\n\nimport sys,os,optparse,time\nfrom socket import gethostname\n\n# Check if DISPLAY variable is set\ntry:\n\tos.environ[\"DISPLAY\"]\n\timport pygtk,gtk\nexcept:\n\ttry:\n\t\timport Gtk\n\texcept:\n\t\tprint(\"Error: DISPLAY environment variable not set.\")\n\t\tsys.exit(1)\n\n# Global Configuration File\nCONF_FILE = \"/etc/classification-banner\"\n\n# Returns Username\ndef get_user():\n    try:\n        user = os.getlogin()\n    except:\n        user = ''\n        pass\n    return user\n\n# Returns Hostname\ndef get_host():\n    host = gethostname()\n    host = host.split('.')[0]\n    return host\n\n# Classification Banner Class\nclass Classification_Banner:\n    \"\"\"Class to create and refresh the actual banner.\"\"\"\n\n    def __init__(self, message=\"UNCLASSIFIED\", fgcolor=\"#000000\",\n                 bgcolor=\"#00CC00\", face=\"liberation-sans\", size=\"small\",\n                 weight=\"bold\", x=0, y=0, esc=True, opacity=0.75, sys_info=False):\n\n        \"\"\"Set up and display the main window\n\n        Keyword arguments:\n        message -- The classification level to display\n        fgcolor -- Foreground color of the text to display\n        bgcolor -- Background color of the banner the text is against\n        face    -- Font face to use for the displayed text\n        size    -- Size of font to use for text\n        weight  -- Bold or normal\n        hres    -- Horizontal Screen Resolution (int) [ requires vres ]\n        vres    -- Vertical Screen Resolution (int) [ requires hres ]\n        opacity -- Opacity of window (float) [0 .. 1, default 0.75]\n        \"\"\"\n        self.hres = x\n        self.vres = y\n\n        # Dynamic Resolution Scaling\n        self.monitor = gtk.gdk.Screen()\n        self.monitor.connect(\"size-changed\", self.resize)\n\n        # Newer versions of pygtk have this method\n        try:\n            self.monitor.connect(\"monitors-changed\", self.resize)\n        except:\n            pass\n\n        # Create Main Window\n        self.window = gtk.Window()\n        self.window.set_position(gtk.WIN_POS_CENTER)\n        self.window.connect(\"hide\", self.restore)\n        self.window.connect(\"key-press-event\", self.keypress)\n        self.window.modify_bg(gtk.STATE_NORMAL, gtk.gdk.color_parse(bgcolor))\n        self.window.set_property('skip-taskbar-hint', True)\n        self.window.set_property('skip-pager-hint', True)\n        self.window.set_property('destroy-with-parent', True)\n        self.window.stick()\n        self.window.set_decorated(False)\n        self.window.set_keep_above(True)\n        self.window.set_app_paintable(True)\n\n        try:\n            self.window.set_opacity(opacity)\n        except:\n            pass\n\n        # Set the default window size\n        self.window.set_default_size(int(self.hres), 5)\n\n        # Create Main Horizontal Box to Populate\n        self.hbox = gtk.HBox()\n\n        # Create the Center Vertical Box\n        self.vbox_center = gtk.VBox()\n        self.center_label = gtk.Label(\n            \"<span font_family='%s' weight='%s' foreground='%s' size='%s'>%s</span>\" %\n            (face, weight, fgcolor, size, message))\n        self.center_label.set_use_markup(True)\n        self.center_label.set_justify(gtk.JUSTIFY_CENTER)\n        self.vbox_center.pack_start(self.center_label, True, True, 0)\n\n        # Create the Right-Justified Vertical Box to Populate for hostname\n        self.vbox_right = gtk.VBox()\n        self.host_label = gtk.Label(\n            \"<span font_family='%s' weight='%s' foreground='%s' size='%s'>%s</span>\" %\n            (face, weight, fgcolor, size, get_host()))\n        self.host_label.set_use_markup(True)\n        self.host_label.set_justify(gtk.JUSTIFY_RIGHT)\n        self.host_label.set_width_chars(20)\n\n        # Create the Left-Justified Vertical Box to Populate for user\n        self.vbox_left = gtk.VBox()\n        self.user_label = gtk.Label(\n            \"<span font_family='%s' weight='%s' foreground='%s' size='%s'>%s</span>\" %\n            (face, weight, fgcolor, size, get_user()))\n        self.user_label.set_use_markup(True)\n        self.user_label.set_justify(gtk.JUSTIFY_LEFT)\n        self.user_label.set_width_chars(20)\n        \n        # Create the Right-Justified Vertical Box to Populate for ESC message\n        self.vbox_esc_right = gtk.VBox()\n        self.esc_label = gtk.Label(\n            \"<span font_family='liberation-sans' weight='normal' foreground='%s' size='xx-small'>  (ESC to hide temporarily)  </span>\" %\n            (fgcolor))\n        self.esc_label.set_use_markup(True)\n        self.esc_label.set_justify(gtk.JUSTIFY_RIGHT)\n        self.esc_label.set_width_chars(20)\n\n        # Empty Label for formatting purposes\n        self.vbox_empty = gtk.VBox()\n        self.empty_label = gtk.Label(\n            \"<span font_family='liberation-sans' weight='normal'>                 </span>\")\n        self.empty_label.set_use_markup(True)\n        self.empty_label.set_width_chars(20)\n\n        if not esc:\n            if not sys_info:\n                self.hbox.pack_start(self.vbox_center, True, True, 0)\n            else:\n                self.vbox_right.pack_start(self.host_label, True, True, 0)\n                self.vbox_left.pack_start(self.user_label, True, True, 0)\n                self.hbox.pack_start(self.vbox_right, False, True, 20)\n                self.hbox.pack_start(self.vbox_center, True, True, 0)\n                self.hbox.pack_start(self.vbox_left, False, True, 20)\n\n        else:\n            if esc and not sys_info:\n                self.empty_label.set_justify(gtk.JUSTIFY_LEFT)\n                self.vbox_empty.pack_start(self.empty_label, True, True, 0)\n                self.vbox_esc_right.pack_start(self.esc_label, True, True, 0)\n                self.hbox.pack_start(self.vbox_esc_right, False, True, 0)\n                self.hbox.pack_start(self.vbox_center, True, True, 0)\n                self.hbox.pack_start(self.vbox_empty, False, True, 0)\n\n        if sys_info:\n                self.vbox_right.pack_start(self.host_label, True, True, 0)\n                self.vbox_left.pack_start(self.user_label, True, True, 0)\n                self.hbox.pack_start(self.vbox_right, False, True, 20)\n                self.hbox.pack_start(self.vbox_center, True, True, 0)\n                self.hbox.pack_start(self.vbox_left, False, True, 20)\n\n        self.window.add(self.hbox)\n        self.window.show_all()\n        self.width, self.height = self.window.get_size()\n\n    # Restore Minimized Window\n    def restore(self, widget, data=None):\n        self.window.deiconify()\n        self.window.present()\n\n        return True\n\n    # Destroy Classification Banner Window on Resize (Display Banner Will Relaunch)\n    def resize(self, widget, data=None):\n        self.window.destroy()\n\n        return True\n\n    # Press ESC to hide window for 15 seconds\n    def keypress(self, widget, event=None):\n        if event.keyval == 65307:\n            if not gtk.events_pending():\n                self.window.iconify()\n                self.window.hide()\n                time.sleep(15)\n                self.window.show()\n                self.window.deiconify()\n                self.window.present()\n\n        return True\n\n\nclass Display_Banner:\n\n    \"\"\"Display Classification Banner Message\"\"\"\n    def __init__(self):\n        # Dynamic Resolution Scaling\n        self.monitor = gtk.gdk.Screen()\n        self.monitor.connect(\"size-changed\", self.resize)\n\n        # Newer versions of pygtk have this method\n        try:\n            self.monitor.connect(\"monitors-changed\", self.resize)\n        except:\n            pass\n\n        # Launch Banner\n        self.config, self.args = self.configure()\n        self.execute(self.config)\n\n    # Read Global configuration\n    def configure(self):\n        config = {}\n        try:\n            execfile(CONF_FILE, config)\n        except:\n            pass\n\n        defaults = {}\n        defaults[\"message\"] = config.get(\"message\", \"UNCLASSIFIED\")\n        defaults[\"fgcolor\"] = config.get(\"fgcolor\", \"#FFFFFF\")\n        defaults[\"bgcolor\"] = config.get(\"bgcolor\", \"#007A33\")\n        defaults[\"face\"] = config.get(\"face\", \"liberation-sans\")\n        defaults[\"size\"] = config.get(\"size\", \"small\")\n        defaults[\"weight\"] = config.get(\"weight\", \"bold\")\n        defaults[\"show_top\"] = config.get(\"show_top\", True)\n        defaults[\"show_bottom\"] = config.get(\"show_bottom\", True)\n        defaults[\"hres\"] = config.get(\"hres\", 0)\n        defaults[\"vres\"] = config.get(\"vres\", 0)\n        defaults[\"sys_info\"] = config.get(\"sys_info\", False)\n        defaults[\"opacity\"] = config.get(\"opacity\", 0.75)\n        defaults[\"esc\"] = config.get(\"esc\", True)\n        defaults[\"spanning\"] = config.get(\"spanning\", False)\n\n        # Use the global config to set defaults for command line options\n        parser = optparse.OptionParser()\n        parser.add_option(\"-m\", \"--message\", default=defaults[\"message\"],\n                          help=\"Set the Classification message\")\n        parser.add_option(\"-f\", \"--fgcolor\", default=defaults[\"fgcolor\"],\n                          help=\"Set the Foreground (text) color\")\n        parser.add_option(\"-b\", \"--bgcolor\", default=defaults[\"bgcolor\"],\n                          help=\"Set the Background color\")\n        parser.add_option(\"-x\", \"--hres\", default=defaults[\"hres\"], type=\"int\",\n                          help=\"Set the Horizontal Screen Resolution\")\n        parser.add_option(\"-y\", \"--vres\", default=defaults[\"vres\"], type=\"int\",\n                          help=\"Set the Vertical Screen Resolution\")\n        parser.add_option(\"-o\", \"--opacity\", default=defaults[\"opacity\"],\n                          type=\"float\", dest=\"opacity\",\n                          help=\"Set the window opacity for composted window managers\")\n        parser.add_option(\"--face\", default=defaults[\"face\"], help=\"Font face\")\n        parser.add_option(\"--size\", default=defaults[\"size\"], help=\"Font size\")\n        parser.add_option(\"--weight\", default=defaults[\"weight\"],\n                          help=\"Set the Font weight\")\n        parser.add_option(\"--disable-esc-msg\", default=defaults[\"esc\"],\n                          dest=\"esc\", action=\"store_false\",\n                          help=\"Disable the 'ESC to hide' message\")\n        parser.add_option(\"--hide-top\", default=defaults[\"show_top\"],\n                          dest=\"show_top\", action=\"store_false\",\n                          help=\"Disable the top banner\")\n        parser.add_option(\"--hide-bottom\", default=defaults[\"show_bottom\"],\n                          dest=\"show_bottom\", action=\"store_false\",\n                          help=\"Disable the bottom banner\")\n        parser.add_option(\"--system-info\", default=defaults[\"sys_info\"],\n                          dest=\"sys_info\", action=\"store_true\",\n                          help=\"Show user and hostname in the top banner\")\n        parser.add_option(\"--enable-spanning\", default=defaults[\"spanning\"],\n                          dest=\"spanning\", action=\"store_true\",\n                          help=\"Enable banner(s) to span across screens as a single banner\")\n\n        options, args = parser.parse_args()\n        return options, args\n\n    # Launch the Classification Banner Window(s)\n    def execute(self, options):\n        self.num_monitor = 0\n\n        if options.hres == 0 or options.vres == 0:\n            # Try Xrandr to determine primary monitor resolution\n            try:\n                self.screen = os.popen(\"xrandr | grep ' connected ' | awk '{ print $3 }'\").readlines()[0]\n                self.x = self.screen.split('x')[0]\n                self.y = self.screen.split('x')[1].split('+')[0]\n\n            except:\n                try:\n                    self.screen = os.popen(\"xrandr | grep ' current ' | awk '{ print $8$9$10+0 }'\").readlines()[0]\n                    self.x = self.screen.split('x')[0]\n                    self.y = self.screen.split('x')[1].split('+')[0]\n\n                except:\n                    self.screen = os.popen(\"xrandr | grep '^\\*0' | awk '{ print $2$3$4 }'\").readlines()[0]\n                    self.x = self.screen.split('x')[0]\n                    self.y = self.screen.split('x')[1].split('+')[0]\n\n                else:\n                    # Fail back to GTK method\n                    self.display = gtk.gdk.display_get_default()\n                    self.screen = self.display.get_default_screen()\n                    self.x = self.screen.get_width()\n                    self.y = self.screen.get_height()\n        else:\n            # Resoultion Set Staticly\n            self.x = options.hres\n            self.y = options.vres\n\n        if not options.spanning and self.num_monitor > 1:\n            for monitor in range(self.num_monitor):\n                mon_geo = self.screen.get_monitor_geometry(monitor)\n                self.x_location, self.y_location, self.x, self.y = mon_geo\n                self.banners(options)\n        else:\n            self.x_location = 0\n            self.y_location = 0\n            self.banners(options)\n\n    def banners(self, options):\n            if options.show_top:\n                top = Classification_Banner(\n                    options.message,\n                    options.fgcolor,\n                    options.bgcolor,\n                    options.face,\n                    options.size,\n                    options.weight,\n                    self.x,\n                    self.y,\n                    options.esc,\n                    options.opacity,\n                    options.sys_info)\n                top.window.move(self.x_location, self.y_location)\n\n            if options.show_bottom:\n                bottom = Classification_Banner(\n                    options.message,\n                    options.fgcolor,\n                    options.bgcolor,\n                    options.face,\n                    options.size,\n                    options.weight,\n                    self.x,\n                    self.y,\n                    options.esc,\n                    options.opacity)\n                bottom.window.move(self.x_location, int(bottom.vres))\n\n    # Relaunch the Classification Banner on Screen Resize\n    def resize(self, widget, data=None):\n        self.config, self.args = self.configure()\n        self.execute(self.config)\n        return True\n\n\n# Main Program Loop\nif __name__ == \"__main__\":\n    run = Display_Banner()\n    gtk.main()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_nth_item(lst, n):\n  \"\"\"\n  This function returns the nth item of a given list.\n  \"\"\"\n  return lst[n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_chars_with_exact_freq(string, freq):\n    # create a character count hashtable\n    count = {}\n\n    # loop through the characters in the given string\n    for char in string:\n        # if the character is present in count\n        if char in count:\n            # increase the count of the character\n            count[char] += 1\n        else:\n            # set the count of the character to 1\n            count[char] = 1\n\n    # initialize a list to store the characters that appear with given frequency\n    chars_with_freq = []\n\n    # loop through the characters in the count\n    for key in count:\n        # if the count of the character is equal to given frequency\n        if count[key] == freq:\n            # append the character to chars_with_freq\n            chars_with_freq.append(key)\n    # return the list of characters\n    return chars_with_freq\n\nresult = get_chars_with_exact_freq(\"mississippi\", 3)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longestPalindrome(s):\n    answer = ''\n    max_length = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            curr_str = s[i:j]\n            curr_str_rev = curr_str[::-1]\n            \n            if curr_str == curr_str_rev and max_length < len(curr_str):\n                max_length = len(curr_str)\n                answer = curr_str\n    \n    return answer but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Calculate total amount of time spent by a user on a website\n\ndef total_time_spent(time_spent):\n    \"\"\"\n    Calculates the total amount of time spent by a user on a website\n    \n    Parameters\n    ----------\n    time_spent : list\n        List of times, in seconds, spent by the user on the website\n        \n    Returns\n    -------\n    total : float\n        Total amount of time, in minutes, spent by the user\n    \"\"\"\n    # Initialise total to 0 \n    total = 0\n    \n    # Loop through the list and calculate total \n    for t in time_spent:\n        total += t\n    \n    # Tranform the time from seconds to minutes\n    total_minutes = total/60\n    \n    return total_minutes\n\n#Test\ntime_spent = [120, 60, 90, 5, 10, 45]\ntotal = total_time_spent(time_spent)\nprint(\"Total time spent (minutes):\", total) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_temperature(temp):\n  if temp <= 15:\n    print('It is below 15 degrees.')\n  elif temp >= 30:\n    print('It is over 30 degrees.')\n  else:\n    print('Temperature is normal.') but is not the same. just give one example and only return the code."}
