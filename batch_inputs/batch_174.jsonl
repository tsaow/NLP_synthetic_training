{"prompt": "make some code that functions the same as the following code: import math\n\n# Solve the quadratic equation ax**2 + bx + c = 0 \n# ax**2 + bx + c = 0 \n# find x\n\na = 1\nb = - 5\nc = 6\n\nd = (b**2) - (4*a*c)\n \n# find two solutions\nsol1 = (-b-math.sqrt(d))/(2*a)\nsol2 = (-b+math.sqrt(d))/(2*a)\n \nprint('The solution are {0} and {1}'.format(sol1,sol2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout\n\n# Generate data\nX = np.random.rand(100, 5)\ny = np.random.randint(2, size=100)\n\n# Split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\n\n# Create the neural network model\nmodel = Sequential()\nmodel.add(Dense(30, input_dim = 5, activation = 'relu'))\nmodel.add(Dense(15, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# Compile the model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train, y_train, epochs = 20, batch_size = 10, validation_data = (X_test, y_test))\n\n# Evaluate the model\nscore, acc = model.evaluate(X_test, y_test, batch_size = 10)\nprint(\"Test score:\", score)\nprint(\"Test accuracy:\", acc) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(str1, str2):\n    \"\"\"\n    Checks if two strings are anagrams of one another\n    \"\"\"\n    if len(str1) != len(str2):\n        return False\n    \n    str1_counts = {}\n    for char in str1:\n        if char in str1_counts:\n            str1_counts[char] += 1\n        else:\n            str1_counts[char] = 1\n            \n    str2_counts = {}\n    for char in str2:\n        if char in str2_counts:\n            str2_counts[char] += 1\n        else:\n            str2_counts[char] = 1\n            \n    for char in str1_counts:\n        if str1_counts[char] != str2_counts.get(char, 0):\n            return False\n    \n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com'\n\n# Scrape the HTML at the url\nr = requests.get(url)\n\n# Turn the HTML into a Beautiful Soup object\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# Find the latest 10 news articles on the webpage\nresults = soup.find_all('div', {'class': 'article'})[:10]\n\n# Loop through each article\nfor result in results:\n # Extract the title of the article\n title = result.find('h3').text\n\n # Extract the URL of the article\n link = result.find('a')['href']\n\n # Print the title and URL\n print(title)\n print(f\"{url}{link}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import itertools\n\ndef combinations(list):\n comb = itertools.combinations(list, 2)\n return [list(x) for x in set(comb)]\n\nlist = [1, 2, 3]\n\nresult = combinations(list)\n\nprint(f'The list of combinations is {result}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def FibonacciNumber(index):\n    if index == 0:\n        return 0\n    elif index == 1:\n        return 1\n    else: \n        return FibonacciNumber(index - 1) + FibonacciNumber(index - 2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fib_sum(n):\n  if n <= 1:\n    return n\n  else:\n    return fib_sum(n-1) + fib_sum(n-2) + n\n\nprint(fib_sum(5)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_strings(string_1, string_2):\n    s = set(string_1 + string_2)\n    merged_string = ''.join(s)\n    return merged_string\n\nmerged_string = merge_strings(string_1, string_2)\nprint(merged_string)\n\n'''\nOutput:\nonetwo\n''' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # sort a list of tuples by the second item in each tuple\ndef sort_tuple(tuples):\n    # sort in ascending order\n    tuples.sort(key=lambda x: x[1])\n    # return the list\n    return tuples but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def even_odd_classification(arr):\n    evens = []\n    odds = []\n\n    for i in arr:\n        if i % 2 == 0:\n            evens.append(i)\n        else:\n            odds.append(i)\n    \n    return evens, odds but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_natural_numbers(n):\n    return (n * (n + 1)) / 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport bs4\n\n# Retrieve the latest top 50 news headlines from The Guardian\nurl = 'https://www.theguardian.com/'\nresp = requests.get(url)\nsoup = bs4.BeautifulSoup(resp.text, features=\"html.parser\")\nheadlines = soup.find_all('h3')\ntop_50_headlines = [h3.text for h3 in headlines[:50]]\nprint(top_50_headlines) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def lcs(str1, str2):\n    matrix = [[0] * (len(str2) + 1) for i in range(len(str1) + 1)]\n\n    for i, x in enumerate(str1):\n        for j, y in enumerate(str2):\n            if x == y:\n                matrix[i+1][j+1] = matrix[i][j] + 1\n            else:\n                matrix[i+1][j+1] = max(\n                    matrix[i+1][j],\n                    matrix[i][j+1]\n                )\n\n    result = \"\"\n    x, y = len(str1), len(str2)\n    while x != 0 and y != 0:\n        if matrix[x][y] == matrix[x-1][y]:\n            x -= 1\n        elif matrix[x][y] == matrix[x][y-1]:\n            y -= 1\n        else:\n            result = str1[x-1] + result\n            x -= 1\n            y -= 1\n\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quick_sort(numbers):\n    if len(numbers) <= 1:\n        return numbers \n    else:\n        pivot = numbers[0]\n        less = [i for i in numbers[1:] if i <= pivot]\n        greater = [i for i in numbers[1:] if i > pivot]\n        return quick_sort(less) + [pivot] + quick_sort(greater)\n\nnumbers = [8,5,4,7,3,1]\nsorted_numbers = quick_sort(numbers)\nprint(sorted_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [0, 2, 3, 0, 4]\nmy_list[:] = [val for val in my_list if val != 0]\nprint(my_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def intersection(string1, string2):\n    # Tokenizing both strings into words\n    tokens1 = string1.split(\" \")\n    tokens2 = string2.split(\" \")\n\n    # Store words which are present in both strings\n    intersection_words = []\n\n    # Iterating tokens1\n    for token1 in tokens1:\n        # For each token in tokens1, check if present in tokens2\n        if token1 in tokens2:\n            # If present, add to intersection_words\n            intersection_words.append(token1)\n\n    # Return the intersection_words\n    return intersection_words\n\nintersection(string1, string2) #Output: ['is', 'a'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import geocoder\n\ndef notification_system(user_location, message):\n    g = geocoder.ip(user_location)\n    latitude, longitude = g.latlng\n\n    # create a geo-fence around user location\n    radius = 10 # in kilometers\n    center = (latitude, longitude)\n\n    # check if the user is within the geo-fence\n    if is_within_fence(center, radius):\n        # send notification to the user\n        send_notification(message)\n\ndef is_within_fence(center, radius):\n    pass\n\ndef send_notification(message):\n    pass but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef encrypt_message(plain_message, key):\n encrypted_message = ''\n for letter in plain_message:\n encrypted_message += chr((ord(letter) + int(key)) % 126)\n return encrypted_message\n\ndef decrypt_message(cipher_message, key):\n decrypted_message = ''\n for letter in cipher_message:\n decrypted_message += chr((ord(letter) - int(key)) % 126)\n return decrypted_message\n\ndef generate_key():\n key = ''.join(random.choices(string.ascii_letters + string.digits, k=10))\n return key\n\ndef main():\n message = input('Enter message to encrypt: ')\n key = generate_key()\nencrypted_message = encrypt_message(message, key)\ndecrypted_message = decrypt_message(encrypted_message, key)\n\nprint('Encrypted message: ', encrypted_message)\nprint('Key: ', key)\nprint('Decrypted message: ', decrypted_message)\n\nmain() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\nphone_string = \"(111) 111-1111\"\n\nphone_numbers = re.findall(r'\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4}', phone_string)\n\nfor number in phone_numbers:\n print(number)\n# Output: (111) 111-1111 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sum = 0\n\nfor num in [1, 2, 3]:\n    sum += num\n\nprint(sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Polynomial:\n    def __init__(self, coeffs):\n        self.coeffs = coeffs\n    \n    # Implement a method to evaluate the polynomial at a given x value.\n    def evaluate(self, x):\n        result = 0\n        for i, coeff in enumerate(self.coeffs):\n            result += coeff * x**i\n        return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def rgb_to_hex(colors):\n    hex_colors = []\n    for color in colors:\n        hex_color = \"#\"\n        for value in color:\n            hex_value = hex(value)[2:]\n            if len(hex_value) == 1:\n                hex_value = \"0\" + hex_value\n            hex_color += hex_value\n        hex_colors.append(hex_color)\n    return hex_colors but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n# vim:fileencoding=utf-8\nfrom __future__ import (unicode_literals, division, absolute_import,\n                        print_function)\n\n__license__ = 'GPL v3'\n__copyright__ = '2014, Kovid Goyal <kovid at kovidgoyal.net>'\n\n# Support for excporting Qt's MenuBars/Menus over DBUS. The API is defined in\n# dbus-menu.xml from the libdbusmenu project https://launchpad.net/libdbusmenu\n\nimport dbus\nfrom PyQt5.Qt import (\n    QApplication, QMenu, QIcon, QKeySequence, QObject, QEvent, QTimer, pyqtSignal, Qt)\n\nfrom calibre.utils.dbus_service import Object, BusName, method as dbus_method, dbus_property, signal as dbus_signal\nfrom calibre.gui2.dbus_export.utils import (\n    setup_for_cli_run, swap_mnemonic_char, key_sequence_to_dbus_shortcut, icon_to_dbus_menu_icon)\n\nnull = object()\n\ndef PropDict(mapping=()):\n    return dbus.Dictionary(mapping, signature='sv')\n\ndef create_properties_for_action(ac, previous=None):\n    ans = PropDict()\n    if ac.isSeparator():\n        ans['type'] = 'separator'\n        if not ac.isVisible():\n            ans['visible'] = False\n        return ans\n    text = ac.text() or ac.iconText()\n    if text:\n        ans['label'] = swap_mnemonic_char(text)\n    if not ac.isEnabled():\n        ans['enabled'] = False\n    if not ac.isVisible() or ac.property('blocked') is True:\n        ans['visible'] = False\n    if ac.menu() is not None:\n        ans['children-display'] = 'submenu'\n    if ac.isCheckable():\n        exclusive = ac.actionGroup() is not None and ac.actionGroup().isExclusive()\n        ans['toggle-type'] = 'radio' if exclusive else 'checkmark'\n        ans['toggle-state'] = int(ac.isChecked())\n    shortcuts = ac.shortcuts()\n    if shortcuts:\n        sc = dbus.Array(signature='as')\n        for s in shortcuts:\n            if not s.isEmpty():\n                for x in key_sequence_to_dbus_shortcut(s):\n                    sc.append(dbus.Array(x, signature='s'))\n        if sc:\n            ans['shortcut'] = sc[:1]  # Unity fails to display the shortcuts at all if more than one is specified\n    if ac.isIconVisibleInMenu():\n        icon = ac.icon()\n        if previous and previous.get('x-qt-icon-cache-key') == icon.cacheKey():\n            for x in 'icon-data x-qt-icon-cache-key'.split():\n                ans[x] = previous[x]\n        else:\n            data = icon_to_dbus_menu_icon(ac.icon())\n            if data is not None:\n                ans['icon-data'] = data\n                ans['x-qt-icon-cache-key'] = icon.cacheKey()\n    return ans\n\ndef menu_actions(menu):\n    try:\n        return menu.actions()\n    except TypeError:\n        if isinstance(menu, QMenu):\n            return QMenu.actions(menu)\n        raise\n\nclass DBusMenu(QObject):\n\n    handle_event_signal = pyqtSignal(object, object, object, object)\n\n    def __init__(self, object_path, parent=None, bus=None):\n        QObject.__init__(self, parent)\n        # Unity barfs is the Event DBUS method does not return immediately, so\n        # handle it asynchronously\n        self.handle_event_signal.connect(self.handle_event, type=Qt.QueuedConnection)\n        self.dbus_api = DBusMenuAPI(self, object_path, bus=bus)\n        self.set_status = self.dbus_api.set_status\n        self._next_id = 0\n        self.action_changed_timer = t = QTimer(self)\n        t.setInterval(0), t.setSingleShot(True), t.timeout.connect(self.actions_changed)\n        self.layout_changed_timer = t = QTimer(self)\n        t.setInterval(0), t.setSingleShot(True), t.timeout.connect(self.layouts_changed)\n        self.init_maps()\n\n    @property\n    def object_path(self):\n        return self.dbus_api._object_path\n\n    def init_maps(self, qmenu=None):\n        self.action_changes = set()\n        self.layout_changes = set()\n        self.qmenu = qmenu\n        self._id_to_action, self._action_to_id = {}, {}\n        self._action_properties = {}\n\n    @property\n    def next_id(self):\n        self._next_id += 1\n        return self._next_id\n\n    def id_to_action(self, action_id):\n        if self.qmenu is None:\n            return None\n        return self._id_to_action.get(action_id)\n\n    def action_to_id(self, action):\n        if self.qmenu is None:\n            return None\n        return self._action_to_id.get(action)\n\n    def action_properties(self, action_id, restrict_to=None):\n        if self.qmenu is None:\n            return {}\n        ans = self._action_properties.get(action_id, PropDict())\n        if restrict_to:\n            ans = PropDict({k:v for k, v in ans.iteritems() if k in restrict_to})\n        return ans\n\n    def publish_new_menu(self, qmenu=None):\n        self.init_maps(qmenu)\n        if qmenu is not None:\n            qmenu.destroyed.connect(lambda obj=None:self.publish_new_menu())\n            ac = qmenu.menuAction()\n            self.add_action(ac)\n        self.dbus_api.LayoutUpdated(self.dbus_api.revision, 0)\n\n    def set_visible(self, visible):\n        ac = self.id_to_action(0)\n        if ac is not None and self.qmenu is not None:\n            changed = False\n            blocked = not visible\n            for ac in menu_actions(ac.menu()):\n                ac_id = self.action_to_id(ac)\n                if ac_id is not None:\n                    old = ac.property('blocked')\n                    if old is not blocked:\n                        ac.setProperty('blocked', blocked)\n                        self.action_changes.add(ac_id)\n                        changed = True\n            if changed:\n                self.action_changed_timer.start()\n\n    def add_action(self, ac):\n        ac_id = 0 if ac.menu() is self.qmenu else self.next_id\n        self._id_to_action[ac_id] = ac\n        self._action_to_id[ac] = ac_id\n        self._action_properties[ac_id] = create_properties_for_action(ac)\n        if ac.menu() is not None:\n            self.add_menu(ac.menu())\n\n    def add_menu(self, menu):\n        menu.installEventFilter(self)\n        for ac in menu_actions(menu):\n            self.add_action(ac)\n\n    def eventFilter(self, obj, ev):\n        ac = getattr(obj, 'menuAction', lambda : None)()\n        ac_id = self.action_to_id(ac)\n        if ac_id is not None:\n            etype = ev.type()\n            if etype == QEvent.ActionChanged:\n                ac_id = self.action_to_id(ev.action())\n                self.action_changes.add(ac_id)\n                self.action_changed_timer.start()\n            elif etype == QEvent.ActionAdded:\n                self.layout_changes.add(ac_id)\n                self.layout_changed_timer.start()\n                self.add_action(ev.action())\n            elif etype == QEvent.ActionRemoved:\n                self.layout_changes.add(ac_id)\n                self.layout_changed_timer.start()\n                self.action_removed(ev.action())\n        return False\n\n    def actions_changed(self):\n        updated_props = dbus.Array(signature='(ia{sv})')\n        removed_props = dbus.Array(signature='(ias)')\n        for ac_id in self.action_changes:\n            ac = self.id_to_action(ac_id)\n            if ac is None:\n                continue\n            old_props = self.action_properties(ac_id)\n            new_props = self._action_properties[ac_id] = create_properties_for_action(ac, old_props)\n            removed = set(old_props) - set(new_props)\n            if removed:\n                removed_props.append((ac_id, dbus.Array(removed, signature='as')))\n            updated = PropDict({k:v for k, v in new_props.iteritems() if v != old_props.get(k, null)})\n            if updated:\n                updated_props.append((ac_id, updated))\n        self.action_changes = set()\n        if updated_props or removed_props:\n            self.dbus_api.ItemsPropertiesUpdated(updated_props, removed_props)\n        return updated_props, removed_props\n\n    def layouts_changed(self):\n        changes = set()\n        for ac_id in self.layout_changes:\n            if ac_id in self._id_to_action:\n                changes.add(ac_id)\n        self.layout_changes = set()\n        if changes:\n            self.dbus_api.revision += 1\n            for change in changes:\n                self.dbus_api.LayoutUpdated(self.dbus_api.revision, change)\n        return changes\n\n    def action_is_in_a_menu(self, ac):\n        all_menus = {ac.menu() for ac in self._action_to_id}\n        all_menus.discard(None)\n        return bool(set(ac.associatedWidgets()).intersection(all_menus))\n\n    def action_removed(self, ac):\n        if not self.action_is_in_a_menu(ac):\n            ac_id = self._action_to_id.pop(ac, None)\n            self._id_to_action.pop(ac_id, None)\n            self._action_properties.pop(ac_id, None)\n\n    def get_layout(self, parent_id, depth, property_names):\n        # Ensure any pending updates are done, as they are needed now\n        self.actions_changed()\n        self.layouts_changed()\n        property_names = property_names or None\n        props = self.action_properties(parent_id, property_names)\n        return parent_id, props, self.get_layout_children(parent_id, depth, property_names)\n\n    def get_layout_children(self, parent_id, depth, property_names):\n        ans = dbus.Array(signature='(ia{sv}av)')\n        ac = self.id_to_action(parent_id)\n        if ac is not None and depth != 0 and ac.menu() is not None:\n            for child in menu_actions(ac.menu()):\n                child_id = self.action_to_id(child)\n                if child_id is not None:\n                    props = self.action_properties(child_id, property_names)\n                    ans.append((child_id, props, self.get_layout_children(child_id, depth - 1, property_names)))\n        return ans\n\n    def get_properties(self, ids=None, property_names=None):\n        property_names = property_names or None\n        ans = dbus.Array(signature='(ia{sv})')\n        for action_id in (ids or self._id_to_action):\n            ans.append((action_id, self.action_properties(action_id, property_names)))\n        return ans\n\n    def handle_event(self, action_id, event, data, timestamp):\n        ac = self.id_to_action(action_id)\n        if event == 'clicked':\n            if ac.isCheckable():\n                ac.toggle()\n            ac.triggered.emit(ac.isCheckable() and ac.isChecked())\n\n    def handle_about_to_show(self, ac):\n        child_ids = {self.action_to_id(x) for x in menu_actions(ac.menu())}\n        child_ids.discard(None)\n        ac_id = self.action_to_id(ac)\n        ac.menu().aboutToShow.emit()\n        if ac_id in self.layout_changes or child_ids.intersection(self.action_changes):\n            return True\n        return False\n\nclass DBusMenuAPI(Object):\n\n    IFACE = 'com.canonical.dbusmenu'\n\n    def __init__(self, menu, object_path, bus=None):\n        if bus is None:\n            bus = dbus.SessionBus()\n        Object.__init__(self, bus, object_path)\n        self.status = 'normal'\n        self.menu = menu\n        self.revision = 0\n\n    @dbus_property(IFACE, signature='u')\n    def Version(self):\n        return 3  # GTK 3 uses 3, KDE 4 uses 2\n\n    @dbus_property(IFACE, signature='s', emits_changed_signal=True)\n    def Status(self):\n        return self.status\n\n    def set_status(self, normal=True):\n        self.status = 'normal' if normal else 'notice'\n        self.PropertiesChanged(self.IFACE, {'Status': self.status}, [])\n\n    @dbus_property(IFACE, signature='s')\n    def TextDirection(self):\n        return 'ltr' if QApplication.instance().isLeftToRight() else 'rtl'\n\n    @dbus_property(IFACE, signature='as')\n    def IconThemePath(self):\n        return dbus.Array(signature='s')\n\n    @dbus_method(IFACE, in_signature='iias', out_signature='u(ia{sv}av)')\n    def GetLayout(self, parentId, recursionDepth, propertyNames):\n        layout = self.menu.get_layout(parentId, recursionDepth, propertyNames)\n        return self.revision, layout\n\n    @dbus_method(IFACE, in_signature='aias', out_signature='a(ia{sv})')\n    def GetGroupProperties(self, ids, propertyNames):\n        return self.menu.get_properties(ids, propertyNames)\n\n    @dbus_method(IFACE, in_signature='is', out_signature='v')\n    def GetProperty(self, id, name):\n        return self.menu.action_properties(id).get(name, '')\n\n    @dbus_method(IFACE, in_signature='isvu', out_signature='')\n    def Event(self, id, eventId, data, timestamp):\n        ''' This is called by the applet to notify the application an event happened on a\n        menu item. eventId can be one of the following::\n            * \"clicked\"\n            * \"hovered\"\n            * \"opened\"\n            * \"closed\"\n        Vendor specific events can be added by prefixing them with \"x-<vendor>-\"'''\n        if self.menu.id_to_action(id) is not None:\n            self.menu.handle_event_signal.emit(id, eventId, data, timestamp)\n\n    @dbus_method(IFACE, in_signature='a(isvu)', out_signature='ai')\n    def EventGroup(self, events):\n        ''' Used to pass a set of events as a single message for possibily\n        several different menuitems.  This is done to optimize DBus traffic.\n        Should return a list of ids that are not found. events is a list of\n        events in the same format as used for the Event method.'''\n        missing = dbus.Array(signature='u')\n        for id, eventId, data, timestamp in events:\n            if self.menu.id_to_action(id) is not None:\n                self.menu.handle_event_signal.emit(id, eventId, data, timestamp)\n            else:\n                missing.append(id)\n        return missing\n\n    @dbus_method(IFACE, in_signature='i', out_signature='b')\n    def AboutToShow(self, id):\n        ac = self.menu.id_to_action(id)\n        if ac is not None and ac.menu() is not None:\n            return self.menu.handle_about_to_show(ac)\n        return False\n\n    @dbus_method(IFACE, in_signature='ai', out_signature='aiai')\n    def AboutToShowGroup(self, ids):\n        updates_needed = dbus.Array(signature='i')\n        id_errors = dbus.Array(signature='i')\n        for ac_id in ids:\n            ac = self.menu.id_to_action(id)\n            if ac is not None and ac.menu() is not None:\n                if self.menu.handle_about_to_show(ac):\n                    updates_needed.append(ac_id)\n            else:\n                id_errors.append(ac_id)\n        return updates_needed, id_errors\n\n    @dbus_signal(IFACE, 'a(ia{sv})a(ias)')\n    def ItemsPropertiesUpdated(self, updatedProps, removedProps):\n        pass\n\n    @dbus_signal(IFACE, 'ui')\n    def LayoutUpdated(self, revision, parent):\n        pass\n\n    @dbus_signal(IFACE, 'iu')\n    def ItemActivationRequested(self, id, timestamp):\n        pass\n\ndef test():\n    setup_for_cli_run()\n    app = QApplication([])\n    bus = dbus.SessionBus()\n    dbus_name = BusName('com.calibre-ebook.TestDBusMenu', bus=bus, do_not_queue=True)\n    m = QMenu()\n    ac = m.addAction(QIcon(I('window-close.png')), 'Quit', app.quit)\n    ac.setShortcut(QKeySequence('Ctrl+Q'))\n    menu = DBusMenu('/Menu', bus=bus)\n    menu.publish_new_menu(m)\n    app.exec_()\n    del dbus_name\n\nif __name__ == '__main__':\n    test()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_A_columns(df): \n    col_list = [col for col in df.columns if col[0] == 'A']\n    return df[col_list] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import base64\n\ndef encode_string(input_string):\n    encoded_bytes = base64.b64encode(input_string.encode('utf-8'))\n    return encoded_bytes.decode('utf-8') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(2, 101):\n    for j in range(2, i):\n        if i % j == 0:\n            break\n    else:\n        print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: if n % 2 == 0:\n    print(n, 'is an even number')\nelse:\n    print(n, 'is an odd number') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sum = a + b\nprint(sum) # 12 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mean(lst):\n    total = 0\n    for x in lst:\n        total += x\n    return total / len(lst) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password(length):\n    password_characters = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(password_characters) for i in range(length))\n\nprint(generate_password(8)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = 'https://www.example.com/form-url'\n\nname = 'John Doe'\nemail = 'john.doe@example.com'\n\ndata = {\n 'name' : name,\n 'email' : email\n}\n\nresponse = requests.post(url, data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_list(list_of_numbers):\n    sum = 0\n    for i in list_of_numbers:\n        sum += i\n    return sum\n\nlist = [2, 5, 9]\nresult = add_list(list)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # compute sum of all numbers from 1 to n\ndef compute_sum(n):\n sum = 0\n \n for i in range(1, n+1):\n sum += i\n \n return sum\n \nprint(compute_sum(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max_element(arr):\n    max_element = arr[0]\n    for num in arr[1:]:\n        if num > max_element:\n            max_element = num\n    return max_element but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #importing the libraries\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n#loading the dataset\ndata = np.load('text_data.npy')\nlabels = np.load('text_labels.npy')\n\n# vectorizing the data\nvectorizer = CountVectorizer()\nvectorized_data = vectorizer.fit_transform(data)\n\n#splitting the dataset into train and test\nX_train, X_test, y_train, y_test = train_test_split(vectorized_data, labels, test_size=0.2, random_state=0)\n\n#creating and fitting the model\nmodel = LogisticRegression().fit(X_train, y_train)\n\n#predicting the test data\ny_pred = model.predict(X_test)\n\n#calculating the accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint(accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: d = { 'name': 'John', 'age': 44, 'job': 'Engineer' }\nl = list(d.items())\nprint(l)  // [('name', 'John'), ('age', 44), ('job', 'Engineer')] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def concatenate_strings(str1, str2):\n    return str1 + str2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class NewClass:\n  \n  def __init__(self, data1, data2):\n    self.data1 = data1\n    self.data2 = data2\n    \n  def method1(self):\n    # method implementation\n    \n  def method2(self, param1):\n    # method implementation but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findSubstring(string, substring):\n index = string.find(substring)\n if index != -1:\n  return index\n else:\n  return -1\n\nstring = \"Hello World\"\nsubstring = \"World\"\nprint(findSubstring(string, substring)) # returns 6 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from math import sin, cos, sqrt, atan2, radians \n\ndef calculate_distance(lat1, long1, lat2, long2): \n    # approximate radius of earth in km\n    R = 6373.0\n\n    lat1 = radians(lat1)\n    long1 = radians(long1)\n    lat2 = radians(lat2)\n    long2 = radians(long2)\n\n    dlon = long2 - long1\n    dlat = lat2 - lat1\n\n    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    distance = R * c\n\n    return distance\n\nparis = [48.8566, 2.3522]\nny = [40.7128, 74.0060]\ndistance = calculate_distance(paris[0], paris[1], ny[0], ny[1])\n\nprint(distance) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import mysql.connector\n\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"username\",\n  passwd=\"password\",\n  database=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nname = input('Please enter your name: ')\ncountry = input('Please enter your country: ')\n\nsql = \"INSERT INTO customers (name, country) VALUES (%s, %s)\"\nval = (name, country)\n\nmycursor.execute(sql, val)\nmydb.commit()\n\nprint(mycursor.rowcount, \"record inserted.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nLinear regression model in python\n\"\"\"\nimport numpy as np \nimport matplotlib.pyplot as plt \n\n# Read the data from CSV\nX, y = np.loadtxt('data.csv', delimiter=',', unpack=True)\n\n# Calculate the mean of X and y\nmean_x = np.mean(X)\nmean_y = np.mean(y)\n\n# Calculate the b1 and b0\nb1 = np.sum([(xi-mean_x)*(yi-mean_y) for xi, yi in zip(X,y)])/np.sum([(xi-mean_x)**2 for xi in X])\nb0 = mean_y - (b1*mean_x)\n\n# Print coefficient values\nprint(b0, b1)\n\n# Calculate predicted values\ny_pred = [b0 + b1*xi for xi in X] \n\n# Calculate the coefficient of determination\nSS_res = np.sum([(yi-yp)**2 for yi, yp in zip(y, y_pred)])\nSS_tot = np.sum([(yi-mean_y)**2 for yi in y])\nR2 = 1-SS_res/SS_tot\n\n# Plot the data\nplt.scatter(X, y, color='c', label='data')\nplt.plot(X, y_pred, color='g', label='model')\nplt.title('Linear Regression Model. r2 = '+str(R2))\nplt.legend()\n# Show the plot \nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def extract_abce(string):\n  output = \"\"\n  for char in string:\n                    if ord(char) >= 97 and ord(char) <= 101:\n                                    output += char + \"\\n\"\n  print(output) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_odd_recurse(num):\n    if num == 0:\n        return 0\n    elif num % 2 != 0:\n        return num + sum_odd_recurse(num - 1)\n    else:\n        return sum_odd_recurse(num - 1)\n\n# driver code\nx = 4\nprint(sum_odd_recurse(x)) # Output: 9 (1+3+5) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence = input(\"Please enter a sentence: \")\n\nrev_sentence = sentence[::-1]\n\nprint(rev_sentence) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pig_latin(sentence):\n  \n  # Split the sentence into words\n  words = sentence.split()\n  \n  # Iterate through each word and convert it to pig latin\n  output = []\n  for word in words:\n    if word[0] in 'aeiou':\n      output.append(word + 'way')\n    else:\n      output.append(word[1:] + word[0] + 'ay')\n  \n  # Return the modified sentence\n  return ' '.join(output)\n\n# Get the input sentence\nsentence = \"Hello, world!\"\n\n# Print the pig latin version of the sentence\nprint(pig_latin(sentence)) # Output: ellohay, orldway! but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_mode = [i for i in range(51)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nclass MNISTClassifier(nn.Module):\n  def __init__(self):\n    super(MNISTClassifier, self).__init__()\n    # Create a convolutional network using 2D convolution and max pooling layers\n    self.conv1 = nn.Conv2d(1, 8, 3, padding=1)\n    self.conv2 = nn.Conv2d(8, 8, 3, padding=1)\n    self.pool = nn.MaxPool2d(2,2)\n    # Fully connected layer\n    self.fc1 = nn.Linear(8 * 7 * 7, 10)\n  \n  def forward(self, x):\n    x = F.relu(self.conv1(x))\n    x = self.pool(x)\n    x = F.relu(self.conv2(x))\n    x = self.pool(x)\n    x = x.view(-1, 8 * 7 * 7)\n    x = F.relu(self.fc1(x))\n    return x\n\nmodel = MNISTClassifier() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_letter(string):\n result = ''\n for c in string:\n if c == 'z':\n result += 'a'\n else:\n result += chr(ord(c)+1)\n return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import dependencies\nimport flask\nfrom flask import request, jsonify\n\n#import API methods\nimport some_function\n\napp = flask.Flask(__name__)\napp.config[\"DEBUG\"] = True\n\n# create API endpoint\n@app.route('/api', methods=['GET'])\ndef api_call():\n    # Get the query parameters\n    query_parameters = request.args\n  \n    # Call the API method\n    result = some_function.some_function(query_parameters)\n \n    # Return jsonified output\n    return jsonify(result)\n\n# run the API\nif __name__ == '__main__':\n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com/products'\nhtml = requests.get(url).text\nsoup = BeautifulSoup(html, 'html.parser')\n\nproducts = soup.find_all('div', class_='product')\n\nfor product in products:\n title = product.find('h3', class_='title').text\n description = product.find('p', class_='description').text\n price = product.find('div', class_='price').text\n\n print(title, description, price) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sentence_to_words(sentence):\n    words = sentence.split()\n    return words \n\nresult = sentence_to_words(\"This is a test sentence.\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import necessary libraries\nimport numpy as np\nfrom typing import List, Optional, Tuple\n\n# define the board\nboard=np.zeros([3,3], dtype=int)\n\n# define the winning combos\nwin_combos = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n]\n\n# define the game AI\ndef game_ai(board:np.ndarray) -> Optional[Tuple[int, int]]:\n  # analyze the board\n  diags=[]\n  diags.append(board.trace())\n  diags.append(np.fliplr(board).trace()) \n\n  # generate all possible moves\n  moves = [i for i, x in enumerate(board.reshape(-1)) if x == 0] \n  \n  # get winning move\n  for ind, val in enumerate(board.reshape(-1)):\n    if val == 0:\n      board.reshape(-1)[ind] = 1  \n      if any(all(val==1 for val in combo) for combo in win_combos):\n        board.reshape(-1)[ind] = 0\n        return ind // 3, ind % 3\n      else:\n        board.reshape(-1)[ind] = 0 \n  \n  # block opponent's winning move\n  for ind, val in enumerate(board.reshape(-1)):\n    if val == 0:\n      board.reshape(-1)[ind] = 2  \n      if any(all(val==2 for val in combo) for combo in win_combos):\n        board.reshape(-1)[ind] = 0\n        return ind // 3, ind % 3\n      else:\n        board.reshape(-1)[ind] = 0 \n\n  # do random move        \n  return moves[np.random.choice(len(moves))] // 3, moves[np.random.choice(len(moves))] % 3\n\n#sample call\nrow, col = game_ai(board)\nprint(row, col)\n# Output: 0 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_number(a,b,c):\n  max = a\n  if b > max:\n    max = b\n  if c > max:\n    max = c\n  return max\n\nprint(max_number(1,5,3)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\n# Representation of tokens\ntokens = [\n ['NUMBER',        r'\\d+(\\.\\d+)?'],\n ['OPEN_BRACE',    r'\\['],\n ['CLOSE_BRACE',   r'\\]'],\n ['TEXT',          r'[a-zA-Z]+']\n]\n\n# List of tokens\ntoken_list = []\nfor token, pattern in tokens:\n token_list.append(token)\n\n# Dictionary of tokens\ntoken_dict = {token: pattern for token, pattern in tokens}\n\ndef lex(string):\n token_list = []\n char_list = list(string)\n while char_list:\n for token, regex in token_dict.items():\n matchObj = re.match('^' + regex, ''.join(char_list))\n if matchObj:\n token_list.append((token, matchObj.group()))\n char_list = char_list[matchObj.end():]\n break\n else:\n raise SyntaxError\n return token_list\n\nprint(lex('[10.5 hello]'))\n# Output: [('OPEN_BRACE', '['), ('NUMBER', '10.5'), ('TEXT', 'hello'), ('CLOSE_BRACE', ']')] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\npattern = r\"\\b[aA]\\w+\"\n\n# call the function\nprint(re.findall(pattern)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(input_str):\n  len_input = len(input_str)\n\n  for i in range(len_input // 2):\n    if input_str[i] != input_str[len_input - i - 1]:\n      return False\n  \n  return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def kthSmallest(arr, k):\n # sort the array\n arr.sort()\n \n # return the kth element\n return arr[k-1]\n \n# Driver Code\narr = [3,2,4,1,5]\nk = 3\n\nprint(kthSmallest(arr, k)) # 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: x = 10 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_pair(arr, target): \n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] + arr[j] == target: \n                return (arr[i], arr[j]) \n\nresult = find_pair([1, 4, 8, 10], 14) \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize_system(system):\n    min_energy = sys.maxsize\n    for configuration in system:\n        energy = calculate_energy(configuration)\n        if energy < min_energy:\n            min_energy = energy\n            best_configuration = configuration\n    return best_configuration but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurls = [\"https://www.google.com\", \"https://www.youtube.com\", \"https://www.yahoo.com\"]\n\nfor url in urls:\n response = requests.get(url)\n html = response.text\n with open(f\"{url.split('//')[1]}.html\", \"w\") as file:\n file.write(html) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def split_string(string): \n return string.split() \n\nprint(split_string(\"Hello, World!\")) # [\"Hello,\", \"World!\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\noccurrences = {letter : 0 for letter in 'abcdefghijklmnopqrstuvwxyz'}\n\nfor key in dictionary:\n for letter in key.lower():\n occurrences[letter] += 1\n\nletters = sorted(occurrences.keys())\nvalues = [occurrences[letter] for letter in letters]\n \nplt.bar(letters, values, edgecolor='black', width=0.8)\nplt.title(\"Occurrences of Each Letter\")\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers = [20, 5, 2, 15, 7, 10]\nnumbers = [x for x in numbers if x <= 10]\nprint(numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_to_list(string):\n    return string.split() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout, Bidirectional\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import Adam\nimport tensorflow.keras.utils as ku \n\ndef generate_text(model, tokenizer, seq_len, seed_text, num_gen_words):\n    '''\n    generates text from a trained model\n    '''\n    output_text = []\n    input_text = seed_text\n    for i in range(num_gen_words):\n\t\t# tokenize the input text\n        token_list = tokenizer.texts_to_sequences([input_text])[0]\n\t\t# pad the token list \n        token_list = pad_sequences([token_list], maxlen=seq_len, padding='pre')\n\t\t# predict next word\n        predicted = model.predict_classes(token_list, verbose=0)\n\t\t\n\t\t# mapping predicted word index to actual word\n        output_word = \"\"\n        for word, index in tokenizer.word_index.items():\n            if index == predicted:\n                output_word = word\n                break\n\t\t# append to output\n        input_text += \" \" + output_word\n        output_text.append(output_word)\n        \n    return \" \".join(output_text)\n    \nmodel  = Sequential()\n\n# here goes the rest of the model architecture \n\n# compile model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n#word tokenizer\ntokenizer = Tokenizer()\n\n# generate text\nseed_text = \"This is going to be\"\ngenerate_text(model, tokenizer, seq_len, seed_text, num_gen_words=10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\ndef get_webpage_data(url):\n    response = requests.get(url)\n    html = response.content\n    soup = BeautifulSoup(html, 'html.parser')\n\n    text = soup.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'])\n    headers = [header.text for header in text]\n\n    soup.find_all('a')\n    links = [link.get('href') for link in text]\n\n    return headers, links\n\nheaders, links = get_webpage_data('https://en.wikipedia.org/wiki/Main_Page') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # A Node class \nclass Node: \n  \n    # Constructor to initialize the node object \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n  \n    # A function to reverse the linked list \n    def reverse(self):\n        prev = None\n        current = self.head\n        while current is not None:\n            next = current.next\n            current.next = prev\n            prev = current\n            current = next\n        self.head = prev\n  \n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head \n        self.head = new_node but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def common_elements(set1, set2):\n set_common = set1.intersection(set2)\n return set_common but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class TemperatureConverter:\n  \n  def __init__(self):\n    self.temp = 0\n  \n  def set_temp(self, temp):\n    self.temp = temp\n  \n  def convert_temp(self):\n    return (self.temp - 32.0) * 5.0/9.0\n\n#Example Temperature Value\nf_temperature = 212\n\n# Create an instance\ntc = TemperatureConverter()\n\n#Set the temp value\ntc.set_temp(f_temperature)\n\n#Convert and print it\ncelsius_temp = tc.convert_temp()\nprint(celsius_temp)\n# Output: 100.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -------------------------------------------------------------------------\n# Copyright (c) Microsoft Corporation. All rights reserved.\n# Licensed under the MIT License. See License.txt in the project root for\n# license information.\n# --------------------------------------------------------------------------\nfrom sys import version_info\n\nif version_info < (3,):\n    def _str(value):\n        if isinstance(value, unicode):\n            return value.encode('utf-8')\n\n        return str(value)\nelse:\n    _str = str\n\n\ndef _to_str(value):\n    return _str(value) if value is not None else None\n\n\nfrom azure.common import (\n    AzureHttpError,\n    AzureConflictHttpError,\n    AzureMissingResourceHttpError,\n    AzureException,\n)\nfrom ._constants import (\n    _ENCRYPTION_PROTOCOL_V1,\n)\n\n_ERROR_CONFLICT = 'Conflict ({0})'\n_ERROR_NOT_FOUND = 'Not found ({0})'\n_ERROR_UNKNOWN = 'Unknown error ({0})'\n_ERROR_STORAGE_MISSING_INFO = \\\n    'You need to provide an account name and either an account_key or sas_token when creating a storage service.'\n_ERROR_EMULATOR_DOES_NOT_SUPPORT_FILES = \\\n    'The emulator does not support the file service.'\n_ERROR_ACCESS_POLICY = \\\n    'share_access_policy must be either SignedIdentifier or AccessPolicy ' + \\\n    'instance'\n_ERROR_PARALLEL_NOT_SEEKABLE = 'Parallel operations require a seekable stream.'\n_ERROR_VALUE_SHOULD_BE_BYTES = '{0} should be of type bytes.'\n_ERROR_VALUE_SHOULD_BE_BYTES_OR_STREAM = '{0} should be of type bytes or a readable file-like/io.IOBase stream object.'\n_ERROR_VALUE_SHOULD_BE_SEEKABLE_STREAM = '{0} should be a seekable file-like/io.IOBase type stream object.'\n_ERROR_VALUE_SHOULD_BE_STREAM = '{0} should be a file-like/io.IOBase type stream object with a read method.'\n_ERROR_VALUE_NONE = '{0} should not be None.'\n_ERROR_VALUE_NONE_OR_EMPTY = '{0} should not be None or empty.'\n_ERROR_VALUE_NEGATIVE = '{0} should not be negative.'\n_ERROR_START_END_NEEDED_FOR_MD5 = \\\n    'Both end_range and start_range need to be specified ' + \\\n    'for getting content MD5.'\n_ERROR_RANGE_TOO_LARGE_FOR_MD5 = \\\n    'Getting content MD5 for a range greater than 4MB ' + \\\n    'is not supported.'\n_ERROR_MD5_MISMATCH = \\\n    'MD5 mismatch. Expected value is \\'{0}\\', computed value is \\'{1}\\'.'\n_ERROR_TOO_MANY_ACCESS_POLICIES = \\\n    'Too many access policies provided. The server does not support setting more than 5 access policies on a single resource.'\n_ERROR_OBJECT_INVALID = \\\n    '{0} does not define a complete interface. Value of {1} is either missing or invalid.'\n_ERROR_UNSUPPORTED_ENCRYPTION_VERSION = \\\n    'Encryption version is not supported.'\n_ERROR_DECRYPTION_FAILURE = \\\n    'Decryption failed'\n_ERROR_ENCRYPTION_REQUIRED = \\\n    'Encryption required but no key was provided.'\n_ERROR_DECRYPTION_REQUIRED = \\\n    'Decryption required but neither key nor resolver was provided.' + \\\n    ' If you do not want to decypt, please do not set the require encryption flag.'\n_ERROR_INVALID_KID = \\\n    'Provided or resolved key-encryption-key does not match the id of key used to encrypt.'\n_ERROR_UNSUPPORTED_ENCRYPTION_ALGORITHM = \\\n    'Specified encryption algorithm is not supported.'\n_ERROR_UNSUPPORTED_METHOD_FOR_ENCRYPTION = 'The require_encryption flag is set, but encryption is not supported' + \\\n                                           ' for this method.'\n_ERROR_UNKNOWN_KEY_WRAP_ALGORITHM = 'Unknown key wrap algorithm.'\n_ERROR_DATA_NOT_ENCRYPTED = 'Encryption required, but received data does not contain appropriate metatadata.' + \\\n                            'Data was either not encrypted or metadata has been lost.'\n\n\ndef _dont_fail_on_exist(error):\n    ''' don't throw exception if the resource exists.\n    This is called by create_* APIs with fail_on_exist=False'''\n    if isinstance(error, AzureConflictHttpError):\n        return False\n    else:\n        raise error\n\n\ndef _dont_fail_not_exist(error):\n    ''' don't throw exception if the resource doesn't exist.\n    This is called by create_* APIs with fail_on_exist=False'''\n    if isinstance(error, AzureMissingResourceHttpError):\n        return False\n    else:\n        raise error\n\n\ndef _http_error_handler(http_error):\n    ''' Simple error handler for azure.'''\n    message = str(http_error)\n    error_code = None\n\n    if 'x-ms-error-code' in http_error.respheader:\n        error_code = http_error.respheader['x-ms-error-code']\n        message += ' ErrorCode: ' + error_code\n\n    if http_error.respbody is not None:\n        message += '\\n' + http_error.respbody.decode('utf-8-sig')\n\n    ex = AzureHttpError(message, http_error.status)\n    ex.error_code = error_code\n\n    raise ex\n\n\ndef _validate_type_bytes(param_name, param):\n    if not isinstance(param, bytes):\n        raise TypeError(_ERROR_VALUE_SHOULD_BE_BYTES.format(param_name))\n\n\ndef _validate_type_bytes_or_stream(param_name, param):\n    if not (isinstance(param, bytes) or hasattr(param, 'read')):\n        raise TypeError(_ERROR_VALUE_SHOULD_BE_BYTES_OR_STREAM.format(param_name))\n\n\ndef _validate_not_none(param_name, param):\n    if param is None:\n        raise ValueError(_ERROR_VALUE_NONE.format(param_name))\n\n\ndef _validate_content_match(server_md5, computed_md5):\n    if server_md5 != computed_md5:\n        raise AzureException(_ERROR_MD5_MISMATCH.format(server_md5, computed_md5))\n\n\ndef _validate_access_policies(identifiers):\n    if identifiers and len(identifiers) > 5:\n        raise AzureException(_ERROR_TOO_MANY_ACCESS_POLICIES)\n\n\ndef _validate_key_encryption_key_wrap(kek):\n    # Note that None is not callable and so will fail the second clause of each check.\n    if not hasattr(kek, 'wrap_key') or not callable(kek.wrap_key):\n        raise AttributeError(_ERROR_OBJECT_INVALID.format('key encryption key', 'wrap_key'))\n    if not hasattr(kek, 'get_kid') or not callable(kek.get_kid):\n        raise AttributeError(_ERROR_OBJECT_INVALID.format('key encryption key', 'get_kid'))\n    if not hasattr(kek, 'get_key_wrap_algorithm') or not callable(kek.get_key_wrap_algorithm):\n        raise AttributeError(_ERROR_OBJECT_INVALID.format('key encryption key', 'get_key_wrap_algorithm'))\n\n\ndef _validate_key_encryption_key_unwrap(kek):\n    if not hasattr(kek, 'get_kid') or not callable(kek.get_kid):\n        raise AttributeError(_ERROR_OBJECT_INVALID.format('key encryption key', 'get_kid'))\n    if not hasattr(kek, 'unwrap_key') or not callable(kek.unwrap_key):\n        raise AttributeError(_ERROR_OBJECT_INVALID.format('key encryption key', 'unwrap_key'))\n\n\ndef _validate_encryption_required(require_encryption, kek):\n    if require_encryption and (kek is None):\n        raise ValueError(_ERROR_ENCRYPTION_REQUIRED)\n\n\ndef _validate_decryption_required(require_encryption, kek, resolver):\n    if (require_encryption and (kek is None) and\n            (resolver is None)):\n        raise ValueError(_ERROR_DECRYPTION_REQUIRED)\n\n\ndef _validate_encryption_protocol_version(encryption_protocol):\n    if not (_ENCRYPTION_PROTOCOL_V1 == encryption_protocol):\n        raise ValueError(_ERROR_UNSUPPORTED_ENCRYPTION_VERSION)\n\n\ndef _validate_kek_id(kid, resolved_id):\n    if not (kid == resolved_id):\n        raise ValueError(_ERROR_INVALID_KID)\n\n\ndef _validate_encryption_unsupported(require_encryption, key_encryption_key):\n    if require_encryption or (key_encryption_key is not None):\n        raise ValueError(_ERROR_UNSUPPORTED_METHOD_FOR_ENCRYPTION)\n\n\ndef _validate_user_delegation_key(user_delegation_key):\n    _validate_not_none('user_delegation_key.signed_oid', user_delegation_key.signed_oid)\n    _validate_not_none('user_delegation_key.signed_tid', user_delegation_key.signed_tid)\n    _validate_not_none('user_delegation_key.signed_start', user_delegation_key.signed_start)\n    _validate_not_none('user_delegation_key.signed_expiry', user_delegation_key.signed_expiry)\n    _validate_not_none('user_delegation_key.signed_version', user_delegation_key.signed_version)\n    _validate_not_none('user_delegation_key.signed_service', user_delegation_key.signed_service)\n    _validate_not_none('user_delegation_key.value', user_delegation_key.value)\n\n\n# wraps a given exception with the desired exception type\ndef _wrap_exception(ex, desired_type):\n    msg = \"\"\n    if len(ex.args) > 0:\n        msg = ex.args[0]\n    if version_info >= (3,):\n        # Automatic chaining in Python 3 means we keep the trace\n        return desired_type(msg)\n    else:\n        # There isn't a good solution in 2 for keeping the stack trace\n        # in general, or that will not result in an error in 3\n        # However, we can keep the previous error type and message\n        # TODO: In the future we will log the trace\n        return desired_type('{}: {}'.format(ex.__class__.__name__, msg))\n\n\nclass AzureSigningError(AzureException):\n    \"\"\"\n    Represents a fatal error when attempting to sign a request.\n    In general, the cause of this exception is user error. For example, the given account key is not valid.\n    Please visit https://docs.microsoft.com/en-us/azure/storage/common/storage-create-storage-account for more info.\n    \"\"\"\n    pass\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pyautogui\n \n# Move mouse to (100, 200)\npyautogui.moveTo(100, 200)\n \n# Drag mouse from (100, 200) to (300, 400)\npyautogui.dragTo(300, 400, button='left')\n \n# Click at position (300, 400)\npyautogui.click(x=300, y=400, clicks=2, button='left')\n \n# Type the word \"Hello World\" \npyautogui.typewrite(\"Hello World\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name, gpa):\n        self.name = name\n        self.gpa = gpa\n\ndef read_excel(filename):\n    excel_file = open(filename, 'r')\n    lines = excel_file.readlines()\n    students = list()\n    for line in lines[1:]:\n        name, gpa = line.split(\",\")\n        students.append(Student(name, float(gpa)))\n    return students but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def unique_list(list):\n    unique_list = []\n    for item in list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(number):\n    if number == 0:\n        return 1\n    else:\n        return number * factorial(number -1)\n\nfactorial(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_equation():\n  a = random.randint(-10, 10)\n  b = random.randint(-10, 10)\n  c = random.randint(-10, 10)\n\n  equation = f'{a}x^2 + {b}x + {c} = 0'\n  return equation\n\nresult = generate_equation()\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com/'\n\n# Capture the page\npage = requests.get(url)\n\n# Parse the page\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Find all the product containers\nproduct_containers = soup.find_all('div', {'class': 'product-container'})\n\n# Loop over product containers and capture the information\nproducts = []\nfor container in product_containers:\n # Capture the title\n title = container.find('h3').find('a')['title']\n\n # Capture the price\n price = container.find('div', {'class': 'price'}).find('strong').string\n\n # Ad documents to the `products` list\n products.append({'title': title, 'price': price})\n\n# Print the captured products\nprint(products) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef is_spam(email):\n    pattern = r'viagra|cialis|pharmacy'\n    if re.search(pattern, email):\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\n# Create a neural network with an input layer with 784 nodes,\n# a hidden layer with 64 nodes, and an output layer with 10 nodes\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.InputLayer(input_shape=(784,)),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train, y_train, epochs=5)  \n\n# Test the model \nmodel.evaluate(X_test, y_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse(sentence):\n words = sentence.split(' ')\n words.reverse()\n \n return ' '.join(words)\n\nprint(reverse(\"I love programming\"))  // Output: \"programming love I\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0438\u0449\u0435\u0442 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0440\u043e \u0434\u0432\u0430 \u043a\u0443\u0432\u0448\u0438\u043d\u0430\n\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f Python 3\n\"\"\"\nfrom enum import Enum\n\n\nclass Action(Enum):\n    \"\"\"\n    \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u043a\u0443\u0432\u0448\u0438\u043d\u0430\u043c\u0438\n    \"\"\"\n    empty = 0\n    fill = 1\n    transfer = 2\n    start = 3\n\n\ndef get_pitchers_volume():\n    \"\"\"\n    \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0431\u044a\u0451\u043c\u043e\u0432 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\n    \"\"\"\n    while True:  # pitchers_volume \u044d\u0442\u043e list \u0438\u0437 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435\u043c \u0432\u0432\u043e\u0434\u0438\u043c\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438\n        pitchers_volume = list(int(pitcher) for pitcher in input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b \u043e\u0431\u044a\u0451\u043c\u044b \u0434\u0432\u0443\u0445 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432: \").split())\n\n        if len(pitchers_volume) != 2:  # \u041c\u044b \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u043b\u0443\u0447\u0430\u0438 \u0441 \u0434\u0432\u0443\u043c\u044f \u043a\u0443\u0432\u0448\u0438\u043d\u0430\u043c\u0438\n            print('\u0410\u0439\u0430\u0439\u0430\u0439! \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0437\u0430\u043d\u043e\u0432\u043e.')\n        else:\n            return pitchers_volume\n\n\ndef get_target():\n    \"\"\"\n    \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0439 \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 \u043e\u0431\u044a\u0451\u043c\n    \"\"\"\n    return int(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 \u043e\u0431\u044a\u0451\u043c: \"))\n\n\ndef greatest_common_divisor(a, b):\n    \"\"\"\n    \u0421\u0447\u0438\u0442\u0430\u0435\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043e\u0431\u0449\u0438\u0439 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef make_edges(i, j, i_max, j_max):\n    \"\"\"\n    \u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u0432\u0441\u0435\u0445 \u0438\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0432\u0435\u0442\u0432\u0435\u0439 \u0433\u0440\u0430\u0444\u0430 \u0432 \u0442\u043e\u0447\u043a\u0435 (i, j)\n    \u0413\u0434\u0435 i \u0438 j \u2014 \u043d\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\n    \"\"\"\n    edges = dict()\n\n    # \u0415\u0441\u043b\u0438 \u043a\u0443\u0432\u0448\u0438\u043d\u044b \u043d\u0435 \u043f\u0443\u0441\u0442\u044b, \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u043e\u043f\u0443\u0441\u0442\u043e\u0448\u0438\u0442\u044c\n    if i != 0:\n        edges[(0, j)] = Action.empty\n    if j != 0:\n        edges[(i, 0)] = Action.empty\n\n    # \u0415\u0441\u043b\u0438 \u043a\u0443\u0432\u0448\u0438\u043d\u044b \u043d\u0435 \u043f\u043e\u043b\u043d\u044b\u0435, \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c\n    if i != i_max:\n        edges[(i_max, j)] = Action.fill\n    if j != j_max:\n        edges[(i, j_max)] = Action.fill\n\n    # \u0418\u0437 \u043d\u0435\u043f\u0443\u0441\u0442\u043e\u0433\u043e \u043a\u0443\u0432\u0448\u0438\u043d\u0430 \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043b\u0438\u0442\u044c \u0432 \u043d\u0435\u043f\u043e\u043b\u043d\u044b\u0439\n    if i != 0 and j_max-j >= i:\n        edges[(0, j+i)] = Action.transfer\n    if j != 0 and i_max-i >= j:\n        edges[(i+j, 0)] = Action.transfer\n\n    # \u041f\u0440\u0438\u0447\u0435\u043c, \u0435\u0441\u043b\u0438 \u0432 \u043d\u0435\u043f\u043e\u043b\u043d\u043e\u043c \u043d\u0435 \u0445\u0432\u0430\u0442\u0438\u0442 \u043c\u0435\u0441\u0442\u0430,\n    # \u0442\u043e \u043e\u0431\u0430 \u043a\u0443\u0432\u0448\u0438\u043d\u0430 \u043e\u0441\u0442\u0430\u043d\u0443\u0442\u0441\u044f \u043d\u0435\u043f\u0443\u0441\u0442\u044b\u043c\u0438\n    if j != 0 and 0 < i_max-i < j:\n        edges[(i_max, j - (i_max-i))] = Action.transfer\n    if i != 0 and 0 < j_max-j < i:\n        edges[(i - (j_max-j), j_max)] = Action.transfer\n    return edges\n\n\ndef make_pitchers_graph(pitchers_volume):\n    \"\"\"\n    \u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043a\u043b\u044e\u0447\u0438 \u2014 \u0432\u0441\u0435 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 \u043d\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432,\n    \u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u2014 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u044b \u0438\u0437 \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438\n    \"\"\"\n    pitchers_graph = dict()\n    gcd = greatest_common_divisor(pitchers_volume[0], pitchers_volume[1])\n    for i in range(0, int(pitchers_volume[0]/gcd)+1):      # \u041d\u0430\u0439\u0434\u0451\u043c \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u043e\u0431\u0449\u0435\u0435 \u043a\u0440\u0430\u0442\u043d\u043e\u0435 \u0443 \u043e\u0431\u044a\u0451\u043c\u043e\u0432 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\n        for j in range(0, int(pitchers_volume[1]/gcd)+1):  # \u0418 \u043f\u043e\u0434\u0435\u043b\u0438\u043c \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043e\u0431\u044a\u0451\u043c\u043e\u0432 \u043d\u0430 \u043d\u0435\u0433\u043e, \u0434\u043b\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438\n            pitchers_graph[(i*gcd, j*gcd)] = make_edges(i*gcd, j*gcd, pitchers_volume[0], pitchers_volume[1])\n    return pitchers_graph\n\n\ndef dijkstra(graph, start_node, target):\n    \"\"\"\n    \u041d\u0430\u0445\u043e\u0434\u0438\u0442 \u043a\u0440\u0430\u0442\u0447\u0430\u0439\u0448\u0438\u0439 \u043f\u0443\u0442\u044c \u0432 \u0433\u0440\u0430\u0444\u0435\n    \"\"\"\n    distance = dict.fromkeys(graph, float('inf'))\n    path = dict()\n    path[start_node] = [[[start_node], [Action.start]]]  # \u041f\u0443\u0442\u044c \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u0432\u0438\u0434\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u044f, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0438\u0437\n    distance[start_node] = 0                           # \u0438\u043c\u0451\u043d \u0443\u0437\u043b\u043e\u0432 \u0441\u043e\u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f list \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0443\u0437\u043b\u043e\u0432\n    node_set = set(graph)                              # \u0441 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0442\u0438\u043f\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u043a\u0443\u0432\u0448\u0438\u043d\u0430\u043c\u0438\n    targets_list = [node for node in node_set                   # \u0426\u0435\u043b\u0438 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u043a\u0430\u043a list \u0438\u0437 \u0432\u0441\u0435\u0445 \u0443\u0437\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435\n                    if node[0] == target or node[1] == target]  # \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0442 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0444\u0438\u043d\u0438\u0448\u0430\n\n    while node_set:\n        node = min(node_set, key=distance.get)\n        if node in targets_list and node in path:  # \u041a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430\u0448\u043b\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u0443\u0437\u0435\u043b \u2014 \u0432\u044b\u0445\u043e\u0434\u0438\u043c. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043c\u044b \u0438\u0449\u0435\u043c\n            return path[node]                      # \u043e\u0442 \u0442\u043e\u0447\u043a\u0438 (0, 0), \u0430 \u0432\u0435\u0441 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u0431\u0440\u0430 \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c,\n        node_set.remove(node)                      # \u0442\u043e \u043f\u0435\u0440\u0432\u044b\u0439 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0439 \u0443\u0437\u0435\u043b \u0438 \u0431\u0443\u0434\u0435\u0442 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c\n        for child_node in graph[node].keys():\n            if distance[child_node] >= distance[node] + 1:  # \u0412\u0435\u0441 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u0431\u0440\u0430 \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0437\u0430 \u0435\u0434\u0438\u043d\u0438\u0446\u0443\n                distance[child_node] = distance[node] + 1\n                path[child_node] = list()\n                path[child_node].extend(path[node])     # \u041f\u0443\u0442\u044c \u0434\u043e \u043d\u043e\u0432\u043e\u0433\u043e \u0443\u0437\u043b\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043f\u0443\u0442\u0438 \u0434\u043e \u0435\u0433\u043e \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044f\n                path[child_node].append([[child_node],  # \u043f\u043b\u044e\u0441 \u0441\u0430\u043c \u043f\u0435\u0440\u0435\u0445\u043e\u0434\n                                         [graph[node].get(child_node)]])  # \u0441 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0442\u0438\u043f\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\n\n\ndef show_answer(path, target):\n    \"\"\"\n    \u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0432\u0435\u0442 \u0432 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u043e\u0447\u0438\u0442\u0430\u0435\u043c\u043e\u043c \u0432\u0438\u0434\u0435\n    \"\"\"\n    if path is not None:\n        print('\u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0448\u0430\u0433\u043e\u0432: {}'.format(len(path)-1))\n        for node in path:\n            print(node[0][0], end=' ')  # \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\n            print(node[1][0].name)      # \u0422\u0438\u043f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\n    else:\n        print('\u041d\u0435\u043b\u044c\u0437\u044f \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c {}\u043b., \u0438\u043c\u0435\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u0443\u0432\u0448\u0438\u043d\u044b.'.format(target))\n\n\npitchers_volume = get_pitchers_volume()  # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u043e\u0431\u044a\u0451\u043c\u044b \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\ntarget_node = get_target()               # \u0418 \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 \u043e\u0431\u044a\u0451\u043c\nstart_node = (0, 0)  # \u041d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0441 \u043f\u0443\u0441\u0442\u044b\u0445 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\npitchers_graph = make_pitchers_graph(pitchers_volume)  # \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u0433\u0440\u0430\u0444 \u0438\u0437 \u0432\u0441\u0435\u0445 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\npath = dijkstra(pitchers_graph, start_node, target_node)  # \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u043a\u0440\u0430\u0442\u0447\u0430\u0439\u0448\u0438\u0439 \u043f\u0443\u0442\u044c\nshow_answer(path, target_node)  # \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(str1, str2): \n\t\n\t# Remove all white spaces and convert strings to lowercase\n\tstr1 = str1.replace(\" \", \"\").lower()\n\tstr2 = str2.replace(\" \", \"\").lower()\n\t\n\t# Python doesn't have built-in method for checking anagrams, \n\t#so we need to sort the strings and then compare\n\tif(sorted(str1) == sorted(str2)): \n\t\treturn True \n\telse:\n\t\treturn False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n def __init__(self, name, age, salary, role):\n self.name = name\n self.age = age\n self.salary = salary\n self.role = role\n \n def get_name(self):\n return self.name\n \n def set_name(self, name):\n self.name = name\n \n def get_age(self):\n return self.age\n \n def set_age(self, age):\n self.age = age\n \n def get_salary(self):\n return self.salary\n \n def set_salary(self, salary):\n self.salary = salary\n \n def get_role(self):\n return self.role\n \n def set_role(self, role):\n self.role = role\n \n def display_employee_info (self):\n print(\"Name:\",self.name,\"\\nAge:\",self.age,\"\\nSalary:\",self.salary,\"\\nRole:\",self.role) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nWrite a function in python that takes a list of strings and returns a new list with the capitalized versions of strings sorted alphabetically\n\"\"\"\ndef capitalize_and_sort(string_list):\n    capitalized_list = [string.capitalize() for string in string_list]\n    capitalized_list.sort()\n\n    return capitalized_list\n\nif __name__ == '__main__':\n    string_list = [\"hello\", \"world\", \"my name is\", \"xebia\"]\n    print(capitalize_and_sort(string_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n \nurl = 'https://example.com'\n \nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n \nweights = {}\n \nfor row in soup.select('table tr'):\n cells = row.find_all('td')\n if len(cells) == 2:\n  animal = cells[0].text.strip()\n  weight = cells[1].text.strip()\n  weights[animal] = weight\n \nprint(weights)\n# {'Lion': '200 kg', 'Tiger': '150 kg', 'Elephant': '1000 kg'} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # array of numbers \narr = [-3, 9, 2, 10, -5, 4, 3]\n\n# Counting the number of positive elements\ncount = 0\n\n# Iterating through the last 5 elements of the array\nfor i in range(len(arr)-5, len(arr)):\n\n    # Check if the current element is positive\n    if arr[i] > 0:\n        count += 1\n\nprint(\"The maximum number of positive numbers in the last 5 elements is:\", count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_sum_subarray(array):\n    \"\"\"\n    This function will find the maximum sum of a contiguous subarray.\n    \n    Parameters:\n    array: list of integers\n    \n    Returns:\n    maximum sum of contiguuous subarray\n    \"\"\"\n    # Initialize the max sum and current sum to the start of the array\n    max_sum = current_sum = array[0]\n    \n    # Iterate over the array\n    for num in array[1:]:\n        # Reset the current sum to 0 if it is negative\n        current_sum = max(0, current_sum + num)\n        max_sum = max(current_sum, max_sum)\n    \n    return max_sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Function to convert a JSON object to an array of dictionaries in Python\nimport json\n\ndef json_to_array(data):\n    my_dict = json.loads(data)\n    return [{k: v} for k, v in my_dict.items()]\n\n# Driver code\ndata = '{ \"Fruit\": \"Apple\", \"Shape\": \"Round\", \"Color\": \"Red\" }'\ndict_array = json_to_array(data)\nprint(dict_array) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def swap_dict_keys_values(d):\n  d_new = dict()\n  for key, value in d.items():\n    d_new.setdefault(value,[]).append(key)\n  return d_new but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: positive but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\ndocuments = [\n    \"This document is about Machine Learning\",\n    \"This document is about Natural Language Processing\"\n]\n\n# create the target categories\ncategories = [\"Machine Learning\", \"Natural Language Processing\"]\n\n# create the TF-IDF vectorizer\nvectorizer = TfidfVectorizer()\nX = vectorizer.fit_transform(documents)\n\n# create a dataframe from the TF-IDF matrix\ndf = pd.DataFrame(X.toarray(), columns=vectorizer.get_feature_names())\n\n# classify the documents based on the categories\npredictions = []\nfor i in range(len(X.toarray())):\n    max_score = 0\n    prediction = categories[0]\n    for c in categories:\n        score = df[c].iloc[i]\n        if score > max_score:\n            max_score = score\n            prediction = c\n    predictions.append(prediction)\n\n# print out the predictions\nprint(predictions) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\n# Input data\nmath = 84\nenglish = 89\nbiology = 82\n\n# Define weights\nmath_weight = 0.3\nenglish_weight = 0.4\nbiology_weight = 0.3\n\n# Compute weighted sum\ngrade = math * math_weight + english * english_weight + biology * biology_weight\n\n# Print the grade\nprint('Mia\\'s grade is: {:.2f}'.format(grade)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: max_value = max(dictionary.values()) # 30 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n#init sentiment analyzer\nanalyzer = SentimentIntensityAnalyzer()\n\n#analyze sentiment\nsentiment_scores = analyzer.polarity_scores(\"I love writing code!\")\n\nif sentiment_scores['pos'] > sentiment_scores['neg']:\n    print (\"The sentiment of the text is positive\")\nelse:\n    print (\"The sentiment of the text is negative\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseList(list):\n    list.reverse()\n    return list\n\nlist = [\"Apple\", \"Banana\", \"Carrot\", \"Durian\"]\n\nreverseList(list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sqlalchemy import Column, Integer, String, ForeignKey\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass Product(Base):\n __tablename__ = 'product'\n id = Column(Integer, primary_key=True)\n name = Column(String)\n\nclass Employee(Base):\n __tablename__ = 'employee'\n id = Column(Integer, primary_key=True)\n name = Column(String)\n\nclass Customer(Base):\n __tablename__ = 'customer'\n id = Column(Integer, primary_key=True)\n name = Column(String)\n\nclass Purchase(Base):\n __tablename__ = 'purchase'\n id = Column(Integer, primary_key=True)\n product_id = Column(Integer, ForeignKey('product.id'))\n employee_id = Column(Integer, ForeignKey('employee.id'))\n customer_id = Column(Integer, ForeignKey('customer.id')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_sum(list_nums):\n    sum = 0\n    for num in list_nums:\n        sum += num\n    return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class OrderedDict:\n    def __init__(self):\n        self.items = []\n\n    def __setitem__(self, key, value):\n        for item in self.items:\n            if item[0] == key:\n                item[1] = value\n                break\n        else:\n            self.items.append([key, value])\n \n    def __getitem__(self, key):\n        for item in self.items:\n            if item[0] == key:\n                return item[1]\n        raise KeyError(key)\n\n    def __len__(self):\n        return len(self.items) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_palindromes(lst):\n    palindromes = []\n    for item in lst:\n        if item == item[::-1]:\n            palindromes.append(item)\n    return palindromes but is not the same. just give one example and only return the code."}
