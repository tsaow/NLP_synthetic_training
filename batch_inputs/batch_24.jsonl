{"prompt": "make some code that functions the same as the following code: numbers = [1, 2, 3, 4, 5]\ntotal = 0\n\nfor num in numbers:\n    total += num but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import wikipedia\n\ndef search_wikipedia(keyword):\n    results = wikipedia.search(keyword)\n    for result in results:\n        print(wikipedia.summary(result, sentences=2))\n\nsearch_wikipedia(\"machine learning\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: n = int(input())\n \nfor i in range(1, n + 1):\n for j in range(1, i + 1):\n  print(j, end=\"\")\n print(\"\")\n \nfor i in range(n - 1, 0, -1):\n for j in range(1, i + 1):\n  print(j, end=\"\")\n print(\"\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack:\n def __init__(self):\n  self.stack = []\n\n def push(self, item):\n  self.stack.append(item)\n\n def pop(self):\n  if self.stack:\n   return self.stack.pop()\n  else: \n   return None\n\n def is_empty(self):\n  return len(self.stack) == 0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_numbers(arr):\n for i, num in enumerate(arr):\n  if num > 5:\n   arr[i] = 0\n\nreplace_numbers(arr)\nprint(arr) # [1, 4, 0, 0, 0, 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def create_response(score):\n if score == 0:\n  message = \"Try again\"  \n elif score == 1:\n  message = \"Well done\"\n else:\n  message = \"\"\n \n return {\"score\": score, \"message\": message} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def random_matrix(m, n):\n    mat = [[random.randint(0, 100) for j in range(n)] for i in range(m)]\n    return mat but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b\n\nn = 15\n\nprint(\"The {0}th number in the Fibonacci sequence is {1}\".format(n, fibonacci(n))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Unique list\nunq_list = list(set(given_list))\n\n#Print unique list\nprint(unq_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: scores = [12, 14, 16, 18, 20]\nnames = [\"Ann\", \"Bob\", \"Carol\", \"Dave\", \"Ella\"]\n\n# create a dictionary with name-score pairs\nleaderboard = {names[i]:scores[i] for i in range(len(scores))}\n\n# sort the leaderboard by score\nsorted_leaderboard = sorted(leaderboard.items(), key=lambda x: x[1], reverse=True)\n\n# print the sorted leaderboard\nfor i, (name, score) in enumerate(sorted_leaderboard):\n  print(f\"{i+1}. {name} - {score} points\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_type(var):\n    return type(var).__name__ but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: mylist = [1, 5, 8, 3, 10]\n\nprint(max(mylist)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sample_data = \"Name: John Doe; Age: 23; Course: Data Science\"\n\n# Split the string by the \";\" character\ndata_items = sample_data.split(';')\n\n# Strip any extra whitespace and split by the \":\" character\ndata_dict = {}\nfor item in data_items:\n    key, value = item.strip().split(': ')\n    data_dict[key] = value\n    \nprint(data_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a function in Python to parse a string representing an expression into a tree\n\"\"\"\n\nimport re\n\n# Node to store the information of each node in the expression Tree\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n \n# Function to parse the expression string and\n# build the expression Tree\ndef parse(expression):\n \n    # split the expression string using space delimiter\n    tokens = re.split('([+-/*])', expression)\n    # create the root node\n    root = Node(tokens[0])\n    # store the current node\n    current_node = root\n \n    for i in range(1, len(tokens) - 1, 2):\n        # create a new node\n        node = Node(tokens[i + 1])\n        if tokens[i] == '+' or tokens[i] == '-':\n            # set the left child of current node\n            current_node.left = node\n            # make the newly created node as current node\n            current_node = node\n        elif tokens[i] == '*' or tokens[i] == '/':\n            # set the right child of current node\n            current_node.right = node\n            current_node = node\n \n    return root\n\nif __name__ == \"__main__\":\n    expression = \"2 + 3*4 + 5\"\n    root = parse(expression)\n    print(\"Expression Tree\")\n    print(\"     \" + root.data)\n    print(\"  /  \\ \")\n    print(root.left.data, root.right.data)\n    print(\" /\\   /\")\n    print(root.left.right.data, root.right.left.data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortByValue(dictionary):\n    sorted_dict = dict(sorted(dictionary.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict\n\ndictionary = {\"A\": 30, \"B\": 40, \"C\": 20}\nresult = sortByValue(dictionary)\nprint(result) # prints {'B': 40, 'A': 30, 'C': 20} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def intersection(list1, list2):\n    return [value for value in list1 if value in list2]\n\nlist1 = [1, 2, 3 ,4 ,5]\nlist2 = [3, 4, 5, 6 ,7]\n\nprint (intersection(list1, list2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Copyright (c) 2013, Web Notes Technologies Pvt. Ltd. and Contributors\n# License: GNU General Public License v3. See license.txt\n\nfrom __future__ import unicode_literals\nimport frappe\n\nfrom erpnext.utilities.transaction_base import TransactionBase\nfrom frappe.utils import now, extract_email_id\nimport json\nimport requests\n\n\nSTANDARD_USERS = (\"Guest\", \"Administrator\")\n\nclass SupportTicket(TransactionBase):\n\n\tdef get_sender(self, comm):\n\t\treturn frappe.db.get_value('Support Email Settings',None,'support_email')\n\n\tdef get_subject(self, comm):\n\t\treturn '[' + self.name + '] ' + (comm.subject or 'No Subject Specified')\n\n\tdef get_content(self, comm):\n\t\tsignature = frappe.db.get_value('Support Email Settings',None,'support_signature')\n\t\tcontent = comm.content\n\t\tif signature:\n\t\t\tcontent += '<p>' + signature + '</p>'\n\t\treturn content\n\n\tdef get_portal_page(self):\n\t\treturn \"ticket\"\n\n\tdef on_update1(self):\n\t\tfrom frappe.utils import get_url, cstr\n\t\tfrappe.errprint(get_url())\n\t\tif get_url()=='http://tailorpad.com':\n\t\t\tpass\n\t\telse:\n\t\t\tpr2 = frappe.db.sql(\"\"\"select name from `tabSupport Ticket`\"\"\")\n\t\t\tfrappe.errprint(pr2)\n\t\t\tfrappe.errprint(\"is feed back saved\")\n\t\t\tif pr2:\n\t\t\t\t# self.login()\n\t\t\t\tfrappe.errprint(\"in if for creation support ticket\")\n\t\t\t\ttest = {}\n\t\t\t\tsupport_ticket = self.get_ticket_details()\n\t\t\t\tself.call_del_keys(support_ticket)\n\t\t\t\t#test['communications'] = []\n\t\t\t\t#self.call_del_keys(support_ticket.get('communications'), test)\n\t\t\t\tself.login()\n\t\t\t\tfrappe.errprint(\"support_ticket\")\n\t\t\t\tfrappe.errprint(support_ticket)\n\t\t\t\tself.tenent_based_ticket_creation(support_ticket)\n\n\t# def on_update(self):\n\t\t# self.send_email()\t\n\n\tdef send_email(self):\n\t\tfrappe.errprint(\"in the sendmail\")\n\t\tfrom frappe.utils.user import get_user_fullname\n\t\tfrom frappe.utils import get_url\n\t\tif self.get(\"__islocal\") and get_url()=='http://tailorpad.com':\n\t\t\t\n\t\t\t# mail_titles = frappe.get_hooks().get(\"login_mail_title\", [])\n\t\t\t# title = frappe.db.get_default('company') or (mail_titles and mail_titles[0]) or \"\"\n\n\t\t\tfull_name = get_user_fullname(frappe.session['user'])\n\t\t\tif full_name == \"Guest\":\n\t\t\t\tfull_name = \"Administrator\"\n\n\t\t\tfirst_name = frappe.db.sql_list(\"\"\"select first_name from `tabUser` where name='%s'\"\"\"%(self.raised_by))\n\t\t\tfrappe.errprint(first_name[0])\n\n\t\t\tmsg=\"Dear  \"+first_name[0]+\"!<br><br>Support Ticket is created successfully for '\"+self.subject+\"'<br><br>Your Support Ticket Number is '\"+self.name+\"' <br><br>Please note for further information. <br><br>Regards, <br>Team TailorPad.\"\n\t\t\tsender = frappe.session.user not in STANDARD_USERS and frappe.session.user or None\n\t\t\tfrappe.sendmail(recipients=self.raised_by, sender=sender, subject=self.subject,\n\t\t\t\tmessage=msg)\n\n\n\tdef login(self):\n\t\tlogin_details = {'usr': 'Administrator', 'pwd': 'admin'}\n\t\turl = 'http://tailorpad.com/api/method/login'\n\t\theaders = {'content-type': 'application/x-www-form-urlencoded'}\n\t\tfrappe.errprint([url, 'data='+json.dumps(login_details)])\n\t\tresponse = requests.post(url, data='data='+json.dumps(login_details), headers=headers)\n\n\tdef get_ticket_details(self):\n\t\t# return frappe.get_doc('Support Ticket', self.name)\n\t\tresponse = requests.get(\"\"\"%(url)s/api/resource/Support Ticket/SUP-00001\"\"\"%{'url':get_url()})\n\t\t\n\t\t# frappe.errprint([\"\"\"%(url)s/api/resource/Support Ticket/%(name)s\"\"\"%{'url':get_url(), 'name':self.name}])\n\t\tfrappe.errprint(response.text)\n\t\treturn eval(response.text).get('data')\n\n\tdef call_del_keys(self, support_ticket):\n\t\tif support_ticket:\n\t\t\tif isinstance(support_ticket, dict):\n\t\t\t\tself.del_keys(support_ticket)\n\n\t\t\tif isinstance(support_ticket, list):\n\t\t\t\tfor comm in support_ticket:\n\t\t\t\t\tself.del_keys(comm)\n\n\tdef del_keys(self, support_ticket):\n\t\tfrappe.errprint(type(support_ticket))\n\t\tdel support_ticket['name']\n\t\tdel support_ticket['creation']\n\t\tdel support_ticket['modified']\n\t\tdel support_ticket['company']\n\n\tdef tenent_based_ticket_creation(self, support_ticket):\n\t\tfrappe.errprint(support_ticket)\n\t\turl = 'http://tailorpad.com/api/resource/Support Ticket'\n\t\t#url = 'http://192.168.5.12:7676/api/method/login'\n\t\theaders = {'content-type': 'application/x-www-form-urlencoded'}\n\t\tfrappe.errprint('data='+json.dumps(support_ticket))\n\t\tresponse = requests.post(url, data='data='+json.dumps(support_ticket), headers=headers)\n\n\t\tfrappe.errprint(response)\n\t\tfrappe.errprint(response.text)\n\n\tdef validate(self):\n\t\t\n\t\tself.update_status()\n\t\tself.set_lead_contact(self.raised_by)\n\n\t\tif self.status == \"Closed\":\n\t\t\tfrom frappe.widgets.form.assign_to import clear\n\t\t\tclear(self.doctype, self.name)\n\t\t#self.on_update1()\n\t\tself.send_email()\n\n\tdef set_lead_contact(self, email_id):\n\t\timport email.utils\n\t\temail_id = email.utils.parseaddr(email_id)\n\t\tif email_id:\n\t\t\tif not self.lead:\n\t\t\t\tself.lead = frappe.db.get_value(\"Lead\", {\"email_id\": email_id})\n\t\t\tif not self.contact:\n\t\t\t\tself.contact = frappe.db.get_value(\"Contact\", {\"email_id\": email_id})\n\n\t\t\tif not self.company:\n\t\t\t\tself.company = frappe.db.get_value(\"Lead\", self.lead, \"company\") or \\\n\t\t\t\t\tfrappe.db.get_default(\"company\")\n\n\tdef update_status(self):\n\t\tstatus = frappe.db.get_value(\"Support Ticket\", self.name, \"status\")\n\t\tif self.status!=\"Open\" and status ==\"Open\" and not self.first_responded_on:\n\t\t\tself.first_responded_on = now()\n\t\tif self.status==\"Closed\" and status !=\"Closed\":\n\t\t\tself.resolution_date = now()\n\t\tif self.status==\"Open\" and status !=\"Open\":\n\t\t\t# if no date, it should be set as None and not a blank string \"\", as per mysql strict config\n\t\t\tself.resolution_date = None\n\n@frappe.whitelist()\ndef set_status(name, status):\n\tst = frappe.get_doc(\"Support Ticket\", name)\n\tst.status = status\n\tst.save()\n\n@frappe.whitelist()\ndef get_admin(name):\n\tadmin = frappe.db.sql(\"select email_id_admin from tabUser  where name='administrator'\")\n\tfrappe.errprint(admin)\n\tfrappe.errprint(frappe.session.get('user'))\n\tif admin:\n\t\tfrappe.errprint(\"if\")\n\t\treturn admin[0][0]\n\telse:\n\t\tfrappe.errprint(\"else\")\n\t  \treturn frappe.session.get('user')\n\n\n@frappe.whitelist()\ndef assing_future(name, assign_in_future,raised_by,assign_to):\n  \tfrappe.errprint(\"in assign future\")\n  \tfrom frappe.utils import get_url, cstr\n\tif get_url()=='http://tailorpad.com':\n\t\tcheck_entry = frappe.db.sql(\"\"\"select assign_to from `tabAssing Master` where name = %s \"\"\", raised_by)\n\t\tfrappe.errprint(\"in assign\")\n\t\tif check_entry :\n\t\t\tfrappe.errprint(\"chk\")\n\t\t\tif assign_in_future=='No':\n\t\t\t\tfrappe.errprint(\"no\")\n\t\t\t\tfrappe.db.sql(\"\"\"delete from `tabAssing Master` where name = %s \"\"\", raised_by)\t\n\t\t\telse :\n\t\t\t\tfrappe.errprint(\"Yes\")\n\t\t\t\tfrappe.db.sql(\"\"\"update `tabAssing Master` set assign_to=%s where name = %s \"\"\",(assign_to,raised_by))\n\t\telse :\n\t\t\tfrappe.errprint(\"not chk\")\n\t\t\tif assign_in_future=='Yes':\n\t\t\t\tfrappe.errprint(\"Yes\")\n\t\t\t\tam = frappe.new_doc(\"Assing Master\")\n\t\t\t\tam.update({\n\t\t\t\t\"name\": raised_by,\n\t\t\t\t\"assign_to\": assign_to,\n\t\t\t\t\"raised_by\":raised_by\n\t\t\t})\n\t\t\tam.insert()\n\ndef auto_close_tickets():\n\tfrappe.db.sql(\"\"\"update `tabSupport Ticket` set status = 'Closed'\n\t\twhere status = 'Replied'\n\t\tand date_sub(curdate(),interval 15 Day) > modified\"\"\")\n\n\n@frappe.whitelist()\ndef reenable(name):\n\tfrappe.errprint(\"calling superadmin\")\n        from frappe.utils import get_url, cstr\n\tfrappe.errprint(get_url())\n\tif get_url()!='http://tailorpad.com':\n\t  frappe.errprint(\"in reenable\")\n  \t  from frappe.utils import get_url, cstr,add_months\n  \t  from frappe import msgprint, throw, _\n  \t  res = frappe.db.sql(\"select validity from `tabUser` where name='Administrator' and no_of_users >0\")\n\t  if  res:\n\t\tres1 = frappe.db.sql(\"select validity_end_date from `tabUser` where '\"+cstr(name)+\"' and validity_end_date <CURDATE()\")\n\t\tif res1:\n\t\t\tbc=\"update `tabUser` set validity_end_date=DATE_ADD((nowdate(), INTERVAL \"+cstr(res[0][0])+\" MONTH) where name = '\"+cstr(name)+\"'\"\n\t\t\tfrappe.db.sql(bc)\n\t  \t\tfrappe.db.sql(\"update `tabUser`set no_of_users=no_of_users-1  where name='Administrator'\")\n\t\telse:\n\t\t\tab=\"update `tabUser` set validity_end_date=DATE_ADD(validity_end_date,INTERVAL \"+cstr(res[0][0])+\" MONTH) where name = '\"+cstr(name)+\"' \"\n\t\t\tfrappe.errprint(ab)\n\t\t\tfrappe.db.sql(ab)\n\t  \t\tfrappe.db.sql(\"update `tabUser`set no_of_users=no_of_users-1  where name='Administrator'\")\n\t  else:\n\t\t    frappe.throw(_(\"Your subscription plan expired .Please purchase an subscription plan and enable user.\"))\n\n\n\n\t\t\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimizeLoop(arr): \n    for i in range(len(arr)): \n        min_idx = i\n        for j in range(i + 1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    \n    return arr\n\narr = [64, 34, 25, 12, 22, 11, 90]\nprint(optimizeLoop(arr)) # [11, 12, 22, 25, 34, 64, 90] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = 'https://www.example.com/'\nresp = requests.get(url)\nhtml = resp.content but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get(url).text\n\n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n\n# Get all the comments of the HTML document\ncomments = soup.find_all('div', attrs={'class': 'comments'})\n\n# Store the comments in a list\ncomment_list = []\nfor comment in comments:\n    comment_list.append(comment.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def hasLoop(self): \n    if self.head is None: \n        return False \n  \n    slow = fast = self.head \n    while(slow and fast and fast.next): \n        slow = slow.next\n        fast = fast.next.next\n        if slow == fast: \n            return True  \n          \n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def median(list): \n\tlist.sort() \n\tlength = len(list) \n\tif length % 2 == 0: \n\t\treturn sum(list[int(length / 2) - 1:int(length / 2) + 1]) / 2\n\telse: \n\t\treturn list[int(length / 2)] \n\nmedian_of_list = median([4, 9, 12, 8, 1]) \nprint(\"Median of the list is: \" + str(median_of_list)) \n# Output: 8 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: modified_list = [7, 15, 23, 31]\n\n# Python code\nsample_list = [3, 5, 7, 9]\n\nmodified_list = [x**2 - 2 for x in sample_list] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def double_list(lst):\n    new_list = []\n    for num in lst:\n        new_list.append(num * 2)\n    return new_list\n\nmy_list = [1, 2, 3, 4, 5]\n\ndouble_list(my_list) #[2, 4, 6, 8, 10] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: max_number = max([7, 4, 5, 100, 2])\nprint(max_number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(s): \n    s = s.lower() \n    return s == s[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort(list): \n\n    for i in range(len(list)): \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n                \n        list[i], list[min_idx] = list[min_idx], list[i] \n \nlist = [5, 2, 8, 1, 4] \nsort(list) \nprint(list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: loan_amount = 1000\ninterest_rate = 5\nnumber_of_years = 10\n\nsimple_interest = loan_amount * (interest_rate/100) * number_of_years\n\nprint(\"Simple interest = %.2f\" %simple_interest) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def to_dict(words):\n    result = {}\n    for word in words:\n        result[word] = 1\n    return result\n\nresult = to_dict([\"Hello\", \"World\", \"Welcome\"])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef randomness_score(string):\n    random.seed(string)\n    score = 0\n    for i in range(100):\n        score += random.random()\n    return score but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import unittest \n\nclass TestMyClassOrFunction(unittest.TestCase):\n\n    def test_something(self):\n        # Setup \n        # Code to set up a value to test \n        \n        # Exercise \n        # Code for the function to test \n        result = function_to_test(*args) \n        \n        # Verify\n        self.assertEqual(result, expected_result) \n\nif __name__ == \"__main__\":\n    unittest.main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCalculate the shortest path from source to destination using Dijkstra's Algorithm.\n\"\"\"\n\n# Python program for Dijkstra's single \n# source shortest path algorithm. The program is \n# for adjacency matrix representation of the graph \n  \n# Library for INT_MAX \nimport sys \n  \nclass Graph(): \n  \n    def __init__(self, vertices): \n        self.V = vertices \n        self.graph = graph\n  \n    # A utility function to find the vertex with \n    # minimum distance value, from the set of vertices \n    # not yet included in shortest path tree \n    def minDistance(self, dist, mstSet): \n  \n        # Initilaize minimum distance for next node \n        min = sys.maxint \n  \n        # Search not nearest vertex not in the \n        # shortest path tree \n        for v in range(self.V): \n            if dist[v] < min and mstSet[v] == False: \n                min = dist[v] \n                min_index = v \n  \n        return min_index \n  \n    # Funtion that implements Dijkstra's single source \n    # shortest path algorithm for a graph represented  \n    # using adjacency matrix representation \n    def dijkstra(self, source): \n  \n        dist = [sys.maxint] * self.V \n        dist[source] = 0\n        mstSet = [False] * self.V \n  \n        for cout in range(self.V): \n  \n            # Pick the minimum distance vertex from  \n            # the set of vertices not yet processed.  \n            # u is always equal to src in first iteration \n            u = self.minDistance(dist, mstSet) \n  \n            # Put the minimum distance vertex in the  \n            # shotest path tree \n            mstSet[u] = True\n  \n            # Update dist value of the adjacent vertices  \n            # of the picked vertex only if the current  \n            # distance is greater than new distance and \n            # the vertex in not in the shotest path tree \n            for v in range(self.V): \n                if self.graph[u][v] > 0 and mstSet[v] == False and dist[v] > dist[u] + self.graph[u][v]: \n                        dist[v] = dist[u] + self.graph[u][v] \n  \n        # print the constructed distance array \n        print (\"Shortest path from %s to %s is %d\" % (source, dest, dist[dest]))\n  \n# Driver program \ngraph = { \n    'a': {'b':10, 'c':3}, \n    'b': {'c':1, 'd':2}, \n    'c': {'b':4, 'd':8, 'e':2}, \n    'd': {'e':7}, \n    'e': {'d':9} \n    }\n\ng = Graph(len(graph))\nsource = \"a\"\ndest = \"d\"\ng.dijkstra(graph.index(source)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \n \ndef solve_linear_eqns(coefficients, constants): \n    # the matrix of coefficients \n    matrix = np.array(coefficients) \n    # the vector of constants \n    vector = np.array(constants)  \n    # solve the system of linear equations \n    solution = np.linalg.solve(matrix, vector) \n    return solution but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Hotel:\n\n    def __init__(self, name, stars, rooms):\n        self.name = name\n        self.stars = stars\n        self.rooms = rooms\n\n    def num_rooms(self):\n        return self.rooms\n\n    def rating(self):\n        return self.stars but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def normalize_list(lst):\n    '''Normalizes a list of numbers'''\n    max_val = max(lst)\n    min_val = min(lst)\n\n    normalized_lst = []\n    for num in lst:\n        normalized_val = (num - min_val)/(max_val - min_val)\n        normalized_lst.append(normalized_val)\n\n    return normalized_lst but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent_words(text):\n    # Split the text into words\n    words = text.split() \n    # Create an empty dictionary\n    word_counter = {}\n    \n    # Iterate through each word in the list of words\n    for word in words:\n        # If the word is already in the dictionary\n        if word in word_counter:\n            # Add 1 to the count of the word\n            word_counter[word] += 1 \n        else:\n            # Else, set the count of the word to 1\n            word_counter[word] = 1\n            \n    # Sort the dictionary by value\n    word_sorted = sorted(word_counter.items(), \n                         key=lambda count: count[1], \n                         reverse=True)\n    \n    # Return the words with highest frequency\n    return [word_sorted[0][0], word_sorted[1][0], \n            word_sorted[2][0]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_longest_common_substring(text1,text2): \n  answer = \"\" \n  len1, len2 = len(text1), len(text2) \n  for i in range(len1): \n    match = \"\" \n    for j in range(len2): \n      if (i + j < len1 and \n          text1[i + j] == text2[j]): \n        match += text2[j] \n      else: \n        if (len(match) > len(answer)): \n          answer = match\n        match = \"\" \n  return answer\n\ntext1 = 'abcdefghi'\ntext2 = 'acelgghi'\n\nprint(find_longest_common_substring(text1, text2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max_min(list_vals): \n    max_val = max(list_vals) \n    min_val = min(list_vals) \n  \n    return max_val, min_val \n\nlist_vals = [5, 3, 4, 10, 7] \nprint(\"Maximum value :\", find_max_min(list_vals)[0]) \nprint(\"Minimum value :\", find_max_min(list_vals)[1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nimport pandas as pd\nimport numpy as np\n\n# Input text\ntext = \"This is a sample text for Keyword extraction.\"\n\n# Tokenize words\nwords = nltk.word_tokenize(text)\n\n# Initialize corpus\ncorpus = []\n\n# Convert tokens to lowercase\nfor word in words:\n     corpus.append([word.lower()])\n\n# Get unigrams\nwordsFreq = pd.DataFrame(corpus, columns=['Word'])\n\n# Calculate document frequency\ndf = wordsFreq.groupby('Word').size().reset_index(name='Doc Frequency')\n\n# Calculate term frequency\ntf = wordsFreq['Word'].value_counts().reset_index(name='Term Frequency')\n\n# Merge both frequencies for computing TF - IDF\ntfidf = pd.merge(df, tf, on='Word', how='inner')\n\n# Calculate Inverse Document Frequency\ntfidf['Inverse Document Frequency'] = np.log(len(text)/(tfidf['Doc Frequency'] + 1))\n\n# Calculate TF - IDF\ntfidf['TF - IDF'] = tfidf['Term Frequency'] * tfidf['Inverse Document Frequency']\n\n# Sort words by TF - IDF in descending order\ntfidf.sort_values('TF - IDF', ascending=False, inplace=True)\n\n# Print the most important words\nprint(tfidf[:5]['Word'])\n# Output:\n# 0      sample\n# 1   keyword\n# 2    extract\n# 3        for\n# 4        this but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n \nnum = random.randint(1,10)\nguess = 0\nattempts = 0\n \nwhile guess != num and attempts < 3:\n    guess = int(input(\"Guess a number between 1 and 10: \"))\n    attempts += 1\n    if guess == num:\n        print(\"You guessed correctly in\", attempts, \"attempts\")\n    elif guess > num:\n        print(\"Too High\")\n    else:\n        print(\"Too Low\")\nif guess != num:    \n    print(\"You failed to guess the number\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: command = input(\"Please enter your command: \")\n \nif command == \"Taking a break\":\n print(\"Taking a five minute break\")\n # code to execute the taking a break command\nelse:\n print(\"Invalid command\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\narray_length = 10\n\nmy_array = [random.randint(0, 10) for _ in range(array_length)]\n\nprint(my_array) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pascal_triangle(n): \n  \n    # Array to store generated pascal triangle values \n    pascal = [] \n  \n    for i in range(n): \n        pascal.append([]) \n        pascal[i].append(1) \n          \n        for j in range(1, i+1): \n            # Generate next row values from previous row values \n            x = pascal[i-1][j-1] + pascal[i-1][j] if j!=0 else 1\n            pascal[i].append(x) \n  \n    # Print last row of Pascal's Triangle \n    for i in range(n): \n        print(pascal[n-1][i], end = \" \") \n  \nn = 5\npascal_triangle(n) \n\n# Output: 1 5 10 10 5 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_numbers_in_list(l):\n    total = 0\n    for i in range(0, len(l), 2):\n        total += (l[i] + l[i+1]) if (i+1 < len(l)) else l[i]\n    return total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findMaxElement(arr):\n  max_element = 0\n  for element in arr:\n    if element > max_element:\n      max_element = element\n  \n  return max_element\n\narr = [1, 5, -3, 10]\nmax_element = findMaxElement(arr)\nprint(max_element) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import flask\n\napp = flask.Flask(__name__)\n\n@app.route('/celsius-to-fahrenheit/<int:celsius>', methods=['GET'])\ndef celsius_to_fahrenheit(celsius):\n fahrenheit = celsius * 9/5 + 32\n return flask.jsonify({'celsius': celsius, 'fahrenheit': fahrenheit})\n \nif __name__ == '__main__':\n app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_subarrays(arr):\n     subarrays = []\n     for i in range(len(arr)):\n         subarrays.append(arr[i:])\n         for j in range(i+1, len(arr)):\n             subarrays.append(arr[i:j+1])\n     return subarrays but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\nclass BouncingBall():\n    def __init__(self):\n        self.x = 0.0   # horizontal position \n        self.y = 5.0   # vertical position \n        self.vy = 0.2  # vertical velocity \n        self.g = 9.81  # gravitational acceleration \n\n    def update(self, dt):\n        self.y -= self.vy * dt\n        self.vy -= self.g * dt\n\n        if self.y <= 0:\n            self.y = 0\n            self.vy *= -0.9 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def faster_sum(arr):\n total = 0\n # looping over the array and adding the elements\n # to the variable total\n for i in range(0, len(arr)):\n total += arr[i]\n return total\n\nlist_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# using the faster_sum() function\nresult = faster_sum(list_of_numbers)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string \nimport random \n\ndef generate_password():\n  chars = string.ascii_uppercase + string.ascii_lowercase + string.digits \n  size = 8\n  return ''.join(random.choice(chars) for x in range(size,15)) \n    \npassword = generate_password()\n\nprint(\"The generated random 8-character alphanumeric password is: \" + password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import the necessary libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.model_selection import train_test_split\n\n# Read the dataset\ndata = pd.read_csv('dataset.csv')\n\n# Split the dataset into train and test datasets\nx_train, x_test, y_train, y_test = train_test_split(data.iloc[:,:-1], data.iloc[:,-1], test_size=0.2)\n\n# Create the isolation forest model\nmodel = IsolationForest()\nmodel = model.fit(x_train, y_train)\n\n# Make predictions\ny_pred = model.predict(x_test)\n\n# Evaluate the model performance\nfrom sklearn.metrics import accuracy_score\nprint('Accuracy:', accuracy_score(y_test, y_pred)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\n\n\ndef main():\n    if len(sys.argv) < 3:\n        print('Error: not enough arguments')\n        return\n\n    try:\n        num1 = int(sys.argv[1])\n        num2 = int(sys.argv[2])\n    except ValueError:\n        print('Error: arguments should be numbers')\n        return\n\n    print(num1 + num2)\n\nif __name__ == '__main__':\n    main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef  generate_password():\n    chars = string.ascii_letters + string.digits\n    size = 8\n    return ''.join(random.choice(chars) for x in range(size))\n\nprint(generate_password()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import required libraries\nimport numpy as np\nfrom sklearn import preprocessing\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# define the training data and labels\ndata = np.array([1, 2, 3, 4, 5]).reshape(-1, 1)\nlabels = np.array([0, 0, 1, 1, 1])\n\n# preprocess the data\nscaled_data = preprocessing.scale(data)\n\n# define and train the model\nmodel = KNeighborsClassifier(n_neighbors=3).fit(scaled_data, labels) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sumOfOdds(inputList):\n result = []\n for num in inputList: \n  if (num % 2 == 0): \n   for i in range(1, num): \n    if (i % 2 != 0): \n     if (num == i + (num - i)):\n      result.append([i, num - i])\n \n return result\n \n# Driver code\ninputList = [4, 6, 10, 8]\n \nprint(sumOfOdds(inputList)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import packages\nimport numpy as np\nimport pandas as pd \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score\n\n# Load the data from the 'spam' emails dataset\nemails_data = pd.read_csv(\"emails.csv\")\n\n# Split the data into features and labels\nX = emails_data.drop(\"label\", axis=1)\ny = emails_data[\"label\"]\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=0\n)\n\n# Create the Multinomial Naive Bayes model\nmnb = MultinomialNB()\n\n# Train the model\nmnb.fit(X_train, y_train)\n\n# Make predictions\npredictions = mnb.predict(X_test)\n\n# Evaluate the accuracy of the model\nprint(\"Accuracy:\", accuracy_score(y_test, predictions)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\nsorted_tuples = sort_tuples(tuples)\nprint(sorted_tuples) # Outputs [('c', 2), ('b', 3), ('a', 4)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef fitness(solution):\n # calculate the fitness for each solution\n return solution\n\n\ndef generate_population(population_size, solution_length):\n # generate the initial populatoin of random solutions\n return population\n\n\ndef selection(population):\n # select the best solutions from the population\n return selection\n\n\ndef crossover(parent1, parent2):\n # generate a crossover between parents\n return crossover\n\n\ndef mutation(solution):\n # randomly mutate individual solutions\n return solution\n\n\ndef genetic_algorithm(population_size, solution_length):\n # generate initial population\n population = generate_population(population_size, solution_length)\n \n # get best solution in initial population\n best_solution = max(population, key=fitness)\n \n # run loop until termination criteria is met\n while termination_criteria_not_met:\n\n  # select best solutions\n  selection = selection(population)\n\n  # create a new population \n  new_population = []\n  while len(new_population) < population_size:\n\n   # select parents \n   parent1 = random.choice(selection)\n   parent2 = random.choice(selection)\n\n   # create a crossover \n   child = crossover(parent1, parent2)\n\n   # mutate the child\n   child = mutation(child)\n\n   # add to new population\n   new_population.append(child)\n\n  # set population to the new population\n  population = new_population\n\n  # get the best solution in the current population\n  best_solution = max(population, key=fitness)\n\n # return the best solution found\n return best_solution\n\npopulation_size = 10\nsolution_length = 10 \nsolutions = [1, 3, 8, 10, 15, 25, 30, 34, 43, 48]\nbest_solution = genetic_algorithm(population_size, solution_length)\n\nprint(f'The optimum solution is {best_solution}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def greedy(jobs):\n    jobs.sort(key=lambda x: x[1]/x[0], reverse=True)\n    result = []\n    time = 0\n    for j in jobs:\n        time += j[0]\n        result.append((j[0], j[1], time))\n        \n    return result\n\njobs = [(3, 10), (4, 15), (2, 5)]\nprint(greedy(jobs)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum(arr, n):\n    s = 0\n    for i in range(n):\n        s += arr[i]\n    return s but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sumOdds(nums):\n total = 0\n for num in nums:\n if num % 2 != 0:\n total += num\n return total\n\nnums = [1,2,3,4,5]\nsum_odds = sumOdds(nums)\nprint(sum_odds) #output: 9 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_primes(start, end):\n for n in range(start, end + 1):\n if is_prime(n):\n print(n)\n \ndef is_prime(n):\n if n <= 1:\n return False\n elif n <= 3:\n return True\n elif (n % 2 == 0) or (n % 3 == 0):\n return False\n \n i = 5\n while i ** 2 <= n:\n if (n % i == 0) or (n % (i + 2) == 0):\n return False\n i += 6\n \n return True\n\nprint_primes(10, 25) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def create_multiplication_table(n):\n for i in range(1,11):\n print(f'{n} * {i} = {n * i}')\n\ncreate_multiplication_table(9)\n\n# Outputs:\n# 9 * 1 = 9\n# 9 * 2 = 18\n# 9 * 3 = 27\n# 9 * 4 = 36\n# 9 * 5 = 45\n# 9 * 6 = 54\n# 9 * 7 = 63\n# 9 * 8 = 72 \n# 9 * 9 = 81 \n# 9 * 10 = 90 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(num):\n   fib_list = [0, 1]\n   if num == 1:\n      return fib_list[:1]\n   elif num == 2:\n      return fib_list\n   else:\n      for i in range(2, num):\n         fib_list.append(fib_list[i-1] + fib_list[i-2])\n      return fib_list\n \nprint(fibonacci(7)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: name = \"John\"\nage = 15\nmarks = 90\n\nprint(\"Name: \", name)\nprint(\"Age: \", age)\nprint(\"Marks: \", marks) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef random_string(string_length=4):\n letters = string.ascii_lowercase\n return ''.join(random.choice(letters) for i in range(string_length))\n\nrandom_string() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The time complexity of this code snippet is O(n\u00b2). The outer loop runs \"n\" times and the inner loop also runs \"n\" times resulting in a complexity of O(n\u00b2). but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to calculate mean of two classes\ndef calculate_means(dataset):\n    class_0_total = 0\n    class_1_total = 0\n    for data_point in dataset:\n        if data_point[2] == 0:\n            class_0_total += 1\n        else:\n            class_1_total += 1\n    class_0_mean = class_0_total / len(dataset)\n    class_1_mean = class_1_total / len(dataset)\n    return [class_0_mean, class_1_mean]\n\n# Function to classify a new point\ndef classify(data_point, means):\n    if data_point[2] <= means[0]:\n        print(\"Class 0\")\n    else:\n        print(\"Class 1\")\n\n# Main \ndata = [['men', 'sports', 1], ['women', 'foods', 0], ['men', 'foods', 1], ['women', 'sports', 0]]\nmeans = calculate_means(data)\nnew_data = ['men', 'sports', 0.5]\nclassify(new_data, means) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printOddNumbers(n):\n    \"Prints the odd numbers in the range [0, n).\"\n    for i in range(n):\n        if i % 2 != 0:\n            print(i)\n\n#Example\nprintOddNumbers(10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Point2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def distance(self, other):\n        return ((self.x - other.x)**2 + (self.y - other.y)**2)**0.5\n\n# usage example        \np1 = Point2D(1, 1)\np2 = Point2D(5, 5)\nprint(p1.distance(p2)) # 4.242640687119285 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def area(self):\n        return self.length * self.width but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_in_tree(node):\n    if node is None:\n        return -float('inf')\n    left_max = max_in_tree(node.left)\n    right_max = max_in_tree(node.right)\n    return max(node.value, left_max, right_max) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\nimport time\nimport logging\nimport asyncio\nimport aiohttp\nimport hailtop.aiogoogle as aiogoogle\n\nlog = logging.getLogger(__name__)\n\n\nclass AsyncIOExecutor:\n    def __init__(self, parallelism):\n        self._semaphore = asyncio.Semaphore(parallelism)\n\n    async def _run(self, fut, aw):\n        async with self._semaphore:\n            try:\n                fut.set_result(await aw)\n            except asyncio.CancelledError:  # pylint: disable=try-except-raise\n                raise\n            except Exception as e:  # pylint: disable=broad-except\n                fut.set_exception(e)\n\n    def submit(self, aw):\n        fut = asyncio.Future()\n        asyncio.ensure_future(self._run(fut, aw))\n        return fut\n\n    async def gather(self, aws):\n        futs = [self.submit(aw) for aw in aws]\n        return [await fut for fut in futs]\n\n\nclass CleanupImages:\n    def __init__(self, client):\n        self._executor = AsyncIOExecutor(8)\n        self._client = client\n\n    async def cleanup_digest(self, image, digest, tags):\n        log.info(f'cleaning up digest {image}@{digest}')\n\n        await self._executor.gather([\n            self._client.delete(f'/{image}/manifests/{tag}')\n            for tag in tags])\n\n        await self._executor.submit(self._client.delete(f'/{image}/manifests/{digest}'))\n\n        log.info(f'cleaned up digest  {image}@{digest}')\n\n    async def cleanup_image(self, image):\n        log.info(f'cleaning up image {image}')\n\n        log.info(f'listing tags for {image}')\n\n        result = await self._executor.submit(self._client.get(f'/{image}/tags/list'))\n        manifests = result['manifest']\n        manifests = [(digest, int(data['timeUploadedMs']) / 1000, data['tag']) for digest, data in manifests.items()]\n\n        log.info(f'got {len(manifests)} manifests for {image}')\n\n        # sort is ascending, oldest first\n        manifests = sorted(manifests, key=lambda x: x[1])\n\n        # keep the most recent 10\n        manifests = manifests[:-10]\n\n        now = time.time()\n        await asyncio.gather(*[\n            self.cleanup_digest(image, digest, tags)\n            for digest, time_uploaded, tags in manifests\n            if (now - time_uploaded) >= (7 * 24 * 60 * 60) or len(tags) == 0])\n\n        log.info(f'cleaned up image  {image}')\n\n    async def run(self):\n        images = await self._executor.submit(self._client.get('/tags/list'))\n        await asyncio.gather(*[\n            self.cleanup_image(image)\n            for image in images['child']\n        ])\n\n\nasync def main():\n    logging.basicConfig(level=logging.INFO)\n\n    if len(sys.argv) != 2:\n        raise ValueError('usage: cleanup_gcr <project>')\n    project = sys.argv[1]\n\n    async with aiogoogle.ContainerClient(\n            project=project,\n            timeout=aiohttp.ClientTimeout(total=60)) as client:\n        cleanup_images = CleanupImages(client)\n        await cleanup_images.run()\n\n\nasyncio.run(main())\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack(object):\n\n    def __init__(self):\n        self.items = []\n\n    def isEmpty(self):\n        return self.items == []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n\n    def peek(self):\n        return self.items[len(self.items)-1]\n\n    def size(self):\n        return len(self.items) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\nimport bs4 as BeautifulSoup\n\nfrom .Node import Node\n\n\nclass Attr(Node):\n    _value = \"\"\n\n    def __init__(self, doc, parent, attr):\n        self.doc    = doc\n        self.parent = parent\n        self.attr   = attr\n        self.tag    = BeautifulSoup.Tag(parser = self.doc, name = 'attr')\n        Node.__init__(self, doc)\n\n        self._specified = False\n        self._value     = self.getValue()\n\n    def __repr__(self):\n        return \"<Attr object %s%s at 0x%08X>\" % (\"%s.\" % self.parent.tagName if self.parent else \"\", self.attr, id(self))\n\n    def __eq__(self, other):\n        return hasattr(other, \"parent\") and self.parent == other.parent and \\\n               hasattr(other, \"attr\") and self.attr == other.attr\n\n    @property\n    def nodeType(self):\n        return Node.ATTRIBUTE_NODE\n\n    @property\n    def nodeName(self):\n        return self.attr\n\n    def getNodeValue(self):\n        return self.getValue()\n\n    def setNodeValue(self, value):\n        return self.setValue(value)\n\n    nodeValue = property(getNodeValue, setNodeValue)\n\n    @property\n    def childNodes(self):\n        from .NodeList import NodeList\n\n        return NodeList(self.parent.doc, [])\n\n    @property\n    def parentNode(self):\n        return self.parent\n\n    # Introduced in DOM Level 2\n    @property\n    def ownerElement(self):\n        if self.parent:\n            if self.parent.nodeType == Node.ELEMENT_NODE:\n                return self.parent\n\n        return None\n\n    @property\n    def ownerDocument(self):\n        return self.parent.doc\n\n    @property\n    def name(self):\n        return self.attr\n\n    @property\n    def specified(self):\n        if self.ownerElement is None:\n            return True\n\n        return self._specified\n\n    def getValue(self):\n        if self.parent:\n            if self.parent.tag.has_attr(self.attr):\n                self._specified = True\n                return self.parent.tag[self.attr]\n\n        return self._value\n\n    def setValue(self, value):\n        self._value = value\n\n        if self.parent:\n            self._specified = True\n            self.parent.tag[self.attr] = value\n\n    value = property(getValue, setValue)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # This program creates the string \"999,888,777,666,555\".\n\n# create a list of numbers\nlist = [999, 888, 777, 666, 555]\n\n# join the values in the list\noutput = \",\".join([str(item) for item in list])\n\n# print the output \nprint(output) # Outputs: 999,888,777,666,555 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack:\n \n def __init__(self):\n  self.items = []\n \n def push(self, item):\n  self.items.append(item)\n \n def pop(self):\n  return self.items.pop()\n \n def peek(self):\n  return self.items[len(self.items)-1]\n \n def size(self):\n  return len(self.items)\n \n def empty(self):\n  return self.size() == 0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\n\ndef detect_language(text):\n tokens = nltk.word_tokenize(text)\n tagged = nltk.pos_tag(tokens)\n \n language_probabilities = {}\n \n for i in range(0, len(tagged)):\n if tagged[i][1] in language_probabilities:\n language_probabilities[tagged[i][1]] += 1\n else:\n language_probabilities[tagged[i][1]] = 1\n \n # Find most probable language\n language = max(language_probabilities, key=lambda key: language_probabilities[key])\n \n return language\n\ntext = 'This is a sentence in English'\n\nlanguage = detect_language(text)\n\nprint(language) # Outputs 'English' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sumDigits(num): \n  \n    # convert number into string \n    # and convert each digit into number \n    # using ord() and store it in list \n    # convert number into string \n    # and convert each digit into number \n    # using ord() and store it in list \n    strNum = str(num) \n    digits = [int(x) for x in strNum] \n  \n    # return sum using sum() function \n    return sum(digits) \n  \n# Driver program \nnum = 12345\nprint(\"Sum of digits in num is:\", \n        sumDigits(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n \nprint(factorial(5)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findMinCoins(coins, amount):\n    dp = [0] * (amount + 1)\n    dp[0] = 0\n  \n    for i in range(1, amount + 1):\n        dp[i] = float('inf') \n        for j in range(len(coins)):\n            if (coins[j] <= i):\n                res = dp[i - coins[j]]\n                if (res != float('inf') and res + 1 < dp[i]):\n                    dp[i] = res + 1\n    return dp[amount]\n\nprint(findMinCoins([1, 4, 6], 9)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nstrings = [\"random\",\"password\",\"security\",\"codes\",\"aaa\",\"bbb\",\"ccc\", \"ddd\"]\npassword = \"\"\n\nfor i in range(len(strings)):\n randomIndex = random.randint(0,len(strings) -1)\n password += strings[randomIndex]\n\nprint(\"Generated Password:\", password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # define the data source\ndata_source = SomeDataSource()\n\n# define the transformer\ntransformer = SomeTransformer()\n\n# define the model\nmodel = SomeModel()\n\n# define the data pipeline\ndef data_pipeline(data):\n # pre-process data\n data = transformer.transform(data)\n \n # pass data to model\n model.fit(data)\n \n # return predictions\n predictions = model.predict(data)\n \n return predictions\n\n# execute the data pipeline\npredictions = data_pipeline(data_source.get_data()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_password(length, complexity):\n    # minimum 8 characters\n    if length < 8:\n        length = 8\n    # maximum complexity 5\n    if complexity > 5:\n        complexity = 5\n\n    char = string.ascii_letters + string.digits + string.punctuation\n    pwd = []\n    while len(pwd) < length:\n        char_rand = random.choice(char)\n        if char_rand not in pwd:\n            pwd.append(char_rand)\n\n    random.shuffle(pwd)\n    return ''.join(pwd[:length])\n\nprint(generate_password(20,5)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: function fun() {\n  let a = 1;\n  let b = 2;\n  let c = a + b;\n  return c;\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef classify_sentiment(text):\n    sid = SentimentIntensityAnalyzer()\n    score = sid.polarity_scores(text)\n    if score['compound'] >= 0.05:\n        return 'positive'\n    elif score['compound'] <= - 0.05:\n        return 'negative'\n    else:\n        return 'neutral'\n\nsentiment = classify_sentiment(\"The government has done a tremendous job in handling the pandemic situation.\")\nprint(sentiment)\n# Output: positive but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os\nif not os.path.exists('myDir'):\n    os.mkdir('myDir') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a search engine using Python\n\"\"\"\n\nimport re\n\ndef search(query):\n    with open('data.txt', 'r') as f:\n        data = f.read()\n    results = []\n    for word in re.findall(r'\\w+', query):\n        matches = re.findall(rf'\\b{word}\\b', data)\n        for match in matches:\n            if match not in results:\n                results.append(match)\n    return results\n\nif __name__ == '__main__':\n    query = input('Enter a query: ')\n    print(search(query)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n \nurl = 'https://www.example.com/data'\n \n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get(url).text\n \n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n \n# Storing data in list \ndata = []\nfor tr_list in soup.find_all('tr'):\n    # store data in list \n    data.append([td_list.text.strip() for td_list in tr_list.find_all('td')])\n    \n# printing fetched data\nfor tr_list in data:\n    print(tr_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_lengths(strings):\n    lengths = []\n    for string in strings:\n        lengths.append( (len(string), string) ) \n    return lengths but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        \n    # method to get x-position\n    def get_x(self):\n        return self.x\n    \n    # method to get y-position\n    def get_y(self):\n        return self.y\n            \n    # method to move point\n    def move_point(self, dx, dy):\n        self.x += dx\n        self.y += dy but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.tokenize import sent_tokenize\n\ntext = 'This is a sample text document. It contains some words about some things'\n\nword_frequencies = {}\nfor word in nltk.word_tokenize(text):\n if word not in word_frequencies.keys():\n word_frequencies[word] = 1\n else:\n word_frequencies[word] += 1\n\nsentences = sent_tokenize(text)\nsentence_scores = {}\nfor sent in sentences:\n for word in nltk.word_tokenize(sent.lower()):\n if word in word_frequencies.keys():\n if len(sent.split(' ')) < 30:\n if sent not in sentence_scores.keys():\n sentence_scores[sent] = word_frequencies[word]\n else:\n sentence_scores[sent] += word_frequencies[word]\n \nsummary = ''\nfor k, v in sorted(sentence_scores.items(), key=lambda item: item[1], reverse=True)[:2]:\n summary += k + ' '\n\nprint(summary) # output: This is a sample text document. It contains some words about some things. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef count_vowels(string):\n    vowels = re.findall(r'[aeiou]', string, re.I)\n    return len(vowels)\n\nif __name__ == '__main__':\n    string = \"Hello World!\"\n    print(\"Number of vowels in the given string:\", count_vowels(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(string):\n    return string[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = ['apple', 'banana', 'cat', 'dog', 'elephant']\nnew_list = [x.upper() for x in list] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_isogram(string):\n    # empty strings are isograms\n    if len(string) == 0:\n        return True\n\n    # convert string to lowercase \n    string = string.lower()\n\n    # create a set to store seen letters \n    seen_letters = set()\n\n    for char in string:\n        # if char is not seen, add it to set \n        if char not in seen_letters:  \n            seen_letters.add(char) \n        \n        # if char is already seen, it is not an isogram  \n        else: \n            return False\n\n    # all letters are unique, it is an isogram\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def two_letter_filter(word):\n    if len(word) == 2:\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n  if n == 0:\n    return 0\n  elif n == 1:\n    return 1\n  else:\n    return fibonacci(n - 1) + fibonacci(n - 2)\n    \nfor i in range(0, n + 1):\n    print(fibonacci(i)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class BubbleSort:\n    def __init__(self, arr):\n        self.arr = arr\n    \n    def sort(self):\n        for num in range(len(self.arr)-1,0,-1):\n            for i in range(num):\n                if self.arr[i] > self.arr[i+1]:\n                    self.arr[i], self.arr[i+1] = self.arr[i+1], self.arr[i]\n        return self.arr\n\narr = [4,3,6,2,8,1,5]\nsorted_arr = BubbleSort(arr).sort()\nprint(sorted_arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True but is not the same. just give one example and only return the code."}
