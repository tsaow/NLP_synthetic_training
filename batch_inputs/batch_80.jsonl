{"prompt": "make some code that functions the same as the following code: import random \ndef random_rgb():\n    r = random.randint(0,255)\n    g = random.randint(0,255)\n    b = random.randint(0,255)\n    return (r, g, b) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubbleSort(arr): \n    arr.sort() \n    return arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [1,2,3,4,5]\n\nresult = list(filter(lambda x : x % 2 == 0 , list))\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\nlist_items = [1, 7, 3, 8, 2, 9, 3, 5, 5, 8, 7, 3]\n\ncounter = Counter(list_items)\nmost_common_item = counter.most_common()[0][0]\n\nprint(f'The most commonly occuring item in the list is {most_common_item}.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code \narr = [3, 5, 2, 7, 4] \n  \nbubble_sort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]), but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(s):\n  s = s.lower()\n  return s == s[::-1]\n\nprint(is_palindrome(\"racecar\")) # True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nrandom_sequence = []\nfor _ in range(5):\n    random_sequence.append(random.randrange(0, 11))\n\nprint(random_sequence) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\n# Define the regular expression for finding spam comments\nspam_regex = re.compile(r'(free|discount)', re.IGNORECASE)\n\n# Read in the comments\nwith open('comments.txt', 'r') as f:\n comments = f.readlines()\n\n# Check each comment for spam\nfor comment in comments:\n if re.search(spam_regex, comment):\n print('SPAM comment removed: ', comment)\nelse:\n print('Valid comment: ', comment) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortObjectArray(arr, key): \n  \n    # Sort the object array using selection \n    # sort strategy \n    for i in range(len(arr)): \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx][key] > arr[j][key] : \n                min_idx = j         \n        # Swap the object \n        arr[i], arr[min_idx] = arr[min_idx], arr[i] \n    return arr\n  \nInput = [{name: \"John\", age: 26}, \n         {name: \"Alice\", age: 30},\n         {name: \"Bob\", age: 22}]\n \nkey = 'age'\n \nOutput = \n[{\"name\": \"Bob\", \"age\": 22}, \n {\"name\": \"John\", \"age\": 26}, \n {\"name\": \"Alice\", \"age\": 30}] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://www.wsj.com/market-data/stocks\"\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, \"lxml\")\n\nstock_data = {}\ntables = soup.find_all('table', {'class': 'data-tables'})\n\n# loop through tables on the page\nfor table in tables:\n # get column headings\n col_heads = table.find('thead')\n col_names = [th.text for th in col_heads.find_all('th')]\n # get stock data\n table_body = table.find('tbody')\n rows = table_body.find_all('tr')\n data = []\n for row in rows:\n  cols = row.find_all('td')\n  cols = [ele.text.strip() for ele in cols]\n  data.append([ele for ele in cols if ele])\n\nstock_data[name] = data    \n\nprint(stock_data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n  a = 0\n  b = 1\n\n  fib = [a]\n\n  for i in range(1, n):\n    c = a + b\n    a = b\n    b = c\n    fib.append(a)\n\n  return fib[:5]  # Return the first 5 numbers in the sequence\n\nprint(fibonacci(15)) # [0,1,1,2,3] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndef process_json(data):\n    result = {}\n    for key, value in data.items():\n        if type(value) == dict:\n            result[key] = process_json(value)\n        else:\n            result[key] = value\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create an instance of the Chatbot class\nclass Chatbot:\n    def __init__(self, name):\n        self.name = name\n        self.conversations = []\n \n    # Input a message and get a response from the bot\n    def get_response(self, message):\n        response = \"I don't understand what you're saying.\"\n        if message in self.conversations:\n            response = self.conversations[message]\n        return response\n \n# Create the bot\nname = input(\"What should I call you? \")\nchatbot = Chatbot(name)\nprint(\"Nice to meet you, \" + name + \"!\")\n \nloop = True\nwhile loop:\n    message = input(\"You: \")\n    response = chatbot.get_response(message)\n    print(name + \": \" + response)\n    if message == \"bye\":\n        loop = False\n        print(\"Goodbye!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_longest_increasing_subarray(arr): \n    n = len(arr) \n  \n    # Initialize overall max \n    max_len = 1\n  \n    # Initialize starting point of current subarray \n    start_index = 0\n  \n    # Initialize ending point of current subarray \n    end_index = 0\n  \n    # Initialize current max \n    curr_max = 1\n  \n    # Traverse array elements \n    for i in range(1, n): \n  \n        # If element is greater than previous one \n        if arr[i] > arr[i - 1]: \n            curr_max += 1\n              \n        # Else Reset current max and \n        # starting point of current subarray \n        else: \n            if curr_max > max_len: \n                max_len = curr_max \n                start_index = i - curr_max \n                end_index = i - 1\n            curr_max = 1\n          \n    # Compare the last maximum length with \n    # overall maximum length \n    if curr_max > max_len: \n        max_len = curr_max \n        start_index = n - curr_max \n        end_index = n - 1\n          \n    # Print starting and ending index of longest \n    # increasing contiguous subarray \n    print(\"Longest increasing contiguous \" + \n          \"subarray is [\",  \n          arr[start_index], \"..\", arr[end_index], \n          \"] of length\", max_len)\n          \n# Driver code\narr = [2, 6, 4, 8, 10]\nfind_longest_increasing_subarray(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Python's Decorator pattern is a design pattern which is used to add extra functionality in an existing object without having to alter its structure. It provides a flexible alternative to subclassing for extending functionality. A decorator is a callable object that takes another function as argument (the decorated function). The decorator may perform some processing with the decorated function, and then return it or replace it with another function or callable object. Decorators are usually used as a way to modify functions that you want to keep their original functionality, but add in some extra behavior at the same time. Decorators can also be used to add functionality to classes or to add data to an instance of a class. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Class to store a node of huffman tree \nclass Node(): \n\n\tdef __init__(self, char, f, left, right): \n\t\tself.char = char \n\t\tself.f = f \n\t\tself.left = left \n\t\tself.right = right \n\n# Function to encode text using huffman tree \ndef HuffmanEncode(text): \n\t# Create a frequency map of characters \n\tfreq = dict() \n\tfor char in text: \n\t\tif char in freq: \n\t\t\tfreq[char] += 1\n\t\telse: \n\t\t\tfreq[char] = 1\n\n\t# Create a Huffman tree \n\tnodes = [] \n\tfor char, f in freq.items(): \n\t\tnodes.append(Node(char, f, None, None)) \n\t\t\n\t# Iteratively construct the Huffman tree \n\twhile len(nodes) > 1: \n\t\t# Sort nodes by frequency \n\t\tnodes.sort(key = lambda x: x.f) \n\t\t# Merge first two nodes \n\t\tnew_node = Node(None, nodes[0].f + nodes[1].f, nodes[0], nodes[1]) \n\t\tnodes = nodes[2:] \n\t\tnodes.append(new_node) \n\t\t\n\t# Huffman encoding \n\tcode = dict() \n\tencode(nodes[0], \"\", code) \n\t\n\t# Return the encoded string \n\tencoded_string = \"\" \n\tfor char in text: \n\t\tencoded_string += code[char] \n\treturn encoded_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: re.search(\"10\", \"This string contains the number 10 in it\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class PrintNestedList:\n    def __init__(self, nested_list):\n        self.nested_list = nested_list\n \n    def print_list(self, nested_list, level = 0):\n        for elem in nested_list:\n            if isinstance(elem, list):\n                self.print_list(elem, level + 1)\n            else:\n                print('    '*level + str(elem))\n \n    def __str__(self):\n        self.print_list(self.nested_list)\n        return ''\n        \nmy_list = PrintNestedList([1,2,[3,4],[5,[6,7,8]]])\nprint(my_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\nx_values = [1, 2, 3, 4, 5]\ny_values = [1, 8, 27, 64, 125]\n\n# Plot x and y values\nplt.plot(x_values, y_values)\n\n# Give the plot a title\nplt.title(\"Plot of x*x\")\n\n# Label the x and y axes\nplt.xlabel('x')\nplt.ylabel('x*x')\n\n# Show the plot\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def censor_string(string, n):  \n  # Get the length of the string  \n  length = len(string)  \n  \n  # Check if length is less than 'n'  \n  if length < n:  \n    return string  \n  elif length == n:  \n    return \"x\" * length  \n  \n  # Replace the first 'n' characters with 'x'  \n  else:  \n    return \"x\" * n + string[n:]  \n\n# Driver code  \nstring = \"Hello World\"\nn = 5\nresult = censor_string(string, n) \nprint(result)  # \"xxxxx World\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def concat_and_capitalize(str1, str2):\n    result = str1 + str2\n    return result.capitalize()\n\nstr1 = 'python'\nstr2 = 'programming'\nprint(concat_and_capitalize(str1, str2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\nlength = 8\n\nalphabet = string.ascii_letters + string.digits\npassword = ''.join(random.choice(alphabet) for i in range(length))\n\nprint(\"Generated password:\", password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\n\n# read the csv file\ndata = pd.read_csv('temperature_data.csv')\n\n# define feature and target variables\nX = data['day'].values.reshape(-1,1)\ny = data['temperature'].values\n\n# train the model\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# make prediction \nx_pred = 11\nprediction = model.predict(np.array([x_pred]).reshape(-1,1))\n\nprint(\"The predicted temperature for day {} is: {}\".format(x_pred, prediction[0])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: months_and_days = {\n    'January': 31, \n    'February': 28, \n    'March': 31,\n    'April': 30,\n    'May': 31,\n    'June': 30,\n    'July': 31,\n    'August': 31,\n    'September': 30,\n    'October': 31,\n    'November': 30,\n    'December': 31\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import unittest\n\ndef add_two_numbers(a, b):\n return a + b\n\nclass TestAddTwoNumbers(unittest.TestCase):\n def test_add_two_numbers_positive(self):\n  result = add_two_numbers(1, 2)\n  self.assertEqual(result, 3)\n\n def test_add_two_numbers_negative(self):\n  result = add_two_numbers(-1, -2)\n  self.assertEqual(result, -3)\n\nif __name__ == '__main__':\n unittest.main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_all_palindrome(words):\n    for word in words:\n        if word == word[::-1]:\n            continue\n        else:\n            return False\n    return True\n\nwords = [\"abcd\", \"anna\", \"mom\", \"live\"]\n\nprint(is_all_palindrome(words)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\nre_match = \"\\w+@\\w+\\.\\w+\"\nre_replace = \"<valid email>\"\n\nprint(re.sub(re_match, re_replace, \"my_email@example.com\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ShoppingCart:\n    def __init__(self):\n        self.items = []\n    \n    def add_item(self, item):\n        self.items.append(item)\n    \n    def remove_item(self, item):\n        if item in self.items:\n            self.items.remove(item)\n    \n    def get_total_amount(self):\n        total_amount = 0\n        for item in self.items:\n            total_amount += item.price\n        return total_amount but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Get the maximum value in the dictionary\nmax_value = max(my_dict.values())\n\n# Print the maximum value\nprint (max_value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\ndef addLists(list1, list2):\n    result = [] \n    for i in range(0, len(list1)):\n        result.append(list1[i] + list2[i])\n    return result\n\nprint(addLists(list1, list2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\ndef web_spider(max_pages):\n page = 1\n while page <= max_pages:\n # Make request to target page\n source_code = requests.get('http://example.com/tech/page' + str(page))\n plain_text = source_code.text\n soup = BeautifulSoup(plain_text, 'html.parser')\n # Get data from html page\n for link in soup.find_all('a', {'class': 'articles-list-item__title'}):\n href = link.get('href')\n title = link.string\n # print the link, title, page number\n print(href)\n print(title)\n # increment the page number\n page += 1\n\n# Main function\nif __name__ == '__main__':\n web_spider(2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_total_price(items, prices):\n  total = 0\n  for i in range(len(items)):\n    total += prices[i]\n  return total\n  \ntotal = calculate_total_price([\"T-shirt\",\"Jeans\",\"Shoes\"], [30,45,100]) \nprint(\"The total price is:\", total) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci_series(n):\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else: \n        return fibonacci_series(n-1) + fibonacci_series(n-2)\n\nfor i in range(6):\n    print(fibonacci_series(i), end=', ') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/bin/bash\nsudo echo \"@python3 my_app.py\" >> /etc/rc.local\nsudo chmod +x /etc/rc.local but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_multi_dim_array(multi_dim_array):\n    # init sum to 0 \n    sum = 0 \n  \n    # iterate over rows \n    for row in multi_dim_array: \n  \n        # iterate over columns \n        for num in row: \n  \n            # add number to sum \n            sum += num \n  \n    return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_words(sentence):\n    words = sentence.split(' ')\n    return len(words)\n\nsentence = \"One two three four five\"\nword_count = count_words(sentence)\nprint(\"The number of words in the sentence is: \", word_count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate(a, b, op):\n    if op == '+':\n        return a + b\n    elif op == '-':\n        return a - b\n    elif op == '*':\n        return a * b\n    elif op == '/':\n        return a / b\n    else:\n        return \"Operation not supported.\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def solution(list): \n    result = [] \n  \n    for i in list: \n        if len(result) == 0: \n            result.append(i) \n        elif i - result[-1] > 3: \n            result.append(i) \n  \n    return result \n  \nlist = [1, 2, 4, 5, 8, 14, 15]\nprint(solution(list)) \n# Result: [1, 4, 8, 14] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #include <iostream>\n\nvoid greet(std::string name)\n{\n    std::cout << \"Hello, \" << name << std::endl;\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(num1, num2): \n    if(num2 == 0): \n        return num1 \n    return gcd(num2, num1%num2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #! /bin/env python3\n__all__ = ['pycaspattern']\n\n# ------------------\n# Libraries\n# ------------------\nimport argparse\nimport os\nimport sys\nsys.path.append('/gpfs/user/liuzh/Code/crispr')\nimport pandas as pd\nfrom pycas.analysis import Screening\nfrom pycas.utils.decorator import helpstring\nfrom pycas.utils.decorator import AppendHelp\n\n\n# ------------------\n# Functions\n# ------------------\n\ndef pycasanalysis(filename,\n                  ctrl_label,\n                  exp_label,\n                  method,\n                  hasbarcode,\n                  out_dir):\n    file_type = 'csv'\n    if filename.split('.')[-1] == 'txt':\n        sep = '\\t'\n        file_type = 'txt'\n    elif filename.split('.')[-1] == 'csv':\n        sep = ','\n        file_type = 'csv'\n    else:\n        raise ValueError('Input data file should be txt or csv')\n    if file_type == 'csv':\n        data = pd.read_csv(filename, header=0)\n    else:\n        data = pd.read_table(filename, header=0, sep='\\t')\n    for x in ['gene', 'guide', 'barcode']:\n        if x not in data.columns:\n            raise ValueError('Input data file should contain column named as: ' + x)\n    if len(ctrl_label) != len(exp_label):\n        raise ValueError('Input control labels and treatment labels should be of the same length.')\n    if out_dir != '' and not os.path.exists(out_dir):\n        os.mkdir(out_dir)\n    if method not in ['sunbird', 'mw']:\n        raise ValueError('The test method should be in: sunbird mw.')\n    analysis = Screening(data, ctrl_label, exp_label, hasbarcode=hasbarcode)\n    if method == 'sunbird':\n        analysis.sunbird(10)\n        analysis.test['sunbird'].to_csv(\n            os.path.join(out_dir, 'pycas_analysis_sunbird.csv')\n        )\n    else:\n        pass\n\n\n\n# ------------------\n# Main\n# ------------------\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(\n        prog='pycasanalysis',\n        description='Analysis the library screening result.'\n    )\n    parser.add_argument(\n        '-i', '--input', required=True,\n        help='Input data file path, with columns: gene, guide <, barcode>, [labels]. (column names should be in the csv file).'\n    )\n    parser.add_argument(\n        '-c', '--control-label', nargs='+',\n        help='Control experiment labels, separeted by space.'\n    )\n    parser.add_argument(\n        '-t', '--treat-label', nargs='+',\n        help='Treatment experiment labels, separeted by space.'\n    )\n    parser.add_argument(\n        '-m', '--method', default='sunbird',\n        help='Method to be used in the analysis: sunbird, mw.'\n    )\n    parser.add_argument(\n        '--has-barcode', action='store_true',\n        help='Input data should be tested consider barcodes.'\n    )\n    parser.add_argument(\n        '--out-dir', default='',\n        help='Result output directory\uff0cdefault is current work directory.'\n    )\n    args = parser.parse_args()\n    def analysis(**args):\n        pycasanalysis(\n            filename=args['input'],\n            ctrl_label=args['control_label'],\n            exp_label=args['treat_label'],\n            method=args['method'],\n            hasbarcode=args['has_barcode'],\n            out_dir=args['out_dir']\n        )\n    analysis(**vars(args))\n\n\n# ------------------\n# EOF\n# ------------------\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: <html>\n<head>\n  <title>Why Choose Python programming language?</title>\n  <style>\n    body { background-color: #eeeeee; }\n  </style>\n</head>\n<body>\n  <h1>Why Choose Python programming language?</h1>\n  <p>\n    Python is a highly popular programming language that is used for many tasks, from web development to data science. It is versatile, user-friendly and easy to learn. The language has an extensive library of modules for different tasks, which make it great for developing complex applications quickly. Its syntax is simple and concise and it is great for rapid prototyping. Its strong support for object oriented programming makes it a great choice for developers who want to develop robust and divided applications.\n  </p>\n</body>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 101):\n    if i % 15 == 0:\n        print(\"FizzBuzz\")\n    elif i % 3 == 0:\n        print(\"Fizz\")\n    elif i % 5 == 0:\n        print(\"Buzz\")\n    else:\n        print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def area_of_circle(radius):\n    return 3.14 * (radius ** 2)\n\nif __name__ == '__main__':\n    radius = 5\n    print(area_of_circle(radius)) # 78.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a class to generate an HTML table using Python.\n\"\"\"\n\nclass HtmlTable:\n    def __init__(self, table_headers, table_data):\n        self.table_headers = table_headers\n        self.table_data = table_data\n\n    def generate_html_table(self):\n        html = \"<table>\\n\"\n        html += self.generate_headers()\n        html += self.generate_rows()\n        html += \"</table>\"\n        return html\n\n    def generate_headers(self):\n        html = \"<tr>\"\n        for header in self.table_headers:\n            html += \"<th>{}</th>\".format(header)\n        html += \"</tr>\"\n        return html\n\n    def generate_rows(self):\n        html = \"\"\n\n        for row in self.table_data:\n            html += \"<tr>\"\n            for col in row:\n                html += \"<td>{}</td>\".format(col)\n            html += \"</tr>\\n\"\n\n        return html but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def completion(string):\n  results = []\n  words = [\"the\", \"that\", \"this\", \"those\", \"thing\", \"think\", \"thought\"]\n  for word in words:\n    if len(word) > 2 and word.startswith(string):\n      results.append(word)\n  return results\n  \nprint(completion(\"th\")) # Output: [\"those\", \"think\", \"thought\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def main():\n print(\"Hello World\")\n \nif __name__ == \"__main__\":\n main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# input list\ndata_list = [1, 2, 3, 4, 5]\n\n# choose two random indices\ni, j = random.sample(range(len(data_list)), 2)\n\n# store the values before swapping\na = data_list[i]\nb = data_list[j]\n\n# swap two elements in a list\ndata_list[i] = b\ndata_list[j] = a\n\n# print the list after swapping\nprint(data_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def selectionSort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Find the minimum element in remaining \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, n): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n  \n        # Swap the found minimum element with \n        # the first element         \n        arr[i], arr[min_idx] = arr[min_idx], arr[i] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\nif (n == 0):\n  return 1\nelse:\n  return n * factorial(n-1)\n\nprint(factorial(5))  # Should print 120 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generateRandomList(length):\n    random_list = []\n    for _ in range(length):\n        random_list.append(random.randint(1, 10))\n    return random_list\n\nif __name__ == '__main__':\n    print(generateRandomList(5)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_two_numbers():\n    num1 = int(input(\"Please enter a number: \"))\n    num2 = int(input(\"Please enter a another number: \"))\n    return num1 + num2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_to_decimal(binary):\n    decimal = 0\n    for digit in binary:\n        decimal = decimal*2 + int(digit)\n    return decimal but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_number(num):\n    rev = 0\n    while num > 0:\n        reminder = num%10\n        rev = (rev*10)+reminder\n        num = num//10\n    return rev but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \n\n# Load dataset \ndata = np.genfromtxt(\"data.csv\", delimiter=\",\") \n\n# Calculate interquartile range \nQ1 = np.percentile(data, 25) \nQ3 = np.percentile(data, 75) \n\n# Interquartile range \nIQR = Q3 - Q1 \n\n# Remove outliers \noutliers = (data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR))\n\n# Print outliers \nprint(data[outliers]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_by_length(arr): \n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if len(arr[i]) < len(arr[j]): \n                arr[i], arr[j] = arr[j], arr[i] \n    return arr\n  \nprint(sort_by_length(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # creating an empty dictionary where we will store the total customers for each year\ncustomers_by_year = {}\nfor customer in customers_data:\n # Get the year from the customer data\n year = customer['year']\n # Get the current total customers for the year\n num_customers = customers_by_year.get(year, 0)\n # Increase the total customers by one\n num_customers += 1\n # Update the dictionary with the new customer count\n customers_by_year[year] = num_customers\n\nprint(f'Total number of customers in 2019: {customers_by_year[\"2019\"]}')\nprint(f'Total number of customers in 2020: {customers_by_year[\"2020\"]}')\nprint(f'Total number of customers in 2018: {customers_by_year[\"2018\"]}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression \n\n# data points \nbedrooms = np.array([1,2,3,4,5,6,7,8,9,10])\nprice = np.array([100000,200000,300000,400000,500000,600000,700000,800000,900000,1000000])\n\n# reshaping the data\nbedrooms = bedrooms.reshape(-1,1) \nprice = price.reshape(-1,1)\n\n# Train the Linear Regression model \nmodel = LinearRegression() \nmodel.fit(bedrooms, price) \n\n# Plotting the regression line\nline = model.coef_*bedrooms + model.intercept_\n\n# Plotting the test data\nplt.scatter(bedrooms, price)\nplt.plot(bedrooms, line);\nplt.title('Price vs. Number of Bedrooms')\nplt.xlabel('No. of bedrooms')\nplt.ylabel('Price')\nplt.show(); but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def descending_order_sort(arr): \n    n = len(arr)  \n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] < arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n\narr = [6, 4, 7, 2, 1, 3] \ndescending_order_sort(arr)\nprint(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_freq_val(dic): \n    max_freq = 0\n    max_val = None\n    for val in dic.values():\n        if dic.values().count(val) > max_freq:\n            max_freq = dic.values().count(val)\n            max_val = val\n    \n    return max_val\n\nmax_val = max_freq_val(dic)\nprint(max_val) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def spiralPrint(arr):\n rows = len(arr)\n columns = len(arr[0])\n x = 0\n y = 0 \n\n while (x < rows and y < columns): \n\n # Print the first row from the remaining rows \n for i in range(y,columns): \n print(arr[x][i],end=\" \") \n x += 1\n\n # Print the last column from the remaining columns \n for i in range(x,rows): \n print(arr[i][columns-1],end=\" \") \n columns -= 1\n\n # Print the last row from the remaining rows \n if (x < rows): \n\n for i in range(columns-1, (y-1), -1): \n print(arr[rows-1][i],end=\" \") \n rows -= 1\n\n # Print the first column from the remaining columns \n if (y < columns): \n\n for i in range(rows-1, x-1, -1): \n print(arr[i][y],end=\" \") \n y += 1\n\n# Test code \narr = [[1, 2, 3, 4], \n       [5, 6, 7, 8], \n       [9, 10, 11, 12], \n       [13, 14, 15, 16]] \n\nspiralPrint(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num = int(input(\"Enter a number: \")) \n\n# find sum of its digits \nsum = 0\nwhile num > 0: \n\tdigit = num % 10\n\tsum += digit \n\tnum //= 10\n\t\n# print the result \nprint(\"Sum of digits of the number:\", sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def normalize(arr):\n   mean = sum(arr) / len(arr)\n   normalized_arr = [x - mean for x in arr]\n   return normalized_arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(n):\n if n <= 1:\n return False\n for i in range(2, int(n**0.5) + 1):\n if n % i == 0:\n return False\n return True\n\ndef find_prime_numbers(n):\n primes = []\n for i in range(2, n + 1):\n if is_prime(i):\n primes.append(i)\n return primes but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Returns the nth Fibonacci number\ndef Fibonacci(n):\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return Fibonacci(n-1) + Fibonacci(n-2) \n\n# Prints the Fibonacci series\nn = 5 \nfor i in range(n+1): \n    print(Fibonacci(i)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_dicts(my_list, key):\n    return sorted(my_list, key=lambda x: x[key])\n\n# Main\nif __name__ == \"__main__\":\n    my_list = [{'name': 'Bob', 'age': 20}, {'name': 'Alice', 'age': 10}]\n    key = 'age'\n    print(sort_dicts(my_list, key))  # [{'name': 'Alice', 'age': 10}, {'name': 'Bob', 'age': 20}] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Importing the required library\nimport json\n \n# Loading json string into a Python object\ndata = json.loads('{\"name\": \"John\",\"age\": 30,\"cars\": {\"car1\": \"Ford\",\"car2\": \"BMW\",\"car3\": \"Fiat\"}}')\n \n# Extracting the required fields\nname = data['name']\nage = data['age']\ncar2 = data['cars']['car2']\n \n# Printing the retrieved data \nprint(\"Name:\", name)\nprint(\"Age:\", age)\nprint(\"Car 2:\", car2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: x += 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n def __init__(self, name, age, gender, height, weight):\n  self.name = name\n  self.age = age\n  self.gender = gender\n  self.height = height\n  self.weight = weight\n\ndef get_name(self):\n  return self.name\n\ndef get_age(self):\n  return self.age\n\ndef get_gender(self):\n  return self.gender\n\ndef get_height(self):\n  return self.height\n\ndef get_weight(self):\n  return self.weight but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Python is an interpreted, high-level programming language developed by Dutch programmer Guido Van Rossum in 1991. It has a comprehensive and large standard library, and a very easy-to-learn and widely used syntax. Python is commonly used in many areas of scientific computing and is widely used in web and software development, artificial intelligence, machine learning, and data science. Python is highly regarded for its readability and broad applicability, and is the most popular language for learning Computer Science due to its flexible and expanding libraries. It supports object-oriented, procedural, and functional programming. Python, like most languages, can be used to create sophisticated applications, graphs and data visualizations, create web development, debug existing projects, and many other interesting tasks. It is a beginner-friendly language and the official support is well organized and up-to-date, making it truly an ideal choice for beginners. The experience and effort involved in learning Python can easily be produced in other computer-related related fields, making Python increasingly attractive and adopted. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def decimal_to_binary(n):\n binary_string = \"\"\n while n > 0:\n binary_string += str(n % 2)\n n //= 2\n return binary_string[::-1]\n\n# Example\nresult = decimal_to_binary(5)\nprint(result) \n\n# Output\n101 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_password(length):\n password = ''\n for i in range(length):\n # add random lowercase character\n password += random.choice(string.ascii_lowercase)\n # add random uppercase character\n password += random.choice(string.ascii_uppercase)\n # add random digit character\n password += random.choice(string.digits)\n \n # generate the remaining characters\n for i in range(length-3):\n password += random.choice(string.ascii_letters + string.digits)\n \n password_list = list(password) \n random.shuffle(password_list) \n password = ''.join(password_list) \n return password \n\nprint(generate_password(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_sum(numbers):\n    return sum(numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_arrays(arr1, arr2): \n    combined_arr = []\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            combined_arr.append(arr1[i]) \n            i += 1\n        else: \n            combined_arr.append(arr2[j])\n            j += 1\n             \n    combined_arr.extend(arr1[i:]) \n    combined_arr.extend(arr2[j:]) \n  \n    return combined_arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def average(numbers):\n\ttotal = 0\n\tfor num in numbers:\n\t\ttotal += num\n\treturn total/len(numbers)\n\nnums = [1,2,3,4,5,6]\nprint(\"Average of the list of numbers is:\", average(nums)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef linearRegression(x_values, y_values):\n    x = np.array(x_values, dtype=np.float64)\n    y = np.array(y_values, dtype=np.float64)\n    A = np.vstack([x, np.ones(len(x))]).T\n    m, c = np.linalg.lstsq(A, y, rcond=None)[0]\n    return m, c but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a function in Python that takes a list of strings as an argument and returns a new list with only the strings that have a length greater than 5.\n\"\"\"\n\ndef get_long_strings(str_list):\n    long_str_list = []\n    for s in str_list:\n        if len(s) > 5:\n            long_str_list.append(s)\n    return long_str_list\n\nif __name__ == '__main__':\n    str_list = [\"Apple\", \"Banana\", \"Orange\", \"Kiwi\"]\n    print(get_long_strings(str_list)) # [\"Banana\", \"Orange\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\ndef most_frequent(arr):\n    cnt = Counter(arr)\n    return cnt.most_common(1)[0][0]\n\narr = [1, 1, 2, 3, 2, 4, 4]\nmost_frequent_elem = most_frequent(arr)\nprint(most_frequent_elem) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import wikipedia\n\ndef get_wikipedia_data(query):\n    #Get the summary from wikipedia\n    summary = wikipedia.summary(query)\n    #Extract the content from the summary\n    content = wikipedia.page(query).content\n    #Return the content and summary\n    return content, summary but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubbleSort(list): \n\tn = len(list) \n\tfor i in range(n): \n\t\tfor j in range(0, n-i-1): \n\t\t\tif list[j] > list[j+1] : \n\t\t\t\tlist[j], list[j+1] = list[j+1], list[j] \n\treturn list\n\nprint(bubbleSort([8,2,11,9,20,7])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class SimpleInterest:\n def __init__(self, principal, rate, time):\n  self.principal = principal\n  self.rate = rate\n  self.time = time\n\n def calculate(self):\n  return self.principal * (1 + self.rate * self.time)\n\nsi = SimpleInterest(20000, 0.10, 2)\nprint('Simple Interest =', si.calculate()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 5):\n    for j in range(1, i+1):\n        print(i, end=\" \")\n    print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student: \n    def __init__(self, name, grade): \n        self.name = name \n        self.grade = grade \n  \n    def display(self): \n    \tprint(\"Name:\", self.name, \"Grade:\", self.grade) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3 \nconn = sqlite3.connect('Order.db')\nc = conn.cursor()\nc.execute(\"SELECT * FROM Orders WHERE OrderDate > '2018-12-31'\")\nresult = c.fetchall()\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = 'http://example.com/'\n\nr = requests.get(url)\n\nprint('Status code:', r.status_code)\nprint('Response text:\n', r.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def switch_order(a, b):\n  c = a\n  a = b\n  b = c\n  return a, b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time  \nimport urllib.request  \n  \ndef loadUrl(url): \n    start = time.time() \n    response = urllib.request.urlopen(url) \n    end = time.time()\n    total_time = end - start\n    print(total_time)\n  \nurl = input(\"Enter website url: \")\nloadUrl(url) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\nip_regex = re.compile(r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_min(items):\n    min = float('inf')\n    for item in items:\n        if item < min:\n            min = item\n    return min but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # A Python program to print \n# level order traversal of tree \n\ndef breadth_first_traversal(root): \n\tif root is None: \n\t\treturn\n\n\tqueue = [] \n\tqueue.append(root) \n\n\twhile(len(queue) > 0): \n\t\tprint (queue[0].val,end=' ') \n\t\tnode = queue.pop(0) \n\n\t\tif node.left is not None: \n\t\t\tqueue.append(node.left) \n\n\t\tif node.right is not None: \n\t\t\tqueue.append(node.right) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create an array of 10 zeros\narr = [0 for i in range(10)]\n\n# Create an array of 20 zeros\narr = [0 for i in range(20)]\n\n# Create a 3x3 array of zeros\narr = [[0 for i in range(3)] for j in range(3)]\n\n# Create a 5x5 array of zeros\narr = [[0 for i in range(5)] for j in range(5)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd \nimport numpy as np\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n\n# Load the data\ndf = pd.read_csv('stock_data.csv')\n\n# Get the features and labels\nX = df.drop(['Close Price'], axis=1).values\ny = df['Close Price'].values\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)\n\n# Train the model\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)\n\n# Make predictions with the model\ny_pred = regressor.predict(X_test)\n\n# Calculate the accuracy\naccuracy = mean_squared_error(y_test, y_pred)\n\nprint(accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef cost_function(x):\n\t\"\"\"\n\tCost function to be optimized\n\t\"\"\"\n\treturn np.square(x) - 10*x + 25\n\ndef gradient_descent(x, lr):\n\t\"\"\"\n\tGradient descent optimization to minimize cost function\n\t\"\"\"\n\td_x = 2*x - 10  # Derivative of cost function\n\tx -= lr * d_x  # Update x value\n\treturn x\n\nif __name__ == '__main__':\n\tx = 5  # Initial value\n\tlr = 0.2  # Learning rate\n\t\n\t# Gradient descent loop\n\tfor _ in range(10):\n\t\tx = gradient_descent(x, lr)\n\t\tcost = cost_function(x)\n\t\t\n\tprint(\"Optimized x = {}, cost = {}\".format(x, cost)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n  if n < 0: \n    raise ValueError(\"Invalid input\")\n  elif n == 0:\n    return 0 \n  elif n == 1: \n    return 1\n  else: \n    return fibonacci(n-1) + fibonacci(n-2)\n  \nfibonacci_sequence = [fibonacci(i) for i in range(5)]\nprint(fibonacci_sequence) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: s = input(\"Please enter a string: \")\nprint(\"The reverse of the string is: \" + s[::-1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to check Armstrong numbers\n\n# Function to check armstrong numbers\ndef isArmstrong(n): \n    # Initialize sum\n    sum = 0 \n  \n    # Find the sum of the cube of each digit\n    temp = n \n    while temp > 0: \n        digit = temp % 10 \n        sum += digit ** 3 \n        temp //= 10 \n  \n    # Return True if n is equal to the sum\n    if n == sum: \n        return True \n    else: \n        return False \n  \n# Driver program \nn = int(input(\"Input a number to check if it is an Armstrong number: \")) \nif isArmstrong(n): \n    print(\"Yes\") \nelse: \n    print(\"No\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import calendar\n\n# get the current month \ncurrent_month = calendar.month_name[calendar.datetime.now().month]\nprint('Current Month is %s' %current_month) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json \n  \ndef json_compare(json1, json2): \n    # convert both the JSON objects to Python dictionary \n    json1_dict = json.loads(json1) \n    json2_dict = json.loads(json2) \n  \n    # check if the keys are equal \n    if (json1_dict.keys() == json2_dict.keys()):  \n  \n        # if keys are equal, check if the values are equal \n        for key in json1_dict.keys(): \n            if (json1_dict[key] != json2_dict[key]): \n                return False\n        return True\n    else: \n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class UserInformation:\n    def __init__(self, username, email, profile_picture):\n        self.username = username\n        self.email = email\n        self.profile_picture = profile_picture but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport json\nfrom bs4 import BeautifulSoup\n\n#make an HTTP request to the web page\nr = requests.get('https://www.example.com/products')\n\n#parse the response\nsoup = BeautifulSoup(r.content, 'html.parser')\n\n#select relevant elements\nreview_elements = soup.select('.review .card-body')\n\n# extract the reviews\nreviews = [e.text for e in review_elements]\n\n#store reviews in JSON format\ndata = {\n'Product name': 'Example product',\n'reviews': reviews\n}\n\nwith open('reviews.json', 'w') as outfile:\n    json.dump(data, outfile) but is not the same. just give one example and only return the code."}
