{"prompt": "make some code that functions the same as the following code: def get_string_lengths(list_strings):\n    res = {}\n    for string in list_strings:\n        res[string] = len(string)\n    return res\n\ntest_strings = ['help', 'me', 'please']\nresult = get_string_lengths(test_strings)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import csv\n \nclass CSVProcessor:\n \n def __init__(self, path):\n self.csv_data = []\n with open(path, 'r') as csvfile:\n reader = csv.reader(csvfile)\n for row in reader:\n self.csv_data.append(row)\n \n def filter_rows(self, column, value):\n filtered = []\n for row in self.csv_data:\n if row[column] == value:\n filtered.append(row)\n return filtered\n \n def calculate_average(self, column):\n values = [float(row[column]) for row in self.csv_data]\n return sum(values) / len(values) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0) \nmodel.fit(X_train, y_train)\npredictions = model.predict(X_test)\nconfusion_matrix(y_test, predictions) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    if n < 0:\n        print('Factorial does not exist for a negative number.')\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nprint(factorial(4)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def custom_function(input_list): \n  transformed_list = [] \n\n  for value in input_list: \n    transformed_value = value + 1 \n    transformed_list.append(transformed_value) \n  \n  return transformed_list \n\ninput_list = [2, 3, 1, 4]\nprint(custom_function(input_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# Read the input data\ndf = pd.read_csv('company_data.csv')\n\n# Select the top 5 companies by total revenue\ntop_5 = df.sort_values(by='revenue', ascending=False).head(5)\n\n# Generate the report\nprint(\"Top 5 Companies by Total Revenue\")\nprint(\"-------------------------------\")\nfor index, row in top_5.iterrows():\n print(\"Company name: {}, Total Revenue: {:.2f}, Total Profit: {:.2f}\".format(\n row['name'], row['revenue'], row['profit']\n )) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isArmstrongNumber(number):\n  num_str = str(number)\n  result = 0\n  power = len(num_str)\n\n  for c in num_str:\n    result += int(c) ** power\n\n  if result == number:\n    return True\n  else:\n    return False\n\nif isArmstrongNumber(371):\n  print('It is an Armstrong number.')\nelse:\n  print('It is not an Armstrong number.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: duplicate_numbers = []\nfor i in range(len(arr)):\n  for j in range(i + 1, len(arr)):\n    if arr[i] == arr[j]:\n      duplicate_numbers.append(arr[i])\n\nprint(duplicate_numbers) # Output: [10, 20] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com/movies'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.content, 'html.parser')\n\ntitles = []\nratings = []\ndates = []\ndescriptions = []\n\n# Get the movie titles\nall_titles = soup.find_all('h3', class_='title')\nfor title in all_titles:\n titles.append(title.text)\n\n# Get the movie ratings\nall_ratings = soup.find_all('span', class_='rating')\nfor rating in all_ratings:\n ratings.append(rating.text)\n\n# Get the movie dates\nall_dates = soup.find_all('span', class_='date')\nfor date in all_dates:\n dates.append(date.text)\n\n# Get the movie descriptions\nall_descriptions = soup.find_all('p', class_='desc')\nfor description in all_descriptions:\n descriptions.append(description.text)\n\n# Print out the collected data\nfor i in range(len(titles)):\n print(f'Movie Title: {titles[i]}')\n print(f'Movie Rating: {ratings[i]}')\n print(f'Movie Date: {dates[i]}')\n print(f'Movie Description: {descriptions[i]}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_element(my_list, x):\n  found = False\n  for item in my_list:\n    if item == x:\n      found = True\n      break\n  \n  return found\n\nelement = 3\n\nprint(find_element(my_list, element))\n\n# Output\nTrue but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n  def __init__(self, name, age, gender):\n    self.name = name\n    self.age = age\n    self.gender = gender\n\n  def get_name(self):\n    return self.name\n\n  def get_age(self):\n    return self.age\n\n  def get_gender(self):\n    return self.gender but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def camelCaseToSnakeCase(inputString):\n    outputString = inputString[0].lower()\n    for i in range(1, len(inputString)):\n        if inputString[i].isupper():\n            outputString += \"_\"\n            outputString += inputString[i].lower()\n        else:\n            outputString += inputString[i]\n    return outputString\n    \nif __name__ == '__main__':\n    inputString = \"thisIsExample\"\n    print (camelCaseToSnakeCase(inputString)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply(x, y): \n    product = 0\n    while (x > 0): \n        if x % 2 != 0: \n            product += y \n        x >>= 1\n        y <<= 1\n    return product \n\nprint(multiply(10, 5)) # Output: 50 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less_than_pivot = [i for i in arr[1:] if i <= pivot]\n        greater_than_pivot = [i for i in arr[1:] if i > pivot]\n \n        return quick_sort(less_than_pivot) + [pivot] + quick_sort(greater_than_pivot) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: even_nums = [num for num in range(start_num, end_num + 1) if num % 2 == 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\nbooks = [\n {\n \"title\": \"The Catcher in the Rye\",\n \"author\": \"JD Salinger\"\n },\n {\n \"title\": \"Lord of the Flies\",\n \"author\": \"William Golding\"\n },\n {\n \"title\": \"1984\",\n \"author\": \"George Orwell\"\n }\n]\n\n@app.route('/books', methods=['GET'])\ndef get_books():\n args = request.args\n title = args.get('title')\n author = args.get('author')\n\n result = []\n\n for book in books:\n if title and author:\n if book['title'] == title and book['author'] == author:\n result.append(book)\n elif title:\n if book['title'] == title:\n result.append(book)\n elif author:\n if book['author'] == author:\n result.append(book)\n else:\n result.append(book)\n\n return jsonify(result)\n\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\nimport datetime\n\ndef get_day_of_week(date):\n    day, month, year = [int(d) for d in date.split('-')]\n    day_of_week = datetime.date(year, month, day).weekday()\n    return day_of_week+1\n\nprint get_day_of_week(\"2020-05-15\") # Outputs 6 (Friday) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findLengthOfLCIS(A):\n    n = len(A)\n    if n == 0:\n        return 0\n    ans = 1\n    prev = A[0]\n    curr_len = 1\n    for i in range(1, n):\n        if A[i] > prev:\n            curr_len += 1\n        else:\n            ans = max(ans, curr_len)\n            curr_len = 1\n        prev = A[i]\n    return max(ans, curr_len)\n\nif __name__ == '__main__':\n    A = [1, 9, 3, 10, 4, 20, 2]\n    print(\"Length of LCIS is\", findLengthOfLCIS(A)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(a, b):\n return max(a, b) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def race_time_total(time1,time2):\n total = time1 + time2\n return total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nPerform linear regression to predict the sales for a new product\n\"\"\"\n\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Define input values\nproduct_price = 90\nadvertisement_budget = 15\n\n# Define the independent and dependent data\nX = np.array([advertisement_budget]).reshape(-1,1)\nY = np.array([product_price]).reshape(-1,1)\n\n# Create and train the model\nlinear_regressor = LinearRegression()\nlinear_regressor.fit(X, Y)\n\n# Make a prediction\npredicted_sales = linear_regressor.predict([[advertisement_budget]])\n\n# Print the result\nprint(\"Predicted sales for new product: \", predicted_sales[0]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\nwords = ['apple', 'apple', 'banana', 'apple', 'orange', 'banana', 'pear', 'orange', 'orange']\n\nword_counts = Counter(words)\n\nfor word, count in word_counts.items():\n    print(f'{word}: {count}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def vector_addition(v1, v2):\n    result = [v1[i] + v2[i] for i in range(len(v1))]\n    return result\n\nresult = vector_addition([1,2,3], [4,5,6])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n\n# Load the data\ndf = pd.read_csv('sentiment.csv')\n\n# Transform the text into numerical features\ncv = CountVectorizer(stop_words='english')\nX = cv.fit_transform(df['text'])\ny = df['sentiment']\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1, test_size=.3)\n\n# Train the model\nnb = MultinomialNB()\nnb.fit(X_train, y_train)\n\n# Make predictions\ny_pred = nb.predict(X_test)\n\n# Evaluate the model\nscore = accuracy_score(y_test, y_pred)\nprint(score)\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(tuples):\n    return sorted(tuples, key = lambda x: x[1])\n \ntuples = [(3, 4), (5, 6), (1, 2)]\n \nprint(sort_list(tuples)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def getName(self):\n        return self.name\n    \n    def setName(self, name):\n        self.name = name\n    \n    def getAge(self):\n        return self.age\n    \n    def setAge(self, age):\n        self.age = age but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble  import RandomForestClassifier\n\n# read in the data\ndf = pd.read_csv('loan_data.csv')\n\n# split features and target\nX = df.drop(columns='default').values\ny = df['default'].values\n\n# split dataset into training and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# build the model\nmodel = RandomForestClassifier(n_estimators=500)\nmodel.fit(X_train, y_train)\n\n# predict\ny_pred = model.predict(X_test)\n\n# calculate accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint('Model accuracy is: ', accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n): \n    factorial = 1\n  \n    for i in range(1, n+1): \n        factorial = factorial * i \n    print(factorial) \n  \nnumber = 5\nfactorial(number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_consecutive(list_of_numbers):\n    result = []\n    last_number = None\n    for number in list_of_numbers:\n        if number != last_number:\n            result.append(number)\n            last_number = number\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Queue:\n    def __init__(self):\n        self.items = []\n    \n    def isEmpty(self):\n        return self.items == []\n    \n    def enqueue(self, item):\n        self.items.insert(0,item)\n    \n    def dequeue(self):\n        return self.items.pop()\n    \n    def size(self):\n        return len(self.items)\n    \n    def peek(self):\n        if self.items:\n\t        return self.items[-1]\n        else:\n    \t    return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calc_sum(sequence):\n sum = 0\n for num in sequence:\n sum += num\n return sum\n\ndef calc_sum_squares(sequence):\n sum = 0\n for num in sequence:\n  if num % 2 == 1:\n   sum += num * num\n return sum\n\nsequence = [2, 4, 5, 6, 7]\ntotal_sum = calc_sum(sequence)\nsum_squares = calc_sum_squares(sequence)\n\nprint(\"Total sum:\", total_sum)\nprint(\"Sum of squares of odd numbers:\", sum_squares) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Get list of numbers\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8]\n\n# Initialize a count\ncount = 0\n\n# Iterate through the list of numbers and count the even numbers\nfor num in numbers:\n    if num % 2 == 0:\n        count += 1\n\n# Print the result\nprint(f\"The number of even numbers is: {count}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def contains_duplicates(given_list):\n    seen = set()\n    for x in given_list:\n        if x in seen:\n            return True\n        seen.add(x)\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: [75, 93, 6, 25, 13] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nMAX_DISTANCE = 20\n\ndef race():\n    print(\"Let's race!\")\n    car_a_distance = 0\n    car_b_distance = 0\n\n    while car_a_distance < MAX_DISTANCE and car_b_distance < MAX_DISTANCE:\n        car_a_distance += random.randint(1, 5)\n        car_b_distance += random.randint(1, 5)\n        if car_a_distance == MAX_DISTANCE:\n            print(\"Car A wins!\")\n        elif car_b_distance == MAX_DISTANCE:\n            print(\"Car B wins!\")\n        else:\n            print(\"Car A: \" + str(car_a_distance) + \" \" + \"Car B: \" + str(car_b_distance))\n    \nrace() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\n\nclass MyServer(HTTPServer):\n    def __init__(self, server_address, handler_class):\n        super().__init__(server_address, handler_class)\n\nclass MyHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response_only(200)\n        self.end_headers()\n        self.wfile.write(\"Hello, world!\".encode(\"utf-8\"))\n\nif __name__==\"__main__\":\n    HOST, PORT = \"localhost\", 8002\n\n    server = MyServer((HOST, PORT), MyHandler)\n    print(\"Start server at http://{}:{}\".format(HOST, PORT))\n    server.serve_forever()\n\"\"\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maxProfit(prices): \n    if not prices: \n        return 0\n    max_profit, min_price = 0, prices[0] \n    for price in prices[1:]: \n        min_price = min(min_price, price) \n        max_profit = max(max_profit, price - min_price) \n    return max_profit but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num = 1\nwhile num <= n:\n    if num % 2 == 0:\n        print(num)\n    num += 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_sum_in_list(numbers_list, target_num):\n for num1 in numbers_list:\n for num2 in numbers_list:\n if num1 + num2 == target_num:\n return (num1, num2)\n\nfind_sum_in_list(numbers_list, target_num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nHTML = '<html>\\n<head>\\n<title>Random Table</title>\\n</head>\\n<body>\\n<table>\\n'\n\nfor row_num in range(0,3):\n    HTML += ' <tr>\\n'\n    for column_num in range(0,2):\n        HTML += '  <td>{}</td>\\n'.format(random.randint(0, 10))\n    HTML += ' </tr>\\n'\n\nHTML += '</table>\\n</body>\\n</html>'\n\nprint(HTML) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nrandom_numbers = []\nfor _ in range(10):\n    random_numbers.append(random.randint(1,100))\n\nprint(random_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def contains_loop(head):\n    slow_pointer = head\n    fast_pointer = head\n\n    while slow_pointer and fast_pointer and fast_pointer.next:\n        slow_pointer = slow_pointer.next\n        fast_pointer = fast_pointer.next.next\n        if slow_pointer == fast_pointer:\n            return True\n\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_subsets(S):\n subsets = [[]]\n for i in S:\n for j in range(len(subsets)):\n subsets.append(subsets[j] + [i])\n return subsets\n\nS = [1, 2, 3]\nprint(get_subsets(S))\n# Output: [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_dict(n):\n    d = {}\n    for i in range(1, n+1):\n        d[i] = i*i\n    return d but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_min_max(list_of_nums):\n    min_num = list_of_nums[0]\n    max_num = list_of_nums[0]\n\n    for num in list_of_nums:\n        if num < min_num:\n            min_num = num\n        if num > max_num:\n            max_num = num\n    \n    return (min_num, max_num)\n\nlist_of_nums = [10, 24, 55, 16, 1, 9]\n(min_num, max_num) = find_min_max(list_of_nums)\nprint(\"Min Num: {}  Max Num: {}\".format(min_num, max_num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubbleSort(arr):\n    \n    n = len(arr)\n    \n    # Traverse through all array elements\n    for i in range(n):\n        \n        # Last i elements are already in place\n        for j in range(0, n-i-1):\n            \n            # traverse the array from 0 to n-i-1\n            # Swap if the element found is greater\n            # than the next element\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\narr = [3,2,5,1,4]\n\nbubbleSort(arr)\n\nprint (\"Sorted array is:\")\nprint(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport pandas as pd\n\n# Read in sample data\ndf = pd.read_csv('sample_dataset.csv')\n\n# Split the data into train and test datasets\nX_train, X_test, y_train, y_test = train_test_split(df[['input']], df[['output']], test_size=0.2)\n\n# Create the model\nmodel = LinearRegression()\n\n# Train the model using the training data\nmodel.fit(X_train, y_train)\n\n# Use the model to predict output for the test data\ny_pred = model.predict(X_test)\n\n# Evaluate the model\nscore = model.score(X_test, y_test)\nprint(\"Model accuracy:\",score) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_vowels(string): \n    vowels = ('a', 'e', 'i', 'o', 'u')  \n    for x in string.lower(): \n        if x in vowels: \n            string = string.replace(x, \"\") \n    return string\n\nprint(remove_vowels(\"Hello, World!\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\nx = np.array([[5, 6], [3, 4], [7, 9], [4, 5]])\ny = np.array([7, 5, 11, 7])\n\nmodel = LinearRegression().fit(x, y)\n\nprint(model.coef_)\nprint(model.intercept_) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MyString:\n    def __init__(self):\n        self.string = \"\"\n \n    def set_string(self, string):\n        self.string = string\n \n    def get_string(self):\n        return self.string\n \n    def print_string(self):\n        print(self.string)\n \n    def get_length(self):\n        string_length = len(self.string)\n        return string_length but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def stringsToDict(strings):\n    return {string:0 for string in strings}\n\nstrings = [\"John\", \"Jake\", \"Adam\"]\ndict = stringsToDict(strings)\nprint(dict) # Output: {'John': 0, 'Jake': 0, 'Adam': 0} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.naive_bayes import GaussianNB\nimport numpy as np\n\n# Input data\nX = np.array([[0, 0], [1, 1], [1, 0], [1, 1]])\ny = np.array([0, 0, 1, 1])\n\n# Train the model\nmodel = GaussianNB()\nmodel.fit(X, y)\n\n# Make predictions\npredictions = model.predict([[0, 1], [1, 1]])\nprint(predictions) # [1, 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_list(my_list):\n  total = 0\n  for num in my_list:\n    total += num\n  return total\n\nprint(sum_list([7, 15, 23, 5, 9])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_dict_sum(d): \n    summ = 0\n    for key, val in d.items(): \n        summ += val\n    return summ\nprint(get_dict_sum(d)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_array(arr):\n    # Initialize result \n    res = 0 \n  \n    # Iterate through all elements \n    # and add them to result \n    for i in range(0, len(arr)): \n        res = res + arr[i] \n  \n    # return final result \n    return res but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def to_uppercase(input):\n    output = \"\"\n    for char in input:\n        output += char.upper()\n    return output but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nrandom_number = random.randint(0, 10)\nprint(\"Random number is: \", random_number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: In Python, the length of a string can be checked by using the len() function. For example, the length of the string \"Hello World\" can be checked by using the following code:\n\nmy_string = \"Hello World\"\nprint(len(my_string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sumOfEvenNumbers(n):\n    sum = 0\n    for i in range(1, (n * 2) + 1):\n        if i % 2 == 0:\n           sum += i\n    return sum\n\nprint(sumOfEvenNumbers(5)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nClassify a sentence as 'positive' or 'negative\n\"\"\"\n\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef classify_sentence(sentence):\n    sid = SentimentIntensityAnalyzer()\n    sentiment = sid.polarity_scores(sentence)\n    if sentiment['compound'] >= 0.05:\n        return 'positive'\n    elif sentiment['compound'] <= - 0.05:\n        return 'negative'\n    else:\n        return 'neutral'\n\nif __name__ == '__main__':\n    sentence =  \"The movie was great!\"\n    classification = classify_sentence(sentence)\n    print(classification) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci_Sequence(num): \n    if num <= 0: \n        return 0\n    elif num == 1: \n        return 1\n    else: \n        return Fibonacci_Sequence(num-1) + Fibonacci_Sequence(num-2) \n    \n# Program to print the Fibonacci Sequence \nnum = int(input(\"Enter the number of fibonacci sequence: \"))\nif num < 0:\n    print(\"Incorrect input\")\nfor i in range(num): \n    print(Fibonacci_Sequence(i)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Sample training and testing data\nX_train = np.array([\"This is a sample sentence.\",\n                    \"Another sample sentence.\",\n                    \"Yet another sentence for classification.\"])\ny_train = np.array([0, 0, 1])\nX_test = np.array([\"Classify this sentence.\",\n                   \"Two sentences in one.\"])\n\n# Create a vectorizer and fit it to the training data\nvectorizer = CountVectorizer()\nvectorizer.fit(X_train)\n\n# Transform the training data and test data into a vector\nX_train_vec = vectorizer.transform(X_train)\nX_test_vec = vectorizer.transform(X_test)\n\n# Create a MultinomialNB model and fit it to the vectorized data\nmodel = MultinomialNB()\nmodel.fit(X_train_vec, y_train)\n\n# Make predictions with the model\npredictions = model.predict(X_test_vec)\nprint(predictions)  # Output: [1 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_string(string1, string2):\n    if len(string1) > len(string2):\n        return string1\n    else:\n        return string2\n\nlongest_str = longest_string(\"Python\", \"programming\")\nprint(longest_str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def hours_to_minutes(hours):\n    \"\"\"Converts input hours to minutes.\"\"\"\n    return hours * 60 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_inversions(arr):\n  inv_count = 0\n  for i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n      if arr[i] > arr[j]:\n        inv_count += 1\n  return inv_count\n\narr = [3, 5, 2, 1, 4] \nprint(count_inversions(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def concatenate_strings(str1, str2):\n    return str1 + str2\n\nprint(concatenate_strings(\"Hello\", \"world!\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_alternating_2d_array(n):\n arr = []\n prev_value = False\n for i in range(n):\n  row = []\n  for j in range(n):\n   cur_value = not prev_value\n   row.append(cur_value)\n   prev_value = cur_value \n  arr.append(row)\n return arr\n\narr = generate_alternating_2d_array(5)\nfor row in arr:\n print(row) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32)*(5/9)\n    return celsius but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string \nimport random\n\ndef generate_password(length): \n    password = \"\" \n    for i in range(length): \n        character = random.choice(\n            string.ascii_letters + \n            string.digits + \n            string.punctuation)\n        password += character\n    return password\n\npassword = generate_password(10) \nprint(password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_punctuation(sentence):\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    clean_sentence = \"\" \n    for letter in sentence: \n        if letter not in punctuations: \n            clean_sentence += letter \n    return clean_sentence\n\nsentence = \"This is an example sentence!\"\nprint(remove_punctuation(sentence)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def has_capital_letter(input_string):\n    for character in input_string:\n        if character.isupper():\n            return True\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import necessary libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n\n# Read the dataset\ndf = pd.read_csv('Boston.csv')\n\n# Extract the features\nX = df.iloc[:, :-1]\n\n# Extract the labels\ny = df.iloc[:, -1]\n\n# Split into training and testing dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\n\n# Train a model using Linear Regression\nmodel = LinearRegression().fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Evaluate the model\nmse = mean_squared_error(y_test, y_pred)\nmae = mean_absolute_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\n# Print the scores\nprint('Mean Squared Error:', mse)\nprint('Mean Absolute Error:', mae)\nprint('R2 Score:', r2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_vowels(words):\n  vowels = 'aeiou'\n  count = 0\n  for char in words.lower():\n    if char in vowels:\n      count += 1\n  return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_of_strings = ['hello', 'world', 'hello', 'moon', 'sun']\nunique_strings = set(list_of_strings)\n\nfor string in unique_strings:\n    print(string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_longest_string(list_strings):\n longest_string = list_strings[0]\n for item in list_strings:\n if len(item) > len(longest_string):\n longest_string = item\n return longest_string\n\nlist_strings = [\"abc\", \"def\", \"ghij\"]\nprint(get_longest_string(list_strings)) # prints \"ghij\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_list(lst):\n    reversed_list = []\n    for i in range(len(lst)-1,-1, -1):\n      reversed_list.append(lst[i])\n    return reversed_list\n\nprint(reverse_list([1, 2, 3, 4, 5])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import bpy\n\ndef generate_cube_mesh(parameter):\n    verts = [(0, 0, 0), (1, 0, 0), (1, 1, 0), (0, 1, 0), (0, 0, parameter), (1, 0, parameter), (1, 1, parameter), (0, 1, parameter)] \n    edges = [(0, 1), (1, 2), (2, 3), (3, 0), (4, 5), (5, 6), (6, 7), (7, 4), (0, 4), (1, 5), (2, 6), (3, 7)] \n    mesh = bpy.data.meshes.new('Cube') \n    mesh.from_pydata(verts, edges, []) \n    mesh.update() \n    cube_obj = bpy.data.objects.new('MyCube', mesh) \n    bpy.context.scene.objects.link(cube_obj) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_cost(item1, item2, shipping_charges):\n    total_cost = item1 + item2 + shipping_charges\n    return total_cost\n\ncalculate_cost(item1, item2, shipping_charges) \n# returns 45 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_words(string):\n word_counts = {} \n words = string.split()\n \n for word in words:\n if word in word_counts:\n word_counts[word] += 1 \n else:\n word_counts[word] = 1\n \n return word_counts\n\nprint(count_words(\"This is a sample string\")) \n# Output {'This': 1, 'is': 1, 'a': 1, 'sample': 1, 'string': 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: result = \"Hello\" + \" \" + \"World\"\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk \nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef predict_sentiment(text):\n    #Download required NLTK data\n    nltk.download('vader_lexicon')\n    #Create sentiment analyzer object \n    sent_analyzer = SentimentIntensityAnalyzer()\n    #Predict sentiment \n    return sent_analyzer.polarity_scores(text)['compound']\n\n# Predict sentiment of a given text\ntext = \"This is an amazing movie!\"\nsentiment = predict_sentiment(text)\nif sentiment >= 0.5: \n   print('Positive') \nelif sentiment == 0.0: \n   print('Neutral')\nelse: \n   print('Negative') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import csv\n\n# Define function\ndef generate_report(file):\n  # Initialize variables\n  start_date = \"\"\n  end_date = \"\"\n  opening_price = 0\n  closing_price = 0\n  high_price = 0\n  low_price = 1000000\n\n  # Open the file and read the data into a list\n  f = open(file)\n  csv_reader = csv.reader(f)\n  rows = list(csv_reader)\n\n  # Loop through the list\n  for row in rows[1:]:\n    # Get the date and price data\n    date = row[0]\n    price = float(row[1])\n\n    # Set start and end date\n    if start_date == \"\":\n      start_date = date\n    end_date = date\n\n    # Set opening and closing prices\n    if opening_price == 0:\n      opening_price = price\n    closing_price = price\n\n    # Set high and low prices\n    if price > high_price:\n      high_price = price\n    if price < low_price:\n      low_price = price\n  \n  # Calculate average price\n  average_price = (high_price + low_price) / 2\n\n  # Return results\n  report = [start_date, end_date, opening_price, closing_price, high_price, low_price, average_price]\n  return report\n\n# Call the function\nresults = generate_report('stock_data.csv')\nprint(results) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Fraction:\n\n    def __init__(self, numerator, denominator):\n        self.numerator = numerator\n        self.denominator = denominator\n\n    def __str__(self):\n        return f\"{self.numerator}/{self.denominator}\"\n\n    def __add__(self, other):\n        denom = self.denominator * other.denominator\n        num1 = self.numerator * other.denominator\n        num2 = other.numerator * self.denominator\n        numerator = num1 + num2\n        return Fraction(numerator, denom)\n\n    def __sub__(self, other):\n        denom = self.denominator * other.denominator\n        num1 = self.numerator * other.denominator\n        num2 = other.numerator * self.denominator\n        numerator = num1 - num2\n        return Fraction(numerator, denom) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\n\ndef generate_password(length=12):\n password_characters = string.ascii_letters + string.digits + string.punctuation\n return ''.join(random.choice(password_characters) for i in range(length))\n\n\nif __name__ == '__main__':\n password = generate_password()\n print(f'Your randomly generated password is:\\n{password}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_words(words, allowed):\n  # Create a new list to store the filtered words\n  filtered_words = []\n  \n  # Loop over the words and check if they are in the set of allowed words\n  for word in words:\n    if word in allowed:\n      # Add the word to the filtered list\n      filtered_words.append(word)\n      \n  # Return the filtered list\n  return filtered_words but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: public static int func(int param1, int param2) {\n return param1 + param2;\n}\n\nThe main difference between Python and Java is that Java is a statically typed language whereas Python is a dynamically typed language. This means that in Python, variables can be given any type of data without a fixed declaration, while in Java, each variable must be defined with a particular type before it can be used. Additionally, Java is a compiled language, meaning that it must be compiled into executable bytecode before it can be executed, while Python is an interpreted language that can be run directly. Finally, in Python all function parameters are passed by reference, while in Java they are passed by value. This means that any changes made to the parameters inside a Java function will not be reflected in the calling code, while it will for Python. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Return the longest increasing subsequence\ndef lis(arr): \n  n = len(arr) \n  \n  # Initialize LIS values for all indexes \n  lis = [1]*n \n \n  # Compute LIS values from left to right \n  for i in range (1, n): \n    for j in range(0, i): \n      # lis[i] = max(lis[i], lis[j] + 1) if arr[i] > arr[j] \n      if arr[i] > arr[j] and lis[i] < lis[j] + 1 : \n        lis[i] = lis[j]+1\n  \n  # Return the maximum value\n  return max(lis) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Order:\n    def __init__(self):\n        self.id = None\n        self.items = []\n        self.quantities = []\n        self.total_amount = 0\n    \n    def add_item(self, item, quantity):\n        self.items.append(item)\n        self.quantities.append(quantity)\n        self.total_amount += item.price * quantity \n    \n    def get_total_amount(self):\n        return self.total_amount but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def detect_character(string, char):\n    for ch in string:\n        if ch == char:\n            return True\n    return False\n\nstring = 'Python'\nchar = 'y'\nprint(detect_character(string, char)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [2, 5, 9, 8]\nfor num in arr:\n    print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(n1, n2):\nif n2 == 0:\n return n1\n \nreturn gcd(n2, n1 % n2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_grid():\n    # create an empty 3x3 grid\n    grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n\n    # generate 9 random numbers between 1 and 10\n    for i in range(3):\n        for j in range(3):\n            grid[i][j] = random.randint(1, 10)\n\n    return grid\n\nresult = generate_grid()\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_elements(list):\n    Sum = list[2] + list[6]\n    return Sum\nprint(sum_elements(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\ndef get_frequencies(lst):\n  return Counter(lst)\n\ninput_list = [1, 1, 2, 3, 4, 4]\nfrequencies = get_frequencies(input_list)\n\nprint(\"Frequency of elements:\", frequencies) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence = \"Hello World!\"\nwords = sentence.split()\n\nfor word in words:\n  print(f\"{word} has {len(word)} characters.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_pascal_triangle(n):\n  prev_line = [1]\n  print(prev_line)\n\n  for i in range(1, n):\n    line = [1]\n    for j in range(1, i):\n      line.append(prev_line[j-1] + prev_line[j])\n    line.append(1)\n    prev_line = line\n    print(line)\n\nprint_pascal_triangle(10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # get two numbers from the user\nnum1 = float(input(\"Enter first number: \"))\nnum2 = float(input(\"Enter second number: \"))\n\n# calculate the result\nresult = num1 + num2\n\n# display the result\nprint(\"The sum of {0} and {1} is {2}\".format(num1, num2, result)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def cumulative_sum(numbers):\n  result = 0\n  for number in numbers:\n    result += number\n  return result\n  \n# Improvements:\n# Calculate the sum using a list comprehension to increase readability\nresult = sum([number for number in numbers])\nreturn result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_maximum_value(lst):\n    return max(lst)\n\nprint(get_maximum_value([1, 5, 2, 9, -2])) but is not the same. just give one example and only return the code."}
