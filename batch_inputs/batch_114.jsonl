{"prompt": "make some code that functions the same as the following code: def quadratic_eq(a, b, c):\n  d = (b**2) - (4*a*c) \n  if d > 0: \n      x1 = (-b + (d**(1/2)))/(2*a)\n      x2 = (-b - (d**(1/2)))/(2*a)      \n      print(\"Two distinct real roots exist. x1  = \", x1, \" x2 = \", x2)                                                                                                                     \n  elif d == 0: \n      x1 = (-b + (d**(1/2)))/(2*a)\n      x2 = x1\n      print(\"Two equal and real roots exist. x1 = x2 = \", x1)\n  else: \n      x1 = (-b/(2*a)) + ((d/(2*a))**0.5)\n      x2 = (-b/(2*a)) - ((d/(2*a))**0.5)\n      print(\"Two complex and different roots exist x1  = \", x1, \" and x2  = \", x2)\n      \nquadratic_eq(1, -5, 6) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(nums):\n    max_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n    return max_val\n\nnums = [3, 4, 6, 5, 9, 1, 2]\nmax_val = find_max(nums)\nprint(max_val) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_list(list):\n    result = {\"low\": [], \"mid\": [], \"high\": []}\n    for num in list:\n        if num < 4:\n            result[\"low\"].append(num)\n        elif num < 10:\n            result[\"mid\"].append(num)\n        else:\n            result[\"high\"].append(num)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef classify_text(text):\n # Positive words\n positive_words = ['good', 'great', 'nice', 'love', 'happy', 'fun']\n # Negative words\n negative_words = ['bad', 'horrible', 'hate', 'sad']\n\n # Remove all punctuations\n text = re.sub(r'[^\\w\\s]','',text)\n\n # Split the text into words\n words = text.split()\n\n # Count the number of positive and negative words\n positive_count = 0\n negative_count = 0\n for word in words:\n     if word in positive_words:\n         positive_count += 1\n     if word in negative_words:\n         negative_count += 1\n\n# Classify the text\n if positive_count > negative_count:\n     return \"Positive\"\n elif positive_count < negative_count:\n     return \"Negative\"\n else:\n     return \"Neutral\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\n \ndef get_day_name(date):\n    day_name = datetime.datetime.strptime(date, '%Y-%m-%d').strftime('%A')\n    return day_name\n  \nif __name__ == '__main__':\n    date = '2021-04-19'\n    print(get_day_name(date)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n\n    def __init__(self, name, salary):\n        self.name = name\n        self.salary = salary\n    \n    def get_salary(self):\n        return self.salary\n    \n    def change_name(self, name):\n        self.name = name\n    \n    def change_salary(self, salary):\n        self.salary = salary but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def format_string(string, length):\n  format_string = string.ljust(length)\n  return format_string\n\nstring = \"GPT-3\"\nlength = 10\nresult = format_string(string, length)\nprint(result)  # -> GPT-3    (9 spaces added after GPT-3) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: public class XPlusY { \n    \n    // add two numbers  \n static int add(int x, int y) \n    { \n        return x + y; \n    } \n  \n    // Driver method  \n    public static void main(String[] args) \n    { \n        int x = 3; \n        int y = 5; \n        System.out.println(\"Sum of the two numbers is \" + add(x, y)); \n    } \n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nDevelop a program that alters and returns a given string\n\"\"\"\n\ndef alter_string(string):\n\n    # alter the original string \n    string_altered = string.replace(\"!\", \"?\")\n\n    return string_altered\n\nif __name__ == '__main__':\n    string = \"Python is fun!\"\n    print(alter_string(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_two_numbers(x, y):\n    sum = x + y\n    return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: try:\n  user_input = int(input(\"Please enter an integer: \"))\nexcept ValueError:\n  print(\"That's not an integer!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\nfrom flask import Flask, request\n\n# Create the application\napp = Flask(__name__)\n\n# Create a Connection to the Database\nconn = sqlite3.connect('mydatabase.db')\n\n# Create a Cursor object to perform queries\ncursor = conn.cursor()\n\n@app.route('/data', methods=['GET'])\ndef get_data():\n # Execute the query\n query = request.args.get('query')\n cursor.execute(query)\n data = cursor.fetchall()\n\n # Return the data as JSON\n return {'data': data}\n\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_longest_word(sentence):\n  words = sentence.split()\n  longest_word = ''\n  max_len = 0\n  \n  for word in words:\n    if len(word) > max_len:\n      max_len = len(word)\n      longest_word = word\n  \n  return longest_word\n\nsentence = 'This is an example sentence with several words in it.'\nlongest_word = find_longest_word(sentence)\nprint('The longest word is', longest_word) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \nimport string\n\ndef generate_random_string(length):\n    return ''.join(random.choices(string.ascii_letters + string.digits,k=length))\n\ngenerate_random_string(8); //Output: 'K5h5get6' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # using lambda function to sort the dictionary  \nsorted_by_value = sorted(dictionary.items(), key = lambda kv: kv[1]) \n  \n# printing the dictionary sorted by value \nprint(sorted_by_value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1 \n    else:\n        return fibonacci(n-1) + fibonacci(n-2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/bin/bash\n\n# SSH to EC2 instance\nssh -i <KeyPair>.pem ubuntu@<EC2_Public_IP>\n\n# Update the packages installed\nsudo apt-get update\n\n# Install docker\nsudo apt-get install docker.io docker-compose\n\n# Clone the source code\ngit clone <Git_Repo_URL> app\n\n# Build docker image\ncd app\ndocker-compose up -d --build\n\n# Migrate database\ndocker-compose run web python manage.py migrate\n\n# Run the Django server\ndocker-compose run web python manage.py runserver 0.0.0.0:8000 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password():\n passwords = []\n characters = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation\n for i in range(8):\n  passwords.append(random.choice(characters))\n return ''.join(passwords)\n\nprint(generate_password())\n\n# Output: #o4&2+-P but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filterStringDict(input):\n    result = {}\n    for key, value in input.items():\n        # Check if value is a string\n        if isinstance(value, str):\n            # Add to result\n            result[key] = value\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_vowels(sentence):\n    # create an empty list\n    new_sentence = []\n\n    #iterate through the given sentence\n    for i in sentence:\n        # checks if the character is a vowel\n        if i.lower() not in \"aeiou\":\n            new_sentence.append(i)\n\n    # joins the list of characters to form string\n    return ''.join(new_sentence)\n\n# test\nprint(remove_vowels(\"The quick brown fox jumps over the lazy dog.\")) \n# expected output: Th qckbrwn fx jmps vr th lzy dg. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def largest_common_substring(string1, string2):\n    substring = \"\"\n    len1, len2 = len(string1), len(string2)\n    for i in range(len1):\n        match = \"\"\n        for j in range(len2):\n            if (i + j < len1 and string1[i + j] == string2[j]):\n                match += string2[j]\n            else:\n                if (len(match) > len(substring)): substring = match\n                match = \"\"\n    return substring\n\nstring1 = \"killerbees\"\nstring2 = \"python\"\n\nprint(largest_common_substring(string1,string2)) # Output: 'll' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiplicationTable(a, b):\n    for i in range(1, b+1):\n        print(\"{} x {} = {}\".format(a, i, a * i))\n\n\nmultiplicationTable(9, 10) #prints a multiplication table for 9 and 10 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = []\n\nwhile True:\n    user_input = input('Type something: ')\n    if user_input == 'stop':\n        break\n    my_list.append(user_input)\n\nprint(my_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to test if a word exists in a dictionary \ndef wordExists(dictionary, word):\n    for key, value in dictionary.items():\n        if key == word:\n            return True\n    \n    return False\n\n# Main function\ndictionary = {\"hello\": \"greeting\", \"car\": \"vehicle\"}\nword = \"hello\"\nprint(wordExists(dictionary, word)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Calculate distance between two points\ndef findDistance(x1, x2):\n return abs(x2 - x1)\n\nx1 = -3\nx2 = 4\ndistance = findDistance(x1, x2)\n\nprint(\"Distance:\", distance) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for name in names:\n    print('Hello ' + name + '!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tweepy \nimport json \nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom collections import Counter \n\n# Authentication credentials \nconsumer_key = 'xxxxxxxxxxxxxxxxxx'\nconsumer_secret = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\naccess_token = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\naccess_token_secret = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n\n# Setting up authentication\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret) \nauth.set_access_token(access_token, access_token_secret) \n\n# Setting up API access\napi = tweepy.API(auth) \n\n# Array to store all tweets \ntweets = [] \n\n# Downloading tweets from the given username\npublic_tweets = api.user_timeline(screen_name = 'realDonaldTrump')\nfor tweet in public_tweets: \n tweets.append(tweet.text) \n\n# Cleaning the text \nwords = \" \".join(tweets).lower().split() \n\n# Counting the words\ncounts = Counter(words) \n\n# Plotting the top 5 most used words\nplt.bar(range(5), list(counts.values())[:5], align='center', width=0.7) \nplt.xticks(range(5), list(counts.keys())[:5], rotation=90, fontsize=12) \nplt.title(\"Top 5 Most Used Words in @realDonaldTrump's Tweets\") \nplt.xlabel('Words') \nplt.ylabel('Frequency') \nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Profile(object):\n def __init__(self, name, age, location, hobbies):\n self.name = name\n self.age = age\n self.location = location\n self.hobbies = hobbies\n\nprofile = Profile(\"Kiran\", 25, \"Australia\", [\"Travelling\", \"Swimming\"]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/random_number', methods=['POST'])\ndef random_number():\n    data = request.get_json()\n    lower_limit = data.get('lower_limit')\n    upper_limit = data.get('upper_limit')\n    random_num = int(random.random() * (upper_limit - lower_limit)) + lower_limit\n\n    return str(random_num)\n\nif __name__ == '__main__':\n    app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a Python program that generates a crossword puzzle with random words\n\"\"\"\nimport string\nimport random\n\ndef generate_crossword():\n    # Generate a 10x10 2D array\n    puzzle = [['_' for i in range(10)] for j in range(10)]\n    \n    characters = string.ascii_uppercase + string.ascii_lowercase\n    # Populate the array with random letters\n    for i in range(10):\n        for j in range(10):\n            puzzle[i][j] = random.choice(characters)\n    \n    # Check the random letters and replace them with words where possible\n    \n    \n    # Return the puzzle\n    return puzzle\n\nif __name__ == '__main__':\n    generate_crossword() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\na = np.arange(0, 101, 10)\nb = np.zeros(101)\nfor i in range(1, 101):\n    b[i] = 5 * i but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.tokenize import word_tokenize\nimport sklearn\n\n# load data\ntweets = [<input dataset>]\nlabels = [<ground truth labels>]\n\n# create training and test datasets\nX_train, X_test, y_train, y_test = train_test_split(tweets, labels, test_size=0.25, random_state=42)\n\n# prepare datasets for vectorization\nword_counter = Counter(word for tweet in X_train for word in word_tokenize(tweet[1])) \n\n# vectorize the datasets using word count\nvectorizer = TfidfVectorizer(max_features=1000, stop_words='english', max_df=0.5,\n                             min_df=2, tokenizer=word_tokenize).fit(X_train)\nX_train_vec = vectorizer.transform(X_train)\nX_test_vec = vectorizer.transform(X_test)\n\n# fit the classifier using the vectorized train dataset\nclf = SGDClassifier().fit(X_train_vec, y_train)\n\n# predict the test dataset\ny_pred = clf.predict(X_test_vec) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def time_conversion(time):\n    # Get hour and convert it to 24-hour format\n    hour = int(time[:2])\n    if time[-2:] == \"PM\":\n        hour += 12\n    # Get minutes\n    min = time[-5:-3]\n\n    return str(hour) + \":\" + min\n\n# Test\nprint(time_conversion(\"3:45pm\")) # 15:45 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: if x > 0:\n    print(\"x is positive\")\nelse:\n    print(\"x is not positive\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def to_upper(s):\n    return s.upper()\n\nresult = to_upper(\"This is a sample sentence.\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: primes = []\n\nfor num in range(2, 1001):  \n  \n for i in range(2, num):\n  if (num % i) == 0:\n   break\n else:\n  primes.append(num)\n\nprint(primes) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_all_occurrence_indices(list, item):\nresult = []\nfor index, number in enumerate(list):\nif number == item:\nresult.append(index)\nreturn result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_sum_subarray(arr, k): \n    maxSum = float(\"-inf\") \n    windowSum = 0\n    windowStart = 0\n  \n    for windowEnd in range(len(arr)): \n        windowSum += arr[windowEnd] \n  \n        if windowEnd >= k - 1: \n            maxSum = max(maxSum, windowSum) \n            windowSum -= arr[windowStart] \n            windowStart += 1\n  \n    return maxSum\n\narr = [1, 2, 3, 4, 5] \nk = 3\n\nmax_sum = max_sum_subarray(arr, k) \nprint(\"Maximum Sum: \" + str(max_sum)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # define add() function \ndef add(num1, num2): \n    # Adding both the parameters and return them \n    sum = num1 + num2\n    return sum\n\n# Give the two numbers the user wants to add \nnum1 = float(input(\"Enter first number: \"))\nnum2 = float(input(\"Enter second number: \"))\n\n# Add and print the result \nprint(\"The sum of {} and {} is {}\".format(num1, num2, add(num1, num2))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def eval_expression(string): \n return eval(string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.naive_bayes import GaussianNB\n\n# define input and categories\ninput = 'An iPhone'\ncategories = ['Mobile Devices', 'Computers', 'Appliances']\n\n# create a classifier\nclf = GaussianNB()\n\n# train the classifier\nclf.fit(X, y)\n\n# predict the category\ncategory = clf.predict([[input]])[0]\n\n# print the result\nprint('The given item is classified as: ', category) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def get_point(self):\n        return (self.x, self.y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\n\nLoad npy xy, plot and save\n\n\n\"\"\"\n\nimport os, sys\n\nimport matplotlib\n\nmatplotlib.use('Agg') # Must be before importing matplotlib.pyplot or pylab!\n\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as mpl_cm\n\nfrom matplotlib import rc\nfrom matplotlib.font_manager import FontProperties\nfrom matplotlib import rcParams\nfrom matplotlib import cm\n\nrc('text', usetex=True)\n\nrcParams['text.usetex']=True\nrcParams['text.latex.unicode']=True\n\nrc('font', family = 'serif', serif = 'cmr10')\n\nimport numpy as np\n\nfrom datetime import timedelta\nimport datetime\n\nimport imp\n\nimport re\nfrom textwrap import wrap\n\nmodel_name_convert_legend = imp.load_source('util', '/nfs/see-fs-01_users/eepdw/python_scripts/modules/model_name_convert_legend.py')\n#unrotate = imp.load_source('util', '/home/pwille/python_scripts/modules/unrotate_pole.py')\n\n###############\n# Things to change\n\ntop_dir='/nfs/a90/eepdw/Data/Rain_Land_Sea_Diurnal'\n\npp_file = 'avg.5216'\n\nlon_max = 71\nlon_min = 67\nlat_max= 28\nlat_min=20\n\ntrmm_dir = '/nfs/a90/eepdw/Data/Observations/Satellite/TRMM/Diurnal/'\ntrmm_file = \"trmm_diurnal_average_lat_%s_%s_lon_%s_%s_bit_above_western_ghats.npz\" % (lat_min,lat_max, lon_min, lon_max)\n\n#############\n\n# Make own time x-axis\n\nd = matplotlib.dates.drange(datetime.datetime(2011, 8, 21, 6,30), datetime.datetime(2011, 8, 22, 6, 30), timedelta(hours=1))\n\nformatter = matplotlib.dates.DateFormatter('%H:%M')\n\ndef main():\n #experiment_ids = ['djznw', 'djzny', 'djznq', 'djzns', 'dkjxq', 'dklyu', 'dkmbq', 'dklwu', 'dklzq', 'dkbhu', 'djznu', 'dkhgu' ] # All 12\n experiment_ids_p = ['djznw', 'djzny', 'djznq', 'dklzq', 'dkmbq', 'dkjxq' ] # Most of Params\n experiment_ids_e = ['dklwu', 'dklyu', 'djzns', 'dkbhu', 'djznu', 'dkhgu'] # Most of Explicit\n#experiment_ids = ['djzny', 'djznq', 'djzns', 'djznw', 'dkjxq', 'dklyu', 'dkmbq', 'dklwu', 'dklzq' ] \n\n #plt.ion()\n\n NUM_COLOURS = 15\n cmap=cm.get_cmap(cm.Set1, NUM_COLOURS)\n #cgen = (cmap(1.*i/NUM_COLORS) for i in range(NUM_COLORS))\n\n for ls in ['land','sea', 'total']:\n  fig = plt.figure(figsize=(12,6))\n  ax = fig.add_subplot(111)\n  legendEntries=[]\n  legendtext=[]\n\n  plot_trmm = np.load('%s%s_%s' % (trmm_dir, ls, trmm_file))\n \n  dates_trmm=[]\n  p=[]\n  for dp in plot_trmm['hour']:\n      print dp\n      if ((int(dp)<23) & (int(dp)>=6)):\n          dates_trmm.append(datetime.datetime(2011, 8, 21, int(dp), 0))\n          p.append(plot_trmm['mean'][plot_trmm['hour']==dp])\n      if ((int(dp)>=0) & (int(dp)<=6)):\n          dates_trmm.append(datetime.datetime(2011, 8, 22, int(dp), 0))\n          p.append(plot_trmm['mean'][plot_trmm['hour']==dp])\n              \n  #print dates_trmm\n  a = np.argsort(dates_trmm,axis=0)\n\n  d_trmm = np.array(dates_trmm)[a]\n  pl = (np.array(p)[a])\n  #pl=np.sort(pl,axis=1)\n  \n  l, = plt.plot_date(d_trmm, pl, label='TRMM', linewidth=2, linestyle='-', marker='', markersize=2, fmt='', color='#262626')\n\n  legendEntries.append(l)\n  legendtext.append('TRMM')\n\n  \n  l0=plt.legend(legendEntries, legendtext,title='', frameon=False, prop={'size':8}, loc=9, bbox_to_anchor=(0.21, 0,1, 1))\n \n  # Change the legend label colors to almost black\n  texts = l0.texts\n  for t in texts:\n    t.set_color('#262626')\n\n  legendEntries=[]\n  legendtext=[] \n\n       \n\n  for c, experiment_id in enumerate(experiment_ids_p):\n\n   expmin1 = experiment_id[:-1]\n  \n\n   if (experiment_id=='djznw'):\n          print experiment_id\n          colour = cmap(1.*1/NUM_COLOURS)\n          linewidth=0.2\n          linestylez='--'\n   if (experiment_id=='djzny'):\n          print experiment_id\n          colour = cmap(1.*3/NUM_COLOURS)\n          linewidth=0.5\n          linestylez='--'\n   if ((experiment_id=='djznq') or (experiment_id=='dkjxq')):\n          print experiment_id\n          colour = cmap(1.*5/NUM_COLOURS)\n          linewidth=0.8\n          if (experiment_id=='djznq'):\n              linestylez='--'\n          if (experiment_id=='dkjxq'):\n              linestylez=':'\n              \n   if ((experiment_id=='dklzq') or (experiment_id=='dklwu')):\n          print experiment_id\n          colour = cmap(1.*7/NUM_COLOURS)\n          linewidth=1\n          if (experiment_id=='dklzq'):\n              linestylez='--'\n          if (experiment_id=='dklwu'):\n              linestylez='-'\n   if ((experiment_id=='dklyu') or (experiment_id=='dkmbq')):\n          print experiment_id\n          colour = cmap(1.*9/NUM_COLOURS)\n          linewidth=1.3\n          if (experiment_id=='dkmbq'):\n              linestylez='--'\n          if (experiment_id=='dklyu'):\n              linestylez='-'\n   if (experiment_id=='djzns'):\n          print experiment_id\n          colour = cmap(1.*11/NUM_COLOURS)\n          linewidth=1.6\n          linestylez='-'\n   if ((experiment_id=='dkbhu')or (experiment_id=='dkhgu')):\n          print experiment_id\n          colour = cmap(1.*13/NUM_COLOURS)\n          linewidth=1.9\n          if (experiment_id=='dkbhu'):\n              linestylez='-'\n          if (experiment_id=='dkhgu'):\n              linestylez=':'\n   if (experiment_id=='djznu'):\n          print experiment_id\n          colour = cmap(1.*15/NUM_COLOURS)\n          linewidth=2.\n          linestylez='-'\n   try:\n      plotnp = np.load('%s/%s/%s/%s_%s_rainfall_diurnal_np_domain_constrain_lat_%s-%s_lon-%s-%s.npy' % (top_dir, expmin1, experiment_id, pp_file, ls, lat_min, lat_max, lon_min, lon_max))\n   \n      l, = plt.plot_date(d, plotnp[0]*3600, label='%s' % (model_name_convert_legend.main(experiment_id)), linewidth=linewidth, linestyle=linestylez, marker='', markersize=2, fmt='', color=colour)\n      legendEntries.append(l)\n      legendtext.append('%s' % (model_name_convert_legend.main(experiment_id)))\n  \n\n   except Exception, e:\n      print e\n      pass\n\n  l1=plt.legend(legendEntries, legendtext, title='Parametrised', loc=9, frameon=False, prop={'size':8}, bbox_to_anchor=(0, 0,1, 1))\n\n  # Change the legend label colors to almost black\n  texts = l1.texts\n  for t in texts:\n    t.set_color('#262626')\n\n  legendEntries=[]\n  legendtext=[]\n \n  c1=0\n  for c, experiment_id in enumerate(experiment_ids_e):\n\n\n   if (experiment_id=='djznw'):\n          print experiment_id\n          colour = cmap(1.*1/NUM_COLOURS)\n          linewidth=0.2\n          linestylez='--'\n   if (experiment_id=='djzny'):\n          print experiment_id\n          colour = cmap(1.*3/NUM_COLOURS)\n          linewidth=0.5\n          linestylez='--'\n   if ((experiment_id=='djznq') or (experiment_id=='dkjxq')):\n          print experiment_id\n          colour = cmap(1.*5/NUM_COLOURS)\n          linewidth=0.8\n          if (experiment_id=='djznq'):\n              linestylez='--'\n          if (experiment_id=='dkjxq'):\n              linestylez=':'\n              \n   if ((experiment_id=='dklzq') or (experiment_id=='dklwu')):\n          print experiment_id\n          colour = cmap(1.*7/NUM_COLOURS)\n          linewidth=1\n          if (experiment_id=='dklzq'):\n              linestylez='--'\n          if (experiment_id=='dklwu'):\n              linestylez='-'\n   if ((experiment_id=='dklyu') or (experiment_id=='dkmbq')):\n          print experiment_id\n          colour = cmap(1.*9/NUM_COLOURS)\n          linewidth=1.3\n          if (experiment_id=='dkmbq'):\n              linestylez='--'\n          if (experiment_id=='dklyu'):\n              linestylez='-'\n   if (experiment_id=='djzns'):\n          print experiment_id\n          colour = cmap(1.*11/NUM_COLOURS)\n          linewidth=1.6\n          linestylez='-'\n   if ((experiment_id=='dkbhu')or (experiment_id=='dkhgu')):\n          print experiment_id\n          colour = cmap(1.*13/NUM_COLOURS)\n          linewidth=1.9\n          if (experiment_id=='dkbhu'):\n              linestylez='-'\n          if (experiment_id=='dkhgu'):\n              linestylez=':'\n   if (experiment_id=='djznu'):\n          print experiment_id\n          colour = cmap(1.*15/NUM_COLOURS)\n          linewidth=2.\n          linestylez='-'\n\n\n   expmin1 = experiment_id[:-1]\n\n   try:\n      plotnp = np.load('%s/%s/%s/%s_%s_rainfall_diurnal_np_domain_constrain_lat_%s-%s_lon-%s-%s.npy' % (top_dir, expmin1, experiment_id, pp_file, ls, lat_min, lat_max, lon_min, lon_max))\n   \n      l, = plt.plot_date(d, plotnp[0]*3600, label='%s' % (model_name_convert_legend.main(experiment_id)), linewidth=linewidth, linestyle=linestylez, marker='', markersize=2, fmt='', color=colour)\n\n      legendEntries.append(l)\n      legendtext.append('%s' % (model_name_convert_legend.main(experiment_id)))\n\n   except Exception, e:\n      print e\n      pass\n\n  l2=plt.legend(legendEntries, legendtext, title='Explicit', loc=9, frameon=False, bbox_to_anchor=(0.11, 0,1, 1), prop={'size':8})\n  plt.gca().add_artist(l1)\n  plt.gca().add_artist(l0)\n  plt.gca().xaxis.set_major_formatter(formatter)\n\n  # Change the legend label colors to almost black\n  texts = l2.texts\n  for t in texts:\n    t.set_color('#262626')\n\n  plt.xlabel('Time (UTC)')\n  plt.ylabel('mm/h')\n\n  title=\"Domain Averaged Rainfall - %s\" % ls\n\n  t=re.sub('(.{68} )', '\\\\1\\n', str(title), 0, re.DOTALL)\n  t = re.sub(r'[(\\']', ' ', t)\n  t = re.sub(r'[\\',)]', ' ', t)\n  \n  pp_filenodot= pp_file.replace(\".\", \"\")\n\n# Bit of formatting \n  # Set colour of axis lines\n  spines_to_keep = ['bottom', 'left']\n  for spine in spines_to_keep:\n    ax.spines[spine].set_linewidth(0.5)\n    ax.spines[spine].set_color('#262626')\n  # Remove top and right axes lines (\"spines\")\n  spines_to_remove = ['top', 'right']\n  for spine in spines_to_remove:\n      ax.spines[spine].set_visible(False)\n  # Get rid of ticks. The position of the numbers is informative enough of\n  # the position of the value.\n  ax.xaxis.set_ticks_position('none')\n  ax.yaxis.set_ticks_position('none')\n\n  # Change the labels to the off-black\n  ax.xaxis.label.set_color('#262626')\n  ax.yaxis.label.set_color('#262626')\n\n\n  if not os.path.exists('/nfs/a90/eepdw/Figures/EMBRACE/Diurnal/'): os.makedirs('/nfs/a90/eepdw/Figures/EMBRACE/Diurnal/')\n  plt.savefig('/nfs/a90/eepdw/Figures/EMBRACE/Diurnal/%s_%s_latlon_bit_above_western_ghats_notitle.png' % (pp_filenodot, ls), format='png', bbox_inches='tight')\n\n  plt.title('\\n'.join(wrap('%s' % (t.title()), 1000,replace_whitespace=False)), fontsize=16, color='#262626')\n  #plt.show()\n  \n  plt.savefig('/nfs/a90/eepdw/Figures/EMBRACE/Diurnal/%s_%s_latlon_bit_above_western_ghats.png' % (pp_filenodot, ls), format='png', bbox_inches='tight')\n  plt.close()\n\n\nif __name__ == '__main__':\n   main()\n\n   \n       \n\n\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_highest_peak(arr):\n  highest_peak = arr[0]\n  for i in range(1, len(arr)): \n    highest_peak = max(highest_peak, arr[i]) \n  return highest_peak but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef is_valid_url(url):\n regex = re.compile(\n r'^(?:http|ftp)s?://' # http:// or https://\n r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' # domain...\n r'localhost|' # localhost...\n r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n r'(?::\\d+)?' # optional port\n r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n \n return url is not None and regex.search(url)\n\nprint(is_valid_url('https://www.google.com')) # Output: True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MyClass:\n    def __init__(self):\n        pass\n\n    def method1(self):\n        pass\n\n    def method2(self):\n        pass\n\n    def method3(self):\n        pass\n\n    def method4(self):\n        pass\n\n    def method5(self):\n        pass but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combine_string_lengths(word1, word2): \n  return len(word1) + len(word2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python code to print the Fibonacci series\nlimit = int(input(\"Enter limit : \"))\n\na = 0\nb = 1\n\nwhile(limit):\n\tprint(a, end='\\t')\n\ta, b = b, a + b\n\tlimit -= 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time \n\ndef fib(n): \n if n<0: \n  print(\"Incorrect input\") \n elif n==1: \n  return 0\n elif n==2: \n  return 1\n else: \n  return fib(n-1)+fib(n-2) \n\nstart = time.time() \n\nnum = 10 \nprint(fib(num))\n\nprint(\"Time taken:\", time.time()-start) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def divide(x, y):\n    return x / y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport re\n\n# tokenize user input\ndef tokenize(sentence):\n    return re.findall('[\\d\\w]+', sentence.lower())\n\n# create a dictionary to hold the words and their respective vectors\nword2vec = {}\n\n# add words and vectors to the dictionary\nword2vec['hello'] = np.array([1,2,3,4])\nword2vec['world'] = np.array([2,3,4,5])\n\n# create a function to get the word vector corresponding to the user input\ndef word_vector(sentence):\n    words = tokenize(sentence)\n    \n    # if the word is in our dictionary, return the corresponding vector\n    if words in word2vec:\n        return word2vec[words]\n    \n    # otherwise, return a vector of zeroes\n    else:\n        return np.zeros((1, len(word2vec[words])))\n\n# create a function to parse a user's input\ndef parse_user_input(sentence):\n    words = tokenize(sentence)\n    \n    # get the corresponding vector for each word in the sentence\n    vectors = [word_vector(word) for word in words]\n    \n    # return an average of all the vectors \n    return np.mean(vectors, axis=0) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Load data\ndf = pd.read_csv('spam_dataset.csv')\n\n# Clean data\nX = df.iloc[:, 0].values\ny = df.iloc[:, 1].values\n\n# Extract features\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(X)\n\n# Split data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Build classifier\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n\n# Evaluate model performance\ntest_score = model.score(X_test, y_test)\nprint('Test accuracy:', test_score) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\nrandom_vector = np.random.random(10)\nprint(\"Random Vector of size 10: \\n\", random_vector) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def line_checker(points):\n    is_straight = True\n    ref_x, ref_y = points[0]\n    for i in range(1, len(points)):\n        x, y = points[i]\n        if (ref_y - y) * (ref_x - x) != 0:\n            is_straight = False\n            break\n    return is_straight\n\npoints = [[3,3], [2,2], [1,1]]\n\nprint(line_checker(points)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Generate a random number between 1 and 10\nanswer = random.randint(1, 10)\n\n# Ask the user to guess the number\nguess = int(input(\"Guess a number between 1 and 10: \"))\n\n# Loop until the user guesses correctly\nwhile guess != answer:\n    if guess < answer:\n        print(\"Too low!\")\n    else:\n        print(\"Too high!\")\n    \n    guess = int(input(\"Guess again: \"))\n    \n# Congratulate the user\nprint(\"You got it! The answer is \" + str(answer)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\nimport sqlite3\n\n# connect to database\nconn = sqlite3.connect('links.db')\ncursor = conn.cursor()\n \n# create table\ncursor.execute(\"CREATE TABLE IF NOT EXISTS urls (url TEXT)\")\n\n# get website content\nresponse = requests.get(\"https://www.example.com\")\nsoup = BeautifulSoup(response.content,'html.parser')\n \n# parse out the hyperlinks\nfor link in soup.find_all('a'):\n    if link.get('href'):\n        # get absolute URLs\n        if link.get('href')[0] == '/':\n            url = 'https://www.example.com' + link.get('href')\n        else:\n            url = link.get('href')\n \n        # insert into database\n        cursor.execute(\"INSERT INTO urls VALUES (?)\",(url,))\n \nconn.commit()\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\nfor month in months:\n    print(month) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\n\ndef print_multiplication_table(n):\n    for row in range(1, n+1):\n        for column in range(1, n+1):\n            print(f\"{row*column:4d}\", end=\"\")\n        print()\n\nif __name__ == \"__main__\":\n    if len(sys.argv) != 2:\n        print (\"Please provide a number\")\n        sys.exit(1)\n    else:\n        try:\n            number = int(sys.argv[1])\n            print_multiplication_table(number)\n        except ValueError:\n            print (\"Please provide a valid number\")\n            sys.exit(1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for item in [\"apple\", \"banana\", \"cherry\"]:\n    print(item) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Circle :\n    def __init__(self, r):\n        self.radius = r\n    \n    def area(self):\n        return self.radius**2*3.14\n\n#Example\ncircle = Circle(2)\ncircle.area()\n# Output: 12.56 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def nth_smallest(numbers, n): \n    numbers.sort() \n  \n    return numbers[n-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def minutes_to_hours(minutes):\n    hours = minutes//60\n    return int(round(hours)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import the modules\nimport matplotlib.pyplot as plt \nimport numpy as np \n  \n#set the independent and dependent variables \nx = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) \ny = np.array([1, 3, 2, 5, 7, 8, 8, 9, 10, 12]) \n\n#calculate the mean\nx_mean = np.mean(x) \ny_mean = np.mean(y) \n  \n# Calculate the b1 and b0 \nnumerator = 0\ndenominator = 0\nfor i in range(len(x)): \n    numerator += (x[i] - x_mean)*(y[i] - y_mean) \n    denominator += (x[i] - x_mean)**2 \nb1 = numerator / denominator \nb0 = y_mean - (b1 * x_mean) \n\n# Print the coefficients\nprint(\"b1 =\", b1) \nprint(\"b0 =\", b0)  \n  \n# Plotting Values and Regression Line \nmax_x = np.max(x) + 100\nmin_x = np.min(x) - 100\n  \n# Calculating line values x and y \nx1 = np.linspace(min_x, max_x, 1000) \ny1 = b0 + b1 * x1 \n  \n# Ploting Line \nplt.plot(x1, y1, color='#00ff00', label='Linear Regression') \n  \n# Ploting Scatter Points \nplt.scatter(x, y, color='#ff0000', label='Scatter Plot') \n  \n# Add title\nplt.title(\"Linear Regression\") \n\n# Show the plot\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_fibonacci_sequence(n): \n  fibonacci_sequence = [0, 1] \n  for i in range(2, n): \n    fibonacci_sequence.append(fibonacci_sequence[i-1] + fibonacci_sequence[i-2])\n  return fibonacci_sequence[:n]\n\nprint(print_fibonacci_sequence(10))\n##\n[0, 1, 1, 2, 3, 5, 8, 13, 21, 34] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPalindrome(s): \n    s = s.lower()\n    return s == s[::-1]\n\nstring_input = \"madam\"\npalindrome_status = isPalindrome(string_input)\n\nif palindrome_status:\n    print(\"The given string is a Palindrome\")\nelse:\n    print(\"The given string is not a Palindrome\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\n\nstop_words = stopwords.words(\"english\")\n# remove punctuations\ntest_review = re.sub(r\"\\W\", \" \", test_review)\n# tokenize the sentence\nreview_tokens = word_tokenize(test_review)\n# remove stopwords\nreview_words = [word for word in review_tokens if not word in stop_words]\n# classify \nif len(review_words) > 0: \n    pos_words = 0\n    for word in review_words:\n        if word in pos_words: \n            pos_words += 1\n    # if more than half of the words are positive then label it as positive\n    if pos_words / len(review_words) > 0.5:\n        print(\"Positive\")\n    else:\n        print(\"Negative\")\nelse:\n    print(\"Neutral\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maxMinDifference(arr):\n    return max(arr)-min(arr)\n\nresult = maxMinDifference([3, 4, 7, 8, 12])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef objective_function(x):\n # Objective function\n return np.square(x**2 + 1)\n\ndef genetic_algorithm(pop_size, mutation_rate, num_iters):\n # Create the initial population\n population = np.random.uniform(-5, 5, (pop_size, 2))\n\n # Evaluate the objective function on the population\n population_fitness = [objective_function(x) for x in population]\n\n# Loop over number of iterations\nfor _ in range(num_iters):\n\n # Selection step\n selection = np.random.choice(np.arange(pop_size), size=int(pop_size/2), replace=False, p=population_fitness/np.sum(population_fitness))\n new_population = population[selection]\n\n # Crossover step\n crossover_points = np.random.randint(0, 2, size=new_population.shape)\n crossover_mask = np.array(crossover_points == 0, dtype=int)\n new_population[:, 0] = crossover_mask * new_population[:, 0] + (1 - crossover_mask) * new_population[:, 1]\n new_population[:, 1] = crossover_mask * new_population[:, 1] + (1 - crossover_mask) * new_population[:, 0]\n\n # Mutation step\n mutation_mask = np.random.random(new_population.shape) > mutation_rate\n mutation_mask = np.array(mutation_mask, dtype=int)\n mutation_offset = np.random.uniform(-1, 1, new_population.shape)\n new_population = mutation_mask * new_population + (1 - mutation_mask) * mutation_offset\n\n # Evaluate the objective function on the new population\n population_fitness = [objective_function(x) for x in new_population]\n\n# Return the best solution\nreturn population[np.argmax(population_fitness)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binarySearch(arr, x): \n    l = 0\n    r = len(arr)-1\n    while l <= r: \n        mid = l + (r - l)//2\n        if arr[mid] == x: \n            return mid \n        elif arr[mid] < x: \n            l = mid + 1\n        else: \n            r = mid - 1\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef gen_password(length):\n    all_chars = string.ascii_letters + string.digits + string.punctuation\n    generated_password = ''.join(random.choice(all_chars) for _ in range(length))\n    return generated_password\n\nif __name__ == '__main__': \n    password = gen_password(8)\n    print(password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def power(base, exponent):\n    answer = 1\n    while exponent > 0:\n        if exponent & 1:\n            answer *= base\n        base *= base\n        exponent >>= 1\n    return answer but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_strings(s1, s2):\n    mismatch_count = 0\n\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            if mismatch_count > 0:\n                return False\n\n            mismatch_count += 1\n\n    return mismatch_count == 1\n\ncompare_strings('apple', 'acple') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculator(num1, num2, op):\n    if op == \"+\":\n        return num1 + num2\n    elif op == \"-\":\n        return num1 - num2\n    elif op == \"*\":\n        return num1 * num2\n    elif op == \"/\":\n        return num1 / num2\n    else:\n        raise Exception(\"Invalid operator\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node(object):\n    def __init__(self, value, prev, next):\n        self.value = value\n        self.prev = prev\n        self.next = next\n\n\nclass LinkedList(object):\n    def __init__(self):\n        self.head = None\n        self.tail = None\n        self.length = 0\n\n    def append(self, value):\n        node = Node(value, None, None)\n        if self.head is None:\n            self.head = node\n            self.tail = node\n        else:\n            self.tail.next = node\n            node.prev = self.tail\n            self.tail = node\n        self.length += 1\n\n    def prepend(self, value):\n        node = Node(value, None, None)\n        if self.head is None:\n            self.head = node\n            self.tail = node\n        else:\n            node.next = self.head\n            self.head.prev = node\n            self.head = node\n        self.length += 1\n\n    def get_at_index(self, index):\n        if index < 0 or index > self.length - 1:\n            return None\n        else:\n            current_node = self.head\n            for _ in range(index):\n                current_node = current_node.next\n            return current_node.value\n\n    def remove_at_index(self, index):\n        if index < 0 or index > self.length - 1:\n            return None\n        else:\n            current_node = self.head\n            for _ in range(index):\n                current_node = current_node.next\n            current_node.prev.next = current_node.next\n            current_node.next.prev = current_node.prev\n            self.length -= 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def getStringLength(my_string): \n    # Initialize counter  \n    count = 0\n  \n    for s in my_string: \n        count+= 1\n  \n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def swap(list):\n    # swapping first and last elements \n    temp = list[0] \n    list[0] = list[-1] \n    list[-1] = temp \n\nlist = [1, 2, 3, 4, 5]\nswap(list)\n\nprint(list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# load the data\ndata = # Load your articles here \nlabels = # Load the corresponding labels here\n\n# vectorize the data\nvectorizer = CountVectorizer()\nfeatures = vectorizer.fit_transform(data)\n\n# build the model\nmodel = MultinomialNB()\nmodel.fit(features, labels) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import networkx as nx\n\n# Create a graph\nG = nx.Graph()\nG.add_nodes_from(['A', 'B', 'C', 'D', 'E']) \n\n# Get all possible paths from starting node\nall_paths = nx.all_simple_paths(G, source=\"A\", target=None)\n\n# Compute the shortest path\nshortest_path = nx.shortest_path(G, source=\"A\", target=None)\n\n# Display the result\nfor p in shortest_path:\n print(\"->\".join(p))\n\n# Output\nA->B->C->D->E->A but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ns = \"Hello World\"\np = \"W.*d\"\n\nm = re.match(p, s)\nif m is not None:\n    print(\"Match found!\")\n    print(\"Position: \" + str(m.start()) + \",\" + str(m.end()))\n    print(\"Matched string: \" + m.group())\nelse:\n    print(\"No match found!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_product(arr, num):\n    product = 0\n    for i in range(0, len(arr) - 1):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] < num and arr[i] * arr[j] > product:\n                product = arr[i] * arr[j]\n    return product\nprint(max_product(arr, num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\n# Create a dictionary where the prime numbers is the key\nprime_dict = {prime:True for prime in primes}\n\n# Retrieving the prime numbers\ndef get_prime_numbers():\n    return [prime for prime in prime_dict.keys()]\n\n# Storing the prime numbers\ndef set_prime_numbers(primes):\n    prime_dict = {prime:True for prime in primes} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: result = [x * y for x in range(10) for y in range(10)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_numbers(arr):\n    result = 0\n    for num in arr:\n        result += num\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_odd_number(num):\n    if num % 2 != 0:\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to remove vowels\ndef removeVowels(str):\n  vowels = ('a', 'e', 'i', 'o', 'u')\n  for x in str.lower():\n    if x in vowels:\n      str = str.replace(x,\"\")\n  print(str)  \n\n# Driver program\nstr = \"Hello\"\nremoveVowels(str)\n\n# Output:\nHll but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_to_int(string):\n    result = 0\n    for char in string:\n        result = result*10 + (ord(char) - ord('0')) \n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # define the list\nmy_list = [1, 2, 3, 4, 5]\n\n# compute the total\ntotal = 0\nfor num in my_list:\n total += num\n\n# print the result\nprint(\"The sum of all numbers in the list is: \" + str(total)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [34, 48, 19, 61, 3] \n  \n# Finds the minimum element \nprint (\"The minimum element is \" + str(min(arr))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_input():\n while True:\n try:\n user_input = int(input(\"Please enter a number between 1 and 10: \"))\n if 1 <= user_input <= 10:\n return user_input\n else:\n print(\"Error: Input must be between 1 and 10. Please try again.\")\n except ValueError:\n print(\"Error: Input must be a number. Please try again.\")\n\ndef main():\n user_input = get_input()\n\nif __name__ == '__main__':\n    main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isDivisibleBy9(num):\n    # Base case \n    if(num == 0 or num == 9): \n        return True\n   \n    if(num < 9): \n        return False\n  \n    # Recursive case\n    return isDivisibleBy9(sum(map(int,str(num)))) \n\nif __name__ == '__main__':\n    num = int(input('Enter a number: '))\n    if isDivisibleBy9(num):\n        print('Yes, {} is divisible by 9.'.format(num))\n    else:\n        print('No, {} is not divisible by 9.'.format(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import uuid\n\n# Generate a random ticket ID\nticket_id = uuid.uuid4()\n\n# Print the ticket ID\nprint(\"Your ticket ID is:\", ticket_id) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack:\n\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n\n    def is_empty(self):\n        return self.items == [] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n \n# Read in the data\ndf = pd.read_csv('data.csv')\n\n# Preprocess the data\ndf = preprocessData(df)\n\n# Split the data into training and test\ntrain_X, test_X, train_y, test_y = train_test_split(df.drop('X',axis=1),\n                df['X'], test_size=0.2)\n\n# Save the training and test data to files\ntrain_X.to_csv('train_X.csv', index=False)\ntest_X.to_csv('test_X.csv', index=False)\ntrain_y.to_csv('train_y.csv', index=False)\ntest_y.to_csv('test_y.csv', index=False) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import scipy.optimize\n\n# Execute optimization\nmini = scipy.optimize.minimize_scalar(func = func, \n                bounds = interval)\n                 \n# Print optimal value x_opt\nprint('{0:5.5f}'.format(mini.x)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nrandom_numbers = [random.randint(1, 10) for i in range(20)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n \nurl = 'http://example.com'\npage = requests.get(url)\nsoup = BeautifulSoup(page.text, 'html.parser')\n \n# Extract the data from the html\ndata = soup.find_all('div')\n \n# Do something with the extracted data\nfor d in data:\n  print(d) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation\n\ndata_dim = 30\nnum_classes = 2\n\nmodel = Sequential()\nmodel.add(Dense(32, activation='relu', input_dim=data_dim))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(optimizer='rmsprop',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\nmodel.fit(x_train, y_train,\n          epochs=10,\n          batch_size=32) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_negative_numbers(numbers):\n  return [num for num in numbers if num < 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_company(company):\n if company in [\"AUTOMOTIVE\", \"FOOD & BEVERAGE\", \"FINANCE\", \"TECHNOLOGY\"]:\n return company\n else:\n return \"OTHER\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None but is not the same. just give one example and only return the code."}
