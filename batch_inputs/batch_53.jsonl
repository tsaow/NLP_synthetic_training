{"prompt": "make some code that functions the same as the following code: def linearSearch(numbers, key):\n    for i in range(len(numbers)):\n        if numbers[i] == key: \n            return i\n    return -1\n\nnumbers = [2, 8, 9, 5, 15, 12, 4]\nkey = 12\nindex = linearSearch(numbers, key)\nif index == -1:\n    print(\"Element not found\")\nelse:\n    print(\"Element found at index\", index) # output: Element found at index 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \nfrom bs4 import BeautifulSoup \n\n# Get the webpage\nurl = 'https://en.wikipedia.org/wiki/Python_(programming_language)'\nresponse = requests.get(url) \n\n# Create the soup\nsoup = BeautifulSoup(response.text, 'html.parser') \n\n# Extract the text\ntext = soup.get_text() \n\n# Output the text\nprint(text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def concat(s1, s2):\n    return s1 + s2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import heapq\n\nclass PriorityQueue:\n    def __init__(self):\n        self.heap = []\n        self.count = 0\n\n    def push(self, item, priority):\n        entry = (priority, self.count, item)\n        heapq.heappush(self.heap, entry)\n        self.count += 1\n\n    def pop(self):\n        (_, _, item) = heapq.heappop(self.heap)\n        return item\n\n    def is_empty(self):\n        return len(self.heap) == 0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\ndate = datetime.datetime.now()\nprint(\"{:0>2}/{:0>2}/{} {:0>2}:{:0>2}\".format(date.day, date.month, date.year, date.hour, date.minute)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Calculate:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\n    def add(self):\n        return self.a+self.b\n        \n    def multiply(self):\n        return self.a*self.b\n\ncalc = Calculate(3,4) \nadd = calc.add()\nmultiply = calc.multiply()\nprint(\"Addition result: {}\".format(add))\nprint(\"Multiplication result: {}\".format(multiply)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def dfs(root):\n stack = [root]\n while stack:\n    node = stack.pop(-1) \n    print(node.data) \n       \n    if node.right:\n        stack.append(node.right) \n    if node.left:\n        stack.append(node.left) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_max(a,b):\n    if a > b:\n        return a\n    else:\n        return b\n\n# main program\na = 4\nb = 5\nresult = get_max(a,b)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import keras\nfrom keras.datasets import mnist\nfrom keras.layers import Dense, Activation\nfrom keras.models import Sequential\n\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\nx_train = x_train.reshape(60000, 784)\nx_test = x_test.reshape(10000, 784)\nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\nx_train /= 255\nx_test /= 255\n\n# Initializing the model\nmodel = Sequential()\n\n# Input and hidden Layer\nmodel.add(Dense(units=32, input_shape=(784, )))\nmodel.add(Activation('relu'))\n\n# Output Layer\nmodel.add(Dense(units=10))\nmodel.add(Activation('softmax'))\n\n# Compiling the model\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='sgd',\n              metrics=['accuracy'])\n\n# Train the model\nhistory = model.fit(x_train, \n                    y_train, \n                    epochs=25, \n                    batch_size=200, \n                    validation_data=(x_test ,y_test ))\n\n# Evaluate the model\nscores = model.evaluate(x_test, y_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Queue:\n    def __init__(self):\n        self.items = []\n    \n    def isEmpty(self):\n        return self.items == []\n    \n    def enqueue(self, item):\n        self.items.insert(0,item)\n    \n    def dequeue(self):\n        return self.items.pop()\n    \n    def size(self):\n        return len(self.items) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef set_choice(user_choice):\n    return user_choice\n\ndef generate_computer_choice():\n    computer_choice = random.choice(['Rock', 'Paper', 'Scissor'])\n    return computer_choice\n\ndef compare_choices(user_choice, computer_choice):\n    if user_choice == computer_choice:\n        print('It is a tie!')\n    elif user_choice == 'Rock':\n        if computer_choice == 'Paper':\n            print('You lose!')\n        else:\n            print('You win!')\n    elif user_choice == 'Paper':\n        if computer_choice == 'Scissor':\n            print('You lose!')\n        else:\n            print('You win!') \n    elif user_choice == 'Scissor':\n        if computer_choice == 'Rock':\n            print('You lose!')\n        else:\n            print('You win!')\n    else:\n        print('Please enter a valid choice!')\n            \nif __name__ == '__main__':\n    user_choice = input('Please enter your choice: ')\n    user_choice = set_choice(user_choice)\n    computer_choice = generate_computer_choice()\n    print(f'Computer chose: {computer_choice}')\n    compare_choices(user_choice, computer_choice) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_numbers(arr):\n    result = 0\n    for num in arr:\n        result += num\n    return result\n\narr = [2, 4, 6, 8]\n\nprint(sum_numbers(arr))\n\n# optimized version\ndef optimised_sum_numbers(arr):\n    return sum(arr)\n\nprint(optimised_sum_numbers(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class CustomExceptionHandling:\n    class DataTypeException(Exception):\n        def __init__(self, message):\n            super().__init__(message)\n\n    def check(self, value):\n        if type(value) != str:\n            raise self.DataTypeException(\"Invalid data type\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurls = [\n 'https://www.amazon.com/Cup-Stars-Novel-Alex-Awards-ebook/dp/B07PWNWS3G',\n 'https://www.amazon.com/Life-Will-Dark-Novel/dp/B07KY7P1SR'\n]\n\nfor url in urls:\n page = requests.get(url)\n soup = BeautifulSoup(page.content, 'html.parser')\n \n title = soup.find(id=\"productTitle\").get_text()\n author = soup.find(class_=\"author notFaded\").get_text()\n \n print('Title: ', title)\n print('Author: ', author) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \nimport matplotlib.pyplot as plt \n\n# Load the data\nx1 = np.loadtxt(\"dataset1.txt\")\nx2 = np.loadtxt(\"dataset1.txt\")\ny = np.loadtxt(\"dataset2.txt\")\n\n# Fit the linear model \ncoefficients = np.polyfit(x1,x2,2)\n\n# Plot the linear regression line\nplt.scatter(x1, x2)\nplt.plot(x1, np.polyval(coefficients, x1), 'r')\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Function to tokenize text into words\ndef tokenize_text(text):\n tokens = nltk.word_tokenize(text)\n return tokens\n\n# Create TF-IDF vectorizer\nvectorizer = TfidfVectorizer(tokenizer=tokenize_text)\n\n# Calculate cosine similarity score between two texts\ndef calculate_similarity(text1, text2):\n vector = vectorizer.fit_transform([text1, text2])\n return ((vector * vector.T).A)[0,1]\n\n# Detect plagiarism based on similarity score\ndef detect_plagiarism(text1, text2, similarity_threshold=0.8):\n similarity_score = calculate_similarity(text1, text2)\n \n if similarity_score > similarity_threshold:\n return True\n else:\n return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Setup Virtual Environment and Django\nmkdir my_ecommerce_site\ncd my_ecommerce_site\npython3 -m venv venv\nsource venv/bin/activate\npip install django\n\n# Create the Project\ndjango-admin startproject ecommerce\n\n# Create the User app and database\ncd ecommerce\npython manage.py startapp users\npython manage.py migrate\n\n# Add 'users' to INSTALLED_APPS in settings.py\nINSTALLED_APPS = [\n 'users.apps.UsersConfig',\n 'django.contrib.admin',\n 'django.contrib.auth',\n 'django.contrib.contenttypes',\n 'django.contrib.sessions',\n 'django.contrib.messages'\n]\n\n# Create and register the user model\n# models.py\n\nfrom django.db import models\nfrom django.contrib.auth.models import AbstractUser\n\nclass CustomUser(AbstractUser):\n username = models.CharField(max_length=20, unique=True)\n phone_number = models.CharField(max_length=20,blank=True)\n    \nclass Meta:\n db_table = 'users'\n\n# admin.py\nfrom django.contrib import admin\nfrom .models import CustomUser\nadmin.site.register(CustomUser)\n\n# Update the default User model\n# settings.py\n\nAUTH_USER_MODEL = 'users.CustomUser'\n\n# Add users app URLs\n# urls.py\n\nfrom django.urls import path, include\nurlpatterns = [\n path('users/', include('users.urls')),\n]\n\n# Create users app URLs\n# urls.py\n\nfrom django.urls import path\nfrom .views import register, login, logout\n\nurlpatterns = [\n path('register/', register, name=\"register\"),\n path('login/', login, name=\"login\"),\n path('logout/', logout, name=\"logout\"),\n]\n\n# Create views \n# views.py\n\nfrom django.shortcuts import render, redirect\nfrom django.contrib.auth import authenticate, login, logout\nfrom django.contrib.auth.forms import UserCreationForm\n\ndef register(request):\n if request.method == 'POST':\n  form = UserCreationForm(request.POST)\n  if form.is_valid():\n   form.save()\n   email = form.cleaned_data.get('email')\n   raw_password = form.cleaned_data.get('password1')\n   user = authenticate(email=email, password=raw_password)\n   login(request, user)\n   return redirect('home') \n else:\n  form = UserCreationForm()\n return render(request, 'register.html', {'form': form})\n\ndef login(request):\n if request.method == 'POST':\n  email = request.POST.get('email')\n  raw_password = request.POST.get('password')\n  user = authenticate(email=email, password=raw_password)\n  if user is not None:\n   login(request, user)\n   return redirect('home')\n else:\n  return render(request, 'login.html')\n\ndef logout(request):\n logout(request)\n return redirect('login') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to convert list to dictionary\ndef list_to_dict(my_list):\n    \"\"\"Converts a list to a dictionary.\"\"\"\n    my_dict = {}\n    for item in my_list:\n        my_dict[item[0]] = item[1]\n    return my_dict\n\nif __name__ == '__main__':\n\t# Sample list\n    my_list = [(\"apple\", \"fruit\"), (\"carrot\", \"vegetable\")]\n    # Convert list to dictionary\n    my_dict = list_to_dict(my_list)\n    # Print dictionary\n    print(my_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: original_list = [1, 2, 5, 2, 4, 1]\nunique_list = []\n\nfor item in original_list:\n    if item not in unique_list:\n        unique_list.append(item)\n\nprint(unique_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string1 = \"Hello \"\nstring2 = \"World\"\n\nnew_str = string1 + string2\n\nprint(new_str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\nimport  nltk\nfrom tensorflow.keras.layers import Dense, Input, Embedding, LSTM\nfrom tensorflow.keras.models import Model\n\ninputs = Input(shape=(None,)) # shape is the length of the sentences\nembedding = Embedding(input_dim=1000, output_dim=32)(inputs)\n\nlstm_1 = LSTM(50, return_state=True,name=\"LSTM_1\")\noutputs, h, c = lstm_1(embedding) # h and c are hidden states\n\ndense_1 = Dense(15, activation='relu')(outputs)\n\ndense_2 = Dense(1)(dense_1)\n\nmodel = Model(inputs=inputs, outputs=dense_2)\n\nmodel.summary()\n\nnltk.download('punkt')\n\nsentences = [['Hi', 'How are you?'], ['I am good', 'That is awesome'], ['Thank you']]\n\n# Tokenize Sentences\ntokenized_sentences = [nltk.word_tokenize(sentence) for sentence in sentences]\n\n# Generate Vocabulary and Embedding\nvocab = set([word for sentence in sentences for word in sentence])\n\nword_2_idx = {word: idx for idx, word in enumerate(vocab)}\n\ntrain_data = [[word_2_idx[word] for word in sentence] for sentence in tokenized_sentences]\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', \n              metrics=['accuracy'])\n\nmodel.fit(train_data, labels,\n         epochs=50,\n         batch_size=32) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack: \n  \n    def __init__(self): \n        self.items = [] \n  \n    def isEmpty(self): \n        return self.items == [] \n  \n    def push(self, item): \n        self.items.append(item) \n  \n    def pop(self): \n        return self.items.pop() \n  \n    def peek(self): \n        return self.items[len(self.items)-1] \n  \n    def size(self): \n        return len(self.items) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def post_tweet(username, tweet):\n    tweet_db.addTweet(username, tweet)\n\ndef get_tweets(username):\n    return tweet_db.getTweets(username)\n\ndef delete_tweet(username, tweetId):\n    tweet_db.deleteTweet(username, tweetId) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password():\n chars = string.ascii_letters + string.digits + string.punctuation\n password = random.choice(string.ascii_lowercase)\n password += random.choice(string.ascii_uppercase)\n password += random.choice(string.digits)\n password += random.choice(string.punctuation)\n\n for i in range(4):\n password += random.choice(chars)\n\n passwordList = list(password) \n random.SystemRandom().shuffle(passwordList) \n password = ''.join(passwordList) \n return password but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_random_string(length):\n chars = string.ascii_lowercase + string.digits\n  return ''.join(random.choice(chars) for _ in range(length))\n\nresult = generate_random_string(10)\nprint(result)\n\n# Output : 'n5z5hp5d5v' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def predict_category(data, sample):\n    if not data:\n        return None\n\n    # Count the number of samples in each category\n    categories = {}\n    for d in data:\n        if d['category'] in categories:\n            categories[d['category']] += 1\n        else:\n            categories[d['category']] = 1\n\n    # Find the majority category\n    majority_cat = None\n    majority_cat_count = 0\n    for cat, count in categories.items():\n        if count > majority_cat_count:\n            majority_cat = cat\n            majority_cat_count = count\n    \n    # Predict the sample category as the majority category\n    return majority_cat but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_important_features(X, y):\n    \"\"\"Finds the most important features for a given dataset.\n\n    Args:\n        X(ndarray): The independent variables.\n        y(ndarray): The dependent variable.\n\n    Returns:\n        important_features(list): The list of most important features.\n    \"\"\"\n\n    # Initializing list with default values\n    important_features = []\n\n    # Initializing feature importance score\n    feature_importance_scores = [0] * X.shape[1]\n\n    # Iterating over all the features\n    for i in range(X.shape[1]):\n        # Calculating the mutual information score\n        score = mutual_info_score(X[:, i], y)\n\n        # Updating feature importance scores\n        feature_importance_scores[i] += score\n\n    # Sorting the feature importance scores\n    sorted_scores_idx = list(reversed(np.argsort(feature_importance_scores)))\n\n    # Retrieving top-k features\n    for idx in sorted_scores_idx:\n        important_features.append(idx)\n\n    return important_features but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci_sequence(num): \n    result = [0, 1] \n    if num < 0: \n        return None\n    elif num == 0 or num == 1: \n        return 0\n    elif num == 2: \n        return result \n    else: \n        for i in range(2,num): \n            next_num = result[i-1] + result[i-2] \n            result.append(next_num) \n        return result \n\nprint(fibonacci_sequence(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_anagrams(word):\n    word_list = list(word)\n    anagrams = []\n    for i in range(len(word_list)):\n        for j in range(i+1,len(word_list)+1):\n            anagram = ''.join(word_list[i:j])\n            if anagram != '' and anagram != word and anagram not in anagrams:\n                anagrams.append(anagram)\n    return anagrams but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add(a, b):\n    return a + b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\nfrom twilio.rest import Client\n\ndef lambda_handler(event, context):\n    account_sid = event['AccountSID']\n    auth_token = event['AuthToken']\n    from_number = event['FromNumber']\n    to_number = event['ToNumber']\n    message_body = event['MessageBody']\n\n    client = Client(account_sid, auth_token)\n    client.messages.create(\n        body=message_body,\n        from_=from_number,\n        to=to_number\n    )\n\n    return json.dumps({\n        \"message\": \"Successfully sent sms\"\n    }) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n    def __init__(self,value):\n        self.left = None\n        self.right = None\n        self.value = value\n\nclass BinarySearchTree:\n    def __init__(self):\n        self.root = None\n    \n    # Insert nodes to the binary search tree.\n    def insert(self,value):\n        new_node = Node(value)\n        if self.root == None:\n            self.root = new_node\n            return\n        else:\n            current_node = self.root\n            while True:\n                if value < current_node.value:\n                    if current_node.left == None:\n                        current_node.left = new_node\n                        return\n                    current_node = current_node.left\n                else:\n                    if current_node.right == None: \n                        current_node.right = new_node\n                        return\n                    current_node = current_node.right\n                \n    def printTree(self, node): \n        if node != None: \n            self.printTree(node.right)\n            print(node.value)\n            self.printTree(node.left)\n\n# Test code\nbst = BinarySearchTree()\nnums = [10,4,2,15,14,16]\nfor num in nums:\n    bst.insert(num)\nbst.printTree(bst.root) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def unique_numbers(number_list):\n    unique_numbers = []\n    for number in number_list:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers\n\nprint(unique_numbers([1, 2, 1, 3, 4, 5, 5, 1])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\npost_titles = [title.text for title in soup.find_all('h2', class_='post-title')]\n\nfor post_title in post_titles:\n print(post_title) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(11): \n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def targetInArray(arr,target):\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if target == arr[i][j]:\n                return True\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def common_elements(list1, list2):\n    common_list = []\n    for element in list1:\n        if element in list2:\n            common_list.append(element)\n    return common_list\n\nlist1 = [1, 2, 3, 4]\nlist2 = [2, 4, 6, 8]\nprint(common_elements(list1, list2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Website:\n def __init__(self, url, author, copyright, language):\n self.url = url\n self.author = author\n self.copyright = copyright\n self.language = language\n \n def get_url(self):\n return self.url\n \n def get_author(self):\n return self.author\n \n def get_copyright(self):\n return self.copyright\n \n def get_language(self):\n return self.language but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport scipy.optimize\n\ndef objective(params):\n  x = params[0]\n  y = params[1]\n  return (x * y) + (y + x)\n\nstarting_point = np.array([1.0, 1.0])\n\nres = scipy.optimize.minimize(objective, starting_point, \n                              method='nelder-mead', \n                              options={'xtol': 1e-8, 'disp': True}) \nprint(res.x) # Optimal Values but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def subsequences(x):\n subs = []\n for i in range(1<<x):\n sub = []\n for j in range(x):\n if (i & (1 << j)) > 0:\n sub.append(j)\n subs.append(sub)\n return subs but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_int(n):\n  try:\n    int(n)\n    return True\n  except ValueError:\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\nclass_A = [85, 75, 95]\nclass_B = [89, 73, 72]\nclass_C = [82, 81, 89]\n\nclasses = ['Class A', 'Class B', 'Class C']\n\nplt.bar(classes, [sum(class_A) / len(class_A), \nsum(class_B) / len(class_B), sum(class_C)/ len(class_C)])\n\nplt.xlabel('Classes')\nplt.ylabel('Average Score')\nplt.title('Exam Scores')\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Read the sales data\ndata = pd.read_csv('sales_data.csv')\n\n# Create a figure\nfig = plt.figure()\n\n# Create a bar chart\nax = fig.add_subplot()\nax.bar(data['date'], data['sales'], color='orange')\n\n# Set the x-axis and y-axis limits\nax.set_xlim([min(data['date']), max(data['date'])])\nax.set_ylim([0, max(data['sales']) + 10])\n\n# Set the title of the chart\nax.set_title('Sales of a Product')\n\n# Display the chart\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nClustering Algorithm for Mission Planning\n\"\"\"\n\nimport numpy as np\n\ndef create_cluster_matrix(dataset):\n    # Get required data\n    num_satellites = dataset['mission_details']['num_of_satellites']\n    target_region = dataset['mission_details']['target_region']\n    mission_duration = dataset['mission_details']['mission_duration']\n\n    # Create the matrix\n    matrix = np.zeros((num_satellites, mission_duration))\n\n    # Fill the matrix with the target region\n    for i in range(num_satellites):\n        matrix[i]= np.ones((1, mission_duration))*target_region\n\n    return matrix\n\nif __name__ == '__main__':\n    dataset = {\n        'mission_name': 'Space Mission',\n        'mission_details': {\n            'num_of_satellites': 5,\n            'target_region': 'South East Asia',\n            'mission_duration': 24\n        }\n    }\n\n    cluster_matrix = create_cluster_matrix(dataset)\n    print(cluster_matrix) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_nth_occurrence(string, substring, n):\n count = 0\n for i, ch in enumerate(string):\n  if string[i:i+len(substring)] == substring:\n   count += 1\n   if count == n:\n    string = string[:i] + string[i+len(substring):]\n return string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # function to perform bubble sort\ndef bubble_sort(arr): \n    # iterate over a range of the length of the array\n    for i in range(len(arr)): \n  \n        # iterate over the array until the index is equal to the current \n        # iteration of the first loop\n        for j in range(0, len(arr)-i-1): \n  \n            # compare two adjacent elements\n            # if the one on the left is greater than the one on the right, \n            # swap them\n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# driver code to test the above code \narr = [3, 5, 1, 9, 6] \nbubble_sort(arr)\n  \n# print the sorted array \nprint (\"Sorted array is:\") \nfor i in range(len(arr)):\n    print (\"%d\" %arr[i], end=' ') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.cluster import KMeans\n\ndata = np.array([[x1, x2, x3]]) #replace x1, x2 and x3 with the features in the dataset\n\nkmeans = KMeans(n_clusters=3).fit(data)\nclusters = kmeans.predict(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return fibonacci(n-1)+fibonacci(n-2) \n\n# Driver Program \n  \nprint(fibonacci(9)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_corresponding_nums(nums1, nums2):\n    result = []\n    seen = set(nums2) \n    for num1 in nums1:\n        if num1 in seen:\n            result.append(num1)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for numb in range(1, 11):\n    if numb == 3 or numb == 5:\n        continue\n    print(numb) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: student_scores = [{'name': 'John', 'mark': 75}, {'name': 'Alex', 'mark': 92}, {'name': 'Tiffany', 'mark': 83}, {'name': 'Eddie', 'mark': 67}]\n\nfor student in student_scores:\n    print(f'Name: {student[\"name\"]}, Mark: {student[\"mark\"]}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Necessary libraries\nimport boto3\n\n# Create an S3 bucket\ns3 = boto3.resource('s3')\ns3.create_bucket(Bucket='example-bucket')\n\n# Create an EC2 instance\nec2 = boto3.resource('ec2')\ninstance = ec2.create_instances(\n    ImageId= 'ami-035be7bafff33b6b6',\n    MinCount=1,\n    MaxCount=1,\n    KeyName='example-key',\n    InstanceType='t2.micro')\n\n# Create a security group\nsecurity_group = ec2.create_security_group(\n    GroupName= 'example-sg',\n    Description= 'example security group')\n\n# Add rules to the security group\nsecurity_group.authorize_ingress(\n    CidrIp='0.0.0.0/0',\n    IpProtocol='-1',\n    FromPort='-1',\n    ToPort='-1')\n\n# Wait for the instance to start up\nec2.Instance(instance[0].id).wait_until_running()\n\n# Install the necessary libraries\nec2.Instance(instance[0].id).run_command(\n    'sudo apt-get install -y python')\n\nec2.Instance(instance[0].id).run_command(\n    'sudo apt-get install -y apache2')\n\n# Write the relevant configuration files\nec2.Instance(instance[0].id).run_command(\n    'sudo echo \"Hello World\" > /var/www/html/index.html')\n\nec2.Instance(instance[0].id).run_command(\n    'sudo echo \"Listen 80\" > /etc/apache2/ports.conf')\n\n# Restart the service\nec2.Instance(instance[0].id).run_command(\n    'sudo systemctl restart apache2') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_armstrong_number(num):\n    order = len(str(num))\n    sum = 0\n    temp = num\n\n    while temp > 0:\n        remainder = temp % 10\n        sum += remainder ** order\n        temp //= 10\n\n    if sum == num:\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: duplicates = []\n \nfor box_id in box_ids:\n    if box_ids.count(box_id) > 1 and box_id not in duplicates:\n        duplicates.append(box_id)\n \nprint(duplicates) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(arr, value):\n    for i in range(len(arr)):\n        if arr[i] == value:\n            return i\n    return -1\n\narr = [3, 4, 10, 15, 23, 42]\nvalue = 10\n\nindex = linear_search(arr, value)\nif index == -1:\n    print('Value not found in array.')\nelse:\n    print('Value found at index ' + str(index) + '.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def position_of_char(string, char):\n    '''This function will detect the position of a character in a string.'''\n    return string.index(char) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def or_gate(a, b):\n    if a or b == 0:\n        return 0\n    else:\n        return 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\ns = \"Hello,  world    !  How are you?\"\ns = re.sub(' +', ' ', s)\nprint(s)\n\n# Output\n# 'Hello, world! How are you?' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_squares_in_range(start, end):\n    sum = 0\n    for i in range(start, end+1):\n        sum += i*i\n    return sum\n\nresult = sum_squares_in_range(2, 8)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\nurl = \"<website url>\"\n\n# Make request to website\nr = requests.get(url)\n\n# Get the HTML of the page\nhtml = r.text\n\n# Parse HTML using BeautifulSoup\nsoup = BeautifulSoup(html, 'html.parser')\n\n# Extract desired info from the page\ndata = soup.find_all('div', {'class': 'content'})\n\n# Print the data\nprint(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_ints(a, b):\n    return a + b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum2dArray(arr):\n    two_d_sum = 0\n    for sub_arr in arr:\n        for elem in sub_arr:\n            two_d_sum += elem\n    return two_d_sum\n\narr = [[1,2], [3,4], [5,6]]\nresult = sum2dArray(arr)\nprint(result) # 21 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_two_numbers(num1, num2):\n return num1 + num2\n\nprint(sum_two_numbers(num1, num2))\n# Output: 8 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def word_frequency(string):\n    words = string.split()\n    word_dict = {}\n    for word in words:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    return word_dict\n\nfrequency = word_frequency(string)\nprint(frequency) # prints {'Python': 1, 'is': 1, 'an': 1, 'interpreted': 1, 'high-level': 1, 'general-purpose': 1, 'programming': 1, 'language.': 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_divisible_by_3_and_5(number):\n    \"\"\"This function checks whether a number is divisible by 3 and 5.\n\n    Parameters: \n        number (int): The number to be checked.\n\t\n    Returns: True if the number is divisible by 3 and 5, False otherwise.\n    \"\"\"\n    if (number % 3 == 0) and (number % 5 == 0):\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def subtract(x, y):\n    return x - y\n\ndef add(x, y):\n    return x + y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef suggest_sentence(lastWord):\n    sentences = [\"the cat is cute\", \"the dog is smart\", \"the duck is noisy\"]\n    suggestedSentences = []\n    \n    for sentence in sentences:\n        if sentence.split()[-1] == lastWord:\n            suggestedSentences.append(sentence)\n    \n    return random.choice(suggestedSentences)\n\nsuggestion = suggest_sentence(\"cute\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def func(a):\n    result = [x + 5 for x in a]\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_odds(N):\n    return sum([i for i in range(1, 2*N + 1, 2)])\n\nN = 5\nprint(sum_of_odds(N)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_list(list_in):\n    start = 0\n    end = len(list_in) - 1\n\n    while start < end:\n        list_in[start], list_in[end] = list_in[end], list_in[start]\n        start += 1\n        end -= 1\n    \n    return list_in\n\nlist_in = [1, 2, 3, 4]\nreverse_list(list_in) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_equality(arr1, arr2):\n    for num in arr1:\n        if num not in arr2:\n            return False\n    return True\n\nA = [1, 2, 3]\nB = [2, 3, 4]\n\nresult = check_equality(A, B)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def delete_element(arr, element): \n    new_arr = [i for i in arr if i!=element]\n    return new_arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_tweet(tweet):\n    # Create bag of words\n    bag_of_words = tweet.split()\n    # Filter out words in bag of words that are not in the classifier words\n    filtered_bag_of_words = [word for word in bag_of_words if word in classifier_words]\n    # Calculate the score\n    score = sum(classifier_values[word] for word in filtered_bag_of_words)\n    # Classify the tweet as positive or negative base on the score\n    if score > 0:\n        return 'positive'\n    elif score < 0:\n        return 'negative'\n    else:\n        return 'neutral' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport json\n\n# Define endpoint\nendpoint = 'https://api.nytimes.com/svc/topstories/v2/home.json?'\n\n# Pass API key\npayload = {'api-key': 'INSERT-KEY-HERE'}\n\n# Make request to endpoint\nreq = requests.get(endpoint, params=payload)\n\n# Parse the response\ndata = json.loads(req.text)\n\n# Iterate over results and print headline\nfor result in data['results'][:10]:\n    print(result['title']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binarySearch(arr, x): \n\tstart = 0\n\tend = len(arr) - 1\n\t\n\twhile start <= end: \n\t\n\t\tmid = start + (end - start) // 2\n\t\n\t\tif arr[mid] == x: \n\t\t\treturn mid \n\t\n\t\telif arr[mid] < x: \n\t\t\tstart = mid + 1\n\t\n\t\telse: \n\t\t\tend = mid - 1\n\t\n\treturn -1\n\narr = [ 1, 3, 5, 7, 9 ]\nresult = binarySearch(arr, 3) \n\nif result != -1: \n\tprint(\"Element is present at index\", str(result)) \nelse: \n\tprint(\"Element is not present in array\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Python but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\nimport nltk\n\ndef classify_sentiment(tweet_text):\n    tokens = nltk.word_tokenize(tweet_text)\n    sentiment_scores = 0\n\n    # Calculate sentiment score\n    for token in tokens:\n        if token in POSITIVE_WORDS:\n            sentiment_scores += 1\n        elif token in NEGATIVE_WORDS:\n            sentiment_scores -= 1\n\n    # Classify sentiment\n    if sentiment_scores > 0:\n        return \"positive\"\n    elif sentiment_scores == 0:\n        return \"neutral\"\n    else:\n        return \"negative\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import itertools\n\nwords = [''.join(i) for i in itertools.product('ab', repeat = 5)]\nprint(words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import defaultdict\n\nstrings = [\"Apple\", \"Orange\", \"Banana\", \"Pineapple\"]\n\ndictionary = defaultdict(list)\nfor string in strings:\n    char_count = len(string)\n    dictionary[char_count].append(string)\n\nprint(dictionary) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: st = \"DaSSmmoonnd\"\nst_list = list(st)\nst_set = set(st_list)\nst_nodupes = ''.join(st_set)\nprint(st_nodupes) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from datetime import datetime\n\ndef time_diff(time1, time2):\n t1 = datetime.strptime(time1, \"%H:%M:%S\")\n t2 = datetime.strptime(time2, \"%H:%M:%S\")\n return (t2 - t1).total_seconds()\n\nprint(time_diff('08:30:15', '10:20:20')) // 7200.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = \"Hello\"\nnum = 3\n\nfor i in range(num):\n    print(string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def decimalToBinary(num): \n    # empty list to store the binary number \n    binaryList = [] \n   \n    # if the number is 0, return 0\n    if num == 0:\n        return [0]\n  \n    # loop until the number becomes 0 after division by 2\n    while num > 0:\n        binaryList.append(num % 2) \n        num //= 2\n  \n    # Reverse the list\n    binaryList = binaryList[::-1] \n  \n    return binaryList but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Customer:\n    \n    def __init__(self, name):\n        self.name = name\n    \n    def calculate_total(self, prices):\n        total = 0\n        for price in prices:\n            total += price\n        return total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quicksort(arr):\n    if len(arr) < 2:\n        return arr\n    \n    pivot = arr[0]\n    left = []\n    right = []\n    for i in range(1, len(arr)):\n        if arr[i] < pivot:\n            left.append(arr[i])\n        elif arr[i] > pivot:\n            right.append(arr[i])\n    arr = quicksort(left) + [pivot] + quicksort(right)\n    return arr\n\narr = [1, 5, 8, 7, 2]\nsorted_arr = quicksort(arr)\nprint(sorted_arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_probability(event):\n    num_outcomes = 6\n    num_favorable = 1\n    \n    probability = num_favorable/num_outcomes\n    \n    return probability\n    \n# calculate probability of rolling a 6\nprobability = calculate_probability(\"rolling a 6\")\nprint(probability) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = 'https://www.example.com'\n\nresponse = requests.get(url)\n\nwith open('example.html', 'wb') as file:\n file.write(response.content) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_unique_words(word_string):\n    word_string = word_string.lower() # Convert the string to lower case\n    words = word_string.split() # Split the string into a list of words\n    unique_words = [] # Create an empty list to store unique words\n    \n    # Iterate over the list of words and check if the word is already \n    # present in the list of unique words.\n    # If not, then append the word to the list of unique words.\n    for word in words:\n        if word not in unique_words: \n            unique_words.append(word) \n  \n    # Return the list of unique words\n    return unique_words\n\nprint(get_unique_words(\"This is a test\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from django.contrib.auth.forms import UserCreationForm\n\nclass SignUpForm(UserCreationForm):\n def __init__(self, *args, **kwargs):\n  super().__init__(*args, **kwargs)\n \n  self.fields['username'].label = 'Display Name'\n  self.fields['email'].label = 'Email Address'\n  \nform = SignUpForm(data=request.POST or None)\n\nif form.is_valid():\n new_user = form.save(commit=False)\n new_user.save()\n\nreturn render(request, 'register.html', {'form': form}) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pymongo\nimport requests\nfrom bs4 import BeautifulSoup\n\nclient = pymongo.MongoClient(\"mongodb://localhost:27017\")\n\n# declare the database\ndb = client.stock_prices\n\n# name the collection\ncollection = db.nasdaq\n\n# get the data \nresponse = requests.get(\"https://www.nasdaq.com/symbol/aapl\")\n\n# parse it\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# get the table \ntable = soup.find('table', {'class': 'genTable'})\n\n# get each row\nfor tr in table.find_all('tr')[1:]:\n  # get each column\n  td = tr.find_all('td')\n  # data manipulation \n  date = td[0].text\n  open_price = float(td[1].text)\n  high_price = float(td[2].text)\n  low_price = float(td[3].text)\n  close_price = float(td[4].text)\n\n  # define the document \n  doc = {\n    'date': date,\n    'open_price': open_price,\n    'high_price': high_price,\n    'low_price': low_price,\n    'close_price': close_price\n  }\n  \n  # insert\n  collection.insert_one(doc) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_occurences(letter, string):\n\treturn string.replace(letter, '') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_isbn_valid(isbn):\n    isbn = isbn.replace(\"-\", \"\")\n    if len(isbn) != 10:\n        return False\n \n    sum = 0\n    factor = 10\n \n    for i in range(len(isbn)):\n        if isbn[i].isdigit():\n            sum += int(isbn[i]) * factor\n        elif isbn[i].upper() == 'X':\n            sum += 10 * factor\n        else:\n            return False\n        factor -= 1\n    \n    if sum % 11 == 0:\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nuppercase_letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nnumbers = '1234567890'\n\ndef generate_password():\n    password = ''\n    for _ in range(4):\n        password += random.choice(uppercase_letters)\n        password += random.choice(numbers)\n    return password\n\npassword = generate_password()\nprint(password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nProgram to predict the quality of a text using supervised learning\n\"\"\"\n\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.svm import SVC\n\n#Load the training dataset\ntrain_data = pd.read_csv(\"data\")\n\n#Preprocess the data by creating features using CountVectorizer\nvectorizer = CountVectorizer()\nX_train = vectorizer.fit_transform(train_data['text'])\nY_train = train_data['quality']\n\n#Train the model\nmodel = SVC()\nmodel.fit(X_train, Y_train)\n\n#Test the model\ntest_data = \"This is a sample text\"\nX_test = vectorizer.transform([test_data])\nprediction = model.predict(X_test)\n\nprint('Predicted Quality: %s' % prediction[0]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countGreaterThan(arr, target):\n    count = 0\n    for element in arr:\n        if element > target:\n            count += 1\n    return count\n\n# Example\narr = [7, 8, 4, 2, 9]\ntarget = 5\nprint(countGreaterThan(arr, target))\n# Output: 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_array(array):\n    return sum(array) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(list): \n    for i in range(len(list)-1,0,-1):\n        for j in range(i):\n            if list[j] > list[j+1] :\n                temp = list[j]\n                list[j] = list[j+1]\n                list[j+1] = temp\n    return list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_common_elements(list_of_lists): \n    commons = []\n    for i in range(len(list_of_lists)): \n        commons = list(set(commons).intersection(list_of_lists[i]))\n    return commons but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_area_triangle(a, b, c):\n    '''This function will calculate the area of a triangle given the three sides as parameters.'''\n    s = (a + b + c) / 2\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return area but is not the same. just give one example and only return the code."}
