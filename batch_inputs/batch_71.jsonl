{"prompt": "make some code that functions the same as the following code: def intersect(l1, l2):\n    return [x for x in l1 if x in l2] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\nfile_name = 'filename.xlsx'\ncolumn_name = 'column_name'\n\n# Open the file\ndf = pd.read_excel(file_name)\n\n# Read the column\ndata = df[column_name]\n\n# Iterate the rows\nfor i, row in data.iterrows():\n    # Do something with each row of data but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nrandom_list = []\n\nfor i in range(100):\n    random_list.append(random.randint(1,10))\n    \nprint(random_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def lcs(X, Y, m, n): \n    if m == 0 or n == 0: \n        return 0; \n    elif X[m-1] == Y[n-1]: \n        return 1 + lcs(X, Y, m-1, n-1); \n    else: \n        return max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n)); \n  \n# Function to find the Longest Common Subsequence (LCS)\nX = \"MZJAWXU\"\nY = \"XMJYAUX\"\nm = len(X) \nn = len(Y) \nprint(\"Length of Longest Common Subsequence is\", lcs(X, Y, m, n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: items = [{\"name\": \"chair\", \"price\": 20}, {\"name\": \"table\", \"price\": 30}, {\"name\": \"sofa\", \"price\": 40}]\n\n# calculate the total price of all items\ntotal_price = 0\nfor item in items:\n total_price += item[\"price\"]\n\n# calculate the average price\naverage_price = total_price / len(items)\n\n# print the result\nprint(f\"Average price: {average_price}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_dict(dict1, dict2):\n result = dict1.copy()\n result.update(dict2)\n return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_value(num1, num2, num3):\n    max_val = num1\n    if num2 > max_val:\n        max_val = num2\n    if num3 > max_val:\n        max_val = num3\n    return max_val but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n#create a dataset\ndata = np.array([[255, 0, 0], [0, 255, 0], [0, 0, 255]])\nlabels = np.array(['red', 'green', 'blue'])\n\n#encode target labels\nencoder = LabelEncoder()\nencoded_labels = encoder.fit_transform(labels)\n\n#split dataset into 80% train and 20% test\nx_train, x_test, y_train, y_test = train_test_split(data, encoded_labels, test_size=0.2)\n\n#set parameters\ninput_dim = 3\noutput_dim = 3\nbatch_size = 10\nepochs = 10\n\n#build a sequential model\nmodel = Sequential()\nmodel.add(Dense(64, activation='relu', input_dim=input_dim))\nmodel.add(Dense(output_dim, activation='softmax'))\n\n#compile the model\nmodel.compile(loss='sparse_categorical_crossentropy',\n              optimizer='sgd',\n              metrics=['accuracy'])\n\n#train and evaluate the model\nmodel.fit(x_train, y_train, batch_size=batch_size, epochs=epochs)\nscore = model.evaluate(x_test, y_test, batch_size=batch_size) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nresp = requests.get(\"http://example.com\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insertion_sort(arr):\n    \"\"\"Sorts the given list of strings using insertion sort\"\"\"\n\n    # traverse through 1 to len(arr) \n    for i in range(1, len(arr)): \n  \n        key = arr[i] \n  \n        # Move elements of arr[0..i-1], that are \n        # greater than key, to one position ahead \n        # of their current position \n        j = i-1\n        while j >= 0 and key < arr[j] : \n                arr[j + 1] = arr[j] \n                j -= 1\n        arr[j + 1] = key \n  \n# test\narr = ['tuna', 'apple', 'grapes', 'orange'] \ninsertion_sort(arr) \nprint (\"Sorted Array:\") \nprint (arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_fibonacci_sequence(num):\n a = 0\n b = 1\n \n print(a, end=\" \")\n print(b, end=\" \") \n \n for i in range(2,num):\n  c = a + b\n  a = b\n  b = c\n  print(c, end=\" \")\n\nprint_fibonacci_sequence(9) # prints 0 1 1 2 3 5 8 13 21 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_longest_strings(string_list):\n    longest_strings = []\n    longest_length = 0\n    for string in string_list:\n        if len(string) > longest_length:\n            longest_length = len(string)\n \n    for string in string_list:\n        if len(string) == longest_length:\n            longest_strings.append(string)\n \n    return longest_strings\n\nlongest_strings = get_longest_strings(['cat', 'kitten', 'puppy'])\nprint(longest_strings) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculateTotalCost(items):\n total_cost = 0\n for item in items:\n  total_cost += item[1]\n return total_cost\n\n# Usage\ntotal_cost = calculateTotalCost(items)\nprint(total_cost) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(string, search): \n\t# Create a Trie type datastructure \n\tt = {}\n\n\t# Put each character of the string in a lexicographic tree \n\tfor char in string: \n\t\tif char in t: \n\t\t\tt = t[char] \n\t\telse: \n\t\t\tt[char] = {}\n\t\t\tt = t[char] \n\n\t# Now search for the search string in the trie structure \n\tcursor = t \n\tfor char in search: \n\t\tif char in cursor: \n\t\t\tcursor = cursor[char] \n\t\telse: \n\t\t\treturn False\n\treturn True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\ndef get_all_links(url):\n  \n  # make a GET request to fetch the raw HTML content\n  html_content = requests.get(url).text\n  \n  # parse the html content\n  soup = BeautifulSoup(html_content, \"lxml\")\n  \n  # extract all links from web page \n  links = soup.find_all(\"a\")\n  return links but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def even_odd(x):\n  if isinstance(x, int):\n    if x % 2 == 0:\n      print(\"even\")\n    else:\n      print(\"odd\")\n  else:\n    print(\"x must be an integer\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortList(list): \n    list.sort() \n    return list\n    \nunsorted_list = [3, 4, 8, 5, 10]\nsorted_list = sortList(unsorted_list)\n\nprint(\"Sorted list:\", sorted_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create a list to store all possible DNA sequences\ndna_sequence_list = []\n\n# Generate the combinations using recursion\ndef generate_dnasequence_combinations(sequence, seq_length, curr_index): \n  \n    # Break the execution when the index is greater than the length of the sequence \n    if (curr_index == seq_length): \n        dna_sequence_list.append(''.join(sequence)) \n        return\n    \n    # Generate the combinations for each character in the sequence \n    for i in range(curr_index, len(sequence)): \n        # Swap the characters \n        sequence[curr_index], sequence[i] = sequence[i], sequence[curr_index] \n        #add the swapped character to the list \n        generate_dnasequence_combinations(sequence, seq_length, curr_index + 1)  \n        # Swap back the characters \n        sequence[curr_index], sequence[i] = sequence[i], sequence[curr_index] \n        \n# Call the generate_dnasequence_combinations with the initial sequence\ngenerate_dnasequence_combinations(list(sequence), len(sequence), 0) \n\n# Print all the combinations\nprint(dna_sequence_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef random_string_generator():\n    char_set = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n    random_string = ''.join(random.sample(char_set, 8))\n    return random_string\n\nprint(random_string_generator()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def char_count(string):\n    char_dict = {}\n    for char in string:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    return char_dict\n\nstring = \"Hello World!\"\nresult = char_count(string)\nprint(result)\n\n# Outputs: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_message(name):\n    print(\"Hello \"+name)\n\nname = \"Matthew\"\nprint_message(name) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n \n# Function to evaluate a given expression string\ndef evaluate(expression):\n \n # Regular expression to match only number and operators\n regex = re.compile('(\\d+\\.?\\d*)|(\\S)')\n tokens = regex.findall(expression)\n \n # Initialize two stacks, one for operands and one for operators\n operands = []\n operators = []\n \n # Iterate through tokens\n for token in tokens:\n \n # If token is an operator\n if token[1]:\n operators.append(token[1])\n \n # If token is a number\n else:\n operands.append(float(token[0]))\n \n # Evaluate expression until all the operators are processed\n while (len(operators) > 0):\n \n # Pop one operator and two operands\n operator = operators.pop()\n operator2 = operands.pop()\n operator1 = operands.pop()\n \n # Evaluate the expression\n result = 0\n if (operator == '+'):\n result = operator1 + operator2\n elif (operator == '-'):\n result = operator1 - operator2\n elif (operator == '*'):\n result = operator1 * operator2\n elif (operator == '/'):\n result = operator1 / operator2\n \n # Push the result back to the stack\n operands.append(result)\n \n # Return result\n return operands[0]\n \n \nexpression = '2*3+4/5'\nresult = evaluate(expression)\n\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ntext = \"The customer's address is 123 Main Street, Anytown, USA.\"\n\naddress_pattern = re.compile(r'(\\d+\\s*(?:[A-Za-z]+\\s*)+),\\s*([A-Za-z\\s]+),\\s*([A-Z]{2})')\n\nmatch = address_pattern.search(text)\n\nif match:\n street = match[1]\n city = match[2]\n state = match[3]\n\nprint(f'{street}, {city}, {state}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\n# -*- encoding: utf-8 -*-\n\n# Copyright (c) Contributors, http://opensimulator.org/\n# See CONTRIBUTORS.TXT for a full list of copyright holders.\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#     * Redistributions of source code must retain the above copyright\n#       notice, this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of the OpenSim Project nor the\n#       names of its contributors may be used to endorse or promote products\n#       derived from this software without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE DEVELOPERS ``AS IS'' AND ANY EXPRESS OR\n# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE CONTRIBUTORS BE LIABLE FOR ANY\n# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n# IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nimport logging\nimport os\nimport subprocess\nimport urllib\n\nimport PyQt4.QtCore\n\nimport RezzMe.exceptions\nimport RezzMe.launchers.hippo\n\nclass PlatformLauncher(object):\n\n    def __init__(self):\n        self._clientsDefault = {'hippo'     : 'hippo_opensim_viewer',\n                                'secondlife': 'secondlife'}\n        self._clients = {}\n\n        for c in self._clientsDefault:\n            for bin in os.environ['PATH'].split(':'):\n                t = '%s/%s' % (bin, self._clientsDefault[c])\n                if os.path.exists(t):\n                    self._clients[c] = t\n                    break\n        \n    def _gClients(self):\n        return self._clients\n    Clients = property(fget = _gClients)\n\n    def _gClientPattern(self):\n        return 'client executable (*)'\n    ClientPattern = property(fget = _gClientPattern)\n\n\n    def HippoDefaultGrids(self, path):\n        hippoHome = os.path.dirname(os.path.realpath(path))\n\n        defaultGrids = '%s/app_settings/default_grids.xml' % hippoHome\n        if os.path.exists(defaultGrids):\n            logging.debug(\"launchers.linux2: found hippo's default_grids.xml at %s\", defaultGrids)\n            return defaultGrids\n\n        logging.debug(\"launchers.linux2: trying to find hippo's default_grids.xml via locate...\")\n        defaultGrids = subprocess.Popen(['locate', 'app_settings/default_grids.xml'], stdout = subprocess.PIPE).communicate()[0].rstrip()\n        if defaultGrids:\n            for p in defaultGrids.split():\n                if 'hippo' in p.lower(): \n                    logging.debug(\"launchers.linux2: found hippo's default_grids.xml at %s\", p)\n                    return p\n        return None\n    \n\n    def Launch(self, avatar, password, gridInfo, clientName, client, location, purge):\n        \n        # fix ' character appearing in irish names\n        avatar = urllib.unquote(avatar)\n\n        clientArgs = [ ]\n        clientArgs += ['-loginuri', gridInfo['login']]\n        clientArgs += ['-multiple']\n\n        keys = gridInfo.keys()\n        if 'welcome' in keys: clientArgs += ['-loginpage', gridInfo['welcome']]\n        if 'economy' in keys: clientArgs += ['-helperuri', gridInfo['economy']]\n\n        if purge:\n            clientArgs += ['--purge']\n\n        # mirror clientArgs into logArgs to avoid capturing passwords into\n        # log files\n        logArgs = clientArgs[:]\n        if avatar and password:\n            clientArgs += ['-login']\n            avatar = avatar.replace('(', '\\(')\n            avatar = avatar.replace(')', '\\)')\n            clientArgs += map(lambda x: \"%s\" % x, avatar.split())\n            logArgs = clientArgs[:]\n            \n            clientArgs += [password]\n            logArgs += [\"'**********'\"]\n\n        if 'hippo' in clientName.lower() or 'hippo' in client.lower():\n            userGridXml = os.path.expanduser('~/.hippo_opensim_viewer/user_settings/grid_info.xml')\n            defaultGridXml = self.HippoDefaultGrids(client)\n\n            gridnick = RezzMe.launchers.hippo.HippoGridInfoFix(gridInfo, userGridXml, defaultGridXml)\n            clientArgs += ['-grid', gridnick]\n            logArgs += ['-grid', gridnick]\n\n        # has to come last\n        if location:\n            clientArgs += [location]\n            logArgs += [location]\n\n        # all systems go: start client\n        logging.debug('launchers.linux2: client %s %s', client, ' '.join(logArgs))\n        # os.execvp(client, clientArgs)\n        PyQt4.QtCore.QProcess.startDetached(client, clientArgs)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nplayers = [\"Player 1\", \"Player 2\"]\n\n# Assign random numbers to each of the players\nplayer_1_num = random.randint(1, 10) \nplayer_2_num = random.randint(1, 10)\n\n# Player 1 Turn\nplayer_1_guess = input(\"What is your guess, Player 1? (1-10): \")\n\nif player_1_guess != player_1_num:\n    print(\"Sorry! That was not the correct answer.\")\n    print(\"Player 2 wins!\")\nelse:\n    print(\"Correct! Player 1 wins!\")\n\n# Player 2 Turn\nplayer_2_guess = input(\"What is your guess, Player 2? (1-10): \")\n\nif player_2_guess != player_2_num:\n    print(\"Sorry! That was not the correct answer.\")\n    print(\"Player 1 wins!\")\nelse:\n    print(\"Correct! Player 2 wins!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import libraries\nfrom flask import Flask, jsonify, request\nimport re\n\n#initialize flask \napp = Flask(__name__)\n\n#define the endpoint\n@app.route('/process_text')\ndef process_text():\n    #get text from the request\n    text = request.args.get('text')\n    #process the text\n    processed_text = re.sub('[^a-zA-Z0-9]', '', text)\n    #return the result\n    return jsonify({\"result\" : processed_text})\n\n#run the server\napp.run(host='0.0.0.0') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(array, number):\n for i in range(len(array)):\n if array[i] == number:\n return i\n\n return -1\n\narray = [22, 54, 71, 12, 7, 37]\nnumber = 12\n\nnumber_index = search(array, number)\n\nif number_index != -1:\n print(\"Found at index: \"+str(number_index))\nelse:\n print(\"Number not found\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 11):\n    print(number,\"X\",i,\"=\",number*i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import Flask Library\nfrom flask import Flask\n\n# Create Flask App\napp = Flask(__name__)\n\n# Routes\n@app.route('/')\ndef index():\n    return 'Welcome to my blog!'\n\n@app.route('/posts')\ndef posts():\n    return 'These are my posts!'\n\n# Run Flask App\nif __name__ == '__main__':\n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.neighbors import NearestNeighbors\n\n# Read in the data\ndf = pd.read_csv('songs.csv')\n\n# Calculate the similarities between songs\nmodel_knn = NearestNeighbors(metric='cosine', algorithm='brute')\nmodel_knn.fit(df[user_feats])\n\ndef recommend_songs(df, model_knn, song_id):\n    \n    distances, indices = model_knn.kneighbors(df.iloc[song_id, :].values.reshape(1, -1), n_neighbors = 5)\n\n    # Suggest the most similar songs\n    for i in range(0, len(distances.flatten())):\n        if i == 0:\n            print ('Recommendations for {0}:\\n'.format(df['song_title'][song_id]))\n        else:\n            print ('{0}: {1}, with distance of {2}:'.format(i, df['song_title'][indices.flatten()[i]], distances.flatten()[i])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n  \n# Driver Program \nprint(fibonacci(10)) \n\n# Output: 55 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_salary(hours_worked):\n    wage_per_hour = 8.0\n    salary = wage_per_hour * hours_worked\n    return salary but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def levenshtein_distance(str1, str2):\n    \"\"\"\n    Write a python program to calculate the Levenshtein distance, which is a \n    measure of similarity between two strings.\n    \"\"\"\n    m = len(str1)\n    n = len(str2)\n    # Create a matrix to store edit distances\n    edit_distance = [[0 for i in range(n+1)] for j in range(m+1)]\n\n    # Fill the matrix\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0:\n                edit_distance[i][j] = j \n            elif j == 0:\n                edit_distance[i][j] = i\n            elif str1[i-1] == str2[j-1]:\n                edit_distance[i][j] = edit_distance[i-1][j-1]\n            else:\n                edit_distance[i][j] = 1 + min(edit_distance[i-1][j], edit_distance[i][j-1], edit_distance[i-1][j-1])\n    # Return the last element of the matrix\n    return edit_distance[m][n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\nx = [\"Honda\", \"Ferrari\", \"Ford\"]\ny = [50, 100, 150]\n\nplt.bar(x, y)\n\nplt.title(\"Car Comparison\")\nplt.xlabel(\"Cars\")\nplt.ylabel(\"Value\")\n\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def removeVowels(sentence):\n vowels = \"aeiouAEIOU\"\n result = \"\"\n\n for char in sentence:\n if char not in vowels:\n result = result + char\n\n return result\n\nprint(removeVowels(\"This is a test sentence.\"))  # Output: \"Ths s  tst sntnc.\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os\n\n# Set up Django\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"myproject.settings\")\nimport django\ndjango.setup()\n\n# Define the web application\nfrom django.http import HttpResponse\ndef index(request):\n    # Create a list of names and contact numbers\n    names = ['John', 'Anthony', 'Dave']\n    contacts = ['212-555-1234', '212-555-2345', '212-555-3456']\n    \n    # Build an html table\n    html = '<html><table><tr><th>Name</th> <th>Contact Number</th> </tr>'\n    for i in range(len(names)):\n        html += '<tr><td align=center>' + names[i] + '</td> <td align=center>' + contacts[i] + '</td> </tr>'\n    \n    # Close the table\n    html += '</table></html>'\n    return HttpResponse(html) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nGoogle Cloud Messaging\nPreviously known as C2DM\nDocumentation is available on the Android Developer website:\nhttps://developer.android.com/google/gcm/index.html\n\"\"\"\n\nimport json\n\ntry:\n\tfrom urllib.request import Request, urlopen\n\tfrom urllib.parse import urlencode\nexcept ImportError:\n\t# Python 2 support\n\tfrom urllib2 import Request, urlopen\n\tfrom urllib import urlencode\n\nfrom django.core.exceptions import ImproperlyConfigured\nfrom . import NotificationError\nfrom .settings import PUSH_NOTIFICATIONS_SETTINGS as SETTINGS\n\n\nclass GCMError(NotificationError):\n\tpass\n\n\ndef _chunks(l, n):\n\t\"\"\"\n\tYield successive chunks from list \\a l with a minimum size \\a n\n\t\"\"\"\n\tfor i in range(0, len(l), n):\n\t\tyield l[i:i + n]\n\n\ndef _gcm_send(data, content_type):\n\tkey = SETTINGS.get(\"GCM_API_KEY\")\n\tif not key:\n\t\traise ImproperlyConfigured('You need to set PUSH_NOTIFICATIONS_SETTINGS[\"GCM_API_KEY\"] to send messages through GCM.')\n\n\theaders = {\n\t\t\"Content-Type\": content_type,\n\t\t\"Authorization\": \"key=%s\" % (key),\n\t\t\"Content-Length\": str(len(data)),\n\t}\n\n\trequest = Request(SETTINGS[\"GCM_POST_URL\"], data, headers)\n\treturn urlopen(request).read()\n\n\ndef _gcm_send_plain(registration_id, data, collapse_key=None, delay_while_idle=False, time_to_live=0):\n\t\"\"\"\n\tSends a GCM notification to a single registration_id.\n\tThis will send the notification as form data.\n\tIf sending multiple notifications, it is more efficient to use\n\tgcm_send_bulk_message() with a list of registration_ids\n\t\"\"\"\n\n\tvalues = {\"registration_id\": registration_id}\n\n\tif collapse_key:\n\t\tvalues[\"collapse_key\"] = collapse_key\n\n\tif delay_while_idle:\n\t\tvalues[\"delay_while_idle\"] = int(delay_while_idle)\n\n\tif time_to_live:\n\t\tvalues[\"time_to_live\"] = time_to_live\n\n\tfor k, v in data.items():\n\t\tvalues[\"data.%s\" % (k)] = v.encode(\"utf-8\")\n\n\tdata = urlencode(sorted(values.items())).encode(\"utf-8\")  # sorted items for tests\n\n\tresult = _gcm_send(data, \"application/x-www-form-urlencoded;charset=UTF-8\")\n\tif result.startswith(\"Error=\"):\n\t\traise GCMError(result)\n\treturn result\n\n\ndef _gcm_send_json(registration_ids, data, collapse_key=None, delay_while_idle=False, time_to_live=0):\n\t\"\"\"\n\tSends a GCM notification to one or more registration_ids. The registration_ids\n\tneeds to be a list.\n\tThis will send the notification as json data.\n\t\"\"\"\n\n\tvalues = {\"registration_ids\": registration_ids}\n\n\tif data is not None:\n\t\tvalues[\"data\"] = data\n\n\tif collapse_key:\n\t\tvalues[\"collapse_key\"] = collapse_key\n\n\tif delay_while_idle:\n\t\tvalues[\"delay_while_idle\"] = delay_while_idle\n\n\tif time_to_live:\n\t\tvalues[\"time_to_live\"] = time_to_live\n\n\tdata = json.dumps(values, separators=(\",\", \":\"), sort_keys=True).encode(\"utf-8\")  # keys sorted for tests\n\n\tresult = json.loads(_gcm_send(data, \"application/json\"))\n\tif result[\"failure\"]:\n\t\traise GCMError(result)\n\treturn result\n\n\ndef gcm_send_message(registration_id, data, collapse_key=None, delay_while_idle=False, time_to_live=0):\n\t\"\"\"\n\tSends a GCM notification to a single registration_id.\n\n\tThis will send the notification as form data if possible, otherwise it will\n\tfall back to json data.\n\n\tIf sending multiple notifications, it is more efficient to use\n\tgcm_send_bulk_message() with a list of registration_ids\n\t\"\"\"\n\n\targs = data, collapse_key, delay_while_idle, time_to_live\n\n\ttry:\n\t\t_gcm_send_plain(registration_id, *args)\n\texcept AttributeError:\n\t\t_gcm_send_json([registration_id], *args)\n\n\ndef gcm_send_bulk_message(registration_ids, data, collapse_key=None, delay_while_idle=False, time_to_live=0):\n\t\"\"\"\n\tSends a GCM notification to one or more registration_ids. The registration_ids\n\tneeds to be a list.\n\tThis will send the notification as json data.\n\t\"\"\"\n\n\targs = data, collapse_key, delay_while_idle, time_to_live\n\n\t# GCM only allows up to 1000 reg ids per bulk message\n\t# https://developer.android.com/google/gcm/gcm.html#request\n\tmax_recipients = SETTINGS.get(\"GCM_MAX_RECIPIENTS\")\n\tif len(registration_ids) > max_recipients:\n\t\tret = []\n\t\tfor chunk in _chunks(registration_ids, max_recipients):\n\t\t\tret.append(_gcm_send_json(chunk, *args))\n\t\treturn ret\n\n\treturn _gcm_send_json(registration_ids, *args)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_of_numbers = [2, 3, 5, 8, 1, 4]\n\ndef sort_list(list_of_numbers): \n    list_of_numbers.sort() \n    return list_of_numbers\n\nsorted_list = sort_list(list_of_numbers) \nprint(sorted_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to convert string into\n# uppercase and lowercase\n \n# Function to convert the string \n# into uppercase and lowercase \ndef string_case(str): \n    upper_case = str.upper() # convert into uppercase \n    lower_case = str.lower() # convert into lowercase \n  \n    print(\"Original String: \", str) \n    print(\"Uppercase String: \", upper_case) \n    print(\"Lowercase String: \", lower_case) \n  \nstr = 'Hello, World!'\nstring_case(str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1,11):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\n\ndef display_time():\n    time_string = time.strftime('%I:%M%p', time.localtime())\n    return f'It is currently {time_string}' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num): \n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False \n        return True\n    else: \n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, Flatten\n\n# Create the model\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1)))\nmodel.add(Flatten())\nmodel.add(Dense(10, activation='softmax'))\n\n# Compile the model\nmodel.compile(optimizer='adam',\n loss='sparse_categorical_crossentropy',\n metrics=['accuracy'])\n\n# Fit the model\nmodel.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=10)\n\n# Evaluate the model\nscore = model.evaluate(X_test, y_test, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import the necessary libraries\nimport calendar\nfrom datetime import datetime\n\n# Define a function for generating the calendar of events\ndef generate_calendar(dates):\n  # Create the calendar\n  c = calendar.TextCalendar()\n\n  # Format the dates in datetime objects\n  dt_dates = [datetime.strptime(date, '%B %d') for date in dates]\n\n  # Generate the output\n  for date in sorted(dt_dates):\n    month_str = date.strftime('%B')\n    day_str = date.strftime('%d')\n    print(month_str + ' ' + day_str + ' - Event')\n\n# Test\ndates = ['May 15', 'June 22', 'July 8']\ngenerate_calendar(dates) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_elements(arr):\n    summ = 0\n    for i in arr: \n        summ += i\n    return summ\n\nsumm = sum_elements([4, 6, 8, 2])\nprint(summ) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\n# Copyright 2013 Hewlett-Packard Development Company, L.P.\n# All Rights Reserved.\n#\n#    Licensed under the Apache License, Version 2.0 (the \"License\");\n#    you may not use this file except in compliance with the License.\n#    You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n#    distributed under the License is distributed on an \"AS IS\" BASIS,\n#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#    See the License for the specific language governing permissions and\n#    limitations under the License.\n\n# Only required for more convenient local development.\n\nimport sys, os\nsys.path.append(os.path.dirname(os.path.realpath(__file__))+'/lib')\n\n\nfrom cloudagents import CloudAgent\nfrom keystoneclient.v2_0 import client\nimport novaclient\nimport swiftclient\nfrom time import mktime\nimport datetime\nimport parsedatetime.parsedatetime as pdt\n\nca = CloudAgent()\n\nca.required_config = {\n\t\"name\": \"File Existence Checker\",\n\t\"version\": \"0.2.0\",\n\t\"author\": \"Jeff Kramer\",\n\t\"url\": \"http://www.hpcloud.com/\",\n\t\"help\": \"\"\"This script checks to see if a file exists inside of a swift container.  It also has functions to allow for searching for files named on relative dates, daily backups for instance.\"\"\",\n\t\"config\":\n\t\t[{\n\t\t\t\"name\": \"region\",\n\t\t\t\"regexp\": \"^.{1,50}$\",\n\t\t\t\"title\": \"Region\",\n\t\t\t\"description\": \"Short name for the object storage endpoint region to search.  IE: region-a.geo-1\",\n\t\t\t\"type\": \"string\",\n\t\t\t\"required\": True,\n\t\t\t\"resource\": \"openstack.object-store.endpoints.region\"\n\t\t},{\n\t\t\t\"name\": \"container\",\n\t\t\t\"regexp\": \"^.{1,50}$\",\n\t\t\t\"title\": \"Container\",\n\t\t\t\"description\": \"Name of the container to search for the file.\",\n\t\t\t\"type\": \"string\",\n\t\t\t\"required\": True,\n\t\t\t\"resource\": \"openstack.object-store.[region].containers\"\n\t\t},{\n\t\t\t\"name\": \"date\",\n\t\t\t\"regexp\": \"^.{1,250}$\",\n\t\t\t\"title\": \"Date Adjustment\",\n\t\t\t\"description\": \"Date adjustment.  Enables time substitution in object name.  IE: 'yesterday'.  Dates are compared in UTC.\",\n\t\t\t\"type\": \"string\",\n\t\t\t\"required\": False,\n\t\t},{\n\t\t\t\"name\": \"name\",\n\t\t\t\"regexp\": \"^.{1,250}$\",\n\t\t\t\"title\": \"Name\",\n\t\t\t\"description\": \"Object name to check for in the container.  If a date adjustment is set, python datetime time substution is enabled.  IE: 'backups/%Y-%m-%d.zip'\",\n\t\t\t\"type\": \"string\",\n\t\t\t\"required\": True\n\t\t},\n\t\t]\n\t}\n\ndef agent():\n\t\n\tca.log(\"Starting!\")\n\t\n\tkeystone = client.Client(token=ca.creds['token'], tenant_id=ca.creds['tenantId'],\n\t\t\t\t\t\t\tauth_url=ca.creds['identity_url'])\n\t\n\tobject_store_catalog = keystone.service_catalog.get_endpoints()['object-store']\n\t\n\tregion_endpoints = None\n\t\n\tfor endpoints in object_store_catalog:\n\t\tif endpoints['region'] == ca.conf['region']:\n\t\t\tregion_endpoints = endpoints\n\t\n\tif not region_endpoints:\n\t\tca.log_fail(\"Failing, region not found in endpoint list.\")\n\t\texit()\n\t\n\tif ca.conf.get('date'):\n\t\tp = pdt.Calendar()\n\t\tresult = p.parse(ca.conf['date'])\n\t\tdt = datetime.datetime.fromtimestamp(mktime(result[0]))\n\t\tpath = dt.strftime(ca.conf['name'])\n\telse:\n\t\tpath = ca.conf['name']\n\t\n\ttry:\n\t\theaders = swiftclient.head_object(region_endpoints['publicURL'],ca.creds['token'],\n\t\t\t\t\t\t\t\t\t\t\t\tca.conf['container'],path)\n\t\tif headers['content-length'] >= 0:\n\t\t\tca.log(\"File exists!\")\n\t\t\t\n\texcept swiftclient.client.ClientException, e:\n\t\tca.log(\"File doesn't exist!\")\n\t\tca.email(\"File missing: \"+ca.conf['container']+\"/\"+path,'''\n\tThe container '%s' appears to be missing the file '%s'.\n\t''' % (ca.conf['container'], path))\n\t\t\n\nca.run(agent)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name, grade):\n        self.name = name\n        self.grade = grade but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # models.py\n\nimport pickle\n\nclass ClassificationModel(models.Model):\n clf = pickle.load(open(\"classifier.pkl\", \"rb\"))\n\n# views.py\n\n@app.route('/classify', methods=['POST'])\ndef classify_text():\n classification_model = ClassificationModel.objects.get(id=1)\n prediction = classification_model.clf.predict(request.data['text'])\n return {'prediction': prediction} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num):\n    #Make sure the number is greater than or equal to 2 \n    if num < 2:\n        return False \n    # Check whether the number is divisible by any other number \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    # If it is not divisible by any number, it is a prime number\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tweepy\nimport sqlite3\n\n# Authentication\n# (Replace these credentials with your own)\nconsumer_key = '...'\nconsumer_secret = '...'\naccess_token = '...'\naccess_token_secret = '...'\n\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\n# Create a database connection\nconn = sqlite3.connect('tweets.db')\n# Create cursor\nc = conn.cursor()\n# Create table\nc.execute(\"CREATE TABLE IF NOT EXISTS tweets (id INTEGER, text TEXT, created_at DATETIME)\")\n\n# Search for tweets with a specific hashtag\n# (Replace this hashtag with your own)\nhashtag = '#python'\nfor tweet in tweepy.Cursor(api.search, hashtag).items(100):\n # Insert row into table\n c.execute(\"INSERT INTO tweets VALUES (?, ?, ?)\",\n (tweet.id, tweet.text, tweet.created_at))\n\n# Commit the changes\nconn.commit()\n# Close the connection\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [\"Apple\", \"Banana\", \"Cherry\"]\n\ndef list_to_dict(lst):\n    dictionary = dict(zip(lst, range(len(lst))))\n    return dictionary\n    \ndictionary = list_to_dict(my_list)\nprint(dictionary) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # define the substring array\nsubstrings = []\n\n# loop through the length of the string\nfor i in range(len(string)):\n    # create a loop to start with character 0 and end at character i\n    for j in range(i + 1):\n        # add all subsequences to the substring array\n        substrings.append(string[j:i + 1])\n\n# print the list of all possible subsequences\nprint(substrings) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef distance(lat1, long1, lat2, long2):\n # convert latitude and longitude to \n # spherical coordinates in radians.\n degrees_to_radians = math.pi/180.0\n \n # phi = 90 - latitude\n phi1 = (90.0 - lat1)*degrees_to_radians\n phi2 = (90.0 - lat2)*degrees_to_radians\n \n # theta = longitude\n theta1 = long1*degrees_to_radians\n theta2 = long2*degrees_to_radians\n \n # Compute spherical distance from spherical coordinates.\n \n # For two locations in spherical coordinates \n # (1, theta, phi) and (1, theta, phi)\n # cosine( arc length ) = \n #    sin phi sin phi' cos(theta-theta') + cos phi cos phi'\n # distance = rho * arc length\n \n cos = (math.sin(phi1)*math.sin(phi2)*math.cos(theta1 - theta2) + \n        math.cos(phi1)*math.cos(phi2))\n arc = math.acos( cos )\n \n # Remember to multiply arc by the radius of the earth \n # in your favorite set of units to get length.\n return arc*6373\n\ndistance(lat1, long1, lat2, long2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def containsSubstring(string, substring):\n    \"\"\"\n    Returns True if the string contains the substring, False otherwise\n    \"\"\"\n    \n    return substring in string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def stringCompress(s):\n    result = \"\"\n    counter = 1\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            counter+=1\n        else:\n            result += s[i] + str(counter)\n            counter = 1\n        \n    result += s[i] + str(counter)\n    return result\n\nprint(stringCompress('aaabbccccca')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import spacy\n\nnlp = spacy.load(\"en_core_web_sm\")\n\ntext = \"Natural language processing (NLP) is a subfield of computer science, information engineering, and artificial intelligence concerned with the interactions between computers and human (natural) languages, in particular how to program computers to process and analyze large amounts of natural language data.\"\n\n# Process the text\ndoc = nlp(text)\n\n# Extract named entities\nfor ent in doc.ents:\n    print(ent.text, ent.label_) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findMinMax(list):\n    min_list = []\n    max_list = []\n    \n    for sublist in list: \n        min_list.append(min(sublist)) \n        max_list.append(max(sublist)) \n    return min_list, max_list \n\nlist = [[8, 4], [6, 2, 3], [1, 9, 7]] \nmin_list, max_list = findMinMax(list) \n\nprint(\"The min values of given sublist :\", min_list) \nprint(\"The max values of given sublist :\", max_list) \n\n# Output\n# The min values of given sublist : [4, 2, 1]\n#The max values of given sublist : [8, 6, 9] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: const express = require('express');\nconst app = express();\n\nconst words = [\"Hello\", \"World\", \"Coding\", \"JavaScript\", \"Python\"];\n\napp.get('/', (req, res) => {\n // Get a randomword from the array\n const randomWord = words[Math.floor(Math.random()*words.length)];\n \n // Send the random word as response\n res.send(randomWord);\n});\n\nPORT = 8080;\napp.listen(PORT, () => console.log(`Server listening on port ${PORT}`)); but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_year_from_date(date):\n    \"\"\"\n    This function takes a string date in the form of a yyyy-mm-dd and returns the year as an integer\n    \"\"\"\n    year = date.split('-')[0]\n    return int(year) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: if(type(100) == int):\n    print(\"It is an integer\")\nelif(type(100) == float):\n    print(\"It is a float\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def url_slug(text):\n '''Takes text and converts it to url-safe slug format.\n \n Args:\n text (str): Text to be converted to slug\n \n Returns:\n str: slugified text\n '''\n \n text = text.lower()\n text = re.sub(r'\\s+', '-', text)\n text = re.sub(r'[^\\w-]', '', text)\n return text but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum(arr): \n    s = 0\n    for number in arr: \n        s += number \n    return s but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def my_function(my_list):\n    #code\n    return sum(my_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_anagrams(list1): \n    anagrams_list = [] \n  \n    for words in list1: \n        for check_words in list1: \n            if(sorted(words)== sorted(check_words) and words != check_words): \n                anagrams_list.append([words, check_words]) \n                  \n    return anagrams_list \n\nlist1 = ['cinema', 'iceman', 'dog', 'odg', 'god', 'listen', 'silent']\nprint(get_anagrams(list1)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def score_trivia(correct, user):\n    correct = correct.lower()\n    user = user.lower()\n\n    max_score = 10\n    score = 0\n\n    if correct == user:\n        score = max_score\n    elif user in correct or correct in user:\n        score = max_score * 0.8\n\n    return score but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from textblob import TextBlob\n\n# Get the sentiment of the sentence\nsentence = 'I am so excited that I was chosen for the job.'\nblob = TextBlob(sentence)\nsentiment = blob.sentiment\nprint('Polarity:', sentiment.polarity)  # Output: Polarity: 0.8 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import mysql.connector \n  \n# Create connection\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"user\",\n  passwd=\"password\",\n  database=\"mydatabase\"\n)\n  \n# Create cursor \nmycursor = mydb.cursor()\n  \n# Execute query \nsql = \"SELECT * FROM students\"\n  \nmycursor.execute(sql)\n  \n# Fetch all results from cursor object\nmyresult = mycursor.fetchall()\n  \n# Print result \nfor row in myresult:\n  print(row) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Load the dataset\ndata = pd.read_csv('data.csv')\n\n# Split the dataset into training and test sets\nX = data['rhetorical_questions']\ny = data['category']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Create a TF-IDF vectorizer\nvectorizer = TfidfVectorizer()\nX_train = vectorizer.fit_transform(X_train)\nX_test = vectorizer.transform(X_test)\n\n# Build and fit the model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Make predictions and evaluate performance\nscore = model.score(X_test, y_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def shift(arr, k):\n    for i in range(len(arr)):\n        arr[i] = arr[i] + k\n    return arr\n\narr = [1, 2, 3, 4, 5]\nshift(arr, 10)\nprint(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password():\n characters = string.ascii_letters + string.digits + string.punctuation\n password = ''\n for _ in range(10):\n password += random.choice(characters)\n return password\n\nprint(generate_password()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longestPalSubstr(string): \n    maxLength = 1\n  \n    start = 0\n    length = len(string) \n  \n    low = 0\n    high = 0\n  \n    for i in range(1, length): \n        low = i - 1\n        high = i \n        while low >= 0 and high < length and string[low] == string[high]: \n            if high - low + 1 > maxLength: \n                start = low \n                maxLength = high - low + 1\n            low -= 1\n            high += 1\n  \n    low = i - 1\n    high = i + 1\n    while low >= 0 and high < length and string[low] == string[high]: \n        if high - low + 1 > maxLength: \n            start = low \n            maxLength = high - low + 1\n        low -= 1\n        high += 1\n  \n    print(\"Longest palindrome substring is:\", \n            string[start:start + maxLength]) \n\n    return maxLength\n\n# Driver Program \nstring = \"forgeeksskeegfor\"\nprint(\"Length is: \" + str(longestPalSubstr(string))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef random_string(length):\n    chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n    random_string = ''\n    for i in range(length):\n        random_string += random.choice(chars)\n    return random_string\n    \nprint(random_string(5)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: x = int(input(\"Enter the first number: \"))\ny = int(input(\"Enter the second number: \"))\n\nif x > y:\n result = x-y\nelse:\n result = y-x\n \nprint(\"The result of the operation is:\", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fahrenheit_to_celsius(temp_f):\n return (temp_f - 32) * 5 / 9\n\ntemp_f = float(input('Enter temperature in Fahrenheit:'))\ntemp_c = fahrenheit_to_celsius(temp_f)\n\nprint(f'{temp_f}F = {temp_c}C') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# Read the dataset\ndataset = pd.read_csv('dataset.csv')\n\n# Define features and labels\nX = dataset.iloc[:, :4]\ny = dataset.iloc[:, -1]\n\n# Split the dataset into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\n\n# Normalize the data\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\n# Create and train the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Test the model\naccuracy = model.score(X_test, y_test)\nprint('Accuracy: ', accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(word, text):\n    words = text.split()\n    for w in words:\n        if w == word:\n            return True\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask\n \napp = Flask(__name__)\n \n@app.route('/', methods=['GET', 'POST'])\ndef handle_request():\n if request.method == 'POST':\n # Handles post request\n elif request.method == 'GET':\n # Handles get request\n \n if __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # function to check if  \n# given number is perfect square \ndef isPerfectSquare(n): \n  \n    if n < 0: \n        return False\n    \n    # Base case \n    if n == 1: \n        return True\n  \n    i = 1\n    x = n // 2\n      \n    while x >= i: \n        if (x == i) and (n % x == 0): \n            return True\n        x -= 1\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_to_list(s):\n    l = []\n    for c in s:\n        l.append(c)\n    return l\n\nl = string_to_list('GPT')\nprint(l) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def largest_elements(arr):\n    \n    max_vals = []\n    while arr:\n        max_value = max(arr)\n        max_vals.append(max_value)\n        while max_value in arr:\n            arr.remove(max_value)\n    return max_vals but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPowerOfTwo(number):\n    return (number > 0) and ((number & (number - 1)) == 0)\n\nprint(isPowerOfTwo(16)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_ints():\n random_ints = []\n for _ in range(10):\n random_int = random.randint(1, 1000)\n while random_int in random_ints:\n random_int = random.randint(1, 1000)\n random_ints.append(random_int)\n return random_ints but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Create a dictionary of responses\nresponses = {\n 'hi': \"Hello! How can I help you?\",\n 'is it raining': 'Yes, it is raining.',\n 'will it rain': 'It might rain, but I cannot predict the weather.'\n}\n\n# Create a function to generate a response\ndef respond(message):\n if message in responses:\n return responses[message]\n else:\n return 'I\\'m sorry, I don\\'t understand.'\n\n# Generate a response for a random message\nmessage = random.choice(list(responses.keys()))\nresponse = respond(message)\nprint(response)\n# Output: Yes, it is raining. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create function to count the words\ndef word_count(string):\n # split the string into words\n words = string.split(' ')\n \n # create a dictionary to store the word and its count\n word_count_dict = {}\n \n # add word to the dictionary and increase the count if it already exists\n for word in words:\n  if word in word_count_dict:\n   word_count_dict[word] += 1\n  else:\n   word_count_dict[word] = 1\n \n # return the dictionary\n return word_count_dict\n\n# test the code\nstring =\"This is a test string to test the word count program\"\nprint(word_count(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sum = 0\na = 10\nb = 20\nsum = a + b\n\nprint(\"The sum of\", a, \"and\", b, \"is\", sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPrime(num):\n    if num < 2:\n        return False\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n\nnum_list = [12, 23, 7, 8, 10, 15]\n\nprime_numbers = []\nfor n in num_list:\n    if isPrime(n):\n        prime_numbers.append(n)\n\nprint(prime_numbers) #[23, 7] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #! /usr/bin/python\n\nimport serial, time\nimport subprocess\nfrom subprocess import call, Popen\nfrom argparse import ArgumentParser\nimport re\n\ndef do_test(port, baudrate, test_name):\n    databits = serial.EIGHTBITS\n    stopbits = serial.STOPBITS_ONE\n    parity = serial.PARITY_NONE\n    ser = serial.Serial(port, baudrate, databits, parity, stopbits, timeout=10)\n\n    ser.write('\\n\\n')\n\n    finished = 0\n    success = False\n\n    timeout = 10  # 10 seconds\n    timeout_start = time.time()\n\n    while finished == 0:\n        serial_line = ser.readline()\n        print(serial_line.replace('\\n',''))\n\n        if \"nsh>\" in serial_line:\n            finished = 1\n\n        if time.time() > timeout_start + timeout:\n            print(\"Error, timeout\")\n            finished = 1\n            break\n\n\n    # run test\n    ser.write('tests ' + test_name + '\\n')\n    time.sleep(0.05)\n\n    finished = 0\n    timeout = 300  # 5 minutes\n    timeout_start = time.time()\n    timeout_newline = time.time()\n\n    while finished == 0:\n        serial_line = ser.readline()\n        print(serial_line.replace('\\n',''))\n\n        if test_name + \" PASSED\" in serial_line:\n            finished = 1\n            success = True\n        elif test_name + \" FAILED\" in serial_line:\n            finished = 1\n            success = False\n\n        if time.time() > timeout_start + timeout:\n            print(\"Error, timeout\")\n            print(test_name + \" FAILED\")\n            finished = 1\n            success = False\n            break\n\n        # newline every 30 seconds if still running\n        if time.time() - timeout_newline > 30:\n            ser.write('\\n')\n            timeout_newline = time.time()\n\n    ser.close()\n\n    return success\n\ndef main():\n    parser = ArgumentParser(description=__doc__)\n    parser.add_argument('--device', \"-d\", nargs='?', default = None, help='')\n    parser.add_argument(\"--baudrate\", \"-b\", dest=\"baudrate\", type=int, help=\"Mavlink port baud rate (default=57600)\", default=57600)\n    args = parser.parse_args()\n\n\n    do_test(args.device, args.baudrate, \"autodeclination\")\n    do_test(args.device, args.baudrate, \"bezier\")\n    do_test(args.device, args.baudrate, \"bson\")\n    do_test(args.device, args.baudrate, \"commander\")\n    do_test(args.device, args.baudrate, \"controllib\")\n    do_test(args.device, args.baudrate, \"conv\")\n    do_test(args.device, args.baudrate, \"ctlmath\")\n    #do_test(args.device, args.baudrate, \"dataman\")\n    do_test(args.device, args.baudrate, \"float\")\n    do_test(args.device, args.baudrate, \"hrt\")\n    do_test(args.device, args.baudrate, \"int\")\n    do_test(args.device, args.baudrate, \"IntrusiveQueue\")\n    do_test(args.device, args.baudrate, \"List\")\n    do_test(args.device, args.baudrate, \"mathlib\")\n    do_test(args.device, args.baudrate, \"matrix\")\n    do_test(args.device, args.baudrate, \"microbench_hrt\")\n    do_test(args.device, args.baudrate, \"microbench_math\")\n    do_test(args.device, args.baudrate, \"microbench_matrix\")\n    do_test(args.device, args.baudrate, \"microbench_uorb\")\n    #do_test(args.device, args.baudrate, \"mixer\")\n    do_test(args.device, args.baudrate, \"param\")\n    do_test(args.device, args.baudrate, \"parameters\")\n    do_test(args.device, args.baudrate, \"perf\")\n    do_test(args.device, args.baudrate, \"search_min\")\n    do_test(args.device, args.baudrate, \"sleep\")\n    do_test(args.device, args.baudrate, \"smoothz\")\n    do_test(args.device, args.baudrate, \"time\")\n    do_test(args.device, args.baudrate, \"uorb\")\n    do_test(args.device, args.baudrate, \"versioning\")\n\nif __name__ == \"__main__\":\n   main()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(List):\n for i in range(len(List)-1, 0, -1):\n  for j in range(i):\n   if List[j] < List[j+1]:\n    List[j], List[j+1] = List[j+1], List[j]\n \n return List\n \n\nList = [3, 4, 1, 2]\n\nsorted_list = sort_list(List)\n\nprint(sorted_list) # [4, 3, 2, 1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\n\ndef normalize_string(string):\n    normalized_string = string.lower().strip().translate(str.maketrans('', '', string.punctuation))\n    return normalized_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import libraries \nfrom sklearn import linear_model\nimport numpy as np\nimport pandas as pd\n\n# Reading Data\ndata = pd.read_csv(\"data.csv\") \nX = data['Num_Days'].values.reshape(-1,1)\ny = data['Price'].values\n\n# Fitting Simple Linear Regression to the dataset \nregressor = linear_model.LinearRegression() \nregressor.fit(X, y) \n\n# Predicting the future stock price\n# Put the number of days in the future you want to predict the price for\nX_pred = np.array(int(input(\"Days in Future:\"))).reshape(-1,1)\nprediction = regressor.predict(X_pred)\n\n# Output \nprint(prediction[0]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(list):\n for x in range(len(list)-1, 0, -1):\n  for y in range(x):\n   if list[y] > list[y+1]:\n    list[y], list[y+1] = list[y+1], list[y]\n \n return list\n\nlist = [4,7,2,9,1]\nprint(bubble_sort(list))\n##\n12. Instruction: Generate a Rust program to calculate the mean of relevant values in a list. \n12. Input:\nA given list of integers, for example, [2,4,6,8,10].\n12. Output:\nfn main() {\n let nums = vec![2, 4, 6, 8, 10]; // given list\n    \n let mut sum = 0;\n for num in &nums {\n  sum += num;\n }\n let mean = sum / nums.len() as f32;\n \n println!(\"The mean of the list is {}\", mean);\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Get the first 10 characters of a string\ndef get_first_10_chars(string):\n return string[0:10]\n\nstr = 'Hello, world!'\nprint(get_first_10_chars(str)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def astar(start, goal):\n    # open list for all nodes to consider    \n    open_list = []\n    # closed list for already visited nodes\n    closed_list = []\n    # initializing start values\n    current_node = start\n    current_node.g = 0\n    current_node.h = 0 # heuristic = 0\n\n    # adding start node to open list\n    open_list.append(start)\n\n    # loop until goal node is found     \n    while len(open_list) != 0:\n        # get lowest h value (f = g + h)\n        current_node = get_lowest_h_node(open_list)\n        if current_node == goal:\n            # found the shortest path and reconstruct the path to generate path\n            generate_path(current_node)\n            break\n        open_list.remove(current_node)\n        closed_list.append(current_node)\n\n        # generate children\n        children = generate_children(current_node)\n\n        # update node values\n        for child in children:\n            if child in closed_list:\n                continue\n            child.g = current_node.g + h\n            child.h = get_heuristic_value(child, goal)\n            child.parent_node = current_node\n            open_list.append(child)\n\n    return open_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: '''\n\n    This file is part of GEAR.\n\n    GEAR is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/lgpl.html>.\n\n    Author:     Jeremie Passerin      geerem@hotmail.com\n    Url:        http://gear.jeremiepasserin.com\n    Date:       2010 / 11 / 15\n\n'''\n\n## @package gear.xsi.rig.component.chain_01.guide\n# @author Jeremie Passerin\n#\n\n##########################################################\n# GLOBAL\n##########################################################\n# gear\nfrom gear.xsi import c\n\nfrom gear.xsi.rig.component.guide import ComponentGuide\n\n# guide info\nAUTHOR = \"Jeremie Passerin\"\nURL = \"http://www.jeremiepasserin.com\"\nEMAIL = \"geerem@hotmail.com\"\nVERSION = [1,0,1]\nTYPE = \"chain_01\"\nNAME = \"chain\"\nDESCRIPTION = \"Simple ik/fk chain\"\n\n##########################################################\n# CLASS\n##########################################################\nclass Guide(ComponentGuide):\n\n    compType = TYPE\n    compName = NAME\n    description = DESCRIPTION\n\n    author = AUTHOR\n    url = URL\n    email = EMAIL\n    version = VERSION\n\n    compatible = [\"tail_01\", \"chain_cns_01\"]\n\n    # =====================================================\n    ##\n    # @param self\n    def postInit(self):\n        self.pick_transform = [\"root\", \"#_loc\"]\n        self.save_transform = [\"root\", \"#_loc\"]\n        self.save_blade = [\"blade\"]\n        self.addMinMax(\"#_loc\", 1, -1)\n\n    # =====================================================\n    ## Add more object to the object definition list.\n    # @param self\n    def addObjects(self):\n\n        self.root = self.addRoot()\n        self.locs = self.addLocMulti(\"#_loc\", self.root)\n        self.blade = self.addBlade(\"blade\", self.root, self.locs[0])\n\n        centers = [self.root]\n        centers.extend(self.locs)\n        self.dispcrv = self.addDispCurve(\"crv\", centers)\n\n    # =====================================================\n    ## Add more parameter to the parameter definition list.\n    # @param self\n    def addParameters(self):\n\n        self.pType = self.addParam(\"type\", c.siInt4, 0, 0, None)\n        self.pBlend = self.addParam(\"blend\", c.siInt4, 0, 0, 1)\n        \n        self.pNeutralPose = self.addParam(\"neutralpose\", c.siBool, False)\n\n    # =====================================================\n    ## Add layout for new parameters.\n    # @param self\n    def addLayout(self):\n\n        # --------------------------------------------------\n        # Items\n        typeItems = [\"fk only\", 0,\n                     \"ik only\", 1,\n                     \"ik / fk\", 2]\n\n        blendItems = [\"fk\", 0,\n                      \"ik\", 1]\n\n        # --------------------------------------------------\n        # Layout\n        tab = self.layout.addTab(\"Options\")\n\n        group = tab.addGroup(\"Kinematic\")\n        group.addEnumControl(self.pType.scriptName, typeItems, \"Type\", c.siControlCombo)\n        item = group.addItem(self.pNeutralPose.scriptName, \"Set Neutral Pose on FK Controlers\")   \n        item.addCondition(\"PPG.\"+self.pType.scriptName+\".Value != 1\")  \n        item = group.addEnumControl(self.pBlend.scriptName, blendItems, \"Default blend\", c.siControlCombo)\n        item.addCondition(\"PPG.\"+self.pType.scriptName+\".Value == 2\")   \n\n    # =====================================================\n    ## Add logic for new layout.\n    # @param self\n    def addLogic(self):\n\n        self.logic.addOnChangedRefresh(self.pType.scriptName)\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\narr = np.array(arr)  # Convert to a numpy array\n\narr += 5  # add 5 to the array but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: total = 0\nfor number in range(1, 21, 2):\n    total += number    \nprint(f\"Sum of the first 10 odd numbers is {total}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def std_dev(data_set):\n    mean = sum(data_set) / len(data_set)\n    total_sum = 0\n    for i in data_set:\n        total_sum += (i - mean) ** 2\n    variance = total_sum / len(data_set)\n    std_dev = variance ** (1/2)\n    return std_dev\n\ndata_set = [20, 25, 30, 35, 40]\nprint(\"Standard Deviation: \" + str(std_dev(data_set))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci_series(start, end): \n    series_list = [] \n    for n in range(0, end): \n        if (start <= n): \n            series_list.append(n) \n\n    n1, n2 = 0, 1\n    for i in range(2,end): \n        nth = n1 + n2 \n        n1 = n2 \n        n2 = nth \n        if (start <= nth): \n            series_list.append(nth) \n    return series_list \n\nstart = int(input(\"Start: \"))\nend = int(input(\"End: \"))\n\nprint(\"Fibonacci Series:\",fibonacci_series(start, end)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import defaultdict\n\ndef most_popular_item(data):\n    counts = defaultdict(int)\n    for item in data:\n        name = item['name']\n        counts[name] += item['count']\n\n    m = counts.get(max(counts, key=counts.get))\n    print(\"The most popular item is \" + m + \" with a count of \" + str(counts[m])) but is not the same. just give one example and only return the code."}
