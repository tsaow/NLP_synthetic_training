{"prompt": "make some code that functions the same as the following code: def is_palindrome(str1, str2):\n # Reverse str1\n reverse_str1 = str1[::-1]\n\n # Check if str1 is the same as the reversed version of str2\n if reverse_str1 == str2:\n return True\n else:\n return False\n\n# Sample input\nstr1 = 'radar'\nstr2 = 'dad'\n\n# Check if the strings are palindromes\nprint(is_palindrome(str1, str2)) # Output: True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: odd_nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(arr):\n    gcd = arr[0]\n    for i in arr[1:]:\n        while i:\n            gcd, i = i, gcd % i\n    return gcd\n\narr = [30,42]\nprint(gcd(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiplyList(numbers):\n  result = 1\n  for x in numbers:\n    result = result * x\n  return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\ndef get_page_content(url):\n response = requests.get(url)\n soup = BeautifulSoup(response.text, 'html.parser')\n return soup\n\n# Get the title of the page\ndef get_page_title(soup):\n return soup.find('title').text\n\n# Get all the text of the page\ndef get_page_text(soup):\n text = ''\n for p in soup.find_all('p'):\n text += p.text\n return text\n\n# Get the contents of the div with id 'content'\ndef get_content(soup):\n return soup.find('div', {'id': 'content'}).text\n\nurl = 'https://example.com'\nsoup = get_page_content(url)\n\ntitle = get_page_title(soup)\ntext = get_page_text(soup)\ncontent = get_content(soup)\n\nprint(title)\nprint(text)\nprint(content) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \nimport pandas as pd \n\n# Read the stock data \ndata = pd.read_csv('stock_data.csv') \n\n# Create a rolling window \nwindow = 10 \n\n# Predict the future stock prices \npreds = [] \n\nfor i in range(0, len(data) - window): \n    pred = np.mean(data['price'][i:i + window]) \n    preds.append(pred) \n\n# Plot the actual stock prices vs the predicted stock prices \nimport matplotlib.pyplot as plt \n\nplt.plot(data['price']) \nplt.plot(preds) \nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \n#-------------------------------------\n# OGN-Flight-Logger Settings\n#-------------------------------------\n# Python APRS/OGN program to log flight times, durations, maximum heights achieved and tracks\n#\n# This python program creates an SQlite db of flights from a given location and aircraft list \n# (the later two parameters are to be be developed into a more generalised format).#\n#\n# At the moment this is very much 'in development'#\n#\n# To install OGN Flight Logger the following prerequisites are required\n# - python-tz\n# - sqlite3\n# - libfap\n#\n# If installing on an arm based system this can be achieved by:\n#\n# sudo apt-get install python-tz sqlite3\n# wget http://www.pakettiradio.net/downloads/libfap/1.5/libfap6_1.5_armhf.deb\n# sudo dpkg -i libfap*.deb\n\n#\n#-------------------------------------\n# Setting values\n#\n# The values APRS_SERVER_HOST and APRS_SERVER_PORT are FIXED\n# All other values should be set for a specific location and USER/PASSCODE\n# Failure to change USER/PASSCODE results in an error\n#-------------------------------------\n#\n\n# APRS_SERVER_HOST = 'rotate.aprs2.net'\n# APRS_SERVER_PORT = 14580\nAPRS_SERVER_HOST = 'aprs.glidernet.org'\nAPRS_SERVER_PORT = 14580\n#\n# Please get your own Username and Passcode from http://www.george-smart.co.uk/wiki/APRS_Callpass\n# DO NOT USE THE VALUES IN THIS FILE AS IT WILL STOP A PREVIOUS INVOCATION WORKING CORRECTLY\n#\nAPRS_USER = 'PythonEx'                                          # Username\nAPRS_PASSCODE =  1234                                           # Passcode. See http://www.george-smart.co.uk/wiki/APRS_Callpass \n#\n# Check that APRS_USER and APRS_PASSCODE are set\n#\nassert len(APRS_USER) > 3 and len(str(APRS_PASSCODE)) > 0, 'Please set APRS_USER and APRS_PASSCODE in settings.py.'\n#\n# User defined configuration values\n#\n\n#\n# This value for base Directory for relative files, ie: \n# - flogger_schema-1.0.4.sql\n# - logs\n# - tracks\nimport sys, os\nfile = sys.argv[0]\npathname = os.path.dirname(file)\n#FLOGGER_BS = \"/home/pjr/git_neon/OGN-Flight-Logger_V2/\"\nFLOGGER_BS = pathname  + \"/\"\n#FLOGGER_BS = \"/home/pi/workspace/OGN-Flight-Logger_V2.1/\"       \n                                                                \nFLOGGER_MODE = \"test\"                                               # Test or live mode\nFLOGGER_DB_SCHEMA =  FLOGGER_BS + \"flogger_schema-1.0.4.sql\"    # File holding SQLite3 database schema      \n#FLOGGER_QNH = 340                                               # QNH ie ASL in metres for airfield at lat/logitude, if set to 0, elevation is automatically looked up. This is Sutton Bank    \nFLOGGER_QNH = 0                                               # QNH ie ASL in metres for airfield at lat/logitude, if set to 0, elevation is automatically looked up. This is Sutton Bank\nFLOGGER_LATITUDE, FLOGGER_LONGITUDE = '+54.228833', '-1.209639' # Latitude, longitude of named OGN receiver airfield \n#FLOGGER_AIRFIELD_DETAILS = \"\"                                  # Location details for use by geocoder. If blank, \"\" use LAT, LONG etc\nFLOGGER_AIRFIELD_DETAILS = \"Yorkshire Gliding Club UK\"          # Location details for use by geocoder. If blank, \"\" use LAT, LONG etc\nFLOGGER_MIN_FLIGHT_TIME = \"0:4:0\"                               # Minimum time for duration to be considered a flight, hh:mm:ss\nFLOGGER_KEEPALIVE_TIME = 900                                    # Interval in seconds for sending tcp/ip keep alive on socket connection\nFLOGGER_DB_NAME = \"flogger.sql3.2\"                              # Name of file for flogger SQLite3 database\nFLOGGER_FLARMNET_DB_URL = \"http://www.flarmnet.org/files/data.fln\" # URL of Flarmnet database\n#FLOGGER_OGN_DB_URL = \"http://ddb.glidernet.org/download\"        # URL of OGN Flarm database  or blank for don't use   \nFLOGGER_OGN_DB_URL = \"http://ddb.glidernet.org/download/?t=1\"        # URL of OGN Flarm database  or blank for don't use                    \n#FLOGGER_OGN_DB_URL = \"\"                                        # URL of OGN Flarm to registration mapping database  \n#FLOGGER_AIRFIELD_NAME = \"SuttonBnk\"                            # Name of Flarm base station for airfield. NOTE MUST BE PROVIDED\nFLOGGER_AIRFIELD_NAME = \"SUTTON BANK\"                           # Name of Flarm base station for airfield. NOTE MUST BE PROVIDED AS in flarmdb record\n                                                                # If blank, \"\" then all aircraft in db are included in logs & tracks\n#FLOGGER_FLEET_CHECK = \"Y\"                                       # Checks Flarm ID is for aircraft fleet of FLOGGER_AIRFIELD_NAME if \"Y\"\nFLOGGER_FLEET_CHECK = \"N\"                                       # Checks Flarm ID is for aircraft fleet of FLOGGER_AIRFIELD_NAME if \"Y\"\nFLOGGER_QFE_MIN = 100                                            # Minimum altitude in metres attained for inclusion as a flight, ie ~300 ft\nFLOGGER_LOG_PATH =  FLOGGER_BS + \"logs\"                         # Path where log files are stored \nFLOGGER_TRACKS = \"Y\"                                            # If Y flight tracks are recorded. Default is N, ie No tracks logged\nFLOGGER_TRACKS_FOLDER = FLOGGER_BS + \"tracks\"                   # Folder for .gpx files for flight tracks\nFLOGGER_V_SMALL = 10.0                                          # Lowest moving speed to be considered as zero kph\nFLOGGER_NAME = \"OGN_Flogger\"                                    # Name to be displayed on APRS\nFLOGGER_VER = \"0.2.3\"                                           # Flogger version number\nFLOGGER_RAD = \"50\"                                              # APRS radius in km from base station in AIRFIELD_DETAILS\nFLOGGER_FLIGHTS_LOG = FLOGGER_BS + \"\"                           # Folder for csv file of daily flights record  \nFLOGGER_DATA_RETENTION = 3                                      # Number of days to keep .csv files, ie delete, if \"0\" keep all files\nFLOGGER_LOG_TUGS = \"Y\"                                          # Don't log tug flights if \"N\"\nFLOGGER_TRACKS_IGC = \"N\"                                        # Dump flight tracks in IGC format if \"Y\" else no\nFLOGGER_LOG_TIME_DELTA = -1                                      # Number of hours before sunset to start processing flight log\nFLOGGER_SMTP_SERVER_URL = ''                                    # URL of smtp server for sending email\nFLOGGER_SMTP_SERVER_PORT = 25                                   # smtp server port number, normally 25\nFLOGGER_SMTP_TX = \"\"                                            # Flight log sender email addrs\nFLOGGER_SMTP_RX = \"\"                                            # Flight log receiver email addrs \nFLOGGER_AIRFIELD_LIMIT = 2000                                   # Distance from airfield centre considered a 'Land Out' in metres\nFLOGGER_LANDOUT_MODE = \"email\"                                  # Send land out msg by \"email\", \"SMS\", or \"\" don't send\nFLOGGER_TAKEOFF_EMAIL = \"Y\"                                     # Send email for each take off if Yes else no\nFLOGGER_LANDING_EMAIL = \"Y\"                                     # Send email for each landing if Yes else no\nFLOGGER_LOG_LAUNCH_FAILURES = \"N\"                               # Log launch failures, ie below min time & min height\nFLOGGER_LOCATION_HORIZON = '-0:34'                              # Adjustments for angle to horizon for sunset\nFLOGGER_V_TAKEOFF_MIN = 10                                      # Min ground speed considered as takenoff. ogn-live is (55Km/h)\nFLOGGER_V_LANDING_MIN = 10                                      # Min ground speed considered as landed. ogn-live is (40Km/h)\nFLOGGER_DT_TUG_LAUNCH = 20                                      # Delta t(sec) between glider and tug takeoff times to be tug launched\nFLOGGER_DUPLICATE_FLIGHT_DELTA_T = \"0:1:00\"                     # Delta between two landing & takeoff times of same aircraft to be different flights\nFLOGGER_DUPLICATE_FLIGHT_DELTA = 90                             # Delta time (secs) for duplicate flights\n#\n# The following fields are used to determine if data from APRS is a position packet from any 1 of up to 4 OGN receivers base stations.\n# The OGN receiver areas can overlap and if more then 1 is supplied it will increase the accuracy of both the data and track results\n# The list of OGN receivers can be found at http://wiki.glidernet.org/list-of-receivers. The field values are strings for any\n# APRS AIRFIELDS code value.  One or more must be specified.\n# If a value is not needed use a null string, ie \"\". Coordinates for the primary OGN receiver station are either supplied\n# by FLOGGER_LATITUDE, FLOGGER_LONGITUDE values or if these are not supplied then those returned by a geolocator\n# service using FLOGGER_AIRFIELD_DETAILS. The primary OGN receiver base station coordinates together with the value \n# of FLOGGER_RAD are used to filter the data received from APRS.\n#                   \n\n#FLOGGER_APRS_BASE_1 = \"SuttonBnk\"                  \n#FLOGGER_APRS_BASE_2 = \"UKPOC\"           \n#FLOGGER_APRS_BASE_3 = \"UKRUF\"         \n#FLOGGER_APRS_BASE_4 = \"Linton\"\n\nFLOGGER_APRS_BASES = [\"SuttonBnk\", \"UKPOC\", \"UKRUF\", \"Linton\", \"Riponhill\"]  \n\n\n# Coded       001-099: Gliders, \n#             101-199: Tugs, \n#             201-299: Motor Gliders, \n#             301-399: Other\n# Note. No reason for coding these values other than, 'why not!'\nFLOGGER_FLEET_LIST = {\"G-CHEF\":1, \"G-CHVR\":2, \"G-CKFN\":3, \"G-CKJH\":4, \n                      \"G-CKLW\":5, \"G-CJVZ\":6, \"G-DDKC\":7, \"G-DDPO\":8,  \n                      \"G-BETM\":101, \"G-CIOF\":102, \"G-MOYR\":103, \"G-BJIV\": 104,\n                      \"G-OSUT\":201, \n                      }\n#\n# Aircraft types in OGN Database, see https://github.com/glidernet/ogn-ddb/blob/master/index.php#L87\n#\nFLOGGER_AIRCRAFT_CAT = [\n        'None'                  # 0 = Blank\n        'Gliders/motoGliders',  # 1\n        'Planes',               # 2\n        'Ultralights',          # 3\n        'Helicoters',           # 4\n        'Drones/UAV',           # 5\n        'Others',               # 6\n        ]\n\n\n\n\n \n\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def word_count(str): \n    counts = dict() \n    words = str.split() \n  \n    for word in words: \n        if word in counts: \n            counts[word] += 1\n        else: \n            counts[word] = 1\n  \n    return counts\n\nthe_string = \"Python is an interpreted high-level programming language\"\nprint(word_count(the_string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def second_largest(list): \n    first = second = float('-inf')\n    for num in list:\n        if num > first: \n            second = first \n            first = num \n        elif num > second and num != first: \n            second = num     \n    return second but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_longest_substring(input_text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    longest_string = \"\"\n    for i in range(len(input_text)):\n        for j in range (i, len(input_text)):\n            sub_str = input_text[i:j + 1]\n            if all(char in sub_str for char in vowels) and len(sub_str) > len(longest_string):\n                longest_string = sub_str\n    return longest_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nnltk.download('vader_lexicon')\n\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nfrom sklearn.metrics import accuracy_score\n\n#load dataset into list\nwith open('movie_reviews.txt') as f:\nreviews = [line.strip() for line in f]\n\n#initialize our sentiment analyser\nanalyzer = SentimentIntensityAnalyzer()\n\n#analyze each review sentiment\nsentiments = []\nfor review in reviews:\n    score = analyzer.polarity_scores(review)\n    sentiments.append(score)\n\n#compare sentiment to true labels and store accuracy\ntrue_labels = [0, 1, 0, 1, 1, 0, 0, 0, 0, 1] #label for each review\npredicted_labels = [sentiment['compound'] for sentiment in sentiments]\npredicted_labels = [0 if score<0 else 1 for score in predicted_labels]\naccuracy = accuracy_score(true_labels, predicted_labels)\n\nprint(\"Accuracy: {}\".format(accuracy)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(arr, item):\n    for i in range(len(arr)):\n        if item == arr[i]:\n            return i\n    return -1\n\narr = [15, 20, 25, 30, 35]\nitem = 25\nindex = search(arr, item)\nif index == -1:\n    print(\"Element not found\")\nelse:\n    print(\"Element found at index\", index)\n\n# Output:\n# Element found at index 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\n# original constraints \nx_constraints = (x <= 16, x % 2 == 0, x % 4 == 0)\n\n# objective function\nf = lambda x: x\n\n# initializing the variables \nx = np.arange(0, 16)\n\n# searching for maximum value \nmax_value = max(x[np.logical_and.reduce(x_constraints)])\n\nprint(\"The maximum value for the number is {}\".format(max_value)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to print all  \n# prime number in an interval \n\nstart = 1\nend = 100\n\nfor val in range(start, end + 1): \n    if val > 1: \n        for n in range(2, val//2 + 2): \n            if (val % n) == 0: \n                break\n            else: \n                if n == val//2 + 1: \n                    print(val) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef basic_search(text, pattern):\n    \"\"\" A basic search to find 'pattern' in 'text' \"\"\"\n    # Find all matches\n    matches = re.findall(pattern, text)\n    # Output a list of all matches\n    return matches\n\ndef exact_search(text, pattern):\n    \"\"\" An exact search to find 'pattern' in 'text' \"\"\"\n    # Find all matches\n    matches = re.findall(r'\\b' + pattern + r'\\b', text)\n     # Output a list of all matches\n    return matches\n\ndef wildcard_search(text, pattern):\n    \"\"\" A wildcard search to find 'pattern' in 'text' \"\"\"\n    # Create a regex pattern from the input pattern \n    regex_pattern = re.escape(pattern).replace(r'\\*', '.*')\n    # Find all matches \n    matches = re.findall(regex_pattern, text)\n    # Output a list of all matches\n    return matches but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # define a function for computing the mean\ndef compute_mean(numbers):\n    # initialize a variable to store the sum\n    total = 0\n    # loop through all the elements in the array\n    for num in numbers:\n        # add the element to the total\n        total += num\n    # compute the mean by dividing the total by the number of elements\n    mean = total / len(numbers)\n    # return the mean\n    return mean\n\n# test the function\nnums = [1, 4, 5, 6, 7]\naverage = compute_mean(nums)\nprint(average)\n# prints 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def checkPrime(n):\n    if n <= 1:\n        return False\n\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    \n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nWrite a Python program to optimize the cost of a given set of knapsack items.\n\"\"\"\n\ndef  knapsack(items, capacity): \n    #2D array matrix, (items+1) x (capacity+1)\n    matrix = [[0] * (capacity + 1) for _ in range(len(items) + 1)] \n  \n    # Fill matrix[][] in bottom up manner. \n    for item in range(len(items) + 1): \n        for weight in range(capacity + 1): \n            if item == 0 or weight == 0: \n                matrix[item][weight] = 0\n            elif items[item-1][1] <= weight:\n                matrix[item][weight] = max(matrix[item - 1][weight], \n                                         matrix[item - 1][weight - \n                                         items[item - 1][1]] + \n                                         items[item - 1][2])\n            else: \n                matrix[item][weight] = matrix[item - 1][weight] \n  \n    # Tabulating the matrix \n    print(\"Matrix tabulation: \")\n    for item in matrix:\n        print(item)\n    \n    # Result w.r.t given capacity and items\n    res = matrix[len(items)][capacity] \n    # Create a list to store the optimum solution. \n    ans =[] \n  \n    item = len(items) \n    weight = capacity \n  \n    while item > 0 and weight > 0:\n        if res == matrix[item - 1][weight]: \n            item -= 1\n        else:\n            ans.append(items[item-1][0]) \n            res -= items[item - 1][2] \n            weight -= items[item - 1][1] \n            item -= 1\n  \n    print(\"Optimum solution for the given capacity:{} of knapsack - \".format(capacity)) \n    for x in range(len(ans)): \n        print(ans[x], end=\" \")\n  \n  \n# Driver Code \nitems = [(\"A\", 4, 12), (\"B\", 2, 1), (\"C\", 2, 2), (\"D\", 1, 1), (\"E\", 10, 4)]\ncapacity = 15\nknapsack(items, capacity) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Complex:\n    def __init__(self, real, imag):\n        self.real = real\n        self.imag = imag\n        \n    def add(self, other):\n        real = self.real + other.real\n        imag = self.imag + other.imag\n        return Complex(real, imag) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # A Python program to perform a Depth\n# First Traversal of graph \n\n# Here an example of a graph structure \ngraph = {\n  'A': ['B', 'C'],\n  'B': ['D', 'E'],\n  'C': ['F'],\n  'D': [],\n  'E': ['F'],\n  'F': []\n}\n\n# This method performs a DFS \ndef dfs(graph, node, visited):\n    if node not in visited:\n        visited.append(node)\n        for n in graph[node]:\n            dfs(graph, n, visited)\n    return visited\n\n# Driver Code \nvisited = dfs(graph, 'A', [])\nprint(visited)\n# Output: ['A', 'B', 'D', 'E', 'F', 'C'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef display_random_items(lst, num):\n random.shuffle(lst)\n return lst[:num]\n\nlst = [\"dog\", \"cat\", \"bird\", \"fish\"]\nnum = 3\n\nrandom_items = display_random_items(lst, num)\nprint(random_items) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num):\n    if num == 1:\n        return False\n    if num == 2 and num % 2 == 0:\n        return True\n    else:\n        for x in range(2, num):\n            if num % x == 0:\n                return False\n        return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(words, search):\n    for i, word in enumerate(words):\n        if word == search:\n            return i\n    return -1\n\nindex = search(words, 'language')\nprint(index) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printMatrix(matrix):\n for row in matrix:\n for char in row:\n print(\" {}\".format(char), end=\"\")\n print()\n\nmatrix = [\n  [\"X\", \"O\",\"X\"],\n  [\"X\", \"O\",\"X\"]\n]\n\nprintMatrix(matrix) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_longest_string(arr):\n    longest_string = ''\n    for s in arr:\n        if len(s) > len(longest_string):\n            longest_string = s\n    return longest_string\n\narr = [\"Apple\", \"Banana\", \"Orange\", \"Mango\", \"Pineapple\"]\nresult = find_longest_string(arr)\nprint('Longest string is', result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(101):\n print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_code_samples(samples):\n    languages = {\"java\": \"Java\", \"python\": \"Python, \"Go\": \"Go\"}\n    languages_frames = {}\n    \n    for sample in samples:\n        for language, details in languages.items():\n            if language in sample:\n                if language not in languages_frames:\n                    languages_frames[language] = []\n                languages_frames[language].append(sample)\n    return languages_frames\n\nsamples = [\"java hello world\", \"python print('hello world')\", \"Go fmt.Println(\"Hello World\")\"]\nclassified_samples = classify_code_samples(samples)\nprint(classified_samples) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\nlength = 10\nchars = string.ascii_letters + string.digits\npassword = ''.join(random.choice(chars) for i in range(length))\n\nprint(password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# Author: Florian Lambert <flambert@redhat.com>\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n# License for the specific language governing permissions and limitations\n# under the License.\n#\n# Requirments: python\n#\n\nimport sys\nimport argparse\nimport subprocess\n\nVERSION = '1.1'\n\nSTATE_TEXT = ['Ok', 'Warning', 'Critical', 'Unknow']\n\n\nPARSER = argparse.ArgumentParser(description='Disk check recurcive')\nPARSER.add_argument(\"-b\", \"--base\",\n                    type=str,\n                    help='base directory to monitor. For example if you want to monitor only volume mounted under /host/ (Default: /)',\n                    default=\"/\")\nPARSER.add_argument(\"-e\", \"--excludes\",\n                    type=str, nargs='+',\n                    help='List of mountpoint to exclude recurcively ex: /var/lib will exclude /var/lib*',\n                    default=[])\nPARSER.add_argument(\"-w\", \"--warning\",\n                    type=int,\n                    help='Warning value (Default: 85)',\n                    default=85)\nPARSER.add_argument(\"-c\", \"--critical\",\n                    type=int,\n                    help='Critical value (Default: 95)',\n                    default=95)\nPARSER.add_argument(\"-v\", \"--version\",\n                    action='store_true',\n                    help='Print script version')\nARGS = PARSER.parse_args()\n\n\n\ndef check_df(base,warning,critical,excludes):\n    STATE_OK = 0\n    STATE_WARNING = 1\n    STATE_CRITICAL = 2\n    STATE_UNKNOWN = 3\n    STATE = STATE_OK\n\n    df_cmd = (\"df --exclude-type=tmpfs \"\n              \"--exclude-type=devtmpfs \"\n              \"--output=source,target,fstype,iused,itotal,ipcent,used,size,pcent \"\n              \"--block-size G\")\n\n    stdout = subprocess.check_output(df_cmd, shell=True).strip().split(\"\\n\")\n    # remove the header output\n    del stdout[0]\n\n    _output_message = []\n    _disk_ok = []\n    for line in stdout:\n        # Exclude filter on target mount point\n        col = line.split()\n        # 0: source\n        # 1: target\n        # 2: fstype\n        # 3: iused\n        # 4: itotal\n        # 5: ipcent\n        # 6: used\n        # 7: size\n        # 8: pcent\n        if not is_based(base,col[1]) or is_excluded(excludes,col[1]):\n            continue\n        _disk_ok.append(col[1])\n\n        # csize: pourcent usage\n        csize = int(col[8].rstrip('%'))\n        if csize >= int(critical):  # CRITICAL\n            STATE = STATE_CRITICAL\n            _output_message.append(\"Disk Block %s %s Used\" % (col[1], col[8]))\n        elif csize >= int(warning):  # WARNING\n            # Update state warning only if the current is not critical\n            if STATE < STATE_CRITICAL:\n                STATE = STATE_WARNING\n            _output_message.append(\"Disk Block %s %s Used\" % (col[1], col[8]))\n\n        # cinode: pourcent usage inode\n        cinode = int(col[5].rstrip('%'))\n        if cinode >= int(critical):  # CRITICAL\n            STATE = STATE_CRITICAL\n            _output_message.append(\"Disk Inode %s %s Used\" % (col[1], col[5]))\n        elif cinode >= int(warning):  # WARNING\n            # Update state warning only if the current is not critical\n            if STATE < STATE_CRITICAL:\n                STATE = STATE_WARNING\n            _output_message.append(\"Disk Inode %s %s Used\" % (col[1], col[5]))\n\n    if STATE == STATE_OK:\n        output_message = \"Disk %s\" % (' || '.join(_disk_ok))\n    else:\n        output_message = ' || '.join(_output_message)\n    return output_message,STATE\n\ndef is_excluded(excludes,path):\n    #Check if the mount path is in the excludes\n    for ex in excludes:\n        if path.startswith(ex):\n            return True\n    return False\n\ndef is_based(base,path):\n    #Check if the mount path is in the base path\n    if path.startswith(base):\n        return True\n    return False\n\nif __name__ == \"__main__\":\n\n    if ARGS.version:\n        print \"version: %s\" % (VERSION)\n        sys.exit(0)\n\n    (OUTPUT_MESSAGE,STATE) = check_df(base=ARGS.base,\n                                      warning=ARGS.warning,\n                                      critical=ARGS.critical,\n                                      excludes=ARGS.excludes)\n\n    try:\n        print \"%s: %s\" % (STATE_TEXT[STATE], OUTPUT_MESSAGE)\n        sys.exit(STATE)\n    except ValueError:\n        print \"Oops!  cant return STATE\"\n        sys.exit(STATE_UNKNOWN)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def selection_sort(arr): \n    # Iterate through all array elements \n    for i in range(len(arr)): \n  \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n  \n        # Swap the found minimum element with  \n        # the first element         \n        arr[i], arr[min_idx] = arr[min_idx], arr[i] \n\n# Sample list \narr = [23, 12, 45, 1, 30, 19, 7] \n  \nselection_sort(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]), but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class UniqueSet:\n    def __init__(self):\n        self.__elements = {}\n    \n    def add(self, element):\n        if element not in self.__elements:\n            self.__elements[element] = 1\n        else:\n            return\n    \n    def remove(self, element):\n        if element in self.__elements:\n            del self.__elements[element]\n        else:\n            return\n    \n    def contains(self, element):\n        if element in self.__elements:\n            return True\n        else:\n            return False\n    \n    def size(self):\n        return len(self.__elements) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_website(url, search_term):\n    response = requests.get(url)\n    html = response.text\n    soup = BeautifulSoup(html, 'html.parser')\n\n    output_html = \"\"\n    for p in soup.find_all('p'):\n        if search_term in p.text.lower(): \n            output_html += str(p)\n\n    return output_html\n\nif __name__ == '__main__':\n    output = scrape_website('https://www.google.com/', 'python')\n    print(output) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -*- coding: utf-8 -*-\n#\n#  nwm_to_gssha.py\n#  GSSHApy\n#\n#  Created by Alan D Snow, 2016.\n#  License BSD 3-Clause\n\nimport logging\nfrom datetime import timedelta\nfrom os import mkdir, path, remove, rename\nimport xarray as xr\n\nfrom .grid_to_gssha import GRIDtoGSSHA\n\nlog = logging.getLogger(__name__)\n\n\n# ------------------------------------------------------------------------------\n# MAIN CLASS\n# ------------------------------------------------------------------------------\nclass NWMtoGSSHA(GRIDtoGSSHA):\n    \"\"\"This class converts the National Water Model output data to GSSHA formatted input.\n    This class inherits from class:`GRIDtoGSSHA`.\n\n    Attributes:\n        gssha_project_folder(:obj:`str`): Path to the GSSHA project folder\n        gssha_project_file_name(:obj:`str`): Name of the GSSHA elevation grid file.\n        lsm_input_folder_path(:obj:`str`): Path to the input folder for the LSM files.\n        lsm_search_card(:obj:`str`): Glob search pattern for LSM files. Ex. \"*.grib2\".\n        lsm_lat_var(Optional[:obj:`str`]): Name of the latitude variable in the LSM netCDF files. Defaults to 'lat'.\n        lsm_lon_var(Optional[:obj:`str`]): Name of the longitude variable in the LSM netCDF files. Defaults to 'lon'.\n        lsm_time_var(Optional[:obj:`str`]): Name of the time variable in the LSM netCDF files. Defaults to 'time'.\n        lsm_lat_dim(Optional[:obj:`str`]): Name of the latitude dimension in the LSM netCDF files. Defaults to 'lat'.\n        lsm_lon_dim(Optional[:obj:`str`]): Name of the longitude dimension in the LSM netCDF files. Defaults to 'lon'.\n        lsm_time_dim(Optional[:obj:`str`]): Name of the time dimension in the LSM netCDF files. Defaults to 'time'.\n        output_timezone(Optional[:obj:`tzinfo`]): This is the timezone to output the dates for the data. Default is he GSSHA model timezone. This option does NOT currently work for NetCDF output.\n\n    Example::\n\n\n        from datetime import datetime\n        from gsshapy.grid import NWMtoGSSHA\n\n        n2g = NWMtoGSSHA(gssha_project_folder='E:\\\\GSSHA',\n                         gssha_project_file_name='gssha.prj',\n                         lsm_input_folder_path='E:\\\\GSSHA\\\\nwm-data',\n                         lsm_search_card=\"*.grib\")\n\n        # example rain gage\n        out_gage_file = 'E:\\\\GSSHA\\\\nwm_rain1.gag'\n        n2g.lsm_precip_to_gssha_precip_gage(out_gage_file,\n                                            lsm_data_var=\"RAINRATE\",\n                                            precip_type=\"RADAR\")\n\n        # example data var map array\n        # WARNING: This is not complete\n        data_var_map_array = [\n            ['precipitation_rate', 'RAINRATE'],\n            ['pressure', 'PSFC'],\n            ['relative_humidity', ['Q2D','T2D', 'PSFC']],\n            ['wind_speed', ['U2D', 'V2D']],\n            ['direct_radiation', 'SWDOWN'],  # ???\n            ['diffusive_radiation', 'SWDOWN'],  # ???\n            ['temperature', 'T2D'],\n            ['cloud_cover', '????'],\n        ]   \n        e2g.lsm_data_to_arc_ascii(data_var_map_array)\n\n    \"\"\"\n    def __init__(self,\n                 gssha_project_folder,\n                 gssha_project_file_name,\n                 lsm_input_folder_path,\n                 lsm_search_card=\"*.nc\",\n                 lsm_lat_var='y',\n                 lsm_lon_var='x',\n                 lsm_time_var='time',\n                 lsm_lat_dim='y',\n                 lsm_lon_dim='x',\n                 lsm_time_dim='time',\n                 output_timezone=None,\n                 ):\n        \"\"\"\n        Initializer function for the NWMtoGSSHA class\n        \"\"\"\n        super(NWMtoGSSHA, self).__init__(gssha_project_folder,\n                                         gssha_project_file_name,\n                                         lsm_input_folder_path,\n                                         lsm_search_card,\n                                         lsm_lat_var,\n                                         lsm_lon_var,\n                                         lsm_time_var,\n                                         lsm_lat_dim,\n                                         lsm_lon_dim,\n                                         lsm_time_dim,\n                                         output_timezone)\n\n    @property\n    def xd(self):\n        \"\"\"get xarray dataset file handle to LSM files\"\"\"\n        if self._xd is None:\n            path_to_lsm_files = path.join(self.lsm_input_folder_path,\n                                          self.lsm_search_card)\n            self._xd = super(NWMtoGSSHA, self).xd\n            self._xd.lsm.coords_projected = True\n        return self._xd\n\n    def _load_converted_gssha_data_from_lsm(self, gssha_var, lsm_var, load_type):\n        \"\"\"\n        This function loads data from LSM and converts to GSSHA format\n        \"\"\"\n        super(NWMtoGSSHA, self).\\\n            _load_converted_gssha_data_from_lsm(gssha_var, lsm_var, load_type)\n        self.data.lsm.coords_projected = True\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\ndatabase_file = \"mydatabase.db\"\n\n# connect to database\nconn = sqlite3.connect(database_file)\n\n# create cursor\ncursor = conn.cursor()\n\n# query table\ntotal_query = \"SELECT COUNT(*) FROM mytable;\"\naverage_query = \"SELECT AVG(numeric_column) FROM mytable;\"\nunique_query = \"SELECT DISTINCT categorical_column FROM mytable;\"\n\n# execute queries\ntotal_entries = cursor.execute(total_query).fetchone()[0]\naverage_value = cursor.execute(average_query).fetchone()[0]\nunique_values = cursor.execute(unique_query).fetchall()\n\n# close connection\nconn.close()\n\n# print report\nprint(\"Total entries:\", total_entries)\nprint(\"Average value:\", average_value)\nprint(\"Unique values:\", unique_values) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import necessary modules\nimport hashlib\nimport mysql.connector\n\n# connect to the database\nconn = mysql.connector.connect(\n host=\"localhost\",\n user=\"db_user\", \n passwd=\"password\", \n database=\"my_db\"\n)\n\n# check if the given username and password are valid\ndef authenticate(username, password):\n # get the user's password hash from the database\n cursor = conn.cursor()\n query = \"SELECT password_hash FROM users WHERE username=%s\"\n cursor.execute(query, (username,))\n result = cursor.fetchone()\n\n # if user is not in the database, return false\n if result is None:\n return False\n\n # compare the hashes\n password_hash = hashlib.sha256(password.encode()).hexdigest() \n if password_hash == result[0]:\n return True\n else:\n return False\n\n# test the authentication function\nprint(authenticate(\"alice\", \"password123\")) # True\nprint(authenticate(\"bob\", \"wrongpassword\")) # False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: encrypted_string = ''\nfor c in 'Hello World':\n encrypted_string += chr(ord(c) + 3)\n\nprint(encrypted_string) # Khoor Zruog but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport tkinter\nimport tkinter.messagebox\n\nfrom Bl import Play\nfrom Lib import Tools\n\nclass GUI :\n\n\tdef __init__ (self, master) :\n\t\tself.master = master\n\t\tself.Tools = Tools.Tools()\n\t\tself.listRst = ''\n\t\tself.resRst = ''\n\t\tself.getDetail = ''\n\n\tdef showList (self, searchKey) :\n\t\trstWindow = tkinter.Toplevel()\n\t\trstWindow.title('\u8d44\u6e90\u5217\u8868')\n\t\trstWindow.resizable(width = 'false', height = 'false')\n\t\tif self.Tools.isWin() :\n\t\t\trstWindow.iconbitmap(self.Tools.getRes('biticon.ico'))\n\t\t\n\t\ttitleFrame = tkinter.Frame(rstWindow, bd = 0, bg=\"#444\")\n\t\ttitleFrame.pack(expand = True, fill = 'both')\n\n\t\ttitleLabel = tkinter.Label(titleFrame, text = '\u5173\u952e\u8bcd :\u300c ' + searchKey + ' \u300d\u7684\u641c\u7d22\u7ed3\u679c', fg = '#ddd', bg=\"#444\", font = (\"Helvetica\", \"12\"))\n\t\ttitleLabel.grid(row = 1, column = 1, pady = 10)\n\n\t\ttitleFrame.grid_columnconfigure(0, weight=1)\n\t\ttitleFrame.grid_columnconfigure(2, weight=1)\n\n\t\tself.frame = tkinter.Frame(rstWindow, bd = 0, bg=\"#222\")\n\t\tself.frame.pack(expand = True, fill = 'both')\n\n\t\tself.window = tkinter.Listbox(self.frame, height = 14, width = 40, bd = 0, bg=\"#222\", fg = '#ddd', selectbackground = '#116cd6', highlightthickness = 0)\n\t\tself.window.grid(row = 0, column = 0, padx = 10, pady = 10)\n\t\tself.window.bind('<Double-Button-1>', self.__getMovDetails)\n\n\t\ttry : \n\t\t\tself.window.delete(0, 100)\n\t\texcept : \n\t\t\tpass\n\n\tdef updateList (self) :\n\t\tif self.listRst != '' :\n\t\t\tidx = 0\n\t\t\tfor x in self.listRst :\n\t\t\t\tself.window.insert(idx, x['title'])\n\t\t\t\tidx += 1\n\t\telse :\n\t\t\tself.timer = self.frame.after(50, self.updateList)\n\n\tdef showRes (self) :\n\t\tself.resWindow = tkinter.Toplevel()\n\t\tself.resWindow.title(self.target['title'])\n\t\tself.resWindow.resizable(width = 'false', height = 'false')\n\t\tif self.Tools.isWin() :\n\t\t\tself.resWindow.iconbitmap(self.Tools.getRes('biticon.ico'))\n\t\tself.resWindow.config(background='#444')\n\n\t\tself.resFrame = tkinter.Frame(self.resWindow, bd = 0, bg=\"#444\")\n\t\tself.resFrame.grid(row = 0, column = 0, sticky = '')\n\n\t\tbtnZone = tkinter.Frame(self.resWindow, bd = 10, bg=\"#444\")\n\t\tbtnZone.grid(row = 1, column = 0, sticky = '')\n\n\t\tself.resList = tkinter.Listbox(self.resFrame, height = 8, width = 50, bd = 0, bg=\"#222\", fg = '#ddd',selectbackground = '#116cd6', highlightthickness = 0)\n\t\tself.resList.grid(row = 0, sticky = '')\n\n\t\tviewBtn = tkinter.Button(btnZone, text = '\u67e5\u770b\u8fde\u63a5', width = 10, fg = '#222', highlightbackground = '#444', command = self.__taskShow)\n\t\tviewBtn.grid(row = 0, column = 0, padx = 5)\n\n\t\twatchBtn = tkinter.Button(btnZone, text = '\u5728\u7ebf\u89c2\u770b', width = 10, fg = '#222', highlightbackground = '#444', command = self.__taskWatch)\n\t\twatchBtn.grid(row = 0, column = 1, padx = 5)\n\n\t\tdlBtn = tkinter.Button(btnZone, text = '\u79bb\u7ebf\u4e0b\u8f7d', width = 10, fg = '#222', highlightbackground = '#444', command = self.__taskDownload)\n\t\tdlBtn.grid(row = 0, column = 2, padx = 5)\n\n\tdef updateRes (self) :\n\t\tif self.resRst != '' :\n\t\t\tif len(self.resRst) > 0:\n\t\t\t\tidx = 0\n\t\t\t\tfor x in self.resRst :\n\t\t\t\t\tself.resList.insert(idx, x[0])\n\t\t\t\t\tidx += 1\n\t\t\telse :\n\t\t\t\tself.resList.insert(0, '\u8be5\u8d44\u6e90\u5df2\u88ab\u548c\u8c10\uff0c\u6682\u65f6\u65e0\u6cd5\u64ad\u653e\u3002')\n\t\telse :\n\t\t\tself.timer = self.resFrame.after(50, self.updateRes)\n\n\tdef __getMovDetails (self, event) : \n\t\tidx = int(self.window.curselection()[0])\n\n\t\tself.target = self.listRst[idx]\n\n\t\tself.getDetail(self.target)\n\n\tdef __getChoose (self) :\n\t\tif self.resList.curselection() == () :\n\t\t\ttkinter.messagebox.showinfo('Notice', '\u8bf7\u9009\u62e9\u4e00\u4e2a\u6587\u4ef6\u8fdb\u884c\u64cd\u4f5c\uff01')\n\t\telse :\n\t\t\tidx = int(self.resList.curselection()[0])\n\n\t\t\ttarget = self.resRst[idx]\n\n\tdef __taskWatch (self) :\n\t\tif self.resList.curselection() == () :\n\t\t\ttkinter.messagebox.showinfo('\u63d0\u793a', '\u8bf7\u9009\u62e9\u4e00\u4e2a\u6587\u4ef6\u8fdb\u884c\u64cd\u4f5c\uff01')\n\t\telse :\n\t\t\tidx = int(self.resList.curselection()[0])\n\n\t\t\ttarget = self.resRst[idx]\n\n\t\t\tPlayer = Play.Play(self.master)\n\t\t\tPlayer.watchLink(target)\n\n\tdef __taskShow (self) :\n\t\tif self.resList.curselection() == () :\n\t\t\ttkinter.messagebox.showinfo('\u63d0\u793a', '\u8bf7\u9009\u62e9\u4e00\u4e2a\u6587\u4ef6\u8fdb\u884c\u64cd\u4f5c\uff01')\n\t\telse :\n\t\t\tidx = int(self.resList.curselection()[0])\n\n\t\t\ttarget = self.resRst[idx]\n\n\t\t\tPlayer = Play.Play(self.master)\n\t\t\tPlayer.showLink(target)\n\n\tdef __taskDownload (self) :\n\t\tif self.resList.curselection() == () :\n\t\t\ttkinter.messagebox.showinfo('\u63d0\u793a', '\u8bf7\u9009\u62e9\u4e00\u4e2a\u6587\u4ef6\u8fdb\u884c\u64cd\u4f5c\uff01')\n\t\telse :\n\t\t\tidx = int(self.resList.curselection()[0])\n\n\t\t\ttarget = self.resRst[idx]\n\n\t\t\tPlayer = Play.Play(self.master)\n\t\t\tPlayer.dlLink(target)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Taxi:\n    \n    def __init__(self, capacity, license_number):\n        self.capacity = capacity\n        self.license_number = license_number\n        self.passengers = []\n    \n    def add_passenger(self, passenger):\n        if self.capacity > len(self.passengers):\n            self.passengers.append(passenger)\n            return True\n        else:\n            return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom textblob import TextBlob\n\ndef analyze_sentiment(text):\n    sentiment = TextBlob(text).sentiment\n    if sentiment.polarity > 0:\n        print('Positive sentiment')\n    elif sentiment.polarity < 0:\n        print('Negative sentiment')\n    else:\n        print('Neutral sentiment') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Fraction:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\n    def __add__(self, other):\n        return Fraction(self.a * other.b + other.a * self.b, self.b * other.b)\n    \n    def __sub__(self, other):\n        return Fraction(self.a * other.b - other.a * self.b, self.b * other.b)\n   \n    def __mul__(self, other):\n        return Fraction(self.a * other.a , self.b * other.b) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def rm_duplicates(inp): \n    result = []\n    prev = '' \n    for char in inp:\n        if char != prev:\n            result.append(char)\n            prev = char\n    return ''.join(result) \n\nprint(rm_duplicates('aabccdaacbg')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport matplotlib.pyplot as plt\n\n# Creating a dataset\nX = np.random.uniform(-1,1,100)\nY = np.random.uniform(-1,1,100)\n# Class labels\ny = np.zeros(100)\n# Adding some noise\ny[X>0] = 1\ny[X<0] = 0\n\n# Normal dataset\nplt.scatter(X, Y, c=y)\nplt.show()\n\n# Unbalanced dataset\n# Reducing the number of 0s\ny[X<0] = np.random.choice(np.arange(0,2), int(0.50*len(y[X<0])), replace=False)\nplt.scatter(X, Y, c=y)\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convertCelsiusToFahrenheit(celsiusTemp):\n    fahrenheitTemp = (celsiusTemp*9/5)+32\n    return fahrenheitTemp but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mat_gen(N, num):\n    matrix = [[num for col in range(N)] for row in range(N)]\n    return matrix\n\nmat_gen(5, 7) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = \"http://example.com/api/fetch\"\n\nresponse = requests.get(url)\ndata = response.json()\n\n#Process data but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_even_numbers(n):\n    sum = 0\n    for i in range(2,n+1,2):\n      sum += i\n    return sum\n\nprint(sum_even_numbers(1000)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import itertools\n\nalphabet = ['a', 'b', 'c', 'd']\nwords = [''.join(i) for i in itertools.combinations_with_replacement(alphabet, 3)]\nprint(words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class CoordinateSystem:\n  \n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def magnitude(self):\n        # Returns the magnitude of the coordinate \n        return (self.x**2 + self.y**2)**(1/2)\n    \n    def add(self, other):\n        # Returns the added coordinates\n        x = self.x + other.x\n        y = self.y + other.y\n        return CoordinateSystem(x, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_odd_even(lst):\n even_count = 0\n odd_count = 0\n for num in lst:\n if num % 2 == 0:\n even_count += 1\n else:\n odd_count += 1\n return [even_count, odd_count] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import relevant libraries\nimport cv2\nimport numpy as np\n\n# load the pre-trained CascadeClassifier model\nface_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')\n\n# define the facial emotion recognizer\ndef recognize_emotion(img):\n    # convert the image to grayscale for better processing\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    # detect the faces\n    faces = face_cascade.detectMultiScale(gray, 1.3, 5)\n    # if no face is detected\n    if len(faces) == 0:\n        return None, None\n    # if faces are detected\n    else:\n        # extract the coordinates of the face\n        x,y,w,h = faces[0] \n        # crop the detected face\n        face = gray[y:y+h, x:x+w]\n        # Return both the face and coordinates\n        return face, faces[0]\n\n# capture the video from the webcam \ncam = cv2.VideoCapture(0)\n\nwhile True:\n    # Read the frame\n    ret, img = cam.read()\n    # Detect the faces\n    face, rect = recognize_emotion(img)\n    # Draw the detected rectangle\n    if rect is not None:\n        (x,y,w,h) = rect\n        cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2) \n    # Draw the resulting image\n    cv2.imshow('FaceDetection', img)\n    # Stop if escape key is pressed\n    if cv2.waitKey(1) == 27: \n        break \n# Release the VideoCapture object\ncam.release() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def eval(node):\n    if node.isLeaf():\n        return node.value\n \n    left = eval(node.left)\n    right = eval(node.right)\n \n    if node.op == '+':\n        return left + right\n    if node.op == '-':\n        return left - right\n    if node.op == '*':\n        return left * right\n    if node.op == '/':\n        return left / right but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: i = 0 \nwhile i < 3: \n    print(i) \n    i += 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef num_of_permutations(string):\n    n = len(string)\n    return math.factorial(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list_tuples(tuples):\n  # sort by the second element in each tuple\n  return sorted(tuples, key=lambda x: x[1])\n\n# test code\ntuples = [('a', 3), ('b', 2), ('c', 1)] \nprint(sort_list_tuples(tuples)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isAnagram(str1, str2):\n    # Count the number of character occurrences in both strings\n    str1_dict = {}\n    str2_dict = {}\n    for i in range(len(str1)):\n        if str1[i] in str1_dict:\n            str1_dict[str1[i]] += 1\n        else:\n            str1_dict[str1[i]] = 1\n    for j in range(len(str2)):\n        if str2[j] in str2_dict:\n            str2_dict[str2[j]] += 1\n        else:\n            str2_dict[str2[j]] = 1\n  \n    # Compare both dictionaries\n    for char in str1_dict:\n        if char in str2_dict and str1_dict[char] == str2_dict[char]:\n            return True\n        else:\n            return False\n\nstr1 = \"silent\"\nstr2 = \"listen\"\nif isAnagram(str1, str2):\n    print(\"true\")\nelse:\n    print(\"false\") # output: true but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def evaluate_polynomial(polynomial, x):\n    result = 0\n \n    for i in range(len(polynomial)):\n        result += polynomial[i] * x**i\n \n    return result\n \nprint(evaluate_polynomial(polynomial, x)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_item(lst, condition): \n\tfor item in lst:\n \t\tif condition(item): \n \t\t\treturn True \n\treturn False\n\nresult = check_item([1, 2, 3, 4], lambda x : x % 2 == 0) \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Car:\n    def __init__(self, name, color, doors):\n        self.name = name\n        self.color = color\n        self.doors = doors but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node():\n  def __init__(self, data):\n    self.data = data\n    self.next = None\n\nclass List():\n  def __init__(self):\n    self.head = None\n\n  def addNode(self, data):\n    node = Node(data)\n    if self.head == None:\n       self.head = node\n    else:\n      current = self.head\n      while current.next != None:\n        current = current.next\n      current.next = node but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_avg(nums):\n sum = 0\n for num in nums:\n sum += num\n avg = sum/len(nums)\n return avg\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(calculate_avg(numbers)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def has_overlapping(arr1, arr2):\n    for element in arr1:\n        if element in arr2:\n            return True\n    return False\n\nA = [1,3,5,7]\nB = [2,4,5,7]\n\nresult = has_overlapping(A, B)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longestCommonPrefix(strings):\n    prefix = \"\"\n    min_length = min([len(s) for s in strings])\n    for i in range(min_length):\n        current_char = strings[0][i]\n        for s in strings:\n            if s[i] != current_char:\n                return prefix\n        prefix += current_char\n    return prefix\n\nresult = longestCommonPrefix(['car', 'cat', 'cow'])\nprint(result) # Output: 'c' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compute_total_cost(price, quantity, shipping, tax):\n    return price * quantity + shipping + tax but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(lst):\n    n = len(lst)\n    for i in range(n): \n        for j in range(0, n-i-1): \n            if lst[j] > lst[j+1] : \n                lst[j], lst[j+1] = lst[j+1], lst[j]\n    return lst but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def validate_date(date):\n  # check if input format is valid\n  try:\n    datetime.strptime(date, '%d/%m/%Y')\n    return True\n  except ValueError:\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\n\ndef show_time():\n    print(time.strftime('%H:%M:%S'))\n\nshow_time() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_numbers(event, context):\n num1 = event['num1']\n num2 = event['num2']\n result = num1 + num2\n return {\n 'statusCode': 200,\n 'body': result\n } but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import calendar\n\ndef show_calendar(year):\n    return calendar.calendar(year) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_value(parameter):\n    max_val = parameter[0]\n    for num in parameter:\n        if num > max_val:\n            max_val = num\n    return max_val\n\nmax_num = max_value(parameter)\nprint(max_num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Fetch the top 10 posts from reddit\nimport praw\n\n# Reddit API credentials\nclient_id = 'YOUR_CLIENT_ID'\nclient_secret = 'YOUR_CLIENT_SECRET'\nuser_agent = 'YOUR_USER_AGENT'\n\n# Initialize the reddit client\nreddit = praw.Reddit(\n client_id=client_id,\n client_secret=client_secret,\n user_agent=user_agent\n)\n\nsubreddit = input('Input a subreddit: ')\n\n# Fetch the top 10 posts from reddit\nsubmissions = reddit.subreddit(subreddit).top('day', limit=10)\nfor submission in submissions:\n print(submission.title) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def detect_pattern(my_string):\n    for i in range(len(my_string)):\n        if my_string.count(my_string[i]) > 1:\n            return True\n    return False\n\nif __name__ == '__main__':\n    print(detect_pattern(my_string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Fibonacci sequence\ndef fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\")\n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return fibonacci(n-1)+fibonacci(n-2)\n  \n# Driver Program \nprint(fibonacci(9)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_in_place(arr): \n  \n    # Initializing start and end \n    start = 0\n    end = len(arr) - 1\n  \n    while start < end: \n        # swapping the elements \n        arr[start], arr[end] = arr[end], arr[start] \n        start += 1\n        end -= 1\n    return arr \n  \narr = [1, 2, 3, 4, 5, 6] \nprint(reverse_in_place(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Phone:\n  def __init__(self, name):\n    self.name = name\n    self.owner = None\n\n  def assign_owner(self, owner):\n    self.owner = owner\n\n  def use(self):\n    print(f\"{self.owner.name} is using {self.name}\")\n\nclass Person:\n  def __init__(self, name):\n    self.name = name\n    self.phone = None\n\n  def assign_phone(self, phone):\n    self.phone = phone\n    self.phone.owner = self\n\n  def use_phone(self):\n    if self.phone is not None:\n      self.phone.use() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Ask the user for input\nhours_worked = input(\"How many hours did you work in the month: \")\nhourly_rate = input(\"What is the hourly rate: \")\ntravel_expenses = input(\"What are the total travel expenses: \")\n\n# Calculate the total pay\ntotal_pay = hours_worked * hourly_rate\ntotal_expenses = travel_expenses\n\n# Output the results\nprint(\"Total pay: $\" + str(total_pay))\nprint(\"Total expenses: $\" + str(total_expenses)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import libraries\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\n\n#define feature vectors\nX = np.array([your input text])\n\n#define labels \ny = np.array([1]) #1 for positive sentiment\n\n#fit a Random Forest classifier\nclf = RandomForestClassifier()\nclf.fit(X, y) \n\n#classify a test sample\ntest_sample = \"The food is amazing!\" \nresult = clf.predict([test_sample]) \nif result[0] == 1:\n print(\"Positive sentiment\")\nelse:\n print(\"Negative sentiment\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://www.bbc.com/news/uk-england-london-53741405\"\n\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\nheadlines = soup.find_all('h1', class_='story-body__h1')\nfor headline in headlines:\n print(headline.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # function to determine the number of days in a given month\ndef num_days_in_month(month):\n if month == 2:\n # account for leap year\n year = int(input('Enter the year: '))\n if (year % 400 == 0) or ((year % 4 == 0) and (year % 100 != 0)):\n return 29\n else:\n return 28\n elif month in (4, 6, 9, 11):\n return 30\n else:\n return 31\n\n# get month number from user\nmonth = int(input('Enter the month (1-12): '))\n\n# print the result\nprint('Number of days in the month:', num_days_in_month(month)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def infix_to_postfix(infix_expr):\n stack = []\n output = []\n \n # Iterate through the characters of the expression\n for i in infix_expr:\n # Push opening brackets onto the stack\n if i == '(':\n stack.append(i)\n \n # Push operators onto the stack\n elif i in ['+', '-', '*', '/']:\n stack.append(i)\n \n # Pop and add to output when a closing bracket is found\n elif i == ')':\n while len(stack) != 0 and stack[-1] != '(':\n output.append(stack.pop()) \n \n # Pop opening bracket\n if len(stack) != 0 and stack[-1] == '(':\n stack.pop()\n \n # Add numbers to output\n else:\n output.append(i)\n \n # Pop remaining operators on the stack\n while len(stack) != 0:\n output.append(stack.pop())\n \n return \"\".join(output)\n\n# Test\ninfix_exprs = [\"2+3*5\", \"9-4*2+7\", \"(5+2)*3\"]\n\nfor infix_expr in infix_exprs:\n postfix_expr = infix_to_postfix(infix_expr)\n print(\"Infix expression: {} Postfix expression: {}\".format(infix_expr, postfix_expr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def anagramCheck(str1, str2):\n    if (len(str1) != len(str2)):\n        return False\n\n    str1 = sorted(str1)\n    str2 = sorted (str2)\n\n    # Compare each character in str1 with\n    # each character in str2\n    for i in range( len( str1 ) ):\n        if (str1[i] != str2[i]):\n            return False\n \n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\nx1 = 2\ny1 = 3\nx2 = 6\ny2 = 8\ndistance = math.sqrt( (x2 - x1)**2 + (y2 - y1)**2 )\n\nprint(distance) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(string): \n    left, right = 0, len(string) - 1\n \n    while right >= left: \n        if not string[left] == string[right]: \n            return False\n        left += 1\n        right -= 1\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n):\n  if n == 0:\n    return 0\n  elif n == 1:\n    return 1\n  else:\n    return Fibonacci(n-1) + Fibonacci(n-2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from xml.dom import minidom\n\ndef html_to_xml(html_text):\n    '''This function will convert a string of HTML text into valid XML.'''\n\n    # Locate all HTML tags\n    html_tags = re.findall('<[^>]+>', html_text)\n\n    # Create XML documents\n    doc = minidom.Document()\n    root_tag = doc.createElement('xmlroot')\n    doc.appendChild(root_tag)\n    \n    # Append each HTML tag to the XML document\n    for tag in html_tags:\n        xml_tag = doc.createElement(tag)\n        root_tag.appendChild(xml_tag)\n    \n    # Return XML string\n    return doc.toprettyxml(indent=\"  \", newl=\"\\n\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nimport matplotlib.pyplot as plt\n\n# load the dataset\ndata = pd.read_csv('./sentiment_data.csv')\nx = data['text'].tolist()\ny = data['label'].tolist()\n\n# create an instance of the Tokenizer class\ntokenizer = Tokenizer(num_words=None, lower=True)\ntokenizer.fit_on_texts(x)\n\n# prepare the sequences\ntrain_sequences = tokenizer.texts_to_sequences(x)\nlengths = [len(x) for x in train_sequences]\n\n# pad the sequences\ntrain_padded = pad_sequences(train_sequences)\n\n# create and train the model\nmodel = tf.keras.Sequential([\n tf.keras.layers.Embedding(tokenizer.num_words, 128, trainable=True),\n tf.keras.layers.LSTM(64, activation='tanh'),\n tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(loss='binary_crossentropy',\n optimizer='adam',\n metrics=['accuracy'])\n\nhistory = model.fit(\n train_padded, \n y,\n batch_size=32,\n epochs=10,\n validation_split=0.2\n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_mean(num1, num2, num3):\n    mean = (num1 + num2 + num3) / 3\n    return mean but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: a = int(input('Enter a number: '))\nb = int(input('Enter a number: '))\nif a > b:\n print('a is greater than b') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def left_rotate_array(arr, d):\n    n = len(arr)\n    if d % n == 0: \n        return\n    for _ in range(d):\n        i = 0\n        temp = arr[0]\n        for i in range(n - 1):\n            arr[i] = arr[i + 1]\n        arr[n - 1] = temp\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5]\n    d = 2\n    left_rotate_array(arr, d)\n    print(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_numbers(x, y):\n    while (y != 0):\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n    return x\n\nnum1 = 10\nnum2 = 5\n\nres = add_numbers(num1, num2)\nprint(res) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: data = [1, 2, 3] \nsum = 0 \n\nfor number in data: \n sum += number ** 2 \n\nprint(f\"The sum of the squares of the given numbers is {sum}.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\nlength = 7\nchars = string.ascii_letters\n\nrandom_string = ''.join(random.choice(chars) for x in range(length))\n\nprint(random_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\nIPs = [\"123.235.123.245\", \"54.72.56.14\", \"182.193.146.172\"]\nfor ip in IPs:\n ip_parts = ip.split('.')\n octet1 = ip_parts[0]\n octet2 = ip_parts[1]\n octet3 = ip_parts[2]\n octet4 = ip_parts[3]\n\n print(f'The first octet is {octet1}, the second is {octet2}, the third is {octet3}, and the fourth is {octet4}.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\n\nfor i in range(1, 11):\n    print(i)\n    time.sleep(1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_string(string):\n    # convert string to list\n    chars = list(string)\n    # sort the list \n    chars.sort()\n    # return the sorted string\n    return ''.join(chars)\n\nsorted_string = sort_string('abzcdr')\nprint(sorted_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_dictionary = dict(zip(keys, values)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_anagrams(string, words):\n anagrams = []\n for word in words:\n  if sorted(word) == sorted(string):\n   anagrams.append(word)\n return anagrams but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def minimum_cost_first(start, end): \n  fringe = [[start, 0]]\n  visited = set()\n  cost = {}\n  while fringe:\n    node = fringe.pop(0)\n    visited.add(node[0])\n    if node[0] == end:\n      return cost[node[0]]\n    edges = graph[node[0]]\n    for edge in edges:\n      edge_cost = node[1] + edge[1]\n      if edge[0] not in visited and (edge[0] not in cost or edge_cost < cost[edge[0]]):\n        cost[edge[0]] = edge_cost\n        fringe.append([edge[0], edge_cost])\n    fringe.sort(key=lambda x:x[1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport bs4\n\nurl = 'https://example.com'\n\nwhile True:\n response = requests.get(url)\n soup = bs4.BeautifulSoup(response.text, 'html.parser')\n\n # Extract information here\n\n next_page_url = soup.find('a', {'class': 'next-page'})\n if next_page_url:\n url = next_page_url['href']\n else:\n break but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: dict_1 = {1: [5, 6, 7, 8], 2: [5, 6, 7, 8], 3: [5, 6, 7, 8], 4: [5, 6, 7, 8]} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef create_random_tuple():\n    tup = ()\n    while len(tup) < 10:\n        tup += (random.randint(1,100), )\n    return tup but is not the same. just give one example and only return the code."}
