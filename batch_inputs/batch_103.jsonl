{"prompt": "make some code that functions the same as the following code: def filter_by_length(strings):\n    return [s for s in strings if len(s) > 3] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for num in range(2,101):\nfor i in range(2,num):\n if (num % i) == 0:\n break\n else:\n print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mean(numbers):\n    return sum(numbers) / len(numbers)\n\ndef median(numbers):\n    numbers.sort()\n    middle_index = int(len(numbers)/2)\n    if len(numbers) % 2 == 0:\n        return (numbers[middle_index] + numbers[middle_index-1])/2\n    else:\n        return numbers[middle_index]\n\ndef mode(numbers):\n    max_freq = 0\n    modes = []\n    for num in set(numbers):\n        count = numbers.count(num)\n        if count > max_freq:\n            modes.clear()\n            modes.append(num)\n            max_freq = count\n        elif count == max_freq and num not in modes:\n            modes.append(num)\n    return modes but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combinations(arr):\n sol = []\n \n for i in range(len(arr)):\n for j in range(len(arr)):\n for k in range(len(arr)):\n if i != j and j != k and k != i:\n sol.append([arr[i], arr[j], arr[k]])\n \n return sol\n\nprint(combinations([1, 2, 3, 4])) # Outputs [[1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_num = [1, 3, 7, 4, 9, 0]\n\nmin_num = min(list_num)\n max_num = max(list_num)\n\nprint('Minimum is:', min_num) \n print('Maximum is:', max_num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ContactManager:\n \n def __init__(self):\n  self.contact_list = []\n \n def add_contact(self, contact):\n  self.contact_list.append(contact)\n \n def delete_contact(self, contact):\n  self.contact_list.remove(contact)\n \n def list_contacts(self):\n  for contact in self.contact_list:\n   print(contact) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_combos(list1, list2):\n    combo_list = []\n    for i in list1:\n        for j in list2:\n            combo_list.append([i, j]) \n    return combo_list\n\nlist1 = [1, 2, 3] \nlist2 = [4, 5]\n\ncombos = get_combos(list1, list2)  \nprint(combos)\n\n# Output: [[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_dicts(dict1, dict2):\n    if dict1 == dict2:\n        return True\n    return False\n\nresult = compare_dicts(d1, d2)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\nx_mean = np.mean(x)\ny_mean = np.mean(y)\n\nn = len(x)\n\n#Using the formula to calculate the slope\nslope = (sum([xi*yi for xi,yi in zip(x,y)]) - n*x_mean*y_mean)/(sum([xi**2 for xi in x]) - n * x_mean * x_mean)\n\n#using the formula to calculate the intercept\nintercept = y_mean - slope * x_mean\n\nprint(\"slope: \",slope,\"  intercept:\",intercept) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_words_of_length_k(sentence, k):\n    words = sentence.split(' ')\n    words_of_length_k = []\n    for word in words:\n        if len(word) == k:\n            words_of_length_k.append(word)\n    return words_of_length_k\n\nsentence = \"This is a program to identify words of length 3\"\nk = 3\nprint(find_words_of_length_k(sentence, k)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(data, target):\n    for i in range(len(data)): \n        if data[i] == target: \n            return i\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def lower_vowels(str):\n vowels = \"aeiouAEIOU\"\n new_str = \"\"\n \n for c in str:\n  if c in vowels: \n   new_str += c.lower()\n  else:\n   new_str += c\n return new_str but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\nfrom sklearn.neighbors import NearestNeighbors\n\n# Read in data\ndata = pd.read_csv('data.csv')\n\n# Make recommendations\nX = data.iloc[:, 2:].values\nnbrs = NearestNeighbors(n_neighbors=3).fit(X)\n\n# Test on 3 books\ntest_books = ['Alice in Wonderland', 'To Kill a Mockingbird', 'Dracula']\n\n# Find the similar books\ntest_book_index = [data[data['title'] == book_name].index[0] \n for book_name in test_books]\n\n# Get distances and indices of the similar books\ndistances, indices = nbrs.kneighbors([X[test_book_index]])\n\n# Display the recommended books\nprint('Recommendations for: {0}'.format(test_books))\nfor title, idx in zip(data.iloc[indices[0][1:]]['title'], indices[0][1:]):\n print('{0}: {1}, with a distance of {2}'.format(\n title, data.iloc[idx]['author'], distances[0][1:]\n )) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(lst): \n \n    # Initialize maximum element \n    max = lst[0] \n   \n    # Traverse list element \n    # from second and compare \n    # every element with current max  \n    for i in range(1, len(lst)): \n        if lst[i] > max: \n            max = lst[i] \n   \n    return max\n\nmax_num = find_max([2, 3, 4, 9, 5])\nprint(\"The maximum number in the list is:\",max_num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def capitalize_last_word(mystring):\n    words = mystring.split()\n    words[-1] = words[-1].capitalize()\n    return ' '.join(words)\n\nresult = capitalize_last_word(mystring)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isSubstring(str1, str2):\n    if len(str1) > len(str2):\n        return False\n\n    for i in range(len(str2)):\n        if (str2[i: i+len(str1)] == str1):\n            return True\n\n    return False\n\nstr1 = \"Hello\"\nstr2 = \"Hello World\"\n\nprint(isSubstring(str1, str2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(a, b):\n if a == 0:\n  return b\n\n while b != 0:\n  if a > b:\n   a = a - b\n  else:\n   b = b - a\n return a\n\n# Test\nprint(gcd(36, 18)) # Output: 18 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_perfect_square(lst):\n    for num in lst:\n        if (int(num ** 0.5)) ** 2 != num: \n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_dicts_by_field(dict_list, field):\n    sorted_list = sorted(dict_list, key=lambda k: k[field])\n    return sorted_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sum = 0\nfor num in [2, 7, 8, 4, 5]:\n    sum += num\nprint(sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: data = {'John': 24, 'Adam': 45, 'Kate': 12}\n\ndef get_max_min(data):\n    \"\"\"This function will return the maximum and minimum value of a given dictionary\"\"\"\n    max_value = max(data.values())\n    min_value = min(data.values())\n    return max_value, min_value\n\nif __name__ == '__main__':\n    data = {'John': 24, 'Adam': 45, 'Kate': 12}\n    max_value, min_value = get_max_min(data)\n    print('Max Value: {}, Min Value: {}'.format(max_value, min_value)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(string):\n    \"\"\"\n    Takes a string and returns it reversed quickly with Python\n    slice notation.\n    \"\"\"\n    return string[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_string_length(string): \n    length = 0\n    for char in string: \n        length += 1\n    return length\n\nresult = find_string_length('Hello World!')\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def adder(a, b):\n    return a + b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef check_lowercase(text):\n    pattern = r\"^[a-z]*$\"\n    if re.fullmatch(pattern, text):\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def canSumToTarget(array, target): \n    if target == 0: \n        return True\n  \n    n = len(array) \n  \n    # dp[i][j] stores if number j can be  \n    # represented by a subset of array[0..i-1] \n    dp = [[False for j in range(target + 1)] \n            for i in range(n + 1)] \n  \n    # Initialize base case in dp array \n    for i in range(n + 1): \n        dp[i][0] = True\n  \n    for i in range(1, n + 1): \n        for j in range(1, target + 1): \n            if j >= array[i-1]: \n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - array[i-1]] \n            else: \n                dp[i][j] = dp[i - 1][j] \n  \n    return dp[n][target] \n  \n# Driver Code \narray = [4, 8, 15, 16, 23, 42] \ntarget = 50\nif canSumToTarget(array, target): \n    print('Target number can be obtained by adding elements in the array.') \nelse: \n    print('Target number cannot be obtained by adding elements in the array.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: target_sum = 10\n\ncurrent_sum = 0\ni = 0\n\nwhile current_sum < target_sum:\n  current_sum = current_sum + i\n  i = i + 1\n\nprint(i - 1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n  if n<0:\n    print(\"Incorrect input\")\n  elif n==1:\n    return 0\n  elif n==2:\n    return 1\n  else:\n    return fibonacci(n-1)+fibonacci(n-2)\nprint(\"Fibonacci series up to\",n,\":\")\nfor i in range(1,n+1):\n  print(fibonacci(i)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci_sequence(n):\n  a, b = 0, 1\n  \n  for i in range(n):\n    print(a)\n    a, b = b, a+b\n\nfibonacci_sequence(6)\n\n# Output:\n# 0\n# 1\n# 1\n# 2\n# 3\n# 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def flat_list(lst): \n  flat_lst = [] \n  for sublist in lst: \n    if type(sublist) == int: \n      flat_lst.append(sublist) \n    else: \n      for ele in sublist: \n        flat_lst.append(ele) \n  return flat_lst \n\nresult = flat_list(test_list) \n  \nprint(\"The flattened list is:\", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/bin/python\n# *-* encoding=utf-8 *-*\n'''\nImage Priting Program Based on Haftoning\n'''\n\nimport sys\nimport numpy, scipy\nfrom scipy import ndimage\nfrom scipy import misc\nimport scipy.fftpack as fftpack\nimport matplotlib.pyplot as plt\n\nsys.path.append('../Proj04-01')\n\nfrom DFT import DFT_2D, IDFT_2D\n\ndef en_padding(img):\n    M, N = img.shape\n    P, Q = 2 * M, 2 * N\n    _img = numpy.zeros(P*Q).reshape((P, Q))\n    for x in range(M):\n        for y in range(N):\n            _img[x][y] = img[x][y]\n    return _img\n\ndef de_padding(img):\n    P, Q = img.shape\n    M, N = P/2, Q/2\n    _img = numpy.zeros(M*N).reshape((M, N))\n    for x in range(M):\n        for y in range(N):\n            _img[x][y] = img[x][y]\n    return _img\n\ndef shift(img):\n    M, N = img.shape\n    _img = img.copy()\n    for x in range(M):\n        for y in range(N):\n            _img[x][y] = img[x][y] * numpy.power(-1.0, (x+y))\n    return _img\n\ndef sqdistance(p1, p2):\n    return ((p1[0]-p2[0])*(p1[0]-p2[0])) + \\\n           ((p1[1]-p2[1])*(p1[1]-p2[1]))\n\ndef lowpass_mask(P, Q, cuf_off_frequency):\n    center = (P/2.0, Q/2.0)\n    mask = numpy.zeros(P * Q).reshape(P, Q)\n    for u in range(P):\n        for v in range(Q):\n            mask[u][v] = numpy.exp(-1*sqdistance(center, (u, v)) / (2*(cuf_off_frequency*cuf_off_frequency)))\n    return mask\n\ndef highpass_mask(P, Q, cuf_off_frequency):\n    return 1.0 - lowpass_mask(P, Q, cuf_off_frequency)\n#    center = (P/2.0, Q/2.0)\n#    mask = numpy.zeros(P * Q).reshape(P, Q)\n #  for u in range(P):\n#        for v in range(Q):\n#            mask[u][v] = 1.0-numpy.exp(-1*sqdistance(center, (u, v)) / (2*(cuf_off_frequency*cuf_off_frequency)))\n#    return mask\n\ndef main():\n    img_file = 'Fig0441(a)(characters_test_pattern).tif'\n    img = misc.imread(img_file)\n\n    padding_img = en_padding(img)\n\n    padding_img = shift(padding_img)\n\n    dft_img = DFT_2D(padding_img)\n\n    for cut_off_frequency in [30, 60, 160]:\n        print cut_off_frequency\n        hp_mask = highpass_mask(dft_img.shape[0], dft_img.shape[1], cut_off_frequency)\n        \n        misc.imsave('%s_hpmask_%d.tif' % (img_file, cut_off_frequency), 255 * hp_mask)\n        hp_img  = numpy.multiply(dft_img, hp_mask)\n\n        misc.imsave('%s_fft_%d.tif' % (img_file, cut_off_frequency), numpy.log(1+numpy.abs(hp_img)))\n     \n        hp_idtft_img = shift(IDFT_2D(hp_img).real)\n        hp_idtft_img = de_padding(hp_idtft_img)\n        print hp_idtft_img.shape\n        misc.imsave('%s_hp_%d.tif' % (img_file, cut_off_frequency), hp_idtft_img)\n\nif __name__ == '__main__':\n    main()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn import metrics\n\n# Read training data\nf1 = open(\"basketball_train.txt\", \"r\")\nbasket_data = f1.readlines()\n\nf2 = open(\"football_train.txt\", \"r\")\nfootball_data = f2.readlines()\n\n# Get features from the data\ndef get_features(data):\n\twords = []\n\tfor line in data:\n\t\ttokens = word_tokenize(line)\n\t\tfor word in tokens:\n\t\t\tif word not in stopwords.words(\"english\"):\n\t\t\t\twords.append(word.lower())\n\treturn words\n\n# Get the frequency of words\ndef bag_of_words(data):\n\tvectorizer = CountVectorizer()\n\tsparce_matrix = vectorizer.fit_transform(data)\n\treturn sparce_matrix\n\n# Get training data\nbasket_features = get_features(basket_data)\nfootball_features = get_features(football_data)\n\n# Create feature matrix\nbasket_feature_matrix = bag_of_words(basket_features)\nfootball_feature_matrix = bag_of_words(football_features)\n\n# Create a Naive Bayes classifier\nNB_classifier = MultinomialNB()\n\n# Combine feature matrices\nX_train = (basket_feature_matrix.toarray() + football_feature_matrix.toarray())\n\n# Create labels\nones = [1] * len(basket_features)\nzeros = [0] * len(football_features)\ny_train = ones + zeros\n\n# Train Naive Bayes classifier\nNB_classifier.fit(X_train, y_train)\n\n# Read test data\nf3 = open(\"test.txt\", \"r\")\ntest_data = f3.readlines()\n\n# Create test features and feature matrix\ntest_features = get_features(test_data)\ntest_feature_matrix = bag_of_words(test_features)\n\n# Predict the test data\npredictions = NB_classifier.predict(test_feature_matrix.toarray())\n\n# Get the accuracy\nprint(\"Accuracy: \", metrics.accuracy_score(y_train, predictions)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def lcs(s1,s2): \n m = len(s1) \n n = len(s2) \n \n # Create a matrix to store results of subproblems \n matrix = [[0]*(n+1) for i in range(m+1)] \n \n # Fill in the entries of the matrix \n for i in range(m+1): \n  for j in range(n+1): \n   if i == 0 or j == 0: \n    matrix[i][j] = 0\n   elif s1[i-1] == s2[j-1]: \n    matrix[i][j] = matrix[i-1][j-1] + 1\n   else: \n    matrix[i][j] = max(matrix[i-1][j], matrix[i][j-1]) \n \n # Return the maximum length \n return matrix[m][n] \n\n# Driver program \ns1 = \"dynamic\"\ns2 = \"programming\"\nlcs = lcs(s1, s2)\nprint(\"The length of LCS is\", lcs) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from bs4 import BeautifulSoup\nimport requests\n\nurl = 'https://www.example.com'\nr = requests.get(url)\n\nsoup = BeautifulSoup(r.content, 'html.parser')\n\n# Extract titles and links\ntitles = []\nlinks = []\nfor link in soup.find_all('a'):\n titles.append(link.get('title'))\n links.append(link.get('href'))\n\nprint(titles, links) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, render_template\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n return render_template('index.html')\n\n@app.route('/contacts', methods=['POST'])\ndef contacts():\n action = request.form.get('action')\n if action == 'add':\n # Add contact logic goes here\n elif action == 'delete':\n # Delete contact logic goes here\n elif action == 'update':\n # Update contact logic goes here\n \n return render_template('contacts.html')\n\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_duplicate_words(original_string):\n  words = original_string.split(\" \")\n  filtered_words = []\n  for word in words:\n    if word not in filtered_words:\n      filtered_words.append(word)\n  return ' '.join(filtered_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(list):\n sorted_list = sorted(list)\n return sorted_list \n\nlist = [1, 7, 5, 9 , 3]\nprint(sort_list(list)) # will print [1, 3, 5, 7, 9] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Get input from the user\nn = int(input(\"Enter a number: \"))\n\n# Calculate the factorial of the number\nfactorial = 1\nwhile n > 1:\n    factorial *= n\n    n -= 1\n\n# Print out the result\nprint(\"The factorial of the given number is:\", factorial) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_recursively(num1, num2):\n    if num2 == 0:\n        return num1\n    else:\n        return add_recursively(num1 ^num2, (num1 & num2) << 1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_list(list_two_dim): \n    sum = 0\n    for row in list_two_dim: \n        sum += sum(row) \n    return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def lexicographical_sort(arr)\n  arr.sort_by { |word| word.downcase }\nend\n\nsorted_arr = lexicographical_sort([\"ruby\", \"go\", \"java\", \"python\"])\n\nputs sorted_arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def upper_words(list):\n    result = []\n    for word in list:\n        if word[0].isupper():\n            result.append(word)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport random\n\n# Generates a random pattern of circles and squares\ndef generatePattern():\n pattern = np.zeros((3,3))\n for i in range(9):\n  pattern[i//3, i%3] = random.choice([0, 1])\n \n return pattern\n\npattern = generatePattern()\nprint(pattern) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers = [12, 15, 20, 9, 5]\n\nfiltered = list(filter(lambda x: x > 10, numbers))\nprint(filtered) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.neighbors import KNeighborsClassifier\n\n# Create the KNN classifier\nknn = KNeighborsClassifier(n_neighbors = 3)\n\n# Fit the classifier to the data\nknn.fit(X, y)\n\n# Predict the labels for the test set\ny_pred = knn.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findSmallestInteger(arr):\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in arr:\n        if num < smallest:\n            second_smallest = smallest \n            smallest = num\n        if num < second_smallest and num > smallest:\n            second_smallest = num\n    return (smallest, second_smallest) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\n# Driver Program \n  \nprint(Fibonacci(8)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def join_lists(list1, list2):\n    return list1 + list2\n\nlist1 = [1, 2, 3] \nlist2 = [4, 5, 6]\n\njoined_list = join_lists(list1, list2)\nprint(joined_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, student_id):\n        self.student_id = student_id\n        self.grades = {}\n\n    def set_grade(self, subject, grade):\n        self.grades[subject] = grade\n\n    def get_grade(self, subject):\n        return self.grades[subject]\n\n    def get_average_grade(self):\n        total = sum(self.grades.values())\n        subjects = len(self.grades)\n        return total / subjects but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_mean_median_mode(arr):\n#calculate mean\n mean = sum(arr) / len(arr)\n \n#calculate median\n arr.sort()\n mid = len(arr) // 2\n if len(arr) % 2 == 0:\n median = (arr[mid] + arr[mid + 1]) / 2\n else:\n median = arr[mid + 1]\n \n#calculate mode\n frequencies = {}\n for i in arr:\n if i in frequencies:\n frequencies[i] += 1\n else:\n frequencies[i] = 1\n mode = max(frequencies, key=frequencies.get)\n \n return mean, median, mode but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def predict_divison_output(x, y):\n    return x / y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import the necessary libraries\nimport xml.etree.ElementTree as ET\n\n# Parse the XML document\nroot = ET.fromstring(xml_doc)\n\nfor book in root:\n    if book.tag == 'title':\n        title = book.text\n    elif book.tag == 'author':\n        author = book.text\n\nprint(f\"Book Title: {title}, Author: {author}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: str type but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"Split an array of numbers into two halves\"\"\"\n\ndef split_array(arr):\n    # Find the middle point\n    mid = len(arr) // 2\n    # Split the array into two halves\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    return left_half, right_half\n\nif __name__ == '__main__':\n    arr = [4, 6, 2, 7, 9]\n    left_half, right_half = split_array(arr)\n    print(\"Left Half:\", left_half)\n    print(\"Right Half:\", right_half) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class FruitGrocery:\n    def __init__(self):\n        self.items = {\n            'Banana': 200,\n            'Orange': 300,\n            'Grapes': 500\n        }\n\n    def get_item_quantity(self, item):\n        return self.items.get(item) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def interpolate(str):\n    return str.format(name=\"world\")\n\ninput_str = \"Hello {{name}}\"\nprint(interpolate(input_str)) // Output: \"Hello world\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd \nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.svm import SVC\n\n# Read the data\ndata = [[\"The car is a Ford Mustang\", \"Ford Mustang\"]]\ndf = pd.DataFrame(data, columns=['sentence', 'class'])\n\n# Vectorizing the sentence \nvectorizer = TfidfVectorizer() \nX = vectorizer.fit_transform(df['sentence'])\n\n# Training the classifier \nclassifier = SVC()\nclassifier.fit(X, df['class']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_plaindrome(num):\n    original_num = num\n    reversed_num = 0\n    while num > 0:\n        remainder = num % 10\n        reversed_num = (reversed_num * 10) + remainder\n        num //= 10\n    return reversed_num == original_num\n\nnum = 1454\nif is_plaindrome(num):\n    print(num, \"is a plaindrome\")\nelse:\n    print(num, \"is not a plaindrome\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: true but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password():\n    # create the characters list\n    characters = string.ascii_lowercase + string.ascii_uppercase + string.digits\n    password_length = random.randint(8,16)\n    # generate a random password\n    password = ''\n    for i in range(password_length):\n        # add one of the characters to the password\n        password += random.choice(characters)\n    return password\n\nif __name__ == \"__main__\":\n    print(generate_password()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\ndef parse_web_page(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    body_text = soup.findAll('p') \n    data = []\n    for item in body_text:\n        text = item.text\n        data.append(text)\n    return data but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import torch \nimport torch.nn as nn \n  \nclass ObjectDetectionNetwork(nn.Module): \n\n def __init__(self): \n  super(ObjectDetectionNetwork, self).__init__() \n  \n  # Layer 1 \n  self.layer1 = nn.Conv2d(3, 32, 3, padding=1) \n  self.bn1 = nn.BatchNorm2d(32) \n  self.relu1 = nn.ReLU()\n  \n  # Layer 2 \n  self.layer2 = nn.Conv2d(32, 64, 3, padding=1) \n  self.bn2 = nn.BatchNorm2d(64) \n  self.relu2 = nn.ReLU()\n  \n  # Layer 3 \n  self.layer3 = nn.Conv2d(64, 128, 3, padding=1) \n  self.bn3 = nn.BatchNorm2d(128) \n  self.relu3 = nn.ReLU()\n  \n  # Layer 4 \n  self.layer4 = nn.Conv2d(128, 256, 3, padding=1) \n  self.bn4 = nn.BatchNorm2d(256) \n  self.relu4 = nn.ReLU()\n  \n  # Layer 5 \n  self.layer5 = nn.Conv2d(256, 512, 3, padding=1) \n  self.bn5 = nn.BatchNorm2d(512) \n  self.relu5 = nn.ReLU()\n  \n  # Max pooling layer \n  self.maxpool = nn.MaxPool2d(2, 2) \n  \n  # Fully connected layer \n  self.fc1 = nn.Linear(512, 4) \n  \n  \n # Forward pass \n def forward(self, x): \n  # Layer 1 \n  x = self.layer1(x) \n  x = self.bn1(x) \n  x = self.relu1(x) \n  \n  # Layer 2 \n  x = self.layer2(x) \n  x = self.bn2(x) \n  x = self.relu2(x) \n  \n  # Layer 3 \n  x = self.layer3(x) \n  x = self.bn3(x) \n  x = self.relu3(x) \n  \n  # Layer 4 \n  x = self.layer4(x) \n  x = self.bn4(x) \n  x = self.relu4(x) \n  \n  # Layer 5 \n  x = self.layer5(x) \n  x = self.bn5(x) \n  x = self.relu5(x) \n  \n  # Max pooling \n  x = self.maxpool(x) \n  \n  # Reshape \n  x = x.view(-1, 512) \n  \n  # Fully connected layer \n  x = self.fc1(x) \n  \n  return x but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, jsonify\napp = Flask(__name__)\n\ntodos = []\n\n@app.route('/todos', methods=['GET','POST'])\ndef list_todos():\n if request.method == 'GET':\n return jsonify({'todos': todos})\n if request.method == 'POST':\n todo = {'task': request.json['task']}\n todos.append(todo)\n return jsonify({'todo': todo})\n\n@app.route('/todos/<int:index>', methods=['DELETE', 'PUT'])\ndef delete_todo(index):\n if request.method == 'DELETE':\n todos.pop(index)\n return jsonify({'result': True})\n if request.method == 'PUT':\n todos[index] = {'task': request.json['task']}\n return jsonify({'todo': todos[index]})\n\nif __name__ == '__main__':\n app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortArray(arr): \n  arr.sort(key = lambda x: x[1]) \n  return arr \n  \n# Driver Code \narr = [[1, 2],[2, 6], [3, 4], [4, 5]] \n\nprint (sortArray(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class BankAccountHolder:\n    def __init__(self, name, card_number, pin, balance):\n        self.name = name\n        self.card_number = card_number\n        self.pin = pin\n        self.balance = balance\n    \n    def get_name(self):\n        return self.name\n    \n    def get_card_number(self):\n        return self.card_number\n    \n    def get_pin(self):\n        return self.pin\n    \n    def get_balance(self):\n        return self.balance\n    \n    def set_balance(self, balance):\n        self.balance = balance but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport matplotlib.pyplot as plt\n\n# List of input points\ninput_values = [(-5.2, 2.3), (3.1, 4.9), (2.4, 0.3), (-2.4, -3.2)]\n\n# Create x and y matrix from input\nx = [v[0] for v in input_values]\ny = [v[1] for v in input_values]\n\n# Create the training data array\nX = np.array(x).reshape(-1, 1)\nY = np.array(y)\n\n# Create the model, train, and predict\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression().fit(X, Y)\nY_pred = model.predict(X)\n\n# Plot the data and the model\nplt.scatter(X, Y)\nplt.plot(X, Y_pred, color='red')\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fahrenheit_to_celcius(fahrenheit):\n    celcius = (fahrenheit - 32) * (5/9)\n    return celcius but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def group_by_characters(strings):\n    groups = {}\n    # Iterate over strings\n    for string in strings:\n        # Add string to existing group if character is seen\n        for char in string:\n            if char in groups:\n                groups[char].append(string)\n            # Else create new group\n            else:\n                groups[char] = [string]\n    return groups but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pyautogui\n \n# The list of commands\nCOMMANDS = {\n 'go forward': pyautogui.moveRel(0, 10),\n 'turn left': pyautogui.moveRel(-10, 0),\n 'turn right': pyautogui.moveRel(10, 0),\n 'stop': pyautogui.press('esc'),\n 'look up': pyautogui.moveRel(0, -10)\n}\n \nwhile True:\n command = input('Please enter a command: ')\n if command in COMMANDS:\n COMMANDS[command]\n else:\n print('Invalid command.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pickle\n\ndef main():\n # Read data from file\n try:\n with open('data.pickle', 'rb') as f:\n data = pickle.load(f)\n except:\n data = {}\n\n while True:\n # Print menu\n print('1. Add')\n print('2. Edit')\n print('3. Delete')\n print('4. Quit')\n\n # Get input\n choice = input('Enter your choice: ')\n \n # Process input\n if choice == '1':\n add(data)\n elif choice == '2':\n edit(data)\n elif choice == '3':\n delete(data)\n elif choice == '4':\n with open('data.pickle', 'wb') as f:\n pickle.dump(data, f)\n break\n else:\n print('Invalid option')\n\n\n# Add a new entry\ndef add(data):\n key = input('Enter key: ')\n value = input('Enter value: ')\n\n data[key] = value\n\n\n# Edit an existing entry\ndef edit(data):\n key = input('Enter key: ')\n \n if key in data:\n value = input('Enter new value: ')\n data[key] = value\n else:\n print('Key not found')\n\n\n# Delete an entry\ndef delete(data):\n key = input('Enter key: ')\n \n if key in data:\n del data[key]\n else:\n print('Key not found')\n\nif __name__ == '__main__':\n main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def format_string(string): \n    return '{:.2f}'.format(float(string))\n\n// Usage:\nstring = '3.14159'\nformatted_string = format_string(string)\nprint(formatted_string) // prints 3.14 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_list(list):\n    return sum(list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def flatten_list(list):\n flattened_list = []\n for sublist in list:\n for item in sublist:\n flattened_list.append(item)\n return flattened_list\n\nprint(flatten_list([[1,2,3],[4,5,6],[7,8,9]]))\n# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\n# Connect to database\nconn = sqlite3.connect('records.db')\nc = conn.cursor()\n\n# Search for the record\nc.execute('''SELECT name, age FROM records WHERE name=?''', ('John Doe',))\n\n# Print the record\nfor record in c.fetchall():\n    name, age = record\n    print(f'Name: {name} | Age: {age}')\n\n# Close the connection\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(my_list):\n    my_list = list(dict.fromkeys(my_list))\n    return my_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\n\n# python ~/workspace/level_basestation/pre-cog/examples/simple_trx.py --port 12345 --radio-addr 85 --dest-addr 86 --args serial=E8R10Z2B1\n# python ~/workspace/level_basestation/pre-cog/examples/simple_trx.py --port 12346 --radio-addr 86 --dest-addr 85 --args serial=E4R11Y0B1\n\nfrom gnuradio import gr\nfrom gnuradio import uhd\nfrom gnuradio import digital\nfrom gnuradio import blks2\nfrom gnuradio.gr import firdes\nimport gnuradio.gr.gr_threading as _threading\nfrom gnuradio import level\nfrom gnuradio import extras\nfrom math import pi\nfrom gruel import pmt\nimport urllib2, time, json\n\nclass test_transmit(gr.top_block):\n    def __init__(self):\n        gr.top_block.__init__(self, \"CC430 Transmitter\")\n\n        self.sent_pkts = 0\n\n        # 5555 5555 2c6e fd00 0071 da0b e2\n        self.packet =  chr(0x55)*4                          # preamble\n        self.packet += chr(0x2c) + chr(0x6e)                # sync\n        self.packet += chr(0xfc)                            # length\n        self.packet += chr(0x00) + chr(0x00) + chr(0x00)    # payload\n        self.packet += chr(0x71) + chr(0xda) + chr(0x0b) + chr(0xe2) # CRC (currently incorrect)\n\n        # Variables\n        self.samp_rate = samp_rate = 125e3\n        self.f_center = f_center = 868e6\n        self.bandwidth = bandwidth = 200e3\n        self.gain = gain = 5\n\n        self.msgq = msgq = gr.msg_queue()\n\n        # Blocks\n        self.uhd_sink = uhd.usrp_sink(\n            device_addr=\"\",\n            stream_args=uhd.stream_args(\n                cpu_format=\"fc32\",\n                channels=range(1),\n            ),\n        )\n        self.uhd_sink.set_samp_rate(samp_rate)\n        self.uhd_sink.set_center_freq(f_center, 0)\n        self.uhd_sink.set_gain(gain, 0)\n        self.uhd_sink.set_bandwidth(bandwidth, 0)\n\n        self.msg_src = gr.message_source(1, msgq)\n\n        self.msk = level.msk_mod_bc(\n            samples_per_symbol=2,\n            bt=0.3\n        )\n        \n        # Connections\n        self.connect(self.msg_src, self.msk, self.uhd_sink)\n\n    def send_pkt(self, payload):\n        msg = gr.message_from_string(str(payload))\n        self.msgq.insert_tail(msg)\n\n    def get_top_hn(self):\n        try:\n            f_page = urllib2.urlopen(\"http://api.ihackernews.com/page\").read()\n        except urllib2.HTTPError:\n            return \"HN returned server error: 0\"\n        fj = json.loads(f_page)\n        title = fj['items'][0]['title']\n        score = fj['items'][0]['points']\n        return str(title) + \":\" + str(score)\n\n    def form_packet(self, payload):\n        length = len(payload)\n        self.packet =  chr(0x55)*4                          # preamble\n        self.packet += chr(0xd3) + chr(0x91)                # sync\n        self.packet += chr(length)                          # length\n        self.packet += str(payload)\n        self.packet += chr(0x71) + chr(0xda) + chr(0x0b) + chr(0xe2) # CRC (currently incorrect)\n\n    def main_loop(self):\n        while True:\n            payload = self.get_top_hn()\n            print payload\n            self.packet = self.form_packet(payload)\n            self.send_pkt(self.packet)\n            self.sent_pkts += 1\n            try:\n                time.sleep(5)\n            except KeyboardInterrupt:\n                print \"\\n\\nSent Packets:\", self.sent_pkts, \"\\n\"\n                break\n\nif __name__ == '__main__':\n    tx = test_transmit()\n    r = gr.enable_realtime_scheduling()\n    tx.start()\n    tx.main_loop()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_ints(num1, num2):\n  if num1 > num2:\n    return \"Integer1 is greater than Integer2\"\n  elif num1 < num2:\n    return \"Integer1 is lesser than Integer2\"\n  else:\n    return \"The integers are equal\"\n\nresult = compare_ints(6, 4)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password():\n    password_characters = string.ascii_lowercase + string.ascii_uppercase + string.punctuation \n    return ''.join(random.choice(password_characters) for i in range(10)) \n\nprint(generate_password()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef shuffle(arr):\n  for i in range(len(arr)):\n    j = random.randint(0, len(arr)-1)\n    arr[i], arr[j] = arr[j], arr[i]\n \n  return arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fahrenheit_to_Celsius(Fahrenheit):\n    Celsius = (Fahrenheit - 32) * 5/9\n    return Celsius\n  \nFahrenheit = 32\nCelsius = Fahrenheit_to_Celsius(Fahrenheit)\nprint(\"Celsius:\",Celsius) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_unique_elements(numbers_list): \n    seen = set() \n    count = 0 \n    for number in numbers_list: \n        if number not in seen: \n            seen.add(number) \n            count+=1 \n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\n# Connect Database\nconn = sqlite3.connect('employee_records.db')\n\n# Create Cursor\ncursor = conn.cursor()\n\n# Query Database\ncursor.execute(\"SELECT name, salary, department FROM employees\")\nrows = cursor.fetchall()\n\n# Generate Report\nfor row in rows:\n name = row[0]\n salary = row[1]\n department = row[2]\n print(f'{name} earns ${salary} in {department}')\n\n# Close Connection\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: 0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_missing_num(arr):\n    n = len(arr)+1\n    sum_of_n = int(n*(n+1)/2)\n    sum_of_arr = 0\n    for i in arr:\n        sum_of_arr += i\n    return sum_of_n - sum_of_arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countOccurrences(string, x): \n  count = 0\n  for i in range(len(string)): \n    if string[i] == x: \n      count += 1\n  return count \n\ndef countOccurrences2(string, x): \n  found = False\n  count = 0\n  for i in range(len(string)): \n    if string[i] == x and not found: \n      count += 1\n      found = True\n    else: \n      found = False\n  return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ComplexVector:\n    def __init__(self, complex_num):\n        # split the complex number into its components\n        self.real = float(complex_num.split(\" \")[0])\n        self.imag = float(complex_num.split(\" \")[2].replace(\"i\", \"\"))\n    \n    # print the vector in a readable format\n    def __str__(self):\n        return f\"{self.real} + {self.imag}i\"\n\n# create the vector from a complex number\nvec = ComplexVector(\"1 - 2i\")\nprint(vec) # prints \"1.0 + -2.0i\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_groups(n):\n    groups = []\n    for i in range(2, n):\n        group = []\n        for j in range(1, n):\n            if i * j % n == 0:\n                group.append(i * j)\n        if group:\n            groups.append(group)\n    return groups but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortArray(arr):\n    n = len(arr)\n    for i in range(n):\n        min_idx = i\n        for j in range(i+1, n):\n            if arr[min_idx] > arr[j]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr \n   \nsortArray([9, 8, 2, 4, 5, 7, 0]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_tax(price):\n tax_rate = 0.135\n return price * tax_rate but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import calendar\nfrom datetime import date\n\ntoday = date.today()\n\ncal = calendar.month(today.year, today.month)\nprint(cal) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fill_2d_list(x, y):\n    new_list = [[i+j for i in range(x)] for j in range(0, x*y, x) ]\n    return new_list\n\nfill_2d_list(3, 5) \n\n# Output:\n# [[1, 2, 3], \n# [4, 5, 6], \n# [7, 8, 9], \n# [10, 11, 12], \n# [13, 14, 15]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\ns = ['a', 'b', 'c', 'a', 'c', 'b', 'd', 'd']\ncounts = Counter(s)\n\nfor c, count in counts.items():\n print(f'{c}: {count} times') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node: \n    def __init__(self, key): \n        self.left = None\n        self.right = None\n        self.val = key \n  \n# Function to find the minimum value in a given BST\ndef minValue(node): \n    current = node \n  \n    # loop down to find the leftmost leaf \n    while(current.left is not None): \n        current = current.left  \n  \n    return current.val but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def array_sum(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum\n\nprint(array_sum([10, 20, 30, 40]))\n\n# Output: 100 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Fibonacci:\n    @staticmethod\n    def generateFibonacci(limit):\n        result = []\n        first = 0\n        second =1\n        while first <=limit:\n            result.append(first)\n            temp=first + second\n            first=second\n            second=temp\n        return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_fake_data(row_count, column_count, data_types):\n\n    data = []\n    for i in range(row_count):\n        row_data = []\n        for dt in data_types:\n            if dt == 'float':\n                row_data.append(random.uniform(0,1))\n            elif dt == 'int':\n                row_data.append(random.randint(0,10))\n            elif dt == 'string':\n                row_data.append(''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=random.randint(2, 8))))\n        data.append(row_data)\n    return data\n\n# Generate fake data with the provided descriptors\nfake_data = generate_fake_data(100, 10, ['int', 'float', 'string']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_product_three(numbers):\n numbers.sort()\n return max(\n  numbers[0] * numbers[1] * numbers[-1], \n  numbers[-1] * numbers[-2] * numbers[-3]\n ) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: nums = range(20, 51)\nprimes = []\n\n# loop through each number\nfor num in nums:\n    is_prime = True # assume the number is prime unless proven otherwise\n    \n    # loop through each number that is less than the target number\n    for i in range(2, num):\n        # if the target number is divisible by any number, then it is not a prime number\n        if (num % i == 0):\n            is_prime = False\n            break\n\n    # if the number is prime, then add it to the list of primes\n    if is_prime:\n        primes.append(num)\n\n# print the list of prime numbers\nprint(primes) # [23, 29, 31, 37, 41, 43, 47] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class StudentList:\n    def __init__(self):\n        self.students = []\n\n    def add_student(self, student):\n        self.students.append(student)\n\n    def remove_student(self, student):\n        self.students.remove(student) but is not the same. just give one example and only return the code."}
