{"prompt": "make some code that functions the same as the following code: import sys\n\ndef find_closest_pair(arr):\n    # Variables\n    min_distance = sys.maxsize\n    closest_pair = [-1, -1]\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Get second number\n        for j in range(i + 1, len(arr)):\n            # Calculate the distance between the two values\n            distance = abs(arr[i] - arr[j])\n            # Check if it is the minimum distance\n            if distance < min_distance:\n                min_distance = distance\n                closest_pair[0] = arr[i]\n                closest_pair[1] = arr[j]\n    \n    return closest_pair\n\n# example\narr = [3, 5, 8, 7, 1, 12]\nclosest_pair = find_closest_pair(arr)\nprint('Closest pair:', closest_pair)  # Output is [1, 3] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_lists(list_a, list_b):\n  \"\"\"\n  Function to merge two lists\n  \n  Input: list_a: list of integers\n         list_b: list of integers\n  Output: new_list: list of integers\n  \"\"\"\n  new_list = []\n  \n  for a in list_a:\n    new_list.append(a)\n  for b in list_b:\n    new_list.append(b)\n  \n  return new_list\n  \nlist_a = [1,2,3]\nlist_b = [4,5,6]\n  \nmerged_list = merge_lists(list_a, list_b)\n\nprint(merged_list)\n\n# Output:\n# [1, 2, 3, 4, 5, 6] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def concatenate_strings(str1, str2):\n  return str1 + str2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_dict_by_value(d):\n    # Convert the dictionary into a list of tuples\n    d_list = [(key, value) for key, value in d.items()]\n    # Sort the list by the second element of the tuple\n    sorted_d = sorted(d_list, key=lambda x: x[1])\n    # Convert the list of tuples back into a dictionary\n    sorted_dict = dict(sorted_d)\n    return sorted_dict\n\nif __name__ == \"__main__\":\n    d = {1: 'a', 3: 'b', 2: 'c'}\n    print(sort_dict_by_value(d)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countInversions(arr):\n\t# To store counts of inversions\n\tcount = 0\n\n\t# Iterating from first element\n\tfor i in range(len(arr)):\n\t\t# To find number of elements smaller than arr[i]\n\t\t# which are on right side of arr[i]\n\t\tfor j in range(i + 1, len(arr)):\n\t\t\tif arr[i] > arr[j]:\n\t\t\t\tcount += 1\n\treturn count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\ndef get_html_page(url):\n response = requests.get(url)\n return response.text but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreating a Genetic Algorithm Using Python to Optimize Parameters of a Simulated Annealing Algorithm\n\"\"\"\n\nimport numpy as np\nimport random\n\n# Define the parameters to be optimized\nparams = [10, 20, 30, 40, 50]\n\n# Define the objective function\ndef objective_function(parameters):\n    x = parameters[0]\n    y = parameters[1]\n    z = parameters[2]\n    w = parameters[3]\n    p = parameters[4]\n    return x*y + x*z - y*z + w*p\n\n# Define the fitness function\ndef fitness_function(parameters):\n    return objective_function(parameters)\n\n# Define the simulated annealing algorithm\ndef simulated_annealing(init_params):\n    # Initialize parameters\n    current_params = init_params\n    current_fitness = fitness_function(init_params)\n    best_params = current_params.copy()\n    best_fitness = current_fitness\n\n    # Step 1: Calculate the temperature\n    temperature = 1\n\n    # Step 2: Set the number of iterations \n    iterations = 1000\n\n    # Step 3: Main loop \n    while temperature > 0 and iterations > 0:\n        # Select a candidate solution\n        candidate_solution = np.random.randint(-10, 10, size=len(init_params))\n        candidate_params = current_params + candidate_solution\n\n        # Calculate the fitness of the candidate solution \n        candidate_fitness = fitness_function(candidate_params)\n\n        # Calculate the probability of acceptance\n        probability_of_acceptance = np.exp(-abs(candidate_fitness - current_fitness) / temperature)\n        \n        # Select whether we accept or reject the candidate solution \n        if random.uniform(0,1) <= probability_of_acceptance:\n            current_params = candidate_params\n            current_fitness = candidate_fitness\n            print('Accepted new solution with fitness value: ', candidate_fitness)\n\n        # Update the best solution\n        if current_fitness > best_fitness:\n            best_fitness = current_fitness\n            best_params = current_params.copy()\n\n        # Update the temperature \n        temperature -= .001\n\n        # Decrease the number of iterations\n        iterations -= 1\n\n    # Return the best solution\n    return best_params\n\n# Initialize parameters \ninit_params = np.random.randint(-10, 10, size=len(params))\n\n# Run the genetic algorithm\nbest_params = simulated_annealing(init_params)\n\n# Print the best solution\nprint('The optimized parameters are: ', best_params) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get('https://en.wikipedia.org/wiki/Software_engineering')\n\n# Parse the html content\nsoup = BeautifulSoup(html_content.text, \"lxml\")\n\n# Fetch the specific content\nparagraph = soup.find_all('p')[1].text\n\n# Scrap the text from the paragraph\ntext = paragraph.split('.')[0].split(' ')\ntext = ' '.join(text)\n\nprint(text)\n# Output: Software engineering is the application of engineering to the design, development, implementation, testing, and maintenance of software in a systematic method but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_duplicates(arr): \n    seen = set() \n    duplicates = []\n    for value in arr:\n        if value in seen:\n            duplicates.append(value)\n        else:\n            seen.add(value)\n    return duplicates but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def jaccard_index(str1, str2):\n    set1 = set(str1.split())\n    set2 = set(str2.split())\n\n    return float(len(set1 & set2)) / len(set1 | set2)\n\nstr1 = input(\"String1: \")\nstr2 = input(\"String2: \")\nprint(\"Jaccard Index: \", jaccard_index(str1, str2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nfor i in range(5):\n    print(random.randint(0, 10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def square(x):\n return x * x\n \n# Using the exponentiation operator\ndef square_op(x):\n return x ** 2\n \n# Using bit-shift operator\ndef square_shift(x):\n  return x << 1\n\n# Using multiplication\ndef square_mul(x):\n return (x + x) * x\n \n# Using pow() built-in\ndef square_builtin(x):\n return pow(x, 2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify(data):\n    # Initialize categories     \n    categories = [0, 1]   \n    threshold = 0.5  \n\n    # Make predictions using a classifier \n    predictions = classifier.predict(data)  \n\n    # Classify the data based on the predictions     \n    classified_data = [categories[int(pred > threshold)] for pred in predictions]   \n\n    return classified_data but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n a = 0\n b = 1\n if n < 0: \n  print(\"Incorrect input Given\") \n elif n == 0: \n  return a \n elif n == 1: \n  return b \n else: \n  for i in range(2,n): \n   c = a + b \n   a = b \n   b = c \n return b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from math import sqrt\n\ndef euclidean_distance(p1, p2):\n    '''Calculates the euclidean distance between two points'''\n    x_sq = (p1[0] - p2[0]) ** 2\n    y_sq = (p1[1] - p2[1]) ** 2\n    return sqrt(x_sq + y_sq)\n\ndef assign_cluster(points, centroids):\n    '''Assign points to clusters and return the assigned clusters'''\n    clusters = []\n    for point in points:\n        distances = [euclidean_distance(point, centroid) for centroid in centroids]\n        min_dist_index = distances.index(min(distances))\n        clusters.append(min_dist_index)\n    return clusters\n\ndef calculate_centroid(points, clusters):\n    '''Calculate the new centroids for each cluster'''\n    num_clusters = len(set(clusters))\n    new_centroids = []\n    for i in range(num_clusters):\n        x_sum, y_sum = 0, 0\n        cluster_points = [points[j] for j, cl in enumerate(clusters) if cl == i]\n        for point in cluster_points:\n            x_sum += point[0]\n            y_sum += point[1]\n        new_centroid = (x_sum / len(cluster_points), y_sum / len(cluster_points))\n        new_centroids.append(new_centroid)\n    return new_centroids\n\ndef k_means_clustering(points, k):\n    \"\"\"Perform the K-means clustering algorithm\"\"\"\n    # Initialize the centroids by randomly selecting points from the data set\n    centroids = [points[i] for i in range(k)]\n\n    # Iterate until the clusters converge\n    while True:\n        clusters = assign_cluster(points, centroids)\n\n        # If the clusters do not change, the algorithm has converged\n        if clusters == assign_cluster(points, centroids): \n            break \n        \n        # Calculate the new centroids\n        centroids = calculate_centroid(points, clusters)\n        \n    return clusters\n\n# Test the algorithm\npoints = [{x: 6, y: 7}, {x: 5, y: 4}, {x: 8, y: 2}, {x: 9, y: 3}, {x: 3, y: 5}, ]\ncluster_assignments = k_means_clustering(points, k=2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(list):\n result = []\n for element in list:\n  if element not in result:\n    result.append(element)\n return result\n\nprint(remove_duplicates(list)) # Will return [1, 2, 3, 4, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: divisible_by_3_or_7 = [n for n in range(30,51) if n % 3 == 0 and n % 7 != 0]\nprint(divisible_by_3_or_7) # output: [30, 33, 36, 39, 42, 45, 48] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: even_dict = {k: v for k, v in enumerate([1, 2, 3, 4, 5]) if v % 2 == 0} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import kivy\nkivy.require('1.9.0')\n\nfrom kivy.app import App \nfrom kivy.uix.widget import Widget \nfrom kivy.uix.button import Button \nfrom kivy.uix.gridlayout import GridLayout\nfrom random import randint\n\n# Create a 30x30 board\nclass Grid(GridLayout):\n def __init__(self, **kwargs):\n super().__init__(**kwargs) \n self.cols = 30 \n self.rows = 30\n self.buttonList = self.makeMaze()\n \n # Randomly generate maze \n def makeMaze(self):\n buttonList = []\n for row  in range(30):\n for col in range(30):\n # randomly create walls\n value = randint(0, 1)\n # create a button\n btn = Button(text=str(value))\n # add button to the list\n buttonList.append(btn)\n # add button to the grid\n self.add_widget(btn)\n # return the list\n return buttonList\n\n# Main class\nclass MazeApp(App):\n def build(self):\n return Grid()\n\n# Run the application\nif __name__== '__main__':\n MazeApp().run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mph_to_kph(speed):\n kph = speed * 1.609\n return kph but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class GameCharacter:\n def __init__(self, health, strength, defense):\n self.health = health\n self.strength = strength\n self.defense = defense\n \n def take_damage(self, damage):\n self.health -= damage\n \n def get_status(self):\n return f'Health: {self.health}, Strength: {self.strength}, Defense: {self.defense}' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from datetime import date\n\ndef format_date(date_str, start_format, end_format):\n    date_obj = date.strptime(date_str, start_format)\n    return date_obj.strftime(end_format) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_input(val):\n try:\n if type(val) != str:\n return False\n else:\n return True\n except ValueError:\n print('Input is not a string!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import grpc\nimport hello_world_pb2\nimport hello_world_pb2_grpc\n\nclass HelloWorldServicer(hello_world_pb2_grpc.HelloWorldServicer):\n def GreetUser(self, request, context):\n return hello_world_pb2.GreetUserResponse(message=f'Hello {request.name}')\n\nserver = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\nhello_world_pb2_grpc.add_HelloWorldServicer_to_server(HelloWorldServicer(), server)\nserver.add_insecure_port('[::]:50051')\nserver.start() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def permute_letters(letters):\n    if len(letters) == 0:\n        return []\n\n    if len(letters) == 1:\n        return [letters]\n\n    permuted_letters = []\n\n    for letter in letters:\n        remaining_letters = [letter2 for letter2 in letters if letter2 != letter]\n        permutations = permute_letters(remaining_letters)\n\n        for permutation in permutations:\n            permuted_letters.append([letter] + permutation)\n\n    return permuted_letters but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print('Hello, World!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci_sequence(n):\n \n # Initialize first two values of the sequence\n a, b = 0, 1\n \n # Calculate values until the desired sequence length\n while a < n:\n # Print the current value\n print(a)\n \n # Calculate new values\n a, b = b, a+b\n \n # Execute the function\nfibonacci_sequence(100) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: // Imports here\n\npublic class SearchServer {\n public static void main(String[] args) throws IOException {\n // Server initialization here\n\n HttpServer server = HttpServer.create(new InetSocketAddress(8000), 0);\n server.createContext(\"/search\", exchange -> {\n String query = exchange.getRequestURI().getQuery();\n // Search logic here\n List<String> results = getResultsMatchingQuery(query);\n String resp = new Gson().toJson(results);\n\n exchange.sendResponseHeaders(200, resp.length());\n exchange.getResponseBody().write(resp.getBytes());\n exchange.close();\n });\n\n server.start();\n }\n \n private static List<String> getResultsMatchingQuery(String query) {\n // Search logic here\n List<String> results = new ArrayList<>();\n if (query.equals(\"programming\")) {\n results.add(\"Java programming\");\n results.add(\"Python programming\");\n results.add(\"C++ programming\");\n }\n return results;\n }\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubbleSort(nums): \n    for i in range(len(nums)-1): \n        for j in range(0, len(nums)-i-1): \n            if nums[j] > nums[j+1] : \n                nums[j], nums[j+1] = nums[j+1], nums[j] \n    return nums\n  \narr = [3, 5, 4, 1, 6]\nprint (bubbleSort(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_sorted_lists(list1, list2):\n    merged_list = []\n    \n    while len(list1) > 0 and len(list2) > 0:\n        if list1[0] < list2[0]:\n            merged_list.append(list1[0])\n            list1.pop(0)\n        else:\n            merged_list.append(list2[0])\n            list2.pop(0)\n    \n    if len(list1) > 0:\n        merged_list += list1\n    else:\n        merged_list += list2\n    \n    return merged_list\n\nmerged_list = merge_sorted_lists(list1, list2)\nprint(merged_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Player:\n    def __init__(self, name, health, gold):\n        self.name = name\n        self.health = health\n        self.gold = gold but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from bs4 import BeautifulSoup\n\nhtml_doc =  \"\"\"\n<html>\n <body>\n  <h1>Hello World!</h1>\n  <div>\n   <p>This is a paragraph.</p>\n   <ul>\n    <li>Item 1</li>\n    <li>Item 2</li>\n   </ul>\n  </div>\n </body>\n</html>\n\"\"\"\n\nsoup = BeautifulSoup(html_doc, 'html.parser')\n\nfor elem in soup.find_all():\n    print(elem.text)\n\n# Output: \n# Hello World!\n# This is a paragraph.\n# Item 1\n# Item 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to perform binary search in an array\ndef binarySearch(arr, x): \n  \n    low = 0\n    high = len(arr) - 1\n  \n    while low <= high: \n  \n        mid = (high + low) // 2\n  \n        # Check if x is present at mid \n        if arr[mid] < x: \n            low = mid + 1\n  \n        # If x is greater, ignore left half \n        elif arr[mid] > x: \n            high = mid - 1\n  \n        # If x is smaller, ignore right half \n        else: \n            return mid \n  \n    # If we reach here, then the element was not present \n    return -1\n  \n# Driver Code \narr = [2, 3, 4, 10, 40] \nx = 10\n  \n# Function call \nresult = binarySearch(arr, x) \n  \nif result != -1: \n    print (\"Element is present at index\", str(result)) \nelse: \n    print (\"Element is not present in array\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \nimport matplotlib.pyplot as plt \n\ndef optimal_k(X): \n \n distortions = [] \n inertias = [] \n mapping1 = {} \n mapping2 = {} \n K = range(1,10) \n\n for k in K: \n #Building and fitting the model \n kmeanModel = KMeans(n_clusters=k).fit(X) \n kmeanModel.fit(X) \n \n distortions.append(sum(np.min(cdist(X, kmeanModel.cluster_centers_, \n 'euclidean'),axis=1)) / X.shape[0]) \n inertias.append(kmeanModel.inertia_) \n\n #Visualize \n plt.plot(K, distortions, 'bx-') \n plt.xlabel('Values of K') \n plt.ylabel('Distortion') \n plt.title('The Elbow Method using Distortion') \n plt.show() \n \n plt.plot(K, inertias, 'bx-') \n plt.xlabel('Values of K') \n plt.ylabel('Inertia') \n plt.title('The Elbow Method using Inertia') \n plt.show() \n\noptimal_k(X) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_words(string):\n    words = string.split(\" \")\n    num_words = len(words)\n    return num_words\n\nresult = count_words(\"This is a test string\")\nprint(\"Number of words:\", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from scipy.optimize import fmin\n\ndef f(x, y):\n return 3*x**2 + 2*x*y + 5*y**2\n\nx, y = fmin(f, 0, 0)\n\nprint(f'The maximum of f(x,y) is {f(x, y)} at (x, y) = ({x:0.5f}, {y:0.5f})') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def absolute_value(x):\n    if x < 0:\n        return -x\n    else:\n        return x but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def round_up(value):\n    \"\"\"Rounds up a number to the next decimal.\"\"\"\n    return int(value * 10) / 10 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def alternatingCase(s): \n    result = \"\" \n    for i in range(len(s)):\n        if i % 2 == 0: \n            result = result + s[i].upper() \n        else: \n            result = result + s[i].lower() \n    return result \n\ns = \"Hello World\"\nprint(alternatingCase(s)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(a, b): \n    if a == 0 : \n        return b \n      \n    return gcd(b % a, a) \n      \na = 12\nb = 24\ngcd = gcd(a, b) \nprint(gcd) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def unique_elements(lst): \n    elements = []  \n    for num in lst: \n        if num not in elements: \n            elements.append(num) \n    return list(set(elements)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: base = float(input('Enter the base:'))\nheight = float(input('Enter the height:'))\n\ndef areaOfTriangle(base, height):\n return 0.5 * base * height\n\nprint(areaOfTriangle(base, height)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_char(my_list, char):\n    count = 0\n    for i in my_list:\n        if i == char:\n            count += 1\n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_profit_items(items):\n max_profit = 0\n max_index = -1\n for i in range(len(items)):\n curr_price = items[i]['price']\n curr_profit = items[i]['profit']\n if curr_price * curr_profit > max_profit:\n max_profit = curr_price * curr_profit\n max_index = i\n\n return max_index\n\nlist_of_items = [\n {'price': 10, 'profit': 20}, \n {'price': 4, 'profit': 10}, \n {'price': 3, 'profit': 5}\n]\n\nmax_index = max_profit_items(list_of_items)\n\nprint(\"The item at index \" + str(max_index) + \" has the maximum profit.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def largestMultipleOf3(list): \n    list.sort() \n    running_sum = 0\n    for i in range(len(list)): \n        running_sum += list[i] \n\n    if running_sum % 3 == 0:  \n        return running_sum  \n\n    return largestMultipleOf3(list[:-1]) \n\nlist = [3, 15, 4, 6, 5] \nprint(largestMultipleOf3(list)) // 15 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_subsets(s):\n    subsets = []\n\n    for i in range(len(s)+1):\n        for subset in itertools.combinations(s, i):\n            subsets.append(subset)\n\n    return subsets\n\ns = {1,2,3}\nresult = find_subsets(s)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python3\nfrom pymongo import MongoClient\nimport os\nimport os.path\nimport re\nimport bs4\nimport itertools\nfrom bs4 import BeautifulSoup\n\nimport utils\n\nclass ReferenceItem:\n    def __init__(self):\n        self.name = \"\"\n        self.module = \"\"\n        self.usage = \"\"\n        self.short = \"\"\n        self.full = \"\"\n        self.fullest = \"\"\n        self.href = \"\"\n        self.copyright = \"\"\n        self.subitems = []\n    \n    def __str__(self):\n        return (\"name: \" + self.name + \"\\n\"\n                + \"href: \" + self.href + \"\\n\"\n                + \"module: \" + str(self.module) + \"\\n\"\n                + \"usage: \" + str(self.usage) + \"\\n\"\n                + \"short: \" + self.short + \"\\n\\n\"\n                #+ \"full: \" + self.full + \"\\n\\n\"\n                #+ \"fullest: \" + self.fullest + \"\\n\\n\"\n                + \"subitems: \" + str(self.subitems)\n                + \"copyright: \" + self.copyright)\n    \n    def to_dict(self):\n        return {\"name\" : self.name,\n                \"href\": self.href,\n                \"module\" : self.module,\n                \"usage\" : self.usage,\n                \"short\" : self.short,\n                \"full\" : self.full,\n                \"fullest\" : self.fullest,\n                \"subitems\" : self.subitems,\n                \"copyright\": self.copyright}\n    \ndef hasclass(tag, classes):\n    for cl in tag.get(\"class\", []):\n        if cl in classes:\n            return True\n    return False\n\ndef create_ref(refs, name, module, base_href):\n    if not name in refs:\n        refs[name] = ReferenceItem()\n    refs[name].name = name\n    if module:\n        refs[name].module = \"import \" + module\n    refs[name].href = base_href +  \"#\" + name\n    refs[name].copyright = \"\u24d2 Python developers, \" + refs[name].href\n\n    parent = \".\".join(name.split(\".\")[:-1])\n    if parent != \"\" and parent[0] == \"@\":\n        parent = parent[1:]\n    if not parent in refs:\n        refs[parent] = ReferenceItem()\n    subitem = (name, \"\")\n    if not subitem in refs[parent].subitems:\n        refs[parent].subitems.append(subitem)\n    \n    \ndef can_be_short(text):\n    #print(\"Testing string `\" + text + \"`\")\n    if re.match(\"New in version\", text):\n        return False\n    if re.match(\"Source code:\", text):\n        return False\n    return True\n\n\ndef next_tag(tag):\n    while not tag.next_sibling and tag.parent:\n        tag = tag.parent\n    if tag.next_sibling:\n        return tag.next_sibling\n    else:\n        return None\n\n    \ndef parse_file(filename, refs):\n    base_href = \"https://docs.python.org/\" + filename[2:]\n    soup = BeautifulSoup(open(filename), 'lxml')\n    module_a = soup.h1.a\n    if not \"headerlink\" in module_a.get(\"class\"):\n        module = module_a.string\n    else:\n        module = None\n    #print(\"found module\", module)\n    currentName = module\n    if currentName:\n        create_ref(refs, currentName, module, base_href)\n    tag = soup.h1.next_sibling\n    while tag is not None:\n        #print(\"Tag: `\", tag, \"`\")\n        if isinstance(tag, bs4.element.Comment):\n            tag = tag.next_element\n            continue\n        if isinstance(tag, bs4.element.NavigableString):\n            text = tag.strip()\n            if text != \"\" and currentName:\n                if refs[currentName].short == \"\":\n                    if can_be_short(text):\n                        refs[currentName].short = text\n                refs[currentName].full += text\n            tag = tag.next_element\n            continue\n        #if currentName:\n        #    print(currentName, tag.name, \"`\"+refs[currentName].full+\"`\", \"\\n\\n\")\n        if hasclass(tag, [\"sphinxsidebar\"]):\n            break\n        elif hasclass(tag, [\"section\", \"seealso\"]):\n            currentName = None\n            tag = tag.next_element\n        elif hasclass(tag, ['class', 'classmethod', 'method', 'function', 'data', 'exception', 'attribute', 'staticmethod', 'cmdoption']):\n            currentName = tag.dt.get('id')\n            \n            usage = \"\".join(tag.dt.strings).strip()\n            if currentName and usage[0] == \"@\":\n                currentName = \"@\" + currentName\n            if currentName:\n                create_ref(refs, currentName, module, base_href)\n                refs[currentName].usage = usage[:-1].strip()\n            tag = tag.dd.next_element\n        elif tag.name in ('p', 'pre', 'code', 'li', 'dt', 'dd', 'tr', 'td', 'th'):\n            if (tag.name == 'p' \n                    and len(tag.contents) == 1 \n                    and isinstance(tag.contents[0], bs4.element.Tag)\n                    and tag.contents[0].name==\"strong\"):\n                currentName = None\n            if currentName:\n                if refs[currentName].short == \"\":\n                    text = \"\".join(tag.strings)\n                    if can_be_short(text):\n                        refs[currentName].short = \"\".join(str(x) for x in tag.contents)\n                refs[currentName].full += str(tag)\n            tag = next_tag(tag)\n            if not tag:\n                break\n        else:\n            tag = tag.next_element\n    return refs\n\ndef insert_ref(ref, reference, index):\n    result = reference.insert_one(ref.to_dict())\n    #print(\"insert: \", ref.to_dict())\n    names = [ref.name]\n    for name in names:\n        split_name = name.strip('@ ').split(\".\")\n        if len(split_name) > 3:\n            print(split_name,\" --- \", ref.name)\n        for i in range(len(split_name)):\n            perm = [x.lower() for x in split_name[i:]]\n            subname = \" \".join(sorted(perm))\n            doc = {\n                \"reference_id\" : result.inserted_id,\n                \"name\" : subname,\n                \"relevance\" : 1-i/len(split_name),\n                \"full_name\" : ref.name\n                }\n            #print(\"index: \", doc)\n            index.insert_one(doc)\n    \ndef process_file(filename, refs):\n    print(\"\\n-----------\\n\" + filename)\n    print(\".\", end=\"\", flush=True)\n    parse_file(filename, refs)\n    \ndef finalize(refs):\n    for ref_name, ref in refs.items():\n        if ref.name == \"\":\n            ref.name = ref_name\n        new_subitems = []\n        for item in ref.subitems:\n            new_subitems.append((item[0], utils.first_sentence(refs[item[0]].short)))\n        ref.subitems = new_subitems\n    \nos.chdir(\"../raw_data/python3/docs.python.org\")\n\nclient = MongoClient()\nclient.drop_database(\"python3\")\ndb = client.python3\nreference = db.reference\nindex = db.index\nindex.create_index(\"name\")\n\nrefs = {}\n\nfor directory, subdirs, files in os.walk(\".\"):\n    for f in files:\n        process_file(os.path.join(directory, f), refs)\n#process_file(\"3/library/itertools.html\", refs)\n#process_file(\"3/library/re.html\", refs)\n#process_file(\"3/library/json.html\", refs)\n#process_file(\"3/library/pprint.html\", refs)\n#process_file(\"3/library/unittest.html\", refs)\n#process_file(\"3/library/ctypes.html\", refs)\n\nfinalize(refs)\n\n#print(refs['datetime.datetime'].subitems)\n\nfor ref in refs.values():\n    if ref.name != \"\":\n        #print(ref)\n        #print(\"\\n\")\n        insert_ref(ref, reference, index)\n        \n#------- Testing\n\ndef assert_starts_with(text, start):\n    if not text.startswith(start):\n        print(\"Text `\" + text + \"` does not start with `\" + start + \"`\")\n        raise AssertionError()\n\ndef assert_ends_with(text, start):\n    if not text.endswith(start):\n        print(\"Text `\" + text + \"` does not end with `\" + start + \"`\")\n        raise AssertionError()\n    \ndef find_subitem(ref, subitem):\n    found = None\n    for item in ref.subitems:\n        if item[0] == subitem:\n            assert not found\n            found = item\n    return found\n\ndef check_urllib_parse():\n    assert_starts_with(refs[\"urllib.parse\"].short, \"This module\")\n    item = find_subitem(refs[\"urllib\"], \"urllib.parse\")\n    assert_starts_with(item[1], \"This module\")\n    assert_ends_with(item[1], \"\u201cbase URL.\u201d\")\n    \ndef check_unittest_mock():\n    assert_starts_with(refs[\"unittest.mock\"].short, '<a class=\"reference internal\"')\n    item = find_subitem(refs[\"unittest\"], \"unittest.mock\")\n    assert_starts_with(item[1], '<a class=\"reference internal\"')\n    \ndef check_urllib():\n    assert_ends_with(refs[\"urllib\"].full, \"files</li>\")\n\ndef check_re():\n    assert len(refs[\"re\"].subitems) > 0\n    assert \"re.match\" in refs\n    assert refs[\"re\"].subitems[0][0] == \"re.compile\"\n    assert_ends_with(refs[\"re\"].subitems[0][1], \"described below.\")\n    assert len(refs[\"re\"].subitems[0][1].strip()) > 0\n\ndef check_unittest():\n    assert_ends_with(refs[\"unittest\"].full, \"executing the tests.</dd>\")\n\ndef check_unittest_skip():\n    assert \"@unittest.skip\" in refs\n    assert find_subitem(refs[\"unittest\"], \"@unittest.skip\")\n    \ndef check_utcnow():\n    assert \"datetime.datetime.utcnow\" in refs\n    assert find_subitem(refs[\"datetime.datetime\"], \"datetime.datetime.utcnow\")\n    \ndef check_pprint():\n    assert \"pprint.pprint\" in refs\n    assert_ends_with(refs[\"pprint.pprint\"].full, \"</pre>\")\n    \ndef check_itertools():\n    assert_ends_with(refs['itertools'].full, 'vector2))</span></code>.</p>')\n\ndef check_ctypes():\n    assert \"ctypes.Array._length_\" in refs\n    assert find_subitem(refs[\"ctypes.Array\"], \"ctypes.Array._length_\")\n    \ndef check_paragraph_signs():\n    found = False\n    for ref in refs:\n        if \"\u00b6\" in refs[ref].full:\n            print(\"\u00b6 found in \", ref)\n            found = True\n    assert not found\n    \ncheck_paragraph_signs()\ncheck_ctypes()\ncheck_itertools()\ncheck_re()\ncheck_pprint()\ncheck_utcnow()\ncheck_urllib_parse()\ncheck_unittest_mock()\ncheck_urllib()\ncheck_unittest()\ncheck_unittest_skip()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence = \"Anna went to vote in the election.\"\n\ndef is_palindrome(sentence):\n    clean_sentence = sentence.replace(' ', '').lower()\n    reversed_sentence = clean_sentence[::-1]\n    return clean_sentence == reversed_sentence\n\nprint is_palindrome(sentence) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num):\n    if num > 1:\n        for i in range(2,int(num**0.5)+1):\n            if (num % i) == 0:\n                return False\n    else:\n        return False\n    return True\n\nnum = 47\nif (is_prime(num)):\n    print(num,\"is a prime number\")\nelse:\n    print(num,\"is not a prime number\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_pair(array, target_sum):\n    res_pair = []\n    # Sort the array\n    array.sort()\n    # Set the left and right pointers\n    l, r = 0, len(array) - 1\n    while l != r:\n        if array[l] + array[r] == target_sum:\n            res_pair.append((array[l], array[r]))\n            l += 1\n            r -= 1\n            # If sum is smaller than target sum, increase left\n        elif array[l] + array[r] < target_sum:\n            l += 1\n            # If sum is greater than target sum, decrease right\n        else:\n            r -= 1\n    return res_pair\n \nprint(sum_pair([2, 4, 6, 9], 8)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n\ndef push(self, new_data):\n    new_node = Node(new_data)\n    new_node.next = self.head \n \n    if self.head is not None:\n        self.head.prev = new_node \n \n    self.head = new_node \n \ndef insertAfter(self, prev_node, new_data):\n \n    if prev_node is None:\n        print \"the given previous node must inLinked List.\"\n        return\n \n    new_node = Node(new_data)\n    new_node.next = prev_node.next\n    prev_node.next = new_node\n    new_node.prev = prev_node\n \n    if new_node.next is not None:\n        new_node.next.prev = new_node but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from pybloom_live import BloomFilter\n\n# Common words to store in bloom filter\nwords = [\"the\", \"be\", \"and\", \"of\", \"a\", \"in\", \"to\", \"have\", \"to\", \"it\",\n         \"I\", \"that\", \"for\", \"you\", \"he\", \"with\", \"on\", \"do\", \"say\", \"this\",\n         \"they\", \"is\", \"an\", \"at\", \"but\", \"we\", \"his\", \"from\", \"that\", \"not\",\n         \"by\", \"she\", \"or\", \"as\", \"what\", \"go\", \"their\", \"can\", \"who\", \"get\",\n         \"if\", \"would\", \"her\", \"all\", \"my\", \"make\", \"about\", \"know\"]\n\n# Create a bloom filter with a capacity of 100 words and 0.1% error rate\nbf = BloomFilter(100, 0.1)\n\n# Add the words to the bloom filter\nfor word in words:\n    bf.add(word)\n\n# Check if some words are in the list or not\nprint(\"the\" in bf)\nprint(\"the \" in bf)\nprint(\"hello\" in bf) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\ndata = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfrequency = [10, 8, 12, 6, 15, 7, 5, 2, 6, 9, 3]\n\nplt.hist(data, weights=frequency)\nplt.title(\"Histogram\")\nplt.xlabel(\"Values\")\nplt.ylabel(\"Frequency\")\n\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def array_sum(arr):\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            sum += arr[i][j]\n    return sum\n\narray_sum([[1,2,3],[4,5,6]]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findClosestPoints(points):\n        # initialize the distance\n    closest_distance = float('inf')\n    closest_points = None\n    \n    for i, point1 in enumerate(points):\n        for j, point2 in enumerate(points):\n            if i != j:\n                distance = calculateDistance(points[i], points[j])\n                if distance < closest_distance:\n                    closest_distance = distance\n                    closest_points = [points[i], points[j]]\n                        \n    return closest_points\n            \n# calculate the Euclidean distance between two points\ndef calculateDistance(point1, point2):\n    x1, y1 = point1\n    x2, y2 = point2\n    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n\n\nif __name__ == '__main__':\n    points = [ (-2.2, 12.5), (-8.7, 8.6), (1.1, 10.1), (2.2, 4.2), (-7.3, 5.4), (-3.4, 2.2), (0.4, 9.1) ]\n    closest_points = findClosestPoints(points)\n    print(\"Closest points: {}\".format(closest_points))\n\nOutput: Closest points: [(-2.2, 12.5), (-3.4, 2.2)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class BankAccount:\n    def __init__(self, owner, balance = 0):\n        self.owner = owner\n        self.balance = balance\n        \n    def deposit(self, amount):\n        self.balance += amount\n        print(f'Deposit accepted! Total balance: {self.balance}')\n        \n    def withdraw(self, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n            print(f'Withdrawal accepted! Total balance: {self.balance}')\n        else:\n            print(f'Insufficient funds!')\n            \n    def transfer(self, other, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n            other.balance += amount\n            print(f'Transfer accepted! Total balance: {self.balance}')\n        else:\n            print(f'Insufficient funds!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Matrix:\n def __init__(self, matrix):\n self.matrix = matrix\n\ndef __add__(self, other):\n if len(self.matrix) != len(other.matrix):\n raise ValueError(\"The matrixes must have the same size!\")\n result = [[0 for x in range(len(self.matrix[0]))] for y in range(len(self.matrix))]\n for i in range(len(self.matrix)):\n for j in range(len(self.matrix[i])):\n result[i][j] = self.matrix[i][j] + other.matrix[i][j]\n return result\n\ndef __mul__(self, other):\n if len(self.matrix[0]) != len(other.matrix):\n raise ValueError(\"The matrixes' columns of the first matrix must match the rows of the second matrix!\")\n result = [[0 for x in range(len(other.matrix[0]))] for y in range(len(self.matrix))]\n for i in range(len(self.matrix)):\n for j in range(len(other.matrix[0])):\n for k in range(len(other.matrix)):\n result[i][j] += self.matrix[i][k] * other.matrix[k][j]\n return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longestWord(str):\n    words = str.split()\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    for word in words:\n        if len(word) == max_len:\n            return word but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n\nfor day in days:\n    print(day) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print('Python'[:2]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pygame\n\n# Initialize the game engine\npygame.init()\n\n# Define the colors\nblack = ( 0, 0, 0)\nwhite = ( 255, 255, 255)\n\n# Set the height and width of the screen\nsize = [700, 500]\nscreen = pygame.display.set_mode(size)\n\n# Set the title of the window\npygame.display.set_caption(\"My Game\")\n\n# Create an empty array\nobject_list = []\n\n# Loop until the user clicks the close button\ndone = False\n\n# Used to manage how fast the screen updates\nclock = pygame.time.Clock()\n\n# -------- Main Program Loop -----------\nwhile done == False:\n    # ALL EVENT PROCESSING SHOULD GO BELOW THIS COMMENT\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            done = True\n    # ALL EVENT PROCESSING SHOULD GO ABOVE THIS COMMENT\n\n    # ALL GAME LOGIC SHOULD GO BELOW THIS COMMENT\n\n    # Move the objects in object_list\n    for item in object_list:\n        item.x += item.x_speed\n        item.y += item.y_speed\n\n    # Player Input\n    pressed = pygame.key.get_pressed()\n    if pressed[pygame.K_UP]:\n        player.y_speed = -3\n    if pressed[pygame.K_DOWN]:\n        player.y_speed = 3\n\n    # Check for collisions between the player and objects\n    for item in object_list:\n        if abs(player.x - item.x) < 20 and abs(player.y - item.y) < 20:\n            object_list.remove(item)\n            player.score += 1\n\n    # ALL GAME LOGIC SHOULD GO ABOVE THIS COMMENT\n\n    # ALL CODE TO DRAW SHOULD GO BELOW THIS COMMENT\n\n    # Clear the screen\n    screen.fill(white)\n\n    # Draw the objects in object_list\n    for item in object_list:\n        pygame.draw.rect(screen, (255, 0, 0), [item.x, item.y, 10, 10])\n\n    # Draw the player onto the screen\n    pygame.draw.rect(screen, (0, 0, 255), [player.x, player.y, 10, 10])\n\n    # ALL CODE TO DRAW SHOULD GO ABOVE THIS COMMENT\n\n    # Go ahead and update the screen with what we've drawn\n    pygame.display.flip()\n\n    # Limit frames per second\n    clock.tick(60)\n\n# Be IDLE friendly\npygame.quit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation\n\nmodel = Sequential()\n\nmodel.add(Dense(3, input_shape=(1,)))\nmodel.add(Activation('relu'))\n\nmodel.add(Dense(1))\nmodel.add(Activation('softmax'))\n\nmodel.compile(optimizer='adam', loss='mean_squared_error')\nX = np.array([[0, 0, 5], [1, 0, 5], [0, 1, 5], [0, 0, 6]])\ny = np.array([[1], [0], [0], [0]])\nmodel.fit(X, y, epochs=1000)\n\ninp = np.array([[0, 0, 5]])\nout = model.predict(inp)\nprint(out) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request\napp = Flask(__name__)\n \n@app.route('/add', methods=['POST'])\ndef add():\n    num1 = request.json['num1']\n    num2 = request.json['num2']\n    sum = num1 + num2\n    return {'sum': sum}\n\nif __name__ == '__main__':\n    app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport json\n\n# Set the API location URL\nurl = \"http://api.openweathermap.org/data/2.5/weather?q=<location>\"\n\n# Main function\ndef get_weather(url):\n    # Send the GET request to the API\n    r = requests.get(url)\n\n    # Convert the response to JSON format\n    data = json.loads(r.text)\n\n    # Extract only the relevant data\n    main = data[\"main\"]\n    temp = main[\"temp\"]\n    temp_min = main[\"temp_min\"]\n    temp_max = main[\"temp_max\"]\n\n    # Return the data\n    return temp, temp_min, temp_max\n\n# Print the data\ntemp, temp_min, temp_max = get_weather(url)\nprint(\"Current temperature: {}\\nMin temperature: {}\\nMax temperature: {}\".format(temp, temp_min, temp_max)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n\tif n<0: \n\t\tprint(\"Incorrect input\") \n\telif n==1: \n\t\treturn 0\n\telif n==2: \n\t\treturn 1\n\telse: \n\t\treturn Fibonacci(n-1)+Fibonacci(n-2) \n\n# Driver function \nprint(Fibonacci(9)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.model_selection import KFold\n\n# Create a dataset\nX = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]])\ny = np.array([1, 2, 3, 4, 5, 6])\n\n# Create the Cross-Validation object\nkf = KFold(n_splits=5)\n\n# Iterate through the folds\nfor train_index, test_index in kf.split(X):\n    print(\"Train Index: \", train_index, \"\\n\")\n    print(\"Test Index: \", test_index)\n\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import cv2 \nimport numpy as np\n\n#Load the model\nmodel = cv2.dnn.readNetFromCaffe(\"detector.prototxt\", \"detector.caffemodel\")\n\n# Read the image\nimg = cv2.imread('Labradoodle.jpg')\n\n# Create a blob from the image\nblob = cv2.dnn.blobFromImage(img, 1, (300, 300), (103.93, 116.77, 123.68))\n\n# Pass the blob through the model\nmodel.setInput(blob)\nprediction = model.forward()\n\n# Get the class label with highest probability\ni = np.argmax(prediction[0])\n\n# Get the breed name corresponding to the highest probability\nbreed = classes[i]\n\n# Label the image with the breed name\ncv2.putText(img, breed, (10, 30), cv2.FONT_HERSHEY_PLAIN, 2, (255, 0, 0))\n\n# Show the image\ncv2.imshow('img', img)\ncv2.waitKey(0) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [\"hello world\", \"how are you\", \"I am fine\"]\n\nfiltered_list = [i for i in my_list if len(i.split())>1]\n\nprint(filtered_list)\n\n# Output: ['hello world', 'how are you', 'I am fine'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove(arr, index): \n  \n      # If the array is empty or index is not in array range \n      if len(arr) == 0 or index >= len(arr): \n          return arr \n  \n      # Remove the element from the array \n      tempArr = arr[:index] + arr[index+1:] \n              \n      return tempArr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseString(s):\n    # define a dictionary \n    revDict = {}\n    # Iterate through the characters in the string\n    for i in range(len(s)):\n      # store the character as the key and its index as the associated value\n      revDict[s[i]] = i\n    # sort the dictionary by the values\n    revDict = sorted(revDict.items(), key = \n             lambda kv:(kv[1], kv[0])) \n    # Join the elements to form a reversed string\n    reversedString =  \"\".join(item[0] for item in revDict) \n\n    return reversedString but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #\n# rescue.py - anaconda rescue mode setup\n#\n# Copyright (C) 2001, 2002, 2003, 2004  Red Hat, Inc.  All rights reserved.\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n#\n# Author(s): Mike Fulbright <msf@redhat.com>\n#            Jeremy Katz <katzj@redhat.com>\n#\nimport sys\nimport os\nfrom pyanaconda import iutil\nimport shutil\nimport time\nimport re\nimport subprocess\n\nfrom snack import ButtonChoiceWindow, ListboxChoiceWindow,SnackScreen\n\nfrom pyanaconda.constants import ANACONDA_CLEANUP\nfrom pyanaconda.constants_text import TEXT_OK_BUTTON, TEXT_NO_BUTTON, TEXT_YES_BUTTON\nfrom pyanaconda.text import WaitWindow, OkCancelWindow, ProgressWindow, PassphraseEntryWindow\nfrom pyanaconda.flags import flags\nfrom pyanaconda.installinterfacebase import InstallInterfaceBase\nfrom pyanaconda.i18n import _\n\nfrom blivet import mountExistingSystem\nfrom blivet.errors import StorageError, DirtyFSError\nfrom blivet.devices import LUKSDevice\n\nfrom pykickstart.constants import KS_REBOOT, KS_SHUTDOWN\n\nimport meh.ui.text\n\nimport logging\nlog = logging.getLogger(\"anaconda\")\n\nclass RescueInterface(InstallInterfaceBase):\n    def waitWindow(self, title, text):\n        return WaitWindow(self.screen, title, text)\n\n    def progressWindow(self, title, text, total, updpct = 0.05, pulse = False):\n        return ProgressWindow(self.screen, title, text, total, updpct, pulse)\n\n    def detailedMessageWindow(self, title, text, longText=None, ty=\"ok\",\n                              default=None, custom_icon=None,\n                              custom_buttons=None, expanded=False):\n        return self.messageWindow(title, text, ty, default, custom_icon,\n                                  custom_buttons)\n\n    def messageWindow(self, title, text, ty = \"ok\", default = None,\n                      custom_icon=None, custom_buttons=None):\n        if custom_buttons is None:\n            custom_buttons = []\n\n        if ty == \"ok\":\n            ButtonChoiceWindow(self.screen, title, text,\n                               buttons=[TEXT_OK_BUTTON])\n        elif ty == \"yesno\":\n            if default and default == \"no\":\n                btnlist = [TEXT_NO_BUTTON, TEXT_YES_BUTTON]\n            else:\n                btnlist = [TEXT_YES_BUTTON, TEXT_NO_BUTTON]\n            rc = ButtonChoiceWindow(self.screen, title, text,\n                                    buttons=btnlist)\n            if rc == \"yes\":\n                return 1\n            else:\n                return 0\n        elif ty == \"custom\":\n            tmpbut = []\n            for but in custom_buttons:\n                tmpbut.append(but.replace(\"_\",\"\"))\n\n            rc = ButtonChoiceWindow(self.screen, title, text, width=60,\n                                    buttons=tmpbut)\n\n            idx = 0\n            for b in tmpbut:\n                if b.lower() == rc:\n                    return idx\n                idx = idx + 1\n            return 0\n        else:\n            return OkCancelWindow(self.screen, title, text)\n\n    def passphraseEntryWindow(self, device):\n        w = PassphraseEntryWindow(self.screen, device)\n        passphrase = w.run()\n        w.pop()\n        return passphrase\n\n    @property\n    def meh_interface(self):\n        return self._meh_interface\n\n    @property\n    def tty_num(self):\n        return 1\n\n    def shutdown (self):\n        self.screen.finish()\n\n    def suspend(self):\n        pass\n\n    def resume(self):\n        pass\n\n    def __init__(self):\n        InstallInterfaceBase.__init__(self)\n        self.screen = SnackScreen()\n        self._meh_interface = meh.ui.text.TextIntf()\n\ndef makeFStab(instPath = \"\"):\n    if os.access(\"/proc/mounts\", os.R_OK):\n        f = open(\"/proc/mounts\", \"r\")\n        buf = f.read()\n        f.close()\n    else:\n        buf = \"\"\n\n    try:\n        f = open(instPath + \"/etc/fstab\", \"a\")\n        if buf:\n            f.write(buf)\n        f.close()\n    except IOError as e:\n        log.info(\"failed to write /etc/fstab: %s\", e)\n\n# make sure they have a resolv.conf in the chroot\ndef makeResolvConf(instPath):\n    if flags.imageInstall:\n        return\n\n    if not os.access(\"/etc/resolv.conf\", os.R_OK):\n        return\n\n    if os.access(\"%s/etc/resolv.conf\" %(instPath,), os.R_OK):\n        f = open(\"%s/etc/resolv.conf\" %(instPath,), \"r\")\n        buf = f.read()\n        f.close()\n    else:\n        buf = \"\"\n\n    # already have a nameserver line, don't worry about it\n    if buf.find(\"nameserver\") != -1:\n        return\n\n    f = open(\"/etc/resolv.conf\", \"r\")\n    buf = f.read()\n    f.close()\n\n    # no nameserver, we can't do much about it\n    if buf.find(\"nameserver\") == -1:\n        return\n\n    shutil.copyfile(\"%s/etc/resolv.conf\" %(instPath,),\n                    \"%s/etc/resolv.conf.bak\" %(instPath,))\n    f = open(\"%s/etc/resolv.conf\" %(instPath,), \"w+\")\n    f.write(buf)\n    f.close()\n\ndef runShell(screen = None, msg=\"\"):\n    if screen:\n        screen.suspend()\n\n    print\n    if msg:\n        print (msg)\n\n    if flags.imageInstall:\n        print(_(\"Run %s to unmount the system when you are finished.\")\n              % ANACONDA_CLEANUP)\n    else:\n        print(_(\"When finished please exit from the shell and your \"\n                \"system will reboot.\"))\n    print\n\n    proc = None\n\n    if os.path.exists(\"/usr/bin/firstaidkit-qs\"):\n        proc = subprocess.Popen([\"/usr/bin/firstaidkit-qs\"])\n        proc.wait()\n\n    if proc is None or proc.returncode!=0:\n        if os.path.exists(\"/bin/bash\"):\n            iutil.execConsole()\n        else:\n            print(_(\"Unable to find /bin/sh to execute!  Not starting shell\"))\n            time.sleep(5)\n\n    if screen:\n        screen.finish()\n\ndef _exception_handler_wrapper(orig_except_handler, screen, *args):\n    \"\"\"\n    Helper function that wraps the exception handler with snack shutdown.\n\n    :param orig_except_handler: original exception handler that should be run\n                                after the wrapping changes are done\n    :type orig_except_handler: exception handler as can be set as sys.excepthook\n    :param screen: snack screen that should be shut down before further actions\n    :type screen: snack screen\n\n    \"\"\"\n\n    screen.finish()\n    return orig_except_handler(*args)\n\ndef _unlock_devices(intf, storage):\n    try_passphrase = None\n    for device in storage.devices:\n        if device.format.type == \"luks\":\n            skip = False\n            unlocked = False\n            while not (skip or unlocked):\n                if try_passphrase is None:\n                    passphrase = intf.passphraseEntryWindow(device.name)\n                else:\n                    passphrase = try_passphrase\n\n                if passphrase is None:\n                    # canceled\n                    skip = True\n                else:\n                    device.format.passphrase = passphrase\n                    try:\n                        device.setup()\n                        device.format.setup()\n                        luks_dev = LUKSDevice(device.format.mapName,\n                                              parents=[device],\n                                              exists=True)\n                        storage.devicetree._addDevice(luks_dev)\n                        storage.devicetree.populate()\n                        unlocked = True\n                        # try to use the same passhprase for other devices\n                        try_passphrase = passphrase\n                    except StorageError as serr:\n                        log.error(\"Failed to unlock %s: %s\", device.name, serr)\n                        device.teardown(recursive=True)\n                        device.format.passphrase = None\n                        try_passphrase = None\n\ndef doRescue(intf, rescue_mount, ksdata):\n    import blivet\n\n    # XXX: hook the exception handler wrapper that turns off snack first\n    orig_hook = sys.excepthook\n    sys.excepthook = lambda ty, val, tb: _exception_handler_wrapper(orig_hook,\n                                                                    intf.screen,\n                                                                    ty, val, tb)\n\n    for f in [ \"services\", \"protocols\", \"group\", \"joe\", \"man.config\",\n               \"nsswitch.conf\", \"selinux\", \"mke2fs.conf\" ]:\n        try:\n            os.symlink('/mnt/runtime/etc/' + f, '/etc/' + f)\n        except OSError:\n            pass\n\n    # Early shell access with no disk access attempts\n    if not rescue_mount:\n        # the %post should be responsible for mounting all needed file systems\n        # NOTE: 1st script must be bash or simple python as nothing else might be available in the rescue image\n        if flags.automatedInstall and ksdata.scripts:\n            from pyanaconda.kickstart import runPostScripts\n            runPostScripts(ksdata.scripts)\n        else:\n            runShell()\n\n        sys.exit(0)\n\n    if flags.automatedInstall:\n        readOnly = ksdata.rescue.romount\n    else:\n        # prompt to see if we should try and find root filesystem and mount\n        # everything in /etc/fstab on that root\n        while True:\n            rc = ButtonChoiceWindow(intf.screen, _(\"Rescue\"),\n                _(\"The rescue environment will now attempt to find your \"\n                  \"Linux installation and mount it under the directory \"\n                  \"%s.  You can then make any changes required to your \"\n                  \"system.  If you want to proceed with this step choose \"\n                  \"'Continue'.  You can also choose to mount your file systems \"\n                  \"read-only instead of read-write by choosing 'Read-Only'.  \"\n                  \"\\n\\n\"\n                  \"If for some reason this process fails you can choose 'Skip' \"\n                  \"and this step will be skipped and you will go directly to a \"\n                  \"command shell.\\n\\n\") % (iutil.getSysroot(),),\n                  [_(\"Continue\"), _(\"Read-Only\"), _(\"Skip\")] )\n\n            if rc == _(\"Skip\").lower():\n                runShell(intf.screen)\n                sys.exit(0)\n            else:\n                readOnly = rc == _(\"Read-Only\").lower()\n\n            break\n\n    sto = blivet.Blivet(ksdata=ksdata)\n    blivet.storageInitialize(sto, ksdata, [])\n    _unlock_devices(intf, sto)\n    roots = blivet.findExistingInstallations(sto.devicetree)\n\n    if not roots:\n        root = None\n    elif len(roots) == 1:\n        root = roots[0]\n    else:\n        height = min (len (roots), 12)\n        if height == 12:\n            scroll = 1\n        else:\n            scroll = 0\n\n        lst = []\n        for root in roots:\n            lst.append(\"%s\" % root.name)\n\n        (button, choice) = \\\n            ListboxChoiceWindow(intf.screen, _(\"System to Rescue\"),\n                                _(\"Which device holds the root partition \"\n                                  \"of your installation?\"), lst,\n                                [ _(\"OK\"), _(\"Exit\") ], width = 30,\n                                scroll = scroll, height = height,\n                                help = \"multipleroot\")\n\n        if button == _(\"Exit\").lower():\n            root = None\n        else:\n            root = roots[choice]\n\n    rootmounted = False\n\n    if root:\n        try:\n            if not flags.imageInstall:\n                msg = _(\"The system will reboot automatically when you exit \"\n                        \"from the shell.\")\n            else:\n                msg = _(\"Run %s to unmount the system \"\n                        \"when you are finished.\") % ANACONDA_CLEANUP\n\n            try:\n                mountExistingSystem(sto.fsset, root.device,\n                                    allowDirty = True,\n                                    readOnly = readOnly)\n            except DirtyFSError:\n                if flags.automatedInstall:\n                    log.error(\"System had dirty file systems which you chose not to mount\")\n                else:\n                    ButtonChoiceWindow(intf.screen, _(\"Rescue\"),\n                        _(\"Your system had dirty file systems which you chose not \"\n                          \"to mount.  Press return to get a shell from which \"\n                          \"you can fsck and mount your partitions. %s\") % msg,\n                        [_(\"OK\")], width = 50)\n                rootmounted = False\n            else:\n                if flags.automatedInstall:\n                    log.info(\"System has been mounted under: %s\", iutil.getSysroot())\n                else:\n                    ButtonChoiceWindow(intf.screen, _(\"Rescue\"),\n                       _(\"Your system has been mounted under %(rootPath)s.\\n\\n\"\n                         \"Press <return> to get a shell. If you would like to \"\n                         \"make your system the root environment, run the command:\\n\\n\"\n                         \"\\tchroot %(rootPath)s\\n\\n%(msg)s\") %\n                                       {'rootPath': iutil.getSysroot(),\n                                        'msg': msg},\n                                       [_(\"OK\")] )\n                rootmounted = True\n\n                # now turn on swap\n                if not readOnly:\n                    try:\n                        sto.turnOnSwap()\n                    except StorageError:\n                        log.error(\"Error enabling swap\")\n\n                # and selinux too\n                if flags.selinux:\n                    # we have to catch the possible exception\n                    # because we support read-only mounting\n                    try:\n                        fd = open(\"%s/.autorelabel\" % iutil.getSysroot(), \"w+\")\n                        fd.close()\n                    except IOError:\n                        log.warning(\"cannot touch /.autorelabel\")\n\n                # set a library path to use mounted fs\n                libdirs = os.environ.get(\"LD_LIBRARY_PATH\", \"\").split(\":\")\n                mounted = map(lambda dir: \"/mnt/sysimage%s\" % dir, libdirs)\n                os.environ[\"LD_LIBRARY_PATH\"] = \":\".join(libdirs + mounted)\n\n                # find groff data dir\n                gversion = None\n                try:\n                    glst = os.listdir(\"/mnt/sysimage/usr/share/groff\")\n                except OSError:\n                    pass\n                else:\n                    # find a directory which is a numeral, its where\n                    # data files are\n                    for gdir in glst:\n                        if re.match(r'\\d[.\\d]+\\d$', gdir):\n                            gversion = gdir\n                            break\n\n                if gversion is not None:\n                    gpath = \"/mnt/sysimage/usr/share/groff/\"+gversion\n                    os.environ[\"GROFF_FONT_PATH\"] = gpath + '/font'\n                    os.environ[\"GROFF_TMAC_PATH\"] = \"%s:/mnt/sysimage/usr/share/groff/site-tmac\" % (gpath + '/tmac',)\n\n                # do we have bash?\n                try:\n                    if os.access(\"/usr/bin/bash\", os.R_OK):\n                        os.symlink (\"/usr/bin/bash\", \"/bin/bash\")\n                except OSError:\n                    pass\n        except (ValueError, LookupError, SyntaxError, NameError):\n            raise\n        except Exception as e:    # pylint: disable=W0703\n            log.error(\"doRescue caught exception: %s\", e)\n            if flags.automatedInstall:\n                log.error(\"An error occurred trying to mount some or all of your system\")\n            else:\n                if not flags.imageInstall:\n                    msg = _(\"The system will reboot automatically when you \"\n                            \"exit from the shell.\")\n                else:\n                    msg = _(\"Run %s to unmount the system \"\n                            \"when you are finished.\") % ANACONDA_CLEANUP\n\n                ButtonChoiceWindow(intf.screen, _(\"Rescue\"),\n                    _(\"An error occurred trying to mount some or all of your \"\n                      \"system. Some of it may be mounted under %s.\\n\\n\"\n                      \"Press <return> to get a shell.\") % iutil.getSysroot() + msg,\n                      [_(\"OK\")] )\n    else:\n        if flags.automatedInstall and ksdata.reboot.action in [KS_REBOOT, KS_SHUTDOWN]:\n            log.info(\"No Linux partitions found\")\n            intf.screen.finish()\n            print(_(\"You don't have any Linux partitions.  Rebooting.\\n\"))\n            sys.exit(0)\n        else:\n            if not flags.imageInstall:\n                msg = _(\" The system will reboot automatically when you exit \"\n                        \"from the shell.\")\n            else:\n                msg = \"\"\n            ButtonChoiceWindow(intf.screen, _(\"Rescue Mode\"),\n                               _(\"You don't have any Linux partitions. Press \"\n                                 \"return to get a shell.%s\") % msg,\n                               [ _(\"OK\") ], width = 50)\n\n    msgStr = \"\"\n\n    if rootmounted and not readOnly:\n        sto.makeMtab()\n        try:\n            makeResolvConf(iutil.getSysroot())\n        except (OSError, IOError) as e:\n            log.error(\"error making a resolv.conf: %s\", e)\n        msgStr = _(\"Your system is mounted under the %s directory.\") % iutil.getSysroot()\n        ButtonChoiceWindow(intf.screen, _(\"Rescue\"), msgStr, [_(\"OK\")] )\n\n    # we do not need ncurses anymore, shut them down\n    intf.shutdown()\n\n    #create /etc/fstab in ramdisk, so it is easier to work with RO mounted filesystems\n    makeFStab()\n\n    # run %post if we've mounted everything\n    if rootmounted and not readOnly and flags.automatedInstall:\n        from pyanaconda.kickstart import runPostScripts\n        runPostScripts(ksdata.scripts)\n\n    # start shell if reboot wasn't requested\n    if not flags.automatedInstall or not ksdata.reboot.action in [KS_REBOOT, KS_SHUTDOWN]:\n        runShell(msg=msgStr)\n\n    sys.exit(0)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to calculate tax\ndef calculate_tax(price, tax_rate):\n    # Calculate the tax\n    tax = price * tax_rate\n    # Return the tax\n    return tax\n\n# Demonstration\nprice = 100\ntax_rate = 0.15\ntax = calculate_tax(price, tax_rate)\nprint(\"Tax of the item:\", tax) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://example.com\"\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ntext = soup.get_text()\nprint(text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Get the numbers\ntwo_numbers = [4, 7]\n\n# Compute the sum\nresult = two_numbers[0] + two_numbers[1]\n\n# Check the correctness of the result\nif result != 11:\n    print(\"The result is wrong!\")\nelse:\n    print(\"The result is correct!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def rank(nums): \n    sortedNums = sorted(nums, reverse = True) \n    for i in range(len(sortedNums)): \n        if sortedNums[i] == nums[i]: \n            print (i + 1, end = \" \") \n  \n# Driver code \nnums = [3, 8, 2, 9, 5] \nrank(nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\"\"\"Updates JIRA release notes when deploying to an environment.\n\nThis requires the\n    JIRA_API_USER_PASSWORD and\n    JIRA_API_USER_NAME\nenvironment variables to be set, and flags for version and instance to be provided.\n\"\"\"\n\nimport logging\nimport os\nimport sys\n\nimport jira\n\nfrom rdr_service.main_util import configure_logging, get_parser\n\n_JIRA_INSTANCE_URL = \"https://precisionmedicineinitiative.atlassian.net/\"\n# Release tickets are moved from our usual project, DA, to the PD project\n# for change approval, so for stable/prod releases look for tickets there.\n_JIRA_PROJECT_ID = \"PD\"\n\n\ndef _connect_to_jira(jira_username, jira_password):\n    return jira.JIRA(_JIRA_INSTANCE_URL, basic_auth=(jira_username, jira_password))\n\n\ndef main(args):\n    jira_username = os.getenv(\"JIRA_API_USER_NAME\")\n    jira_password = os.getenv(\"JIRA_API_USER_PASSWORD\")\n    if not jira_username or not jira_password:\n        logging.error(\"JIRA_API_USER_NAME and JIRA_API_USER_PASSWORD variables must be set. Exiting.\")\n        sys.exit(-1)\n    jira_connection = _connect_to_jira(jira_username, jira_password)\n    summary = \"Release tracker for %s\" % args.version\n    issues = jira_connection.search_issues(\n        'project = \"%s\" AND summary ~ \"%s\" ORDER BY created DESC' % (_JIRA_PROJECT_ID, summary)\n    )\n    if issues:\n        if len(issues) > 1:\n            logging.warning(\n                \"Found multiple release tracker matches, using newest. %s\",\n                \", \".join(\"[%s] %s\" % (issue.key, issue.fields().summary) for issue in issues),\n            )\n        issue = issues[0]\n        jira_connection.add_comment(issue, args.comment)\n        logging.info(\"Updated issue %s\", issue.key)\n        sys.exit(0)\n    else:\n        logging.error(\"No issue found with summary %r in project %r; exiting.\", summary, _JIRA_PROJECT_ID)\n        sys.exit(-1)\n\n\nif __name__ == \"__main__\":\n    configure_logging()\n    parser = get_parser()\n    parser.add_argument(\"--version\", help=\"The version of the app being deployed (e.g. v0-1-rc21\", required=True)\n    parser.add_argument(\"--comment\", type=str, help=\"The comment to add to the issue\", required=True)\n    main(parser.parse_args())\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndata = {\n    \"name\": \"John Doe\",\n    \"age\": 45,\n    \"city\": \"New York\"\n}\n\ndata_parsed = json.loads(json.dumps(data))\n\nname = data_parsed['name']\nage = data_parsed['age']\ncity = data_parsed['city'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def squared_sum(a, b):\n    \"\"\"\n    Computes the sum of the squares of two given numbers\n    \"\"\"\n    return a**2 + b**2\n\nif __name__ == '__main__':\n    a = 3\n    b = 4\n    result = squared_sum(a, b)\n    print('The sum of {} and {} squares is: {}'.format(a, b, result)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n\n# Driver Program \n\nprint(Fibonacci(9)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# URL to be scraped\nurl = 'www.example.com'\n\n# Scrape the URL and retrieve HTML\nr = requests.get(url)\nhtml_doc = r.text\n\n# Parse the HTML\nsoup = BeautifulSoup(html_doc)\n\n# Search for the occurrence of \"data science\"\nkeyword = 'data science'\nkeyword_count = soup.find_all(string=keyword).__len__()\n\n# Print out the total number of their occurrences\nprint(\"The keyword \" + keyword + \" occurs \" + str(keyword_count) + \" times.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\n\ndef optimize_performance(function):\n    start_time = time.time()\n    function\n    end_time = time.time()\n    execution_time = end_time - start_time\n    print(\"Function took\", execution_time, \"seconds to execute.\")\n\n    # perform optimizations\n    optimized_function = function\n    start_time = time.time()\n    optimized_function\n    end_time = time.time()\n    execution_time = end_time-start_time\n    print(\"Optimized Function took\", execution_time, \"seconds to execute\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_words(str):\n words = str.split(' ')\n words = set(words)\n words = list(words)\n words.sort()\n return words but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def caesar_cipher(message, shift):\n encrypted_message = \"\"\n for char in message:\n charIndex = ord(char)\n encryptedIndex = charIndex + shift\n if encryptedIndex <= 255:\n encrypted_message += chr(encryptedIndex)\n else:\n encrypted_message += chr(encryptedIndex - 255)\n return encrypted_message\n\nprint(caesar_cipher(\"Hello World\", 5)) # prints Mjqqt Btwqi but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def area_triangle(a, b, c):\n\ts = (a + b + c)/2\n\n\tarea = math.sqrt(s*(s-a)*(s-b)*(s-c))\n\treturn area\n\narea = area_triangle(3, 4, 5)\nprint(\"The area of the triangle is: {}\".format(area)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to get the maximum value (given weights and values)\ndef knapsack(weights, values, capacity):\n    if len(weights) == 0 or capacity == 0:\n        return 0\n\n    n = len(weights)\n\n    # create a matrix (items)x(capacity) filled with 0\n    memo = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)]\n\n    # loop through the items\n    for i in range(1, n + 1):\n        # loop through the capacities\n        for j in range(1, capacity + 1):\n            if j - weights[i - 1] < 0:  # if the current capacity cannot fit in the item's weight\n                # copy the value from the cell above\n                memo[i][j] = memo[i - 1][j]\n            else:\n                # the maximum of either selecting the item or not\n                memo[i][j] = max(memo[i - 1][j], memo[i - 1][j - weights[i - 1]] + values[i - 1])\n\n    return memo[n][capacity]\n\nif __name__ == '__main__':\n    weights = [2, 3, 4, 5]\n    values = [50, 60, 70, 80]\n    capacity = 5\n\n    knapsack_val = knapsack(weights, values, capacity)\n    print(knapsack_val) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_number(arr):\n    arr.sort() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nwildlife_names = ['Gorilla', 'Tiger', 'Elephant', 'Zebra', 'Lion', 'Crocodile', 'Lemur', 'Hippopotamus', 'Giraffe', 'Rhinoceros', 'Jaguar', 'Gazelle', 'Cheetah', 'Hyena', 'Snake', 'Wildebeest', 'Kangaroo', 'Aardvark', 'Tapir', 'Badger', 'Wild Boar', 'Beaver', 'Vole', 'Weasel', 'Marten', 'Pangolin', 'Mongoose', 'Gibbon', 'Orangutan', 'Baboon', 'Chimpanzee', 'Gorilla', 'Tiger', 'Elephant', 'Zebra', 'Lion', 'Crocodile', 'Lemur', 'Hippopotamus', 'Giraffe', 'Rhinoceros', 'Jaguar', 'Gazelle', 'Cheetah', 'Hyena', 'Snake', 'Wildebeest', 'Kangaroo', 'Aardvark', 'Tapir', 'Badger', 'Wild Boar', 'Beaver', 'Vole', 'Weasel', 'Marten', 'Pangolin', 'Mongoose', 'Gibbon', 'Orangutan', 'Baboon', 'Chimpanzee', 'Wolf', 'Fox', 'Hare', 'Squirrel', 'Badger', 'Raccoon', 'Skunk', 'Mink', 'Otter', 'Mongoose', 'Wildcat', 'Fisher', ' Antarctic Fur Seal', 'Hooded Seal', 'Walrus', 'Polar Bear', 'Hawk', 'Owl', 'Eagle', 'Falcon', 'Vulture', 'Heron', 'Bald Eagle', 'Snowy Owl', 'Goose', 'Swallow', 'Flamingo', 'Arctic Tern', 'Ostrich', 'Emu', 'Pelican', 'Common Buzzard', 'Hen Harrier', 'Kestrel', 'Peregrine Falcon', 'Pheasant', 'Partridge', 'Quail', 'Sparrow', 'Pigeon', 'Starling', 'Cuckoo', 'Woodpecker', 'Crow', 'Raven', 'Magpie', 'Jay', 'Albatross', 'Seagull', 'Parrot']\n\nnames = []\n\nfor i in range(100):\n name = random.choice(wildlife_names)\n names.append(name)\n\nprint(names) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isSorted(arr):\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\nprint(isSorted([3, 5, 7, 9, 16, 19])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def index_min(arr):\n    min_index = 0\n    for i in range(1,len(arr)):\n        if arr[i] < arr[min_index]:\n            min_index = i\n    return min_index but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: nums = [1, 4, 9, 16] \nfor num in nums:\n  print(num ** 0.5) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Define function\ndef replace_substring(string, substring, replacement):\n    return string.replace(substring, replacement)\n\t\n# Call function\nprint(replace_substring(\"hello world\", \"world\", \"Earth\")) \n# Output hello Earth but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef check_palindrome(num):\n    \"\"\"Function to check if a number is a palindrome. \n    \"\"\"\n    num_str = str(num)\n    rev_str = num_str[::-1]\n    if num_str == rev_str:\n        return True\n    else:\n        return False\n\n# Generate a random 6-digit number\nnum = random.randint(100000, 999999)\n\n# Check if it is a palindrome\nif check_palindrome(num):\n    print(f\"The number {num} is a palindrome\")\nelse:\n    print(f\"The number {num} is not a palindrome\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \nimport sqlite3\n\n# fetch data from api and store in list\nurl = 'http://api.example.com/resources'\nresponse = requests.get(url)\ndata = response.json()\n\n# initiate database connection\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\n\n# create table in database\nc.execute(\"CREATE TABLE IF NOT EXISTS resources (id INTEGER, title TEXT);\")\n\n# insert data into database\nfor entry in data:\n    c.execute(\"INSERT INTO resources VALUES (?, ?)\", (entry['id'], entry['title']))\n\n# commit changes and close connection\nconn.commit()\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_vowels(alphanumeric_string):\n  '''This function takes a string containing only alphanumeric characters and returns a string with all the vowels removed.'''\n  vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  s = \"\"\n  for char in alphanumeric_string:\n      if char not in vowels:\n          s += char\n  return s\n\nalphanumeric_string=\"AaBbCc0d1e2f3g4h5i6j7k8l9m\"\nprint(remove_vowels(alphanumeric_string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(0, n):\n    for j in range(i + 1, n):\n        # Do some processing but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_dictionary_keys(d):\n  return {k: d[k] for k in sorted(d, reverse=True)} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 11):\n    print(str(i**2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiplyListByNumber(list, number):\n  return [element*number for element in list] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Customer:\n    def __init__(self, name, account_number, balance):\n        self.name = name\n        self.account_number = account_number\n        self.balance = balance\n    \n    def get_balance(self):\n        return self.balance\n    \n    def deposit(self, amount):\n        self.balance += amount\n    \n    def withdrawal(self, amount):\n        self.balance -= amount but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n def __init__(self, dataval=None):\n   self.dataval = dataval\n   self.nextval = None\n\nclass SLinkedList:\n def __init__(self):\n  self.headval = None\n\n# Function to add node\n def addNode(self, dataval):\n  NewNode = Node(dataval)\n  if self.headval is None:\n   self.headval = NewNode\n   return\n  laste = self.headval\n  while(laste.nextval):\n   laste = laste.nextval\n  laste.nextval=NewNode\n\n# Function to print the linked list\n def listprint(self):\n  printval = self.headval\n  while printval is not None:\n   print (printval.dataval),\n   printval = printval.nextval\n\n# Function to delete a node\n def DeleteNode(self, dataval):\n  deletenode = self.headval\n  if deletenode.dataval == dataval:\n   self.headval = deletenode.nextval\n   deletenode = None\n   return\n\n  prevnode = None\n  while deletenode.dataval != dataval:\n   prevnode = deletenode\n   deletenode = deletenode.nextval\n\n  prevnode.nextval = deletenode.nextval\n  deletenode = None but is not the same. just give one example and only return the code."}
