{"prompt": "make some code that functions the same as the following code: def count_unique_elements(list): \n \n    # initialize a set \n    unique_set = set() \n  \n    # traverse for all elements \n    for x in list: \n        # check if exists in set or not \n        if x not in unique_set: \n            unique_set.add(x) \n  \n    # print length of set \n    print(\"The number of unique elements is:\" + str(len(unique_set))) \n\ncount_unique_elements(list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# Load the dataset with memory optimization\ndata = pd.read_csv('dataset.csv', low_memory=True)\n\n# Optimize the data to reduce the size \ndata = data.drop_duplicates(keep=False)\n\n# Optimize the data to increase the performance \ndata = data.apply(pd.to_numeric, errors='coerce') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pig_latin(word):\n vowels = \"aeiou\"\n if word[0] in vowels: \n return word + 'way'\n else:\n return word[1:] + word[0] + 'ay'\n\npig_latin_word = pig_latin(word)\nprint(pig_latin_word) # Output: ythonPay but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\nclass Node():\n    \"\"\"A node class for A* Pathfinding\"\"\"\n\n    def __init__(self, parent=None, position=None):\n        self.parent = parent\n        self.position = position\n\n        self.g = 0\n        self.h = 0\n        self.f = 0\n\n    def __eq__(self, other):\n        return self.position == other.position\n\n\ndef astar(maze, start, end):\n    \"\"\"Returns a list of tuples as a path from the given start to the given end in the given maze\"\"\"\n\n    # Create start and end node\n    start_node = Node(None, start)\n    start_node.g = start_node.h = start_node.f = 0\n    end_node = Node(None, end)\n    end_node.g = end_node.h = end_node.f = 0\n\n    # Initialize both open and closed list\n    open_list = []\n    closed_list = []\n\n    # Add the start node\n    open_list.append(start_node)\n\n    # Loop until you find the end\n    while len(open_list) > 0:\n\n        # Get the current node\n        current_node = open_list[0]\n        current_index = 0\n        for index, item in enumerate(open_list):\n            if item.f < current_node.f:\n                current_node = item\n                current_index = index\n\n        # Pop current off open list, add to closed list\n        open_list.pop(current_index)\n        closed_list.append(current_node)\n\n        # Found the goal\n        if current_node == end_node:\n            path = []\n            current = current_node\n            while current is not None:\n                path.append(current.position)\n                current = current.parent\n            return path[::-1] # Return reversed path\n\n        # Generate children\n        children = []\n        for new_position in [(0, -1), (0, 1), (-1, 0), (1, 0), (-1, -1), (-1, 1), (1, -1), (1, 1)]: # Adjacent squares\n\n            # Get node position\n            node_position = (current_node.position[0] + new_position[0], current_node.position[1] + new_position[1])\n\n            # Make sure within range\n            if node_position[0] > (len(maze) - 1) or node_position[0] < 0 or node_position[1] > (len(maze[len(maze)-1]) -1) or node_position[1] < 0:\n                continue\n\n            # Make sure walkable terrain\n            if maze[node_position[0]][node_position[1]] != 0:\n                continue\n\n            # Create new node\n            new_node = Node(current_node, node_position)\n\n            # Append\n            children.append(new_node)\n\n        # Loop through children\n        for child in children:\n\n            # Child is on the closed list\n            for closed_child in closed_list:\n                if child == closed_child:\n                    continue\n\n            # Create the f, g, and h values\n            child.g = current_node.g + 1\n            child.h = ((child.position[0] - end_node.position[0]) ** 2) + ((child.position[1] - end_node.position[1]) ** 2)\n            child.f = child.g + child.h\n\n            # Child is already in the open list\n            for open_node in open_list:\n                if child == open_node and child.g > open_node.g:\n                    continue\n\n            # Add the child to the open list\n            open_list.append(child) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def num_to_words(num):\n    basic_terms = {\n        0: \"zero\",\n        1: \"one\",\n        2: \"two\",\n        3: \"three\",\n        4: \"four\",\n        5: \"five\",\n        6: \"six\",\n        7: \"seven\",\n        8: \"eight\",\n        9: \"nine\",\n        10: \"ten\",\n        11: \"eleven\",\n        12: \"twelve\",\n        13: \"thirteen\",\n        20: \"twenty\",\n        30: \"thirty\",\n        40: \"forty\",\n        50: \"fifty\",\n        60: \"sixty\",\n        70: \"seventy\",\n        80: \"eighty\",\n        90: \"ninety\"\n    }\n    \n    if num in basic_terms.keys():\n        return basic_terms[num]\n\n    else:\n        num_words = \"\"\n        if num > 20 and num < 100:\n            num_words += basic_terms[num - (num % 10)] + \" \"\n                         + basic_terms[num % 10]\n        elif num >= 100 and num < 1000:\n            num_words += basic_terms[num // 100] + \" \" + \"hundred \" \n            if num % 100 != 0:\n                num_words += num_to_words(num % 100)\n        elif num >= 1000 and num < 10000:\n            num_words += basic_terms[num // 1000] + \" \" + \"thousand \" \n            if num % 1000 != 0:\n                num_words += num_to_words(num % 1000)\n    return num_words but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def repeat_last_character(s):\n    # base case: if string is empty\n    if len(s) == 0:\n        return ''\n\n    final_char = s[-1] # last character of the string\n    result = final_char * len(s) # repeat the last character n times, where n is the length of the string\n\n    return result\n\n# Example\nstring = 'Hello'\nprint(repeat_last_character(string)) # ooooo but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM\n\n# Load the data\ndf = pd.read_csv('FB.csv')\ndf.head()\n\n# Preprocess the data\ndata = df.filter(['Close'])\ndataset = data.values\nscaler = MinMaxScaler()\ndataset = scaler.fit_transform(dataset)\n\n# Create the model\nmodel = Sequential()\nmodel.add(LSTM(50, return_sequences = True, input_shape = (dataset.shape[1], 1)))\nmodel.add(LSTM(50, return_sequences = False))\nmodel.add(Dense(25))\nmodel.add(Dense(1))\n\n# Train the model\nmodel.compile(optimizer = 'adam', loss = 'mean_squared_error')\nmodel.fit(dataset, batch_size = 1, epochs = 10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: employees.sort(key=lambda x: x['salary'], reverse=True)\n \nprint(employees)\n \n# Output:\n# [\n#   {\n#     \"name\": \"Mary Doe\",\n#     \"salary\": 70000\n#   },\n#   {\n#     \"name\": \"John Doe\",\n#     \"salary\": 60000\n#   },\n#   {\n#     \"name\": \"Jane Doe\",\n#     \"salary\": 50000\n#   }\n# ] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compareLists(list1, list2):\n    if len(list1) != len(list2):\n        return False\n\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n\n    return True\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\n\nresult = compareLists(list1, list2)\n\nprint(f'Are the elements in the lists the same? {result}')\n\n# Output: Are the elements in the lists the same? False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_type(str):\n    try:\n        int(str)\n        return 'Integer'\n    except ValueError:\n        pass\n   \n    try:\n        float(str)\n        return 'Float'\n    except ValueError:\n        pass\n   \n    return 'String'\n\nprint(check_type('123')) # prints 'Integer' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.cluster import KMeans\n\ndef cluster_data(x_points, y_points):\n X = list(zip(x_points, y_points))\n clustering_model = KMeans(n_clusters=3)\n clustering_model.fit(X)\n labels = clustering_model.labels_\n return labels but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def last_occurrence(x, lst):\n  last_index = -1\n  for i in range(len(lst)):\n    if lst[i] == x:\n      last_index = i\n  return last_index but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generatePassword():\n    # Generate list of lowercase and uppercase letters\n    letters = string.ascii_letters\n    # Generate a random string with length 10 \n    password = ''.join(random.choice(letters) for i in range(10)) \n    return password\n\nprint(generatePassword()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def normalize(lst): \n    max_num = max(lst)\n    normalized_lst = [(num-max_num)/max_num for num in lst]\n    return normalized_lst\n\nlst = [7,8,10]\nnormalized_values = normalize(lst)\nprint(normalized_values) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.tokenize import TweetTokenizer\nfrom nltk.corpus import stopwords\nfrom nltk.collocations import *\n\ndef get_hashtag(sentence):\n    tokenizer = TweetTokenizer(preserve_case=False, strip_handles=True, reduce_len=True)\n    words = tokenizer.tokenize(sentence)\n\n    bigram_measures = nltk.collocations.BigramAssocMeasures()\n    finder = BigramCollocationFinder.from_words(words)\n\n    #ignore punctuation and stopwords\n    stop_words = stopwords.words('english')\n    finder.apply_word_filter(lambda x: x in stop_words)\n    finder.apply_word_filter(lambda x: x.isalpha() == False)\n\n    hashtag = finder.nbest(bigram_measures.pmi,1)\n    return \"#\" + hashtag[0][0] + hashtag[0][1]\n\nsentence = \"We are going on a picnic\"\nresult = get_hashtag(sentence)\nprint(result) # Output = #GoingPicnic but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_vowels(sentence):\n  vowels = ['a', 'e', 'i', 'o', 'u'] \n  count = 0\n  for word in sentence.split(): \n    for letter in word:\n      if letter in vowels:\n        count += 1\n  return count\n\n#Test \nsentence = \"This sentence has five vowels\"\nprint(\"Number of vowels:\", count_vowels(sentence)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def double_word(word):\n    doubled_word = \"\"\n    for char in word:\n        doubled_word += char + char\n    return doubled_word but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generateRandomString():\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for _ in range(10))\n    \nif __name__ == '__main__':\n    print(generateRandomString()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Optimized Python code\nsum = 0\nfor num in x:\n sum += num\n \n# Using built-in sum function\nsum = sum(x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def num_to_month(num):\n    months = [\n        'January', \n        'February', \n        'March', \n        'April', \n        'May', \n        'June', \n        'July', \n        'August', \n        'September', \n        'October', \n        'November', \n        'December'\n    ]\n    return months[num - 1]\n\nprint(num_to_month(2)) # February but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nDesign a \"rock, paper, scissors\" game using Python.\n\"\"\"\n\nimport random\n\nOPTIONS = [\"rock\", \"paper\", \"scissors\"]\n\ndef play_game():\n    # Player selection\n    print(\"Choose your weapon: rock, paper, or scissors\")\n    player_choice = input().lower()\n\n    # Computer selection\n    computer_choice = random.choice(OPTIONS)\n    print(f\"Computer chose {computer_choice.title()}\")\n\n    # Compare selections\n    if player_choice == computer_choice:\n        print(\"It's a tie!\")\n    else:\n        if player_choice == \"rock\":\n            if computer_choice == \"paper\":\n                print(\"Computer wins!\")\n            elif computer_choice == \"scissors\":\n                print(\"Player wins!\")\n        elif player_choice == \"paper\":\n            if computer_choice == \"scissors\":\n                print(\"Computer wins!\")\n            elif computer_choice == \"rock\":\n                print(\"Player wins!\")\n        elif player_choice == \"scissors\":\n            if computer_choice == \"rock\":\n                print(\"Computer wins!\")\n            elif computer_choice == \"paper\":\n                print(\"Player wins!\")\n\nif __name__ == \"__main__\":\n    play_game() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_diff(array):\n    max_diff = -float('inf')\n    for i in range(1, len(array)):\n        for j in range(i):\n            diff = array[i]-array[j]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.utils import to_categorical\n\n# Import the dataset\nfrom keras.datasets import mnist\n# Load the dataset\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n\n# Reshaping the data\nX_train = X_train.reshape(-1, 784)\nX_test = X_test.reshape(-1, 784)\n# Normalizing the data\nX_train = X_train/255\nX_test = X_test/255\n# Converting the target variables into binary categories\ny_train = to_categorical(y_train, 10)\ny_test = to_categorical(y_test, 10)\n\n# Building the model\nmodel = Sequential([\n Dense(64, activation='relu', input_shape=(784,)),\n Dense(64, activation='relu'),\n Dense(10, activation='softmax')\n])\n\n# Compiling the model\nmodel.compile(\n optimizer='adam',\n loss='categorical_crossentropy',\n metrics=['accuracy']\n)\n\n# Training the model\nmodel.fit(\n X_train, y_train,\n batch_size=128,\n epochs=5,\n validation_data=(X_test, y_test)\n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import flask\nfrom flask import request, jsonify\n\napp = flask.Flask(__name__)\n\n# Database functionality\n# classes used to represent the objects\nclass Book():\n    def __init__(self, title, author, isbn):\n        self.title = title\n        self.author = author\n        self.isbn = isbn\n\n# lists of books\nbooks = []\n\n# endpoints\n@app.route('/books', methods=['GET', 'POST'])\ndef all_books():\n    response_object = {'status': 'success'}\n    if request.method == 'POST':\n        post_data = request.get_json()\n        books.append(Book(post_data.get('title'), post_data.get('author'), post_data.get('isbn')))\n        response_object['message'] = 'Book added!'\n    else:\n        response_object['books'] = [book.__dict__ for book in books] \n\n    return jsonify(response_object)\n\n@app.route('/books/<int:isbn>', methods=['PUT', 'DELETE'])\ndef single_book(isbn):\n    response_object = {'status': 'success'}\n    if request.method == 'PUT':\n        post_data = request.get_json()\n        book = next(filter(lambda x: x.isbn == isbn, books), None)\n        if book:\n            book.title = post_data.get('title')\n            book.author = post_data.get('author')\n            response_object['message'] = 'Book updated'\n        else:\n            response_object['message'] = 'Book does not exist'\n    if request.method == 'DELETE':\n        global books\n        books = list(filter(lambda x: x.isbn != isbn, books))\n        response_object['message'] = 'Book deleted'\n    return jsonify(response_object)\n\n# Run the application\nif __name__ == '__main__':\n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def palindrome_checker(string1, string2): \n    m = len(string1) \n    n = len(string2) \n  \n    if m != n: \n        return False    \n  \n    string1 = string1.lower() \n    string2 = string2.lower() \n      \n    # create empty 2-D matrix \n    C = [[0] * (n + 1) for i in range(m + 1)] \n  \n    # palindromic substring of length 0 \n    for i in range(m + 1): \n        C[i][0] = 0\n  \n    # palindromic substring of length 1 \n    for j in range(n + 1): \n        C[0][j] = 0\n  \n    # fill the matrix in bottom-up manner \n    for i in range(1, m + 1): \n        for j in range(1, n + 1): \n            if string1[i - 1] == string2[j - 1]: \n                C[i][j] = C[i - 1][j - 1] + 1\n    return m == n == C[m][n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insertionSort(arr): \n    for i in range(1, len(arr)): \n  \n        j = i-1\n        key = arr[i] \n  \n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key \n  \narr = [3,8,15,2,6,10]\ninsertionSort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_string(length):\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    random_string = ''.join(random.choice(letters) for i in range(length))\n    return random_string\n\nif __name__ == '__main__':\n    print(generate_random_string(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\n\nimport cv, serial, struct\nfrom datetime import datetime\n\ncyril = serial.Serial('/dev/ttyAMA0', 9600) #open first serial port and give it a good name\nprint \"Opened \"+cyril.portstr+\" for serial access\"\ncenterX = 175 #160\ncenterY = 140 #120\n\ncropped = None\nimg = None\n\n# decrease angular resolution for 8-bit serial transport\ndef derez(x):\n  if( x < 90 ):\n    return (-90-x)/2\n  else:\n    return (270-x)/2\n\n# allow user to click on image from camera to set the center for transformation\ndef on_mouse(event, x, y, flags, param):\n  if event==cv.CV_EVENT_LBUTTONDOWN:\n    print x, \", \", y, \": \", img[y,x]\n    #print \"Set center \", x, \", \", y, \": \", img[y,x]\n    #global centerX\n    #global centerY\n    #centerX = x\n    #centerY = y\n\n\nif __name__ == '__main__':\n  datalog = open(\"data.log\", \"w+\")\n  datalog.write(\"\\n~~~=== Rambler Data Log Opened, \" + str(datetime.now()) + \" ===~~~\\n\")\n\n  capture = cv.CaptureFromCAM(0)\n  #capture = cv.CaptureFromFile(\"../out2.mpg\")\n  cv.SetCaptureProperty(capture, cv.CV_CAP_PROP_FRAME_WIDTH, 320)\n  cv.SetCaptureProperty(capture, cv.CV_CAP_PROP_FRAME_HEIGHT, 240)\n\n  polar = cv.CreateImage((360, 360), 8, 3)\n  cropped = cv.CreateImage((360, 40), 8, 3)\n  img = cv.CreateImage((320, 240), 8, 3)\n  \n  cones = cv.CreateImage((360, 40), 8, 1)\n\n  cv.NamedWindow('cam')\n  cv.NamedWindow('unwrapped')\n  cv.NamedWindow('target')\n  \n  cv.SetMouseCallback('cam', on_mouse)\n  on_mouse(cv.CV_EVENT_LBUTTONDOWN, centerX, centerY, None, None)\n\n  # These values determine the range of colors to detect as \"shelter\".\n  #Calibration A: finding cones in room 817\n  lower = cv.Scalar(40,  90, 170) # (B, G, R)\n  upper = cv.Scalar(80, 180, 255)\n\n  #Calibration B: finding green paper in 817\n  #lower = cv.Scalar(10,  90, 10)\n  #upper = cv.Scalar(99, 255, 90)\n\n  M = 69\n\n  while True:\n    img = cv.QueryFrame(capture)\n    cv.LogPolar(img, polar, (centerX, centerY), M+1, cv.CV_INTER_NN) #possible speedup - get subrect src\n    #cropped = cv.GetSubRect(polar,(280,0,40,360))\n    #cv.Transpose(cropped, cropped)\n    cv.Transpose(cv.GetSubRect(polar,(280,0,40,360)), cropped)\n    cv.Flip(cropped) #just for viewing (possible speedup)\n\n    cv.InRangeS(cropped, lower, upper, cones)\n    \n    cv.Erode(cones, cones) # just once might be too much\n\n    k = cv.CreateStructuringElementEx(3, 43, 1, 1, cv.CV_SHAPE_RECT) # create a 3x43 rectangular dilation element k\n    cv.Dilate(cones, cones, k, 2) \n\n    #scan top row of thresholded, eroded, dilated image, find the number of contiguous segments and their location\n    s = 0 # size of contiguous segment\n    ss = 0 #number of contiguous segments\n    bearingToLandmarks = []\n    for i in xrange(360-2):\n        c = cones[0, i] #current\n        n = cones[0, i+1] #next\n        #print int(c),\n        if (c == 0 and n == 255) or \\\n           (c == 255 and n == 255): # this condition marks beginning or middle of contiguous segment\n            s = s + 1\n            #print \".\",\n        elif (c == 255 and n == 0): # end of contiguous segment\n            ss = ss + 1\n            bearingToLandmarks.append((i-s/2, s))\n            s = 0\n        #handle wraparound\n        if (i == 360-2-1 and s != 0): #TODO: double check this offset\n            if (cones[0,0] == 255):\n                #print \"edge case A\"\n                bearingToLandmarks[0] = ((bearingToLandmarks[0][0]-s/2)%360, bearingToLandmarks[0][1]+s) #TODO: recalculate center more accurately\n            else:\n                #print \"edge case B\"\n                bearingToLandmarks.append((c-s/2, s))\n    #print \".\", ss, \".\"\n    #bearingToLandmarks.append((derez(g), 12))\n    #g = (g + 1) % 360\n    print bearingToLandmarks, len(bearingToLandmarks)\n\n    #TODO - Bearing output\n    if len(bearingToLandmarks) > 0:\n        output = struct.pack('c','\\xfa') \\\n            + struct.pack('B', 0) \\\n            + struct.pack('b', derez(bearingToLandmarks[0][0]) ) \\\n            + struct.pack('B', 0) \n        cyril.write(output)\n\n    #Data Logging\n    if (cyril.inWaiting() > 0):\n      logdata = cyril.read(cyril.inWaiting())\n      a = 0\n      b = 0\n      for c in logdata:\n        if c == '\\n':\n          datalog.write(str(datetime.now().time())+\",\"+logdata[a:b]+\"\\n\")\n          a = b + 1\n        b = b + 1\n    \n    cv.ShowImage('cam', img)\n    cv.ShowImage('target', cones)\n    cv.ShowImage('unwrapped', cropped)\n\n    key = cv.WaitKey(10) # THIS REQUIRES AT LEAST ONE WINDOW \n    #print \"key \",key\n    if key > 0:\n        break\n        \n  cv.DestroyAllWindows()\n  cyril.close()\n  datalog.write(\"\\n~~~=== Rambler Data Log Closed, \" + str(datetime.now()) + \" ===~~~\\n\")\n  datalog.close()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math \n  \ndef isPerfectSquare(n): \n    # Find floating point value of \n    # square root of x. \n    sqr = math.sqrt(n) \n   \n    # If square root is an integer \n    return (sqr - math.floor(sqr) == 0) \n  \n# Driver program \nx = 25\nif(isPerfectSquare(x)): \n    print(x, \"is a perfect square\") \nelse: \n    print(x, \"is not a perfect square\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # !usr/bin/env python2\n# -*- coding: utf-8 -*-\n#\n# Licensed under a 3-clause BSD license.\n#\n# @Author: Brian Cherinka\n# @Date:   2017-06-10 16:46:40\n# @Last modified by: Jos\u00e9 S\u00e1nchez-Gallego (gallegoj@uw.edu)\n# @Last modified time: 2018-11-14 19:37:22\n\nfrom __future__ import absolute_import, division, print_function\n\nimport os\n\nfrom invoke import Collection, task\n\n\nDIRPATH = '/home/manga/software/git/manga/marvin'\nMODULEPATH = '/home/manga/software/git/modulefiles'\n\n\n@task\ndef clean_docs(ctx):\n    ''' Cleans up the docs '''\n    print('Cleaning the docs')\n    ctx.run(\"rm -rf docs/sphinx/_build\")\n\n\n@task\ndef build_docs(ctx, clean=False):\n    ''' Builds the Sphinx docs '''\n\n    if clean:\n        print('Cleaning the docs')\n        ctx.run(\"rm -rf docs/sphinx/_build\")\n\n    print('Building the docs')\n    os.chdir('docs/sphinx')\n    ctx.run(\"make html\", pty=True)\n\n\n@task\ndef show_docs(ctx):\n    \"\"\"Shows the Sphinx docs\"\"\"\n    print('Showing the docs')\n    os.chdir('docs/sphinx/_build/html')\n    ctx.run('open ./index.html')\n\n\n@task\ndef clean(ctx):\n    ''' Cleans up the crap '''\n    print('Cleaning')\n    # ctx.run(\"rm -rf docs/sphinx/_build\")\n    ctx.run(\"rm -rf htmlcov\")\n    ctx.run(\"rm -rf build\")\n    ctx.run(\"rm -rf dist\")\n\n\n@task(clean)\ndef deploy(ctx, repo=None):\n    ''' Deploy to pypi '''\n    print('Deploying to Pypi!')\n    rstr = ''\n    if repo:\n        rstr = '-r {0}'.format(repo)\n    ctx.run(\"python setup.py sdist bdist_wheel --universal\")\n    ctx.run(\"twine upload {0} dist/*\".format(rstr))\n\n\n\n@task\ndef update_default(ctx, path=None, version=None):\n    ''' Updates the default version module file'''\n\n    assert version is not None, 'A version is required to update the default version!'\n    assert path is not None, 'A path must be specified!'\n\n    # update default version\n    f = open('.version', 'r+')\n    data = f.readlines()\n    data[1] = 'set ModulesVersion \"{0}\"\\n'.format(version)\n    f.seek(0, 0)\n    f.writelines(data)\n    f.close()\n\n\n@task\ndef update_module(ctx, path=None, wrap=None, version=None):\n    ''' Update a module file '''\n\n    assert version is not None, 'A version is required to update the module file!'\n    assert path is not None, 'A path must be specified!'\n    print('Setting up module files!')\n    os.chdir(path)\n    newfile = 'mangawork.marvin_{0}'.format(version) if wrap else version\n    oldfile = 'mangawork.marvin_2.1.3' if wrap else 'master'\n    searchline = 'marvin' if wrap else 'version'\n    ctx.run('cp {0} {1}'.format(oldfile, newfile))\n    f = open('{0}'.format(newfile), 'r+')\n    data = f.readlines()\n    index, line = [(i, line) for i, line in enumerate(data)\n                   if 'set {0}'.format(searchline) in line][0]\n    data[index] = 'set {0} {1}\\n'.format(searchline, version)\n    f.seek(0, 0)\n    f.writelines(data)\n    f.close()\n\n    # update the default version\n    update_default(ctx, path=path, version=newfile)\n\n\n@task\ndef update_git(ctx, version=None):\n    ''' Update the git package at Utah '''\n    assert version is not None, 'A version is required to checkout a new git repo!'\n    print('Checking out git tag {0}'.format(version))\n    verpath = os.path.join(DIRPATH, version)\n    # checkout and setup new git tag\n    os.chdir(DIRPATH)\n    ctx.run('git clone https://github.com/sdss/marvin.git {0}'.format(version))\n    os.chdir(verpath)\n    ctx.run('git checkout {0}'.format(version))\n    ctx.run('git submodule update --init --recursive')\n    # ctx.run('python -c \"from get_version import generate_version_py; '\n    #         'generate_version_py(\\'sdss-marvin\\', {0}, False)'.format(version))\n\n\n@task\ndef update_current(ctx, version=None):\n    ''' Update the current symlink '''\n    assert version is not None, 'A version is required to update the current symlink!'\n    # reset the current symlink\n    os.chdir(DIRPATH)\n    ctx.run('rm current')\n    ctx.run('ln -s {0} current'.format(version))\n\n\n@task\ndef switch_module(ctx, version=None):\n    ''' Switch to the marvin module of the specified version and start it '''\n    assert version is not None, 'A version is required to setup Marvin at Utah!'\n    ctx.run('uwsgi --stop /home/www/sas.sdss.org/mangawork/marvin/pid/uwsgi_marvin.pid')\n    ctx.run('module unload wrapmarvin')\n    ctx.run('module load wrapmarvin/mangawork.marvin_{0}'.format(version))\n    ctx.run('uwsgi /home/manga/software/git/manga/marvin/{0}/python/marvin/web/uwsgi_conf_files/uwsgi_marvin_mangawork.ini'.format(version))\n\n\n@task\ndef update_uwsgi(ctx, version=None):\n    ''' Reset the uwsgi symlink to the new version and touch the file to Emperor reload Marvin '''\n    assert version is not None, 'A version is required to setup Marvin at Utah!'\n    os.chdir('/etc/uwsgi/vassals')\n    new_path = '/home/manga/software/git/manga/marvin/{0}/python/marvin/web/uwsgi_conf_files/uwsgi_marvin_mangawork.ini'.format(version)\n    ctx.run('rm uwsgi_marvin_mangawork.ini')\n    ctx.run('ln -s {0} uwsgi_marvin_mangawork.ini'.format(new_path))\n    ctx.run('touch uwsgi_marvin_mangawork.ini')\n\n\n@task\ndef setup_utah(ctx, version=None):\n    ''' Setup the package at Utah and update the release '''\n    assert version is not None, 'A version is required to setup Marvin at Utah!'\n\n    # update git\n    update_git(ctx, version=version)\n\n    # update_current\n    update_current(ctx, version=version)\n\n    # update modules\n    marvin = os.path.join(MODULEPATH, 'marvin')\n    wrap = os.path.join(MODULEPATH, 'wrapmarvin')\n    update_module(ctx, path=marvin, version=version)\n    update_module(ctx, path=wrap, wrap=True, version=version)\n\n    # restart the new marvin\n    # switch_module(ctx, version=version)\n    update_uwsgi(ctx, version=version)\n    print('Marvin version {0} is set up!\\n'.format(version))\n    print('Check for the new Marvin version at the bottom of the Marvin Web main page!')\n    # print('Please run ...\\n stopmarvin \\n module switch wrapmarvin '\n    #       'wrapmarvin/mangawork.marvin_{0} \\n startmarvin \\n'.format(version))\n\n\nos.chdir(os.path.dirname(__file__))\n\nns = Collection(clean, deploy, setup_utah)\ndocs = Collection('docs')\ndocs.add_task(build_docs, 'build')\ndocs.add_task(clean_docs, 'clean')\ndocs.add_task(show_docs, 'show')\nns.add_collection(docs)\nupdates = Collection('update')\nupdates.add_task(update_git, 'git')\nupdates.add_task(update_current, 'current')\nupdates.add_task(update_module, 'module')\nupdates.add_task(update_default, 'default')\nns.add_collection(updates)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: {\n 'even': [4, 8, 12],\n 'odd': [3, 15, 7]    \n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from datetime import date\nfrom datetime import timedelta\nimport datetime\n\ntoday = datetime.date.today()\n# Current date\nprint(\"Today's date is:\", today)\n\n# Coming weekend\nweekend = today + timedelta(days=4-today.weekday())\n# Weekend date\nprint(\"The upcoming Weekend date is:\", weekend) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The code is incorrect because it is missing the colon at the end of the loop statement. \nIt should be 'for num in numbers:' instead of 'for num in numbers'. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def order_by_name(people):\n  # return people sorted by name\n  return sorted(people, key=lambda x: x['name'])\n\ndef order_by_age(people):\n  # return people sorted by age\n  return sorted(people, key=lambda x: x['age'])\n\n# The following code should print people sorted by age\npeople = [{'name': 'John', 'age': 24}, {'name': 'Steve', 'age': 32}, {'name': 'Alice', 'age': 18}]\n\nprint(order_by_age(people)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_char(string, character, replacement):\n   return string.replace(character, replacement)\n\nstring = \"Hello World\"\ncharacter = \"l\"\nreplacement = \"X\"\nprint(replace_char(string, character, replacement)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_string(string):\n    lst = list(string)\n    lst.sort()\n    return ''.join(lst)\n\nsorted_str = sort_string('hello')\nprint(sorted_str) # expected output: ehllo but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def last_n_chars(string, n):\n    return string[len(string) - n:] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def indexFinder(arr, target): \n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\narr = [1, 2, 3, 4]\ntarget = 3\n\nprint(\"Index of % d is % d\" %(target, indexFinder(arr, target))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for num in range(1, 21):\n    if num % 3 == 0:\n        print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt \n\ndata = [1, 2, 3, 4, 5, 5]\n\nplt.hist(data, bins=5) \nplt.title(\"Frequency Distribution\")\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_primes(limit):\n    sum = 0\n    for i in range(2, limit+1):\n        if is_prime(i):\n            sum += i\n\n    return sum\n\ndef is_prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\n\nclass Schmeckles:\n    def __init__(self, bot):\n        self.bot = bot\n        self.p = re.compile('([^\\n\\.\\,\\r\\d-]{0,30})(-?[\\d|,]{0,300}\\.{0,1}\\d{1,300} schmeckle[\\w]{0,80})([^\\n\\.\\,\\r\\d-]{0,30})', re.IGNORECASE)\n\n    async def schmeckle2usd(self, schmeckle):\n        \"\"\"1 Schmeckle = $148 USD\n        https://www.reddit.com/r/IAmA/comments/202owt/we_are_dan_harmon_and_justin_roiland_creators_of/cfzfv79\"\"\"\n        return schmeckle * 148.0\n\n    async def schmeckle2eur(self, schmeckle):\n        return schmeckle * 139.25   # latest USDEUR value\n\n    async def schmeckle2yen(self, schmeckle):\n        return schmeckle * 139.25   # latest USDYEN value\n\n    async def schmeckle2rub(self, schmeckle):\n        return schmeckle * 139.25   # latest USDRUB value\n\n    async def searchForSchmeckles(self, content):\n        if any([x in content.lower() for x in ['?', 'how much', 'what is', 'how many', 'euro', 'usd', 'dollars', 'dollar', 'euros']]):\n            return self.p.search(content)\n        return None\n\n    async def getSchmeckles(self, content):\n        get_schmeckles = await self.searchForSchmeckles(content)\n        if get_schmeckles:\n            match = get_schmeckles.groups()\n            euro = any([x in match[-1].lower() for x in ['eur', 'euro', 'euros']])\n            dollar = any([x in match[-1].lower() for x in ['usd', 'dollar', 'dollars']])\n            if euro and not dollar:\n                value = await self.schmeckle2eur(float(match[1].split()[0])), 'EUR', match[1].split()[0]\n            elif dollar and not euro:\n                value = await self.schmeckle2usd(float(match[1].split()[0])), 'USD', match[1].split()[0]\n            elif not dollar and not euro:\n                value = await self.schmeckle2usd(float(match[1].split()[0])), 'USD', match[1].split()[0]\n            return value\n        return None\n\n    async def _on_message(self, message):\n        content = message.content\n        author = message.author\n        channel = message.channel\n        if author.id != self.bot.user.id:\n            schmeckles = await self.getSchmeckles(content)\n            if schmeckles:\n                await self.bot.send_message(channel, '{0[2]} SHM is about {0[0]:.2f} {0[1]}'.format(schmeckles))\n\n\ndef setup(bot):\n    cog = Schmeckles(bot)\n    bot.add_listener(cog._on_message, \"on_message\")\n    bot.add_cog(cog)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nappended_list = list1 + list2\nprint(appended_list) # [1, 2, 3, 4, 5, 6] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sumTwo(num1, num2):\n    return num1 + num2\n\nresult = sumTwo(5, 6);\nprint(result); but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport json\nimport sqlite3\n\n# Request data from the API\nr = requests.get('https://api.weather.com/v2/profiles/YOUR_APPID/forecast/hourly/48hour?units=m&language=en-US&format=json')\n\n# Parse the response as a JSON object\ndata = json.loads(r.text)\n\n# Connect to the database\nconn = sqlite3.connect('weather.db')\nc = conn.cursor()\n\n# Create the database if it doesn't exist\nc.execute('CREATE TABLE IF NOT EXISTS forecasts (time INTEGER, temperature REAL, humidity REAL, visibility REAL, wind_speed REAL)')\n\n# Add the forecast data to the database\nfor hour in data[\"forecastGroup\"][\"forecast\"]:\n c.execute('INSERT INTO forecasts VALUES (?, ?, ?, ?, ?)', (hour['fcst_valid'], hour['temp'], hour['humidity'], hour['visibility'], hour['wspd']))\n\n# Commit the changes to the database\nconn.commit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # imports\nimport tkinter as tk\n\n# create root app window\nroot = tk.Tk()\n\n# setting window's size\nroot.geometry(\"200x200\")\n\n# main loop\nroot.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # A recursive function to clear a binary tree \ndef clearBinaryTree(root): \n\t\n\t# Base case \n\tif root is None: \n\t\treturn\n\n\t# First clear the left nodes \n\tclearBinaryTree(root.left) \n\t\n\t# Then clear the right nodes \n\tclearBinaryTree(root.right) \n\t\n\t# Clear the data of this node \n\troot.data = None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef random_number(seed):\n    random.seed(seed)\n    return random.random()\n\nprint(random_number(99)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_lists(list1, list2):\n   merged_list = list1 + list2\n   return merged_list\n\nresult = merge_lists([1,2,3], [4,5,6])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b \nfor i in range(0, 10):\n    print(Fibonacci(i)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_chars_at_indices(str, indices):\n    new_str = \"\"\n    for i in range(len(str)):\n        if i not in indices:\n            new_str += str[i]\n    return new_str\n\nstr = \"Hello World!\"\nindex = [0, 5, 9]\nresult = remove_chars_at_indices(str, index)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_smaller_word_in_larger_word(search_word, larger_word):\n    \"\"\"\n    Searches a smaller word in a larger word\n    Arguments:\n        search_word -- Smaller word we have to search in the larger word\n        larger_word -- Larger word\n    Return: \n        True if smaller word exists in larger word, else False\n    \"\"\"\n\n    if search_word in larger_word:\n        return True\n    return False\n\nif __name__ == '__main__':\n    search_word = \"the\"\n    larger_word = \"hello there\"\n    print(search_smaller_word_in_larger_word(search_word, larger_word)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Triangle:\n    def __init__(self, side1, side2, side3):\n        self.side1 = side1\n        self.side2 = side2\n        self.side3 = side3\n\n    def perimeter(self):\n        return (self.side1 + self.side2 + self.side3)\n\n    def area(self):\n        # Using Heron's formula\n        s = self.perimeter() / 2\n        return (s*(s-self.side1)*(s-self.side2)*(s-self.side3))**0.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [6,5,3,1,8,7,2,4]\n  \nbubble_sort(arr)\n\nprint (\"Sorted array is:\")\nfor i in range(len(arr)):\n    print (\"%d\" %arr[i]), but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef filter_half_array(arr):\n    while len(arr)>0:\n        el = random.choice(arr) # randomly select an element of the list\n        arr.remove(el) # remove the selected item from the list\n    return arr\n\narr = [9, 2, 7, 4, 5, 6, 8, 1, 4, 0]\nfilter_half_array(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def oldest_person(people):\n    oldest = None\n    for name, age in people:\n        if oldest == None or age > oldest[1]:\n            oldest = (name, age)\n    return oldest\n\npeople = [('John', 18), ('Sarah', 19), ('Bob', 17)]\nname, age = oldest_person(people)\nprint(f\"{name} is the oldest in the list with an age of {age}.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def split_string(input_string):\n    splitted_strings = []\n    for i in range(0, len(input_string), 5):\n        splitted_strings.append(input_string[i:i+5])\n    return splitted_strings\n\nsplitted_strings = split_string(\"HelloWorldFromPython\")\nprint(splitted_strings) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_numbers(num1, num2):\n    return num1 + num2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python3\n\n# Addition\nif \"add\" in sys.argv[1]:\n try:\n  num1 = int(sys.argv[2])\n  num2 = int(sys.argv[3])\n  print(\"Result of\", num1, \"+\", num2, \" = \", num1 + num2)\n except ValueError:\n  print(\"Please provide valid input values\")\n\n# Subtraction\nelif \"sub\" in sys.argv[1]:\n try:\n  num1 = int(sys.argv[2])\n  num2 = int(sys.argv[3])\n  print(\"Result of\", num1, \"-\", num2, \" = \", num1 - num2)\n except ValueError:\n  print(\"Please provide valid input values\")\n\n# Multiplication\nelif \"mul\" in sys.argv[1]:\n try:\n  num1 = int(sys.argv[2])\n  num2 = int(sys.argv[3])\n  print(\"Result of\", num1, \"*\", num2, \" = \", num1 * num2)\n except ValueError:\n  print(\"Please provide valid input values\")\n\n# Division\nelif \"div\" in sys.argv[1]:\n try:\n  num1 = int(sys.argv[2])\n  num2 = int(sys.argv[3])\n  print(\"Result of\", num1, \"/\", num2, \" = \", num1 / num2)\n except ValueError:\n  print(\"Please provide valid input values\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculateAverage(numbers):\n total = 0\n for num in numbers:\n total += num\n return total / len(numbers)\n\nnumbers = [5, 10, 15, 20]\n\nprint(calculateAverage(numbers)) // 12.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def edit_list(list, criteria):\n    return [x for x in list if criteria(x) == True] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def substring(str):\n    if len(str) < 3:\n        return\n    else:\n        return str[:2] + str[-2:]\n\nsubstring(\"hello\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_pairs(lst, sum):\n pairs = []\n\n for i in range(len(lst)-1):\n   for j in range(i+1, len(lst)):\n     if lst[i] + lst[j] == sum:\n       pairs.append((lst[i], lst[j]))\n\n return pairs\n\npairs = find_pairs([1, 2, 3, 4, 5], 8)\nprint(pairs) # [(3,5), (2,6), (1,7)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def perfect_numbers(n): \n   \n    # Initialize perfect number list \n    perfect_number_list = [] \n  \n    for num in range(1, n + 1): \n        sum = 0\n        for i in range(1, num): \n            if num % i == 0: \n                sum += i \n  \n        # If the sum of its divisor equals  \n        # the number itself, then that   \n        # number is a perfect number. \n        if sum == num: \n            perfect_number_list.append(num) \n  \n    return perfect_number_list \n\n# Driver code \nn = 1000\nprint(perfect_numbers(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPrime(n):\n    # Edge case\n    if n <= 1:\n        return False\n  \n    # Check from 2 to n-1 \n    for i in range(2, n): \n        if n % i == 0: \n            return False; \n  \n    return True\n\n# Function call \nres = isPrime(2) \nif(res): \n    print(\"Prime\") \nelse: \n    print(\"Not Prime\")\n\n# Iterative check in a given range \nfor n in range(2, 5):\n    res = isPrime(n) \n    if(res): \n        print(n, \"is Prime\") \n    else: \n        print(n, \"is not Prime\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Vehicle:\n    def __init__(self, type, make, model, number_of_wheels):\n        self.type = type\n        self.make = make\n        self.model = model\n        self.number_of_wheels = number_of_wheels\n        \n    def description(self):\n        return f\"This is a {self.type} - {self.make} {self.model} with {self.number_of_wheels} wheels.\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num = 1\nwhile num <= 10:\n    print(num)\n    num += 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def num_vowels(words):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    word_dict = {}\n    \n    for word in words:\n        word_vowels = 0\n        \n        for letter in word:\n            if letter.lower() in vowels:\n                word_vowels += 1\n                \n        word_dict[word] = word_vowels\n    \n    return word_dict\n\nwords_list = input(\"Enter a list of words: \").split()\nprint(num_vowels(words_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPrime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndata = json.loads('[{\"name\":\"John\", \"age\":30, \"city\":\"New York\"},\"name\":\"Mike\", \"age\":25, \"city\":\"Boston\"}, {\"name\":\"Frank\", \"age\":35, \"city\":\"Los Angeles\"}]')\n\ndef search(data, key, value):\n    for item in data:\n        if item[key] == value:\n            return item\n\nprint(search(data, \"city\", \"New York\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_random_string(length):\n  characters = string.ascii_letters + string.digits \n  return ''.join(random.choice(characters) for i in range(length)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def second_largest(arr):\n    first = max(arr[0], arr[1])\n    second = min(arr[0], arr[1])\n \n    for i in range(2, len(arr)):\n        if arr[i] > first:\n            second = first\n            first = arr[i]\n        elif arr[i] > second and arr[i] != first:\n            second = arr[i]\n \n    return second but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from __future__ import absolute_import, unicode_literals\n\nimport json\nimport logging\n\nimport six\nfrom django.utils.translation import ugettext_lazy as _\nfrom edx_rest_api_client.exceptions import SlumberHttpBaseException\nfrom oscar.core.loading import get_model\n\nfrom ecommerce.core.constants import ENROLLMENT_CODE_SEAT_TYPES\nfrom ecommerce.courses.utils import mode_for_product\n\nlogger = logging.getLogger(__name__)\nProduct = get_model('catalogue', 'Product')\nStockRecord = get_model('partner', 'StockRecord')\n\n\nclass LMSPublisher:\n    def get_seat_expiration(self, seat):\n        if not seat.expires or 'professional' in getattr(seat.attr, 'certificate_type', ''):\n            return None\n\n        return seat.expires.isoformat()\n\n    def get_course_verification_deadline(self, course):\n        return course.verification_deadline.isoformat() if course.verification_deadline else None\n\n    def serialize_seat_for_commerce_api(self, seat):\n        \"\"\" Serializes a course seat product to a dict that can be further serialized to JSON. \"\"\"\n        stock_record = seat.stockrecords.first()\n\n        bulk_sku = None\n        if getattr(seat.attr, 'certificate_type', '') in ENROLLMENT_CODE_SEAT_TYPES:\n            enrollment_code = seat.course.enrollment_code_product\n            if enrollment_code:\n                bulk_sku = enrollment_code.stockrecords.first().partner_sku\n\n        return {\n            'name': mode_for_product(seat),\n            'currency': stock_record.price_currency,\n            'price': int(stock_record.price_excl_tax),\n            'sku': stock_record.partner_sku,\n            'bulk_sku': bulk_sku,\n            'expires': self.get_seat_expiration(seat),\n        }\n\n    def publish(self, course):\n        \"\"\" Publish course commerce data to LMS.\n\n        Uses the Commerce API to publish course modes, prices, and SKUs to LMS. Uses\n        CreditCourse API endpoints to publish CreditCourse data to LMS when necessary.\n\n        Arguments:\n            course (Course): Course to be published.\n\n        Returns:\n            None, if publish operation succeeded; otherwise, error message.\n        \"\"\"\n        site = course.partner.default_site\n        course_id = course.id\n        error_message = _('Failed to publish commerce data for {course_id} to LMS.').format(course_id=course_id)\n\n        name = course.name\n        verification_deadline = self.get_course_verification_deadline(course)\n        modes = [self.serialize_seat_for_commerce_api(seat) for seat in course.seat_products]\n\n        has_credit = 'credit' in [mode['name'] for mode in modes]\n        if has_credit:\n            try:\n                data = {\n                    'course_key': course_id,\n                    'enabled': True\n                }\n                credit_api_client = site.siteconfiguration.credit_api_client\n                credit_api_client.courses(course_id).put(data)\n                logger.info('Successfully published CreditCourse for [%s] to LMS.', course_id)\n            except SlumberHttpBaseException as e:\n                # Note that %r is used to log the repr() of the response content, which may sometimes\n                # contain non-ASCII Unicode. We don't know (or want to guess) the encoding, so using %r will log the\n                # raw bytes of the message, freeing us from the possibility of encoding errors.\n                logger.exception(\n                    'Failed to publish CreditCourse for [%s] to LMS. Status was [%d]. Body was [%s].',\n                    course_id,\n                    e.response.status_code,\n                    e.content.decode('utf-8')\n                )\n                return error_message\n            except:  # pylint: disable=bare-except\n                logger.exception('Failed to publish CreditCourse for [%s] to LMS.', course_id)\n                return error_message\n\n        try:\n            data = {\n                'id': course_id,\n                'name': name,\n                'verification_deadline': verification_deadline,\n                'modes': modes,\n            }\n\n            commerce_api_client = site.siteconfiguration.commerce_api_client\n            commerce_api_client.courses(course_id).put(data=data)\n            logger.info('Successfully published commerce data for [%s].', course_id)\n            return None\n        except SlumberHttpBaseException as e:  # pylint: disable=bare-except\n            logger.exception(\n                'Failed to publish commerce data for [%s] to LMS. Status was [%d]. Body was [%s].',\n                course_id,\n                e.response.status_code,\n                e.content.decode('utf-8')\n            )\n            return self._parse_error(e.content.decode('utf-8'), error_message)\n        except Exception:  # pylint: disable=broad-except\n            logger.exception('Failed to publish commerce data for [%s] to LMS.', course_id)\n            return error_message\n\n    def _parse_error(self, response, default_error_message):\n        \"\"\"When validation errors occur during publication, the LMS is expected\n         to return an error message.\n\n        Arguments:\n            response (Response): A 'Response' object which contains json error message.\n            default_error_message (str) : default error message in case of exception.\n\n        Returns:\n            string: Returns the error message extracted from response.content\n            along with default message. If no message is available in response\n            then default message will be return.\n\n        \"\"\"\n        message = None\n        try:\n            data = json.loads(response)\n            if isinstance(data, six.string_types):\n                message = data\n            elif isinstance(data, dict) and data:\n                message = list(data.values())[0]\n            if isinstance(message, list):\n                message = message[0]\n        except Exception:  # pylint: disable=broad-except\n            pass\n\n        if message:\n            return ' '.join([default_error_message, message])\n\n        return default_error_message\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def inverted_triangle(length):\n    for i in range(length, 0, -1):\n        for j in range(length - i):\n            print(' ', end=\"\")\n        for j in range(2 * i - 1):\n            print('*', end=\"\")\n        print()\n\ninverted_triangle(5)\n\n# Output:\n# *****\n#  ***\n#   * but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_menu():\n  print('1. Find the square ')\n  print('2. Find the cube ')\n  print('3. Quit')\n  print()\n\n#Take Input from the user \nchoice = int(input(\"Enter your choice: \"))\nwhile choice != 3: \n  if choice==1: \n    num = int(input(\"Enter a number: \"))\n    print(\"The square of\",num,\"is\",num*num)\n  elif choice==2: \n    num = int(input(\"Enter a number: \")) \n    print(\"The cube of\",num,\"is\",num**3) \n  elif choice==3: \n    print(\"Bye!\")\n  else: \n    print(\"Sorry, wrong input\")\n  print() \n  choice = int(input(\"Enter your choice: \")) \nprint(\"Bye!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_front_elements_from_queues(queue_list):\n    for queue in queue_list:\n        print(queue[0])\n\nqueue_list = [queue1, queue2]\n\nprint_front_elements_from_queues(queue_list) # This should print 5 and 7 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n  def __init__(self, name, id, salary, profile):\n    self.name = name\n    self.id = id\n    self.salary = salary\n    self.profile = profile but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\n# Calculate the soil moisture\ndef calculate_soil_moisture(temperature, humidity, soil_type):\n    # Calculation for sandy soil\n    moisture = 0\n    if soil_type == \"sandy\":\n        moisture = (temperature - 10) * humidity * 0.5\n    # Calculation for loamy soil\n    elif soil_type == \"loamy\":\n        moisture = (temperature - 20) * humidity * 0.6\n    # Calculation for clay soil\n    elif soil_type == \"clay\":\n        moisture = (temperature - 30) * humidity * 0.8\n    # Other types\n    else:\n        moisture = 10\n    # Calculate irrigation amount\n    if moisture > 4:\n        # No irrigation needed\n        irrigation_amount = 0\n    else:\n        # Irrigate the land\n        irrigation_amount = np.abs(4 - moisture)\n    return irrigation_amount but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pad_list_right(lst, pad_length):\n    extra_length = pad_length - len(lst)\n    lst.extend([lst[-1]] * extra_length)\n    return lst\n\nlst = [2, 3, 5]\npadding_length = 7\nresult = pad_list_right(lst, padding_length)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_list(list1, list2): \n \n    # store comparison in results  \n    results = [] \n  \n    # iterate through lists \n    for x in list1: \n        for y in list2: \n            if x == y:  \n                results.append(x) \n  \n    # return result \n    return results \n\n# Driver code  \nlist1 = [1, 2, 3, 4, 5] \nlist2 = [2, 3, 8, 9, 10] \n\nprint(compare_list(list1, list2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport numpy as np\n\ndef sgd_model(X, Y, w, b, learning_rate, epochs):\n    \"\"\"Implement Stochastic Gradient Descent to generate a linear regression model\"\"\"\n    N = len(X)\n\n    for e in range(epochs):\n        for i in range(N):\n\n            x = X[i]\n            y = Y[i]\n\n            # Calculate output\n            yhat = w * x + b\n\n            # Update weights\n            w += learning_rate * (y - yhat) * x\n            b += learning_rate * (y - yhat)\n    return w, b\n\n# Example\nX = np.array([1, 2, 3])\nY = np.array([1, 2, 3])\nw, b = sgd_model(X, Y, 0, 0, 0.01, 1000)\nyhat = w * X + b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import gym\nimport numpy as np\n   \n# Set up the environment\nenv = gym.make('CartPole-v1')\nenv.reset()\n\n# Define the hyperparameters\nlearning_rate = 0.01\ndiscount = 0.95\nepisodes = 5000\n\n# Discretize the state space of the environment\nNUMBER_OF_BUCKETS = (1, 1, 6, 3)  # (x, x', theta, theta')\nstate_bounds = list(zip(env.observation_space.low, env.observation_space.high))\nstate_bounds[1] = [-0.5, 0.5] # Limit x velocity as it only goes from -0.5 to 0.5\nstate_bounds[3] = [-math.radians(50), math.radians(50)] # Limit theta as it goes from -50 to 50 degrees\n\n# Create the Q-table\nq_table = np.zeros(NUMBER_OF_BUCKETS + (env.action_space.n,))\n  \n# Train the agent\nfor episode in range(episodes):\n done = False\n state = env.reset()\n\n # Discretize the state\n state_discrete = [np.digitize(s, bins=bounds) for s, bounds in zip(state, state_bounds)]\n \n # Repeat until the episode is done\n while not done:\n # Choose an action\n action = np.argmax(q_table[state_discrete])\n\n# Perform the action\n state, reward, done, _ = env.step(action)\n  \n# Discretize the new state\n state_discrete = [np.digitize(s, bins=bounds) for s, bounds in zip(state, state_bounds)]\n\n# Update the Q-table\n q_table[state_discrete + (action,)] = reward + discount * np.max(q_table[state_discrete])\n\n# Print out the Q-table\nprint(q_table) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_substring(string, k):\n    start, distinct, max_length = 0, 0, 0\n    frequency = {}\n    for end in range(len(string)):\n        frequency[string[end]] = frequency.get(string[end], 0) + 1\n        if frequency[string[end]] == 1:\n            distinct += 1\n \n        while distinct > k:\n            frequency[string[start]] -= 1\n            if frequency[string[start]] == 0:\n                distinct -= 1\n            start += 1\n \n        max_length = max(max_length, end - start + 1)\n    return max_length\n\nprint(longest_substring(string, k)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from textblob import TextBlob\n\ntext = \"This movie was an amazing experience!\"\nblob = TextBlob(text)\nprint(\"Sentiment score: \", blob.sentiment.polarity) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_common_elements(list1, list2):\n    common_elements = []\n\n    for e1 in list1:\n        for e2 in list2:\n            if e1 == e2:\n               common_elements.append(e1)\n\n    return common_elements\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [2, 4, 6, 8]\n\nprint(find_common_elements(list1, list2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: text_without_whitespace = \"\".join(text.split()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route(\"/emailcheck/<string:email>\", methods=['GET'])\ndef validate_email(email):\n\n if re.match(r\"^[A-Za-z0-9\\.\\+_-]+@[A-Za-z0-9\\._-]+\\.[a-zA-Z]*$\", email):\n  return jsonify({'email': email, 'valid': True})\n else:\n  return jsonify({'email': email, 'valid': False})\n\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\ndf = pd.DataFrame([[1, 2], [3, 4], [5, 6]])\n\nquery = 'SELECT SUM(NUM1 + NUM2) AS SUM_NUM FROM df'\n\nsum_num = pd.read_sql_query(query, con=df.to_sql('df'))\nprint(sum_num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Valid but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortAlphabetically(arr):\n    arr.sort()\n    return arr\n\nprint(sortAlphabetically([\"apple\",\"banana\",\"grapes\"])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countOddNumbers(arr):\n    count = 0\n    for num in arr:\n        if num % 2 != 0:\n            count += 1\n    return count\n\ncount = countOddNumbers([2, 3, 5, 7])\nprint(\"Number of odd numbers found: \" + str(count)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# Load data\ndata = pd.read_csv(\"data.csv\")\n\n# Split data into training and test sets\nX = data[['height', 'weight']]\ny = data['target']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Evaluate model\nscore = model.score(X_test, y_test)\nprint(\"Model Accuracy: {:.2f}\".format(score)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class House(object):\n    def __init__(self, num_rooms, square_feet, num_floors):\n        self.num_rooms = num_rooms\n        self.square_feet = square_feet\n        self.num_floors = num_floors\n\n    def get_info(self):\n        # return house info\n        return \"This house has {} rooms, is {} square feet, and has {} floors.\".format(self.num_rooms, self.square_feet, self.num_floors) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(arr, x): \n    for i in range (0, len(arr)): \n        if arr[i] == x: \n            return i  \n    return -1\n  \n# Test array \narr = [ 2, 3, 4, 10, 40 ] \nx = 10\n  \n# Function call \nresult = linear_search(arr, x) \n  \nif(result == -1): \n    print(\"Element is not present in array\") \nelse: \n    print(\"Element is present at index\", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def levenshteinDistance(str1, str2): \n    n = len(str1)\n    m = len(str2)\n    dp = [[0 for x in range(m + 1)] for x in range(n + 1)] \n  \n    # Fill d[][] in bottom up manner \n    for i in range(n + 1): \n        for j in range(m + 1): \n  \n            # If first string is empty \n            if i == 0: \n                dp[i][j] = j\n  \n            # If second string is empty \n            elif j == 0: \n                dp[i][j] = i\n  \n            # If last characters are same \n            elif str1[i-1] == str2[j-1]: \n                dp[i][j] = dp[i-1][j-1] \n  \n            # If last characters are not same \n            else: \n                dp[i][j] = 1 + min(dp[i][j-1], # try adding to the right\n                                   dp[i-1][j],  # try deleting \n                                   dp[i-1][j-1]) # try changing\n  \n    return dp[n][m] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nx = random.randint(5, 20)\nprint(x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findMinMax(num1, num2, num3):\n    if num1 >= num2 and num1 >= num3:\n        maximum = num1\n        minimum = num3 if num3 <= num2 else num2\n    elif num2 >= num1 and num2 >= num3:\n        maximum = num2\n        minimum = num1 if num1 <= num3 else num3\n    else:\n        maximum = num3\n        minimum = num1 if num1 <= num2 else num2\n    return (maximum, minimum)\n\nnum1 = int(input(\"Enter first number: \"))\nnum2 = int(input(\"Enter second number: \"))\nnum3 = int(input(\"Enter third number: \"))\n\nmaximum, minimum = findMinMax(num1, num2, num3)\n\nprint(\"Maximum of three numbers is:\", maximum)\nprint(\"Minimum of three numbers is:\", minimum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentence = 'The flight was really terrible.'\n\n# Initialize the sentiment analyzer\nsia = SentimentIntensityAnalyzer()\n\n# Use the sentiment analyzer to classify the sentence\nscores = sia.polarity_scores(sentence)\n\n# Print the result\nprint(scores[\"compound\"] > 0.0)\n# Output: False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # List of numbers which are multiples of both 3 and 5 between 0 and 100\nmultiples_3_5 = [] \n\n# Iterate over all numbers between 0 and 100 \nfor num in range(101): \n \n    # Check for multiples of both 3 and 5 \n    if num % 3 == 0 and num % 5 == 0: \n        multiples_3_5.append(num) \n      \nprint(multiples_3_5) but is not the same. just give one example and only return the code."}
