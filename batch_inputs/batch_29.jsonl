{"prompt": "make some code that functions the same as the following code: class Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, x): \n        self.items.append(x) \n\n    def pop(self): \n        if not self.is_empty():\n            return self.items.pop()\n        else:\n            return None\n        \n    def is_empty(self): \n        return len(self.items) == 0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Bubble sort function in Python\ndef bubble_sort(arr):\n    n = len(arr)\n    # Traverse through all array elements\n    for i in range(n):\n        # Last i elements are already in place\n        for j in range(0, n-i-1):\n            # Compare the adjacent elements\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\n# Input list\narr = [3, 5, 4, 1, 6]\n\n# Function call\nbubble_sort(arr)\n\n# Print the sorted array\nprint (\"Sorted array is:\")\nfor i in range(len(arr)):\n    print (\"%d\" %arr[i]), \n# Output: 1 3 4 5 6 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to print the first  \n# 5 prime numbers \n  \n# function to generate and print first  \n# 5 prime numbers \ndef display_first_five_primes(): \n    print(\"The first five prime numbers are:\") \n    primenums = [2] \n    num = 3 \n    while len(primenums) < 5: \n        for p in primenums: \n            if (num % p) == 0: \n                break \n        else: \n            primenums.append(num) \n        num += 1 \n  \n    for i in primenums: \n        print(i) \n  \n# Driver code \nif __name__ == '__main__': \n    display_first_five_primes() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n*factorial(n-1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing import sequence\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Embedding, LSTM\n\ncorpus = [\"It is a wonderful day today\",\n\"the weather is extremely bad today\"]\nlabels = np.array([1, 0])\n\n# tokenize corpus\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts(corpus)\nX = tokenizer.texts_to_sequences(corpus)\nX = sequence.pad_sequences(X, maxlen=10)\n\n# build model\nmodel = Sequential()\nmodel.add(Embedding(len(tokenizer.word_index)+1, 100, input_length=10))\nmodel.add(LSTM(100, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# train the model\nmodel.fit(X, labels, batch_size=1, epochs=20)\n\n# test the model\ntest_sentence = \"today the weather is horrible\"\ntest_tokenized = tokenizer.texts_to_sequences([test_sentence])\ntest_tokenized = sequence.pad_sequences(test_tokenized, maxlen=10)\npredict = model.predict(test_tokenized)\nprint(predict[0]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers = [1, 2, 3 , 4]\n\nfor num in numbers:\n  print(num*2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to sort dictionary by value\ndef sort_dict(d): \n    # Create a list of tuples\n    # sorted by index 1 i.e. value field \n    l = [(k, d[k]) for k in sorted(d, key = d.get, reverse = True)] \n      \n    # Create a dictionary from the list  \n    # of tuples for sorted value \n    od = OrderedDict(l) \n  \n    return od \n\n# Sample Dictionary\nd = {'name':'John', 'age':26, 'salary':3000}\n\n# Calling sort_dict function\nprint(sort_dict(d)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_word(sentence, word):\n new_sentence = []\n words = sentence.split()\n for w in words:\n if w != word:\n new_sentence.append(w)\n return \" \".join(new_sentence) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def time_to_seconds(hours, minutes, seconds): \n     return (hours * 3600) + (minutes * 60) + seconds\n \nresult = time_to_seconds(2, 3, 4) \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import http.server\nimport datetime\n\nport = 8888\n\nclass MyHandler(http.server.BaseHTTPRequestHandler):\n def do_GET(self):\n self.send_response(200)\n self.send_header('Content-type', 'text/html')\n self.end_headers()\n self.wfile.write((\"\"\"\n<html>\n <head>\n <title>Static page</title>\n </head>\n <body>\n <p>The time is: {}</p>\n </body>\n</html>\n\"\"\".format(datetime.datetime.now())).encode())\n\ntry:\n server = http.server.HTTPServer(('', port), MyHandler)\n print('Server running at localhost:{}'.format(port))\n server.serve_forever()\nexcept KeyboardInterrupt:\n print('\\nServer stopped')\n server.socket.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def tic_tac_toe_heuristic(board):    \n    # check winning condition\n    win_conditions = ((0,1,2), (3,4,5), (6,7,8),\n                      (0,3,6), (1,4,7), (2,5,8), \n                      (0,4,8), (2,4,6))\n\n    winner = 0\n    for each in win_conditions:\n      if board[each[0]] == board[each[1]] == board[each[2]] == 1:\n        winner = 1\n      elif board[each[0]] == board[each[1]] == board[each[2]] == 2:\n        winner = 2\n\n    # when the game is over\n    if winner != 0:\n      return winner\n\n    # evaluate each position\n    max_eval = -2\n    best_move = None\n    for move in board:\n      if move == 0:\n        board[move] = 1\n        eval = minimax(board, 0, False)\n        board[move] = 0\n        if eval > max_eval:\n          max_eval = eval\n          best_move = move\n\n    return best_move\n\ndef minimax(board, depth, isMaximizing):\n    # check winning condition\n    win_conditions = ((0,1,2), (3,4,5), (6,7,8),\n                      (0,3,6), (1,4,7), (2,5,8), \n                      (0,4,8), (2,4,6))\n\n    winner = 0\n    for each in win_conditions:\n      if board[each[0]] == board[each[1]] == board[each[2]] == 1:\n        winner = 1\n      elif board[each[0]] == board[each[1]] == board[each[2]] == 2:       \n        winner = 2\n\n    # when the game is over\n    if winner != 0:\n        return (-1)**(winner == 2)*10/depth\n\n    # when there is no valid move\n    if sum((x != 0) for x in board) == 9:\n        return 0\n\n    if isMaximizing:\n        best_eval = -10\n        for move in board:\n            if move == 0:\n                board[move] = 1\n                eval = minimax(board, depth + 1, False)\n                board[move] = 0\n                best_eval = max(best_eval, eval)\n        \n        return best_eval\n    else:    \n        best_eval = 10\n        for move in board:\n            if move == 0:\n                board[move] = 2\n                eval = minimax(board, depth + 1, True)\n                board[move] = 0\n                best_eval = min(best_eval, eval)\n        \n        return best_eval\n\nboard = [0, 0, 0,\n         0, 0, 0,\n         0, 0, 0]\n\nbest_move = tic_tac_toe_heuristic(board)\nprint(best_move) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Greedy algorithm to solve scheduling problem\n\n#Optimal order\norder = []\n\n#Sort jobs according to end time\npro_idx = [i[0] for i in sorted(enumerate(End), key=lambda x:x[1])]\n\n#Calculate result\ntotalProfit = 0\ncurr_time = 0\nfor i in range(len(pro_idx)):\n    #Choose job in optimal order\n    idx = pro_idx[i]\n \n    #Check if job starts later than current time\n    start = Start[idx]\n    if start >= curr_time:\n        order.append(idx + 1)\n        curr_time = End[idx]\n        totalProfit += Profit[idx]\n \n#Print results\nprint(\"Optimal order:\", order)\nprint(\"Maximum profit:\", totalProfit) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter as tk\n\nroot = tk.Tk()\nroot.title(\"GUI Application\")\n\ntk.Label(root, text=\"Enter your name:\").grid(row=0, column=0, sticky=\"W\")\nname_entry = tk.Entry(root)\nname_entry.grid(row=0, column=1)\n\ndef on_button_click():\n    name = name_entry.get()\n    tk.Label(root, text=\"Hello \"+name).grid(row=1, column=1)\n\ntk.Button(root, text=\"Click Me\", command=on_button_click).grid(row=0, column=2)\n\nroot.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\nmonth = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"]\nsales = [312, 443, 235, 564, 234, 431]\n\nplt.bar(month, sales)\n\nplt.xlabel(\"Month\")\nplt.ylabel(\"Sales\")\n\nplt.title(\"Monthly Sales\")\n\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Define the equation\ndef calc_fitness(x): \n return x**2 + x - 13\n\n# Initialize the population\npopulation = []\n\nfor _ in range(10):\n population.append(random.uniform(0, 10))\n\n# Define the mutation function\ndef mutate(x):\n return x + random.uniform(-1, 1)\n\n# Perform genetic algorithm\nwhile True:\n # Calculate the fitness of each chromosome in the population\n population_fitness = [calc_fitness(x) for x in population]\n\n # Check if any chromosome matches the equation\n if 0 in population_fitness:\n  break\n\n # Select the fittest chromosome\n fittest_idx = population_fitness.index(min(population_fitness))\n fittest = population[fittest_idx]\n\n # Create a new generation by mutating the fittest chromosome\n new_generation = [mutate(fittest) for _ in range(10)]\n\n # Replace the old population with the new one\n population = new_generation\n\n# Print the fittest chromosome\nprint(f'Solution: {fittest}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [1, 2, 3, 5, 7]\nelement = 4\n\ndef contains(arr, element):\n  for e in arr:\n    if e == element:\n      return True\n  return False\n\nresult = contains(arr, element)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def two_sum_digits():\n for i in range(0, 10):\n  for j in range(0, 10):\n   print(i + j) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def format_number(number, decimal_places):\n return f\"{number:.{decimal_places}f}\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n def __init__(self, name, student_id, courses):\n self.name = name\n self.student_id = student_id\n self.courses = courses\n\nclass Course:\n def __init__(self, title, course_id, credits):\n self.title = title\n self.course_id = course_id\n self.credits = credits\n\nclass Database:\n def __init__(self):\n self.students = []\n self.courses = []\n \n def add_student(self, student):\n self.students.append(student)\n \n def add_course(self, course):\n self.courses.append(course) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Input web address of the book\nurl = 'https://www.example.com/book.html'\n\n# Download the page\npage = requests.get(url)\n\n# Parse the HTML\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Extract the text\ntext = soup.find_all('p')\nfor p in text:\n print(p.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import collections\n\ndef find_frequent_words(text):\n words = text.split()\n word_counts = collections.Counter(words)\n \n # Get the most frequent words\n most_frequent = word_counts.most_common()\n \n return most_frequent\n\n# Example output: [('This', 3), ('is', 3), ('a', 1), ('sentence.', 3), ......] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generateArray():\n arr = [[0 for i in range(5)] for j in range(5)]\n \n for i in range (5):\n for j in range (5):\n  arr[i][j] = random.randint(0,9)\n  \n return arr\n\nprint(generateArray()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -*- coding: utf-8 -*-\n\nimport pycurl\nimport re\n\nfrom module.common.json_layer import json_loads\nfrom module.network.HTTPRequest import BadHeader\nfrom module.plugins.internal.AdsCaptcha import AdsCaptcha\nfrom module.plugins.internal.ReCaptcha import ReCaptcha\nfrom module.plugins.internal.SolveMedia import SolveMedia\nfrom module.plugins.internal.SimpleHoster import SimpleHoster, create_getInfo\n\n\nclass RapidgatorNet(SimpleHoster):\n    __name__    = \"RapidgatorNet\"\n    __type__    = \"hoster\"\n    __version__ = \"0.34\"\n\n    __pattern__ = r'http://(?:www\\.)?(rapidgator\\.net|rg\\.to)/file/\\w+'\n    __config__  = [(\"use_premium\", \"bool\", \"Use premium account if available\", True)]\n\n    __description__ = \"\"\"Rapidgator.net hoster plugin\"\"\"\n    __license__     = \"GPLv3\"\n    __authors__     = [(\"zoidberg\", \"zoidberg@mujmail.cz\"),\n                       (\"chrox\", None),\n                       (\"stickell\", \"l.stickell@yahoo.it\"),\n                       (\"Walter Purcaro\", \"vuolter@gmail.com\")]\n\n\n    API_URL = \"http://rapidgator.net/api/file\"\n\n    COOKIES = [(\"rapidgator.net\", \"lang\", \"en\")]\n\n    NAME_PATTERN    = r'<title>Download file (?P<N>.*)</title>'\n    SIZE_PATTERN    = r'File size:\\s*<strong>(?P<S>[\\d.,]+) (?P<U>[\\w^_]+)</strong>'\n    OFFLINE_PATTERN = r'>(File not found|Error 404)'\n\n    JSVARS_PATTERN = r'\\s+var\\s*(startTimerUrl|getDownloadUrl|captchaUrl|fid|secs)\\s*=\\s*\\'?(.*?)\\'?;'\n\n    PREMIUM_ONLY_PATTERN = r'You can download files up to|This file can be downloaded by premium only<'\n    ERROR_PATTERN        = r'You have reached your (?:daily|hourly) downloads limit'\n    WAIT_PATTERN         = r'(Delay between downloads must be not less than|Try again in).+'\n\n    LINK_FREE_PATTERN = r'return \\'(http://\\w+.rapidgator.net/.*)\\';'\n\n    RECAPTCHA_PATTERN  = r'\"http://api\\.recaptcha\\.net/challenge\\?k=(.*?)\"'\n    ADSCAPTCHA_PATTERN = r'(http://api\\.adscaptcha\\.com/Get\\.aspx[^\"\\']+)'\n    SOLVEMEDIA_PATTERN = r'http://api\\.solvemedia\\.com/papi/challenge\\.script\\?k=(.*?)\"'\n\n\n    def setup(self):\n        if self.account:\n            self.sid = self.account.getAccountInfo(self.user).get('sid', None)\n        else:\n            self.sid = None\n\n        if self.sid:\n            self.premium = True\n\n        self.resumeDownload = self.multiDL = self.premium\n        self.chunkLimit     = 1\n\n\n    def api_response(self, cmd):\n        try:\n            json = self.load('%s/%s' % (self.API_URL, cmd),\n                             get={'sid': self.sid,\n                                  'url': self.pyfile.url}, decode=True)\n            self.logDebug(\"API:%s\" % cmd, json, \"SID: %s\" % self.sid)\n            json = json_loads(json)\n            status = json['response_status']\n            msg = json['response_details']\n\n        except BadHeader, e:\n            self.logError(\"API: %s\" % cmd, e, \"SID: %s\" % self.sid)\n            status = e.code\n            msg = e\n\n        if status == 200:\n            return json['response']\n\n        elif status == 423:\n            self.account.empty(self.user)\n            self.retry()\n\n        else:\n            self.account.relogin(self.user)\n            self.retry(wait_time=60)\n\n\n    def handlePremium(self, pyfile):\n        self.api_data = self.api_response('info')\n        self.api_data['md5'] = self.api_data['hash']\n\n        pyfile.name = self.api_data['filename']\n        pyfile.size = self.api_data['size']\n\n        self.link = self.api_response('download')['url']\n\n\n    def handleFree(self, pyfile):\n        jsvars = dict(re.findall(self.JSVARS_PATTERN, self.html))\n        self.logDebug(jsvars)\n\n        self.req.http.lastURL = pyfile.url\n        self.req.http.c.setopt(pycurl.HTTPHEADER, [\"X-Requested-With: XMLHttpRequest\"])\n\n        url = \"http://rapidgator.net%s?fid=%s\" % (\n            jsvars.get('startTimerUrl', '/download/AjaxStartTimer'), jsvars['fid'])\n        jsvars.update(self.getJsonResponse(url))\n\n        self.wait(jsvars.get('secs', 45), False)\n\n        url = \"http://rapidgator.net%s?sid=%s\" % (\n            jsvars.get('getDownloadUrl', '/download/AjaxGetDownload'), jsvars['sid'])\n        jsvars.update(self.getJsonResponse(url))\n\n        self.req.http.lastURL = pyfile.url\n        self.req.http.c.setopt(pycurl.HTTPHEADER, [\"X-Requested-With:\"])\n\n        url = \"http://rapidgator.net%s\" % jsvars.get('captchaUrl', '/download/captcha')\n        self.html = self.load(url)\n\n        for _i in xrange(5):\n            m = re.search(self.LINK_FREE_PATTERN, self.html)\n            if m:\n                self.link = m.group(1)\n                break\n            else:\n                captcha = self.handleCaptcha()\n\n                if not captcha:\n                    self.error(_(\"Captcha pattern not found\"))\n\n                response, challenge  = captcha.challenge()\n\n                self.html = self.load(url, post={'DownloadCaptchaForm[captcha]': \"\",\n                                                 'adcopy_challenge'            : challenge,\n                                                 'adcopy_response'             : response})\n\n                if \"The verification code is incorrect\" in self.html:\n                    self.invalidCaptcha()\n                else:\n                    self.correctCaptcha()\n        else:\n            self.error(_(\"Download link\"))\n\n\n    def handleCaptcha(self):\n        for klass in (AdsCaptcha, ReCaptcha, SolveMedia):\n            inst = klass(self)\n            if inst.detect_key():\n                return inst\n\n\n    def getJsonResponse(self, url):\n        res = self.load(url, decode=True)\n        if not res.startswith('{'):\n            self.retry()\n        self.logDebug(url, res)\n        return json_loads(res)\n\n\ngetInfo = create_getInfo(RapidgatorNet)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n# coding=utf-8\n\nimport os\nimport sys\nimport subprocess\nimport urllib\nimport zipfile\nimport platform\nimport shlex\nimport time\nimport json\nimport datetime\n\n# =======================================================================================================================\n#           Project paths\n# =======================================================================================================================\n# COMPILER_VERSION = '20161024'\nCOMPILER_VERSION = '20180204'\nPROJECT_PATH = os.path.abspath(os.path.dirname(__file__))\nCONTRIB_PATH = os.path.join(PROJECT_PATH, 'contrib')\nCOMPILER_PATH = os.path.join(CONTRIB_PATH, 'compiler', 'closure-compiler-v%s.jar' % COMPILER_VERSION)\nSRC_PATH = os.path.join(PROJECT_PATH, 'src')\nOUT_PATH = os.path.join(PROJECT_PATH, 'out')\nCLOSURE_LIBRARY_PATH = os.path.join(CONTRIB_PATH, 'closure-library')\nCLOSURE_SOURCE_PATH = os.path.join(CLOSURE_LIBRARY_PATH, 'closure', 'goog')\nCLOSURE_LINTER_WRAPPER_PATH = os.path.join(CONTRIB_PATH, 'closure-linter-wrapper')\nCLOSURE_BIN_PATH = os.path.join(CLOSURE_LIBRARY_PATH, 'closure', 'bin')\nDEPS_WRITER_PATH = os.path.join(CLOSURE_BIN_PATH, 'build', 'depswriter.py')\n\nPYTHON = 'python'\n\n\n# =======================================================================================================================\n#                            Synchronize contributions.\n# =======================================================================================================================\ndef __has_closure_library():\n    return os.path.exists(CLOSURE_LIBRARY_PATH)\n\n\ndef __has_closure_compiler():\n    return os.path.exists(COMPILER_PATH)\n\n\ndef __has_closure_linter_wrapper():\n    return os.path.exists(CLOSURE_LINTER_WRAPPER_PATH)\n\n\ndef __has_closure_linter():\n    has_lint = True\n    try:\n        subprocess.Popen(['gjslint'], shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    except StandardError:\n        has_lint = False\n\n    return has_lint\n\n\ndef __ensure_dir_exists(path):\n    if not os.path.exists(path):\n        os.mkdir(path)\n\n\ndef __need_sync_contrib():\n    return not __has_closure_library() \\\n           or not __has_closure_compiler() \\\n           or not __has_closure_linter_wrapper() \\\n           or not __has_closure_linter()\n\n\ndef __sync_contrib():\n    t = time.time()\n    __ensure_dir_exists(CONTRIB_PATH)\n\n    subprocess.call(['git', 'submodule', 'init'])\n    subprocess.call(['git', 'submodule', 'update'])\n\n    # Download closure compiler\n    if not os.path.exists(COMPILER_PATH):\n        print 'Downloading Google Closure Compiler v.' + COMPILER_VERSION\n        try:\n            __download_and_unzip_from_http(\n                \"http://dl.google.com/closure-compiler/compiler-%s.zip\" % COMPILER_VERSION,\n                'compiler'\n            )\n        except StandardError as e:\n            print e\n            print 'Failed'\n            return False\n\n    # Install closure linter\n    if not __has_closure_linter():\n        if not __install_closure_linter():\n            return False\n\n    print 'Environment ready. Time spent: {:.3f}s\\n'.format(time.time() - t)\n    return True\n\n\ndef __download_and_unzip_from_http(from_url, dir_name):\n    z_obj_path = os.path.join(CONTRIB_PATH, dir_name + '.zip')\n\n    # download zip archive from url\n    if not os.path.exists(z_obj_path):\n        urllib.urlretrieve(\n            from_url,\n            z_obj_path\n        )\n\n    # extract zip archive\n    target_path = os.path.join(CONTRIB_PATH, dir_name)\n    __ensure_dir_exists(target_path)\n    z_obj = zipfile.ZipFile(z_obj_path)\n    z_obj.extractall(path=target_path)\n    z_obj.close()\n\n    # remove archive file\n    os.remove(z_obj_path)\n    return True\n\n\ndef __install_closure_linter():\n    print 'Installing Google Closure Linter v.2.3.9'\n    commands = [] if platform.system() == 'Windows' else ['sudo']\n    commands.append('easy_install')\n    commands.append('https://closure-linter.googlecode.com/files/closure_linter-2.3.9.tar.gz')\n    try:\n        subprocess.call(commands)\n    except StandardError:\n        print 'Failed: you should install easy_install module for python first'\n        return False\n    print 'Success'\n    return True\n\n\ndef sync_required(func):\n    def wrapper():\n        if __need_sync_contrib():\n            __sync_contrib()\n        return func()\n\n    return wrapper\n\n\n# =======================================================================================================================\n#           Build project\n# =======================================================================================================================\ndef __get_version():\n    f = open(os.path.join(PROJECT_PATH, 'package.json'));\n    package_json = json.loads(f.read());\n    f.close()\n    return package_json['version']\n\n\ndef __get_file_overview():\n    return \"/**\\n * GraphicsJS is a lightweight JavaScript graphics library with an intuitive API, based on SVG/VML technology.\\n * Version: %s (%s)\\n * License: BSD 3-clause\\n * Copyright: AnyChart.com %s. All rights reserved.\\n */\\n\" % (__get_version(), datetime.datetime.now().strftime(\"%Y-%m-%d\"), str(datetime.datetime.now().year))\n\n\ndef __getNotOptimizedCompilerArgs():\n    compilerArgs = [\n        '--compilation_level WHITESPACE_ONLY',\n        '--formatting PRETTY_PRINT'\n    ]\n    return compilerArgs\n\n\ndef __getOptimizedCompilerArgs():\n    compilerArgs = [\n        '--charset UTF-8',\n        '--compilation_level ADVANCED_OPTIMIZATIONS',\n\n        '--process_closure_primitives',\n\n        '--language_in ECMASCRIPT3',\n        '--language_out ECMASCRIPT3',\n\n        '--hide_warnings_for \"contrib/closure-library\"',\n        '--assume_function_wrapper',\n        '--use_types_for_optimization true',\n\n        '--output_wrapper \"' + __get_file_overview() + '(function(){%output%})();\"',\n        '--env BROWSER',\n\n        '--extra_annotation_name \"includeDoc\"',\n        '--extra_annotation_name \"illustration\"',\n        '--extra_annotation_name \"illustrationDesc\"',\n        '--extra_annotation_name \"ignoreDoc\"',\n        '--extra_annotation_name \"propertyDoc\"',\n        '--extra_annotation_name \"shortDescription\"',\n\n        '--warning_level VERBOSE',\n\n        '--jscomp_warning accessControls',\n        '--jscomp_warning ambiguousFunctionDecl',\n        '--jscomp_warning checkDebuggerStatement',\n        '--jscomp_warning checkEventfulObjectDisposal',\n        '--jscomp_warning checkRegExp',\n        '--jscomp_warning checkTypes',\n        '--jscomp_warning checkVars',\n        '--jscomp_warning closureDepMethodUsageChecks',\n        '--jscomp_warning conformanceViolations',\n        '--jscomp_warning const',\n        '--jscomp_warning constantProperty',\n        '--jscomp_warning deprecated',\n        '--jscomp_warning deprecatedAnnotations',\n        '--jscomp_warning duplicate',\n        '--jscomp_warning duplicateMessage',\n        '--jscomp_warning es3',\n        '--jscomp_warning es5Strict',\n        '--jscomp_warning externsValidation',\n        '--jscomp_off extraRequire',\n        '--jscomp_warning fileoverviewTags',\n        '--jscomp_warning functionParams',\n        '--jscomp_warning globalThis',\n        '--jscomp_warning internetExplorerChecks',\n        '--jscomp_warning invalidCasts',\n        '--jscomp_warning misplacedTypeAnnotation',\n        '--jscomp_warning missingGetCssName',\n        '--jscomp_off missingOverride',\n        '--jscomp_warning missingPolyfill',\n        '--jscomp_warning missingProperties',\n        '--jscomp_warning missingProvide',\n        '--jscomp_warning missingRequire',\n        '--jscomp_warning missingReturn',\n        '--jscomp_warning msgDescriptions',\n        '--jscomp_off newCheckTypes',\n        '--jscomp_off newCheckTypesExtraChecks',\n        '--jscomp_off nonStandardJsDocs',\n        '--jscomp_off reportUnknownTypes',\n        '--jscomp_warning suspiciousCode',\n        '--jscomp_warning strictModuleDepCheck',\n        '--jscomp_warning typeInvalidation',\n        '--jscomp_warning undefinedNames',\n        '--jscomp_warning undefinedVars',\n        '--jscomp_warning unknownDefines',\n        '--jscomp_off unusedLocalVariables',\n        '--jscomp_off unusedPrivateMembers',\n        '--jscomp_warning uselessCode',\n        '--jscomp_off useOfGoogBase',\n        '--jscomp_warning underscore',\n        '--jscomp_warning visibility',\n        '--jscomp_warning lintChecks',\n    ]\n    return compilerArgs\n\n\ndef __getDefaultCompilerArgs(outputFile):\n    result = [\n        'java -jar',\n        COMPILER_PATH,\n        '--js=\"%s\"' % os.path.join(SRC_PATH, '**.js'),\n        '--js=\"%s\"' % os.path.join(CLOSURE_SOURCE_PATH, '**.js'),\n        '--define \"goog.DEBUG=false\"',\n        '--js_output_file ' + outputFile,\n        '--dependency_mode=STRICT',\n        '--entry_point acgraphentry',\n        '--hide_warnings_for=\"goog\"'\n    ]\n    return result\n\n\n@sync_required\ndef __compileBinary():\n    __ensure_dir_exists(OUT_PATH)\n\n    t = time.time()\n    outputFileName = os.path.join(OUT_PATH, 'graphics.min.js')\n    print 'Building optimized Graphics library js to ' + outputFileName\n    commands = __getDefaultCompilerArgs(outputFileName) + \\\n               __getOptimizedCompilerArgs()\n    success = (__call_compiler(commands) == 0)\n    res = 'Success' if success else 'Failed'\n    print res + \". Time spent: {:.3f}s\\n\".format(time.time() - t)\n\n    return success\n\n\n@sync_required\ndef __compilePlain():\n    __ensure_dir_exists(OUT_PATH)\n\n    t = time.time()\n    outputFileName = os.path.join(OUT_PATH, 'graphics.js')\n    print 'Building plain Graphics library js to ' + outputFileName\n    commands = __getDefaultCompilerArgs(outputFileName) + \\\n               __getNotOptimizedCompilerArgs()\n    success = (__call_compiler(commands) == 0)\n    res = 'Success' if success else 'Failed'\n    print res + \". Time spent: {:.3f}s\\n\".format(time.time() - t)\n\n    return success\n\n\ndef __call_compiler(commands):\n    commands = \" \".join(commands).replace('\\\\', '\\\\\\\\')\n    commands = shlex.split(commands)\n    # print commands\n    p = subprocess.Popen(commands, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    (output, err) = p.communicate()\n    retcode = p.poll()\n    if len(output) > 0:\n        print output\n    return retcode\n\n\n# =======================================================================================================================\n#           Build deps\n# =======================================================================================================================\n@sync_required\ndef __buildDepsFromCommandLine():\n    t = time.time()\n    output_file = os.path.join(SRC_PATH, 'deps.js')\n    success = (__callDepsWriter(SRC_PATH, output_file, 'whole project') == 0)\n    res = 'Success' if success else 'Failed'\n    print res + \". Time spent: {:.3f}s\\n\".format(time.time() - t)\n    return success\n\n\ndef __callDepsWriter(root, output_file, bundle_name):\n    print 'Writing deps file to ' + output_file\n    return subprocess.call([\n        PYTHON,\n        DEPS_WRITER_PATH,\n        '--root_with_prefix=' + root + ' ' + os.path.relpath(root, CLOSURE_SOURCE_PATH),\n        '--output_file=' + output_file\n    ])\n\n\n# =======================================================================================================================\n#                            Linter.\n# =======================================================================================================================\n@sync_required\ndef __lintFromCommandLine():\n    t = time.time()\n    success = (__callLinter(SRC_PATH) == 0)\n    res = 'Success' if success else 'Failed'\n    print res + \". Time spent: {:.3f}s\\n\".format(time.time() - t)\n    return success\n\n\ndef __callLinter(root):\n    print 'Linting ' + root + ' directory'\n    return subprocess.call([\n        PYTHON,\n        os.path.join(CLOSURE_LINTER_WRAPPER_PATH, 'gjslint.py'),\n        '--flagfile',\n        'gjslint.cfg',\n        '-r',\n        root\n    ])\n\n\n# =======================================================================================================================\n#                            JSDoc auto fix.\n# =======================================================================================================================\n@sync_required\ndef __autofixFromCommandLine():\n    t = time.time()\n    success = (__callAutoFix(SRC_PATH) == 0)\n    res = 'Success' if success else 'Failed'\n    print res + \". Time spent: {:.3f}s\\n\".format(time.time() - t)\n    return res\n\n\ndef __callAutoFix(root):\n    print 'Trying to fix ' + root + ' directory'\n    return subprocess.call([\n        PYTHON,\n        os.path.join(CLOSURE_LINTER_WRAPPER_PATH, 'fixjsstyle.py'),\n        '--flagfile',\n        'gjslint.cfg',\n        '-r',\n        root\n    ])\n\n\n# =======================================================================================================================\n#                            Help\n# =======================================================================================================================\ndef __printHelp():\n    print \"Build script commands:\\n\" \\\n          \"\\n\" \\\n          \"without params   Prepares the environment, than lints and builds everything.\\n\" \\\n          \"\\n\" \\\n          \"contrib          Prepares buildin environment.\\n\" \\\n          \"\\n\" \\\n          \"deps             Build ./src/deps.js file, needed to run the library in uncompiled mode.\\n\" \\\n          \"\\n\" \\\n          \"compile          Builds the library minified js to ./out/ directory.\\n\" \\\n          \"\\n\" \\\n          \"plain            Builds the library as one file pretty-printed js to ./out/ directory.\\n\" \\\n          \"\\n\" \\\n          \"lint             Lints library sources.\\n\" \\\n          \"\\n\" \\\n          \"autofix          Tries to fix lint errors in library sources.\\n\"\n\n\n# =======================================================================================================================\n#                            Main\n# =======================================================================================================================\ndef __execMainScript():\n    print ''\n    args = sys.argv\n    if len(args) == 1:\n        success = __sync_contrib() and \\\n                  __lintFromCommandLine() and \\\n                  __buildDepsFromCommandLine() and \\\n                  __compilePlain() and \\\n                  __compileBinary()\n    elif args[1] == 'contrib':\n        success = __sync_contrib()\n    elif args[1] == 'compile':\n        success = __compileBinary()\n    elif args[1] == 'plain':\n        success = __compilePlain()\n    elif args[1] == 'deps':\n        success = __buildDepsFromCommandLine()\n    elif args[1] == 'lint':\n        success = __lintFromCommandLine()\n    elif args[1] == 'autofix':\n        success = __autofixFromCommandLine()\n    else:\n        __printHelp()\n        success = True\n    return success\n\n\nif __name__ == '__main__':\n    try:\n        success = __execMainScript()\n    except StandardError as e:\n        print e\n        success = False\n    sys.exit(0 if success else 1)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -*- coding: utf-8 -*-\n\n# MIT license\n#\n# Copyright (C) 2016 by XESS Corp.\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n# THE SOFTWARE.\n\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nimport json\nimport os\nfrom builtins import open, super\n\nfrom future import standard_library\n\nfrom . import tools  # Import EDA tool-specific stuff.\nfrom .circuit import Circuit\nfrom .common import *\nfrom .defines import *\nfrom .logger import erc_logger, get_script_name, logger\nfrom .part_query import footprint_cache\nfrom .pin import Pin\nfrom .utilities import *\n\nstandard_library.install_aliases()\n\n\nclass SkidlCfg(dict):\n    \"\"\"Class for holding SKiDL configuration.\"\"\"\n\n    CFG_FILE_NAME = \".skidlcfg\"\n\n    def __init__(self, *dirs):\n        super().__init__()\n        self.load(*dirs)\n\n    def load(self, *dirs):\n        \"\"\"Load SKiDL configuration from JSON files in given dirs.\"\"\"\n        for dir in dirs:\n            path = os.path.join(dir, self.CFG_FILE_NAME)\n            path = os.path.expanduser(path)\n            path = os.path.abspath(path)\n            try:\n                with open(path) as cfg_fp:\n                    merge_dicts(self, json.load(cfg_fp))\n            except (FileNotFoundError, IOError):\n                pass\n\n    def store(self, dir=\".\"):\n        \"\"\"Store SKiDL configuration as JSON in directory as .skidlcfg file.\"\"\"\n        path = os.path.join(dir, self.CFG_FILE_NAME)\n        path = os.path.expanduser(path)\n        path = os.path.abspath(path)\n        with open(path, \"w\") as cfg_fp:\n            json.dump(self, cfg_fp, indent=4)\n\n\ndef get_kicad_lib_tbl_dir():\n    \"\"\"Get the path to where the global fp-lib-table file is found.\"\"\"\n\n    paths = (\n        \"$HOME/.config/kicad\",\n        \"~/.config/kicad\",\n        \"%APPDATA%/kicad\",\n        \"$HOME/Library/Preferences/kicad\",\n        \"~/Library/Preferences/kicad\",\n    )\n    for path in paths:\n        path = os.path.normpath(os.path.expanduser(os.path.expandvars(path)))\n        if os.path.lexists(path):\n            return path\n    return \"\"\n\n\n###############################################################################\n# Globals that are used by everything else.\n###############################################################################\n\n# Get SKiDL configuration.\nskidl_cfg = SkidlCfg(\"/etc\", \"~\", \".\")\n\n# If no configuration files were found, set some default lib search paths.\nif \"lib_search_paths\" not in skidl_cfg:\n    skidl_cfg[\"lib_search_paths\"] = {tool: [\".\"] for tool in ALL_TOOLS}\n\n    # Add the location of the default KiCad part libraries.\n    try:\n        skidl_cfg[\"lib_search_paths\"][KICAD].append(os.environ[\"KICAD_SYMBOL_DIR\"])\n    except KeyError:\n        logger.warning(\n            \"KICAD_SYMBOL_DIR environment variable is missing, so the default KiCad symbol libraries won't be searched.\"\n        )\n\n    # Add the location of the default SKiDL part libraries.\n    default_skidl_libs = os.path.join(\n        os.path.dirname(os.path.abspath(__file__)), \"libs\"\n    )\n    skidl_cfg[\"lib_search_paths\"][SKIDL].append(default_skidl_libs)\n\n# Shortcut to library search paths.\nlib_search_paths = skidl_cfg[\"lib_search_paths\"]\n\n# If no configuration files were found, set some default footprint search paths.\nif \"footprint_search_paths\" not in skidl_cfg:\n    dir_ = get_kicad_lib_tbl_dir()\n    skidl_cfg[\"footprint_search_paths\"] = {tool: [dir_] for tool in ALL_TOOLS}\n\n# Cause the footprint cache to be invalidated if the footprint search path changes.\ndef invalidate_footprint_cache(self, k, v):\n    footprint_cache.reset()\n\n\nskidl_cfg[\"footprint_search_paths\"] = TriggerDict(skidl_cfg[\"footprint_search_paths\"])\nskidl_cfg[\"footprint_search_paths\"].trigger_funcs[KICAD] = invalidate_footprint_cache\n\n# Shortcut to footprint search paths.\nfootprint_search_paths = skidl_cfg[\"footprint_search_paths\"]\n\n# Set default toolset being used with SKiDL.\ndef set_default_tool(tool):\n    \"\"\"Set the ECAD tool that will be used by default.\"\"\"\n    skidl_cfg[\"default_tool\"] = tool\n\n\ndef get_default_tool():\n    return skidl_cfg[\"default_tool\"]\n\n\nif \"default_tool\" not in skidl_cfg:\n    set_default_tool(KICAD)\n\n# Make the various EDA tool library suffixes globally available.\nlib_suffixes = tools.lib_suffixes\n\n# Definitions for backup library of circuit parts.\nBACKUP_LIB_NAME = get_script_name() + \"_lib\"\nBACKUP_LIB_FILE_NAME = BACKUP_LIB_NAME + lib_suffixes[SKIDL]\n\n# Boolean controls whether backup lib will be searched for missing parts.\nQUERY_BACKUP_LIB = INITIAL_QUERY_BACKUP_LIB = True\n\n\ndef set_query_backup_lib(val):\n    \"\"\"Set the boolean that controls searching for the backup library.\"\"\"\n    global QUERY_BACKUP_LIB\n    QUERY_BACKUP_LIB = val\n\n\ndef get_query_backup_lib():\n    return QUERY_BACKUP_LIB\n\n\n# Backup lib for storing parts in a Circuit.\nbackup_lib = None\n\n\ndef set_backup_lib(lib):\n    \"\"\"Set the backup library.\"\"\"\n    global backup_lib\n    backup_lib = lib\n\n\ndef get_backup_lib():\n    return backup_lib\n\n\n@norecurse\ndef load_backup_lib():\n    \"\"\"Load a backup library that stores the parts used in the circuit.\"\"\"\n\n    global backup_lib\n\n    # Don't keep reloading the backup library once it's loaded.\n    if not backup_lib:\n        try:\n            # The backup library is a SKiDL lib stored as a Python module.\n            exec(open(BACKUP_LIB_FILE_NAME).read())\n            # Copy the backup library in the local storage to the global storage.\n            backup_lib = locals()[BACKUP_LIB_NAME]\n\n        except (FileNotFoundError, ImportError, NameError, IOError):\n            pass\n\n    return backup_lib\n\n\n# Create the default Circuit object that will be used unless another is explicitly created.\nbuiltins.default_circuit = Circuit()\n# NOCONNECT net for attaching pins that are intentionally left open.\nbuiltins.NC = default_circuit.NC  # pylint: disable=undefined-variable\n\n# Create calls to functions on whichever Circuit object is the current default.\nERC = default_circuit.ERC\nerc_assert = default_circuit.add_erc_assertion\ngenerate_netlist = default_circuit.generate_netlist\ngenerate_xml = default_circuit.generate_xml\ngenerate_schematic = default_circuit.generate_schematic\ngenerate_svg = default_circuit.generate_svg\ngenerate_graph = default_circuit.generate_graph\nreset = default_circuit.reset\nbackup_parts = default_circuit.backup_parts\n\n# Define a tag for nets that convey power (e.g., VCC or GND).\nPOWER = Pin.drives.POWER\n\n\ndef no_files(circuit=default_circuit):\n    \"\"\"Prevent creation of output files (netlists, ERC, logs) by this Circuit object.\"\"\"\n    circuit.no_files = True\n    erc_logger.stop_file_output()\n    logger.stop_file_output()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(s): \n    start = 0 \n    end = len(s) \n    string=\"\" \n\n    while end > 0: \n        string += s[end-1] \n        end -= 1\n\n    return string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_total_cost(prices, quantities):\n total = 0\n for price, quantity in zip(prices, quantities):\n total += price * quantity\n return total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_numbers(n):\n    total = 0\n    for i in range(n+1):\n        total += i\n    return total\n\nprint(sum_numbers(20)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_prime_numbers(num):\n prime_numbers = []\n for x in range(2, num):\n flag = True\n for y in prime_numbers:\n if x % y == 0:\n flag = False\n break\n if flag:\n prime_numbers.append(x)\n if len(prime_numbers) == 10\n break\n\nreturn prime_numbers\n \n# Usage\nfind_prime_numbers(100)\n# Output\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_items(items):\n    item_counter = {}\n    for item in items:\n        item_counter[item] = item_counter.get(item, 0) + 1\n    return item_counter but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_search(arr, num):\n    # define start and end point\n    start = 0 \n    end = len(arr)-1\n\n    while start <= end:\n        mid = (start + end)//2\n\n        # check if num is present at mid \n        if arr[mid] == num: \n            return mid \n\n        # If num is greater, ignore left half \n        elif arr[mid] < num: \n            start = mid + 1\n\n        # If num is smaller, ignore right half \n        else: \n            end = mid - 1\n  \n    # If we reach here, then the element was not present \n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\nimport logging as loggers\n\nimport numpy as np\nimport theano\nimport theano.tensor as T\nfrom theano.ifelse import ifelse\n\nfrom ..utils import FLOATX, dim_to_var, EPSILON\nfrom .util import wrap_core, multiple_l2_norm\nfrom ..conf import TrainerConfig\n\nlogging = loggers.getLogger(__name__)\n\ndef optimize_updates(params, gradients, config=None, shapes=None):\n    \"\"\"\n    General optimization function for Theano.\n    Parameters:\n        params - parameters\n        gradients - gradients\n        config - training config\n    Returns:\n        Theano updates\n    :type config: deepy.TrainerConfig or dict\n    \"\"\"\n    if config and isinstance(config, dict):\n        config = TrainerConfig(config)\n\n    # Clipping\n    if config:\n        clip_value = config.get(\"gradient_clipping\", None)\n\n        if clip_value:\n            clip_constant = T.constant(clip_value, dtype=FLOATX)\n\n            if config.avoid_compute_embed_norm:\n                grad_norm = multiple_l2_norm([t[1] for t in zip(params, gradients) if not t[0].name.startswith(\"W_embed\")])\n            else:\n                grad_norm = multiple_l2_norm(gradients)\n            isnan = T.or_(T.isnan(grad_norm), T.isinf(grad_norm))\n            multiplier = ifelse(grad_norm < clip_constant,\n                                T.constant(1., dtype=FLOATX), clip_constant / (grad_norm + EPSILON))\n\n            # Clip\n            clipped_gradients = []\n            for param, g in zip(params, gradients):\n                g = multiplier * g\n                if config.avoid_nan:\n                    g = T.switch(isnan, np.float32(0.1) * param, g)\n                if config.gradient_tolerance:\n                    g = ifelse(grad_norm > config.gradient_tolerance, T.zeros_like(g) + EPSILON, g)\n                clipped_gradients.append(g)\n\n            gradients = clipped_gradients\n    # Regularization\n    if config and config.weight_l2:\n        regularized_gradients = []\n        for param, grad in zip(params, gradients):\n            grad = grad + (2 * config.weight_l2 * param)\n            regularized_gradients.append(grad)\n        gradients = regularized_gradients\n\n    # Avoid nan but not computing the norm\n    # This is not recommended\n    if config and config.avoid_nan and not config.gradient_clipping:\n        logging.info(\"avoid NaN gradients\")\n        new_gradients = []\n        for grad in gradients:\n            new_grad = ifelse(T.isnan(grad).any(), T.zeros_like(grad) + EPSILON, grad)\n            new_gradients.append(new_grad)\n        gradients = new_gradients\n\n\n    # Find method\n    method = \"SGD\"\n    if config:\n        method = config.get(\"method\", method).upper()\n    # Get Function\n    func = None\n    if method in [\"SGD\", \"ADAGRAD\", \"ADADELTA\", \"FINETUNING_ADAGRAD\"]:\n        from cores.ada_family import ada_family_core\n        func = ada_family_core\n    elif method == \"ADAM\":\n        from cores.adam import adam_core\n        func = adam_core\n    elif method == \"RMSPROP\":\n        from cores.rmsprop import rmsprop_core\n        func = rmsprop_core\n    elif method == \"MOMENTUM\":\n        from cores.momentum import momentum_core\n        func = momentum_core\n\n    if not func:\n        raise NotImplementedError(\"method '%s' is not supported\" % method)\n\n    logging.info(\"optimize method=%s parameters=%s\" % (method, str(params)))\n\n    free_parameters = []\n    return_vals = wrap_core(func, config, params, gradients)\n    if type(return_vals) == list and type(return_vals[0]) == list:\n        updates, free_parameters = return_vals\n    else:\n        updates = return_vals\n\n    # No free param recording\n    if config and not config.record_free_params:\n        free_parameters = []\n\n    # Weight bound\n    if config.weight_bound:\n        logging.info(\"apply weight bound of %.2f\" % config.weight_bound)\n        new_updates = []\n        for param, update_value in updates:\n            bounded_value = (update_value * (T.abs_(update_value) <= config.weight_bound) +\n                             config.weight_bound * (update_value > config.weight_bound) +\n                             -config.weight_bound * (update_value < -config.weight_bound))\n            new_updates.append((param, bounded_value))\n        updates = new_updates\n    return updates, free_parameters\n\ndef optimize_function(params, config=None):\n    \"\"\"\n    Create a optimizing function receives gradients.\n    Parameters:\n        params - parameters\n        config - training configuration\n    Returns:\n        updating function receives gradients\n    \"\"\"\n    gs = [dim_to_var(p.ndim) for p in params]\n    updates, _ = optimize_updates(params, gs, config)\n    return theano.function(gs, [], updates=updates)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: a, b = 0, 1\nprint(\"The first 10 numbers in Fibonacci series are:\")\nwhile a < 10:\n    print(a)\n    a, b = b, a + b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_upper(strings, letter):\n    result = []\n    for string in strings:\n        if letter in string and string.upper() == string:\n            result.append(string)\n    return result\n\nstrings = ['civic', 'legion', 'elite', 'necrop', 'dark soul']\nletter = 'e'\n\nprint(sort_upper(strings, letter)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: mylist = [1,1,2,3,4,4,5,6]\n\nunique_list = []\nfor element in mylist:\n    if element not in unique_list:\n        unique_list.append(element)\n\nprint(unique_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for item in list_items:\n    print(item) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd \nfrom sklearn import tree \ndata = pd.read_csv('customer_data.csv') \nfeature_names = ['Age','Gender','Occupation','Type','City','Member since','Months on Site'] \ntarget_names = ['No','Yes'] \nX = data[feature_names].values \ny = data['Purchase'].values \n\n# Create decision tree classifier \nclf = tree.DecisionTreeClassifier() \n\n# Train the decision tree classifier \nclf = clf.fit(X, y) \n\n# Visualize the decision tree \ndot_data = tree.export_graphviz(clf, out_file=None, \n                     feature_names=feature_names,  \n                     class_names=target_names,  \n                     filled=True, rounded=True,  \n                     special_characters=True)  \nimport graphviz \ngraph = graphviz.Source(dot_data)  \ngraph but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from PIL import Image\nfrom images2gif import writeGif\n\ndef animateGif(images, filename, duration=0.1):\n    frames = []\n\n    for image in images:\n        frames.append(Image.open(image))\n\n    writeGif(filename, frames, duration=duration) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: result = []\nfor ele in list:\n    if list.count(ele) == 1:\n        result.append(ele)\nprint(result) # Output: [1, 4] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Friend:\n \n  def __init__(self, name, age, hobbies):\n    self.name = name\n    self.age = age\n    self.hobbies = hobbies\n    \n  def getName(self):\n    return self.name\n    \n  def getAge(self):\n    return self.age\n    \n  def getHobbies(self):\n    return self.hobbies but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: timetable = [\"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n\nfor day in reversed(timetable): \n    print(day) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n    \n    def get_gender(self):\n        return self.gender\n\n# Test person\nperson = Person(\"John\", 30, \"Male\")\n\n# Print person information\nprint(\"Name:\", person.get_name())\nprint(\"Age:\", person.get_age())\nprint(\"Gender:\", person.get_gender()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack:\n def __init__(self):\n  self.items = []\n \n def push(self, item):\n  self.items.append(item)\n \n def pop(self):\n  return self.items.pop()\n \n def peek(self):\n  return self.items[len(self.items)-1]\n \n def size(self):\n  return len(self.items)\n \n def isEmpty(self):\n  return self.items == [] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nrandom.randint(0, 9) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fix_string(s): \n    s = s.replace(\" \", \"\") \n    s = s.lower() \n    s = \"\".join(reversed(s)) \n    return s but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def every_other_sublist(input_list):\n sublist = []\n for i in range(len(input_list)):\n if i % 2 == 0:\n sublist.append(input_list[i])\n return sublist but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_words_by_length(sentence):\n    words = sentence.split()\n    words.sort(key=len, reverse=True)\n    return words\n\nsentence = \"This is a test sentence\"\nresult = sort_words_by_length(sentence)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nURL = \"https://www.nba.com/scores\"\npage = requests.get(URL)\n\nsoup = BeautifulSoup(page.content, 'html.parser')\n\nresults = soup.find_all('li', class_=\"score\")\n\nscores = []\nfor result in results:\n    data=result.find_all(\"span\", {'class': 'scoreboardScore'})\n    scores.append([d.text for d in data])\n\nwith open(\"scores.txt\", \"w\") as f:\n    for score in scores:\n        f.write(\" \".join(score) + \"\\n\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insertionSort(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key \n\narr = [9, 4, 7, 2, 3]\ninsertionSort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]), but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import cv2\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\n \n#Creating the model\nmodel = Sequential()\n \n#Adding the first layer\nmodel.add(Conv2D(32, (3, 3), input_shape=(64, 64, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n \n#Adding the second layer\nmodel.add(Conv2D(32, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n \n#Adding the third layer\nmodel.add(Conv2D(64, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n \n#Flattening Layer\nmodel.add(Flatten())\nmodel.add(Dense(128))\nmodel.add(Activation('relu'))\n \n#Output Layer\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))\n \n#Compiling the model\nmodel.compile(loss='binary_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])\n \n#Train the model\nmodel.fit_generator(training_set,\n                         steps_per_epoch=1000,\n                         epochs=25,\n                         validation_data=test_set,\n                         validation_steps=200)\n \n#Prediction\ndef predict(path):\n img_array = cv2.imread(path)\n img_array = cv2.resize(img_array, (64, 64))\n img_array = np.array(img_array).reshape(-1, 64, 64, 3)\n predicted_array = model.predict(img_array)\n if predicted_array[0][0] == 1:\n  print('Face Detected')\n else:\n  print('Face not detected') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: table = {\n    \"Column1\": [1, 2, 3],\n    \"Column2\": [\"A\", \"B\", \"C\"],\n    \"Column3\": [True, False, False]\n    } but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class FrequencyCounter:\n def __init__(self, string):\n  self.string = string\n  \n def calculate_frequency(self):\n  frequency_dict = {}\n  for char in self.string:\n   if char in frequency_dict:\n    frequency_dict[char] += 1\n   else:\n    frequency_dict[char] = 1\n  return frequency_dict\n   \n# Use\nfrequency_counter = FrequencyCounter(string)\nfrequency_dict = frequency_counter.calculate_frequency()\nprint(frequency_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Hash tables (also called hash maps) are Python data structures used to store key-value pairs. A hash table uses a hash function to compute the index of an item stored in the table, and then uses this index to store and quickly retrieve the item. The hash function takes the key and generates a value called a hash(or index). This hash is used to store the item in the corresponding position in the hash table. The item can then be quickly accessed by providing the key to the hash table. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.neighbors import KNeighborsClassifier\n\ndf = pd.read_csv('songs.csv')\n\nX = df[['artist', 'title', 'lyrics']]\ny = df['genre'].values\n\n# Vectorize Text\nvectorizer = CountVectorizer()\nX_lyrics = vectorizer.fit_transform(X['lyrics']).todense()\n\n# Fit the model\nknn = KNeighborsClassifier(5)\nknn.fit(X_lyrics, y)\n\n# Predict a genre for a new song\nnew_song = [['artist', 'title', 'lyrics']]\nnew_song_lyrics = vectorizer.transform(new_song)\npredicted_genre = knn.predict(new_song_lyrics)\nprint(predicted_genre) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MyCalculator:\n    def __init__(self):\n        pass\n    \n    def sum(self, a, b):\n        return a + b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Customer:\n    def __init__(self, name, address, contact_number):\n        self.name = name\n        self.address = address\n        self.contact_number = contact_number but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_even(num):\n return num % 2 == 0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #/bin/env python\n\nimport urllib, json, datetime\nfrom xml.parsers import expat\n\nclass c4s :\n\n  def __init__(self):\n    self.cvmfsBaseVersionFile = 'cvmfsVersion.txt'\n    self.requestedVersion = ''\n    self.myVO = 'LHCb'\n    self.cvmfsColumnNo = 202\n    self.wlcgTopoColumnNo = 144\n    self.topoDict = {'WLCG':{}, self.myVO:{}}\n    self.ssbTimePat = '%Y-%m-%dT%H:%M:%S'\n    self.dontpanic = 'http://www.adluge.com/wp-content/uploads/2013/09/homer-simpson-doh.gif'\n    self.topologyURL = 'http://lhcb-web-dirac.cern.ch/topology/lhcb_topology.xml'\n    self.wlcgBaseUrl = 'http://wlcg-mon.cern.ch/dashboard/request.py/'\n    self.wlcgGetUrl = self.wlcgBaseUrl+'getplotdata?columnid=%d&time=24&sites=all&batch=1'\n    self.wlcgSiteBaseLink = 'http://lhcb-web-dirac.cern.ch/DIRAC/LHCb-Production/undefined/grid/SiteStatus/display?name='\n    self.ssbMetrics = ['CvmfsVersion','CvmfsRepoRevision','CvmfsMountPoint','CvmfsCondDBMountPoint', 'CvmfsProbeTime', 'CvmfsStratumOnes', 'CvmfsNumSquids', 'CvmfsProbeNoInfo', 'CvmfsProbeLink']\n    self.ssbData = {}\n    for k in self.ssbMetrics : self.ssbData[k] = {}\n\n\n  ### start probe functions ###\n  ### eval functions ###\n\n  def evalCvmfsProbeLink(self, val, site):\n    return (val, 'green')\n\n  def evalCvmfsProbeNoInfo(self, val, site) :\n    if self.ssbData['CvmfsProbeTime'][site] == 'no probe' : return ('n/a (no probe)', 'grey')\n    if self.ssbData['CvmfsVersion'][site] == 'not installed' : return ('n/a (not installed)', 'grey')\n    we = val.split(':')[0]\n    if we == 'WARNING' : return (val, 'orange')\n    if we == 'ERROR' : return (val, 'red')\n    return (val, 'green')\n\n  def evalCvmfsVersion(self, val, site): \n    if self.ssbData['CvmfsProbeTime'][site] == 'no probe' : return ('n/a (no probe)', 'grey')\n    if val == 'nfs' : return (val, 'green')\n    if val in ('n/a', 'not installed') : return (val, 'red')\n    x = 2\n    maxDiff = range(x+1)\n    deplV = map(lambda x: int(x), val.split('.'))\n    reqV = map(lambda x: int(x), self.requestedVersion.split('.'))\n    if deplV[1] == reqV[1] and deplV[0] == reqV[0] : \n      if (reqV[2] - deplV[2]) in maxDiff : return (val, 'green')\n      else : return (val, 'orange')\n    else : return (val, 'red')\n\n  def evalCvmfsRepoRevision(self, val, site):\n    if self.ssbData['CvmfsProbeTime'][site] == 'no probe' : return ('n/a (no probe)', 'grey')\n    vers = self.ssbData['CvmfsVersion'][site]\n    if  vers in ('nfs', 'not installed') : return ('n/a (%s)'%vers, 'grey')\n    return (val, 'green')\n\n  def evalCvmfsMountPoint(self, val, site):\n    if self.ssbData['CvmfsProbeTime'][site] == 'no probe' : return ('n/a (no probe)', 'grey')\n    vers = self.ssbData['CvmfsVersion'][site]\n    if  vers in ('not installed') : return ('n/a (%s)'%vers, 'grey')\n    if val and val == '/cvmfs/lhcb.cern.ch' : return (val, 'green')\n    else : return (val, 'orange')\n\n  def evalCvmfsCondDBMountPoint(self, val, site):\n    if self.ssbData['CvmfsProbeTime'][site] == 'no probe' : return ('n/a (no probe)', 'grey')\n    if  self.ssbData['CvmfsVersion'][site] == 'not installed' : return ('n/a (not installed)', 'grey')\n    if val == 'yes' : return (val, 'orange')\n    else : return (val, 'green')\n\n  def evalCvmfsProbeTime(self, val, site):\n    if val == 'no probe' : return (val, 'red')\n    pTime = datetime.datetime.strptime(val,self.ssbTimePat)\n    curTime = datetime.datetime.now()\n    delta = (curTime - pTime).seconds\n    if delta < 21600 : return (val, 'green')\n    elif delta < 43200 : return (val, 'orange')\n    else : return (val, 'red')\n\n  def evalCvmfsStratumOnes(self, val, site) :\n    if self.ssbData['CvmfsProbeTime'][site] == 'no probe' : return ('n/a (no probe)', 'grey')\n    vers = self.ssbData['CvmfsVersion'][site]\n    if  vers in ('nfs', 'not installed') : return ('n/a (%s)'%vers, 'grey')\n    if val : return (val, 'green')\n    else: return ('none', 'red')\n\n  def evalCvmfsNumSquids(self, val, site):\n    if self.ssbData['CvmfsProbeTime'][site] == 'no probe' : return ('n/a (no probe)', 'grey')\n    vers = self.ssbData['CvmfsVersion'][site]\n    if  vers in ('nfs', 'not installed') : return ('n/a (%s)'%vers, 'grey')\n    if val :\n      if int(val) > 1 : return (val, 'green')\n      else : return (val, 'orange')\n    else: return (val , 'red')\n\n  ### retrieval functions ###\n\n  def getValCvmfsProbeLink(self, site, probe, metric):\n    self.ssbData['CvmfsProbeLink'][site]=metric['URL']\n\n  def getValCvmfsProbeNoInfo(self, site, probe, metric): \n    val = 'none'\n    pat = 'INFO: Mandatory tests exectuted successfully, now continuing with testing optional repositories'\n    for line in probe :\n      we = line.split(':')[0]\n      if line[:len(pat)] == pat : break\n      elif we == 'WARNING' and val.split(':')[0] != 'ERROR' : val = line\n      elif we == 'ERROR' : val = line\n    self.ssbData['CvmfsProbeNoInfo'][site] = val\n\n  def getValCvmfsVersion(self, site, probe, metric):\n    pat1 = 'INFO: CVMFS version installed '\n    pat2 = 'INFO: Mandatory mount point /cvmfs/lhcb.cern.ch is nfs mount point'\n    pat3 = 'INFO: No cvmfs rpms found on WN, checking if this WN uses nfs mounting of CVMFS repositories'\n    ver = 'n/a'\n    noCVMFS = False\n    cvmfsViaNFS = False\n    for line in probe :\n      if line[:len(pat1)] == pat1 :\n        ver = line[len(pat1):]\n      elif line[:len(pat2)] == pat2 :\n        ver = 'nfs'\n        cvmfsViaNFS = True\n      elif line[:len(pat3)] == pat3 : \n        noCVMFS = True\n    if noCVMFS and not cvmfsViaNFS : ver = 'not installed'\n    self.ssbData['CvmfsVersion'][site] = ver\n    \n  def getValCvmfsRepoRevision(self, site, probe, metric):\n    pat = 'INFO: repository revision '\n    rev = 'n/a'\n    for line in probe :\n      if line[:len(pat)] == pat :\n        rev = line[len(pat):]\n        break \n    self.ssbData['CvmfsRepoRevision'][site] = rev\n\n  def getValCvmfsMountPoint(self, site, probe, metric):\n    pat1 = 'INFO: Variable VO_LHCB_SW_DIR points to CVMFS mount point '\n    pat2 = 'INFO: Mandatory mount point /cvmfs/lhcb.cern.ch is nfs mount point'\n    mp = 'n/a'\n    for line in probe :\n      if line[:len(pat1)] == pat1 :\n        mp = line[len(pat1):]\n      elif line[:len(pat2)] == pat2 :\n        mp = '/cvmfs/lhcb.cern.ch'\n    self.ssbData['CvmfsMountPoint'][site] = mp\n\n  def getValCvmfsCondDBMountPoint(self, site, probe, metric):\n    pat = 'INFO: repository /cvmfs/lhcb-conddb.cern.ch available'\n    cm = 'no'\n    for line in probe :\n      if line[:len(pat)] == pat :\n        cm = 'yes'\n    self.ssbData['CvmfsCondDBMountPoint'][site] = cm\n\n  def getValCvmfsProbeTime(self, site, probe, metric):\n    self.ssbData['CvmfsProbeTime'][site] = metric['URL'].split('&')[1].split('=')[1][:-1]\n#    self.ssbData['CvmfsProbeTime'][site] = metric['EndTime']\n\n  def getValCvmfsStratumOnes(self, site, probe, metric) :\n    strats = []\n    pat = 'INFO: Servers: '\n    for line in probe :\n      if line[:len(pat)] == pat :\n        stratumL = line[len(pat):]\n        for serv in stratumL.split() :\n          strats.append('.'.join(serv.split('/')[2].split(':')[0].split('.')[-2:]))\n        break\n    self.ssbData['CvmfsStratumOnes'][site] = ' '.join(strats)\n\n  def getValCvmfsNumSquids(self, site, probe, metric) :\n    numSq = 0\n    pat = 'INFO: Proxies: '\n    for line in probe :\n      if line[:len(pat)] == pat :\n        numSq = len(line[len(pat):].split())\n        break\n    self.ssbData['CvmfsNumSquids'][site] = numSq\n\n  ### end probe functions ####\n\n  def xmlStartElement(self, name, attrs):\n    if name == 'atp_site' : self.currWLCGSite = attrs['name']\n    if name == 'group' and attrs['type'] == 'LHCb_Site' : \n      self.topoDict['WLCG'][attrs['name']] = self.currWLCGSite\n\n  def bootstrap(self):\n    # get WLCG Mon mapping VO site name <-> site ID\n    topo = json.loads(urllib.urlopen(self.wlcgGetUrl%self.wlcgTopoColumnNo).read())\n    for ent in topo['csvdata'] : self.topoDict[self.myVO][ent['SiteId']] = ent['Status']\n    # read CVMFS base line version number\n    f = open(self.cvmfsBaseVersionFile, 'r')\n    self.requestedVersion = f.read()\n    f.close()\n    # read topology file and create mapping VO site name <-> WLCG site name\n    topo = urllib.urlopen(self.topologyURL).read()\n    p = expat.ParserCreate()\n    p.StartElementHandler = self.xmlStartElement\n    p.Parse(topo)\n\n  def clearSsbData(self, site):\n    for metric in self.ssbMetrics : \n      self.ssbData[metric][site] = ''\n\n  def collectInfo(self):\n    info = json.loads(urllib.urlopen(self.wlcgGetUrl%self.cvmfsColumnNo).read())\n    for metricInf in info['csvdata'] :\n      site = self.topoDict[self.myVO][metricInf['SiteId']]\n      tTime = datetime.datetime.strptime(metricInf['Time'], self.ssbTimePat)\n      dTime = self.ssbData['CvmfsProbeTime'].get(site)\n      if ( not dTime ) or ( datetime.datetime.strptime(dTime, self.ssbTimePat) < tTime ) :  \n        if dTime : self.clearSsbData(site)\n        tl = urllib.urlopen(self.wlcgBaseUrl+metricInf['URL']).read().split('\\n')\n        for metr in self.ssbMetrics : eval('self.getVal'+metr)(site, tl, metricInf)\n    for site in self.topoDict['WLCG'].keys() : \n      if not self.ssbData['CvmfsProbeTime'].get(site) : \n        for metric in self.ssbMetrics : self.ssbData[metric][site] = ''\n        self.ssbData['CvmfsProbeTime'][site] = 'no probe'\n              \n  def writeSSBColumns(self):\n    for k in self.ssbMetrics :\n      fun = 'self.eval'+k\n      colData = self.ssbData[k]\n      f = open(k+'.ssb.txt', 'w')\n      for site in colData.keys() :\n        now = str(datetime.datetime.now())\n        (val, color) = eval(fun)(colData[site], site)\n        url = self.dontpanic\n        if self.ssbData['CvmfsProbeLink'].get(site): url = self.wlcgBaseUrl+self.ssbData['CvmfsProbeLink'][site]\n        f.write('%s\\t%s\\t%s\\t%s\\t%s\\n' % (now, site, val, color, url))\n      f.close()\n\n  def createWLCGLHCbMapping(self):\n    f = open('WLCGSiteMapping.ssb.txt','w')\n    for site in self.topoDict['WLCG'].keys() :\n      now = str(datetime.datetime.now())\n      val = self.topoDict['WLCG'][site]\n      color = 'white'\n      url = self.wlcgSiteBaseLink+site\n      f.write('%s\\t%s\\t%s\\t%s\\t%s\\n' % (now, site, val, color, url))\n\n  def run(self):\n    self.bootstrap()\n    self.collectInfo()\n    self.writeSSBColumns()\n    self.createWLCGLHCbMapping()\n\nif __name__ == '__main__' :\n  c4s().run()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\n# strip whitespace\ndef strip_whitespace(s):\n return s.strip()\n\n# remove HTML tags\ndef remove_html_tags(s):\n return re.sub('<[^>]*>', '', s)\n\n# remove special characters\ndef remove_special_chars(s):\n return re.sub('[^\\w\\s]', '', s)\n\n# convert ASCII characters to unicode characters\ndef convert_ascii_to_unicode(s):\n return s.encode('unicode-escape').decode('utf-8')\n\n# convert strings to lowercase\ndef to_lower(s):\n return s.lower()\n\n# sanitize user input\ndef sanitize_string(s):\n s = strip_whitespace(s)\n s = remove_html_tags(s)\n s = remove_special_chars(s)\n s = convert_ascii_to_unicode(s)\n s = to_lower(s)\n return s\n\n# Example\nmy_string = '<Strin>G &#3238; !@#$%^'\nmy_string = sanitize_string(my_string)\nprint(my_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\n\n# declaring the model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(4, activation='relu', input_shape=(2,)),\n    tf.keras.layers.Dense(4, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\n# compiling the model\nmodel.compile(\n    optimizer='adam', \n    loss='binary_crossentropy',\n    metrics=['accuracy']\n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_vowels(string): \n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    new_string = \"\"\n    for letter in string:\n        if letter.lower() in vowels:\n            new_string += \"_\"\n        else:\n            new_string += letter\n    return new_string\n\nresult = replace_vowels(\"Hello World\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nitems = ['a', 'b', 'c', 'd']\nrandom.shuffle(items)\n\nprint(items) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_number(lst, num):\n  for i, v in enumerate(lst):\n    if v == num:\n      return i\n  \n  return -1\n\nlist_of_numbers = [2, 4, 9, 8, 10]\nnumber_to_find = 8\n\n# Find the given number in the list\nindex = find_number(list_of_numbers, number_to_find)\nif index != -1:\n  print(f'Number {number_to_find} found at index {index}.')\nelse:\n  print('Number not found.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\n\ndef convert_date_format(date_str, old_format, new_format): \n  dt_obj = datetime.datetime.strptime(date_str, old_format) \n  return dt_obj.strftime(new_format) \n\nprint(convert_date_format(\"May 14, 2020\", \"%b %d, %Y\", \" %d-%m-%Y\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def transpose_matrix(matrix):\n    m = len(matrix)\n    n = len(matrix[0])\n    result = []\n\n    for j in range(n):\n        row = []\n        for i in range(m):\n            row.append(matrix[i][j])\n        result.append(row)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(arr, target):\n for row in arr:\n  for element in row:\n   if element == target:\n    return True\n return False\n\nresult = search(arr, target)\nprint(result) # True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def average(a, b):\n    return (a+b)/2\n    \na = 10\nb = 15\n\navg = average(a, b)\n\nprint(avg) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sorted_list = sorted(lst, key = lambda x: x['name'])\nprint(sorted_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def evenOdd(number): \n    if (number % 2 == 0): \n        print(\"Even\") \n    else: \n        print(\"Odd\") \n\nevenOdd(number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, LSTM\n\ndef create_model(input_shape):\n    model = Sequential()\n    model.add(LSTM(128, input_shape=input_shape))\n    model.add(Dropout(0.3))\n    model.add(Dense(1))\n    model.compile(loss='mse', optimizer='rmsprop')\n    return model\n\ninput_shape = (X_train.shape[1],1)\nmodel = create_model(input_shape)\nmodel.fit(X_train, y_train, batch_size=32, epochs=30) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_occurrence(string, character):\n    count = 0\n    for c in string:\n        if c == character:\n            count += 1\n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to implement a binary tree\n\n# A class that represents an individual node in a Binary Tree\nclass Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\n\n# A class to represent the Binary Tree\nclass BinaryTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, key):\n        if self.root is None:\n            self.root = Node(key)\n        else:\n            self._insert(self.root, key)\n\n    def _insert(self, curr_node, key):\n        if key < curr_node.val:\n            if curr_node.left is None:\n                curr_node.left = Node(key)\n            else:\n                self._insert(curr_node.left, key)\n        elif key > curr_node.val:\n            if curr_node.right is None:\n                curr_node.right = Node(key)\n            else:\n                self._insert(curr_node.right, key)\n\n    def inOrder(self):\n        res = []\n        self._inOrder(self.root, res)\n        return res\n\n    def _inOrder(self, curr_node, res):\n        if curr_node:\n            self._inOrder(curr_node.left, res)\n            res.append(curr_node.val)\n            self._inOrder(curr_node.right, res)\n\n    def preOrder(self):\n        res = []\n        self._preOrder(self.root, res)\n        return res\n\n    def _preOrder(self, curr_node, res):\n        if curr_node:\n            res.append(curr_node.val)\n            self._preOrder(curr_node.left, res)\n            self._preOrder(curr_node.right, res)\n\n    def postOrder(self):\n        res = []\n        self._postOrder(self.root, res)\n        return res\n\n    def _postOrder(self, curr_node, res):\n        if curr_node:\n            self._preOrder(curr_node.left, res)\n            self._preOrder(curr_node.right, res)\n            res.append(curr_node.val) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python Program to count the number of ones in a number. \ndef FindOnes(num): \n    count = 0 \n    while (num): \n        num = num & (num - 1) \n        count = count + 1\n          \n    return count\n  \n# Driver Code \nnum = 23\nprint(FindOnes(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_average(temps):\n    sum = 0\n    for temp in temps:\n        sum += temp\n    avg = sum / len(temps)\n    return avg\n    \ntemperatures = [22.5, 18.7, 30.1]\naverage_temp = get_average(temperatures)\nprint(\"Average temperature:\", average_temp) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: This is a linear search. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_unique_list (numbers):\n    return len(numbers) == len(set(numbers)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Building the Docker Image\nFROM ubuntu:18.04\n \n# Setting up the environment\nRUN apt-get update -y && \\\n    apt-get install -y python3-pip python3-dev\n \nRUN pip3 install -U scikit-learn\n \n# Copying the application code\nCOPY application.py /\n \n# Running the application\nCMD [\"python3\", \"application.py\"]\n\n# Building the Docker Image\ndocker build -t prediction-model .\n\n# Pushing the Docker Image to Amazon ECR\n$(aws ecr get-login --no-include-email)\ndocker tag prediction-model:latest <your-aws-account-id>.dkr.ecr.us-east-1.amazonaws.com/prediction-model:latest\ndocker push <your-aws-account-id>.dkr.ecr.us-east-1.amazonaws.com/prediction-model:latest\n\n# Setting up AWS ECS\n# 1. Create a new ECS cluster\n# 2. Create a new task definition\n# 3. Create a new service\n# 4. Configure the services to use the task definition with our Docker image\n# 5. Deploy the task and service but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def evaluate_expression(expression):\n    stack = [] \n    expression_list = expression.split(\" \")\n    operators = ['+', '-', '*', '/'] \n    \n    for i in expression_list: \n        if i not in operators: \n            stack.append(int(i))\n        else: \n            val1 = stack.pop()  \n            val2 = stack.pop() \n \n            if i == \"+\": \n                stack.append(val2 + val1) \n            elif i == \"-\": \n                stack.append(val2 - val1) \n            elif i == \"*\": \n                stack.append(val2 * val1) \n            else: \n                stack.append(int(val2 / val1)) \n                \n    return stack.pop()\n\nprint(evaluate_expression(\"3*(2+7)\"))  # prints 27 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_alpha_case(char):\n    \"\"\"\n    Determine if a given character is an uppercase or lowercase alpha character.\n    char: the character to be checked\n    \"\"\"\n    if char.isalpha() and char.isupper():\n        return \"uppercase\"\n    elif char.isalpha() and char.islower():\n        return \"lowercase\"\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n  return \"Hello World!\"\n\nif __name__ == '__main__':\n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def prime_factors(num):\n    res = []\n    while num%2 == 0:\n        num = num/2\n        res.append(2)\n    for i in range(3, int(num**0.5)+1,2):\n        while num%i == 0:\n            num = num//i\n            res.append(i)\n    if num > 2 :\n        res.append(int(num))\n    return res\n\nprint(prime_factors(38)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_stack(stack):\n    rev_stack = []\n\n    while(stack):\n        rev_stack.append(stack.pop())\n\n    return rev_stack\n\n# Usage\nstack = [1, 2, 3]\nprint(reverse_stack(stack)) # => [3, 2, 1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class adder:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def __add__(self):\n        return self.x + self.y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \nfrom bs4 import BeautifulSoup\n\n# URL of the site to scrape\nurl = 'https://www.example.com'\n\n# Send the request to the URL\nresponse = requests.get(url)\n\n# Parse the html content\nhtml_soup = BeautifulSoup(response.text, 'html.parser')\n\n# Get all of the <div> elements with a class of 'content'\ncontent = html_soup.find_all('div', class_ = 'content')\n\n# Iterate over the content and print out the text\nfor item in content:\n print(item.text.strip()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_alphabetically(input_list):\n results = sorted(input_list)\n \n return results\n \ninput_list = ['apple', 'pear', 'banana', 'grape']\n\nprint(sort_alphabetically(input_list))\n# Output: ['apple', 'banana', 'grape', 'pear'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sumEvensInRange(arr, lower, upper):\n    evens_sum = 0\n    for num in arr:\n        if num >= lower and num <= upper and num % 2 == 0:\n            evens_sum += num\n    return evens_sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_armstrong_number(n):\n    num_str = str(n)\n    power = len(num_str)\n    total = 0\n    for digit in num_str:\n        total += int(digit)**power\n    return total == int(n)\n\ndef armstrong_numbers(start, end):\n    for n in range(start, end+1):\n        if is_armstrong_number(n):\n            print(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os\n\ndef detect_coronavirus(input_dir):\n    # input_dir - The directory containing the text documents\n    total_occurrences = 0\n\n    # Iterate through each file in the input_dir\n    for file in os.listdir(input_dir):\n        file_path = os.path.join(input_dir, file)\n\n        # Read the file\n        with open(file_path, 'r') as f:\n            data = f.read()\n\n            # Detect the occurrences of the word \"coronavirus\"\n            occurrence_count = data.lower().count(\"coronavirus\")\n            total_occurrences += occurrence_count\n\n    return total_occurrences\n\n# Call the function\noccurrences = detect_coronavirus('input_dir')\nprint(f'The word \"coronavirus\" has occurred {occurrences} times.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(n):\n    if n < 2: \n        return False\n\n    for i in range(2, int(n**0.5) + 1):  \n        if n % i == 0: \n            return False\n\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # settings.py\n\nAUTH_USER_MODEL = 'myapp.MyUser'\n\n# models.py\n\nfrom django.contrib.auth.models import AbstractUser\n\nclass MyUser(AbstractUser):\n first_name = models.CharField(max_length=30)\n last_name = models.CharField(max_length=30)\n\n# forms.py\n\nfrom django import forms\nfrom myapp.models import MyUser\n\nclass MyUserForm(forms.ModelForm):\n class Meta:\n model = MyUser\n fields = ('username','password','first_name','last_name')\n\n# views.py\n\nfrom django.shortcuts import render\nfrom myapp.forms import MyUserForm\n\ndef register(request):\n if request.method == 'POST':\n\n  form = MyUserForm(request.POST)\n\n  if form.is_valid():\n   form.save()\n   return HttpResponseRedirect('/')\n\n else:\n  form = MyUserForm()\n\n return render(request, 'register.html', {'form': form}) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n# -*- coding: utf-8 -*-\n'''\n\u670d\u52a1\u7aef\nps:\u6211\u662f\u5148\u770b\u5b8clocal.py\u518d\u770bserver.py;\n\u53d1\u73b0\uff1a\u9664\u4e86\u591a\u7528\u6237\u7684\u601d\u8def\u5224\u65ad\uff0c\u522b\u7684\u4ee3\u7801\u601d\u8def\u662f\u4e00\u81f4\u7684\uff0c\u90e8\u5206\u6ca1\u6709\u6ce8\u91ca\uff0c\u53ef\u4ee5\u56de\u53bb\u7ffb\u7ffblocal.py\n'''\n\nfrom __future__ import absolute_import, division, print_function, \\\n    with_statement\n\nimport sys\nimport os\nimport logging\nimport signal\n\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '../'))\nfrom shadowsocks import utils, daemon, encrypt, eventloop, tcprelay, udprelay, \\\n    asyncdns\n\n\ndef main():\n    utils.check_python()\n\n    # is_local=false\n    config = utils.get_config(False)\n\n    daemon.daemon_exec(config)\n\n    utils.print_shadowsocks()\n\n    # \u652f\u6301\u591a\u5ba2\u6237\u7aef\n    if config['port_password']:\n        if config['password']:\n            logging.warn('warning: port_password should not be used with '\n                         'server_port and password. server_port and password '\n                         'will be ignored')\n    else:\n        config['port_password'] = {}\n        server_port = config['server_port']\n        # \u82e5\u53d1\u73b0\u6709\u591a\u7528\u6237\u914d\u7f6e\uff1a\u91c7\u7528\u2018\u7aef\u53e3->\u5bc6\u7801\u2019\u7684\u6620\u5c04\u65b9\u5f0f\u3002\n        if type(server_port) == list:\n            for a_server_port in server_port:\n                config['port_password'][a_server_port] = config['password']\n        else:\n            config['port_password'][str(server_port)] = config['password']\n\n    # Create an instance of the cipher class \n    encrypt.try_cipher(config['password'], config['method'])\n    tcp_servers = []\n    udp_servers = []\n    dns_resolver = asyncdns.DNSResolver()\n    \n    # \u4e00\u4e2a\u670d\u52a1\u5668\u7aef\u53ef\u4ee5\u6253\u5f00\u591a\u4e2a\u7aef\u53e3\n    # \u5bf9\u4e8e\u6bcf\u4e2a\u7aef\u53e3\uff0c\u90fd\u8981\u65b0\u5efa\u4e00\u4e2a\u5bf9\u5e94\u7684\u5904\u7406\u5668\n    for port, password in config['port_password'].items():\n        a_config = config.copy()\n        a_config['server_port'] = int(port)\n        a_config['password'] = password\n        logging.info(\"starting server at %s:%d\" % \n                     (a_config['server'], int(port)))\n        # \u9010\u4e00\u52a0\u5230tcp\u3001udp\u5217\u8868\n        tcp_servers.append(tcprelay.TCPRelay(a_config, dns_resolver, False))\n        udp_servers.append(udprelay.UDPRelay(a_config, dns_resolver, False))\n\n    def run_server():    \n        # \u6536\u5230\u9000\u51fa\u4fe1\u53f7\u7684\u5904\u7406\u51fd\u6570\uff0c\u5173\u95ed\u6240\u6709socket\u91ca\u653e\u8d44\u6e90\u3002\n        def child_handler(signum, _):\n            logging.warn('received SIGQUIT, doing graceful shutting down..')\n            # \u5173\u95ed\u6240\u6709\u7684socket\uff0c\u4e00\u53e5\u8bdd\u641e\u5b9a\uff0c\u597d\u5389\u5bb3\uff0c\u8dea\u62dcing\n            # map(function, sequence[, sequence, ...]) -> list\n            # Return a list of the results of applying the function to the items of the argument sequence(s).  \n            list(map(lambda s: s.close(next_tick = True),\n                     tcp_servers + udp_servers))\n            \n        # \u6536\u5230\u9000\u51fa\u4fe1\u53f7\uff0c\u8c03\u7528child_handler\u8fdb\u884c\u81ea\u6740\u3002\n        signal.signal(getattr(signal, 'SIGQUIT', signal.SIGTERM),\n                      child_handler)\n        \n        # \u6536\u5230\u9000\u51fa\u4fe1\u53f7\uff0c\u8c03\u7528int_handler\u8fdb\u884c\u81ea\u6740\u3002\n        def int_handler(signum, _):\n            sys.exit(1)\n        signal.signal(signal.SIGINT, int_handler)\n\n        try:\n            loop = eventloop.EventLoop()\n            dns_resolver.add_to_loop(loop)\n            # \u628a\u6240\u6709\u7684\u76d1\u542c\u7aef\u53e3\u6dfb\u52a0\u5230\u65f6\u95f4\u5faa\u73af\u4e2d\uff0c\u4e00\u53e5\u8bdd\u641e\u5b9a\uff0c\u597d\u5389\u5bb3\uff0c\u8dea\u62dcing\n            list(map(lambda s: s.add_to_loop(loop), tcp_servers + udp_servers))\n            loop.run()\n        except (KeyboardInterrupt, IOError, OSError) as e:\n            logging.error(e)\n            if config['verbose']:\n                import traceback\n                traceback.print_exc()\n            os._exit(1)\n\n    # Shadowsocks supports spawning child processes like nginx.\n    # You can use --workers to specify how many workers to use.\n    # This argument is only supported on Unix and ssserver.\n    # Currently UDP relay does not work well on multiple workers.\n    # \u652f\u6301\u50cfnginx\u591a\u8fdb\u7a0b\uff0c\u53ef\u4ee5\u5728config\u4e2d\u6307\u5b9aworker\u7684\u6570\u91cf\u3002\u4ec5\u5728linux\u4e0b\u751f\u6548\u3002\n    # \u76ee\u524d\u7684bug\uff1aworker\u8bbe\u4e3a\u5927\u4e8e1\u65f6\uff0cudp\u8f6c\u53d1\u6709\u53ef\u80fd\u5de5\u4f5c\u4e0d\u6b63\u5e38\n    if int(config['workers']) > 1:\n        if os.name == 'posix':\n            children = []\n            is_child = False\n            for i in range(0, int(config['workers'])):\n                r = os.fork()\n                if r == 0:\n                    logging.info('worker started')\n                    is_child = True\n                    run_server()\n                    break\n                else:\n                    children.append(r)\n            if not is_child:\n                def handler(signum, _):\n                    for pid in children:\n                        try:\n                            os.kill(pid, signum)\n                            os.waitpid(pid, 0)\n                        except OSError:    # child may already exited\n                            pass\n                    sys.exit()\n                signal.signal(signal.SIGTERM, handler)\n                signal.signal(signal.SIGQUIT, handler)\n                signal.signal(signal.SIGINT, handler)\n\n                # master\n                for a_tcp_server in tcp_servers:\n                    a_tcp_server.close()\n                for a_udp_server in udp_servers:\n                    a_udp_server.close()\n                dns_resolver.close()\n\n                for child in children:\n                    os.waitpid(child, 0)\n        else:\n            logging.warn('worker is only available on Unix/Linux')\n            run_server()\n    else:\n        run_server()\n\n\nif __name__ == '__main__':\n    main()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node: \n    def __init__(self, data): \n        self.data = data\n        self.next = None\n  \nclass LinkedList: \n    def __init__(self): \n        self.head = None\n  \n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head \n        self.head = new_node \n  \n    def reverseList(self): \n        prev = None\n        current = self.head \n        while(current is not None): \n            next = current.next\n            current.next = prev \n            prev = current \n            current = next\n        self.head = prev \n  \n    def compareLists(self, head1, head2): \n        while(head1 and head2): \n            if head1.data != head2.data: \n                return 0\n            head1 = head1.next\n            head2 = head2.next\n        if (head1 and not head2) or (head2 and not head1): \n            return 0\n        return 1\n  \n    def checkPalindrome(self): \n        slow_ptr = self.head \n        fast_ptr = self.head \n        count = 0\n        while(fast_ptr is not None and fast_ptr.next is not None): \n            fast_ptr = fast_ptr.next.next\n            slow_ptr = slow_ptr.next\n            count+=1\n        second_half = self.reverseList() \n        isPalindrome = self.compareLists(self.head, second_half) \n        \n        self.reverseList() \n        if isPalindrome: \n            return True\n        else: \n            return False\n  \nllist = LinkedList() \nllist.push(3)\nllist.push(5)\nllist.push(6)\nllist.push(6)\nllist.push(5)\nllist.push(3)\nllist.checkPalindrome()  # Output: True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_sum(numbers):\n  sum = 0\n  for i in range(len(numbers)):\n    sum += numbers[i]\n  return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nremove_chars = set(['A', 'C', 'D', 'E'])\n \nresult = \"\".join(char for char in string if char not in remove_chars)\n\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: seq = [1]\n\nfor i in range(1,7):\n    seq.append(seq[-1]*2)\n\nprint(seq) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num):\n    if num == 2:\n        return True\n    elif num < 2 or not all(num % i for i in range(2, num)):\n        return False\n    return True\n\nnum = 7\nresult = is_prime(num)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_from_front(string, num_chars):\n    return string[num_chars:]\n\nresult = remove_from_front(\"Hello, World!\", 5)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\n\nmodel = Pipeline([('tfidf', TfidfVectorizer()),\n                  ('clf', LogisticRegression())]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def delete_last(lst):\n    return lst[:-1]\n\nresult = delete_last([1, 2, 2, 4, 4])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: data = [1, 10, 3, 11, 7, 8, 4, 2]\n\nmax_sequence = 0\ncurr_sequence = 0\nprev = -1\n\nfor num in data:\n    # Check if the current number is larger than the previous one\n    if num > prev:\n        curr_sequence += 1\n        max_sequence = max(max_sequence, curr_sequence)\n    else:  # Reset the length of the current sequence to 1\n        curr_sequence = 0\n\nprint(max_sequence)  # Output 3 but is not the same. just give one example and only return the code."}
