{"prompt": "make some code that functions the same as the following code: The best way to declare a constant variable in Python is by using the `const` keyword. For example:\n\n```\nconst MAX_VAL = 100\n``` but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calc_avg(nums):\n    total = 0\n    for item in nums:\n        total += item\n    avg = total / len(nums)\n    return avg but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insert(arr, x):\n    i = len(arr)-1\n    while (i >= 0 and x < arr[i]):\n        arr[i+1] = arr[i]\n        i = i-1\n    arr[i+1] = x\n    return arr\n  \n# Input array and element \narr = [1, 2, 3, 5] \nx = 4\n  \n# Calling Insert Function \narr = insert(arr, x) \n  \n# Print the modified array \nprint(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\nfrom collections import Counter\n\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/api/frequent_words', methods=['POST'])\ndef frequent_words():\n    text = request.json['text']\n    words = re.findall(r'\\w+', text.lower())\n    count = Counter(words).most_common(10)\n    return jsonify(count)\n\nif __name__ == '__main__':\n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def toPigLatin(s):\n   vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n   if s[0] in vowels:\n      return s + 'way'\n   else:\n      return s[1:] + s[0] + 'ay'\n      \nprint(toPigLatin(\"Hello World\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_valid_neighbors(current_position):\n neighbors = []\n x, y = current_position\n moves = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n \n for move in moves:\n new_x = x + move[0]\n new_y = y + move[1]\n \n if (0 <= new_x < GRID_SIZE) and (0 <= new_y < GRID_SIZE) and (new_x, new_y) not in obstacles:\n neighbors.append((new_x, new_y))\n \n return neighbors\n \ndef reconstruct_path(current_node):\n path = []\n \n while current_node is not None:\n current_node = parents[current_node]\n if current_node is not None:\n path.append(current_node)\n \n return path\n\n\ndef a_star(start_position, goal_position, obstacles):\n parents = {}\n visited = set() \n open_set = set()\n open_set.add(start_position)\n\n while open_set:\n current_position = min(open_set, key=lambda pos: heuristic(pos, goal_position))\n visited.add(current_position)\n\n if current_position == goal_position:\n return reconstruct_path(current_position)\n\n for neighbor in get_valid_neighbors(current_position):\n gScore = current_position[0] + 1 \n if neighbor in open_set:\n if gScore < gScore[neighbor]: \n parents[neighbor] = current_position \n else:\n open_set.add(neighbor)\n parents[neighbor] = current_position\n \n return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to add two numbers\ndef add_two_numbers(a, b):\n  return a + b\n\n# Function to multiply two numbers\ndef multiply_two_numbers(a, b):\n  return a * b\n\n# Function to return the sum and product of two numbers\ndef sum_and_product(a, b):\n  c = add_two_numbers(a, b)\n  d = multiply_two_numbers(a, b)\n  return c, d but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def last_occurrence(arr, item):\n    for i in range(len(arr)-1,-1,-1):\n        if arr[i] == item:\n            return i\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask\nfrom flask_restful import Resource, Api\n\napp = Flask(__name__)\napi = Api(app)\n\nclass Sum(Resource):\n def get(self, a, b):\n return {'sum': a + b}\n\napi.add_resource(Sum, '/sum/<int:a>/<int:b>')\n\nif __name__ == '__main__':\n app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list1 = [1,2,3,4]\nlist2 = [3,4,5,6] \n\ndef check_common(list1, list2): \n    result = False\n    for x in list1: \n        for y in list2: \n            if x == y: \n                result = True\n                return result  \n    return result \n  \nprint(check_common(list1, list2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Bidirectional\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import Adam\n\n# load data\ntrain_data = [{'text': 'good morning', 'sentiment': 'positive'}, {'text': 'bad news', 'sentiment': 'negative'}] \n\n# process data\nX_train = np.array([x['text'] for x in train_data]) \ny_train = np.array([x['sentiment'] for x in train_data])\n\n# tokenize words\ntokenizer = Tokenizer(num_words=1000) \ntokenizer.fit_on_texts(X_train) \nX_train = tokenizer.texts_to_sequences(X_train) \nX_train = pad_sequences(X_train, padding='post', maxlen=64) \n\n# create model\nmodel = Sequential([\n Embedding(input_dim=1000, output_dim=128, input_length=64), \n Bidirectional(LSTM(128)), \n Dense(128, activation='relu'), \n Dense(2, activation='softmax') \n]) \n\n# compile model\nmodel.compile(\n optimizer=Adam(learning_rate=0.001), \n loss='sparse_categorical_crossentropy', \n metrics=['accuracy']\n)\n\n# fit model\nmodel.fit(X_train, y_train, epochs=10, batch_size=32)\n\n# evaluate\nloss, accuracy = model.evaluate(X_train, y_train)\nprint('Accuracy: %f' % (accuracy*100)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n \n# define string of all characters\nstring = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+~<>?'\n \n# specify length of random password\nlength = 8\n \n# generate random password\nrandom_password = \"\"\nfor i in range(length):\n    random_password = random_password + random.choice(string)\n\nprint(random_password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_words(string):\n    words = string.split()\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compute_average(numbers):\n sum = 0\n for number in numbers:\n sum += number\n return sum/len(numbers)\n\nnumbers = [10, 20, 45, 60]\nresult = compute_average(numbers)\nprint(result)\n\n# Output:\n31.25 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Imports\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import Pipeline\nimport pandas as pd\n\n# Data Loading\ndata = pd.read_csv('loan_data.csv')\n\n# Feature and Target Variable\nX = data.drop('Loan_Status', axis=1)\ny = data['Loan_Status']\n\n# Preprocessors and Estimator in the pipeline\npreprocessors = [\n        ('imputer', SimpleImputer(strategy='mean')),\n        ('scaler', MinMaxScaler())\n    ]\n\npipeline = Pipeline([\n    ('transformer', ColumnTransformer(transformers=preprocessors)),\n    ('estimator', LogisticRegression())\n])\n\n# Fitting the model\npipeline.fit(X, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add(a, b):\n    return a + b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_converter(num):\n    # to convert to binary base\n    base = 2\n    # initializing result as empty string\n    result = \"\"\n\n    while(num > 0):\n        # get the remainder when divided by base\n        rem = num % base\n        # add it to the result\n        result += str(rem)\n        # divide the number by base\n        num = num//base\n\n    # reverse the string\n    result = result[::-1]\n    return result\n\nnum = 9\nprint(binary_converter(num))\n\n// Output: 1001 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to check the spelling of a word\ndef spell_checker(word, dictionary):\n  # Convert the word to lowercase\n  word = word.lower()\n\n  # Return True if the word is in the dictionary, False otherwise\n  if word in dictionary:\n    return True\n  else:\n    return False\n\n# Test\ndictionary = ['apple', 'banana', 'orange']\n\nword1 = 'Apple'\nprint(spell_checker(word1, dictionary))\n\nword2 = 'Baboon'\nprint(spell_checker(word2, dictionary)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Create a 1-dimensional array of size 5\narray = [0] * 5\n\n# Fill the array with random numbers\nfor i in range(len(array)):\n array[i] = random.randint(1,100)\n\nprint(array)\n\n# Output:\n# [83, 5, 46, 69, 89] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isAnagram(string1, string2):\n s1 = sorted(string1.lower())\n s2 = sorted(string2.lower())\n\n if s1 == s2:\n return True\n else:\n return False\n\nstring1 = \"pizza\";\nstring2 = \"appaiz\";\n\nisAnagram(string1, string2); // True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \n\n# Create the agent class\nclass ReinforcementLearningAgent:\n    def __init__(self, environment, alpha=0.1, gamma=0.9):\n        self.env = environment \n        self.q_table = np.zeros(self.env.state_space + (self.env.action_space,))\n        self.alpha = alpha \n        self.gamma = gamma\n\n    def get_best_action(self, state):\n        return np.argmax(self.q_table[state])\n\n    def update_q_table(self, state, action, next_state, reward):\n        q_update = reward + self.gamma * np.max(self.q_table[next_state]) - self.q_table[state][action]\n        self.q_table[state][action] += self.alpha * q_update but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Prepare data\ndf = pd.DataFrame(sample_input_data)\ndf['Target'] = np.where(df.shift(-1) > df, 'Increase', 'Decrease')\n\nX = df.iloc[:, 0:-1]\ny = df.iloc[:, -1]\n\n# Train model\nclf = RandomForestClassifier(n_estimators=100)\nclf.fit(X, y)\n\n# Predict stock change\npredictions = clf.predict(X)\nprint(predictions) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quicksort(arr):\n if len(arr) <= 1:\n return arr\n pivot = arr[len(arr) // 2]\n left = [x for x in arr if x < pivot]\n middle = [x for x in arr if x == pivot]\n right = [x for x in arr if x > pivot]\n \nreturn quicksort(left) + middle + quicksort(right) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sample_dict = {\"key1\": 1, \"key2\": 2, \"key3\": 3, \"key4\": 4, \"key5\": 5} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\nprint(Fibonacci(5)) # Output: 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Order:\n # Initialize order\n def __init__(self):\n self.items = []\n\n# Add item to order\n def add_item(self, item):\n self.items.append(item)\n\n# Calculate subtotal\n def calc_subtotal(self):\n subtotal = 0\n for item in self.items:\n subtotal += item.price\n return subtotal\n\n# Calculate tax\n def calc_tax(self):\n return self.calc_subtotal() * 0.08\n\n# Calculate total\n def calc_total(self):\n return self.calc_subtotal() + self.calc_tax() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\n\n#Load the dataset into a dataframe\ndf = pd.read_csv(\"stock_data.csv\")\n \n#Split the dataset into training and test sets\nX = df.drop(columns=['target'])\ny = df['target']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n \n#Create and fit the model\nmodel = RandomForestRegressor(n_estimators=100, random_state=42)\nmodel.fit(X_train, y_train)\n \n#Pass the test set to the model for prediction\ny_pred = model.predict(X_test)\n\n#Calculate the accuracy of the model\naccuracy = model.score(X_test, y_test)\n\n# Print the accuracy\nprint('Model accuracy: ', accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: '''\n\nPython implementation of HTML wordcloud of words collected from\na website, Paragraph Input or File Upload. Flask Web App implementation\nof the same.\n\nAuthor: Shivam Bansal\nEmail: shivam5992@gmail.com\nWebsite: www.shivambansal.com \nVersion: 0.1\n\n'''\n\nfrom flask import Flask, render_template, request, flash, redirect, url_for\nfrom BeautifulSoup import BeautifulSoup\nimport urllib, random, re, string, stopwords\n\napp = Flask(__name__)\napp.secret_key = 'You will never guess'\n\n'''\nIndex router function, Receive post request and displays the html wordcloud\n'''\n@app.route('/', methods = ['GET','POST'])\n@app.route('/index', methods = ['GET','POST'])\ndef index():\n\n\tif request.method == 'POST':\n\t\t\n\t\t''' Store post variables '''\n\t\turl = request.form['urllink']\n\t\tcase = request.form['case']\n\t\tshow_freq = request.form['show_freq']\n\t\t\n\t\t''' Try to connect with the URL '''\n\t\ttry:\n\t\t\tif not url.startswith(\"http\"):\n\t\t\t\turl = \"http://\" + url\n\t\t\thtmltext = urllib.urlopen(url).read()\n\t\texcept:\n\t\t\tflash(\"Cannot connect to the requested url\")\n\t\t\treturn redirect(url_for('startover'))\t\n\t\t\n\t\t''' Get all text from the html repsonse ''' \n\t\tsoup = BeautifulSoup(htmltext)\t\t\n\t\ttexts = soup.findAll(text=True)\n\t\tvisible_texts = filter(visible, texts)\n\t\tarticle = \"\"\n\t\tfor text in visible_texts:\n\t\t\tarticle += text.encode(\"utf-8\")\n\t\tarticle = str(article)\n\t\tarticle = BeautifulSoup(article, convertEntities=BeautifulSoup.HTML_ENTITIES)\n\t\t\n\t\t#exclude = set(string.punctuation)\n\t\t#article = str(article)\n\t\t#article = ''.join(ch for ch in article if ch not in exclude)\n\t\t\n\t\tarticle = str(article).replace(\"\\n\",\" \")\n\n\t\t''' Get top keywords '''\n\t\tfreq = 50\n\t\ta = getKeywords(article, case, freq)\n\t\t\n\t\trandom.shuffle(a)\n\t\tb = [x[1] for x in a]\n\t\tminFreq = min(b)\n\t\tmaxFreq = max(b)\n\n\t\t''' Create html span tags and corresponding css '''\n\t\tspan = \"\"\n\t\tcss  = \"\"\"#box{font-family:'calibri';border:2px solid black;}\n\t\t#box a{text-decoration : none}\n\t\t\"\"\"\n\t\t\n\t\t''' Colors for words in wordcloud '''\n\t\tcolors = ['#607ec5','#002a8b','#86a0dc','#4c6db9']\n\t\tcolsize = len(colors)\n\t\tk = 0\n\t\tfor index,item in enumerate(a):\n\t\t\tindex += 1\n\t\t\tif case == \"upper\":\n\t\t\t\ttag = str(item[0]).upper()\n\t\t\telse:\n\t\t\t\ttag = str(item[0])\n\n\t\t\tif show_freq == \"yes\":\n\t\t\t\tspan += '<a href=#><span class=\"word'+str(index)+'\" id=\"tag'+str(index)+'\">&nbsp;' + tag + \" (\" + str(item[1]) + \") \" + \"&nbsp;</span></a>\\n\"\n\t\t\telse:\n\t\t\t\tspan += '<a href=#><span class=\"word'+str(index)+'\" id=\"tag'+str(index)+'\">&nbsp;' + tag + \"&nbsp;</span></a>\\n\"\t\n\t\t\t\n\t\t\t''' Algorithm to scale sizes'''\n\t\t\tfreqTag = int(item[1])\n\t\t\tfontMax = 5.5\n\t\t\tfontMin = 1.5\n\t\t\tK = (freqTag - minFreq)/(maxFreq - minFreq)\n\t\t\tfrange = fontMax - fontMin\n\t\t\tC = 4\n\t\t\t\n\t\t\tK = float(freqTag - minFreq)/(maxFreq - minFreq)\n\t\t\tsize = fontMin + (C*float(K*frange/C))\n\n\t\t\tcss += '#tag'+str(index)+'{font-size: '+ str(size) +'em;color: '+colors[int(k%colsize)]+'}\\n'\n\t\t \tcss += '#tag'+str(index)+':hover{color: red}\\n'\n\t\t \tk += 1\n\t\t\n\n\t\t''' Write the HTML and CSS into seperate files ''' \n\n\t\tf = open('templates/wordcloud.html', 'w')\n\t\tmessage = \"\"\"\n\t\t<style type=\"text/css\">\n\t\t\"\"\" + css +\"\"\"\n\t\t</style>\n\t\t<div id='box'>\n\t\t\t\"\"\" + span +  \"\"\"\n\t\t</div>\n\t\t\"\"\"\n\t\tf.write(message)\n\t\tf.close\n\t\tf.flush()\n\t\treturn render_template('index.html')\n\n\tstartover()\n\treturn render_template('index.html')\n\n''' \nFunction to get top keywords from an article \n'''\ndef getKeywords(articletext, case, freq):\n\n\t''' Create the dictionary for output response '''\n\tword_dict = {}\n\tword_list = articletext.lower().split()\n\tfiltered_words = word_list\n\n\tfor word in filtered_words:\n\t\tif word not in stopwords.stopwords and word.isalnum() and not word.isdigit() and not len(word) == 1:\n\t\t\tif word not in word_dict:\n\t\t\t\tword_dict[word] = 1\n\t\t\tif word in word_dict:\n\t\t\t\tword_dict[word] += 1\n\n\ttop_words =  sorted(word_dict.items(),key=lambda(k,v):(v,k),reverse=True)[0:freq]\n\n\t'''  Return a list of dictionaies, dictionaies contains word and their frequencies '''\t\n\ttop = []\n\tfor w in top_words:\n\t\ttop.append(w)\n\treturn top\n\n'''\nFunction to reset everthing and startover\n'''\n@app.route('/startover')\ndef startover():\n\tf = open(\"templates/wordcloud.html\",'w')\n\tf.write(\"\")\n\tf.close\n\treturn redirect(url_for('index'))\n\ndef visible(element):\n\t\t    if element.parent.name in ['style', 'script', '[document]', 'head', 'title']:\n\t\t        return False\n\t\t    elif re.match('<!--.*-->', str(element)):\n\t\t        return False\n\t\t    return True\n\n'''\nRun the Flask Application\n'''\nif __name__ == '__main__':\n\tapp.run(debug = True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_by_length(string_list):\n    return sorted(string_list, key=len) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = ['Apple', 'Orange', 'Banana']\nlast_element = arr[-1]\nprint(last_element)  # Result: Banana but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_medians(input_list):\n    '''Returns list of median values of the list of numbers given.'''   \n    medians = []\n    l = len(input_list)\n    for i in range(l):\n        tuple_l = input_list[:i]+input_list[i+1:] # Exclude the current element while calculating median.\n        tuple_l.sort()\n        l_1 = len(tuple_l)\n        if l_1%2==0:\n            median = (tuple_l[int(l_1/2)-1] + tuple_l[int(l_1/2)])/2\n        else:\n            median = tuple_l[int((l_1-1)/2)]\n        medians.append(median)\n    return medians\n\nlist = [1, 2, 4, 16, 8, 10]\nprint(get_medians(list))\n# Output: [1.5, 2, 5, 8, 6.5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def schedule(jobs):\n # Select the job with the minimum duration\n current_job = min(jobs, key = lambda job: job['duration'])\n jobs.remove(current_job)\n \n # Set up the lower and upper bounds for scheduling\n lower_bound = 0\n upper_bound = current_job['duration']\n \n # Iterate through jobs and assign each job to an appropriate time window\n for job in jobs:\n if job['duration'] + lower_bound <= upper_bound:\n job['time_window'] = [lower_bound, job['duration'] + lower_bound]\n else:\n job['time_window'] = [upper_bound, job['duration'] + upper_bound]\n \n lower_bound = job['time_window'][1]\n upper_bound = lower_bound + current_job['duration']\n \n # Append the current job to the schedule\n jobs.append(current_job)\n return jobs but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortDescending(arr):\n    return sorted(arr, reverse=True)\n\nprint(sortDescending([1, 12, 3, 8])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/search\", methods=[\"POST\"])\ndef search():\n data = request.get_json()\n list = data.get(\"list\")\n search_term = data.get(\"search_term\")\n \n if search_term in list:\n resp = {\n \"exists\": True\n }\n else:\n resp = {\n \"exists\": False\n }\n \n return resp\n\nif __name__ == \"__main__\":\n app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def split_string_into_list(string):\n    return string.split(' ') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\narticle_data = {\n    'name': 'Bob Dylan', \n    'prize': 'Nobel Prize for Literature',\n    'year': 2016,\n    'description': 'having created new poetic expressions within the great American song tradition'\n}\n\nwith open('article_data.json', 'w') as outfile:  \n    json.dump(article_data, outfile) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_elem(string, elem):\n    \"\"\"This function removes a specified element from the given string of words\"\"\"\n    return ' '.join([word for word in string.split() if word != elem]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_index(arr, target):\n for i in range(len(arr)):\n  if arr[i] == target:\n   return i\n return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def addNumbers(a, b):\n    product = 10 * a + b\n    return product but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: A list comprehension in Python is a quick and concise way to create a list from an existing list or iterable. A list comprehension consists of brackets containing an expression, followed by a for clause, then by zero or more additional clauses. The result is a new list resulting from the evaluation of the expression in the context of the for and additional clauses. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Example of predicting sentiment from text\nfrom textblob import TextBlob\n \ndef classify_sentiment(text):\n\t# create TextBlob object of passed text\n\tanalysis = TextBlob(text)\n\t# set sentiment\n\tif analysis.sentiment.polarity > 0:\n\t\treturn 'positive'\n\telif analysis.sentiment.polarity == 0:\n\t\treturn 'neutral'\n\telse:\n\t\treturn 'negative'\n\ntext1 = 'I am a good person'\ntext2 = 'I am a bad person'\n\nsentiment1 = classify_sentiment(text1) \nsentiment2 = classify_sentiment(text2) \n\nprint(sentiment1)\nprint(sentiment2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node: \n    def __init__(self, data): \n        self.data = data  \n        self.left = None\n        self.right = None\n\nclass BinaryTree:\n \n   def __init__(self):\n       self.root = None\n \n   def add_node(self, data):\n        if self.root is None:\n            self.root = Node(data)\n        else:\n            self._add_to_tree(self.root, data)\n\n    def _add_to_tree(self, node, data):\n        if data < node.data:\n            if node.left is None:\n                node.left = Node(data)\n            else:\n                self._add_to_tree(node.left, data)\n        else:\n            if node.right is None:\n                node.right = Node(data)\n            else:\n                self._add_to_tree(node.right, data)\n\n    def max_depth(self):\n        return self._max_depth(self.root)\n\n    def _max_depth(self, node):\n        if node is None:\n            return 0\n        else:\n            left_depth = self._max_depth(node.left) \n            right_depth = self._max_depth(node.right)\n            return max(left_depth, right_depth) + 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def prime_numbers():\n    primes = [2]\n    for num in range(3, 101):\n        if all(num % prime != 0 for prime in primes):\n            primes.append(num)\n    print(primes)\n\nprime_numbers() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \n  \n# Creating a 3-D array \nx = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]) \n  \n# Displaying the 3-D array \nprint(x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list1 = ['a', 'b', 'c']\nlist2 = ['1', '2', '3']\n\ndef merge_lists(list1, list2):\n    merged_list = list1 + list2\n    return merged_list\n\nmerged_list = merge_lists(list1, list2)\nprint(merged_list) # Output: ['a', 'b', 'c', '1', '2', '3'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findSCS(str1, str2, m, n): \n    if m == 0: \n        return n \n    if n == 0: \n        return m \n    if str1[m - 1] == str2[n - 1]: \n        return 1 + findSCS(str1, str2, m - 1, n - 1) \n    else: \n        return 1 + min(findSCS(str1, str2, m, n - 1), \n                       findSCS(str1, str2, m - 1, n)) \n  \ndef SCS(str1, str2): \n    return findSCS(str1, str2, len(str1), len(str2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\ndef update_record(conn, record):\n cur = conn.cursor()\n \n sql = ''' UPDATE records\n    SET name = ?,\n    data = ?\n    WHERE id = ?'''\n cur.execute(sql, record)\n conn.commit()\n \ndef delete_record(conn, record):\n cur = conn.cursor()\n \n sql = ''' DELETE FROM records\n    WHERE id = ?'''\n cur.execute(sql, (record[0],))\n conn.commit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Copyright 2016 Bhautik J Joshi\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#     http://www.apache.org/licenses/LICENSE-2.0\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\nimport argparse\n\nimport vrProjector\n\ndef main():\n  parser = argparse.ArgumentParser(description='Reproject photospheres')\n  parser.add_argument('--sourceProjection', required=True, help='Type of source projection. Valid values are: Equirectangular, Cubemap, SideBySideFisheye')\n  parser.add_argument('--sourceImage', required=True, help='Source image[s]. List multiple images in double quotes like so \"front.png right.png back.png left.png top.png bottom.png\"')\n  parser.add_argument('--useBilnear', required=False, help='Use bilinear interpolation when reprojecting. Valid values are true and false.')\n  parser.add_argument('--outProjection', required=True, help='Type of output projection. Valid values are: Equirectangular, Cubemap, SideBySideFisheye, Fisheye')\n  parser.add_argument('--outImage', required=True, help='output image[s]. List multiple images in double quotes like so \"front.png right.png back.png left.png top.png bottom.png\"')\n  parser.add_argument('--outWidth', required=True, help='output image[s] width in pixels')\n  parser.add_argument('--outHeight', required=True, help='output image[s] height in pixels')\n\n  args = parser.parse_args()\n\n  source = None\n  if args.sourceProjection.lower() == \"Equirectangular\".lower():\n    source = vrProjector.EquirectangularProjection()\n    source.loadImage(args.sourceImage)\n  elif args.sourceProjection.lower() == \"SideBySideFisheye\".lower():\n    source = vrProjector.SideBySideFisheyeProjection()\n    source.loadImage(args.sourceImage)\n  elif args.sourceProjection.lower() == \"Cubemap\".lower():\n    source = vrProjector.CubemapProjection()\n    imageList = args.sourceImage.split(' ')\n    source.loadImages(imageList[0], imageList[1], imageList[2], imageList[3], imageList[4], imageList[5])\n  elif args.sourceProjection.lower() == \"Fisheye\".lower():\n    source = vrProjector.FisheyeProjection()\n    source.loadImage(args.sourceImage)\n\n  else:\n    print(\"Quitting because unsupported source projection type: \", args.sourceProjection)\n    return\n\n  if args.useBilnear is not None:\n    if args.useBilnear.lower() == \"true\":\n      source.set_use_bilinear(True)\n\n  out = None\n  if args.outProjection.lower() == \"Equirectangular\".lower():\n    out = vrProjector.EquirectangularProjection()\n    out.initImage(int(args.outWidth), int(args.outHeight))\n  elif args.outProjection.lower() == \"SideBySideFisheye\".lower():\n    out = vrProjector.SideBySideFisheyeProjection()\n    out.initImage(int(args.outWidth), int(args.outHeight))\n  elif args.outProjection.lower() == \"Cubemap\".lower():\n    out = vrProjector.CubemapProjection()\n    out.initImages(int(args.outWidth), int(args.outHeight))\n  elif args.outProjection.lower() == \"Fisheye\".lower():\n    out = vrProjector.FisheyeProjection()\n    out.initImage(int(args.outWidth), int(args.outHeight))\n  else:\n    print(\"Quitting because unsupported output projection type: \", args.outProjection)\n    return\n\n  out.reprojectToThis(source)\n  # out.reprojectToThisThreaded(source, 16)\n\n  if args.outProjection.lower() == \"Cubemap\".lower():\n    imageList = args.outImage.split(' ')\n    out.saveImages(imageList[0], imageList[1], imageList[2], imageList[3], imageList[4], imageList[5])\n  else:\n    out.saveImage(args.outImage)\n\nif __name__ == \"__main__\":\n    main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for (let i = 0; i < 10; i++) {\n  console.log(i);\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: {'name': 'John', 'age': 25, 'address': 'London'} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class StudentDetails:\n def __init__(self):\n  self.students=[]\n \n def add_student(self,name,age,roll):\n  self.students.append({\"name\":name,\"age\":age,\"roll\":roll})\n \n def print_table(self):\n  print(\"Name\\tAge\\tRoll\")\n  for s in self.students:\n   print(\"{}\\t{}\\t{}\".format(s['name'],s['age'],s['roll'])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport re\n \ndef get_lyrics(song):\n song = song.replace(\" \", \"+\")\n base_url = 'https://www.azlyrics.com/lyrics/'\n page_url = base_url + song + \".html\"\n \n response = requests.get(page_url)\n lyrics = re.search(r\"<!-- start of lyrics -->(.*)<!-- end of lyrics -->\", response.text, flags=re.DOTALL).group(1)\n lyrics = re.sub(r'<[^>]*>', '', lyrics)\n \n return lyrics\n \nlyrics = get_lyrics('Happy Pharrell Williams')\nprint(lyrics) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Card:\n    suits = (\"Hearts\", \"Diamonds\", \"Spades\", \"Clubs\")\n    values = (\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \n              \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\")\n    \n    def __init__(self, suit, value):\n        self.suit = suit\n        self.value = value\n    \n    def __repr__(self):\n        return f\"{self.value} of {self.suit}\"\n\nclass Deck:\n    def __init__(self):\n        self.cards = [Card(suit, value) for suit in Card.suits\n                                       for value in Card.values]\n    \n    def __repr__(self):\n        return f\"Deck of {self.count()} cards\"\n    \n    def count(self):\n        return len(self.cards)\n    \n    def _deal(self, num):\n        count = self.count()\n        actual = min([count,num])\n        if count == 0:\n            raise ValueError(\"All cards have been dealt\")\n        else:\n            cards = self.cards[-actual:]\n            self.cards = self.cards[:-actual]\n            return cards\n    \n    def deal_card(self):\n        return self._deal(1)[0]\n    \n    def deal_hand(self, hand_size):\n        return self._deal(hand_size) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os, hashlib\nfrom shutil import copy2 as copy\nfrom Resources import versionNum\nfrom subprocess import Popen\nfrom shutil import rmtree\n\ndef md5sum(fd, block_size=2**20):\n    md5 = hashlib.md5()\n    while True:\n        data = fd.read(block_size)\n        if not data:\n            break\n        md5.update(data)\n    return md5.hexdigest()\n\n#clean any previous\nmPath = os.path.dirname(__file__)+\"/build/debpkg/\"\nif os.path.isdir(mPath):\n    rmtree(mPath)\n\n#create DEBIAN directory\nmPath = os.path.dirname(__file__)+\"/build/debpkg/DEBIAN\"\nif not os.path.isdir(mPath):\n    os.makedirs(mPath)\n    \n#write control file\ncontrol = open(mPath+\"/control\", \"w\")\ncontrol.write( \"Package: MXCart\\n\" + \\\n    \"Version: %s\\n\" %(versionNum) + \\\n    \"Section: misc\\n\" + \\\n    \"Priority: optional\\n\" + \\\n    \"Architecture: all\\n\" + \\\n    \"Depends: pngnq, python, python-wxgtk2.8, python-imaging, python-gdal, python-pyproj, python-simplejson, python-shapely\\n\" + \\\n    \"Installed-Size: 331\\n\" + \\\n    \"Maintainer: Will Kamp\\n\" + \\\n    \"Description: BSB version 2 and 3 chart import utility for MX Mariner\\n\" )\ncontrol.close()\n\n#copy over needed python files\nmPath = os.path.dirname(__file__)+\"/build/debpkg/usr/local/lib/mxcart/\"\nif not os.path.isdir(mPath):\n    os.makedirs(mPath)\nfor pyFile in [\"/BsbHeader.py\", \"/buildWin.py\", \"/GUI.py\", \"/MXCart.py\", \"/BsbScales.py\", \\\n               \"/BsbOutlines.py\", \"/FilePathSearch.py\", \"/Helper_Gdal.py\", \"/MyGemfBuilder.py\", \\\n               \"/Helper_Tiler.py\", \"/Helper_Merge.py\", \"/Resources.py\", \"/FindZoom.py\", \"/GenerateData.py\", \\\n               \"/reader_bsb_data.csv\", \"/my_tilers_tools/viewer-google.html\", \"/my_tilers_tools/viewer-openlayers.html\"]:\n    #print os.path.dirname(__file__)+pyFile, mPath\n    copy(os.path.dirname(__file__)+pyFile, mPath)\n    \nmPath = os.path.dirname(__file__)+\"/build/debpkg/usr/local/lib/mxcart/my_tilers_tools/\"\nif not os.path.isdir(mPath):\n    os.makedirs(mPath)\nfor pyFile in [\"/my_tilers_tools/gdal_tiler.py\", \\\n               \"/my_tilers_tools/generate_efficient_map_file.py\", \\\n               \"/my_tilers_tools/map2gdal.py\", \\\n               \"/my_tilers_tools/reader_backend.py\", \\\n               \"/my_tilers_tools/reader_bsb.py\", \\\n               \"/my_tilers_tools/tiler_functions.py\", \\\n               \"/my_tilers_tools/tiles_convert.py\", \\\n               \"/my_tilers_tools/tiles_merge_simple.py\" ]:\n    #print os.path.dirname(__file__)+pyFile, mPath\n    copy(os.path.dirname(__file__)+pyFile, mPath)\n\n#copy dependant images\nmPath = os.path.dirname(__file__)+\"/build/debpkg/usr/local/share/mxcart/\"\nif not os.path.isdir(mPath):\n    os.makedirs(mPath)\nfor pyFile in [\"/kattegat.png\", \"/spinner.gif\"]:\n    #print os.path.dirname(__file__)+pyFile, mPath\n    copy(os.path.dirname(__file__)+pyFile, mPath)\n\nmPath = os.path.dirname(__file__)+\"/build/debpkg/usr/local/share/icons/hicolor/48x48/apps/\"\nif not os.path.isdir(mPath):\n    os.makedirs(mPath)\ncopy(os.path.dirname(__file__)+\"/mxcart.png\", mPath)\n\n#create bin\nmPath = os.path.dirname(__file__)+\"/build/debpkg/usr/local/bin\"\nif not os.path.isdir(mPath):\n    os.makedirs(mPath)\nbinsh = open(mPath + \"/mxcart\", \"w\")\nbinsh.write(\"#!/bin/bash\\n\\n\" + \\\n            \"cd /usr/local/lib/mxcart\\n\" + \\\n            \"python MXCart.py\\n\")\nbinsh.close()\nPopen([\"chmod\", \"777\", mPath + \"/mxcart\"])\n\n#create desktop entry\nmPath = os.path.dirname(__file__)+\"/build/debpkg/usr/local/share/applications\"\nif not os.path.isdir(mPath):\n    os.makedirs(mPath)\ndesktop = open(mPath + \"/mxcart.desktop\", \"w\")\ndesktop.write(\"[Desktop Entry]\\n\" + \\\n    \"Version=%s\\n\" %(versionNum)  + \\\n    \"Name=MX Cart\\n\" + \\\n    \"Comment=BSB Chart Import Utility\\n\" + \\\n    \"Path=/usr/local/lib/mxcart/\\n\" + \\\n    \"Exec=mxcart\\n\" + \\\n    \"Icon=/usr/local/share/icons/hicolor/48x48/apps/mxcart.png\\n\" + \\\n    \"StartupNotify=true\\n\" + \\\n    \"Terminal=false\\n\" + \\\n    \"Type=Application\\n\" + \\\n    \"Categories=Education;Science;Geography;\" )\ndesktop.close()\n\nPopen([\"dpkg-deb\", \"-b\", os.path.dirname(__file__)+\"/build/debpkg\", os.path.dirname(__file__)+\"/build/MXCart_%s_.deb\" %(versionNum)])\n##write md5sum file\n#mPath = os.path.dirname(__file__)+\"/build/debpkg/DEBIAN\"\n#md5sums = open(mPath+\"/md5sums\", \"w\")\n#for ea in os.listdir(os.path.dirname(__file__)+\"/build/debpkg/usr/local/lib/mxcart/\"):\n#    fd = open( os.path.dirname(__file__)+\"/build/debpkg/usr/local/lib/mxcart/\"+ea, \"rb\" )\n#    md5sums.write(md5sum(fd) + \"  \" + \"/usr/local/lib/mxcart/\"+ea+\"\\n\")\n#    fd.close()\n##for fd in os \n#md5sums.close()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_frequency_index(lst): \n    dct = dict() \n\n    for i in range(len(lst)): \n        if lst[i] in dct: \n            dct[lst[i]] += 1\n        else: \n            dct[lst[i]] = 1\n    max_freq = 0\n    max_freq_index = 0\n\n    for i in dct: \n        if dct[i] > max_freq: \n            max_freq = dct[i] \n            max_freq_index = lst.index(i) \n  \n    return max_freq_index \n  \n# Driver Code \nlst = [1, 2, 3, 2, 4, 1, 2, 5]\n\n# Find the index of element which has maximum frequency \nprint(max_frequency_index(lst)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_words(sentence):\n    words = sentence.split(' ')\n    new_sentence = ''\n    for word in words:\n        if len(word) > 5:\n            new_sentence += word[::-1] + ' '\n        else:\n            new_sentence += word + ' '\n    return new_sentence\n \noriginal_sentence = 'This is an example sentence.'\nreversed_sentence = reverse_words(original_sentence)\nprint(reversed_sentence) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseInteger(x): \n     \n    reversed = 0\n    while(x > 0): \n        reminder = x % 10\n        reversed = (reversed * 10) + reminder \n        x = x // 10\n    return reversed \n\nx = 2435\nres = reverseInteger(x) \nprint(res) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_dicts(dict_1, dict_2):\n    # copy both dictionaries\n    merged_dict = dict_1.copy()  \n    merged_dict.update(dict_2)  \n    return merged_dict\n\nprint(merge_dicts(dict_1, dict_2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 11):\n    print (i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def greeting(name):\n    '''This program will take in a user's name and prints out a customized greeting message.'''\n    print('Hello, %s! Welcome!' % (name))\n\nname = input('What is your name? ')\ngreeting(name) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_area(length, width):\n    return length * width\n\nrectangle_1_area = calculate_area(2, 4)\nrectangle_2_area = calculate_area(4, 6)\n\nif(rectangle_1_area > rectangle_2_area):\n    print(\"Rectangle 1 is larger\")\nelse:\n    print(\"Rectangle 2 is larger\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def caeser_encryption_decrypt(ciphertext): \n    plaintext = \"\" \n    \n    for char in ciphertext:  \n        if char.isupper(): \n            plaintext += chr((ord(char) - 3-65) % 26 + 65) \n  \n        else: \n            plaintext += chr((ord(char) - 3 - 97) % 26 + 97) \n  \n    return plaintext \n\nresult = caeser_encryption_decrypt(\"xlmw mw xli pefsi\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_matrices(X, Y):\n    result = [[0 for col in range(len(X[0]))] for row in range(len(X))] # Create a matrix of all 0s\n    for i in range(len(X)):\n        for j in range(len(X[0])):\n            result[i][j] = X[i][j] + Y[i][j]\n    return result \n\nprint(add_matrices(X, Y)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \n# coding: utf-8\n\n# In[1]:\n\nimport pandas as pd\nimport time\nfrom sys import argv\n\nlogfile = argv[1]\nfilesize = argv[2]\n\n\n# # Python Pandas Benchmark\n\n# In[3]:\n\n\nprefix = \"file:////Users/tony/Dropbox/Projects/UW/cse599c-17sp-projects/spark-advantage/data/\"\n\nif(filesize == 'original'):\n    tairfname     = \"Tair_WA_nohead.csv\"\n    tsoilfname    = \"Tsoil_WA_nohead.csv\"\n    tsurfacefname = \"Tsurface_WA_nohead.csv\"\nelif (filesize == 'medium'):\n    tairfname     = \"Tair_WA_nohead.MEDIUM.csv\"\n    tsoilfname    = \"Tsoil_WA_nohead.MEDIUM.csv\"\n    tsurfacefname = \"Tsurface_WA_nohead.MEDIUM.csv\"\nelif (filesize == \"small\"):\n    tairfname     = \"Tair_WA_nohead.SMALL.csv\"\n    tsoilfname    = \"Tsoil_WA_nohead.SMALL.csv\"\n    tsurfacefname = \"Tsurface_WA_nohead.SMALL.csv\"\n\n\n\nstartTime = time.time()\n\n\n\ntair = pd.read_csv(prefix+tairfname)\ntsoil = pd.read_csv(prefix+tsoilfname)\ntsurface = pd.read_csv(prefix+tsurfacefname)\n\njoined = tair.merge(tsoil, on=[\"datetime\", \" lat\", \" lon\"]).merge(tsurface, on=[\"datetime\", \" lat\", \" lon\"])\n\njoined.columns = [name.strip() for name in joined.columns]\njoined[['lat', 'lon']] = joined[['lat', 'lon']].apply(pd.to_numeric)\n\nseattle = joined[(joined['lon'] > -125.52) & \\\n                 (joined['lon'] < -120.2)  & \\\n                 (joined['lat'] > 49.0)    & \\\n                 (joined['lat'] < 51.0)]\n\nseattle.groupby(by=['lat', 'lon'])['Tair'].mean()\n\nexptime = time.time() - startTime\nwith open(logfile, 'a') as log:\n    log.write(str(exptime)+'\\n') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(\"Hello World!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\n\ndef rm_punctuation(text): \n    translator = text.maketrans(\"\", \"\", string.punctuation) \n    return text.translate(translator) \n  \ntext = \"This, is a string.\"\nprint(rm_punctuation(text)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: highest_grade_person = max(students, key=lambda x:x['grade'])\nprint(\"The student with highest grade is {}\".format(highest_grade_person)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_string(str_list):\n    longest = str_list[0]\n    for s in str_list:\n        if len(s) > len(longest):\n            longest = s\n    print(longest)\n    \nlongest_string(['hello', 'world', 'abracadabra']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def heapify(arr, n, i): \n    largest = i \n    l = 2 * i + 1\n    r = 2 * i + 2\n  \n    # See if left child of root exists and is greater than root\n    if l < n and arr[i] < arr[l]: \n        largest = l \n  \n    # See if right child of root exists and is greater than root\n    if r < n and arr[largest] < arr[r]: \n        largest = r \n  \n    # Change root, if needed\n    if largest != i: \n        arr[i], arr[largest] = arr[largest], arr[i] \n  \n        # Heapify the root\n        heapify(arr, n, largest) \n\ndef heapSort(arr): \n    n = len(arr) \n  \n    # Build a maxheap\n    for i in range(n//2 - 1, -1, -1): \n        heapify(arr, n, i) \n  \n    # One by one extract elements\n    for i in range(n - 1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i] \n        heapify(arr, i, 0) \n\narr = [4, 8, 2, 9, 5, 10, 7]\nheapSort(arr)\nprint(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport json\n\ndef list_apis():\n apis = requests.get('https://api.example.com/list_apis')\n return json.loads(apis.text)\n\ndef select_api(api):\n api = requests.get('https://api.example.com/get_api/' + api)\n return json.loads(api.text)\n\ndef get_doc(api):\n doc = requests.get('https://api.example.com/get_doc/' + api)\n return json.loads(doc.text)\n\napis = list_apis()\nselected_api = select_api(apis[0])\ndoc = get_doc(selected_api)\n\nprint(doc) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mean_squared_error(y_true, y_pred):\n    squared_errors = (y_true - y_pred)**2 # calculation of squared errors \n    mse = sum(squared_errors) / len(y_true) # mean of squared errors  \n    return mse but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import jsonrpclib\n\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/api\", methods=['POST'])\ndef handle():\n    # Decode and parse the request\n    req = jsonrpclib.loads(request.data)\n\n    # Call the correct method\n    method = req['method']\n    params = req['params']\n    result = globals()[method](*params)\n\n    # Encode and return the response\n    response = jsonrpclib.dumps({'result': result})\n    return response\n\ndef reduce(words):\n    return ''.join(words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tweepy\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n#Twitter credentials\nconsumer_key = 'your_key'\nconsumer_secret = 'your_secret'\naccess_token = 'your_token'\naccess_token_secret = 'your_secret'\n\n#Create OAuth authentication\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\n#Create API object\napi = tweepy.API(auth)\n\n#initialize sentiment analyzer\nanalyzer = SentimentIntensityAnalyzer()\n\n#Search query\nsearch_query = '#sad'\n\n#Search results\nsearch_results = api.search(search_query)\n\n#Loop through search results\nfor tweet in search_results:\n    #Analyze sentiment\n    sentiment = analyzer.polarity_scores(tweet.text)\n    #Print sentiment\n    print(f\"{tweet.text} - {sentiment}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Define list of words\nwords = ['happy', 'puppy', 'joyful', 'dog', 'cat']\n \n# Initialise lists\nanimals = []\nfeelings = []\n \n# Iterate through list\nfor i in words:\n    # Classifying elements in list\n    if i == 'dog' or i == 'cat':\n        animals.append(i)\n    elif i == 'happy' or i == 'joyful' or i == 'puppy':\n        feelings.append(i)\n \n# Printing classified lists\nprint('Animals:', animals)\nprint('Feelings:', feelings) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_sum():\n    sum = 0\n    for i in range(1, 101):\n        sum += i\n    return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com/'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Scraping code goes here\n# e.g. page_title = soup.find('h1').contents but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Load the data\ndata = pd.read_csv('loan_data.csv')\n\n# Split the data into features and labels\nX = data.drop('target', axis=1)\ny = data['target']\n\n# Split the data into a training set and a test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n\n# Create a Random Forest classifier\nclf = RandomForestClassifier(n_estimators=100, random_state=42)\n\n# Train the classifier\nclf.fit(X_train, y_train)\n\n# Make predictions\ny_pred = clf.predict(X_test)\n\n# Calculate the accuracy\naccuracy = (y_pred == y_test).mean()\n\nprint('The accuracy is: {:.2f}'.format(accuracy)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Laptop:\n    def __init__(self, brand, model):\n        self.brand = brand\n        self.model = model but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB \n\n# Load the dataset\ndf = pd.read_csv('emails.csv')\n\n# Split the dataset into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(df['message'],  df['label'], random_state=1)\n\n# Create an instance of the CountVectorizer\ncount_vector = CountVectorizer()\n\n# Transform the training data using count vectorizer \ntraining_data = count_vector.fit_transform(X_train)\n\n# Transform the test data using the count vectorizer which was used for training\ntesting_data = count_vector.transform(X_test)\n\n# Create an instance of the multinomial Naive Bayes classifier \nnaive_bayes = MultinomialNB()\n\n# Fit the classifier to the training data \nnaive_bayes.fit(training_data, y_train)\n\n# Make the predictions\npredictions = naive_bayes.predict(testing_data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from tkinter import *\n\nroot = Tk()\nroot.title(\"Calculator\")\n\ne = Entry(root, width=35, borderwidth=5)\ne.grid(row=0, column=0, columnspan=3, padx=10, pady=10)\n\n# Define buttons\n\ndef button_click(number):\n current = e.get()\n e.delete(0, END)\n e.insert(0, str(current) + str(number))\n\n# Define clear function\n\ndef button_clear():\n e.delete(0, END)\n\n# Define addition function \n\ndef button_add():\n first_num=e.get()\n global f_num\n global maths\n maths=\"addition\"\n f_num = float(first_num)\n e.delete(0, END)\n\n# Define equal function \n\ndef button_equal():\n second_num= e.get()\n e.delete(0, END)\n \n if maths == \"addition\":\n  e.insert(0, f_num + float(second_num))\n \n# Create buttons\n\nbutton_1 = Button(root, text=\"1\", padx=40, pady=20, command=lambda: button_click(1))\nbutton_2 = Button(root, text=\"2\", padx=40, pady=20, command=lambda: button_click(2))\nbutton_3 = Button(root, text=\"3\", padx=40, pady=20, command=lambda: button_click(3))\nbutton_4 = Button(root, text=\"4\", padx=40, pady=20, command=lambda: button_click(4))\nbutton_5 = Button(root, text=\"5\", padx=40, pady=20, command=lambda: button_click(5))\nbutton_6 = Button(root, text=\"6\", padx=40, pady=20, command=lambda: button_click(6))\nbutton_7 = Button(root, text=\"7\", padx=40, pady=20, command=lambda: button_click(7))\nbutton_8 = Button(root, text=\"8\", padx=40, pady=20, command=lambda: button_click(8))\nbutton_9 = Button(root, text=\"9\", padx=40, pady=20, command=lambda: button_click(9))\nbutton_0 = Button(root, text=\"0\", padx=40, pady=20, command=lambda: button_click(0))\nbutton_add = Button(root, text=\"+\", padx=39, pady=20, command=button_add)\nbutton_equal = Button(root, text=\"=\", padx=91, pady=20, command=button_equal)\nbutton_clear = Button(root, text=\"Clear\", padx=79, pady=20, command=button_clear)\n\n# Put buttons on screen\n\nbutton_1.grid(row=3, column=0)\nbutton_2.grid(row=3, column=1)\nbutton_3.grid(row=3, column=2)\n\nbutton_4.grid(row=2, column=0)\nbutton_5.grid(row=2, column=1)\nbutton_6.grid(row=2, column=2)\n\nbutton_7.grid(row=1, column=0)\nbutton_8.grid(row=1, column=1)\nbutton_9.grid(row=1, column=2)\n\nbutton_0.grid(row=4, column=0)\nbutton_clear.grid(row=4, column=1, columnspan=2)\nbutton_add.grid(row=5, column=0)\nbutton_equal.grid(row=5, column=1, columnspan=2)\n\nroot.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def area(x1,y1,x2,y2,x3,y3): \n    a = (x1 * (y2 - y3) + x2 * (y3 - y1) + \n         x3 * (y1 - y2))/2; \n    return abs(a); \n\n# Driver Code \nx1,y1 = (4,7)\nx2,y2 = (5,6)\nx3,y3 = (7,4)\n\nprint(area(x1,y1,x2,y2,x3,y3)); but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_f_to_c(temperature):\n    return (temperature - 32) * 5.0/9.0\n\nresult = convert_f_to_c(64)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt \n \nx = ['John', 'George', 'James']\ny = [30, 22, 25]\n \n# plotting the points  \nplt.bar(x, y) \n  \n# naming the x-axis \nplt.xlabel('Employee Name') \n# naming the y-axis \nplt.ylabel('Age') \n# giving a title to my graph \nplt.title('Ages of Employees') \n  \n# function to show the plot \nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Player:\n    \n    def __init__(self):\n        pass\n    \n    def attack(self):\n        print(\"The Player is attacking!\")\n    \n    def defend(self):\n        print(\"The Player is defending!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply_between(start, end):\n    result = 1\n    for i in range(start, end + 1):\n        result *= i\n    return result\n\nprint(multiply_between(2, 10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_list_elements(lst):\n    for elem in lst:\n        print(elem) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.svm import LinearSVC\n\n# Create the input data set \nX = np.array([\n 'This movie was great!',\n 'I really enjoyed this movie',\n 'This movie was not so good',\n 'I did not enjoy this movie'\n ])\n\n# Create the labels\ny = np.array([1,1,0,0])\n\n# Create the vectorizer\nvectorizer = CountVectorizer()\n\n# Create the machine learning model\nclf = LinearSVC()\n\n# Vectorize the input data\nX_vectors = vectorizer.fit_transform(X)\n\n# Train the model\nclf.fit(X_vectors, y)\n\n# Predict the sentiment score of a given text\ntext = 'I hated this movie'\ntest_vector = vectorizer.transform([text])\nprediction = clf.predict(test_vector)\nprint(prediction) # Output: [0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: reviews = {\n  \"Alice\":{\n   \"rating\": random.randint(1, 5),\n   \"review\": \"I watched 'Inception' and I thought it was great!\"\n  },\n  \"Bob\":{\n   \"rating\": random.randint(1, 5),\n   \"review\": \"I watched 'Inception' and it was just okay.\"\n  },\n  \"John\":{\n   \"rating\": random.randint(1, 5),\n   \"review\": \"I didn't enjoy 'Inception' as much as some others.\"\n  }\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_numbers(num1, num2):\n    print(f\"The sum of two numbers is : {num1 + num2}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n   if n<0: \n      print(\"Incorrect input\") \n   elif n==1: \n      return 0\n   elif n==2: \n      return 1\n   else: \n      return Fibonacci(n-1)+Fibonacci(n-2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_most_frequent_element(in_list):\n    counts = {}\n    for element in in_list:\n        if element in counts:\n            counts[element] += 1\n        else:\n            counts[element] = 1\n    max_count = max(counts.values())\n    return [key for key,value in counts.items() if value == max_count][0]\n\nmost_frequent_element = find_most_frequent_element([2,3,5,7,3,3,4])\nprint(most_frequent_element) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(number): \n    if number == 0: \n        return 1\n    else:\n        return number * factorial(number - 1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreating a Multiplayer Online Game in Python\n\"\"\"\n\nimport time\nimport random\n\n# Initializing the game\nplayers = []\n\n# Defining a function for playing the game\ndef play_game(player_1, player_2):\n    # Give both players 5 seconds to choose a number between 1 and 10\n    time.sleep(5)\n    player_1_num = random.randint(1, 10)\n    player_2_num = random.randint(1, 10)\n\n    # Check to see who won\n    if player_1_num > player_2_num:\n        print(\"Player 1 (\" + player_1 + \") wins!\")\n    elif player_2_num > player_1_num:\n        print(\"Player 2 (\" + player_2 + \") wins!\")\n    else:\n        print(\"It's a draw!\")\n\n# Defining a function to add two players\ndef add_player(player):\n    players.append(player)\n    if len(players) == 2:\n        play_game(players[0], players[1])\n\n# Start the game\nprint(\"Welcome to the game! Type 'add_player()' to add your name to the game.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_longest_increasing_subsequence(arr):\n    # Initialize the list with the first element of \n    # the input array\n    LIS = [arr[0]] \n  \n    for i in range(1, len(arr)): \n        if (arr[i] > LIS[-1]): \n            # If the current element is larger \n            # than the last element in the list \n            # then append it to the list \n            LIS.append(arr[i]) \n        else: \n            # If the current element is smaller than \n            # the last element in the list then find \n            # the position of the element which is \n            # just smaller than the current element \n            # and replace it. \n            index = find_closest_number_index(LIS, arr[i]) \n            LIS[index] = arr[i] \n  \n    # Return the length of the Longest Increasing Subsequence \n    return len(LIS) \n  \n# Function to find the closest number \n# index in the list \ndef find_closest_number_index(LIS, num): \n    start = 0\n    end = len(LIS) - 1\n  \n    # Handle edge cases \n    if (num > LIS[end]): \n        return end \n  \n    # Binary search  \n    while (start <= end): \n        mid = int(start + (end - start) / 2) \n  \n        if (LIS[mid] == num): \n            return mid \n  \n        if (mid > 0 and LIS[mid - 1] < num  \n            and num < LIS[ mid ]): \n            return mid - 1\n              \n        if (num < LIS[mid]): \n            end = mid - 1\n        else: \n            start = mid + 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_prime_numbers(n):\n    prime_nums = []\n    i = 2\n    while len(prime_nums) < n:\n        isPrime = True\n        for num in prime_nums:\n            if i % num == 0:\n                isPrime = False\n                break\n        if isPrime:\n            prime_nums.append(i)\n        i += 1\n    return prime_nums\n\nif __name__ == '__main__':\n    print(get_prime_numbers(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def smallest_two_elements(nums):\n    min1 = min(nums)\n    nums.remove(min1)\n    min2 = min(nums)\n    \n    print(min1, min2)\n\nsmallest_two_elements([45, 24, 2, 17, 78]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countDifference(s): \n   a_count = 0\n   b_count = 0\n   for i in range(len(s)):  \n       if (s[i] == 'a'): \n           a_count = a_count + 1\n       elif (s[i] == 'b'): \n           b_count = b_count + 1\n   diff = a_count - b_count\n   return diff\n\nprint(countDifference('abcdba')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def celsius_to_fahrenheit(celsius):\n return celsius * 9/5 + 32\n\ncelsius = 35\nfahrenheit = celsius_to_fahrenheit(celsius)\nprint(\"{} \u00b0C is {} \u00b0F\".format(celsius, fahrenheit)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [7, 2, 3, 6, 5]\nprint(\"Max element is:\", max(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_long_words(words):\n  return [word for word in words if len(word) > 5] but is not the same. just give one example and only return the code."}
