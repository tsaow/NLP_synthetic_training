{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef optimize(f, x_init, lr, n_iter): \n    # initialize\n    x = x_init\n    \n    # gradient descent algorithm \n    for i in range(n_iter): \n        # calculate gradient \n        grad = np.gradient(f(x))\n        # update x with learning rate \n        x -= lr * grad \n       \n    return x but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(lst):\n    for i in range(len(lst)-1):\n        for j in range(len(lst)-1):\n            if lst[j] > lst[j+1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n    return lst\n\nunsorted_list = [\"cobra\", \"rhinoceros\", \"armadillo\", \"aardvark\"]\n\nsorted_list = bubble_sort(unsorted_list)\n\nprint(sorted_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom __future__ import print_function\n\nimport argparse\nimport collections\nimport contextlib\nimport functools\nimport itertools\nimport json\nimport math\nimport os\nimport random\nimport signal\nimport time\n\nimport redis\nimport pymysql\n\n\ntry:\n    import httplib\nexcept ImportError:\n    import http.client as httplib\n\ntry:\n    import urllib.parse as urllib\nexcept ImportError:\n    import urllib\n\nfrom multiprocessing.pool import Pool, ThreadPool\nfrom multiprocessing import Process\n\nKEY_PREFIX = \"stress_test:make_order\"\n\nUSER_KEY = \"{}:user\".format(KEY_PREFIX)\n\nSUCCESS_KEY = \"{}:success\".format(KEY_PREFIX)\nFAILURE_KEY = \"{}:failure\".format(KEY_PREFIX)\n\nORDER_RESP_TIME_KEY = \"{}:order_resp_time\".format(KEY_PREFIX)\nREQ_RESP_TIME_KEY = \"{}:req_resp_time\".format(KEY_PREFIX)\n\nREQUEST_SUCCESS_KEY = \"{}:request_success\".format(KEY_PREFIX)\nREQUEST_FAILURE_KEY = \"{}:request_failure\".format(KEY_PREFIX)\n\nREQ_FINISH_TIME_KEY = \"{}:req_finish_time\".format(KEY_PREFIX)\nORDER_FINISH_TIME_KEY = \"{}:order_finish_time\".format(KEY_PREFIX)\n\nredis_store = redis.Redis()\nusers, foods = {}, []\n\n\n@contextlib.contextmanager\ndef db_query():\n    db = pymysql.connect(host=os.getenv(\"DB_HOST\", \"localhost\"),\n                         port=int(os.getenv(\"DB_PORT\", 3306)),\n                         user=os.getenv(\"DB_USER\", \"root\"),\n                         passwd=os.getenv(\"DB_PASS\", \"toor\"),\n                         db=os.getenv(\"DB_NAME\", \"eleme\"))\n    try:\n        yield db\n    finally:\n        db.close()\n\n\ndef load_users():\n    global users\n    with db_query() as db:\n        cur = db.cursor()\n\n        # load users\n        cur.execute(\"SELECT id, name, password FROM user\")\n\n        for i, name, pw in cur.fetchall():\n            users[i] = {\"username\": name, \"password\": pw}\n    redis_store.sadd(USER_KEY, *users.keys())\n    return users\n\n\ndef load_foods():\n    global foods\n    with db_query() as db:\n        cur = db.cursor()\n        cur.execute(\"SELECT id, stock, price FROM food\")\n\n        for i, stock, price in cur.fetchall():\n            foods.append({\"id\": i, \"stock\": stock})\n    return foods\n\n\ndef safe_loads(data):\n    try:\n        return json.loads(data)\n    except:\n        return data\n\n\nclass QueryException(Exception):\n\n    def __init__(self, code, message):\n        self.code = code\n        self.message = message\n\n    def __str__(self):\n        return \"{} {}\".format(self.code, self.message)\n\n\nclass Query(object):\n\n    __slots__ = [\"access_token\", \"user_id\", \"cart_id\", \"client\"]\n\n    def __init__(self, host, port):\n        self.client = httplib.HTTPConnection(host, port, timeout=3)\n\n        self.access_token = None\n        self.user_id = None\n        self.cart_id = None\n\n    def request(self, method, url, headers=None, data=None):\n        data = data or {}\n        headers = headers or {}\n        headers[\"Content-Type\"] = \"application/json\"\n\n        start = time.time()\n        status = None\n        try:\n            self.client.request(method, url, body=json.dumps(data),\n                                headers=headers)\n            response = self.client.getresponse()\n            status = response.status\n            data = response.read().decode(\"utf-8\")\n            self.client.close()\n            return {\"status\": status, \"data\": safe_loads(data)}\n        finally:\n            now = time.time()\n            elapsed = now - start\n\n            with redis_store.pipeline() as p:\n                if status in (200, 204):\n                    p.incr(REQUEST_SUCCESS_KEY)\n                    p.lpush(REQ_FINISH_TIME_KEY, now)\n                else:\n                    p.incr(REQUEST_FAILURE_KEY)\n                p.lpush(REQ_RESP_TIME_KEY, elapsed)\n                p.execute()\n\n    def url(self, path):\n        assert self.access_token\n        params = {\"access_token\": self.access_token}\n        qs = urllib.urlencode(params)\n        return \"{}?{}\".format(path, qs) if qs else path\n\n    def _do_login(self, username, password):\n        data = {\n            \"username\": username,\n            \"password\": password\n        }\n        response = self.request(\"POST\", \"/login\", data=data)\n        if response[\"status\"] == 200:\n            self.access_token = response[\"data\"][\"access_token\"]\n            return True\n        return False\n\n    def login(self):\n        user_id = redis_store.spop(USER_KEY)\n        if not user_id:\n            return False\n\n        self.user_id = int(user_id)\n        user = users[self.user_id]\n        return self._do_login(user[\"username\"], user[\"password\"])\n\n    def get_foods(self):\n        res = self.request(\"GET\", self.url(\"/foods\"))\n        return res[\"status\"] == 200\n\n    def get_orders(self):\n        res = self.request(\"GET\", self.url(\"/orders\"))\n        return res[\"status\"] == 200\n\n    def create_cart(self):\n        response = self.request(\"POST\", self.url(\"/carts\"))\n        try:\n            self.cart_id = response[\"data\"].get(\"cart_id\")\n        except:\n            return False\n        return response[\"status\"] == 200\n\n    def cart_add_food(self):\n        food = random.choice(foods)\n        data = {\"food_id\": food[\"id\"], \"count\": 1}\n        path = \"/carts/{}\".format(self.cart_id)\n        res = self.request(\"PATCH\", self.url(path), data=data)\n        return res[\"status\"] == 204\n\n    def make_order(self):\n        chain = [self.login, self.get_foods, self.create_cart,\n                 self.cart_add_food, self.cart_add_food]\n        for action in chain:\n            if not action():\n                return False\n\n        data = {\"cart_id\": self.cart_id}\n        res = self.request(\"POST\", self.url(\"/orders\"), data=data)\n        return res[\"status\"] == 200\n\n\ndef job(host, port):\n    q = Query(host, port)\n\n    start = time.time()\n    try:\n        ok = q.make_order()\n    except:\n        ok = False\n\n    end = time.time()\n    elapsed = end - start\n\n    with redis_store.pipeline() as p:\n        if ok:\n            p.incr(SUCCESS_KEY)\n            p.lpush(ORDER_FINISH_TIME_KEY, end)\n        else:\n            p.incr(FAILURE_KEY)\n        p.lpush(ORDER_RESP_TIME_KEY, elapsed)\n        p.execute()\n\n\ndef progress():\n    try:\n        prev = 0\n        while True:\n            time.sleep(1)\n            cur = get_value(SUCCESS_KEY)\n\n            msg = \"Orders Per Second: {:4d}/s\".format(cur - prev)\n            print(msg, end='')\n            print('\\r' * len(msg), end='')\n\n            prev = cur\n\n    except KeyboardInterrupt:\n        pass\n    finally:\n        print('\\n')\n\n\ndef thread(host, port, threads, num):\n    pool = ThreadPool(threads)\n    for _ in range(num):\n        pool.apply_async(job, (host, port))\n        time.sleep(0.001)\n    pool.close()\n    pool.join()\n\n\ndef divide(n, m):\n    \"\"\"Divide integer n to m chunks\n    \"\"\"\n    avg = int(n / m)\n    remain = n - m * avg\n    data = list(itertools.repeat(avg, m))\n    for i in range(len(data)):\n        if not remain:\n            break\n        data[i] += 1\n        remain -= 1\n    return data\n\n\ndef work(host, port, processes, threads, times):\n    pool = Pool(processes,\n                lambda: signal.signal(signal.SIGINT, signal.SIG_IGN))\n    p = Process(target=progress)\n    p.daemon = True\n\n    start = time.time()\n\n    try:\n        for chunk in divide(times, processes):\n            pool.apply_async(thread, (host, port, threads, chunk))\n\n        p.start()\n\n        pool.close()\n        pool.join()\n        p.terminate()\n        p.join()\n\n    except KeyboardInterrupt:\n        pool.terminate()\n        p.terminate()\n        p.join()\n        pool.join()\n\n    return time.time() - start\n\n\ndef get_value(key):\n    v = redis_store.get(key)\n    return 0 if v is None else int(v)\n\n\ndef get_range(key):\n    v = redis_store.lrange(key, 0, -1)\n    return [float(i) for i in v]\n\n\ndef safe_div(a, b):\n    return a / b if b else 0\n\n\ndef get_avg(l):\n    return safe_div(sum(l), float(len(l)))\n\n\ndef report(processes, threads, total_time, total_order):\n    success = get_value(SUCCESS_KEY)\n    failure = get_value(FAILURE_KEY)\n    req_success = get_value(REQUEST_SUCCESS_KEY)\n    req_failure = get_value(REQUEST_FAILURE_KEY)\n\n    req_resp_time = get_range(REQ_RESP_TIME_KEY)\n    order_resp_time = get_range(ORDER_RESP_TIME_KEY)\n    req_finish_time = get_range(REQ_FINISH_TIME_KEY)\n    order_finish_time = get_range(ORDER_FINISH_TIME_KEY)\n\n    assert len(order_resp_time) == success + failure\n    assert len(req_resp_time) == req_success + req_failure\n\n    req_avg = safe_div(sum(req_resp_time), float(req_success))\n    order_avg = safe_div(sum(order_resp_time), success)\n\n    req_sec = collections.Counter(int(t) for t in req_finish_time)\n    order_sec = collections.Counter(int(t) for t in order_finish_time)\n\n    # remove the highest and lowest score\n    stats_req_sec = sorted(req_sec.values())[1:-1]\n    max_req_sec = int(get_avg(stats_req_sec[-5:]))\n    min_req_sec = int(get_avg(stats_req_sec[:5]))\n    mean_req_sec = int(get_avg(stats_req_sec))\n\n    # remove the highest and lowest score\n    stats_order_sec = sorted(order_sec.values())[1:-1]\n    max_order_sec = int(get_avg(stats_order_sec[-5:]))\n    min_order_sec = int(get_avg(stats_order_sec[:5]))\n    mean_order_sec = int(get_avg(stats_order_sec))\n\n    p = functools.partial(print, sep='')\n\n    p(\"Score:                \", max_order_sec)\n    p(\"Correct Rate:         \", round(success / total_order * 100, 2), \"%\")\n\n    p(\"\\nStats\")\n    p(\"Concurrent Level:     \", processes, \" x \", threads)\n    p(\"Time taken for tests: \", round(total_time * 1000, 2), \"ms\")\n    p(\"Complete requests:    \", req_success)\n    p(\"Failed requests:      \", req_failure)\n    p(\"Complete orders:      \", success)\n    p(\"Failed orders:        \", failure)\n    p(\"Time per request:     \", round(req_avg * 1000, 2), \"ms\", \" (mean)\")\n    p(\"Time per order:       \", round(order_avg * 1000, 2), \"ms\", \" (mean)\")\n    p(\"Request per second:   \", max_req_sec, \" (max) \", min_req_sec, \" (min) \", mean_req_sec, \" (mean)\")  # noqa\n    p(\"Order per second:     \", max_order_sec, \" (max) \", min_order_sec, \" (min) \", mean_order_sec, \" (mean)\")  # noqa\n\n    p(\"\\nPercentage of orders made within a certain time (ms)\")\n    order_resp_time = sorted(set(order_resp_time)) if order_resp_time else [0]\n    l = len(order_resp_time)\n    for e in (0.5, 0.75, 0.8, 0.9, 0.95, 0.98, 1):\n        idx = int(l * e)\n        idx = 0 if idx == 0 else idx - 1\n        p(\" {:>4.0%}      \".format(e),\n          int(math.ceil(order_resp_time[idx] * 1000)))\n\n\ndef main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-H\", \"--host\", default=\"localhost\",\n                        help=\"server host name\")\n    parser.add_argument(\"-p\", \"--port\", default=8080, type=int,\n                        help=\"server port\")\n    parser.add_argument(\"-c\", \"--processes\", default=2, type=int,\n                        help=\"processes\")\n    parser.add_argument(\"-t\", \"--threads\", default=4, type=int,\n                        help=\"threads\")\n    parser.add_argument(\"-n\", \"--num\", default=10000, type=int,\n                        help=\"requests\")\n\n    args = parser.parse_args()\n\n    redis_store.delete(\n        USER_KEY, SUCCESS_KEY, FAILURE_KEY,\n        ORDER_RESP_TIME_KEY, REQ_RESP_TIME_KEY,\n        REQUEST_SUCCESS_KEY, REQUEST_FAILURE_KEY,\n        REQ_FINISH_TIME_KEY, ORDER_FINISH_TIME_KEY)\n\n    load_users()\n    load_foods()\n\n    total_time = work(\n        args.host, args.port, args.processes, args.threads, args.num)\n\n    report(args.processes, args.threads, total_time, float(args.num))\n\n\nif __name__ == \"__main__\":\n    main()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import collections\n\ndef generate_frequency_distribution(num_list):\n    freq_dict = collections.Counter(num_list)\n    freq_dist_table = []\n    for val, freq in freq_dict.items():\n        freq_dist_table.append([val, freq])\n    return freq_dist_table\n\nprint(generate_frequency_distribution(list_of_numbers))\n\n# Output:\n# [[2, 1], [3, 1], [5, 2], [6, 1], [7, 1], [8, 2], [9, 1]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport lxml.html\n\n# Fetch page\nurl = 'http://www.example.com/weather'\npage = requests.get(url)\n\n# Parse page\nhtml = lxml.html.fromstring(page.content)\n\n# Extract data\nforecast_elements = html.xpath('//div[@id=\"dailyForecast\"]//tr')\nforecasts = [\n {\n 'day': el.xpath('.//th[@scope=\"row\"]/text()')[0],\n 'high_temp': el.xpath('./td[1]/text()')[0],\n 'low_temp': el.xpath('./td[2]/text()')[0],\n 'weather': el.xpath('./td[3]/text()')[0],\n }\n for el in forecast_elements\n]\n\n# Print results\nprint(forecasts) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndata = pd.read_csv('house_price-data.csv')\n\nX = data[['size']]\ny = data['price']\n\nmodel = LinearRegression()\nmodel.fit(X, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def stringCompare(str1, str2):\n    if str1 < str2: \n        return -1\n    elif str1 > str2: \n        return 1\n    else: \n        return 0\n\nstr1 = \"Hello\"\nstr2 = \"World\"\n\nresult = stringCompare(str1, str2)\nif result == -1:\n    print (\"str1 is less than str2\")\nelif result == 1:\n    print (\"str2 is less than str1\")\nelse:\n    print (\"str1 is equal to str2\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nWrite code in python to calculate the sum of every nth element of an array.\n\"\"\"\n\n# Function to calculate the sum of every nth element of an array.\ndef sum_nth(array, n):\n    # Initialize the result\n    result = 0\n    \n    # Iterate to increment the result\n    i = 0\n    while i < len(array):\n        result += array[i]\n        i += n\n        \n    return result\n\nif __name__ == '__main__':\n    array = [4, 5, 2, 9, 8, 6, 2, 3, 7, 1]\n    n = 3\n    print(sum_nth(array, n)) # 18 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def palindromeInRange(start, end):\n  for num in range(start, end + 1):\n    rev = 0\n    n = num\n    while num > 0:\n      r = num % 10\n      rev = (rev * 10) + r\n      num = num // 10\n    if rev == n and num > 10:\n      print(n, end=\" \")\n\nstart = 100\nend = 500\npalindromeInRange(start, end)\n\nOutput:\n101 111 121 131 141 151 161 171 181 191 202 212 222 232 242 252 262 272 282 292 303 313 323 333 343 353 363 373 383 393 404 414 424 434 444 454 464 474 484 494 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(str):\n    str = str.replace(\" \", \"\")\n    return str == str[::-1] \n\nwhile True:\n    input_str = input(\"Enter a string: \")\n    result = is_palindrome(input_str)\n    if result:\n        print(\"{} is a palindrome\".format(input_str))\n    else:\n        print(\"{} is not a palindrome\".format(input_str))\n    ans = input(\"Do you want to enter more strings (y/n)?\")\n        if ans == 'n':\n            break but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from org.myrobotlab.service import Arduino\nfrom org.myrobotlab.service import Servo\n\n# Create serial connection to Arduino\narduino = Arduino(\"Arduino1\", \"COM6\") # COM6 is the serial port\n\n# Connect servos to arduino \nbaseServo = Servo(arduino, \"baseServo\")\narmServo = Servo(arduino, \"armServo\")\n\n# Move servos\nbaseServo.moveTo(90)\narmServo.moveTo(180)\n\n# Move to a specific point\nbaseServo.moveTo(10)\narmServo.moveTo(20) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n if n == 0:\n  return 1\n return n * factorial(n-1)\n\nnum = 6\nprint(\"Factorial of\", num, \"is\", factorial(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \n\n# given list of numbers \nlist = [4, 17, 12, 78, 43, 13, 94, 77] \n\n# calculating mean \nmean = np.mean(list) \n\n# printing mean \nprint(\"Mean:\", mean) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: if (5 > 7):\n    greater = 5\nelse:\n    greater = 7\n\nprint(\"The greater number is: \", greater) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [4, 2, 3, 5, 1]\narr.sort()\nprint(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def char_total(string):\ntotal = 0\n\nfor char in string:\n total += ord(char)\n\nreturn total\n\nprint(char_total('Hello World!')) \n# Output: 1116 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def lcs(s1, s2):\n    dp = [[0 for i in range(len(s2)+1)]for i in range(len(s1)+1)]\n\n    res = \"\"\n    maxLength = 0\n\n    for i in range(len(s1)+1):\n        for j in range(len(s2)+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif s1[i-1] == s2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n                if dp[i][j] > maxLength:\n                    res = s1[i-dp[i][j]:i]\n                    maxLength = len(res)\n            else:\n                dp[i][j] = 0\n \n    return res\n\ns1 = \"ABABC\"\ns2 = \"BABCA\"\n\nlcs_res = lcs(s1, s2)\n\nprint(\"Longest Common Substring:\", lcs_res) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: '''\nOrganize the package structure of MyApp\n'''\n\n# Create the base package\nmyapp_package = \"myapp\"\n\n# Create the sub modules\nsub_modules = [\n    \"utils\",\n    \"controllers\",\n    \"models\",\n    \"views\",\n]\n\n# Create the individual packages\npackage_structure = [\n    myapp_package,\n    *[myapp_package + \".{}\".format(module) for module in sub_modules],\n]\n\n# Create the init files\nfor pkg in package_structure:\n    with open(pkg + \"/__init__.py\", \"w\") as f:\n        pass but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create a dictionary from a list\nmy_dict = {key: value for key, value in enumerate([\"Apple\", \"Banana\", \"Carrot\"])}\n\n# Print dictionary\nprint(my_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def modify_data(dataset, task):\nmodified_data = []\n if task == \"filter age >18\":\n for d in dataset:\n if d['age'] > 18:\n modified_data.append(d)\n return modified_data but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\nlist = [\"Cat\", \"Dog\", \"Bird\", \"Bird\", \"Bird\", \"Fish\"]\n\ncount = Counter(list)\nk = 3\n\nmostFrequent = count.most_common(k)\n\nprint(mostFrequent)  # Output: [('Bird', 3), ('Cat', 1), ('Dog', 1)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def caesarCipherEncryptor(string, key):\n  newLetters = []\n  newKey = key % 26\n  for letter in string:\n   newLetters.append(getNewLetter(letter, newKey))\n  return ''.join(newLetters)\n \ndef getNewLetter(letter, key):\n   newLetterCode = ord(letter) + key\n   return chr(newLetterCode) if newLetterCode <= 122 else chr(96 + newLetterCode % 122) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\n\ndef get_weekday(date):\n    day = datetime.datetime.strptime(date, \"%Y-%m-%d\").weekday()\n    weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n    return weekdays[day]\n\nresult = get_weekday('2020-01-01')\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n def __init__(self, name, age, height, weight):\n self.name = name\n self.age = age\n self.height = height\n self.weight = weight\n \n def get_info(self):\n return f'Name: {self.name}, Age: {self.age}, Height: {self.height}, Weight: {self.weight}' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.ensemble import RandomForestClassifier\n\n# Create a random forest classifier\nclf = RandomForestClassifier(max_depth=5, random_state=0, n_estimators=100)\n\n# Train the classifier\nclf.fit(X_train, y_train)\n\n# Predict new values\ny_pred = clf.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Importing the libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Importing the dataset\ndataset = pd.read_csv('stock_prices.csv')\n\n# Preprocessing the data\n# Convert the date column to datetime\ndataset['date'] = pd.to_datetime(dataset['date'])\n\n# Select the feature columns and target column\nX = dataset.iloc[:, 1:-1].values\ny = dataset.iloc[:, -1].values\n\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# Fitting the model to the Training set\n# Importing the regressor\nfrom sklearn.svm import SVR\n\n# Create regressor object\nregressor = SVR(kernel='rbf')\n\n# Fit the regressor to the training dataset\nregressor.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = regressor.predict(X_test)\n\n\n# Calculate the RMSE (Root Mean Squared Error)\nfrom sklearn.metrics import mean_squared_error\nrmse = (mean_squared_error(y_test, y_pred)**0.5)\n\n# Print the RMSE\nprint('Root Mean Squared Error =', rmse) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_sum(n):\n    return (n*(n+1)) // 2\n\nn = 20\nsum_of_num = get_sum(n)\n\nprint(\"Sum of first\", n, \"numbers is\", sum_of_num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Matrix(object):\n    def __init__(self, m, n, data=0):\n        self.m = m\n        self.n = n\n        self.data = data\n\n    def __repr__(self):\n        return \"Matrix({}, {}, {})\".format(self.m, self.n, self.data)\n\n    def add(self, other):\n        if not isinstance(other, Matrix) or (self.m != other.m) or (self.n != other.n):\n            raise ValueError(\"Incompatible shapes for addition\")\n\n        dataList = [[0] * self.n for size in range(self.m)]\n        for x in range(self.m):\n            for y in range(self.n):\n                dataList[x][y] = self.data[x][y] + other.data[x][y]\n\n        return Matrix(self.m, self.n, dataList)\n\n    def mul(self, other):\n        if not isinstance(other, Matrix) or (self.m != other.n):\n            raise ValueError(\"Incompatible shapes for multiplication\")\n\n        dataList = [[0] * other.n for size in range(self.m)]\n        for x in range(self.m):\n            for y in range(other.n):\n                dataList[x][y] = sum(self.data[x][i] * other.data[i][y] for i in range(self.n))\n\n        return Matrix(self.m, other.n, dataList) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countOccurrence(string, char):\n    count = 0\n    for c in string:\n        if c == char:\n            count += 1\n    return count\n\nString = \"The quick brown fox\"\nCharacter = \"q\"\ncount = countOccurrence(String, Character)\nprint(count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class CollegeStudent:\n    def __init__(self, name, age, major):\n        self.name = name\n        self.age = age\n        self.major = major\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n    \n    def get_major(self):\n        return self.major but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_table(n):\n    # Generates a table with n columns and rows \n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            print(i * j, end=\"\\t\")\n        print()\n \ngenerate_table(3) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from bs4 import BeautifulSoup\nimport requests\n\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\nlinks = soup.select('a[href]')\nfor link in links:\n    print(link['href']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -*- coding: utf-8 -*-\n\nimport re\nfrom module.plugins.Hoster import Hoster\n\n\nclass YoupornCom(Hoster):\n    __name__ = \"YoupornCom\"\n    __type__ = \"hoster\"\n    __pattern__ = r'http://(?:www\\.)?youporn\\.com/watch/.+'\n    __version__ = \"0.2\"\n    __description__ = \"\"\"Youporn.com hoster plugin\"\"\"\n    __author_name__ = \"willnix\"\n    __author_mail__ = \"willnix@pyload.org\"\n\n    def process(self, pyfile):\n        self.pyfile = pyfile\n\n        if not self.file_exists():\n            self.offline()\n\n        pyfile.name = self.get_file_name()\n        self.download(self.get_file_url())\n\n    def download_html(self):\n        url = self.pyfile.url\n        self.html = self.load(url, post={\"user_choice\": \"Enter\"}, cookies=False)\n\n    def get_file_url(self):\n        \"\"\" returns the absolute downloadable filepath\n        \"\"\"\n        if not self.html:\n            self.download_html()\n\n        return re.search(r'(http://download\\.youporn\\.com/download/\\d+\\?save=1)\">', self.html).group(1)\n\n    def get_file_name(self):\n        if not self.html:\n            self.download_html()\n\n        file_name_pattern = r\"<title>(.*) - Free Porn Videos - YouPorn</title>\"\n        return re.search(file_name_pattern, self.html).group(1).replace(\"&amp;\", \"&\").replace(\"/\", \"\") + '.flv'\n\n    def file_exists(self):\n        \"\"\" returns True or False\n        \"\"\"\n        if not self.html:\n            self.download_html()\n        if re.search(r\"(.*invalid video_id.*)\", self.html) is not None:\n            return False\n        else:\n            return True\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_validity(data):\n    try:\n        # Validation logic goes here \n        return True\n    except Exception as e:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum(arr):\n total = 0\n for i in range(len(arr)):\n total += arr[i] * (sum(arr[i+1:]) - arr[i])\n return total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import libraries\nimport requests, json \n  \n# api-endpoint \nurl = \"http://api.openweathermap.org/data/2.5/weather?q={city}&units=metric&APPID= but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Copyright 2014 ARM Limited\n#\n# Licensed under the Apache License, Version 2.0\n# See LICENSE file for details.\n\n# standard library modules, , ,\nfrom __future__ import print_function\nimport os\nimport logging\nimport re\n\n# Component, , represents an installed component, internal\nfrom .lib import component\n# version, , represent versions and specifications, internal\nfrom .lib import version\n# validate, , validate various things, internal\nfrom .lib import validate\n\nKnown_Licenses = {\n             'isc': 'https://spdx.org/licenses/ISC',\n      'apache-2.0': 'https://spdx.org/licenses/Apache-2.0',\n             'mit': 'https://spdx.org/licenses/MIT',\n    'bsd-3-clause': 'https://spdx.org/licenses/BSD-3-Clause'\n}\n\nGit_Repo_RE = re.compile(\"^(git[+a-zA-Z-]*:.*|.*\\.git|.*git@.*github\\.com.*)$\")\nHG_Repo_RE  = re.compile(\"^(hg[+a-zA-Z-]*:.*|.*\\.hg)$\")\nSVN_Repo_RE = re.compile(\"^svn[+a-zA-Z-]*:.*$\")\n\n\n\ndef getUserInput(question, default=None, type_class=str):\n    # python 2 + 3 compatibility\n    try:\n        global input\n        input = raw_input\n    except NameError:\n        pass\n    while True:\n        default_descr = ''\n        if default is not None:\n            default_descr = ' <%s> ' % str(default)\n        value = input(question + default_descr)\n        if default is not None and not value:\n            if type_class:\n                return type_class(default)\n            else:\n                return default\n        try:\n            typed_value = type_class(value)\n            break\n        except:\n            print('\"%s\" isn\\'t a valid \"%s\" value' % (value, type_class.__name__))\n    return typed_value\n\ndef yesNo(string):\n    if string.strip().lower() in ('yes', 'y'):\n        return True\n    elif string.strip().lower() in ('no', 'n'):\n        return False\n    else:\n        raise ValueError()\nyesNo.__name__ = \"Yes/No\"\n\ndef repoObject(string):\n    string = string.strip()\n    if not string:\n        return None\n    elif Git_Repo_RE.match(string):\n        repo_type = 'git'\n        url = Git_Repo_RE.match(string).group(0)\n    elif HG_Repo_RE.match(string):\n        repo_type = 'hg'\n        url = HG_Repo_RE.match(string).group(0)\n    elif SVN_Repo_RE.match(string):\n        repo_type = 'svn'\n        url = SVN_Repo_RE.match(string).group(0)\n    else:\n        raise ValueError()\n    return {'type':repo_type, 'url':url}\n\ndef listOfWords(string):\n    if isinstance(string, list):\n        return string\n    else:\n        return list(filter(bool, re.split(\",|\\\\s\", string)))\n\ndef addOptions(parser):\n    pass\n\ndef execCommand(args, following_args):\n    cwd = os.getcwd()\n    c = component.Component(cwd)\n    if c:\n        logging.info('The current directory already a contains a module: existing description will be modified')\n    elif os.path.isfile(c.getDescriptionFile()):\n        logging.error('A module description exists but could not be loaded:')\n        logging.error(c.error)\n        return 1\n\n    default_name = c.getName()\n    if not default_name:\n        default_name = validate.componentNameCoerced(os.path.split(cwd)[1])\n    \n    c.setName(getUserInput(\"Enter the module name:\", default_name))\n    c.setVersion(getUserInput(\"Enter the initial version:\", str(c.getVersion() or \"0.0.0\"), version.Version))\n\n    def current(x):\n        return c.description[x] if x in c.description else None\n\n    c.description['description'] = getUserInput(\"Short description: \", current('description'))\n    c.description['keywords']    = getUserInput(\"Keywords: \", ' '.join(current('keywords') or []), listOfWords)\n    c.description['author']      = getUserInput(\"Author: \", current('author'))\n\n    current_repo_url = current('repository')\n    if isinstance(current_repo_url, dict):\n        current_repo_url = current_repo_url['url']\n    new_repo_url = getUserInput(\"Repository url: \", current_repo_url, repoObject)\n    if new_repo_url:\n        c.description['repository'] = new_repo_url\n    c.description['homepage']    = getUserInput(\"Homepage: \", current('homepage'))\n\n    if not current('licenses') or current('license'):\n        license = getUserInput('What is the license for this project (Apache-2.0, ISC, MIT etc.)? ', 'Apache-2.0')\n        license_url = None\n        if license.lower().strip() in Known_Licenses:\n            license_url = Known_Licenses[license.lower().strip()]\n            c.description['licenses'] = [{'type':license, 'url':license_url}]\n        else:\n            c.description['license'] = license\n\n    c.description['dependencies']       = current('dependencies') or {}\n    c.description['targetDependencies'] = current('targetDependencies') or {}\n\n    isexe = getUserInput(\"Is this module an executable?\", \"no\", yesNo)\n    if isexe:\n        c.description['bin'] = './source'\n\n\n    # Create folders while initing\n    folders_to_create = [\"./source\", \"./test\", \"./\" + c.getName()]\n    for folder_name in folders_to_create:\n        if not os.path.exists(folder_name):\n            os.mkdir(folder_name)\n\n    c.writeDescription()\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def divisibleByThree(lst):\n result = 0\n\n for num in lst:\n if (num % 3 == 0) and (num >= result):\n result = num\n \n return result\n\nlst = [8, 5, 12, 15, 9]\n\nprint(divisibleByThree(lst))\n# Output: 15 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicate_characters(string):\n    new_string = ''\n    new_string_set = set()\n    for character in string:\n        if character not in new_string_set:\n            new_string += character\n            new_string_set.add(character)\n    return new_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factors_list(n): \n\n    # Create an empty list for factors \n    factors = [] \n  \n    # Loop over all factors \n    for i in range(1, n + 1): \n        if n % i == 0: \n            factors.append(i) \n\n    return factors but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n  def __init__(self, name):\n    self.name = name\n    self.age = None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt \n\nx = [1, 2, 3, 4, 5]\ny = [2, 4, 6, 8, 10]\n\nplt.plot(x, y)\nplt.title('Line Chart') \nplt.xlabel('X-Axis') \nplt.ylabel('Y-Axis') \nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_list(list1):\n    for element in list1:\n        print(element)\n\nlist1 = [1,2,3,4,5]\n\nprint_list(list1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom keras.models import load_model\n\n# Load the model\nmodel = load_model(model_path)\n\n# Encode the phrase\nphrase_encoded = np.array([phrase])\n\n# Make the prediction\nprediction = model.predict(phrase_encoded)\n\n# Print the result\nprint(\"The sentiment of the phrase is: {}\".format(prediction)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: n = int(input(\"Enter a number: \"))\nif n%2 == 0:\n    print(\"Even\")\nelse:\n    print(\"Odd\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create a dictionary to store ticket information\ntickets = {}\n\n# Function to book ticket\ndef book_ticket(name, ticket_type, ticket_price):\n\t# Check if the ticket exists\n    if ticket_type in tickets:\n        tickets[ticket_type]['availability'] -= 1\n        tickets[ticket_type]['ticket_holders'].append(name)\n    else:\n        tickets[ticket_type] = {\n            'availability': 10 - 1,\n            'price': ticket_price,\n            'ticket_holders': [name]\n        }\n\n# Function to cancel ticket\ndef cancel_ticket(name, ticket_type): \n    if ticket_type in tickets:\n        tickets[ticket_type]['availability'] += 1\n        tickets[ticket_type]['ticket_holders'].remove(name) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: colors = [\"red\", \"green\", \"blue\"]\n\n#sorting in ascending order\ndesc_colors = sorted(colors)\n\nprint(\"Colors in alphabetical order:\", desc_colors) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport sklearn\nfrom sklearn.linear_model import LinearRegression\n\n# Create model\nmodel = LinearRegression()\n\n# Train model\ndata = np.array([[10, 30], [20, 40], [30, 50], [40, 60], [50, 70]])\nX = data[:, 0].reshape(-1, 1)\ny = data[:, 1].reshape(-1, 1)\nmodel.fit(X, y)\n\n# Predict price of taxi ride\ndistance = 10\ntime = 30\nprice = model.predict([[distance, time]])[0][0]\nprint(f'The predicted price of a {distance} miles, {time} minutes taxi ride is ${price:.2f}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: dictionary = {\"a\": 10, \"b\": 3, \"c\": 4, \"d\": 1, \"e\": 5}\nsorted_dict = dict(sorted(dictionary.items(), key=lambda x: x[1],reverse = False)) \n \nprint(\"Sorting Dictionary as per the Value: \")\nprint(\"The Original Dictionary : \",dictionary)  \nprint(\"The Sorted Dictionary : \",sorted_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Algorithm for determining if a string has all unique characters\n\n# 1. Initialize an empty set\ns = set()\n\n# 2. Iterate through characters of the string\nfor character in string:\n  # 3. Check if character is in the set\n  if character in set:\n    # 4. Return False if character is in the set\n    return False\n  else:\n    # 5. Add character to set if it is not in the set\n    s.add(character)\n\n# 6. Return True\nreturn True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # define a function to calculate average\ndef get_average(grades):\n    average = 0\n    for grade in grades:\n        average += grade\n    return average / len(grades)\n\n# get data from input\nstudents = [\n  {\"name\": \"Alice\", \"grades\": [90, 92, 78]},\n  {\"name\": \"Bob\", \"grades\": [86, 92, 82]}\n]\n\n# calculate and print average for each student\nfor student in students:\n    name = student['name']\n    grades = student['grades']\n    average = get_average(grades)\n    print(\"{}'s average grade is {:.2f}\".format(name, average)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_to_decimal(binary_number):\n    decimal_number = 0\n    for digit in binary_number:\n        decimal_number = decimal_number*2 + int(digit)\n    return decimal_number\n\nbinary_number = \"1010\"\n\nprint(binary_to_decimal(binary_number)) # 10 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def create_dict(a, b):\n    dictionary = {}\n    for i in range(len(a)):\n        dictionary[a[i]] = b[i]\n    return dictionary but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\nimport tkinter\n\nroot=tkinter.Tk()\nroot.title(\"Date\")\n\n# gets current date\ntoday = datetime.datetime.now()\n# formats date\ndate_string = today.strftime(\"%d/%m/%Y\")\n\n# creates label with date\ncurrent_date_label=tkinter.Label(root, text=date_string, fg=\"blue\")\n# pack/add label to app\ncurrent_date_label.pack()\n\n# run application\nroot.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\ndata = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\nmy_dict = json.loads(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef chatbot_response(user_response):\n  \n  bot_response = ''\n \n  if user_response == 'hello':\n    bot_response = random.choice(['Hello!', 'Hi.', 'Hey there!'])\n  elif user_response == 'how are you?':\n    bot_response = 'I am doing well. How about you?'\n  elif user_response == 'bye':\n    bot_response = 'Bye! It was nice talking to you.'\n \n  return bot_response\n\n# Main Program\n\nuser_response = input(\"User: \")\n\nwhile user_response != 'bye':\n  print(\"Chatbot: \" + chatbot_response(user_response))\n  user_response = input(\"User: \")\n\nif user_response == 'bye':\n  print(\"Chatbot: \" + chatbot_response(user_response)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef generate_individual(parameter_bounds):\n    # Generate a random individual within the given bounds\n    individual = []\n    for i in range(len(parameter_bounds)):\n        lower_bound, upper_bound = parameter_bounds[i]\n        individual.append(np.random.uniform(lower_bound, upper_bound))\n    \n    return individual\n\ndef evaluate_individual(individual):\n    # Evaluate the fitness of the individual\n    score = 0 # Calculate the score, some function of parameters\n    return score\n\ndef generate_population(parameter_bounds, population_size):\n    # Generate a population of random individuals\n    population = []\n    for _ in range(population_size):\n        population.append(generate_individual(parameter_bounds))\n    return population\n\ndef mutation_operator(individual, mutate_prob):\n    # Perform mutation on a single individual \n    mutated_individual = individual\n    for i in range(len(individual)):\n        if np.random.rand() < mutate_prob:\n            lower_bound, upper_bound = parameter_bounds[i]\n            mutated_individual[i] = np.random.uniform(lower_bound, upper_bound)\n    return mutated_individual\n\ndef crossover_operator(parent_A, parent_B):\n    # Perform crossover on a pair of parents\n    # Uniformly select parameters from the two parents\n    child_A = [0] * len(parent_A)\n    child_B = [0] * len(parent_B)\n    for i in range(len(parent_A)):\n        if np.random.rand() < 0.5: \n            child_A[i], child_B[i] = parent_A[i], parent_B[i]\n        else:\n            child_A[i], child_B[i] = parent_B[i], parent_A[i]\n    return child_A, child_B\n\ndef evolutionary_search(parameter_bounds, population_size, num_iterations, mutate_prob):\n    # Initialize a population\n    population = generate_population(parameter_bounds, population_size)\n    \n    # Iterate through the generations\n    best_score = 0\n    best_individual = population[0]\n    for _ in range(num_iterations):\n        scores = []\n        for individual in population:\n            scores.append(evaluate_individual(individual))\n        \n        # Select the individuals for the mating pool\n            sorted_indices = np.argsort(-np.array(scores))\n            population = np.array(population)[sorted_indices]\n            best_score = scores[sorted_indices[0]]\n            best_individual = population[0]\n        \n        # Replace the worst performers with mutants or crossovers\n            new_population = [population[0]]\n            population_index = 0\n            while len(new_population) < population_size:\n                if np.random.rand() < 0.5:\n                    # Mutation\n                    mutant = mutation_operator(population[population_index], mutate_prob)\n                    new_population.append(mutant)\n                else:\n                    # Crossover\n                    parent_A_index, parent_B_index = np.random.choice(population_size-1, 2, replace=False)\n                    child_A, child_B = crossover_operator(population[parent_A_index], population[parent_B_index])\n                    new_population.append(child_A)\n                    new_population.append(child_B)\n                \n                population_index += 1\n            population = new_population\n    return best_individual, best_score but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def clear_dictionary(d): \n    keys = list(d.keys()) \n    for key in keys: \n        del d[key] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\nfrom sys import exit, stdin, stderr, argv, stdout\nfrom inspect import stack\nfrom config import *\nimport os\nimport csv\n\nCONT=0\nFINAL=1\n\ndefault_ttl=60\nloglevel=3\n\nclass istr(str):\n    def __eq__(self, text):\n        return str.__eq__(self.lower(), text.lower())\n\nclass qname(istr):\n    def __new__(cls, value, *args, **kwargs):\n        return istr.__new__(cls, value)\n    def _domain_parts(self,request):\n        return map(lambda x: istr(x), filter(lambda x: x!='', self.split('.')))\n    def _domain_parts_len(self,request):\n        return len(domain_parts(request))\n    def _tld(self, count=2):\n        return istr('.'.join(self.domain_parts[-count:]))\n    def __init__(self, value, minlen=None, maxlen=None):\n        self.domain_parts=self._domain_parts(value)\n        self.domain_parts_count=len(self.domain_parts)\n        self.tld=self._tld()\n    def host_part(self, substring):\n        try:\n            if self.lower().index(substring+'.')==0:\n                return True\n        except ValueError:\n            return False\n        return False\n    def is_subdomain(string, substring):\n        try:\n            return (string.lower().rindex('.'+substring)+len(substring)+1 == len(string))\n        except ValueError:\n            return False\n        return False\n\ndef logd(level=loglevel, message=None, kwargs={}):\n    if level>=loglevel:\n        print(\"LOG\\t%s(): %s\" % (stack()[1][3],'; '.join([message,', '.join(map(lambda (k,v): \"%s='%s'\" % (k,v), kwargs.iteritems()))])))\n\ndef log(level=loglevel, message=None, **kwargs):\n    if level>=loglevel:\n        print(\n            \"LOG\\t%s(): %s\" % (\n                stack()[1][3],\n                '; '.join(\n                    [\n                        message,\n                        ', '.join(\n                            map(lambda (k,v): \"%s='%s'\" % (k,v), kwargs.iteritems())\n                            )\n                    ]\n                )\n            )\n        )\n\ndef MX(priority=0, data=None, ttl=default_ttl):\n    if data:\n        return {\n            'qtype': 'MX',\n            'data':\"%s\\t%s\" % (priority, data),\n            'ttl': ttl\n        }\n    else:\n        return {}\n\ndef LOG(msg):\n    pass\n\ndef A(data=None, ttl=default_ttl):\n    if data:\n        return {\n            'qtype': 'A',\n            'data': data,\n            'ttl': ttl\n        }\n    else:\n        return {}\n\ndef match_domain(name, domain):\n    if name[-len(domain):] == domain or name[-len(domain)-1:] == '.'+domain:\n        return True\n    return False\n\nmatches=[]\ndef match(host=None, fqdn=None, domain=None, dns_class=None, type=None, remote_ip=None, local_ip=None, cache=True):\n    params=locals()\n    def wrapper(f):\n        matches.append([f, params])\n    return wrapper\n\ndef represent(response):\n    return \"\\t\".join([\n        'DATA',\n        response['qname'],\n        response['qclass'],\n        response['qtype'],\n        str(response['ttl']),\n        response['id'],\n        response['data']\n    ])\n\ndef route(request):\n    retval=[]\n    if request['qname'] in skip_zones:\n        retval.append(\"LOG\\tqname '%s' is in skipped zones list, skipping\" % request['qname'])\n        return retval\n    for f, conditions in matches:\n        if (conditions['fqdn'] is None or conditions['fqdn'] == request['qname']) and \\\n            (conditions['domain'] is None or match_domain(request['qname'], conditions['domain'])) and \\\n            (conditions['type'] is None or conditions['type'] == request['qtype'] or request['qtype'] == 'ANY') and \\\n            (conditions['dns_class'] is None or conditions['dns_class'] == request['qclass']) and \\\n            (conditions['remote_ip'] is None or conditions['remote_ip'] == request['remote-ip']) and \\\n            (conditions['local_ip'] is None or conditions['local_ip'] == request['local-ip']):\n            returned=f(request)\n            if returned:\n                if returned[1]:\n                    if type(returned[1]) is list:\n                        for item in returned[1]:\n                            retval.append(\n                                represent(\n                                    dict(request.items() + item.items())\n                                )\n                            )\n                    else:\n                        retval.append(\n                            represent(\n                                dict(request.items() + returned[1].items())\n                            )\n                        )\n                    if returned[0] == FINAL:\n                        break\n    return retval\n\ndef run(f_in=stdin, f_out=stdout):\n    line = f_in.readline().strip()\n    if not line.startswith('HELO'):\n        print >>f_out, 'FAIL'\n        f_out.flush()\n        f_in.readline()\n    else:\n        print >>f_out, \"OK\\tapp firing up\"\n        f_out.flush()\n    while True:\n        line = f_in.readline().strip()\n        if not line:\n            break\n        #request = line.split('\\t')\n        request = dict(\n            zip(\n                ['cmd','qname','qclass','qtype','id','remote-ip','local-ip','edns-subnet-address'],\n                line.split('\\t')\n            )\n        )\n        request['qname']=qname(request['qname'])\n        #request['id']=1\n\t#logd(3, 'Processing request', request)\n        if request['cmd'] == 'Q':\n            if request['qname'] != '':\n                datas=route(request)\n                if datas:\n                    print >>f_out, \"\\n\".join(datas)\n                    #print >>f_out, \"LOG\\t\"+\"\\nLOG\\t\".join(datas)\n            print >>f_out, \"END\"\n            f_out.flush()\n        elif request['cmd'] == 'PING':\n            print >>f_out, \"LOG\\tPONG\"\n            f_out.flush()\n            continue\n        elif request['cmd'] == 'HELO':\n            print >>f_out, \"OK\\trunning\"\n            f_out.flush()\n            continue\n        elif request['cmd'] == 'AXFR':\n            print >>f_out, \"END\"\n            f_out.flush()\n            continue\n        else:\n            print >>f_out, \"LOG\\tUnprocessed\"\n\ndef acme_b64encode(acme_challenge):\n    return acme_challenge.replace('_','_u').replace('-','_h')\n\ndef acme_b64decode(acme_challenge):\n    return acme_challenge.replace('_h','-').replace('_u','_')\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def LinearSearch(arr, n):\n for i in range(len(arr)):\n if arr[i] == n:\n return i\n return -1\n\nindex = LinearSearch(arr, n)\nprint(index) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse(string): \n\tif len(string) == 0: \n\t\treturn string \n\telse: \n\t\treturn reverse(string[1:]) + string[0] \n\n# Driver code \nstring = \"Python\"\n\nprint (reverse(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list1 = [1, 2, 3, 4]\nlist2 = [5, 6, 7, 8]\n\nresult = [x * y for x, y in zip(list1, list2)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_two_lists(l1, l2):\n    return [x + y for x, y in zip(l1, l2)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\ndef line_fit(x, y):\n    x = np.array(x).reshape((-1, 1))\n    y = np.array(y).reshape((-1, 1))\n    reg = LinearRegression().fit(x, y)\n    return reg.coef_[0][0], reg.intercept_[0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport lxml.html as lh\n\nurl = 'https://www.example.com/'\npage = requests.get(url)\ndoc = lh.fromstring(page.content)\n\n# parse and extract data from webpage\ndata = doc.xpath('//p/text()') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sorted_lst = sorted(lst, key=lambda x: x[key]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: public class Add {\n    public static int add(int a, int b) {\n        return a + b;\n    }\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_unique_list(n): \n    res = [] \n  \n    for i in range(n): \n        res.append(random.randint(1, n)) \n  \n        # ensure no duplicates occur\n        while len(res) != len(set(res)): \n            res.pop() \n            res.append(random.randint(1, n)) \n  \n    return res but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import hashlib\n\ndef encrypt_string(text):\n    result = hashlib.sha256(text.encode()).hexdigest()\n    return result\n\nencrypted_string = encrypt_string(\"Hello, World!\")\nprint(encrypted_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\ndef findMostCommonLetter(s):\n    letters = Counter(s)\n    most_common = letters.most_common(1)\n    return most_common[0][0]\n\ndef countOccurences(s, c):\n    cnt = 0\n    for letter in s:\n        if letter == c:\n            cnt += 1\n    return cnt\n\nmost_common = findMostCommonLetter(\"abbabbccabbc\")\nocc = countOccurences(\"abbabbccabbc\", most_common)\n\nprint(\"Most common letter: \" + most_common)\nprint(\"Occurrences: \" + str(occ)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python3\n# -*- coding: utf-8 -*-\n# cls_goal_time.py\n\nfrom aikif.lib.cls_goal import Goal\n\nclass GoalTime(Goal):\n    \"\"\" \n    goals around time - eg maximise use of object / minimize time of task\n    \"\"\"\n    def __init__(self, maximise=True, current_val=0, target_val=0):\n        \"\"\"\n        set maximise = True for class to find maximum time (usage) or\n        set to False to minimise the amount of time (eg reduce task time)\n        \"\"\"\n        self.current_val = current_val\n        self.target_val = target_val\n        self.maximise = maximise\n        self.strategy = [\n            {'name':'Travel_walk', 'speed':1, 'max_km_day':30, 'dest_flexibility':100, 'money_cost':0, 'environ_cost':0},\n            {'name':'Travel_bike', 'speed':5, 'max_km_day':200, 'dest_flexibility':50, 'money_cost':0, 'environ_cost':0},\n            {'name':'Travel_car', 'speed':60, 'max_km_day':1500, 'dest_flexibility':30, 'money_cost':50, 'environ_cost':50},\n            {'name':'Travel_bus', 'speed':60, 'max_km_day':1500, 'dest_flexibility':20, 'money_cost':10, 'environ_cost':15}\n        ]\n\n        \n    def check_for_success(self):\n        if self.maximise:\n            if self.current_val > self.target_val:\n                return False\n            else:\n                return True\n        else:\n            if self.current_val <= self.target_val:\n                return False\n            else:\n                return True\n\n    def run_plan(self, strategy):\n        \"\"\" \n        executes a plan by running the passed strategy\n        and then updates the local results\n        \"\"\"\n        print (\"TODO running strategy : \" + strategy['name'] )\n        \n\n    def find_best_plan(self):\n        \"\"\"\n        try each strategy with different amounts\n        \"\"\"\n        for strat in self.strategy:\n            self.run_plan(strat)\n                \n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quick_sort(array):\n    # base case \n    if len(array) < 2:\n        return array\n\n    # select pivot\n    pivot = array[-1]\n\n    # split array\n    left = [i for i in array[:-1] if i <= pivot]\n    right = [i for i in array[:-1] if i > pivot]\n\n    # call quick sort on left and right subarrays\n    return quick_sort(left) + [pivot] + quick_sort(right)\n\n# Driver code\narr = [7, 3, 8, 4, 10, 1]\n\n# Array after sorting\nprint(quick_sort(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n \n# define the function\ndef f(x):\n    return x**2 + 2*x + 5 + 2*x**2 + 4*x + 1\n \n# define the gradient\ndef grad_f(x):\n    return 2*x + 2 + 4*x + 4\n \n# define the learning rate (eta)\neta = 0.01\n \n# define the number of times we need to loop\nn_iterations = 15\n \n# define the initial value for x\nx = 0\n \n# loop and print\nfor i in range(n_iterations):\n    x_next = x - eta * grad_f(x)\n    x = x_next\n    print(x, f(x)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\ndef visualize_data(x_data, y_data):\n plt.scatter(x_data, y_data)\n plt.xlabel('x data')\n plt.ylabel('y data')\n plt.title('2D Scatterplot')\n plt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: users = {} \n\ndef addUser(name, details): \n    users[name] = details \n\ndef getUser(name): \n    return users[name] \n\n# Add new user\naddUser('John', {'age': 25, 'email': 'john@example.com'})\n\n# Get user details\nuser_details = getUser('John')\nprint('Age: ', user_details['age'])\nprint('Email: ', user_details['email']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculateSum(a, b):\n    return a + b\n\nsum = calculateSum(5, 6)\nprint(sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_sum(n):\n sum_total = 0\n for i in range(n+1):\n  sum_total += i\n return sum_total\n\nprint(calculate_sum(10)) # Output: 55 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # A utility function that returns  \n# maximum of two integers \ndef max(a, b): \n    return a if (a > b) else b \n  \n# Returns the maximum value that  \n# can be put in a knapsack of capacity W \ndef knapSack(W, wt, val, n): \n  \n    # Base Case \n    if n == 0 or W == 0 : \n        return 0\n  \n    # If weight of the nth item is more  \n    # than Knapsack of capacity W, then  \n    # this item cannot be included in the optimal solution \n    if (wt[n-1] > W): \n        return knapSack(W, wt, val, n-1) \n  \n    # return the maximum of two cases: \n    # (1) nth item included \n    # (2) not included \n    else: \n        return max(val[n-1] + knapSack(W-wt[n-1], wt, val, n-1),  \n                   knapSack(W, wt, val, n-1)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def char_count(str): \n result = {}\n for char in str: \n  if char in result:\n  result[char] += 1\n  else:\n  result[char] = 1\n return result\n\nresult = char_count(\"Programming\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = \"This is a sample string\"\nstr_list = string.split()\nprint(str_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def selection_sort(array):\n    for i in range(len(array)):\n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(array)): \n            if array[min_idx] > array[j]: \n                min_idx = j \n\t\n        # Swap the found minimum element with  \n        # the first element         \n        array[i], array[min_idx] = array[min_idx], array[i] \n\n# Driver code to test above \narr = [3, 42, 1, 9, 20]\nselection_sort(arr)\nprint(\"Sorted Array: \", end=\"\\n\")  \nprint(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(arr): \n  n = len(arr) \n  for i in range(n): \n    for j in range(0, n-i-1): \n      if arr[j] > arr[j+1] : \n        arr[j], arr[j+1] = arr[j+1], arr[j] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Heap:\n  '''A Heap is a specialized tree-based data structure.'''\n  \n  # Constructor to initialize a Heap\n  def __init__(self):\n    self.heap_array = []\n    \n  def get_parent_index(self, index):\n    return (index - 1)//2\n  \n  def get_left_child_index(self, index):\n    return (2*index) + 1\n  \n  def get_right_child_index(self, index):\n    return (2*index) + 2\n\n  def has_parent(self, index):\n    if self.get_parent_index(index) >= 0:\n      return True\n    else:\n      return False\n\n  def has_left_child(self, index):\n    if self.get_left_child_index(index) <= len(self.heap_array) - 1:\n      return True\n    else:\n      return False\n\n  def has_right_child(self, index):\n    if self.get_right_child_index(index) <= len(self.heap_array) - 1:\n      return True\n    else:\n      return False\n\n  def get_parent(self, index):\n    return self.heap_array[self.get_parent_index(index)]\n\n  def get_left_child(self, index):\n    return self.heap_array[self.get_left_child_index(index)]\n  \n  def get_right_child(self, index):\n    return self.heap_array[self.get_right_child_index(index)]\n\n  def insert(self, element):\n    self.heap_array.append(element)\n    self.sift_up()\n\n  def sift_up(self):\n    index = len(self.heap_array) - 1\n    while self.has_parent(index) and self.heap_array[index] > self.get_parent(index):\n      self.heap_array[index], self.heap_array[self.get_parent_index(index)] = self.heap_array[self.get_parent_index(index)], self.heap_array[index]\n      index = self.get_parent_index(index)\n\n  def delete(self, index):\n    last_element = self.heap_array[len(self.heap_array) - 1]\n    self.heap_array[index] = last_element\n    self.sift_down(index)\n\n  def sift_down(self, index):\n    while self.has_left_child(index):\n      min_index = self.get_left_child_index(index)\n      if self.has_right_child(index) and self.get_right_child(index) > self.get_left_child(index):\n        min_index = self.get_right_child_index(index)\n      \n      if self.heap_array[index] > self.heap_array[min_index]:\n        break\n      \n      self.heap_array[index], self.heap_array[min_index] = self.heap_array[min_index], self.heap_array[index]\n      index = min_index but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MyClass:\n    def __init__(self, attr1, attr2):\n        self.attr1 = attr1\n        self.attr2 = attr2\n    \n    def my_method(self):\n        # Do something\n        pass but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_dict = {'Apple':1, 'Strawberry':4, 'Banana':3, 'Grapes':2}\n\nsorted_dict = {k: v for k, v in sorted(my_dict.items(), key=lambda item: item[1])}\n\nprint(sorted_dict)\n\n# Output: {'Apple': 1, 'Grapes': 2, 'Banana': 3, 'Strawberry': 4} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nPython script to print the digits of a given integer in reverse order\n\"\"\"\n\nnum = int(input('Enter an integer: '))\n\n# Initializing the variable to hold the reversed digits \nreverse = 0\n\nwhile (num > 0):\n    # Extracting the last digit\n    remainder = num % 10\n\n    # Multiplying the reverse variable by 10 and adding the remainder\n    reverse = (reverse * 10) + remainder\n\n    # Removing the last digit of the original number\n    num = num // 10\n\n# printing the reversed digits\nprint(reverse) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import BernoulliNB\n\n# preprocess and load the data\ndata = pd.read_csv('Dataset.csv')\nX = data['text']\ny = data['label']\n\nvectorizer = CountVectorizer(binary= True)\nX = vectorizer.fit_transform(X)\n\n# Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size= 0.3)\n\n# Train the model\nmodel = BernoulliNB()\nmodel.fit(X_train, y_train)\n\n# Evaluate the model\naccuracy = model.score(X_test, y_test)\nprint('Accuracy:', accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def initial_value():\n    return 0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n# coding: utf-8\nimport os\nimport re\nimport requests\n\nfrom datetime import datetime\nfrom bs4 import BeautifulSoup\nfrom logya.core import Logya\nfrom logya.path import slugify, target_file\nfrom logya.writer import encode_content, write\n\n\nlogya = Logya()\nlogya.init_env()\n\nurl = 'https://en.wikipedia.org/wiki/Bodyweight_exercise'\nhtml = requests.get(url).text\nsoup = BeautifulSoup(html, 'lxml')\n\nreplacements = {\n    'bams': 'bam',\n    'bodybuilders': 'bodybuilder',\n    'boots': 'boot',\n    'chairs': 'chair',\n    'climbers': 'climber',\n    'crosses': 'cross',\n    'curls': 'curl',\n    'darlings': 'darling',\n    'dips': 'dip',\n    'dogs': 'dog',\n    'extensions': 'extension',\n    'humpers': 'humper',\n    'ins': 'in',\n    'kicks': 'kick',\n    'knives': 'knife',\n    'lifts': 'lift',\n    'little piggies': '3 little pigs',\n    'lunges': 'lunge',\n    'maybes': 'maybe',\n    'mikes': 'mike',\n    'mornings': 'morning',\n    'offs': 'off',\n    'plunges': 'plunge',\n    'push exercises': 'push',\n    'raises': 'raise',\n    'rotations': 'rotation',\n    'scissors': 'scissor',\n    'spidermans': 'spiderman',\n    'supermans': 'superman',\n    'swimmers': 'swimmer',\n    'squats': 'squat',\n    'ups': 'up'\n}\n\nresources = '## Resources\\n\\n* [Wikipedia: Bodyweight exercise]({})'.format(url)\n\n\ndef canonical_name(name):\n    name = name.strip().lower()\n    if name.startswith('full body'):\n        return ''\n\n    for source, target in replacements.items():\n        name = re.sub(r'\\b{}\\b'.format(source), target, name)\n    return name.title()\n\n\ndef clean_text(text):\n    return text.replace('[citation needed]', '').strip()\n\n\n# Only interested in TOC numbers 4 to 8.\ntocnumbers = range(4, 9)\n\ntoc1_items = soup.find(id='toc').find_all(class_='toclevel-1')\ngroups = [i for i in toc1_items if int(i.find('a').find(class_='tocnumber').text) in tocnumbers]\n\nassert len(groups) == len(tocnumbers)\n\n# Assemble exercise documents\nfor group in groups:\n    group_name = group.find('a').find(class_='toctext').text.strip()\n    for item in group.find('ul').find_all('a'):\n        href = item.attrs['href']\n        heading = soup.find(id=href.lstrip('#')).parent\n        name = canonical_name(item.find(class_='toctext').text)\n        groups = [canonical_name(group_name)]\n        body = []\n        variants = []\n        muscles = []\n\n        for sibling in heading.find_next_siblings():\n            if sibling.name == 'p':\n                body.append(clean_text(sibling.text))\n            elif sibling.name == 'dl':\n                dth = sibling.find('dt').text.strip().lower()\n                if dth == 'common variants':\n                    variants = list(filter(None, [canonical_name(i.text) for i in sibling.find_all('dd') if i.text != 'none']))\n                elif dth == 'muscle groups':\n                    muscles = list(filter(None, [canonical_name(i.text) for i in sibling.find_all('dd')]))\n            elif sibling.name == 'h3':\n                break\n\n        if body:\n            body.append(resources)\n\n        doc = {\n            'created': datetime.now(),\n            'description': body[0].split('. ')[0] + '.',\n            'groups': groups,\n            'muscles': muscles,\n            'template': 'exercise.html',\n            'title': name,\n            'variants': variants\n        }\n        # Files shall be saved as md files, so calling write_content directly\n        # is not possible as it would save as html.\n        filename = target_file(logya.dir_content, '/exercise/{}.md'.format(slugify(name)))\n        if not os.path.exists(filename):\n            write(filename, encode_content(doc, '\\n\\n'.join(body)))\n\n        # Create stub files for variants\n        for variant in variants:\n            filename = target_file(logya.dir_content, '/exercise/{}.md'.format(slugify(variant)))\n            if not os.path.exists(filename):\n                ex_variants = list(set(variants).union(set([name])).difference(set([variant])))\n                doc = {\n                    'created': datetime.now(),\n                    'description': '',\n                    'groups': groups,\n                    'muscles': muscles,\n                    'template': 'exercise.html',\n                    'title': variant,\n                    'variants': ex_variants\n                }\n                write(filename, encode_content(doc, ''))\n\n\n        # Create stub files for muscles\n        for muscle in muscles:\n            filename = target_file(logya.dir_content, '/muscle/{}.md'.format(slugify(muscle)))\n            if not os.path.exists(filename):\n                doc = {\n                    'created': datetime.now(),\n                    'description': '',\n                    'template': 'muscle.html',\n                    'title': muscle\n                }\n                write(filename, encode_content(doc, '')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findCommonElement(arr):\n    frequency = {}\n    for i in arr:\n        if i not in frequency:\n            frequency[i] = 1\n        else:\n            frequency[i] += 1\n    maxCount = 0\n    maxCountElement = None\n    for key, value in frequency.items():\n        if value > maxCount:\n            maxCount = value\n            maxCountElement = key\n\n    return maxCountElement\n\narr = [8, 5, 5, 9, 8, 6, 5]\nresult = findCommonElement(arr)\nprint(result)  # Output: 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: dict = {\n 'chair': 4,\n 'table': 2,\n 'sofa': 5\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_string_length(str1, str2):\n    if len(str1) > len(str2):\n        return str1\n    else:\n        return str2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findLargest(nums):\n  largest1 = float('-inf')\n  largest2 = float('-inf')\n  \n  for num in nums:\n    if num > largest2:\n      if num > largest1:\n        largest2 = largest1\n        largest1 = num\n      else:\n        largest2 = num\n  \n  return largest1, largest2\n\nfindLargest([1, 5, 2, 9, 6, 8]) // 9,8 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_languages(language):\n    language_list = [\"Python\", \"Java\", \"C\", \"C++\", \"JavaScript\"]\n    language_type = {\n        \"Python\": \"High-level programming language\", \n        \"Java\": \"High-level programming language\",\n        \"C\": \"Low-level language\",\n        \"C++\": \"High-level language\",\n        \"JavaScript\": \"High-level language\"\n    }\n\n    if language in language_list:\n        return language_type[language]\n    else:\n        return \"Unknown language\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseLetterOrder(string):\n reversed = ''\n\n for char in string:\n  reversed = char + reversed\n\n return reversed\n\nprint(reverseLetterOrder('The quick brown fox jumps over the lazy dog')) # returns \"god yzal eht revo spmuj xof nworb kciuq ehT\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_text(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    texts = soup.find_all(text=True)\n    return ' '.join(texts)\n    \nscraped_text = scrape_text('https://example.com')\nprint(scraped_text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_words(string):\n    words = {}\n    for word in string.split():\n        if word in words:\n            words[word] += 1\n        else:\n            words[word] = 1\n    return words but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_sentence(sentence):\n  # Pre-process the sentence\n  tokens = tokenize_sentence(sentence)\n  \n  # Embed the sentence\n  embedding = embed_tokens(tokens)\n  \n  # Use a ML model to classify\n  prediction = ml_model.predict(embedding)\n  \n  # Return label\n  if prediction == 0:\n    return 'conversation'\n  else:\n    return 'not conversation' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_nested_list(lst):\n    total = 0\n    for i in lst:\n        if isinstance(i,list):\n            total += sum_nested_list(i)\n        else:\n            total += i\n    return total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for num in range(1, 11):\n    print(num) but is not the same. just give one example and only return the code."}
