{"prompt": "make some code that functions the same as the following code: import statistics\n\n# Store the list of numbers \nnumber_list = [3, 8, 19, 24, 7, 50]\n \n# Calculate the standard deviation  \nstdev = statistics.stdev(number_list) \n \n# Print the standard deviation \nprint(stdev) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = 'The quick brown fox jumps over the lazy dog'.split()\nword_frequency = {}\n\nfor word in words:\n    if word not in word_frequency:\n        word_frequency[word] = 1\n    else:\n        word_frequency[word] += 1\n\nprint('Word Frequency:', word_frequency) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_letter(string, letter):\n\t\"\"\"Function to count the number of specified letter in the string\"\"\"\n\tcount = 0\n\tfor char in string:\n\t\tif char == letter:\n\t\t\tcount += 1\n\treturn count\n\n# Driver code \nstring = \"this is a sample sentence\"\nprint(count_letter(string, 'e')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pygame\n\n#intialize pygame\npygame.init()\n\n#define some colours\nGREEN = (20, 255, 140)\nRED = (255, 0, 0)\n\n#define size of the window\nsize = (640, 480)\n\n#create the window\nscreen = pygame.display.set_mode(size)\n\n#define a variable for the speed of spinning\nspeed = 0.05\n\n#and two variables one to start rotation, the other to control rotational speed\nangle = 0\nangle_speed = 0\n\n#runs the program until closed by the user\nrun = True\nwhile run:\n    #for every tick in pygame\n    for event in pygame.event.get():\n        #if the tick is closes window\n        if event.type == pygame.QUIT:\n            #exit programme\n            run = False\n\n    #fill background with a certain colour\n    screen.fill(GREEN)\n\n    #get the center of the window\n    center_x, center_y = size[0]//2, size[1]//2\n\n    #calculate the x and y cordinates of the four points on the square\n    x1 = int(center_x - 30 * math.cos(angle))\n    y1 = int(center_y - 30 * math.sin(angle))\n    x2 = int(center_x - 30 * math.cos(angle + 90))\n    y2 = int(center_y - 30 * math.sin(angle + 90))\n    x3 = int(center_x - 30 * math.cos(angle + 180))\n    y3 = int(center_y - 30 * math.sin(angle + 180))\n    x4 = int(center_x - 30 * math.cos(angle + 270))\n    y4 = int(center_y - 30 * math.sin(angle + 270))\n\n    #join the points with lines\n    pygame.draw.line(screen, RED, [x1, y1], [x2, y2], 4)\n    pygame.draw.line(screen, RED, [x2, y2], [x3, y3], 4)\n    pygame.draw.line(screen, RED, [x3, y3], [x4, y4], 4)\n    pygame.draw.line(screen, RED, [x4, y4], [x1, y1], 4)\n\n    #increment angle\n    angle += speed\n    angle_speed += 0.005\n\n    #update the window\n    pygame.display.update() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, jsonify\nfrom googletrans import Translator\n\napp = Flask(name)\n\n@app.route('/translate', method=['POST'])\ndef translate():\nsentence = request.json['sentence']\ntranslator = Translator()\ntranslation = translator.translate(sentence, dest='fr').text\n\nreturn jsonify({'translation': translation})\n\nif name == 'main':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Customer:\n    def __init__(self, name, date_of_birth, address, phone_number, credit_card_details):\n        self.name = name\n        self.date_of_birth = date_of_birth\n        self.address = address\n        self.phone_number = phone_number\n        self.credit_card_details = credit_card_details\n\nclass CustomerDatabase:\n    def __init__(self):\n        self.customers = {}\n    \n    def add_customer(self, customer):\n        self.customers[customer.name] = customer\n    \n    def get_customer(self, name):\n        return self.customers.get(name) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class PriorityQueue(object):\n    def __init__(self):\n        self.queue = []\n\n    def __str__(self):\n        return ' '.join([str(i) for i in self.queue])\n\n    def is_empty(self):\n        return len(self.queue) == []\n    \n    def insert(self, data):\n        self.queue.append(data)\n    \n    def delete(self):\n        try:\n            max = 0\n            for i in range(len(self.queue)):\n                if self.queue[i] > self.queue[max]:\n                    max = i\n            item = self.queue[max]\n            del self.queue[max]\n            return item\n        except IndexError:\n            print()\n            exit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseArray(arr): \n    start = 0\n    end = len(arr) - 1\n    while start < end: \n        arr[start], arr[end] = arr[end], arr[start] \n        start += 1\n        end -= 1\n    return arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import necessary libraries\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n \n# Load the data\niris = datasets.load_iris()\n \n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(iris.data, \niris.target, random_state=0)\n \n# Initialize the model\nknn = KNeighborsClassifier(n_neighbors=1)\n \n# Train the model\nknn.fit(X_train, y_train)\n \n# Generate predictions\ny_pred = knn.predict(X_test)\n \n# Compute accuracy\naccuracy = knn.score(X_test, y_test)\n \n# Print accuracy\nprint(\"Accuracy: {}\".format(accuracy)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef get_random_uppercase_letter():\n    return chr(random.randint(65,90))\n\nif __name__ == '__main__':\n    print(get_random_uppercase_letter()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def area_of_circle(radius):\n    return round(3.14 * radius * radius, 2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n): \n    if (n == 0): \n        return 1\n    return n * factorial(n - 1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(numbers):\n    return list(set(numbers)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from tkinter import *\nfrom tkinter import ttk\nimport random\n\nbutton_width = 17\nnumber_of_characters_per_row = 56\ndiff_for_answers = 8\ncolor = '#%02x%02x%02x' % (231, 231, 231)\n\nimport subprocess  # poskusile 5 razlicnih modulov: pyglet, mp3play, sound in se dva pa noben ni delal\n\n\n# pygame se nama zdi prevelika knjiznica za dodati za samo nekaj zvokov\ndef play_button_click():  # dela samo na OS X!\n    subprocess.call([\"afplay\", \"Sounds/button_click.mp3\"])\n    # dela prepo\u010dasi!! - ko to dela, ne dela ni\u010d drugo!\n\n\n# subprocess.call([\"afplay\", \"music.mp3\"]) # ce to igram, potem nic drugo ne dela dokler se glasba ne konca!\n\nimport gettext\n\n_ = gettext.gettext\n\n# noinspection PyBroadException\ntry:\n    en = gettext.translation('main', localedir='locale', languages=['en'])\n    en.install()\nexcept:\n    print(_(\"Prevedba v angleski jezik ni bila mogoca.\"))\n\n\nclass Quiz(Tk):\n    frames = {}\n    number_of_questions = 5\n    question_count = 0\n    number_of_all_questions = 20  # per subject in SUBJECTdata.txt\n    points = 0  # number of points user gets for answering the question correctly\n\n    def __init__(self, *args, **kwargs):\n        Tk.__init__(self, *args, **kwargs)\n        Tk.wm_title(self, _(\"Maturitetni kviz\"))\n\n        self.initialize_container_frame()\n        self.initialize_start_page()\n\n        self.set_images()\n\n    def initialize_container_frame(self):\n        self.container = ttk.Frame(self)  # to je frame, ki nima na sebi ni\u010d, na njega zlagama nove\n        self.container.pack_propagate(0)\n        self.container.pack(pady=10, padx=10)\n\n        self.container.grid_rowconfigure(0, weight=1)\n        # default weight je 0, kar pomeni da bo ta imel najvecji prostor ko spremenimo velikost - zaenkrat nima veze ker je sam\n        self.container.grid_columnconfigure(0, weight=1)\n\n    def initialize_start_page(self):\n        start_page = StartPage(self.container, self)\n        start_page.grid(row=0, column=0, sticky=\"nsew\")\n        self.frames[0] = start_page\n        self.show_frame()\n\n    def show_frame(self):\n        if self.question_count <= self.number_of_questions:\n            frame = self.frames.get(self.question_count, None)  # da slucajno ne pride do zrusitve programa\n            if frame is not None:\n                frame.tkraise()  # nalo\u017ei nov frame - vpra\u0161anje\n            else:\n                print(_(\"Nekaj se je zalomilo. Vprasanja ni bilo mogo\u010de nalo\u017eiti\"))\n            self.question_count += 1\n        else:\n            self.show_result_frame()\n\n    def set_subject(self, subject):\n        self.create_random_questions(subject)\n        self.show_frame()\n        play_button_click()\n\n    def create_random_questions(self, subject):\n        random_question_numbers = []\n        table_of_possible_question_numbers = list(\n            range(1, self.number_of_all_questions + 1))  # iti more od 1 do vkljucno stevila\n\n        # tu samo dolocimo random stevilke vprasanj, stevilka pomeni vrstica v dokumentu:\n        while len(random_question_numbers) < self.number_of_questions:\n            rand_number = random.choice(table_of_possible_question_numbers)\n            random_question_numbers.append(rand_number)\n\n            if rand_number in table_of_possible_question_numbers:\n                table_of_possible_question_numbers.remove(rand_number)\n            else:\n                print(_(\"Pri dolo\u010danju tvojih vpra\u0161anj se je zalomilo.\"))  # spet da slucajno ne pride do zrusitve\n\n        # nalozimo dejanska vprasanja, prikazemo zaenkrat se nobenega:\n        question_count = 1  # to ni lastnost metode self.question_count, ampak nova spremenljivka\n        for number in random_question_numbers:\n            question = Question(self.container, self, subject, number)\n            self.frames[question_count] = question\n            question_count += 1\n            question.grid(row=0, column=0, sticky=\"nsew\")\n\n    def show_result_frame(self):\n        result_page = ResultPage(self.container, self)\n        result_page.grid(row=0, column=0, sticky=\"nsew\")\n        result_page.tkraise()\n\n        # ponastavimo rezultate, ce bo slucajno igral ponovno:\n        self.question_count = 0\n        self.points = 0\n        self.destroy_previous_frames()  # da se nam spomin ne zabase\n\n    def destroy_previous_frames(self):\n        for frame in self.frames.values():\n            frame.destroy()\n        self.frames = {}\n\n    def increase_points(self):\n        self.points += 1\n\n    def set_images(self):\n        correct_photo = PhotoImage(file=\"Images/correct.gif\")\n        Label(self, image=correct_photo)\n        self.correct_photo = correct_photo\n        wrong_photo = wrong_photo = PhotoImage(file=\"Images/wrong.gif\")\n        Label(self, image=wrong_photo)\n        self.wrong_photo = wrong_photo\n\n\nclass StartPage(ttk.Frame):  # podeduje metode in lastnosti razreda\n    def __init__(self, parent, quiz_reference):  # self je container - vse se bo nalagalo na container\n        ttk.Frame.__init__(self, parent)\n        self.quiz_reference = quiz_reference\n\n        self.show_frame()\n\n    def show_frame(self):\n        text = _('''Pozdravljen bodo\u010di maturant!\\nPred tabo je kratek kviz iz maturitetnih predmetov\\n''')\n        ttk.Label(self, text=text, justify=\"center\").pack(padx=10)\n\n        self.show_image()\n\n        ttk.Label(self, text=_(\"Izberi podro\u010dje:\")).pack(pady=10, padx=10)\n\n        button_geo = ttk.Button(self, text=_(\"Geografija\"),\n                               command=lambda: self.quiz_reference.set_subject(\"GEO\"),\n                               width=button_width)\n        button_geo.pack(side=\"bottom\")\n        button_mat = ttk.Button(self, text=_(\"Matematika\"),\n                               command=lambda: self.quiz_reference.set_subject(\"MAT\"),\n                               width=button_width)\n        button_mat.pack(side=\"bottom\")\n        # lambda uporabimo, da lahko podamo parameter in ob tem ne spro\u017eimo klica funkcije\n\n    def show_image(self):\n        photo = PhotoImage(file=\"Images/slika.gif\")\n        label = ttk.Label(self, image=photo)\n\n        self.start_page_image = photo  # treba je imeti se eno povezavo, zato da je avtomatsko ne izbrise\n        label.pack()\n\n\nclass Question(ttk.Frame):\n    question = \"\"\n    correct_answer = 0\n    possible_answers = {}\n    chosen_answer = \"\"\n    is_confirm_button_showing = False\n    radio_buttons = []\n\n    def __init__(self, parent, quiz_reference, subject, number):  # ko imama stevilko, poiscema vprasanje, odgovor in mozne odgovore iz datoteke\n        ttk.Frame.__init__(self, parent)\n\n        self.quiz_reference = quiz_reference\n        self.subject = subject\n        self.number = number\n        self.get_data()\n\n        self.show_frame_widgets()\n\n    def show_frame_widgets(self):\n        self.show_the_question()\n        self.show_possible_answers()\n\n    def show_the_question(self):\n        '''prikaze vprasanje na label widgetu'''\n        edited_text = self.check_if_text_too_long(self.question, number_of_characters_per_row)\n\n        ttk.Label(self, text=edited_text).pack(pady=15, padx=10, side=\"top\")\n\n    def check_if_text_too_long(self, unedited_text, allowed_number_of_chars):\n        '''vrne primerno preurejen text z novimi vrsticami, ce je trenutno predolg'''\n        if len(unedited_text) <= number_of_characters_per_row: return unedited_text  # je ze ok\n\n        text = ''''''  # vecvrsticni string\n        num_of_chars = 0  # in current row\n\n        for word in unedited_text.split(\" \"):\n            num_of_chars += len(word)\n            if num_of_chars < allowed_number_of_chars:\n                text += word + \" \"\n            else:\n                text = text + word + \"\\n\"\n                num_of_chars = 0\n        return text.strip(\"\\n\")\n\n    def show_possible_answers(self):\n        self.radio_buttons = {}\n        self.var = StringVar()\n        for possible_answer in self.possible_answers:\n            possible_answer = self.check_if_text_too_long(possible_answer,\n                                                          number_of_characters_per_row - diff_for_answers)\n            R = ttk.Radiobutton(self,\n                                compound=\"left\",\n                                text=possible_answer,\n                                variable=self.var,\n                                value=possible_answer,\n                                command=self.set_chosen_answer)\n            # Ko uporabnik izbere odgovor, se mu prikaze gumb za potrditev, ko stisne nanj se preveri pravilnost izbire\n            self.radio_buttons[possible_answer] = R\n            R.pack(anchor='w')\n\n    def set_chosen_answer(self):\n        if not self.is_confirm_button_showing: self.show_confirm_button()\n\n    def show_confirm_button(self):\n        self.confirm_button = ttk.Button(self, text=_(\"Potrdi izbiro\"),\n                                         command=self.check_the_answer,\n                                         width=button_width)\n        self.confirm_button.pack(pady=8, side=\"bottom\")\n        self.is_confirm_button_showing = True\n\n    def change_text_on_confirm_button(self):\n        self.confirm_button.destroy()\n        self.next_q_button = ttk.Button(self, text=_(\"Naprej\"),\n                                        command=self.confirm_button_pressed,\n                                        width=button_width)\n        self.next_q_button.pack(pady=8, side=\"bottom\")\n\n        # prepreci da stisne na gumbe:\n        for text, radio_button in self.radio_buttons.items():\n            radio_button.configure(state=DISABLED)\n            #if radio_button.text == self.chosen_answer: print(self.chosen_answer) # to ne dela! zato je narejeno z slovarjem\n            if text == self.chosen_answer:\n                appropriate_image = self.quiz_reference.correct_photo if self.chosen_answer == self.correct_answer \\\n                    else self.quiz_reference.wrong_photo\n                #print(appropriate_image.name)\n                #radio_button.configure(image=appropriate_image) # TU BI SE MORALA PRIKAZATI ZRAVEN PRIMERNA SLIKA\n\n    def confirm_button_pressed(self):\n        play_button_click()\n        self.quiz_reference.show_frame()\n\n    def check_the_answer(self):\n        self.chosen_answer = self.var.get()\n        if self.chosen_answer == self.correct_answer: self.quiz_reference.increase_points()\n        self.change_text_on_confirm_button()\n        play_button_click()\n\n    def get_data(self):\n        data = self.subject + \"data.txt\"\n\n        with open(data, \"r\") as file:\n            lines = [line.strip() for line in file]\n            currentLine = lines[self.number]\n            # zapisano v obliki Vprasanje;odg1:odg2:odg3;odgovorPravilen\n            data = currentLine.split(\";\")\n            self.question = data[0]\n            self.correct_answer = data[2]\n            self.possible_answers = data[1].split(\":\")\n\n\nclass ResultPage(ttk.Frame):\n    def __init__(self, parent, quiz_reference):  # ko imama stevilko, poiscema vprasanje, odgovor in mozne odgovore iz datoteke\n        ttk.Frame.__init__(self, parent)\n        self.quiz_reference = quiz_reference\n        self.show_frame_widgets()\n\n    def show_frame_widgets(self):\n        points = self.quiz_reference.points\n        all_points = self.quiz_reference.number_of_questions\n        ttk.Label(self, text=\"Tvoj rezultat je: {} od {} to\u010dk!\".\n                  format(points, all_points)).pack(pady=10, padx=10)\n\n        text_message = self.appropriate_message(points)\n        ttk.Label(self, text=text_message).pack(pady=10, padx=10)\n\n        appropriate_image = \"Images/failure.gif\" if points <= all_points // 2 else \"Images/bravo.gif\"\n\n        photo = PhotoImage(file=appropriate_image)\n        label = ttk.Label(self, image=photo)\n\n        self.congratulation_photo = photo\n        label.pack(pady=15)\n\n        ttk.Button(self, text=\"Igraj ponovno!\",\n                   command=self.quiz_reference.initialize_start_page,\n                   width=button_width).pack(side=\"bottom\")\n\n    def appropriate_message(self, user_points):\n        \"\"\"Prikaze sporocilo glede na rezultat\"\"\"\n        all_points = self.quiz_reference.number_of_questions\n        if user_points in range(all_points // 2 + 1):\n            message = \"Tvoje znanje je nezadostno!\"\n        elif user_points in range(all_points // 2 + 1, all_points // 4):\n            message = \"Tvoje znanje je zadovoljivo.\"\n        elif user_points in range(all_points // 4, all_points):\n            message = \"\u010cestitam, dosegel si skoraj vse to\u010dke!\"\n        else:\n            message = \"Bravo, tvoje znanje je izjemno!!!\"  # dosegel je vse to\u010dke\n        return message\n\n\napp = Quiz()\napp.geometry(\"500x250\")\napp.configure(bg=color)  # sicer bi bil rob beli\n\n# velikost okna - to ni resitev, hocem nastavit velikost vseh framov, ne samo okna, ker se zdaj \u010dudno poravnava\napp.resizable(0, 0)  # v nobeno smer ni resizable\napp.mainloop()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\ndata = pd.read_csv('input.csv')\nprint(data.describe()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_e(s):\n # Create an empty output string\n output = ''\n\n # Iterate through the input string\n for char in s:\n # Check if the character is \"e\"\n if char == 'e':\n # If yes, add \"3\" to the output string\n output += '3'\n else:\n # Else, add the original character\n output += char\n\n return output\n\n# Test the function\nstring = 'Hello World!'\nreplaced_str = replace_e(string)\nprint(replaced_str) # Output: \"H3llo World!\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # compare two integers\nint1=1\nint2=2\nif int1 > int2:\n    print(\"int1 is greater than int2\")\nelif int2 > int1:\n    print(\"int2 is greater than int1\")\nelse:\n    print(\"int1 and int2 are equal\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_sum(arr, sum): \n for i in range(len(arr)-1): \n  for j in range(i+1, len(arr)): \n   if arr[i] + arr[j] == sum: \n    return True\n\n return False\n\narr = [20, 5, 12, 3, 9, 11] \nsum = 21\n\nif check_sum(arr, sum): \n print(\"Sum Found\") \nelse: \n print(\"Sum Not Found\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_array(arr):\n\n    # Use the two pointer technique\n    start = 0\n    end = len(arr) - 1\n\n    while start < end:\n        # Swap the values at each pointer position\n        arr[start], arr[end] = arr[end], arr[start]\n        # Move the pointer to the next position\n        start += 1\n        end -= 1\n\n    return arr\n\narr = [1, 2, 3, 4, 5]\nreverse_array(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n \ndef generate_password():\n    password_length = 8\n    all_characters = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(all_characters) for i in range(password_length))\n \n    return password but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -*- coding: utf-8 -*-\n##############################################################################\n#\n#    OpenERP, Open Source Management Solution\n#    Copyright (C) 2004-TODAY OpenERP S.A. <http://www.openerp.com>\n#\n#    This program is free software: you can redistribute it and/or modify\n#    it under the terms of the GNU Affero General Public License as\n#    published by the Free Software Foundation, either version 3 of the\n#    License, or (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU Affero General Public License for more details.\n#\n#    You should have received a copy of the GNU Affero General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n#\n##############################################################################\n\nRELEASE_LEVELS = [ALPHA, BETA, RELEASE_CANDIDATE, FINAL] = ['alpha', 'beta', 'candidate', 'final']\nRELEASE_LEVELS_DISPLAY = {ALPHA: ALPHA,\n                          BETA: BETA,\n                          RELEASE_CANDIDATE: 'rc',\n                          FINAL: ''}\n\n# version_info format: (MAJOR, MINOR, MICRO, RELEASE_LEVEL, SERIAL)\n# inspired by Python's own sys.version_info, in order to be\n# properly comparable using normal operarors, for example:\n#  (6,1,0,'beta',0) < (6,1,0,'candidate',1) < (6,1,0,'candidate',2)\n#  (6,1,0,'candidate',2) < (6,1,0,'final',0) < (6,1,2,'final',0)\nversion_info = (2, 8, 0, BETA, 0)\nversion = '.'.join(map(str, version_info[:2])) + RELEASE_LEVELS_DISPLAY[version_info[3]] + str(version_info[4] or '')\nseries = serie = major_version = '.'.join(map(str, version_info[:2]))\n\nproduct_name = 'CTTMS'\ndescription = 'CTTMS Server'\nlong_desc = '''CTTMS is a complete ERP and CRM. The main features are accounting (analytic\nand financial), stock management, sales and purchases management, tasks\nautomation, marketing campaigns, help desk, POS, etc. Technical features include\na distributed server, flexible workflows, an object database, a dynamic GUI,\ncustomizable reports, and XML-RPC interfaces.\n'''\nclassifiers = \"\"\"Development Status :: 5 - Production/Stable\nLicense :: OSI Approved :: GNU Affero General Public License v3\nProgramming Language :: Python\n\"\"\"\nurl = 'https://www.cttms.com'\nauthor = 'OpenERP S.A.'\nauthor_email = 'info@cttms.com'\nlicense = 'AGPL-3'\n\nnt_service_name = \"CTTMS-server-\" + series\n\n# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiplication_table(num): \n    for i in range(1, 11): \n        print(num, 'x', i, '=', num*i) \n        \nnum = int(input(\"Enter a number: \"))\n\nmultiplication_table(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiple_of_6(number):\n    return number * 6 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_strings_with_char(string_list, char):\n    output = []\n    for string in string_list:\n        if char in string:\n            output.append(string)\n    return output\n\nstring_list = [\"apple\", \"banana\", \"pear\"]\nchar = 'a'\n\noutput = find_strings_with_char(string_list, char)\nprint(output) # [\"apple\", \"banana\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubbleSort(arr):\n\tn = len(arr)\n \n\t# Traverse through all array elements\n\tfor i in range(n):\n \n\t\t# Last i elements are already in place\n\t\tfor j in range(0, n-i-1):\n \n\t\t\t# traverse the array from 0 to n-i-1\n\t\t\t# Swap if the element found is greater\n\t\t\t# than the next element\n\t\t\tif arr[j] > arr[j+1] :\n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]\n\n# Test the code\narr = [64, 34, 25, 12, 22, 11, 90]\n\nbubbleSort(arr)\n\nprint (\"Sorted array is:\")\nfor i in range(len(arr)):\n\tprint (\"%d\" %arr[i]), but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to find the closest next lower value of a given number in an array\ndef get_next_lower(arr, num):\n  # Initialise a dummy variable to store the closest next lower value\n  closest_low = 0\n  # Iterate through the array\n  for i in range(len(arr)):\n    # Check if the current number is less than the given number and greater than the current closest number\n    if num > arr[i] > closest_low:\n      closest_low = arr[i]\n  \n  # Return the closest next lower value\n  return closest_low\n\n# Initialize the array of numbers\narr = [1, 3, 8, 9, 10, 11, 12]\n# Initialize the given number\nnum = 9\n\n# Find the closest next lower value\nclosest_low = get_next_lower(arr, num)\nprint(\"Closest next lower value of\", num, \"is\", closest_low) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The reduce() function in Python is a part of the functools module. It receives a function and a sequence as arguments and applies the function to each item of the sequence, from left to right, cumulatively. The reduce() function reduces the sequence to a single value by combining items from the sequence using the function that is passed in as argument. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_min(lst):\n    min_val = lst[0]\n    for value in lst[1:]:\n        if value < min_val:\n            min_val = value\n    return min_val\n\nlist = [2, 3, 8, 4, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, render_template\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n return render_template('index.html')\n\n@app.route('/calc', methods=['POST'])\ndef calc():\n a = int(request.form.get('a'))\n b = int(request.form.get('b'))\n \n sum = a + b\n \n return render_template('index.html', sum=sum)\n\nif __name__ == '__main__':\n app.run()\n \n <!DOCTYPE html>\n<html>\n<head>\n <title>Calculator</title>\n</head>\n<body>\n <form action=\"/calc\" method=\"post\">\n <label for=\"a\">Number 1</label>\n <input type=\"text\" name=\"a\">\n <label for=\"b\">Number 2</label>\n <input type=\"text\" name=\"b\">\n <input type=\"submit\" value=\"Calculate\">\n <h3>The sum is: {{sum}}</h3>\n </form>\n</body>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\ndef getCurrentTemperature(location):\n  API_KEY = '<your API key>'\n  API_URL = 'http://api.openweathermap.org/data/2.5/weather?q={}&appid={}'.format(location, API_KEY)\n\n  response = requests.get(API_URL)\n  data = response.json()\n\n  # convert temperature from kelvin to Celsius\n  temperature_celsius = data['main']['temp'] - 273.15\n\n  return temperature_celsius\n\nlocation = \"London, UK\"\ntemperature = getCurrentTemperature(location)\nprint(temperature) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nimport asyncio\nimport re\n\nasync def find_files(files, pattern):\n    result = []\n    for f in files:\n        if re.search(pattern,f):\n            result.append(f)\n    return result\n\"\"\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import flask\nfrom flask import request, jsonify\n\napp = flask.Flask(__name__)\napp.config[\"DEBUG\"] = True\n\nproducts = [\n\n{'id': 0,\n'name': 'iPhone',\n'price': 600},\n\n{'id': 1,\n'name': 'Macbook',\n'price': 1200},\n\n{'id': 2,\n'name': 'iPad',\n'price': 400},\n\n]\n\n@app.route('/', methods=['GET'])\ndef home():\n    return '''<h1>Products API</h1>\n<p>A prototype API for fetching products.</p>'''\n\n# GET request\n@app.route('/api/v1/resources/products/all', methods=['GET'])\ndef api_all():\n    return jsonify(products)\n\n# GET request by id\n@app.route('/api/v1/resources/products', methods=['GET'])\ndef api_id():\n    # Check if an ID was provided as part of the URL.\n    # If ID is provided, assign it to a variable.\n    # If no ID is provided, display an error in the browser.\n    if 'id' in request.args:\n        id = int(request.args['id'])\n    else:\n        return \"Error: No id field provided. Please specify an id.\"\n\n    # Create an empty list for our results\n    results = []\n\n    # Loop through the data and match results that fit the requested ID.\n    # IDs are unique, but other fields might return many results\n    for product in products:\n        if product['id'] == id:\n            results.append(product)\n\n    # Use the jsonify function from Flask to convert our list of\n    # Python dictionaries to the JSON format.\n    return jsonify(results)\n\n# POST request\n@app.route('/api/v1/resources/products/add', methods=['POST'])\ndef api_add():\n        # Check form data as json\n        product_data = request.get_json()\n\n        # Adding product\n        max_id = products[-1]['id'] + 1\n        product_data['id'] = max_id\n        products.append(product_data)\n\n        # Result message\n        return jsonify({\n        'message': 'Product successfully added.',\n        'products': products\n    })\n\napp.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os\nimport twilio\nfrom twilio.rest import Client\n \n# Your Account SID from twilio.com/console\naccount_sid = os.environ.get('TWILIO_ACCOUNT_SID')\n \n# Your Auth Token from twilio.com/console\nauth_token  = os.environ.get('TWILIO_AUTH_TOKEN')\n \nclient = Client(account_sid, auth_token)\n \nmessage = client.messages.create(\n    to=phoneNumber, \n    from_=\"+12345678901\",\n    body=\"Hello World!\")\n \nprint(message.sid) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_key(dict):\n    max_key = -1\n    max_val = -1\n    for key, val in dict.items():\n        if key > max_key and val > max_val:\n            max_key = key\n            max_val = val\n    return max_key but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport datetime\n\ndef check_online_age(url):\n    \"\"\"Check how long a webpage has been online.\"\"\"\n    response = requests.head(url)\n    last_modified_date = response.headers.get('last-modified')\n    if last_modified_date:\n        last_modified_date = datetime.datetime.strptime(last_modified_date, '%a, %d %b %Y %H:%M:%S %Z')\n        return datetime.datetime.now() - last_modified_date\n    else:\n        return None\n\n# Usage Example\nurl = \"https://example.com\"\nage = check_online_age(url)\nprint(age)  # Age of the webpage in days but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longestSubstring(str) : \n n = len(str) \n  \n # Create a map of distinct characters \n distinct_char = {}  \n for i in range(n) : \n distinct_char[str[i]] = i \n  \n cur_start = 0\n cur_end = 0\n max_start = 0\n max_end = 0\n max_len = 0\n  \n # Iterate through all characters and check   \n # if it forms a valid substring or not \n for i in range(n) : \n  \n # If character is already present \n if (str[i] in distinct_char) : \n  \n # Reset the cur_end to recent position \n cur_end = i \n  \n # If character is not present in the  \n # already formed substring, then \n # update max_len if required  \n if (cur_end - cur_start + 1 > max_len) : \n max_len = cur_end - cur_start + 1\n max_start = cur_start \n max_end = cur_end \n  \n # Update cur_start for next iteration \n cur_start += 1\n  \n # Store last occurrence of current  \n # character in the map \n distinct_char[str[i]] = i \n  \n print(str[max_start : max_end + 1]) \n  \n# Driver \nstr = \"abcabcbb\"\nlongestSubstring(str) # Prints \"abc\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def enumerate_substrings(string):\n    substrings = set()\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            substrings.add(string[i:j+1])\n    return substrings\n\nstring = \"Supercalifragilisticexpialidocious\"\nsubstrings = enumerate_substrings(string)\nprint(substrings) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # A linked list node \nclass Node: \n  \n    # Constructor to initialize the node object \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n  \n    # Function to insert a new node at the beginning \n    def push(self, new_data): \n  \n        # 1 & 2: Allocate the Node & \n        #         Put in the data \n        new_node = Node(new_data) \n  \n        # 3. Make next of new Node as head \n        new_node.next = self.head \n  \n        # 4. Move the head to point to new Node \n        self.head = new_node \n  \n    # This function prints contents of linked list \n    # starting from head \n    def printList(self): \n        temp = self.head \n        while temp: \n            print temp.data \n            temp = temp.next\n  \n  \n# Driver program \nlinkedlist = LinkedList() \nlinkedlist.push(1) \nlinkedlist.push(2) \nlinkedlist.push(3) \nlinkedlist.push(4) \nlinkedlist.printList() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: city_population = {\n    'New York': 8450000, \n    'Los Angeles': 4000000, \n    'Chicago': 2700000, \n    'Houston': 2300000\n    } but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n        self.prev = None\n\nclass Doubly_Linked_List: \n  \n    def __init__(self): \n        self.head = None\n  \n    def insert(self, data): \n        new_node = Node(data) \n        if not self.head: \n            self.head = new_node \n        else: \n            new_node.next = self.head \n            self.head.prev = new_node \n            self.head = new_node\n\n    def delete(self, del_node): \n        if not self.head: \n            return None\n        if self.head == del_node: \n            self.head = self.head.next\n            self.head.prev = None\n        elif del_node.next: \n            del_node.next.prev = del_node.prev \n            del_node.prev.next = del_node.next \n        else: \n            del_node.prev.next = None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class SentimentAnalyzer():\n def __init__(self): # Constructor\n pass\n\n def analyze(self, text):\n sentiment = 0.0\n \n # Your logic to analyze the sentiment here\n # ...\n \n if sentiment > 0:\n return 'positive'\n elif sentiment < 0:\n return 'negative'\n else:\n return 'neutral'\n\nanalyzer = SentimentAnalyzer()\nsentiment = analyzer.analyze(\"The customer service was superb!\")\nprint(sentiment) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sum_dict = {}\n\ndef sum_list(list):\n total = 0\n for num in list:\n total += num\n sum_dict[\"sum\"] = total\n return sum_dict\n\nsum_dict = sum_list(list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\n# initialize 3D array\narr = np.zeros((4,3,2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport pygame\nfrom .texto import texto\nfrom .textoci import texto2\nfrom .imgfondo import fondo\nTEXT_COLOR2 = (0,0,0)\nCOLOR_RED = (213, 0, 0)\nBAR_COLOR = (151, 0, 172)\nTEXT_COLOR = (255, 255, 255)\n\nclass Button(pygame.sprite.Sprite):\n    def __init__(self, identificador, parent, text, fondo = 0, ancho = 500):\n        \"\"\"\n        M\u00e9todo inicializador de la clase. \n        \n        @param identificador: Variable usada para identificar al bot\u00f3n.\n        @type identificador: str\n        @param parent: Instancia del gestor de pantallas.\n        @type parent: Manejador\n        @param text: Variable que indica el texto que tendr\u00e1 el bot\u00f3n.\n        @type text: str\n        @param fondo: Indica si el fondo del bot\u00f3n sera con imagen o sin imagen (en desarrollo).\n        @type fondo: bool\n        @param ancho: Indica el ancho del bot\u00f3n. Es usado para cuadrar el texto centrado.\n        @type ancho: int\n        \"\"\"\n        pygame.sprite.Sprite.__init__(self)\n        self.ancho = ancho\n        self.parent =parent \n        tipografia = pygame.font.match_font(\"FreeSans\", False, False)        \n        font = pygame.font.Font(tipografia, parent.config.t_fuente)\n        self.identificador = identificador\n        varios = \"../imagenes/png/varios/\"\n        \n        if fondo == 0:\n            texto1 = font.render(text, 1, TEXT_COLOR)\n            textorect = texto1.get_rect()\n            texto2 = font.render(text, 1, COLOR_RED)\n            self.img_fondo = pygame.image.load(varios + \"img-boton.png\")\n            self.img_fondo2 = pygame.image.load(varios + \"img-boton.png\")\n            imgrect = self.img_fondo.get_rect()\n            textorect.center = imgrect.center[0],imgrect.center[1]+imgrect.center[1]/3\n            self.img_fondo.blit (texto1, textorect)                            \n            self.img_fondo2.blit (texto2,textorect)\n            self.rect = self.img_fondo.get_rect()            \n            self.image= self.img_fondo \n            \n        if fondo == 1:                            \n            txt = texto(0,0,text,parent.config.t_fuente,\"texto_act\",self.ancho)                                    \n            self.rect = pygame.Rect(0,0,self.ancho,txt.ancho_final)\n            image_texto = pygame.Surface((self.ancho,txt.ancho_final))\n            image_texto.fill((255,255,255))\n            image_texto.set_colorkey((255,255,255))\n            for i in txt.img_palabras:\n                image_texto.blit(i.image, i.rect)                \n            self.image = image_texto\n            self.img_fondo = image_texto\n            self.img_fondo2 = image_texto \n        \n    def cambiar_status(self, status):\n        \"\"\"\n        Dibuja un efecto en los botones cambiando la imagen de fondo (descontinuado)\n        \"\"\"\n        if status:\n            self.image = self.img_fondo2\n        else: \n            self.image = self.img_fondo    \n            \n    def mover_boton(self,x,y):\n        \"\"\"\n        Cambia la posici\u00f3n del bot\u00f3n.\n        \"\"\"\n        self.rect.center = (x,y)\n                \nclass PopUp(pygame.sprite.Sprite):\n    def __init__(self, parent , texto1, palabra_boton , imagenes , grupo, tipo = 0 ,px=512,py=281,tam =0):\n        \"\"\"\n        M\u00e9todo inicializador de la clase. \n                \n        @param parent: Instancia del gestor de pantallas.\n        @type parent: Manejador\n        @param texto1: Indica el texto que ser\u00e1 mostrado en la ventana emergente.\n        @type texto1: str \n        @param palabra_boton: Indica la palabra que tendr\u00e1 el bot\u00f3n. Solo es usado en caso de ser tipo = 0,\n        de ser distinto de 0 toma el valor de una cadena y no ser\u00e1 asignado.\n        @type palabra_boton: str\n        @param imagenes: Indica la(s) imagen(es) que mostrar\u00e1 la ventana emergente. En caso de tipo = 2\n        no es un campo necesario, en caso de tipo = 1 debe ser una superficie y en caso de tipo = 0\n        el par\u00e1metro debe ser una tupla con dos im\u00e1genes, la  posici\u00f3n 0 sera la imagen\n        que estar\u00e1 al lado del texto, mientras que la posici\u00f3n 1 sera la imagen que estar\u00e1 debajo del texto.\n        @type imagenes: pygame.Surface, tuple\n        @param grupo: Representa un grupo de Sprites donde ser\u00e1 agregado el sprite con la imagen y su rect\u00e1ngulo.\n        @type grupo: pygame.sprite.Group\n        @param tipo: Determina el tipo de ventana emergente, si toma el valor de 2 la ventana emergente solo\n        tomara el par\u00e1metro texto1 (los dem\u00e1s par\u00e1metros deben ser introducidos), en caso de tomar el valor 1\n        la ventana emergente tomara los par\u00e1metros texto1, imagenes y palabra_boton, mostrando una ventana\n        ordenada con texto justificado, un espacio a derecha donde sera ubicada la imagen (dicha imagen debe \n        tener m\u00e1ximo 1/3 del tama\u00f1o de la ventana emergente) y un bot\u00f3n centrado debajo del texto. En caso de\n        tomar valor 0 la ventana emergente sera similar a la anterior, con la diferencia que tendr\u00e1 una imagen\n        m\u00e1s ubicada en la parte izquierda del bot\u00f3n y debajo del texto.\n        @type tipo: int\n        \"\"\"\n        pygame.sprite.Sprite.__init__(self)\n        self.parent = parent\n        self.sprite = pygame.sprite.Sprite()\n        varios = \"../imagenes/png/varios/\"\n        self.texto = pygame.Surface\n        self.tipo = tipo\n        self.arreglo_botones=[]\n        self.grupo = grupo\n        self.click = -1\n        self.activo = 0\n        self.tam = 0\n        \n        if tipo == 0: \n            self.img_fondo = pygame.image.load(varios + \"cuadropop-up.png\").convert_alpha()        \n            self.sprite.image = pygame.image.load(varios + \"cuadropop-up.png\").convert_alpha()\n            self.sprite.rect = self.sprite.image.get_rect()                   \n            x=30\n            y=30\n            self.texto = texto(x, y,texto1[0], parent.config.t_fuente , \"texto_act\" ,(self.sprite.rect.width*2/3 ))                           \n            self.area_texto = pygame.Rect(x,y,self.sprite.rect.w*2/3,self.texto.ancho_final)   \n            self.area_imagenes = pygame.Rect((self.sprite.rect.w*2/3)+80, y, self.sprite.rect.w/3, self.texto.ancho_final)           \n            self.parent = parent\n            self.boton = Button(0,self.parent,palabra_boton)            \n            self.boton.mover_boton( self.sprite.rect.width/2, self.area_texto.h + x*2 + self.boton.rect.h / 2 )            \n            self.boton_rect = pygame.Rect(self.boton.rect.x  ,  self.boton.rect.y  , self.boton.rect.width  ,  self.boton.rect.height) \n            self.sprite.image = fondo(self.sprite.rect.w, self.boton.rect.y+self.boton.rect.h+x,5 ).return_imagen()  \n            self.imagen = pygame.sprite.Sprite()  \n            \n            if type (imagenes)!= pygame.Surface :\n                self.imagen2 = pygame.sprite.Sprite()  \n                self.imagen.image = imagenes[0]\n                self.imagen.rect =self.imagen.image.get_rect()                                \n                self.imagen.rect.center =(self.sprite.rect.w*2/3 +(self.sprite.rect.w/3)/2 , self.area_imagenes.h/2 + self.boton_rect.h/2 )                \n                self.imagen2.image = imagenes[1]\n                self.imagen2.rect = self.imagen.image.get_rect() \n                self.imagen2.rect.left = x\n                self.imagen2.rect.y = self.area_texto.h+40\n                self.sprite.image.blit(self.imagen2.image , self.imagen2.rect)\n                \n            else:\n                self.imagen.image = imagenes\n                self.imagen.rect =self.imagen.image.get_rect()                                \n                self.imagen.rect.center =(self.sprite.rect.w*2/3 +(self.sprite.rect.w/3)/2 , self.area_imagenes.h/2 + self.boton_rect.h/2 )\n            if self.imagen.rect.y < 5:\n                self.imagen.rect.y = 6\n            for i in self.texto.img_palabras:\n                self.sprite.image.blit(i.image, i.rect)\n            self.sprite.image.blit(self.boton.image , self.boton.rect)\n            self.sprite.image.blit(self.imagen.image , self.imagen.rect)\n            self.sprite.rect.center = (px, py)\n            self.boton_rect.center = (self.sprite.rect.x + self.sprite.rect.width/2, self.sprite.rect.y + self.area_texto.h + x*2 + self.boton.rect.h / 2)            \n\n        if tipo == 1:\n            self.img_fondo = pygame.image.load(varios + \"cuadropop-up.png\").convert_alpha()        \n            self.sprite.image = pygame.image.load(varios + \"cuadropop-up.png\").convert_alpha()\n            self.sprite.rect = self.sprite.image.get_rect()                  \n            x = 15\n            y = 15\n            o = 0\n            separacion = 30\n            tabulacion = 30\n            self.sprite.rect.w += tam\n            for i in texto1:\n                if o ==0:\n                    self.texto = texto(x, y,i, parent.config.t_fuente , \"texto_act\" ,(self.sprite.rect.width )-x)\n                if o>0:\n                    self.arreglo_botones.append(Button(o-1,self.parent,i,1,self.sprite.rect.w - x*2 -tabulacion))\n                o+=1        \n            self.texto.rect = pygame.Rect(x,y,self.sprite.rect.w - 80, self.texto.ancho_final)                                \n            y+=  self.texto.ancho_final + separacion\n            for i in self.arreglo_botones:\n                i.rect.x = x+tabulacion/2\n                i.rect.y = y\n                y+=i.rect.h + separacion/2        \n            self.img_fondo = fondo(self.sprite.rect.w, y).return_imagen()           \n            self.sprite.image = fondo(self.sprite.rect.w, y).return_imagen()\n            \n            \n            for i in self.texto.img_palabras:\n                self.sprite.image.blit(i.image,i.rect)\n                self.img_fondo.blit(i.image,i.rect)                \n            self.sprite.rect.center = (px, py)    \n                          \n            for i in self.arreglo_botones:\n                self.sprite.image.blit(i.image,i.rect)\n                self.img_fondo.blit(i.image,i.rect)                \n                i.rect.x = self.sprite.rect.x + i.rect.x\n                i.rect.y = self.sprite.rect.y + i.rect.y                   \n        \n        if tipo == 2:            \n            \n            self.sprite.image = pygame.image.load(varios + \"cuadropop-up.png\").convert_alpha()\n            self.sprite.rect = self.sprite.image.get_rect()\n            self.sprite.rect.w += tam\n            self.texto = texto2(15,15, texto1,parent.config.t_fuente, \"intercalado\", self.sprite.rect.w -15, imagenes)\n            self.sprite.image = fondo(self.sprite.rect.w, self.texto.ancho_final+30).return_imagen()\n            self.sprite.rect.h = self.texto.ancho_final+30\n            self.tam = self.texto.ancho_final+60\n            for i in self.texto.img_palabras:\n                self.sprite.image.blit(i.image, i.rect)                                             \n            self.sprite.rect.center=(px,py)\n                \n    def popup_estatus(self):\n        \"\"\"\n        Define cuando esta activa la ventana emergente.\n    \n        @return: En caso de ser True la ventana esta activa, en caso contrario no estar\u00e1 activa.\n        @rtype: bool\n        \"\"\"\n        if self.activo:\n            return True\n        else:\n            return False\n        \n    def redibujar_boton(self):\n        \"\"\"\n        Define el efecto de los botones en las ventanas emergentes (descontinuado)\n        \"\"\"\n        if self.tipo ==0:\n            self.sprite.image.blit(self.img_fondo,(self.boton.rect.x,self.boton.rect.y), self.boton.rect)\n            self.sprite.image.blit(self.boton.img , self.boton.rect)\n        if self.tipo == 1:\n            self.sprite.image.blit(self.img_fondo,(0,0))            \n        \n    def agregar_grupo (self):\n        \"\"\"\n        Agrega el sprite de la ventana emergente al grupo de sprite pasado por par\u00e1metros al crear el objeto.\n        \"\"\"\n        self.activo=1\n        self.grupo.add(self.sprite)\n        \n    def eliminar_grupo(self):\n        \"\"\"\n        Elimina el sprite de la ventana emergente del grupo de sprite pasado por par\u00e1metros al crear el objeto.\n        \"\"\"\n        self.activo = 0\n        self.grupo.remove(self.sprite)\n    \n    def evaluar_click(self): \n        \"\"\"\n        Retorna el resultado del m\u00e9todo manejador_eventos().\n    \n        @return: True si se hizo click, de lo contrario False.\n        @rtype: bool\n        \"\"\"      \n        return self.click\n        \n    def manejador_eventos(self, eventos):\n        \"\"\"\n        Determina cuando se hace click al bot\u00f3n\n        (solo en caso de ser una ventana emergente de tipo 0 o 1)\n    \n        @param eventos: Ultimo evento recibido.\n        @rtype: pygame.event.Event\n        \"\"\"      \n        teclasPulsadas = pygame.key.get_pressed()    \n        if self.tipo == 0:  \n            if self.boton_rect.collidepoint(pygame.mouse.get_pos()):\n                if (eventos.type == pygame.MOUSEBUTTONDOWN and eventos.button == 1):                 \n                    self.eliminar_grupo()                    \n                    self.click = 0\n                    return True\n                else:\n                    self.click= -1\n                    \n            if teclasPulsadas[pygame.K_RETURN]:\n                self.eliminar_grupo()\n                self.click = 0\n            else:\n                self.click= -1                   \n                \n        if self.tipo == 1:\n            for i in self.arreglo_botones:\n                if i.rect.collidepoint(pygame.mouse.get_pos()):  \n                    if eventos.type == pygame.MOUSEBUTTONDOWN and eventos.button == 1:\n                        self.click = i.identificador\n                    else:\n                        self.click = -1\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: t = (2, 3, 5, 7, 11) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: public class OddNumber {\n    public static boolean isOdd(int x) {\n        return (x % 2 == 1);\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {2, 5, 6, 9};\n\n        for (int n : nums) {\n            if (isOdd(n)) {\n                System.out.println(n + \" is odd\");\n            }\n        }\n    }\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create a new Django application\ndjango-admin startproject my_django_app\n\n# Create a Django app\npython manage.py startapp home\n\n# Add the application in the list of INSTALLED_APPS inside my_django_app/settings.py\nINSTALLED_APPS = [\n    'home',\n    ...\n]\n\n# Create the URL of the homepage in my_django_app/urls.py\nfrom home.views import home\n\nurlpatterns = [\n    path('', home, name='home'),\n    ...\n]\n\n# Create the view for home page in home/views.py\nfrom django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home/index.html')\n\n# Create the HTML view in home/templates/home/index.html\n<html>\n    <h1>Welcome to my Home Page!</h1>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\ndef crawl(url):\n page = requests.get(url)\n soup = BeautifulSoup(page.text, \"html.parser\")\n with open(\"document.txt\", \"w\") as f:\n f.write(soup.prettify())\n\ncrawl(\"https://www.example.com\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from bs4 import BeautifulSoup\ndef get_description(html_str):\n  soup = BeautifulSoup(html_str, \"lxml\")\n  description = soup.find(\"description\")\n  return description.get_text() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_binary(num):\n    return bin(num)[2:]\n\nres = get_binary(num)\nprint(res) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: A = ['apple', 'banana', 'orange', 'grape']\nA[0] = 'pear'\nprint(A) # Output:  ['pear', 'banana', 'orange', 'grape'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_distinct_words(string):\n    words = string.split()  \n    distinct_words = set(words)  \n    return len(distinct_words)\n\nif __name__ == '__main__':\n    string = \"I love to code in Python\"\n    print(\"Number of distinct words:\", count_distinct_words(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def median(nums):\n    nums.sort()\n    length = len(nums)\n \n    if length % 2 == 0:\n        return (nums[length//2] + nums[(length//2)-1])/2.0\n    else:\n        return nums[length//2] \n\nlist = [5, 8, 2, 7, 4]\nmed = median(list)\nprint('The median of the list is ' + str(med)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\n# API Key and location Id\napiKey = 'your_api_key'\nlocationId = 'your_location_id'\n\n# Make the request to the API\nr = requests.get('http://api.openweathermap.org/data/2.5/weather?id='+locationId+'&appid='+apiKey)\n\n# Get the data\ndata = r.json()\n\n# Print the data\nprint(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_unique_elements(list1, list2):\n return list(set(list1) - set(list2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_depth(root):\n    if root is None:\n        return 0\n\n    left_depth = max_depth(root.left)\n    right_depth = max_depth(root.right)\n\n    return max(left_depth, right_depth) + 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_domain(email_list):\n    \"\"\"\n    This function returns the list of domains from the given emails.\n   \n    Parameters:\n    email_list: list of emails\n    \n    Returns:\n    list of domin names \n    \"\"\"\n    domain_list = []\n    \n    for email in email_list:\n        domain_name = email.split('@')[1]\n        domain_list.append(domain_name)\n    \n    return domain_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def valid_sudoku(nums):\n    n = len(nums)\n    if n != 81:\n        return False\n\n    # create 9x9 array\n    board = [[0 for x in range(9)] for y in range(9)]\n\n    # populate board with input numbers\n    for i in range(n): \n        x = i % 9 \n        y = i // 9\n        board[y][x] = nums[i]\n\n    # check each row\n    for row in range(9):\n        if not valid_row(board[row]):\n            return False\n\n    # check each column\n    for col in range(9):\n        if not valid_row(get_column(board, col)):\n            return False\n\n    # check each sub-box\n    for x in range(3):\n        for y in range(3):\n            if not valid_row(get_box(board, x, y)):\n                return False\n    \n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def divisible_numbers():\n  for num in range(2000, 3201):\n    if (num % 7 == 0) and (num % 5 == 0):\n      print(num, end=\", \")\n\nif __name__ == '__main__':\n  divisible_numbers() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # update package manager\nsudo apt-get update\n\n# install latest version of Python 3\nsudo apt-get install python3\n\n# check version of python installed\npython3 --version but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_numbers(numbers): \n    for i in range(len(numbers) - 1):\n        min_index = i\n        for j in range(i + 1, len(numbers)):\n            if numbers[min_index] > numbers[j]:\n                min_index = j\n        numbers[i], numbers[min_index] = numbers[min_index], numbers[i]\n    return numbers\n\nlist_numbers = [3,5,2,7,1,8,4]\nsorted_list = sort_numbers(list_numbers)\n\nprint(sorted_list) # Output: [1, 2, 3, 4, 5, 7, 8] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -*- coding: utf-8 -*-\n# Copyright 2020 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\nimport warnings\nfrom typing import Callable, Dict, Optional, Sequence, Tuple\n\nfrom google.api_core import gapic_v1  # type: ignore\nfrom google.api_core import exceptions as core_exceptions  # type: ignore\nfrom google.auth import credentials as ga_credentials  # type: ignore\nfrom google.auth.transport.grpc import SslCredentials  # type: ignore\n\nimport grpc  # type: ignore\n\nfrom google.auth.transport.requests import AuthorizedSession\n\nfrom google.cloud.compute_v1.types import compute\n\nfrom .base import AddressesTransport, DEFAULT_CLIENT_INFO\n\n\nclass AddressesRestTransport(AddressesTransport):\n    \"\"\"REST backend transport for Addresses.\n\n    The Addresses API.\n\n    This class defines the same methods as the primary client, so the\n    primary client can load the underlying transport implementation\n    and call it.\n\n    It sends JSON representations of protocol buffers over HTTP/1.1\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        host: str = \"compute.googleapis.com\",\n        credentials: ga_credentials.Credentials = None,\n        credentials_file: str = None,\n        scopes: Sequence[str] = None,\n        client_cert_source_for_mtls: Callable[[], Tuple[bytes, bytes]] = None,\n        quota_project_id: Optional[str] = None,\n        client_info: gapic_v1.client_info.ClientInfo = DEFAULT_CLIENT_INFO,\n    ) -> None:\n        \"\"\"Instantiate the transport.\n\n        Args:\n            host (Optional[str]):\n                 The hostname to connect to.\n            credentials (Optional[google.auth.credentials.Credentials]): The\n                authorization credentials to attach to requests. These\n                credentials identify the application to the service; if none\n                are specified, the client will attempt to ascertain the\n                credentials from the environment.\n\n            credentials_file (Optional[str]): A file with credentials that can\n                be loaded with :func:`google.auth.load_credentials_from_file`.\n                This argument is ignored if ``channel`` is provided.\n            scopes (Optional(Sequence[str])): A list of scopes. This argument is\n                ignored if ``channel`` is provided.\n            client_cert_source_for_mtls (Callable[[], Tuple[bytes, bytes]]): Client\n                certificate to configure mutual TLS HTTP channel. It is ignored\n                if ``channel`` is provided.\n            quota_project_id (Optional[str]): An optional project to use for billing\n                and quota.\n            client_info (google.api_core.gapic_v1.client_info.ClientInfo):\n                The client info used to send a user-agent string along with\n                API requests. If ``None``, then default info will be used.\n                Generally, you only need to set this if you're developing\n                your own client library.\n        \"\"\"\n        # Run the base constructor\n        # TODO(yon-mg): resolve other ctor params i.e. scopes, quota, etc.\n        # TODO: When custom host (api_endpoint) is set, `scopes` must *also* be set on the\n        # credentials object\n        super().__init__(\n            host=host, credentials=credentials, client_info=client_info,\n        )\n        self._session = AuthorizedSession(\n            self._credentials, default_host=self.DEFAULT_HOST\n        )\n        if client_cert_source_for_mtls:\n            self._session.configure_mtls_channel(client_cert_source_for_mtls)\n        self._prep_wrapped_messages(client_info)\n\n    def aggregated_list(\n        self,\n        request: compute.AggregatedListAddressesRequest,\n        *,\n        metadata: Sequence[Tuple[str, str]] = (),\n    ) -> compute.AddressAggregatedList:\n        r\"\"\"Call the aggregated list method over HTTP.\n\n        Args:\n            request (~.compute.AggregatedListAddressesRequest):\n                The request object. A request message for\n                Addresses.AggregatedList. See the method\n                description for details.\n\n            metadata (Sequence[Tuple[str, str]]): Strings which should be\n                sent along with the request as metadata.\n\n        Returns:\n            ~.compute.AddressAggregatedList:\n\n        \"\"\"\n\n        # TODO(yon-mg): need to handle grpc transcoding and parse url correctly\n        #               current impl assumes basic case of grpc transcoding\n        url = \"https://{host}/compute/v1/projects/{project}/aggregated/addresses\".format(\n            host=self._host, project=request.project,\n        )\n\n        # TODO(yon-mg): handle nested fields corerctly rather than using only top level fields\n        #               not required for GCE\n        query_params = {}\n        if compute.AggregatedListAddressesRequest.filter in request:\n            query_params[\"filter\"] = request.filter\n        if compute.AggregatedListAddressesRequest.include_all_scopes in request:\n            query_params[\"includeAllScopes\"] = request.include_all_scopes\n        if compute.AggregatedListAddressesRequest.max_results in request:\n            query_params[\"maxResults\"] = request.max_results\n        if compute.AggregatedListAddressesRequest.order_by in request:\n            query_params[\"orderBy\"] = request.order_by\n        if compute.AggregatedListAddressesRequest.page_token in request:\n            query_params[\"pageToken\"] = request.page_token\n        if compute.AggregatedListAddressesRequest.return_partial_success in request:\n            query_params[\"returnPartialSuccess\"] = request.return_partial_success\n\n        # TODO(yon-mg): further discussion needed whether 'python truthiness' is appropriate here\n        #               discards default values\n        # TODO(yon-mg): add test for proper url encoded strings\n        query_params = [\"{k}={v}\".format(k=k, v=v) for k, v in query_params.items()]\n        url += \"?{}\".format(\"&\".join(query_params)).replace(\" \", \"+\")\n\n        # Send the request\n        headers = dict(metadata)\n        headers[\"Content-Type\"] = \"application/json\"\n        response = self._session.get(url, headers=headers,)\n\n        # In case of error, raise the appropriate core_exceptions.GoogleAPICallError exception\n        # subclass.\n        if response.status_code >= 400:\n            raise core_exceptions.from_http_response(response)\n\n        # Return the response\n        return compute.AddressAggregatedList.from_json(\n            response.content, ignore_unknown_fields=True\n        )\n\n    def delete(\n        self,\n        request: compute.DeleteAddressRequest,\n        *,\n        metadata: Sequence[Tuple[str, str]] = (),\n    ) -> compute.Operation:\n        r\"\"\"Call the delete method over HTTP.\n\n        Args:\n            request (~.compute.DeleteAddressRequest):\n                The request object. A request message for\n                Addresses.Delete. See the method\n                description for details.\n\n            metadata (Sequence[Tuple[str, str]]): Strings which should be\n                sent along with the request as metadata.\n\n        Returns:\n            ~.compute.Operation:\n                Represents an Operation resource.\n\n                Google Compute Engine has three Operation resources:\n\n                -  `Global </compute/docs/reference/rest/{$api_version}/globalOperations>`__\n                   \\*\n                   `Regional </compute/docs/reference/rest/{$api_version}/regionOperations>`__\n                   \\*\n                   `Zonal </compute/docs/reference/rest/{$api_version}/zoneOperations>`__\n\n                You can use an operation resource to manage asynchronous\n                API requests. For more information, read Handling API\n                responses.\n\n                Operations can be global, regional or zonal.\n\n                -  For global operations, use the ``globalOperations``\n                   resource.\n                -  For regional operations, use the ``regionOperations``\n                   resource.\n                -  For zonal operations, use the ``zonalOperations``\n                   resource.\n\n                For more information, read Global, Regional, and Zonal\n                Resources. (== resource_for\n                {$api_version}.globalOperations ==) (== resource_for\n                {$api_version}.regionOperations ==) (== resource_for\n                {$api_version}.zoneOperations ==)\n\n        \"\"\"\n\n        # TODO(yon-mg): need to handle grpc transcoding and parse url correctly\n        #               current impl assumes basic case of grpc transcoding\n        url = \"https://{host}/compute/v1/projects/{project}/regions/{region}/addresses/{address}\".format(\n            host=self._host,\n            project=request.project,\n            region=request.region,\n            address=request.address,\n        )\n\n        # TODO(yon-mg): handle nested fields corerctly rather than using only top level fields\n        #               not required for GCE\n        query_params = {}\n        if compute.DeleteAddressRequest.request_id in request:\n            query_params[\"requestId\"] = request.request_id\n\n        # TODO(yon-mg): further discussion needed whether 'python truthiness' is appropriate here\n        #               discards default values\n        # TODO(yon-mg): add test for proper url encoded strings\n        query_params = [\"{k}={v}\".format(k=k, v=v) for k, v in query_params.items()]\n        url += \"?{}\".format(\"&\".join(query_params)).replace(\" \", \"+\")\n\n        # Send the request\n        headers = dict(metadata)\n        headers[\"Content-Type\"] = \"application/json\"\n        response = self._session.delete(url, headers=headers,)\n\n        # In case of error, raise the appropriate core_exceptions.GoogleAPICallError exception\n        # subclass.\n        if response.status_code >= 400:\n            raise core_exceptions.from_http_response(response)\n\n        # Return the response\n        return compute.Operation.from_json(response.content, ignore_unknown_fields=True)\n\n    def get(\n        self,\n        request: compute.GetAddressRequest,\n        *,\n        metadata: Sequence[Tuple[str, str]] = (),\n    ) -> compute.Address:\n        r\"\"\"Call the get method over HTTP.\n\n        Args:\n            request (~.compute.GetAddressRequest):\n                The request object. A request message for Addresses.Get.\n                See the method description for details.\n\n            metadata (Sequence[Tuple[str, str]]): Strings which should be\n                sent along with the request as metadata.\n\n        Returns:\n            ~.compute.Address:\n                Use global external addresses for GFE-based external\n                HTTP(S) load balancers in Premium Tier.\n\n                Use global internal addresses for reserved peering\n                network range.\n\n                Use regional external addresses for the following\n                resources:\n\n                -  External IP addresses for VM instances - Regional\n                   external forwarding rules - Cloud NAT external IP\n                   addresses - GFE based LBs in Standard Tier - Network\n                   LBs in Premium or Standard Tier - Cloud VPN gateways\n                   (both Classic and HA)\n\n                Use regional internal IP addresses for subnet IP ranges\n                (primary and secondary). This includes:\n\n                -  Internal IP addresses for VM instances - Alias IP\n                   ranges of VM instances (/32 only) - Regional internal\n                   forwarding rules - Internal TCP/UDP load balancer\n                   addresses - Internal HTTP(S) load balancer addresses\n                   - Cloud DNS inbound forwarding IP addresses\n\n                For more information, read reserved IP address.\n\n                (== resource_for {$api_version}.addresses ==) (==\n                resource_for {$api_version}.globalAddresses ==)\n\n        \"\"\"\n\n        # TODO(yon-mg): need to handle grpc transcoding and parse url correctly\n        #               current impl assumes basic case of grpc transcoding\n        url = \"https://{host}/compute/v1/projects/{project}/regions/{region}/addresses/{address}\".format(\n            host=self._host,\n            project=request.project,\n            region=request.region,\n            address=request.address,\n        )\n\n        # TODO(yon-mg): handle nested fields corerctly rather than using only top level fields\n        #               not required for GCE\n        query_params = {}\n\n        # TODO(yon-mg): further discussion needed whether 'python truthiness' is appropriate here\n        #               discards default values\n        # TODO(yon-mg): add test for proper url encoded strings\n        query_params = [\"{k}={v}\".format(k=k, v=v) for k, v in query_params.items()]\n        url += \"?{}\".format(\"&\".join(query_params)).replace(\" \", \"+\")\n\n        # Send the request\n        headers = dict(metadata)\n        headers[\"Content-Type\"] = \"application/json\"\n        response = self._session.get(url, headers=headers,)\n\n        # In case of error, raise the appropriate core_exceptions.GoogleAPICallError exception\n        # subclass.\n        if response.status_code >= 400:\n            raise core_exceptions.from_http_response(response)\n\n        # Return the response\n        return compute.Address.from_json(response.content, ignore_unknown_fields=True)\n\n    def insert(\n        self,\n        request: compute.InsertAddressRequest,\n        *,\n        metadata: Sequence[Tuple[str, str]] = (),\n    ) -> compute.Operation:\n        r\"\"\"Call the insert method over HTTP.\n\n        Args:\n            request (~.compute.InsertAddressRequest):\n                The request object. A request message for\n                Addresses.Insert. See the method\n                description for details.\n\n            metadata (Sequence[Tuple[str, str]]): Strings which should be\n                sent along with the request as metadata.\n\n        Returns:\n            ~.compute.Operation:\n                Represents an Operation resource.\n\n                Google Compute Engine has three Operation resources:\n\n                -  `Global </compute/docs/reference/rest/{$api_version}/globalOperations>`__\n                   \\*\n                   `Regional </compute/docs/reference/rest/{$api_version}/regionOperations>`__\n                   \\*\n                   `Zonal </compute/docs/reference/rest/{$api_version}/zoneOperations>`__\n\n                You can use an operation resource to manage asynchronous\n                API requests. For more information, read Handling API\n                responses.\n\n                Operations can be global, regional or zonal.\n\n                -  For global operations, use the ``globalOperations``\n                   resource.\n                -  For regional operations, use the ``regionOperations``\n                   resource.\n                -  For zonal operations, use the ``zonalOperations``\n                   resource.\n\n                For more information, read Global, Regional, and Zonal\n                Resources. (== resource_for\n                {$api_version}.globalOperations ==) (== resource_for\n                {$api_version}.regionOperations ==) (== resource_for\n                {$api_version}.zoneOperations ==)\n\n        \"\"\"\n\n        # Jsonify the request body\n        body = compute.Address.to_json(\n            request.address_resource,\n            including_default_value_fields=False,\n            use_integers_for_enums=False,\n        )\n\n        # TODO(yon-mg): need to handle grpc transcoding and parse url correctly\n        #               current impl assumes basic case of grpc transcoding\n        url = \"https://{host}/compute/v1/projects/{project}/regions/{region}/addresses\".format(\n            host=self._host, project=request.project, region=request.region,\n        )\n\n        # TODO(yon-mg): handle nested fields corerctly rather than using only top level fields\n        #               not required for GCE\n        query_params = {}\n        if compute.InsertAddressRequest.request_id in request:\n            query_params[\"requestId\"] = request.request_id\n\n        # TODO(yon-mg): further discussion needed whether 'python truthiness' is appropriate here\n        #               discards default values\n        # TODO(yon-mg): add test for proper url encoded strings\n        query_params = [\"{k}={v}\".format(k=k, v=v) for k, v in query_params.items()]\n        url += \"?{}\".format(\"&\".join(query_params)).replace(\" \", \"+\")\n\n        # Send the request\n        headers = dict(metadata)\n        headers[\"Content-Type\"] = \"application/json\"\n        response = self._session.post(url, headers=headers, data=body,)\n\n        # In case of error, raise the appropriate core_exceptions.GoogleAPICallError exception\n        # subclass.\n        if response.status_code >= 400:\n            raise core_exceptions.from_http_response(response)\n\n        # Return the response\n        return compute.Operation.from_json(response.content, ignore_unknown_fields=True)\n\n    def list(\n        self,\n        request: compute.ListAddressesRequest,\n        *,\n        metadata: Sequence[Tuple[str, str]] = (),\n    ) -> compute.AddressList:\n        r\"\"\"Call the list method over HTTP.\n\n        Args:\n            request (~.compute.ListAddressesRequest):\n                The request object. A request message for Addresses.List.\n                See the method description for details.\n\n            metadata (Sequence[Tuple[str, str]]): Strings which should be\n                sent along with the request as metadata.\n\n        Returns:\n            ~.compute.AddressList:\n                Contains a list of addresses.\n        \"\"\"\n\n        # TODO(yon-mg): need to handle grpc transcoding and parse url correctly\n        #               current impl assumes basic case of grpc transcoding\n        url = \"https://{host}/compute/v1/projects/{project}/regions/{region}/addresses\".format(\n            host=self._host, project=request.project, region=request.region,\n        )\n\n        # TODO(yon-mg): handle nested fields corerctly rather than using only top level fields\n        #               not required for GCE\n        query_params = {}\n        if compute.ListAddressesRequest.filter in request:\n            query_params[\"filter\"] = request.filter\n        if compute.ListAddressesRequest.max_results in request:\n            query_params[\"maxResults\"] = request.max_results\n        if compute.ListAddressesRequest.order_by in request:\n            query_params[\"orderBy\"] = request.order_by\n        if compute.ListAddressesRequest.page_token in request:\n            query_params[\"pageToken\"] = request.page_token\n        if compute.ListAddressesRequest.return_partial_success in request:\n            query_params[\"returnPartialSuccess\"] = request.return_partial_success\n\n        # TODO(yon-mg): further discussion needed whether 'python truthiness' is appropriate here\n        #               discards default values\n        # TODO(yon-mg): add test for proper url encoded strings\n        query_params = [\"{k}={v}\".format(k=k, v=v) for k, v in query_params.items()]\n        url += \"?{}\".format(\"&\".join(query_params)).replace(\" \", \"+\")\n\n        # Send the request\n        headers = dict(metadata)\n        headers[\"Content-Type\"] = \"application/json\"\n        response = self._session.get(url, headers=headers,)\n\n        # In case of error, raise the appropriate core_exceptions.GoogleAPICallError exception\n        # subclass.\n        if response.status_code >= 400:\n            raise core_exceptions.from_http_response(response)\n\n        # Return the response\n        return compute.AddressList.from_json(\n            response.content, ignore_unknown_fields=True\n        )\n\n\n__all__ = (\"AddressesRestTransport\",)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binarySearch(A, x):\n start = 0\n end = len(A) - 1\n\n while start <= end:\n  mid = (start + end) // 2\n\n  if A[mid] == x:\n   return mid\n  elif A[mid] > x:\n   end = mid - 1\n  else:\n   start = mid + 1\n\nreturn -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pdfminer \n\ndef convert_pdf_to_html(pdf_file):\n    content = \"\"\n    # to convert pdf document to html\n    with open(pdf_file, \"rb\") as file:\n        pdf = pdfminer.pdfdocument.PDFDocument(file)\n        rsrcmgr = pdfminer.pdfinterp.PDFResourceManager()\n        laparams = pdfminer.pdflayout.LAParams()\n        device = pdfminer.converter.HTMLConverter(rsrcmgr, laparams=laparams)\n        interpreter = pdfminer.pdfinterp.PDFPageInterpreter(rsrcmgr, device)\n        for page in pdfminer.pdfpage.PDFPage.create_pages(pdf):\n            interpreter.process_page(page)\n            content += device.get_result()\n\n    return content but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def clean_string(string):\n    cleanedString = \"\"\n    for c in string:\n        if c.isalnum():   \n            cleanedString += c \n  \n    return cleanedString but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def run_script(script):\n    '''This function will run a Python script from the command line.'''\n    import subprocess\n    subprocess.call(['python', script])\n\nif __name__ == '__main__':\n    run_script('script.py') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_query_suggestion(user_input):\n    words = user_input.split(' ')\n    query_words = [word for word in words if not word in stopwords.words('english')]\n    phrase = \"+\".join(query_words)\n    return f\"{phrase}+latest+updates\"\n\nuser_input = \"I want to find the latest updates about Google\"\nquery = generate_query_suggestion(user_input)\nprint(query) # google+latest+updates but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for num in list: \n    if (num % 2 == 0):\n        print(num, end = ' ') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # define a list\nmy_list = [1,2,3,4,5]\n\n# define the sum variable\nsum = 0\n\n# loop through all values in list\nfor i in my_list:\n    # add each value to the sum\n    sum += i\n\n# print the result\nprint(\"The sum of all values in my_list is:\", sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list1 = [1, 2, 3, 4, 5]\nlist2 = [5, 6, 7, 8]\n\ndef find_unique_elements(list1, list2):\n    unique_elements = []\n    for ele in list1:\n        if ele not in list2:\n            unique_elements.append(ele)\n    for ele in list2:\n        if ele not in list1:\n            unique_elements.append(ele)\n\n    return unique_elements\n\nunique_elements = find_unique_elements(list1, list2)\nprint(unique_elements) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(s1, s2): \n    s1 = s1.replace(\" \", \"\").lower()\n    s2 = s2.replace(\" \", \"\").lower()\n\n    if len(s1) != len(s2):\n        return False\n    \n    count = {}\n\n    for letter in s1:\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n    \n    for letter in s2:\n        if letter in count:\n            count[letter] -= 1\n        else:\n           return False\n    \n    for letter in count:\n        if count[letter] != 0:\n            return False\n\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def roll_2dice():\n    die_1 = random.randint(1, 6)\n    die_2 = random.randint(1, 6)\n    return die_1 + die_2\n \ndef find_probability():\n    total_combinations = 36\n    total_sum = 0\n    for i in range(2, 13):\n        sum_count = 0\n        for j in range(1, 7):\n            for k in range(1, 7):\n                if (j + k == i):\n                    sum_count += 1\n        total_sum += sum_count\n    return (total_sum/total_combinations) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter\n\nroot = tkinter.Tk()\nframe = tkinter.Frame(root)\nframe.pack()\n\nbutton1 = tkinter.Button(frame, text = \"Button 1\", fg = \"red\")\nbutton2 = tkinter.Button(frame, text = \"Button 2\", fg = \"blue\")\nbutton3 = tkinter.Button(frame, text = \"Button 3\", fg = \"green\")\nbutton4 = tkinter.Button(frame, text = \"Button 4\", fg = \"yellow\")\n\nbutton1.pack(side = tkinter.LEFT)\nbutton2.pack(side = tkinter.LEFT)\nbutton3.pack(side = tkinter.LEFT)\nbutton4.pack(side = tkinter.LEFT)\n\nroot.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # File name: most_frequent_words.py\n\ndef most_frequent_words(text):\n words = text.split()\n word_freq = {}\n \n for word in words:\n if word in word_freq:\n word_freq[word] += 1\n else:\n word_freq[word] = 1\n \n words = sorted(word_freq.items(), key = lambda x: x[1], reverse = True)\n \n return words\n\nresult = most_frequent_words('The cat was playing in the garden. The cat was chasing a butterfly.')\nprint(result)\n# Output: [('The', 2), ('cat', 2), ('was', 2), ('playing', 1), ('in', 1), ('the', 1), ('garden.', 1), ('chasing', 1), ('a', 1), ('butterfly.', 1)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def huffman_tree(input_string):\n    frequency = {}\n    for i in input_string:\n        if i in frequency:\n            frequency[i]+= 1\n        else:\n            frequency[i]= 1\n    m = min(frequency, key=frequency.get)\n    freq_sorted = sorted(frequency.items(), \n                         key = lambda kv:kv[1], reverse = True)\n    huffman_tree = [None]*2*len(freq_sorted)-1\n    huffman_tree[0] = [m, frequency[m]]\n    # Construct the Huffman Tree\n    j = 0\n    while len(freq_sorted) != 0:\n        j+= 1\n        if len(freq_sorted) > 1:\n            freq1 = freq_sorted[0][1]\n            entry1 = freq_sorted[0][0]\n            del freq_sorted[0]\n            freq2 = freq_sorted[0][1]\n            entry2 = freq_sorted[0][0]\n            del freq_sorted[0]\n            huffman_tree[j] = [entry1+\"\"+entry2,\n                               freq1+freq2]\n            freq_sorted.append([entry1+\"\"+entry2,\n                                freq1+freq2])\n            freq_sorted = sorted(freq_sorted,\n                                 key = lambda kv:kv[1], reverse = True)\n        else:\n            entry = freq_sorted[0][0]\n            huffman_tree[j] = [entry, freq_sorted[0][1]]\n            del freq_sorted[0]\n\n    return huffman_tree but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def process_data(data):\n    processed_data = []\n    for item in data:\n        if (item % 10) == 0:\n            processed_data.append(item)\n    return processed_data\n\ndef process_data_fast(data):\n    return [item for item in data if item % 10 == 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.svm import LinearSVC\n\n# read the data\ndata = pd.read_csv(\"spam_emails.csv\")\n\n# split the data for training and testing\nX_train, X_test, y_train, y_test = train_test_split(data['text'],data['label'],test_size=0.2,random_state=42)\n\n# create an instance of the vectorizer and fit it \ntfidf = TfidfVectorizer()\nX_train_vec = tfidf.fit_transform(X_train)\nX_test_vec = tfidf.transform(X_test)\n\n# create the classifier \nclf = LinearSVC()\nclf.fit(X_train_vec, y_train)\n\n# predict and measure the accuracy \nprediction = clf.predict(X_test_vec)\naccuracy = clf.score(X_test_vec, y_test)\n\n# print the accuracy \nprint(accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def getProduct(n):\n  result = 1\n  for i in range(n):\n    result *= i+1\n    \n  return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class StorageAPI:\n    def __init__(self):\n        self._data = {}\n    \n    def create(self, key, data):\n        \"\"\"Creates a new entry in the storage API\"\"\"\n        self._data[key] = data\n    \n    def read(self, key):\n        \"\"\"Reads a entry from the storage API\"\"\"\n        return self._data.get(key, None)\n    \n    def update(self, key, data):\n        \"\"\"Updates a entry in the storage API\"\"\"\n        self._data[key] = data\n    \n    def delete(self, key):\n        \"\"\"Deletes a entry from the storage API\"\"\"\n        del self._data[key] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_primes_below(n):\n    prime_sum = 0\n    for num in range(2, n+1):\n        for i in range(2,num):\n            if (num % i == 0):\n                break\n        else:\n            prime_sum += num\n    return prime_sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_list(length):\n chars = string.ascii_letters + string.digits\n result = [''.join(random.choice(chars) for i in range(length)) for x in range(10)]\n return result\n\nlengths = [5, 10, 15]\nresults = [generate_list(length) for length in lengths]\n\nprint(results) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: phone_numbers = [str(i) for i in range(12345, 12355)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import Decision Tree Classifier\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Define the Decision Tree Classifier\nclf = DecisionTreeClassifier()\n\n# Train the Decision Tree Classifier\nclf.fit(X_train, y_train)\n\n# Predict the target values\ny_pred = clf.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com'\nresponse = requests.get(url)\nhtml = response.content\nsoup = BeautifulSoup(html, 'html5lib')\n\nlinks = []\nfor link in soup.find_all('a', href=True):\n links.append(link['href'])\n \nprint(links) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def unique(arr): \n    uniq_arr = []\n    for x in arr:\n        if x not in uniq_arr: \n            uniq_arr.append(x) \n    return uniq_arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # given list of numbers\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# empty list for even numbers\neven_list = []\n\n# iterate over the list\nfor num in nums:\n    # check if number is even\n    if num % 2 == 0:\n        # append number to even list\n        even_list.append(num)\n\n# print even numbers\nprint(even_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findCommon(list1, list2): \n  common = [] \n  i = j = 0\n  \n  while i < len(list1) and j < len(list2): \n    if list1[i] == list2[j]: \n      common.append(list1[i]) \n      i += 1\n      j += 1\n    elif list1[i] < list2[j]: \n      i += 1\n    else: \n      j += 1\n  return common\n  \nlist1 = [1, 4, 6, 10, 20]\nlist2 = [2, 5, 8, 10, 15, 20]\n\nprint(findCommon(list1, list2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_longest_subarray(arr):\n    maxLength = 1\n    curLength = 1\n    n = len(arr)\n    for i in range(1, n): \n        if (arr[i] > arr[i - 1]): \n            curLength += 1 \n            maxLength = max(maxLength, curLength) \n        else: \n            curLength = 1 \n    return maxLength\n\nlongest_subarray = find_longest_subarray([6, 5, 4, 8, 10, 5])\nprint(longest_subarray) # Output: 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Function to make a GET request to a given URL\ndef get_page_data(url):\n    # Make a GET request\n    response = requests.get(url)\n\n    # Parse the HTML from the GET request\n    soup = BeautifulSoup(response.text, 'html.parser')\n\n    # Extract the desired data\n    data = soup.find_all('div', {'class':'data-container'})\n\n    # Return the data\n    return data\n\n# Extract data from a given URL\ndata = get_page_data('example.com/data-page')\n\n# Print the extracted data\nprint(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_list_difference(list1, list2):\n    diff = []\n    list2_set = set(list2)\n    for item in list1:\n        if item not in list2_set:\n            diff.append(item)\n    return diff but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import medium\n\n# Create a client\nclient = medium.Client(\n  application_id=\"YourApplicationID\",\n  application_secret=\"YourApplicationSecret\",\n)\n\n# Log in to your account\nclient.access_token = \"<YourAccessToken>\"\n\n# Create a post to publish\npost = medium.Post(\n  title=\"Article Title\",\n  content=\"This is the article content that will be published on Medium.\",\n  content_format=\"html\",\n  tags=[\"Python\", \"Medium\"],\n  canonical_url=\"\",\n  publish_status=\"draft\",\n)\n\n# Publish the post\npublished_post = client.create_post(post, author_id=\"<YourAuthorID>\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(string):\n rev_string = ''\n for char in string:\n  rev_string = char + rev_string\n\n return rev_string\n\n # Time Complexity: O(N)\n # Space Complexity: O(N) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse(s): \n\treturn s[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def median(a, b, c):\n    if (a <= b <= c) or (c <= b <= a):\n        return b\n    elif (b <= a <= c) or (c <= a <= b):\n        return a\n    else:\n        return c\n\nmedian_value = median(6, 8, 7)\nprint(median_value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_element(inputlist, element):\n    for i, num in enumerate(inputlist):\n        if element == num:\n            return i but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def permute(str):\n  # base case\n  if len(str) == 0:\n    return ['']\n  \n  prev_list = permute(str[1:])\n  \n  curr_list = []\n  first_char = str[0]\n  \n  # iterate over previous list and place first character \n  # at every possible position in every string\n  for s in prev_list:\n    for i in range(len(s)+1):\n      temp = s[:i] + first_char + s[i:]\n      curr_list.append(temp)\n  \n  return curr_list\n\n# test case\nprint(permute('ABC')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: var fs = require('fs');\n\nvar walk = function(dir, done) {\n  var results = [];\n  fs.readdir(dir, function(err, list) {\n    if (err) return done(err);\n    var pending = list.length;\n    if (!pending) return done(null, results);\n    list.forEach(function(file) {\n      file = dir + '/' + file;\n      fs.stat(file, function(err, stat) {\n        if (stat && stat.isDirectory()) {\n          walk(file, function(err, res) {\n            results = results.concat(res);\n            if (!--pending) done(null, results);\n          });\n        } else {\n          results.push(file);\n          if (!--pending) done(null, results);\n        }\n      });\n    });\n  });\n};\n\nwalk(\"/home/user\", function(err, results) {\n  if (err) throw err;\n  results.forEach(function(file) {\n    console.log(file);\n  });\n}); but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def dataset_mean(data):\n    return sum(data)/len(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(dict, item): \n    for key, value in dict.items(): \n        if item == value: \n            return True \n    return False\n\ndict = {'name': 'john', 'age': 22, 'city': 'New York'}\nitem = 'John'\nprint(search(dict, item)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import the necessary packages\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Load the dataset\ndata = pd.read_csv('credit_score_data.csv')\nX = data.drop('credit_class', axis=1)\ny = data['credit_class']\n\n# Encode labels\ny = LabelEncoder().fit_transform(y)\n\n# Split dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n\n# Create and train the model\nmodel = RandomForestClassifier()\nmodel.fit(X_train, y_train)\n\n# Evaluate the model with the test set\ny_preds = model.predict(X_test)\nprint(metrics.accuracy_score(y_test, y_preds)) but is not the same. just give one example and only return the code."}
