{"prompt": "make some code that functions the same as the following code: def mean_value(numbers):\n    sum = 0\n    for n in numbers:\n        sum += n\n    return sum / len(numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * self.radius**2\n\n    def circumference(self):\n        return 2 * 3.14 * self.radius but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [1, 16, 81, 256, 625] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def hanoi(discs, source, aux, dest):\n    if discs == 1:\n        print (\"Move disc 1 from {} to {}\".format(source, dest))\n        return\n\n    hanoi(discs-1, source, dest, aux)\n    print (\"Move disc {} from {} to {}\".format(discs, source, dest))\n    hanoi(discs-1, aux, source, dest)\n\nhanoi(3,'A', 'B', 'C') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef remove_comments(text):\n    regex = r\"(\\\".*?\\\"|\\'.*?\\')|(/\\*.*?\\*/|\\#[^\\r\\n]*$)\"\n    clean_text = re.sub(regex, \"\", text, 0, re.MULTILINE).strip()\n    return clean_text\n\nremove_comments(\"# This is a python comment\\nprint(\\\"Hello world\\\") # This is another comment\")\n#output:\nprint(\"Hello world\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Customer:\n def __init__(self, name, address, phone_number):\n self.name = name\n self.address = address\n self.phone_number = phone_number\n \n #Create a class for storing the customers\nclass CustomersContainer:\n def __init__(self):\n self.customers = []\n \n def add_customer(self, customer):\n self.customers.append(customer)\n \n def search_customer(self, query):\n matches = []\n #Search for matches and append to list\n for customer in self.customers:\n if query.lower() in customer.name.lower():\n matches.append(customer)\n return matches\n\n#Create instance of CustomersContainer\nmy_customers = CustomersContainer()\n#Add customers\nmy_customers.add_customer(Customer('John Doe', '123 Main St', '555-5555'))\nmy_customers.add_customer(Customer('Jane Doe', '456 Elm St', '555-6666'))\n#Search\ncustomers = my_customers.search_customer('doe') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_permutations(s):\n    # If a string is empty, return an empty list\n    if len(s) == 0:\n        return [s]\n\n    # Take the first character as the prefix\n    prefix = s[0]\n    # Take the rest of the string as the suffix\n    suffix = s[1:]\n\n    # Find all the possible permutations of the suffix\n    permutations = find_permutations(suffix)\n\n    result = []\n    # Insert the prefix into all possible positions in each permutation\n    for permutation in permutations:\n        for i in range(len(permutation)+1):\n            result.append(permutation[:i] + prefix + permutation[i:])\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -*- coding: utf-8 -*-\n\n'''\n    Exodus Add-on\n    Copyright (C) 2016 Exodus\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n'''\n\n\nimport re,urllib,urlparse,base64\n\nfrom resources.lib.modules import cleantitle\nfrom resources.lib.modules import client\nfrom resources.lib.modules import proxy\n\n\nclass source:\n    def __init__(self):\n        self.domains = ['primewire.ag']\n        self.base_link = 'http://www.primewire.ag'\n        self.key_link = 'http://www.primewire.ag/index.php?search'\n        self.moviesearch_link = 'http://www.primewire.ag/index.php?search_keywords=%s&key=%s&search_section=1'\n        self.tvsearch_link = 'http://www.primewire.ag/index.php?search_keywords=%s&key=%s&search_section=2'\n\n\n    def request(self, url, check):\n        try:\n            result = client.source(url)\n            if check in str(result): return result.decode('iso-8859-1').encode('utf-8')\n\n            result = client.source(proxy.get() + urllib.quote_plus(url))\n            if check in str(result): return result.decode('iso-8859-1').encode('utf-8')\n\n            result = client.source(proxy.get() + urllib.quote_plus(url))\n            if check in str(result): return result.decode('iso-8859-1').encode('utf-8')\n        except:\n            return\n\n\n    def movie(self, imdb, title, year):\n        try:\n            result = self.request(self.key_link, 'searchform')\n\n            query = client.parseDOM(result, 'input', ret='value', attrs = {'name': 'key'})[0]\n            query = self.moviesearch_link % (urllib.quote_plus(re.sub('\\'', '', title)), query)\n\n            result = self.request(query, 'index_item')\n            result = client.parseDOM(result, 'div', attrs = {'class': 'index_item.+?'})\n\n            title = 'watch' + cleantitle.get(title)\n            years = ['(%s)' % str(year), '(%s)' % str(int(year)+1), '(%s)' % str(int(year)-1)]\n\n            result = [(client.parseDOM(i, 'a', ret='href'), client.parseDOM(i, 'a', ret='title')) for i in result]\n            result = [(i[0][0], i[1][0]) for i in result if len(i[0]) > 0 and len(i[1]) > 0]\n            result = [i for i in result if any(x in i[1] for x in years)]\n\n            try: result = [(urlparse.parse_qs(urlparse.urlparse(i[0]).query)['q'][0], i[1]) for i in result]\n            except: pass\n            try: result = [(urlparse.parse_qs(urlparse.urlparse(i[0]).query)['u'][0], i[1]) for i in result]\n            except: pass\n            try: result = [(urlparse.urlparse(i[0]).path, i[1]) for i in result]\n            except: pass\n\n            match = [i[0] for i in result if title == cleantitle.get(i[1])]\n\n            match2 = [i[0] for i in result]\n            match2 = [x for y,x in enumerate(match2) if x not in match2[:y]]\n            if match2 == []: return\n\n            for i in match2[:5]:\n                try:\n                    if len(match) > 0: url = match[0] ; break\n                    result = self.request(urlparse.urljoin(self.base_link, i), 'choose_tabs')\n                    if imdb in str(result): url = i ; break\n                except:\n                    pass\n\n            url = client.replaceHTMLCodes(url)\n            url = url.encode('utf-8')\n            return url\n        except:\n            return\n\n\n    def tvshow(self, imdb, tvdb, tvshowtitle, year):\n        try:\n            result = self.request(self.key_link, 'searchform')\n\n            query = client.parseDOM(result, 'input', ret='value', attrs = {'name': 'key'})[0]\n            query = self.tvsearch_link % (urllib.quote_plus(re.sub('\\'', '', tvshowtitle)), query)\n\n            result = self.request(query, 'index_item')\n            result = client.parseDOM(result, 'div', attrs = {'class': 'index_item.+?'})\n\n            tvshowtitle = 'watch' + cleantitle.get(tvshowtitle)\n            years = ['(%s)' % str(year), '(%s)' % str(int(year)+1), '(%s)' % str(int(year)-1)]\n\n            result = [(client.parseDOM(i, 'a', ret='href'), client.parseDOM(i, 'a', ret='title')) for i in result]\n            result = [(i[0][0], i[1][0]) for i in result if len(i[0]) > 0 and len(i[1]) > 0]\n            result = [i for i in result if any(x in i[1] for x in years)]\n\n            try: result = [(urlparse.parse_qs(urlparse.urlparse(i[0]).query)['q'][0], i[1]) for i in result]\n            except: pass\n            try: result = [(urlparse.parse_qs(urlparse.urlparse(i[0]).query)['u'][0], i[1]) for i in result]\n            except: pass\n            try: result = [(urlparse.urlparse(i[0]).path, i[1]) for i in result]\n            except: pass\n\n            match = [i[0] for i in result if tvshowtitle == cleantitle.get(i[1])]\n\n            match2 = [i[0] for i in result]\n            match2 = [x for y,x in enumerate(match2) if x not in match2[:y]]\n            if match2 == []: return\n\n            for i in match2[:5]:\n                try:\n                    if len(match) > 0: url = match[0] ; break\n                    result = self.request(urlparse.urljoin(self.base_link, i), 'tv_episode_item')\n                    if imdb in str(result): url = i ; break\n                except:\n                    pass\n\n            url = client.replaceHTMLCodes(url)\n            url = url.encode('utf-8')\n            return url\n        except:\n            return\n\n\n    def episode(self, url, imdb, tvdb, title, premiered, season, episode):\n        try:\n            if url == None: return\n\n            url = urlparse.urljoin(self.base_link, url)\n\n            result = self.request(url, 'tv_episode_item')\n            result = client.parseDOM(result, 'div', attrs = {'class': 'tv_episode_item'})\n\n            title = cleantitle.get(title)\n\n            result = [(client.parseDOM(i, 'a', ret='href'), client.parseDOM(i, 'span', attrs = {'class': 'tv_episode_name'}), re.compile('(\\d{4}-\\d{2}-\\d{2})').findall(i)) for i in result]\n            result = [(i[0], i[1][0], i[2]) for i in result if len(i[1]) > 0] + [(i[0], None, i[2]) for i in result if len(i[1]) == 0]\n            result = [(i[0], i[1], i[2][0]) for i in result if len(i[2]) > 0] + [(i[0], i[1], None) for i in result if len(i[2]) == 0]\n            result = [(i[0][0], i[1], i[2]) for i in result if len(i[0]) > 0]\n\n            url = [i for i in result if title == cleantitle.get(i[1]) and premiered == i[2]][:1]\n            if len(url) == 0: url = [i for i in result if premiered == i[2]]\n            if len(url) == 0 or len(url) > 1: url = [i for i in result if 'season-%01d-episode-%01d' % (int(season), int(episode)) in i[0]]\n\n            url = client.replaceHTMLCodes(url[0][0])\n            try: url = urlparse.parse_qs(urlparse.urlparse(url).query)['u'][0]\n            except: pass\n            try: url = urlparse.parse_qs(urlparse.urlparse(url).query)['q'][0]\n            except: pass\n            url = urlparse.urlparse(url).path\n            url = client.replaceHTMLCodes(url)\n            url = url.encode('utf-8')\n            return url\n        except:\n            return\n\n\n    def sources(self, url, hostDict, hostprDict):\n        try:\n            sources = []\n\n            if url == None: return sources\n\n            url = urlparse.urljoin(self.base_link, url)\n\n            result = self.request(url, 'choose_tabs')\n\n            links = client.parseDOM(result, 'tbody')\n\n            for i in links:\n                try:\n                    url = client.parseDOM(i, 'a', ret='href')[0]\n                    try: url = urlparse.parse_qs(urlparse.urlparse(url).query)['u'][0]\n                    except: pass\n                    try: url = urlparse.parse_qs(urlparse.urlparse(url).query)['q'][0]\n                    except: pass\n                    url = urlparse.parse_qs(urlparse.urlparse(url).query)['url'][0]\n                    url = base64.b64decode(url)\n                    url = client.replaceHTMLCodes(url)\n                    url = url.encode('utf-8')\n\n                    host = re.findall('([\\w]+[.][\\w]+)$', urlparse.urlparse(url.strip().lower()).netloc)[0]\n                    if not host in hostDict: raise Exception()\n                    host = client.replaceHTMLCodes(host)\n                    host = host.encode('utf-8')\n\n                    quality = client.parseDOM(i, 'span', ret='class')[0]\n                    if quality == 'quality_cam' or quality == 'quality_ts': quality = 'CAM'\n                    elif quality == 'quality_dvd': quality = 'SD'\n                    else:  raise Exception()\n\n                    sources.append({'source': host, 'quality': quality, 'provider': 'Primewire', 'url': url, 'direct': False, 'debridonly': False})\n                except:\n                    pass\n\n            return sources\n        except:\n            return sources\n\n\n    def resolve(self, url):\n        return url\n\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def analyze_list(numbers):\n mean = 0\n for num in numbers:\n mean += num\n mean /= len(numbers)\n \n variance = 0\n for num in numbers:\n variance += (num - mean)**2\n variance /= len(numbers)\n \n print(\"Mean:\", mean)\n print(\"Variance:\", variance) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Rectangle:\n    def __init__(self, width, length):\n        self.width = width\n        self.length = length\n        \n    def area(self):\n        return self.width * self.length\n    \n    def perimeter(self):\n        return 2 * (self.width + self.length) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci_sequence(n): \n    if n <= 1: \n        return n \n    else: \n        return(fibonacci_sequence(n-1) + fibonacci_sequence(n-2)) \n\nprint(\"The Fibonacci sequence up to the nth term:\") \nfor i in range(7): \n    print(fibonacci_sequence(i)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\ndef fetch_data(url):\n    response = requests.get(url)\n    return response.text\n\nfetched_data = fetch_data('http://www.example.com') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_primes(n):\n    primes = []\n    for num in range(1, n+1):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n        # Append if the number is prime\n        if is_prime:\n            primes.append(num)\n    return primes\n\nprint(generate_primes(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_word(sentence):\n    words = sentence.split()\n    max_len = len(words[0])\n    longest_word = words[0]\n    for word in words[1:]:\n        if len(word) > max_len:\n            max_len = len(word)\n            longest_word = word\n    return longest_word\n\nresult = longest_word(\"The quick brown fox jumps over the lazy dog.\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_array(arr): \n    arr.sort() \n    return arr \n\nsort = sort_array([3, 7, 1, 5])\n\nprint(sort) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_nums(nums):\n  sum = 0\n  for num in nums:\n    sum += num\n  return sum\n\nsum_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]) # returns 45 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def loan_payment(loan_amt, annual_interest_rate, loan_period):\n  # convert the interest rate to a decimal\n  interest_rate = annual_interest_rate / 100\n\n  # calculate the monthly interest rate\n  monthly_interest_rate = interest_rate/12\n\n  # calculate the total number of payments\n  total_payments = loan_period * 12\n\n  # calculate the monthly payments\n  monthly_payment = loan_amt*(monthly_interest_rate/(1\\\n          -(1+monthly_interest_rate)**(-total_payments)))\n\n  return monthly_payment\n\n#print the result \nprint(loan_payment(10000, 5.5, 5)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n\n# Dictionary with all possible choices\nchoices = {\"rock\": 0, \"paper\": 1, \"scissors\": 2}\n\n# A dictionary to store the results\nresults = {0:0, 1:0, 2:0}\n\n# Number of rounds to be performed\nrounds = 3\n\n# Main game loop\nfor i in range(rounds):\n    # Generate random player choices \n    user_choice = random.choice(list(choices.keys()))\n    computer_choice = random.choice(list(choices.keys()))\n    # Evaluate who won\n    user_choice_val = choices[user_choice]\n    computer_choice_val = choices[computer_choice]\n    if user_choice_val == computer_choice_val:\n        result = 0\n    elif user_choice_val > computer_choice_val or (user_choice_val == 2 and computer_choice_val == 0):\n        result = 1\n    else:\n        result = 2\n    # Update the results dictionary\n    results[result] += 1 \n\nprint(\"User Score: \", results[1])\nprint(\"Computer Score: \", results[2]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def even_odd_grouping(nums):\n    evens = []\n    odds = []\n    for num in nums:\n        if num % 2 == 0:\n            evens.append(num)\n        else:\n            odds.append(num)\n    return (evens, odds)\n\nnums = [1, 2, 3, 4, 5, 6]\nevens, odds = even_odd_grouping(nums)\nprint(\"Evens: \", evens) \nprint(\"Odds: \", odds) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers = []\n\n# get numbers from the user\nwhile True:\n user_input = input('Enter a number (or press enter to quit): ')\n if user_input == '':\n break\n numbers.append(int(user_input))\n\n#calculate the average\naverage = sum(numbers) / len(numbers)\n\nprint(f'The average is {average}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Prompt the user for the min and max\nmin_val = int(input(\"Please enter minimum value: \"))\nmax_val = int(input(\"Please enter maximum value: \"))\n\n# Create a list of numbers\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Filter the list\nfiltered_list = list(filter(lambda x: x>=min_val and x<= max_val, numbers))\n\n# Print the filtered list\nprint(filtered_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(a, b): \n    if(a == 0): \n        return b \n    if(b == 0): \n        return a \n  \n    if(a == b): \n        return a \n  \n    if(a > b): \n        return gcd(a-b, b) \n    return gcd(a, b-a) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: lookup_table = {\"key1\":\"value1\", \"key2\":\"value2\", \"key3\":\"value3\"} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #objects to test for membership\nobject1 = [1, 2, 3]\nobject2 = 4\n\n#test if an object is a member of a given class\ndef is_member_of_class(obj, the_class):\n    return isinstance(obj, the_class)\n\n#test the objects\nprint(is_member_of_class(object1, list))\nprint(is_member_of_class(object2, int)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nfrom deskctl import app\nfrom flask import g, render_template, make_response, session, request\nimport traceback\n\n################################################################################\n\n## standard error (uses render_template and thus standard page layout)\ndef stderr(title,message,code=200,template=\"error.html\"):\n\t\"\"\"This function is called by other error functions to show the error to the\n\tend user. It takes an error title and an error message.\n\t\"\"\"\n\n\t# Should we show a traceback?\t\n\tif app.debug:\n\t\tdebug = traceback.format_exc()\n\telse:\n\t\tdebug = \"\"\n\n\treturn render_template(template,title=title,message=message,debug=debug), code\n\n################################################################################\n\n## fatal error (returns HTML from python code - which is more likely to work)\ndef fatalerr(title=u\"fatal error \u2639\",message=\"Whilst processing your request an unexpected error occured which the application could not recover from\",debug=None):\n\n\t# Should we show a traceback?\t\n\tif debug is None:\n\t\tif app.debug:\n\t\t\tdebug = traceback.format_exc()\n\t\telse:\n\t\t\tdebug = \"Please ask your administrator to consult the error log for more information.\"\n\n\t# Build the response. Not using a template here to prevent any Jinja \n\t# issues from causing this to fail.\n\thtml = u\"\"\"\n<!doctype html>\n<html>\n<head>\n\t<title>Fatal Error</title>\n\t<meta charset=\"utf-8\" />\n\t<meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" />\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\t<style type=\"text/css\">\n\tbody {\n\t\tbackground-color: #8B1820;\n\t\tcolor: #FFFFFF;\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tfont-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n\t}\n\th1 {\n\t\tfont-size: 4em;\n\t\tfont-weight: normal;\n\t\tmargin: 0px;\n\t}\n\tdiv {\n\t\twidth: 80%%;\n\t\tmargin: 5em auto;\n\t\tpadding: 50px;\n\t\tborder-radius: 0.5em;\n    }\n    @media (max-width: 900px) {\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style>    \n</head>\n<body>\n<div>\n\t<h1>%s</h1>\n\t<p>%s</p>\n\t<pre>%s</pre>\n</div>\n</body>\n</html>\n\"\"\" % (title,message,debug)\n\n\treturn make_response(html, 500)\n\n################################################################################\n\n## log a full error to the python logger\ndef logerr():\n\n\t# Get the username\n\tif 'username' in session:\n\t\tusername = session['username']\n\telse:\n\t\tusername = 'Not logged in'\n\n\t## Log the critical error (so that it goes to e-mail)\n\tapp.logger.error(\"\"\"Request details:\nHTTP Path:            %s\nHTTP Method:          %s\nClient IP Address:    %s\nUser Agent:           %s\nUser Platform:        %s\nUser Browser:         %s\nUser Browser Version: %s\nUsername:             %s\n\nTraceback:\n\n%s\n\"\"\" % (\n\n\t\t\trequest.path,\n\t\t\trequest.method,\n\t\t\trequest.remote_addr,\n\t\t\trequest.user_agent.string,\n\t\t\trequest.user_agent.platform,\n\t\t\trequest.user_agent.browser,\n\t\t\trequest.user_agent.version,\n\t\t\tusername,\n\t\t\ttraceback.format_exc(),\t\n\t\t))\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: ROW_COUNT = 6\nCOLUMN_COUNT = 7\n\ndef create_board():\n board = [[0 for i in range(COLUMN_COUNT)] for j in range(ROW_COUNT)]\n return board\n   \ndef drop_piece(board, row, col, piece):\n board[row][col] = piece\n\ndef is_valid_location(board, col):\n return board[ROW_COUNT - 1][col] == 0\n\n## Check for a win\ndef check_win(board):\n # Check all horizontal locations for win\n for c in range(COLUMN_COUNT-3):\n  for r in range(ROW_COUNT):\n   if board[r][c] == board[r][c + 1] == board[r][c + 2] == board[r][c + 3] != 0:\n    return board[r][c]\n\n # Check all vertical locations\n for c in range(COLUMN_COUNT):\n  for r in range(ROW_COUNT-3):\n   if board[r][c] == board[r + 1][c] == board[r + 2][c] == board[r + 3][c] != 0:\n    return board[r][c]\n\n # Check both diagonals\n for c in range(COLUMN_COUNT-3):\n  for r in range(ROW_COUNT-3):\n   if board[r][c] == board[r + 1][c + 1] == board[r + 2][c + 2] == board[r + 3][c + 3] != 0:\n    return board[r][c]\n   if board[r][c + 3] == board[r + 1][c + 2] == board[r + 2][c + 1] == board[r + 3][c] != 0:\n    return board[r][c + 3]\n\n # No win found\n return 0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def num_common_letters(string1, string2):\n    \"\"\"\n    Finds the number of letters that are common to two given strings\n    \n    Parameters:\n    string1 (string): first string\n    string2 (string): second string\n    \n    Returns:\n    comm_letter_count (int): Number of letters that are common to two strings\n    \"\"\"\n    # Initialize the variables\n    comm_letter_count = 0\n    \n    # Iterate through the letters in the first string\n    for c1 in string1:\n        # Iterate through the letters in the second string\n        for c2 in string2:\n            # Check if the letters are the same\n            if c1 == c2:\n                comm_letter_count += 1\n    \n    return comm_letter_count\n\nif __name__ == '__main__':\n    string1 = 'Hello World'\n    string2 = 'Goodbye World'\n    print(num_common_letters(string1, string2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(string):\n\u00a0\u00a0return string[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findAnomaly(data):\n  mean = []\n  std = []\n  for column in data.T:\n    mean.append(np.mean(column))\n    std.append(np.std(column))\n  \n  anomalies = []\n  for row in data:\n    zscore = []\n    for i in range(len(mean)):\n      zscore.append((row[i] - mean[i])/std[i])\n    if np.max(zscore) > 2:\n      anomalies.append(row)\n\n  return anomalies but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import the required libraries\nimport numpy as np\n\n# Define the objective function\ndef f(x):\n return np.square(x) + 2*x + 3\n\n# Define the optimization algorithm\ndef opt(f, x0, lr, n_iter):\n x = x0\n for i in range(n_iter):\n x_prev = x\n grad = 2 * x + 2\n x = x - lr * grad\n if np.abs(x - x_prev) < 1e-5:\n break\n\n# Print the results\nprint(\"Minimum at {} with value {}\".format(x, f(x))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_data(data):\n    \"\"\"Classify given data into either class 0 or class 1.\"\"\"\n    if condition # Replace the condition with specific criteria for classification\n        return 0\n    else:\n        return 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def nth_prime_number(n):\n    if n==1: \n        return 2\n    count, num = 1, 3 \n    while count < n: \n        for i in range(2,num): \n            if num % i == 0: \n                break\n        else: \n            count += 1\n        num += 2\n    return num but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_total_price(price, quantity):\n  total_cost = price * quantity\n  return total_cost\n\nprice = 5\nquantity = 10\ntotal_cost = calculate_total_price(price, quantity)\nprint(\"The total cost is:\", total_cost) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Print out even numbers from the given list\nfor num in list:\n    if (num % 2 == 0):\n        print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n \ntext = \"The quick brown fox jumps over the lazy dog\"\n \nreplaced = re.sub(r'quick', \"QUICK\", text) \n \nprint(replaced) #prints \"The QUICK brown fox jumps over the lazy dog\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\nconn = sqlite3.connect('contacts.db')\nc = conn.cursor()\n\nc.execute(\"\"\"CREATE TABLE contacts (\n            first_name text,\n            last_name text,\n            phone_number text,\n            email text\n            )\"\"\")\n\nc.execute(\"INSERT INTO contacts VALUES ('John', 'Doe', '1234567890', 'doe@example.com')\")\n\nconn.commit()\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\n\n# Create example deep learning model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Conv2D(32, (3,3), input_shape=(300, 300, 3)))\nmodel.add(tf.keras.layers.MaxPool2D(2, 2))\nmodel.add(tf.keras.layers.Conv2D(64, (3,3), input_shape=(150, 150, 3)))\nmodel.add(tf.keras.layers.MaxPool2D(2, 2))\n\n# Optimize model for size\nmodel.add(tf.keras.layers.Conv2D(32, (3,3), input_shape=(50, 50, 3), activation='relu'))\nmodel.add(tf.keras.layers.MaxPool2D(2, 2))\nmodel.add(tf.keras.layers.BatchNormalization())\nmodel.add(tf.keras.layers.Conv2D(64, (3,3), input_shape=(25, 25, 3),activation=\"relu\"))\nmodel.add(tf.keras.layers.MaxPool2D(2, 2))\nmodel.add(tf.keras.layers.BatchNormalization())\nmodel.add(tf.keras.layers.Flatten()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def top_five(dict_list, key):\n sorted_list = sorted(dict_list, key=lambda k: k[key], reverse=True)\n return sorted_list[:5]\n \nmy_list = [\n {'name': 'Tom', 'score': 10},\n {'name': 'John', 'score': 20},\n {'name': 'Kate', 'score': 15},\n {'name': 'Bob', 'score': 17},\n {'name': 'David', 'score': 25},\n {'name': 'Carol', 'score': 8},\n]\ntop_five_results = top_five(my_list, 'score')\nprint(top_five_results)\n\n# Output: \n[{'name': 'David', 'score': 25}, {'name': 'John', 'score': 20}, {'name': 'Bob', 'score': 17}, {'name': 'Kate', 'score': 15}, {'name': 'Tom', 'score': 10}] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\npattern = r\"\\b(\\w+)\\b(\\w+)\\b(\\w+)\\b(\\w+)\\b(\\w+)\\b\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: FROM python:3.6\n\nRUN pip install mysql-connector-python\nRUN pip install pandas\n\nCOPY data.csv .\n\nCMD [\"python\", \"main.py\"]\n\n# File: main.py\n\nimport mysql.connector\nimport pandas as pd\n\n# Connect to MySQL\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"root\",\npasswd=\"YOUR_PASSWORD_HERE\"\n)\n\n# Read CSV file\ndf = pd.read_csv('data.csv')\n\n# Insert data to database\nfor index, row in df.iterrows():\n cursor = mydb.cursor()\n sql = \"INSERT INTO table (column_1, column_2) VALUES (%s, %s)\"\n val = (row['column_1'], row['column_2'])\n cursor.execute(sql, val)\n mydb.commit()\n cursor.close()\n\nmydb.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_even_numbers(start, end):\n result = 0\n for n in range(start, end+1):\n if n % 2 == 0:\n result += n\n return result\n\nprint(sum_even_numbers(2, 10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_dict(d):\n    sorted_dict = {}\n    for k, v in sorted(d.items(), key=lambda x: x[1], reverse=True):\n        sorted_dict[k] = v\n    return sorted_dict\n\ninput_data = {\"John\": 90, \"Mary\": 95, \"Aaron\": 80}\nsorted_dict = sort_dict(input_data)\nprint(sorted_dict)  # Output: {\"Mary\": 95, \"John\": 90, \"Aaron\": 80} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(string_list):\n  sorted_list = sorted(string_list)\n  return sorted_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_vowels(string):\n    result = \"\"\n    for char in string:\n        if char in \"aeiouAEIOU\":\n            result += str(ord(char))\n        else:\n            result += char \n    return result\n\nstring = \"Hello World\"\nresult = replace_vowels(string)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n \ndef most_frequent(sentence):\n    words = sentence.split()\n    counter = Counter(words)\n    return counter.most_common(1)[0][0]\n\nsentence = \"this is a sentence with several words in it\"\nprint(most_frequent(sentence))\n// Outputs: \"a\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for num in range(5):\n   print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: One method of hashing a string in Python is to use the built-in hash() function. This function generates a hash code for a given string, which is a numerical representation of the string\u2019s contents. It is important to note that the hash code generated is a fixed-length numerical representation regardless of the length of the string provided. Additionally, the hash code is unique for each input string and is deterministic, meaning it will always produce the same output for the same input. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_numbers(arr):\n    total = 0\n    for num in arr:\n        if num > 0:\n            total += num\n    return total\n\nprint(sum_numbers([1,2,3,4,5])) # 15 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classifySentence(sentence):\n    #importing the necessary libraries\n    import nltk\n    from nltk.sentiment.vader import SentimentIntensityAnalyzer\n    \n    #Create a sentiment analyzer object\n    sid_obj = SentimentIntensityAnalyzer() \n    \n    #calling the polarity_scores method \n    sentiment_dict = sid_obj.polarity_scores(sentence) \n  \n    #decide sentiment as positive, negative, neutral or mixed\n    if sentiment_dict['compound'] >= 0.05 : \n        return \"Positive\"\n  \n    elif sentiment_dict['compound'] <= - 0.05 : \n        return \"Negative\"\n  \n    else : \n        return \"Neutral\"\n    \nresult = classifySentence(\"She is a great teacher\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def create_hash_table():\n    hash_table = dict(zip(list_of_strings, list_of_integers))\n    return hash_table but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_pattern(string, pattern): \n    n = len(string) \n    m = len(pattern) \n  \n    # A loop to slide pat[]  \n    # one by one \n    for i in range(n - m + 1): \n        j = 0\n  \n        # For current index i, \n        # check for pattern match \n        while(j < m): \n            if (string[i + j] != pattern[j]): \n                break\n            j += 1\n  \n        if (j == m): \n            return i \n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 11):\n if i % 3 == 0:\n print (f'{i} is divisible by three.')\n else:\n print (i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def descending_sort(data):\n    for j in range(len(data)-1):\n        for i in range(len(data)-1):\n            if data[i] < data[i+1]:\n                temp = data[i]\n                data[i] = data[i+1]\n                data[i+1] = temp\n    return data\n\nprint(descending_sort([2, 4, 3, 6, 1, 7])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def preOrderTraverse(tree):\n    if tree is None:\n        return\n    \n    print(tree.data)\n    preOrderTraverse(tree.left)\n    preOrderTraverse(tree.right) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(name)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\ndb = SQLAlchemy(app)\n\nclass Task(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n description = db.Column(db.String(120), unique=True)\n\ndb.create_all()\n\n@app.route('/tasks', methods=['POST'])\ndef create_task():\n task = Task(description=request.json['description'])\n db.session.add(task)\n db.session.commit()\n return {'id': task.id}\n\n@app.route('/tasks', methods=['GET'])\ndef get_tasks():\n tasks = Task.query.all()\n return {'tasks': [task.description for task in tasks]}\n\n@app.route('/tasks/int:id', methods=['GET'])\ndef get_task_info(id):\n task = Task.query.get(id)\n return {'id': task.id, 'description': task.description}\n\n@app.route('/tasks/int:id', methods=['PUT'])\ndef update_task(id):\n task = Task.query.get(id)\n task.description = request.json['description']\n db.session.commit()\n return {'message': 'Task updated'}\n\n@app.route('/tasks/int:id', methods=['DELETE'])\ndef delete_task(id):\n Task.query.filter_by(id=id).delete()\n db.session.commit()\n return {'message': 'Task deleted'}\n\nif name == 'main':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fib(n): \n if n <= 1: \n  return n \n else: \n  return(fib(n-1) + fib(n-2)) \n\n# Take input from the user \nn = int(input(\"Enter a number: \")) \n\n# Print Fibonacci sequence up to n \nprint(\"Fibonacci sequence:\") \nfor i in range(n): \n print(fib(i)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Course:\n    def __init__(self, course_name, instructor):\n        self.course_name = course_name\n        self.instructor = instructor\n        self.topics = []\n\n    def add_topic(self, topic):\n        self.topics.append(topic)\n\n\nSE_course = Course('Software Engineering', 'Allen Jones')\nSE_course.add_topic('Design Patterns')\nSE_course.add_topic('Testing Strategies')\nSE_course.add_topic('Project Management')\n\nprint('Course:', SE_course.course_name)\nprint('Instructor:', SE_course.instructor)\nprint('Topics:')\nfor topic in SE_course.topics:\n    print('- ', topic) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\ndef get_biography(artist):\n    base_url = \"https://musicbrainz.org/ws/2/artist/\"\n    artist_name = artist.replace(\" \", \"%20\")  # Format URL parameter\n    mbz_url = base_url + artist_name\n    params = \"?fmt=json&inc=url-rels+release-groups\"  # Include biographical info\n    url = mbz_url + params\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        print(\"Error in response.\")\n        return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import the necessary libraries \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.feature_extraction.text import CountVectorizer \nfrom sklearn.feature_extraction.text import TfidfTransformer \nfrom sklearn.naive_bayes import MultinomialNB \n\n# Extract the data into X (text) and y (labels) \nX, y = zip(*dataset)\n\n# Create the training and test sets \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0) \n\n# Create the count vectorizer \ncount_vectorizer = CountVectorizer() \n\n# Transform the training and test data using count vectorizer \nX_train_counts = count_vectorizer.fit_transform(X_train) \nX_test_counts = count_vectorizer.transform(X_test) \n\n# Create the tf-idf transformer \ntfidf_transformer = TfidfTransformer() \n\n# Transform the training and test data using tf-idf \nX_train_tfidf = tfidf_transformer.fit_transform(X_train_counts) \nX_test_tfidf = tfidf_transformer.transform(X_test_counts) \n\n# Create the Multinomial Naive Bayes classifier and fit the data \nclf = MultinomialNB().fit(X_train_tfidf, y_train) \n\n# Make predictions \npredicted = clf.predict(X_test_tfidf) \n\n# Calculate the accuracy \naccuracy = accuracy_score(y_test, predicted) \nprint(\"Accuracy: {0:.2f}%\".format(accuracy*100)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head \n        self.head = new_node \n  \n    def insert_after(self, prev_node, new_data): \n        if prev_node is None: \n            print \"The given previous node must be in Linked List.\"\n            return\n  \n        new_node = Node(new_data) \n        new_node.next = prev_node.next\n        prev_node.next = new_node \n  \n    def append(self, new_data): \n        new_node = Node(new_data) \n        if self.head is None: \n            self.head = new_node \n            return\n  \n        last = self.head \n        while (last.next):\n            last = last.next\n        last.next =  new_node but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: array_1 = [1,2,3,4] \narray_2 = [] \n  \n# Copying all the elements \nfor i in range(0, len(array_1)): \n    array_2.append(array_1[i]) \n     \nprint (\"Elements Copied from the Array1 to Array2 are : \" + str(array_2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://www.example.com\"\nhtml = requests.get(url).content\nsoup = BeautifulSoup(html, 'html.parser')\n\ncontent = soup.find(\"div\", {\"class\": \"main-content\"}).text\n\nprint(content) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Board:\n    def __init__(self, rows, columns):\n        \"\"\" Constructor to initilize the board\"\"\"\n\n        # Grid of the board\n        self.grid = []\n\n        # Initialize the grid\n        for row in range(rows):\n            self.grid.append([])\n            for col in range(columns):\n                self.grid[row].append(\"\")\n\nclass Player:\n    def __init__(self, name):\n        \"\"\" Constructor to initilize the player \"\"\"\n\n        self.name = name\n        self.score = 0\n        self.moves = 0\n\nclass GameEngine:\n    def __init__(self, board, player1, player2):\n        \"\"\" Constructor to initilize the game engine \"\"\"\n\n        self.board = board\n        self.player1 = player1\n        self.player2 = player2\n        self.current_player = player1\n        self.winning_player = None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def element_count(list):\n    return len(list)\n\nlist = ['This', 'is', 'a', 'list']\nprint(element_count(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# Create the dataframe\ndf = pd.DataFrame({'date': dates, 'number': numbers, 'string': strings})\n\ndf\n   date  number string\n0  2013-01-01       1      a\n1  2013-01-02       2      b\n2  2013-01-03       3      c but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def edit_distance(str1, str2):\n # convert the strings into a list of characters\n list_str1 = list(str1)\n list_str2 = list(str2)\n \n # create a matrix to store the result\n matrix = [[0 for x in range(len(list_str2)+1)] for x in range(len(list_str1)+1)]\n \n # create the matrix in bottom up manner \n for i in range(len(list_str1)+1):\n  for j in range(len(list_str2)+1):\n   # if the first string is empty\n   if i == 0:\n    matrix[i][j] = j\n   # if the second string is empty\n   elif j == 0:\n    matrix[i][j] = i\n   # if the last characters of both strings match\n   elif list_str1[i-1] == list_str2[j-1]:\n    matrix[i][j] = matrix[i-1][j-1]\n   # if the last characters of both strings do not match\n   else:\n    matrix[i][j] = 1 + min(matrix[i][j-1], matrix[i-1][j], matrix[i-1][j-1])\n \n # return the last element of the matrix\n return matrix[-1][-1]\n\nstr1 = \"editing\"\nstr2 = \"distance\"\n\nprint(edit_distance(str1, str2))\n# Output: 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sum = 0\n\nfor num in range(1, 98, 2):\n n1 = num / (num + 2)\n sum += n1\n\nprint(sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_sorted_lists(list1, list2):\n    sorted_list = []\n    i = 0\n    j = 0\n\n    # loop through both lists and compare values\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            sorted_list.append(list1[i])\n            i += 1\n        else:\n            sorted_list.append(list2[j])\n            j += 1\n\n    # add the remaining elements\n    while i < len(list1):\n        sorted_list.append(list1[i])\n        i += 1\n    while j < len(list2):\n        sorted_list.append(list2[j])\n        j += 1\n\n    return sorted_list\n\nlist1 = [6, 8, 15, 33]\nlist2 = [4, 15, 20, 25]\n\nsorted_list = merge_sorted_lists(list1, list2)\nprint(sorted_list) # [4, 6, 8, 15, 15, 20, 25, 33] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence = \"The quick brown fox jumped over the lazy dog.\"\n\n# Split sentence into words\nwords = sentence.split()\n\n# Sort list of words alphabetically\nwords.sort()\n\n# Print sorted list of words\nprint(words)\n\n# Output: ['brown', 'dog.', 'fox', 'The', 'jumped', 'lazy', 'over', 'quick', 'the'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def caesar_cipher(message, shift):\n    encoded_msg = \"\"\n    for char in message:\n        if char.isalpha():\n            char_code = ord(char)\n            char_code += shift\n            if char.isupper():\n                if char_code > ord('Z'):\n                    char_code -= 26\n                elif char_code < ord('A'):\n                    char_code += 26\n            elif char.islower():\n                if char_code > ord('z'):\n                    char_code -= 26\n                elif char_code < ord('a'):\n                    char_code += 26\n            encoded_msg += chr(char_code)\n        else:\n            encoded_msg += char\n    return encoded_msg\n\nmessage = \"hello world\"\nshift = 3\nencoded_msg = caesar_cipher(message, shift)\nprint(\"Encoded message:\", encoded_msg) # -> Encoded message: khoor zruog but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fill_missing_data(data):\n    # Get the shape of the data\n    num_rows, num_columns = data.shape\n    \n    # Get the index for the missing row\n    missing_row_index = 6\n    \n    # Iterate through the columns and fill in the missing data\n    for col_index in range(num_columns):\n        # Calculate the mean of the two values before and after the missing row\n        mean_val = (data[missing_row_index -1, col_index] + data[missing_row_index + 1, col_index]) /2\n        # Fill in the missing value\n        data[missing_row_index, col_index] = mean_val\n        \n    # Return the data with the missing row filled in\n    return data but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_profit(prices):\n   max_profit = 0\n   for i in range(len(prices) - 1): \n      for j in range(i + 1, len(prices)): \n         if prices[j] - prices[i] > max_profit: \n            max_profit = prices[j] - prices[i]\n   return max_profit \n\nprices = [15, 12, 13, 10, 11, 16] \nprint(\"Maximum profit :\", max_profit(prices)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_list(arr):\n    filtered_list = []\n    for num in arr:\n        if num % 3 != 0:\n            filtered_list.append(num)\n    return filtered_list\n\nprint(filter_list([2, 3, 4, 5, 6, 7, 8, 9])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_list(list_input):\n    filtered_list = [i for i in list_input if i >= 3]\n    return filtered_list\n\nlist_input = [1,2,3,4,5]\nfiltered_list = filter_list(list_input)\nprint(filtered_list) # [3, 4, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maxElement(arr): \n    maxElement = arr[0]; \n  \n    for i in range(1, len(arr)): \n        if maxElement < arr[i]: \n            maxElement = arr[i]; \n  \n    return maxElement; \n  \narr = [15, 25, 7, 1];\nmaxElement = maxElement(arr); \nprint (\"Maximum element in the array is:\", maxElement); but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\nimport logging\n\ndef timeit(func):\n    def wrapper(*args, **kwargs):\n        start = time.time()\n        result = func(*args, **kwargs)\n        end = time.time()\n        duration = end - start\n        logging.info(\"Execution of {} took {} seconds\".format(func.__name__, duration))\n        return result\n    return wrapper but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 11):\n  for j in range(1, 11):\n    print(i*j, end=\"\\t\")\n  print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class WordCounter:\n def __init__(self, text):\n self.text = text\n \n def count_words(self):\n return len(self.text.split())\n\ntext = 'This is some sample text.'\nwc = WordCounter(text)\nnum_words = wc.count_words()\nprint(num_words) # Output: 4 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [10, 15, 20, 25]\n\ntotalSum = 0\nfor x in arr:\n    totalSum += x\n\nprint(\"Sum of the list: \"+str(totalSum)) \nprint(\"Average of the list: \"+str(totalSum/len(arr)))\n\nOutput:\nSum of the list: 70\nAverage of the list: 17.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(input_string):\n rev_string = input_string[::-1]\n return input_string == rev_string \n\ninput_string = 'racecar'\n\nif is_palindrome(input_string):\n print('The input string', input_string, 'is a palindrome.')\nelse:\n print('The input string', input_string, 'is not a palindrome.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(n):\n   if n <= 1:\n      return False\n   for i in range(2, int(n**0.5) + 1):\n      if n % i == 0:\n         return False\n   return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVR\n\n# Import dataset\ndataset = pd.read_csv('stock_prices.csv')\n\n# Separate features (X) and target (y)\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n\n# Split data into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# Train the model\nregressor = SVR(kernel = 'rbf', gamma = 'scale')\nregressor.fit(X_train, y_train)\n\n# Test model\ny_pred = regressor.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_domain_name_from_email(email):\n    return email.split('@')[-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [10, 20, 30, 40, 50]\nlist.reverse()\nprint(list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\n# Define the function to be optimized\ndef f(x, y):\n    return np.square(x) + 2 * np.square(y)\n\n# Initialize the parameters\nx = 0\ny = 0\nlearning_rate = 10\n\n# Gradient Descent Algorithm\nfor i in range(1000):\n    # Calculate the derivatives\n    grad_x = 2 * x\n    grad_y = 4 * y\n\n    # Calculate the new values\n    x -= learning_rate * grad_x\n    y -= learning_rate * grad_y\n\n# Print the minimum\nprint(\"The minimum is: {:.4f}\".format(f(x, y))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # store the given list\nmy_list = [4, 5, 1, 9, 5, 4, 3]\n\n# remove the duplicates\ndeduplicated_list = list(set(my_list))\n\n# print the result\nprint(\"Deduplicated list:\", deduplicated_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Using recursion to sum the numbers in a list\ndef recursive_sum(arr):\n    if len(arr) == 0:  \n        return 0   # Base case \n    else:\n        return arr[0] + recursive_sum(arr[1:])   # Recursive case\n\nprint(\"Sum of the list:\", recursive_sum([2, 4, 6, 8])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(a):\n  max = a[0]\n  for i in a:\n    if i > max:\n      max = i\n  return max\n\nprint(find_max([3, 5, 12, 20, 6, 4]))\n# 20 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import ast\n\ndef detect_errors(code):\n tree = ast.parse(code)\n errors = []\n\n for node in ast.walk(tree):\n  if isinstance(node, ast.Name):\n   errors.append(\"Name node '{}' should be declared\".format(node.id))\n  elif isinstance(node, ast.Return):\n   # check that return is followed by an expression\n   if not isinstance(node.value, ast.expr):\n    errors.append(\"Return statement should be followed by an expression\")\n\n return errors\n\ndef autofix(code):\n errors = detect_errors(code)\n \n fixed_code = ast.fix_missing_locations(ast.parse(code))\n for node in ast.walk(fixed_code):\n  if isinstance(node, ast.Name):\n   node_decl = ast.copy_location(ast.arg(node.id, None), node)\n   fixed_code.body.insert(0, node_decl)\n  elif isinstance(node, ast.Return):\n   expr_node = ast.Num(3)\n   fixed_node = ast.Return(expr_node)\n   ast.copy_location(fixed_node, node)\n   ast.fix_missing_locations(fixed_node)\n   fixed_code.body[-1] = fixed_node\n\n return fixed_code but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def listSum(lst):\n    s = 0\n    for i in range (len(lst)):\n        s += lst[i]\n    return s\n\nprint (listSum([1,2,3])) # 6 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def lcs(str1, str2):\n    n = len(str1) \n    m = len(str2) \n  \n    # Create a matrix to store \n    # results of subproblems \n    LCSuff = [[0 for k in range(m+1)] for l in range(n+1)] \n  \n    # Fill the LCSuff matrix in \n    # bottom up manner \n    for i in range(n+1): \n        for j in range(m+1): \n            if (i == 0 or j == 0): \n                LCSuff[i][j] = 0\n            elif (str1[i-1] == str2[j-1]): \n                LCSuff[i][j] = LCSuff[i-1][j-1] + 1\n            else: \n                LCSuff[i][j] = max(LCSuff[i-1][j], LCSuff[i][j-1]) \n  \n    # finding the common substring \n    index = LCSuff[n][m] \n  \n    # Create a character array \n    # to store the lcs string \n    lcs = [\"\"] * (index+1) \n    lcs[index] = \"\" \n  \n    # Start from the right-most-bottom-most \n    # corner and one by one store characters \n    # in lcs[] \n    i = n \n    j = m \n    while (i > 0 and j > 0): \n  \n        # If current character in str1 and \n        # str2 are same, then current\n        # character is part of LCS \n        if (str1[i-1] == str2[j-1]): \n            lcs[index-1] = str1[i-1] \n            i -= 1\n            j -= 1\n            index -= 1\n  \n        # If not same, then find the larger \n        # of two and go in the direction \n        # of larger value \n        elif (LCSuff[i-1][j] > LCSuff[i][j-1]): \n            i -= 1\n        else: \n            j -= 1\n  \n    return \"\".join(lcs) \n  \nstr1 = \"abcdabcd\"\nstr2 = \"bcdee\"\n\nprint(lcs(str1, str2)) #\"bcd\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(string1, string2): \n  \n    # Create two lists from input strings \n    list_string1 = list(string1) \n    list_string2 = list(string2) \n  \n    # If both strings are of different length then they  \n    # cannot be anagram \n    if len(list_string1) != len(list_string2): \n        return False \n  \n    # Sort both strings \n    list_string1.sort() \n    list_string2.sort() \n    \n    # Compare sorted strings \n    if list_string1 == list_string2: \n        return True\n    else: \n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef calculateCircleArea(radius):\n    area = math.pi * radius * radius\n    return area\n\nradius = 5\n\nprint(\"Area of a circle with radius 5 is: \", calculateCircleArea(radius)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: unsorted_list = [(1, 2), (3, 1), (2, 3)]\n\ndef take_second(el):\n     return el[1]\n\n# sorting list \n# the second elements of tuples \nsorted_list = sorted(unsorted_list, key = take_second) \n\n# printing sorted list \nprint(sorted_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\ndef geneticAlgorithm(population, iter):\n    for i in range(iter):\n        new_population = []\n        \n        for chromosome in population:\n            cost = getCost(chromosome)\n            fitness = 1/cost\n            parent1, parent2 = selectParents(population)\n            offspring = crossover(parent1, parent2)\n            offspring = mutation(offspring)\n            new_population.append(offspring)\n            \n        population = new_population\n    return population\n    \ndef selectParents(population):\n    parent1, parent2 = getRandomParents(population)\n    fitness1 = getCost(parent1)\n    fitness2 = getCost(parent2)\n    if (fitness1 < fitness2):\n        return parent1, parent2\n    else:\n        return parent2, parent1\n        \ndef getRandomParents(population):\n    parent1 = population[np.random.randint(0, len(population))]\n    parent2 = population[np.random.randint(0, len(population))]\n    while (parent1 == parent2):\n        parent2 = population[np.random.randint(0, len(population))]\n    return parent1, parent2\n    \ndef crossover(parent1, parent2):\n    '''\n    Insert code to perform crossover here\n    '''\n    return offspring\n    \ndef mutation(offspring):\n    '''\n    Insert code to perform mutation here\n    '''\n    return offspring\n    \ndef getCost(chromosome):\n    '''\n    Insert code to compute the cost for a chromosome here\n    '''\n    return cost but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nWrite a python code to a randomly select a number of items, but with a given algorithm\n\"\"\"\n\nimport random\n\ndef select_with_algorithm(items, size):\n    # Create a list from 0 to len(items)-1\n    item_indices = list(range(len(items)))\n    # Create a list of size 0\n    selection = []\n    # Iterate for the size desired\n    for _ in range(size):\n        # Select one of the indices randomly\n        index = random.choice(item_indices)\n        # Store it in the selection list\n        selection.append(items[index])\n        # Then remove it from the item_indices list\n        item_indices.remove(index)\n    # Return the selection\n    return selection\n\nif __name__ == '__main__':\n    items = [1, 2, 3, 4, 5, 6, 7]\n    size = 5\n    selection = select_with_algorithm(items, size)\n    print(selection) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n \ndef randomize(arr, n): \n \n    # Start from the last element and \n    # swap one by one. We don't need to \n    # run for the first element \n    # that's why i > 0 \n    for i in range(n-1,0,-1): \n        # Pick a random index \n        j = random.randint(0,i+1) \n  \n        # Swap arr[i] with the element \n        # at random index \n        arr[i],arr[j] = arr[j],arr[i] \n    return arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Specify the URL\nurl = 'website.com'\n\n# Get the response\nresponse = requests.get(url)\n\n# Parse the response\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# Extract all the articles on the front page\narticles = soup.find_all('article', class_='front-page-article')\n\n# Iterate through each article and print its text\nfor article in articles:\n print(article.find('h2').text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(65, 91): \n    print(chr(i), end=\" \") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_matches(list1, list2):\n    count = 0\n    for elem in list1:\n        if elem in list2:\n            count += 1 \n    return count but is not the same. just give one example and only return the code."}
