{"prompt": "make some code that functions the same as the following code: def binary_tree_to_linked_list(root): \n    if root is None:\n        return None\n    \n    linked_list_head, linked_list_tail = None, None \n  \n    queue = [root] \n  \n    while queue: \n        node = queue.pop(0)\n    \n        #If linked_list_head element is None, insert node to it \n        if linked_list_head is None: \n            linked_list_head = node; \n            linked_list_tail = node \n  \n        # Insert all the child nodes to the queue \n        if node.left: \n            queue.append(node.left) \n        if node.right: \n            queue.append(node.right) \n\n        # Link the node with the previous  \n        # node created in linked list \n        if linked_list_tail: \n            linked_list_tail.next = node \n            linked_list_tail = node \n  \n    return linked_list_head but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import relevant libraries\nimport numpy as np\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# load the data\niris = load_iris()\nX = iris.data\ny = iris.target\n\n# Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y,random_state = 0)\n\n# Initialize the model\nknn_model = KNeighborsClassifier(n_neighbors=3)\n\n# Fit the model to train data\nknn_model.fit(X_train, y_train)\n\n# Score the model on test data\nknn_model.score(X_test, y_test)\n\n# Output a prediction \nknn_model.predict([[3, 5, 4, 2]])\n# Output: [1] (This is Iris-versicolor) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generatePassword():\n encoded_chars = string.ascii_letters + string.digits + string.punctuation\n password = random.choice(string.ascii_lowercase)\n password += random.choice(string.ascii_uppercase)\n password += random.choice(string.digits)\n password += random.choice(string.punctuation)\n \n for i in range(4):\n  password += random.choice(encoded_chars)\n \n password = ''.join(random.sample(password, len(password)))\n \n return password\n \nprint(generatePassword()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: text = text.strip() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_base(num, from_base, to_base):\n    if isinstance(num, str):\n        n = int(num, from_base)\n    else:\n        n = int(num)\n    alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    if n < to_base:\n        return alphabet[n]\n    else:\n        return convert_base(n // to_base, from_base, to_base) + alphabet[int(n % to_base)]\n\nnum = 610\nfrom_base = 7\nto_base = 10\n\nprint(convert_base(num, from_base, to_base)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def area_triangle(a, b, c): \n    # calculate the semi-perimeter \n    s = (a + b + c)/2\n  \n    # calculate the area \n    Area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n  \n    return Area but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_even_numbers(lst): \n  sum = 0\n  for i in lst: \n    if i%2 == 0: \n      sum = sum + i \n  return sum \n  \nprint(sum_of_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def min_coins(coins, amount): \n    # Sort the coins in descending order\n    coins.sort(reverse = True)  \n    \n    # Initialize the array to store the number of coins needed\n    result = [] \n      \n    # Iterate through all the coins and calculate the number of coins needed to fulfill the amount\n    for i in coins: \n        while amount >= i: \n            amount -= i \n            result.append(i)\n              \n    # Return the number of coins needed\n    print(len(result))\n    \ncoins = [1, 2, 5]\namount = 11\nmin_coins(coins, amount) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortList(list):\n    list.sort()\n    return list\n\nsortedList = sortList([4, 5, 2, 1, 3])\nprint(sortedList) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def smallest_multiple(n):\n  lcm = 1\n  for i in range(1, n + 1):\n      lcm = lcm * i // gcd(lcm, i)\n  return lcm\n\ndef gcd(x, y):\n    while(y):\n        x, y = y, x % y\n    return x\n\ndef main():\n  print(smallest_multiple(10))\n  \nif __name__ == \"__main__\":\n  main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def deleteDuplicateElements(arr):\n    uniqueList = []\n    for elem in arr:\n        if elem not in uniqueList:\n            uniqueList.append(elem)\n    return uniqueList\n  \nresult = deleteDuplicateElements([1, 2, 4, 2, 3, 4, 5])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MyDeserializer(Deserializer):\n    def deserialize(self, response):\n        return json.loads(response)\n\ndeserializer = MyDeserializer()\ndeserialized_data = deserializer.deserialize(response)\n\nprint(deserialized_data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import libraries\nimport os\nimport dialogflow\n\n# instantiate dialogflow\nimport dialogflow_v2 as dialogflow\nos.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"] = \"path/to/credentials.json\"\n\n# define the session\nsession_client = dialogflow.SessionsClient()\nsession = session_client.session_path('test-project', \"unique-session-id\")\n\n# define the request and response\nrequest = dialogflow.types.TextInput(text=\"What is your return policy?\", language_code=\"en\")\nresponse = session_client.detect_intent(session=session, query_input=request)\n\n# print results\nprint('Query text: {}'.format(response.query_result.query_text))\nprint('Detected intent: {} (confidence: {})\\n'.format(\n response.query_result.intent.display_name,\n response.query_result.intent_detection_confidence))\nprint('Fulfillment text: {}\\n'.format(response.query_result.fulfillment_text)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import bpy\nfrom bpy.types import Menu, Panel\nfrom bpy.props import *\n\nimport os\nimport sys\nimport subprocess\nimport ast\n\nscript_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\nsys.path.append(script_dir)\n\n# Get system's python path\nproc = subprocess.Popen('python3 -c \"import sys; print(sys.path)\"', stdout=subprocess.PIPE, shell=True)\nout, err = proc.communicate()\npaths = ast.literal_eval(out.decode(\"utf-8\"))\nsys.path += (paths)\n\nimport blendit.SimulationData as Sim\nimport pickle as pic\n\n\ndef initSceneProperties(scn):\n    bpy.types.Scene.PosX = FloatProperty(\n        name=\"X\",\n        description=\"position of the origin\")\n    scn['PosX'] = 0\n    bpy.types.Scene.PosY = FloatProperty(\n        name=\"Y\",\n        description=\"position of the origin\")\n    scn['PosY'] = 0\n    bpy.types.Scene.MinX = FloatProperty(\n        name=\"Min\",\n        description=\"Bound of the map\")\n    scn['MinX'] = -float(\"inf\")\n    bpy.types.Scene.MaxX = FloatProperty(\n        name=\"Max\",\n        description=\"Bound of the map\")\n    scn['MaxX'] = float(\"inf\")\n    bpy.types.Scene.MinY = FloatProperty(\n        name=\"Max\",\n        description=\"Bound of the map\")\n    scn['MinY'] = -float(\"inf\")\n    bpy.types.Scene.MaxY = FloatProperty(\n        name=\"Max\",\n        description=\"Bound of the map\")\n    scn['MaxY'] = float(\"inf\")\n    bpy.types.Scene.GridP = FloatProperty(\n        name=\"P\",\n        description=\"Grid precision\",\n        subtype='PERCENTAGE',\n        default=100,\n        min=0,\n        max=100)\n    scn['GridP'] = 100\n    bpy.types.Scene.SelectString = StringProperty(\n        name=\"Input\",\n        description=\"Enter an input file\",\n        subtype='FILE_PATH')\n    scn['SelectString'] = \"filename.py\"\n    bpy.types.Scene.SaveString = StringProperty(\n        name=\"Output\",\n        description=\"Enter an output file\",\n        subtype='FILE_PATH')\n    scn['SaveString'] = \"filename.py\"\n    return\n\ninitSceneProperties(bpy.context.scene)\n#\n#\n# class MapButtonsPanel(Panel):\n#     bl_category = 'Map'\n#     bl_space_type = 'VIEW_3D'\n#     bl_region_type = 'TOOLS'\n#\n#     def draw(self, context):\n#         layout = self.layout\n#         scn = context.scene\n\n    \nclass InputFile_Tools(Panel):\n    bl_label = \"Input File\"\n    bl_category = \"Map\"\n    bl_space_type = \"VIEW_3D\"\n    bl_region_type = \"TOOLS\"\n\n    def draw(self, context):\n        layout = self.layout\n        scn = context.scene\n        layout.prop(scn, 'SelectString')\n        layout.operator(\"env.select\")\n        layout.prop(scn, 'SaveString')\n        layout.operator(\"env.save\")\n\n        \nclass MapOrigin_Tools(Panel):\n    bl_label = \"Map Origin\"\n    bl_category = \"Map\"\n    bl_space_type = \"VIEW_3D\"\n    bl_region_type = \"TOOLS\"\n#    COMPAT_ENGINES = {'BLENDER_RENDER'}\n\n    def draw(self, context):\n        layout = self.layout\n        scn = context.scene\n        layout.label(text=\"Origin Position:\")\n        row = layout.row(align=True)\n        row.alignment = 'EXPAND'\n        row.prop(scn, 'PosX')\n        row.prop(scn, 'PosY')\n        layout.operator(\"env.origin\")\n        layout.operator(\"env.set\")\n        \n        \nclass MapSize_Tools(Panel):\n    bl_label = \"Map Bounds\"\n    bl_category = \"Map\"\n    bl_space_type = \"VIEW_3D\"\n    bl_region_type = \"TOOLS\"\n\n    def draw(self, context):\n        layout = self.layout\n        scn = context.scene\n        layout.label(text=\"X bounds:\")\n        row = layout.row(align=True)\n        row.alignment = 'EXPAND'\n        row.prop(scn, 'MinX', text=\"Min\")\n        row.prop(scn, 'MaxX', text=\"Max\")\n        layout.label(text=\"Y bounds:\")\n        row = layout.row(align=True)\n        row.alignment = 'EXPAND'\n        row.prop(scn, 'MinY', text=\"Min\")\n        row.prop(scn, 'MaxY', text=\"Max\")\n        layout.operator(\"env.size\")\n\n        \nclass GridSize_Tools (Panel):\n    bl_label = \"Grid Size\"\n    bl_category = \"Map\"\n    bl_space_type = \"VIEW_3D\"\n    bl_region_type = \"TOOLS\"\n\n    def draw(self, context):\n        layout = self.layout\n        scn = context.scene\n        layout.prop(scn, 'GridP')\n        layout.operator(\"env.grid\")\n\n        \nclass Generate_Tools (Panel):\n    bl_label = \"Generate Map\"\n    bl_category = \"Map\"\n    bl_space_type = \"VIEW_3D\"\n    bl_region_type = \"TOOLS\"\n\n    def draw(self, context):\n        layout = self.layout\n        scn = context.scene\n        layout.operator(\"env.generate\")\n        \n\nclass MapSelectButton(bpy.types.Operator):\n    bl_idname = \"env.select\"\n    bl_label = \"Set input as configuration\"\n\n    def execute(self, context):\n        scn = bpy.context.scene\n        view = bpy.context.space_data\n        ic = open(SelectString, \"rb\")\n        Sim.graph = pic.load(ic)\n        ic.close()\n        return{'FINISHED'}\n    \n    \nclass MapSaveButton(bpy.types.Operator):\n    bl_idname = \"env.save\"\n    bl_label = \"Save configuration\"\n\n    def execute(self, context):\n        scn = bpy.context.scene\n        view = bpy.context.space_data\n        oc = open(SaveString, \"wb\")\n        pic.dump(Sim.graph, oc)\n        oc.close()\n        return{'FINISHED'}\n    \n            \nclass MapOriginCursorButton(bpy.types.Operator):\n    bl_idname = \"env.origin\"\n    bl_label = \"From cursor\"\n\n    def execute(self, context):\n        scn = bpy.context.scene\n        view = bpy.context.space_data\n        Pcursor = view.cursor_location\n        bpy.context.scene.PosX = Pcursor[0]\n        bpy.context.scene.PosY = Pcursor[1]\n        scn.cursor_location = (scn.PosX, scn.PosY, 0)\n        return{'FINISHED'}\n    \n\nclass MapOriginButton(bpy.types.Operator):\n    bl_idname = \"env.set\"\n    bl_label = \"Set map origin\"\n\n    def execute(self, context):\n        scn = bpy.context.scene\n        view = bpy.context.space_data\n        Sim.OriginX = PosX\n        Sim.OriginY = PosY\n        return{'FINISHED'}\n    \n\nclass MapSizeButton(bpy.types.Operator):\n    bl_idname = \"env.size\"\n    bl_label = \"Set map size\"\n\n    def execute(self, context):\n        scn = bpy.context.scene\n        Sim.MinX = MinX\n        Sim.MaxX = MaxX\n        Sim.MinY = MinY\n        Sim.MaxY = MaxY\n        return{'FINISHED'}\n\n    \nclass MapGridButton(bpy.types.Operator):\n    bl_idname = \"env.grid\"\n    bl_label = \"Set Grid size\"\n\n    def execute(self, context):\n        scn = bpy.context.scene\n        coefficient = 5 - (GridP / 20)\n        Sim.Grid = Sim.MinGrid * (10 ** coefficient)\n        return{'FINISHED'}\n\n\nclass MapGenerationButton(bpy.types.Operator):\n    bl_idname = \"env.generate\"\n    bl_label = \"Generate\"\n\n    def execute(self, context):\n        scn = bpy.context.scene\n        Sim.renew_graph()\n        return{'FINISHED'}\n\n\nbpy.utils.register_module(__name__)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n if n == 0:\n    return 1\n else:\n return n * factorial(n - 1)\n\n# call the method\nprint(factorial(5)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(string):\n    result = \"\"\n    for i in range(len(string) - 1, -1, -1):\n        result += string[i]\n    return result\n\nreverse_string(\"hello\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nclass RandomPasswordGenerator:\n    def __init__(self, length=10):\n        self.length = length\n        self.password_chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890!@#$%^\"\n\n    def generate_password(self):\n        password = \"\"\n        for _ in range(self.length):\n            index = random.randint(0, len(self.password_chars) - 1 )\n            password += self.password_chars[index]\n        return password but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name, age, grades):\n        self.name = name \n        self.age = age\n        self.grades = grades\n\n    def get_grade_average(self):\n        total = 0\n        for grade in self.grades:\n            total += grade\n        return total/len(self.grades) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def permutation(lst): \n  \n    # If lst is empty then there are no permutations \n    if len(lst) == 0: \n        return [] \n  \n    # If there is only one element in lst then, only one permuatation is possible \n    if len(lst) == 1: \n        return [lst] \n  \n    # Find the permutations for lst if there are more than 1 characters \n    l = [] # empty list that will store current permutation \n  \n    # Iterate the input(lst) and calculate the permutation \n    for i in range(len(lst)): \n       m = lst[i] \n  \n       # Extract lst[i] or m from the list.  remLst is \n       # remaining list \n       remLst = lst[:i] + lst[i+1:] \n  \n       # Generating all permutations where m is first element \n       for p in permutation(remLst): \n           l.append([m] + p) \n    return l \n\ndata = list('123') \nfor p in permutation(data): \n    print (p)\n# Output: \n# [1, 2, 3]\n# [1, 3, 2]\n# [2, 1, 3] \n# [2, 3, 1] \n# [3, 1, 2] \n# [3, 2, 1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort(nums):\n    for i in range(len(nums)):\n        min_index = i\n        for j in range(i + 1, len(nums)):\n            if nums[min_index] > nums[j]:\n                min_index = j\n        \n        nums[i], nums[min_index] = nums[min_index], nums[i]\n    \n    return nums\n\nprint(sort([5, 3, 1, 4, 7, 2, 6])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn import tree\n\n# Data \ndata = {'c1': ['x','x','x','x','y','y','y','y'],'c2': ['g','g','d','d','g','g','d','d'],'c3': ['l','h','h','l','h','l','l','h'],\n        'target': ['0','0','0','0','1','1','1','1']}\n\ninputs = pd.DataFrame(data = data) \n\n# Training the decision tree \ndtree = tree.DecisionTreeClassifier(criterion = 'entropy')\ndtree.fit(X = inputs[['c1','c2','c3']], y = inputs['target'])\n\n# Visualizing the Decision Tree \ntree.plot_tree(dtree) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Number of non-common characters: 7\n\n#Program:\n\ndef compare(string_a, string_b):\n    count=0\n    for i in string_a:\n        if i not in string_b:\n            count+=1\n    for j in string_b:\n        if j not in string_a:\n            count+=1\n    print(f\"Number of non-common characters: {count}\")\n\nstring_a=input(\"String A: \")\nstring_b=input(\"String B: \")\ncompare(string_a,string_b) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\narr = np.array([2, 4, 7, 8, 9])\n\nmean = np.mean(arr)\n\nprint(mean) # 6.2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # # # # # compare tasmin, tas, tasmax in a timeseries of GeoTiff files # # # # \n\ndef transform_from_latlon( lat, lon ):\n\t''' simple way to make an affine transform from lats and lons coords '''\n\tfrom affine import Affine\n\tlat = np.asarray( lat )\n\tlon = np.asarray(lon)\n\ttrans = Affine.translation(lon[0], lat[0])\n\tscale = Affine.scale(lon[1] - lon[0], lat[1] - lat[0])\n\treturn trans * scale\ndef rasterize( shapes, coords, latitude='latitude', longitude='longitude', fill=None, **kwargs ):\n\t'''\n\tRasterize a list of (geometry, fill_value) tuples onto the given\n\txarray coordinates. This only works for 1d latitude and longitude\n\tarrays.\n\t'''\n\tfrom rasterio import features\n\tif fill == None:\n\t\tfill = np.nan\n\ttransform = transform_from_latlon( coords[ latitude ], coords[ longitude ] )\n\tout_shape = ( len( coords[ latitude ] ), len( coords[ longitude ] ) )\n\traster = features.rasterize(shapes, out_shape=out_shape,\n\t\t\t\t\t\t\t\tfill=fill, transform=transform,\n\t\t\t\t\t\t\t\tdtype=float, **kwargs)\n\tspatial_coords = {latitude: coords[latitude], longitude: coords[longitude]}\n\treturn xr.DataArray(raster, coords=spatial_coords, dims=(latitude, longitude))\n\ndef sort_files( files, split_on='_', elem_month=-2, elem_year=-1 ):\n\t'''\n\tsort a list of files properly using the month and year parsed\n\tfrom the filename.  This is useful with SNAP data since the standard\n\tis to name files like '<prefix>_MM_YYYY.tif'.  If sorted using base\n\tPythons sort/sorted functions, things will be sorted by the first char\n\tof the month, which makes thing go 1, 11, ... which sucks for timeseries\n\tthis sorts it properly following SNAP standards as the default settings.\n\n\tARGUMENTS:\n\t----------\n\tfiles = [list] list of `str` pathnames to be sorted by month and year. usually from glob.glob.\n\tsplit_on = [str] `str` character to split the filename on.  default:'_', SNAP standard.\n\telem_month = [int] slice element from resultant split filename list.  Follows Python slicing syntax.\n\t\tdefault:-2. For SNAP standard.\n\telem_year = [int] slice element from resultant split filename list.  Follows Python slicing syntax.\n\t\tdefault:-1. For SNAP standard.\n\n\tRETURNS:\n\t--------\n\tsorted `list` by month and year ascending. \n\n\t'''\n\timport pandas as pd\n\tmonths = [ int(os.path.basename( fn ).split('.')[0].split( split_on )[elem_month]) for fn in files ]\n\tyears = [ int(os.path.basename( fn ).split('.')[0].split( split_on )[elem_year]) for fn in files ]\n\tdf = pd.DataFrame( {'fn':files, 'month':months, 'year':years} )\n\tdf_sorted = df.sort_values( ['year', 'month' ] )\n\treturn df_sorted.fn.tolist()\ndef only_years( files, begin=1901, end=2100, split_on='_', elem_year=-1 ):\n\t'''\n\treturn new list of filenames where they are truncated to begin:end\n\n\tARGUMENTS:\n\t----------\n\tfiles = [list] list of `str` pathnames to be sorted by month and year. usually from glob.glob.\n\tbegin = [int] four digit integer year of the begin time default:1901\n\tend = [int] four digit integer year of the end time default:2100\n\tsplit_on = [str] `str` character to split the filename on.  default:'_', SNAP standard.\n\telem_year = [int] slice element from resultant split filename list.  Follows Python slicing syntax.\n\t\tdefault:-1. For SNAP standard.\n\n\tRETURNS:\n\t--------\n\tsliced `list` to begin and end year.\n\t'''\n\timport pandas as pd\n\tyears = [ int(os.path.basename( fn ).split('.')[0].split( split_on )[elem_year]) for fn in files ]\n\tdf = pd.DataFrame( { 'fn':files, 'year':years } )\n\tdf_slice = df[ (df.year >= begin ) & (df.year <= end ) ]\n\treturn df_slice.fn.tolist()\ndef masked_mean( fn, bounds=None ):\n\t''' get mean of the full domain since the data are already clipped \n\tmostly used for processing lots of files in parallel.'''\n\timport numpy as np\n\timport rasterio\n\t\t\n\twith rasterio.open( fn ) as rst:\n\t\tif bounds:\n\t\t\twindow = rst.window( *bounds )\n\t\telse:\n\t\t\twindow = rst.window( *rst.bounds )\n\t\tmask = (rst.read_masks( 1 ) == 0)\n\t\tarr = np.ma.masked_array( rst.read( 1, window=window ), mask=mask )\n\treturn np.mean( arr )\n\nif __name__ == '__main__':\n\timport os, glob\n\timport geopandas as gpd\n\timport numpy as np\n\timport xarray as xr\n\timport matplotlib\n\tmatplotlib.use( 'agg' )\n\tfrom matplotlib import pyplot as plt\n\tfrom pathos.mp_map import mp_map\n\timport pandas as pd\n\timport geopandas as gpd\n\t\n\t# args / set working dir\n\tbase_dir = '/workspace/Shared/Tech_Projects/EPSCoR_Southcentral/project_data'\n\tos.chdir( base_dir )\n\t# scenarios = ['rcp60', 'rcp85']\n\tscenarios = ['historical']\n\tshp_fn = '/workspace/Shared/Tech_Projects/EPSCoR_Southcentral/project_data/SCTC_studyarea/Kenai_StudyArea.shp'\n\tshp = gpd.read_file( shp_fn )\n\tbounds = shp.bounds\n\n\t# models = ['5ModelAvg','CRU_TS323','GFDL-CM3','GISS-E2-R','IPSL-CM5A-LR','MRI-CGCM3','NCAR-CCSM4']\n\t# models = ['GFDL-CM3','GISS-E2-R','IPSL-CM5A-LR','MRI-CGCM3','NCAR-CCSM4']\n\tmodels = ['ts323']\n\tvariables_list = [['pr']]# ['tasmax', 'tas', 'tasmin']]#,\n\t# models = ['CRU_TS323']\n\t# begin_end_groups = [[2016,2016],[2010,2020],[2095, 2100]]\n\tbegin_end_groups = [[1916, 1916],[1950, 1960],[1995, 2000]]\n\n\tfor scenario in scenarios:\n\t\tfor variables in variables_list:\n\t\t\tfor m in models:\n\t\t\t\tfor begin, end in begin_end_groups: # not fully wired-up yet\n\t\t\t\t\tif m == 'ts323':\n\t\t\t\t\t\told_dir = '/Data/Base_Data/Climate/AK_CAN_2km/historical/CRU/CRU_TS32'\n\t\t\t\t\t\t# begin = 1950\n\t\t\t\t\t\t# end = 1965\n\n\t\t\t\t\telse:\n\t\t\t\t\t\tif scenario == 'historical':\n\t\t\t\t\t\t\told_dir = '/Data/Base_Data/Climate/AK_CAN_2km/historical/AR5_CMIP5_models'\n\t\t\t\t\t\t\t# begin = 1950\n\t\t\t\t\t\t\t# end = 1965\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\told_dir = '/Data/Base_Data/Climate/AK_CAN_2km/projected/AR5_CMIP5_models'\n\t\t\t\t\t\t\t# begin = 2095\n\t\t\t\t\t\t\t# end = 2100\n\n\t\t\t\t\tfigsize = (16,9)\n\t\t\t\t\tout = {}\n\t\t\t\t\tfor v in variables:\n\t\t\t\t\t\tpath = os.path.join( base_dir,'downscaled', m, scenario, v )\n\t\t\t\t\t\tprint( path )\n\t\t\t\t\t\tfiles = glob.glob( os.path.join( path, '*.tif' ) )\n\t\t\t\t\t\tfiles = sort_files( only_years( files, begin=begin, end=end, split_on='_', elem_year=-1 ) )\n\t\t\t\t\t\tout[ v ] = mp_map( masked_mean, files, nproc=4 )\n\t\t\t\t\t\tif v == 'tas' or v == 'pr':\n\t\t\t\t\t\t\tif m == 'ts323':\n\t\t\t\t\t\t\t\tpath = os.path.join( old_dir, v )\n\t\t\t\t\t\t\t\tprint( path )\n\t\t\t\t\t\t\telse:\t\n\t\t\t\t\t\t\t\tpath = os.path.join( old_dir, scenario, m, v )\n\n\t\t\t\t\t\t\tfiles = glob.glob( os.path.join( path, '*.tif' ) )\n\t\t\t\t\t\t\tfiles = sort_files( only_years( files, begin=begin, end=end, split_on='_', elem_year=-1 ) )\n\t\t\t\t\t\t\tout[ v+'_old' ] = mp_map( masked_mean, files, nproc=4 )\n\n\t\t\t\t\t\t\t# nofix\n\t\t\t\t\t\t\tpath = os.path.join( base_dir,'downscaled_pr_nofix', m, scenario, v )\n\t\t\t\t\t\t\tprint( path )\n\t\t\t\t\t\t\tfiles = glob.glob( os.path.join( path, '*.tif' ) )\n\t\t\t\t\t\t\tfiles = sort_files( only_years( files, begin=begin, end=end, split_on='_', elem_year=-1 ) )\n\t\t\t\t\t\t\tout[ v+'_nofix' ] = mp_map( masked_mean, files, nproc=4 )\n\t\t\t\t\t\t\t\n\t\t\t\t\tplot_df = pd.DataFrame( out )\n\t\t\t\t\tplot_df.index = pd.date_range( start=str(begin), end=str(end+1), freq='M' )\n\t\t\t\t\t\n\t\t\t\t\t# sort the columns for output plotting cleanliness:\n\t\t\t\t\tif 'tas' in variables:\n\t\t\t\t\t\tcol_list = ['tasmax', 'tas_old', 'tas', 'tasmin']\n\t\t\t\t\telif 'pr' in variables:\n\t\t\t\t\t\tcol_list = ['pr', 'pr_old', 'pr_nofix']\n\t\t\t\t\t\n\t\t\t\t\tplot_df = plot_df[ col_list ] # get em in the order for plotting\n\n\t\t\t\t\tif v == 'pr':\n\t\t\t\t\t\tplot_df = plot_df.round()[['pr','pr_old']]\n\n\t\t\t\t\t# now plot the dataframe\n\t\t\t\t\tif begin == end:\n\t\t\t\t\t\ttitle = 'EPSCoR SC AOI Temp Metrics {} {} {}'.format( m, scenario, begin )\n\t\t\t\t\telse:\n\t\t\t\t\t\ttitle = 'EPSCoR SC AOI Temp Metrics {} {} {} - {}'.format( m, scenario, begin, end )\n\n\t\t\t\t\tif 'tas' in variables:\n\t\t\t\t\t\tcolors = ['red', 'black', 'blue', 'red' ]\n\t\t\t\t\telse:\n\t\t\t\t\t\tcolors = [ 'blue', 'black', 'darkred' ]\n\n\t\t\t\t\tax = plot_df.plot( kind='line', title=title, figsize=figsize, color=colors )\n\n\t\t\t\t\toutput_dir = os.path.join( base_dir, 'compare_downscaling_versions_PR_no_fix' )\n\t\t\t\t\tif not os.path.exists( output_dir ):\n\t\t\t\t\t\tos.makedirs( output_dir )\n\n\t\t\t\t\t# now plot the dataframe\n\t\t\t\t\tout_metric_fn = 'temps'\n\t\t\t\t\tif 'pr' in variables:\n\t\t\t\t\t\tout_metric_fn = 'prec'\n\n\t\t\t\t\tif begin == end:\n\t\t\t\t\t\toutput_filename = os.path.join( output_dir,'mean_{}_epscor_sc_{}_{}_{}.png'.format( out_metric_fn, m, scenario, begin ) )\n\t\t\t\t\telse:\n\t\t\t\t\t\toutput_filename = os.path.join( output_dir,'mean_{}_epscor_sc_{}_{}_{}_{}.png'.format( out_metric_fn, m, scenario, begin, end ) )\n\t\t\t\t\tplt.savefig( output_filename, dpi=400 )\n\t\t\t\t\tplt.close()\n\n\n\n\n\n# # # PRISM TEST VERSION DIFFERENCES # # # # # # #\n# import rasterio\n# import numpy as np\n# import os, glob, itertools\n\n# base_path = '/workspace/Shared/Tech_Projects/EPSCoR_Southcentral/project_data/prism/raw_prism'\n# variables = [ 'tmax', 'tmin' ]\n\n# for variable in variables:\n# \tak_olds = sorted( glob.glob( os.path.join( base_path, 'prism_raw_older', 'ak', variable, '*.asc' ) ) )\n# \tak_news = sorted( glob.glob( os.path.join( base_path, 'prism_raw_2016', 'ak', variable, '*.asc' ) ) )\n\n# \tolds = np.array([ rasterio.open( i ).read( 1 ) for i in ak_olds if '_14' not in i ])\n# \tnews = np.array([ rasterio.open( i ).read( 1 ) *.10 for i in ak_news if '_14' not in i ])\n\n# \tout = olds - news\n# \tout[ (olds == -9999.0) | (news == -9999.0) ] = 0\n\n# \tuniques = np.unique( out )\n# \tuniques[ uniques > 0.01 ]\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\n# Load the dataset\ndata = pd.read_csv('dataset.csv')\n\n# Separate the features and target\nX = data.drop(['target'], axis=1)\ny = data['target']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=42)\n\n# Standardizing the data\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_data(students):\n    for student in students:\n        if student['Marks'] < 70:\n            student['Class'] = 'Average'\n        elif student['Marks'] >= 70 and student['Marks'] < 90:\n            student['Class'] = 'Good'\n        elif student['Marks'] >= 90:\n            student['Class'] = 'Excellent' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_list(lst):\n    \"\"\"\n    This function takes in a list and filters out any\n    numbers which is divisible by 3 or 5.\n\n    Parameters:\n    lst (list): the list\n\n    Returns:\n    list: the list with divisible by 3 and 5 filtered out\n    \"\"\"\n    result = []\n    for num in lst:\n        if num % 3 != 0 and num % 5 != 0:\n            result.append(num)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n a = 0\n b = 1\n if n < 0: \n print(\"Incorrect input\") \n elif n == 0: \n return a \n elif n == 1: \n return b \n else: \n for i in range(2,n): \n c = a + b \n a = b \n b = c \n return b \n\nn = 10\nprint(Fibonacci(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import libraries\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\n# Load data\ndata = # your data \n\n# Process data\nX = data[['dep_delay', 'arr_delay']]\ny = data['arrival_airport']\n\n# Train-test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train model\nmodel = RandomForestClassifier(n_estimators=100, random_state=42, max_depth=5)\nmodel.fit(X_train, y_train)\n\n# Test model\nscore = model.score(X_test, y_test)\nprint(\"Accuracy: {:.2f}%\".format(score*100)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def words_with_four_or_more_characters(my_sentence):\n  words = my_sentence.split(\" \")\n  four_plus_words = []\n  for word in words:\n    if len(word) >= 4:\n      four_plus_words.append(word)\n  return four_plus_words but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(lst):\n    for i in range(0, len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] > lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n    \n    return lst\n\nprint(sort_list([3, 7, 4, 1, 9])) # prints [1, 3, 4, 7, 9] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def closest_number(arr, number):\n    diff = []\n    for i in arr:\n       diff.append(abs(i-number))\n   \n    closestNumberIndex = 0\n    minDiff = diff[closestNumberIndex]\n    for i in range(len(diff)):\n        if diff[i] < minDiff:\n            closestNumberIndex = i\n            minDiff = diff[i]\n            \n    return arr[closestNumberIndex]\n    \narr = [3, 5, 8, 11, 12]\nnumber = 4\nans = closest_number(arr, number)\nprint(ans) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: ages = [\"14 months\", \"2 years\", \"4 weeks\", \"6 days\"]\n\ndef convert_age(ages):\n  converted_ages = []\n  for age in ages:\n    age_split = age.split(\" \")\n    if age_split[1] == \"months\":\n        converted_age = int(age_split[0]) / 12\n    elif age_split[1] == \"years\":\n        converted_age = int(age_split[0])\n    elif age_split[1] == \"weeks\":\n        converted_age = int(age_split[0]) / 52\n    elif age_split[1] == \"days\":\n        converted_age = int(age_split[0]) / 365  \n    converted_ages.append(converted_age)\n  return converted_ages\n\nconverted_ages = convert_age(ages)\nprint(converted_ages) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import bs4\nfrom bs4 import BeautifulSoup\n\nhtml = '''<table>\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n    <th>Location</th>\n  </tr>\n  <tr>\n    <td>Jane Doe</td>\n    <td>22</td>\n    <td>Paris</td>\n  </tr>\n  <tr>\n    <td>John Smith</td>\n    <td>25</td>\n    <td>London</td>\n  </tr>\n</table>'''\n\nsoup = BeautifulSoup(html, 'html.parser')\ntable = soup.find('table')\nth = table.find_all('th')\nheaders = [i.text for i in th]\n\ndata = []\nfor tr in table.find_all('tr'):\n  tds = tr.find_all('td')\n  row = [i.text for i in tds]\n  if row:\n    data.append(dict(zip(headers, row)))\n\nprint(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter\n\ndef increase_count():\n global count\n count += 1\n counter_label.config(text=str(count))\n \n# Create the main window\nroot = tkinter.Tk()\nroot.geometry(\"300x200\")\n\n# Create a label to show the count\ncount = 0\ncounter_label = tkinter.Label(root, text=str(count))\ncounter_label.pack()\n\n# Create a button to increase the count\nincrease_button = tkinter.Button(root, text=\"Increase Count\", command=increase_count)\nincrease_button.pack()\n\n# Run the main loop\nroot.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ndivisible_by = 3\nresult = [num for num in numbers if num % divisible_by != 0]\n\nprint(result) # [1, 2, 4, 5, 7, 8, 10] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(arr):\n    return list(set(arr)) # using built-in python set() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n \nsentiment_analyzer = SentimentIntensityAnalyzer()\n \ndef detect_sentiment(review):\n    scores = sentiment_analyzer.polarity_scores(review)\n    if scores['compound'] > 0.05:\n        return \"positive\"\n    elif scores['compound'] < -0.05:\n        return \"negative\"\n    else:\n        return \"neutral\"\n    \nreviews = [\"This is a great movie!\", \"This movie is terrible\"]\n \nfor review in reviews:\n    print(detect_sentiment(review)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndef validate_json_string(s):\n    try:\n        json_obj = json.loads(s)\n        return True\n    except json.JSONDecodeError:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n  def __init__(self, data):\n    self.data = data \n    self.next = None\n  \ndef check_reverse(head):\n  slow = head\n  fast = head\n  \n  while fast is not None and fast.next is not None:\n    slow = slow.next\n    fast = fast.next.next\n  \n  node = None\n  while slow is not None:\n    n = slow.next\n    slow.next = node\n    node = slow \n    slow = n \n \n  while head is not None and node is not None:\n    if head.data != node.data:\n      return False \n    head = head.next\n    node = node.next\n  return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\ndef analyze_document(document):\n # Split the document into a list of words\n words = document.split()\n\n # Count the frequencies of each word in the document\n frequencies = Counter(words)\n\n # Get a list of the words with the highest frequency\n highest_frequency = frequencies.most_common()\n\n # Print out the result \n print('The most frequently used words in the document are: ')\n for word, frequency in highest_frequency:\n print(word, frequency) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Node class \nclass Node: \n  \n    # Function to initialise the node object \n    def __init__(self, data): \n        self.data = data  # Assign data\n        self.next = None  # Initialize next as null\n  \n  \n# Linked List class \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n  \n    # Function to reverse the linked list \n    def reverse(self): \n        prev = None\n        current = self.head \n        while(current is not None): \n            next = current.next\n            current.next = prev \n            prev = current \n            current = next\n        self.head = prev but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter as tk \n\n# Create main window \nwindow = tk.Tk() \nwindow.title(\"Report Generator\") \n\n# Create widgets\nlabel1 = tk.Label(window, text=\"Enter data:\") \ntext_input = tk.Text(window, height=3, width=30) \nbutton1 = tk.Button(window, text=\"Create Report\", \ncommand=generate_report) \n\n# Place widgets\nlabel1.pack() \ntext_input.pack() \nbutton1.pack() \n\n# Function to generate report \ndef generate_report(): \n\t# Fetch user input \n\tinput = text_input.get(\"1.0\", \"end-1c\") \n\t\n\t# Create report\n\t...\n\t# Process input to create report\n\t\n\t# Display report\n\treport_label = tk.Label(window, text=report)\n\treport_label.pack()\n\n# Start GUI \nwindow.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for num in [1, 2, 3, 4, 5]:\n    print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ArrayIntersection():\n    def __init__(self, arr1, arr2):\n        self.arr1 = arr1\n        self.arr2 = arr2\n    \n    def intersection(self):\n        intersection = []\n        i, j = 0, 0\n        while i < len(self.arr1) and j < len(self.arr2):\n            if self.arr1[i] == self.arr2[j]:\n                intersection.append(self.arr1[i])\n                i += 1\n                j += 1\n            elif self.arr1[i] < self.arr2[j]:\n                i += 1\n            else:\n                j += 1\n        return intersection\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [3, 5, 6]\n    intersection = ArrayIntersection(arr1, arr2)\n    print(intersection.intersection()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string1 = \"Hello\"\nstring2 = \"World\"\n\n# Concatenate two strings\nconcatenated_string = string1 + \" \" + string2 \n\n# Print the result\nprint(concatenated_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_first_key(d):\n    if d:\n        return next(iter(d))\n    return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Queue:\n    def __init__(self):\n        self.queue = []\n    \n    def enqueue(self, item):\n        self.queue.append(item)\n    \n    def dequeue(self):\n        if len(self.queue) > 0:\n            return self.queue.pop(0)\n        else:\n            return None\n    \n    def peek(self):\n        if len(self.queue) > 0:\n            return self.queue[0]\n        else:\n            return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(data, target):\n    for i in range(len(data)):\n        if (data[i] == target):\n            return i\n    return -1\n\ndata = [7, 4, 3, 11, 9]\ntarget = 11\n\nindex = linear_search(data, target)\nif index != -1:\n    print(\"Element\", target, \"is present at index\", index)\nelse:\n    print(\"Element is not present in the given array\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def evaluate_suduku(board):\n    rows = len(board)\n    cols = len(board[0])\n    # Check rows\n    for row in board:\n        if not all_unique(row):\n            return False\n    # Check columns\n    for i in range(cols):\n        column = [row[i] for row in board]\n        if not all_unique(column):\n            return False\n    # Check 3x3 boxes\n    for i in range(0,rows-2,3):\n        for j in range(0,cols-2,3):\n            box = []\n            for row in board[i:i+3]:\n                for num in row[j:j+3]:\n                    box.append(num)\n            if not all_unique(box):\n                return False\n    return True\n\n# Helper Function to check uniqueness\ndef all_unique(lst): \n    seen = set() \n    return not any(i in seen or seen.add(i) for i in lst) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def roundNum(num): \n    if (num - int(num)) >= 0.5: \n        return int(num) + 1\n    else: \n        return int(num) \n  \nnum = 5.66\nroundedNum = roundNum(num) \nprint(roundedNum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(input_string):\n    # Initialize a new_string\n    new_string = \"\"\n\n    # Traverse in the string starting from the end\n    for i in range(len(input_string)-1,-1,-1):\n        # Append each character to the new_string\n        new_string = new_string + input_string[i]\n\n    # Return the reversed_string\n    return new_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def selection_sort(arr): \n\tfor i in range(len(arr)):   \n\t\tmin_idx = i \n\t\tfor j in range(i+1, len(arr)): \n\t\t\tif arr[min_idx] > arr[j]: \n\t\t\t\tmin_idx = j \n\t\tarr[i], arr[min_idx] = arr[min_idx], arr[i]\n\narr = [76, 25, 16, 15, 88]\nselection_sort(arr)\nprint(\"Sorted array:\", arr) # [15, 16, 25, 76, 88] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_length(string):\n  return len(string)\n\nprint(find_length(\"Hello World!\")) # Output: 12 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\ndata = pd.read_sql\n\n  query = \"SELECT * FROM table\"\n\ndf = pd.read_sql(query, conn)\n\nsum_column = df['column'].sum()\n\nprint(sum_column) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseString(inputString): \n    reversedString = \"\" \n    for i in inputString: \n        reversedString = i + reversedString \n    return reversedString \n  \nprint(reverseString(\"Hello\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\n# Load the JSON data into a Python Dictionary\ndata = json.loads('{\"name\": \"John\", \"age\": 28, \"location\": \"New York\"}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.naive_bayes import MultinomialNB\n\n# Load training data\nX_train = ...\ny_train = ...\n\n# Create classifier\nclf = MultinomialNB()   \n\n# Train the classifier\nclf.fit(X_train, y_train)   \n\n# Make predictions\ny_predicted = clf.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortSentence(sentence):\n    words = sentence.split(\" \")\n    words.sort()\n    return words\n\nresult = sortSentence(\"This is a great day\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def split_consec_spaces(s):\n    words = []\n    word = ''\n    for c in s:\n        if c.isspace():\n            if word:\n                words.append(word)\n            word = ''\n        else:\n            word+=c\n            \n    if word:\n        words.append(word)\n        \n    return words\n    \ns = 'This is a   long  string   of words.'\nwords = split_consec_spaces(s)\nprint(words) # Output: ['This', 'is', 'a', 'long', 'string', 'of', 'words.'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys \n  \n# Find prime numbers between two numbers \nk = int(sys.argv[1]) \nn = int(sys.argv[2]) \n  \nprint(\"List of prime numbers between\", k, \n      \"and\", n, \"are:\") \nfor num in range(k, n + 1): \n  \n    if num > 1: \n        for i in range(2, num): \n            if (num % i) == 0: \n                break\n        else: \n            print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import scipy.optimize\n\ndef objective(variables):\n    x,y,z = variables\n    return x + y*y + z*z*z\n\nx0 = [0,0,0] # Initial guess of variables\n\n# Perform the optimization\nres = scipy.optimize.minimize(\n    objective, \n    x0,\n    method='nelder-mead',\n    options={'xtol': 1e-8, 'disp': True}\n)\n\n# Print resultant variables\nprint(res.x)\n\n# Print minimal value\nprint(res.fun) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import argparse\nimport json\nimport os\nfrom datetime import date\n\n\n# -------------------------------------------------------------------------------\n\n\ndef extract_new_mirnas_from_report(report_tsv, type='new'):\n    \"\"\"\n    \"\"\"\n\n    new_mirnas = {}\n\n    fp = open(report_tsv, 'r')\n    count = 0\n    for line in fp:\n        line = line.strip().split('\\t')\n        # check if candidate mirna is a new family\n        if line[6].lower() == \"new family\":\n            # skip families requiring review\n            if line[1] != '?' and line[1] != '' and line[2] != \"1_SEED\":\n                if line[0] not in new_mirnas:\n                    print line\n                    new_mirnas[line[0]] = line[1]\n        elif line[6].lower() == 'done':\n            count += 1\n    fp.close()\n\n    return new_mirnas\n\n\n# -------------------------------------------------------------------------------\n\ndef extract_rfam_family_accessions(report_file):\n\n    fp = open(report_file, 'r')\n\n    accession_map = {}\n\n    for line in fp:\n        line = line.strip().split('\\t')\n\n        overlap = float(line[4])\n        if overlap <= 100.0:\n            # converts to upper to ensure labels match the constant\n            if line[6].strip().upper() == \"UPDATE SEED\":\n\n                rfam_acc = line[3].strip()\n\n                rfam_acc_list = []\n                if rfam_acc.find(',') == -1:\n                    rfam_acc_list = rfam_acc.split(',')\n                else:\n                    rfam_acc_list = [rfam_acc]\n\n                threshold = 0.0\n                if line[1] != '':\n                    threshold = float(line[1])\n\n                # trim any whitespace characters\n                mirbase_id = line[0].strip()\n\n\n                accession_map[mirbase_id] = {\"rfam_acc\": rfam_acc_list,\n                                              \"threshold\": threshold,\n                                              \"overlap\": float(line[4])}\n                \n    fp.close()\n\n    return accession_map\n\n\n# -------------------------------------------------------------------------------\n\ndef parse_arguments():\n    \"\"\"\n    \"\"\"\n\n    parser = argparse.ArgumentParser()\n\n    parser.add_argument(\"--report\", help=\"miRNA report in .tsv format\", action=\"store\")\n    parser.add_argument(\"--dest-dir\", help=\"Desctination directory\", action=\"store\", default=os.getcwd())\n    parser.add_argument(\"--old-rfam\", help=\"Fetches old Rfam miRNA accessions to be updated\",\n                        action=\"store_true\", default=False)\n    parser.add_argument(\"--create-dump\", help=\"Generates a JSON (.json) dump in destination directory\",\n                        action=\"store_true\", default=False)\n\n    return parser\n\n\n# -------------------------------------------------------------------------------\n\nif __name__ == '__main__':\n\n    parser = parse_arguments()\n    args = parser.parse_args()\n\n    accessions = None\n    if not args.old_rfam:\n        new_mirnas = extract_new_mirnas_from_report(args.report, type='new')\n        accessions = new_mirnas\n\n    else:\n        accessions = extract_rfam_family_accessions(args.report)\n\n    if args.create_dump:\n        filename = \"new_mirnas_\"\n\n        if args.old_rfam:\n            filename = \"mirna_families_to_update_\"\n        fp_out = open(os.path.join(args.dest_dir, filename + str(date.today()) + \".json\"), 'w')\n        json.dump(accessions, fp_out)\n        fp_out.close()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def square(x):\n return x * x but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def to_pig_latin(sentence):\n    result = \"\"\n    words = sentence.split()\n    for word in words:\n        # Check if the word starts with a vowel\n        if word[0] in \"aeiou\":\n            result += word + \"way \"\n        # If not, move the first letter to the end and add 'ay'\n        else:\n            result += word[1:] + word[0] + \"ay \"\n    return result\n\nprint(to_pig_latin(\"This is a sentence\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class BoardGame:\n    def __init__(self, numPlayers):\n        self.numPlayers = numPlayers\n        self.dice = []\n        self.tokens = {}\n\n    def rollDice(self):\n        for i in range(self.numPlayers):\n            self.dice[i] = random.randint(1, 6)\n\n    def moveToken(self, numMoves):\n        for i in range(self.numPlayers):\n            self.tokens[i] += numMoves\n\n    def checkForWin(self):\n        # Implement rules of the game\n        # check if a player has reached the end and return true\n        # if a player has won, false otherwise\n        pass but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(n): \n if n <= 1: \n  return False\n  \n for i in range(2, n): \n  if n % i == 0: \n   return False\n \n return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \n\n# API URL \nurl = \"http://api.openweathermap.org/data/2.5/weather?\"\n\n# API Key \napi_key = \"Your_API_KEY\"\n \n# City name \ncity_name = \"Dataak\"\n\n# parameters \nparams = {\n    'appid': api_key,\n    'q': city_name,\n    'units': 'metric'\n} \n\n# GET request \nresponse = requests.get(url, params=params)\n\n# Printing response \ndata = response.json() \n\n# Parsing data \ntemp = data['main']['temp'] \nwind_speed = data['wind']['speed'] \n\n# Printing output \nprint('Temperature : {} degree celcius'.format(temp)) \nprint('Wind Speed : {} m/s'.format(wind_speed)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_features(features):\n    #number of edges\n    edges = len(features)\n    polygon_corners = 0\n    convex_count = 0\n    non_convex_count = 0\n    # iterate through the list to check if the polygon is convex or non-convex\n    for i in range(edges):\n        polygon_corners += 1\n        next_i = i+1\n        if next_i >= edges:\n            next_i = 0\n        # use the vector cross product to calculate the angle between the two given points\n        x1 = features[i][0]\n        y1 = features[i][1]\n        x2 = features[next_i][0]\n        y2 = features[next_i][1]\n        angle = (x2-x1)*(y2-y1)\n\n        # if angle is positive, the polygon formed is considered convex\n        if angle > 0:\n            convex_count += 1\n        # else, the polygon is considered non-convex\n        else:\n            non_convex_count += 1\n\n    # check the results\n    if convex_count == polygon_corners:\n        return \"convex\"\n    elif non_convex_count == polygon_corners:\n        return \"non-convex\"\n    # the polygon formed is neither convex nor non-convex\n    else:\n        return \"neither convex nor non-convex\"\n\nprint(classify_features([(1,0), (2,3), (3,1), (4,3)])) # prints \"non-convex\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_lists(list1, list2):\n common_elements = []\n for element in list1:\n if element in list2:\n common_elements.append(element)\n return common_elements\n\nlist1 = [1, 2, 3, 4]\nlist2 = [2, 3, 4, 5]\nprint(compare_lists(list1, list2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def substring_2chars(s):\n    maxlen = 0\n    currlen = 0\n    prev_char = ''\n    curr_char = ''\n\n    for c in s:\n        if c != prev_char and curr_char == '':\n            curr_char = c\n            currlen += 1\n        elif c != prev_char and c != curr_char:\n            maxlen = max(maxlen, currlen)\n            currlen = 1\n            prev_char = curr_char\n            curr_char = c\n        else:\n            currlen += 1\n            prev_char = curr_char\n\n    maxlen = max(maxlen, currlen)    \n    return maxlen but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Particle():\n    def __init__(self, mass, velocity, temperature):\n        self.mass = mass\n        self.velocity = velocity\n        self.temperature = temperature but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_rand_string(num_chars):\n    \"\"\"Generates a random string of a given length using ASCII characters\"\"\"\n    char_list = []\n    for i in range(num_chars):\n        char_list.append(chr(random.randrange(32,127)))\n    return \"\".join(char_list)\n\nif __name__ == \"__main__\":\n    rand_str = generate_rand_string(5)\n    print(rand_str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = ['Good', 'Outlook', 'Good', 'Luck', 'Bad', 'Outlook', 'Good']\n \nfreq = {}\n \nfor word in words:\n if word in freq:\n freq[word] += 1\n else:\n freq[word] = 1\n \nprint(freq) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.metrics import mean_squared_error\n\ndef calculate_rmse(y_predicted, y_actual):\n    error = mean_squared_error(y_predicted, y_actual)\n    rmse = error**0.5\n    return rmse\n\ny_predicted = [1, 2, 3]\ny_actual = [2, 3, 4]\nrmse = calculate_rmse(y_predicted, y_actual)\nprint(rmse) # Output: 1.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Imports\nimport tensorflow as tf\nfrom tensorflow import keras\nimport numpy as np\n\n# Load the data\ndata = np.load('data.npz')\ntitles = data['title']\ntexts = data['text']\n# Labels\nlabels = data['labels']\n\n# Create the model\nmodel = keras.Sequential()\nmodel.add(keras.layers.Input(shape=(titles.shape[1],)))\nmodel.add(keras.layers.Embedding(256, 32))\nmodel.add(keras.layers.GRU(64))\nmodel.add(keras.layers.Dense(64, activation='relu'))\nmodel.add(keras.layers.Dense(labels.shape[1], activation='sigmoid'))\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='binary_crossentropy')\n\n# Train the model\nmodel.fit(x=[titles, texts], y=labels) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_numbers(id):\n    nums = []\n    for i in range(id + 1):\n        nums.append(i)\n    return nums\n\nnumbers = get_numbers(5)\nprint(numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python -Wall\n# -*- coding: utf-8 -*-\n\"\"\"\n<div id=\"content\">\n<div style=\"text-align:center;\" class=\"print\"><img src=\"images/print_page_logo.png\" alt=\"projecteuler.net\" style=\"border:none;\" /></div>\n<h2>Largest palindrome product</h2><div id=\"problem_info\" class=\"info\"><h3>Problem 4</h3><span>Published on Friday, 16th November 2001, 06:00 pm; Solved by 254694; Difficulty rating: 5%</span></div>\n<div class=\"problem_content\" role=\"problem\">\n<p>A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 * 99.</p>\n<p>Find the largest palindrome made from the product of two 3-digit numbers.</p>\n</div><br />\n<br /></div>\n\"\"\"\n\n# 999 * 999 = 998001\n# 998 comp 100\n\ndef L_comp(n, s):\n    if (n == 2) :\n        if (s[0] == s[3] and s[1] == s[2]) :\n            return True\n        else :\n            return False\n    elif (n == 3) :\n        if (s[0] == s[5] and s[1] == s[4] and s[2] == s[3]) :\n            return True\n        else :\n            return False\n\ndef L_mutiple(n, max_num):\n    max_range = max_num -1\n    min_range = max_num /2\n    for i in range(max_range, min_range, -1):\n        for j in range(max_range, min_range, -1):\n            ret = i * j\n            s = \"%d\" % (ret)\n            result = L_comp(n, s)\n            if (result):\n                return ret\n\n    return -1\n\n\ndef L_plaindrome(n):\n    if (n != 2 and n != 3):\n        print \"invalid input\"\n        return -1\n\n    max_num = 1\n    for i in range (0, n):\n        max_num *= 10\n\n    return L_mutiple(n, max_num)\n\nprint L_plaindrome(3)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printMenu():\n    print(\"1. Print the restaurant's name.\") \n    print(\"2. Print the restaurant's address.\") \n    print(\"3. Print the list of menu items.\")\n    print(\"4. Print the restaurant's reviews.\")\n    print(\"5. Print the restaurant's ratings.\")\n\ndef printName(name):\n    print(\"The restaurant's name is \" + name)\n\ndef printAddress(street, city, state, zip_code):\n    print(\"The restaurant's address is \" + street + \", \" + city + \", \" + state + \" \" + zip_code) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Read the data\ndata = pd.read_csv(\"data.csv\")\n\n# Encode gender as 0s and 1s\ngender_encoder = preprocessing.LabelEncoder()\ndata[\"Gender\"] = gender_encoder.fit_transform(data[\"Gender\"])\n\n# Split the data into features (X) and labels (y)\nX = data[[\"Height\", \"Weight\", \"Age\"]]\ny = data[\"Gender\"]\n\n# Split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Create a random forest classifier\nclf = RandomForestClassifier()\nclf.fit(X_train, y_train)\n\n# Evaluate accuracy\naccuracy = clf.score(X_test, y_test)\nprint(\"Accuracy:\", accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def two_sum(arr, target):\n    result = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] + arr[j] == target):\n                result.append((arr[i], arr[j]))\n    return result\n\nresult = two_sum([8, 3, 10, 5], 13)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The bug in this code is that the indentation is incorrect in the else clause, resulting in the total variable not being declared before being used after the for loop. The correct code should be as follows:\n\ndef average(nums):\n    if not nums:\n        return 0\n    else:\n        total = 0\n        for n in nums:\n            total += n\n        return total/len(nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def prime_range(m, n):\n    primes = []\n    for num in range(m, n+1):\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            primes.append(num)\n    return primes\n\nprime_range(10, 20) # [11, 13, 17, 19] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import CountVectorizer\n\narticle = \"The company announced a range of new innovative technologies to help combat climate change.\"\n\ntext = [article]\ncv = CountVectorizer()\nX = cv.fit_transform(text)\n\nclf = MultinomialNB()\nclf.fit(X, ['Technology'])\nprint(clf.predict(X)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Linear regression\n\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\nx1 = np.array(X1).reshape(-1,1)\ny1 = np.array(Y1).reshape(-1,1)\n\nx2 = np.array(X2).reshape(-1,1)\ny2 = np.array(Y2).reshape(-1,1)\n\nmodel1 = LinearRegression().fit(x1,y1)\nmodel2 = LinearRegression().fit(x2,y2)\n\npredictions1 = model1.predict(x1)\npredictions2 = model2.predict(x2)\n\nprint (\"Predicted values: \")\nprint (predictions1)\nprint (predictions2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(my_str): \n  rev_str = \"\" \n  \n  for i in my_str: \n    rev_str = i + rev_str\n  \n  return rev_str\n\nmy_str = 'Hello World'\n\nreverse_string(my_str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def lengthList(arr):\n    length = 0\n    for i in arr:\n        length += 1\n    return length\n \nprint(lengthList([1, 3, 5, 7, 9])) # Outputs: 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def heap_sort(nums):\n    n = len(nums)\n     \n    for i in range(n // 2 - 1, -1, -1):\n        heapify(nums, n, i)\n     \n    for i in range(n - 1, 0, -1):\n        nums[i], nums[0] = nums[0], nums[i] \n        heapify(nums, i, 0)\n    return nums\n \ndef heapify(nums, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2 \n     \n    if l < n and nums[i] < nums[l]:\n        largest = l\n     \n    if r < n and nums[largest] < nums[r]:\n        largest = r\n    if largest != i:\n        nums[i], nums[largest] = nums[largest], nums[i] \n        heapify(nums, n, largest) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# Load data\ndata = pd.read_csv('data.csv')\n\n# Split to features and target\nX = data[['X1', 'X2']]\nY = data['Y']\n\n# Create the model\nmodel = LinearRegression()\nmodel.fit(X, Y)\n\n# Print the coefficients\nprint('Intercept:', model.intercept_)\nprint('Coefficients:', model.coef_) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calc_circle_circumference(radius):\n    circumference = 2 * 3.14 * radius\n    return circumference\n\ncircle_circumference = calc_circle_circumference(4)\nprint(circle_circumference) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import socket\nip =  \"8.8.8.8\"\naddress_info = socket.getaddrinfo(ip, None)\n\nfor info in address_info:\n    print(\"IP version :\", info[0])\n    print(\"IP address as string:\", info[4][0])\n    print(\"IP address as tuple:\", info[4])\n    print(\"IP protocol:\", info[6]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPowerOfTwo(n):\n  if(n == 0): \n    return False\n  while(n != 1): \n    if(n % 2 != 0): \n      return False\n    n = n // 2\n    \n  return True\n  \n# The following call will return True\nisPowerOfTwo(16) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_pairs(input_list):\n    output_list = []\n    for i in range(len(input_list)-1):\n        sum = input_list[i] + input_list[i+1]\n        output_list.append(sum)\n    return output_list\n\ninput_list = [2, 4, 5, 10]\nresult = sum_pairs(input_list)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def average(a,b,c):\n    return (a + b + c) / 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def normalize(vector):\n    norm = np.linalg.norm(vector)\n    normalized = []\n    for i in vector:\n        normalized.append(i/norm)\n    return normalized\n\nvector = [1, 5, 2, 8, 9, 4]\n\nnormalized_vector = normalize(vector)\nprint(normalized_vector) # [0.10938925979875006, 0.5469462984987499, 0.21877851959750005, 0.8750559279949998, 1.0000000000000002, 0.43693269989949995] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nnum_rows = 5\nnum_cols = 10\n\n# Initialize the matrix\nmatrix = [[0 for col in range(num_cols)] for row in range(num_rows)]\n\n# Generate random values\nfor row in range(num_rows):\n for col in range(num_cols):\n matrix[row][col] = random.randint(0, 100)\n\n# Display the matrix\nfor row in matrix:\n print(row) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def unique_items(input_list): \n    # blank list to store elements \n    output_list = [] \n      \n    # checking for the not repeated elements \n    for i in input_list: \n        if i not in output_list: \n            output_list.append(i) \n            \n    return output_list\n\n# execute\noutput_list = unique_items(list)\nprint(\"the list with unique item is \", output_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef linear_interpolation(x, y):\n    '''Linear interpolation on given dataset.'''\n    points = list(zip(x, y))\n    x_new, y_new = zip(*[(x_i, np.interp(x_i, x, y)) for x_i in np.arange(1,max(x))])\n    points_new = list(zip(x_new, y_new))\n    return points + points_new\n\nx=[1,2,3]\ny=[2,4,6]\n\nprint(linear_interpolation(x, y)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os\n\n#Define cluster parameters\nprovider = \"AWS\"\nnum_nodes = 4\n\n#Store credentials in environment variables\nos.environ[\"CLUSTER_PROVIDER\"] = provider\nos.environ[\"NODE_COUNT\"] = num_nodes\n\n#Create the cluster\nos.system(\"k3sup init --provider {CLUSTER_PROVIDER} --nodes {NODE_COUNT}\")\n\n#Set up the Kubernetes cluster\nos.system(\"k3sup join --ip ami-.... --user ubuntu --context local --ssh-keypath ~/.ssh/id_rsa\")\n\n#Verify the cluster is up and running \nos.system(\"kubectl cluster-info\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def getElementFrequency(arr):\n    frequency = {}\n    for item in arr:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n\nprint(getElementFrequency([1, 1, 2, 3])) but is not the same. just give one example and only return the code."}
