{"prompt": "make some code that functions the same as the following code: def last_occurence(arr, x):\n    last_index = -1\n    for i in range(len(arr)):\n        if arr[i] == x:\n            last_index = i\n    return last_index\n\nprint(last_occurence([3, 4, 5, 5, 9, 6, 5], 5)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def subset_combinations(arr):\n    result = [[]]\n    for ele in arr:\n        for i in range(len(result)):\n            tmp = list(result[i])\n            tmp.append(ele)\n            result.append(tmp)\n\n    return result\n\nif __name__ == '__main__':\n    arr = [1,2,3]\n    print(\"All possible combinations:\", subset_combinations(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def style_paragraph(text):\n  return \"<p style='text-align: justify; font-weight: bold; font-family: sans-serif;'>{}</p>\".format(text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def uniqueList(myList):\n    uniqueList = []\n    for el in myList:\n        if el not in uniqueList:\n            uniqueList.append(el)\n    return uniqueList but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize_search(query):\n    # Clean the query string\n    query = query.lower()\n    query = query.strip()\n    query = re.sub(r'[^\\w\\s]', '', query)\n     \n    # Tokenize the query\n    tokens = nltk.word_tokenize(query)\n     \n    # Stem the tokens\n    stemmer = nltk.stem.PorterStemmer()\n    stemmed_tokens = [stemmer.stem(t) for t in tokens]\n     \n    # Join the stemmed tokens together\n    processed_query = ' '.join(stemmed_tokens)\n     \n    return processed_query but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_common_elements(list1, list2):\n    common_elements = []\n    for elem1 in list1:\n        for elem2 in list2:\n            if elem1 == elem2:\n                common_elements.append(elem1)\n    return common_elements but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sum = 18\n\n# using a for-loop\nsum = 0\nfor num in [-1, 5, -7, 10, -2]:\n  if num > 0:\n    sum += num\n\nprint(sum)\n\nOutput: 18 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def permutations(str):\n    \"\"\"\n    This function returns a list of all possible \n    permutations of a given string\n    \"\"\"\n\n    # Base case\n    if not str:\n        return ['']\n    \n    # Create a result list to store the permutations\n    result = []\n    \n    # Iterate through all characters \n    for i in range(len(str)):\n        # Create a list of all characters except the current one\n        rest = str[:i] + str[i+1:]\n        # Generate all permutations of the remaining characters\n        sub_permutes = permutations(rest)\n        \n        # Put the current character in each permutation and add it to the result \n        # list\n        for perm in sub_permutes:\n            result.append(str[i] + perm)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport random\nfrom IPython.display import clear_output\n\n# Define a class for the board\nclass Board(): \n    def __init__(self):\n        # self.board is a numpy array of shape (6,7)\n        # It represents the board: 0 is an empty spot;\n        # 1 is a spot taken by the AI; 2 is a spot taken by the player\n        self.board = np.zeros((6,7), dtype=int)\n        \n    # Method for the AI to make a move\n    # It will select a column with an empty spot randomly\n    def AI_move(self): \n        valid_moves = np.where(self.board[0] == 0)[0] # Gets empty columns\n        move = valid_moves[np.random.randint(len(valid_moves))] # Picks one\n        self.make_move(move,1) # Make the move\n        self.print_board() # Print updated board\n        \n    # Method for the player to make a move\n    def player_move(self):\n        valid_moves = np.where(self.board[0] == 0)[0] # Gets empty columns\n        move = int(input(\"Choose a column from 0-6 to play: \")) # Gets input\n        if move not in valid_moves: \n            self.player_move() # If the move is invalid, recur\n        else: \n            self.make_move(move,2) # Make the move\n            self.print_board() # Print upated board\n            \n    # Method to make a move    \n    def make_move(self, move, player):\n        row = np.where(self.board[:,move] == 0)[0][-1] # Finds next available spot\n        self.board[row][move] = player # Make the move\n        \n    # Method to print the current board\n    def print_board(self): \n        clear_output() \n        # Transform all 0,1,2 into string rep of board\n        board_str = np.where(self.board==1, 'AI', np.where(self.board==2, 'Player', \"\"))\n        print(board_str)\n\n# Define a function to play the game    \ndef play_game():\n    game = Board() # Create an instance of the class\n    game.print_board() # Print initial board\n    for i in range(6*7): # Loop for 42 (6x7) possible moves\n        game.player_move() # Player's turn\n        if game.board.any(): # Check for a winner\n            game.AI_move() # AI turn\n            if game.board.any(): # Check for a winner\n                continue \n            else: break\n        else: break\n    print(\"Game Over!\") # Print \"Game Over\" when game is finished\n\n# Run a game\nplay_game() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: csv_data = [\n {'name': 'Albert', 'age': 22},\n {'name': 'Bob', 'age': 24},\n {'name': 'Charles', 'age': 20}\n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def secondLargestElement(arr):\n  # Sort the array in ascending order \n  arr.sort() \n    \n  # Return the second last element \n  return arr[-2] \n\n# Driver code \narr = [14, 46, 47, 86, 92, 52, 48, 36, 66, 85] \n\nprint(secondLargestElement(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: In Python, there are various data types such as strings, numbers (integer, float, complex), booleans, lists, tuples, dictionaries and sets. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class LinearProgrammingGoal:\n    def __init__(self, goal_variables):\n        self.goal_variables = goal_variables\n\n    def set_goal(self, goal_function):\n        self.goal_function = goal_function\n\ndef main():\n    goal_variables = [x, y]\n    goal = LinearProgrammingGoal(goal_variables)\n\n    #Assuming the goal function is of the form \n    #  max Z = 4x + 5y\n    goal.set_goal(lambda x, y: 4 * x + 5 * y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\"\"\"\nThe MIT License (MIT)\n\nCopyright (c) 2013 Andrew Wooster\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\"\"\"\nimport os\nimport subprocess\nimport sys\n\ndef escape_arg(argument):\n    \"\"\"Escapes an argument to a command line utility.\"\"\"\n    argument = argument.replace('\\\\', \"\\\\\\\\\").replace(\"'\", \"\\'\").replace('\"', '\\\\\"').replace(\"!\", \"\\\\!\").replace(\"`\", \"\\\\`\")\n    return \"\\\"%s\\\"\" % argument\n\ndef run_command(command, verbose=False):\n    \"\"\"Runs the command and returns the status and the output.\"\"\"\n    if verbose:\n        sys.stderr.write(\"Running: %s\\n\" % command)\n    p = subprocess.Popen(command, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE)\n    stdin, stdout = (p.stdin, p.stdout)\n    output = stdout.read()\n    output = output.strip(\"\\n\")\n    status = stdin.close()\n    stdout.close()\n    p.wait()\n    return (p.returncode, output)\n\nDEPENDENCY_PRIVATE = 'Private'\nDEPENDENCY_PUBLIC = 'Public'\nDEPENDENCY_UNKNOWN = 'Unknown'\n\ndef dependencies_for_resolved_framework_path(lib_base, framework_path, dependencies, dep_to_visibility, exclude_dylibs=True):\n    def visibility_from_path(path):\n        visibility = DEPENDENCY_UNKNOWN\n        if '/PrivateFrameworks/' in path:\n            visibility = DEPENDENCY_PRIVATE\n        elif '/Frameworks/' in path:\n            visibility = DEPENDENCY_PUBLIC\n        return visibility\n    \n    real_framework_path = framework_path\n    if not framework_path.startswith(lib_base):\n        real_framework_path = lib_base + framework_path\n        if not os.path.exists(real_framework_path):\n            real_framework_path = framework_path\n    if not os.path.exists(real_framework_path):\n        print >> sys.stderr, \"Unable to find framework:\", real_framework_path\n        return\n    \n    (path, filename) = os.path.split(real_framework_path)\n    (base, ext) = os.path.splitext(filename)\n    (status, output) = run_command(\"otool -L %s\" % escape_arg(real_framework_path))\n    lines = output.splitlines()\n    \n    dep_to_visibility[base] = visibility_from_path(real_framework_path)\n    \n    for line in lines:\n        if not line.startswith(\"\\t\"):\n            continue\n        if not \"(\" in line:\n            continue\n        parts = line.split(\"(\")\n        if not len(parts) > 1:\n            continue\n        f_path = parts[0].strip()\n        (_, depname) = os.path.split(f_path)\n        if depname == base:\n            # Exclude self-dependency.\n            continue\n        visibility = visibility_from_path(f_path)\n        if exclude_dylibs and f_path.endswith(\"dylib\"):\n            continue\n        \n        should_recurse = (dep_to_visibility.get(depname) is None)\n        dep_to_visibility[depname] = visibility\n        dependencies.setdefault(base, [])\n        if not depname in dependencies[base]:\n            dependencies[base].append(depname)\n        if should_recurse:\n            dependencies_for_resolved_framework_path(lib_base, f_path, dependencies, dep_to_visibility, exclude_dylibs=exclude_dylibs)\n\ndef dependencies_for_framework_path(framework_path, dependencies, dep_to_visibility, exclude_dylibs=True):\n    (path, filename) = os.path.split(framework_path)\n    (base, ext) = os.path.splitext(filename)\n    lib_path = os.path.join(framework_path, base)\n    lib_parts = lib_path.split(os.sep)\n    lib_base_parts = []\n    for part in lib_parts:\n        if part == \"System\":\n            break\n        lib_base_parts.append(part)\n    lib_base = os.sep.join(lib_base_parts)\n    return dependencies_for_resolved_framework_path(lib_base, lib_path, dependencies, dep_to_visibility, exclude_dylibs=exclude_dylibs)\n\ndef dependencies_for_system_library_path(library_path):\n    entries = os.listdir(library_path)\n    if \"/System/Library\" not in library_path or \"Frameworks\" not in entries or \"PrivateFrameworks\" not in entries:\n        print >> sys.stderr, \"Path doesn't look like it points to the System/Library folder of an SDK.\"\n        sys.exit(1)\n    dependencies = {}\n    dep_to_visibility = {}\n    def update_dependencies(dependencies, dep_to_visibility, library_path, f_path):\n        framework_paths = os.listdir(os.path.join(library_path, f_path))\n        for framework_path in framework_paths:\n            if not framework_path.endswith(\".framework\"):\n                continue\n            full_path = os.path.join(library_path, f_path, framework_path)\n            dependencies_for_framework_path(full_path, dependencies, dep_to_visibility)\n    update_dependencies(dependencies, dep_to_visibility, library_path, \"Frameworks\")\n    update_dependencies(dependencies, dep_to_visibility, library_path, \"PrivateFrameworks\")\n    return (dependencies, dep_to_visibility)\n\ndef dot_for_dependencies(dependencies, dep_to_visibility, framework_depnames=None):\n    l = []\n    l.append(\"digraph G {\")\n    l.append(\"\\tnode [shape=box];\")\n    \n    def color_for_visibility(visibility):\n        if visibility == DEPENDENCY_PRIVATE:\n            return \"#FFD1E0\"\n        elif visibility == DEPENDENCY_PUBLIC:\n            return \"#D1FFD2\"\n        else:\n            return \"#FFFFFF\"\n    \n    \n    if framework_depnames is None:\n        nodes = {}\n        seen_deps = []\n        i = 0\n        for framework_name, visibility in dep_to_visibility.iteritems():\n            if framework_name in seen_deps:\n                continue\n            nodename = \"Node%d\" % i\n            i += 1\n            nodes[framework_name] = nodename\n            seen_deps.append(framework_name)\n            color = color_for_visibility(dep_to_visibility[framework_name])\n            l.append(\"\\t%s [label=\\\"%s\\\", fillcolor=\\\"%s\\\"];\" % (nodename, framework_name, color))\n        for framework_name, deps in dependencies.iteritems():\n            if nodes.get(framework_name) is None:\n                print >> sys.stderr, \"Unknown node\", framework_name\n                continue\n            from_nodename = nodes[framework_name]\n            if len(deps) == 0:\n                l.append(\"\\t\\\"%s\\\" -> {};\" % framework_name)\n            for lib_name in deps:\n                to_nodename = nodes[lib_name]\n                l.append(\"\\t%s -> %s; // %s -> %s\" % (from_nodename, to_nodename, framework_name, lib_name))\n    else:\n        def gather_dependents(dependencies, framework_name, seen=None):\n            \"\"\"Get a list of all the frameworks wich depend on framework_name, recursively.\"\"\"\n            results = []\n            if seen is None:\n                seen = []\n            for framework, deps in dependencies.iteritems():\n                if framework_name in deps:\n                    if framework in seen:\n                        continue\n                    seen.append(framework)\n                    # framework depends on framework_name\n                    results.append(framework_name)\n                    for result in gather_dependents(dependencies, framework, seen=seen):\n                        results.append(result)\n            return list(set(results))\n        frameworks_to_print = []\n        for framework_depname in framework_depnames:\n            for f in gather_dependents(dependencies, framework_depname):\n                frameworks_to_print.append(f)\n        frameworks_to_print = list(set(frameworks_to_print))\n        nodes = {}\n        seen_deps = []\n        i = 0\n        for framework_name, visibility in dep_to_visibility.iteritems():\n            if framework_name in seen_deps:\n                continue\n            if framework_name not in frameworks_to_print:\n                continue\n            nodename = \"Node%d\" % i\n            i += 1\n            nodes[framework_name] = nodename\n            seen_deps.append(framework_name)\n            color = color_for_visibility(dep_to_visibility[framework_name])\n            l.append(\"\\t%s [label=\\\"%s\\\", style=filled, fillcolor=\\\"%s\\\"];\" % (nodename, framework_name, color))\n        for framework_name, deps in dependencies.iteritems():\n            if framework_name in frameworks_to_print:\n                if nodes.get(framework_name) is None:\n                    print >> sys.stderr, \"Unknown node\", framework_name\n                    continue\n                from_nodename = nodes[framework_name]\n                if len(deps) == 0:\n                    l.append(\"\\t\\\"%s\\\" -> {};\" % framework_name)\n                for lib_name in deps:\n                    if lib_name in frameworks_to_print:\n                        to_nodename = nodes[lib_name]\n                        l.append(\"\\t%s -> %s; // %s -> %s\" % (from_nodename, to_nodename, framework_name, lib_name))\n                \n    l.append(\"}\\n\")\n    return \"\\n\".join(l)\n\ndef main(library_path, framework_depnames=None):\n    library_path = os.path.expanduser(library_path)\n    (dependencies, dep_to_visibility) = dependencies_for_system_library_path(library_path)\n    dot_output = dot_for_dependencies(dependencies, dep_to_visibility, framework_depnames=framework_depnames)\n    print >> sys.stdout, dot_output\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 2:\n        print >> sys.stderr, \"Usage: %s [SDK System Library Path] [framework name ...]\"\n        print >> sys.stderr, \"  Where the library path is like /System/Library\"\n        print >> sys.stderr, \"  Where the framework name (optional) is one to determine what depends on it\"\n        sys.exit(1)\n    framework_depnames = None\n    if len(sys.argv) > 2:\n        framework_depnames = sys.argv[2:]\n    main(sys.argv[1], framework_depnames=framework_depnames)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"http://example.com\"\n\nhtml_doc = requests.get(url).text\n\nsoup = BeautifulSoup(html_doc, 'html.parser')\nheadings = soup.find_all('h1')\nanchors = soup.find_all('a')\n\nfor heading in headings:\n print(heading.text)\n\nfor anchor in anchors:\n print(anchor.get('href')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_average(numbers):\n sum = 0\n for num in numbers:\n  sum = sum + num\n return sum / len(numbers)\n \nnumbers = [3, 5, 7, 9]\naverage = get_average(numbers)\nprint(average) # Outputs 6.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(text): \n \n    # Reverse the string to check if the reversed \n    # string is equal to original string \n    reversed_text = text[::-1] \n  \n    # Check if the reversed string is equal to original string \n    if (text == reversed_text): \n        return True\n    \n    return False\n  \n# Driver Code \nif __name__ == '__main__': \n  \n    text = 'Racecar'\n    result = is_palindrome(text)  \n  \n    if (result): \n        print(\"Yes\")\n    else: \n        print(\"No\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: mse = (sum([(x[i]-y[i])**2 for i in range(len(x))]))/len(x)\nprint(mse) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_empty_lists(lst):\n  new_lst = []\n  for li in lst:\n    if li:\n      new_lst.append(li)\n  return new_lst\n\n# call the function  \nmodified_list = remove_empty_lists([[], [2, 3], [], [4, 5], [], [6]])\n\nprint(modified_list)  \n# Output: [[2, 3], [4, 5], [6]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: <html>\n<head>\n  <title>Python Script Page</title>\n</head>\n<body>\n  <h1>Click the buttons below to call a Python Script:</h1>\n  <form name=\"form1\">\n    <button type=\"button\" onclick=\"myFunction('script1.py')\">Script 1</button>\n    <button type=\"button\" onclick=\"myFunction('script2.py')\">Script 2</button>\n    <button type=\"button\" onclick=\"myFunction('script3.py')\">Script 3</button>\n  </form>\n\n  <script type=\"text/javascript\">\n    function myFunction(scriptName) {\n      // Call Python Script\n      alert('Calling Python Script: ' + scriptName);\n    }\n  </script>\n</body>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def _encode(char, offset):\n char_code = ord(char)\n new_char_code = char_code + offset\n return chr(new_char_code)\n\ndef encode_string(string, offset):\n encoded_string = \"\"\n \n for char in string:\n encoded_string += _encode(char, offset)\n \n return encoded_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from django.db import models\nimport datetime\nfrom django.utils import timezone\nfrom django.utils.encoding import python_2_unicode_compatible\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100)\n    slug = models.SlugField(max_length=100, unique=True, verbose_name='slug')\n    description = models.TextField(max_length=4096)\n\n    def __str__(self):\n        return '%s' % (self.name)\n\nclass Tag(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n    slug = models.SlugField(max_length=100, unique=True, verbose_name='slug')\n\n    def __str__(self):\n        return '%s' % (self.name)\n\n@python_2_unicode_compatible\nclass Article(models.Model):\n    ARTICLE_STATUS = (\n        ('D', 'Not Reviewed'),\n        ('P', 'Published'),\n        ('E', 'Expired'),\n    )\n    title = models.CharField(max_length=100, unique=True)\n    slug = models.SlugField(max_length=100, unique=True, verbose_name='slug')\n    status = models.IntegerField(default=0)\n    content = models.TextField()\n    status = models.CharField(max_length=1, choices=ARTICLE_STATUS, default='D')\n    category = models.ForeignKey(Category, verbose_name=\"the related category\")\n    tags = models.ManyToManyField(Tag, verbose_name=\"the related tags\", related_name=\"keyword_set\", blank=True)\n        \n    views = models.IntegerField(default=0)\n    publish_date = models.DateTimeField(auto_now=True, editable=False, help_text=\"Please use the following format: <em>YYYY-MM-DD</em>.\")\n    created_date = models.DateTimeField(auto_now_add=True, editable=False)\n\n    def was_published_recently(self):\n        return self.publish_date >= timezone.now() - datetime.timedelta(days=1)\n    was_published_recently.admin_order_field = 'publish_date'\n    was_published_recently.boolean = True\n    was_published_recently.short_description = 'Published recently?'\n\n    def __str__(self):\n        return '%s' % (self.title)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Load data\ndata = np.array(data)\n\n# Labels\nlabels = np.array([0, 1, 0, 1, 0, 0, 1, 0])\n\n# Create training and testing data\nX_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=0)\n\n# Train the model\nclf = SVC()\nclf.fit(X_train, y_train)\n\n# Test the model\ny_pred = clf.predict(X_test)\n\n# Print accuracy\nprint(\"Accuracy: {}\".format(accuracy_score(y_test, y_pred))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Create\ndata = {'Size': [500], \n'Rooms': [4]}\n\ndf = pd.DataFrame(data)\n\n# Train\nX = df[['Size','Rooms']] \nY = df['Price'] \n\nregressor = RandomForestRegressor(n_estimators = 10, random_state = 0) \nregressor.fit(X, Y)\n\n# Predict\nregressor.predict([[500,4]]) # Predicted price: 1716.275 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_prime(n):\n    if n < 2:\n        return False\n    else:\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = \"Hello World\"\n\n# convert to upper case\nstring = string.upper()\n\n# print result\nprint(string) # prints \"HELLO WORLD\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nConfiguration reader and defaults.\n\nAuthor: Henrik Thostrup Jensen <htj@nordu.net>\nCopyright: NORDUnet (2011)\n\"\"\"\n\nimport os\nimport configparser\n\nfrom opennsa import constants as cnt\n\n\n\n# defaults\nDEFAULT_CONFIG_FILE     = '/etc/opennsa.conf'\nDEFAULT_LOG_FILE        = '/var/log/opennsa.log'\nDEFAULT_TLS             = 'true'\nDEFAULT_TOPOLOGY_FILE   = '/usr/local/share/nsi/topology.owl'\nDEFAULT_TCP_PORT        = 9080\nDEFAULT_TLS_PORT        = 9443\nDEFAULT_VERIFY          = True\nDEFAULT_CERTIFICATE_DIR = '/etc/ssl/certs' # This will work on most mordern linux distros\n\n\n# config blocks and options\nBLOCK_SERVICE    = 'service'\nBLOCK_DUD        = 'dud'\nBLOCK_JUNIPER_EX = 'juniperex'\nBLOCK_JUNIPER_VPLS = 'junipervpls'\nBLOCK_FORCE10    = 'force10'\nBLOCK_BROCADE    = 'brocade'\nBLOCK_NCSVPN     = 'ncsvpn'\nBLOCK_PICA8OVS   = 'pica8ovs'\nBLOCK_JUNOSMX    = 'junosmx'\nBLOCK_JUNOSEX    = 'junosex'\nBLOCK_JUNOSSPACE = 'junosspace'\nBLOCK_OESS       = 'oess'\nBLOCK_CUSTOM_BACKEND = 'custombackend'\n\n# service block\nDOMAIN           = 'domain'      # mandatory\nNETWORK_NAME     = 'network'     # legacy, used to be mandatory\nLOG_FILE         = 'logfile'\nHOST             = 'host'\nPORT             = 'port'\nTLS              = 'tls'\nREST             = 'rest'\nNRM_MAP_FILE     = 'nrmmap'\nPEERS            = 'peers'\nPOLICY           = 'policy'\nPLUGIN           = 'plugin'\nSERVICE_ID_START = 'serviceid_start'\n\n# database\nDATABASE                = 'database'    # mandatory\nDATABASE_USER           = 'dbuser'      # mandatory\nDATABASE_PASSWORD       = 'dbpassword'  # can be none (os auth)\nDATABASE_HOST           = 'dbhost'      # can be none (local db)\n\n# tls\nKEY                     = 'key'         # mandatory, if tls is set\nCERTIFICATE             = 'certificate' # mandatory, if tls is set\nCERTIFICATE_DIR         = 'certdir'     # mandatory (but dir can be empty)\nVERIFY_CERT             = 'verify'\nALLOWED_HOSTS           = 'allowedhosts' # comma seperated list\n\n# generic stuff\n_SSH_HOST               = 'host'\n_SSH_PORT               = 'port'\n_SSH_HOST_FINGERPRINT   = 'fingerprint'\n_SSH_USER               = 'user'\n_SSH_PASSWORD           = 'password'\n_SSH_PUBLIC_KEY         = 'publickey'\n_SSH_PRIVATE_KEY        = 'privatekey'\n\nAS_NUMBER              = 'asnumber'\n\n# TODO: Don't do backend specifics for everything, it causes confusion, and doesn't really solve anything\n\n# juniper block - same for mx / ex backends\nJUNIPER_HOST                = _SSH_HOST\nJUNIPER_PORT                = _SSH_PORT\nJUNIPER_HOST_FINGERPRINT    = _SSH_HOST_FINGERPRINT\nJUNIPER_USER                = _SSH_USER\nJUNIPER_SSH_PUBLIC_KEY      = _SSH_PUBLIC_KEY\nJUNIPER_SSH_PRIVATE_KEY     = _SSH_PRIVATE_KEY\n\n# force10 block\nFORCE10_HOST            = _SSH_HOST\nFORCE10_PORT            = _SSH_PORT\nFORCE10_USER            = _SSH_USER\nFORCE10_PASSWORD        = _SSH_PASSWORD\nFORCE10_HOST_FINGERPRINT = _SSH_HOST_FINGERPRINT\nFORCE10_SSH_PUBLIC_KEY  = _SSH_PUBLIC_KEY\nFORCE10_SSH_PRIVATE_KEY = _SSH_PRIVATE_KEY\n\n# Brocade block\nBROCADE_HOST              = _SSH_HOST\nBROCADE_PORT              = _SSH_PORT\nBROCADE_HOST_FINGERPRINT  = _SSH_HOST_FINGERPRINT\nBROCADE_USER              = _SSH_USER\nBROCADE_SSH_PUBLIC_KEY    = _SSH_PUBLIC_KEY\nBROCADE_SSH_PRIVATE_KEY   = _SSH_PRIVATE_KEY\nBROCADE_ENABLE_PASSWORD   = 'enablepassword'\n\n# Pica8 OVS\nPICA8OVS_HOST                = _SSH_HOST\nPICA8OVS_PORT                = _SSH_PORT\nPICA8OVS_HOST_FINGERPRINT    = _SSH_HOST_FINGERPRINT\nPICA8OVS_USER                = _SSH_USER\nPICA8OVS_SSH_PUBLIC_KEY      = _SSH_PUBLIC_KEY\nPICA8OVS_SSH_PRIVATE_KEY     = _SSH_PRIVATE_KEY\nPICA8OVS_DB_IP               = 'dbip'\n\n\n# NCS VPN Backend\nNCS_SERVICES_URL        = 'url'\nNCS_USER                = 'user'\nNCS_PASSWORD            = 'password'\n\n# JUNOS block\nJUNOS_HOST                = _SSH_HOST\nJUNOS_PORT                = _SSH_PORT\nJUNOS_HOST_FINGERPRINT    = _SSH_HOST_FINGERPRINT\nJUNOS_USER                = _SSH_USER\nJUNOS_SSH_PUBLIC_KEY      = _SSH_PUBLIC_KEY\nJUNOS_SSH_PRIVATE_KEY     = _SSH_PRIVATE_KEY\nJUNOS_ROUTERS             = 'routers'\n\n#Junosspace backend\nSPACE_USER              = 'space_user'\nSPACE_PASSWORD          = 'space_password'\nSPACE_API_URL           = 'space_api_url'\nSPACE_ROUTERS           = 'routers'\nSPACE_CONFIGLET_ACTIVATE_LOCAL = 'configlet_activate_local'  \nSPACE_CONFIGLET_ACTIVATE_REMOTE = 'configlet_activate_remote'\nSPACE_CONFIGLET_DEACTIVATE_LOCAL = 'configlet_deactivate_local'\nSPACE_CONFIGLET_DEACTIVATE_REMOTE = 'configlet_deactivate_remote'\n\n# OESS\nOESS_URL                = 'url'\nOESS_USER               = 'username'\nOESS_PASSWORD           = 'password'\nOESS_WORKGROUP          = 'workgroup'\n\n\nclass ConfigurationError(Exception):\n    \"\"\"\n    Raised in case of invalid/inconsistent configuration.\n    \"\"\"\n\n\nclass Peer(object):\n\n    def __init__(self, url, cost):\n        self.url = url\n        self.cost = cost\n\n\n\ndef readConfig(filename):\n\n    cfg = configparser.SafeConfigParser()\n\n    cfg.add_section(BLOCK_SERVICE)\n    cfg.read( [ filename ] )\n\n    return cfg\n\n\n\ndef readVerifyConfig(cfg):\n    \"\"\"\n    Read a config and verify that things are correct. Will also fill in\n    default values where applicable.\n\n    This is supposed to be used during application creation (before service\n    start) to ensure that simple configuration errors do not pop up efter\n    daemonization.\n\n    Returns a \"verified\" config, which is a dictionary.\n    \"\"\"\n\n    vc = {}\n\n    # Check for deprecated / old invalid stuff\n\n    try:\n        cfg.get(BLOCK_SERVICE, NRM_MAP_FILE)\n        raise ConfigurationError('NRM Map file should be specified under backend')\n    except configparser.NoOptionError:\n        pass\n\n    # check / extract\n\n    try:\n        vc[DOMAIN] = cfg.get(BLOCK_SERVICE, DOMAIN)\n    except configparser.NoOptionError:\n        raise ConfigurationError('No domain name specified in configuration file (mandatory, see docs/migration)')\n\n    try:\n        cfg.get(BLOCK_SERVICE, NETWORK_NAME)\n        raise ConfigurationError('Network name no longer used, use domain (see docs/migration)')\n    except configparser.NoOptionError:\n        pass\n\n    try:\n        vc[LOG_FILE] = cfg.get(BLOCK_SERVICE, LOG_FILE)\n    except configparser.NoOptionError:\n        vc[LOG_FILE] = DEFAULT_LOG_FILE\n\n    try:\n        nrm_map_file = cfg.get(BLOCK_SERVICE, NRM_MAP_FILE)\n        if not os.path.exists(nrm_map_file):\n            raise ConfigurationError('Specified NRM mapping file does not exist (%s)' % nrm_map_file)\n        vc[NRM_MAP_FILE] = nrm_map_file\n    except configparser.NoOptionError:\n        vc[NRM_MAP_FILE] = None\n\n    try:\n        vc[REST] = cfg.getboolean(BLOCK_SERVICE, REST)\n    except configparser.NoOptionError:\n        vc[REST] = False\n\n    try:\n        peers_raw = cfg.get(BLOCK_SERVICE, PEERS)\n        vc[PEERS] = [ Peer(purl.strip(), 1) for purl in  peers_raw.split('\\n') ]\n    except configparser.NoOptionError:\n        vc[PEERS] = None\n\n    try:\n        vc[HOST] = cfg.get(BLOCK_SERVICE, HOST)\n    except configparser.NoOptionError:\n        vc[HOST] = None\n\n    try:\n        vc[TLS] = cfg.getboolean(BLOCK_SERVICE, TLS)\n    except configparser.NoOptionError:\n        vc[TLS] = DEFAULT_TLS\n\n    try:\n        vc[PORT] = cfg.getint(BLOCK_SERVICE, PORT)\n    except configparser.NoOptionError:\n        vc[PORT] = DEFAULT_TLS_PORT if vc[TLS] else DEFAULT_TCP_PORT\n\n    try:\n        policies = cfg.get(BLOCK_SERVICE, POLICY).split(',')\n        for policy in policies:\n            if not policy in (cnt.REQUIRE_USER, cnt.REQUIRE_TRACE, cnt.AGGREGATOR, cnt.ALLOW_HAIRPIN):\n                raise ConfigurationError('Invalid policy: %s' % policy)\n        vc[POLICY] = policies\n    except configparser.NoOptionError:\n        vc[POLICY] = []\n\n    try:\n        vc[PLUGIN] = cfg.get(BLOCK_SERVICE, PLUGIN)\n    except configparser.NoOptionError:\n        vc[PLUGIN] = None\n\n    # database\n    try:\n        vc[DATABASE] = cfg.get(BLOCK_SERVICE, DATABASE)\n    except configparser.NoOptionError:\n        raise ConfigurationError('No database specified in configuration file (mandatory)')\n\n    try:\n        vc[DATABASE_USER] = cfg.get(BLOCK_SERVICE, DATABASE_USER)\n    except configparser.NoOptionError:\n        raise ConfigurationError('No database user specified in configuration file (mandatory)')\n\n    try:\n        vc[DATABASE_PASSWORD] = cfg.get(BLOCK_SERVICE, DATABASE_PASSWORD)\n    except configparser.NoOptionError:\n        vc[DATABASE_PASSWORD] = None\n\n    try:\n        vc[DATABASE_HOST] = cfg.get(BLOCK_SERVICE, DATABASE_HOST)\n    except configparser.NoOptionError:\n        vc[DATABASE_HOST] = None\n\n    try:\n        vc[SERVICE_ID_START] = cfg.get(BLOCK_SERVICE, SERVICE_ID_START)\n    except configparser.NoOptionError:\n        vc[SERVICE_ID_START] = None\n\n    # we always extract certdir and verify as we need that for performing https requests\n    try:\n        certdir = cfg.get(BLOCK_SERVICE, CERTIFICATE_DIR)\n        if not os.path.exists(certdir):\n            raise ConfigurationError('Specified certdir does not exist (%s)' % certdir)\n        vc[CERTIFICATE_DIR] = certdir\n    except configparser.NoOptionError:\n        vc[CERTIFICATE_DIR] = DEFAULT_CERTIFICATE_DIR\n    try:\n        vc[VERIFY_CERT] = cfg.getboolean(BLOCK_SERVICE, VERIFY_CERT)\n    except configparser.NoOptionError:\n        vc[VERIFY_CERT] = DEFAULT_VERIFY\n\n    # tls\n    if vc[TLS]:\n        try:\n            hostkey  = cfg.get(BLOCK_SERVICE, KEY)\n            hostcert = cfg.get(BLOCK_SERVICE, CERTIFICATE)\n\n            if not os.path.exists(hostkey):\n                raise ConfigurationError('Specified hostkey does not exist (%s)' % hostkey)\n            if not os.path.exists(hostcert):\n                raise ConfigurationError('Specified hostcert does not exist (%s)' % hostcert)\n\n            vc[KEY] = hostkey\n            vc[CERTIFICATE] = hostcert\n\n            try:\n                allowed_hosts_cfg = cfg.get(BLOCK_SERVICE, ALLOWED_HOSTS)\n                vc[ALLOWED_HOSTS] = allowed_hosts_cfg.split(',')\n            except:\n                pass\n\n        except configparser.NoOptionError as e:\n            # Not enough options for configuring tls context\n            raise ConfigurationError('Missing TLS option: %s' % str(e))\n\n\n    # backends\n    backends = {}\n\n    for section in cfg.sections():\n\n        if section == 'service':\n            continue\n\n        if ':' in section:\n            backend_type, name = section.split(':',2)\n        else:\n            backend_type = section\n            name = ''\n\n        if name in backends:\n            raise ConfigurationError('Can only have one backend named \"%s\"' % name)\n\n        if backend_type in (BLOCK_DUD, BLOCK_JUNIPER_EX, BLOCK_JUNIPER_VPLS, BLOCK_JUNOSMX, BLOCK_FORCE10, BLOCK_BROCADE,\n                            BLOCK_NCSVPN, BLOCK_PICA8OVS, BLOCK_OESS, BLOCK_JUNOSSPACE, BLOCK_JUNOSEX,\n                            BLOCK_CUSTOM_BACKEND, 'asyncfail'):\n            backend_conf = dict( cfg.items(section) )\n            backend_conf['_backend_type'] = backend_type\n            backends[name] = backend_conf\n\n    vc['backend'] = backends\n\n    return vc\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node(): \n    # Constructor to initialize the node object \n    def __init__(self, data): \n        self.data = data  \n        self.next = None\n\ndef reverse(head):\n    if head is None:\n        return \n    \n    prev = None\n    curr = head\n    while curr != None: \n        # Store the next node\n        next = curr.next\n        \n        # Reverse the current node\n        curr.next = prev \n        \n        # Move to previous node\n        prev = curr \n        \n        #Move the current node\n        curr = next\n    \n    #Assign the reversed list to head\n    head = prev \n    return head but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(list): \n    n = len(list)  \n    for i in range(n-1): \n        for j in range(0, n-i-1): \n            if list[j] > list[j+1] : \n                list[j], list[j+1] = list[j+1], list[j]\n    return list\n  \n# Sample list \nlist = [5, 4, 3, 2, 1]\n  \n# Function Call \nbubble_sort(list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_min_value(dct):\n    min_value = float('inf')\n    for key, val in dct.items():\n        if val < min_value:\n            min_value = val\n    return min_value\n\ndct = {\"key1\": 3, \"key2\": 5, \"key3\": 1}\nprint(get_min_value(dct)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Import the necessary modules\nimport tkinter as tk\nfrom tkinter import *\n\n#Create the main window\nwindow = tk.Tk()\n\n#Create a window content\ndef change_background_to_red():\n    window.configure(background='red')\ndef change_background_to_green():\n    window.configure(background='green')\n    \n#Creating the button\nred_btn = Button(text=\"Red\", command=change_background_to_red)\ngreen_btn = Button(text=\"Green\", command=change_background_to_green)\n\n#Adding the button to the window\nred_btn.pack()\ngreen_btn.pack()\n\n#Run the mainloop\nwindow.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com'\n\n# Fetch the html page\npage = requests.get(url)\n\n# Parse the HTML page\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Extract the product names and prices\nproduct_names = soup.find_all('div', class_='name')\nproduct_prices = soup.find_all('div', class_='price')\n\n# Print the results\nfor i in range(len(product_names)):\n print(product_names[i].text, product_prices[i].text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countOccurrences(list, element):\n    count = 0\n    for i in range(len(list)):\n        if list[i] == element:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    list = [1, 2, 5, 4, 1, 5]\n    element = 5\n    print(countOccurrences(list, element)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nprint(is_prime(7)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# define url of page\nurl = 'http://example.com/headlines'\n\n# make request and parse html\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# get headlines\nheadlines = soup.find_all(class_='headline')\n\n# iterate over each headline\nheadlines_list = []\nfor headline in headlines:\n # get headline text\n headline_text = headline.find('h3').text\n # get headline page url\n headline_page_url = headline.find('a')['href']\n # get date\n headline_date = headline.find(class_='date')\n # add to list\n headlines_list.append((headline_text, headline_page_url, headline_date))\n\nprint(headlines_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(list):\n    \"\"\"Sort the list using selection sort algorithm.\"\"\"\n    # Get the length of the list\n    n = len(list)\n    \n    # Iterate over the list\n    for i in range(n):\n        # Find the minimum element in the list\n        min_idx = i\n        for j in range(i+1, n):\n            if list[min_idx] > list[j]:\n                min_idx = j\n        \n        # Swap the minimum element with the current element\n        list[i], list[min_idx] = list[min_idx], list[i]\n    \n    return list\n\n# Call the function with an example list\nexample_list = [1, 6, 4, 7, 9, 2, 5]\nresult = sort_list(example_list)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\ncustomers = [\n {'customer_id': 1, 'month': 1, 'city': 'LA', 'item': 'pen', 'amount': 500},\n {'customer_id': 2, 'month': 2, 'city': 'NY', 'item': 'pencil', 'amount': 600},\n {'customer_id': 3, 'month': 3, 'city': 'LA', 'item': 'pen', 'amount': 700},\n {'customer_id': 4, 'month': 4, 'city': 'SF', 'item': 'eraser', 'amount': 800},\n {'customer_id': 5, 'month': 5, 'city': 'LA', 'item': 'notebook', 'amount': 900},\n]\n\nitems = [customer['item'] for customer in customers]\n\npop_item = Counter(items).most_common(1)[0]\n\nprint('Most Popular Item:', pop_item[0]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  config.py\n#  \n#  Copyright 2016 Andrei Tumbar <atuser@Kronos>\n#  \n#  This program is free software; you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation; either version 2 of the License, or\n#  (at your option) any later version.\n#  \n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#  \n#  You should have received a copy of the GNU General Public License\n#  along with this program; if not, write to the Free Software\n#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n#  MA 02110-1301, USA.\n#  \n#  \n\nimport os, sys\nimport platform\n\nimport gi\ngi.require_version('Gtk', '3.0')\ngi.require_version('GtkSource', '3.0')\n\nfrom gi.repository import Gtk, GObject, GLib, GtkSource, Pango, Gdk\n\nos.chdir ( os.path.dirname ( os.path.realpath ( __file__ ) ) )\nimport filetab, filemanager, builderset, project, configitem, configfile\n\nclass Config:\n\t\n\tconfig_file_relative = \"\"\n\tconfig_file_full = \"\"\n\t\n\t__file_lines = None\n\t__file = None\n\t\n\tnotebook = None\n\topen_dialogue = None\n\t\n\tvar_dict = {}\n\tvar_list = []\n\tlist_vars = [ \"output_files\", \"input_files\" ]\n\tconf_vars = [ \"title\", \"css\", \"js\" ]\n\t\n\tvariables_box = Gtk.Box ( )\n\tconfigitems = []\n\trows = []\n\trow_raw = []\n\t\n\tcurrent_file = {}\n\tcurrent = None\n\t\n\tdef __init__ ( self, curr_dir, config, notebook, open_dialogue ):\n\t\tself.open_dialogue = open_dialogue\n\t\tself.dir = curr_dir\n\t\tself.notebook = notebook\n\t\tself.new_config ( config )\n\t\n\tdef remove_config ( self ):\n\t\tself.input.destroy ( )\n\t\tself.output.destroy ( )\n\t\tself.treeview.destroy ( )\n\t\tself.var_store = None\n\t\t\n\t\tself.var_rend = None\n\t\tself.val_rend = None\n\t\tself.treeview.destroy ( )\n\t\t\n\t\tself.var_dict = {}\n\t\tself.var_list = []\n\t\tself.list_vars = [ \"output_files\", \"input_files\" ]\n\t\tself.conf_vars = [ \"title\", \"css\", \"js\" ]\n\t\t\n\t\tself.variables_box = Gtk.Box ( )\n\t\tself.configitems = []\n\t\t\n\t\tself.current_file = {}\n\t\tself.current = None\n\t\n\tdef new_config ( self, config ):\n\t\tself.config_file_relative = config\n\t\tself.config_file_full = self.get_path ( config )\n\t\t\n\t\tself.__file_lines = open ( self.config_file_relative, \"r\" ).readlines ( )\n\t\tself.input = configitem.ConfigItem ( )\n\t\tself.output = configitem.ConfigItem ( )\n\t\t\n\t\tself.input.connect ( \"new_config\", self.get_new )\n\t\tself.output.connect ( \"new_config\", self.get_new )\n\t\t\n\t\tself.input.connect ( \"remove_item\", self.get_remove )\n\t\tself.output.connect ( \"remove_item\", self.get_remove )\n\t\t\n\t\tfor l in self.__file_lines:\n\t\t\tif l [ 0 ] == \"#\" or l == \"\" or l == \"\\n\":\n\t\t\t\tcontinue\n\t\t\tvar, val = l.split ( \"=\" )\n\t\t\t# Remove the whitespace\n\t\t\tvar = var.strip ( )\n\t\t\tval = val.strip ( )\n\t\t\t\n\t\t\tself.var_dict [ var ] = val\n\t\t\t\n\t\t\tself.var_list.append ( var )\n\t\t\t\n\t\t\tif var in self.list_vars:\n\t\t\t\tself.var_dict [ var ] = val.split ( \",\" )\n\t\t\n\t\tfor var in self.list_vars:\n\t\t\tif not var:\n\t\t\t\tcontinue\n\t\t\tbuff = self.var_dict [ var ]\n\t\t\texec ( \"self.%s.set_notebook ( self.notebook )\"  % var.replace ( \"_files\", \"\" ) )\n\t\t\texec ( \"self.%s.set_dialogue ( self.open_dialogue )\"  % var.replace ( \"_files\", \"\" ) )\n\t\t\texec ( \"self.%s.add_items ( buff )\" % var.replace ( \"_files\", \"\" ) ) \n\t\t\n\t\tself.__init_vars__ ( )\n\t\t\n\t\tfor var in self.var_list:\n\t\t\tif ( not isinstance ( self.var_dict [ var ], list ) ):\n\t\t\t\tself.add_var ( var )\n\t\n\tdef get_remove (self, buff_cfg, buff_item):\n\t\tcurr = \"output\"\n\t\tif buff_cfg == self.input:\n\t\t\tcurr = \"input\"\n\t\tself.var_dict [ curr + \"_files\" ].pop ( self.var_dict [ curr + \"_files\" ].index (buff_item.full_path))\n\t\n\tdef get_path ( self, _in ):\n\t\tif self.dir [ -1 ] == \"/\":\n\t\t\treturn self.dir + _in\n\t\treturn self.dir + \"/\" + _in\n\t\n\tdef get_new ( self, a, confitem ):\n\t\tif ( confitem == self.input ):\n\t\t\tself.current = \"input\"\n\t\telse:\n\t\t\tself.current = \"output\"\n\t\n\tdef add ( self, __files ):\n\t\tif platform.system () == \"Windows\":\n\t\t\t__files[0] = __files [0][1:]\n\t\tif ( self.current == \"input\" ):\n\t\t\tself.input.add_items ( __files, remove=False )\n\t\t\tself.var_dict [\"input_files\"].append (__files[0])\n\t\telse:\n\t\t\tself.output.add_items ( __files, remove=False )\n\t\t\tself.var_dict [\"output_files\"].append (__files[0])\n\t\n\tdef update_file ( self, var, val ):\n\t\tself.current_file [ var ] = val\n\t\n\tdef __init_vars__ ( self ):\n\t\tself.var_store = Gtk.ListStore ( str, str )\n\t\t\n\t\tself.treeview = Gtk.TreeView.new_with_model ( self.var_store )\n\t\t\n\t\tself.var_rend = Gtk.CellRendererText ( )\n\t\tself.val_rend = Gtk.CellRendererText ( )\n\t\t\n\t\tself.val_rend.set_property('editable', True)\n\t\t\n\t\tcolumn_1 = Gtk.TreeViewColumn ( \"Variables\", self.var_rend, text=0 )\n\t\tcolumn_2 = Gtk.TreeViewColumn ( \"Value\", self.val_rend, text=1 )\n\t\t\n\t\tself.treeview.append_column ( column_1 )\n\t\tself.treeview.append_column ( column_2 )\n\t\tself.val_rend.connect ( \"edited\", self.vars_changes )\n\t\n\tdef vars_changes ( self, renderer, path, new_text ):\n\t\tself.var_store.set ( self.var_store.get_iter ( path ), 1, new_text )\n\t\tself.var_dict [ self.var_store.get_value ( self.var_store.get_iter ( path ), 0 ) ] = new_text\n\t\t\n\t\n\tdef add_var ( self, var, add_to_list=False ):\n\t\tif ( add_to_list ):\n\t\t\tself.var_list.append ( var )\n\t\t\tself.var_dict [ var ] = \"\"\n\t\tself.var_store.append ( [ var, self.var_dict [ var ] ] )\n\t\n\tdef open_file ( self, path ):\n\t\tself.__file_lines = open ( path, \"r\" ).readlines ( )\n\t\tself.__file = open ( path, \"w\" ).readlines ( )\n\t\n\tdef remove_var ( self ):\n\t\tmodel, treeiter = self.treeview.get_selection ( ).get_selected ( )\n\t\t\n\t\tself.var_dict.pop ( model [ treeiter ] [ 0 ], None )\n\t\tself.var_list.pop ( self.var_list.index ( model [ treeiter ] [ 0 ] ) )\n\t\tprint (self.var_list)\n\t\tself.var_store.remove ( treeiter )\n\t\n\tdef get_conf_out ( self ):\n\t\tout_buff = []\n\t\tfor x in self.var_list:\n\t\t\tbuff = self.var_dict [ x ]\n\t\t\tif ( isinstance ( self.var_dict [ x ], list ) ):\n\t\t\t\tbuff = \",\".join ( self.var_dict [ x ] )\n\t\t\t\tbuff += \",\"\n\t\t\tout_buff.append ( x + \" = \" + buff )\n\t\treturn out_buff\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def increment(x): \n    return x + 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom keras.models import Sequential \nfrom keras.layers import Dense, Dropout \nfrom keras.wrappers.scikit_learn import KerasRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import cross_val_score\n\n# define the data\ninputs = np.loadtxt('inputs.csv', delimiter=',') \ntargets = np.loadtxt('targets.csv', delimiter=',')\n\n# Scale the data\nsc = StandardScaler() \ninputs = sc.fit_transform(inputs) \ntargets = sc.fit_transform(targets)\n\n# define the model\ndef create_model():\n    model = Sequential()\n    model.add(Dense(64, activation='relu', input_dim=4))\n    model.add(Dense(32, activation='relu'))\n    model.add(Dense(1))\n    model.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy'])\n    return model \n\n# create the model and evaluate it\nmodel = KerasRegressor(create_model, epochs=50, batch_size=32, verbose=0) \nresults = cross_val_score(model, inputs, targets, cv=5)\n\n# print the results\nprint(\"Mean: \", results.mean())\nprint(\"Standard Deviation: \", results.std()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list1 = [2, 3, 4, 5, 6]\nlist2 = [5, 6, 7, 8, 9]\n\ncommon_elements = []\n\nfor ele in list1:\n    if ele in list2:\n        common_elements.append(ele)\n\nprint(common_elements) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n \nsentence = \"This is a sentence containing a lot of words ending in 'ing'.\"\npattern = r\"\\w+ing\\b\"\n \nwords = re.findall(pattern, sentence)\n \nprint(words)\n \n# Output: ['containing', 'ending'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Make a get request to get the remote data\nr = requests.get('https://www.example.com')\n\n# Parse the text\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# Extract data\ndata = []\nfor tr in soup.find_all('tr'): # Find all table rows\n    row = []\n    for td in tr.find_all('td'): # Find all table data\n        row.append(td.text)\n    data.append(row)\n\n# Print the extracted data\nprint(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nGenerate a Python function to parse a web page from a given URL and identify the phone number on the page.\n\"\"\"\n\nimport re\nimport requests\n\ndef find_phone_number(url):\n    response = requests.get(url)\n    html = response.text\n    phone_regex = r\"[\\+\\(]?[1-9][0-9 .\\-\\(\\)]{8,}[0-9]\"\n    matches = re.findall(phone_regex, html)\n    if matches:\n        return matches[0]\n    else:\n        return None\n \nif __name__ == '__main__':\n    print(find_phone_number('https://example.com/contact')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(list, element):\n    for i in range(len(list)):\n        if list[i] == element:\n            return i\n    return -1\n\nindex = linear_search([25, 10, 5, 2, 50], 50)\nif index < 0:\n    print(f\"{element} not found in the list\")\nelse:\n    print(f\"{element} found at index {index}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def all_combinations_sum_k(k, arr): \n    combinations = [] \n    # recursively traverse the array \n    find_all_combinations_sum_k_util(k, arr, 0, [], combinations) \n  \n   # print all the combinations \n    for p in combinations: \n        print(p)\n  \ndef find_all_combinations_sum_k_util(k, arr, start, combination, combinations):\n      if k == 0: \n          combinations.append(list(combination)) \n          return\n  \n      for i in range(start, len(arr)): \n          # if the sum of elements >= k then no need to search further for that combination \n          if (k - arr[i] >= 0): \n              combination.append(arr[i]) \n              # searching further for the solution  \n              find_all_combinations_sum_k_util(k - arr[i], arr, i + 1, combination, combinations) \n              combination.pop() \n\nall_combinations_sum_k(15, [2, 4, 6, 8, 10]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [(\"apple\", \"fruit\"), (\"carrot\", \"vegetable\"), (\"orange\", \"fruit\")]\nsearch_string = \"orange\"\n\n# Iterate through the list of tuples\nfor (name,item) in my_list:\n    if name == search_string:\n        print(\"The value associated with the string is: \", item)\n        break but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2, n): \n            c = a + b \n            a = b \n            b = c \n        return b \n\nprint(fibonacci(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string1 = \"Programming\"\nstring2 = \"Fundamentals\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_divisible_by_five(number):\n    # check if the number is divisible by 5\n    if number % 5 == 0:\n        return 'Divisible'\n    else:\n        return 'Not divisible' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\n\n# Read data\ndf = pd.read_csv('housing_data.csv')\n\n# Explore data\nsns.pairplot(df)\nplt.show()\n\n# Split data into training and testing datasets\nX = df.drop('price', axis=1).values\ny = df['price'].values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train the model\nfrom sklearn.linear_model import LinearRegression \nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Test the model\ny_pred = model.predict(X_test)\nfrom sklearn.metrics import r2_score\nscore = r2_score(y_test, y_pred)\nprint('R2 score: ', score) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import collections\ndef third_most_common(words):\n    count = collections.Counter(words).most_common()\n    return count[2][0]\nthird_most_common(words) # returns 'Bird' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn import tree\n\n# Load the data\ndata = pd.read_csv('data.csv')\nX = data[['height', 'weight']]\ny = data['gender']\n\n# Train the model\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X, y)\n\n# Make a prediction\nprediction = clf.predict([[180, 80]])\nprint(prediction) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_mse(y_true, y_pred):\n    mse = 0\n    for i in range(len(y_true)):\n        mse += (y_true[i] - y_pred[i])**2\n    mse = mse / len(y_true)\n    return mse\n\nmse=calculate_mse(y_true, y_pred)\nprint(mse)\n# Output: 0.44000000000000006 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: str1 = \"Hello World!\"\n\nchar = 'l'\ncount = 0\n\nfor i in str1:\n     if i == char:\n          count = count + 1\n\n# Print the result \nprint (f'The character {char} appears {count} times in the string {str1}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: employee = {\n 'name': 'John',\n 'age': 28\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def extract_last_digits(n):\n  return int(str(n)[-2:])\n\nresult = extract_last_digits(12345)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import libraries \nimport numpy as np \nimport statsmodels.api as sm \n\n# predictors \nx = np.array([4.26, 6.16, 5.74, 6.52, 4.02, 5.35, 5.75, 5.77, 5.26, 6.30]) \n\n# target \ny = np.array([13.44, 10.62, 6.78, 10.93, 8.58, 8.03, 7.39, 8.50, 9.72, 11.95]) \n\n# add a column of ones to the predictors \nX = sm.add_constant(x) \n\n# fit the linear regression model \nmodel = sm.OLS(y, X).fit() \n\n# print the result of linear regression model \nprint(model.summary())\n\n# interpretation \n# The coefficient for x is -1.209, this means that for each unit increase in x, there is a corresponding reduction of 1.209 units in the target y. \n# The intercept is 8.719, which means that even when x is 0, the target value is 8.719. \n# The R-squared value of 0.895 indicates that 89.5 % of variation in target is explained by the linear regression model. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate an AI model class in Python for predicting future stock prices.\n\"\"\"\n\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\n\nclass StockPriceAI:\n    def __init__(self, stock_data):\n        \"\"\"\n        Initializes a StockPriceAI model\n\n        Arguments:\n            stock_data {pandas dataframe} -- dataset containing stock data\n        \"\"\"\n        self.stock_data = stock_data\n        self.X = None\n        self.y = None\n\n    def prepare_data(self):\n        \"\"\"\n        Prepares data for model training.\n\n        This includes slicing, scaling, and splitting the data\n        \"\"\"\n        stock_data_slice = self.stock_data.iloc[:, 1:2].values\n        sc = MinMaxScaler()\n        stock_data_scaled = sc.fit_transform(stock_data_slice)\n        self.X = stock_data_scaled[0:len(stock_data_scaled)-1]\n        self.y = stock_data_scaled[1:len(stock_data_scaled)]\n\n    def train_model(self, model_type='linear'):\n        \"\"\"\n        Trains the model with stock data.\n\n        Arguments:\n            model_type {str} -- type of model to use for training\n                                 either \"linear\" or \"svr\"\n        \"\"\"\n        self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(self.X, self.y, test_size=0.2)\n\n        if model_type == 'linear':\n            self.model = LinearRegression().fit(self.X_train, self.y_train)\n        elif model_type == 'svr':\n            self.model = SVR().fit(self.X_train, self.y_train)\n\n    def predict_stock_price(self, test_set):\n        \"\"\"\n        Predicts stock prices for the given test set.\n\n        Arguments:\n            test_set {numpy array} -- test set of stock data\n\n        Returns:\n            numpy array -- prediction of stock prices\n        \"\"\"\n        predicted_stock_price = self.model.predict(test_set)\n        return predicted_stock_price but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import packages\nimport tensorflow as tf\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau\n\n# Create the optimization algorithm\nreduce_lr = ReduceLROnPlateau(patience=3, min_delta=0.001, verbose=1)\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\n#Define a callback\ncallbacks_list = [reduce_lr]\n\n# Train the model\nmodel.fit(x_train, y_train, batch_size=64, epochs=50, callbacks=callbacks_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def edit_distance(str1, str2):\n    matrix = []\n    for i in range(len(str1) + 1):\n        matrix.append([0] * (len(str2) + 1))\n        \n    for i in range(len(str1) + 1):\n        matrix[i][0] = i\n    for j in range(len(str2) + 1):\n        matrix[0][j] = j\n        \n    for i in range(1, len(str1) + 1):\n        for j in range(1, len(str2) + 1):\n            if str1[i-1] == str2[j-1]:\n                matrix[i][j] = matrix[i-1][j-1]\n            else:\n                matrix[i][j] = 1 + min(matrix[i][j-1], matrix[i-1][j], matrix[i-1][j-1])\n    \n    return matrix[len(str1)][len(str2)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\n\n# Read dataset\nX = np.loadtxt('./data.txt', delimiter=',')\ny = np.loadtxt('./labels.txt')\n\n# Split the dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Train the model\nclassifier = GaussianNB()\nclassifier.fit(X_train, y_train)\n\n# Test the model\nscore = classifier.score(X_test, y_test)\nprint(\"Model accuracy:\", score) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factors(n):\n    factors =[]\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nitems = [\"iPhone 11 Pro\", \"Playstation 4 Pro\", \"Samsung Galaxy S20\"]\n\nfor item in items:\n    r = requests.get(\"https://www.amazon.com/s?k=\" + item)\n    soup = BeautifulSoup(r.content, 'html.parser')\n    product_prices = [price.get_text().replace(\"$\", \"\") for price in soup.find_all(\"span\", class_=\"a-price-whole\")]\n    print(f\"The current price for {item} is {product_prices[0]}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, jsonify\nfrom flask_restful import Resource, Api\n\napp = Flask(__name__)\napi = Api(app)\n\nemployees = []\n\nclass EmployeeList(Resource):\n    def get(self):\n        return {'employees': employees}\n\napi.add_resource(EmployeeList, '/employees')\n\nclass Employee(Resource):\n    def get(self, employee_id):\n        employee = [employee for employee in employees if employee['id'] == employee_id]\n        if len(employee) == 0:\n            return {'message': 'No employee found'}, 404\n        return {'employee': employee[0]}\n\n    def post(self, employee_id):\n        data = request.get_json()\n        employee = {\n            'id': employee_id, \n            'name': data['name'],\n            'salary': data['salary']\n        }\n        employees.append(employee)\n        return {'message': 'Employee added successfully', 'employee': employee}, 201\n\napi.add_resource(Employee, '/employees/<int:employee_id>')\n\nif __name__ == '__main__':\n    app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\nimport matplotlib.pyplot as plt\n\nwords = ['a', 'cat', 'sat', 'on', 'the', 'mat']\nword_counts = Counter(words)\n\n# Get word frequencies\nlabels, values = zip(*word_counts.items())\n\n# Create the figure\nplt.figure(figsize=(12, 8))\n\n# Plot the data\nplt.bar(range(len(word_counts)), list(values), tick_label = list(labels))\n\nplt.title('Word Frequency Histogram')\nplt.xlabel('Words')\nplt.ylabel('Frequency')\n\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Imports \nfrom flask import Flask, render_template, request\nfrom sklearn.externals import joblib\n\n# App\napp = Flask(__name__)\n\n# Load the model\nmodel = joblib.load(Python Machine Learning model file)\n\n# Routes\n\n@app.route('/', methods=['GET', 'POST'])\ndef predict(): \n    # Get the data from the POST request. \n    data = request.form\n    # Make prediction using the model. \n    prediction = model.predict(data)\n    \n    # Render template\n    return render_template('index.html', prediction=prediction)\n\n# Run App\nif __name__ == '__main__': \n    app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(number1, number2): \n    if(number2 == 0): \n        return number1 \n    return gcd(number2, number1%number2) \n\nfirst_num = 6\nsecond_num = 4\n\nprint(\"The greatest common divisor of 6 and 4 is\", gcd(first_num, second_num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_even(arr):\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            arr[i] = 0\n    return arr\n\nresult = replace_even([4, 10, 15, 20])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def validate_credit_card(card_number):\n # strip whitespace\n card_number = card_number.strip()\n \n # First step is to double every second digit\n # Increase the overall sum of the digits by the doubled number\n \n digits = [int(d) for d in card_number] # convert each character in the number to int\n \n doubled_digits = [2*d if idx % 2 == 0 else d for idx, d in enumerate(digits)]\n \n total = sum(doubled_digits)\n \n # Check if total is divisible by 10\n if total % 10 == 0:\n return True\n \n return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Bubble Sort\ndef bubble_sort(numbers): \n  \n    # Traverse through all array elements \n    for i in range(len(numbers)): \n  \n        # Last i elements are already in place \n        for j in range(0, len(numbers)-i-1): \n                # traverse the array from 0 to n-i-1 \n                # Swap if the element found is greater \n                # than the next element \n                if numbers[j] > numbers[j+1] : \n                    numbers[j], numbers[j+1] = numbers[j+1], numbers[j] \n  \nnumbers = [2, 9, 6, 4, 5]\nbubble_sort(numbers)\n\nprint (\"Sorted array is:\")\nfor i in range(len(numbers)): \n    print (\"%d\" %numbers[i]), but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy\n\ndef cos_sim(vec1, vec2):\n    sim = numpy.dot(vec1, vec2)/(numpy.linalg.norm(vec1)* numpy.linalg.norm(vec2)) \n    return sim\n\nvec1 = [2, 5]\nvec2 = [1, 3]\nprint(\"Cosine Similarity:\", cos_sim(vec1, vec2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize_rules(rules):\n    optimized_rules = []\n\n    # Add your code here\n\n    return optimized_rules but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    if n == 0:\n        return 1\n\n    return n * factorial(n-1)\n\nresult = factorial(5)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: user_str = input(\"Please enter a string: \")\nprint(\"The length of the string is\", len(user_str)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Command():\n    def __init__(self, command_name, params):\n        self.command_name = command_name\n        self.params = params\n\n    def is_valid_command(self):\n        # Your code here\n        pass\n\ndef process_command(command):\n    # Your code here\n    pass but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def flattenList(inputList): \n    outputList = [] \n    for subList in inputList: \n        for item in subList: \n            outputList.append(item) \n    return outputList but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import the necessary libraries\nimport numpy as np\n\n# Define the gradient descent function\ndef gradient_descent(x, y):\n  # Initialize the model parameters\n  m = 0\n  c = 0\n\n  # Set the learning rate\n  learning_rate = 0.05\n\n  # Set the number of iteration\n  num_iterations = 1000\n\n  # Perform gradient descent\n  for i in range(num_iterations):\n    # Calculate the cost\n    y_pred = m * x + c\n    cost = np.mean(np.square(y - y_pred))\n\n    # Calculate the derivatives of the cost function with respect to m and c\n    m_deriv = -2 * np.mean((y - y_pred) * x)\n    c_deriv = -2 * np.mean(y - y_pred)\n\n    # Update the model parameters\n    m -= m_deriv * learning_rate\n    c -= c_deriv * learning_rate\n\n  # Print the final model parameters\n  print('Coefficient:', m)\n  print('Intercept:', c) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\nfrom flask import Flask, request\n\n# Create Flask object\napp = Flask(__name__)\n\n# POST route for request\n@app.route('/', methods=['POST'])\ndef handlePost(): \n # Get data from request object\n data = request.get_json()\n\n # Manipulate data for visualization\n res = {\n 'dates': [],\n 'sales': []\n }\n for datum in data:\n res['dates'].append(datum['date'])\n res['sales'].append(datum['sales'])\n\n # Return data\n return json.dumps(res)\n\nif __name__ == '__main__':\n app.run(host='0.0.0.0', port=PORT) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\n# Create or open a database\nconn = sqlite3.connect('database.db')\n\n# Create a cursor\nc = conn.cursor()\n\n# Execute a query\nc.execute(\"SELECT * FROM `table_name`;\")\n\n# Get the result\nrows = c.fetchall()\n\n# Iterate over the result\nfor row in rows:\n print(row)\n\n# Close the connection\nc.close()\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_of_tuples = [(1, \"a\"), (2, \"b\"), (3, \"c\")]\n\nlist_1, list_2 = zip(*list_of_tuples)\n\nprint(list_1)\nprint(list_2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [14, 35, 42, 49, 56, 63, 70]\n\nfor element in my_list:\n if element % 7 == 0:\n print(element) \n  \n# Output:\n14\n \n42\n \n49\n \n56\n \n63\n \n70 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(numbers_list, number):\n    \"\"\"Implements a linear search for a given list of numbers and returns the index of the number if exists\"\"\"\n    \n    for index, element in enumerate(numbers_list):\n        if element == number:\n            return index\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_vowels(sentence):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for letter in sentence.lower():\n        if letter in vowels:\n            count += 1\n    return count\n\n\nsentence = input('Enter a sentence: ')\nvowel_count = count_vowels(sentence)\n\nprint('Number of vowels in the sentence:', vowel_count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def create_word_dict(words):\n word_dict = {}\n for word in words:\n  if word in word_dict:\n   word_dict[word] += 1\n  else:\n   word_dict[word] = 1\n return word_dict but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n    def __init__(self, val):\n        self.l = None\n        self.r = None\n        self.v = val\n\ndef tree_insert( node, val):\n    if node is None:\n        return Node(val)\n    if val < node.v:\n        node.l = tree_insert(node.l, val)\n    else:\n        node.r = tree_insert(node.r, val)\n\n    return node\n\ndef show_tree(node):\n    if node is None:\n        return\n    \n    show_tree(node.l)\n    \n    print(f\"{node.v}\")\n    \n    show_tree(node.r)\n\ndef initialize_tree():\n    root = None\n    set_values = [8, 3, 10, 1, 6, 14, 4, 7, 13]\n    for val in set_values:\n        root = tree_insert(root, val)\n    \n    return root\n\nroot = initialize_tree()\nshow_tree(root) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import xml.etree.ElementTree as ET\n\ndef parse_xml(xml_doc):\n  # Parse the XML document\n  tree = ET.parse(xml_doc)\n  # Get the root element\n  root = tree.getroot()\n  # Iterate through children\n  for child in root:\n    print(child.tag, child.attrib)\n\n# Function call \nparse_xml(\"sample.xml\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nGenerate a Python class that sorts the elements of a given list\n\"\"\"\n\nclass Sort:\n    def __init__(self, lst):\n        self.lst = lst\n\n    def bubble_sort(self):\n        length = len(self.lst)\n        for i in range(length):\n            for j in range(length - i -1):\n                if self.lst[j] > self.lst[j + 1]:\n                    self.lst[j], self.lst[j + 1] = self.lst[j + 1], self.lst[j]\n        return self.lst\n\nif __name__ == '__main__':\n    lst = [7, 3, 2, 9, 1]\n    s = Sort(lst)\n    print(s.bubble_sort()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_punctuations(string):\n punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n without_punct = \"\"\n for char in string:\n if char not in punctuations:\n without_punct = without_punct + char\n return without_punct\n\nstring = \"This is a sample sentence with !,:;? punctuation marks\";\nprint(remove_punctuations(string))\n\nOutput:\nThis is a sample sentence with  punctuation marks but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_sum(x, y):\n    '''This function calculates the sum of the following equation: 8x^2 + 5y^2 + 6x - 4y.'''\n    return 8*x**2 + 5*y**2 + 6*x - 4*y\n\n# Call the function\nresult = calculate_sum(2, 3)\n\n# Print the result\nprint(\"The sum is\", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_strings(words):\n    classified_words = {\n        'plants': [],\n        'animals': [],\n        'minerals': []\n    } \n    for word in words:\n        if word.lower() in ('plants', 'plant'):\n            classified_words['plants'].append(word)\n        elif word.lower() in ('animals', 'animal'):\n            classified_words['animals'].append(word)\n        elif word.lower() in ('minerals', 'mineral'):\n            classified_words['minerals'].append(word)\n    return classified_words but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: frequency_dict = {}\n\nfor letter in test_string:\n    if letter not in frequency_dict:\n        frequency_dict[letter] = 0\n    frequency_dict[letter] += 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Python code to rearrange the elements of a given array \n# such that the numbers are in descending order\ndef rearrange(arr): \n  \n    # start arranging the array \n    for i in range (len(arr)): \n        for j in range(i+1, len(arr)): \n      \n            # if the current term is greater than the next term \n            if arr[i] < arr[j]: \n                  \n                # swap the current and the next term \n                arr[i], arr[j]= arr[j], arr[i] \n  \n# Driver code \narr = [87, 76, 65, 54, 43, 32] \n  \n# rearranging the elements of the given array \nrearrange(arr) \n  \n# printing the rearranged array \nprint (\"The rearranged array is : \\n\", arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply(a, b): \n    return float(a * b) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(lst, target):\n    for i, val in enumerate(lst):\n        if val == target:\n            return i\n    return -1\n\n# Sample Test\nlst = [1, 2, 3, 4, 5]\ntarget = 3\nprint(linear_search(lst, target)) # 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countCommonChars(string1, string2):\n    count = 0\n    for i in string1: \n    \tif i in string2: \n    \t\tcount += 1\n    return count\n\ninput1 = \"computer\"\ninput2 = \"science\"\nprint(countCommonChars(input1, input2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def inverse(matrix):\n    # Determinant of matrix\n    det = matrix[0][0]*(matrix[1][1]*matrix[2][2] - matrix[2][1]*matrix[1][2]) - matrix[0][1]*(matrix[1][0]*matrix[2][2] - matrix[1][2]*matrix[2][0]) + matrix[0][2]*(matrix[1][0]*matrix[2][1] - matrix[1][1]*matrix[2][0])\n    \n    inv_matrix = [[None, None, None], [None, None, None], [None, None, None]]\n    inv_matrix[0][0] = (matrix[1][1]*matrix[2][2] - matrix[2][1]*matrix[1][2])/det\n    inv_matrix[0][1] = -(matrix[1][0]*matrix[2][2] - matrix[1][2]*matrix[2][0])/det\n    inv_matrix[0][2] = (matrix[1][0]*matrix[2][1] - matrix[2][0]*matrix[1][1])/det\n    inv_matrix[1][0] = -(matrix[0][1]*matrix[2][2] - matrix[0][2]*matrix[2][1])/det\n    inv_matrix[1][1] = (matrix[0][0]*matrix[2][2] - matrix[0][2]*matrix[2][0])/det\n    inv_matrix[1][2] = -(matrix[0][0]*matrix[2][1] - matrix[2][0]*matrix[0][1])/det\n    inv_matrix[2][0] = (matrix[0][1]*matrix[1][2] - matrix[0][2]*matrix[1][1])/det\n    inv_matrix[2][1] = -(matrix[0][0]*matrix[1][2] - matrix[1][0]*matrix[0][2])/det\n    inv_matrix[2][2] = (matrix[0][0]*matrix[1][1] - matrix[1][0]*matrix[0][1])/det\n\n    return inv_matrix but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom scipy.stats import describe\n\ndef generate_random_data(data):\n    # Calculate the descriptor statistics\n    desc = describe(data)\n    \n    # Generate random data from the same distribution\n    random_data = np.random.normal(loc=desc.mean, scale=np.sqrt(desc.variance), size=desc.nobs)\n    \n    return random_data but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.naive_bayes import MultinomialNB\n\ndata = pd.read_csv(\"reviews.csv\")\n\ntexts = data['Text']\nlabels = data['Label']\n\n# Create a vectorizer and expand the review text\nvectorizer = CountVectorizer()\nvectors = vectorizer.fit_transform(texts)\n\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(vectors, labels, test_size=0.20, random_state=42)\n\n# Build a Naive Bayes model\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n\n# Test the model and print the accuracy\naccuracy = model.score(X_test, y_test)\nprint(\"Model Accuracy:\", accuracy)\n\n# Use the model to predict the sentiment for a new review\nreview = \"This movie is amazing!\"\nprediction = model.predict(vectorizer.transform([review]))\nprint(\"Predicted sentiment:\", prediction[0]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def power(num, pow):\n return num**pow but is not the same. just give one example and only return the code."}
