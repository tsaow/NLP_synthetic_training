{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_hex_color():\n    return '#' +  ''.join([random.choice('0123456789ABCDEF') for x in range(6)])\n\nprint(generate_hex_color()) # Ex: #C2C30F but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef compute_area_of_the_circle(radius):\n    return math.pi * (radius**2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://example.com/blog\"\n\nr = requests.get(url)\nhtml = r.text\n\nsoup = BeautifulSoup(html, 'html.parser')\ntitles = soup.find_all('h2')\n\nfor title in titles:\n print(title.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_by_seven(nums):\n    filtered_nums = [num for num in nums if num % 7 == 0]\n    return filtered_nums\n\nresult = filter_by_seven([14, 21, 28, 35, 42])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longestWord(sentence):\n    words = sentence.split(\" \")\n    max_length = 0\n    longest_word = \"\"\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n            longest_word = word\n    return longest_word\n\nprint(longestWord(\"This is the longest sentence.\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_search(arr, x):\n n = len(arr)\n \n # Sort the given array in ascending order\n arr.sort()\n \n # print all elements\n for i in range(n):\n print(arr[i], end = \" \")\n \n #binary search\n start = 0\n end = n-1\n \n while start <= end:\n    mid = (start + end) // 2\n    if x == arr[mid]:\n return mid \n elif x > arr[mid]:\n start = mid + 1\n else:\n end = mid - 1\n \n return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def div_by_7_not_5(start, end):\n    result = []\n    for num in range(start, end + 1):\n        if (num % 7 == 0) and (num % 5 != 0):\n            result.append(num)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import ast\nimport logging\n\nfrom pygount import SourceAnalysis\n\n# Logging configuration\nlogging.basicConfig(level=logging.INFO)\n\n# Input code\ncode = \"\"\"\ndef find_bugs(code):\n    \n    analyzed_code = SourceAnalysis.from_string(language='python', text=code)\n    bugs = []\n\n    for function in code: \n        if 'fopen' in function.body:\n            bugs.append('Got a potential vulnerability!')\n\n    return bugs\n\"\"\"\n\n# Parsed syntax tree\ntree = ast.parse(code)\n\n# Find all functions\nfor node in ast.walk(tree):\n    if isinstance(node, ast.FunctionDef):\n        # Get the code for the function\n        function_code = ast.get_source_segment(code, node)\n        bugs = find_bugs(function_code)\n        for bug in bugs:\n            logging.warning(bug) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(s1, s2):\n    s1 = s1.lower()\n    s2 = s2.lower()\n    if len(s1) != len(s2):\n        return False\n    for c in s1:\n        if c not in s2:\n            return False\n    for c in s2:\n        if c not in s1:\n            return False\n    return True\n\ndef get_anagrams(string):\n    anagrams = []\n    for i in range(len(string)):\n        for j in range(len(string)):\n            if i == j:\n                continue\n            s1 = string[i:j+1]\n            s2 = string[:i] + string[j+1:]\n            if is_anagram(s1, s2):\n                anagrams.append(s2)\n    return anagrams but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def permute(nums):\n    if len(nums) <= 1:\n        return [nums]\n\n    permutations = []\n    for i in range(len(nums)):\n        v = nums[i]\n        left = nums[:i] + nums[i+1:]\n        subpermute = permute(left)\n        for item in subpermute:\n            permutations.append([v] + item)\n    return permutations\n\ndef descending_order(nums):\n    permutations = permute(nums)\n    best_permutation = []\n    for permutation in permutations:\n        if is_descending_order(permutation):\n            best_permutation = permutation\n    return best_permutation\n\ndef is_descending_order(arr):\n    for i in range(1, len(arr)):\n        if arr[i-1] < arr[i]:\n            return False\n    return True\n\nresult = descending_order([4,7,2,1])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def tokenize(s):\n  tokens = []\n  current_token = \"\"\n  for c in s:\n    if c.isspace():\n      tokens.append(current_token)\n      current_token = \"\"\n    else:\n      current_token += c\n  if current_token:\n    tokens.append(current_token)\n  return tokens but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_of_numbers = input(\"Please enter a list of numbers: \").split()\nlist_of_numbers = [int(x) for x in list_of_numbers] \n\nmin_number = min(list_of_numbers)\nprint(\"The smallest number is:\", min_number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_user_details(language):\n    user_data = {}\n    # read the data from a file\n    with open(f'data/{language}_users.csv', 'r') as csvfile:\n        reader = csv.reader(csvfile)\n        for row in reader:\n            user_data[row[0]] = row[1:]\n    return user_data\n\nusers = get_user_details('en') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def squared_list(list):\n    squared_list = []\n    for num in list:\n        squared_list.append(num **2)\n    return squared_list\n\nlist = [1, 2, 3, 4, 5, 6]\nprint(squared_list(list)) # Outputs [1, 4, 9, 16, 25, 36] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_word(string, word, replacement_word):\n    return string.replace(word, replacement_word)\n\nprint(replace_word(\"Hello hello world!\", \"hello\", \"welcome\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maxSubarraySum(arr): \n    max_so_far = 0\n    max_ending_here = 0\n  \n    for i in range(0, len(arr)): \n        max_ending_here += arr[i] \n        if max_ending_here < 0: \n            max_ending_here = 0\n        if (max_so_far < max_ending_here): \n            max_so_far = max_ending_here \n    return max_so_far but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pegjs\n\nif __name__ == \"__main__\":\n    parser = pegjs.generate('''\n        Expression   \n            = Sequence ( Operator Sequence )* \n        Sequence       \n            = \"(\" Expression \")\" \n            / Number \n        Operator\n            = Add / Subtract / Multiply / Divide \n        Add\n            = \"+\" \n        Subtract\n            = \"-\" \n        Multiply\n            = \"*\" \n        Divide\n            = \"/\" \n        Number\n            = [0-9]+\n    ''') \n    result = parser.parse('2 * (3 + 4)')\n    print(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def ascii_art(inputText):\n  # Create dictionary\n  ascii_dict = {\n    'A' : '    _____  ',\n    'B' : ' \\/3_  3_\\/',\n    'C' : '  (__/ \\__)',\n    'D' : ' \\/2_  2_\\/',\n    'E' : '  (__/ \\__)',\n    'F' : '  (___/ \\__)',\n    'G' : '  (__&_/ \\_)',\n    'H' : '   //\\/ \\\\\\\\',\n    'I' : '    ---/ \\_',\n    'J' : '(___/ \\___)',\n    'K' : '\\\\__- .- \\_/',\n    'L' : '(__/ \\___)',\n    'M' : '   =\\ \\\\/ /=',\n    'N' : '   =5 \\/ 5=',\n    'O' : '  (___/ \\__)',\n    'P' : ' \\(___/ \\__)',\n    'Q' : ' (___/ \\___)',\n    'R' : ' \\(___/ \\_/',\n    'S' : '(__/ \\___)',\n    'T' : ' (___/ \\___)',\n    'U' : '  (__/ \\___)',\n    'V' : '   \\ \\/ /',\n    'W' : '    \\\\/ | \\\\/',\n    'X' : '     \\/ |',\n    'Y' : '     \\/ |',\n    'Z' : '(__/ \\___)'\n  }\n\n  pic = \"\"\n  for letter in inputText:\n    pic = pic + ascii_dict[letter.upper()] + \"\\n\"\n    \n  return pic\n\nprint(ascii_art(\"Hello World!\")) \n\n# outputs: \n'''\n    _____      (___/ \\___)\n \\/3_  3_\\/   (__/ \\___)\n  (__/ \\__)   (___/ \\___)\n \\/2_  2_\\/    \\ \\/ /\n  (__/ \\__)     \\/ |\n  (___/ \\___)  (__/ \\___)\n''' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: primes = []\n\nfor num in range(2,101):\n for i in range(2,num):\n if (num % i) == 0:\n break\n else:\n primes.append(num)\n\nprint(primes) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def simple_interest(p,r,t): \n  return (p * r * t)/100 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef minimize(x):\n  return np.power(x,4) + 7 * np.power(x,3) + 6 * np.power(x,2) - 6 * x\n\ndef optimize(f, x):\n  best_x = x \n  best_val = f(x)\n\n  while True:\n    new_x = x - 1e-3 \n    new_val = f(new_x)\n    if new_val < best_val: \n      best_x = new_x \n      best_val = new_val \n      x = new_x\n    else:\n      break\n  return best_x, best_val\n\nx = 0 \nx_min, val_min = optimize(minimize, x)\nprint(f'Minimum of function \"f(x)\" is at x={x_min}, with value {val_min}.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(num):\n\tif num == 1 or num == 0:\n\t\treturn 1\n\telse:\n\t\treturn num * factorial(num-1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef random_select(arr, k):\n    new_arr = random.sample(arr,k)\n    return new_arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk \nimport random \nfrom nltk.corpus import movie_reviews \n\n# Generate a set of documents\ndocuments = [(list(movie_reviews.words(fileid)), category) \n             for category in movie_reviews.categories() \n             for fileid in movie_reviews.fileids(category)]\n\n# Shuffle the documents\nrandom.shuffle(documents)\n\n# Generate features\nall_words = []\nfor w in movie_reviews.words():\n   all_words.append(w.lower())\n\nall_words = nltk.FreqDist(all_words) \n\nword_features = list(all_words.keys())[:3000] \n\n# Function to create a dictionary of features for each review in the list documents\n# The keys are the words in word_features\n# The values of each key are either true or false for whether that feature appears in the review \ndef find_features(document):\n features = {}\n words = set(document)\n for w in word_features:\n     features[w] = (w in words)\n \n return features\n\n#Find the features for all the documents\nfeaturesets = [(find_features(rev), category) for (rev, category) in documents] \n\n#Create the training set using the featuresets\ntraining_set = featuresets[:1900] \n\n# Create the testing set using the featuresets\ntesting_set = featuresets[1900:] \n\n# Train the classifier\nclassifier = nltk.NaiveBayesClassifier.train(training_set)\n\n#Test the classifier and print the accuracy\nprint(\"Classifier accuracy percent:\",(nltk.classify.accuracy(classifier, testing_set))*100) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class StudentRecord:\n    def __init__(self, student_id, name, age, course):\n        self.student_id = student_id\n        self.name = name\n        self.age = age\n        self.course = course\n \n    def get_student_records(self):\n        return {\n            'student_id': self.student_id,\n            'name': self.name,\n            'age': self.age,\n            'course': self.course\n        }\n \n    def set_student_records(self, updates):\n        self.student_id = updates.get('student_id', self.student_id)\n        self.name = updates.get('name', self.name)\n        self.age = updates.get('age', self.age)\n        self.course = updates.get('course', self.course) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup \n \nurl = 'https://example.com'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n \nfor content in soup.find_all('div', class_='content'):\n print(content.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef random_number_generator(start, end):\n    return random.randint(start, end) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findLongestSubstring(inputString):\n longest = 0\n longestSubstring = ''\n \n for i in range(len(inputString)):\n current = inputString[i]\n count = 1\n currentSubstring = current\n \n for j in range(i + 1, len(inputString)):\n if current == inputString[j]:\n count += 1\n currentSubstring += inputString[j]\n else:\n break\n \n if count > longest:\n longest = count\n longestSubstring = currentSubstring\n \n return longestSubstring\n\nlongestSubstring = findLongestSubstring('abcdabca')\nprint(longestSubstring) # Output: 'abca' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.neighbors import KNeighborsClassifier\n\n# Initialize KNN model\nknn_model = KNeighborsClassifier(n_neighbors=5)\n\n# Fit the model\nknn_model.fit(X, y)\n\n# Predict the classes\ny_pred = knn_model.predict(X) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 30, 2):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Numbers:\n    def __init__(self, num1, num2):\n        self.num1 = num1\n        self.num2 = num2\n\n    def compare(self):\n        if self.num1 > self.num2:\n            return \"Number1 is larger than Number2\"\n        elif self.num1 < self.num2:\n            return \"Number2 is larger than Number1\"\n        else:\n            return \"Number1 is equal to Number2\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort(arr): \n    n = len(arr) \n\n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1]: \n                arr[j], arr[j+1] = arr[j+1], arr[j] # Buggy code, swap the elements\n\narr = [64, 34, 25, 12, 22, 11, 90] \nsort(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [\"apple\", \"banana\", \"lemon\", \"mango\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort(list):\n  for i in range(len(list)):\n    min_idx = i\n    for j in range(i+1, len(list)):\n      if list[min_idx] > list[j]:\n        min_idx = j\n  list[i], list[min_idx] = list[min_idx], list[i]\n\n  return list\n\nlist = [3,7,1,4,9,5]\nsorted_list = sort(list)\n\nprint(sorted_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def normalize(nums):\n  min_num = min(nums)\n  max_num = max(nums)\n\n  for i, n in enumerate(nums):\n    if n > min_num and n < max_num:\n      if n - min_num > max_num - n:\n        nums[i] = max_num\n      else:\n        nums[i] = min_num\n\n  return nums\n\nprint(normalize([5, 4, 3, 4, 8, 6, 7]))\n# [5, 4, 3, 5, 8, 6, 7] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def last_element(list):\n    \"\"\"Find the last element of a given list.\"\"\"\n    return list[-1]\n\n# Usage Example \nlist = [1, 2, 3, 4, 5]\nlast_element = last_element(list)\nprint(last_element)  # 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def recommend_movies(movies, user_ratings):\n recommended_movies = []\n for movie in movies:\n  if movie not in user_ratings:\n   if movies[movie] > 8.5:\n     recommended_movies.append(movie)\n return recommended_movies\n\nresult = recommend_movies(movies, user_ratings)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create a list of prime numbers between 1 and 100\n\ndef prime_nums():\n    lst = [] # declare empty list\n    # Iterate through the numbers from 2 to 100\n    for nums in range(2, 101):\n        for i in range(2, nums//2+1):\n            # If any number is divisible then skip that number\n            if (nums % i) == 0:\n                break\n        else:\n            # If iteration is successful then number is prime so add in the list\n            lst.append(nums)\n    return lst\n \n# Call the function\nprime_numbers = prime_nums()\n \n# Print the list of prime numbers\nprint(prime_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_password():\n    pass_characters = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(pass_characters) for i in range(8))\n\nprint(generate_password())\n\n//Output\nsd.V%T8d1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string_list = [\"Hello\", \"world\", \"how\", \"are\", \"you\"] \n\n# Optimized version \nstring_list = [s.upper() for s in string_list] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_array(arr):\n n = len(arr)\n \n # Iterate through the array\n for i in range(n):\n \n # Find the minimum element \n min_ind = i\n for j in range(i + 1, n):\n if arr[min_ind] > arr[j]:\n min_ind = j\n \n # Swap the found minimum element with the first element \n arr[i], arr[min_ind] = arr[min_ind], arr[i]\n\n# Driver code to test above \narr = [6,5,3,1,8,7,2,4]\nsort_array(arr)\n\nprint (\"Sorted array is:\")\nfor i in range(n):\n print (\"%d\" %arr[i]), but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nClass for binary trees in Python.\n\"\"\"\n\nclass BinaryTree:\n    def __init__(self, root):\n        self.key = root\n        self.left = None\n        self.right = None\n\n    def insert_left(self, new_node):\n        if self.left is None:\n            self.left = BinaryTree(new_node)\n        else:\n            t = BinaryTree(new_node)\n            t.left = self.left\n            self.left = t\n\n    def insert_right(self, new_node):\n        if self.right is None:\n            self.right = BinaryTree(new_node)\n        else:\n            t = BinaryTree(new_node)\n            t.right = self.right\n            self.right = t\n\n    def get_right_child(self):\n        return self.right\n\n    def get_left_child(self):\n        return self.left\n\n    def set_root_val(self, obj):\n        self.key = obj\n\n    def get_root_val(self):\n        return self.key but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: dictionary = {'a': 1, 'b': 2, 'c': 3, 'd': 3}\nvalue = 3\n\ndictionary = {key:val for key, val in dictionary.items() if val != value}\n\nprint(dictionary) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import base64\n\ndef encode_base64(string):\n    encoded_bytes = base64.b64encode(string.encode(\"utf-8\"))\n    return encoded_bytes.decode(\"utf-8\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def my_func(x): \n    x += x << 1  # 2x faster than adding 1\n    for i in range(1000000 // 2):  # divide loop by 2\n        x += x << 2 \n    return x  # no extra operation needed on return value as it is already doubled twice already. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Function for palindrome check\ndef isPalindrome(string): \n    # Initializing left and right pointer \n    left = 0\n    right = len(string) - 1\n  \n    # run till left and right pointer are same\n    while left < right: \n        # if both characters at left and right pointers are same\n        if string[left] == string[right]:\n            left += 1\n            right -= 1\n  \n        # if the characters are not equal, return False \n        else: \n            return False\n  \n    # if the loop has ended without break, the string is a palindrome \n    return True\n\n#Inputting a string\nstring = 'abccb'\n\n#Check the string for palindrome\nif (isPalindrome(string)): \n    print(\"Input string is palindrome\")\nelse: \n    print(\"Input string is not a palindrome\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk.classify import NaiveBayesClassifier\n\n# Create a function to classify the sentence\ndef classify_sentence(sentence):\n    # Create a list of words derived from the sentence\n    words = word_tokenize(sentence)\n\n    # Collect words and their corresponding part of speech tags\n    words_tags = nltk.pos_tag(words)\n    \n    # Create lists to contain nouns, verbs, adjectives and adverbs\n    nouns = []\n    verbs = []\n    adjectives = []\n    adverbs = []\n\n    # Iterate through each word and tag in the sentence\n    for word, tag in words_tags:\n        if tag in ['NN', 'NNS', 'NNP', 'NNPS']:\n            nouns.append(word)\n        elif tag in ['VB', 'VBD', 'VBG', 'VBN', 'VBP', 'VBZ']:\n            verbs.append(word)\n        elif tag in ['JJ', 'JJR', 'JJS']:\n            adjectives.append(word)\n        elif tag in ['RB', 'RBR', 'RBS']:\n            adverbs.append(word)\n\n    # Return a dictionary containing the detected words\n    return {\n        'nouns': nouns,\n        'verbs': verbs,\n        'adjectives': adjectives,\n        'adverbs': adverbs\n    }\n\nsentence = 'The dog barked at the cat.'\n\n# Classify the sentence\nclassified_sentence = classify_sentence(sentence)\n\n# Print the results\nprint(classified_sentence)\n\n# Output:\n# {'nouns': ['dog', 'cat'], 'verbs': ['barked'], 'adjectives': [], 'adverbs': []} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\ndef get_stock_price(symbol):\n url = \"https://finance.yahoo.com/quote/\" + symbol\n req = requests.get(url)\n data = req.json()\n return data['regularMarketPrice'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Shape:\n  def __init__(self, sides):\n    self.sides = sides\n  \n  def isValid(self):\n    if len(self.sides) >= 3: \n      return True\n    else:\n      return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [1, 2, 3, 4, 5, 6]\ntotal = sum(arr) # use sum() to sum up all elements of the array in one line but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_valid_identifier(string):\n  if string.isidentifier():\n    return True\n  else:\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_common_word(string):\n    string_list = string.split()\n    word_dict = {}\n    for word in string_list:\n        word_dict[word] = word_dict.get(word, 0) + 1\n    max_count = 0\n    most_common_word = None\n    for word, count in word_dict.items():\n        if count > max_count:\n            max_count = count\n            most_common_word = word\n    return most_common_word\n\nprint(most_common_word(string))\n# Output: the but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create a dictionary to record the frequency of words in a given string\n\n# Split the string into words\nwords = \"this is a test string\".strip().split()\n\n# We use a dictionary to store the frequency of the words\nfreq = {}\n\n# Iterate through the words and count their frequency\nfor word in words:\n    if word in freq:\n        freq[word] += 1\n    else:\n        freq[word] = 1\n\nprint(freq) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_spaces(my_string):\n    return my_string.replace(' ', '')\n\n#test\nmy_string = \"This is a string with spaces\"\nno_spaces_string = remove_spaces(my_string)\nprint(no_spaces_string) # Output: Thisisastringwithspaces but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def delete_odd_numbers(arr):\n  new_arr = []\n  for i in arr:\n    if i % 2 != 0:\n      continue\n    else:\n      new_arr.append(i)\n  return new_arr\n\narr = [1, 2, 3, 4, 5, 6]\nprint(delete_odd_numbers(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def hello():\n name = input('What is your name? ')\n print(f'Hello {name}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # pylint: disable=no-name-in-module,import-error\nimport os\nimport urllib2\nimport subprocess\nimport sys\nimport shutil\nimport glob\nimport tarfile\nimport multiprocessing\nimport platform\n\ntry:\n    from setuptools import setup\n    from setuptools import find_packages\n    packages = find_packages()\nexcept ImportError:\n    from distutils.core import setup\n    packages = [x.strip('./').replace('/','.') for x in os.popen('find -name \"__init__.py\" | xargs -n1 dirname').read().strip().split('\\n')]\n\nfrom distutils.util import get_platform\nfrom distutils.errors import LibError\nfrom distutils.command.build import build as _build\n\nif sys.platform in ('win32', 'cygwin'):\n    LIBRARY_FILE = 'pyvex.dll'\n    STATIC_LIBRARY_FILE = 'pyvex.lib'\nelif sys.platform == 'darwin':\n    LIBRARY_FILE = \"libpyvex.dylib\"\n    STATIC_LIBRARY_FILE = 'libpyvex.a'\nelse:\n    LIBRARY_FILE = \"libpyvex.so\"\n    STATIC_LIBRARY_FILE = 'libpyvex.a'\n\n\nVEX_LIB_NAME = \"vex\" # can also be vex-amd64-linux\nVEX_PATH = os.path.join('..', 'vex')\n\nif not os.path.exists(VEX_PATH):\n    VEX_URL = 'https://github.com/angr/vex/archive/master.tar.gz'\n    with open('master.tar.gz', 'wb') as v:\n        v.write(urllib2.urlopen(VEX_URL).read())\n    with tarfile.open('master.tar.gz') as tar:\n        tar.extractall()\n    VEX_PATH='vex-master'\n\ndef _build_vex():\n    e = os.environ.copy()\n    e['MULTIARCH'] = '1'\n    e['DEBUG'] = '1'\n\n    cmd1 = ['nmake', '/f', 'Makefile-msvc', 'all']\n    cmd2 = ['make', '-f', 'Makefile-gcc', '-j', str(multiprocessing.cpu_count()), 'all']\n    for cmd in (cmd1, cmd2):\n        try:\n            if subprocess.call(cmd, cwd=VEX_PATH, env=e) == 0:\n                break\n        except OSError:\n            continue\n    else:\n        raise LibError(\"Unable to build libVEX.\")\n\ndef _build_pyvex():\n    e = os.environ.copy()\n    e['VEX_LIB_PATH'] = os.path.join('..', VEX_PATH)\n    e['VEX_INCLUDE_PATH'] = os.path.join('..', VEX_PATH, 'pub')\n    e['VEX_LIB_FILE'] = os.path.join('..', VEX_PATH, 'libvex.lib')\n\n    cmd1 = ['nmake', '/f', 'Makefile-msvc']\n    cmd2 = ['make', '-j', str(multiprocessing.cpu_count())]\n    for cmd in (cmd1, cmd2):\n        try:\n            if subprocess.call(cmd, cwd='pyvex_c', env=e) == 0:\n                break\n        except OSError as err:\n            continue\n    else:\n        raise LibError(\"Unable to build libpyvex.\")\n\ndef _shuffle_files():\n    shutil.rmtree('pyvex/lib', ignore_errors=True)\n    shutil.rmtree('pyvex/include', ignore_errors=True)\n    os.mkdir('pyvex/lib')\n    os.mkdir('pyvex/include')\n\n    shutil.copy(os.path.join('pyvex_c', LIBRARY_FILE), 'pyvex/lib')\n    shutil.copy(os.path.join('pyvex_c', STATIC_LIBRARY_FILE), 'pyvex/lib')\n    shutil.copy('pyvex_c/pyvex.h', 'pyvex/include')\n    for f in glob.glob(os.path.join(VEX_PATH, 'pub', '*')):\n        shutil.copy(f, 'pyvex/include')\n\ndef _build_ffi():\n    import make_ffi\n    try:\n        make_ffi.doit(os.path.join(VEX_PATH,'pub'))\n    except Exception as e:\n        print repr(e)\n        raise\n\nclass build(_build):\n    def run(self):\n        self.execute(_build_vex, (), msg=\"Building libVEX\")\n        self.execute(_build_pyvex, (), msg=\"Building libpyvex\")\n        self.execute(_shuffle_files, (), msg=\"Copying libraries and headers\")\n        self.execute(_build_ffi, (), msg=\"Creating CFFI defs file\")\n        _build.run(self)\ncmdclass = { 'build': build }\n\ntry:\n    from setuptools.command.develop import develop as _develop\n    from setuptools.command.bdist_egg import bdist_egg as _bdist_egg\n    class develop(_develop):\n        def run(self):\n            self.execute(_build_vex, (), msg=\"Building libVEX\")\n            self.execute(_build_pyvex, (), msg=\"Building libpyvex\")\n            self.execute(_shuffle_files, (), msg=\"Copying libraries and headers\")\n            self.execute(_build_ffi, (), msg=\"Creating CFFI defs file\")\n            _develop.run(self)\n    cmdclass['develop'] = develop\n\n    class bdist_egg(_bdist_egg):\n        def run(self):\n            self.run_command('build')\n            _bdist_egg.run(self)\n    cmdclass['bdist_egg'] = bdist_egg\nexcept ImportError:\n    print \"Proper 'develop' support unavailable.\"\n\nif 'bdist_wheel' in sys.argv and '--plat-name' not in sys.argv:\n    sys.argv.append('--plat-name')\n    name = get_platform()\n    if 'linux' in name:\n        # linux_* platform tags are disallowed because the python ecosystem is fubar\n        # linux builds should be built in the centos 5 vm for maximum compatibility\n        sys.argv.append('manylinux1_' + platform.machine())\n    else:\n        # https://www.python.org/dev/peps/pep-0425/\n        sys.argv.append(name.replace('.', '_').replace('-', '_'))\n\nsetup(\n    name=\"pyvex\", version='6.7.3.26', description=\"A Python interface to libVEX and VEX IR.\",\n    packages=['pyvex', 'pyvex.lift', 'pyvex.lift.util'],\n    cmdclass=cmdclass,\n    install_requires=[ 'pycparser', 'cffi>=1.0.3', 'archinfo' ],\n    setup_requires=[ 'pycparser', 'cffi>=1.0.3' ],\n    include_package_data=True,\n    package_data={\n        'pyvex': ['lib/*', 'include/*']\n    }\n)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_two_numbers(a, b):\n return a + b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\nmessages = []  # list to store customer messages\n\n@app.route('/messages', methods=['POST', 'GET'])\ndef manage_messages():\n    '''API endpoint to store and retrieve customer messages'''\n    if request.method == 'POST':  # storing customer message\n        customer_message = request.get_json()\n        messages.append(customer_message)\n        return jsonify(message='Message successfully stored'), 200\n\n    elif request.method == 'GET':  # retrieving customer messages\n        return jsonify(messages=messages), 200 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_smallest(arr):\n    smallest = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < smallest:\n            smallest = arr[i]\n    return smallest but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Code\nnum_reviews = len(reviews)\nnum_positive_reviews = 0\n\nfor review in reviews:\n    if 'great' in review:\n        num_positive_reviews +=1\n\nrating = num_positive_reviews / num_reviews #Rating  \nprint(rating) #Prints the rating but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_valid_spectrum(spectrum):\n    m = spectrum[0]\n    for n in spectrum[1:]:\n        if n - m not in [1, 2]:\n            return False\n        m = n\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_string_values(my_dict):\n     count = 0\n     for key, value in my_dict.items():\n         if isinstance(value, str):\n             count += 1\n     return count\n \nmy_dict = {\n    \"name\": \"John Smith\",\n    \"age\": 30,\n    \"gender\": \"Male\",\n    \"is_ married\": True\n}\n\n# Count number of string values\nresult = count_string_values(my_dict)\n\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mergeSortedLists(list1, list2):\n \n # Create variables\n result = []\n list1_index, list2_index = 0, 0\n \n # Iterate over both lists\n while list1_index < len(list1) and list2_index < len(list2):\n   # Compare and add the lower value to the result\n   if list1[list1_index] <= list2[list2_index]:\n     result.append(list1[list1_index])\n     list1_index += 1\n   else:\n     result.append(list2[list2_index])\n     list2_index += 1\n \n # Add any remainder items from the two lists\n result.extend(list1[list1_index:])\n result.extend(list2[list2_index:])\n \n return result\n \nlist1 = [1, 3, 5, 7]\nlist2 = [2, 4, 6, 8]\n \nprint(mergeSortedLists(list1, list2))\n# Output: [1, 2, 3, 4, 5, 6, 7, 8] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPalindrome(text):\n    n = len(text)\n    for i in range(n // 2):\n        if text[i] != text[n - i - 1]:\n            return False\n    return True\n\nprint(isPalindrome('noon')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_longest_common_prefix(strings):\n first_str = strings[0]\n longest_prefix = \"\"\n for i in range(len(first_str)):\n  current_prefix = first_str[:i]\n  flag = True\n  for string in strings[1:]:\n   if not string.startswith(current_prefix):\n    flag = False\n    break\n  if flag:\n   longest_prefix = current_prefix\n return longest_prefix but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Find Maximum and Minimum using python \ndef maxMin(list):\n    max = list[0]\n    min = list[0]\n    for i in range(len(list)): \n        if list[i] > max: \n            max = list[i] \n        if list[i] < min: \n            min = list[i] \n    return max, min \n  \n# Main Program \nlist = [5, 2, 8, 9, 3, 6, 1] \nmaximum, minimum = maxMin(list) \n  \nprint(\"Maximum number is: {}\".format(maximum)) \nprint(\"Minimum number is: {}\".format(minimum)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password(): \n    chars = string.ascii_lowercase + string.digits + string.ascii_uppercase\n    size = 8\n    return ''.join(random.choice(chars) for x in range(size))\n\npassword = generate_password()\nprint(password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_text(url):\n    page = requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n    text = soup.find_all(text=True)\n    return ' '.join(text).strip() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n# Copyright (C) 2014-2017 Shea G Craig\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\"\"\"queryset.py\n\nClass that adds some extra functionality to a basic list. Used as the\nresult of all queries in python-jss.\n\"\"\"\n\n\nfrom __future__ import absolute_import\nfrom collections import defaultdict\ntry:\n    import cPickle  # Python 2.X\nexcept ImportError:\n    import _pickle as cPickle  # Python 3+\nimport datetime\nimport os\n\nfrom .jssobject import DATE_FMT, Identity\n\n\nSTR_FMT = \"{0:>{1}} | {2:>{3}} | {4:>{5}}\"\n\n\nclass QuerySet(list):\n    \"\"\"A list style collection of JSSObjects.\n\n    Listing operations retrieve minimal or overview information for most\n    object types. For example, we may want to see all the Computers on\n    the JSS but that does not mean we want to do a full object GET for\n    each one.\n\n    QuerySets hold instances of a single type of JSSObject, and use the\n    python list API, while adding some extra helper-methods on top.\n    \"\"\"\n\n    def __init__(self, objects):\n        \"\"\"Construct a list of JSSObjects.\n\n        Args:\n            objects (sequence of JSSObjects):\n                Sequences must be of a single class.\n        \"\"\"\n        if objects and not len({i.__class__ for i in objects}) == 1:\n            raise ValueError\n        super(QuerySet, self).__init__(objects)\n        self.sort()\n        self.contained_class = objects[0].__class__ if objects else None\n\n    def __str__(self):\n        \"\"\"Make data human readable.\"\"\"\n        # Make ID, Name first, no matter what.\n        sort_keys = [\"id\", \"name\"]\n        if self:\n            sort_keys.extend([\n                key for key in self[0]._basic_identity.keys() if\n                key not in sort_keys])\n\n        # Build a dict of max lengths per column for table output.\n        lengths = defaultdict(int)\n        for item in self:\n            for key in sort_keys:\n                val = item._basic_identity[key] or \"\"\n                length = max(len(key), len(val))\n                if length > lengths[key]:\n                    lengths[key] = length\n\n        # Build a format string for row output.\n        format_strings = []\n        for key in sort_keys:\n            length = lengths[key]\n            format_strings.append(\"{{data[{}]:>{}}}\".format(key, length))\n\n        cached = 'cached'\n        cached_format = '| {{cached:>{}}} |'.format(len(cached))\n\n        fmt = \"| \" + \" | \".join(format_strings) + cached_format\n\n        # Begin building output with header lines.\n        # Contained class can be None\n        contained_name = self.contained_class.__name__ if self.contained_class is not None else \"Empty\"\n        results = [\"{} QuerySet\".format(contained_name)]\n        headers = {key: key for key in lengths}\n        header_line = fmt.format(data=headers, cached=\"cached\")\n        bar = len(header_line) * '-'\n        results.extend([bar, header_line, bar])\n\n        str_cached = (\n            lambda i: str(i.cached) if isinstance(i.cached, bool) else 'True')\n\n        table = [\n            fmt.format(data=item._basic_identity, cached=str_cached(item)) for\n            item in self]\n        results.extend(table)\n\n        results.append(bar)\n        return \"\\n\".join(results)\n\n    def __repr__(self):\n        \"\"\"Make data human readable.\"\"\"\n        return \"QuerySet({})\".format(super(QuerySet, self).__repr__())\n\n    def sort(self, **kwargs):\n        \"\"\"Sort list elements by ID.\n        \"\"\"\n        super(QuerySet, self).sort(key=lambda k: int(k.id))\n\n    def sort_by_name(self):\n        \"\"\"Sort list elements by name.\"\"\"\n        super(QuerySet, self).sort(key=lambda k: k.name.upper())\n\n    def retrieve_all(self):\n        \"\"\"Tell each contained object to retrieve its data from the JSS\n\n        This can take a long time given a large number of objects,\n        and depending on the size of each object.\n\n        Returns:\n            self (QuerySet) to allow method chaining.\n        \"\"\"\n        for obj in self:\n            if not obj.cached:\n                obj.retrieve()\n\n        return self\n\n    def save_all(self):\n        \"\"\"Tell each contained object to save its data to the JSS\n\n        This can take a long time given a large number of objects,\n        and depending on the size of each object.\n\n        Returns:\n            self (QuerySet) to allow method chaining.\n        \"\"\"\n        for obj in self:\n            obj.save()\n\n        return self\n\n    def invalidate(self):\n        \"\"\"Clear the cache datetime for all contents.\n\n        This causes objects to retrieve their data again when accessed.\n        \"\"\"\n        for i in self: i.cached = False\n\n    def names(self):\n        \"\"\"Return a generator of contents names\"\"\"\n        return (item.name for item in self)\n\n    def ids(self):\n        \"\"\"Return a generator of contents ids\"\"\"\n        return (item.id for item in self)\n\n    @classmethod\n    def from_response(cls, obj_class, response, jss=None, **kwargs):\n        \"\"\"Build a QuerySet from a listing Response.\"\"\"\n        response_objects = (\n            i for i in response if i is not None and i.tag != \"size\")\n\n        dicts = (\n            {child.tag: child.text for child in item} for item in\n            response_objects)\n        identities = (Identity(d) for d in dicts)\n\n        objects = [obj_class(jss, data=i, **kwargs) for i in identities]\n\n        return cls(objects)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import psycopg2\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\ndef get_data_from_db(table_name):\n    \n    # connect to the database\n    connection = psycopg2.connect(\n        user='username',\n        password='password',\n        host='host',\n        port='5432',\n        database='testdb'\n    )\n    cursor = connection.cursor()\n    \n    # retrieve data from the table\n    sql = f\"\"\"SELECT column1, column2, column3 FROM {table_name}\"\"\"\n    cursor.execute(sql)\n    records = cursor.fetchall()\n    \n    # close the connection\n    connection.close()\n\n    return records\n\n@app.route('/data/<table_name>', methods=['GET'])\ndef get_data(table_name):\n    # retrieve data from the db\n    data = get_data_from_db(table_name)\n\n    # build response\n    return jsonify({'data': data})\n\nif __name__ == '__main__':\n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def five_divisible():\n  i = 0\n  my_list = []\n  while i < 10:\n    if i % 5 == 0:\n      my_list.append(i)\n    i = i + 1\n  return my_list\n\nprint(five_divisible()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: d = {'Name': 'John', 'Age': 20, 'Location': 'New York'}\n\ndef print_dict(d):\n    formatted_str = ''\n    for key, value in d.items():\n        if formatted_str != '':\n            formatted_str += ', '\n        formatted_str += '{}={}'.format(key, value)\n    print(formatted_str)\n\nprint_dict(d) # Output: Name=John, Age=20, Location=New York but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def lcs(s1, s2):\n m = len(s1)\n n = len(s2)\n L = [[0] * (n+1) for _ in range(m+1)]\n \n for i in range(m+1):\n for j in range(n+1):\n if i == 0 or j == 0:\n L[i][j] = 0\n elif s1[i-1] == s2[j-1]:\n L[i][j] = L[i-1][j-1] + 1\n else:\n L[i][j] = max(L[i-1][j], L[i][j-1])\n \n index = L[m][n] \n lcs = [\"\"] * (index + 1)\n lcs[index] = \"\"\n \n i = m\n j = n\n while i > 0 and j > 0:\n if s1[i-1] == s2[j-1]:\n lcs[index-1] = s1[i-1]\n i -= 1\n j -= 1\n index -= 1\n \n elif L[i-1][j] > L[i][j-1]:\n i -= 1\n \n else:\n j -= 1\n \n return \"\".join(lcs)\n \n print(lcs(s1, s2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter as tk\n \n# create a main window\nwindow = tk.Tk()\nwindow.title(\"Email Client\")  \n    \n# add labels and entry fields\nlbl_from = tk.Label(window, text=\"From:\")\nlbl_from.grid(padx=10, pady=10, row=0, column=0, sticky=\"W\")\nent_from = tk.Entry(window,width=50)\nent_from.grid(padx=10, pady=10, row=0, column=1)\n \nlbl_to = tk.Label(window, text=\"To:\")\nlbl_to.grid(padx=10, pady=10, row=1, column=0, sticky=\"W\")\nent_to = tk.Entry(window,width=50)\nent_to.grid(padx=10, pady=10, row=1, column=1) \n \nlbl_subject = tk.Label(window, text=\"Subject:\")\nlbl_subject.grid(padx=10, pady=10, row=2, column=0, sticky=\"W\")\nent_subject = tk.Entry(window,width=50)\nent_subject.grid(padx=10, pady=10, row=2, column=1)\n \nlbl_body = tk.Label(window, text=\"Body:\")\nlbl_body.grid(padx=10, pady=10, row=3,column=0, sticky=\"W\")\ntxt_body = tk.Text(window, height=10, width=50)\ntxt_body.grid(padx=10, pady=10, row=3, column=1)\n \n# enter main loop\nwindow.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import the necessary libraries for the ML workflow\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score\n\n# load the data\niris = load_iris()\nX = iris.data\ny = iris.target\n\n# split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# instantiate and train the model\nmodel = GaussianNB()\nmodel.fit(X_train, y_train)\n\n# make predictions on the test data\npredictions = model.predict(X_test)\n\n# evaluate accuracy of the model\nscore = accuracy_score(y_test, predictions)\nprint(score) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_to_dict(list): \n  dict = {} \n  for i in range(len(list)): \n    dict[list[i]] = i \n  return dict but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def scrollMessage(message): \n    for char in message: \n        for i in range(100): \n            print (char, end = \" \")\n        print(\"\")\n\n\n# Input\nmessage = 'Hello World!'\n\n# Output\nscrollMessage(message) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os\n\ndef get_filetype(filename):\n _, file_extension = os.path.splitext(filename)\n return(file_extension.lower()[1:])\n\nfiletype = get_filetype(\"example.jpg\")\nprint(filetype)\n\n# Output: jpg but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(string): \n   len_string = len(string) \n   permutations = 1\n   for i in range(1, len_string + 1): \n      permutations *= i \n   return permutations \n\nresult = factorial(word) \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_words(string_list):\n  result = []\n  for string in string_list:\n    if len(string.split()) < 2:\n      result.append(string)\n  return result\n\nstring_list = [\"Hello\", \"Hi\", \"two words\", \"text string\", \"more than two words!\"]\nprint(filter_words(string_list))\n\n#Output\n['Hello', 'Hi'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def median(nums): \n    if len(nums)%2 == 0: \n        median1 = nums[int((len(nums)-1)/2)] \n        median2 = nums[int((len(nums))/2)] \n        median = (median1 + median2)/2\n    else: \n        median = nums[int((len(nums))/2)]\n    return median \n  \nnums = [1, 5, 9, 11, 16, 21]\n print(median(nums)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd \nimport numpy as np \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LogisticRegression\n\n# Load the data\ndata = pd.read_csv('data.csv')\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(data.iloc[:,:-1], data.iloc[:,-1], test_size=0.2, random_state=0)\n\n# Fit the model\nclf = LogisticRegression()\nclf.fit(X_train, y_train)\n\n# Make predictions\ny_pred = clf.predict(X_test)\n\n# Evaluate performance\nfrom sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y_test, y_pred)\nprint('Accuracy: ', accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: lst = [5, 10, 15, 20, 25, 30]\n\ndivisible_by_5 = [num for num in lst if num%5 == 0]\nprint(divisible_by_5) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n    a, b = 0, 1\n    result = []\n    while a < n:\n        result.append(a)\n        a, b = b, a+b\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_average(given_list):\n    # Initialize a variable to store the sum of the numbers\n    list_sum = 0\n    # Loop over the list\n    for num in given_list:\n        list_sum += num\n    # Get the average\n    list_average = list_sum / len(given_list)\n    return list_average\n\n# Test \ngiven_list = [1, 2, 3, 4]\nresult = calculate_average(given_list)\nprint(f\"The average of {given_list} is {result}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_list(list): \n  total = 0\n  for num in list:\n    total += num  \n  return total\n\nprint(sum_list([4, 9, 13, 5])) # Output: 31 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maximum_sum(arr, n):\n    msum = 0\n    for i in range(n):\n        for j in range(i, n):\n            cur_sum = 0\n            for k in range(i, j + 1):\n                cur_sum += arr[k]\n            msum = max(msum, cur_sum)\n    return msum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nresult = requests.get(\"http://example.com\")\nsoup = BeautifulSoup(result.text, 'lxml')\n\nfor link in soup.find_all('a'):\n    title = link.text\n    print(title) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef get_normal_sample(size):\n    \"\"\"\n    This function will generate a random sample from standard normal distribution \n    with length size\n    \"\"\"\n    return np.random.normal(size=size)\n\nif __name__ == '__main__':\n    print(get_normal_sample(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n \n# Generate random 4x8 two-dimensional array with each cell containing a float number between 0 and 1\ndef random_array():\n    a_array = [[random.uniform(0, 1) for x in range(8)] for y in range(4)]\n    return a_array\n \nprint(random_array()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"Implement a random forest classifier in Python using TensorFlow\"\"\"\n\nimport tensorflow as tf\nfrom tensorflow.contrib.tensor_forest.python import tensor_forest\n\n# Parameters\nnum_classes = 2  # binary classification\nnum_features = 14\ntotal_samples = 4500\nnum_trees = 8\nmax_nodes = 10\n\n# Building the Random Forest\n# Input and Target data\nX = tf.placeholder(tf.float32, shape=[None, num_features])\nY = tf.placeholder(tf.int32, shape=[None])\n\n# Random Forest Parameters\nhparams = tensor_forest.ForestHParams(num_classes=num_classes, num_features=num_features, num_trees=num_trees, max_nodes=max_nodes).fill()\n\n# Build the Random Forest\nforest_graph = tensor_forest.RandomForestGraphs(hparams)\n# Get training graph and loss\ntrain_op = forest_graph.training_graph(X, Y)\nloss_op = forest_graph.training_loss(X, Y)\n\n# Measure the accuracy\ninfer_op, _, _ = forest_graph.inference_graph(X)\ncorrect_prediction = tf.equal(tf.argmax(infer_op, 1), tf.cast(Y, tf.int64))\naccuracy_op = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n\n# Initialize the variables (i.e. assign their default value)\ninit_vars = tf.group(tf.global_variables_initializer(), resources.initialize_resources(resources.shared_resources()))\n\n# Run the session\nwith tf.Session() as sess:\n    # Run the initializer\n    sess.run(init_vars)\n    # Training\n    for i in range(1000):\n        # Get next batch\n        batch_x, batch_y = get_batch_data(total_samples, batch_size)\n        _, l = sess.run([train_op, loss_op], feed_dict={X: batch_x, Y: batch_y})\n    # Test Model\n    test_x, test_y = get_batch_data(total_samples, batch_size)\n    accuracy = sess.run(accuracy_op, feed_dict={X: test_x, Y: test_y}) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Code B is more memory efficient than Code A since it uses list comprehension instead of appending items to a list. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_numbers(nums):\n  # sort the numbers in descending order\n  sorted_nums = sorted(nums, reverse=True)\n  \n  # print the sorted list\n  print(sorted_nums)\n  \n  # return the sorted list\n  return sorted_nums\n\nnums = [1, 9, 4, 6, 3, 7]\nsort_numbers(nums) # output: [9, 7, 6, 4, 3, 1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(arr): \n    n = len(arr) \n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                \nbubble_sort(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def float_to_string(number):\n     # Round the number\n    rounded_num = round(number, 2)\n     # Return the number converted to a string\n    return str(rounded_num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\ndf = pd.read_csv('dataset.csv')\n\nX_train, X_test, y_train, y_test = train_test_split(df['text'], df['label'], random_state=0)\n\nvectorizer = TfidfVectorizer().fit(X_train)\nX_train_vectorized = vectorizer.transform(X_train)\n\nmodel = LogisticRegression(max_iter=1000).fit(X_train_vectorized, y_train)\n\ny_pred = model.predict(vectorizer.transform(X_test)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from bs4 import BeautifulSoup\nimport re\n\nhtml_doc = <input>\nsoup = BeautifulSoup(html_doc, 'html.parser')\ntext = soup.get_text()\nwords = re.findall(r'\\w+', text)\nprint (len(words)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # coding: utf-8\n\nimport sqlite3\nimport os\nimport time\n\nimport bottle\nfrom bottle import default_app, route, view\nfrom bottle import request\nfrom bottle_utils.i18n import I18NPlugin\n#from bottle_utils.i18n import lazy_gettext as _\n\n#todo: refactor so that there is no error in Py3 local deployment and testing\nimport input_number as ip\nfrom dbhelper import initialize_database\nimport hashlib\n\nMOD_PATH = os.path.dirname(os.path.abspath(__file__))\nDB_PATH = os.path.abspath(os.path.join(MOD_PATH, '..', '..', \"lagesonr.db\"))\n\nif not os.path.exists(DB_PATH):\n    initialize_database(DB_PATH)\n\nlagesonrdb = sqlite3.connect(DB_PATH)\n\n#todo: populate list dynamically based on available/selected translations\nLANGS = [\n    ('de_DE', 'Deutsch'),\n    ('en_US', 'English'),\n]\n# ('ar_AR', 'Arab'),\nDEFAULT_LOCALE = 'en_US'\n\n@route('/')\n@view('start_page')\ndef index():\n    \"\"\"1.Seite: Helfer steht am LaGeSo und gibt Nummern ein [_____] \"\"\"\n    return {'entered': []}\n\n@route('/', method='POST')\n@view('start_page')\ndef do_enter():\n    numbers = request.forms.get('numbers')\n    timestamp = time.asctime()\n    numbers = [num.strip() for num in numbers.split('\\n')]\n    result_num = []\n\n    #todo: refactor fingerprint in extra function for better testing\n    usr_agent = str(request.environ.get('HTTP_USER_AGENT'))\n    usr_lang = str(request.environ.get('HTTP_ACCEPT_LANGUAGE'))\n    usr_ip = str(request.remote_addr)\n\n    usr_fingerprint = usr_agent + usr_lang + usr_ip\n    usr_hash = hashlib.md5(usr_fingerprint.encode(\"utf-8\")).hexdigest()\n\n    with lagesonrdb as con:\n        cur = con.cursor()\n        for num in set(numbers):\n            if ip.is_valid_number(num) and ip.is_ok_with_db(\n                    num) and ip.is_valid_user():\n\n                num = str(num).capitalize()\n                query = 'SELECT NUMBER FROM NUMBERS WHERE NUMBER=\"%s\" AND FINGERPRINT=\"%s\"' % (num, usr_hash)\n                if len(list(cur.execute(query))) == 0:\n\n                    insert = 'INSERT INTO NUMBERS(NUMBER, TIME, PLACE, USER, FINGERPRINT) VALUES (\"%s\", \"%s\", \"-\", ' \\\n                             '\"-\", \"%s\")' % (num, timestamp, usr_hash)\n                    cur.execute(insert)\n                    result_num.append(num)\n                else:\n                    result_num.append(\"ALREADY ENTERED BY - %s - %s - %s: %s\" % (usr_ip, usr_agent, usr_lang, num))\n                    #return {'entered': [\"already before - by you!\"], 'timestamp': timestamp}\n            else:\n                result_num.append(\"INVALID INPUT: %s\" % num)\n\n    return {'entered': result_num, 'timestamp': timestamp}\n\n\n@route('/query')\n@view('query_page')\ndef query():\n    return {'result': '-', 'timestamp_first': '-','timestamp_last': '-', 'n': '-'}\n\n\n@route('/query', method='POST')\n@view('query_page')\ndef do_query():\n    number = request.forms.get('number')\n    timestamp_first = '-'\n    timestamp_last = '-'\n    n = '0'\n\n    if ip.is_valid_number(number) and ip.is_ok_with_db(\n            number) and ip.is_valid_user():\n\n        with lagesonrdb as con:\n            cur = con.cursor()\n\n            number = str(number).capitalize()\n            query = 'SELECT TIME FROM NUMBERS WHERE NUMBER=\"%s\" ORDER BY TIME' % number\n            result = list(cur.execute(query))\n            n = len(result)\n            if n > 0:\n                timestamp_first, timestamp_last = result[0][0], result[-1][0]\n            else:\n                timestamp_first = 'NOT FOUND'\n    else:\n        timestamp_first = 'INVALID INPUT'\n\n    return {'result': number, 'timestamp_first': timestamp_first,\n                'timestamp_last': timestamp_last, 'n': n}\n\n\n@route('/about')\n@view('about')\ndef about():\n    pass\n\n@route('/impressum')\n@view('impressum')\ndef impressum():\n    pass\n\n# findet templates im gleichen Verzeichnis\nbottle.TEMPLATE_PATH.append(MOD_PATH)\napp = default_app()\napplication = I18NPlugin(app, langs=LANGS, default_locale=DEFAULT_LOCALE,\n                         domain='messages',\n                         locale_dir=os.path.join(MOD_PATH, 'locales'))\n but is not the same. just give one example and only return the code."}
