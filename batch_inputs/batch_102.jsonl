{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Load the data\nX = np.load(\"data.npy\")\ny = np.load(\"target.npy\")\n\n# Pre-process the data\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\n\n# Create a logistic regression model for multiclass classification \nlr_model = LogisticRegression(multi_class='ovr', solver='lbfgs', max_iter=500)\n\n# Train the model\nlr_model.fit(X_scaled, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_statistics(arr):\n  min_val = min(arr)\n  max_val = max(arr)\n  mean_val = sum(arr)/len(arr)\n  std_val = np.std(arr)\n\n  print(\"Min: \" + str(min_val))\n  print(\"Max: \" + str(max_val))\n  print(\"Mean: \" + str(mean_val))\n  print(\"Standard Deviation: \" + str(std_val)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(arr):\n    max_value = -float('inf')\n    for num in arr:\n        if num > max_value:\n            max_value = num\n    return max_value\n\narr = [1,4,7,3]\nresult = find_max(arr)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(s): \n    # Reverse the string  \n    rev = ''.join(reversed(s)) \n  \n    # Check if the string is equal to its reverse \n    if (s == rev): \n        return true\n    return false but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_to_words(s):\n    return s.split(' ')\n\nwords = string_to_words('Hello World')\nprint(words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Get the webpage\nr = requests.get('https://www.nytimes.com/')\n# Create a BeautifulSoup object\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# Extract all articles\narticles = soup.find_all('div', class_='css-6p6lnl')\n\n# Create a list to store all article data\narticle_data = []\n\n# Loop through each article and extract data\nfor article in articles:\n # Title\n title = article.find('h2').text\n\n # Author\n author = article.find('span', class_='css-1pfq5u').text\n\n # Publish date\n publish_date = article.find('time').text\n\n # Store data in the list\n article_data.append({\n  'title': title,\n  'author': author,\n  'publish_date': publish_date\n })\n\nprint(article_data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_tuples(list): \n    \"\"\"Function to sort tuples according to their second parameter\"\"\" \n    list.sort(key = lambda x : x[1]) \n    return list\n\n#Example:\nprint(sort_tuples(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: if len(a) < len(b):\n    print(a)\nelse:\n    print(b) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiple_values():\n    x = 2\n    y = 7\n    z = \"Hello\"\n    return x, y, z\n\nx, y, z = multiple_values()\n\nprint(x, y, z) # 2 7 Hello but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fib_recursive(n):\n    if n <= 1:\n        return n\n    else:\n        return Fib_recursive(n - 1) + Fib_recursive(n - 2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: result = [x**2 for x in range(10)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def flatten(lst):\n  #Empty list to add the flatten items\n  flat_list = []\n  #Loop through the list items\n  for item in lst:\n    #If the item is a list, then call the flatten function recursively\n    if type(item) is list:\n      flat_list.extend(flatten(item))\n    # Else append the item to the list\n    else:\n      flat_list.append(item)\n  #Return the list\n  return flat_list\n  \n# Sample \nnested_list = [[1,2,[3]],4]\nflat_list = flatten(nested_list)\nprint (flat_list)\n# Output: [1, 2, 3, 4] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def caesar_cipher(word, places):\n    encrypted_word = \"\"\n    for ch in word:\n        ascii_code = ord(ch)\n        ascii_code += places\n        encrypted_word += chr(ascii_code)\n    return encrypted_word\n\nmessage = \"hello\"\nencrypted_message = caesar_cipher(message, 2)\nprint(encrypted_message) # Outputs: \"jgnnq\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def concatenateString(list):\n    result = \"\"\n    for item in list:\n        result += item\n    return result\n \nprint(concatenateString([\"Hello\", \"World\", \"How\", \"are\", \"you\"])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\n\n# Model definition\nmodel = tf.keras.Sequential([\n tf.keras.layers.Flatten(input_shape=(2,)),\n tf.keras.layers.Dense(16, activation='relu'),\n tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\n# Compile the model\nmodel.compile(\n optimizer='adam',\n loss='binary_crossentropy',\n metrics=['accuracy']\n)\n\n# Train the model\nmodel.fit(data, labels, epochs=10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_sum(a, b):\n    \"\"\"Calculate the sum of two numbers given.\n    \n    Parameters\n    ----------\n    a : int\n        The first argument.\n    b : int\n        The second argument.\n        \n    Returns\n    -------\n    int\n        The sum of the two numbers given.\n    \"\"\"\n    sum = a + b\n    return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: mylist = [\"apple\", \"eye\", \"ball\", \"abba\"]\n\npalindromes = [word for word in mylist if word == word[::-1]]\nprint(palindromes) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn import svm\n\n# Create the model\nmodel = svm.SVC()\n\n# Fit and predict the model\nmodel.fit(X, y)\npredictions = model.predict(X) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\n# Input text\ntext = \"This is my text and I am looking for a search term\"\n\n# Search term\nsearch_term = \"search\"\n\n# Use regular expression to find search term\npattern = re.compile(search_term)\nresult = pattern.findall(text)\n\n# Print result\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def average(arr):\n    return sum(arr) / len(arr)\n\nmylist = [3, 5, 7, 9, 12]\n\nprint(\"Average of mylist is:\", average(mylist)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n): \n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class CheckingAccount:\n  def __init__(self, balance):\n    self.balance = balance\n    \n  def deposit(self, amount):\n    self.balance += amount\n    return self.balance\n    \n  def withdraw(self, amount):\n    if self.balance - amount < 0:\n      raise Exception(\"Insufficient funds\")\n    self.balance -= amount\n    return self.balance but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\nfrom tensorflow.keras.layers import Embedding, Dense, Dropout, LSTM\nfrom tensorflow.keras.models import Sequential\n\n#Create the network\nmodel = Sequential()\n\n#Add embedding layer\nmodel.add(Embedding(1000, 64))\n\n#Add two LSTM layers\nmodel.add(LSTM(32, return_sequences = True))\nmodel.add(LSTM(32))\n\n#Add two dense layers\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n\n#Compile\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def largest_num_in_list(arr):\n    largest_num = 0\n    for num in arr:\n        if num > largest_num:\n            largest_num = num\n    return largest_num\n\nif __name__ == '__main__':\n    print(largest_num_in_list([2, 5, 8, 10, 21])) # 21 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class FamilyTreeNode:\n    def __init__(self, name, parent=None):\n        self.name = name\n        self.parent = parent\n        self.children = []\n\n    def add_child(self, child):\n        child.parent = self\n        self.children.append(child)\n\n    def get_siblings(self):\n        siblings = []\n        if self.parent is not None:\n            for child in self.parent.children:\n                if not self.name == child.name:\n                    siblings.append(child.name)\n        return siblings but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def listToTuple(list):\n tupleList = []\n for element in list:\n  tupleList.append((element,))\n return tupleList\n\nprint(listToTuple(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def flatten(lst):\n    flattened = []\n    for elem in lst:\n        if isinstance(elem, list):\n            flattened += flatten(elem)\n        else:\n            flattened.append(elem)\n    return flattened\n\nif __name__ == '__main__':\n    lst = [[1,2,3], [4,5], [6]]\n    print(flatten(lst)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_dict(list1):\n    my_dict = {}\n    for item in list1:\n        my_dict[item] = item ** 2\n    return my_dict but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # sum of all digits\ndef sum_of_digits(number):\n total = 0\n while number > 0:\n digit = number % 10\n total += digit\n number = number // 10\n \n return total\n\n# get user input\nnumber = int(input(\"Enter a number: \"))\n\n# calculate the sum\nresult = sum_of_digits(number)\n\n# print the result\nprint(\"Sum of all digits:\", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def permutations(string):\n if len(string) == 0:\n  return []\n\n if len(string) == 1:\n  return [string]\n\n perm_list = []\n for c in string:\n  for perm in permutations(string.replace(c, '')):\n   perm_list.append(c + perm)\n return perm_list\n\nstring = \"ABC\"\nprint(permutations(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\ndef find_most_frequent(array):\n  c = Counter(array)\n  return c.most_common(1)[0][0]\n\narray = [3, 4, 6, 3, 2, 8, 6, 7, 3]\n\nprint(find_most_frequent(array)) # 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def latin_encode(string): \n    encoded_string = \"\" \n    for word in string.split(): \n  \n        if word[0] not in \"aeiou\": \n            word = word[1:]+word[0] \n        word+=\"ay\" \n  \n        encoded_string += word+\" \"\n    return encoded_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def endswith_ing(input_string):\n    return input_string.endswith('ing')\n\nif __name__ == '__main__':\n    my_string = \"Greeting\"\n    is_ending_with_ing = endswith_ing(my_string)\n    print(\"Does the string end with 'ing'? -> \" + str(is_ending_with_ing)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize(eq_1, eq_2):\n    # define variables and values\n    x, y = 0, 0\n    x1, y1, c1 = eq_1\n    x2, y2, c2 = eq_2\n    \n    # solve equations\n    delta = (x1*y2) - (x2*y1)\n    delta_x = (c1*y2) - (c2*y1)\n    delta_y = (x1*c2) - (x2*c1)\n    \n    if delta == 0:\n        return \"No solution\"\n    \n    x = delta_x / delta\n    y = delta_y / delta\n    \n    return x, y\n\nsolution = optimize((1, 2, 5), (2, 1, 6))\nprint(solution) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import smtplib\nimport logging\n\ndef send_email():\n sender_email = \"my@mail.com\"\n receiver_email = \"your@mail.com\"\n\n message = \"\"\"\\\n Subject: Exception Alert\n\nThere has been an exception in the code.\"\"\"\n\n with smtplib.SMTP('smtp.gmail.com', 587) as server:\n server.ehlo()\n server.starttls()\n server.login(sender_email, 'SENDER_EMAIL_PASSWORD')\n server.sendmail(sender_email, receiver_email, message)\n \nlogging.basicConfig(filename=\"logfile.log\", \n                    level=logging.ERROR, \n                    format='%(asctime)s - %(levelname)s - %(message)s') \n\ntry:\n raise Exception\nexcept Exception:\n logging.error(\"Error occurred\", exc_info=True)\n send_email() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n    def __init__(self, name, age, height):\n        self.name = name\n        self.age = age\n        self.height = height but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(arr):\n  res = []\n  for i in arr: \n    if i not in res: \n      res.append(i)\n  return res but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef is_valid_username(username):\n regex = r\"^[a-zA-Z][a-zA-Z0-9_]{7,}$\"\n return re.match(regex, username)\n\nprint(is_valid_username(\"abcdefgh\"))  # Output: True\nprint(is_valid_username(\"1abcdefgh\")) # Output: False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n#Defines the model\nmodel = Sequential()\nmodel.add(Dense(32, input_dim=5, activation='relu'))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(1))\n\n#Compiles the model\nmodel.compile(optimizer='rmsprop',\n              loss='mean_squared_error',\n              metrics=['mse'])\n\n#Fits the model to the training data\nmodel.fit(X_train, y_train, \n          batch_size=32, epochs=10, verbose=1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_strings_charwise(s1, s2):\n    for i in range(min(len(s1), len(s2))):\n        if s1[i] != s2[i]:\n            return i\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers = [1, 2, 3, 4, 5]\n\nfor number in numbers:\n    print(number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def validate(data, field, regex):\n    # makes sure data is not empty\n    if not data:\n        raise ValueError('Data is required.')\n    # makes sure data contains field\n    if not field in data:\n        raise ValueError('Field ' + field + ' is required.')\n    # check format of data\n    import re\n    if not re.match(regex, data[field]):\n        raise ValueError('Field ' + field + ' is not valid.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [64, 34, 25, 12, 22, 11, 90] \n  \nsort(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]), but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def separate_array(myList, predicate):\n    leftList, rightList = [], []\n    for item in myList:\n        if(predicate(item)):\n            leftList.append(item)\n        else:\n            rightList.append(item)\n    return leftList, rightList\n\nmyList = [1, 2, 3, 4, 5, 6, 7]\npredicate = lambda x : x<5\nleftList, rightList = separate_array(myList, predicate)\nprint(\"Left List is:\")\nprint(leftList)\nprint(\"Right List is:\")\nprint(rightList) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def display_even_elements(list):\n    \"\"\"Function to display all the even elements from a given list\"\"\"\n    \n    # List to store the even elements\n    even_list = []\n    \n    # Iterate through each element in the list\n    for elem in list:\n        # If even, append it to the list\n        if elem % 2 == 0:\n            even_list.append(elem)\n    \n    # Return the list\n    return even_list\n\n# Given list\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Print the result\nprint(display_even_elements(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, jsonify\nimport sqlite3\n\napp = Flask(name)\n\n@app.route('/api/v1/employees', methods=['GET'])\ndef get_employees():\n conn = sqlite3.connect('employees.db')\n cur = conn.cursor()\n data = cur.execute('SELECT * from employee').fetchall()\n conn.close()\n return jsonify(data)\n\nif name == 'main':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_combinations(input_list):\n    import itertools\n    comb_list = []\n    # Get all possible combinations of the list\n    for subset in itertools.combinations(input_list,\n                                       len(input_list)):\n        comb_list.append(subset)\n    return comb_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\ndef call_web_service(url):\n    # send a GET request\n    response = requests.get(url) \n  \n    # check for HTTP codes other than 200\n    if response.status_code != 200: \n        raise Exception('Failed to get data:', response.status_code) \n  \n    # return the data \n    return response.json() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimized_sort(numbers):\n    # Create a heap\n    heap = []\n\n    # Insert each element into the heap\n    for num in numbers:\n        heapq.heappush(heap, num)\n\n    # Pop elements from the heap and append to result list\n    sorted_nums = []\n    while heap:\n        sorted_nums.append(heapq.heappop(heap))\n\n    return sorted_nums but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculateMean(array):\n    # sum up all elements in the array\n    mean = 0\n    for i in range(len(array)):\n        mean += array[i]\n    # calculate the mean by dividing the sum by number of elements\n    mean /= len(array)\n    return mean\n\narray = [4, 9, 3, 5]\nmean = calculateMean(array)\nprint(mean) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = \u201chello world\u201d \n# Reverse the string \nrev_string = \"\" \nfor char in string: \n rev_string = char + rev_string \n\n# Print the reversed string \nprint(rev_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def diff(nums):\n    return max(nums) - min(nums)\n\nprint(diff([10, 4, 2, 5, 7])) # 8 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_to_list(s):\n    return s.split()\n\nstring = 'Hello world'\nresult = convert_to_list(string)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent_word(sentence):\n    \"\"\"Return the word which appears most frequent in a sentence.\"\"\"\n    words = {}\n    for word in sentence.split():\n        if word in words:\n            words[word] += 1\n        else:\n            words[word] = 1\n    return max(words, key=words.get) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create a set containing the names of the days of the week\ndays_of_the_week = set([\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"])\n\n# Print the set \nprint(days_of_the_week) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\n\n# Build a dataset\ndata = np.array([[1.5,2.6,3.2], [4.3,5.2,6.2], [-1.2,0.2,4.3]])\n\n# Create and train the model\nprint(\"Building model...\")\nmodel = KMeans(n_clusters=4)\nmodel.fit(data)\n\n# Make predictions\npredictions = model.predict(data)\n\n# Visualize the results\nplt.scatter(data[:,0], data[:,1], c=predictions, cmap='viridis')\nplt.xlabel(\"Feature 1\")\nplt.ylabel(\"Feature 2\")\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def all_subsets(s):\n    subsets = []\n    for i in range(2**len(s)):\n        bitmask = bin(i)[2:]\n        subset = []\n        for j in range(len(s)):\n            if bitmask[j] == \"1\":\n                subset.append(s[j])\n        subsets.append(subset)\n    return subsets but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Numbers(object): \n    def __init__(self, num1, num2): \n        self.num1 = num1 \n        self.num2 = num2 \n\n    def find_sum(self): \n        return self.num1 + self.num2 \n\n    def find_product(self): \n        return self.num1 * self.num2 \n\n#creating an object \nnum_object = Numbers(22, 10) \n\n#finding sum \nsum_result = num_object.find_sum() \n\n#finding product \nproduct_result = num_object.find_product() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Input\nmessage = \"hellohello\"\ncipher_key = 3\n\n#Solution\nalphabet = \"abcdefghijklmnopqrstuvwxyz\";\ncipher = alphabet[cipher_key:] + alphabet[:cipher_key]\n\nencoded_message = \"\"\nfor char in message:\n encoded_message += cipher[alphabet.find(char)]\n\nprint(encoded_message) # khoorkhoor but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def modify_number(number):\n   if number % 2 == 0:\n       return number * 2\n   else:\n       return number - 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_integers(num1, num2):\n   return num1 + num2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def product_category(product):\n products = {\"tomatoes\": \"red\",\n \"apples\": \"green\",\n \"chocolates\": \"blue\"}\n \n if product in products:\n return products[product]\n else:\n return \"Invalid product\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Fetch page\npage = requests.get(url)\n\n# Parse HTML into BeautifulSoup object\nsoup = BeautifulSoup(page.text, 'html.parser')\n\n# Extract required data\ntitle = soup.title.string\ndescription = soup.find(attrs={'name': 'description'}).get('content')\n\n# Print out the data\nprint('Title:', title)\nprint('Description:', description) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MathOperation:\n    def __init__(self):\n        self.val1 = None\n        self.val2 = None\n    \n    def set_values(self, val1, val2):\n        self.val1 = val1\n        self.val2 = val2\n    \n    def add(self):\n        return self.val1 + self.val2\n    \n    def subtract(self):\n        return self.val1 - self.val2\n    \n    def multiply(self):\n        return self.val1 * self.val2\n    \n    def divide(self):\n        return self.val1 / self.val2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # shapes_lib.py\nclass Shape:\n    \"\"\"Base class for creating shapes.\"\"\"\n\n    def __init__(self, sides, *args):\n        self.sides = sides\n\nclass Circle(Shape):\n    \"\"\"A circle with a fixed radius.\"\"\"\n\n    def __init__(self, radius):\n        super().__init__(1)\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * (self.radius ** 2)\n\nclass Triangle(Shape):\n    \"\"\"A triangle with sides of varying lengths.\"\"\"\n\n    def __init__(self, side1, side2, side3):\n        super().__init__(3)\n        self.side1 = side1\n        self.side2 = side2\n        self.side3 = side3\n\n    def area(self):\n        s = (self.side1 + self.side2 + self.side3) / 2\n        return (s * (s - self.side1) * (s - self.side2) * (s - self.side3)) ** 0.5\n\nclass Square(Shape):\n    \"\"\"A square with four equal sides.\"\"\"\n\n    def __init__(self, side):\n        super().__init__(4)\n        self.side = side\n\n    def area(self):\n        return self.side**2\n\ndef restore_shape(shape_data):\n    shape_type = shape_data['type']\n    if shape_type == 'circle':\n        return Circle(shape_data['radius'])\n    elif shape_type == 'triangle':\n        return Triangle(shape_data['side1'], shape_data['side2'], shape_data['side3'])\n    elif shape_type == 'square':\n        return Square(shape_data['side']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_spam(sentence):\n  spam_words = [\"free\", \"gift\", \"click\", \"link\"]\n  words = sentence.split(' ')\n  \n  for word in words:\n    word = word.lower()\n    if word in spam_words:\n      return True\n\n  return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n    def __init__(self, data, next=None):\n        self.data = data\n        self.next = next\n\nclass LinkedList:\n    def __init__(self, head=None):\n        self.head = head\n\n    def append(self, data):\n        new_node = Node(data)\n\n        if self.head is None:\n            self.head = new_node\n            return\n        node = self.head\n        while node.next is not None:\n            node = node.next\n        node.next = new_node but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route('/')\ndef homepage():\n    return render_template('index.html', title='My Website')\n\n@app.route('/form', methods=['GET', 'POST'])\ndef form():\n    if request.method == 'POST':\n        email = request.form.get('email')\n        return \"Your email address is {}\".format(email)\n    else:\n        return render_template('form.html', title='Form')\n\nif __name__ == '__main__':\n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def solve_sudoku(matrix):\n # find empty spaces\n empty_spaces = find_empty_spaces(matrix)\n \n if not empty_spaces:\n #No empty spaces\n return True\n else:\n row, col = empty_spaces\n \n # choose valid entries\n for i in range(1,10):\n # entry validate\n if is_validated(matrix, i, (row, col)):\n matrix[row][col] = i\n \n if solve_sudoku(matrix):\n # jump out of function\n return True\n \n matrix[row][col] = 0\n \nreturn False\n\ndef find_empty_spaces(matrix):\n for i in range(9):\n for j in range(9):\n if matrix[i][j] == 0:\n return i, j  # row, col\n \nreturn None\n\ndef is_validated(matrix, number, position): # check row\n for i in range(9):\n if matrix[position[0]][i] == number and position[1] != i:\n return False\n \n # check column\n for i in range(9):\n if matrix[i][position[1]] == number and position[0] != i:\n return False\n \n # check 3x3 box\n box_x = position[1] // 3\n box_y = position[0] // 3\n \n for i in range(box_y * 3, box_y * 3 + 3):\n for j in range(box_x * 3, box_x * 3 + 3):\n if matrix[i][j] == number and (i,j) != position:\n return False\n \nreturn True\n\n# Solve Sudoku\nsolved = solve_sudoku(matrix) \n\nif solved:\n print('Sudoku solved!')\n \n for i in range(9):\n for j in range(9):\n print(matrix[i][j], end=\" \")\n print()\nelse:\n print('No solution') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_character(string, character):\n indices = []\n for i in range(len(string)):\n  if string[i] == character:\n   indices.append(i)\n return indices\n\nprint(search_character(string, character)) # [3] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Count number of words in a string\n\ndef count_words(s):\n    # remove unnecessary characters\n    s = s.replace(',', '').replace('.', '')\n    # split string into list of words\n    words = s.split(' ')\n    # return the length of the list (number of words)\n    return len(words)\n\ns = \"This is a sample string\"\nwords_count = count_words(s)\nprint(words_count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(rows):\n    for j in range(i):\n        print(\"#\", end=\"\")\n    print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isUnique(s):\n    # Create a list that contains all characters\n    chars = []\n    # Iterate through the string\n    for char in s:\n        # Check if the character is already in the list\n        if char in chars:\n            return False\n        # Add character to the list\n        chars.append(char)\n    # Return True when the loop is finished\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: We can create a web application for storing and displaying a user's contacts. We can use HTML, CSS, and JavaScript for creating the front-end of the application. Then, we can use Python to create the backend of the application. We can also use a database like MongoDB to store the user's contacts. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\n\n# Load the dataset\nX = np.load('data/X.npy')\n\n# Initialize KMeans\nkmeans = KMeans(n_clusters=5, random_state=42)\n\n# Fit the model\nkmeans.fit(X)\n\n# Get the labels\nlabels = kmeans.labels_\n\n# Calculate the silhouette score\nsilhouette_score = silhouette_score(X, labels)\nprint('Silhouette Score: {:.4f}'.format(silhouette_score)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The expression x is of type string. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_leap_year(year):\n  if (year % 4 == 0):\n  if (year % 100 == 0):\n      if (year % 400 == 0):\n          return True\n      else:\n          return False\n  else:\n      return True\n  else:\n      return False\n\nyear = int(input(\"Enter a year: \"))\n\nif is_leap_year(year):\n  print(year, \"is a leap year\")\nelse:\n  print(year, \"is not a leap year\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_arrays(arr1, arr2):\n    merged_array = arr1 + arr2\n    return sorted(merged_array)\n\nmerged_array = merge_arrays(arr1, arr2)\nprint(merged_array) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_organizer(list_of_strings):\n    words_2_vowels = []\n    words_1_vowel_or_none = []\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    \n    for word in list_of_strings:\n        count = 0\n        for char in word:\n            if char in vowels:\n                count += 1\n        if count >= 2:\n            words_2_vowels.append(word)\n        else:\n            words_1_vowel_or_none.append(word)\n            \n    return (words_2_vowels, words_1_vowel_or_none) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n\ntotal = 0\n\nfor num in nums:\n    if (num % 3 == 0) or (num % 7 == 0):\n        total += num\n\nprint(total)   # Output: 42 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countPosAndNeg(lst):\n positive = 0\n negative = 0\n for num in lst:\n  if num >= 0:\n   positive += 1\n  else:\n   negative += 1\n return (positive, negative) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_monotonic(list):\n is_monotonic = True\n for i in range(len(list)-1):\n  if(list[i] > list[i+1]):\n   is_monotonic = False\n return is_monotonic\n\nlist = [1, 3, 4, 5, 9, 10]\nprint(check_monotonic(list)) # Output: True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Calculator:\n def __init__(self):\n pass\n\n def add(self, num1, num2):\n return num1 + num2\n\ndef subtract(self, num1, num2):\n return num1 - num2 \n\ndef multiply(self, num1, num2):\n return num1 * num2\n\ndef divide(self, num1, num2):\n return num1 / num2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class UserProfile():\n    def __init__(self, name, email, address, phone_number):\n        self.name = name\n        self.email = email\n        self.address = address\n        self.phone_number = phone_number\n\n    def get_name(self):\n        return self.name\n\n    def get_email(self):\n        return self.email\n\n    def get_address(self):\n        return self.address\n\n    def get_phone_number(self):\n        return self.phone_number but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    \n    def insert(self, data):\n        new_node = Node(data)\n\n        if self.head is None:\n            self.head = new_node\n        else:\n            current = self.head\n            while current.next is not None:\n                current = current.next\n            current.next = new_node but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: ['Hello', 'name', 'John'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from Crypto.PublicKey import RSA\ndef encrypt(message):\n    #Generate public and private keys\n    key = RSA.generate(1024)\n    public_key = key.publickey()\n  \n    #Encrypt the message with the public key\n    encrypted_message = public_key.encrypt(message, 32)\n    return encrypted_message but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Program to print the multiplication table\nnum = 5\n\n# Iterate from 1 to 10\nfor i in range(1,11):\n print(f'{num} X {i} = {num * i}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_list_elements(lst):\n \u00a0 \u00a0sum = 0\n \u00a0 \u00a0for item in lst:\n \u00a0 \u00a0 \u00a0 \u00a0sum += item\n \u00a0 \u00a0return sum\n\nprint(sum_list_elements([1, 2, 3])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combine_lists(list1, list2):\n return list1 + list2\n\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nprint(combine_lists(list1, list2)) # [1, 2, 3, 4, 5, 6] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(string): \n  \n  # Create an empty string  \n  rev_str = \"\" \n  \n  # Iterate over characters of the given string  \n  for char in string: \n    # Prepend the character to the beginning of rev_str \n    rev_str = char + rev_str \n  \n  return rev_str \n  \n# Driver code \nstring = \"Hello World\"\nprint(reverse_string(string)) # Output: dlroW olleH but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent_char(data):\n    # Create a dictionary of characters frequency\n    data_dict = {}\n    for char in data:\n        if char not in data_dict:\n            data_dict[char] = 0\n        data_dict[char] += 1\n\n    # Find the character with highest frequency\n    max_freq = 0\n    max_freq_char = None\n    for char, freq in data_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_freq_char = char\n\n    return max_freq_char\n\nmost_frequent_char(\"Python Program\")\n# Output: 'p' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndata = json.loads(data_json)\n\n# Output:\ndata = {\n \"name\": \"John Doe\",\n \"age\": 18,\n \"hobbies\": [\"reading\", \"swimming\", \"gaming\"],\n \"contact\": {\n  \"email\": \"johndoe@example.com\",\n  \"mobile\": \"+1900000000\"\n }\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_string_to_int(string):\n    x = 0\n    for i in string:\n        x = x*10 + ord(i) - ord('0')\n    return x but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pyramid(h): \n    \n    for i in range(0, h): \n        for j in range(0, h-i-1): \n            print(end=\" \") \n        for j in range(0, i+1): \n            print(\"* \", end=\"\") \n        print(\"\\r\") \n\npyramid(3) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request\nimport spacy \n\nnlp = spacy.load(\"en_core_web_sm\")\n\napp = Flask(__name__)\n  \n@app.route(\"/subject-verb-extraction\", methods = [\"POST\"])\n\ndef extract_subject_verb():\n  if request.method == \"POST\":\n    data = request.json\n    sentence = data[\"sentence\"]e\n    doc = nlp(sentence)\n    subtokens = [token.text for token in doc if (token.dep_ == \"nsubj\" or token.dep_ == \"ROOT\")]\n    verb_pattern = \" \".join(subtokens)\n\n    return verb_pattern \n\nif __name__ == \"__main__\":\n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Game setup\nname = input(\"What is your name? \")\nprint(\"Welcome, \" + name + \"!\")\n\n# Main loop\nwhile True:\n\n    # Get player input\n    command = input(\"What would you like to do? \")\n\n    # Execute command\n    if command == \"go north\":\n        print(\"You head north.\")\n    elif command == \"go east\":\n        print(\"You head east.\")\n    elif command == \"go south\":\n        print(\"You head south.\")\n    elif command == \"go west\":\n        print(\"You head west.\")\n    elif command == \"quit\":\n        print(\"Goodbye, \" + name + \"!\")\n        break\n    else:\n        print(\"Sorry, I don't understand.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter as tk\nimport requests\n\n# Create the window and set its title\nwindow = tk.Tk()\nwindow.title(\"Weather App\")\n\n# Create a label for entering the city name\ncity_label = tk.Label(text=\"City\")\ncity_label.grid(column=0, row=0)\n\n# Create a textbox for entering the city name\ncity_text = tk.StringVar()\ncity_entry = tk.Entry(textvariable=city_text)\ncity_entry.grid(column=1, row=0)\n\n# Create a function for fetching and displaying the weather\ndef show_weather():\n  city = city_text.get()\n  # Fetch the weather from API module\n  api_key = \"API KEY\"\n  url = f\"http://api.openweathermap.org/data/2.5/weather?q={city}&units=imperial&appid={api_key}\"\n  response = requests.get(url)\n  weather = response.json() \n\n  # Display the weather in the label\n  label.configure(text=weather)\n\n# Create a button for fetching the weather\nbutton = tk.Button(text=\"Show Weather\", command=show_weather)\nbutton.grid(column=1, row=1)\n\n# Create a label for displaying the weather\nlabel = tk.Label(text=\"\")\nlabel.grid(column=0, row=1, columnspan=2)\n\n# Start the window\nwindow.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef choose_word():\n    # Choose random secret word\n    words = [\"potato\", \"banana\", \"apple\", \"pear\"]\n    return random.choice(words)\n\ndef guess_input():\n    # User input for guessing\n    letter = input(\"Guess a letter or word: \").lower()\n    return letter\n\ndef check_guess(letter, secret_word, guesses):\n    # Check if letter is in the secret word\n    result = {\n        \"letter\": letter,\n        \"is_in_word\": letter in secret_word,\n        \"guesses\": guesses,\n    }\n    return result\n\ndef update_round_state(secret_word, current_round, result):\n    # Update the round state\n    letter = result.get(\"letter\")\n    guesses = result.get(\"guesses\")\n\n    if result.get(\"is_in_word\") == False:\n        guesses -= 1\n        current_round.set(\"guesses\", guesses)\n    else:\n        for index, char in enumerate(secret_word):\n            if letter == char:\n                current_round.set(\"hidden_word\", char, index)\n\ndef end_game(guesses):\n    if guesses == 0:\n        return False\n    else:\n        return True\n\n# Choose secret word and set guessed word length\nsecret_word = choose_word()\nhidden_word = [\"_\" for i in range(len(secret_word))]\n\n# Initialize variables for the round\nguesses = 6\nround_state = {\n    \"secret_word\": secret_word,\n    \"hidden_word\": hidden_word,\n    \"guesses\": guesses,\n}\n\n# Main loop for the game\nwhile end_game(round_state.get(\"guesses\")) == True:\n    # Print current round info\n    print(\"Secret word: {}\".format(round_state.get(\"hidden_word\")))\n    print(\"Guesses left: {}\".format(round_state.get(\"guesses\")))\n\n    # Get and check user input\n    letter = guess_input()\n    result = check_guess(letter, round_state.get(\"secret_word\"), round_state.get(\"guesses\"))\n\n    # Update round state\n    update_round_state(\n        round_state.get(\"secret_word\"),\n        round_state,\n        result\n    )\n\n    # Check if the game needs to end\n    if \"_\" not in round_state.get(\"hidden_word\"):\n        print(\"Congratulations! You won the game!\")\n        break\n\nif end_game(round_state.get(\"guesses\")) == False:\n    print(\"Oh no, you have run out of guesses. The secret word is \\\"{}\\\"\".format(secret_word)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import flask\nfrom flask import request\n\n@app.route('/order', methods=['POST'])\ndef order():\n data = request.get_json()\n customer_id = data['customer_id']\n items = data['items']\n\n # Process order\n\n return flask.jsonify({'message': 'Order processed'})) but is not the same. just give one example and only return the code."}
