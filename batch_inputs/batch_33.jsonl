{"prompt": "make some code that functions the same as the following code: #importing necessary libraries\nfrom sklearn.feature_extraction.text import CountVectorizer \nfrom sklearn.metrics.pairwise import cosine_similarity\n\n#Defining a function to calculate cosine similarity\ndef cosine_similarity(text):\n   vectors = [t for t in text]\n   cv = CountVectorizer()\n   counts = cv.fit_transform(vectors)\n   return cosine_similarity(counts)\n   \n#Declaring the corpus of documents\ncorpus = ['the goal of this search engine is to find documents similar to a query', \n          'the algorithm begins by vectorizing the query and the documents',\n          'the query and documents are then compared using cosine similarity']\n          \n#Calculating similarity\nsimilarity_matrix = cosine_similarity(corpus)\n\n#Printing the cosine similarity matrix\nprint(similarity_matrix) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: input_value = 4\n\nprint(type(input_value)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def character_count(str):\n    d = dict()\n    for c in str:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n    return d but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: if len(string1) == len(string2) and string1 in string2*2:\n    print(\"The strings are a rotation of each other\")\nelse:\n    print(\"The strings are not a rotation of each other\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n@app.route(\"/api/ocean-creatures\", methods=[\"GET\"])\ndef get_ocean_creatures():\n query = request.args.get(\"q\",\"\")\n url = \"https://en.wikipedia.org/w/api.php\"\n params = {\n 'action': 'query',\n 'list':'search',\n 'srsearch': query + ' ocean',\n 'format': 'json',\n }\n res = requests.get(url, params=params).json()\n return jsonify(res)\n\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calc_magnitude(v1):\n return math.sqrt(v1[0]**2 + v1[1]**2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return (Fibonacci(n-1) + Fibonacci(n-2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrom(string):\n    reverse_string = string[::-1]\n    if string == reverse_string:\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: john_grade = 85\ngeorge_grade = 90\nsarah_grade = 75\nemily_grade = 95\n\ndef average_grade(john_grade, george_grade, sarah_grade, emily_grade):\n    return (john_grade + george_grade + sarah_grade + emily_grade) / 4\n\navg_grade = average_grade(john_grade, george_grade, sarah_grade, emily_grade)\nprint('The average grade of 4 students is', avg_grade) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for key, value in my_dict.items(): \n  print(f\"{key}: {value}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def lcs(string1, string2):\n n = len(string1)\n m = len(string2)\n\n dp = [[0 for x in range(m + 1)] for x in range(n + 1)] \n\n# fill dp table in bottom up manner \nfor i in range(n + 1): \n for j in range(m + 1): \n   if i == 0 or j == 0: \n    dp[i][j] = 0\n   elif string1[i-1] == string2[j-1]: \n    dp[i][j] = dp[i-1][j-1] + 1\n   else: \n    dp[i][j] = max(dp[i-1][j], dp[i][j-1]) \n\n index = dp[n][m] \n\n# Create an array of size of lcs \nlongest_common_subsequence = [\"\"] * (index + 1) \nlongest_common_subsequence[index] = \"\" \n\n# Start from the right-most-bottom-most corner and \n# one by one store characters in lcs[] \ni = n \nj = m \nwhile i > 0 and j > 0: \n\n\t# If current character in X[] and Y are same, then \n\t# current character is part of LCS \n\tif string1[i-1] == string2[j-1]: \n\t\tlongest_common_subsequence[index - 1] = string1[i-1] \n\t\ti-=1\n\t\tj-=1\n\t\tindex-=1\n\n\t# If not same, then find the larger of two and \n\t# go in the direction of larger value \n\telif dp[i-1][j] > dp[i][j-1]: \n\t\ti-=1\n\telse: \n\t\tj-=1\n\nreturn \"\".join(longest_common_subsequence) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\n# Get the movie title from user input\ntitle = input(\"Enter a movie title: \")\n\n# Make a request to the OMDb API\nurl = \"http://www.omdbapi.com/?t=\" + title + \"&plot=full&apikey=<YOUR_API_KEY>\n\nresponse = requests.get(url)\ndata = response.json()\n\n# Print the synopsis\nprint(\"Synopsis: \" + data[\"Plot\"]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter as tk\n\nwindow = tk.Tk()\nwindow.title('Calculator')\nwindow.geometry('300x150')\n\n# Create the input field\ninput_field = tk.Entry(\n window,\n font=('Courier', 20),\n width=15,\n borderwidth=5\n)\ninput_field.grid(row=0, column=0, columnspan=4, padx=10, pady=10)\n\n# Function to return the value of the button clicked\ndef button_pressed(value):\n current = input_field.get()\n input_field.delete(0, tk.END)\n input_field.insert(0, str(current) + str(value))\n\n# Create button object\nbutton_0 = tk.Button(window, text='0', padx=40, pady=20, command=lambda: button_pressed(0))\nbutton_1 = tk.Button(window, text='1', padx=40, pady=20, command=lambda: button_pressed(1))\nbutton_2 = tk.Button(window, text='2', padx=40, pady=20, command=lambda: button_pressed(2))\nbutton_3 = tk.Button(window, text='3', padx=40, pady=20, command=lambda: button_pressed(3))\nbutton_4 = tk.Button(window, text='4', padx=40, pady=20, command=lambda: button_pressed(4))\nbutton_5 = tk.Button(window, text='5', padx=40, pady=20, command=lambda: button_pressed(5))\nbutton_6 = tk.Button(window, text='6', padx=40, pady=20, command=lambda: button_pressed(6))\nbutton_7 = tk.Button(window, text='7', padx=40, pady=20, command=lambda: button_pressed(7))\nbutton_8 = tk.Button(window, text='8', padx=40, pady=20, command=lambda: button_pressed(8))\nbutton_9 = tk.Button(window, text='9', padx=40, pady=20, command=lambda: button_pressed(9))\nbutton_add = tk.Button(window, text='+', padx=39, pady=20, command=lambda: button_pressed('+'))\nbutton_sub = tk.Button(window, text='-', padx=41, pady=20, command=lambda: button_pressed('-'))\nbutton_mul = tk.Button(window, text='*', padx=40, pady=20, command=lambda: button_pressed('*'))\nbutton_div = tk.Button(window, text='/', padx=41, pady=20, command=lambda: button_pressed('/'))\n\n# Place all the buttons\nbutton_0.grid(row=4, column=0)\nbutton_1.grid(row=3, column=0)\nbutton_2.grid(row=3, column=1)\nbutton_3.grid(row=3, column=2)\nbutton_4.grid(row=2, column=0)\nbutton_5.grid(row=2, column=1)\nbutton_6.grid(row=2, column=2)\nbutton_7.grid(row=1, column=0)\nbutton_8.grid(row=1, column=1)\nbutton_9.grid(row=1, column=2)\nbutton_add.grid(row=4, column=3)\nbutton_sub.grid(row=3, column=3)\nbutton_mul.grid(row=2, column=3)\nbutton_div.grid(row=1, column=3)\n\n# Run the mainloop\nwindow.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef random_number(start, end):\n  return random.randint(start, end) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack:\n    def __init__(self):\n        self.items = []\n        \n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n    \n    def peek(self):\n        return self.items[-1]\n    def isEmpty(self):\n        return self.items == [] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_objects(obj1, obj2):\n    # Compare type\n    if type(obj1) != type(obj2):\n        return False\n    # Compare values\n    if isinstance(obj1, (int, float)):\n        if obj1 != obj2:\n            return False\n    elif isinstance(obj1, str):\n        if obj1 != obj2:\n            return False\n    elif isinstance(obj1, tuple):\n        if obj1 != obj2:\n            return False\n    elif isinstance(obj1, list):\n        if len(obj1) == len(obj2):\n            if all(x == y for x, y in zip(obj1, obj2)):\n                return True\n            else:\n                return False\n    elif isinstance(obj1, dict):\n        if len(obj1) == len(obj2):\n            if obj1 == obj2:\n                return True \n            else:\n                return False\n\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n  \n# Driver Program \nprint(Fibonacci(9)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent(list):\n max_count = 0\n max_item = None\n dict = {} \n for item in list: \n  if (item in dict):  \n    dict[item] += 1\n  else:\n    dict[item] = 1\n \n for key, value in dict.items(): \n  if value > max_count: \n    max_count = value\n    max_item = key\n \n return max_item\n\nlist = [2,2,2,3,3,3,4,6,7,6]\nprint(most_frequent(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(input_list):\n    result = []\n    for ele in input_list:\n        if ele not in result:\n            result.append(ele)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def checkStability(input_string):\n    # Initializing variable to 0\n    stability_level = 0\n\n    # Counting vowels\n    vowels_count = 0 \n    vowel_list = ['a','e','i','o','u']\n    for i in input_string: \n        if i in vowel_list:\n            vowels_count += 1\n\n    # Calculating stability\n    stability_level = vowels_count / len(input_string)\n\n    # Printing out the stability\n    print(\"Stability of string '%s' = %.2f\" %(input_string,stability_level)) \n\ninput_string = \"This is a test sentence!\" \ncheckStability(input_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def selection_sort(arr):\n  \n  # Iterate through array \n  for i in range(0, len(arr)-1): \n    # Find the minimum element in the unsorted subarray \n    min_index = i \n    for j in range(i+1, len(arr)): \n        if arr[min_index] > arr[j]: \n            min_index = j \n  \n    # Swap the found minimum element with the first element         \n    arr[i], arr[min_index] = arr[min_index], arr[i] \n  \n# Driver code \narr = [2, -3, 1, 10, 0] \nselection_sort(arr) \n  \nfor i in range(len(arr)): \n    print(arr[i]), but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def extract_keywords(text):\n # lowercase the text\n text = text.lower()\n \n # split the text into words\n words = text.split(' ')\n \n # create a list to store the keywords\n keywords = []\n \n # iterate over each word and extract keywords\n for word in words:\n # if the word contains more than 3 characters\n # and is not in a stopwords list\n # then it is a keyword\n if len(word) > 3 and word not in stopwords:\n keywords.append(word)\n \n # return the list of keywords\n return keywords \n\nextract_keywords('This is a text string with some important keywords.')\n# => ['text', 'string', 'important', 'keywords'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def permute(s):\n    if len(s) == 1:\n        return [s]\n    permutations = []\n    for i, a in enumerate(s):\n        others = s[:i] + s[i+1:]\n        for p in permute(others):\n            permutations.append(a + p)\n    return permutations but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Goldbach_conjecture(n):\n    assert type(n) == int and n > 0, \"n must be a positive integer.\"\n    if n % 2 != 0:\n        raise ValueError(\"n must be an even number.\")\n    \n\t# list to hold all the prime pairs that add to n\n    prime_pairs = []\n    # find all prime numbers less than n\n    primes = [x for x in range(2, n+1) if isprime(x)]\n    # loop through all prime numbers\n    for prime_x in primes:\n        # check if prime_x added to any prime number less than prime_x \n        # equals n. If true, add that prime pair to the prime_pairs list\n        for prime_y in primes:\n            if prime_y < prime_x and prime_x + prime_y == n:\n                prime_pairs.append((prime_x, prime_y))\n    return prime_pairs\n\ndef isprime(n):\n    # check if n is prime\n    if n < 2:\n        return False\n    if n % 2 == 0 and n > 2: \n        return False\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def decimal_to_binary(num): \n    if num > 1:\n        decimal_to_binary(num//2) \n    print(num % 2,end = '') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_triangle_area(base, height):\n    return 0.5 * base * height\n\nbase = 10\nheight = 15\n\narea = calculate_triangle_area(base, height)\nprint('Area of the triangle: ', area) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nPrint the names of the top 3 numbers in a given list \n\"\"\"\n \nmy_list = [1, 43, 124, 87, 92]\n\n# Sort the list\nmy_list.sort(reverse=True)\n\n# Print the top 3 numbers\nprint(my_list[0], \"is the first biggest number\")\nprint(my_list[1], \"is the second biggest number\")\nprint(my_list[2], \"is the third biggest number\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Set the base URL\nurl = \"https://www.example.com\"\n\n# Keep track of visited URLs\nvisited = set()\n\n# Set of external URLs\nurls_external = set()\n\n# Perform the crawl\ndef crawl():\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    internal_urls = set()\n\n    # Find all links on the page\n    for link in soup.find_all('a'):\n        if url.startswith(url):\n            internal_urls.add(link['href'])\n        else:\n            urls_external.add(link['href'])\n    \n    # Recursively crawl all internal URLs\n    for internal_url in internal_urls:\n        if internal_url not in visited:\n            visited.add(internal_url)\n            crawl(internal_url)\n\ncrawl() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sumPairs(list_of_numbers, target_number):\n    result = []\n    for i in range(len(list_of_numbers)):\n        for j in range(i+1, len(list_of_numbers)):\n            if list_of_numbers[i] + list_of_numbers[j] == target_number:\n                result.append([list_of_numbers[i], list_of_numbers[j]])\n    return result\n\nlist_of_numbers = [3, 5, 7, 8, 12]\ntarget_number = 11\nprint(sumPairs(list_of_numbers, target_number)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nDesign a Python program to optimize the operation of a robot\n\nThis program will take a function that maps the robot's movement from one cell to another in an environment, as well as a data structure that represents the cost associated with each cell as its input. The program will return an optimal path for the robot to take from a start cell to an end cell while minimizing its cost.\n\n\"\"\"\n\ndef optimize_robot(map_func, cost_map):\n    pass but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(a, b): \n    if a == 0: \n        return b \n    return gcd(b % a, a) \n  \n# Function to return gcd of a and b \ndef compute_gcd(x, y): \n  \n   while(y): \n       x, y = y, x % y \n  \n   return x but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nPython script to generate a load testing report for a given website\n\"\"\"\n\nimport requests\nimport json\n\ndef generate_report(url):\n    # Send a request to the given URL\n    response = requests.get(url)\n\n    # Get the request duration\n    duration = response.elapsed.total_seconds()\n\n    # Generate the report as a dictionary\n    report = {\n        'URL': url,\n        'StatusCode': response.status_code,\n        'Duration': duration\n    }\n\n    return report\n\nif __name__ == '__main__':\n    url = 'http://example.com'\n    report = generate_report(url)\n    print(json.dumps(report, indent=4)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #! /usr/bin/env python\n# -*- Python -*-\n\n####################################################################################################\n\nimport argparse\nimport sys\n\nimport numpy as np\n\nimport mupdf as cmupdf\nfrom MuPDF import *\n\nfrom PyQt4 import QtCore, QtGui\n\n####################################################################################################\n\ndef show_metadata(ctx, doc):\n\n    for key in (\n        'Title',\n        'Subject',\n        'Author',\n        'Creator',\n        'Producer',\n        'CreationDate',\n        'ModDate',\n        ):\n        print cmupdf.get_meta_info(doc, key, 1024)\n    \n    fz_buffer = cmupdf.pdf_metadata(doc)\n    print cmupdf.fz_buffer_data(fz_buffer)\n    cmupdf.fz_drop_buffer(ctx, fz_buffer)\n\n####################################################################################################\n\ndef show_pdf(np_array):\n\n    application = QtGui.QApplication(sys.argv)\n\n    height, width = np_array.shape[:2]\n    image = QtGui.QImage(np_array.data, width, height, QtGui.QImage.Format_ARGB32)\n\n    label = QtGui.QLabel()\n    label.setPixmap(QtGui.QPixmap.fromImage(image))\n\n    area = QtGui.QScrollArea()\n    area.setWidget(label)\n    area.setWindowTitle(args.filename)\n    area.show()\n\n    application.exec_()\n\n####################################################################################################\n\ndef get_font_name(font):\n\n    font_name = cmupdf.get_font_name(font)\n    i = font_name.find('+')\n    if i:\n        font_name = font_name[i+1:] \n\n    return font_name\n\n####################################################################################################\n\ndef dump_bbox(obj):\n\n    return \"[%g %g %g %g]\" % (obj.bbox.x0, obj.bbox.y0,\n                              obj.bbox.x1, obj.bbox.y1)\n\n####################################################################################################\n\ndef dump_text_style(text_sheet):\n\n    style = text_sheet.style\n    while style:\n        font = style.font\n        message = \"span.s%u{font-family:\\\"%s\\\";font-size:%gpt\" % (style.id, get_font_name(font), style.size)\n        if cmupdf.font_is_italic(font):\n            message += ';font-style:italic'\n        if cmupdf.font_is_bold(font):\n            message += ';font-weight:bold;'\n        message += '}'\n        print message\n        style = style.next\n\n####################################################################################################\n\ndef dump_text_page_xml(text_page):\n\n    print \"<page>\"\n    for block in TextBlockIterator(text_page):\n        print \"<block bbox=\\\"\" + dump_bbox(block) + \"\\\">\"\n        for line in TextLineIterator(block):\n            print \" \"*2 + \"<line bbox=\\\"\" + dump_bbox(line) + \"\\\">\"\n            for span in TextSpanIterator(line):\n                print \" \"*4 + \"<span bbox=\\\"\" + dump_bbox(span) + \"\\\" \\\">\"\n                for ch in TextCharIterator(span):\n                    style = ch.style\n                    font_name = get_font_name(style.font)\n                    print \" \"*6 + \"<char \" + \\\n                        u\" c=\\\"%s\\\" font=\\\"%s\\\" size=\\\"%g\\\"/>\" % (unichr(ch.c), font_name, style.size)\n                print \" \"*4 + \"</span>\"\n            print \" \"*2 + \"</line>\"\n        print \"</block>\"\n    print \"</page>\"\n\n\n####################################################################################################\n\ndef dump_text_page(text_page):\n\n    empty_block = False\n    for block in TextBlockIterator(text_page):\n        if not empty_block:\n            print '\\n<Block>'\n        empty_block = True\n        for line in TextLineIterator(block):\n            line_text = u''\n            for span in TextSpanIterator(line):\n                span_text = u''\n                for ch in TextCharIterator(span):\n                    span_text += unichr(ch.c)\n                span_text = span_text.rstrip()\n                if span_text:\n                    line_text += '<Span>' + span_text + '</Span>'\n                else:\n                    line_text += '<Empty Span>'\n            if line_text:\n                print line_text\n                empty_block = False\n\n####################################################################################################\n\nclass GrowingTextBrowser(QtGui.QTextBrowser):\n\n    _id = 0\n\n    ##############################################\n\n    def __init__(self, *args, **kwargs):\n\n        GrowingTextBrowser._id += 1\n        self._id = GrowingTextBrowser._id\n\n        super(GrowingTextBrowser, self).__init__(*args, **kwargs)  \n        size_policy = QtGui.QSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Fixed)\n        size_policy.setHeightForWidth(True)\n        self.setSizePolicy(size_policy)\n        self.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)\n\n    ##############################################\n\n    def setPlainText(self, text):\n\n        super(GrowingTextBrowser, self).setPlainText(text)\n        self._text = text\n\n    ##############################################\n\n    def print_document_size(self, document=None):\n\n        if document is None:\n            document = self.document()\n        document_size = document.size()\n        print \"Document width\", document_size.width(), 'height', document_size.height()\n\n    ##############################################\n\n    def sizePolicy(self):\n\n        size_policy = super(GrowingTextBrowser, self).sizePolicy()\n        print 'GrowingTextBrowser.sizePolicy', self._id, \\\n            size_policy.horizontalPolicy(), size_policy.verticalPolicy()\n        return size_policy\n\n    ##############################################\n\n    def sizeHint(self):\n\n        size = super(GrowingTextBrowser, self).sizeHint()\n        print 'GrowingTextBrowser.sizeHint', self._id, size.width(), size.height()\n        return QtCore.QSize(0, 0)\n\n    ##############################################\n\n    def minimumSizeHint(self):\n\n        size = super(GrowingTextBrowser, self).minimumSizeHint()\n        print 'GrowingTextBrowser.minimumSizeHint', self._id, size.width(), size.height()\n        return QtCore.QSize(0, 0)\n\n    ##############################################\n\n    def heightForWidth(self, width):\n\n        print 'GrowingTextBrowser.heightForWidth', self._id, width\n        document = QtGui.QTextDocument(self._text)\n        document.setPageSize(QtCore.QSizeF(width, -1))\n        height = document.documentLayout().documentSize().toSize().height()\n        self.print_document_size(document)\n        return height + self.font().pointSize()\n\n    ##############################################\n\n    def resizeEvent(self, event):\n\n        print 'GrowingTextBrowser.resizeEvent', self._id, \\\n            'old', event.oldSize().width(), event.oldSize().height(), \\\n            'new', event.size().width(), event.size().height()\n        self.print_document_size()\n        return super(GrowingTextBrowser, self).resizeEvent(event)\n\n####################################################################################################\n\ndef append_block(parent, vertical_layout, source_text):\n\n    text_browser = GrowingTextBrowser(parent)\n    text_browser.setPlainText(source_text)\n    # vertical_layout.addWidget(text_browser)\n    horizontal_layout = QtGui.QHBoxLayout()\n    horizontal_layout.addWidget(text_browser, 0, QtCore.Qt.AlignTop)\n    vertical_layout.addLayout(horizontal_layout)\n\ndef show_text_page(text_page):\n\n    application = QtGui.QApplication(sys.argv)\n\n    main_window = QtGui.QMainWindow()\n    main_window.resize(1000, 800)\n    main_window.setWindowTitle(args.filename)\n\n    scroll_area = QtGui.QScrollArea(main_window)\n    # scroll_area.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)\n    scroll_area.setWidgetResizable(True)\n    main_window.setCentralWidget(scroll_area)\n\n    container_widget = QtGui.QWidget()\n    vertical_layout = QtGui.QVBoxLayout(container_widget) # Set container_widget layout\n    scroll_area.setWidget(container_widget)\n\n    for block in TextBlockIterator(text_page):\n        block_text = u''\n        for line in TextLineIterator(block):\n            line_text = u''\n            for span in TextSpanIterator(line):\n                span_text = u''\n                for ch in TextCharIterator(span):\n                    span_text += unichr(ch.c)\n                span_text = span_text.rstrip()\n                if span_text: # Append span to line\n                    line_text += span_text\n                else: # Empty span then append a block\n                    if block_text:\n                        append_block(container_widget, vertical_layout, block_text)\n                    block_text = u''\n                    line_text = u''\n            # Append line to block\n            if block_text:\n                block_text += ' '\n            block_text += line_text\n        if block_text:\n            append_block(container_widget, vertical_layout, block_text)\n\n    spacer_item = QtGui.QSpacerItem(0, 0, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)\n    vertical_layout.addItem(spacer_item)\n\n    print 'Show'\n    #main_window.show()\n    main_window.showMaximized()\n    application.exec_()\n\n####################################################################################################\n\nargument_parser = argparse.ArgumentParser(description='Example.')\n\nargument_parser.add_argument('filename', metavar='FILENAME',\n                             help='PDF file')\n\nargument_parser.add_argument('--page', dest='page_number',\n                             type=int,\n                             default=1,\n                             help='Page number')\n\nargument_parser.add_argument('--zoom', dest='zoom',\n                             type=int,\n                             default=100,\n                             help='Zoom factor in %%')\n\nargument_parser.add_argument('--rotation', dest='rotation',\n                             type=int,\n                             default=0,\n                             help='Rotation')\n\nargs = argument_parser.parse_args()\n\n####################################################################################################\n\n# Create a context to hold the exception stack and various caches.\nctx = cmupdf.fz_new_context(None, None, cmupdf.FZ_STORE_UNLIMITED)\n\n####################################################################################################\n\n# Open the PDF, XPS or CBZ document.\ndoc = cmupdf.fz_open_document(ctx, args.filename)\n\nshow_metadata(ctx, doc)\n\n####################################################################################################\n\n# Retrieve the number of pages (not used in this example).\npage_count = cmupdf.fz_count_pages(doc)\n\n# Load the page we want. Page numbering starts from zero.\npage = cmupdf.fz_load_page(doc, args.page_number -1)\n\n####################################################################################################\n\n# Calculate a transform to use when rendering. This transform contains the scale and\n# rotation. Convert zoom percentage to a scaling factor. Without scaling the resolution is 72 dpi.\ntransform = cmupdf.fz_matrix_s()\ncmupdf.fz_rotate(transform, args.rotation)\ncmupdf.fz_pre_scale(transform, args.zoom / 100.0, args.zoom / 100.0)\n\n# Take the page bounds and transform them by the same matrix that we will use to render the page.\nbounds = cmupdf.fz_rect_s()\ncmupdf.fz_bound_page(doc, page, bounds)\ncmupdf.fz_transform_rect(bounds, transform)\n\n####################################################################################################\n\n# A page consists of a series of objects (text, line art, images, gradients). These objects are\n# passed to a device when the interpreter runs the page. There are several devices, used for\n# different purposes:\n#\n#\tdraw device -- renders objects to a target pixmap.\n#\n#\ttext device -- extracts the text in reading order with styling\n#\tinformation. This text can be used to provide text search.\n#\n#\tlist device -- records the graphic objects in a list that can\n#\tbe played back through another device. This is useful if you\n#\tneed to run the same page through multiple devices, without\n#\tthe overhead of parsing the page each time.\n\n####################################################################################################\n\n# Create a blank pixmap to hold the result of rendering. The pixmap bounds used here are the same as\n# the transformed page bounds, so it will contain the entire page. The page coordinate space has the\n# origin at the top left corner and the x axis extends to the right and the y axis extends down.\nbbox = cmupdf.fz_irect_s()\ncmupdf.fz_round_rect(bbox, bounds)\nwidth, height = bbox.x1 - bbox.x0, bbox.y1 - bbox.y0\nnp_array = np.zeros((height, width, 4), dtype=np.uint8)\n# pixmap = cmupdf.fz_new_pixmap_with_bbox(ctx, cmupdf.get_fz_device_rgb(), bbox)\npixmap = cmupdf.fz_new_pixmap_with_bbox_and_data(ctx, cmupdf.fz_device_rgb(ctx), bbox,\n                                                 cmupdf.numpy_to_pixmap(np_array))\ncmupdf.fz_clear_pixmap_with_value(ctx, pixmap, 0xff)\n\n# Create a draw device with the pixmap as its target.\n# Run the page with the transform.\ndevice = cmupdf.fz_new_draw_device(ctx, pixmap)\ncmupdf.fz_set_aa_level(ctx, 8)\ncmupdf.fz_run_page(doc, page, device, transform, None)\ncmupdf.fz_free_device(device)\n\nif True:\n    show_pdf(np_array)\n\nif False:\n    # Save the pixmap to a file.\n    cmupdf.fz_write_png(ctx, pixmap, \"out.png\", 0)\n\n####################################################################################################\n\ntext_sheet = cmupdf.fz_new_text_sheet(ctx)\ntext_page = cmupdf.fz_new_text_page(ctx)\n\ndevice = cmupdf.fz_new_text_device(ctx, text_sheet, text_page)\ncmupdf.fz_run_page(doc, page, device, transform, None)\ncmupdf.fz_free_device(device)\n\nif False:\n    # Dump text style and page.\n    dump_text_style(text_sheet)\n    dump_text_page_xml(text_page)\n\nif True:\n    dump_text_page(text_page)\n    show_text_page(text_page)\n\nif False:\n    file_handler = cmupdf.fz_fopen(\"out.css\", \"w+\")\n    output_file = cmupdf.fz_new_output_with_file(ctx, file_handler)\n    cmupdf.fz_print_text_sheet(ctx, output_file, text_sheet)\n    cmupdf.fz_close_output(output_file)\n    cmupdf.fz_fclose(file_handler)\n\n    output_file = cmupdf.fz_fopen(\"out.txt\", \"w+\")\n    output_file = cmupdf.fz_new_output_with_file(ctx, file_handler)\n    # cmupdf.fz_print_text_page(ctx, output_file, text_page)\n    # cmupdf.fz_print_text_page_html(ctx, output_file, text_page)\n    cmupdf.fz_print_text_page_xml(ctx, output_file, text_page)\n    cmupdf.fz_close_output(output_file)\n    cmupdf.fz_fclose(file_handler)\n\n####################################################################################################\n\n# Clean up.\ncmupdf.fz_free_text_sheet(ctx, text_sheet)\ncmupdf.fz_free_text_page(ctx, text_page)\ncmupdf.fz_drop_pixmap(ctx, pixmap)\ncmupdf.fz_free_page(doc, page)\ncmupdf.fz_close_document(doc)\ncmupdf.fz_free_context(ctx)\n\n####################################################################################################\n# \n# End\n# \n####################################################################################################\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers = [9, 2, 4, 7, 6]\nnumbers.sort(reverse=True)\nprint(numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def freq_char_dict(dict, str): \n    for char in str: \n        dict[char] += 1\n    return dict\n  \ndict = {'a': 0, 'b': 0, 'c': 0} \nstr = 'abacab'\nprint(freq_char_dict(dict, str)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_char_count(s):\n    \"\"\"\n    This function returns a dictionary of character count in a given string.\n    :param s: string\n    :return: dictionary\n    \"\"\"\n    char_count = dict()\n    for char in s:\n        if char not in char_count.keys():\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n    return char_count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: input_str = \"madamabcdcba\"\n\ndef find_palindromes(input_str):\n palindromes = []\n for i in range(len(input_str)):\n  for j in range(i+1, len(input_str)):\n   curr_str = input_str[i:j+1]\n   if curr_str == curr_str[::-1]:\n    palindromes.append(curr_str)\n return palindromes\n\nprint(find_palindromes(input_str))\n\n# Output: ['madam', 'aba', 'bcdbcd', 'cba'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(string):\n    reversed_string = \"\"\n    for i in range(len(string) - 1, -1, -1):\n        reversed_string += string[i]\n    return reversed_string\n\nstring = \"Hello World!\" \nreverse_string(string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr)//2\n        left = arr[:mid]\n        right = arr[mid:]\n\n        merge_sort(left)\n        merge_sort(right)\n\n        i = j = k = 0\n        while i < len(left) and j < len(right):\n            if left[i] > right[j]: # descending order\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n            k += 1\n\n        while i < len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n\n        while j < len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1\n\n\nl = [3, 7, 9, 1, 2, 8]\nmerge_sort(l)\n\nprint(l)\n\n# Output: [9, 8, 7, 3, 2, 1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef scrambleString(string):\n  # Split the string into a list\n  chars = list(string)\n\n  # Shuffle the list\n  random.shuffle(chars)\n\n  # Join the list to form the scrambled string\n  scrambled = \"\".join(chars)\n\n  return scrambled\n\n# Create the string\nstring = \"Hello World\"\n\n# Scramble the string\nscrambled = scrambleString(string)\n\n# Print the result\nprint(scrambled) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_website(url):\n    response = requests.get(url)\n    html = response.text\n \n    soup = BeautifulSoup(html, 'html.parser')\n    return soup\n\nif __name__ == '__main__':\n    url = 'https://www.example.com/'\n    soup = scrape_website(url)\n    print(soup) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(len(string)):\n    print(ord(string[i]))  # Output: 72, 101, 108, 108, 111 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generateSentence(limit = None):\n    words = ['Hello', 'World', 'He', 'She', 'They', 'Good', 'Bad']\n    sentence = ''\n    counter = 0\n    for i in range(len(words)):\n        if not limit or counter < limit:\n            sentence += words[i] + ' '\n            counter += 1\n        else:\n            break\n    return sentence but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_two_ints(a,b): \n    if (a % 2 == 0 and b % 2 == 0): \n        return a+b \n    else: \n        return \"Wrong input\"\n\nprint(sum_of_two_ints(num1,num2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nnumbers = []\n\nfor i in range(10):\n number = random.randint(1, 100)\n numbers.append(number)\n \nprint(numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_n_natural_numbers_recursive(n, s=0):\n    if n == 0:\n        return s\n    \n    s += n\n    return sum_of_n_natural_numbers_recursive(n-1, s)\n\nresult = sum_of_n_natural_numbers_recursive(10)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The yield keyword in Python is used to create generator functions. A generator function is a special type of function where it can yield multiple values in steps instead of a single return statement. Each time the function yields, the state of the function is saved, and the next time the function is called, the function continues from where it left off. This allows for efficient code that uses less memory because the variables are not stored in memory but are instead recalled every time the function is called. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\n# Create database\ndb = sqlite3.connect('test.db')\n\nc = db.cursor() \n    \n# Create table\nc.execute('DROP TABLE IF EXISTS person')\n\nc.execute('''\n        CREATE TABLE person(\n        name TEXT,\n        age INTEGER,\n        address TEXT\n        )\n        ''') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_armstrong(num): \n    n = len(str(num)) \n    total = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        total += digit**n\n        temp //= 10\n    if num == total:\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n \nimport cgi\n \n#Get form data\nform = cgi.FieldStorage()\n \nname = form.getvalue('name')\nage = form.getvalue('age')\n\n# Display the results\nprint \"Content-type: text/html\"\nprint\nprint \"<html>\"\nprint \"<body>\"\nprint \"<p>Hi, %s! You are %s years old.</p>\" % (name, age)\nprint \"</body>\"\nprint \"</html>\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\n\n# Load the text\ntext = \"The conference was an incredible success. All the participants were thrilled and delighted with the outcome.\"\n\n# Tokenize the text\ntokens = nltk.word_tokenize(text)\n\n# Add sentiment scores to each token\nscores = [0.8, 0.7, 0.7, 0.5, 0.6, 0.9, 0.2, 0.3, 0.8, 0.9, 0.9, 0.6]\n\n# Create groups based on the sentiment scores\npositive_words = list(filter(lambda x: x[1] > 0.6, zip(tokens, scores)))\nneutral_words = list(filter(lambda x: 0.3 <= x[1] <= 0.6, zip(tokens, scores)))\nnegative_words = list(filter(lambda x: x[1] < 0.3, zip(tokens, scores)))\n\n# Print the group results\nprint('Positive words:')\nfor word in positive_words:\n print(word[0])\n\nprint('\\nNeutral words:')\nfor word in neutral_words:\n print(word[0])\n\nprint('\\nNegative words:')\nfor word in negative_words:\n print(word[0]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef validate_email(email):\n    regex = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'\n    if re.search(regex, email):\n        return True\n    else:\n        return False\n\nvalid = validate_email('example@domain.com')\nprint(valid) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def intersection(list1, list2):\n    intersection = [value for value in list1 if value in list2]\n    return intersection\n\nlist1 = [1,2,3,4,5]\nlist2 = [4,5,6,7,8]\nresult = intersection(list1, list2)\nprint(result) # prints [4,5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def min_max(list):\n    min_val = max_val = list[0]\n    for value in list[1:]:\n        if value < min_val:\n            min_val = value\n        elif value > max_val:\n            max_val = value\n    return (min_val, max_val) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class HealthData:\n    def __init__(self, month, calories, minutes):\n        self.month = month\n        self.calories = calories\n        self.minutes = minutes but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Order:\n def __init__(self, customer_name, customer_address, order_items):\n self.customer_name = customer_name \n self.customer_address = customer_address\n self.order_items = order_items\n \n def get_order_details(self):\n return f\"Customer name: {self.customer_name}, Address: {self.customer_address}, Order items: {self.order_items}\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class TreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_char(string, char):\n  return string.replace(char, '') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import heapq\ndef online_median(numbers):\n    \n    small = [] \n    large = []\n    medians = []\n    \n    for x in numbers:\n        heapq.heappush(small, -heapq.heappushpop(large, x))\n        if len(large) < len(small):\n            heapq.heappush(large, -heapq.heappop(small))\n        medians.append(0.5 * (large[0] + (-small[0])) if len(large) > len(small)  else large[0])\n    \n    return medians but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quick_sort(arr):\n    \"\"\"Sort an array using the quick sort algorithm.\"\"\"\n    # Base case: array of length 0 or 1 is already sorted\n    if len(arr) <= 1:\n        return arr\n    \n    # Choose a pivot element\n    pivot = arr[0]\n    \n    # Create two lists to hold elements greater or less than the pivot\n    less_than_pivot = []\n    greater_than_pivot = []\n    \n    # Compare each element in the array to the pivot\n    for elem in arr:\n        if elem < pivot:\n            less_than_pivot.append(elem)\n        elif elem > pivot:\n            greater_than_pivot.append(elem)\n            \n    # Recursively sort the two lists\n    less_than_pivot = quick_sort(less_than_pivot)\n    greater_than_pivot = quick_sort(greater_than_pivot)\n    \n    # Combine the two lists with the pivot in the middle\n    sorted_arr = less_than_pivot + [pivot] + greater_than_pivot\n    return sorted_arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nrandom_numbers = []\n\nfor i in range(10):\n    random_numbers.append(random.randint(0,10))\n\nprint(random_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter as tk\n\nroot = tk.Tk()\nroot.title('Sum Application')\n\nnum1 = tk.StringVar()\nnum2 = tk.StringVar()\n\ndef calculate():\n    try:\n        result = int(num1.get()) + int(num2.get())\n        sumLabel.configure(text=\"The sum is %d\" % result)\n    except ValueError:\n        sumLabel.configure(text=\"Please enter numbers\")\n\nnum1Field = tk.Entry(root, width=10, textvariable=num1)\nnum2Field = tk.Entry(root, width=10, textvariable=num2)\n\nsumButton = tk.Button(root, text=\"Sum\", command=calculate)\nsumLabel = tk.Label(root, text=\"\")\n\nnum1Field.grid(row=0, column=0)\nnum2Field.grid(row=0, column=1)\nsumButton.grid(row=1, column=0, columnspan=2)\nsumLabel.grid(row=2, column=0, columnspan=2)\n\nroot.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_sum(n):\n    \"\"\"Function to calculate the sum of the first n numbers.\"\"\"\n    sum = 0\n    while n > 0:\n        sum = sum + n\n        n = n - 1\n    return sum\n\nif __name__ == \"__main__\":\n    n = 5 \n    result = calculate_sum(n)\n    print(\"The sum is\", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_total_cost(price, quantity):\n  return price * quantity\n\ntotal_cost = get_total_cost(price, quantity)\nprint(total_cost) #prints 30.00 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nThis code creates a new dictionary with the specified keys and values \n\"\"\"\n\nmy_dict = {\n    \"name\" : \"John\",\n    \"age\" : 25,\n    \"occupation\" : \"Engineer\"\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merging_lists(list1, list2):\n    # Merge two sorted lists\n    merged_list = []\n    i, j = 0, 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] <= list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    # Add any leftover items from the original lists\n    merged_list.extend(list1[i:])\n    merged_list.extend(list2[j:])\n \n    return merged_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from selenium import webdriver\n\n# open web browser\ndriver = webdriver.Chrome()\ndriver.get(\"https://example.com/form\")\n\n# fill out form\nname_field = driver.find_element_by_id(\"name\")\nname_field.send_keys(\"Joseph Smith\")\n\naddress_field = driver.find_element_by_id(\"address\")\naddress_field.send_keys(\"123 Main Street\")\n\ncity_field = driver.find_element_by_id(\"city\")\ncity_field.send_keys(\"New York\")\n\nstate_field = driver.find_element_by_id(\"state\")\nstate_field.send_keys(\"NY\")\n\nzip_field = driver.find_element_by_id(\"zip\")\nzip_field.send_keys(\"12345\")\n\ncountry_field = driver.find_element_by_id(\"country\")\ncountry_field.send_keys(\"United States\")\n\n# submit form\nsubmit_button = driver.find_element_by_id(\"submit\")\nsubmit_button.click() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent_element(list):\n\t# Create a dictionary to store the count of each element\n\telement_counts = {}\n\n\t# Iterate over the elements of the list\n\tfor element in list:\n\t\t# Update the count in the dictionary\n\t\tif element in element_counts:\n\t\t\telement_counts[element] += 1\n\t\telse:\n\t\t\telement_counts[element] = 1\n\n\t# Find the most frequent element by comparing counts\n\tmost_frequent_element = None\n\tmost_frequent_count = 0\n\tfor element, count in element_counts.items():\n\t\tif count > most_frequent_count:\n\t\t\tmost_frequent_element = element\n\t\t\tmost_frequent_count = count\n\n\t# Return the most frequent element\n\treturn most_frequent_element but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name, age, grade, courses):\n        self.name = name\n        self.age = age\n        self.grade = grade\n        self.courses = courses\n\n    def enroll_in_course(self, course):\n        self.courses.append(course)\n\n    def get_grade(self):\n        return self.grade but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \nimport sqlite3 \n\n# Define the API endpoint \nAPI_ENDPOINT = \"http://example.com/api\"\n\n# Connect to the Database \nconn = sqlite3.connect('MyData.db')\nc = conn.cursor()\n\n# Make sure we have the right schema \nc.execute(\"CREATE TABLE IF NOT EXISTS data (data TEXT)\")\n\n# Fetch the data from the API \nr = requests.get(API_ENDPOINT)\ndata = r.json()\n\n# Save the data to the Database \nc.execute(\"INSERT INTO data VALUES (?)\", (data,))\nconn.commit()\n\n# Close the connection \nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\n\n# Input image dimensions\nimg_rows, img_cols = 28, 28\n\n# Load the dataset\n(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()\n\n# Reshape data\nx_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)\nx_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)\ninput_shape = (img_rows, img_cols, 1)\n\n# Normalize data\nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\nx_train /= 255\nx_test /= 255\n\n# Create model\nmodel = Sequential()\n\n# Set layers\nmodel.add(Conv2D(32, kernel_size=(3, 3),\n\tactivation='relu',\n\tinput_shape=input_shape))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))\n\n# Compile model\nmodel.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=keras.optimizers.Adadelta(),\n              metrics=['accuracy'])\n\n# Fit model\nmodel.fit(x_train, y_train,\n          batch_size=128,\n          epochs=10,\n          verbose=1,\n          validation_data=(x_test, y_test)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import necessary libraries\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# Construct feature and label data\n# Feature (independent variable): days of the week\nfeatures = [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]]\n# Label (dependent vaiable): number of riders\nlabels = [[10, 15, 20, 25, 35, 50], [12, 18, 15, 24, 40, 57]]\n# Reformat data as arrays\nX = np.array(features)\ny = np.array(labels)\n# Split train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Create model\nmodel = LinearRegression()\n# Train model\nmodel.fit(X_train, y_train)\n# Make predictions\ny_pred = model.predict(X_test)\n# Evaluate model\nscore = model.score(X_test, y_test)\nprint(f'Model score: {score}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndef parse_json(json_string):\n result = json.loads(json_string)\n return result\n\njson_string = '{\"name\": \"John Doe\",\"age\": 33,\"hobbies\": [\"cooking\",\"travel\",\"reading\"]}'\nresult = parse_json(json_string)\n\nprint(result)\n# Output {'name': 'John Doe', 'age': 33, 'hobbies': ['cooking', 'travel', 'reading']} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # ex:ts=4:sw=4:sts=4:et\n# -*- tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*-\nfrom __future__ import absolute_import\nimport re\nimport os\nimport xml.etree.ElementTree as ET\nimport json\nimport copy\n\nfrom svtplay_dl.utils.urllib import urlparse, parse_qs, quote_plus\nfrom svtplay_dl.service import Service, OpenGraphThumbMixin\nfrom svtplay_dl.utils import is_py2_old, filenamify\nfrom svtplay_dl.log import log\nfrom svtplay_dl.fetcher.hls import hlsparse, HLS\nfrom svtplay_dl.fetcher.rtmp import RTMP\nfrom svtplay_dl.fetcher.hds import hdsparse\nfrom svtplay_dl.subtitle import subtitle\nfrom svtplay_dl.error import ServiceError\n\n\nclass Tv4play(Service, OpenGraphThumbMixin):\n    supported_domains = ['tv4play.se', 'tv4.se']\n\n    def __init__(self, url):\n        Service.__init__(self, url)\n        self.subtitle = None\n        self.cookies = {}\n\n    def get(self, options):\n        data = self.get_urldata()\n\n        vid = findvid(self.url, data)\n        if vid is None:\n            yield ServiceError(\"Can't find video id for %s\" % self.url)\n            return\n\n        if options.username and options.password:\n            data = self.http.request(\"get\", \"https://www.tv4play.se/session/new?https=\")\n            auth_token = re.search('name=\"authenticity_token\" ([a-z]+=\"[^\"]+\" )?value=\"([^\"]+)\"', data.text)\n            if not auth_token:\n                yield ServiceError(\"Can't find authenticity_token needed for user / password\")\n                return\n            url = \"https://www.tv4play.se/session\"\n            postdata = {\"user_name\" : options.username, \"password\": options.password, \"authenticity_token\":auth_token.group(2), \"https\": \"\"}\n            data = self.http.request(\"post\", url, data=postdata, cookies=self.cookies)\n            self.cookies = data.cookies\n            fail = re.search(\"<p class='failed-login'>([^<]+)</p>\", data.text)\n            if fail:\n                yield ServiceError(fail.group(1))\n                return\n        url = \"http://premium.tv4play.se/api/web/asset/%s/play\" % vid\n        data = self.http.request(\"get\", url, cookies=self.cookies)\n        if data.status_code == 401:\n            xml = ET.XML(data.content)\n            code = xml.find(\"code\").text\n            if code == \"SESSION_NOT_AUTHENTICATED\":\n                yield ServiceError(\"Can't access premium content\")\n            elif code == \"ASSET_PLAYBACK_INVALID_GEO_LOCATION\":\n                yield ServiceError(\"Can't downoad this video because of geoblocked.\")\n            else:\n                yield ServiceError(\"Can't find any info for that video\")\n            return\n        if data.status_code == 404:\n            yield ServiceError(\"Can't find the video api\")\n            return\n        xml = ET.XML(data.content)\n        ss = xml.find(\"items\")\n        if is_py2_old:\n            sa = list(ss.getiterator(\"item\"))\n        else:\n            sa = list(ss.iter(\"item\"))\n\n        if xml.find(\"live\").text:\n            if xml.find(\"live\").text != \"false\":\n                options.live = True\n        if xml.find(\"drmProtected\").text == \"true\":\n            yield ServiceError(\"We cant download DRM protected content from this site.\")\n            return\n\n        if options.output_auto:\n            directory = os.path.dirname(options.output)\n            options.service = \"tv4play\"\n            title = \"%s-%s-%s\" % (options.output, vid, options.service)\n            title = filenamify(title)\n            if len(directory):\n                options.output = os.path.join(directory, title)\n            else:\n                options.output = title\n\n        if self.exclude(options):\n            yield ServiceError(\"Excluding video\")\n            return\n\n        for i in sa:\n            if i.find(\"mediaFormat\").text == \"mp4\":\n                base = urlparse(i.find(\"base\").text)\n                parse = urlparse(i.find(\"url\").text)\n                if \"rtmp\" in base.scheme:\n                    swf = \"http://www.tv4play.se/flash/tv4playflashlets.swf\"\n                    options.other = \"-W %s -y %s\" % (swf, i.find(\"url\").text)\n                    yield RTMP(copy.copy(options), i.find(\"base\").text, i.find(\"bitrate\").text)\n                elif parse.path[len(parse.path)-3:len(parse.path)] == \"f4m\":\n                    streams = hdsparse(copy.copy(options), self.http.request(\"get\", i.find(\"url\").text, params={\"hdcore\": \"3.7.0\"}).text, i.find(\"url\").text)\n                    if streams:\n                        for n in list(streams.keys()):\n                            yield streams[n]\n            elif i.find(\"mediaFormat\").text == \"smi\":\n                yield subtitle(copy.copy(options), \"smi\", i.find(\"url\").text)\n\n        url = \"http://premium.tv4play.se/api/web/asset/%s/play?protocol=hls\" % vid\n        data = self.http.request(\"get\", url, cookies=self.cookies).content\n        xml = ET.XML(data)\n        ss = xml.find(\"items\")\n        if is_py2_old:\n            sa = list(ss.getiterator(\"item\"))\n        else:\n            sa = list(ss.iter(\"item\"))\n        for i in sa:\n            if i.find(\"mediaFormat\").text == \"mp4\":\n                parse = urlparse(i.find(\"url\").text)\n                if parse.path.endswith(\"m3u8\"):\n                    streams = hlsparse(i.find(\"url\").text, self.http.request(\"get\", i.find(\"url\").text).text)\n                    for n in list(streams.keys()):\n                        yield HLS(copy.copy(options), streams[n], n)\n\n    def find_all_episodes(self, options):\n        parse = urlparse(self.url)\n        show = parse.path[parse.path.find(\"/\", 1)+1:]\n        if not re.search(\"%\", show):\n            show = quote_plus(show)\n        data = self.http.request(\"get\", \"http://webapi.tv4play.se/play/video_assets?type=episode&is_live=false&platform=web&node_nids=%s&per_page=99999\" % show).text\n        jsondata = json.loads(data)\n        episodes = []\n        n = 1\n        for i in jsondata[\"results\"]:\n            try:\n                days = int(i[\"availability\"][\"availability_group_free\"])\n            except (ValueError, TypeError):\n                days = 999\n            if days > 0:\n                video_id = i[\"id\"]\n                url = \"http://www.tv4play.se/program/%s?video_id=%s\" % (\n                    show, video_id)\n                episodes.append(url)\n                if n == options.all_last:\n                    break\n                n += 1\n\n        return episodes\n\n\ndef findvid(url, data):\n    parse = urlparse(url)\n    if \"tv4play.se\" in url:\n        try:\n            vid = parse_qs(parse.query)[\"video_id\"][0]\n        except KeyError:\n            return None\n    else:\n        match = re.search(r\"\\\"vid\\\":\\\"(\\d+)\\\",\", data)\n        if match:\n            vid = match.group(1)\n        else:\n            match = re.search(r\"-(\\d+)$\", url)\n            if match:\n                vid = match.group(1)\n            else:\n                match = re.search(r\"meta content='([^']+)' property='og:video'\", data)\n                if match:\n                    match = re.search(r\"vid=(\\d+)&\", match.group(1))\n                    if match:\n                        vid = match.group(1)\n                    else:\n                        log.error(\"Can't find video id for %s\", url)\n                        return\n                else:\n                    return None\n    return vid but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport argparse\nimport operator\nimport random\nimport sys\n\n\ndef get_parser():\n\tparser = argparse.ArgumentParser(\"Randomly sample k items from an input S containing n items.\")\n\tparser.add_argument(\"infile\", nargs='?', type=argparse.FileType('r'), default=sys.stdin)\n\tparser.add_argument(\"outfile\", nargs='?', type=argparse.FileType('w'), default=sys.stdout)\n\tparser.add_argument(\"-k\", \"--num-items\", type=int, help=\"An integer number giving the size of the reservoir\")\n\tparser.add_argument(\"--preserve-order\", action=\"store_true\", help=\"Preserve input ordering\")\n\n\treturn parser\n\ndef main(argv=None):\n\tparser = get_parser()\n\targs = parser.parse_args(argv)\n\tN = args.num_items\n\n\treservoir = []\n\treservoir_ordered = []\n\n\tfor l, line in enumerate(args.infile):\n\t\tif l < N:\n\t\t\treservoir.append(line)\n\t\t\treservoir_ordered.append((l, line))\n\t\telif l >= N and random.random() < N/float(l+1):\n\t\t\treplace = random.randint(0, len(reservoir)-1)\n\t\t\treservoir[replace] = line\n\t\t\treservoir_ordered[replace] = (l, line)\n\n\tif args.preserve_order:\n\t\tfor item in sorted(reservoir_ordered, key=operator.itemgetter(1)):\n\t\t\targs.outfile.write(item[1])\n\telse:\n\t\tfor item in reservoir:\n\t\t\targs.outfile.write(item)\n\n\nif __name__ == \"__main__\":\n\tsys.exit(main(sys.argv[1:]))\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport random\n\n# Define a fitness function\ndef fitness_function(x):\n    return x ** 2 - 3 * x + 4\n# Generate initial population\npopulation = [random.uniform(-100,100) for _ in range(100)]\n# Start a genetic algorithm to optimize the population\ndef genetic_algorithm(population):\n    # Selection\n    selected = np.random.choice(population, 50, replace=False)\n    # Crossover\n    offspring = []\n    for i in range(0, len(selected)-1, 2):\n        parent1, parent2 = selected[i], selected[i+1]\n        cross_over_point = random.randint(0, len(parent1)-1)\n        offspring_1 = np.concatenate([parent1[:cross_over_point], parent2[cross_over_point:]])\n        offspring_2 = np.concatenate([parent2[:cross_over_point], parent1[cross_over_point:]])\n        offspring.append(offspring_1)\n        offspring.append(offspring_2)\n    # Mutation\n    for i in range(len(offspring)):\n        for bit_index, bit_value in enumerate(offspring[i]):\n            mutation_prob = random.random()\n            if mutation_prob < 0.3:\n                offspring[i][bit_index] = random.random() * 200 - 100\n    # ELitism\n    population = sorted(population, key=fitness_function, reverse=True)\n    population = population[:10] + offspring\n    # Return the new population\n    return population\n\n# Run the genetic algorithm\nfor i in range(500):\n    population = genetic_algorithm(population)\n\n# Find the optimal solution\nopt_solution = max(population, key=fitness_function)\nprint(\"Optimum solution: {}\".format(opt_solution)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Movie:\n    def __init__(self, title, year, rating):\n        self.title = title\n        self.year = year\n        self.rating = rating but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: original_list = [1,2,3,4,5]\n\n# Create a copy of the original list\ncopied_list = original_list[:]\n\n# Modify the copied list so we can verify that it is a deep copy\ncopied_list[0] = 10\n\n# Print both lists - the original list should be unchanged\nprint(\"Original list:\", original_list)\nprint(\"Copied list:\", copied_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortAsc(numbers):\n    numbers.sort()\n    return numbers but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num_yes = 4\nnum_no = 6\n\ntotal_responses = num_yes + num_no\n\nprint('Survey Results')\nprint('Number of people who said yes: {}'.format(num_yes))\nprint('Number of people who said no: {}'.format(num_no))\nprint('Total number of responses: {}'.format(total_responses)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(num1, num2, num3):\n    max_num = 0\n    if num1 >= num2 and num1 >= num3:\n        max_num = num1\n    elif num2 >= num1 and num2 >= num3:\n        max_num = num2\n    else:\n        max_num = num3\n    return max_num but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def split_array_sum(arr):\n  sum_arr = sum(arr)\n  half_sum = sum_arr // 2\n  current_sum = 0\n  left_index = 0\n  \n  for index, value in enumerate(arr):\n    current_sum += value\n    if current_sum >= half_sum:\n        left_index = index\n        break\n  \n  left_arr = arr[:left_index+1]\n  right_arr = arr[left_index+1:]\n  return left_arr, right_arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n  \nsid = SentimentIntensityAnalyzer() \n  \n# Function to get the sentiment \ndef sentiment_scores(sentence): \n    print(sentence)\n    score = sid.polarity_scores(sentence) \n    print(\"Overall sentiment for the text : \", score) \n  \n# Driver code \nif __name__ == \"__main__\": \n   \n    # Input text for sentiment scoring \n    sentence = \"This is an amazing product!\"\n  \n    sentiment_scores(sentence) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \nfrom sklearn.svm import SVC \n\nfeatures = np.array([[0.25, 0.33, 0.46, 0.83, 0.14]]) \nlabels = np.array([0, 0, 1, 1, 0]) \nclf = SVC() \nclf.fit(features, labels) \n\n# predicting the class of the following data \ntest_data = np.array([[0.36, 0.22, 0.91, 0.81, 0.12]]) \nresult = clf.predict(test_data) \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for num in range(1, 11): \n    if num % 2 != 0: \n        print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import win32com.client\n\n# word file to be converted\nwordFile =  r'filename.docx'\n\n# Open the word file\nword = win32com.client.Dispatch(\"Word.Application\")\ndoc = word.Documents.Open(wordFile)\n\n# Set the pdf parameters\npdf_format_id = 17\nfile_name = r'filename.pdf'\n\n# Save the file as pdf\ndoc.SaveAs(file_name, FileFormat=pdf_format_id)\n\n# Close the word file\nword.Quit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n): \n    fact = 1\n    # multiply the current value of fact by all the numbers from 1 to n\n    for i in range(1, n+1): \n        fact = fact * i\n    return fact \n \nnum = 5\nfactorial = factorial(num) \nprint(\"Factorial of\", num, \"is\",  factorial) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Patient:\n def __init__(self, name, age, birthdate, conditions):\n  self.name = name\n  self.age = age\n  self.birthdate = birthdate\n  self.conditions = conditions\n\ndef get_name(self):\n return self.name\n\ndef get_age(self):\n return self.age\n\ndef get_birthdate(self):\n return self.birthdate\n\ndef get_conditions(self):\n return self.conditions\n\ndef update_conditions(self, conditions):\n self.conditions = conditions but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_1 = [1, 2, 3]\nlist_2 = [2, 3, 4]\n\nfinal_list = []\n\nfor item in list_1:\n if item not in final_list:\n final_list.append(item)\n\nfor item in list_2:\n if item not in final_list:\n final_list.append(item)\n\nprint(final_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_list(lst):\n  lst.reverse()\n  for item in lst:\n    print(item)\n  \nreverse_list([\"apple\", \"banana\", \"cherry\"]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence = \"I am a strong girl\"\n\nwithout_a = ' '.join([word for word in sentence.split() if 'a' not in word])\n\nprint(without_a)\n# Output: I strong girl but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubbleSort(arr): \n n = len(arr) \n\n # Traverse through all array elements \n for i in range(n): \n\n# Last i elements are already in place \n for j in range(0, n-i-1): \n\n# traverse the array from 0 to n-i-1 \n# Swap if the element found is greater \n# than the next element \n if arr[j] > arr[j+1] : \n arr[j], arr[j+1] = arr[j+1], arr[j] \n\n# Driver code to test above\narr = [2, 5, 1, 8, 4]\n\nbubbleSort(arr)\n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n print (\"%d\" %arr[i]), \n \n# Output: 1 2 4 5 8 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_palindromes(s):\n    n = len(s)\n    is_palindrome = [[False for _ in range(n)] for _ in range(n)]\n \n    # Palindrome of length 1\n    for i in range(n):\n        is_palindrome[i][i] = True\n    # Palindrome of length 2\n    for i in range(n - 1):\n        is_palindrome[i][i + 1] = (s[i] == s[i + 1])\n    # Palindrome of length >= 3\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j] and is_palindrome[i + 1][j - 1]:\n                is_palindrome[i][j] = True\n    res = []\n    for i in range(n):\n        for j in range(i, n):\n            if is_palindrome[i][j] and j - i + 1 >= 3:\n                res.append(s[i:j + 1])\n    return res but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(terms): \n  Fibonacci_num = [0, 1] \n  a = 0\n  b = 1\n  for i in range(2,terms): \n    c = a + b\n    Fibonacci_num.append(c)\n    a = b\n    b = c\n  return Fibonacci_num \n  \nnterms = 10\nprint(\"Fibonacci sequence:\")\nprint(Fibonacci(nterms)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Below is a sample automated execution pipeline for a given task. \n\n1. Configure start and end points \u2013 Start by configuring the end points: the UNIX server and Oracle database. \n\n2. Set up data pipeline \u2013 Define how data should be extracted from the UNIX server and stored into the Oracle database. This includes creating tables, setting up database triggers and linking tables with the UNIX server. \n\n3. Configure scheduling \u2013 Set up a scheduling system for the automated data pipeline based on time, date or other factors.\n\n4. Write automated script \u2013 Create a script in the programming language of choice (e.g. Python, Java, C, etc.) to execute the data pipeline. \n\n5. Test the pipeline \u2013 Test the automated data pipeline to ensure it is working correctly. \n\n6. Monitor data pipeline \u2013 Monitor the automated data pipeline to detect any errors or unexpected behaviour. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, jsonify, request\nfrom flask_jwt_extended import JWTManager\nfrom flask_jwt_extended import (create_access_token, create_refresh_token,\n jwt_required, jwt_refresh_token_required, get_jwt_identity, get_raw_jwt)\n\napp = Flask(__name__)\n\napp.config['JWT_SECRET_KEY'] = 'secret'\njwt = JWTManager(app)\n\n@app.route('/register', methods=['POST'])\ndef register():\n username = request.json.get('username', None)\n password = request.json.get('password', None)\n\n # Register user here\n\n access_token = create_access_token(identity=username)\n refresh_token = create_refresh_token(identity=username)\n return jsonify(message='User created', access_token=access_token, refresh_token=refresh_token)\n \n@app.route('/login', methods=['POST'])\ndef login():\n username = request.json.get('username', None)\n password = request.json.get('password', None)\n\n # Validate user here\n\n access_token = create_access_token(identity=username)\n refresh_token = create_refresh_token(identity=username)\n return jsonify(message='Logged in', access_token=access_token, refresh_token=refresh_token)\n\n@app.route('/protected', methods=['GET'])\n@jwt_required\ndef protected():\n username = get_jwt_identity()\n return jsonify(message='Welcome %s' % username)\n\nif __name__ == '__main__':\n app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiplicationTable(n): \n    for i in range(1, 11): \n        print(n, 'x', i, '=', n*i) \n       \n# Driver Code \nn = 9\nmultiplicationTable(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"...\"\npage = requests.get(url)\nsoup = BeautifulSoup(page.content)\ntext = soup.find_all(text=True)\nfor t in text:\n    print(t) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_substring(string, old, new):\n    new_string = \"\"\n    for word in string.split():\n        if word == old:\n            new_string += new + \" \"\n        else:\n            new_string += word + \" \"\n    return new_string.rstrip()\n\nstring = \"Hello world!\"\nnew_string = replace_substring(string, \"world\", \"universe\")\n\nprint(new_string) # \"Hello universe!\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_numbers():\n    if num <= 100:\n        print(num)\n        print_numbers(num + 1)\n\nprint_numbers(1) but is not the same. just give one example and only return the code."}
