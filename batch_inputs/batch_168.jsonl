{"prompt": "make some code that functions the same as the following code: def print_roman_numeral(num):\n    if num == 1:\n        return \"I\"\n    elif num == 2:\n        return \"II\"\n    elif num == 3:\n        return \"III\"\n    elif num == 4:\n        return \"IV\"\n    elif num == 5:\n        return \"V\"\n    else:\n        return \"invalid number\"\n\nnumber = int(input(\"Enter a number between 1 and 5: \"))\nprint(print_roman_numeral(number)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: unsorted_list = [44, 23, 11, 33, 5]\nsorted_list = sorted(unsorted_list, reverse=True)\n\nprint(sorted_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nGet the geocodes of an address data\n\"\"\"\n\nimport requests\n\ndef geocode_address(address):\n    # Create the url \n    url = 'http://maps.googleapis.com/maps/api/geocode/json'\n\n    # Create the params \n    params = {'address': '{street}, {state}, {zip}'.format(**address),\n              'sensor': 'false'}\n   \n    # Make the request \n    resp = requests.get(url, params=params)\n    data = resp.json()\n\n    # Extract the latitude and longitude\n    if data['status'] == 'OK':\n        lat = data['results'][0]['geometry']['location']['lat']\n        lng = data['results'][0]['geometry']['location']['lng']\n    else:\n        return 'Error: Address not found'\n   \n    return [lat, lng]\n    \nif __name__ == '__main__':\n    address = {'street': '123 Main Street', 'state': 'NY', 'zip': '12345'}\n    print(geocode_address(address)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_str_by_length(list1):\n return sorted(list1, key=len) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def makeChange(coinSet, change):\n    bestSet = []\n    for i in range(change + 1):\n        bestSet.append([i])\n\n    # populate the list until the change amount\n    for i in range(1, change + 1):\n        for j in range(len(coinSet)):\n            # test to see if the coin is less then or equal to the change\n            if coinSet[j] <= i:\n                bestSet[i] = min(bestSet[i], 1 + bestSet[i - coinSet[j]])\n\n    # check to make sure the coins sum upto given amount else return None\n    if(sum(bestSet[change]) != change):\n        return None\n\n    return bestSet[change] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classifier(data_points):\n categories = []\n for data_point in data_points:\n if data_point % 2 == 0:\n categories.append('even')\n else:\n categories.append('odd')\n return categories but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_repeated_character(my_string):\n    counts = Counter(my_string)\n    max_char = max(counts, key=counts.get)\n    return max_char\n\nprint(\"Most repeated character:\", most_repeated_character(my_string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_data(data):\n class_1 = []\n class_2 = []\n\n for value in data:\n if value % 2 == 0:\n class_1.append(value)\n else:\n class_2.append(value)\n\n return class_1, class_2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n  \ndef random_list(n): \n    # Generating a random list of length n\n    random_list = [] \n    for i in range(n): \n        random_list.append(random.randint(0,n-1)) \n      \n    return random_list \n  \n# Driver Code \nn = 6\nprint(random_list(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\n# Get the webpage\nurl = 'https://example.com'\nr = requests.get(url)\n\n# Save the webpage to a file \nwith open('webpage.html', 'wb') as f:\n f.write(r.content) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(data):\n    result = []\n    for element in data:\n        if element not in result:\n            result.append(element)\n    return result\n\nprint(remove_duplicates([1, 3, 3, 4, 5, 6, 6, 7])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_substring(string, substring):\n    start = 0\n    result = \"\"\n    while start < len(string):\n        idx = string.find(substring, start)\n        if idx == -1:\n            break\n        result += string[idx:idx+len(substring)]\n        start = idx+len(substring)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def group_anagrams(words): \n    result = {} \n      \n    for word in words: \n        key = ''.join(sorted(word)) \n        if key in result.keys(): \n            result[key].append(word) \n        else: \n            result[key] = [word] \n  \n    return list(result.values()) \n\nwords = ['eat', 'tea', 'tan', 'ate', 'nat', 'bat'] \nprint(group_anagrams(words)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import the necessary libraries\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom sklearn.datasets import load_digits\n\n# load the digits dataset\ndigits = load_digits()\n\n# define the clustering model\nkmeans_model = KMeans(n_clusters=10, random_state=42)\n\n# fit the model to the digits dataset \nkmeans_model.fit(digits.data)\n\n# assign labels to the clusters\nlabels = kmeans_model.labels_\n\n# plot the clusters\nfor i in range(10):\n    # create a mask to isolate each cluster\n    mask = labels == i\n    \n    # plot the images of the cluster\n    plt.title(f\"Cluster {i}\")\n    plt.imshow(digits.images[mask][0], cmap=\"gray\")\n    plt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_list(nums):\n return sum(nums)\n\nnums = [1, 2, 3, 4, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_sort(list_1, list_2):\n    merged_list = list_1 + list_2\n    merged_list.sort()\n    return merged_list\n\nif __name__ == '__main__':\n    list_1 = [1, 3, 5, 6, 7]\n    list_2 = [4, 8, 9, 10]\n    print(merge_sort(list_1, list_2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: x = 0\n\nfor i in range(1,11):\n    x += i**3\n\nprint(x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max_min(my_list):\n    max1 = float(\"-inf\")\n    max2 = float(\"-inf\")\n    for num in my_list:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return max1, max2\n\nmax1, max2 = find_max_min(my_list)\nprint(\"The highest and second-highest number in the list are: %d, %d\" % (max1, max2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(s):\n    # Convert strings to lowercase\n    s = s.lower()\n \n    # Iterate through middle of string with indices \n    for i in range(len(s) // 2):\n        if s[i] != s[len(s) - i - 1]:\n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def knapsack_0_1(weights, values, capacity):\n    n = len(values)\n    matrix = [ [0]*(capacity+1) for _ in range(n+1) ]\n    \n    for i in range(1, n+1):\n        for c in range(capacity+1):\n            if weights[i-1] > c:\n                matrix[i][c] = matrix[i-1][c]\n            else:\n                matrix[i][c] = max(matrix[i-1][c],\n                                  values[i-1] + matrix[i-1][c-weights[i-1]])\n    return matrix[i][c] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pygame\nimport math\n\n# Initialize pygame\npygame.init()\nclock = pygame.time.Clock()\n\n# Setup window\nwindow_width, window_height = 800, 600\nwindow = pygame.display.set_mode((window_width, window_height))\npygame.display.set_caption(\"First Person Shooter\")\n\n# Load images\nplayer_image = pygame.image.load(\"player.png\")\n\n# Setup player\nplayer_x = 400\nplayer_y = 300\nplayer_x_change = 0\nplayer_y_change = 0\n\n# Game loop\nrun = True\nwhile run:\n    # Window background\n    window.fill((0, 0, 0))\n    \n    # Track user events\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            run = False\n    \n    # Get and handle key inputs\n    keys = pygame.key.get_pressed()\n    if keys[pygame.K_LEFT]:\n        player_x_change = -4\n    if keys[pygame.K_RIGHT]:\n        player_x_change = 4\n    if keys[pygame.K_UP]:\n        player_y_change = -4\n    if keys[pygame.K_DOWN]:\n        player_y_change = 4\n    \n    # Move player\n    player_x += player_x_change\n    player_y += player_y_change\n    \n    # Boundary check\n    if player_x <= 0:\n        player_x = 0\n    elif player_x >= window_width - 64:\n        player_x = window_width - 64\n    if player_y <= 0:\n        player_y = 0\n    elif player_y >= window_height - 64:\n        player_y = window_height - 64\n    \n    # Display player\n    window.blit(player_image, (player_x, player_y))\n    \n    # Update window\n    pygame.display.update()\n    \n    # Wait for a frame\n    clock.tick(60)\n    \n# Quit game\npygame.quit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nDesign a function in Python to generate a random password\n\"\"\"\n\nimport string\nimport random\n\ndef generate_password(length=16):\n    # list of possible characters for the password\n    characters = string.ascii_letters + string.punctuation + string.digits\n    \n    # generate a random password\n    password = ''.join(random.choice(characters) for i in range(length))\n    \n    # return the random password\n    return password\n\n# generate a random password\nrandom_password = generate_password()\n\n# print the random password\nprint(random_password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import necessary libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# Load the data\ndata = [[145, 285, 181], [149, 290, 184], [153, 295, 187]]\ndata = pd.DataFrame(data, columns=['IBM', 'AAPL', 'MSFT'])\n\n# Define and fit the linear regression model\nmodel = LinearRegression()\nmodel.fit(data[['IBM', 'AAPL', 'MSFT']], data.shift(-1))\n\n# Make predictions for the future stock prices\npredictions = model.predict([[145, 285, 181], [149, 290, 184]])[0]\nprint('Predicted future stock prices: IBM: %f, AAPL: $%f, MSFT: $%f.' %\n  (predictions[0], predictions[1], predictions[2])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Circle:\n\n    def __init__(self, radius):\n        self.radius = radius\n\n    def calculateArea(self):\n        return 3.14159 * self.radius * self.radius but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_vowels(text):\n    no_vowels = \"\"\n    for character in text:\n        if character not in \"aeiouAEIOU\":\n            no_vowels += character\n    return no_vowels but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef count_syllables(word):\n  pattern = r'[aeiouy]+'\n  return len(re.findall(pattern, word))\n\nprint(count_syllables('syllable'))  # 3\nprint(count_syllables('balloons'))  # 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def zip_two_lists(list1, list2):\n    return zip(list1, list2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_sort(lst):\n # Base case: if lst has 0 or 1 element, it is already sorted\n if len(lst) <= 1:\n  return lst\n\n # Split the list into two halves\n mid = len(lst) // 2\n left_half = merge_sort(lst[:mid])\n right_half = merge_sort(lst[mid:])\n\n # Merge the sorted halves\n return merge(left_half, right_half)\n\ndef merge(left_half, right_half):\n # Create an empty list\n merged_list = []\n\n # Each loop iteration, take the smallest remaining element in each list\n while left_half and right_half:\n  if left_half[0] <= right_half[0]:\n   merged_list.append(left_half.pop(0))\n  else:\n   merged_list.append(right_half.pop(0))\n\n # Add the remainder of the left or right half\n merged_list.extend(left_half)\n merged_list.extend(right_half)\n\n # Return the merged list\n return merged_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: countries_cities = {\n    \"UK\": \"London\", \n    \"France\": \"Paris\", \n    \"Spain\": \"Madrid\", \n    \"Germany\": \"Berlin\", \n    \"Italy\": \"Rome\"\n    } but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack:\n  def __init__(self):\n    self.items = []\n    \n  def push(self, item):\n    self.items.append(item)\n    \n  def pop(self):\n    return self.items.pop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def clear_whitespace(s):\n        s = s.strip() # Remove leading and trailing whitespaces\n        s = \"\".join(s.split()) # Remove middle whitespaces\n        return s\n\nprint(clear_whitespace(\" Hello World    \")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = [\"Hello\",\"World\",\"Beautiful\",\"Day\"]\n\nlengths = [len(word) for word in words]\navg_length = sum(lengths) / len(lengths)\n\nprint(\"Average word length is {:.2f}\".format(avg_length)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_if_contains(lst, val):\n    return val in lst but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from textblob import TextBlob\n\nsentence = 'I am very happy to be here'\nsentiment = TextBlob(sentence).polarity\n\nif sentiment > 0:\n    print(\"Sentiment: Positive\")\nelif sentiment == 0:\n    print(\"Sentiment: Neutral\")\nelse:\n    print(\"Sentiment: Negative\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findDepth(root): \n    if root is None: \n        return 0 ;  \n  \n    else :  \n        left_height = findDepth(root.left) \n        right_height = findDepth(root.right) \n  \n        if left_height > right_height : \n            return left_height+1\n        else: \n            return right_height+1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_vowels(string):\n    # compile regex\n    regex = re.compile('[aeiou]', re.IGNORECASE)\n    # replace matching characters with an empty string\n    return regex.sub('', string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# read in the dataset\ndf = pd.read_csv('movie_data.csv')\n\n# remove irrelevant columns\ndf_clean = df.drop(['plot', 'cast', 'director', 'year'], axis=1)\n\n# feature engineering\nX = df_clean.drop('genre', axis=1).values\ny = df_clean['genre'].values\n\n# split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# train the model \nrf = RandomForestClassifier(n_estimators=1000, random_state=0)\nrf.fit(X_train, y_train)\n\n# evaluate the model\naccuracy = rf.score(X_test, y_test)\nprint('Model accuracy on test set: ', accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request\nimport sqlite3\n\n# configure the database\ndb_name = 'booklist.db'\n\ndef get_cursor():\n    conn = sqlite3.connect(db_name)\n    conn.row_factory = sqlite3.Row\n    return conn.cursor()\n\n# create the Flask application\napp = Flask(__name__)\n\n# create a route to view all books\n@app.route('/books', methods=['GET'])\ndef view_books():\n    cursor = get_cursor()\n    cursor.execute('SELECT * FROM books')\n    books = cursor.fetchall()\n    return books\n\n# create a route to store a book\n@app.route('/books', methods=['POST'])\ndef store_book():\n    title = request.json.get('title')\n    author = request.json.get('author')\n\n    cursor = get_cursor()\n    cursor.execute('INSERT INTO books (title, author) VALUES (?,?)', (title, author))\n    conn = cursor.connection\n    conn.commit()\n    return 'Book Added successfully'\n\n# run the application\nif __name__ == '__main__':\n    app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n \n    def show_info(self):\n        print(\"Name of Person is: \", self.name)\n        print(\"Age of Person is: \", self.age)\n    \nclass Employee(Person):\n    def __init__(self, name, age, emp_id):\n        super().__init__(name, age)\n        self.emp_id = emp_id\n    \n    def show_info(self):\n        super().show_info()\n        print(\"ID of Employee is: \", self.emp_id)\n \nemp = Employee(\"John Doe\", 30, \"E1001\")\nemp.show_info() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insertion_sort(arr):\n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key \n\narr = [9, 8, 7, 6, 5, 4, 3, 2, 1]\ninsertion_sort(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class BankAccount:\n    \n    def __init__(self, name, balance=0.0):\n        self.name = name\n        self.balance = balance\n        \n    def deposit(self, amount):\n        self.balance += amount\n        return self.balance\n    \n    def withdraw(self, amount):\n        if amount > self.balance:\n            raise RuntimeError('Amount greater than available balance.')\n        self.balance -= amount\n        return self.balance but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \n# Copyright (c) 2013 Calin Crisan\n# This file is part of motionEye.\n#\n# motionEye is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n# \n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n# \n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>. \n\nimport fcntl\nimport logging\nimport os.path\nimport re\nimport stat\nimport subprocess\nimport time\nimport utils\n\n\n_resolutions_cache = {}\n_ctrls_cache = {}\n_ctrl_values_cache = {}\n\n_DEV_V4L_BY_ID = '/dev/v4l/by-id/'\n\n\ndef find_v4l2_ctl():\n    try:\n        return subprocess.check_output('which v4l2-ctl', shell=True).strip()\n    \n    except subprocess.CalledProcessError: # not found\n        return None\n\n\ndef list_devices():\n    global _resolutions_cache, _ctrls_cache, _ctrl_values_cache\n    \n    logging.debug('listing v4l2 devices...')\n    \n    try:\n        output = ''\n        started = time.time()\n        p = subprocess.Popen('v4l2-ctl --list-devices 2>/dev/null', shell=True, stdout=subprocess.PIPE, bufsize=1)\n\n        fd = p.stdout.fileno()\n        fl = fcntl.fcntl(fd, fcntl.F_GETFL)\n        fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)\n\n        while True:\n            try:\n                data = p.stdout.read(1024)\n                if not data:\n                    break\n            \n            except IOError:\n                data = ''\n                time.sleep(0.01)\n\n            output += data\n\n            if len(output) > 10240:\n                logging.warn('v4l2-ctl command returned more than 10k of output')\n                break\n            \n            if time.time() - started > 3:\n                logging.warn('v4l2-ctl command ran for more than 3 seconds')\n                break\n\n    except subprocess.CalledProcessError:\n        logging.debug('failed to list devices (probably no devices installed)')\n        return []\n\n    try:\n        # try to kill the v4l2-ctl subprocess\n        p.kill()\n\n    except:\n        pass # nevermind\n\n    name = None\n    devices = []\n    for line in output.split('\\n'):\n        if line.startswith('\\t'):\n            device = line.strip()\n            persistent_device = find_persistent_device(device)\n            devices.append((device, persistent_device, name))\n        \n            logging.debug('found device %(name)s: %(device)s, %(persistent_device)s' % {\n                    'name': name, 'device': device, 'persistent_device': persistent_device})\n\n        else:\n            name = line.split('(')[0].strip()\n    \n    # clear the cache\n    _resolutions_cache = {}\n    _ctrls_cache = {}\n    _ctrl_values_cache = {}\n\n    return devices\n\n\ndef list_resolutions(device):\n    global _resolutions_cache\n    \n    device = utils.make_str(device)\n    \n    if device in _resolutions_cache:\n        return _resolutions_cache[device]\n    \n    logging.debug('listing resolutions of device %(device)s...' % {'device': device})\n    \n    resolutions = set()\n    output = ''\n    started = time.time()\n    p = subprocess.Popen('v4l2-ctl -d \"%(device)s\" --list-formats-ext | grep -vi stepwise | grep -oE \"[0-9]+x[0-9]+\" || true' % {\n            'device': device}, shell=True, stdout=subprocess.PIPE, bufsize=1)\n\n    fd = p.stdout.fileno()\n    fl = fcntl.fcntl(fd, fcntl.F_GETFL)\n    fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)\n\n    while True:\n        try:\n            data = p.stdout.read(1024)\n            if not data:\n                break\n\n        except IOError:\n            data = ''\n            time.sleep(0.01)\n\n        output += data\n\n        if len(output) > 10240:\n            logging.warn('v4l2-ctl command returned more than 10k of output')\n            break\n        \n        if time.time() - started > 3:\n            logging.warn('v4l2-ctl command ran for more than 3 seconds')\n            break\n    \n    try:\n        # try to kill the v4l2-ctl subprocess\n        p.kill()\n    \n    except:\n        pass # nevermind\n\n    for pair in output.split('\\n'):\n        pair = pair.strip()\n        if not pair:\n            continue\n        \n        width, height = pair.split('x')\n        width = int(width)\n        height = int(height)\n\n        if (width, height) in resolutions:\n            continue # duplicate resolution\n\n        if width < 96 or height < 96: # some reasonable minimal values\n            continue\n        \n        if width % 16 or height % 16: # ignore non-modulo 16 resolutions\n            continue\n\n        resolutions.add((width, height))\n        \n        logging.debug('found resolution %(width)sx%(height)s for device %(device)s' % {\n                'device': device, 'width': width, 'height': height})\n    \n    if not resolutions:\n        logging.debug('no resolutions found for device %(device)s, using common values' % {'device': device})\n\n        # no resolution returned by v4l2-ctl call, add common default resolutions\n        resolutions = utils.COMMON_RESOLUTIONS\n\n    resolutions = list(sorted(resolutions, key=lambda r: (r[0], r[1])))\n    _resolutions_cache[device] = resolutions\n    \n    return resolutions\n\n\ndef device_present(device):\n    device = utils.make_str(device)\n    \n    try:\n        st = os.stat(device)\n        return stat.S_ISCHR(st.st_mode)\n\n    except:\n        return False\n    \n\ndef find_persistent_device(device):\n    device = utils.make_str(device)\n    \n    try:\n        devs_by_id = os.listdir(_DEV_V4L_BY_ID)\n\n    except OSError:\n        return device\n    \n    for p in devs_by_id:\n        p = os.path.join(_DEV_V4L_BY_ID, p)\n        if os.path.realpath(p) == device:\n            return p\n    \n    return device\n\n\ndef get_brightness(device):\n    return _get_ctrl(device, 'brightness')\n\n\ndef set_brightness(device, value):\n    _set_ctrl(device, 'brightness', value)\n\n\ndef get_contrast(device):\n    return _get_ctrl(device, 'contrast')\n\n\ndef set_contrast(device, value):\n    _set_ctrl(device, 'contrast', value)\n\n\ndef get_saturation(device):\n    return _get_ctrl(device, 'saturation')\n\n\ndef set_saturation(device, value):\n    _set_ctrl(device, 'saturation', value)\n\n\ndef get_hue(device):\n    return _get_ctrl(device, 'hue')\n\n\ndef set_hue(device, value):\n    _set_ctrl(device, 'hue', value)\n\n\ndef _get_ctrl(device, control):\n    global _ctrl_values_cache\n    \n    device = utils.make_str(device)\n    \n    if not device_present(device):\n        return None\n    \n    if device in _ctrl_values_cache and control in _ctrl_values_cache[device]:\n        return _ctrl_values_cache[device][control]\n    \n    controls = _list_ctrls(device)\n    properties = controls.get(control)\n    if properties is None:\n        logging.warn('control %(control)s not found for device %(device)s' % {\n                'control': control, 'device': device})\n        \n        return None\n    \n    value = int(properties['value'])\n    \n    # adjust the value range\n    if 'min' in properties and 'max' in properties:\n        min_value = int(properties['min'])\n        max_value = int(properties['max'])\n        \n        value = int(round((value - min_value) * 100.0 / (max_value - min_value)))\n    \n    else:\n        logging.warn('min and max values not found for control %(control)s of device %(device)s' % {\n                'control': control, 'device': device})\n    \n    logging.debug('control %(control)s of device %(device)s is %(value)s%%' % {\n            'control': control, 'device': device, 'value': value})\n    \n    return value\n\n\ndef _set_ctrl(device, control, value):\n    global _ctrl_values_cache\n    \n    device = utils.make_str(device)\n    \n    if not device_present(device):\n        return\n\n    controls = _list_ctrls(device)\n    properties = controls.get(control)\n    if properties is None:\n        logging.warn('control %(control)s not found for device %(device)s' % {\n                'control': control, 'device': device})\n        \n        return\n    \n    _ctrl_values_cache.setdefault(device, {})[control] = value\n\n    # adjust the value range\n    if 'min' in properties and 'max' in properties:\n        min_value = int(properties['min'])\n        max_value = int(properties['max'])\n        \n        value = int(round(min_value + value * (max_value - min_value) / 100.0))\n    \n    else:\n        logging.warn('min and max values not found for control %(control)s of device %(device)s' % {\n                'control': control, 'device': device})\n    \n    logging.debug('setting control %(control)s of device %(device)s to %(value)s' % {\n            'control': control, 'device': device, 'value': value})\n\n    output = ''\n    started = time.time()\n    p = subprocess.Popen('v4l2-ctl -d \"%(device)s\" --set-ctrl %(control)s=%(value)s' % {\n            'device': device, 'control': control, 'value': value}, shell=True, stdout=subprocess.PIPE, bufsize=1)\n\n    fd = p.stdout.fileno()\n    fl = fcntl.fcntl(fd, fcntl.F_GETFL)\n    fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)\n\n    while True:\n        try:\n            data = p.stdout.read(1024)\n            if not data:\n                break\n        \n        except IOError:\n            data = ''\n            time.sleep(0.01)\n\n        output += data\n\n        if len(output) > 10240:\n            logging.warn('v4l2-ctl command returned more than 10k of output')\n            break\n\n        if time.time() - started > 3:\n            logging.warn('v4l2-ctl command ran for more than 3 seconds')\n            break\n\n    try:\n        # try to kill the v4l2-ctl subprocess\n        p.kill()\n\n    except:\n        pass # nevermind\n\n\ndef _list_ctrls(device):\n    global _ctrls_cache\n    \n    device = utils.make_str(device)\n\n    if device in _ctrls_cache:\n        return _ctrls_cache[device]\n    \n    output = ''\n    started = time.time()\n    p = subprocess.Popen('v4l2-ctl -d \"%(device)s\" --list-ctrls' % {\n            'device': device}, shell=True, stdout=subprocess.PIPE, bufsize=1)\n\n    fd = p.stdout.fileno()\n    fl = fcntl.fcntl(fd, fcntl.F_GETFL)\n    fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)\n\n    while True:\n        try:\n            data = p.stdout.read(1024)\n            if not data:\n                break\n        \n        except IOError:\n            data = ''\n            time.sleep(0.01)\n\n        output += data\n\n        if len(output) > 10240:\n            logging.warn('v4l2-ctl command returned more than 10k of output')\n            break\n\n        if time.time() - started > 3:\n            logging.warn('v4l2-ctl command ran for more than 3 seconds')\n            break\n\n    try:\n        # try to kill the v4l2-ctl subprocess\n        p.kill()\n\n    except:\n        pass # nevermind\n\n    controls = {}\n    for line in output.split('\\n'):\n        if not line:\n            continue\n        \n        match = re.match('^\\s*(\\w+)\\s+\\(\\w+\\)\\s+\\:\\s*(.+)', line)\n        if not match:\n            continue\n        \n        (control, properties) = match.groups()\n        properties = dict([v.split('=', 1) for v in properties.split(' ') if v.count('=')])\n        controls[control] = properties\n    \n    _ctrls_cache[device] = controls\n    \n    return controls\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to divide the given list into N equal parts\ndef divide_list(my_list, n):\n \n    # List Comprehension to divide the list into n equal parts\n    list_of_lists = [my_list[i * n:(i + 1) * n] for i in range((len(my_list) + n - 1) // n )]  \n  \n    return list_of_lists\n\n# Driver Code  \nmy_list = [1, 2, 3, 4, 5, 6]\nn = 3\n\ndivide_list(my_list, n)\n\n# Output: [[1, 2, 3], [4, 5, 6], [7, 8]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum(alist):\n    total = 0\n    for i in alist:\n        total += i\n    return total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nlist = [\"apple\", \"banana\", \"orange\", \"strawberry\", \"grape\"]\nrandom.shuffle(list)\n\nfor item in list[:3]:\n print(item) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import websockets\n\nusers = []\n\nasync def consumer(websocket):\n while True:\n message = await websocket.recv()\n \n for user in users:\n await user.send(message)\n\nasync def producer(websocket, path):\n users.append(websocket)\n await consumer(websocket)\n\nstart_server = websockets.serve(producer, 'localhost', 8000)\n\nasyncio.get_event_loop().run_until_complete(start_server)\nasyncio.get_event_loop().run_forever() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def square(number):\n \u00a0 \u00a0return number * number but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from random import random\n\ndef generate_cubed_object(n):\n    objects = []\n    for i in range(n):\n        x = random()\n        y = random()\n        z = random()\n        objects.append([x, y, z])\n    return objects\n\nprint(generate_cubed_object(8)) # [[0.4, 0.2, 0.3], [0.5, 0.6, 0.7], ....] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: [{'a': 1}, {'b': 2}, {'c': 3}] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def triangle_numbers(n):\n    res = 0\n    for i in range(n):\n        res += i+1\n    return res\n\nresult = triangle_numbers(n)\nprint(result) # output: 15 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = \"This is an example of a string of words\".split()\n\nword_freq = {}\nfor word in words:\n    if word not in word_freq:\n        word_freq[word] = 1\n    else:\n        word_freq[word] += 1\n\nfor key, value in word_freq.items():\n    print(f\"{key} : {value}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longestPalindromicSubstring( str):\n n = len(str)\n \n # table[i][j] will be false if substring str[i..j] \n # is not palindrome. \n # Else table[i][j] will be true\n table = [[0 for x in range(n)] for y \n                                  in range(n)] \n  \n # All substrings of length 1 are palindromes \n maxLength = 1\n i = 0\n while (i < n): \n  table[i][i] = True\n  i = i + 1\n  \n # check for substring of length 2. \n start = 0\n i = 0\n while i < n-1: \n  if (str[i] == str[i + 1]): \n   table[i][i + 1] = True\n   start = i \n   maxLength = 2\n  i = i + 1\n  \n # Check for lengths greater than 2. k is length \n # of substring \n k = 3\n while k <= n: \n  # Fix the starting index \n  i = 0\n  while i < (n-k+1): \n   # Get the ending index of substring from \n   # starting index i and length k \n   j = i + k - 1\n  \n   # checking for sub-string from ith index to \n   # jth index iff str[i+1] to \n   # str[j-1] is a palindrome \n   if (table[i+1][j-1] and\n           str[i] == str[j]): \n    table[i][j] = True\n  \n    if (k > maxLength): \n     start = i \n     maxLength = k \n   i = i + 1\n  k = k + 1\n print (\"Longest palindrome substring is: \") \n print  (str[start:start + maxLength]) \n  \n  # return length of LPS \n return maxLength but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def second_largest(arr):\n    first_largest =  arr[0]\n    second_largest = -float(\"inf\")\n    for num in arr:\n        if num > first_largest:\n            second_largest = first_largest\n            first_largest = num\n        elif second_largest < num < first_largest:\n            second_largest = num\n            \n    return second_largest\n\nif __name__ == '__main__':\n    arr = [3, 8, 4, 5, 7, 6]\n    print(second_largest(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * 5 / 9\n    return celsius but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\ncolumn_names = [\"make\", \"model\", \"price\", \"mpg\"]\ncars = [ \n    [\"Toyota\", \"Camry\", 23000, 28],\n    [\"Honda\", \"Accord\", 21000, 30],\n    [\"Ford\", \"Ecosport\", 20000, 25],\n    [\"Hyundai\", \"Elantra\", 22000, 27],\n    [\"Toyota\", \"Corolla\", 18000, 35],\n    [\"Honda\", \"Civic\", 19000, 32],\n    [\"Ford\", \"Escape\", 24000, 24],\n    [\"Hyundai\", \"Sonata\", 19500, 29]\n]\n\ndf = pd.DataFrame(cars, columns=column_names)\nprint(df) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: dictionary = {'key1':1, 'key2': 3, 'key3': 2}\nsorted_dict = {key: value for key, value in sorted(dictionary.items(), key=lambda item: item[1])} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def to_lowercase(words):\n    return [word.lower() for word in words] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import flask, json\nfrom flask import request, jsonify\n\n# create the machine learning model\ndef create_ml_model(data):\n    return model\n\n# web-server\napp = Flask(__name__)\n\n@app.route('/ml', methods=['POST'])\ndef ml():\n    # Get input data from request\n    req_data = request.get_json()\n    # Create the model\n    model = create_ml_model(req_data)\n    # Make a prediction\n    pred = model.predict(req_data)\n    # Return the prediction\n    return jsonify(pred)\n\nif __name__ == '__main__':\n    app.run(port=5000) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_min_max(numbers):\n max_num = min_num = numbers[0]\n for n in numbers[1:]:\n     max_num = max(max_num, n)\n     min_num = min(min_num, n)\n print(\"Max: {0}, Min: {1}\".format(max_num, min_num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: some_method = lambda x, y: x + y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \nfrom bs4 import BeautifulSoup \n  \ndef extract_links_from_url(url): \n  \n    # make a request to the URL  \n    r = requests.get(url) \n  \n    # create a beautiful soup object  \n    soup = BeautifulSoup(r.content,'html5lib') \n  \n    # find and return hyperlinks(a tags)  \n    return [link['href'] for link in soup.find_all('a', href=True)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_nums(a, b):\n    \"\"\"Returns the sum of two numbers a and b.\"\"\"\n    return a + b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def third_char(lst):\n third_chars = \"\"\n for word in lst:\n third_chars += word[2]\n return third_chars\n\nthird_char(['IronMan', 'Hulk', 'Thor', 'Captain America']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import heapq\n\n\nclass PriorityQueue:\n \n def __init__(self):\n self.heap = []\n \n def push(self, item, priority):\n heapq.heappush(self.heap, (priority, item))\n   \n def pop(self):\n return heapq.heappop(self.heap)[1]\n\npq = PriorityQueue()\npq.push('A',1)\npq.push('B',5)\npq.push('C',2)\n\nwhile not pq.isEmpty():\n print(pq.pop()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def checkString(string, specified_characters):\n    for char in string:\n        if char not in specified_characters:\n            return False\n    return True\n\nstring = 'abcdefghijklmn'\nspecified_characters = 'abcde'\n\nif(checkString(string, specified_characters)):\n    print(\"String contains only specified characters\")\nelse:\n    print(\"String does not contain only specified characters\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacciSequence(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b \n\nfibonacciSequence(8) # Output:21 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Shopping list application \n\n# Declare a list to store all the items \nshopping_list = []\n\n# Function to add item to the list\ndef add_item(item):\n  shopping_list.append(item)\n  print(\"Item added!\")\n\n# Function to remove item from the list\ndef remove_item(item):\n  shopping_list.remove(item)\n  print(\"Item removed!\")\n\n# Function to search for an item in the list\ndef search_item(item):\n  if item in shopping_list:\n    print(\"Item found.\")\n  else:\n    print(\"Item not found.\")\n\n# Function to display all the items\ndef display_items():\n  print(\"Here is your list:\")\n  for item in shopping_list:\n    print(item)\n\n# Test functions \nadd_item(\"Milk\")\nadd_item(\"Bread\")\nremove_item(\"Milk\")\nsearch_item(\"Bread\")\ndisplay_items()\n\n# Output: \n# Item added!\n# Item added!\n# Item removed!\n# Item found.\n# Here is your list: \n# Bread but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def absolute_value(num):\n    if num < 0:\n        return -num\n    else:\n        return num but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Singleton:\n    _instance = None\n\n    def __new__(cls):\n        if not cls._instance:\n            cls._instance = super(Singleton, cls).__new__(cls)\n        return cls._instance but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\n\ndef day_of_week(year): \n date = datetime.datetime(year, 1, 1)\n return date.strftime(\"%A\")\n\nprint(day_of_week(2018)) # Output: Monday but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\nfrom tensorflow import keras\n\n# Create the model\nmodel = keras.Sequential()\nmodel.add(keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)))\nmodel.add(keras.layers.MaxPooling2D((2, 2)))\nmodel.add(keras.layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(keras.layers.MaxPooling2D((2, 2)))\nmodel.add(keras.layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.add(keras.layers.MaxPooling2D((2, 2)))\nmodel.add(keras.layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.add(keras.layers.MaxPooling2D((2, 2)))\nmodel.add(keras.layers.Flatten())\nmodel.add(keras.layers.Dense(512, activation='relu'))\nmodel.add(keras.layers.Dense(1, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy', optimizer=keras.optimizers.RMSprop(lr=1e-4), metrics=['acc']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_search(arr, target):\n\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # target is not found\n    return -1\n\nresult = binary_search([1, 2, 3, 4, 5, 6, 7], 5)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(list[:5]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import http.server\n\nserver_address = ('', 8000) \nhttpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler)\nhttpd.serve_forever() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sorted_descending(list_of_ints):\n  result = sorted(list_of_ints, reverse=True)\n  return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(s):\n    return s[::-1]\n\nprint(reverse_string(\"This is an example\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nif __name__ == '__main__':\n    n = 8\n    print(fibonacci(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def commonPrefix(array):\n    result = \"\"\n    if len(array) > 0:\n        # Find the minimum length of the word in the array.\n        min_length = min([len(i) for i in array])\n        \n        # Iterate through the letters in the word with the minimum length.\n        for i in range(min_length):\n            curr_char = array[0][i]\n            flag = True\n            \n            # For each letter, check if each of the words have that letter.\n            for j in range(len(array)):\n                if array[j][i] != curr_char:\n                    flag = False\n                    break\n            if flag:\n                result += curr_char\n            else:\n                break\n    return result\n\ncommonPrefix([\"apple\", \"ape\", \"app\", \"application\"]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Queue:\n     # Initialize the queue \n    def __init__(self): \n        self.items = [] \n\n    # Add an element to the queue \n    def enqueue(self, item): \n        self.items.insert(0, item) \n\n    # Remove the last element from the queue \n    def dequeue(self): \n        return self.items.pop() \n\n    # Check if the queue is empty \n    def isEmpty(self): \n        return self.items == [] \n\n    # Get the size of the queue \n    def size(self): \n        return len(self.items) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_vowels(string): \n    vowels = ('a', 'e', 'i', 'o', 'u') \n    for x in string.lower(): \n        if x in vowels: \n            string = string.replace(x, \"_\") \n    return string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def startWithA(list): \n\tnew_list = [] \n\tfor el in list: \n\t\tif el[0] == 'A': \n\t\t\tnew_list.append(el) \n\treturn new_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_average(numbers):\n    total = sum(numbers)\n    length = len(numbers)\n    return total / length\n\nnumbers = [1, 2, 3, 4, 5]\naverage = calculate_average(numbers)\nprint(average) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import json library\nimport json\n\n# parse input string as JSON\njson_data = json.loads(json_str)\n\n# format the json string\nformatted_json = json.dumps(json_data, indent=4)\n\n# print the formatted json string\nprint(formatted_json) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quickSort(arr):\n if len(arr) <= 1:\n return arr\n\n pivot = arr[len(arr) // 2]\n left = [x for x in arr if x < pivot]\n middle = [x for x in arr if x == pivot]\n right = [x for x in arr if x > pivot]\n\n return quickSort(left) + middle + quickSort(right)\n\narr = [9, 4, 7, 3, 2, 1, 8, 5, 6]\n\nprint(quickSort(arr)) # prints [1, 2, 3, 4, 5, 6, 7, 8, 9] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_elem(lst, val, pos):\n    lst[pos] = val\n    return lst\n\nlist = [1, 2, 3, 4, 5]\nelement = 8\nposition = 3\n\nresult = replace_elem(list, element, position)\nprint('After replacing element: ', result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_words(string):\n  words = string.split()\n  return len(words)\n\nstring = \"Python is a powerful programming language\"\nprint(count_words(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\ndbname = 'userdata.db'\nconn = sqlite3.connect(dbname)\nc = conn.cursor()\n\n# Create a table for user data\nc.execute(\"\"\"CREATE TABLE IF NOT EXISTS user \n (name TEXT, age INTEGER, email TEXT)\n \"\"\")\n\n# Add a single record\nrecord = ('John', 28, 'john@example.com')\nc.execute('INSERT INTO user VALUES (?,?,?)', record)\n\n# Commit changes to database\nconn.commit()\n\n# Retrieve and display all records\nc.execute('SELECT * FROM user')\nfor user in c.fetchall():\n print(user)\n\n# Close the connection to the database \nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(arr):\n  max_val = max(arr)\n  for i in range(len(arr)):\n    if arr[i] == max_val:\n      return i but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\ndata = pd.read_csv('<dataset_path>')\n\n# Split into independent and dependent variables\nX = data.iloc[:, :-1].values\ny = data.iloc[:, -1].values\n\n# Split into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Train the linear regression model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Test the model\ny_pred = model.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def product(num):\n\treturn num * (num + 1) * (num + 2)\n\nprint(product(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nlst = random.sample(range(10, 21), 10)\nprint(lst) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.model_selection import train_test_split\n\n# Generate dataset\nX = np.random.rand(1000, 8)\ny = np.random.randint(2, size=(1000, 1))\n\n# Split data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y)\n\n# Create neural net classifier with 3 layers of 8, 10 and 4 nodes\nnn_model = MLPClassifier(solver='adam', hidden_layer_sizes=(8, 10, 4), \nactivation='relu')\n\n# Train model\nnn_model.fit(X_train, y_train)\n\n# Test model\nscore = nn_model.score(X_test, y_test)\n\n# Create an evolutionary optimization to further optimize the model\nfrom evolutionary_search import EvolutionaryAlgorithmSearchCV\n\n# Define the search space\nsearch_space = {\n'hidden_layer_sizes': [(8, 8), (8, 10, 4), (10, 8, 4)],\n 'activation': ['tanh', 'relu']\n}\n\n# Create an evolutionary optimization search\noptimizer = EvolutionaryAlgorithmSearchCV(nn_model, search_space,\nscoring='accuracy',\n cv=3,\n verbose=1,\n population_size=50,\n gene_mutation_prob=0.10,\n gene_crossover_prob=0.5,\n tournament_size=3,\n generations_number=10,\n n_jobs=1)\n\n# Optimize model\noptimizer.fit(X_train, y_train)\n\n# Save optimized model\noptimized_nn_model = optimizer.best_estimator_\n\n# Test optimized model\nscore_opt = optimized_nn_model.score(X_test, y_test)\n\n# Print scores for original and optimized models\nprint('Original:', score)\nprint('Optimized:', score_opt) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# URL\nurl = \"https://www.example.com/table-with-products\"\n\n# Get the page content\npage = requests.get(url)\n\n# Parse the page and extract the table\nsoup = BeautifulSoup(page.content, 'html.parser')\ntable = soup.find(\"table\")\n\n# Loop through each row of the table\nrows = table.find_all(\"tr\")\nfor row in rows:\n    # Extract table header and its content\n    header = row.find(\"th\")\n    cells = row.find_all(\"td\")\n\n    # Extract product name\n    product_name = header.text if header else ''\n\n    # Extract product price\n    product_price = cells[0].text if cells else ''\n    \n    # Print the collected data\n    print(f'{product_name}: {product_price}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n def __init__(self, assignments, tests, projects):\n self.assignments = assignments\n self.tests = tests\n self.projects = projects\n\ndef calculate_grade(self):\n total = (self.assignments * 0.3) + (self.tests * 0.4) + (self.projects * 0.3)\n return total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def double_list(lst):\n    return [x*2 for x in lst] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def largest_common_substring(str1, str2):\n    # Create a 2D list to store the LCS lengths\n    lengths = [[0 for _ in range(len(str2)+1)] for _ in range(len(str1)+1)]\n\n    # Fill the table\n    for i in range(1, len(str1)+1):\n        for j in range(1, len(str2)+1):\n            if str1[i-1] == str2[j-1]:\n                lengths[i][j] = lengths[i-1][j-1] + 1\n            else:\n                lengths[i][j] = max(lengths[i-1][j], lengths[i][j-1])\n\n    # Read the substring out from from the table\n    result = \"\"\n    x, y = len(str1), len(str2)\n    while x != 0 and y != 0:\n        if lengths[x][y] == lengths[x-1][y]:\n            x -= 1\n        elif lengths[x][y] == lengths[x][y-1]:\n            y -= 1\n        else:\n            result = str1[x-1] + result\n            x -= 1\n            y -= 1\n\n    return result\n\n# Test\nstr1 = \"abcdxyz\"\nstr2 = \"xyzabcd\"\nprint(\"The largest common substring is\", largest_common_substring(str1, str2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n \n    #constructor\n    def __init__(self, name, salary, age):\n        self.name = name\n        self.salary = salary\n        self.age = age\n \n    #methods\n    def getName(self):\n        return self.name\n \n    def getSalary(self):\n        return self.salary\n \n    def getAge(self):\n        return self.age but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_sum(numbers):\n    return sum(numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def callback(a, b): \n    # perform calculation \n    return c \n  \n# define a function to use for the callback \ndef my_function(x): \n    return x*x \n\nresult = callback(5, my_function) \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\n# define the environment\nclass Gridworld:\n def __init__(self, size=4):\n self.size = size\n self.reset()\n \n def reset(self):\n # reset the environment\n self.state = np.zeros((self.size, self.size))\n self.done = False\n self.reward = 0\n \n # define states\n self.state[3,3] = 1\n self.current_state = [0,0]\n \n # define actions\n self.action_space = {0: 'up',\n 1: 'down',\n 2: 'left',\n 3: 'right'}\n \n # define the rewards\n self.reward_space = {'win': 1, 'loss': -1, 'tie': 0}\n \n def step(self, action):\n # take an action in the environment\n reward = 0\n done = False\n # calculate next state\n current_state = self.current_state\n if action == 0:\n next_state = [current_state[0] - 1, current_state[1]]\n elif action == 1:\n next_state = [current_state[0] + 1, current_state[1]]\n elif action == 2:\n next_state = [current_state[0], current_state[1] - 1]\n elif action == 3:\n next_state = [current_state[0], current_state[1] + 1]\n else:\n pass\n \n # check for rewards\n if self.state[next_state[0], next_state[1]] == 1:\n reward = self.reward_space['win']\n self.done = True\n elif (next_state[0] < 0 or next_state[0] >= self.size) or (next_state[1] < 0 or next_state[1] >= self.size):\n # reward for out of bounds penalty\n reward = self.reward_space['loss']\n self.done = True\n \n # update state\n self.state[current_state[0], current_state[1]] = 0\n self.state[next_state[0], next_state[1]] = 1\n self.current_state = next_state\n \n # return state, reward, and done\n return self.state, reward, self.done but is not the same. just give one example and only return the code."}
