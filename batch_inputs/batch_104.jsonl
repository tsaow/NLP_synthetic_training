{"prompt": "make some code that functions the same as the following code: def sort_list(input_list): \n    # Traverse through all array elements \n    for i in range(len(input_list)): \n  \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(input_list)): \n            if input_list[min_idx] > input_list[j]: \n                min_idx = j \n              \n        # Swap the found minimum element with  \n        # the first element         \n        input_list[i], input_list[min_idx] = input_list[min_idx], input_list[i] \n  \n    return input_list\n  \n# Driver code to test above\nif __name__ == '__main__':\n    input_list = [8, 15, 2, 18, 10]\n    print(\"Input list:\", input_list)\n    print(\"Sorted list:\", sort_list(input_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(lst): \n    new_list = [] \n    for item in lst: \n        if item not in new_list: \n            new_list.append(item) \n    return new_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request\n\napp = Flask(name)\n\n@app.route('/average', methods=['POST'])\ndef get_average():\n records = request.json\n total = 0\n for record in records:\n  total += record['value']\n avg = total / len(records)\n return {'average': avg}\n\nif name == 'main':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Book:\n def __init__(self, title, author, year, genre):\n self.title = title\n self.author = author\n self.year = year\n self.genre = genre\n\n def getTitle(self):\n return self.title\n\n def getAuthor(self):\n return self.author\n\n def getYear(self):\n return self.year\n\n def getGenre(self):\n return self.genre but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify(data):\n    if min(data) < 0:\n        return False\n    elif max(data) > 1:\n        return False\n    else:\n        return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndef findLongWords(words):\n    result = []\n    for word in words:\n        if len(word) > 7:\n            result.append(word)\n    return result\n\ndata = json.loads(input_data)\nwords = data[\"words\"]\n\nprint(findLongWords(words)) // [\"catastrophe\", \"accelerate\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: A useful strategy for web scraping this site would be to use the Python library requests to make HTTP requests and BeautifulSoup to parse the HTML content. First, you should make an HTTP request to the website, then you should use BeautifulSoup to find the specific elements you are interested in and extract the data. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sql_query = 'SELECT * FROM table_name' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Enter the Array\narr = [23, 45, 12, 35, 29] \n \n# Enter the Number\nnum = 3\n \n# Print the New Array\nnew_arr = [x for x in arr if x % num != 0] \n \n# Print the Result\nprint(new_arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\npattern = r'[A-Z]{1,2}[0-9R][0-9A-Z]? [0-9][ABD-HJLNP-UW-Z]{2}'\n\ndef validate_postcode(postcode):\n  return re.match(pattern, postcode) != None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(nums): \n  \n    # A list for storing final output \n    new_list = [] \n  \n    # Looping over the elements \n    for num in nums: \n        # If num is not in new_list, then add it \n        if num not in new_list: \n            new_list.append(num) \n  \n    return new_list \n\n# Main code \ninput_list = [1,2,3,4,4,2,7,8,8,1]\nprint(remove_duplicates(input_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findMaxIndex(arr):\n    \"\"\"This function finds the maximum index of an array's sub-array.\"\"\"\n    maxIndex = 0\n    currentMax = 0\n    for i in range(1, len(arr)):\n        if arr[i] > arr[currentMax]:\n            maxIndex = i\n            currentMax = i\n    return maxIndex\n\narr = [2, 3, 4, 5, 7, 9, 11]\nmaxIndex = findMaxIndex(arr)\nprint(maxIndex) # Output: 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for key,val in dictionary.items():\n    print(f\"{key}: {val}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # optimized code snippet to sort the given array\narr = [5, 4, 3, 2, 1]\narr.sort()\nprint(arr)\n# arr is now sorted in ascending order as [1, 2, 3, 4, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_gcd(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n\n    if a > b:\n        a, b = b, a\n    \n    while a != 0:\n        b, a = a, b%a\n        \n    return b\n\nprint(find_gcd(12, 18)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Calculator:\n    def add(self, a, b):\n        return a + b\n    \n    def subtract(self, a, b):\n        return a - b\n    \n    def multiply(self, a, b):\n        return a * b\n    \n    def divide(self, a, b):\n        return a / b\n    \n\ncalc = Calculator()\n\n# Example operations\nnum1 = 10\nnum2 = 2\n\nadd_result = calc.add(num1, num2)\nsubtract_result = calc.subtract(num1, num2)\nmultiply_result = calc.multiply(num1, num2)\ndivide_result = calc.divide(num1, num2)\n\nprint(add_result, subtract_result, multiply_result, divide_result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def largestNumber(list):\n  max = list[0]\n  for num in list:\n    if num > max:\n      max = num\n  return max\n\nlist = [5, 10, 2, 9, 6]\nprint(largestNumber(list)) # Output: 10 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef get_random_string(length=10):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return \"\".join(random.choices(vowels, k=length)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max_min(lst):\n max_val = max(lst)\n min_val = min(lst)\n return max_val, min_val but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import http.server\nimport threading\nimport time\n\nclass MyHandler(http.server.BaseHTTPRequestHandler):\n    def do_GET(self):\n\n        # Build file path\n        url_tokens = self.path.split(\"/\")\n        file_path = \".\"\n        for token in url_tokens:\n            if token != '':\n                file_path += \"/\"+token\n\n        # Set content type\n        self.send_response(200)\n        if file_path.endswith(\".html\"):\n            self.send_header(\"Content-type\", \"text/html\")\n        elif file_path.endswith(\".css\"):\n            self.send_header(\"Content-type\", \"text/css\")\n        else:\n            self.send_header(\"Content-type\", \"text/plain\")\n        self.end_headers()\n\n        # Read and send back file content\n        f = open(file_path, \"rb\")\n        content = f.read()\n        self.wfile.write(content)\n\n        f.close()\n\n# Reload file every 5 minutes\ndef reload_files():\n    while True:\n        threading.Timer(300.0, reload_files).start()\n        print(\"Reloaded pages\")\n\n# Run server\nPORT = 8080\nserver_address = (\"\", PORT)\nserver = http.server.HTTPServer(server_address, MyHandler)\n\n# Start the refreshing timer\nThread(target=reload_files).start()\n\nserver.serve_forever() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_common_substring (str1, str2):\n  # maxstr is the longest common substring \n  maxstr = \"\"\n \n   # calculate the length of both strings \n  len1 = len(str1) \n  len2 = len(str2) \n\n  # reversed loop to iterate throught both strings \n  for i in range(len1,0,-1):\n    for j in range(len2,0,-1): \n  \n      # find the longest matching string \n      if (str1[len1-i:] == str2[len2-j:j+i]): \n        if (len(maxstr) < i): \n          maxstr = str1[len1-i:]\n          break\n\n  return maxstr \n  \n# Test code\nprint(longest_common_substring(\"hello world\", \"hola world\"))\n\n# Output\n# lo world but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def minimumNumberOfCoins(coins, amount): \n    # Initialize the table for all amounts\n    table = [0] * (amount + 1) \n  \n    table[0] = 0\n  \n    for i in range(1, amount+1): \n        table[i] = float(\"inf\") \n        for j in range(len(coins)): \n            sub_res = 0\n            if i >= coins[j]: \n                sub_res = table[i - coins[j]] \n            if (sub_res != float(\"inf\") and\n            sub_res + 1 < table[i]): \n                table[i] = sub_res + 1\n  \n    return table[amount] \n  \n  \nif __name__ == \"__main__\": \n    Coins = [1, 2, 5, 10] \n    Amount = 19\n    print(\"Minimum Coins Required:\",minimumNumberOfCoins(Coins, Amount)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n \ndef generate_password():\n # Generate a random string of 12 characters\n password = ''.join(random.choices(string.ascii_uppercase + string.digits + string.punctuation, k=12))\n \n # Return the password \n return password\n\n# Call the function\npassword = generate_password()\n\n# Print the password\nprint(password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPalindrome(string):\n if string == string[::-1]: # Check if string is the same backwards\nreturn True\n else:\n return False\n\nisPalindrome('abcba') # Output: True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create a Django project\ndjango-admin startproject myproject\n\n# Create an app called 'infoapp'\npython manage.py startapp infoapp\n\n# Configure settings.py to connect to a SQLite database, and add 'infoapp' to INSTALLED_APPS\n# Create models in infoapp/models.py\n# create tests in infoapp/tests.py\n\n# Migrate models\npython manage.py makemigrations\npython manage.py migrate\n\n# Create views and routes in infoapp/views.py\n\n# Run the web application\npython manage.py runserver but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef k_means(data, k):\n centroids = np.random.uniform(low=np.min(data), high=np.max(data), size=(k, data.shape[1]))\n distances = np.zeros(shape=(data.shape[0], k))\n cluster_labels = np.zeros(shape=data.shape[0])\n\n while True:\n  # Calculate distances between data points and centroids\n  for i in range(k):\n   distances[:, i] = np.linalg.norm(data - centroids[i], axis=1)\n\n  # Assign clusters\n  cluster_labels = np.argmin(distances, axis=1)\n\n  # Compute new centroids\n  new_centroids = np.zeros(shape=centroids.shape)\n  for i in range(k):\n   new_centroids[i] = np.mean(data[cluster_labels == i], axis=0)\n\n  # Check for convergence\n  if np.allclose(centroids, new_centroids):\n   break\n\n  # Update centroids for next iteration\n  centroids = new_centroids\n\n return centroids, cluster_labels but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_list_div_conq(lst): \n    if len(lst) == 1: \n        return lst[0] \n  \n    mid = len(lst)//2\n    left_max = max_list_div_conq(lst[:mid]) \n    right_max = max_list_div_conq(lst[mid:]) \n    return max(left_max, right_max) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def function(x):\n new_x = []\n for i in range(len(x)):\n  new_x.append(x[i] * 2)\n return new_x\n\nThe modified algorithm reduces the program's runtime from O(n) to O(1) since the new version operates only on a single data structure, instead of the original two. This results in improved performance, since only the output array needs to be processed. The modified algorithm also utilizes the inherent properties of Python's list data structure more efficiently. Therefore, the time complexity and resulting runtime of the algorithm is significantly improved. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_complex_numbers(z1, z2):\n    if z1.real == z2.real and z1.imag == z2.imag:\n        return 'z1 and z2 are equal'\n    else:\n        return 'z1 and z2 are not equal' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\nfrom __future__ import with_statement\n\nimport re\nimport cgi\n\ncolorcodes =   {'bold':{True:'\\033[1m',False:'\\033[22m'},\n                'cyan':{True:'\\033[1;36m',False:'\\033[0;0m'},\n                #'#8E4429':{True:'\\033[1;33m',False:'\\033[0;0m'},\n\t\t'#8E4429':{True:'\\033[0;33m',False:'\\033[0;0m'},\n\t\t#'#8E4429':{True:'\\033[33m',False:'\\033[0;0m'},\n                '#0000B0':{True:'\\033[1;34m',False:'\\033[0;0m'},\n                '#B63A11':{True:'\\033[1;31m',False:'\\033[0;0m'},\n                'magenta':{True:'\\033[1;35m',False:'\\033[0;0m'},\n                #'green':{True:'\\033[1;32m',False:'\\033[0;0m'},\n\t\t'green':{True:'\\033[0;32m',False:'\\033[0;0m'},\n\t\t#'green':{True:'\\033[32m',False:'\\033[0;0m'},\n                'underline':{True:'\\033[1;4m',False:'\\033[0;0m'}}\n\ndef recolor(color, text):\n    regexp = \"(?:%s)(.*?)(?:%s)\" % (colorcodes[color][True], colorcodes[color][False])\n    regexp = regexp.replace('[', r'\\[')\n    return re.sub(regexp, r'''<span style=\"color: %s\">\\1</span>''' % color, text)\n\ndef resinglecolor(color, text, intxt):\n    regexp = \"(?:\\033\\[1;32m%s)(.*?)\" % intxt\n    return re.sub(regexp, r'<span style=\"color: green\">%s\\1</span>'% intxt, text)\n\ndef removestdcolor(text):\n    regexp = \"(?:\\033\\[0;0m)(.*?)\"\n    return re.sub(regexp, r'', text)\n\ndef bold(text):\n    regexp = \"(?:%s)(.*?)(?:%s)\" % (colorcodes['bold'][True], colorcodes['bold'][False])\n    regexp = regexp.replace('[', r'\\[')\n    return re.sub(regexp, r'<span style=\"font-weight:bold\">\\1</span>', text)\n\ndef underline(text):\n    regexp = \"(?:%s)(.*?)(?:%s)\" % (colorcodes['underline'][True], colorcodes['underline'][False])\n    regexp = regexp.replace('[', r'\\[')\n    return re.sub(regexp, r'<span style=\"text-decoration: underline\">\\1</span>', text)\n\ndef removebells(text):\n    return text.replace('\\07', '')\n\ndef removebackspaces(text):\n    backspace_or_eol = r'(.\\010)|(\\033\\[K)'\n    n = 1\n    while n > 0:\n        text, n = re.subn(backspace_or_eol, '', text, 1)\n    return text\n\ntemplate = '''\\\n<html>\n<head>\n\n</head>\n<body>\n%s\n</body>\n</html>\n'''\n\nre_string = re.compile(r'(?P<htmlchars>[<&>])|(?P<space>^[ \\t]+)|(?P<lineend>\\r\\n|\\r|\\n)|(?P<protocal>(^|\\s|\\[)((http|ftp)://.*?))(\\s|$|\\])', re.S|re.M|re.I)\ndef plaintext2html(text, tabstop=4):\n    def do_sub(m):\n        c = m.groupdict()\n        if c['htmlchars']:\n            return cgi.escape(c['htmlchars'])\n        if c['lineend']:\n            return '<br>'\n        elif c['space']:\n            t = m.group().replace('\\t', '&nbsp;'*tabstop)\n            t = t.replace(' ', '&nbsp;')\n            return t\n        elif c['space'] == '\\t':\n            return ' '*tabstop;\n        else:\n            url = m.group('protocal')\n            #print url\n            if url.startswith('['):\n                prefix = '['\n                suffix = ']'\n                url = url[1:]\n            else:\n                prefix = ''\n                suffix = ''\n            last = m.groups()[-1]\n            if last in ['\\n', '\\r', '\\r\\n']:\n                last = '<br>'\n            return '%s<a href=%s>%s</a>%s' % (prefix, url, url, suffix)\n    result = re.sub(re_string, do_sub, text)\n    result = result.replace(' ', '&nbsp;')\n    result = result.replace('\\t', '&nbsp;'*tabstop)\n\n    result = recolor('cyan', result)\n    result = recolor('#8E4429', result)\n    result = recolor('#0000B0', result)\n    result = recolor('#B63A11', result)\n    result = recolor('magenta', result)\n    result = recolor('green', result)\n\n    result = resinglecolor('green', result, 'Source')\n    result = resinglecolor('green', result, 'Output')\n\n    result = bold(result)\n    result = underline(result)\n    result = removebells(result)\n    result = removebackspaces(result)\n\n    result = removestdcolor(result)\n\n    return template % result\n\n\nif __name__ == '__main__':\n    import sys\n    with open(sys.argv[-1]) as f:\n        text = f.read()\n    print plaintext2html(text)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num):\n    if num <= 1:\n        return False\n\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr\n\ninsertion_sort(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pairs_sum_to_zero(array):\n  pairs = []\n  for i in range(len(array)):\n    for j in range(i+1, len(array)):\n      if array[i] + array[j] == 0:\n        pairs.append([array[i], array[j]])\n  return len(pairs) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n\ndef shuffle_list(myList): \n  shuffledList = random.sample(myList, len(myList)) \n  return shuffledList\n\nshuffledList = shuffle_list(myList) \n\nprint(\"Shuffled List :\", shuffledList) \n\n# Output: Shuffled List : [2, 6, 4, 5, 3, 1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n    def __init__(self, firstName, lastName, age):\n        self.firstName = firstName\n        self.lastName = lastName\n        self.age = age but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_array():\n  my_array = []\n  for i in range(20):\n    my_array.append(random.randint(1,100))\n  return my_array but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nhtml = '<div> <h1>This is an example block of HTML</h1> <ul> <li>This is the first item</li> <li>This is the second item</li> </ul> </div>'\n soup = BeautifulSoup(html, 'html.parser')\n\nfor item in soup.find_all('li'):\n print(item.text)\n\n# Output\n# This is the first item\n# This is the second item but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\ndef most_frequent_word(string):\n    split_string = string.split(\" \")\n    counter = Counter(split_string)\n    return counter.most_common(1)[0][0]\n\nprint(most_frequent_word(\"This is an example of a text with some words\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_str_arr(arr1, arr2):\n    arr1.sort()\n    arr2.sort()\n\n    return arr1 + arr2\n\narr1 = [\"zebra\", \"apple\", \"carrot\"]\narr2 = [\"banana\", \"elephant\", \"cat\"]\n\nsorted_arrs = sort_str_arr(arr1, arr2)\n\nprint(sorted_arrs) # ['apple', 'banana', 'carrot', 'cat', 'elephant', 'zebra'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def case_insensitive_compare(str1, str2):\n return str1.lower() == str2.lower()\n\nstring1 = \"Hello\"\nstring2 = \"hello\"\n\nprint(case_insensitive_compare(string1, string2))\n\n# Output\nTrue but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import classification_report, confusion_matrix\n\n# load data\ndata = pd.read_csv('<PATH TO DATA>')\n\n# Split data into features and labels\nX = data.drop(columns=['label'])\ny = data['label']\n\n# split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20)\n\n# Scale the data\nscaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)\n\n# Create and train the model\nmodel = SVC(C=1.0, kernel='poly', degree=5, gamma='auto')\nmodel.fit(X_train, y_train)\n\n# Make predictions and evaluate\ny_pred = model.predict(X_test)\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: new_list = []\nfor string in strings:\n if len(string) <= 15:\n new_list.append(string)\n\nprint(new_list)  # prints ['good', 'very good', 'excellent', 'awesome'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def dot_product(list1, list2):\n result = 0\n for i in range(len(list1)):\n  result += list1[i] * list2[i] \n return result\n\nlist1 = [2,4,6]\nlist2 = [3,4,5]\ndot = dot_product(list1, list2)\nprint('Dot product of two lists =', dot) # Dot product of two lists = 46 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list1 = [\"apple\", \"banana\", \"orange\"]\nlist2 = [\"fruit\", \"fruit\", \"fruit\"] \n\ndictionary = dict(zip(list1, list2))\n\nprint(dictionary) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def to_string_list(lst):\n    return [str(x) for x in lst]\n\nint_list = [1, 2, 3]\nstring_list = to_string_list(int_list)\nprint(string_list)\n\n## Output\n['1', '2', '3'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseString(text):\n    return text[::-1]\n \nresult = reverseString(\"Hello World!\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = \"Python is powerful & fun\"\nsubstring = \"pow\"\n \nstart_pos = string.find(substring)\nif start_pos == -1:\n    print(\"substring not found\")\nelse:\n    print(\"substring found at position:\", start_pos) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n):\n    first, second = 0, 1\n    for _ in range(n):\n        print(first)\n        first, second = second, first + second but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom flask import Flask, request\nfrom flask_restful import Resource, Api\n\ndata = [['Apple','Fruit','$3.99'], \n        ['Tomato','Vegetable','$1.99'],\n        ['Shampoo','Household','$2.99']] \n\ndf = pd.DataFrame(data,columns=['Name','Category','Price'])\n\napp = Flask(__name__)\napi = Api(app)\n\nclass Search(Resource):\n    def get(self):\n        product = request.args.get('product')\n        result = df.loc[df['Name'] == product]\n        return {'result': result.to_dict('records')}\n\napi.add_resource(Search, '/search')\n\nif __name__ == '__main__':\n    app.run(debug=True, host='0.0.0.0') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Read the dataset\ndf = pd.read_csv('clothing.csv')\n\n# Split the dataset into features and labels\nX = df.iloc[:,:-1]\ny = df.iloc[:,-1]\n\n# Create the model\nmodel = Sequential()\nmodel.add(Dense(64, activation='relu', input_shape=(X.shape[1],)))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(1))\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='mse', metrics=['mae'])\n\n# Train the model\nmodel.fit(X, y, epochs=100, batch_size=32, validation_split=0.2, verbose=0) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_longest_string(list_strings):\n    longest_string = \"\"\n    for string in list_strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    list_strings.remove(longest_string)\n    return list_strings\n\nprint(remove_longest_string(list_strings)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def evaluate_expression(exp):\n  return eval(exp) \n\nexpression = \"7*6+20\"\noutput = evaluate_expression(expression)\nprint(output) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence = \"This sentence contains a handful of words\"\nword_list = sentence.split()\nunique_words = set(word_list)\nsorted_words = sorted(unique_words)\n\nprint(sorted_words)\n\n# Output: ['This', 'a', 'contains', 'handful', 'of', 'sentence', 'words'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findMax(list):\n    # initialize the maximum variable to the first element of the list.\n    maximum = list[0]\n\n    # iterate through the list and compare each element to the current maximum element.\n    for element in list:\n        if element > maximum:\n            maximum = element\n    \n    # return the maximum element.\n    return maximum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_integers(arr):\n n = len(arr)\n for i in range(n):\n  for j in range(0, n - i - 1):\n   if arr[j] > arr[j + 1]:\n    arr[j], arr[j + 1] = arr[j + 1], arr[j]\n return arr\n\nunsorted_list = [4, 2, 7, 1, 3, 8]\nprint(sort_integers(unsorted_list))\n# Output: [1,2,3,4,7,8] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseString(string): \n    string = \"\".join(reversed(string)) \n    return string \n\nif __name__ == \"__main__\": \n    string = \"Hello World!\"\n    print(reverseString(string))\n\n# Output:\n\"!dlroW olleH\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n  \n# randomly \nnumber = random.randint(1, 20) \nprint(\"I am thinking of a number between 1 and but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from datetime import datetime\n \ndate_string = '2019/02/29'\ntry:\n date = datetime.strptime(date_string, '%Y/%m/%d')\n \n if date.year % 4 == 0 and date.month == 2 and date.day == 29:\n print('Valid Date')\n else:\n print('Invalid Date')\nexcept ValueError:\n print('Invalid Date') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python implementation of Prim's Algorithm for MST \nimport sys \n\n# Number of vertices in the graph \ndef primsMST(graph, n): \n\tkey = [sys.maxsize] * n \n\tparent = [None] * n \n\tkey[0] = 0\n\tmstSet = [False] * n \n\tparent[0] = -1\n\n\tfor count in range(n): \n\t\tu = minKey(key, mstSet)  \n\t\tmstSet[u] = True\n\t\tfor v in range(n): \n\t\t\tif graph[u][v] > 0 and mstSet[v] == False and key[v] > graph[u][v]: \n\t\t\t\t\tkey[v] = graph[u][v] \n\t\t\t\t\tparent[v] = u \n\n\ttotal_cost = 0\n\t# print the constructed MST \n\tfor i in range(1, n): \n\t\ttotal_cost += graph[parent[i]][i] \n\t\tprint(\"% d - % d: % d\" % (parent[i], i, graph[parent[i]][i])) \n\t\t\n\tprint(\"Total cost of the optimized route: % d\" %(total_cost))\n\ndef minKey(key, mstSet): \n\tmin = sys.maxsize \n\tfor v in range(len(key)): \n\t\tif key[v] < min and mstSet[v] == False: \n\t\t\tmin = key[v] \n\t\t\tmin_index = v \n\treturn min_index \n\n# Driver code \nif __name__ == '__main__': \n\n\tgraph = [[0, 2, 0, 6, 0], \n\t\t\t[2, 0, 3, 8, 5], \n\t\t\t[0, 3, 0, 0, 7], \n\t\t\t[6, 8, 0, 0, 9], \n\t\t\t[0, 5, 7, 9, 0]] \n\t\t\t \n\tn = len(graph) \n\t\n\tprimsMST(graph, n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sorting_algorithm(num_list):\n    for i in range(len(num_list)):\n        for j in range(i + 1, len(num_list)):\n            if num_list[i] > num_list[j]:\n                num_list[i], num_list[j] = num_list[j], num_list[i]\n    return num_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # imports \nimport requests\nimport json\n\n# API endpoint \nurl = 'https://financialmodelingprep.com/api/v3/stock/quote/{ticker}?apikey={apikey}'\n\n# API request function \ndef get_quote(ticker):\n    api_key = '<Your API Key Here>'\n    response = requests.get(url.format(ticker=ticker, apikey=api_key))\n    if response.status_code == 200:\n        return json.loads(response.content.decode('utf-8'))\n    else:\n        return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\n\nsentence = \"The quick brown fox jumps over the lazy dog\"\n\nwords = nltk.word_tokenize(sentence)\n\nword_freq = {}\n\nfor word in words:\n if word in word_freq:\n  word_freq[word] += 1\n else:\n  word_freq[word] = 1\n\nprint(word_freq) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_user_value(x):\n    print(x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_factors(n): \n    factors = [1]\n    for i in range(2, n + 1):\n        if (n % i == 0): \n            factors.append(i) \n    return factors but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def draw_diamond(stars): \n  for i in range(stars): \n      \n      # loop to print spaces \n      for j in range(stars - i - 1): \n          print(end=\" \") \n        \n      # loop to print stars \n      for j in range(i + 1): \n          print(\"*\", end=\" \") \n      \n      # new line after printing each row \n      print()  \n  \n  # loop to print rows of stars for bottom side of pattern \n  for i in range(stars - 1, 0, -1): \n      # loop to print spaces \n      for j in range(stars - i - 1): \n          print(end=\" \") \n        \n      # loop to print stars \n      for j in range(i): \n          print(\"*\", end=\" \") \n      \n      # new line after printing each row \n      print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: package main\n\nimport (\n\t\"strings\"\n)\n\nfunc capitalize(string string) string {\n\treturn strings.ToUpper(string)\n}\n\nfunc main() {\n\tstring := \"python\"\n\tfmt.Println(capitalize(string))\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def difference(list1, list2):\n    difference_set = set(list1) - set(list2)\n    return list(difference_set)\n\nlist1 = [1, 2, 3, 4]\nlist2 = [2, 3, 4, 5]\n\ndifference = difference(list1, list2)\nprint(difference)\n\n# Output:\n# [1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [3, 5, 7, 9, 2]\n\nlast_element = my_list[-1]\nprint('Last element in the list is %d' % (last_element)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from scipy.optimize import minimize\ndef f(x):\n    return x[0]**2 + 4*x[1]**2\n\nres = minimize(f, [3, -2], method='nelder-mead')\n\nprint(res.x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_ISBN():\n    #Make a list of random integers\n    digits = [random.randint(0, 9) for _ in range(12)]\n    #Calculate the checksum \n    sum_ = 0\n    for index, digit in enumerate(digits):\n        weight = 1 if (index % 2 == 0) else 3\n        sum_ += digit * weight\n    #Calculate the checksum digit\n    checksum = 10 - (sum_ % 10)\n    # Append the checksum digit to the ISBN\n    isbn = ''.join(map(str, digits)) + str(checksum)\n    return isbn but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #! /usr/bin/env python\n\nfrom __future__ import print_function\nfrom openturns import *\nfrom cmath import *\n\nTESTPREAMBLE()\nRandomGenerator.SetSeed(0)\n\ntry:\n    # Instanciate one distribution object\n    distribution = FisherSnedecor(5.5, 10.5)\n    print(\"Distribution \", repr(distribution))\n    print(\"Distribution \", distribution)\n\n    # Is this distribution elliptical ?\n    print(\"Elliptical = \", distribution.isElliptical())\n\n    # Is this distribution continuous ?\n    print(\"Continuous = \", distribution.isContinuous())\n\n    # Test for realization of distribution\n    oneRealization = distribution.getRealization()\n    print(\"oneRealization=\", repr(oneRealization))\n\n    # Test for sampling\n    size = 10000\n    oneSample = distribution.getSample(size)\n    print(\"oneSample first=\", repr(\n        oneSample[0]), \" last=\", repr(oneSample[size - 1]))\n    print(\"mean=\", repr(oneSample.computeMean()))\n    print(\"covariance=\", repr(oneSample.computeCovariance()))\n\n    size = 100\n    for i in range(2):\n        msg = ''\n        if FittingTest.Kolmogorov(distribution.getSample(size), distribution).getBinaryQualityMeasure():\n            msg = \"accepted\"\n        else:\n            msg = \"rejected\"\n        print(\n            \"Kolmogorov test for the generator, sample size=\", size, \" is\", msg)\n        size *= 10\n\n    # Define a point\n    point = NumericalPoint(distribution.getDimension(), 1.0)\n    print(\"Point= \", repr(point))\n\n    # Show PDF and CDF of point\n    eps = 1e-5\n\n    # derivative of PDF with regards its arguments\n    DDF = distribution.computeDDF(point)\n    # print \"ddf     =\" , repr(DDF)\n    # by the finite difference technique\n    # print \"ddf (FD)=\" ,repr(NumericalPoint(1, (distribution.computePDF(\n    # point + NumericalPoint(1, eps) ) - distribution.computePDF( point  +\n    # NumericalPoint(1, -eps) )) / (2.0 * eps)))\n\n    # PDF value\n    LPDF = distribution.computeLogPDF(point)\n    print(\"log pdf=%.6f\" % LPDF)\n    PDF = distribution.computePDF(point)\n    print(\"pdf     =%.6f\" % PDF)\n    # by the finite difference technique from CDF\n    print(\"pdf (FD)=%.6f\" % ((distribution.computeCDF(point + NumericalPoint(1, eps)) -\n                              distribution.computeCDF(point + NumericalPoint(1, -eps))) / (2.0 * eps)))\n\n    # derivative of the PDF with regards the parameters of the distribution\n    CDF = distribution.computeCDF(point)\n    print(\"cdf=%.6f\" % CDF)\n    CCDF = distribution.computeComplementaryCDF(point)\n    print(\"ccdf=%.6f\" % CCDF)\n    CF = distribution.computeCharacteristicFunction(point[0])\n    print(\"characteristic function=(%.6f+%.6fj)\" % (CF.real, CF.imag))\n    ## PDFgr = distribution.computePDFGradient( point )\n    # print \"pdf gradient     =\" , repr(PDFgr)\n    # by the finite difference technique\n    ## PDFgrFD = NumericalPoint(2)\n    ## PDFgrFD[0] = (FisherSnedecor(distribution.getLambda() + eps, distribution.getGamma()).computePDF(point) - FisherSnedecor(distribution.getLambda() - eps, distribution.getGamma()).computePDF(point)) / (2.0 * eps)\n    ## PDFgrFD[1] = (FisherSnedecor(distribution.getLambda(), distribution.getGamma() + eps).computePDF(point) - FisherSnedecor(distribution.getLambda(), distribution.getGamma() - eps).computePDF(point)) / (2.0 * eps)\n    # print \"pdf gradient (FD)=\" , repr(PDFgrFD)\n\n    # derivative of the PDF with regards the parameters of the distribution\n    ## CDFgr = distribution.computeCDFGradient( point )\n    # print \"cdf gradient     =\" , repr(CDFgr)\n    ## CDFgrFD = NumericalPoint(2)\n    ## CDFgrFD[0] = (FisherSnedecor(distribution.getLambda() + eps, distribution.getGamma()).computeCDF(point) - FisherSnedecor(distribution.getLambda() - eps, distribution.getGamma()).computeCDF(point)) / (2.0 * eps)\n    ## CDFgrFD[1] = (FisherSnedecor(distribution.getLambda(), distribution.getGamma() + eps).computeCDF(point) - FisherSnedecor(distribution.getLambda(), distribution.getGamma() - eps).computeCDF(point)) / (2.0 * eps)\n    # print \"cdf gradient (FD)=\",  repr(CDFgrFD)\n\n    # quantile\n    quantile = distribution.computeQuantile(0.95)\n    print(\"quantile=\", repr(quantile))\n    print(\"cdf(quantile)=%.6f\" % distribution.computeCDF(quantile))\n    mean = distribution.getMean()\n    print(\"mean=\", repr(mean))\n    standardDeviation = distribution.getStandardDeviation()\n    print(\"standard deviation=\", repr(standardDeviation))\n    skewness = distribution.getSkewness()\n    print(\"skewness=\", repr(skewness))\n    kurtosis = distribution.getKurtosis()\n    print(\"kurtosis=\", repr(kurtosis))\n    covariance = distribution.getCovariance()\n    print(\"covariance=\", repr(covariance))\n    parameters = distribution.getParametersCollection()\n    print(\"parameters=\", repr(parameters))\n    for i in range(6):\n        print(\"standard moment n=\", i, \" value=\",\n              distribution.getStandardMoment(i))\n    print(\"Standard representative=\", distribution.getStandardRepresentative())\n\nexcept:\n    import sys\n    print(\"t_FisherSnedecor_std.py\", sys.exc_info()[0], sys.exc_info()[1])\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findPrime(nums):\n for num in nums:\n if isPrime(num):\n return num\n\ndef isPrime(num):\n if num <= 1:\n return False\n for i in range(2, num):\n if (num % i == 0):\n return False\n return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseWords(sentence):\n  words = sentence.split()\n  words.reverse()\n  newSentence = ' '.join(words)\n  print(newSentence)\nreverseWords(\"Hello, World!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n): \n\tif n<0: \n\t\tprint(\"Incorrect input\") \n\t\t\n\t# First Fibonacci number is 0 \n\telif n==1: \n\t\treturn 0\n\t# Second Fibonacci number is 1 \n\telif n==2: \n\t\treturn 1\n\telse: \n\t\treturn fibonacci(n-1)+fibonacci(n-2) \n\nprint(fibonacci(5)) # Outputs 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: most_expensive_item = max(list_of_items, key=lambda x: x['price']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findMaxValue(arr):\n    max_value = None\n    for element in arr:\n        if max_value == None or element > max_value:\n            max_value = element\n    return max_value but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http;//example.com/news'\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\nheadlines = soup.find_all('h2')\n\nfor headline in headlines:\n print(headline.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def char_count(str1):\n    dict = {} \n    for n in str1: \n        keys = dict.keys() \n        if n in keys: \n            dict[n] += 1\n        else: \n            dict[n] = 1 \n    return dict but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.classify import NaiveBayesClassifier\n\n# Corpus of Train Data\ntrain_data = [(\"This is a great day for a walk.\", 'positive'), \n              (\"Today's forecast looks horrible\", 'negative'),\n              (\"The weather is so beautiful.\", 'positive')] \n\n# Tokenize words\nwords_list = [word_tokenize(sent[0]) for sent in train_data]\n\n# Build a list of words\nall_words = []\nfor word_list in words_list:\n    for word in word_list:\n        all_words.append(word.lower())\n\n# Get the Frequency Distribution of the words\nall_words_unique = nltk.FreqDist(all_words)\n\n# Move the features to the word list\nword_features = list(all_words_unique.keys())\n\n# Function to extract features\ndef extract_features(sentence):\n    tokenize_words = word_tokenize(sentence)\n    features = {}\n    for word in word_features:\n        features[word] = (word in tokens)\n    return features\n\n# Train the model\ntraining_set = nltk.classify.apply_features(extract_features, train_data)\nclassifier = NaiveBayesClassifier.train(training_set)   \n\n# Predictions\nsentence = \"This is a great day for a walk.\"\npred = classifier.classify(extract_features(sentence))\nprint (pred) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n): \n    if n <= 1: \n        return n \n    else:\n        fibonacci_num=[0,1] #creating a fibonacci list\n        i=2\n        while i<=n:\n            fibonacci_num.append(fibonacci_num[i-1]+fibonacci_num[i-2])\n            i+=1\n        return fibonacci_num[n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_misssing_number(arr):\n  # Get length of array\n  arr_length = len(arr)\n \n  # Find the sum of array elements\n  sum_of_elements = sum(arr)\n \n  # Find the expected sum\n  expected_sum = (arr_length+1)*((arr_length+1)+1)//2\n \n  # Return difference\n  return expected_sum - sum_of_elements\n\n# Test\narr = [9, 5, 4, 6, 8, 7, 1, 2]\n\n# Find missing number\nmissing_number = find_misssing_number(arr)\n\n# Print the missing number\nprint(f'Missing number : {missing_number}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nresponse = requests.get('https://example.com/')\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nfor h1 in soup.find_all('h1'):\n print(h1.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Solution\n# First, let's import necessary libraries\nimport pandas as pd\nimport openpyxl as op\n\n# Then, let's define a dictionary with user inputs\nuser_inputs = {\n 'name': 'John Smith',\n 'age': 28\n 'gender': 'Male'\n}\n\n# Next, we need to create a Pandas DataFrame with the data\ndf = pd.DataFrame([user_inputs])\n\n# Finally, we can write the data to an Excel spreadsheet\nwriter = pd.ExcelWriter('user_details.xlsx', engine='openpyxl')\ndf.to_excel(writer, sheet_name='Sheet1', index=False)\nwriter.save() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Chatbot:\n    def __init__(self):\n        self.response_dict = {}\n        self.default_response = \"\"\n  \n    def add_response(self, user_input, bot_response):\n        self.response_dict[user_input] = bot_response\n  \n    def set_default_response(self, default_response):\n        self.default_response = default_response\n  \n    def response(self, user_input):\n        if user_input in self.response_dict:\n            return self.response_dict[user_input]\n        else:\n            return self.default_response but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_numbers(lst):\n    count = sum(map(str.isdigit, lst))\n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a program to print the multiplication table for a given number in Python\n\"\"\"\n\ndef multiplication_table(n):\n    for i in range(1, 11):\n        print(n, 'x', i, '=', n*i)\n\nif __name__==\"__main__\":\n    multiplication_table(5) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: [i**2 for i in range(2, 101, 2)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\ndef convert_datetime_to_timestamp(date_time, timestamp_format):\n    return datetime.strptime(date_time, \"%Y-%m-%d %H:%M:%S\").strftime(timestamp_format) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\nfrom collections import Counter\n\ndef read_logs(log_file):\n log_entries = []\n with open(log_file) as f:\n lines = f.readlines()\n for line in lines:\n log_entry = line.strip().split(' ')\n log_entries.append(log_entry)\n return log_entries\n\ndef find_top_urls(log_file, day):\n log_entries = read_logs(log_file)\n urls = [log[2] for log in log_entries if log[0].startswith(day)]\n counter_urls = Counter(urls)\n return counter_urls.most_common(10)\n\nif __name__ == \"__main__\":\n top_urls = find_top_urls('sample.log', '2020-06-04')\n print(top_urls) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\n# define the least squares function\ndef least_squares(x, y):\nx_mean = np.mean(x)\ny_mean = np.mean(y)\n\nnum = np.sum((x - x_mean)*(y - y_mean))\ndenom = np.sum((x - x_mean)**2)\n\nm = num / denom\nb = y_mean - (m * x_mean)\n\nreturn m, b\n\n# define some sample data\nx = np.array([1, 2, 3, 4, 5, 6])\ny = np.array([3, 4, 5, 6, 7, 8])\n\n# get the linear regression line coefficients\nm, b = least_squares(x, y)\n\n# calculate the linear regression line\nreg_line = m * x + b\n\n# print out the linear regression line\nprint('y = %sx + %s' % (round(m,2), round(b,2))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.naive_bayes import GaussianNB\n\n# Define the features as an array of words\nfeatures = ['get', 'rich', 'quick', 'large', 'sums', 'money', 'faster', 'imagined']\n\n# Labels where 1 = spam, 0 = not spam\nlabels = [1, 0]\n\n# Create an instance of the GaussianNB classifier\nclassifier = GaussianNB()\n\n# Fit the data to the model\nclassifier.fit(features, labels)\n\n# Test with a given email message\nemail = 'Get Rich Quick!'\n\n# Create an array for the features of the email message\nfeatures = [word for word in email.lower().split() if word in features]\n\n# Predict the label of the email message\nprediction = classifier.predict([features])\n\n# Print the result\nprint('The email message is {0}'.format('spam' if prediction[0] == 1 else 'not spam')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quicksort(array):\n  if len(array) < 2:\n    # base case, arrays with 0 or 1 element are already sorted\n    return array\n  else:\n    # recursive case\n    pivot = array[0]\n    # sub-array of all the elements less than the pivot\n    less = [i for i in array[1:] if i <= pivot]\n    # sub-array of all the elements greater than the pivot\n    greater = [i for i in array[1:] if i > pivot]\n    return quicksort(less) + [pivot] + quicksort(greater)\n\nprint(quicksort(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n######################################################################\n#\n# File: match_ref_hyp.py\n# Author: Adam Janin\n#         Feb 23, 2017\n#\n# Given a reference file and a hypothesis file, figure out which parts\n# of the hypotheses match which part of the reference. Output the\n# hypotheses file as stm, where the non-text lines are taken\n# from the matching lines of the reference (except where there's\n# no matching references, where the non-text will be \"unmatched\").\n#\n# Currently, only stm for reference and ctm for hypthosis files are\n# supported.  The algorithm currently mimics sclite; the midpoint of a\n# ctm word is used to determine its time, and it is assigned to the\n# first stm segment it's within.\n#\n# This code can be used either as a stand-alone program, or it can\n# be imported. See function match_ref_hyp()\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you\n# may not use this file except in compliance with the License.  The\n# License may be found in the file LICENSE at the top level of the\n# repository / directory tree.\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n# implied.  See the License for the specific language governing\n# permissions and limitations under the License.\n\n\nfrom __future__ import print_function\n\nfrom six.moves import input\nimport six\n\nimport argparse\nfrom bisect import bisect\nfrom collections import defaultdict\nimport logging\nfrom operator import methodcaller\nimport sys\n\nimport utils\n\nVERSION = 0.1\n\n\nclass Global:\n    '''Stores globals. There should be no instances of Global.'''\n\n    # Command line arguments\n    args = None\n\n    # Two times that are less than this are considered identical.\n    epstime = 0.005\n\n# end class Global\n\n\ndef main(argv):\n    parse_arguments(argv[1:])\n    setup_logging()\n\n    instm = utils.read_stm(Global.args.ref)           # List of STM_Line\n    inctm = utils.read_ctm(Global.args.inhyp)         # List of CTM_Line\n\n    outhyp = match_ref_hyp(instm, inctm)              # List of STM_Line\n\n    for line in outhyp:\n        Global.args.outhyp.write(str(line))\n        Global.args.outhyp.write('\\n')\n\n# end main()\n\n\ndef match_ref_hyp(instm, inctm):\n    \"\"\"Given a list of references of type STM_Line and a list of hypotheses of type CTM_Line, return a list of type STM_Line where each word in the input ctm is matched (in time) with a corresponding entry in the input stm file. If a word doesn't match any line in the input stm, it is given a new entry with speaker \"unmatched\" (since the input ctm doesn't specify speaker).\"\"\"\n    outhyps = []\n\n    # Go through the ctms, storing each file/channel in a separately\n    # sorted list.\n\n    # Map of e.g. 'sw_4390 A' -> list of CTM_Line sorted by midtime\n    sorted_ctms = defaultdict(list)\n\n    # Map of e.g. 'sw_4390 A' -> list of booleans, False if the ctm hasn't been assigned\n    # to an stm line, True otherwise.\n    assigned = {}\n\n    # The midtimes of sorted_ctms in the same order.\n    sorted_ctm_midtimes = {}\n\n    # Store the ctms by file/channel\n    for ctm in inctm:\n        sorted_ctms['%s %s'%(ctm.file, ctm.channel)].append(ctm)\n\n    # Sort them by midtime.\n    for key in sorted_ctms:\n        ctmlist = sorted_ctms[key]\n        ctmlist.sort(key=methodcaller('midtime'))\n        sorted_ctm_midtimes[key] = [x.midtime() for x in ctmlist]\n        assigned[key] = [False]*len(ctmlist)\n\n    for ref in instm:\n        outwords = []\n\n        filechannel = '%s %s'%(ref.file, ref.channel)\n        if filechannel not in sorted_ctm_midtimes:\n            continue\n        cur_ctm_midtimes = sorted_ctm_midtimes[filechannel]\n        cur_ctms = sorted_ctms[filechannel]\n        for ii in range(bisect(cur_ctm_midtimes, ref.starttime), len(cur_ctm_midtimes)):\n            hyptime = cur_ctm_midtimes[ii]\n            hyp = cur_ctms[ii]\n            if hyptime < ref.starttime or hyptime > ref.endtime:\n                break\n            else:\n                if assigned[filechannel][ii]:\n                    # If it's only barely assigned to this segment, don't report the error.\n                    if abs(hyptime - ref.starttime) > Global.epstime and abs(hyptime - ref.endtime) > Global.epstime:\n                        logging.warning(\"Warning: Found hypothesis that matches more than one stm line. This indicates that the stm contains overlapping segments. The ctm word has been assigned to the first segment. The ctm entry was:\\n%s\\nThe second stm entry was:\\n%s\\n\"%(hyp, ref))\n                else:\n                    assigned[filechannel][ii] = True\n                    outwords.append(hyp.word)\n\n        # Make a copy of the corresponding ref line, and replace the words.\n        outhyp = utils.STM_Line(str(ref))\n        outhyp.words = ' '.join(outwords)\n        outhyps.append(outhyp)\n\n    # Now find any ctms that were not assigned to an stm.\n    outwords = []\n    for filechannel in sorted_ctms:\n        for ii in range(len(sorted_ctms[filechannel])):\n            if not assigned[filechannel][ii]:\n                hyp = sorted_ctms[filechannel][ii]\n                outhyp = utils.STM_Line()\n                outhyp.file = hyp.file\n                outhyp.channel = hyp.channel\n                outhyp.speaker = 'unassigned'\n                outhyp.starttime = hyp.starttime\n                outhyp.endtime = hyp.starttime + hyp.duration\n                outhyp.label = '<>'\n                outhyp.words = hyp.word\n                outhyps.append(outhyp)\n\n    return outhyps\n\n# end match_ref_hyp()\n\n\ndef parse_arguments(strs):\n    parser = argparse.ArgumentParser(description='Given input references in stm format and input hypothesis in ctm format, generate a hypothesis file in stm format. Each hypothisis line is generated by picking any words from the same file/channel whose midpoint intersects the corresponding reference line. Any hypothesis words that do not match a reference line are added at the end of the hypothesis file. Version %s.'%(VERSION))\n    parser.add_argument('-loglevel',\n                        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],\n                        default='WARNING',\n                        help='Logging level (default %(default)s)')\n    parser.add_argument('-version', '--version', action='version', version=str(VERSION))\n    parser.add_argument('-ref', help='Input reference file in stm format', type=argparse.FileType('r'), required=True)\n    parser.add_argument('-inhyp', help='Input hypothesis file in ctm format', type=argparse.FileType('r'), required=True)\n    parser.add_argument('-outhyp', help='Output hypothesis file in stm format', type=argparse.FileType('w'), required=True)\n    Global.args = parser.parse_args(strs)\n# end parse_arguments()\n\n\ndef setup_logging():\n    numeric_level = getattr(logging, Global.args.loglevel, None)\n    if not isinstance(numeric_level, int):\n        raise ValueError('Invalid log level: %s' % Global.args.loglevel)\n    logging.basicConfig(level=numeric_level, format=\"%(module)s:%(levelname)s: %(message)s\")\n# end setup_logging()\n\n\nif __name__ == \"__main__\":\n    main(sys.argv)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def format_string(s):\n return s.upper() if (s.count(\" \")+1) / len(s) > 0.66 else s\n\ns = \"Hello World\"\nprint(format_string(s))\n# Output: HELLO WORLD but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 11):\n  for j in range(1, 11):\n    print(i * j, end='\\t')\n  print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: let evenNumbers = [2, 4, 6, 8];\nlet sum = 0;\nfor (let item of evenNumbers) {\n sum += item;\n}\nconsole.log(sum); but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_missing_numbers(arr):\n    complete_sum = (arr[-1]*(arr[-1]+1))//2\n    arr_sum = 0\n    for i in arr:\n        arr_sum += i\n    return complete_sum - arr_sum\n\nprint(find_missing_numbers([1,2,3,4,5,7,8,9])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max_element(arr):\n    maxElement = arr[0]\n    for val in arr:\n        if val > maxElement:\n            maxElement = val\n    return maxElement but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_prime_factors(num): \n    factors = []\n    \n    i = 2\n    while i * i <= num: \n        if num % i: \n            i += 1\n        else:\n            num //= i\n            factors.append(i)\n\n    if num > 1:\n        factors.append(num)\n\n    print(factors)\n\nfind_prime_factors(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: keys = [1,2,3] \nvalues = [\"a\",\"b\",\"c\"]\nlist_of_dict = [dict(zip(keys, values)) for i in range(len(keys))] \nprint(list_of_dict) # Output: [{1: 'a', 2: 'b', 3: 'c'}] but is not the same. just give one example and only return the code."}
