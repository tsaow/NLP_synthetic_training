{"prompt": "make some code that functions the same as the following code: def swap(a, b):\n    # Store a in temp\n    temp = a\n\n    # Copy b to a\n    a = b\n\n    # Copy temp to b\n    b = temp but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def detect_language(txt):\n    '''This function will detect the language of the given text.'''\n    import langdetect\n    lang = langdetect.detect(txt)\n    return lang\n\nif __name__ == \"__main__\":\n    txt = \"Hello, my name is John Smith\"\n    print(detect_language(txt)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_indices(list, string):\n    indices = []\n    for i,item in enumerate(list):\n        if item == string:\n            indices.append(i)\n\n    return indices but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # A Program to convert given number to digital clock format\ndef num2clock(n):\n  hour = int (n / 3600)\n  minute = int ((n % 3600) / 60)\n  second = int ((n % 3600) % 60)\n  return str(hour).zfill(2) + ':' + str(minute).zfill(2) + ':' + str(second).zfill(2) \n\n# Main\nn = int(input((\"Enter a number: \")))\nprint(num2clock(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\ndb = sqlite3.connect('database.db')\ncursor = db.cursor()\n\nsql = 'SELECT * FROM table'\n\ncursor.execute(sql)\nresult = cursor.fetchall()\n\nfor row in result:\n    print(row)\n\ndb.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.linear_model import LogisticRegression\n# Build Logistic Regression model \nmodel = LogisticRegression() \nmodel.fit(X_train, y_train) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef random_array():\n return np.random.random((4, 4, 4, 4)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n \ndef detect_fraud(data):\n anomalies = []\n mean = np.mean(data, axis=0)\n std = np.std(data, axis=0)\n \n for record in data:\n diff = np.abs(record - mean)\n is_anomaly = np.any(diff > 3 * std)\n if is_anomaly:\n anomalies.append(record)\n \n return anomalies but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nchar_list = ['A', 'B', 'C', 'D']\nrandom_char = random.choice(char_list)\nprint(random_char) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findPattern(text, pattern):\n    i=0\n    count=0\n    while i < len(text):\n        j = 0\n        if text[i] == pattern[j]:\n            k = i\n            while j < len(pattern) and k < len(text) and  text[k] == pattern[j]:\n                j+=1\n                k+=1\n            if j == len(pattern):\n                count+=1\n            i+=1\n        else:\n            i+=1\n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def concat_lists(list_1, list_2):\n    return list_1 + list_2\n\nlist_1 = [1, 2, 3]\nlist_2 = [4, 5, 6]\n\nconcatenated_list = concat_lists(list_1, list_2)\nprint(concatenated_list) # [1, 2, 3, 4, 5, 6] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def translate_pig_latin(sentence):\n    vowels = \"aeiou\"\n    words = sentence.split()\n    new_words = []\n    for word in words:\n        if word[0] in vowels:\n            word += \"way\"\n            new_words.append(word)\n        else:\n            i = 0\n            for letter in word:\n                if letter in vowels:\n                    break\n                i += 1\n            new_words.append(word[i:]+ word[:i] + \"ay\")\n    return \" \".join(new_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_unique_elements(lst):\n    unique_list = []\n    for item in lst:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseList(list):\n    start = 0\n    end = len(list) - 1\n  \n    while start < end:\n        list[start], list[end] = list[end], list[start]\n        start += 1\n        end -= 1\n  \n    return list\n\nlist = [1, 2, 4, 7, 9]\n\nreverseList(list)\n# Output: [9, 7, 4, 2, 1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: products = [\n {'name': ' microwave', 'energy_efficiency': 'high'},\n {'name': 'air conditioner', 'energy_efficiency': 'medium'},\n {'name': 'refrigerator', 'energy_efficiency': 'high'},\n {'name': 'washing machine', 'energy_efficiency': 'low'},\n]\n\ndef find_product(customer_req):\n best_product = None\n best_efficiency = 0\n for product in products:\n  if product['energy_efficiency'] > best_efficiency and customer_req in product['name']:\n    best_product = product\n    best_efficiency = product['energy_efficiency']\n if best_product:\n    print('The best product for you is the ' + best_product['name'])\n else:\n    print('Sorry, we do not have any products matching your requirements.')\n\n#Chatbot \n\nprint('Hi, what are you looking for?')\ncustomer_req = input()\n\nfind_product(customer_req) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nimport sklearn\n\n# load the data \ndata = list(nltk.corpus.gutenberg.sents('melville-moby_dick.txt'))\n\n# pre-process the data to remove stopwords, punctuation, numbers and special characters, and lowercase it\nprocessed_data = [nltk.word_tokenize(str(sentence)) for sentence in data] \nprocessed_data = [nltk.pos_tag(sentence) for sentence in processed_data]\n\n# create the features for the model \nfeaturesets = [(nltk.pos_tag(sentence), category) for sentence, category in processed_data]\n\n# split the data into training and testing sets\ntraining_set = featuresets[:int(len(featuresets)*0.8)]\ntesting_set = featuresets[int(len(featuresets)*0.8):]\n\n# create the text mining model using Naive Bayes \ntext_classifier = SklearnClassifier(naive_bayes.MultinomialNB())\n \n# Train the model \ntext_classifier.train(training_set)\n\n# Test the accuracy of the model \nprint('Text Mining Model Accuracy: ', nltk.classify.accuracy(text_classifier, testing_set)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(string1, string2):\n    string1 = string1.lower()\n    string2 = string2.lower()\n    return sorted(string1) == sorted(string2)\n\ndef check_anagrams(a): \n    # Initialize flag \n    is_anagrams = True\n  \n    # Check for all adjacent words \n    for i in range(len(a)-1): \n          \n        if not is_anagram(a[i], a[i+1]): \n            is_anagrams = False\n            break\n    return is_anagrams but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: age = 32\nif age > 18 and age < 65:\n    print('You are an adult!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # optimized Python program to find sum \n# of all numbers divisible by 3 or 5\n\n# initialize sum\nsum = 0\n\n# find sum of all numbers\n# divisible by 3\nfor i in range(3, 1000, 3):\n    sum += i\n\n# find sum of all numbers\n# divisible by 5\nfor i in range(5, 1000, 5):\n    # check if it is divisible by both 3 and 5\n    if i % 3 != 0:\n        sum += i\n\n#print the sum\nprint(\"Sum =\",sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Function to generate a list of 5 random numbers between 1 and 30\ndef generateList():\n list = []\n \n for i in range(5):\n  # Generate a random number between 1 and 30\n  num = random.randint(1, 30)\n  \n  # Check if the number is already in the list\n  while num in list:\n   num = random.randint(1, 30)\n \n  # Add the number to the list\n  list.append(num)\n \n return list\n\n# Test it\nprint(generateList()) # Output: [18, 28, 15, 8, 11] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def median(lst):\n    # copy the list to a new list so we don't modify the original list\n    lst_copy = lst[:]\n\n    # sort the list\n    lst_copy.sort()\n\n    # get the middle of the list\n    length = len(lst_copy)\n    mid = length // 2\n\n    # if the length is odd, then return the middle item\n    if length % 2 == 1:\n        return lst_copy[mid]\n\n    # if the length is even, then return the average of the two middle items\n    else:\n        return (lst_copy[mid-1] + lst_copy[mid]) / 2\n\nmedian = median([3, 4, 7, -2, 5, 8, 9])\nprint(median) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\n\n# Read in the data \nstocks = pd.read_csv(\"stocks.csv\")\n\n# Feature Extraction \nX = stocks.iloc[:,0].values\nY = stocks.iloc[:,1].values\n\n# Feature Scaling \nX = np.reshape(X, (-1, 1))\nY = np.reshape(Y, (-1, 1))\n\n# Fit the regression model \nfrom sklearn.linear_model import LinearRegression\nregression = LinearRegression()\nregression.fit(X, Y)\n\n# Predict \ny_pred = regression.predict([[x]])\n\n# Visualization \nplt.scatter(X, Y, color=\"red\")\nplt.plot(X, regression.predict(X), color=\"blue\")\nplt.title(\"Stock Prediction (Linear Regression)\")\nplt.xlabel(\"Days\")\nplt.ylabel(\"Stock Price\")\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # factory pattern example \n  \nclass Shape:\n    sides = 0\n    \n    def type(self):\n        print(\"This is an abstract class\")\n\nclass Triangle(Shape):\n    sides = 3\n    def type(self):\n        print(\"This is a triangle\")\n\nclass Rectangle(Shape):\n    sides = 4\n    def type(self):\n        print(\"This is a rectangle\")\n\nclass Factory:\n    def get_obj(self, shape):\n        if shape == \"triangle\":\n            return Triangle()\n        if shape == \"rectangle\":\n            return Rectangle()\n  \nf = Factory()\n  \nshape1 = f.get_obj(\"triangle\")\nshape1.type() \n  \nshape2 = f.get_obj(\"rectangle\")\nshape2.type() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import http.server\nimport socketserver\n\nPORT = 8080\n\nHandler = http.server.SimpleHTTPRequestHandler\n\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n    print(\"serving at port\", PORT)\n    httpd.serve_forever() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #\n# Copyright (c) 2008-2015 Citrix Systems, Inc.\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\")\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n#\n\nfrom nssrc.com.citrix.netscaler.nitro.resource.base.base_resource import base_resource\nfrom nssrc.com.citrix.netscaler.nitro.resource.base.base_resource import base_response\nfrom nssrc.com.citrix.netscaler.nitro.service.options import options\nfrom nssrc.com.citrix.netscaler.nitro.exception.nitro_exception import nitro_exception\n\nfrom nssrc.com.citrix.netscaler.nitro.util.nitro_util import nitro_util\n\nclass dnspolicy_dnspolicylabel_binding(base_resource) :\n\t\"\"\" Binding class showing the dnspolicylabel that can be bound to dnspolicy.\n\t\"\"\"\n\tdef __init__(self) :\n\t\tself._boundto = \"\"\n\t\tself._priority = 0\n\t\tself._activepolicy = 0\n\t\tself._gotopriorityexpression = \"\"\n\t\tself._labeltype = \"\"\n\t\tself._labelname = \"\"\n\t\tself._name = \"\"\n\t\tself.___count = 0\n\n\t@property\n\tdef boundto(self) :\n\t\t\"\"\"Location where policy is bound.\n\t\t\"\"\"\n\t\ttry :\n\t\t\treturn self._boundto\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@boundto.setter\n\tdef boundto(self, boundto) :\n\t\t\"\"\"Location where policy is bound.\n\t\t\"\"\"\n\t\ttry :\n\t\t\tself._boundto = boundto\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@property\n\tdef name(self) :\n\t\t\"\"\"Name of the DNS policy.\n\t\t\"\"\"\n\t\ttry :\n\t\t\treturn self._name\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@name.setter\n\tdef name(self, name) :\n\t\t\"\"\"Name of the DNS policy.\n\t\t\"\"\"\n\t\ttry :\n\t\t\tself._name = name\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@property\n\tdef priority(self) :\n\t\t\"\"\"Specifies the priority of the policy.\n\t\t\"\"\"\n\t\ttry :\n\t\t\treturn self._priority\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@property\n\tdef labelname(self) :\n\t\t\"\"\"Name of the label to invoke if the current policy rule evaluates to TRUE.\n\t\t\"\"\"\n\t\ttry :\n\t\t\treturn self._labelname\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@property\n\tdef gotopriorityexpression(self) :\n\t\t\"\"\"Expression specifying the priority of the next policy which will get evaluated if the current policy rule evaluates to TRUE.\n\t\t\"\"\"\n\t\ttry :\n\t\t\treturn self._gotopriorityexpression\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@property\n\tdef labeltype(self) :\n\t\t\"\"\"Type of policy label invocation.<br/>Possible values = reqvserver, resvserver, policylabel.\n\t\t\"\"\"\n\t\ttry :\n\t\t\treturn self._labeltype\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@property\n\tdef activepolicy(self) :\n\t\t\"\"\"Indicates whether policy is bound or not.\n\t\t\"\"\"\n\t\ttry :\n\t\t\treturn self._activepolicy\n\t\texcept Exception as e:\n\t\t\traise e\n\n\tdef _get_nitro_response(self, service, response) :\n\t\t\"\"\" converts nitro response into object and returns the object array in case of get request.\n\t\t\"\"\"\n\t\ttry :\n\t\t\tresult = service.payload_formatter.string_to_resource(dnspolicy_dnspolicylabel_binding_response, response, self.__class__.__name__)\n\t\t\tif(result.errorcode != 0) :\n\t\t\t\tif (result.errorcode == 444) :\n\t\t\t\t\tservice.clear_session(self)\n\t\t\t\tif result.severity :\n\t\t\t\t\tif (result.severity == \"ERROR\") :\n\t\t\t\t\t\traise nitro_exception(result.errorcode, str(result.message), str(result.severity))\n\t\t\t\telse :\n\t\t\t\t\traise nitro_exception(result.errorcode, str(result.message), str(result.severity))\n\t\t\treturn result.dnspolicy_dnspolicylabel_binding\n\t\texcept Exception as e :\n\t\t\traise e\n\n\tdef _get_object_name(self) :\n\t\t\"\"\" Returns the value of object identifier argument\n\t\t\"\"\"\n\t\ttry :\n\t\t\tif (self.name) :\n\t\t\t\treturn str(self.name)\n\t\t\treturn None\n\t\texcept Exception as e :\n\t\t\traise e\n\n\n\n\t@classmethod\n\tdef get(cls, service, name) :\n\t\t\"\"\" Use this API to fetch dnspolicy_dnspolicylabel_binding resources.\n\t\t\"\"\"\n\t\ttry :\n\t\t\tobj = dnspolicy_dnspolicylabel_binding()\n\t\t\tobj.name = name\n\t\t\tresponse = obj.get_resources(service)\n\t\t\treturn response\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@classmethod\n\tdef get_filtered(cls, service, name, filter_) :\n\t\t\"\"\" Use this API to fetch filtered set of dnspolicy_dnspolicylabel_binding resources.\n\t\tFilter string should be in JSON format.eg: \"port:80,servicetype:HTTP\".\n\t\t\"\"\"\n\t\ttry :\n\t\t\tobj = dnspolicy_dnspolicylabel_binding()\n\t\t\tobj.name = name\n\t\t\toption_ = options()\n\t\t\toption_.filter = filter_\n\t\t\tresponse = obj.getfiltered(service, option_)\n\t\t\treturn response\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@classmethod\n\tdef count(cls, service, name) :\n\t\t\"\"\" Use this API to count dnspolicy_dnspolicylabel_binding resources configued on NetScaler.\n\t\t\"\"\"\n\t\ttry :\n\t\t\tobj = dnspolicy_dnspolicylabel_binding()\n\t\t\tobj.name = name\n\t\t\toption_ = options()\n\t\t\toption_.count = True\n\t\t\tresponse = obj.get_resources(service, option_)\n\t\t\tif response :\n\t\t\t\treturn response[0].__dict__['___count']\n\t\t\treturn 0\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@classmethod\n\tdef count_filtered(cls, service, name, filter_) :\n\t\t\"\"\" Use this API to count the filtered set of dnspolicy_dnspolicylabel_binding resources.\n\t\tFilter string should be in JSON format.eg: \"port:80,servicetype:HTTP\".\n\t\t\"\"\"\n\t\ttry :\n\t\t\tobj = dnspolicy_dnspolicylabel_binding()\n\t\t\tobj.name = name\n\t\t\toption_ = options()\n\t\t\toption_.count = True\n\t\t\toption_.filter = filter_\n\t\t\tresponse = obj.getfiltered(service, option_)\n\t\t\tif response :\n\t\t\t\treturn response[0].__dict__['___count']\n\t\t\treturn 0\n\t\texcept Exception as e:\n\t\t\traise e\n\n\tclass Labeltype:\n\t\treqvserver = \"reqvserver\"\n\t\tresvserver = \"resvserver\"\n\t\tpolicylabel = \"policylabel\"\n\nclass dnspolicy_dnspolicylabel_binding_response(base_response) :\n\tdef __init__(self, length=1) :\n\t\tself.dnspolicy_dnspolicylabel_binding = []\n\t\tself.errorcode = 0\n\t\tself.message = \"\"\n\t\tself.severity = \"\"\n\t\tself.sessionid = \"\"\n\t\tself.dnspolicy_dnspolicylabel_binding = [dnspolicy_dnspolicylabel_binding() for _ in range(length)]\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from http.server import HTTPServer\nfrom http.server import BaseHTTPRequestHandler\n\nclass MyHTTPRequestHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        # send response status code\n        self.send_response(200)\n\n        # send headers\n        self.send_header('Content-Type', 'text/html')\n        self.end_headers()\n\n        # write the content as response\n        self.wfile.write(b\"<html><body><h1>Hello World!!</h1></body></html>\")\n\n# configure server properties\nport = 8080\nserver_address = ('127.0.0.1', port)\n\n# instantiate server\nhttpd = HTTPServer(server_address, MyHTTPRequestHandler)\n\n# run server\nhttpd.serve_forever() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replaceWordsWithCharacter(sentence, character):\n    sentenceList = sentence.split(' ')\n    newSentence = ''\n    \n    for word in sentenceList:\n        newSentence += character\n    \n    return newSentence\n\nsentence = \"I am bored\"\ncharacter = \"*\"\nprint(replaceWordsWithCharacter(sentence,character)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Car:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: dict3 = {key:dict1[key] if key in dict1 else dict2[key] for key in (dict1.keys() | dict2.keys())} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_discount(price, discount):\n    '''This function takes price and discount as input and returns the discounted price'''\n    discount = min(max(0, discount), 1)\n    return round(price * (1 - discount), 2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_sentence(sentence): \n    # Convert the sentence to lower case \n    sentence = sentence.lower() \n\n    # Remove punctuation \n    sentence = sentence.replace('.','') \n    sentence = sentence.replace(',','') \n    sentence = sentence.replace('?','') \n    sentence = sentence.replace('!','') \n\n    # Split the sentence into words \n    words = sentence.split(' ') \n\n    # Check if the sentence contains any negative words and set the label accordingly \n    label = 'positive'\n    for word in words:\n        if word in ['not', 'never', 'no']:\n            label = 'negative'\n            break\n\n    # Return the label\n    return label but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def wordcount(text):\n    counts = dict()\n    words = text.split()\n\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n\n    return counts\n\nprint(wordcount(text)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printNumbers(n): \n  for i in range(1,n+1): \n    print(i, end =\" \") \n\nprintNumbers(5) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_sum_possible(A, X): \n    n = len(A) \n    # create an empty hash set\n    s = set() \n  \n    for i in range(n): \n        temp = X - A[i]  \n        if temp >= 0 and temp in s: \n            return True \n        s.add(A[i])  \n  \n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class TicTacToe:\n    # Initializing the tic tac toe board \n    def __init__(self):\n        # empty board\n        self.board = [' ' for x in range(9)]\n        self.player = 'X'\n    \n     # function to print the board state\n    def print_board(self):\n        row1 = \"| {} | {} | {} |\".format(self.board[0], self.board[1], self.board[2])\n        row2 = \"| {} | {} | {} |\".format(self.board[3], self.board[4], self.board[5])\n        row3 = \"| {} | {} | {} |\".format(self.board[6], self.board[7], self.board[8])\n        \n        print()\n        print(row1)\n        print(row2)\n        print(row3)\n        print()\n    \n    # function to check for a win\n    def is_win(self, player):\n        win_state = [\n            [self.board[0], self.board[1], self.board[2]],\n            [self.board[3], self.board[4], self.board[5]],\n            [self.board[6], self.board[7], self.board[8]],\n            [self.board[0], self.board[3], self.board[6]],\n            [self.board[1], self.board[4], self.board[7]],\n            [self.board[2], self.board[5], self.board[8]],\n            [self.board[0], self.board[4], self.board[8]],\n            [self.board[2], self.board[4], self.board[6]],\n        ]\n        \n        if [player, player, player] in win_state:\n            return True\n        else:\n            return False\n    \n     # function to check for a draw \n    def is_draw(self):\n        if ' ' not in self.board:\n            return True\n        else:\n            return False\n    \n    def play(self):\n        is_running = True\n        while is_running:\n            # print the board\n            self.print_board()\n            print(\"{}'s turn\".format(self.player))\n            \n            # Get player input\n            move = int(input(\"Enter position (1-9): \")) # indexing starts at 0\n            # if position is empty\n            if self.board[move-1] == ' ':\n                self.board[move-1] == self.player\n                # check for win\n                if self.is_win(self.player):\n                    self.print_board()\n                    print('{} has won!'.format(self.player))\n                    is_running = False\n                # check for a draw\n                elif self.is_draw():\n                    self.print_board()\n                    print('Draw! Game Over!')\n                    is_running = False\n                    \n                # switch player\n                if self.player == 'X':\n                    self.player = 'O'\n                else:\n                    self.player = 'X'\n            else:\n                print('This position is taken. Please try again...')\n            \n        restart = input('Would you like to play again (Y/N): ')\n        if restart == 'Y':\n            self.__init__()\n            self.play()\n        else:\n            is_running = False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_sum(numbers):\n      sum = 0\n      for num in numbers: # the colon is missing\n         sum += num\n      return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def increasing_diagonal(grid):\n # Get the number of rows and columns in the grid\n num_rows = len(grid)\n num_cols = len(grid[0])\n\n # Loop through the elements of the array\n for i in range(num_rows):\n  for j in range(num_cols):\n   # Check that the adjacent elements in the diagonal line\n   # are increasing\n   if i + 1 < num_rows and j + 1 < num_cols:\n    if grid[i][j] >= grid[i + 1][j + 1]:\n     return False\n \n return True\n \n# Test array\ngrid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n \n# Print solution\nprint(increasing_diagonal(grid)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combinations(input_list):\n    out_list = []\n    # get all the possible combination from the input\n    for i in range(1 << len(input_list)):\n        out_list.append([input_list[bit] for bit in range(len(input_list)) if is_bit_set(i, bit)])\n    return out_list\n\ndef is_bit_set(num, bit):\n    return num & (1 << bit) > 0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(word):\n    reverse_word = word[::-1]\n    if word == reverse_word:\n        return True\n    else:\n        return False\n\nresult = is_palindrome(\"madam\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Temperature:\n    def __init__(self, value, unit):\n        self.value = value\n        self.unit = unit\n\n\n    def convert_to_celsius(self):\n        if self.unit == 'C':\n            return self.value\n        elif self.unit == 'F':\n            return (self.value - 32) * 5/9\n        elif self.unit == 'K':\n            return self.value - 273.15\n        else:\n            return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: word_list.sort()\nprint(word_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\ndef create_bar_chart(data):\n  # Extract values from data\n  x_values = [d[0] for d in data]\n  y_values = [d[1] for d in data]\n  \n  # Create bar chart\n  plt.bar(x_values, y_values)\n  plt.xlabel('X Values')\n  plt.ylabel('Y Values')\n  plt.title('Bar Chart')\n  plt.show()\n\ndata = [[1,20], [2,30], [3,25], [4,10]]\ncreate_bar_chart(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def abs_sort(arr):\n    return sorted(arr, key=abs)\n\nabs_sort([2,-5, -1, 3]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nProduce a linear regression model to predict the house prices\n\nThe linear regression model will use the given dataset to predict the house prices.\n\nThe input to the model will be the three variables - size of the house, number of bedrooms and number of bathrooms. The output will be the predicted house prices.\n\nThe model will be implemented in Python using the Scikit-Learn library. It will also use Cross Validation to evaluate the model's performance.\n\"\"\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os\ndef clear_screen():\n    os.system(\"cls\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def first_occurrence(arr, num):\n    '''Returns index of the first occurrence of num in an array.'''\n    for i in range(len(arr)):\n        if(arr[i] == num):\n            return i\n    return -1\n\narr = [1, 4, 6, 9]\nnum = 5\n\nfirst_occurrence(arr, num) # -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 11):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport xlsxwriter\n\n# Create an new Excel file\nworkbook = xlsxwriter.Workbook('RandomNumbers.xlsx')\n\n# Set up worksheet\nworksheet = workbook.add_worksheet('Random Numbers')\n\n# Generate Random numbers\nfor row in range(1, 11):\n for col in range(1, 4):\n  num = random.randint(1, 30)\n  worksheet.write(row, col, num)\n\nworkbook.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\ndef make_web_request(url):\n    '''This function makes an HTTP request to the given URL and returns the response.'''\n    response = requests.get(url)\n    return response.text but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Generate a list of odd numbers between x and y\ndef odd_numbers(x, y):\n  # Initialize an empty list \n  odd_list = [] \n  \n  # Loop through the range\n  for i in range(x, y): \n    # If the number is odd\n    if (i % 2 != 0): \n      odd_list.append(i)\n  \n  return odd_list \n  \nx = 3\ny = 10\n\n# Get the list of odd numbers\nodd_list = odd_numbers(x, y)\n\n# Print the list\nprint(odd_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_by_value(data):\n sorted_list = sorted(data.items(), key=lambda kv: kv[1])\n return sorted_list\n \nprint(sort_by_value({\"a\": 23, \"b\": 42, \"c\": 16}))\n# Output -> [('c', 16), ('a', 23), ('b', 42)]  # sorted by value but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Product:\n def __init__(self, name, price, quantity):\n  self.name = name\n  self.price = price\n  self.quantity = quantity\n\n \ndef calculateTotalCost(products):\n totalCost = 0\n \n for product in products:\n  totalCost += product.price * product.quantity\n \n return totalCost\n \nproducts = [\n Product(\"Apple\", 1.99, 2),\n Product(\"Banana\", 0.79, 5)\n]\n \nprint(calculateTotalCost(products))\n# Output: 11.75 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LinearRegression \nfrom sklearn.metrics import mean_absolute_error \n\n# Read in data \ndata = pd.read_csv('data.csv') \n\n# Split data into dependent and independent variables \nX = data.iloc[:, :-1].values \ny = data.iloc[:, -1].values \n\n# Split data into training and testing datasets \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) \n\n# Train the model \nregressor = LinearRegression() \nregressor.fit(X_train, y_train) \n\n# Make predictions on the test data\ny_pred = regressor.predict(X_test) \n\n# Calculate the mean absolute error \nmae = mean_absolute_error(y_test, y_pred) \n\n# Print results \nprint('Mean absolute error: %.2f' % mae) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Python but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_numbers(start, end):\n    random_numbers = []\n    for i in range(start, end+1):\n        random_number = random.randint(start, end)\n        random_numbers.append(random_number)\n\n    return random_numbers but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = \"www.example.com\"\nword = \"Python\"\n\nhtml_content = requests.get(url).text\n\nwords = html_content.split()\n\noccurrences = 0\n\nfor w in words:\n    if w == word:\n        occurrences += 1\n\nprint(\"Found %d occurrences of '%s'\" % (occurrences, word)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def LongestCommonSequence(string1, string2):\n \n n = len(string1)\n m = len(string2)\n \n LCS = [[0 for x in range(m+1)] for y in range(n+1)]\n \n for i in range(n):\n for j in range(m):\n if (string1[i] == string2[j]):\n LCS[i][j] = LCS[i-1][j-1] + 1\n else:\n LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n \n#return the longest common sequence\n index = LCS[n][m]\n lcs = [\"\"] * (index+1)\n lcs[index] = \"\"\n i = n\n j = m\n while i > 0 and j > 0:\n if (string1[i-1] == string2[j-1]):\n lcs[index-1] = string1[i-1]\n i -= 1\n j -= 1\n index -= 1\n \n elif (LCS[i-1][j] > LCS[i][j-1]):\n i -= 1\n else:\n j -= 1\n \n return \"\".join(lcs)\n \n print(LongestCommonSequence(string1, string2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_numbers(nums, threshold):\n return [num for num in nums if num >= threshold]\n \n numbers = [2, 8, 10, 13, 15]\n threshold = 10\n \n print(filter_numbers(numbers, threshold))\n# Output: [10, 13, 15] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: OldList = [5,5,5,2,1,2,3,5]\nNewList = []\n\nfor Num in OldList:\n    if Num not in NewList:\n        NewList.append(Num)\n\nprint(NewList) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_words_in_text(text):\n    words = text.split(\" \")\n    return len(words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://example.com/\"\n# fetch the content from url\npage = requests.get(url)\n# parse the fetched content\nsoup = BeautifulSoup(page.text, 'html.parser')\n# find all href values for a tags\nall_links = soup.find_all('a', href=True)\n# show the results\nfor link in all_links:\n    print(link['href']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # This code uses the random module  \nimport random\n\n# Generate random number from 0 to 100\nrandomNumber = random.randint(0, 100)  \n\n# Ask user to guess the number\n# Keep guessing till user gets it right\nwhile True: \n    userNumber = int(input(\"Guess the number: \"))\n\n    if userNumber == randomNumber: \n        print(\"You guessed right!\") \n        break \n    elif userNumber > randomNumber:\n        print(\"Your guess is too high!\")\n    else:\n        print(\"Your guess is too low!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\ndef dataframe_to_table(df):\n  tabular_df = df.pivot_table(index=df.index, columns=df.columns, values=df.values)\n  return tabular_df but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci_at_index(index): \n    if index < 0: \n        return -1\n    if index == 0 or index == 1: \n        return index \n    return fibonacci_at_index(index - 1) + fibonacci_at_index(index - 2) \n\nprint(fibonacci_at_index(index)) # 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_freq_table(data):\n    row_count = len(data)\n    col_count = len(data[0]) \n    freq_table = [[0] * col_count for i in range(row_count)]\n\n    for i in range(row_count):\n        for j in range(col_count):\n            freq_table[i][j] = data[i][j] * 100 / sum([data[k][j] for k in range(row_count)]) \n\n    for i in range(row_count): \n        for j in range(col_count): \n            print('%d : %.2f' %(data[i][j], freq_table[i][j])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_char(s, c):\n  return s.replace(c, '') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[0]\n        less_than_pivot = [x for x in arr[1:] if x <= pivot]\n        greater_than_pivot = [x for x in arr[1:] if x > pivot]\n\n        return quicksort(less_than_pivot) + [pivot] + quicksort(greater_than_pivot)\n \narr = [6, 9, 20, 1, 11, 46]\nprint (\"Quick Sort: \" + str(quicksort(arr))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pulp\n\n#Create the \u2018prob\u2019 variable to contain the problem data\nprob = pulp.LpProblem('Travelling_Salesman_Problem', pulp.LpMinimize)\n\n#Create problem Variables\nroute = list(range(1,nodes+1))\n\n# Define Cost Matrix\nweights = [[0, 8, 2, 10], [8, 0, 4, 12], [2, 4, 0, 9], [10, 12, 9, 0]]\n\n# Create a list of tuples containing all the possible routes\nall_pairs = [(i,j) for i in route for j in route if i != j]\n \n# Create a list of tuples containing all the possible routes for two stops\nall_trips = [(i,j,k) for i in route for j in route for k in route if i!=j and j!=k and i != k]\n \n# Create a list of tuples containing all the possible routes for three stops\nall_trips = [(i,j,k,l) for i in route for j in route for k in route for l in route if i!=j and j!=k and k!=l and i != k and i != l and j != l]\n\n# Create a dictionary of all the routes and the associated cost\ncosts = dict(zip(all_trips, weights))\n\n# Create dictionary of refular pairs and the associated cost\npair_costs = dict(zip(all_pairs, weights))\n\n# Create a list of tuples containing all possible routes for the given number of stops\ntrip_vars = pulp.LpVariable.dicts('trip',all_trips, lowBound=0, upBound=1,cat=pulp.LpInteger)\n\n# Objective Function\nprob += pulp.lpSum([trip_vars[i] * costs[i]for i in all_trips]), \"Sum_of_Transporting_Costs\"\n\n# Constraints\n# Ensure that the total number of trips are healthy\nprob += pulp.lpSum([trip_vars[i] for i in all_trips]) == 1, \"Sum_of_Trips\"\n\n# Ensure that the total number of trips each city is healthy\nfor k in route:\n    prob += pulp.lpSum([trip_vars[i] for i in all_trips if k in i]) <= 1, \"Sum_of_Trips_out_of_City_%d\"%k\n\n#Ensure that each stop is usually used\nfor pairs in all_pairs:\n    prob += pulp.lpSum([trip_vars[i] for i in all_trips if pairs[0] in i and pairs[1] in i]) <= pair_costs[pairs], \"Sum_of_Trips_%s_%s\"%pairs\n\n# The problem is solved using PuLP's choice of Solver\nprob.solve() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: price = 22\ntax_percentage = 5\n\ntotal_cost = price * (1 + tax_percentage/100)\nprint('The total cost is: ', total_cost) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\ndata = pd.read_csv('spam.csv', encoding = 'latin-1')\n\nX = data['source']\ny = data['target']\n\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(X)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)\n\nclassifier = MultinomialNB()\nclassifier.fit(X_train, y_train)\n\nprint('Train set accuracy:', classifier.score(X_train, y_train))\nprint('Test set accuracy:', classifier.score(X_test, y_test)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os\n \ndef search_files(directory, extension):\n    filenames = []\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if file.endswith(extension):\n                filenames.append(os.path.join(root, file))\n    return filenames\n \nfilenames = search_files('./sample_files', '*.py')\nfor filename in filenames:\n    print(filename) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: JavaScript:\n\nconst nums = [1, 3, 5, 8, 12];\n\nfunction median(nums) {\n nums.sort();\n let mid = Math.floor(nums.length / 2);\n let median = 0;\n if (nums.length % 2 === 0) {\n median = (nums[mid - 1] + nums[mid]) / 2;\n } else {\n median = nums[mid];\n }\n return median;\n}\n\nconsole.log(median(nums)) // 5\n\nPython:\n\nnums = [1, 3, 5, 8, 12]\n\ndef median(nums):\n nums.sort()\n mid = int(len(nums) / 2)\n if len(nums) % 2 == 0:\n median = (nums[mid - 1] + nums[mid]) / 2\n else: \n median = nums[mid]\n return median\n\nprint(median(nums)) # 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef extract_domain_name(url):\n    pattern = r\"([a-z0-9][a-z0-9\\-]*?\\.(com|org|net|edu|co))(\\/|$)\"\n    result = re.search(pattern, url)\n    return result[1]\n\nprint(extract_domain_name(url)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def permutation(string): \n    if len(string) == 1: \n        return [string] \n  \n    perm_list = [] \n    for i in range(len(string)): \n        m = string[i] \n        rem_string = string[:i] + string[i+1:] \n        for perm in permutation(rem_string): \n            perm_list.append(m + perm) \n  \n    return perm_list \n  \nstring = \"ABC\"\npermutation_list = permutation(string) \n  \nprint(permutation_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # define a function \ndef addMatrix(matrix1, matrix2): \n    # creating an empty matrix \n    result = [[0, 0], \n              [0, 0], \n              [0, 0]] \n  \n    # iterating rows \n    for i in range(len(matrix1)): \n          \n        # iterating columns \n        for j in range(len(matrix1[0])): \n            result[i][j] = matrix1[i][j] + matrix2[i][j] \n    return (result) \n   \n# given matrices   \nmatrix1 = [[1, 2], \n           [1, 2],\n           [2, 4]]\n  \nmatrix2 = [[1, 3], \n           [2, 3]]\n  \n# printing result \nprint(\"Writing a program to add two matrices of different sizes: \")\n \nprint(addMatrix(matrix1, matrix2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef random_int(low, high):\n return random.randint(low, high) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def evaluate_expression(x):\n    return 3*x**2 + 4*x - 2\n\nx = 5\nresult = evaluate_expression(x)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\n\nif __name__ == \"__main__\":\n    arg = sys.argv[1]\n    print(arg) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Merge two sorted lists\ndef merge_sorted_lists(lst1, lst2):\n    i,j = 0, 0\n    merged_list = []\n    \n    while i < len(lst1) and j < len(lst2):\n        if lst1[i] < lst2[j]:\n            merged_list.append(lst1[i])\n            i += 1\n        else:\n            merged_list.append(lst2[j])\n            j += 1\n            \n    merged_list += lst1[i:]\n    merged_list += lst2[j:]\n    \n    return merged_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom scipy import optimize\n\ndef optimization_function(x):\n return np.sin(x)\n\nres = optimize.minimize_scalar(optimization_function, bounds=[-5, 5])\n\nprint(res.x)\n# Result: -0.90898 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def alphabetical_sort(arr):\n arr.sort()\n return arr\n\narrOfStrings = [\"cat\", \"elephant\", \"dog\", \"bird\"]\nsorted_arr = alphabetical_sort(arrOfStrings)\nprint(sorted_arr)  # Output: [\"bird\", \"cat\", \"dog\", \"elephant\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_two_ints(a, b):\n    return a + b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isAnagram(str1, str2):  \n    n1 = len(str1)\n    n2 = len(str2) \n    if n1 != n2: \n        return False\n    str1 = ''.join(sorted(str1)) \n    str2 = ''.join(sorted(str2))  \n    for i in range(n1):  \n        if str1[i] != str2[i]:  \n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_dict_items(dct):\n  for key, value in dct.items():\n    print(\"Key: {}, Value: {}\".format(key, value)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_numbers(x, y):\n return sum(range(x, y)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\nprint(gcd(4, 8)) # Output: 4 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class BankAccount:\n   def __init__(self, account_number, account_balance):\n        self.account_number = account_number\n        self.account_balance = account_balance\n\n    def deposit(self, deposit_amount):\n        self.account_balance += deposit_amount\n\n    def withdraw(self, withdraw_amount):\n        if self.account_balance - withdraw_amount >= 0:\n            self.account_balance -= withdraw_amount\n            return True\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(5):\n    for j in range(5):\n        print(\"*\", end=\" \")\n    print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def selectionSort(array):\n    # loop over the array\n    for i in range(len(array)-1):\n        # find the minimum element\n        minimum = i\n        for j in range(i + 1, len(array)): \n            if array[minimum] > array[j]: \n                minimum = j          \n     \n        # Swap the found minimum element with \n        # the first element         \n        temp = array[i] \n        array[i] = array[minimum] \n        array[minimum] = temp \n\n# test array\narray = [4, 2, 3, 5, 1]\nselectionSort(array)\n# result\nprint(array) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(s): \n    return s[::-1]\n\nresult = reverse_string(\"Hello\") \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\n\ndef days_between(start_date, end_date):\n    '''This function takes two date objects and returns the number of days between them.'''\n    return (end_date - start_date).days\n\nstart = datetime.date(2020, 1, 1) \nend = datetime.date(2020, 1, 5) \ndays = days_between(start, end)\nprint(days) # 4 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create a list with the square of all the numbers from 0 to 10\n# Create an empty list\nsquares = []\n# Iterate over the range from 0 to 10\nfor i in range(11):\n # Append the square of the current number to the list\n squares.append(i ** 2)\n# Print the list\nprint(squares) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node: \n    def __init__(self, data): \n        self.data = data \n        self.left = None\n        self.right = None\n  \ndef LevelOrderTraversal(root): \n  \n    if root == None:\n        return\n  \n    queue = []\n    queue.append(root)   \n    while(len(queue) > 0): \n        print (queue[0].data)\n        node = queue.pop(0) \n  \n        if node.left is not None: \n            queue.append(node.left) \n  \n        if node.right is not None: \n            queue.append(node.right) \n            \nroot = Node(4) \nroot.left = Node(2) \nroot.right = Node(6) \nroot.left.left = Node(1)\nroot.left.right = Node(7)\n\nLevelOrderTraversal(root) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class DiamondShape:\n    def __init__(self, size):\n        self.size = size\n    \n    def show(self):\n        for i in range(1, self.size+1):\n            print(\" \" * (self.size - i) + \" *\" * (2*i - 1))\n        for i in range(self.size-1, 0, -1): \n            print(\" \" * (self.size - i) + \" *\" * (2*i - 1)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import threading\nimport itertools\n\n#create thread class\nclass TSPThread(threading.Thread):\n    def __init__(self, city_list):\n        threading.Thread.__init__(self)\n        self.city_list = city_list\n    \n    def run(self):\n        min_distance = float(\"Inf\")\n        min_permutation = None\n        for permutation in itertools.permutations(self.city_list):\n            distance = calculate_distance(permutation)\n            if distance < min_distance:\n                min_distance = distance\n                min_permutation = permutation\n        print(\"Optimal path:\", min_permutation)\n        print(\"Minimum distance\", min_distance)\n\n#function to calculate the distance between two cities\ndef calculate_distance(permutation):\n    distance = 0\n    for i in range(len(permutation)):\n        city_a = permutation[i]\n        city_b = permutation[(i+1)%len(permutation)]\n        distance += get_distance(city_a, city_b)\n    return distance\n\n#function to get the distance between two cities\ndef get_distance(city_a, city_b):\n    # here we must calculate the distance between two cities\n    pass\n\n#function to create and start threads\ndef start_threads(city_list):\n    thread_list = []\n    for i in range(len(city_list)):\n        thread_list.append(TSPThread(city_list[i:] + city_list[:i]))\n    for t in thread_list:\n        t.start()\n    for t in thread_list:\n        t.join()\n\n#function to read city list from file        \ndef read_city_list_from_file(file_name):\n    city_list = []\n    # here you read city list from file\n    return city_list\n\nif __name__ == \"__main__\":\n    city_list = read_city_list_from_file(\"input.txt\")\n    start_threads(city_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def safe_divide(x, y):\n \u00a0  # Check for valid arguments\n \u00a0  if y == 0:\n \u00a0 \u00a0 \u00a0  raise ValueError('Cannot divide by zero')\n \u00a0  # Perform the division\n \u00a0  return x/y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\ndef create_histogram(data):\n    plt.hist(data, bins=20)\n    plt.title('Histogram of Input Data')\n    plt.show()\n\n# Example data\ndata = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1]\n\ncreate_histogram(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Define a custom class for the forum\nclass Forum:\n    # Initialize the class with a title and a list of topics  \n    def __init__(self, title, topics):\n        self.title = title\n        self.topics = topics\n\n    # Define a method to print the list of topics\n    def display_topics(self):\n        for topic in self.topics:\n            print(topic)\n\n# Create a new Forum object \nmyforum = Forum(\"Discussions Forum\", topics)\n\n# Print the list of topics \nmyforum.display_topics() # Output: Cars, Computers, Home Automation but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: [3, 4, 5, 7, 8] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: while True:\n    user_input = input(\"Please enter something or 'q' to exit: \")\n    \n    if user_input == 'q':\n        break\n    else:\n        # Do something with the input but is not the same. just give one example and only return the code."}
