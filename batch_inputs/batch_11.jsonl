{"prompt": "make some code that functions the same as the following code: words = ['blue', 'red', 'green', 'red', 'yellow', 'blue', 'blue', 'orange']\nfrom collections import Counter\nword_counts = Counter(words)\nwords_appearing_more_than_3_times = [word for word, count in word_counts.items() if count > 3]\nprint(words_appearing_more_than_3_times) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def highestCommonFactor(num1, num2): \n    if num1 > num2: \n        small = num2 \n    else: \n        small = num1 \n    for i in range(1, small+1): \n        if((num1 % i == 0) and (num2 % i == 0)): \n            hcf = i \n    return hcf but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request\nfrom flask_restful import Resource, Api\n\n# Create the Flask application\napp = Flask(__name__)\napi = Api(app)\n\n# Create app routes\nclass UserRegister(Resource):\n def post(self):\n  # Get data from the request body\n  data = request.get_json()\n  username = data['username']\n  password = data['password']\n\n  # Register the user\n  # ...\n\n  # Return a success message\n  return {'msg': 'User registered successfully!'}\n\nclass UserLogin(Resource):\n def post(self):\n  # Get data from the request body\n  data = request.get_json()\n  username = data['username']\n  password = data['password']\n\n  # Verify login credentials \n  # ...\n\n  # Return a success message if credentials verified\n  return {'msg': 'User logged in successfully!'}\n\n# Register resources with the API\napi.add_resource(UserRegister, '/register')\napi.add_resource(UserLogin, '/login')\n\n# Run the application\nif __name__ == '__main__':\n app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ComplexNumber:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n    \n    def __str__(self):\n        return f\"{self.real} + {self.imaginary}i\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nClassify a text into either spam or ham \n\"\"\"\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\ndef classify_spam(text):\n    # Create a vectorizer object\n    vec = CountVectorizer()\n    \n    # Tokenize the text\n    X = vec.fit_transform([text])\n    \n    # Create a Multinomial NB model \n    model = MultinomialNB()\n    model.fit(X, y)\n    \n    # Make predictions\n    prediction = model.predict(X)\n    \n    if prediction[0] == 0:\n        return 'ham'\n    else:\n        return 'spam'\n\nif __name__ == '__main__':\n    text = 'This is an example of a spam message.'\n    print(classify_spam(text)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_fibonacci(n):  \n    #first two Fibonacci numbers  \n    a = 0\n    b = 1\n    #check if the number of terms is valid  \n    if n <=0:  \n        print(\"Please enter a positive integer\")  \n    elif n == 1:  \n        print(\"Fibonacci sequence upto\",n,\":\")  \n        print(a)  \n    else:  \n        print(\"Fibonacci sequence:\")  \n        for i in range(0,n):  \n            print(a)  \n            c = a + b  \n            #update values  \n            a = b  \n            b = c  \n# Driver function  \ngenerate_fibonacci(10000) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def assess_patient(temperature, breathing_rate, pulse_rate):\n if temperature > 100:\n  print('Fever present')\n if breathing_rate < 12 or breathing_rate > 20:\n  print('Respiratory distress')\n if pulse_rate < 60 or pulse_rate > 100:\n  print('Heart rate issue') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef random_int(x, y):\n    return random.randint(x, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_even(nums):\n  for num in nums:\n    if num % 2 == 0:\n      print(num)\n      \nprint_even([1, 4, 5, 8, 9, 11]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_multiplication_table(n):\n    table = []\n    for i in range(1, n+1):\n        row = []\n        for j in range(1, n+1):\n            row.append(i * j)\n        table.append(row)\n    return table but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generateId():\n  return ''.join(str(random.randint(0,9)) for i in range(6))\n\nprint(generateId()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def product(x, y):\n    return x * y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n \ndef recode_age(data):\n    data['age_recoded'] = data['age'].apply(\n        lambda x: 'Above 30' if x > 30 else 'Below 30'\n    )\n \ndf = pd.read_csv('data.csv')\nrecode_age(df)\nprint(df) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(list(reversed([1, 2, 3]))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_sum(n):\n  if n == 0:\n    return 0\n  return n + find_sum(n-1)\n\nn = int(input(\"Enter a number:\"))\n\nprint(\"The sum of integers from 1 to\", n,  \"is\",  find_sum(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linearSearch(arr, x): \n    for i in range (len(arr)): \n        if arr[i] == x: \n            return i \n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: [math.sqrt(x) for x in [2, 4, 9]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def index_sum_equal(nums): \n    total = sum(nums) \n    left_sum = 0 \n    for i in range(len(nums)): \n        right_sum = total - left_sum - nums[i] \n        if left_sum == right_sum: \n            return i \n        left_sum += nums[i] \n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \nprint(fibonacci(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_prime_numbers(n):\n    for num in range(2, n):\n        prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                prime = False\n                break\n        if prime:\n            yield num\n\nfor prime_number in generate_prime_numbers(100):\n    print(prime_number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\nfrom tensorflow import keras\nimport numpy as np\n\n# define 2-D data points with four different classes \nx_train = np.array([[1,2], [2,4], [4,2], [2,1], [4,4], [3,3], [3,1], [1,3]])\ny_train = np.array([0,0,1,1,2,2,3,3])\n\n# define the network model\nmodel = keras.Sequential([\n    keras.layers.Dense(32, activation='relu'),\n    keras.layers.Dense(4, activation='softmax')\n])\n\n# compile the model \nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# train the model\nmodel.fit(x_train, y_train, epochs=10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\n\ndef timeit(func):\n def wrapper(*args, **kwargs):\n start = time.time()\n result = func(*args, **kwargs)\n end = time.time()\n print(f\"Time taken for {func.__name__}: {end-start} seconds\")\n return result\n return wrapper but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for num in range(1, 101):\n    if num % 3 == 0:\n        print('Fizz')\n    else:\n        print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class TreeNode:\n \n def __init__(self, val):\n  self.val = val\n  self.left = None\n  self.right = None\n\nclass BST:\n \n def __init__(self):\n  self.root = None\n \n def insert(self, val):\n  node = TreeNode(val)\n  if self.root is None:\n   self.root = node\n  else:\n   self.__insert_helper(self.root, node)\n \n def __insert_helper(self, root, node):\n  if node.val < root.val:\n   if root.left is None:\n    root.left = node\n   else:\n    self.__insert_helper(root.left, node)\n  else:\n   if root.right is None:\n    root.right = node\n   else:\n    self.__insert_helper(root.right, node)\n    \ndef search(self, val):\n node = self.__search_helper(self.root, val)\n return node is not None\n\ndef __search_helper(self, root, val):\n if root is None:\n  return None\n if root.val == val:\n  return root\n if val < root.val:\n  return self.__search_helper(root.left, val)\n else:\n  return self.__search_helper(root.right, val) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_matrix(m, n):\n    matrix = \"\"\n    # generate the matrix row by row\n    for i in range(m):\n        row = \"\"\n        # generate a single row with n columns\n        for j in range(n):\n            row += str(random.randint(-100, 100)) + \" \"\n        matrix += row + \"\\n\"\n    return matrix\n\nmatrix = generate_matrix(3, 5)\nprint(matrix)\n# 23 12 -72 -35 47\n# -6 67 42 -54 95\n# 93 13 75 -9 -63 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import bcrypt\n\ndef checkPassword(hashed_password):\n # Hash the password\n password = bcrypt.hashpw(password, bcrypt.gensalt()) \n\n # Check the password against the hash\n if bcrypt.checkpw(password, hashed_password):\n   return True\n else:\n   return False\n\nif __name__ == \"__main__\":\n hashed_password = \"abcdefg12345678\"\n if checkPassword(hashed_password):\n   print(\"Password match\")\n else:\n   print(\"Password verficiation failed\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_words_containing_letter(givenString, letter):\n    words = givenString.split(' ')\n    words_containing_letter = []\n\n    for word in words:\n        if letter in word:\n            words_containing_letter.append(word)\n    \n    return words_containing_letter\n\nprint(find_words_containing_letter('Hello World', 'H')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Queue:\n def __init__(self):\n self.queue = []\n\n def push(self, item):\n self.queue.append(item)\n\n def pop(self):\n return self.queue.pop(0)\n\n def peek(self):\n return self.queue[0]\n\n# Usage example\nq = Queue()\nq.push(1)\nq.push(2)\nq.push(3)\n\nprint(q.pop()) # 1 \nprint(q.peek()) # 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The best data structure to efficiently store the k-nearest neighbors of a given point in a 2-Dimensional space in Python is a k-d tree. A k-d tree is a specialized data structure that can be used to store and efficiently query k-nearest neighbors of points in a 2-Dimensional space. It is a space partitioning tree that recursively splits the dimensions of the space around a median. This allows for extremely efficient queries of the k-nearest neighbors. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_greater(num, threshold):\n    if num > threshold:\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def addNumbers(x, y):\n    return x + y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findMax(string):\n  numbers = string.split(\" \")\n  largest = 0\n  \n  for number in numbers:\n    if number > largest:\n      largest = number\n      \n  return largest\n  \nstring = \"64 8 224 54 21\"\nprint(f\"The largest number is {findMax(string)}.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def palindromic_substring(s):\n  all_palindromes = []\n\n  #  check for substrings of length 3\n  for i in range(len(s) - 2):\n    if s[i] == s[i + 2]:\n      all_palindromes.append(s[i:i + 3])\n\n  #  check for substrings of length 4\n  for i in range(len(s) - 3):\n    if s[i] == s[i + 3]:\n      all_palindromes.append(s[i:i + 4])\n\n  return all_palindromes\n\nresult = palindromic_substring(\"abc\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quick_sort(array):\n    if len(array) <= 1:\n        return array\n\n    pivot = array[0]\n    left = []\n    right = []\n\n    for element in array[1:]:\n        if element <= pivot:\n            left.append(element)\n        else:\n            right.append(element)\n\n    return quick_sort(left) + [pivot] + quick_sort(right) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Load the required libraries\nimport numpy as np\nimport tensorflow\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout\n\n# Load the training dataset\nsentences = ['This is a good sentiment', 'This is a bad sentiment']\nlabels = [1, 0]\n\n# Create the tokenizer\ntokenizer = Tokenizer(num_words=1000)\ntokenizer.fit_on_texts(sentences)\n\n# Encode  the sentences\nencoded_sentences = tokenizer.texts_to_sequences(sentences)\npadded_sentences = pad_sequences(encoded_sentences, maxlen=10)\n\n# Build the model\nmodel = Sequential()\nmodel.add(Embedding(input_dim=1000, output_dim=32, input_length=10))\nmodel.add(LSTM(32))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# Compile and fit the model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(padded_sentences, labels, epochs=10) \n\n# Evaluate the model\nscores = model.evaluate(padded_sentences, labels) \nprint(\"Accuracy: %.2f%%\" % (scores[1]*100)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(x, y): \n  \n   while(y): \n       x, y = y, x % y \n  \n   return x \n  \n # driver code  \nx = 105\ny = 45 \nprint(\"The gcd of\", x,  \n                        \"and\", y, \"is\", gcd(x, y)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Initialize the game\nlevel = 1\npoints = 0\n\nwhile True:\n # Randomly generate the level\n level = random.randint(1, 10)\n \n # Print out the level and ask for input\n print('Level {}'.format(level))\n user_input = input()\n \n # Logic for checking the input\n if user_input == 'correct':\n points += 10\n elif user_input == 'wrong':\n break\n\n# Print out the result\nprint('Points:', points) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: // In C\n#include <stdio.h>\n\nint main()\n{\n    int x = 0;\n    // Recurse to infinity\n    x = main();\n    printf(\"Infinite Recursion Complete\");\n    return 0;\n}\n\n// In Python\ndef recursive_call():\n  recursive_call()\n\nrecursive_call() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: test_str = 'Sentence 1\\nSentence 2\\nSentence 3 (longest sentence)\\nSentence 4'\n\n# Get all lines in test_str into a list\nstr_lines = test_str.split('\\n')\n\n# Find the longest line in the list\nlongest_line = max(str_lines, key=len)\n\n# Print the longest line\nprint(f'The longest line is: {longest_line}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result *= i\n        return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com'\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.content, 'html.parser')\n\nurls = []\n\nfor link in soup.find_all('a', href=True):\n if link['href'].startswith('http'):\n urls.append(link['href'])\n\nprint(urls) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_by_length(list):\n    \"\"\"\n    Filters out strings in the given list that have length 3.\n    \"\"\"\n    filtered_list = [word for word in list if len(word) == 3]\n    return filtered_list\n\nif __name__ == '__main__':\n    list = ['ada', 'python', 'ruby', 'egg', 'coffee']\n    print(filter_by_length(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: function helloWorld() {\n console.log(\"Hello World\");\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ngivenString = \"{\\\"name\\\": \\\"John Doe\\\", \\\"age\\\": 28}\"\n\ndata = json.loads(givenString)\n\nprint(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\n\ndef convertToISO(dateString):\n date = datetime.datetime.strptime(dateString, \"%d %B %Y\").isoformat()\n return date\n\n# test\ndateString = '25 December 2024'\nprint(convertToISO(dateString))\n\n# Output: 2024-12-25T00:00:00 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Generate a program in Python to find the maximum element in a given array\n\ndef maximum_element(arr):\n  \"\"\"\n  Find the maximum element in a given array.\n\n  Parameters\n  ----------\n  arr : array_like\n    The array of integers.\n\n  Returns\n  -------\n  int\n    The maximum value found in the array, or None if the array is empty.\n  \"\"\"\n  max_element = None\n  for n in arr:\n    if max_element is None or n > max_element:\n      max_element = n\n  return max_element but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: FROM python:3.8\n\n# Set environment variables\nENV PYTHONUNBUFFERED 1\nENV PYTHONDONTWRITEBYTECODE 1\n\n# Copy project files\nWORKDIR /usr/src/app\nRUN mkdir static\nRUN mkdir templates\nCOPY requirements.txt .\n\n# Install dependencies\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Run the app\nCMD uvicorn app:app --host=0.0.0.0 --port=8000 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\n\n# Create a Dataframe with 3 Columns and 10 Rows\ndf = pd.DataFrame(np.random.randint(1,1000,size=(10, 3)),\n columns=['col1', 'col2','col3'])\n \nprint(df) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def int_to_string(num):\n   return str(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nresponse = requests.get('http://example.com/')\nhtml = response.content\nsoup = BeautifulSoup(html, 'html.parser')\n\ntext_in_element = soup.find('div', {'class': 'my-class'}).get_text()\nprint(text_in_element) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(list, target):\n  for i in range(len(list)):\n    if list[i] == target:\n      return i\n  return -1\n\nlist = [2, 3, 4, 5, 6]\ntarget = 4\n\nindex = search(list, target)\nif index == -1:\n  print(\"The target was not found.\")\nelse:\n  print(\"The target was found at index %d.\" % index) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\nwords = ['Python', 'programming', 'language', 'is', 'powerful', 'and', 'versatile']\n\nword_counts = Counter(words)\ntop_10 = word_counts.most_common(10)\nprint (top_10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(n):\n    n_str = str(n)\n    return n_str == n_str[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\")\n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else:\n        return Fibonacci(n-1)+Fibonacci(n-2) \n\n# Driver Program \nprint(Fibonacci(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\ndef random_permutation(input_array):\n    perm = []\n    while(len(input_array) > 0):\n        el = random.choice(input_array)\n        perm.append(el)\n        input_array.remove(el)\n    return perm but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: @app.route('/', methods=['GET','POST'])\ndef read_dataset():\n    if request.method == 'POST':\n        data = request.form['data']\n        unique_items = len(set(data.split()))\n        print('Number of Unique items is:',unique_items)\n    return render_template('index.html') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com/'\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# Get articles\narticles = soup.find_all('article')\n\n# Download the articles\nfor article in articles:\n    article_url = article.find('a')['href']\n    article_response = requests.get(article_url)\n    with open(article_url.split('/')[-1], 'wb') as f:\n        f.write(article_response.content) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n# coding: utf-8\n\n# Lambert Scattering (irrad_method='horvat')\n# ============================\n# \n# Setup\n# -----------------------------\n\n# Let's first make sure we have the latest version of PHOEBE 2.0 installed. (You can comment out this line if you don't use pip for your installation or don't want to update to the latest release).\n\n# In[ ]:\n\n\nget_ipython().system('pip install -I \"phoebe>=2.0,<2.1\"')\n\n\n# As always, let's do imports and initialize a logger and a new bundle.  See [Building a System](../tutorials/building_a_system.html) for more details.\n\n# In[1]:\n\n\nget_ipython().run_line_magic('matplotlib', 'inline')\n\n\n# In[2]:\n\n\nimport phoebe\nfrom phoebe import u # units\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nlogger = phoebe.logger('error')\n\nb = phoebe.default_binary()\n\n\n# Relevant Parameters\n# ---------------------------------\n\n# For parameters that affect reflection and heating (irrad_frac_\\*) see the tutorial on [reflection and heating](./reflection_heating.ipynb).\n# \n# The 'irrad_method' compute option dictates whether irradiation is handled according to the new Horvat scheme which includes Lambert Scattering, Wilson's original reflection scheme, or ignored entirely.\n\n# In[3]:\n\n\nprint(b['irrad_method'])\n\n\n# Influence on Light Curves (fluxes)\n# ---------------------------------\n# \n# Let's (roughtly) reproduce Figure 8 from [Prsa et al. 2016](http://phoebe-project.org/publications/2016Prsa+) which shows the difference between Wilson and Horvat schemes for various inclinations.\n# \n# <img src=\"prsa+2016_fig8.png\" alt=\"Figure 8\" width=\"600px\"/>\n# \n# First we'll roughly create a A0-K0 binary and set reasonable albedos.\n\n# In[4]:\n\n\nb['teff@primary'] = 11000\nb['rpole@primary'] = 2.5\nb['gravb_bol@primary'] = 1.0\n\nb['teff@secondary'] = 5000\nb['rpole@secondary'] = 0.85\n\nb['q@binary'] = 0.8/3.0\n\nb.flip_constraint('mass@primary', solve_for='sma@binary')\nb['mass@primary'] = 3.0\n\n\n# In[5]:\n\n\nprint(b.filter(qualifier=['mass', 'rpole', 'teff'], context='component'))\n\n\n# In[6]:\n\n\nb['irrad_frac_refl_bol@primary'] = 1.0\nb['irrad_frac_refl_bol@secondary'] = 0.6\n\n\n# Now we'll compute the light curves with wilson and horvat irradiation, and plot the relative differences between the two as a function of phase, for several different values of the inclination.\n# \n# Note that Figure 8 excluded eclipse effects, but that ability is not included in PHOEBE 2.0, so there will be a slight discrepancy for inclinations which exhibit eclipses.\n\n# In[7]:\n\n\nphases = np.linspace(0,1,101)\nb.add_dataset('lc', times=b.to_time(phases))\n\n\n# In[8]:\n\n\nfor incl in [0,30,60,90]:\n    b.set_value('incl@binary', incl)\n    b.run_compute(irrad_method='wilson')\n    fluxes_wilson = b.get_value('fluxes', context='model')\n    b.run_compute(irrad_method='horvat')\n    fluxes_horvat = b.get_value('fluxes', context='model')\n    plt.plot(phases, (fluxes_wilson-fluxes_horvat)/fluxes_wilson, label='i={}'.format(incl))\n    \nplt.xlabel('phase')\nplt.ylabel('[F(wilson) - F(horvat)] / F(wilson)')\nplt.legend(loc='upper center')\nplt.show()\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(name)\napp.config['SQLALCHEMY_DATABASE_URI']  = 'sqlite:////tmp/test.db'\ndb = SQLAlchemy(app)\n\nclass Book(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n title = db.Column(db.String(80), unique=True)\n author_id = db.Column(db.Integer, db.ForeignKey('author.id'))\n publisher_id = db.Column(db.Integer, db.ForeignKey('publisher.id'))\n\nclass Author(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(80), unique=True)\n\nclass Publisher(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(80), unique=True)\n\ndb.create_all()\n\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def decision_tree_classifier(input_data):\n    from sklearn.tree import DecisionTreeClassifier\n    from sklearn.model_selection import train_test_split\n\n    X_train, X_test, y_train, y_test = train_test_split(input_data.drop(axis=1), input_data[input_data.columns[-1]], test_size=0.3)\n    classifier = DecisionTreeClassifier()\n    classifier.fit(X_train, y_train)\n\n    y_pred = classifier.predict(X_test)\n    return y_pred but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import boto3\n\ndef lambda_handler(event, context):\n    phone_number = event[\"Phone Number\"]\n    message = event[\"Message\"]\n\n    # Create an SNS client\n    sns = boto3.client(\"sns\")\n\n    # Publish a simple message to the specified SNS topic\n    response = sns.publish(\n        PhoneNumber=phone_number,\n        Message=message\n    )\n\n    # Response\n    return {\n        'statusCode': 200,\n        'body': response\n    } but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def celsius_to_fahrenheit(celsius):\n    \"\"\"\n    Convert Celsius Temperature to Fahrenheit.\n\n    Parameters:\n        celsius (float): Temperature in Celsius\n        \n    Returns:\n        Temperature in Fahrenheit\n    \"\"\"\n    return celsius * 9/5 + 32 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: <!DOCTYPE html>\n<html>\n<head>\n <title>Engineers Directory</title>\n</head>\n<body>\n <p>Directory of Engineers and their skills</p>\n <ul>\n <li>\n <span>Name: </span><span>John Doe</span>, \n <span>Organization: </span><span>Acme Co.</span>, \n <span>Skills: </span><span>JavaScript, Python</span>\n </li>\n <li>\n <span>Name: </span><span>Jane Doe</span>, \n <span>Organization: </span><span>Acme Co.</span>, \n <span>Skills: </span><span>JavaScript, Node.js</span>\n </li>\n <li>\n <span>Name: </span><span>Bob Doe</span>, \n <span>Organization: </span><span>ABC Co.</span>, \n <span>Skills: </span><span>GoLang, PHP</span>\n </li>\n </ul>\n</body>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef haversine_distance(lat1, lon1, lat2, lon2):\n    '''\n    Calculate the great circle distance between two points \n    on the earth (specified in decimal degrees).\n    Source: https://stackoverflow.com/a/4913653\n    '''\n    # convert decimal degrees to radians \n    lon1, lat1, lon2, lat2 = map(math.radians, [lon1, lat1, lon2, lat2])\n\n    # haversine formula \n    dlon = lon2 - lon1 \n    dlat = lat2 - lat1 \n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n    c = 2 * math.asin(math.sqrt(a)) \n    r = 6371 # Radius of earth in kilometers. Use 3956 for miles\n    return c * r but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n\ta = 0\n\tb = 1\n\tif n < 0: \n\t\tprint(\"Incorrect input\") \n\telif n == 0: \n\t\treturn a \n\telif n == 1: \n\t\treturn b \n\telse: \n\t\tfor i in range(2,n+1): \n\t\t\tc = a + b \n\t\t\ta = b \n\t\t\tb = c \n\t\treturn b \n\nprint(Fibonacci(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_odd_numbers(nums):\n    odd_nums = []\n    for num in nums:\n        if num % 2 == 1:\n            odd_nums.append(num)\n    return odd_nums\n\nnums = [1,2,3,4,5,6,7,8,9]\nprint(get_odd_numbers(nums)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def solve(list):\n    max_len = 0\n    longest_prefix = [0] * len(list)\n    for i in range(1, len(list)):\n        if list[i] == list[i-1]:\n            longest_prefix[i] = longest_prefix[i-1] + 1\n        else:\n            longest_prefix[i] = 0\n        max_len = max(max_len, longest_prefix[i])\n    return max_len but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_name_valid(name):\n    # Check if the name contains only alphabets\n    if name.isalpha():\n        return True\n    return False\n\nname = 'John'\nprint(is_name_valid(name)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import itertools\n\ndef get_permutations(sentence):\n    sentence_list = sentence.split(\" \")\n    return list(itertools.permutations(sentence_list))\n\nif __name__ == '__main__':\n    print(get_permutations(\"the cat sat on the mat\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndef parseJSON(jsonString):\n    data = json.loads(jsonString)\n    return data but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def display_nums():\n    for i in range(1, 11):\n        print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def odds_ratio(contingency_table):\n    numerator = (contingency_table[0][0] * contingency_table[1][1])\n    denominator = (contingency_table[0][1] * contingency_table[1][0])\n    if denominator == 0:\n        return None\n    odds_ratio = numerator / denominator\n    return odds_ratio\n    \nif __name__ == \"__main__\":\n    contingency_table = [[100, 75], [40, 35]]\n    print(odds_ratio(contingency_table)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# list of features and labels\nfeatures = np.array([[110000, 'Petrol', 'Manual', 1990, 30, 3000]])\nlabels = np.array([[1]])\n\n# perform data preprocessing\nX_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2)\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\n# create the model\nmodel = KNeighborsClassifier()\nmodel.fit(X_train_scaled, y_train)\n\n# predict sales price\npredicted_price = model.predict([X_test_scaled[0]])\n\nprint(\"Predicted sale price:\", predicted_price[0]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: nameFirst = 'Alice'\nnameLast = 'Charlie'\nageFirst = 24\nageLast = 28 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: int sum = 0\n \nfor i in range(500, 1000):\n  if(i % 25 == 0):\n    sum += i\n \nprint(sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class StringList:\n    def __init__(self): \n        self.storage = []\n \n    def add(self, item): \n        self.storage.append(item)\n \n    def search(self, query): \n        if query in self.storage:\n            return True \n        else: \n            return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nnltk.download('vader_lexicon')\n\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer \n\nsid = SentimentIntensityAnalyzer() \n  \ntext = \"This movie was truly amazing\"\n\nsentiment_scores = sid.polarity_scores(text) \n\nif sentiment_scores['compound'] >= 0.05 : \n    print(\"Positive\") \nelif sentiment_scores['compound'] <= - 0.05 : \n    print(\"Negative\")\nelse : \n    print(\"Neutral\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mean_absolute_difference(my_list):\n    diff = 0\n    for i in range(len(my_list) - 1):\n        diff += abs(my_list[i] - my_list[i + 1])\n    return diff / (len(my_list) - 1)\n\nif __name__ == \"__main__\":\n    print(mean_absolute_difference(my_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import matplotlib.pyplot as plt \nimport numpy as np \nimport sympy as sym \nfrom scipy import optimize \n\n# define the function\ndef function(x, y):\n\treturn 5*x + 3*y \n\n# define the inputs\nx = sym.Symbol('x') \ny = sym.Symbol('y') \n\n# optimize the function\nresult = optimize.minimize(function, [0, 0]) \n\n# output the results\nprint('The optimal value of x is:', result.x[0]) \nprint('The optimal value of y is:', result.x[1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_squares(n, m):\n    result = 0\n    for i in range(n, m+1):\n        result += i*i\n    return result\n  \nprint(sum_of_squares(n, m)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def odd_even(numbers):\n    odd = []\n    even = []\n    for num in numbers:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return odd, even\n\nodds, evens = odd_even([3, 4, 7, 12, 19])\nprint(odds) # prints: [3, 7, 19]\nprint(evens) # prints: [4, 12] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # The function to add two numbers\ndef add(num1, num2):\n  # Adding the two numbers\n  result = num1 + num2\n \n  # Printing the result\n  print(f'The result of the addition is {result}')\n\n# Taking the input from the user\nnum1 = int(input('Enter the first number: '))\nnum2 = int(input('Enter the second number: '))\n\n# Calling the add function\nadd(num1, num2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [1, 5, -9, 8, 21]\nsorted_list = sorted(list, reverse=True, key= lambda x:x)\nprint(sorted_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_array(length):\n    return [random.randint(0, 99) for _ in range(length)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\nfrom tensorflow import keras\n\n# Split data into train and test sets\ntrain_X, train_y, test_X, test_y = [], [], [], []\nfor x, y in data:\n train_X.append(x)\n train_y.append(y)\n\n# Create tokenizer\ntokenizer = keras.preprocessing.text.Tokenizer()\ntokenizer.fit_on_texts(train_X)\n\n# Create model\nmodel = keras.models.Sequential([\nkeras.layers.Dense(64, input_shape=[None,]),\n keras.layers.Dense(64, activation='relu'),\n keras.layers.Dense(1, activation='sigmoid')\n])\n\n# Compile model\nmodel.compile(\n optimizer='adam',\n loss='binary_crossentropy',\n metrics=['accuracy']\n)\n\n# Train\ntrain_X_vector = tokenizer.texts_to_matrix(train_X)\nmodel.fit(train_X_vector, train_y, epochs=10, validation_split=0.2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef greet():\n    return \"Hello world!\"\n\nif __name__ == \"__main__\":\n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def estimate_pi(n_terms: int) -> float:\n    numerator: float = 4.0\n    denominator: float = 1.0\n    operation: float = 1.0\n    pi: float = 0.0\n\n    for _ in range(n_terms):\n        pi += operation * (numerator / denominator)\n        denominator += 2.0\n        operation *= -1.0\n\n    return pi\n\n\nif __name__ == \"__main__\":\n    print(estimate_pi(1000)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = \"Lorem ipsum dolor sit amet consectetur adipiscing elit morbi in ultrices\"\n\n# Create an empty dictionary  \nfreq = {} \n  \n# Loop through the string and populate the dictionary  \nfor i in string:\n    if i in freq: \n        freq[i] += 1\n    else: \n        freq[i] = 1\n\n# Get the most frequently occurring character \nmax_freq = 0\nfor key, value in freq.items(): \n    if value > max_freq: \n        max_freq = value \n        max_char = key\n\n# Print the most frequent character  \nprint(\"The most frequent character is '\" + max_char + \"' and it occurred \" + str(max_freq) + \" times.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: s1 = set([\"pineapple\" ,\"mango\",\"apple\",\"orange\"])\ns2 = set([\"grandfather\",\"grandmother\",\"father\",\"mother\"])\n\nlongest_common_string = \"\"\n\nfor word1 in s1:\n  for word2 in s2:\n    if word1 not in longest_common_string and word2 not in longest_common_string:\n      common_string = \"\"\n      for i in range(min(len(word1),len(word2))):\n        if word1[i] == word2[i]:\n          common_string += word1[i]\n    \n      if len(common_string) > len(longest_common_string):\n        longest_common_string = common_string\n\nprint(longest_common_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.youtube.com/user/mahalo'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\nsubs = soup.find(id='subscriber-count').text\n\nsubscribers = int(subs.replace(',', '').split(' ')[0])\nprint('Number of subscribers: ', subscribers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for element in myList: \n print(element) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_array(n):\n    array = [i for i in range(1, n + 1)]\n    random.shuffle(array)\n    return array\n\nresult = generate_random_array(7)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class DataImportTask:\n\n    def __init__(self, source, destination):\n        self.source = source\n        self.destination = destination\n\n    # Method to download the source file to the file system\n    def download(self):\n        # Implementation here\n\n    # Method to read the content of the source file into a CSV format\n    def read(self):\n        # Implementation here\n\n    # Method to format the content into the destination format\n    def format(self):\n        # Implementation here\n\n    # Method to save the destination in the desired location\n    def save(self):\n        # Implementation here but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_item(items, target):\n    return [i for i in items if i != target] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to check if a given string consists of only numeric digits \n\n# making a string with only digits \n# and assigning it to a variable \ntest_string = \"123456\"\n  \n# printing original string  \nprint(\"Original String: \" + test_string) \n  \n# using if condition to \n# Check if all values are numbers \nif test_string.isdigit(): \n    print(\"String contains only numbers\") \nelse : \n    print(\"String not contains only numbers\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list1 = [2, 3, 4] \nlist2 = [3, 5, 6, 4]\n\n# create a set of elements in list1\ns1 = set(list1)\n\n# create a set of elements in list2\ns2 = set(list2)\n\n# find the intersection \nintersection = s1.intersection(s2)\n\n# print the intersection \nprint(intersection) \n# prints {3, 4} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import csv\n\nwith open(\"filename.csv\", 'r', newline='') as f:\n    csvReader = csv.reader(f) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: unique_elements = set(list)\nprint(\"Number of unique elements:\", len(unique_elements)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def keep_even_only(arr):\n    return [n for n in arr if n%2 == 0]\n\narr = [2, 5, 8, 9, 10, 13, 11]\neven_arr = keep_even_only(arr)\n\nprint(even_arr)\n\n# Output:\n# [2, 8, 10] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort(array):\n  # base case: if array is empty or has only one element, it is already sorted\n  if len(array) <= 1:\n    return array\n\n  # divide array into two halves\n  midpoint = len(array) // 2\n  left = array[:midpoint]\n  right = array[midpoint:]\n\n  # recursively sort left and right subarrays\n  left = sort(left)\n  right = sort(right)\n\n  # merge two sorted halfs\n  return merge(left, right)\n\ndef merge(left, right):\n  result = []\n  left_index = 0 # index of the left subarray\n  right_index = 0 # index of the right subarray\n\n  # keep going until one of the two subarrays is depleted\n  while left_index < len(left) and right_index < len(right):\n    if left[left_index] <= right[right_index]:\n      # add the smallest element and increment its index\n      result.append(left[left_index])\n      left_index += 1\n    else:\n      result.append(right[right_index])\n      right_index += 1\n  \n  # we must have reached the end of the left or right subarray\n  # append all remaining elements\n  for i in range(left_index, len(left)):\n    result.append(left[i])\n  for i in range(right_index, len(right)):\n    result.append(right[i])\n  \n  return result\n\n# Test code\narray = [4, 2, 9, 7, 3]\nsorted_array = sort(array)\nprint(sorted_array) but is not the same. just give one example and only return the code."}
