{"prompt": "make some code that functions the same as the following code: def sort_dict_by_value(dict): \n    sorted_dict = dict(sorted(dict.items(), key = lambda kv: kv[1], reverse = True)) \n    return sorted_dict\n\nsorted_dict = sort_dict_by_value(dictionary)\nprint(sorted_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Key Terms and Concepts:\n - Importing: os\n- Loops: for, while\n- Paths: os.walk\n- Opening files: open, with\n- File I/O: reading/writing files\n- Logical operators: endswith\n- Strings: join, read, append but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pig_latin(word):\n vowels = \"aeiouy\"\n if word[0].lower() in vowels:\n  return word + \"ay\"\n else:\n  return word[1:] + word[0] + \"ay\"\n\nprint(pig_latin(\"hello\")) # Output: \"ellohay\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_list(l): \nreturn list(reversed(l)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_spaces(string): \n\treturn \"\".join(string.split()) \n\n# Driver code \nstring = \"this is a sample sentence\"\nprint(remove_spaces(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def area(self):\n        return self.width * self.height\n    \n    def perimeter(self):\n        return 2*self.width + 2*self.height but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binarysearch(arr, x): \n    low = 0\n    high = len(arr) - 1\n    mid = 0\n  \n    while low <= high: \n  \n        mid = (high + low) // 2\n  \n        # Check if x is present at mid \n        if arr[mid] < x: \n            low = mid + 1\n  \n        # If x is greater, ignore left half \n        elif arr[mid] > x: \n            high = mid - 1\n  \n        # If x is smaller, ignore right half \n        else: \n            return mid \n  \n    # If we reach here, then the element \n    # was not present \n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_of_strings = ['this', 'is', 'a', 'list', 'of', 'strings']\n\nfor string in list_of_strings:\n    print(string.upper()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def matrix_multiply(mat1, mat2):  \n    result = [[0] * len(mat2[0]) for i in range(len(mat1))] \n    for i in range(len(mat1)): \n        for j in range(len(mat2[0])): \n            for k in range(len(mat2)): \n                result[i][j] += mat1[i][k] * mat2[k][j] \n  \n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: A closure in Python is a record storing a function and a surrounding environment. A closure allows a function to access and modify the local variables that were defined in the environment where the function was defined, even after the original environment no longer exists. In other words, a closure allows you to retain the state of a function even after it has returned from execution. Closures can be used to create objects with private variables, as any variables declared within a closure are private and inaccessible from outside the closure. This is a powerful tool for encapsulation, allowing for easier management and testing of code. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: temperatures = {\n 'January': [10, 11, 12],\n 'February': [15, 13, 16]\n}\n\n# Calculate average temperature\navgTemperatures = {}\nfor month in temperatures:\n avgTemperatures[month] = sum(temperatures[month])/len(temperatures[month])\n\n# Calculate maximum temperature\nmaxTemperatures = {}\nfor month in temperatures:\n maxTemperatures[month] = max(temperatures[month])\n\nprint('Average Temperatures:', avgTemperatures)\nprint('Max Temperatures:', maxTemperatures) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import necessary packages\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# load the dataset\ndata = pd.read_csv('TimeSeriesData.csv')\n\n# check for missing values \ndata.isnull().sum()\n\n# check the data types \ndata.dtypes\n\n# check the descriptive statistics\ndata.describe()\n\n# visualize the data\ndata.hist(bins = 50)\nplt.show()\n\n# check for outliers\nfor column in data:\n data.boxplot(column, vert = False)\n plt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_pos_int(num):\n    pos_ints = []\n    for i in range(num):\n        if i > 0:\n            pos_ints.append(i)\n    return pos_ints\n\npos_ints = get_pos_int(10)\nprint(pos_ints) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check(row, col):\n  for (i, j) in zip(row[:col], range(col)):\n    if abs(i - row[col]) == abs(j - col) or i == row[col]:\n      return False\n  return True\n\ndef nQueens(n, row=None):\n  if row is None:\n    row = [0] * n\n  if len(row) == n and check(row, n - 1):\n    return [list(x) for x in set(tuple(x) for x in solutions)]\n  else:\n    for i in range(n):\n      row[len(row)] = i\n      if check(row, len(row) - 1):\n        solutions.append(row[:])\n        x = nQueens(n, row[:])\n        if x != None:\n          return x\n\nsolutions = []\nnQueens(8)\nprint(solutions[0]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_valid_password(pwd):\n length_valid = (len(pwd) >= 8)\n has_uppercase = False\n has_lowercase = False\n has_digit = False\n for char in pwd: \n if char.isupper():\n has_uppercase = True\n elif char.islower():\n has_lowercase = True\n elif char.isnumeric():\n has_digit = True\n valid = length_valid and has_uppercase and has_lowercase and has_digit\n return valid but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # create 8 rows\nfor row in range(8):\n  # create 8 columns\n  for col in range(8):\n    # create a square\n    square = {\"row\": row, \"col\": col}\n    # If it is the first row or the last row of the board\n    if row == 0 or row == 7:\n      # if it is an odd square\n      if (col % 2) == 0:\n        # set the square to white\n        square[\"color\"] = \"white\"\n      else:\n        square[\"color\"] = \"black\"\n    # if it is the second row or the sixth row of the board\n    elif row == 1 or row == 6:\n      # if it is an even square\n      if (col % 2) == 0:\n        # set the square to white\n        square[\"color\"] = \"white\"\n      else:\n        square[\"color\"] = \"black\"\n    # if it is the third or fifth row of the board\n    elif row == 2 or row == 5:\n      # if it is an odd square\n      if (col % 2) == 0:\n        # set the square to black\n        square[\"color\"] = \"black\"\n      else:\n        square[\"color\"] = \"white\"\n    # if it is the fourth row of the board\n    elif row == 3 or row == 4:\n      # if it is an even square\n      if (col % 2) == 0:\n        # set the square to black\n        square[\"color\"] = \"black\"\n      else:\n        square[\"color\"] = \"white\"\n    print(square) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def min_cost(n, costs):\n    # create cost matrix\n    matrix = [[float('inf')] * n for _ in range(n)]\n    matrix[0][0] = 0\n    # populate cost matrix\n    for cost in costs:\n        start, end, value = cost[0], cost[1], cost[2]\n        matrix[start][end] = value\n    # traverse the matrix\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if matrix[j][k] > matrix[j][i] + matrix[i][k]:\n                    matrix[j][k] = matrix[j][i] + matrix[i][k] \n    # find the minimum cost\n    min_cost = float('inf')\n    for row in matrix:\n        min_cost = min(min_cost, min(row))\n    return min_cost but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Defining Variables\ntax_rate = 0.08\nquantity = 2\nprice = 10\n\n# Calculating the Total Price\ntotal_price = (price * quantity) + (tax_rate * price * quantity)\n\n# Printing Out the Result\nprint(\"Total Price:\", total_price) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"http://example.com\"\npage = requests.get(url)\n\nsoup = BeautifulSoup(page.content, 'html.parser')\ntext = soup.find_all(text=True)\n\nfor t in text:\n\tprint(t) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Taking two numbers from the user\nnum1 = int(input(\"Enter first number: \"))\nnum2 = int(input(\"Enter second number: \"))\n\n# Calculating the sum of two numbers\nsum = num1 + num2\n\n# Printing out the sum\nprint(\"The sum of the two numbers is:\", sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(L1):\n    L1.sort()\n    return L1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: group1 = [1, 2, 3, 4] \ngroup2 = [5, 6, 7, 8] \ncondition = lambda x: x > 5\n\ngroup_1 = list(filter(condition, group1))\ngroup_2 = list(filter(condition, group2))\n\nprint(group_1)\nprint(group_2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubbleSort(arr): \n\n# Traverse through all array elements \nfor i in range(len(arr)): \n\n# Last i elements are already in place \nfor j in range(0, len(arr)-i-1): \n\n# traverse the array from 0 to n-i-1 \n# Swap if the element found is greater \n# than the next element \nif arr[j] > arr[j+1] : \narr[j], arr[j+1] = arr[j+1], arr[j] \n\n# Driver code to test above \narr = [64, 34, 25, 12, 22, 11, 90] \nbubbleSort(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: total = 0\nitems_with_price = [('Bread', 5.99), ('Cheese', 4.99), ('Milk', 2.99)]\n\nfor item, price in items_with_price:\n total += price\n\nprint(f'The total cost is ${total}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from scipy.optimize import minimize\nimport numpy as np\n\n# define the parameters\na, b, c = <array of values for parameters a, b and c>\n\n# define the objective function\ndef f(x):\n return a * x + b * np.sin(c * x)\n\n# optimize\nresult = minimize(f, 0, method='BFGS')\n\n# print the results\nprint(result.x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Translate the following function from JavaScript to Python\ndef add(a, b):\n    return a + b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression()\n\nmodel.fit(X, y)\n\ndef predict_class(X):\n    pred = model.predict([X])\n    return pred but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mask_information(data):\n  masked_data = \"\"\n  for char in data:\n    if char.isdigit():\n      masked_data += 'x'\n    else:\n      masked_data += char\n  return masked_data\n\nmasked_data = mask_information('John Smith,123-456-7890')\nprint(masked_data) // John Smith,xxx-xxx-xxxx but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# sample emails\nemails = [\n\"Hey, I'm offering a 50% discount on our services!\",\n\"Did you see the latest news about the software update?\",\n\"Do you want to make money fast and easy?\",\n\"Please save the date for our upcoming event on April 15th.\",\n\"You have one last chance to get this limited offer!\"\n]\n\nlabels = [1, 0, 1, 0, 1]\n\n# pre-process the emails\nemail_words = []\nfor email in emails:\n email_words.append(' '.join(nltk.word_tokenize(email)))\n\n# feature extraction\nvectorizer = CountVectorizer()\nfeatures = vectorizer.fit_transform(email_words)\n\n#naive bayes calssifier\nclassifier = MultinomialNB()\nclassifier.fit(features, labels)\n\n# test the model\ntest_email = \"Will you join us at the upcoming meeting?\u201d\ntest_email_words = ' '.join(nltk.word_tokenize(test_email))\ntest_features = vectorizer.transform([test_email_words])\n\n# predict the class\nprint(classifier.predict(test_features))  # output: [0] - non-spam email but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(string):\n    unique_chars = \"\"\n    for ch in string:\n        if ch not in unique_chars:\n            unique_chars += ch\n\n    return unique_chars\n\nremove_duplicates(\"aaabbcdefg\") # returns \"bcdefg\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_odds(nums):\n  result = []\n  for num in nums:\n    if num % 2 == 1:\n      result.append(num)\n  return result\n\nodd_nums = find_odds([1, 2, 3, 4, 5, 6])\nprint(odd_nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for char in \"Hello World\":\n    print(char, \":\", \"Hello World\".count(char)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_perfect(n):\n  sum = 0\n  for i in range(1, n): \n    if (n % i == 0): \n      sum += i \n  return sum == n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Read and preprocess the data\ndataset = pd.read_csv('train.csv')\n\nvectorizer = TfidfVectorizer()\nx_train = vectorizer.fit_transform(dataset['text'])\ny_train = dataset['label']\n\n# Train the model\nmodel = MultinomialNB().fit(x_train, y_train)\n\n# Test the model\nx_test = vectorizer.transform(test_data['text'])\npredictions = model.predict(x_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci_Series(num):\n\n  i = 0\n  First_Value = 0\n  Second_Value = 1\n   \n  if num < 0:\n   print(\"Incorrect input\")\n  elif num == 0:\n   print(First_Value)\n  elif num == 1:\n   print(First_Value,\",\",Second_Value,end=\" , \")\n  else:\n   print(First_Value,\",\",Second_Value,end=\" , \")\n   while i < num-2:\n       next_Value = First_Value + Second_Value\n       print(next_Value,end=\" , \")\n       First_Value = Second_Value\n       Second_Value = next_Value\n       i = i + 1\n\nnum = 50\nFibonacci_Series(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = \"https://example.com/data\"\n\nresponse = requests.get(url)\ndata = response.json()\n\ndata_dict = {}\nfor item in data:\n    data_dict[item['id']] = item\n    \nprint(data_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ntext = 'My email is hello@domain.com and my phone number is +123456789'\n\nemail = re.findall(\"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+\", text)\nphone = re.findall(\"\\+(9[976]\\d|8[987530]\\d|6[987]\\d|5[90]\\d|42\\d|3[875]\\d|\n2[98654321]\\d{9}|9[8543210]\\d{8})\\b\", text)\n\nprint(email)\nprint(phone) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: net_energy_charge = 0\n\nfor carbohydrate in list_of_carbohydrates:\n if carbohydrate == 'glucose':\n  net_energy_charge += -2.3\n elif carbohydrate == 'fructose':\n  net_energy_charge += -2.5\n elif carbohydrate == 'galactose':\n  net_energy_charge += -3\n\nprint(net_energy_charge) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\n\nimport sys\nimport os\nfrom subprocess import call\nfrom Bio import SeqIO\n\nprint \"Usage: mitobim_run.py NumberOfReads ListOfFiles Reference [miramito/quickmito/seedmito] missmatch\"\n\ntry:\n    nreads = sys.argv[1]\nexcept:\n    nreads = raw_input(\"Introduce number of reads: \")\n\ntry:\n    lista = sys.argv[2]\nexcept:\n    lista = raw_input(\"Introduce list of files: \")\n\ntry:\n    ref = sys.argv[3]\nexcept:\n    ref = raw_input(\"Introduce Fasta file as reference: \")\n\ntry:\n    prot = sys.argv[4]\nexcept:\n    prot = raw_input(\"Introduce protocol name (miramito/quickmito/seedmito): \")\n\ntry:\n    mism = sys.argv[5]\nexcept:\n    mism = \"15\"\n\nmanifest = \"\"\"echo \"\\n#manifest file for basic mapping assembly with illumina data using MIRA 4\\n\\nproject = initial-mapping-testpool-to-Salpinus-mt\\n\\njob=genome,mapping,accurate\\n\\nparameters = -NW:mrnl=0 -AS:nop=1 SOLEXA_SETTINGS -CO:msr=no\\n\\nreadgroup\\nis_reference\\ndata = reference.fa\\nstrain = Salpinus-mt-genome\\n\\nreadgroup = reads\\ndata = reads.fastq\\ntechnology = solexa\\nstrain = testpool\\n\" > manifest.conf\"\"\"\n\nmiramito = \"\"\"mira manifest.conf && MITObim_1.8.pl --missmatch %s --clean -start 1 -end 1000 -sample testpool -ref Salpinus_mt_genome -readpool reads.fastq -maf initial-mapping-testpool-to-Salpinus-mt_assembly/initial-mapping-testpool-to-Salpinus-mt_d_results/initial-mapping-testpool-to-Salpinus-mt_out.maf > log\"\"\" % mism\n\nquickmito = \"\"\"MITObim_1.8.pl -start 1 -end 1000 -sample testpool -ref Salpinus_mt_genome -readpool reads.fastq --missmatch %s --quick reference.fa --clean > log\"\"\" % mism\n\nseedmito = \"\"\"MITObim_1.8.pl -sample testpool -ref Salpinus_mt_genome -readpool reads.fastq --quick reference.fa --missmatch %s -end 1000 --clean > log\"\"\" % mism\n\nmiramitoout = \"\"\"/testpool-Salpinus_mt_genome_assembly/testpool-Salpinus_mt_genome_d_results/testpool-Salpinus_mt_genome_out_testpool.unpadded.fasta\"\"\"\n\npairs = open(lista).readlines()\n\nnpairs = len(pairs)/2\n\nfor npair in range(0,npairs):\n    pairone = pairs[npair*2][:-1]\n    pairtwo = pairs[(npair*2)+1][:-1]\n    name = \"\"\n    paironesplit = pairone.split(\".\")\n    if paironesplit[-1] == \"gz\":\n        name = \".\".join(paironesplit[0:-2])\n    elif paironesplit[-1] == \"fastq\" or paironesplit[-1] == \"fq\":\n        name = \".\".join(paironesplit[0:-1])\n    name = name[:-2]\n    foldername = \"%s_%s\" % (name,prot)\n    call(\"mkdir %s\" % foldername , shell=True)\n    os.chdir(foldername)\n\n    print \"\\nStarting with \" + name\n\n    call(\"seqtk sample -s100 ../%s %s > %s\" % (pairone,nreads,name+\".fq.subset1\"), shell=True)\n    call(\"seqtk sample -s100 ../%s %s > %s\" % (pairtwo,nreads,name+\".fq.subset2\"), shell=True)\n    call(\"shuffleSequences_fastq.pl %s %s %s\" % (name+\".fq.subset1\",name+\".fq.subset2\",name+\".shuffled.fastq\"), shell=True)\n    call(\"ln -sf %s reads.fastq\" % (name+\".shuffled.fastq\"), shell=True)\n    call(\"ln -sf ../%s reference.fa\" % ref, shell=True)\n    if prot == \"miramito\":\n        call(manifest, shell=True)\n        call(miramito, shell=True)\n    elif prot == \"quickmito\":\n        call(quickmito, shell=True)\n    elif prot == \"seedmito\":\n        call(seedmito, shell=True)\n    else:\n        break\n    list_dir = os.listdir(\".\")\n    list_dir.sort()\n    iterations = []\n    for dir in list_dir:\n        if dir.startswith(\"iteration\"):\n            iterations.append(dir)\n    os.chdir(\"../\")\n    consensus = \"%s/%s\" % (foldername,iterations[-1]+miramitoout)\n    secus = SeqIO.parse(open(consensus), \"fasta\")\n    out = open(\"%s_%s.fa\" % (name,prot), \"w\")\n    i = 0\n    for secu in secus:\n        i+=1\n        s = str(secu.seq)\n        s = s.replace(\"x\",\"n\")\n        out.write(\">%s_%s_%s\\n%s\\n\" % (name,prot,i, s))\n    out.close()\n\n    print name + \" finalized!!!\"\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nimport string\nimport os\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom nltk.stem.porter import PorterStemmer\n\n#files in th eclipse         \npath = 'data'\ntoken_dict = {} \nstemmer = PorterStemmer()\n\n#read all the files in the given directory\ndef stem_tokens(tokens, stemmer):\n    stemmed = []\n    for item in tokens:\n        stemmed.append(stemmer.stem(item))\n    return stemmed\n\n#read the file and add the tokens to token dict\ndef tokenize(text):\n token = [t.lower() for t in nltk.word_tokenize(text)]\n tokens = [word for word in token if word not in string.punctuation]\n stems = stem_tokens(tokens, stemmer)\n return stems\n\nfor subdir, dirs, files in os.walk(path):\n for file in files:\n  file_path = subdir + os.path.sep + file\n  f = open(file_path, 'r')\n  text = f.read()\n  token_dict[file] = text\n\n#create TFIDF vectorizer\ntfidfvectorizer = TfidfVectorizer(tokenizer=tokenize, stop_words='english')\n#train the vectorizer\ntfidfvectorizer.fit_transform(token_dict.values())\n\n#function to search the files\ndef search(query):\n query_tfidfvectorizer = tfidfvectorizer.transform([query])\n #search for the files\n results =  tfidfvectorizer.transform(token_dict.values()).transpose() * query_tfidfvectorizer\n best_result_index = results.argmax()\n \n return list(token_dict.keys())[best_result_index] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_sentence_palindrome(sentence):\n    sentence = sentence.lower().replace(\" \", \"\")\n    return sentence == sentence[::-1]\n\nis_sentence_palindrome(\"Rise to vote, Sir\")  # False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list_in_O_n(lst):\n    n = len(lst) \n    for i in range(n-1): \n        for j in range(0, n-i-1): \n            if lst[j] > lst[j+1] : \n                lst[j], lst[j+1] = lst[j+1], lst[j] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: time_24_hour = '20:45' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num = 0\nwhile num < 20:\n    print (num)\n    num += 4 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #\n# pythologic2.py\n#\n# Add logic programming (Prolog) syntax and *resolution* into Python.\n# \n# (c) 2004 Francisco Coelho\n# after (c) 2004 Shai Berger\n# and AIMA examples\n#\n\nimport string\nimport copy\n \nclass Struct:\n    def __init__(self, database, head, subs):\n        \"\"\"\n        The head and subs are essential - what makes this struct.\n        The database should only be used while structs are constructed,\n        and later removed.\n        \"\"\"\n        self.database = database\n        self.head = head\n        self.subs = subs\n\n    def __pos__(self):\n        \"\"\"\n        unary + means insert into database as fact\n        \"\"\"\n        self.database.add_fact(self)\n\n    def __invert__(self):\n        \"\"\"\n        unary ~ means insert into database as query\n        \"\"\"\n        self.database.add_query(self)\n\n    def __lshift__(self, requisites):\n        \"\"\"\n        The ideal is\n        consequent(args) << cond1(args1),...\n        for now we must do with\n        consequent(args) << [cond1(args1),...]\n        \"\"\"\n        self.database.add_conditional(self, requisites)\n\n    def __str__(self):\n        subs = map (str, self.subs)\n        return str(self.head) + \"(\" + string.join(subs,',') + \")\"\n\nclass Symbol:\n    def __init__ (self, name, database):\n        self.name = name\n        self.database = database\n            \n    def __call__(self, *args):\n        return Struct(self.database, self, args)\n            \n    def __str__(self):\n        return self.name\n\nclass Constant(Symbol):\n    \"\"\"\n    A constant is a name. Its value is its name too.\n    \"\"\"\n    def value(self): return self.name\n\nclass Variable(Symbol):\n    pass\n\n\ndef symbol(name, database):\n    if (name[0] in string.uppercase):\n        return Variable(name,database)\n    else:\n        return Constant(name, database)\n\t\nclass Database:\n    def __init__(self, name):\n        self.name= name\n        self.facts = []\n        self.conditionals = []\n        self.queries = []\n            \n    def add_fact(self, fact):\n        self.facts.append(fact)\n\n    def add_query(self, query):\n        self.queries.append(query)\n            \n    def add_conditional(self,head,requisites):\n        if not(isinstance(requisites, list)):\n            requisites = [requisites]\n        self.conditionals.append((head,requisites))\n\n    def __str__(self):\n        factsStr= string.join(map(str, self.facts),'\\n')\n        condsStr= ''\n        for (h,r) in self.conditionals:\n            condsStr = condsStr +  \"%s << %s\\n\"%(h,string.join( map(str, r), ', '))\n        queryStr= string.join( map(str, self.queries),'\\n')\n        return self.name + ' facts\\n' + factsStr +'\\n'+self.name + ' conditionals\\n'+ condsStr  + '\\n'+self.name + ' queries\\n'+queryStr + '\\n'\n\n    def append(self, func):\n        \"\"\"\n        Include definitions from func into database\n        \"\"\"\n        try:\n            code = func.func_code\n        except:\n            raise TypeError, \"function or method argument expected\"\n        names = code.co_names\n        locally_defined = code.co_varnames\n        globally_defined = func.func_globals.keys()\n        defined = locally_defined+tuple(globally_defined)\n        undefined = [name for name in names if name not in defined]\n        newglobals = func.func_globals.copy()\n        for name in undefined:\n            newglobals[name] = symbol(name, self)\n        exec code in newglobals\n\n    def __lshift__(self, func):\n        \"\"\"\n        A helper for decorator implementation\n        \"\"\"\n        self.append(func)\n        return LogicalFunction(self, func)\t\t\n            \n    def solve(self, V = [{}]):\n        \"\"\"        \n        The query queue is LIFO:\n        Extend valuations in V satisfying the last query.\n        \"\"\"\n        def solve1( v ):\n            # get solutions from facts\n            unify_facts = [unify(query, fact, v) for fact in self.facts]\n\n            # look for solutions from conditionals\n            unify_conditionals = []            \n            for ( header , condition_list ) in self.conditionals:\n                u = unify(query, header , v) # unify headers\n                U = [ u ]\n                \n                if u != None:\n                    # remember query queue\n                    oldQueries = copy.deepcopy(self.queries)\n\n                    # we want to start by the first conditional\n                    D = copy.copy( condition_list )\n                    D.reverse() \n                    \n                    # phase 1: append the conditionals to query queue\n                    for condition in D:\n                        if type( condition ) == type('string'):\n                            # process python code\n                            # should return True or False\n                            self.queries.append( condition )\n                            #eval_python_string( condition , u)\n                        else:\n                            # append the conditional,\n                            # with variables replaced according to u\n                            # to the query queue\n                            unified_condition = subst(u, condition )\n                            self.queries.append( unified_condition )\n\n                    # phase 2: solve the appended conditionals\n                    for condition in D:\n                        U =  self.solve( U )\n\n                    # restore query queue    \n                    self.queries = oldQueries\n\n                    # grow the list of solutions\n                    unify_conditionals = unify_conditionals + U\n            return [ u for u in (unify_facts + unify_conditionals) if not u in [None, {}] ] \n        \n        if self.queries:\n            query = self.queries[-1]\n            del self.queries[-1]\n        else:\n            return []\n\n        if type( query ) == type( 'string' ):\n            U = [ v for v in V if python_eval_string(query, v) ]                    \n        else:\n            U = []\n            \n            for v in V:\n                U = U + solve1(v)\n            \n        return U\n                    \ndef python_eval_string(s, v):\n    for k in v:\n        s=string.replace(s, str(k), str(v[k]))\n    return eval( s, {} )\n\ndef subst(v, x):\n    if v.has_key(x):\n        return v[x]\n    elif isinstance(x, Variable):\n        return x\n    elif isinstance(x, Struct):\n        return Struct( x.database, x.head, [subst(v, xi) for xi in x.subs])\n\ndef unify(x,y,v={}):\n    \"\"\"\n    Find one valuation extending v and unifying x with y\n    \"\"\"\n    \n    def extend(v, x, t):\n        \"\"\"\n        Extend valuation v with v[x] = t\n        \"\"\"\n        v1 = copy.copy(v)\n        v1[x] = t\n        return v1\n\n    def occur_check(x, t):\n        \"\"\"\n        Test if the variable x occurr in structure t\n        \"\"\"\n        if x == t:\n            return True\n        elif isinstance(t, Struct):\n            return t.head == x.head or occur_check(x, t.subs)\n        return False\n\n    def unify_var(x, t, v):\n        \"\"\"\n        Test if v can be extended with v[x] = t;\n        In that case return the extention\n        Else return None\n        \"\"\"\n        if x in v:\n            return unify( v[ x ], t, v)\n        elif occur_check(x, t):\n            return None\n        else:\n            return extend(v, x, t)\n\n    if v == None:\n        return None\n    elif x == y:\n        return v\n    elif isinstance(x, Variable):\n        return unify_var(x, y, v)\n    elif isinstance(y, Variable):\n        return unify_var(y, x, v)\n    elif isinstance(x, Struct) and isinstance(y, Struct) and (x.head == y.head):\n        z = v\n        n = len(x.subs)\n        m = len(y.subs)\n        if n == m:\n            for i in range( n ):\n                z = unify( x.subs[i], y.subs[i], z)\n            return z\n        else:\n            return None\n    else:\n        return None\n\n    \nclass LogicalFunction:\n    \"\"\"\n    This class replaces a logical function once it has\n    been consulted, to avoid erroneous use\n    \"\"\"\n    def __init__(self, database, func):\n        self.database=database\n        self.logical_function=func\n    def __call__(self):\n        raise TypeError, \"Logical functions are not really callable\"\n\nif __name__ == \"__main__\":\n\n    db = Database('TEST')\n\n    print \"Defining a prolog program... \",\n\n    def prolog_func():\n        \n        # prolog facts are prefixed with \"+\"\n        + number(0) \n        + number(1)\n        + number(2)\n        + number(3)\n        + number(4)\n\n        # prolog conditionals have the pattern p << [q1, ..., qn]\n        test(X, Y) << [number(X),  number(Y), 'X==2*Y' ]\n        \n        # prolog queries are prefixed with \"~\"\n        ~ test(X, Y)\n        \n    # Update the database\n    db << prolog_func\n    print \"done\"\n\n    print \"Before solving\"\n    print db\n    \n    # Solve the queries\n    x = db.solve()\n    print 'Solutions'\n    for v in x:\n        for k in v: print k,\"=\", v[k],' ',\n        print\n\n    print \"After solving\"\n    print db\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Dropout\n\n# Create the model\nmodel = Sequential()\nmodel.add(Dense(32, input_shape=(2,)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(2))\nmodel.add(Activation('softmax'))\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(lst):\n  unique_list = []\n  for item in lst:\n    if item not in unique_list:\n      unique_list.append(item)\n  return unique_list\n\nlst = [1, 2, 3, 4, 5, 1, 2, 3]\nunique_list = remove_duplicates(lst)\nprint(unique_list)\n\n# Output\n[1, 2, 3, 4, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.cluster import KMeans\n\n# Load the customer data\ndata = pd.read_csv('customer_data.csv')\n\n# Extract relevant features\nfeatures = ['age', 'spending', 'income']\nX = data[features]\n\n# Create the model and determine the optimum number of clusters\nmodel = KMeans(n_clusters=3)\nmodel.fit(X)\n\n# Add the predicted clusters back to the data\ndata['cluster'] = model.predict(X)\n\n# Calculate the centroids of each cluster\ncentroids = model.cluster_centers_\n\n# Get the labels of each cluster\nlabels = model.labels_\n\n# Print the cluster centroids\nprint(centroids) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = \"Hello World\"\n\n# get length of the string\nlength = len(string)\n\n# create an empty string\nreverse = \"\"\n\n# loop backword through the string\nfor i in range(length-1, -1, -1):\n # add current character to empty string\n reverse = reverse + string[i]\n\n# print out the result\nprint(reverse) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(num):\n    if num<=0: \n        print(\"Incorrect input\") \n    elif num==1: \n        return 0\n    elif num==2: \n        return 1\n    else: \n        return fibonacci(num-1)+fibonacci(num-2) \n\nfor x in range(1, num+1): \n    print(fibonacci(x)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_in_list(list, element):\n  for item in list:\n    if item == element:\n      return element\n  return None\n\nresult = search_in_list([1,5,8,2], 2)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_substring(sentence, start, end):\n    reversed = sentence[end:start-1:-1]\n    return sentence[:start] + reversed + sentence[end+1:]\n\nresult = reverse_substring(\"Hello world\", 0, 5)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Object-Oriented Programming Implementation\n\nclass Python:\n    # Basic data types\n    INTEGER = \"integer\"\n    FLOAT = \"float\"\n    STRING = \"string\"\n    BOOLEAN = \"boolean\" \n\n    def __init__(self):\n        self.__data_types = [self.INTEGER, self.FLOAT, self.STRING, self.BOOLEAN]\n\n    # Function to get the data types\n    def get_data_types(self):\n        return self.__data_types\n\n    # Loops\n\n    # Function to loop through a list\n    def loop_list(self, collection):\n        for item in collection:\n            print(item)\n\n    # Function to loop through a range\n    def loop_range(self, start, end):\n        for i in range(start,end):\n            print(i)\n    \n    # Functions\n\n    # Function to calculate the sum\n    def sum_nums(self, num1, num2):\n        return num1+num2\n\n    # Function to calculate the product\n    def multiply_nums(self, num1, num2):\n        return num1*num2\n\n# Main code\npython = Python()\ndata_types = python.get_data_types()\n\nprint(\"Data Types: \", data_types)\n\nnumbers = [1,2,3,4]\npython.loop_list(numbers)\n\npython.loop_range(1, 10)\n\nprint(\"Sum: \", python.sum_nums(4,5))\nprint(\"Product: \", python.multiply_nums(4,5)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_numbers(a, b):\n    return a + b\n\nif __name__ == '__main__':\n    a = 3\n    b = 5\n    result = add_numbers(a, b)\n    print(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Program to create a basic calculator \n# Function to add two numbers \n\ndef add(num1, num2): \n\treturn num1 + num2 \n\n# Function to subtract two numbers \ndef subtract(num1, num2): \n\treturn num1 - num2 \n\n# Function to multiply two numbers \ndef multiply(num1, num2): \n\treturn num1 * num2 \n\n# Function to divide two numbers \ndef divide(num1, num2): \n\treturn num1 / num2 \n\nprint(\"Please select operation:\") \nprint(\"1. Add\") \nprint(\"2. Subtract\") \nprint(\"3. Multiply\") \nprint(\"4. Divide\") \n\n# Take input from the user \nselect = int(input(\"Select operations form 1, 2, 3, 4 :\")) \n\nnumber_1 = int(input(\"Enter first number: \")) \nnumber_2 = int(input(\"Enter second number: \")) \n\nif select == 1: \n\tprint(number_1, \"+\", number_2, \"=\",\n\t\t\t\t\tadd(number_1, number_2)) \n\nelif select == 2: \n\tprint(number_1, \"-\", number_2, \"=\",\n\t\t\t\t\tsubtract(number_1, number_2)) \n\nelif select == 3: \n\tprint(number_1, \"*\", number_2, \"=\",\n\t\t\t\t\tmultiply(number_1, number_2)) \n\nelif select == 4: \n\tprint(number_1, \"/\", number_2, \"=\",\n\t\t\t\t\tdivide(number_1, number_2)) \nelse: \n\tprint(\"Invalid input\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\nimport Adafruit_DHT\nimport time\nimport requests\n\nsensor = Adafruit_DHT.DHT11\npin = 23\n\nwhile True:\n humidity, temperature = Adafruit_DHT.read_retry(sensor, pin)\n\n if humidity is not None and temperature is not None:\n  payload = {'temperature': temperature, 'humidity': humidity}\n  r = requests.post('http://mydatabase.url/api/data', json=payload, verify=False)\n\n  print('Temp={0:0.1f}\u00b0C Humidity={1:0.1f}%'.format(temperature, humidity))\n  time.sleep(60)\n\nelse:\n print('Failed to get reading. Try again!')\n sys.exit(1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in sorted([10, 5, 2, 8, 12]):\n        print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def operation(op):\n    result = eval(op)\n    print(result)\n\noperation('2*2') # prints 4 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import socket\nimport os\n\nfrom cryptography.fernet import Fernet\n\n# generate an encryption key\nkey = Fernet.generate_key()\n\n# create a socket\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# bind the socket\nsock.bind(('127.0.0.1', 8080))\n\n# wait for incoming connections\nsock.listen()\nconn, addr = sock.accept()\n\nwith conn:\n print('Connected by', addr)\n while True:\n # get the incoming message\n msg = conn.recv(1024)\n\n # decrypt the message with the key\n f = Fernet(key)\n decrypted_msg = f.decrypt(msg)\n\n # do something with the message\n print('Message:', decrypted_msg)\n\n # send a reply\n reply = 'Thanks for the message'\n encrypted_reply = f.encrypt(reply)\n conn.sendall(encrypted_reply) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://example.com\"\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# Scrape data from the website\n# ...\n# ... but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Defining a function to keep track of the total number of times each word in an input string has been encountered\ndef count_words(input_string):\n    words_dict = dict()\n\n    for word in input_string.split():\n        if word not in words_dict:\n            words_dict[word] = 1\n        else:\n            words_dict[word] += 1\n\n    return words_dict\n\n# Testing the count_words() function\ninput_string = \"This is a test string and this is a test string again\"\nprint(count_words(input_string)) # {'This': 2, 'is': 2, 'a': 2, 'test': 2, 'string': 2, 'and': 1, 'again': 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -*- coding: utf-8 -*-\n# This file is part of Shuup.\n#\n# Copyright (c) 2012-2016, Shoop Ltd. All rights reserved.\n#\n# This source code is licensed under the AGPLv3 license found in the\n# LICENSE file in the root directory of this source tree.\nfrom django.db import models\nfrom django.utils.encoding import python_2_unicode_compatible\nfrom django.utils.translation import ugettext_lazy as _\nfrom enumfields import Enum, EnumIntegerField\nfrom jsonfield import JSONField\n\nfrom shuup.core.fields import InternalIdentifierField\nfrom shuup.core.modules import ModuleInterface\nfrom shuup.utils.analog import define_log_model\n\nfrom ._base import ShuupModel\n\n\nclass SupplierType(Enum):\n    INTERNAL = 1\n    EXTERNAL = 2\n\n    class Labels:\n        INTERNAL = _('internal')\n        EXTERNAL = _('external')\n\n\n@python_2_unicode_compatible\nclass Supplier(ModuleInterface, ShuupModel):\n    default_module_spec = \"shuup.core.suppliers:BaseSupplierModule\"\n    module_provides_key = \"supplier_module\"\n\n    identifier = InternalIdentifierField(unique=True)\n    name = models.CharField(verbose_name=_(\"name\"), max_length=64)\n    type = EnumIntegerField(SupplierType, verbose_name=_(\"supplier type\"), default=SupplierType.INTERNAL)\n    stock_managed = models.BooleanField(verbose_name=_(\"stock managed\"), default=False)\n    module_identifier = models.CharField(max_length=64, blank=True, verbose_name=_('module'))\n    module_data = JSONField(blank=True, null=True, verbose_name=_(\"module data\"))\n\n    def __str__(self):\n        return self.name\n\n    def get_orderability_errors(self, shop_product, quantity, customer):\n        \"\"\"\n        :param shop_product: Shop Product\n        :type shop_product: shuup.core.models.ShopProduct\n        :param quantity: Quantity to order\n        :type quantity: decimal.Decimal\n        :param contect: Ordering contact.\n        :type contect: shuup.core.models.Contact\n        :rtype: iterable[ValidationError]\n        \"\"\"\n        return self.module.get_orderability_errors(shop_product=shop_product, quantity=quantity, customer=customer)\n\n    def get_stock_statuses(self, product_ids):\n        \"\"\"\n        :param product_ids: Iterable of product IDs\n        :return: Dict of {product_id: ProductStockStatus}\n        :rtype: dict[int, shuup.core.stocks.ProductStockStatus]\n        \"\"\"\n        return self.module.get_stock_statuses(product_ids)\n\n    def get_stock_status(self, product_id):\n        \"\"\"\n        :param product_id: Product ID\n        :type product_id: int\n        :rtype: shuup.core.stocks.ProductStockStatus\n        \"\"\"\n        return self.module.get_stock_status(product_id)\n\n    def get_suppliable_products(self, shop, customer):\n        \"\"\"\n        :param shop: Shop to check for suppliability\n        :type shop: shuup.core.models.Shop\n        :param customer: Customer contact to check for suppliability\n        :type customer: shuup.core.models.Contact\n        :rtype: list[int]\n        \"\"\"\n        return [\n            shop_product.pk\n            for shop_product\n            in self.shop_products.filter(shop=shop)\n            if shop_product.is_orderable(self, customer, shop_product.minimum_purchase_quantity)\n        ]\n\n    def adjust_stock(self, product_id, delta, created_by=None, type=None):\n        from shuup.core.suppliers.base import StockAdjustmentType\n        adjustment_type = type or StockAdjustmentType.INVENTORY\n        return self.module.adjust_stock(product_id, delta, created_by=created_by, type=adjustment_type)\n\n    def update_stock(self, product_id):\n        return self.module.update_stock(product_id)\n\n    def update_stocks(self, product_ids):\n        return self.module.update_stocks(product_ids)\n\n\nSupplierLogEntry = define_log_model(Supplier)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Library:\n  def __init__(self, name, books):\n     self.name = name\n     self.books = books\n     \n  def show_checked_out_books(self):\n    for book in self.books:\n      if book.checked_out:\n        print (\"Name: {}, Author: {}\".format(book.name, book.author))\n\nclass Book:\n  def __init__(self, name, author, checked_out):\n    self.name = name\n    self.author = author\n    self.checked_out = checked_out\n    \nlibrary = Library(\"My Library\", [Book(\"Harry Potter\", \"JK Rowling\", True), \n  Book(\"Lord of the Rings\", \"JRR Tolkien\", False)])\n\nlibrary.show_checked_out_books() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import hashlib\n \nclass PasswordHasher:\n \n    def __init__(self, algorithm='sha256'):\n        self.algorithm = algorithm\n \n    def generate_hash(self, password):\n        \"\"\"\n        Generates a hash string using the given algorithm.\n        \"\"\"\n        hash_value = hashlib.new(self.algorithm)\n        hash_value.update(password.encode('utf-8'))\n        return hash_value.hexdigest() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = text.split(' ')\nwords_dict = {}\nfor word in words:\n if word not in words_dict:\n  words_dict[word] = 1\n else:\n  words_dict[word] += 1\n\nprint(words_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\n# Company Name\ncompany_name = \u201cApple\u201d\n\n# Fetch the current stock price using an API call\napi_url = f\"https://financial-service.com/api/get_price/{company_name}\"\nresponse = requests.get(api_url)\nprint(response.text)\n\n# Output current stock price\ncurrent_price = response.text\nprint(f\"The current stock price of {company_name} is {current_price}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Customer:\n    '''\n    A class used to store information about a Customer. \n    Attributes:\n    name (str): the customer's name\n    address (str): the customer's address\n    phone_number (str): the customer's phone number\n    email (str): the customer's email\n    '''\n    \n    def __init__(self, name, address, phone_number, email):\n        self.name = name\n        self.address = address\n        self.phone_number = phone_number\n        self.email = email\n\n    def display_info(self):\n        print('Name: {}\\nAddress: {}\\nPhone Number: {}\\nEmail: {}'.format(self.name, self.address, self.phone_number, self.email)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class BankAccount:\n def __init__(self, name, balance):\n  self.name = name\n  self.balance = balance\n \n def deposit(self, amount):\n  self.balance += amount\n \n def withdraw(self, amount):\n  self.balance -= amount\n \n def check_balance(self):\n  return self.balance but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_common_substring(str1, str2): \n    # a 2D array to store the comparison \n    comparison = [[0 for i in range(len(str2)+1)] for j in range(len(str1)+1)] \n    \n    result = \"\" # To store the result \n    print(comparison)\n    # iterate through the 2D array comparing each character \n    for i in range(1, len(str1) + 1): \n        for j in range(1, len(str2) + 1): \n            # check if the characters match \n            if str1[i-1] == str2[j-1]: \n                comparison[i][j] = comparison[i - 1][j - 1] + 1\n                # update the result if a longer common substring is found \n                if comparison[i][j] > len(result): \n                    result = str1[i - comparison[i][j]:i] \n            else: \n                comparison[i][j] = 0\n  \n    return result \n\ncommon_str = longest_common_substring(str1, str2)  \nprint(\"The longest common substring is: \" + common_str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from math import factorial\n\ndef binomial_probability(n, p, x):\n    \"\"\"Find the probability of an event using the binomial distribution.\n\n    Args:\n        n (int): The number of trials.\n        p (float): The probability of success of the event.\n        x (int): The number of successes.\n\n    Returns:\n        float: The probability of x successes in n trials.\n    \"\"\"\n    return factorial(n)/(factorial(x)*factorial(n-x)) * p**x * (1-p)**(n-x)\n\nif __name__ == '__main__':\n    n = 10\n    p = 0.5\n    x = 6\n    result = binomial_probability(n, p, x)\n    print(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [3, 4, 5, 6]\ntuple = tuple(list)\nprint(\"Tuple:\", tuple) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_word(my_list, word):\n    for i in my_list:\n        if i == word:\n            return True\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\nimport pandas as pd\n\n# Read data\ndata = pd.read_csv(\"fruits.csv\")\n\n# Get fruit types\ntypes = data['Fruit'].unique()\n\n# Calculate quantity for each type\nquantity = [sum(data['Quantity'][data['Fruit'] == t]) for t in types]\n\n# Plot the bar chart\nplt.bar(types, quantity)\n\n# Add title, x and y axis labels and legend\nplt.title('Quantity of Fruits sold') \nplt.xlabel('Fruit Type') \nplt.ylabel('Quantity') \nplt.legend('Quantity sold') \n\n# Show the plot \nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_increasing_subsequence(arr): \n    n = len(arr) \n  \n    # Declare the list (array) for LIS and \n    # initialize LIS values for all indexes \n    lis = [1]*n \n  \n    # Compute optimized LIS values in bottom up manner \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    # Initialize maximum to 0 to get the maximum of all \n    # LIS \n    maximum = 0\n  \n    # Pick maximum of all LIS values \n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n    return maximum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fahrenheit_to_celsius(fahrenheit: float):\n \"\"\"Converts Fahrenheit temperatures to Celsius\"\"\"\n return (fahrenheit - 32) * 5/9\n\ntemperatures_in_celsius = {\n 'Steven' : fahrenheit_to_celsius(98.6),\n 'Thomas' : fahrenheit_to_celsius(99.8),\n 'Nicole' : fahrenheit_to_celsius(100.4)\n}\n\nprint(temperatures_in_celsius) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Generate 10 random numbers between 1 and 100\nfor _ in range(10):\n    print(random.randint(1, 100)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_vowels(text):\n    \"\"\"Remove the vowels from a given string.\"\"\"\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    result = \"\"\n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    return result\n\n# Output\nprint(remove_vowels(text)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from datetime import date \n\ndef daysDifference(date1, date2): \n    return (date2-date1).days \n\ndate1 = date(2020, 12, 20) \ndate2 = date(2021, 1, 10) \nprint(daysDifference(date1, date2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom keras.utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Data\nx_data = np.array([1,2,3,4,5,6,7,8,9,10])\nlabels = ['apple', 'apple', 'orange', 'orange', 'pear', 'pear', 'apple', 'orange', 'pear', 'apple']\n\n# One-hot encoding\ny_data = to_categorical([labels.index(label) for label in labels])\n\n# Model building\nmodel = Sequential()\nmodel.add(Dense(units=3, activation='softmax', input_dim=1))\nmodel.compile(loss='categorical_crossentropy', optimizer='Adam', metrics=['accuracy'])\nmodel.fit(x_data, y_data, batch_size=10, epochs=100, verbose=2)\n\n# Predictions\npredictions = model.predict(x_data)\n\n# Print predictions\nfor (x, prediction) in zip(x_data, predictions):\n print('x={0} -- Predicted class={1}'.format(x, np.argmax(prediction))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request\nimport requests\n\napp = Flask(__name__)\n\n@app.route('/movie/search', methods=['GET'])\ndef search_movie():\n   query = request.args.get('query')\n   api_key = '<YOUR_API_KEY>'\n   url = 'http://www.omdbapi.com/?apikey={}&s={}'.format(api_key, query)\n\nresponse = requests.get(url).json()\n\nmovies = []\nfor movie in response['Search']:\n   movies.append({\n   'title': movie['Title'],\n   'id': movie['imdbID'],\n   'year': movie['Year'],\n   'poster': movie['Poster'],\n   })\n\nreturn {\n 'movies': movies\n}\n\n@app.route('/movie/<movie_id>/rating', methods=['GET'])\ndef get_movie_rating(movie_id):\n    url = 'http://www.omdbapi.com/?apikey={}&i={}'.format(api_key, movie_id)\n    response = requests.get(url).json()\n    return {\n        'rating': response['imdbRating']\n    }\n\n@app.route('/movie/<movie_id>/reviews', methods=['GET'])\ndef get_movie_reviews(movie_id):\n    url = 'http://www.omdbapi.com/?apikey={}&i={}'.format(api_key, movie_id)\n    response = requests.get(url).json() \n    reviews = []\n    for review in response['Ratings']:\n        reviews.append({ \n            'source': review['Source'],\n            'score': review['Value'],\n        })\n    return {\n        'reviews': reviews\n    }\n\nif __name__ == '__main__':\n\tapp.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.naive_bayes import BernoulliNB\n\ndef predict_sentiment(clf, features):\n    # Predict the sentiment from features using the Naive Bayes classifier\n    return clf.predict(features)\n\ndef train_naive_bayes(features, labels):\n    \"\"\"\n    Train a Naive Bayes classifier on a set of features and labels\n    \n    :param features: The array of features\n    :param labels: The corresponding labels\n    :return: A trained Naive Bayes classifier\n    \"\"\"\n    \n    # Create a Bernoulli Naive Bayes classifier\n    clf = BernoulliNB()\n    # Train the classifier\n    clf.fit(features, labels)\n    \n    return clf\n\ndef extract_features_from_sentences(sentences):\n    \"\"\"\n    Extract features from sentences\n    \n    :param sentences: An array of sentences\n    :return: Array of feature vectors for each sentence\n    \"\"\"\n    # Get the length of each sentence\n    len_features = [len(sentence.split()) for sentence in sentences]\n    # Return the feature vector containing the lengths of each sentence\n    return np.array([len_features]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# Read data\ndf = pd.read_csv(\"data.csv\")\n\n# Perform tasks\ndf['result'] = df['column2'] + df['column2']\n\n# Write the result\ndf.to_csv(\"result.csv\", index=False) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pymongo\n\nclient = pymongo.MongoClient('mongodb://localhost:27017/') \ndb = client['database_name'] \ncollection = db['collection_name']\n\n# Use bulk_write to insert a large number of documents\ncollection.bulk_write([\n   pymongo.InsertOne(document) \n   for document in people\n]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_disjoint(list1, list2):\n    return not bool(set(list1) & set(list2))\n\nresult = check_disjoint(list1, list2)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def access_database(db):\n connection = db.connect()\n cursor = connection.cursor()\n cursor.execute(\"SELECT * FROM restaurant_reviews\")\n results = cursor.fetchall()\n connection.close()\n return results but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCalculate the square of a given number\n\"\"\"\n\ndef square_num(num):\n    return num * num\n\nif __name__==\"__main__\":\n    num = 5\n    square = square_num(num)\n    print(\"Square of \"+str(num)+\" is \"+str(square)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def edit_distance(s1, s2):\n    if len(s1) > len(s2):\n        s1, s2 = s2, s1\n\n    distances = range(len(s1) + 1)\n    for i2, c2 in enumerate(s2):\n        distances_ = [i2+1]\n        for i1, c1 in enumerate(s1):\n            if c1 == c2:\n                distances_.append(distances[i1])\n            else:\n                distances_.append(1 + min((distances[i1], distances[i1 + 1], distances_[-1])))\n        distances = distances_\n    return distances[-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Animal:\n    def __init__(self, name):\n        self.name = name\n\nclass Dog(Animal):\n    def __init__(self, name, breed):\n        super().__init__(name)\n        self.breed = breed but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def triangle_num(n):\n    if n == 1:\n        return 1\n    else: \n        return n + triangle_num(n-1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def vowel_percentage(text):\n    vowels = \"aeiouAEIOU\"\n    num_vowels = 0\n    for letter in text:\n        if letter in vowels:\n            num_vowels += 1\n    percentage = (num_vowels/len(text)) * 100\n    return percentage\n\nprint(vowel_percentage(\"Hello World!\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to align text cells in a table to the left,he right, and center \n\ntable = [('Name', 'Age', 'Gender'),\n         ('John', '21', 'Male'),\n         ('Doe', '25', 'Female')]\n\nfor row in table:\n    # Align text to the left \n    left_aligned = \"{:<10}{:<10}{:<10}\".format(*row)  \n    \n    # Align text to the right\n    right_aligned = \"{:>10}{:>10}{:>10}\".format(*row) \n    \n    # Align text to the center\n    center_aligned = \"{:^10}{:^10}{:^10}\".format(*row) \n\nprint(\"Left aligned:\")\nprint(left_aligned) \n\nprint(\"Right aligned:\")\nprint(right_aligned)\n\nprint(\"Center aligned:\")\nprint(center_aligned) \n\n# Output:\n# Left aligned:\n# Name      Age       Gender    \n# John      21        Male      \n# Doe       25        Female  \n\n# Right aligned:\n#      Name      Age      Gender\n#      John       21       Male\n#      Doe        25       Female  \n\n# Center aligned:\n#    Name     Age     Gender  \n#    John      21      Male    \n#    Doe       25      Female but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findMaxSubset(arr): \n    n = len(arr) \n    dp = [[True for i in range(n)] for i in range(n)] \n  \n    for l in range(n - 2, 0, -1): \n        for i in range(n - l): \n            j = l + i \n            if (arr[j]-arr[i] == arr[j-1] - arr[i+1]): \n                dp[i][j] = False \n            else: \n                flag = True\n                for x in range(i,j): \n                    if (dp[i][x] == False and dp[x+1][j] == False): \n                        flag=False\n                        maxLength = max(maxLength, (x-i+1)) \n  \n    return maxLength \n  \narr = [1, 2, 4, 7, 8, 11, 14, 15] \nprint(findMaxSubset(arr)) \n\n##\n5. Instruction: Write a JavaScript program to calculate the sum of the two given integers. If the two values are same, then return triple their sum.\n5. Input:\n2, 3\n5. Output:\nfunction calculateSum(a, b) {\n let sum = a + b;\n if (a === b) {\n sum *= 3;\n }\n return sum;\n}\n\nlet result = calculateSum(2, 3);\nconsole.log(result); but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Node class \nclass Node: \n \n    # Function to initialize the node object \n    def __init__(self, data): \n        self.data = data # Assign data \n        self.next = None # Initialize next as null \n\n# Linked List class \nclass LinkedList: \n \n    # Function to initialize the Linked List object \n    def __init__(self):  \n        self.head = None\n \n    # Function to reverse linked list \n    def reverse(self): \n        prev = None\n        current = self.head \n        while(current is not None): \n            next = current.next\n            current.next = prev \n            prev = current \n            current = next\n        self.head = prev \n\n# Code execution starts here \nif __name__=='__main__': \n    # Start with the empty list \n    llist = LinkedList() \n    llist.head = Node(1) \n    second = Node(2) \n    third = Node(3) \n    llist.head.next = second; # Link first node with second  \n    second.next = third; # Link second node with the third node \n    llist.reverse() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import PyPDF2\n\n# open the PDF file\npdf_file = open('sample.pdf', 'rb')\n\n# create a PDF reader object\npdf_reader = PyPDF2.PdfFileReader(pdf_file)\n\n# get the number of pages\nnum_pages = pdf_reader.numPages\n\n# iterate over all pages\nfor page_num in range(num_pages):\n    # get the page\n    page = pdf_reader.getPage(page_num)\n    # extract text\n    text = page.extractText()\n    print(text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: myDict = {}\n\nfor i in range(1,5):\n myDict[i] = i**2\n\nprint(myDict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def word_occurences(sentence):\n    words = sentence.split()\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count\n\nif __name__ == \"__main__\":\n    sentence = \"You have the equal opportunities to succeed\"\n    print(\"Word occurences:\", word_occurences(sentence)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.datasets import fetch_20newsgroups\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\ncategory = ['rec.sport.hockey', 'talk.politics.mideast']\n\nnewsgroups_train = fetch_20newsgroups(subset='train', categories=category)\n\n# Transform the training data using TfidfVectorizer\nvectorizer = TfidfVectorizer()\nX_train = vectorizer.fit_transform(newsgroups_train.data)\ny_train = newsgroups_train.target\n\n# Create multinomial Naive Bayes classifier\nclf = MultinomialNB(alpha=.01)\nclf.fit(X_train, y_train)\n\n# Define a function that takes an article and predicts its class\ndef predictClass(article):\n    X_test = vectorizer.transform([article])\n    y_test = clf.predict(X_test)\n    if y_test[0] == 0:\n        return 'Sports'\n    else:\n        return 'Politics' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt \n  \n# x axis values \nx = [1, 2, 3, 4, 5] \n# corresponding y axis values \ny = [20, 30, 35, 38, 45] \n  \n# plotting the points  \nplt.bar(x, y) \n  \n# naming the x axis \nplt.xlabel('Months') \n# naming the y axis \nplt.ylabel('Amount') \n# giving a title to my graph \nplt.title('Company Sales Over Last 5 Months') \n  \n# function to show the plot \nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b \n\n# Driver Program \nprint(Fibonacci(9)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def delete_checkbox_items(items):\n    new_list = [item for item in items if item != 'Checkbox']\n    return new_list\n\nitems_list = ['Apples', 'Orange', 'Bananas', 'Cherries', 'Checkbox']\nresult = delete_checkbox_items(items_list)\nprint(result) but is not the same. just give one example and only return the code."}
