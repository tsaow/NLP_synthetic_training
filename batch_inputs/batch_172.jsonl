{"prompt": "make some code that functions the same as the following code: tweets = [\"I love playing basketball with my friends!\", \n          \"I hate wearing masks in public places.\",\n          \"I'm feeling really happy today!\",\n          \"I find it hard to concentrate on my studies recently.\"]\n\n#importing the necessary libraries\nfrom textblob import TextBlob\n\n#list to store the sentiment polarity and subjectivity\nsentiment_list = []\n\n#iterate through the tweets\nfor tweet in tweets:\n    # performing sentiment analysis\n    analysis = TextBlob(tweet) \n    #append sentiment polarity and subjectivity to the list\n    sentiment_list.append({'Polarity':analysis.sentiment.polarity,\n                           'Subjectivity':analysis.sentiment.subjectivity\n                          })\n\n#print output\nprint(f'Sentiment Analysis: {sentiment_list}')\n\nSentiment Analysis: [{'Polarity': 0.8, 'Subjectivity': 0.9}, {'Polarity': -0.8, 'Subjectivity': 0.9}, {'Polarity': 0.7, 'Subjectivity': 0.8}, {'Polarity': -0.2, 'Subjectivity': 0.5}] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport tensorflow as tf\n\n# Create neural network model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu', input_shape=(1000,)),\n    tf.keras.layers.Dense(32, activation='relu'),\n    tf.keras.layers.Dense(16, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(inputs, labels, epochs=100) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_numbers(a, b):\n    '''This function will return the sum of two numbers'''\n    return a + b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nmin_n = 5\nmax_n = 15\n\ndef random_number_generator(min_n, max_n):\n  return random.randint(min_n, max_n)\n\nfor num in range(0, 10):\n    print (random_number_generator(min_n, max_n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num1 = 14\nnum2 = 25\nnum3 = 6\n\nlargest = max(num1, num2, num3)\n\nprint(\"The largest number is\", largest) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nlist = [\"Apple\", \"Orange\", \"Banana\", \"Strawberry\"]\nrandom.shuffle(list)\n\nfor item in list:\n    print(item) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_all(orig_str, pattern, replacement):\n\treturn orig_str.replace(pattern, replacement)\n\nprint(replace_all(orig_str=\"Today is a beautiful day\", pattern=\"a\", replacement=\"the\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_valid(board, row, col, num):\n for i in range(0, 9):\n  if board[row][i] == num: \n   return False\n for i in range(0, 9):\n  if board[i][col] == num:\n   return False \n row_block = row//3\n col_block = col//3\n \n for i in range(row_block*3, row_block*3+3):\n  for j in range(col_block*3, col_block*3+3):\n   if board[i][j] == num:\n    return False\n return True\n\ndef solve(board):\n for row in range(9): \n  for col in range(9):\n   if board[row][col] == 0:\n    for num in range(1, 10):\n     if check_valid(board, row, col, num):\n      board[row][col] = num\n      if solve(board):\n       return True\n      else:\n       board[row][col] = 0\n    return False\n return True\n   \nsolve(board) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_search(arr, x):\n    l = 0\n    r = len(arr) - 1\n    while l <= r:\n        m = l + (r - l) // 2\n        if x == arr[m]:\n            return m\n        elif x > arr[m]:\n            l = m + 1\n        else:\n            r = m - 1\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n): \n    if n <= 1: \n        return n \n    else: \n        return(fibonacci(n-1) + fibonacci(n-2)) \n\nfor i in range(10): \n    print(fibonacci(i)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Load dataset\ndataset = pd.read_csv('iris.csv')\n\n# Define X and y values\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n\n# Split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# Create a KNeighborsClassifier model\nknn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(X_train, y_train)\n\n# Predict a classification for test data\ny_pred = knn.predict(X_test)\n\n# Calculate accuracy\naccuracy = knn.score(X_test, y_test)\nprint(\"Accuracy:\", accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_string(strings):\n  max_length = 0\n  longest_string = \"\"\n  \n  for s in strings:\n    if len(s) > max_length:\n      max_length = len(s)\n      longest_string = s\n  \n  return longest_string\n\nresult = longest_string([\"my\", \"cat\", \"is\", \"lazy\"])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n# create sentiment analyzer\nanalyzer = SentimentIntensityAnalyzer()\n\ndef sentiment_analysis(text):\n    # get sentiment score for text\n    score = analyzer.polarity_scores(text)\n    # analyze the score and determine sentiment\n    if score['compound'] >= 0.05:\n        sentiment = 'positive'\n    elif score['compound'] <= -0.05:\n        sentiment = 'negative'\n    else:\n        sentiment = 'neutral'\n    # return sentiment\n    return sentiment but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pascal(n): \n    # Iterate through lines\n    for line in range(0, n): \n        # Initialize composition of line\n        composition = 1 \n        for i in range(0, line+1): \n            # Print composition \n            print(composition, end=\" \") \n            composition = int(composition * (line - i) / (i + 1)) \n        # Move to the next line\n        print(\"\") \n  \n# Driver code \nn = 5\npascal(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(arr): \n    result = [] \n    for i in arr: \n        if i not in result: \n            result.append(i) \n    return result\n\narr = [12, 34, 11, 12, 23, 11]\nresult = remove_duplicates(arr)\nprint(result) // Prints [12, 34, 11, 23] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def element_wise_sum(func, arr):\n    sum = 0 \n    for elem in arr:\n        sum += func(elem)\n    return sum\n\nsum = element_wise_sum(func, arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent_letter(str): \n  \n    # break string into characters\n    letters = list(str)\n  \n    # store max freq count\n    max_freq = 0\n  \n    # store character with max_freq\n    max_char = ''\n  \n    # iterate over each letter in the string\n    for letter in letters: \n      \n        # calculate frequency of this particular letter\n        freq = letters.count(letter) \n      \n        # compare and update variables\n        if(freq > max_freq): \n            max_freq = freq\n            max_char = letter\n\n    print(\"Most frequent character: \" + max_char + \" with frequency of: \" + str(max_freq)) \n  \n# test for input string\nstr = \"foo bar baz foo\"\n\nmost_frequent_letter(str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_strings(s):\n    return sorted(s)\n\nprint(sort_strings(['apple', 'banana', 'pear', 'mango'])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_hollow_diamond(n):\n    # top side\n    for i in range(n):\n        for j in range(n):\n            if j == i or j == n-i-1:\n                print('* ', end = '')\n            else:\n                print('  ', end = '')\n        print() \n  \n    # middle straight line\n    for j in range(n):\n        print('* ', end = '')\n    print()\n  \n    # bottom side\n    for i in range(n , 0 , -1):\n        for j in range(n):\n            if j == i - 1 or j == n-i:\n                print('* ', end = '')\n            else:\n                print('  ', end = '')\n        print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Car():\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The purpose of the method in line 4 is to generate a random number within the given range of min and max. It uses the Python's random.range() method which returns a random integer from the range of min to max, inclusive. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \nimport matplotlib.pyplot as plt \n\ndef f(x): \n\treturn 2*x*x - 4*x + 2\n\nx = np.arange(0, 5, 0.1) \ny = f(x) \n\n# Plotting the result\nplt.plot(x, y) \nplt.plot([0,5],[f(0),f(5)], 'ro') # indicates the optimal point\nplt.text(0,f(0),str(0), fontsize=12) # labels the x-axis points\nplt.text(5,f(5),str(5), fontsize=12) \nplt.title('Graph of f(x) = 2x^2 - 4x + 2') \nplt.ylabel('f(x)') \nplt.xlabel('x') \nplt.show() \n\n# Calculate and print the optimal point\nopt = 0\nfor x in range(0, 5):\n\tif f(x) < f(opt):\n\t\topt = x\n\nprint('The optimal point is x =', opt,'with a value of f(x) =', f(opt)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_list(lst, elem):\n  for i in range(len(lst)): \n    if lst[i] == elem: \n      return i \n  return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class AreaCalculator:\n    def __init__(self):\n        pass\n    \n    def square_area(self, side_length):\n        return side_length * side_length\n\n    def rectangle_area(self, length, width):\n        return length * width but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculator():\n    while True:\n        operation = input('''\n        Please type in the math operation you would like to complete:\n        + for addition\n        - for subtraction\n        * for multiplication\n        / for division\n        ''')\n\n        number_1 = int(input('Please enter the first number: '))\n        number_2 = int(input('Please enter the second number: '))\n\n        if operation == '+':\n            print('{} + {} = '.format(number_1, number_2))\n            print(number_1 + number_2)\n\n        elif operation == '-':\n            print('{} - {} = '.format(number_1, number_2))\n            print(number_1 - number_2)\n\n        elif operation == '*':\n            print('{} * {} = '.format(number_1, number_2))\n            print(number_1 * number_2)\n\n        elif operation == '/':\n            print('{} / {} = '.format(number_1, number_2))\n            print(number_1 / number_2)\n\n        else:\n            print('You have not typed a valid operator, please run the program again.')\n            break\n\ncalculator() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_squares_and_cubes_table():\n  # Print top of the table\n  print(\"n\\tSquare\\tCube\")\n\n  # Print the squares and cubes of natural numbers from 1 to 10\n  for n in range(1, 11):\n    print(n,\"\\t\", n*n,\"\\t\",n*n*n)\n\n# Driver code\nprint_squares_and_cubes_table() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcf(m, n):\n    while m != 0:\n        m, n = n % m, m \n    return n\n\nprint(gcf(15, 25)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combine_lists(list1, list2):\n  combined_list = list1 + list2\n  return combined_list\ncombined_list = combine_lists(list1, list2)\nprint(combined_list) # [1, 2, 3, 4, 5, 6] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 11):\n    if i % 2 != 0:\n        print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence = \" \".join([\"hello\", \"world\", \"!\"])\nprint(sentence) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def removeItem(lst, item):\n    if item in lst:\n        lst.remove(item)\n    return lst\n\nprint(removeItem([2, 3, 4], 4)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import urllib.request\n \nurl = 'http://www.example.org/'\n\nresponse = urllib.request.urlopen(url)\n\nprint(response.read()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nDesign a Python function to define a set of rules to send emails\n\nThis function will take a conditional statement as an argument, and will return a function that will return a Boolean value depending on whether the condition is satisfied. The function will return true if the given condition is satisfied, and false otherwise.\n\n\"\"\"\n\ndef email_rule(condition):\n    def rule(data):\n        return eval(condition)\n    return rule\n\n# example\nsatisfied = email_rule(\"data['name'] == 'John'\")\nprint(satisfied({'name': 'John'})) # True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to find the sum of \n# all prime numbers in a given interval \n  \n# Fucntion to calculate the sum of all prime numbers in a given range \ndef prime_sum_in_range(start, end): \n  \n    # Initialize sum of primes \n    prime_sum = 0\n  \n    # loop through each number from start to end \n    for num in range(start, end + 1): \n  \n        # check if the number is prime \n        if is_prime(num): \n            # Add the prime numbers to the sum \n            prime_sum += num \n  \n    return prime_sum \n  \n# Function to check if a number is prime or not \ndef is_prime(n): \n  \n    # Check if the number is less than or equal to 1 \n    if n <= 1: \n        return False\n  \n    # Check if the number is a perfect square \n    sqr = int(math.sqrt(n)) + 1\n  \n    # Iterate through each value from 2 to the square root of the number \n    for divisor in range(2, sqr): \n        if n % divisor == 0: \n            return False\n  \n    # Return True for a prime number \n    return True\n\nstart =  100\nend = 200\n  \nprint(\"Sum of prime numbers in given range is\", prime_sum_in_range(start, end)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def largest_prime_factor(arr):\n import math\n product = 1\n \n for num in arr:\n  product *= num \n \n largest_factor = -1 \n \n for i in range(2, math.floor(math.sqrt(product))+1): \n  while product % i == 0: \n   product = product / i \n   largest_factor = i \n \n if largest_factor == -1:\n  return product\n else:\n  return largest_factor but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\nimport urllib\nimport urllib2\nimport time\nimport getopt\nimport sys\nimport os\nimport timeit\nimport platform\nimport subprocess\nimport re\n\nREFERENCE_URL = 'http://stash.osgconnect.net/+sthapa/100MB_ref'\nWSGI_URL = 'http://web-dev.ci-connect.net/~sthapa/record_network_test.wsgi'\n\ndef download_file():\n    \"\"\"\n    Download file and then remove it\n    \"\"\"  \n    webref = urllib2.urlopen(REFERENCE_URL)\n    foo = webref.read()\n\ndef get_host_info():\n    \"\"\"\n    GET host information\n    \"\"\"\n    host_info = {}\n    if 'OSG_SITE_NAME' in os.environ:\n        host_info['site'] = os.environ['OSG_SITE_NAME']\n    elif 'GLIDEIN_RESOURCE_NAME' in os.env:\n        host_info['site'] = os.envron['GLIDEIN_RESOURCE_NAME']\n    host_info['hostname']  =  platform.node()    \n    return host_info\n\ndef send_record(test_record = None):\n    \"\"\"\n    Send record to wsgi \n    \"\"\"\n    if test_record is None:\n        return\n    try:\n        temp = test_record.copy()\n        if 'latency' in temp:\n            del temp['latency']\n        bandwidth_req = WSGI_URL + '?' + urllib.urlencode(temp)\n        req = urllib2.urlopen(bandwidth_req)\n        temp = test_record.copy()\n        if 'bandwidth' in temp:\n            del temp['bandwidth']\n        latency_req = WSGI_URL + '?' + urllib.urlencode(temp)\n        req = urllib2.urlopen(latency_req)\n    except Exception, e:\n        pass\n\ndef get_latency():\n    \"\"\"\n    Test ping time latency to stash\n    \"\"\"\n    try:\n        ping_output = subprocess.check_output(['/bin/ping', '-c', '10', 'stash.osgconnect.net'])\n    except AttributeError:\n        process = subprocess.Popen(['/bin/ping', '-c', '10', 'stash.osgconnect.net'], stdout=subprocess.PIPE)\n        ping_output = process.communicate()[0]\n    ping_regex = re.compile(r'rtt.*=\\s+[\\d.]+/([\\d.]+)')\n    match = ping_regex.search(ping_output)\n    if match:\n        return float(match.group(1))\n    return 0.0\n\ndef main():\n    test_record = get_host_info()\n    test_record['date'] = time.time()\n    download_times = timeit.Timer('download_file()', \"from __main__ import download_file\").repeat(repeat = 5, number = 1)\n    avg_time = 0.0\n    records = 0\n    for x in download_times:\n        if x < 0.005:\n            continue\n        avg_time += x\n        records += 1\n    test_record['bandwidth']  = float(100 * 2**20) / (avg_time / float(records))\n    test_record['latency'] = get_latency()\n    send_record(test_record)\n\nif __name__ == \"__main__\":\n    main()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\n\ndef reverse_string(string):\n return string[::-1]\n\ndef main():\n if len(sys.argv) != 2:\n print(\"Usage: python reverse_string.py <string>\")\n return\n\n print(reverse_string(sys.argv[1]))\n\nif __name__ == \"__main__\":\n main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def second_smallest(array):\n    smallest = None\n    second_smallest = None\n\n    for e in array:\n        if smallest is None or e < smallest:\n            second_smallest = smallest\n            smallest = e\n        elif second_smallest is None or e < second_smallest:\n            second_smallest = e\n\n    return second_smallest\n\narray = [5, 3, 4, 6, 1, 8]\nresult = second_smallest(array)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_to_integer(my_list):\n    my_integer = int(\"\".join(map(str, my_list))) \n    return my_integer but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Input, Dense, Dropout\nfrom keras.utils import to_categorical\n\nnum_classes = 3 # number of languages to classify\n\n# Define the model architecture\nmodel = Sequential()\nmodel.add(Input(shape=(1000,)))\nmodel.add(Dense(2000, activation='relu'))\nmodel.add(Dense(1000, activation='relu'))\nmodel.add(Dense(500, activation='relu'))\nmodel.add(Dense(num_classes, activation='softmax'))\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(train_data, train_labels)\n\n# Evaluate the model\nval_loss, val_acc = model.evaluate(val_data, val_labels)\n\n# Make predictions on test data\npredictions = model.predict([test_data]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers = [i for i in range(0, N+1)]\nunique_numbers = list(set(numbers))\n\nprint(unique_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python code for Newton-Raphson Method for \n# solving equations \n\n# An example function whose solution is determined using \n# Newton-Raphson method. The function is x^3 - x^2 + 2 \ndef func(x): \n\treturn x * x * x - x * x + 2\n\n# Derivative of the above function which is 3*x^x - 2*x \ndef derivFunc(x): \n\treturn 3 * x * x - 2 * x \n\n# Function to find the root \ndef newtonRaphson(x): \n\th = func(x) / derivFunc(x) \n\twhile abs(h) >= 0.0001: \n\t\th = func(x) / derivFunc(x) \n\t\t\n\t\t# x(i+1) = x(i) - f(x) / f'(x) \n\t\tx = x - h \n\t\n\tprint(\"The value of the root is : \", \n\t\t\t\t\t\t\"%.4f\"% x) \n\n# Driver program to test above \nx = 3 # Initial values assumed \nnewtonRaphson(x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nConstruct a program in Python to optimize a given complex function by using particle swarm optimization\n\"\"\"\nimport numpy as np\nfrom pyswarm import pso\n\n#Define the objective function\ndef objective_function(x):\n    return np.sum(x**2)\n\n#Set the lower and upper bounds of each dimension\nlb = [-5, -5]\nub = [5, 5]\n\n# Call pso to optimize the function\nopt = pso(objective_function, lb, ub)\n\n# Print the optimal solution\nprint(\"The optimal solution is {}\".format(opt[0])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def min_max_stock_price(arr):\n low = float('inf')\n high = float('-inf')\n \n for price in arr:\n low = min(low, price)\n high = max(high, price)\n \n return [low, high]\n \nprint(min_max_stock_price([9, 15, 7, 8, 13, 5])) # Output: [5, 15] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string1 = 'I love'\nstring2 = 'Programming'\n\noutput = string1 + string2\n\nprint(output)\n\n# Output\nI love Programming but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, jsonify\nimport json \n\napp = Flask(__name__)\n\n# Load the data set \nwith open('data.json', 'r') as f:\n data = json.load(f)\n\n@app.route('/data', methods=['GET', 'POST'])\ndef data_handler():\n if request.method == 'GET':\n  return jsonify(data)\n elif request.method == 'POST':\n  content = request.get_json(silent=True)\n  data.append(content)\n  return jsonify(data)\n\nif __name__ == '__main__':\n app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_min(arr):\n    min_num = arr[0]\n    for num in arr:\n        if num < min_num:\n            min_num = num\n    return min_num\n\nmin_num = find_min(arr)\nprint(min_num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_by_length(strings):\n  return sorted(strings, key=len) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_list(list): \n  filtered_list = [] \n\n  for i in list: \n    if i not in filtered_list: \n      filtered_list.append(i) \n  \n  return filtered_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_even_sum(L): \n    if len(L) == 0: \n        return 0\n  \n    if L[0] % 2 == 0: \n        return L[0] + print_even_sum(L[1:]) \n    else: \n        return print_even_sum(L[1:]) \n  \nL = [1, 2, 3, 4, 5, 6, 7, 8] \nprint(\"Sum of even numbers in the list:\", print_even_sum(L)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countMaxOnes(inpString):\n  maxLength = 0\n  count = 0\n\n # Iterate through all elements of input string\n for i in range(len(inpString)):\n     # If element is '1', increment the count\n     if (inpString[i] == '1'):\n         count += 1\n\n     # If element is '0', check if count is greater\n     # than the maximum length found so far\n     else:\n         if (count > maxLength):\n             maxLength = count\n         count = 0\n  \n  # Check if last sequence of 1's if more\n  # than the maximum length found so far\n  if (count > maxLength):\n      maxLength = count\n  return maxLength\n\ninpString = \"101101111\"\nprint(\"Length of the longest contiguous 1's is\", countMaxOnes(inpString))\n\n# Output: Length of the longest contiguous 1's is 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import psycopg2\nfrom flask import Flask\nfrom flask import jsonify\n\nconn = psycopg2.connect(dbname='testdb', user='username', password='password')\n\napp = Flask(__name__)\n\n@app.route('/data')\ndef get_data():\n    \n    cur = conn.cursor()\n    \n    cur.execute(\"SELECT * FROM table_name\")\n    \n    rows = cur.fetchall()\n    \n    cur.close()\n    conn.close()\n    \n    return jsonify(rows)\n    \nif __name__ == \"__main__\":\n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n#Define and reshape the data\nstock_price = np.array([17.4, 17.3, 17.5, 17.2, 17.3]).reshape(-1, 1)\n\n#Train the model\nmodel = LinearRegression()\nmodel.fit(stock_price[:4], stock_price[1:])\n\n#Predict the next day's price\npredicted_price = model.predict([stock_price[4]])\nprint(f'Predicted price is: {predicted_price[0][0]}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to calculate the number of binary trees\n# for a given number of nodes 'n'\ndef num_bst(n):\n \n # base case\n if n == 0 or n == 1:\n  return 1\n \n # Initialize the number of BST \n num = 0\n \n # Iterate through the N values\n for i in range(1, n+1):\n  # Calculate the number of BST of left sub-tree\n  num_left_subtrees = num_bst(i-1)\n \n  # Calculate the number of BST of right sub-tree\n  num_right_subtrees = num_bst(n-i)\n \n  # Add the number of BST of left and right sub-tree\n  num += num_left_subtrees * num_right_subtrees\n \n return num\n \n# Driver code\nN = 5\nprint(num_bst(N)) # 42 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # This is a text-based adventure game written in Python \n# You will have to explore the world, find items, and complete quests\ndef main():\n    print(\"Welcome to the world of adventure! \\n\")\n\n    # Initialize the world \n    rooms, items, quests = initialize_world()\n    \n    while True:\n        # Print the current room description \n        print(rooms[current_room]['description'])\n\n        # Print the current items and quests that are available\n        print_items(current_room)\n        print_quests(current_room)\n\n        # Get user input \n        command = input(\"What would you like to do? \\n\")\n        \n        # Call the appropriate action based on the user input. \n        process_command(command, rooms, items, quests) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_list(lst, sub):\n filtered = [s for s in lst if sub in s]\n return filtered\n\nlst = [\"cat\", \"dog\", \"elephant\", \"rabbit\", \"duck\"]\nsub = \"ra\"\n\nresult = filter_list(lst, sub)\nprint(result)\n\n# Output: ['rabbit'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport datetime\n\n# Get the weather for the current day\ndate = datetime.datetime.now().strftime(\"%Y-%m-%d\")\nr = requests.get(\"http://api.openweathermap.org/data/2.5/weather?q=New York,US&appid=xxxxxxxxxxxxxxxxxxxxx&date=\" + date)\ndata = r.json()\n\n# Check the temperature\nif data[\"main\"][\"temp\"] <= 282.15:\n # Check if it is raining\n if data[\"weather\"][0][\"main\"] == \"Rain\":\n print(\"It's raining outside! Don't forget to take an umbrella with you!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import http.server\n \nclass HelloHandler(http.server.BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type','text/html')\n        self.end_headers()\n        self.wfile.write(b\"Hello, World!\")\n \nhttpd = http.server.HTTPServer(('localhost', 8000), HelloHandler)\nhttpd.serve_forever() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def to_binary(n):\n    return bin(n).replace(\"0b\", \"\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Initialize state\nword = ''\nguesses = []\n\n# Hangman board:\nhangman_board = [\n '''\n    +---+\n    |   |\n        |\n        |\n        |\n        |\n =========\n ''',\n '''\n    +---+\n    |   |\n    O   |\n        |\n        |\n        |\n =========\n ''',\n '''\n    +---+\n    |   |\n    O   |\n    |   |\n        |\n        |\n =========\n ''',\n '''\n    +---+\n    |   |\n    O   |\n   /|   |\n        |\n        |\n =========\n ''',\n '''\n    +---+\n    |   |\n    O   |\n   /|\\  |\n        |\n        |\n =========\n ''',\n '''\n    +---+\n    |   |\n    O   |\n   /|\\  |\n   /    |\n        |\n =========\n ''',\n '''\n    +---+\n    |   |\n    O   |\n   /|\\  |\n   / \\  |\n        |\n =========\n '''\n]\n\n# Function to collect word from player\ndef collect_word():\n global word\n word = input(\"Enter a word for the other player to guess: \")\n\n# Function to collect guesses\ndef collect_guesses():\n global guesses\n while True:\n guess = input(\"Guess a letter: \")\n if len(guess) != 1 or not guess.isalpha():\n print('A single letter is required!')\n continue\n guesses.append(guess)\n break\n\n # Print out the hangman board\ndef display_hangman():\n for board in hangman_board:\n print(board)\n\n # Function to print out the status of the game\ndef display_status():\n uncompleted_word = ''\n wrong_count = 0\n for letter in word:\n if letter in guesses:\n uncompleted_word += letter\n else:\n uncompleted_word += '_'\n if letter not in guesses:\n wrong_count += 1\n print(uncompleted_word)\n print('Wrong Guesses:', wrong_count)\n\n# Main game logic\ndef main():\n collect_word()\n while True:\n display_hangman()\n display_status()\n collect_guesses() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_to_roman(num):\n    val = [\n    1000, 900, 500, 400,\n    100, 90, 50, 40,\n    10, 9, 5, 4,\n    1\n    ]\n    syb = [\n    \"M\", \"CM\", \"D\", \"CD\",\n    \"C\", \"XC\", \"L\", \"XL\",\n    \"X\", \"IX\", \"V\", \"IV\",\n    \"I\"\n    ]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a positive integer: \"))\n    roman_num = convert_to_roman(num)\n    print('The Roman numeral for the given number is: ', roman_num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print('My name is Mary') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_frequent(list):\n  dictionary = {}\n  for element in list:\n    if element not in dictionary:\n      dictionary[element] = 1\n    else:\n      dictionary[element] += 1\n\n  frequency = max(dictionary.values())\n\n  most_frequent = [key for key in dictionary if dictionary[key] == frequency]\n\n  return { most_frequent[0] : frequency }\n\nprint(find_frequent([1, 1, 2, 3, 3, 3, 4, 4, 4, 4])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply_list(l): \n\tfrom functools import reduce\n\treturn reduce((lambda x, y: x * y), l) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # create a new Django project\ndjango-admin startproject sample_project\n\n# creating a new app\npython manage.py startapp items\n\n# add app to project\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'items',\n]\n\n# create models\nclass Item(models.Model):\n    name = models.CharField(max_length=100)\n    amount = models.IntegerField()\n\n# create serializer\nclass ItemSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Item\n        fields = ('name', 'amount')\n\n# create views\nclass ItemList(APIView):\n    def get(self, request):\n        items = Item.objects.all()\n        serializer = ItemSerializer(items, many=True)\n        return Response(serializer.data)\n\n    def post(self, request):\n        serializer = ItemSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n# urls route\nurlpatterns = [\n    path('items/', ItemList.as_view()),\n]+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Sentence:\n  def __init__(self, text):\n    self.text = text\n    self.words = self.text.split()\n    \n  def get_num_words(self):\n    return len(self.words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def descendingSort(nums):\n    # sort list in reverse order\n    nums.sort(reverse=True)\n    return nums\n\nprint(descendingSort([2, 4, 1, 6, 9, 8])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def triangle_area(base_length, height):\n    area = 0.5 * base_length * height\n    return area but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def validate(username, password):\n    if len(password) < 8:\n        print('Password must be at least 8 characters')\n        return False\n    elif (not any(x.isupper() for x in password)\n          or not any(x.islower() for x in password)):\n        print('Password must contains both uppercase and lowercase')\n        return False\n    elif not any(x.isdigit() for x in password):\n        print('Password must contain at least 1 number.')\n        return False\n    return True\nvalidate(username, password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def myFunc(arr): \n    arr.sort()\n    return arr\n  \narr = [8, 16, 7, 15, 1]\nx = myFunc(arr)\nprint(x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence = \"I am learning Python\"\n\ndef count_words(sentence):\n    words = sentence.split()\n    return len(words)\n\nword_count = count_words(sentence)\nprint(word_count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import lxml.html as lh\n\ndef html_to_text(html):\n    tree = lh.fromstring(html)\n    return tree.text_content()\n\nhtml = \"<p>Hello world!</p><div><p>This is a test.</p></div>\"\n\nprint(html_to_text(html)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: dict = {\n    \"car\" : \"Ford\", \n    \"bike\" : \"Honda\"\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class User:\n    def __init__(self, username):\n        self.username = username\n\nclass Post:\n    def __init__(self, user, text):\n        self.user = user\n        self.text = text\n\nclass SocialMediaPlatform:\n    def __init__(self):\n        self.users = []\n        self.posts = []\n\n    def create_user(self, username):\n        new_user = User(username)\n        self.users.append(new_user)\n\n    def create_post(self, username, text):\n        user = self.find_user_by_name(username)\n        if not user:\n            return None\n        post = Post(user, text)\n        self.posts.append(post)\n        return post\n\n    def find_user_by_name(self, username):\n        for user in self.users:\n            if user.username == username:\n                return user\n        return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: word_list = [\"code\", \"data\", \"text\", \"test\"]\n\ndef classify_words(word_list):\n    valid_words = []\n    invalid_words = []\n    for word in word_list:\n        if len(word) >= 4:\n            valid_words.append(word)\n        else:\n            invalid_words.append(word)\n    return valid_words, invalid_words\n\nvalid_words, invalid_words = classify_words(word_list)\n\nprint(\"Valid Words:\", valid_words)\nprint(\"Invalid Words:\", invalid_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Job:\n    def __init__(self, title, company, pay):\n        self.title = title\n        self.company = company\n        self.pay = pay\n\n    def __str__(self):\n        return f'Job: {self.title}, Company: {self.company}, Pay: {self.pay}' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The class Stopwatch is used to measure elapsed time. The __init__ method initializes two variables, self._start_time and self._end_time which are used to store the start and end times of the elapsed time measurement. The methods start() and stop() are then used to mark the beginning and end of the measurement respectively. The get_elapsed_time() method then calculates the elapsed time by subtracting the start time from the end time. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os, inspect, json, re                                                                              #needed for os files\nfrom django.conf import settings\nfrom glob import glob                                                                           #Needed for directories\nimport subprocess                                                                               #Running lsusb\nimport getpass                                                                                  #used for getuser()\nimport time                                                                                     #temp fix; used to sleep\nfrom stat import *                                                                              #imports stats like ST_SIZE\nimport threading                                                                                #Multithreading         \nfrom shutil import copy2                                                                        #Copies files\n\nprocess = None\n\nstaticFileLocRoot = settings.CONTENT_ROOT\ndata_folder = settings.USB_DIR\nextns = settings.ACCEPTED_EXTNS\n\ndef get_usb_name():\n    lsblk_out = subprocess.check_output(\"lsblk\", shell=True)\n    lsblk_list = lsblk_out.split('\\n')\n    media_dir = None\n    for line in lsblk_list:\n        if '/media/' in line:\n            media_loc = line.index('/media/')\n            media_dir = line[media_loc:].strip()\n    return media_dir\n\ndef verify(device_mnt):\n    blkid_out = subprocess.check_output(\"blkid\", shell=True)\n    blkid_list = blkid_out.split('\\n')\n    for line in blkid_list:\n        if (\"/dev/\" + device_mnt) in line:\n            return check_if_line_usb(line)\n\ndef check_if_line_usb(line):\n    UUID_beg = line.index('UUID') + 5\n    UUID_end = line.find('\\\"', UUID_beg+1)\n    print str(UUID_end - UUID_beg)\n    if UUID_end - UUID_beg == 10:\n        return True\n    return False\n\ndef transfer_file(file):\n        print \"file \" + file + \"staticFileLocRoot \" + staticFileLocRoot\n        index=file.rfind('/')\n        file_name=file[index+1:]\n        print \"file_name \" + file_name + \"staticFileLocRoot \" + staticFileLocRoot\n        sendString = \"cp \" + file + \" \" + staticFileLocRoot + file_name\n        proc = subprocess.Popen (sendString, shell=True)                                    \n        proc.communicate()[0]\n        return proc.returncode  \n\ndef attemptMount():     \n    lsblk_out = subprocess.check_output(\"lsblk\", shell=True)\n    lsblk_list = lsblk_out.split('\\n')\n    media_dir = None\n    devmnt_regex = r'([s][d][a-zA-Z][0-9]+)'\n    for line in lsblk_list:\n        if '/media/' in line:\n            media_loc = line.index('/media/')\n            media_dir = line[media_loc:].strip()\n            try:\n                media_mntpnt = re.findall(devmnt_regex, line)[0]\n            except:\n                return None\n            is_needed = verify(media_mntpnt)\n            if is_needed:\n                break\n    if media_dir is None:\n        return None\n    try:\n        os.chdir(media_dir + '/' + data_folder)\n    except:\n        return None\n    temps = [name for name in os.listdir(\".\")]\n    print 'Temporary files are ' + str(temps)\n    files = []\n    for root, subfolders, usb_files in os.walk(\".\"):\n        for name in usb_files:\n            if (not os.path.isdir(name)):\n                if(name.endswith(tuple(extns))):\n                    #if (not os.path.isdir(name)) and (name[-5:] == '.data' or name == 'content.json'):\n                    files.append(os.path.join(root, name))\n    return files\n\ndef main():\n    #enableAutoMount()\n    df = subprocess.check_output(\"lsusb\", stderr=subprocess.STDOUT)                             #subprocess prints to stderr for some reason, making it think stdout is stderr\n    oldDeviceList = df.split(\"\\n\")                                                              #gets list of previously connected usb devices\n    while True:\n        df = subprocess.check_output(\"lsusb\", stderr=subprocess.STDOUT)                         #do it again\n        newDeviceList = df.split('\\n')                                                          #store in a NEW list\n\n        if len(newDeviceList) > len(oldDeviceList):                                             #new usb device inserted!\n            for line in newDeviceList:\n                if line not in oldDeviceList:                                                   #this points to the newer device we have attached\n                    IDAnchor = line.index(\"ID\")                                                     \n                    line = line[IDAnchor:]                                                      #slice off unwanted line info [such as bus information]\n                    print (\"You have attached \" + line)                                         #debug purposes \n                    time.sleep(3)                                                               #prevents python from attempting to access the files before the OS itself, might need to be increased \n                    attemptMount()                                                              #attempt mounting the device    \n\n        if len(newDeviceList) < len(oldDeviceList):                                             #some USB device has been removed!\n            for line in oldDeviceList:\n                if line not in newDeviceList:\n                    IDAnchor = line.index(\"ID\")\n                    line = line[IDAnchor:]\n                    print (\"You have removed \" + line)\n                    attemptRemoval()\n        oldDeviceList = list(newDeviceList)                                                     #allows for the loop to function properly\n\nif __name__ == '__main__':\n    main()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseString(string):\n  words = string.split(' ')\n  reversedString = []\n  for i in range(len(words)-1, -1, -1):\n    reversedString.append(words[i])\n  return ' '.join(reversedString)\n  \nprint(reverseString(\"Hello World\")) # Output: World Hello but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nimport sklearn\nnltk.download('vader_lexicon')\n\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ntext = \"The product was amazing and I highly recommend it!\"\n\nanalyzer = SentimentIntensityAnalyzer()\nsentiment = analyzer.polarity_scores(text)\n\nif sentiment['compound'] > 0.05:\n sentiment_text = \"positive\"\nelif sentiment['compound'] < -0.05:\n sentiment_text = \"negative\"\nelse:\n sentiment_text = \"neutral\"\n\nprint(sentiment_text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_slice(mylist, start, end):\n    return mylist[start:end]\n\nresult = get_slice([1,2,3,4,5,6], 2, 5)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from __future__ import unicode_literals\n\nfrom django.apps import apps\nfrom django.db import models\nfrom django.db.utils import OperationalError, ProgrammingError\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.utils.encoding import force_text\nfrom django.utils.encoding import python_2_unicode_compatible\n\n\nclass ContentTypeManager(models.Manager):\n    use_in_migrations = True\n\n    # Cache to avoid re-looking up ContentType objects all over the place.\n    # This cache is shared by all the get_for_* methods.\n    _cache = {}\n\n    def get_by_natural_key(self, app_label, model):\n        try:\n            ct = self.__class__._cache[self.db][(app_label, model)]\n        except KeyError:\n            ct = self.get(app_label=app_label, model=model)\n            self._add_to_cache(self.db, ct)\n        return ct\n\n    def _get_opts(self, model, for_concrete_model):\n        if for_concrete_model:\n            model = model._meta.concrete_model\n        elif model._deferred:\n            model = model._meta.proxy_for_model\n        return model._meta\n\n    def _get_from_cache(self, opts):\n        key = (opts.app_label, opts.model_name)\n        return self.__class__._cache[self.db][key]\n\n    def get_for_model(self, model, for_concrete_model=True):\n        \"\"\"\n        Returns the ContentType object for a given model, creating the\n        ContentType if necessary. Lookups are cached so that subsequent lookups\n        for the same model don't hit the database.\n        \"\"\"\n        opts = self._get_opts(model, for_concrete_model)\n        try:\n            return self._get_from_cache(opts)\n        except KeyError:\n            pass\n\n        # The ContentType entry was not found in the cache, therefore we\n        # proceed to load or create it.\n        try:\n            # We start with get() and not get_or_create() in order to use\n            # the db_for_read (see #20401).\n            ct = self.get(app_label=opts.app_label, model=opts.model_name)\n        except (OperationalError, ProgrammingError):\n            # It's possible to migrate a single app before contenttypes,\n            # as it's not a required initial dependency (it's contrib!)\n            # Have a nice error for this.\n            raise RuntimeError(\n                \"Error creating new content types. Please make sure contenttypes \"\n                \"is migrated before trying to migrate apps individually.\"\n            )\n        except self.model.DoesNotExist:\n            # Not found in the database; we proceed to create it.  This time we\n            # use get_or_create to take care of any race conditions.\n            ct, created = self.get_or_create(\n                app_label=opts.app_label,\n                model=opts.model_name,\n                defaults={'name': opts.verbose_name_raw},\n            )\n        self._add_to_cache(self.db, ct)\n        return ct\n\n    def get_for_models(self, *models, **kwargs):\n        \"\"\"\n        Given *models, returns a dictionary mapping {model: content_type}.\n        \"\"\"\n        for_concrete_models = kwargs.pop('for_concrete_models', True)\n        # Final results\n        results = {}\n        # models that aren't already in the cache\n        needed_app_labels = set()\n        needed_models = set()\n        needed_opts = set()\n        for model in models:\n            opts = self._get_opts(model, for_concrete_models)\n            try:\n                ct = self._get_from_cache(opts)\n            except KeyError:\n                needed_app_labels.add(opts.app_label)\n                needed_models.add(opts.model_name)\n                needed_opts.add(opts)\n            else:\n                results[model] = ct\n        if needed_opts:\n            cts = self.filter(\n                app_label__in=needed_app_labels,\n                model__in=needed_models\n            )\n            for ct in cts:\n                model = ct.model_class()\n                if model._meta in needed_opts:\n                    results[model] = ct\n                    needed_opts.remove(model._meta)\n                self._add_to_cache(self.db, ct)\n        for opts in needed_opts:\n            # These weren't in the cache, or the DB, create them.\n            ct = self.create(\n                app_label=opts.app_label,\n                model=opts.model_name,\n                name=opts.verbose_name_raw,\n            )\n            self._add_to_cache(self.db, ct)\n            results[ct.model_class()] = ct\n        return results\n\n    def get_for_id(self, id):\n        \"\"\"\n        Lookup a ContentType by ID. Uses the same shared cache as get_for_model\n        (though ContentTypes are obviously not created on-the-fly by get_by_id).\n        \"\"\"\n        try:\n            ct = self.__class__._cache[self.db][id]\n        except KeyError:\n            # This could raise a DoesNotExist; that's correct behavior and will\n            # make sure that only correct ctypes get stored in the cache dict.\n            ct = self.get(pk=id)\n            self._add_to_cache(self.db, ct)\n        return ct\n\n    def clear_cache(self):\n        \"\"\"\n        Clear out the content-type cache. This needs to happen during database\n        flushes to prevent caching of \"stale\" content type IDs (see\n        django.contrib.contenttypes.management.update_contenttypes for where\n        this gets called).\n        \"\"\"\n        self.__class__._cache.clear()\n\n    def _add_to_cache(self, using, ct):\n        \"\"\"Insert a ContentType into the cache.\"\"\"\n        # Note it's possible for ContentType objects to be stale; model_class() will return None.\n        # Hence, there is no reliance on model._meta.app_label here, just using the model fields instead.\n        key = (ct.app_label, ct.model)\n        self.__class__._cache.setdefault(using, {})[key] = ct\n        self.__class__._cache.setdefault(using, {})[ct.id] = ct\n\n\n@python_2_unicode_compatible\nclass ContentType(models.Model):\n    name = models.CharField(max_length=100)\n    app_label = models.CharField(max_length=100)\n    model = models.CharField(_('python model class name'), max_length=100)\n    objects = ContentTypeManager()\n\n    class Meta:\n        verbose_name = _('content type')\n        verbose_name_plural = _('content types')\n        db_table = 'django_content_type'\n        ordering = ('name',)\n        unique_together = (('app_label', 'model'),)\n\n    def __str__(self):\n        # self.name is deprecated in favor of using model's verbose_name, which\n        # can be translated. Formal deprecation is delayed until we have DB\n        # migration to be able to remove the field from the database along with\n        # the attribute.\n        #\n        # We return self.name only when users have changed its value from the\n        # initial verbose_name_raw and might rely on it.\n        model = self.model_class()\n        if not model or self.name != model._meta.verbose_name_raw:\n            return self.name\n        else:\n            return force_text(model._meta.verbose_name)\n\n    def model_class(self):\n        \"Returns the Python model class for this type of content.\"\n        try:\n            return apps.get_model(self.app_label, self.model)\n        except LookupError:\n            return None\n\n    def get_object_for_this_type(self, **kwargs):\n        \"\"\"\n        Returns an object of this type for the keyword arguments given.\n        Basically, this is a proxy around this object_type's get_object() model\n        method. The ObjectNotExist exception, if thrown, will not be caught,\n        so code that calls this method should catch it.\n        \"\"\"\n        return self.model_class()._base_manager.using(self._state.db).get(**kwargs)\n\n    def get_all_objects_for_this_type(self, **kwargs):\n        \"\"\"\n        Returns all objects of this type for the keyword arguments given.\n        \"\"\"\n        return self.model_class()._base_manager.using(self._state.db).filter(**kwargs)\n\n    def natural_key(self):\n        return (self.app_label, self.model)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n \n# Make an API request\nurl = 'https://example.com/api/products'\ndata = requests.get(url).json()\n \n# Show results\nprint('Available Products')\nfor item in data['products']:\n    print(f'{item[\"name\"]} - {item[\"price\"]}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pydb\n\ndef query_customer_name(name):\n    query = \"\"\"\n    SELECT *\n    FROM customers\n    WHERE customer_name LIKE %s\"\"\"\n    name_wildcard = '%' + name + '%'\n    query_result = pydb.query(query, name_wildcard)\n    return query_result\n    \nif __name__ == '__main__':\n    query_customer_name('John') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\ndef duplicates(items):\n    c = Counter(items)\n    for k, v in c.items():\n        if v > 1:\n            print(k)\n\nitems = [\"red\", \"green\", \"blue\", \"red\", \"yellow\"]\nduplicates(items) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import base64\nfrom cryptography.fernet import Fernet\n\ndef encrypt(plaintext):\n key = Fernet.generate_key()\n f = Fernet(key)\n encrypted_data = f.encrypt(plaintext.encode())\n return base64.b64encode(encrypted_data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef validate_email(email):\n regex = '^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'\n if(re.search(regex,email)): \n  return True\n else:  \n  return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_trailing_zeros(num): \n  num = str(num) \n  return float(num.rstrip('0').rstrip('.')) \n  \nresult = remove_trailing_zeros(123.4500) \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: char_dictionary = {}\n\ncounter = 1\n\nfor char in string:\n if char in char_dictionary.keys():\n continue\n else:\n char_dictionary[char] = counter\n counter += 1\n\nprint(char_dictionary)\n# Output: {'H': 1, 'e': 2, 'l': 3, 'o': 4, ', ': 5, 'W': 6, 'r': 7, 'd': 8, '!': 9} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: if a < 20:\n    b = c\n    c = b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nVectorized version of the add_lists function using Numpy library\n\"\"\"\n\nimport numpy as np\n\ndef np_add_lists(list1, list2):\n    # Convert the lists to Numpy arrays\n    array1 = np.array(list1)\n    array2 = np.array(list2)\n\n    # Perform the element-wise addition\n    result = array1 + array2\n    \n    # Return the result as a list\n    return list(result)\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3]\n    list2 = [4, 5, 6]\n    print(np_add_lists(list1, list2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generateRandomString(stringLength=8):\n    lettersAndDigits = string.ascii_letters + string.digits\n    return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))\n\nprint (\"Random alphanumeric string is:\", generateRandomString()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def harmonic_mean(x, y, z):\n return 3/((1/x + 1/y + 1/z)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_odd_numbers(numbers):\n    for num in sorted(numbers):\n        if num % 2 != 0:\n            print(num)\n\nprint_odd_numbers([1, 2, 3, 4, 5, 6, 7])\n# Output: 1, 3, 5, 7 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def str_to_list(str):\n    char_list = []\n    for c in str:\n        char_list.append(c)\n    return char_list\n\nprint(str_to_list(\"Hello\")) #prints ['H', 'e', 'l', 'l', 'o'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_val(a, b, c):\n    if (a > b and a > c): \n        return a\n    elif (b > a and b > c):\n        return b\n    else: \n        return c\n\nresult = max_val(2, 5, 3)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findSmallest(array):\n    smallest = array[0]\n    smallest_2 = array[1]\n\n    for i in range(2, len(array)):\n        if array[i] <= smallest:\n            smallest_2 = smallest\n            smallest = array[i]\n        elif array[i] < smallest_2:\n            smallest_2 = array[i]\n\n    return (smallest, smallest_2)\n\narray = [4, 7, 2, 9, 1.5, 8]\n\nprint(findSmallest(array))\n\n# Output: (1.5, 2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_1_to_n(n):\n  sum = 0\n  for i in range(1, n+1):\n    sum += i\n  return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #This shows the usage of property decorators\n\n#Python @property is one of the built-in decorators. The main purpose of any decorator is to change your class methods or attributes in such a way so that the users neeed not make any additional changes in their code.\n\n#Without property decorators\n\nclass BankAccount:\n    def __init__(self,name,balance):\n        self.name=name\n        self.balance=balance\n        self.total= self.name+ \" has \"+self.balance+ \" dollars in the account\"\n\nuser1=BankAccount(\"Elon Musk\",\"10000\")\nuser1.name=\"Tim cook\"\nprint(user1.name)\nprint(user1.total)\n\n# Output: Tim cook\n#         Elon Musk has 10000 dollars in the account\n\n\n#With property decorators\n\nclass BankAccount:\n    def __init__(self,name,balance):\n        self.name=name\n        self.balance=balance\n    @property\n    def total(self):\n        return self.name+ \" has \"+self.balance+ \" dollars in the account\"\n\nuser1=BankAccount(\"Elon Musk\",\"10000\")\nuser1.name=\"Tim cook\"\nprint(user1.name)\nprint(user1.total)\n\n#Output: Tim cook\n#        Tim cook has 10000 dollars in the account\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def eval_expr(expr):\n  return eval(expr)\n\nprint(eval_expr(\"2 + (3 * 5)\"))\n\n# Output\n# 17 but is not the same. just give one example and only return the code."}
