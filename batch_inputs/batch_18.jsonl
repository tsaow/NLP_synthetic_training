{"prompt": "make some code that functions the same as the following code: def preorder_traversal(root):\n    if root is None: \n        return\n    \n    print (root.data, end = ' ')\n    \n    preorder_traversal(root.left) \n    preorder_traversal(root.right) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sklearn\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nimport numpy as np\n\niris = datasets.load_iris()\nX = iris.data\ny = iris.target\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n\nknn = KNeighborsClassifier()\nknn.fit(X_train, y_train)\n\nX_new = np.array([[5.2,3.5,1.4,0.2]])\nprediction = knn.predict(X_new)\n\nif int(prediction) == 0:\n print('The flower is a Setosa.')\nelif int(prediction) == 1:\n print('The flower is a Versicolor.')\nelse:\n print('The flower is a Virginica.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_even_numbers(list1):\n    count = 0\n    for item in list1:\n        if item % 2 == 0:\n            count += 1\n    return count\n\nprint(count_even_numbers(list1)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def oddNumbers(n):\n    for i in range(0, n + 1):\n        if i % 2 != 0:\n            yield i\n\nn = 10\nfor num in oddNumbers(n):\n    print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Pass command line arguments to a function\n\nimport sys\n \ndef command_line_args():\n    args = []\n    # Loop over the command line arguments\n    for arg in sys.argv[1:]:\n        args.append(arg)\n    return args\n \nargs = command_line_args()\nprint(args) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def greeting(name, age):\n \u00a0 \u00a0print(\"Hi, my name is \", name, \"and I'm\", age, \"years old.\")\n\ngreeting(\"John\", 28) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack:\n def __init__(self):\n self.stack = []\n \n def push(self, item):\n self.stack.append(item)\n \n def pop(self):\n return self.stack.pop()\n \n def peek(self):\n return self.stack[-1]\n \n def is_empty(self):\n return self.stack == []\n \n def size(self):\n return len(self.stack) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n  \n# Function to scramble a given word \ndef scramble(word):  \n    # Define all the possible chars in the word \n    chars = list(word)  \n  \n    # Get a random permutation of the characters \n    random.shuffle(chars) \n  \n    # Construct the scrambled word \n    scramble_word = ''.join(chars)  \n  \n    return scramble_word \n\n# Driver code \nword = 'listen'\nscrambled = scramble(word) \n  \nprint(word + \" scrambled becomes: \" + scrambled) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndata = '{\"type\": \"error\", \"message\": \"An error occurred\"}'\n\njson_data = json.loads(data)\nprint(json_data[\"type\"]) # prints \"error\"\nprint(json_data[\"message\"]) # prints \"An error occurred\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: query = 'CREATE TABLE employees (id INTEGER PRIMARY KEY, name VARCHAR(255), salary INTEGER)' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_search_iterative(arr, start, end, target):\n    while start <= end:\n        mid = (start + end) //2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            start = mid+1\n        else:\n            end = mid-1\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bits_required(num):\n    num_bits = 0\n    if num == 0:\n        num_bits = 1\n    else:\n        while num > 0:\n            num_bits += 1\n            num >>= 1\n    return num_bits but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \nfrom sklearn.cluster import KMeans \n\ndataset = [[2, 4], [5, 8], [3, 7], [9, 2], [7, 1]]\n\nX = np.array(dataset) \n\nkmeans = KMeans(n_clusters=3, random_state=0).fit(X)\n\nlabels = kmeans.labels_\n\nfor i in range(len(X)):\n print(\"datapoint:\", X[i], \"belongs to cluster\", labels[i]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(arr, target):\n for i in range(len(arr)):\n  if arr[i] == target:\n   return i\n return -1\n  \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntarget = 8\nindex = search(arr, target)\nif index != -1:\n print(\"Found at index: \" + str(index))\nelse:\n print(\"Not Found\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string \n  \n# Remove punctuations from string \ndef remove_punctuations(s): \n    s = ''.join([i for i in s if i not in frozenset(string.punctuation)]) \n    return s \n  \n# Driver Code \nif __name__ == \"__main__\" : \n  \n    text = \"This is a great world - let's start coding!\"\n    print(remove_punctuations(text)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combine_strings(s1, s2):\n if s1 < s2:\n print(s1+s2)\n else:\n print(s2+s1)\n\ncombine_strings(\"Hello\", \"World\")\n# Output: HelloWorld but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def encode_string(encoding_string):\n    encoded_string = \"\"\n    for char in encoding_string : \n        encoded_string += str(ord(char)) + \" \"\n    return encoded_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Create a Sequential model\nmodel = Sequential()\n\n# Add a hidden layer\nmodel.add(Dense(20, input_dim=8, kernel_initializer='uniform', activation='relu'))\n\n# Add an output layer\nmodel.add(Dense(3, kernel_initializer='uniform', activation='softmax'))\n\n# Compile the model\nmodel.compile(optimizer=keras.optimizers.Adam(), loss=keras.losses.categorical_crossentropy, metrics=['acc'])\n\n# Fit the model\nmodel.fit(X_train, y_train, batch_size=64, epochs=10, validation_data=(X_test, y_test)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_search(arr, x): \n    low = 0\n    high = len(arr) - 1\n      \n    while low <= high: \n        mid = (high + low) // 2\n        if arr[mid] < x: \n            low = mid + 1\n        elif arr[mid] > x: \n            high = mid - 1\n        else: \n            return mid \n  \narr = [2, 8, 10, 17, 19, 25, 28]\nx = 19\nresult = binary_search(arr, x)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def recommend_option(options):\n  best_option = {}\n\n  for option in options:\n    if (best_option == {}) or (option['cost']/option['rating'] < best_option['cost']/best_option['rating']):\n      best_option = option\n\n  return best_option['name'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def frequency_dict(list):\n    counts = {}\n    for i in list:\n        if i not in counts:\n            counts[i] = 1\n        else:\n            counts[i] += 1\n    return counts\n\nprint(frequency_dict(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def random_int(a, b):\n    random_number = random.randint(1, a**b)\n    return random_number but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class TwoStringObject:\n    def __init__(self, str1, str2):\n        self.str1 = str1\n        self.str2 = str2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_multiple_occurrences(arr):\n seen = set([]) # stores all the numbers we've seen before\n new_arr = [] # stores the numbers that occurred only once or twice\n\nfor num in arr:\n if num not in seen:\n  seen.add(num) # add to the numbers we've seen\n  new_arr.append(num)\n elif num in seen:\n  seen.remove(num) # remove from the \"seen\" set\n\nreturn new_arr\n\narr = [1,2,1,3,4,2,2,2,3,1]\nprint(remove_multiple_occurrences(arr))\n# Prints [4] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The benefits of using classes in Python include creating modular and reusable code, making it easier to organize code, enhancing maintainability and creating inheritance structures. Classes also provide an object-oriented way of programming, which allows you to use objects that contain both data and methods. This makes it easier to abstract complex interactions and reduces the amount of code needed to perform complex operations. Finally, classes also make it easier to support multiple instances of an object. This can be useful in distributed systems, where multiple machines need to interact effectively with the same resources. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Book:\n    def __init__(self, title, author, year):\n        self.title = title\n        self.author = author\n        self.year = year\n\n    # other methods, such as get_title(), set_title(), get_author(), set_author(), etc. could go here but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nfrom random import *\n\ndef generate_username():\n    letters = string.ascii_letters\n    numbers = string.digits\n    username = \"\"\n    for _ in range(10):\n        username += choice(letters) + choice(numbers)\n    return username\n\nprint(generate_username()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\n\ndef generate_calendar(tasks, appointments):\n    day = datetime.datetime.now().strftime('%A')\n    calendar = {day: {}}\n\n    for task in tasks:\n        calendar[day]['tasks'] = {'name': task['name'], 'time': task['time']}\n\n    for appointment in appointments:       \n        calendar[day]['appointments'] = {'name': appointment['name'], 'time': appointment['time']}  \n    return calendar\n\nif __name__ == '__main__':\n    tasks = [{'name': 'Write code', 'time': '8pm'}, {'name': 'Complete project', 'time': '9pm'}]\n    appointments = [{'name': 'Meeting with Bob', 'time': '2pm'}, {'name': 'Meeting with Alice', 'time': '4pm'}]\n    result = generate_calendar(tasks, appointments)\n    print(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(nums):\n    max_value = nums[0] \n    for i in nums:\n        if i > max_value:\n            max_value = i\n    return max_value\n\nnums = [1, 8, 2, 4, 10]\nprint(find_max(nums)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a Python program that can identify a triangle using 3 provided side lengths.\n\"\"\"\n\ndef is_valid_triangle(side1, side2, side3): \n    if (side1 + side2 > side3) and (side2 + side3 > side1) and (side1 + side3 > side2): \n        return True \n    else: \n        return False\n\nif __name__ == '__main__':\n    side1 = 3\n    side2 = 4\n    side3 = 5\n    print(is_valid_triangle(side1, side2, side3)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(str1, str2): \n    # Create lists of characters in each string\n    list1 = list(str1)\n    list2 = list(str2)\n\n    # Sort both lists\n    list1.sort()\n    list2.sort()\n    \n    # Compare the two lists \n    if list1 == list2:\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n \nnums = []\nfor i in range(10):\n nums.append(random.randint(1, 100))\n \nprint(nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: table = dict()\n\ntable['one'] = 1\ntable['two'] = 2\ntable['three'] = 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: keys = [\"Stud1\", \"Roll No\", \"Class\", \"Stud2\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def char_count(text):\n  chars = {}\n  for char in text:\n    if char in chars:\n      chars[char] += 1\n    else:\n      chars[char] = 1\n  return chars but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary\n\n   def get_name(self):\n        return self.name\n\n   def get_age(self):\n        return self.age\n\n   def get_salary(self):\n        return self.salary but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import collections\nimport sys\n\ndef count_words(text):\n word_counts = collections.Counter(text.split())\n top_five = word_counts.most_common(5)\n for word, count in top_five:\n print(f'{word} occurred {count} times')\n\nif __name__ == '__main__':\n text = sys.stdin.read()\n count_words(text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# A list of words, that the program can use to generate lyrics\nwords = [\"Love\", \"Life\", \"Dreams\", \"Happiness\", \"Joy\", \"Home\",\n\"Friends\", \"Family\", \"Success\", \"Believe\", \"Magic\", \"Laughter\",\n\"Together\", \"Memories\", \"Adventure\", \"Appreciate\", \"Peace\",\n\"Passion\", \"Courage\", \"Forever\"]\n\n# Generate a song with 8 lines\nfor i in range(8):\n # Choose random words to form the line\n line = \"\"\n for j in range(4):\n line += random.choice(words) + \" \"\n # Capitalize the line and add punctuation\n line = line.capitalize() + \".\\n\"\n print(line)\n\n# Print the result\nprint(\"That is all I need to be complete.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_to_boolean(expression):\n    expression = expression.replace(\" \", \"\")\n    expression = expression.replace(\"(\", \"\")\n    expression = expression.replace(\")\", \"\")\n    \n    tokens = expression.split(\"+\")\n    for i in range(len(tokens)):\n        tokens[i] = tokens[i].replace(\"-\",\"+-\")\n    \n    expression = \"\".join(tokens)\n    expression = expression.replace(\" > 0\", \"\")\n    expression = expression.split(\"+\")\n    \n    boolean_expression = \" \".join(expression)\n    boolean_expression = boolean_expression.replace(\" x\", \"True\")\n    boolean_expression = boolean_expression.replace(\"y\", \"True\")\n    boolean_expression = boolean_expression.replace(\"z\", \"False\")\n    \n    return boolean_expression but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: function checkStringContains(str1, str2) {\n  let occurs = 0;\n  for (let i = 0; i < str1.length; i++) {\n    for (let j = 0; j <= str2.length; j++) {\n      if (str1[i] === str2[j]) {\n        occurs++;\n        break;\n      }\n    }\n  }\n  return occurs === str2.length;\n}\n\nconst result = checkStringContains('python', 'ono');\nconsole.log(result); but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_common(lst):\n  return max(set(lst), key=lst.count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def str_to_list(string):\n    return string.split(' ') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n): \n a = 0\n b = 1\n if n < 0: \n print(\"Incorrect input\") \n elif n == 0: \n return a \n elif n == 1: \n return b \n else: \n for i in range(2, n): \n c = a + b \n a = b \n b = c \n return b \n\nprint(fibonacci(9)) \n# 21 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def keyword_detector(string, keywords):\n for i in keywords:\n if i in string:\n return True\n return False\n\nprint(keyword_detector(\"I love ice cream\", [\"chocolate\", \"vanilla\"])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers = [80, 85, 90, 75, 95]\n\ntotal = 0\nfor number in numbers:\n total += number\n\nclass_average = total / len(numbers)\nprint(class_average) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Initalize a shopping cart dictionary\nshopping_cart = {}\n\n# Function to add an item to the shopping cart\ndef add_item_to_cart(item, quantity):\n    if item in shopping_cart:\n        shopping_cart[item] += quantity\n    else:\n        shopping_cart[item] = quantity\n\n# Function to remove an item from the shopping cart\ndef remove_item_from_cart(item):\n    if item in shopping_cart:\n        del shopping_cart[item]\n\n# Function to calculate the total price\ndef calculate_total():\n    total = 0\n    for item, quantity in shopping_cart.items():\n        total += item.price * quantity\n        \n    return total\n\n# Function to clear the shopping cart\ndef clear_cart():\n    shopping_cart.clear() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_words(string): \n    words = string.split(' ') \n    reverse = words[::-1] \n    return ' '.join(reverse) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def hypotenuse(a, b):\n  return (a**2 + b**2) ** 0.5\n\nprint(hypotenuse(3, 4)) # 5.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # importing libraries\nimport requests\nfrom bs4 import BeautifulSoup\n\n# making the request\nurl = \"https://www.example.com/products\"\nr = requests.get(url)\n\n# extracting the data with BeautifulSoup\nsoup = BeautifulSoup(r.content)\nproducts = soup.find_all(\"div\", {\"class\": \"product\"})\n\nfor product in products:\n    product_name = product.find(\"h3\").text\n    product_price = product.find(\"span\", {\"class\": \"price\"}).text\n    print(\"Found product: %s %s\" % (product_name, product_price)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom google.cloud import automl\n\n# Create an Automl Client\nclient = automl.TablesClient(project='PROJECT_ID', region='us-central1')\n\ndef predict_team(player_name, position):\n \"\"\"\n Generates a team recommendation using AutoML based on player's name and position.\n \"\"\"\n # Create tables client\n model_display_name = 'YOUR_MODEL_DISPLAY_NAME'\n table_spec_name = f'projects/PROJECT_ID/locations/us-central1/tables/{model_display_name}'\n\n # Create the dataframe with player data\n data = {\n 'player_name': player_name,\n 'position': position\n }\n df = pd.DataFrame(data, index=[0])\n\n # Create a prediction object\n pred_bt = client.predict(\n model_display_name=model_display_name,\n inputs=df[['player_name', 'position']],\n table_spec_name=table_spec_name\n )\n\n # Format into team recommendation\n team_name = pred_bt.payload[0].tables.value.string_value\n return team_name\n\ntarget_player = 'Yadiel Rivera'\ntarget_position = 'Shortstop'\nresult = predict_team(target_player, target_position)\nprint(f'For player {target_player} playing {target_position}: {result}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_val(num1, num2):\n    # function to find the maximum value of two numbers\n    if(num1 > num2):\n        return num1\n    else:\n        return num2\n\n# get the input values from the user\na = int(input(\"Enter first number: \"))\nb = int(input(\"Enter second number: \"))\n\n# call the max_val() function\nmax_val = max_val(a,b)\n\nprint(\"The maximum value is:\", max_val) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nA Python program to generate a dictionary which contains (i, i*i) such that i is an int between 1 and N\n\"\"\"\n\nN = 10\nmy_dict = {}\n\n# Generate the dictionary\nfor i in range(1, N+1):\n    my_dict[i] = i * i\n\n# Print the dictionary\nprint(my_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Initialize a variable for the maximum count\nmax_count = 0\n\n# Initialize a variable for the most frequent word\nmost_frequent_word = \"\"\n\n# Loop the dictionary\nfor key, value in d.items():\n    if value > max_count:\n        max_count = value\n        most_frequent_word = key\n\n# Print the most frequent word\nprint(\"The most frequent word is '{}'\".format(most_frequent_word)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pig_latin(string):\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  words = string.split()\n            \n  #loop through the words\n  for index, word in enumerate(words):\n    new_word = \"\"\n    #check if the first letter one of the vowels \n    if word[0].lower() in vowels:\n      #add the suffix \n      new_word = word + \"ay\"\n    #otherwise move first letter to the end\n    else:\n      #move the first letter\n      new_word = word[1:] + word[0]\n      #add the suffix \n      new_word += \"ay\"\n      \n    #add the new word to list\n    words[index] = new_word\n            \n  #return modified list\n  return \" \".join(words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def to_upper(string):\n return string.upper()\n \nprint(to_upper(string))  # THIS IS A SAMPLE STRING but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for x in range(1, 10):\n    for y in range(1, 10):\n        print('{} x {} = {}'.format(x, y, x*y)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from IPython.core.magic import register_cell_magic\n\n@register_cell_magic\ndef if_(line, cell):\n    _, condition = line.split(\" \", 1)\n    result = f\"if {condition}:\"\n    return f\"{result}\\n    {cell}\"\n\n@register_cell_magic\ndef for_(line, cell):\n    _, condition = line.split(' ', 1)\n    result = f\"for {condition}:\"\n    return f\"{result}\\n    {cell}\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MyList(list):\n  def __init__(self):\n    super().__init__()\n  def some_method(self):\n    pass but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # A simple Python program to add two numbers\na = 1.5\nb = 6.3\n\n# Use more descriptive variable names\nnum1 = a\nnum2 = b\n\n# Use the in-built sum() function\nsum = sum([a, b])\n\n# Use f-strings to reduce the amount of code\nprint(f'The sum of {a} and {b} is {sum}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import torch.nn as nn\n\nclass ANN(nn.Module):\n    def __init__(self):\n        super().__init__()\n        # Input layer\n        self.fc1 = nn.Linear(50, 64) # 50 input units, 64 neurons in the hidden layer\n        self.relu1 = nn.ReLU()\n        # Hidden layer 1\n        self.fc2 = nn.Linear(64, 32)\n        self.relu2 = nn.ReLU()\n        # Hidden layer 2\n        self.fc3 = nn.Linear(32, 16)\n        self.relu3 = nn.ReLU()\n        # Output layer\n        self.fc4 = nn.Linear(16, 3)\n        self.sigmoid = nn.Sigmoid()\n \n    def forward(self, x):\n        x = self.fc1(x)\n        x = self.relu1(x)\n        x = self.fc2(x)\n        x = self.relu2(x)\n        x = self.fc3(x)\n        x = self.relu3(x)\n        x = self.fc4(x)\n        x = self.sigmoid(x)\n        return x but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Load required libraries\nimport pandas as pd\nimport numpy as np\n\n# Load the dataset\ndata = pd.read_csv(\"book_reviews.csv\")\n\n# Extract features and target variable\nX = data.review\ny = data.book_title\n\n# Train-test split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Vectorize texts\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nvectorizer = TfidfVectorizer()\nX_train = vectorizer.fit_transform(X_train)\nX_test = vectorizer.transform(X_test)\n\n# Train a logistic regression model\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Make predictions\npredictions = model.predict(X_test)\n\n# Evaluate model performance\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score\nprint(\"Accuracy:\", accuracy_score(y_test, predictions))\nprint(\"Precision:\", precision_score(y_test, predictions, average=\"macro\"))\nprint(\"Recall:\", recall_score(y_test, predictions, average=\"macro\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_array(arr): \n      \n    # Initialize start and end index \n        start = 0\n        end = len(arr) - 1\n  \n    # Loop over the array \n    while start < end: \n  \n        # Swap the elements at start and end \n        arr[start], arr[end] = arr[end], arr[start]  \n          \n        # Update start and end index \n        start += 1\n        end -= 1\n  \n# Driver code \narr = [1, 2, 3] \n  \nreverse_array(arr) \n  \n# Print our modified array   \nprint(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary\n    \n    def get_details(self):\n        print(f\"Name: {self.name}\")\n        print(f\"Age: {self.age}\")\n        print(f\"Salary: {self.salary}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Song:\n    def __init__(self, title, artist, album):\n        self.title = title\n        self.artist = artist\n        self.album = album\n    \n    def print_info(self):\n        print(\"Title: %s, Artist: %s, Album: %s\" % (self.title, self.artist, self.album)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers = [1, 2, 3, 4, 5]\n \nnumbers.reverse()\n \nfor num in numbers:\n    print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: items = [1, 2, 3, 4, 5]\nnew_items = [item**2 for item in items] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseString(s1, s2):\n s = s1 + s2\n return s[::-1]\n\nreverseString(string1, string2)\n# Result: dlroW olleH but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_char(string, character):\n count = 0\n for c in string:\n if c == character:\n count += 1\n return count\n\nprint(count_char('This is a sample string.', 's'))  # 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def applyFunc(lst, func):\n    mapped_list = []\n    for el in lst:\n        mapped_list.append(func(el))\n    return mapped_list\n\ndef square(x):\n    return x*x\n\nlst = [1, 2, 3, 4, 5]\n\nprint(applyFunc(lst, square)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Feature selection\nfrom sklearn.feature_selection import RFE\n\n# Use recursive feature elimination to select the most \n# important features\nrfe = RFE(estimator = model, step = 1)\nfit = rfe.fit(X, y)\n\n# Parameter tuning using grid search\nfrom sklearn.model_selection import GridSearchCV\n\n# Create grid search object\nparms = {'C': [0.1, 1, 10, 100, 1000],  \n         'gamma': [1, 0.1, 0.01, 0.001, 0.0001], \n         'kernel': ['rbf']} \ngrid = GridSearchCV(estimator = model, param_grid = parms, scoring = 'accuracy', cv = 5)\n\n# Fit grid search to the data\ngrid.fit(X, y)\n\n# Regularization and model selection\nfrom sklearn.linear_model import Ridge, Lasso\n\n# Ridge regression with parameter alpha = 0.01\nmodel = Ridge(alpha = 0.01)\nmodel.fit(X, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def delete_item(lst, item):\n    if item in lst:\n        lst.remove(item)\n    return lst but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\nimport boto3\n\ndef send_email(event, context):\n recipient = event['recipient']\n subject = event['subject']\n message = event['message']\n\n #send email here\n\n client = boto3.client('ses')\n\n response = client.send_email(\n Source='sender@example.com',\n Destination={\n   'ToAddresses': [recipient,],\n   },\n Message={\n   'Subject': {'Data': subject},\n   'Body': {'Text': {'Data': message}},\n   },\n )\n\ndef handler(event, context):\n event = json.loads(event)\n response = send_email(event, context)\n return json.dumps(response) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_remainder(a, b):\n    return a % b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for letter in \"abcdefghijklmnopqrstuvwxyz\":\n print(letter) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_longest_common_substring(s1, s2):\n    # Set the length of the longest common substring\n    longest = 0\n\n    # Split the strings into lists of characters\n    list1 = list(s1)\n    list2 = list(s2)\n\n    # Iterate over each character of the strings\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            # Compare the characters\n            if list1[i] == list2[j]:\n                # Increase the largest substring length by one\n                longest += 1\n            else:\n                # Reset the longest substring length\n                longest = 0\n\n            # Update the shortest substring length\n            shortest = min(len(list1) - i, len(list2) - j)\n\n            # Return the longest common substring if it has reached the length of the shortest string\n            if longest == shortest:\n                return s1[i-longest+1:i+1]\n\n# Return an empty string if the longest common substring length is 0\nif longest == 0:\n    return \"\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(number):\n a = 0\n b = 1 \n for i in range(number):\n print(a)\n temp = a\n a = b\n b = temp + b\n\nnumber = int(input(\"Enter a nmber: \"))\nfibonacci(number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def power(x, n): \n if (n == 0): \n return 1\n elif (n % 2 == 0): \n y = power(x, n / 2) \n return y * y\n else:\n y = power(x, (n - 1) / 2) \n return x * y * y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(string1, string2):\n    string1 = sorted(string1.replace(\" \", \"\").lower())\n    string2 = sorted(string2.replace(\" \", \"\").lower())\n    \n    if string1 == string2:\n        return 1\n    else:\n        return 0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_pyramid(height):\n    \"\"\"Print the pyramid pattern as described in the input\"\"\"\n    for i in range(1, height+1):\n        spaces = \" \" * (height - i)\n        symbols = (2 * i - 1) * \"*\"\n        print(spaces + symbols + spaces) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def removeVowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_string = ''.join([x for x in string if x.lower() not in vowels])\n    return new_string\n\nprint(removeVowels(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: name = input(\"Please enter your name: \")\n\nif name == \"Alice\":\n    print(\"Welcome, Alice! Here are some personalized recommendations:\")\n    print(\"1. Movie recommendations\")\n    print(\"2. Restaurant recommendations\")\n    print(\"3. Shopping recommendations\")\nelse:\n    print(\"Welcome! Please check out our general recommendations:\")\n    print(\"1. Popular movies\")\n    print(\"2. Popular restaurants\")\n    print(\"3. Popular shopping stores\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\n\nsentence = \"This is a sample sentence\"\n\ntokenized_words = nltk.word_tokenize(sentence)\n\nprint(tokenized_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_max(a, b):\n  if a > b:\n    return a\n  else:\n    return b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\nCloudFormationTemplate = {\n  \"AWSTemplateFormatVersion\": \"2010-09-09\",\n  \"Resources\": {\n    \"MySNSTopic\": {\n      \"Type\": \"AWS::SNS::Topic\",\n      \"Properties\": {\n        \"TopicName\": \"MySNSTopic\"\n      }\n    }\n  }\n}\n\nprint(json.dumps(CloudFormationTemplate)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\nimport xml.etree.ElementTree\n\nxml_str = '''\n<root> \n  <person> \n    <name>John Doe</name> \n    <age>32</age> \n  </person> \n  <person> \n    <name>Jane Doe</name> \n    <age>30</age> \n  </person> \n</root>\n'''\n\nconn = sqlite3.connect('test.db')\ncur = conn.cursor()\n\nsql_command = '''\nCREATE TABLE IF NOT EXISTS people ( \nname VARCHAR(20), \nage INTEGER\n);'''\ncur.execute(sql_command)\n\nroot = xml.etree.ElementTree.fromstring(xml_str)\npeople = root.findall('person')\nfor person in people:\n name = person.find('name').text\n age = person.find('age').text\n cur.execute(\"INSERT INTO people VALUES (?, ?)\", (name, age))\n\nconn.commit()\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_average(array):\n    array_length = len(array)\n    total_sum = 0\n    for i in array:\n        total_sum += i\n    average = total_sum / array_length\n    return average\n\nprint(get_average(items)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def cube_sum(nums): \n  sum = 0 \n  for num in nums: \n    sum += num*num*num \n  return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import BernoulliNB\n\n# Data Preprocessing\n# Read dataset into pandas dataframe\ndf = pd.read_csv(\"data.csv\")\n\n# Extract relevant features\nfeatures = df.iloc[:, :-1].values\nlabels = df.iloc[: , -1].values\n\n# Split dataset into training and testing datasets\nX_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state= 0)\n\n# Train and Test data feature engineering\ncv = CountVectorizer()\nX_train = cv.fit_transform(X_train)\nX_test = cv.transform(X_test)\n\n# Train the Naive Bayes Classifier Model\nclassifier = BernoulliNB()\nclassifier.fit(X_train, y_train)\n\n# Test the accuracy of the model\ny_pred = classifier.predict(X_test)\naccuracy = np.mean(y_pred == y_test)\n\n# Print the accuracy of the model\nprint(\"Accuracy: \", accuracy * 100, \"%\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from num2words import num2words\n\ndef int_to_words(num):\n    return num2words(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse(string):\n  return string[::-1]\n  \nstring = \"Hello world!\"\nprint(reverse(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [3, 7, 10, 15, 17, 20]\n\nfor number in my_list: \n  if (number % 2 == 0): \n    print(number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\n# Connect to database\nconn = sqlite3.connect('my_database.db')\n\n# Get cursor\nc = conn.cursor()\n\n# Print information about all tables\nc.execute(\"SELECT name FROM sqlite_master WHERE type='table'\")\n\nprint(\"List of tables:\")\ntables = c.fetchall()\n\nfor table in tables:\n print('\\t',table[0])\n\n# Close connection\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = [\"apple\", \"cat\", \"robot\", \"fly\", \"revolution\"]\n\nwords_by_length = {}\n\nfor word in words:\n length = len(word)\n if length not in words_by_length:\n words_by_length[length] = []\n words_by_length[length].append(word) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: lst = [4, 6, 1, 3, 8]\nlst.sort(reverse=True)\nprint(lst)  # [8, 6, 4, 3, 1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_color_name(colors): \n longest_name = 0 \n longest_color = None\n for color in colors: \n  if len(color) > longest_name: \n   longest_name = len(color) \n   longest_color = color\n return longest_color but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Neural_Network:\n    def __init__(self, learning_rate=0.01):\n        self.learning_rate = learning_rate\n\n    def sgd(self, values, target):\n        guess = sum(values)*self.learning_rate\n\n        gradients = [(2 * (guess - target)) for value in values]\n\n        for gradient_index in range(len(gradients)):\n            values[gradient_index] -= gradients[gradient_index] * self.learning_rate\n        return values but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findLongestIncreasingSubsequence(sequence): \n    n = len(sequence) \n  \n    # LIS[i] stores the length of the longest increasing \n    # subsequence upto index i \n    # Initialize the sequence as 1\n    LIS = [1 for i in range(n)] \n  \n    # Compute LIS values for all indexes  \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if sequence[i] > sequence[j] and LIS[i]< LIS[j] + 1 : \n                LIS[i] = LIS[j]+1\n  \n    # Return  the maximum value \n    return max(LIS) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(arr):\n    seen = set()\n    result = []\n    for item in arr:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    \n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_run_of_ones(n):\n    max = 0\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        else:\n            if count > max:\n                max = count\n            count = 0\n        n //= 2\n    if count > max:\n        max = count\n    return max but is not the same. just give one example and only return the code."}
