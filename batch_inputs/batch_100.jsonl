{"prompt": "make some code that functions the same as the following code: def classify(arr):\n    even = []\n    odd = []\n    for x in arr:\n        if x % 2 == 0:\n            even.append(x)\n        else:\n            odd.append(x)\n    return even, odd\n\neven, odd = classify([1, 2, 3, 4, 5])\nprint(\"Even numbers: \", even)\nprint(\"Odd numbers: \", odd) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: [x**2 for x in [1, 2, 3, 4, 5]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def average(numbers):\n total = 0\n for num in numbers:\n total += num\n return total / len(numbers)\n\naverage([10, 15, 20, 25]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv1D, LSTM, Dense\n\n# Create the model\nmodel = Sequential()\n\n# Add layers\nmodel.add(Conv1D(128, 5, activation='relu', input_shape=(20, 1)))\nmodel.add(LSTM(128))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# Compile the model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Create a Python program that can classify movie reviews or other texts as either positive or negative sentiment. The program should utilize a machine learning model, such as a recurrent neural network with a word-embedding layer, or a logistic regression with a bag-of-words vectorizer to classify the text. The model should be trained on a labeled dataset and be tested for accuracy on a held-out test set. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef detect_outlier(data):\n  # Calculate the median and the inter-quartile range\n  q75, q25 = np.percentile(data, [75 ,25])\n  iqr = q75 - q25\n  \n  # Calculate the upper and lower bound\n  lower_bound = q25 - (iqr * 1.5)\n  upper_bound = q75 + (iqr * 1.5)\n  \n  # Calculate outlier points\n  outlier_points = []\n  \n  for element in data:\n    if element < lower_bound or element > upper_bound:\n      outlier_points.append(element)\n      \n  return outlier_points\n\n# Input array\ndata = np.array([-6.2, 11.9, 5.7, 7.3, 2.5, 8.4, 14.0, 9.2, 7.4, 11.6])\n\n# Call function\noutliers = detect_outlier(data)\n\n# Print outliers\nprint(outliers)\n\n# Output:\n# [-6.2, 14.0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import the module\nimport calendar\n\n# print the calendar \nprint(calendar.month(2021, 5)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(string):\n    reversed_string = string[::-1] \n    return reversed_string\n\nreversed_string = reverse_string(\"Hello World!\")\nprint(reversed_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: change = lambda word: word.lower()\n\nprint(change(\"CHANGE\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(nums):\n    max_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n\n    return max_num\n\nnums = [1, 2, 300, 4, 5]\n\nprint(find_max(nums)) # 300 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse(str):\n    return str[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_string = 'this string contains duplicate words' \n\nmy_string = my_string.split() \nres = [] \nfor i in my_string: \n    if i not in res: \n        res.append(i) \n\nmy_string = ' '.join(res) \nprint(my_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n#read data\ndf = pd.read_csv('data.csv')\nX_train, y_train = df.text, df.label \n\n#build bag-of-words\nvectorizer = CountVectorizer()\nX_train_vectorized = vectorizer.fit_transform(X_train)\n\n# Train the model\nmodel = MultinomialNB()\nmodel.fit(X_train_vectorized, y_train)\n\n#test the model\nsample_text = \"This is an example document for testing Bag of Words model\"\nsample_vectorized = vectorizer.transform([sample_text])\nprediction = model.predict(sample_vectorized)\nprint(\"Prediction:\",prediction[0]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: even_or_odd = int(input(\"Please enter a number: \"))\nif even_or_odd % 2 == 0:\n  print(\"The number is Even.\")\nelse:\n  print(\"The number is Odd.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maximize_obj_func(x):\n    return 2*x - 4\n\nx_opt = maximize_obj_func(x)\nopt_val = obj_func(x_opt)\nprint(\"Optimum value of objective function: \", opt_val) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to detect duplicate objects in an array\n\ndef detectDuplicates(arr):\n  seen = set()\n  for item in arr:\n    if item in seen:\n      return True\n    else:\n      seen.add(item)\n  return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def delete_key(dictionary, key): \n    if key in dictionary: \n        del dictionary[key] \n    else: \n        print('Error! Key not found') \n\ndelete_key(dictionary, key) \nprint(dictionary) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from datetime import datetime\n\ndef day_of_week(date):\n    # convert string to date object\n    date_obj = datetime.strptime(date, \"%Y-%m-%d\")\n    # retrieve weekday\n    day = date_obj.strftime(\"%A\")\n    return day but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_password():\n password_length = 8\n password = ''.join(random.choice(\n string.ascii_uppercase +\n string.ascii_lowercase +\n string.digits +\n string.punctuation) for _ in range(password_length))\n \n return password\n\nprint(generate_password()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef random_number_generator():\n    return random.randint(1, 10)\n\nfor _ in range (10):\n    print(random_number_generator()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string1 = \"Hello\"\nstring2 = \"World\"\n\nconcatenatedString = string1 + string2\n\nprint(concatenatedString) # \"HelloWorld\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_base10_to_binary(num):\n    binary_num = []\n    while (num > 0): \n        binary_num.append(num % 2)\n        num //= 2\n  \n    binary_num.reverse() \n    return binary_num but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def triangleArea(a, b, c):\n # Calculate the semi-perimeter of the triangle\n s = (a + b + c) / 2\n \n # Calculate the area using Heron's formula\n area = (s*(s - a)*(s - b)*(s - c))**0.5\n \n return area\n\ntriangleArea(3,4,5) # 6.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convertToBinary(n): \n  \n    if n > 1: \n        convertToBinary(n//2) \n  \n    print(n % 2,end = '') \n  \n\n# driver code \nnum = 17\nconvertToBinary(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_even(arr):\n  evenNumbers=0\n  for x in arr:\n      if x % 2 == 0:\n          evenNumbers += 1\n  return evenNumbers\n  \nprint(count_even([1, 2, 3, 4, 5, 6, 7, 8])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def alphabeticalSort(arr):\n    arr.sort()\n    return arr\n\nresult = alphabeticalSort(['Jan', 'June', 'Raju', 'April'])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: 15 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVC\n\n# Load the data\ndata = pd.read_csv('cancer_data.csv')\n\n# Define features and targets\nX = data.drop('diagnosis', axis=1).values\ny = data.diagnosis.values\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Standardize the data\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\n# Create and train the SVM model\nsvc = SVC()\nsvc.fit(X_train_scaled, y_train)\n\n# Evaluate the model\naccuracy = svc.score(X_test_scaled, y_test)\nprint(\"The model accuracy is {}%\".format(round(accuracy * 100, 2))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def encodeString(s):\n    encodedString = \"\"\n    for c in s:\n        encodedChar = chr(ord(c) + 1)\n        encodedString += encodedChar\n    return encodedString\n\ndef decodeString(s):\n    decodedString = \"\"\n    for c in s:\n        decodedChar = chr(ord(c) - 1)\n        decodedString += decodedChar\n    return decodedString\n\nencodeString = encodeString(\"This is a secret string\")\nprint(encodeString)\n\ndecodeString = decodeString(encodeString)\nprint(decodeString) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convertStringToFloat(str_list):\n    floats = []\n    for s in str_list:\n        floats.append(float(s))\n    return floats\n\nconvertStringToFloat(str_list) // Returns [45.0, 87.5, 90.9, 24.0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def removeVowel(string):\n # define a set of vowels \n vowels = {'a', 'e', 'i', 'o', 'u'}\n \n # loop through each character of the string \n for i in range(len(string)): \n # check if the character is a vowel \n if string[i] in vowels: \n # return the modified string \n return string[:i] + string[i + 1:]\n \nreturn string\n \nstring = \"this is a test string\"\nprint(removeVowel(string))\n# Output: thrs is a test strng but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: x = int(input(\"Enter a number: \"))\n\n# Initialize list\nfactors = []\n# Find the factors\nfor i in range(1, x + 1):\n    if x % i == 0:\n        factors.append(i)\n# Sort factors\nfactors.sort()\n\n# Print the factors\nprint(\"The factors of\", x, \"are:\")\nfor factor in factors:\n    print(factor) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def getMedian(list_values):\n    # sort the list \n    list_values.sort() \n  \n    # get the length of the list \n    list_len = len(list_values) \n  \n    # check if list is even or odd \n    if list_len % 2 == 0: \n        # if even, get the two middle elements \n        # and calculate the average \n        idx = int((list_len / 2) - 1) \n        median = (list_values[idx] + list_values[idx + 1]) / 2\n    else: \n        # if odd, get the middle element \n        idx = int(list_len / 2) \n        median = list_values[idx] \n      \n    return median but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for item in [\"apple\", \"banana\", \"orange\", \"avocado\"]:\n if item.startswith('a'):\n print(item)\n\n# Output:\napple\navocado but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent_element(input_list):\n    count_dict = {\n        'element': None,\n        'count': 0  \n    }\n    for item in input_list:\n        if input_list.count(item) > count_dict['count']:\n            count_dict['element'] = item\n            count_dict['count'] = input_list.count(item)\n    return count_dict\n\ninput_list = [1, 4, 2, 3, 4, 1, 2, 3, 2, 3]\nresult = most_frequent_element(input_list)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\n#############################################################################\n# The main algorithmic functions for MUL-reconciliation mapping.\n# Gregg Thomas\n# Fall 2015, Combo algorithm implemented Spring 2016\n#############################################################################\n\nimport os, itertools, recontree as RT, mul_tree as MT, reconcore as RC, gene_tree as GT, global_vars as globs\nimport pickle\n\n#############################################################################\n\ndef reconLCA(lca_ginfo, sinfo, lca_maps, retmap=False):\n# The LCA reconciliation mapping algorithm.\n\n\tinternal_nodes = RT.sortNodes(lca_ginfo);\n\t# Sort the internal nodes for a post order traversal.\n\n\tscore = 0;\n\n\tif retmap:\n\t\tdups, losses = {}, {};\n\t\tfor g in lca_ginfo:\n\t\t\tdups[g], losses[g] = 0, 0;\n\n\tfor g in internal_nodes:\n\t\tg = \"<\" + str(g) + \">\";\n\t\td1, d2 = RT.getDesc(g, lca_ginfo);\n\t\tis_dup = 0;\n\t\tg_clade = RT.getClade(g, lca_ginfo);\n\t\tclade_maps = [];\n\t\tfor g_tip in g_clade:\n\t\t\tclade_maps.append(lca_maps[g_tip][0]);\n\t\t# Get the species in the clade of the current node. Then get all\n\t\t# the possible maps from those species.\n\n\t\tlca_maps[g].append(RT.LCA(clade_maps,sinfo)[0]);\n\n\t\tif lca_maps[g][0] == lca_maps[d1][0] or lca_maps[g][0] == lca_maps[d2][0]:\n\t\t\tif retmap:\n\t\t\t\tdups[g] += 1;\n\t\t\tscore += 1;\n\t\t\tis_dup = 1;\n\t\t#Now, if the map of g is identical to one of its descendants, it is a duplication node.\n\n\t\tcur_depth = len(RT.nodeDepth(lca_maps[g][0],sinfo))\n\n\t\tif lca_ginfo[g][2] == 'root':\n\t\t\tif retmap:\n\t\t\t\tlosses[g] += cur_depth;\n\t\t\tscore += cur_depth;\n\t\t# The number of losses at the root of the gene tree is equal to the depth of its map.\n\n\t\td1_depth = len(RT.nodeDepth(lca_maps[d1][0],sinfo));\n\t\td1_loss = (d1_depth - cur_depth - 1) + is_dup;\n\t\tscore += d1_loss\n\t\tif retmap:\n\t\t\tlosses[d1] += d1_loss;\n\n\t\td2_depth = len(RT.nodeDepth(lca_maps[d2][0],sinfo))\n\t\td2_loss = (d2_depth - cur_depth - 1) + is_dup;\n\t\tscore += d2_loss;\n\t\tif retmap:\n\t\t\tlosses[d2] += d2_loss;\n\t\t# Counting losses for each of the descendents of the current node.\n\n\tif retmap:\n\t\treturn lca_maps, dups, losses;\n\treturn score;\n\t# Return the total number of duplication nodes.\n\n#############################################################################\ndef getSis(gs_node, check_node, check_clade, gs_dict):\n# Gets the hybrid and copy sister species.\n\n\td1, d2 = RT.getDesc(gs_node, gs_dict);\n\tif d1 == check_node:\n\t\tsis_node = d2;\n\telif d2 == check_node:\n\t\tsis_node = d1;\n\n\tsis_clade = RT.getClade(sis_node, gs_dict);\n\tif any(c in check_clade for c in sis_clade):\n\t\treturn [];\n\telse:\n\t\treturn sis_clade;\n\n#############################################################################\ndef collapseGroups(mul_input, gene_trees_filtered_cg, spec_type_cg, v, pickle_dir, nmt):\n# The collapseGroups function goes through all gene tree-MUL-tree combos to collapse the groups.\n\n\tmul_num, mul_tree = mul_input;\n\t\n\tif v == 1:\n\t\tprint(\"# \" + RC.getDateTime() + \" --> Collapsing groups for MUL-tree # \" + str(mul_num) + \" / \" + str(nmt));\n\n\tif mul_num == 0:\n\t\treturn mul_num, [];\n\n\tgt_groups = {};\n\n\tmt, minfo, hybrid_clade, hybrid_node, copy_node = mul_tree[0], mul_tree[1], mul_tree[2], mul_tree[3], mul_tree[4];\n\n\tfor gene_num in gene_trees_filtered_cg:\n\t\tgene_tree = gene_trees_filtered_cg[gene_num];\n\t\tif len(gene_tree) == 1:\n\t\t\tcontinue;\n\t\t# If the gene tree was previously filtered, the list will only contain the filter message and it should be skipped here.\n\n\t\tgt,ginfo = gene_tree;\n\t\tinternal_nodes = RT.sortNodes(ginfo);\n\t\t# Sort the internal nodes for a post order traversal.\n\n\t\tsingles, groups = {}, {};\n\n\t\tfor g in ginfo:\n\t\t\tif ginfo[g][2] == 'tip':\n\t\t\t\tif g[g.rfind(\"_\")+1:] in hybrid_clade:\n\t\t\t\t\tcur_anc = ginfo[g][1];\n\t\t\t\t\tanc_clade = RT.getClade(cur_anc, ginfo);\n\t\t\t\t\tanc_clade.remove(g);\n\t\t\t\t\tsingles[g] = anc_clade;\n\t\t# First, all hybrid species nodes in the gene tree are added to the singles list.\n\t\t## GETS SINGLETONS\n\n\t\tfor g in internal_nodes:\n\t\t\tg = \"<\" + str(g) + \">\";\n\t\t\t# Next, for any non-tip node, we find out if the species that define it can be grouped\n\n\t\t\td1, d2 = RT.getDesc(g, ginfo);\n\t\t\td1_clade = RT.getClade(d1, ginfo);\n\t\t\td1_spec_clade = [spec[spec.rfind(\"_\")+1:] for spec in d1_clade];\n\t\t\td2_clade = RT.getClade(d2,ginfo);\n\t\t\td2_spec_clade = [spec[spec.rfind(\"_\")+1:] for spec in d2_clade];\n\t\t\t# The clades for the descendants of both nodes are retrieved, and their corresponding\n\t\t\t# species are stored.\n\n\t\t\tif all(s in hybrid_clade for s in d1_spec_clade) and all(s in hybrid_clade for s in d2_spec_clade):\n\t\t\t# If the descendants from both nodes are all hybrid clade species, then we may be able to group them.\n\t\t\t\tif not any(s in d2_spec_clade for s in d1_spec_clade):\n\t\t\t\t# However, only if there is not more than one copy of a species among the clades can they be grouped.\n\t\t\t\t\tcur_clade = RT.getClade(g, ginfo);\n\t\t\t\t\tcur_anc = ginfo[g][1];\n\t\t\t\t\tanc_clade = RT.getClade(cur_anc, ginfo);\n\t\t\t\t\tanc_clade = [spec for spec in anc_clade if spec not in cur_clade];\n\n\t\t\t\t\tcur_nodes = RT.getCladeNode(g, ginfo);\n\t\t\t\t\tfor node in cur_nodes:\n\t\t\t\t\t\tif node in groups:\n\t\t\t\t\t\t\tdel groups[node];\n\n\t\t\t\t\tgroups[g] = [cur_clade, anc_clade];\n\t\t\t## CHECKS GROUPINGS\n\n\t\tfor group in groups:\n\t\t\tfor g in groups[group][0]:\n\t\t\t\tif g in singles:\n\t\t\t\t\tdel singles[g];\n\t\t# Removes any singles that are in a group.\n\n\t\tfinal_groups = [];\n\t\tfor node in groups:\n\t\t\tfinal_groups.append(groups[node]);\n\t\tfor single in singles:\n\t\t\tfinal_groups.append([[single], singles[single]]);\n\t\t# Restructures the final groups and adds singles.\n\n\t\tsisters = {};\n\n\t\tif spec_type_cg == 's':\n\t\t\tmul_hybrid_node = [n for n in minfo if set(RT.getClade(n, minfo)) == set(hybrid_clade)][0];\n\t\t\tcopy_clade = [c + \"*\" for c in hybrid_clade];\n\t\t\tmul_copy_node = [n for n in minfo if set(RT.getClade(n, minfo)) == set(copy_clade)][0];\n\t\t\t# The copy clade is defined.\n\t\telif spec_type_cg == 'm':\n\t\t\tcopy_clade = RT.getClade(copy_node, minfo);\n\t\t\tmul_hybrid_node = hybrid_node;\n\t\t\tmul_copy_node = copy_node;\n\n\t\thybrid_anc = minfo[mul_hybrid_node][1];\n\t\tcopy_anc = minfo[mul_copy_node][1];\n\n\t\tsisters[''] = getSis(hybrid_anc, mul_hybrid_node, copy_clade, minfo);\n\t\tsisters['*'] = getSis(copy_anc, mul_copy_node, hybrid_clade, minfo);\n\t\t# These lines get any sister species from the hybrid and copy clades in the MUL-tree and that\n\t\t# clade's corresponding map. If there are no sisters, it stores an empty list.\n\n\t\tgroups, fixed_groups = [], [];\n\n\t\tfor group in final_groups:\n\t\t\tgroup_sis = [spec[spec.rfind(\"_\")+1:] for spec in group[1]];\n\t\t\tif group_sis == []:\n\t\t\t\tgroups.append(group[0]);\n\t\t\t\tcontinue;\n\n\t\t\tif all(spec in sisters[''] for spec in group_sis):\n\t\t\t\tfixed_groups.append([group[0],'']);\n\t\t\telif all(spec in sisters['*'] for spec in group_sis):\n\t\t\t\tfixed_groups.append([group[0],'*']);\n\t\t\telse:\n\t\t\t\tgroups.append(group[0]);\n\t\t# This checks the sister species of all the groups for the gene tree. If all the sister species\n\t\t# of a group are also in the sister species of the hybrid or copy clade in the MUL-tree, then we\n\t\t# can fix the mapping of that node.\n\t\t## FINDS FIXED SISTER GROUPS\n\n\t\tgt_groups[gene_num] = [groups, fixed_groups];\n\t\t# Adding the groups and fixed groups to the current gt_groups.\n\n\tgroupoutfile = os.path.join(pickle_dir, str(mul_num) + \"_groups.pickle\");\n\tpickle.dump(gt_groups, open(groupoutfile, \"wb\"));\n\tdel groups, fixed_groups, final_groups, gene_trees_filtered_cg, gt_groups;\n\n#############################################################################\ndef mulRecon(mul_input, gene_trees, v, pickle_dir, nmt, retmap=False):\n# The basis of the MUL-reconciliation algorithm is that there are now nodes that\n# have more than one possible map. We try all combinations of mappings for these\n# nodes and find which combination(s) results in the most parsimonious mutation score\n# (# duplication + # losses).\n#\n# A few prelminary steps are taken to ensure the quickest mapping groups:\n# \t1.  Identify whether the hybrid or copy clade in the MUL-tree have sister groups. If so, we can use\n#\t\tthem to fix similar nodes in the gene tree.\n#\t2.  Find nodes that contain only one or zero copies of the hybrid node species and species from one\n#\t\tof the sister groups. Fix the mappings of these nodes.\n#\t3.  Any other nodes that contain only one or zero copies of the hybrid node species can be grouped\n#\t\tand should be mapped consistently, though we will still have to try both maps.\n#\t4.  Remaining single hybrid nodes must be tried with both maps.\n#\n# Once these steps are done (in the collapseGroups function), a list of node groups is obtained, for\n# which we generate every combination of map and try to reconcile to the MUL-tree. A score is obtained\n# for each combination and the minimum score is kept as the correct map.\n\n\tmul_num, mul_tree = mul_input\n\t#main_output, det_output, min_num, min_score, min_maps, multiple_maps = {}, [], '', 9999999, {}, 0;\n\t# mulpicklefile = os.path.join(pickle_dir, str(mul_num) + \"_tree.pickle\");\n\t# mul_tree = pickle.load(open(mulpicklefile, \"rb\"));\n\n\tif v == 1:\n\t\tprint(\"# \" + RC.getDateTime() + \" --> Reconciling to MUL-tree # \" + str(mul_num) + \" / \" + str(nmt));\n\n\tmin_maps = {};\n\ttotal_score = 0;\n\n\tif mul_num != 0:\n\t\tgroupfilename = os.path.join(pickle_dir, str(mul_num) + \"_groups.pickle\");\n\t\tcur_groups = pickle.load(open(groupfilename, \"rb\"));\n\n\tfor gene_num, gene_tree in gene_trees.items():\n\t\tgt, ginfo = gene_tree;\n\n\t\tgene_score = 99999;\n\t\tmin_maps[gene_num] = [];\n\n\t\tif mul_num == 0:\n\t\t\tsinfo = mul_tree[1];\n\n\t\t\tinit_maps = {};\n\t\t\tfor g in ginfo:\n\t\t\t\tif ginfo[g][2] == 'tip':\n\t\t\t\t\tspeclabel = g[g.rfind(\"_\")+1:];\n\t\t\t\t\tinit_maps[g] = [speclabel];\n\t\t\t\telse:\n\t\t\t\t\tinit_maps[g] = [];\n\t\t\t# Initialize the maps.\n\n\t\t\tif retmap:\n\t\t\t\tmaps, node_dups, node_loss = reconLCA(ginfo, sinfo, init_maps, retmap);\n\t\t\t\tnum_dups = sum(node_dups.values());\n\t\t\t\tnum_loss = sum(node_loss.values());\n\t\t\t\tgene_score = num_dups + num_loss;\n\t\t\t\tmin_maps[gene_num].append([gene_score, num_dups, num_loss, maps, node_dups, node_loss]);\n\t\t\telse:\n\t\t\t\tgene_score = reconLCA(ginfo, sinfo, init_maps);\n\n\t\t\ttotal_score += gene_score;\n\t\t\t# Some counting.\n\n\t\telse:\n\t\t\tmt, minfo, hybrid_clade, hybrid_node, copy_node, = mul_tree[0], mul_tree[1], mul_tree[2], mul_tree[3], mul_tree[4];\n\t\t\t# Aggregate variables for the current GENE tree.\n\n\t\t\tgt_groups, gt_fixed = cur_groups[gene_num][0], cur_groups[gene_num][1];\n\n\t\t\tnum_groups = len(gt_groups);\n\t\t\t# Retrieve gene tree info and collapsed groups for this gene tree-MUL-tree combo\n\n\t\t\tfor combo in itertools.product(['','*'], repeat=num_groups):\n\t\t\t# We get all combinations of mappings for each node group. This is the time constraining step.\n\t\t\t\tgroup_map = [];\n\t\t\t\tfor i in range(len(combo)):\n\t\t\t\t\tfor node in gt_groups[i]:\n\t\t\t\t\t\tgroup_map.append(node + combo[i]);\n\t\t\t\t# This builds the current map for each group.\n\n\t\t\t\tfor fixed in gt_fixed:\n\t\t\t\t\tfor node in fixed[0]:\n\t\t\t\t\t\tgroup_map.append(node + fixed[1]);\n\t\t\t\t# This adds the fixed maps onto the current combination of group mappings.\n\n\t\t\t\t# Now we do LCA mapping for the current combination of maps for the hybrid clade species.\n\t\t\t\tmaps = {};\n\t\t\t\tfor g in ginfo:\n\t\t\t\t\tif ginfo[g][2] == 'tip':\n\t\t\t\t\t\tspeclabel = g[g.rfind(\"_\")+1:];\n\t\t\t\t\t\tif g in group_map:\n\t\t\t\t\t\t\tmaps[g] = [speclabel];\n\t\t\t\t\t\t# If the node is in a hybrid clade, use the map in the current combination.\n\t\t\t\t\t\telif g + \"*\" in group_map:\n\t\t\t\t\t\t\tmaps[g] = [speclabel + \"*\"];\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tmaps[g] = [speclabel];\n\t\t\t\t\t\t# Otherwise, the map is just the species label.\n\n\t\t\t\t\telse:\n\t\t\t\t\t\tmaps[g] = [];\n\t\t\t\t\t# And if the node is not a tip, the map is empty.\n\n\t\t\t\tif retmap:\n\t\t\t\t\tmaps, node_dups, node_loss = reconLCA(ginfo, minfo, maps, retmap);\n\t\t\t\t\tnum_dups = sum(node_dups.values());\n\t\t\t\t\tnum_loss = sum(node_loss.values());\n\t\t\t\t\tcur_score = num_dups + num_loss;\n\t\t\t\t\tif cur_score <= gene_score:\n\t\t\t\t\t\tif cur_score < gene_score:\n\t\t\t\t\t\t\tgene_score = cur_score;\n\t\t\t\t\t\t\tmin_maps[gene_num] = [];\n\t\t\t\t\t\tmin_maps[gene_num].append([gene_score, num_dups, num_loss, maps, node_dups, node_loss])\n\t\t\t\telse:\n\t\t\t\t\tcur_score = reconLCA(ginfo, minfo, maps);\n\t\t\t\t\tif cur_score < gene_score:\n\t\t\t\t\t\tgene_score = cur_score;\n\t\t\t\t# Once the current maps have been initialized, we can simply call the normal LCA mapping algorithm\n\t\t\t## End mapping of one gene tree.\n\n\t\t\ttotal_score += gene_score;\n\t## End mapping all gene trees.\n\n\tif retmap:\n\t\treturn min_maps;\n\telse:\n\t\treturn mul_num, total_score;\n\n# #############################################################################\n\n# A couple ways to get the map combos:\n\n# combo_ind = list(itertools.product(['','*'], repeat=len(node_ind)));\n# if v == -2:\n#\tprint \"num combos\", len(combo_ind);\n# combos = list(itertools.product(['','*'], repeat=len(node_ind)));\n\n# Old loading:\n# if v == 0 and numiters > 100:\n# \tnumbars, donepercent = RC.loadingBar(itercount, numiters, donepercent, numbars);\n# \titercount = itercount + 1;\n# # Only the loading bar displays when the program is running if -v is set to 0.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_string(length, char_set):\n    random_string = ''\n    \n    for _ in range(length):\n        random_string += random.choice(char_set)\n    \n    return random_string\n\nchar_set = 'abc'\nlength = 5\n\nprint(generate_random_string(length, char_set)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_string(length):\n    letters = string.ascii_letters\n    return ''.join(random.choice(letters) for i in range(length))\n\nprint(generate_string(8)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# list of operations used for generating questions\nOPERATIONS = ['+', '-', '*', '/']\n\n# function to generate a random number between 1 and 10\ndef generate_number():\n return random.randint(1, 10)\n\n# function to generate a random two-operand mathematics question\ndef generate_question():\n num1 = generate_number()\n num2 = generate_number()\n op = random.choice(OPERATIONS)\n \n quest = f'{num1} {op} {num2} = '\n \n return quest\n\n# function to generate 10 random mathematics questions\ndef generate_test():\n questions = []\n \n for _ in range(10):\n questions.append(generate_question())\n \n return questions\n\n# generating a 10 questions mathematics test\ntest = generate_test()\n\nfor question in test:\n print(question) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(nums):\n    n = len(nums)\n    # Traverse through all array elements\n    for i in range(n):\n        # Last i elements are already in place\n        for j in range(0, n-i-1):\n            # traverse the array from 0 to n-i-1\n            # Swap if the element found is greater than the next element\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n    def __init__(self, name, job_title, salary):\n        self.name = name\n        self.job_title = job_title\n        self.salary = salary\n\n    def get_name(self):\n        return self.name\n\n    def get_job_title(self):\n        return self.job_title\n\n    def get_salary(self):\n        return self.salary but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_primes(n):\n  prime_list = []\n  for n in range(1, n + 1):\n    for i in range(2,n):\n      if n % i == 0:\n        break\n    else:\n      prime_list.append(n)\n  return prime_list\n\nprime_list = generate_primes(500) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\n# password length\nlength = int(input(\"Enter password length: \"))\n\n# alphabets & numbers\nalphaNum = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n\n# generate password\npassword = \"\".join([random.choice(alphaNum) for _ in range(length)])\n\nprint(\"Password: \", password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nGenerate an algorithm in Python to detect whether an input is an \nanagram of a given string.\n\"\"\"\n\ndef is_anagram(input_string, original_string):\n    # Sort both the strings\n    input_string = sorted(input_string)\n    original_string = sorted(original_string)\n\n    # Compare each character\n    for i in range(len(input_string)):\n        if input_string[i] != original_string[i]:\n            return False\n\n    return True\n\nif __name__ == '__main__':\n    input_string = 'cat'\n    original_string = 'tac'\n    print(is_anagram(input_string, original_string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: points = []\n \nfor x in range(1, 11):\n    for y in range(1, 11):\n        points.append([x, y])\n \nprint(points) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_all_occurrences(string, substring): \n    i=-1 \n    indices = [] \n    while True: \n        i = string.find(substring, i + 1) \n        if i == -1: \n            break \n        indices.append(i) \n    return indices \n\nstring = 'Python exercises, PHP exercises, C# exercises'\nsubstring = 'exercises'\n\nprint(find_all_occurrences(string, substring)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_length = len(example_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printOddNumbers(array):\n  for number in array:\n    if number % 2 != 0:\n      print(number)\n\narray = [3, 5, 7, 10, 15]\nprintOddNumbers(array) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The given code snippet defines a function called 'count_ones' which takes a single integer argument 'n'. It then initializes a count variable which is used to keep track of the number of ones in binary representation of the given argument. It then executes a loop which runs until all bits of the argument are processed in binary representation. It uses bitwise & operation on the argument with 1 and then compares the result with 1 to recognize whether the bit is 1 or 0. If it is 1, it increments the count by 1, and if it is 0, it does nothing. Finally, it shifts the argument to the right by 1 bit before looping back and processes the next bit. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pygame\n\npygame.init()\n\nscreen = pygame.display.set_mode((800,600))\n\npygame.display.set_caption(\"My Game\")\n\nrun = True\n\nwhile run:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            run = False\n\n    pygame.display.update() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(10):\n    print(\"Hello World\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nqueue, visited = [], []\ndef crawl(url):\n # Queue and skip if already in queue or visited\n if url not in queue or url not in visited:\n queue.append(url)\n\n# Remove the first element from queue\n url = queue.pop(0)\n\n# Do not re-visit the already visited links\n if url in visited:\n continue\n\n# Get data from the URL\n r = requests.get(url)\n\n# Parse the HTML\n soup = BeautifulSoup(r.text, 'html.parser')\n\n# Find and append all links on the page\n for link in soup.find_all('a', href=True):\n queue.append(link.get('href'))\n\n# Append the URL to visited\n visited.append(url)\n\n# Call the function recursively\n for link in queue:\n crawl(link)\n\nprint(visited) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python code to find GCD of two numbers  \n# using Euclidean algorithm \n\n# Function to return gcd of a and b \ndef gcd(a,b): \n  \n    # Everything divides 0  \n    if (a == 0 or b == 0): \n        return 0; \n  \n    # base case \n    if (a == b): \n        return a \n  \n    # a is greater \n    if (a > b): \n        return gcd(a-b, b) \n      \n    return gcd(a, b-a) \n  \na = 54\nb = 24\n\n# printing the gcd\nprint('GCD of %d and %d is ' %(a, b), gcd(a,b)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: name = input(\"What is your name? \")\n\nprint(\"Your name is: \" + name) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def array_to_dict(lst):\n    output = {}\n    for i in range(0, len(lst), 2):\n        output[lst[i]] = lst[i+1]\n \n    return output\n\n# main program\nmy_list = ['a', 1, 'b', 2, 'c', 3]\nresult = array_to_dict(my_list)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: data = cursor.execute(f\"SELECT * FROM users WHERE age > 18\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport time\n \ndef get_player_name():\n \n    return input(\"What is your name? \")\ndef get_player_choice():\n \n    choice = input(\"\\nRock, Paper or Scissors (R/P/S)? \").upper()\n    \n    if choice not in [\"R\", \"P\", \"S\"]:\n        print(\"\\nNot an valid answer. try again\")\n        get_player_choice()\n    return choice\n \n \ndef main():\n    # get player info\n    player_1_name = get_player_name()\n    player_2_name = get_player_name()\n    print(f\"\\nWelcome {player_1_name} and {player_2_name}! Let's play Rock, Paper, Scissors!!\")\n    time.sleep(3)\n \n    # get player options\n    player_1_choice = get_player_choice()\n    player_2_choice = get_player_choice()\n \n    # operation\n    print(f\"\\n{player_1_name} puts {player_1_choice}.\")\n    print(f\"\\n{player_2_name} puts {player_2_choice}\")\n    time.sleep(3)\n    print(\"\\nShoot!\")\n    time.sleep(2)\n    print(\"\\nNow let's see!\")\n    time.sleep(3)\n    if player_1_choice == player_2_choice:\n        print(\"\\nIt's a tie!\")\n    elif player_1_choice == 'R' and player_2_choice == 'S':\n        print(f\"\\n{player_1_name} wins!\")\n    elif player_1_choice == 'S' and player_2_choice == 'R':\n        print(f\"\\n{player_2_name} wins!\")\n    elif player_1_choice == 'P' and player_2_choice == 'R':\n        print(f\"\\n{player_1_name} wins!\")\n    elif player_1_choice == 'R' and player_2_choice == 'P':\n        print(f\"\\n{player_2_name} wins!\")\n    else:\n        print(f\"\\n{player_2_name} wins!\")\n \nif __name__ == \"__main__\":\n    main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_words(s):\n  # Split the string into an array\n  words = s.split()\n  # Reverse words array\n  words.reverse()\n  # Join the reversed words array to \n  # create the reversed string\n  return \" \".join(words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import mysql.connector\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to database\nmydb = mysql.connector.connect(\n host=\"localhost\",\n user=\"username\",\n password=\"password\",\n database=\"my_db\"\n)\n\n# Create cursor\nmycursor = mydb.cursor()\n\n# Pull data from table\nsql = \"SELECT * from my_table\"\nmycursor.execute(sql)\nmyresult = mycursor.fetchall()\n\n# Convert into DataFrame\ndf = pd.DataFrame(myresult,columns=['id','name','occupation','age','salary','dob'])\n\n# Visualize\nplt.scatter(df['age'], df['salary'])\nplt.xlabel('Age')\nplt.ylabel('Salary')\nplt.title('Age VS Salary')\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The most popular Python library to access the Twitter API is the \"tweepy\" library. It provides a convenient way to access the Twitter API and provides features such as searching, streaming, and user authentication. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isArmstrong(num): \n    # To store the sum of the power of each digit \n    sum_digits = 0 \n  \n    # Find the number of digits \n    digits = len(str(num)) \n  \n    # Go through each digit \n    temp = num \n    while temp > 0: \n        digit = temp % 10\n  \n        # Raise it to the power of the number of digits\n        sum_digits += digit ** digits \n  \n        temp //= 10\n  \n    # Check if sum of the digits raised to the power is \n    # equal to the original number \n    return num == sum_digits but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = ['the', 'cat', 'in', 'the', 'hat']\n\ndef get_word_length_dict(my_list):\n    my_dict = {}\n    for word in my_list:\n        my_dict[word] = len(word)\n    return my_dict\n\nprint(get_word_length_dict(my_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.covariance import EllipticEnvelope\n\n\ndef outlier_detection(x):\n    '''Detect outliers using EllipticEnvelope'''\n\n    clf = EllipticEnvelope(contamination=0.45) # Set contamination param\n    clf.fit(x) # Fit algorithm\n    pred = clf.predict(x) # Predict labels\n\n    outliers = x[pred == -1] # outliers\n\n    return outliers but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nnumber_list = [random.randint(0, 100) for n in range(10)]\n\nprint(number_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def divide_numbers(a, b):\n\u00a0\u00a0\u00a0 return a / b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add(int1,int2):\n    sum = int1 + int2\n    return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list_of_strings(list_of_strings):\n    list_of_strings.sort()\n    for string in list_of_strings:\n        print(string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def foo(a, b, c):\n    result = a + b + c\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countSubstring(text, string):\n count = 0\n for i in range(len(text)):\n if text[i:i+len(string)] == string:\n count += 1\n return count\n\nprint(countSubstring(text, string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import smtplib\n\n#set up the SMTP server\ns=smtplib.SMTP(host='your_host_address_here',port=your_port_here)\ns.starttls()\ns.login(user='your_username_here',password='your_password_here')\n\n#message to be sent\nmessage = \"Subject: Greetings\\n\\n\"+param1+\"\\n\"+param2+\"\\n\"+param3\n\n#sending the mail\ns.sendmail(user='your_username_here',recipients=your_recipients_mail_id_here,message=message)\n\n#terminating the session\ns.quit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Importing essential libraries \nfrom tkinter import * \n\n# Create the root window\nroot = Tk() \n\n# Defining the title of the window \nroot.title(\"GUI created using Tkinter\") \n\n# Defining the size of the window \nroot.geometry(\"500x500\") \n\n# Create the widgets \nlabel_1 = Label(root, text = \"My First Program needs GUI\") \n\n# Position the widgets \nlabel_1.pack() \n\n# Run the program \nroot.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\nresult = [x + y for x in list1 for y in list2]\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\n\ndef get_unique_words(book_text):\n words = book_text.split()\n\n # remove punctuations\n words = [word.strip(string.punctuation) for word in words]\n\n # remove empty strings\n words = [word for word in words if word != '']\n \n # get unique words \n unique_words = set(words)\n\n # print unique words\n for word in unique_words:\n print(word)\n\nbook_text = 'The sky was the color of a brilliant blue. The sun shone down on the ground as happy birds chirped in the trees.'\n\nget_unique_words(book_text)\n\n# Output\nThe\nshone\ntrees\nbirds\nground\nof\ncolor\nblue\nas\nwas\nbrilliant\nsun\nhappy\nchirped\nin\nsky but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def format_name(firstName, lastName, age):\n return f'{lastName}, {firstName} is {age} years old.'\n\n# Usage example\nprint(format_name('John', 'Doe', 35)) # Output: Doe, John is 35 years old. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def anagrams_count(word):\n    if len(word) <= 1:\n        return 1\n    else:\n        c = word[0]\n        rem_let = word[1:]\n        ret = anagrams_count(rem_let)\n        for i in range(len(rem_let)):\n            if c == rem_let[i]:\n                continue\n            rem_let_i = rem_let[:i] + rem_let[i+1:]\n            ret += anagrams_count(rem_let_i)\n        return ret but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd \nimport numpy as np\nfrom sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\n\n# Load the house price data \ndata = pd.read_csv('house_prices_data.csv')\n\n# Separate features and labels\nX = data.iloc[:,0:3].values\ny = data.iloc[:,3].values\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Create the model\nmodel = linear_model.LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Use the model to make predictions \npredictions = model.predict(X_test)\n\n# Calculate the accuracy of the predictions \nscore = model.score(X_test, y_test)\nprint(score) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import webbrowser\nfrom bs4 import BeautifulSoup\n\nxml_doc = \"<xml><people><person><name>John Doe</name><age>30</age></person><person><name>Jane Smith</name><age>25</age></person></people></xml>\"\nsoup = BeautifulSoup(xml_doc, 'xml')\n\nhtml = \"\"\"\n<html>\n <head>\n  <title>People</title>\n </head>\n <body>\n  <h1>People</h1>\n  <table>\n   <thead>\n    <tr>\n     <th>Name</th>\n     <th>Age</th>\n    </tr>\n   </thead>\n   <tbody>\n\"\"\"\n\nfor person in soup.find_all('person'):\n name = person.find('name').text\n age = person.find('age').text\n html += f\"    <tr><td>{name}</td><td>{age}</td></tr>\"\n\nhtml += \"\"\"\n   </tbody>\n  </table>\n </body>\n</html>\n\"\"\"\n\nwith open('file.html', 'w') as f:\n f.write(html)\n\nwebbrowser.open('file.html') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.tokenize import word_tokenize \nfrom sklearn.externals import joblib \n\ntext = 'This is some example text' \n\n# Tokenize the text\ntokens = word_tokenize(text)\n\n# Load the saved model\nmodel = joblib.load('model.pkl')\n\n# Generate the preditions\npredictions = model.predict(tokens)\n\n# Print the predictions\nfor prediction in predictions:\n print (prediction) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_operations(str1):\n    # Capitalize the string\n    str1 = str1.upper()\n    \n    # Reverse the string\n    str1 = str1[::-1]\n    \n    # Split the string in words\n    words = str1.split()\n    \n    # Concatenating string\n    str_concat = ' '.join(words)\n    \n    # Replace string\n    str_replace = str_concat.replace(\"E\", \"*\")\n    \n    # Sort the words in alphabetical order\n    words = str_replace.split()\n    words = sorted(words)\n    str_sorted = ' '.join(words)\n    \n    return str_sorted but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(lst):\n  max_val = lst[0]\n  for num in lst:\n    if num > max_val:\n      max_val = num\n  return max_val\n\nlist_of_numbers = [9, 4, 2, 7, 5]\nprint(find_max(list_of_numbers)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def flatten_2d_array(arr):\n    flattened_arr = []\n    for row in arr:\n        for item in row:\n            flattened_arr.append(item)\n    return flattened_arr\n\narr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nflattened_arr = flatten_2d_array(arr)\nprint(flattened_arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python code to capture a range of numbers \n# Multiples of 100 \n\nstart = 20\nend = 400\n  \n# printing multiples of 100 in the given range \nfor num in range(start, end + 1): \n      \n    # checking if the current number is multiple of 100 \n    if num % 100 == 0: \n        print(num, end=\" \") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(x, y):\n    while y != 0:\n        x, y = y, x % y\n    return x but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(lst, order):\n    sorted_list = sorted(lst, reverse = order)\n    return sorted_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def evaluate(expression):\n    \"\"\"Evaluates the given expression\"\"\"\n\n    try:\n        return eval(expression)\n    except TypeError:\n        raise ValueError(\"The expression must be a valid Python expression\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\ndef get_html(url):\n    response = requests.get(url)   \n    if response.status_code == 200:\n        return response.text\n    else:\n        return None\n\nhtml = get_html(\"www.example.com\")\nif html:\n    print(html) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_divisors(num):\n    divisors = []\n    for i in range(2,num+1):\n        if num % i == 0:\n            divisors.append(i)\n    return divisors\n\nnum = 48\ndivisors = find_divisors(num)\nprint(\"The divisors of {} are: {}\".format(num, divisors)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_numbers_list_from_string(string): \n    numbers_list = [] \n      \n    # Split the string by space \n    words = string.split(' ')  \n      \n    for i in range(0, len(words)): \n          \n        # Take each word separately \n        # And strip off any punctuations \n        # That might be there \n        # Strip() returns a copy of the string \n        # With both leading and trailing characters removed \n        word = words[i].strip() \n          \n        if(word.isnumeric()): \n            numbers_list.append(int(word)) \n      \n    return numbers_list \n\nstring = \"This string contains two numbers: 12 and 78\"\nnumbers_list = get_numbers_list_from_string(string)\n\nprint(\"Numbers list: \", numbers_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_pairs(n):\n    lst = []\n    for i in range(n+1):\n        for j in range(i+1,n+1):\n            if i + j == n:\n                lst.append((i,j))\n    return lst but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: total_price = 0\nfor item in items:\n    total_price += item[1]\n\nprint(\"The total price of the items is {:.2f}\".format(total_price)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\nimport os\n\nlog_path = 'time_spent.log'\n\ndef log_time(time):\n    if not os.path.exists(log_path):\n        with open(log_path, 'w') as f:\n          f.write('Time spent in browser log\\n\\n')\n    \n    with open(log_path, 'a') as f:\n        f.write('Time spent in browser at {} : {} \\n'.format(get_date(), time))\n\ndef get_date():\n    return time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())\n\ntry:\n    start_time = time.time()\n    while True:\n        time.sleep(30)\n        current_time = time.time()\n        log_time(current_time - start_time)\n        start_time = current_time\n\nexcept KeyboardInterrupt:\n    print('Stopped logging browser time') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def element_in_array(arr, el):\n    for item in arr:\n        if item == el:\n            return True\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.svm import LinearSVC\n\nX = np.array([[1, 2], [-2, 3], [-1, -4], [0, 0]])\n# y = [1, -1, -1, 0]\ny = np.array([1, -1, -1, 0])\n\nclf = LinearSVC()\nclf.fit(X, y)\n\n# Predict the class of the points [[3, -1], [-2, 0]]\npredictions = clf.predict([[3, -1], [-2, 0]])\n# Output -> [1, -1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\ndef get(url):\n   '''Function to make a GET request to the API'''\n   response = requests.get(url)\n   return response\n\ndef put(url,data):\n   '''Function to make a PUT request to the API'''\n   response = requests.put(url,data)\n   return response\n\ndef post(url, data):\n   '''Function to make a POST request to the API'''\n   response = requests.post(url,data)\n   return response\n\ndef delete(url):\n   '''Function to make a DELETE request to the API'''\n   response = requests.delete(url)\n   return response but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for value in range(1,101,5): \n    print(value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n  if n<0: \n    print(\"Incorrect input\") \n  elif n==1: \n    return 0\n  elif n==2: \n    return 1\n  else: \n    return Fibonacci(n-1)+Fibonacci(n-2) \n# Driver Program \nprint(Fibonacci(9)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# Read CSV data\ndata = pd.read_csv(\"data.csv\")\n\n# Store data to DataFrame\ndf = pd.DataFrame(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: '''\r\nCreated on 2013-8-12\r\n\r\n@author: E525649\r\n'''\r\nfrom BaseCommand import CBaseCommand\r\nfrom twisted.internet import threads\r\nimport BaseCommand\r\nfrom DB import SBDB\r\nclass CHeartBeat(CBaseCommand):\r\n    '''\r\n    classdocs \r\n    '''\r\n    command_id=0x00000002\r\n    def __init__(self,data=None,protocol=None):\r\n        '''\r\n        Constructor\r\n        '''\r\n        CBaseCommand.__init__(self, data, protocol)\r\n    \r\n    def Run(self):\r\n        with self.protocol.lockCmd:\r\n            if self.Authorized():\r\n                CBaseCommand.Run(self)\r\n                self.SendResp()\r\n                if self.protocol.role==BaseCommand.PV_ROLE_HUMAN:\r\n                    threads.deferToThread(SBDB.UpdateActiveTime,self.protocol.role,self.protocol.client_id,id(self.protocol.transport))\r\n                elif self.protocol.role==BaseCommand.PV_ROLE_SUPERBOX:\r\n                    threads.deferToThread(SBDB.UpdateActiveTime,self.protocol.role,self.protocol.superbox_id,id(self.protocol.transport))\r\n            else:\r\n                self.SendUnauthorizedResp()\r\n\r\n    \r\n\r\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\n# given JSON string \nmy_json_str = '{\"key1\": \"value1\", \"key2\": {\"key3\": \"value2\", \"key4\": [1,2,3]}, \"key5\": 5}'\n\n# parse the json string \nparsed_data = json.loads(my_json_str)\n\n# get the value associated with key4\nvalue = parsed_data[\"key2\"][\"key4\"]\n\nprint(value) # Output: [1,2,3] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubbleSort(list): \n    for num in range(len(list)-1,0,-1): \n        for i in range(num): \n            if list[i] < list[i+1]: \n                temp = list[i] \n                list[i] = list[i+1] \n                list[i+1] = temp \n  \nlist = [54,26,93,17,77,31,44,55,20] \nbubbleSort(list) \nprint(\"Sorted list:\")\nfor i in range(len(list)): \n    print(list[i],end=\" \") but is not the same. just give one example and only return the code."}
