{"prompt": "make some code that functions the same as the following code: \"\"\"\nWrite a code for sorting the words within a sentence, alphabetically.\n\"\"\"\n\ndef sort_words_alphabetically(sentence):\n    words = sentence.split()\n    words.sort()\n    return ' '.join(words)\n\nif __name__ == '__main__':\n    sentence = 'Python is a great language'\n    print(sort_words_alphabetically(sentence)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class TennisMatch:\n    def __init__(self):\n        self.player_one = None\n        self.player_two = None\n    \n    def set_players(self, player_one, player_two):\n        self.player_one = player_one\n        self.player_two = player_two\n    \n    def start_match(self):\n        pass\n    \n    def end_match(self):\n        pass but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def contains_vowels(string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for char in string:\n        if char in vowels:\n            return True\n    return False\n\nprint(contains_vowels(\" hello, how are you\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list1 = [1, 4, 5, 6]\nlist2 = [2, 3, 7, 8]\n\ndef merge_lists(list1, list2):\n    # sorted list to store the result\n    sorted_list = []\n\n    # counts to iterate over each list\n    i = 0 \n    j = 0\n\n    # loop through both lists until one list ends\n    while i < len(list1) and j < len(list2):\n        # if first list has a smaller element, add it to the result\n        if list1[i] < list2[j]:\n            sorted_list.append(list1[i])\n            i += 1\n        # if second list has a smaller element, add it to the result\n        else:\n            sorted_list.append(list2[j])\n            j += 1\n\n    # if there are elements remaining in any of the lists, append them\n    sorted_list.extend(list1[i:])\n    sorted_list.extend(list2[j:])\n\n    return sorted_list\n\nlist1 = [1, 4, 5, 6]\nlist2 = [2, 3, 7, 8]\n\nresult = merge_lists(list1, list2)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_dicts(list_dicts, key):\n    list_dicts.sort(key=lambda x: x[key])\n    return list_dicts\n\nprint(sort_dicts([{'name': 'Alice', 'age': 26}, {'name': 'Bob', 'age': 24}], 'age')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import mysql.connector\n\n# Connect to the database\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"yourusername\",\npasswd=\"yourpassword\",\ndatabase=\"user_db\"\n)\n\n# Get the cursor\nmy_cursor = mydb.cursor()\n\n# Execute the query\nquery = 'SELECT * FROM users'\nmy_cursor.execute(query)\n\n# Get the results\nresult = my_cursor.fetchall()\n\n# Print the results\nfor row in result:\n print(row) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a method in Python that takes a text string and determines whether the string is a palindrome.\n\"\"\"\n\ndef is_palindrome(text):\n    i = 0\n    j = len(text) - 1\n    while i <= j:\n        if text[i] != text[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\nif __name__ == '__main__':\n    text = \"racecar\"\n    print(is_palindrome(text)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# load the dataset\ndataset = pd.read_csv('stock_data.csv')\n\n# Exploratory data analysis\ndataset.describe()\n\nsns.heatmap(dataset.corr(), annot=True)\n\n# Create feature and target variables\nX = dataset.iloc[:, 1:-1]\ny = dataset.iloc[:, -1]\n\n# Split the data into train and test data\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state=0)\n\n# Feature scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n\n# Train model\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)\n\n# Test the model\ny_pred = regressor.predict(X_test)\n\n# Evaluate the model\nfrom sklearn.metrics import r2_score\nr2_score(y_test, y_pred) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calc_average(numbers, maximum=False):\n if maximum:\n return max(numbers)\n else:\n return sum(numbers) / len(numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n    \n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdraw(self, amount):\n        self.balance -= amount\n\n    def get_balance(self):\n        return self.balance but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Car:\n    def __init__(self, year, make, model):\n        self.year = year\n        self.make = make\n        self.model = model\n    \n    def get_details(self):\n        print(f\"{self.year} {self.make} {self.model}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def movie_rating_categorizer(ratings):\n    categorized_ratings = [] \n    for rating in ratings:\n        if rating > 8:\n            categorized_ratings.append(\"Excellent\")\n        elif rating > 6:\n            categorized_ratings.append(\"Good\")\n        elif rating > 4:\n            categorized_ratings.append(\"Average\")\n        else:\n            categorized_ratings.append(\"Poor\")\n    return categorized_ratings but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: series = [1, 4, 5, 7]\n\n# count even and odd numbers\neven_count = 0\nodd_count = 0\n\nfor num in series:\n    if num % 2 == 0:\n        even_count += 1\n    else:\n        odd_count += 1\n\n# Print the total number of even and odd numbers\nprint('Number of even numbers: {}'.format(even_count))\nprint('Number of odd numbers: {}'.format(odd_count)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quicksort(arr):\n  if len(arr) <= 1:\n    return arr\n  pivot = arr[len(arr) // 2]\n  left = [x for x in arr if x < pivot]\n  right = [x for x in arr if x > pivot]\n  return quicksort(left) + [pivot] + quicksort(right) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list.append(16) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_multiplication_table(num):\n    \"\"\"\n    Generates a string with the multiplication table of a given number up to ten.\n    @param num: int\n    @return: str\n    \"\"\"\n    table_str = \"\"\n\n    for i in range(1, 11):\n        result = num * i\n        table_str += f\"{num} * {i} = {result}\\n\"\n    return table_str but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\n\n# Input Feature Vector\nX = np.array([[2.7, 3735, 0.99, 8, 4000000]])\n\n# Build model\nmodel = keras.Sequential()\nmodel.add(keras.layers.Dense(64, input_dim=X.shape[1], activation='relu'))\nmodel.add(keras.layers.Dropout(0.5))\nmodel.add(keras.layers.Dense(64, activation='relu'))\nmodel.add(keras.layers.Dropout(0.5))\nmodel.add(keras.layers.Dense(1, activation='sigmoid'))\n\n# Compile Model\nmodel.compile(loss='mean_squared_error', optimizer='adam')\n\n# Fit the model\nmodel.fit(X, y, epochs=50, batch_size=10, shuffle=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def even_positions(string):\n    result = \"\"\n    for i in range(0, len(string), 2):\n        result += string[i]\n    return result\n\nprint(even_positions(\"Hello World!\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: ---\n - name: Deploy web application\n hosts: server\n tasks:\n - name: Transfer application files\n copy:\n src: '{{ application }}'\n dest: /var/www/app\n\n- name: Create web environment\n command: python create_env.py\n args:\n chdir: /var/www/app\n\n- name: Configure web server\n command: ansible-playbook web.yml\n\n- name: Restart web server\n service: name=nginx state=restarted but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_words(words, letter):\n    filtered_words = []\n    \n    for word in words:\n        if letter not in word:\n            filtered_words.append(word)\n    \n    return filtered_words but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_length(list):\n  for element in list:\n    print(len(element))\n\nlist_length(list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class User:\n    def __init__(self, name, age, address):\n        self.name = name\n        self.age = age\n        self.address = address\n    \n    def __str__(self):\n        return \"Name: \"+ self.name + \", Age: \"+ str(self.age) +\", Address: \"+ self.address\n\nclass UsersDB:\n    def __init__(self):\n        self.users = []\n    \n    def add_user(self, user):\n        self.users.append(user)\n    \n    def get_users(self):\n        return self.users\n\n# Create a database\nusers_db = UsersDB()\n\n# Add some users\nuser1 = User(\"John Doe\", 25, \"1600 Pennsylvania Avenue NW, Washington, DC\")\nusers_db.add_user(user1)\nuser2 = User(\"Jane Doe\", 20, \"22 Jump Street, New York, NY\")\nusers_db.add_user(user2)\n\n# Print the users\nprint(users_db.get_users()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_all_occurrences(string, character): \n  return string.replace(character, \"\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiplyBy2(nums):\n return [num * 2 for num in nums] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1,11):\n    print(i**2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: myString = \"Hello, World!\"\n\ncharCount = 0\nfor char in myString:\n    charCount += 1\n    \nprint(\"Number of characters:\", charCount) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import flask\nfrom flask import request\n\napp = flask.Flask(__name__)\napp.config[\"DEBUG\"] = True\n\ntodos = [\n {\n 'id': 1,\n 'title': 'buy groceries',\n 'completed': False\n },\n {\n 'id': 2,\n 'title': 'clean room',\n 'completed': False\n }\n]\n\n@app.route('/', methods=['GET'])\ndef home():\n return '''<h1>To-Do List API</h1>\n <p>A prototype API for a To-Do List application.</p>'''\n\n@app.route('/api/v1/todos/', methods=['GET'])\ndef api_all():\n return flask.jsonify(todos)\n\n@app.route('/api/v1/todos/', methods=['POST'])\ndef api_create():\n data = request.get_json()\n todos.append(data)\n return flask.jsonify(data)\n\n@app.route('/api/v1/todos/<int:id>', methods=['PUT', 'PATCH'])\ndef api_update(id):\n for todo in todos:\n if todo['id'] == id:\n data = request.get_json()\n for key, value in data.items():\n todo[key] = value\n return flask.jsonify(todo)\n\n@app.route('/api/v1/todos/<int:id>', methods=['DELETE'])\ndef api_delete(id):\n for i, todo in enumerate(todos):\n if todo['id'] == id:\n del todos[i]\n return flask.jsonify({'success': True})\n\napp.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def nth_prime_number(n):\n    prime_numbers = [2]\n    number = 3\n\n    while len(prime_numbers) < n:\n        is_prime = True\n        for prime in prime_numbers:\n            if number % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(number)\n        number += 2\n    return prime_numbers[-1]\n\nprint(nth_prime_number(5)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request\nimport json\n\napp = Flask(__name__)\n\n@app.route(\"/\", methods=['POST'])\ndef calc_sum_average():\n  json_data = request.get_json()\n  numbers = json_data.get('numbers')\n  sum = 0\n  for x in numbers:\n    sum += x\n\n  average = sum / float(len(numbers))\n  result = {'sum' :sum, 'average': average}\n  return json.dumps(result)\n  \nif __name__ == '__main__':\n  app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def rotate90(arr):\n    N = len(arr[0])\n    rotate_matrix = [[0 for x in range(N)] for y in range(N)]\n\n    for x in range(N):\n        for y in range(N):\n            rotate_matrix[y][N-1-x] = arr[x][y]\n    return rotate_matrix but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def total_characters(string):\n    count = 0\n    for char in string:\n        count += 1\n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def solve_cube(cube):\n # Step 1: Position the cube\n cube_position = position_cube(cube)\n \n # Step 2: Solve the center pieces\n center_pieces = solve_center_pieces(cube_position)\n \n # Step 3: Solve the first two layers\n first_two_layers = solve_first_two_layers(center_pieces)\n \n # Step 4: Orient the final layer\n final_layer = orient_final_layer(first_two_layers)\n \n # Step 5: Permute the final layer\n cube_solved = permute_final_layer(final_layer)\n \n return cube_solved but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_unique_prime_factors(num):\n    unique_prime_factors = []\n\n    for i in range(2, num + 1):\n        if num % i == 0:\n            if is_prime(i):\n                unique_prime_factors.append(i)\n\n    return len(set(unique_prime_factors))\n\ndef is_prime(n):\n    if (n <= 1):\n        return False\n    if (n <= 3):\n        return True\n    if (n % 2 == 0 or n % 3 == 0):\n        return False\n    i = 5\n    while(i * i <= n):\n        if (n % i == 0 or n % (i + 2) == 0):\n            return False\n        i = i + 6\n    return True\n\ncount_unique_prime_factors(24) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: [{'string' : 'hello world'}, {'number' : 'hello 5'}] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generateTable(num):\n    htmlTable = \"\"\n\n    htmlTable += \"<table border=\\\"1\\\">\\n\"\n    htmlTable += \"<tr>\\n\"\n    htmlTable += \"<th>Number</th>\\n\"\n    htmlTable += \"<th>Multiple</th>\\n\"\n    htmlTable += \"</tr>\\n\"\n\n    for i in range(1, 11):\n        htmlTable += \"<tr>\\n\"\n        htmlTable += \"<td>\" + str(num) + \"</td>\\n\"\n        htmlTable += \"<td>\" + str(num * i) + \"</td>\\n\"\n        htmlTable += \"</tr>\\n\"\n\n    htmlTable += \"</table>\"\n\n    return htmlTable but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(5, 16):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_common_char(string):\n    char_dict = {}\n    for char in string:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    \n    most_common_char = \"\"\n    most_common_freq = 0\n    for char in char_dict:\n        if char_dict[char] > most_common_freq:\n            most_common_freq = char_dict[char]\n            most_common_char = char\n    return most_common_char but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef regex_match(pattern, text):\n    regex = re.compile(pattern)\n    matches = regex.findall(text)\n    return matches but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ntweets = [\n { \n 'user': 'John', \n 'tweet': 'This is a tweet in English', \n 'language': 'en' \n }, \n { \n 'user': 'Jane', \n 'tweet': 'Ceci est un tweet en fran\u00e7ais', \n 'language': 'fr' \n }, \n { \n 'user': 'Bob', \n 'tweet': 'Esta es una publicaci\u00f3n en espa\u00f1ol', \n 'language': 'es' \n }\n ]\n\nlanguage = 'en'\n\nfiltered = [tweet for tweet in tweets if tweet['language'] == language]\n\nprint(json.dumps(filtered, indent=2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(10):\n print(\"Hello World!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def make_float(string):\n  return float(string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\n\n# Voting_System class\nclass Voting_System:\n\n    # voting_options instance variable\n    def __init__(self, voting_options):\n        self.voting_options = voting_options\n\n    # Vote function\n    def vote(self, user_id, option_id):\n        if user_id not in self.voting_options.keys():\n            self.voting_options[user_id] = option_id\n            return True\n        else:\n            return False\n\n    # get_all_votes function\n    def get_all_votes(self):\n        return self.voting_options but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class TemperatureData:\n    def __init__(self, temperature):\n        self.temperature = temperature\n\n    def get_temperature(self):\n        return self.temperature but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def validate_user(event, context):\n valid_fields = [\"name\", \"age\", \"city\"]\n valid_values = [\"John Smith\", 29, \"New York\"]\n \n event_body = event.get(\"body\")\n if not event_body:\n return {\n \"statusCode\": 400, \n \"body\": \"Invalid data\"\n }\n \n for key, value in event_body.items():\n if key not in valid_fields:\n return {\n \"statusCode\": 400, \n \"body\": f\"Invalid field {key}\"\n }\n if value not in valid_values:\n return {\n \"statusCode\": 400, \n \"body\": f\"Invalid value for field {key}\"\n }\n \n return {\n \"statusCode\": 200,\n \"body\": \"User has valid configuration\"\n } but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: student_dict = {\n    123456: (\"Alice\", \"alice@example.com\", \"123-456-789\"),\n    789456: (\"Bob\", \"bob@example.com\", \"456-789-012\")\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: input_string = input('Enter a string: ')\n\noutput_string = input_string.upper()\n\nprint(f'Your input in uppercase is: {output_string}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\ndef search_substring(string, substring):\n  pattern = re.compile(substring, re.IGNORECASE) # case insensitive\n  match = re.search(pattern, string)\n  if match:\n    print(\"Found the substring at index\", match.start())\n  else:\n    print(\"The substring was not found\")\n\nstring = \"Welcome To Programming\"\nsubstring = \"to\"\n\nsearch_substring(string, substring) # prints \"Found the substring at index 8\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_frequency(arr):\n    # Create empty dictionary\n    frequency = {}\n\n    # Iterate through array\n    for item in arr:\n        # Iterate through elements of each dictionary\n        for element in item.values():\n            # Increment the counter for each element\n            if element in frequency:\n                frequency[element] += 1\n            else:\n                frequency[element] = 1\n\n    return frequency but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(numbers):\n    numbers.sort()\n    return numbers\n\nresult = sort_list([2, 4, 5, 1, 3])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n    \nnum = 7\nresult = factorial(num)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def prime_factors(n):\n    factors = []\n    d = 2\n    while n > 1:\n        while n % d == 0:\n            factors.append(d)\n            n = n/d\n        d = d + 1\n\n    return factors but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def format_text(input_text):\n    formatted_str = \"\"\n    for i in input_text:\n        if i.isupper():\n            formatted_str += \"'#{i}'\"\n        else:\n            formatted_str += i\n    return formatted_str but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class CompressedDataStructure():\n def __init__(self):\n  self.data = {}\n\n def insert(self,key,value):\n  self.data[key] = value\n\n def search(self,key):\n  if key in self.data:\n   return self.data[key]\n  else:\n   raise KeyError\n\n def delete(self,key):\n  del self.data[key] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndef convert_json_to_dict(input_json):\n    \"\"\"\n    Convert JSON object to Python dictionary \n    Args: \n        input_json (json): JSON object to be converted \n    Returns: \n        output_dict (dict): Python dictionary with keys and values from input_json\n    \"\"\"\n\n    output_dict = json.loads(input_json)\n    return output_dict but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: nums = [1, 2, 3, 4, 5]\nsquared_nums = list(map(lambda num: num * num, nums)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize_route(startX, endX):\n    best_route = [startX]\n    next_x = startX\n\n    while next_x < endX:\n        best_cost = float(\"inf\")\n        for x in range(next_x+1, endX+1):\n            cost = abs(x - next_x)\n            if cost < best_cost:\n                best_cost = cost\n                next_x = x\n        best_route.append(next_x)\n\n    return best_route but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef preprocess(data):\n    # Stack the data\n    data = np.stack(data)\n\n    # Scale the data\n    data = (data - np.min(data)) / (np.max(data) - np.min(data))\n    return data but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Filtering out strings without letter 'a'\nfiltered_words = [word for word in words if 'a' in word]\n\n# Print the filtered list\nprint(filtered_words)\n# Output: ['apple', 'banana', 'grape'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent_words(text):\n    # convert the text into a list of words\n    words = text.split()\n\n    # create an empty dictionary\n    word_count = {}\n\n    # count each word and store it in the dictionary\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n\n    # sort the dictionary by frequency\n    sorted_word_count = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n\n    # return the most frequently used words\n    most_frequent_words = [word[0] for word in sorted_word_count[:10]]\n    return most_frequent_words but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def permute(a, l, r): \n    if l==r: \n        print(''.join(a)) \n    else: \n        for i in range(l,r+1): \n            a[l], a[i] = a[i], a[l] \n            permute(a, l+1, r)\n            a[l], a[i] = a[i], a[l]\n\ndef main():\n    string = input(\"Enter a string:\")\n    n = len(string) \n    a = list(string)\n    permute(a, 0, n-1)\n\nif __name__ == '__main__': \n    main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: new_list = [4, 16, 36] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndata = {\n  \"title\": \"The Adventures of Tom Sawyer\",\n  \"author\": \"Mark Twain\",\n  \"year\": 1876\n}\n\nparsed_data = json.loads(data)\n\ntitle = parsed_data['title']\nauthor = parsed_data['author']\nyear = parsed_data['year'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_numbers(arr):\n    s = 0\n    for i in range(len(arr)):\n        s += arr[i]\n    return s but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pymongo\n\n# Open connection\nclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\ndb = client[\"mydatabase\"]\n\n# Update document\ndb.collection.update_one(\n    {\"name\": \"John Doe\"},\n    {\"$set\": {\"age\": 28}}\n)\n\n# Close connection\nclient.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n \ndef MonteCarlo(n):\n    inside = 0\n    for i in range(n):\n        x = random.random()\n        y = random.random()\n        if x*x + y*y <= 1:\n            inside += 1\n \n    return 4*inside/n\n \nif __name__ == '__main__':\n    n = int(input(\"Input the number of points: \"))\n    print(\"Pi is approximately {}!\".format(MonteCarlo(n))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_grade_counts(student_info):\n    scores_by_grade = {\n        \"As\": 0,\n        \"Bs\": 0,\n        \"Cs\": 0,\n        \"Ds\": 0\n    }\n\n    for student in student_info:\n        for score in student[\"scores\"]:\n            if score >= 90:\n                scores_by_grade[\"As\"] += 1\n            elif score >= 80:\n                scores_by_grade[\"Bs\"] += 1\n            elif score >= 70:\n                scores_by_grade[\"Cs\"] += 1\n            else:\n                scores_by_grade[\"Ds\"] += 1\n\n    return scores_by_grade but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_strings(s1, s2, s3):\n    return sorted([s1, s2, s3])\n\nresult = sort_strings('apples', 'oranges', 'peaches')\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: <html>\n<head>\n <title>Python Output</title>\n</head>\n<body>\n  <script>\n   for (i = 1; i <= 10; i++) {\n    document.write(\"Hello World!\" + i);\n   }\n  </script>\n</body>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #importing the libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import StandardScaler\n\n#loading the dataset\ndf = pd.read_csv('wine_data.csv')\n\n#defining independent and dependent variables\nX = df.iloc[:,:11]\ny = df.iloc[:,11]\n\n#splitting the dataset into train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n#scaling the data\nscaler = StandardScaler()\nscaled_X_train = scaler.fit_transform(X_train)\nscaled_X_test = scaler.fit_transform(X_test)\n\n#creating and fitting the model\nmodel = LogisticRegression().fit(scaled_X_train, y_train)\n\n#prediciting the test data\ny_pred = model.predict(scaled_X_test)\n\n#calculating the accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint(accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n name = \"\"\n age = 0\n\ndef __init__(self):\n pass\n\ndef set_name(self, n):\n self.name = n\n\ndef set_age(self, a):\n self.age = a\n\ndef display_age(self):\n print(self.age)\n\n# Call display_age directly\nEmployee().display_age() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for x in range(1, 10):\n    if x < 4:\n        print(\"Low\")\n    else:\n        print(\"High\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee: \n    def __init__(self, name, age, salary, designation): \n        self.name = name \n        self.age = age \n        self.salary = salary \n        self.designation = designation \n  \n    def get_details(self): \n        return self.name + \" \" + str(self.age) + \" \" + str(self.salary) + \" \" + self.designation \n  \n    def __str__(self): \n        return self.name + \" \" + str(self.age) + \" \" + str(self.salary) + \" \" + self.designation but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(text):\n    return text == text[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: This algorithm has a time complexity of O(n2). This is due to the nested for loop which means that the runtime of the algorithm is proportional to the square of the size of the input. Consequently, the time complexity increases exponentially with the input size. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max_position(nums):\n    max_num = nums[0]\n    max_pos = 0\n\n    for i in range(len(nums)):\n        if nums[i] > max_num:\n            max_num = nums[i]\n            max_pos = i\n\n    return max_pos\n\nnums = [1, 5, 8, -3, 0]\nmax_pos = find_max_position(nums)\nprint(f\"The maximum element is at position {max_pos}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_report(data):\n    # create an empty output dictionary\n    output = {}\n\n    # Iterate over the data\n    for employee in data:\n        # get the employee name\n        name = employee['name']\n\n        # get the employee salary\n        salary = employee['salary']\n\n        # add the salary info to the output dictionary\n        output[name] = salary\n\n    # return the output of the report\n    return output but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mean(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total/len(nums)\n\nnums = [4, 6, 8, 10]\nresult = mean(nums)\n\nprint(\"The mean of\", nums, \"is\", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import Django\nimport django\nfrom django.conf import settings\nfrom django.urls import path\n\n# Setup Django app\nsettings.configure()\n\n# Create Django application\napp = django.apps.registry.AppRegistry()\n\n# Create URL path\n@app.route('/compare')\n\n# Define response\ndef compare_prices(): \n  # Get product and store information \n  product1 = request.args.get('product1') \n  store1 = request.args.get('store1') \n  product2 = request.args.get('product2)\n  store2 = request.args.get('store2')\n\n  # Make the API call to the stores' API \n  store1_data = requests.get(url1+product1+'&store='+store1).json()\n  store2_data = requests.get(url2+product2+'&store='+store2).json()\n\n  # Compare the prices \n  price1 = float(store1_data['price'])\n  price2 = float(store2_data['price'])\n  difference = price2 - price1\n\n  # Return response\n  return jsonify(\n    store1=store1,\n    store2=store2,\n    product1=product1,\n    product2=product2,\n    price1=price1,\n    price2=price2,\n    difference=difference\n  )\n\n# Run the server\nif __name__ == \"__main__\": \n  app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: odd_numbers = []\neven_numbers = []\n\nfor number in list_of_numbers:\n    if number % 2 == 0:\n        even_numbers.append(number)\n    else:\n        odd_numbers.append(number)\n\nprint(\"Odd numbers: \" + str(odd_numbers))\nprint(\"Even numbers: \" + str(even_numbers)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Animal:\n    def __init__(self):\n        pass\n    \n    def make_sound(self):\n        print(\"The animal makes a sound.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def lcm(num1, num2):\n  if num1 > num2:\n    greater = num1\n  else:\n    greater = num2\n\n  while(True):\n    if((greater % num1 == 0) and (greater % num2 == 0)):\n      lcm = greater\n      break \n    greater += 1\n\n  return lcm but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_sort(arr):\n if len(arr) >1: \n mid = len(arr)//2  #Finding the mid of the array \n L = arr[:mid]   # Dividing the array elements  \n R = arr[mid:] # into 2 halves \n  \n merge_sort(L) # Sorting the first half \n merge_sort(R) # Sorting the second half \n  \n i = j = k = 0\n  \n # Copy data to temp arrays L[] and R[] \n while i < len(L) and j < len(R): \n if L[i] < R[j]: \n arr[k] = L[i] \n i+=1\n else: \n arr[k] = R[j] \n j+=1\n k+=1\n  \n # Checking if any element was left \n while i < len(L): \n arr[k] = L[i] \n i+=1\n k+=1\n  \n while j < len(R): \n arr[k] = R[j] \n j+=1\n k+=1\n  \ndef print_list(arr): \n for i in range(len(arr)):         \n print(arr[i],end=\" \") \n print() \n  \n# Driver code to test above \nif __name__ == '__main__': \n arr = [5,3,6,8,10,1,4,7] \n print (\"Given array is\", end=\"\\n\")  \n print_list(arr) \n merge_sort(arr) \n print(\"Sorted array is: \", end=\"\\n\") \n print_list(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(\"Hello World!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: x = 5\ny = 7\nsum = x + y\n\n# Add the correct operator here\nsum = x + y\n\nprint(\"Sum=\", sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Define the web scraper\nfrom selenium import webdriver\n\n# Define the URL\nurl = 'https://www.example.com/index.html'\n\n# Initialize the web driver\ndriver = webdriver.Chrome()\n\n# Load the URL\ndriver.get(url)\n\n# Scrape the data\ndataList = driver.find_elements_by_css_selector('div.data')\n\nfor data in dataList:\n    print(data.text)\n\n# Close the driver instance \ndriver.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Vector3D:\n  def __init__(self, x, y, z):\n    self.x = x\n    self.y = y\n    self.z = z but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # formA.py\nfrom django.forms import ModelForm\nfrom .models import TableA\n\nclass formA(ModelForm):\n    class Meta:\n        model = TableA\n        fields = ['field1','field2','field3','field4']\n\n# formB.py\nfrom django.forms import ModelForm\nfrom .models import TableB\n\nclass formB(ModelForm):\n    class Meta:\n        model = TableB\n        fields = ['field1','field2','field3','field4']\n\n# views.py\nfrom django.shortcuts import render\nfrom .forms import formA, formB\n\ndef form_view(request):\n    formA_data = formA(request.POST or None)\n    formB_data = formB(request.POST or None)\n    if formA_data.is_valid() and formB_data.is_valid():\n        formA_data.save()\n        formB_data.save()\n        return render(request, 'thankyoupage.html')\n    return render(request, 'formpage.html', {'formA':formA_data, 'formB':formB_data}) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def expression(x):\n    return 3 * x + 5\n\nprint(expression(7)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply(a, b):\n    result = a * b\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def lcm(a, b): \n    lcm = (a*b)//gcd(a,b) \n    return lcm but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sumArrayElements(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\narr = [1, 4, 6]\nresult = sumArrayElements(arr)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import ast\n\ndef parse_variables(source_code):\n    tree = ast.parse(source_code)\n    variable_names = []\n    \n    for node in ast.walk(tree):\n        if isinstance(node, ast.Assign):\n            variable_names.append(node.targets[0].id)\n\n    return variable_names\n\nif __name__ == '__main__':\n    source_code = \"name = 'Abhishek'\\nage = 23\\n\\ndef printDetails():\\n    print('My name is ' + name)\\n    print('I am ' + str(age) + ' years old')\\n\\nprintDetails()\"\n    variable_names = parse_variables(source_code)\n    print(variable_names) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\nimport collections\n\ntext = \"Python is an interpreted, high-level, general-purpose programming language. Created by Guido van Rossum and first released in 1991, Python design philosophy emphasizes code readability with its notable use of significant whitespace\"\n\nwords = re.findall(r'\\w+', text.lower())\ncounter = collections.Counter(words)\nmost_common = counter.most_common()\n\nprint(\"Most common words in the text: \")\nfor word, count in most_common:\n    print(word, \":\", count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(\"Enter a number: \")\nnum = int(input())\n\nfact = 1\nfor i in range(num, 0, -1):\n    fact *= i\n\nprint(\"Factorial is\", fact) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num):\n    \"\"\"Check if the given number is prime.\n\n    Args:\n        num (int): A number to check\n\n    Returns:\n        bool: True if num is prime, False otherwise.\n    \"\"\"\n\n    if num < 2: \n        return False\n\n    for i in range(2, num):\n        if (num % i) == 0:\n            return False\n    return True\n\nnum = 20\nresult = is_prime(num)\nprint(f\"Is {num} prime? {result}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_strings(strings):\n    result = {\"short\": [], \"long\": []}\n    for string in strings:\n        if len(string) < 10:\n            result[\"short\"].append(string)\n        else:\n            result[\"long\"].append(string)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(x):\n    if x < 2:\n        return False \n    for i in range(2, int(x ** 0.5) + 1):\n        if x % i == 0:\n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fahrenheit_to_celsius(F):\n    # convert Fahrenheit to Celsius\n    C = (F - 32) * 5.0/9.0\n    return C\n\nF = 78.8\nC = fahrenheit_to_celsius(F) \nprint('%0.1f degree Fahrenheit is equal to %0.1f degree Celsius' %(F,C)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_rotation(s1, s2):\n  # edge case check\n  if len(s1) != len(s2):\n    return False\n\n  # concatenate s2 to itself\n  concat_s2 = s2 + s2\n\n  #search s1 in concat_s2\n  return s1 in concat_s2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import the necessary packages\nimport tensorflow as tf\nimport numpy as np \nimport pandas as pd \nimport random\n\n# Initialize the neural network\nmodel = tf.keras.Sequential([ \n      tf.keras.layers.Dense(8, input_shape=(8,), activation='relu'), \n      tf.keras.layers.Dense(8, activation='relu'), \n      tf.keras.layers.Dense(1, activation='sigmoid') \n]) \n\n# Compile the model \nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy']) \n\n# Load the dataset \nx_data = pd.read_csv('data.csv')\n\n# Train the model \nmodel.fit(x_data, epochs=10)\n\n# Start a conversation\nwhile True:\n    user_input = input(\"User:\")\n    if user_input == \"Goodbye\":\n        break\n    else:\n        # Generate a random response\n        response_index = random.randint(0, len(responses) - 1)\n        bot_response = responses[response_index]\n        # Use the model to predict the user response to the bot's message\n        prediction = model.predict([[user_input]])\n        # If prediction is high, generate a recommendation\n        if prediction[0][0] > 0.5:\n            recommendation = generate_recommendation()\n            bot_response = recommendation\n        print(\"Bot:\", bot_response) but is not the same. just give one example and only return the code."}
