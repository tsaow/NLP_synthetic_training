{"prompt": "make some code that functions the same as the following code: def remove_duplicates(list_of_strings):\n  unique_strings = set(list_of_strings)\n  return list(unique_strings) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num):\n     \n    # Return False if num is less than 2\n    if num < 2:\n        return False\n     \n    # Check if any number from 2 to (num - 1) divides num\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n             \n    else:\n        return True\n\nnums = []\nnum = 2\n\nwhile len(nums) < 100:\n    if is_prime(num):\n        nums.append(num)\n    num = num + 1\n\nprint(nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combine_strings(string1, string2):\n    combined_string = \"\"\n    length = max(len(string1), len(string2))\n    for i in range(length):\n        combined_string += string1[i] if i < len(string1) else \"\"\n        combined_string += string2[i] if i < len(string2) else \"\"\n    return combined_string\n\nresult = combine_strings(\"ab\", \"xy\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findCommonElements(listA, listB):\n commonElements = []\n\n for elementA in listA:\n for elementB in listB:\n if elementA == elementB:\n commonElements.append(elementA)\n\n return commonElements\n\nlistA = [1, 3, 5, 7, 9]\nlistB = [2, 3, 4, 5, 8]\ncommonElements = findCommonElements(listA, listB) \n\nprint(commonElements)  # Output: [3, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_dicts(dict1, dict2):\n    res = {**dict1, **dict2}\n    return res\n\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\n\nmerged_dicts = merge_dicts(dict1, dict2)\n\nprint(merged_dicts) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The distributed system consists of two core components: Apache Kafka and Apache Spark.\n\nApache Kafka receives real-time tweets from the Twitter API as a stream of data in JSON format. This stream is routed to persistent message queues in Kafka. A Kafka consumer can then read and process the tweets from these queues.\n\nApache Spark is then used to process and analyze the data from these Kafka queues. The data is ingested into Spark and processed using custom code written in Python. This code performs a variety of functions such as data transformation, cleansing, and aggregation. The output of this process is then written to a persistent data store such as Amazon S3.\n\nThis distributed system can process a high volume of tweets in real-time and can provide powerful insights. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.tokenize import sent_tokenize\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentence = \"This movie was extremely disappointing.\"\n\nsid = SentimentIntensityAnalyzer()\nsentiment = sid.polarity_scores(sentence)\n\nif sentiment['compound'] >= 0.05:\n    sentiment_label = \"positive\"\nelif sentiment['compound'] <= - 0.05:\n    sentiment_label = \"negative\"\nelse:\n    sentiment_label = \"neutral\"\n\nprint(sentiment_label) # prints \"negative\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def poly_evaluation(x):\n  return x**2 - 4*x + 6\n\nx = 2\nresult = poly_evaluation(x)\nprint(result) # prints 0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_letters(text):\n    letters_count = dict()\n\n    for char in text:\n        if char not in letters_count:\n            letters_count[char] = 1\n        else:\n            letters_count[char] += 1\n\n    return letters_count\n\nif __name__ == '__main__':\n    text = 'Hello, World!'\n    print(count_letters(text)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef calculate_standard_deviation(arr):\n    return np.std(arr)\n\nprint(calculate_standard_deviation(numbers)) # Prints 1.4142135623730951 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to print first n fibonacci numbers \ndef fibonacci(n): \n    f1 = 0\n    f2 = 1\n    print(f1, f2, end = \" \") \n    for x in range(2, n): \n        next_el = f1 + f2 \n        print(next_el, end = \" \") \n        f1 = f2 \n        f2 = next_el \n  \n# Driver code \nn = 20\nfibonacci(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_dict_items(dictionary):\n    total = 0\n    for key, value in dictionary.items():\n        total = total + value\n        return total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: input_word = input(\"Enter a word: \")\n\ndef is_palindrome(word):\n word = word.lower()\n reversed_word = word[::-1]\n\n if reversed_word == word:\n return True\n else:\n return False\n\nprint(is_palindrome(input_word))\n# Output: True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack:\n    def __init__(self):\n        self.items = []\n\n    def isEmpty(self):\n        return self.items == []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n\n    def peek(self):\n        return self.items[len(self.items)-1]\n\n    def size(self):\n        return len(self.items) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_digits(number):\n  sum_digits = 0\n  while number > 0:\n    sum_digits += (number % 10)\n    number //= 10\n  return sum_digits\n  \nprint(sum_of_digits(123)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def permute(nums):\n  res = []\n  generatePermutations(nums, 0, [], res)\n  return res\n\ndef generatePermutations(nums, index, current, result):\n  if index == len(nums):\n    result.append(current[:])\n  else:\n    for i in range(index, len(nums)):\n      current.append(nums[i])\n      generatePermutations(nums, index+1, current, result)\n      current.pop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: discount_rate = 10/100\ndiscount = purchase_price * discount_rate\n\npurchase_price = 100\ndiscount_rate = 10/100\ndiscount = purchase_price * discount_rate\n\nprint(\"The discount is: ${}\".format(discount)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def min_num(x, y):\n  if x < y:\n    return x\n  else:\n    return y\n\nprint(min_num(5, 10))\n\n# Output\n5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MultiObjectDict(object):\n    def __init__(self):\n        self.data = {}\n\n    def add(self, key, value):\n        try:\n            self.data[key].append(value)\n        except KeyError:\n            self.data[key] = [value]\n\n    def get(self, key):\n        return self.data.get(key, None) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Fibonacci():\n\n    def __init__(self, n):\n        self.n = n\n        self.fibonacci_list = [0, 1]\n\n    def generate_list(self):\n        for i in range(2, self.n):\n            self.fibonacci_list.append(self.fibonacci_list[i-2] + self.fibonacci_list[i-1])\n        return self.fibonacci_list\n\nfibonacci = Fibonacci(10)\nprint(fibonacci.generate_list()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_even(num):\n\u00a0 \u00a0 if num % 2 == 0:\n\u00a0 \u00a0 \u00a0 \u00a0 return True\n\u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\n# parse JSON string into a dictionary\njson_dict = json.loads(json_string) \n  \n# result \nprint(json_dict) \n\n# Output:\n{'name': 'John', 'age': 30, 'city': 'New York'} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: books_dict = {\n    \"The Great Gatsby\": {\n        \"author\": \"F. Scott Fitzgerald\",\n        \"genre\": \"Novel\",\n        \"year_published\": 1925\n    },\n    \"To Kill a Mockingbird\": {\n        \"author\": \"Harper Lee\",\n        \"genre\": \"Novel\",\n        \"year_published\": 1960\n    },\n    \"The Catcher in the Rye\": {\n        \"author\": \"J.D. Salinger\",\n        \"genre\": \"Novel\",\n        \"year_published\": 1951\n    },\n    \"1984\": {\n        \"author\": \"George Orwell\",\n        \"genre\": \"Fiction\",\n        \"year_published\": 1949\n    },\n    \"The Hobbit\": {\n        \"author\": \"J.R.R. Tolkien\",\n        \"genre\": \"Fantasy\",\n        \"year_published\": 1937\n    },\n    \"The Lord of the Rings\": {\n        \"author\": \"J.R.R. Tolkien\",\n        \"genre\": \"Fantasy\",\n        \"year_published\": 1955\n    },\n    \"Alice's Adventures in Wonderland\": {\n        \"author\": \"Lewis Carroll\",\n        \"genre\": \"Fantasy\",\n        \"year_published\": 1865\n    },\n    \"Pride and Prejudice\": {\n        \"author\": \"Jane Austen\",\n        \"genre\": \"Novel\",\n        \"year_published\": 1813\n    },\n    \"The Adventures of Sherlock Holmes\": {\n        \"author\": \"Arthur Conan Doyle\",\n        \"genre\": \"Mystery\",\n        \"year_published\": 1892\n    },\n    \"The Little Prince\": {\n        \"author\": \"Antoine de Saint-Exup\u00e9ry\",\n        \"genre\": \"Fable\",\n        \"year_published\": 1943\n    } \n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(string):\n    reversed_string = \"\"\n    for char in string:\n        reversed_string = char + reversed_string\n    return reversed_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: name = input('Enter a name: ')\nprint(f'Hello {name}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Sum:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def find_sum(self):\n        return self.x + self.y\n        \nif __name__ == '__main__':\n    s = Sum(10, 5)\n    print(s.find_sum()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: user_input = input(\"Please enter a word:\")\nwhile user_input != \"\":\n    print(user_input)\n    user_input = input(\"Please enter a word:\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class SortList:\n    def __init__(self, lst):\n        self.lst = lst\n        \n    def sort_list(self):\n        self.lst.sort()\n        return self.lst but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max_number(numbers):\n    maximum = numbers[0]\n    for i in numbers:\n        if i > maximum:\n            maximum = i\n    return maximum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: name = input('Please enter your name: ')\nprint('Hello, ' +name) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(num):\n    result = 1\n    for i in range(1, num+1):\n        result *= i\n    return result\n\nn = int(input(\"Enter an Integer: \"))\nprint(factorial(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    \n    elif n == 0: \n        return a \n    \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n\nprint(fibonacci(20)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_all_strings(string):\n   if len(string) == 1: \n       return [string]\n    result = []\n    for i, letter in enumerate(string):\n        for permutation in generate_all_strings(string[:i] + string[i+1:]):\n            result += [letter + permutation]\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import webbrowser\n\nurl = \"www.example.com\"\n\n# open the web page in a new browser tab\nwebbrowser.open_new_tab(url) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class DataFrameEncoder:\n    def __init__(self, data):\n        self.data = data\n        \n    def encode(self):\n        encoded = []\n        for row in self.data:\n            encoded_row = []\n            for column in row:\n                encoded_column = str(column)\n                encoded_row.append(encoded_column)\n            encoded.append(encoded_row)\n        return encoded but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def foo(my_list):\n    result = []\n    for element in my_list:\n        if 'foo' in element:\n            result.append('foo')\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import calendar\n\nyear = 2020\nmonth = 4\n\n# create a calendar of the given month and year\ncal = calendar.month(year, month)\n\n# print it\nprint(cal)\n\n# Output\n     April 2020\nMo Tu We Th Fr Sa Su\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n        \n    def get_info(self):\n        return \"Name: {}, Age: {}\".format(self.name, self.age) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(s):\n        rev = ''.join(reversed(s)) \n        if (s == rev): \n            return True\n        return False\n\n# driver code\ns = \"level\"\nans = is_palindrome(s) \n\nif ans == 1: \n    print(\"Yes\") \nelse: \n    print(\"No\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.corpus import brown\nfrom nltk.tokenize import word_tokenize \n\n# Train and test data \ntrain_data = brown.tagged_sents(categories='news') \ntest_data = brown.sents(categories='news') \n  \n# Build our POS Tagger \ntagger = nltk.UnigramTagger(train_data, backoff = nltk.DefaultTagger('NN')) \n\ndef check_voice(sentence):\n  tokens = word_tokenize(sentence)\n  tagged_sent = tagger.tag(tokens) \n  if tagged_sent[0][1] == 'VBN':\n    return 'Passive'\n  else:\n    return 'Active'\n\n>>>check_voice('The work was done by John.')\n'Passive' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def average(arr):\n    return sum(arr) / len(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def running_average(data):\n    time_list = []\n    current_average = 0\n    num_values = 0\n    for t, c in data:\n        time_list.append(t)\n        current_average += c\n        num_values += 1\n        if t in time_list[-10:]:\n            print(\"The running average of temperature after %s is %f\" %(t, current_average/num_values))\n\ndata = [('10:00', 21), ('10:10', 22), ('10:20', 21), ('10:30', 19), ('10:40', 24), ('10:50', 21)]\n\nrunning_average(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply_numbers(x, y):\n    return x * y\n\nresult = multiply_numbers(15, 10)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_whitespace(s):\n    return s.replace(\" \", \"\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_digits(n):\n    sum = 0\n    while n > 0:\n        sum+= n % 10\n        n //= 10\n    return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_anagrams(strings):\n    anagrams = []\n\n    for string in strings:\n        temp = [string]\n        for s in strings:\n            if sorted(string) == sorted(s) and string != s:\n                temp.append(s)\n        anagrams.append(temp)\n \n    return anagrams but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_min_max_avg(arr):\n    # set the min, max numbers to the first item in the array\n    min_num = arr[0]\n    max_num = arr[0]\n\n    # keep track of the sum of all the numbers\n    sum_num = 0\n\n    # iterate through the array\n    for item in arr:\n        # find smallest number\n        if item < min_num:\n            min_num = item\n        # find largest number\n        elif item > max_num:\n            max_num = item\n        # add each number to the sum\n        sum_num += item\n\n    # calculate the average\n    avg_num = sum_num / len(arr)\n    print(\"Smallest Number: {}\\nLargest Number: {}\".format(min_num, max_num))\n    return avg_num but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def min_product(a, b):\n    if a > b:\n        return a * b\n    else:\n        return a * b * (a - b) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = input(\"Enter words:\")\nprint(words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def edit_distance(string1, string2):\n m = len(string1)\n n = len(string2)\n\n dp = [[0 for x in range(n+1)] for x in range(m+1)]\n\n for i in range(m+1):\n dp[i][0] = i\n\n for j in range(n+1):\n dp[0][j] = j\n\n for i in range(1, m+1):\n for j in range(1, n+1):\n if string1[i-1]==string2[j-1]:\n dp[i][j] = dp[i-1][j-1]\n else:\n dp[i][j] = 1 + min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1])\n\n return dp[m][n]\n\nstring1 = 'kitten'\nstring2 = 'sitting'\n\nprint(edit_distance(string1, string2))\n# Output: 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: while True: \n    print(\"Options:\")\n    print(\"Enter 'add' to add two numbers\")\n    print(\"Enter 'subtract' to subtract two numbers\")\n    print(\"Enter 'multiply' to multiply two numbers\")\n    print(\"Enter 'divide' to divide two numbers\")\n    print(\"Enter 'quit' to end the program\")\n    user_input = input(\": \")\n    \n    if user_input == \"quit\":\n        break\n    elif user_input == \"add\":\n        num1 = float(input(\"Enter a number: \"))\n        num2 = float(input(\"Enter another number: \"))\n        result = str(num1 + num2)\n        print(\"The answer is \" + result)\n    elif user_input == \"subtract\":\n        num1 = float(input(\"Enter a number: \"))\n        num2 = float(input(\"Enter another number: \"))\n        result = str(num1 - num2)\n        print(\"The answer is \" + result)\n    elif user_input == \"multiply\":\n        num1 = float(input(\"Enter a number: \"))\n        num2 = float(input(\"Enter another number: \"))\n        result = str(num1 * num2)\n        print(\"The answer is \" + result)\n    elif user_input == \"divide\":\n        num1 = float(input(\"Enter a number: \"))\n        num2 = float(input(\"Enter another number: \"))\n        result = str(num1 / num2)\n        print(\"The answer is \" + result)\n    else:\n        print(\"Unknown input\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def larger_than_num(nums, num_to_compare):\n  count = 0\n  for num in nums:\n    if num > num_to_compare:\n      count += 1\n  \n  return count\n\nprint(larger_than_num(nums, num_to_compare)) # 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def area(b,h): \n    return (b*h)/2 \n\nb = int(input('Please enter the base: ')) \nh = int(input('Please enter the height: ')) \n\nprint('The area of the triangle is: ', area(b,h)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nnumber = random.randint(1, 100)\nprint(number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_words(strings):\n    count = 0\n    for string in strings:\n        words = string.split(' ')\n        count += len(words)\n    return count\n\nstrings = [\"Hello World\", \"Foo Bar\", \"Hello Again\"]\ncount = count_words(strings)\nprint(count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_dict = dict(item.split(\"=\") for item in s.split(\"&\"))\n\nprint(my_dict) # prints {'student': 'John', 'grade': 'A'} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\nx1 = [1, 2, 3, 4, 5, 6]\ny1 = [50, 60, 70, 80, 70, 60]\nx2 = [1, 2, 3, 4, 5, 6]\ny2 = [40, 50, 70, 80, 90, 100]\n\n# set figure size\nplt.figure(figsize=(8, 5))\n\n# plot data\nplt.plot(x1, y1, label='Product A')\nplt.plot(x2, y2, label='Product B')\n\n# beautify the graph\nplt.xlabel('Months')\nplt.xticks([1, 2, 3, 4, 5, 6])\nplt.ylabel('Sales (in Units)')\nplt.title('Comparing Sales of Two Products')\nplt.legend()\nplt.grid(True)\n\n# show the chart\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = \"Hello, world!\"\nsubstring = \"world\"\nsubstitution = \"Python\"\n\nprint(string.replace(substring, substitution)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = input(\"enter a string\")\n\n# Create dictionary to keep track of count of characters \nd = {} \n  \n# Loop through each character in string and add it to \n# dictionary as key and its count as value \nfor char in string: \n    if char in d: \n        d[char] += 1\n    else: \n        d[char] = 1\n  \n# Initialize min with the first characters frequency \n# and character with first character  \nmax_value = 0\nmax_char = string[0]\n  \n# Loop through each character in string  \nfor char in string: \n    val = d.get(char) \n    if val > max_value: \n        max_value = val \n        max_char = char\nprint(\"Character with maximum occurrence is: \", max_char) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: a = int(input(\"Enter first value: \"))\nb = int(input(\"Enter second value: \"))\nc = int(input(\"Enter third value: \"))\n\naverage = (a + b + c) / 3\nprint(\"The average is: \" + str(average)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def capitalized(string): \n\toutput = []\n\t# Split the input string into list of words \n\twords = string.split()   \n\tfor word in words: \n\t\t# Capitalize the first letter\n\t\tfirst_letter = word[0] \n\t\tword = first_letter.upper() + word[1:] \n\t\toutput.append(word) \n        \n\treturn \" \".join(output) \n\n# Driver code \nstring = \"this is a sample sentence\"\nprint(capitalized(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# read the dataset\ndata = pd.read_csv('housing.csv')\n\n# split the data\nX = data.drop('price', axis=1)\ny = data['price']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# train the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# evaluate the model\nscore = model.score(X_test, y_test)\nprint(\"Model Score:\", score) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_n_numbers(n):\n  sum = 0\n  for i in range(n+1):\n      sum += i\n  return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef random_password_generator(length):\n chars = string.ascii_letters + string.digits + string.punctuation\n return ''.join((random.choice(chars) for i in range(length)))\n\nprint(random_password_generator(length)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: if digit == 0:\n    print(\"This is a zero.\")\nelif digit == 1:\n    print(\"This is a one.\")\nelif digit == 2:\n    print(\"This is a two.\")\nelif digit == 3:\n    print(\"This is a three.\")\nelif digit == 4:\n    print(\"This is a four.\")\nelif digit == 5:\n    print(\"This is a five.\")\nelif digit == 6:\n    print(\"This is a six.\")\nelif digit == 7:\n    print(\"This is a seven.\")\nelif digit == 8:\n    print(\"This is an eight.\")\nelif digit == 9:\n    print(\"This is a nine.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(arr, target):  \n    for i in range(len(arr)): \n        if arr[i] == target: \n            return i \n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def random_number_generator(lhs, rhs):\n    '''This function generates a random number between given range (lhs, rhs)'''\n    import random\n    return random.randint(lhs, rhs) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get('http://www.example.com').text\n\n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n\n# Scrape the content\ncontent = soup.p\n\n# Save the content in a text file\nwith open('content.txt', 'w') as file:\n    file.write(content) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_sq_list(lst): \n    sum = 0  \n    for i in lst: \n        sum += i * i \n    return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiplication_table(number): \n    for i in range(1, 11): \n        print(number, 'x', i, '=', number*i) \n\nmultiplication_table(number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(sorted_list, item):\n    low = 0\n    high = len(sorted_list) - 1\n    found = False\n\n    while low <= high and not found:\n        mid = (low + high) // 2\n        if sorted_list[mid] == item:\n            found = True\n        else:\n            if item < sorted_list[mid]:\n                high = mid - 1\n            else:\n                low = mid + 1\n    return found\n\nsorted_list = [2, 3, 4, 5, 8, 9, 10] \nitem = 8\nprint(search(sorted_list, item)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_sums(lst1, lst2):\n    pairs = list(zip(lst1, lst2))\n    sums = [i1+i2 for (i1, i2) in pairs]\n    return sums but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fill_missing_values(data):\n    for column in data.columns:\n        if data[column].isnull().any():\n            mean = data[column].mean()\n            data[column] = data[column].fillna(mean)\n    return data but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(\"*\" * 10)\nfor i in range(4):\n    print(\"*      *\")\nprint(\"*\" * 10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class User:\n    def __init__(self, name, age):\n        self._name = name\n        self._age = age\n    \n    @property\n    def name(self):\n        return self._name\n\n    @name.setter\n    def name(self, value):\n        self._name = value\n    \n    @property \n    def age(self):\n        return self._age\n    \n    @age.setter\n    def age(self, value):\n        if value < 0:\n            raise ValueError('Age must be a positive number')\n        self._age = value but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Node class \nclass Node: \n \n    # Function to initialize the node object \n    def __init__(self, data): \n        self.data = data # Assign data \n        self.next = None # Initialize next as null \n\n# Linked list class \nclass LinkedList: \n \n    # Function to initialize the Linked List object \n    def __init__(self):  \n        self.head = None\n \n    # This function returns true if a value x is present in linked list \n    def search(self, x):     \n        temp = self.head \n        while temp.next != None: \n            if temp.data == x: \n                return True  # data found \n            temp = temp.next\n \n        if temp.data == x: \n            return True # data found \n        return False # data not found \n\n# Code execution\nif __name__=='__main__': \n \n    # Start with the empty list \n    llist = LinkedList() \n    llist.head = Node(1) \n    second = Node(2) \n    third = Node(3) \n\n# Link first node with second \n    llist.head.next = second  \n     \n# Link second node with third  \n    second.next = third \n\n# Search value 3 \n    if llist.search(3): \n        print(\"Value found\")\n    else:\n        print(\"Value not found\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(arr, target):    \n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(mylist):\n    newlist = list(set(mylist))\n    return newlist\n\nmylist = ['apple', 'pineapple', 'apple', 'banana']\nprint(remove_duplicates(mylist)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a program to sort the elements of an unsorted array using the bubble sort technique in Python\n\"\"\"\ndef bubbleSort(arr):\n\tlength = len(arr)\n\tfor i in range(length):\n\t\tfor j in range(length-1-i):\n\t\t\tif arr[j] > arr[j+1]:\n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]\n\treturn arr\n \n# Driver Code\narr = [4, 5, 7, 3, 8, 1, 9]\n \nresult = bubbleSort(arr)\n \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class VirtualAssistant:\n  def __init__(self):\n    self.cities = ['New York', 'Paris', 'London']\n\n  def get_weather_forecast(self):\n    for city in self.cities:\n      response = requests.get(f'http://api.openweathermap.org/data/2.5/weather?q={city}&APPID=12234fg908jkh\\')\n      weather = response.json()\n      print(f'The forecast for {city} is {weather[\"main\"][\"temp\"]} degrees Celsius.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom requests.auth import HTTPBasicAuth\n\nclass CloudflareApi:\n    def __init__(self, username, api_key):\n        self.username = username\n        self.api_key = api_key\n        self.api_url = 'https://api.cloudflare.com/client/v4/{endpoint}'\n\n    def get_zone_list(self):\n        endpoint = 'zones'\n        url = self.api_url.format(endpoint=endpoint)\n        response = requests.get(url, auth=HTTPBasicAuth(self.username, self.api_key))\n        return response.json() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_sort(arr):\n \n if len(arr) > 1:\n \n mid = len(arr) // 2\n left = arr[:mid]\n right = arr[mid:]\n \n merge_sort(left)\n merge_sort(right)\n \n i = j = k = 0\n \n while i < len(left) and j < len(right):\n if left[i] < right[j]:\n arr[k] = left[i]\n i += 1\n else:\n arr[k] = right[j]\n j += 1\n k += 1\n \n while i < len(left):\n arr[k] = left[i]\n i += 1\n k += 1\n \n while j < len(right):\n arr[k] = right[j]\n j += 1\n k += 1\n \narr = [8, 4, 14, 1, 9]\n \nmerge_sort(arr)\n \nprint(arr) # prints [1, 4, 8, 9, 14] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: '''\nCreated on Jul 30, 2015\n\n@author: Mikhail\n'''\nimport unittest\nimport re\nfrom json_file_generator import MyOwnJSONProcessing as json_processing\nfrom json_file_generator import __version__ as json_file_generator_version\nfrom unittest.case import skip, skipIf\n\nclass GenerateAndLoadJSONTestUpdateFour(unittest.TestCase):\n    \n    expected_data = {}\n\n    @classmethod\n    def setUpClass(cls):\n        print \"{} for {} has been called\".format(cls.setUpClass.__name__, cls.__name__)\n        cls.expected_data = json_processing.generate_data_for_json_obj()\n\n    def setUp(self):\n        print \"{} for {} has been called\".format(self.setUp.__name__, self._testMethodName)\n        self.file_name = \"generate_and_load_unittest.json\"\n        self.original_name = json_processing.generate_json_file_with_data(self.file_name, self.expected_data)\n\n    def tearDown(self):\n        print \"{} for {} has been called\".format(self.tearDown.__name__, self._testMethodName)\n\n    @classmethod\n    def tearDownClass(cls):\n        print \"{} for {} has been called\".format(cls.tearDownClass.__name__, cls.__name__)\n        json_processing.clean_up()\n\n    def testGenerateAndLoadJSONValidKeys(self):\n        print \"Processing file {}\".format(self.original_name)\n        actual_data = json_processing.load_data_from_json_file(self.original_name)\n        for exp_key in self.expected_data.keys():\n            self.assertTrue(actual_data.has_key(exp_key), \"Expected key '{}' has not been found in loaded json\".format(exp_key))\n        for act_key in actual_data.keys():\n            self.assertTrue(self.expected_data.has_key(act_key), \"Loaded key '{}' has not been found in dumped json\".format(act_key))\n    \n    # General version of skip\n    @skip(\"old functionality\")\n    def testGenerateAndLoadJSONValidKeysHasOnlyLetters1(self):\n        print \"Processing file {}\".format(self.original_name)\n        actual_data = json_processing.load_data_from_json_file(self.original_name)\n        for act_key in actual_data.keys():\n            self.assertTrue(re.match(\"[^a-zA-Z]\", act_key) is None, \"Key should contains only alpha symbols: {}\".format(act_key))\n\n    # Version of skip that check version of our json_file_generator\n    @skipIf(json_file_generator_version > 1, \"This functionality is not supported in this version on the json file generator\")\n    def testGenerateAndLoadJSONValidKeysHasOnlyLetters2(self):\n        print \"Processing file {}\".format(self.original_name)\n        actual_data = json_processing.load_data_from_json_file(self.original_name)\n        for act_key in actual_data.keys():\n            self.assertIsNone(re.match(\"[^a-zA-Z]\", act_key), \"Key should contains only alpha symbols: {}\".format(act_key))\n\n    def testGenerateAndLoadJSONValidValues(self):\n        print \"Processing file {}\".format(self.original_name)\n        actual_data = json_processing.load_data_from_json_file(self.original_name)\n        for exp_key, exp_value in self.expected_data.items():\n            self.assertEquals(exp_value, actual_data.get(exp_key), \"Dictionaries have different values '{}' for first and '{}' for second for the same key\".format(exp_value, actual_data.get(exp_key)))\n        for act_key, act_value in actual_data.items():\n            self.assertEquals(act_value, self.expected_data.get(act_key), \"Dictionaries have different values '{}' for first and '{}' for second for the same key\".format(act_value, self.expected_data.get(act_key)))\n\n    def testGenerateAndLoadJSONForInvalidFile(self):\n        \"\"\"\n        This test checks that valid exception will be raised if required file will not be found\n        \"\"\"\n        invalid_name = \"invalid_\" + self.original_name\n        print \"Processing file {}\".format(invalid_name)\n        with self.assertRaises(IOError) as io_exception:\n            # attempt to read file that doesn't exist\n            json_processing.load_data_from_json_file(invalid_name)\n        \n        self.assertEqual(io_exception.exception.errno, 2)\n        self.assertEqual(io_exception.exception.strerror, 'No such file or directory')\n\nif __name__ == \"__main__\":\n    unittest.main(verbosity=2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = \"1,2,3,4,5\"\nlist = string.split(\",\")\nprint(list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max_value(lst):\n    max_value = lst[0]\n    for item in lst:\n        # loop through list and compare each item with max_value \n        if item > max_value:\n            max_value = item\n    return max_value\n \nlst = [1, -5, 8, 10, -2] \n  \n# call the function\nmaximum_value = find_max_value(lst)\n  \nprint(\"The maximum value in the list is\", maximum_value)\n# Output: The maximum value in the list is 10 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def are_anagrams(s1, s2): \n      \n    # get lengths of both strings \n    n1 = len(s1) \n    n2 = len(s2) \n      \n    # if lengths not equal, strings are not anagrams \n    if n1 != n2: \n        return False\n  \n    # sort both strings  \n    s1 = sorted(s1) \n    s2 = sorted(s2) \n  \n    # linearly compare characters of both strings \n    for i in range(0, n1): \n        if s1[i] != s2[i]: \n            return False\n  \n    return True \n  \ns1 = \"listen\"\ns2 = \"silent\"\nif are_anagrams(s1,s2):\n    print(\"The strings are anagrams of each other.\")\nelse: \n    print(\"The strings are not anagrams of each other.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_dict_list(dict_list, sort_key):\n  return sorted(dict_list, key=lambda k: k[sort_key]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Customer:\n def __init__(self, name, address, email, phone):\n    self.name = name\n    self.address = address\n    self.email = email\n    self.phone = phone\n\ncustomer1 = Customer('John Doe', '123 Main Street', 'john@example.com', '555-555-5555') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(s):\n    if len(s) == 0:\n        return\n    else:\n        print(s[-1], end=\"\")\n        reverse_string(s[:-1])\n \n# Driver program\nstring = \"Hello World!\"\nreverse_string(string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndef is_valid_json(string):\n    try:\n        json.loads(string)\n        return True\n    except:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\n# Create a form\nform_data = {\n 'name': 'John Doe',\n 'email': 'john@example.com'\n }\n\n# Send request\nr = requests.post('http://example.com/form-submit', data=form_data)\n\n# Check status code\nif r.status_code == 200:\n print('Form submitted successfully!')\nelse:\n print('Failed to submit form!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef sum(arr):\n return np.sum(arr)\n\nsum([1,2,3,4]) # 10 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_mode(sequence):\n counts = {}\n for num in sequence:\n if num in counts:\n counts[num] += 1\n else:\n counts[num] = 1\n \n max_count = 0\n mode_num = 0\n for key, value in counts.items():\n if value > max_count:\n max_count = value\n mode_num = key\n \n return mode_num but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: queryString = \"country=usa&city=ny&lang=en&temp=77\"\n\nqueryDict = {}\n\nfor keyValueString in queryString.split('&'):\n key, value = keyValueString.split('=')\n queryDict[key] = value\n\nprint(queryDict)\n# Output: {'country': 'usa', 'city': 'ny', 'lang': 'en', 'temp': '77'} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_user_id(length):\n generated_id = ''\n chars = string.ascii_letters + string.digits + '!@#$%^&*()'\n current_users = [user.id for user in User.query.all()]\n\n while generated_id in current_users:\n generated_id = ''.join(random.choice(chars) for _ in range(length))\n\n return generated_id but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nReverse a given string without using the built-in python reverse function.\n\"\"\"\n\ndef reverse_string(in_str):\n    rev_str = ''\n    for i in range(len(in_str) - 1, -1, -1):\n        rev_str += in_str[i]\n    return rev_str\n\nif __name__ == '__main__':\n    in_str = 'reverse me'\n    rev_str = reverse_string(in_str)\n    print(rev_str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Python code for subtracting two 8-bit integers\n\n# Function to subtract two 8-bit binary numbers \n# a and b \ndef subtractTwoBits(a, b): \n\t# a is larger \n\tif (a >= b): \n\t\t\n\t\t# Array storing values \n\t\t# after X-OR \n\t\tdiff = [0] * 8\n\t\t\n\t\t# Till same bits reach \n\t\tfor i in range(8): \n\t\t\t\n\t\t\t# If current of b is 0 \n\t\t\tif (b % 2 == 0): \n\t\t\t\n\t\t\t\t# Take X-OR with 0 \n\t\t\t\tdiff[i] = (int)(a % 2) \n\t\t\t\n\t\t\t# If current of b is 1 \n\t\t\telse: \n\t\t\t\n\t\t\t\t# Take the X-OR with 1 \n\t\t\t\tdiff[i] = (int)(a % 2) ^ 1\n\t\t\t\n\t\t\t# Right shift \n\t\t\ta = int(a / 2) \n\t\t\tb = int(b / 2) \n\t\t\n\t\t# Convert the Binary result to Integer \n\t\treturn diffToDecimal(diff) \n\t\n\telse: \n\t\tprint(\"Error: a is smaller\") \n\t\treturn -1\n\n# Function to convert 8 bit \n# binary number to Decimal \ndef diffToDecimal(diff): \n\t\n\t# Initialize the value \n\tval = 0\n\t\n\t# value before raising it  \n\t# to the power of 2 \n\tp = 1\n\t\n\t# Calculating the decimal value \n\tfor i in range (7, -1, -1): \n\t\n\t\t# Subtracting the value \n\t\tval = (val + (diff[i] * p))\t \n\t\tp = p * 2\n\t\t\n\treturn val \n\t\n# Driver Code \nx = 15\ny = 6\nres = subtractTwoBits(x, y) \nprint(res) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def function(n):\n    result = 0\n    for i in range(n):\n        result += (n * (i * (i+1)) // 2)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: <html>\n <head>\n  <title>Job Openings By Language</title>\n </head>\n <body>\n  <canvas id=\"chart\"></canvas>\n  <script>\n   const ctx = document.getElementById('chart').getContext('2d');\n   const chart = new Chart(ctx, {\n    type: 'bar',\n    data: {\n     labels: [\"JavaScript\", \"Python\", \"C++\", \"Java\"],\n     datasets: [{\n      label: '# of Openings',\n      data: [250, 200, 150, 100],\n      backgroundColor: [\n       'rgba(255, 99, 132, 0.2)',\n       'rgba(54, 162, 235, 0.2)',\n       'rgba(255, 206, 86, 0.2)',\n       'rgba(75, 192, 192, 0.2)'\n      ],\n      borderColor: [\n       'rgba(255, 99, 132, 1)',\n       'rgba(54, 162, 235, 1)',\n       'rgba(255, 206, 86, 1)',\n       'rgba(75, 192, 192, 1)'\n      ],\n      borderWidth: 1\n     }]\n    },\n    options: {\n     scales: {\n      yAxes: [{\n       ticks: {\n        beginAtZero: true\n       }\n      }]\n     }\n    }\n   });\n  </script>\n </body>\n</html> but is not the same. just give one example and only return the code."}
