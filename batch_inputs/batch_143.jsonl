{"prompt": "make some code that functions the same as the following code: import re\n\ntext = \"Some text here with an email example@test.com and another test@example.com\"\n\nmatches = re.findall(r'[\\w\\.-]+@[\\w\\.-]+\\.\\w+', text)\n\nprint(matches)\n# Output: ['example@test.com', 'test@example.com'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_words(string):\n    words = string.split()\n    counts = dict()\n\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n\n    return counts\n\nstring = \"This is a test of a long string with words that will be used to generate a dictionary\"\n\nprint(count_words(string))\n\n# Output should be {'This': 1, 'is': 1, 'a': 2, 'test': 1, 'of': 1, 'long': 1, 'string': 1, 'with': 1, 'words': 1, 'that': 1, 'will': 1, 'be': 1, 'used': 1, 'to': 1, 'generate': 1, 'dictionary': 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_last_element(list1, list2): \n    list1[-1:] = list2 \n    return list1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n'''\nUse processes and Netmiko to connect to each of the devices in the database.\nExecute 'show version' on each device. Record the amount of time required to do this.\nDISCLAIMER NOTE: Solution is limited to the exercise's scope\n'''\n\nfrom net_system.models import NetworkDevice\nimport django\nfrom multiprocessing import Process\nfrom termcolor import colored\nfrom datetime import datetime\nfrom netmiko import ConnectHandler\n\ndef sh_ver(a_device):\n# Execute cmd with NETMIKO\n    creds = a_device.credentials\n    rem_conn_ssh = ConnectHandler(device_type=a_device.device_type, ip=a_device.ip_address, username=creds.username,\n                                 password=creds.password, port=a_device.port, secret='')\n    # Output cmd\n    output = rem_conn_ssh.send_command_expect(\"show version\")\n    print \"\\n <<--------------------------->> \\n \"+ colored(output, 'green') + \"\\n\"\n\ndef main():\n# Main function to connect to the devices using NETMIKO and execute a cmd. Multi-processing support.\n    django.setup()\n# Record start time\n    process = []\n    start_time = datetime.now()\n    pylab_devices = NetworkDevice.objects.all()\n    for a_device in pylab_devices:\n        # Create a PROCESS for each device connection/cmd\n        node_process = Process(target=sh_ver, args=(a_device,))\n        # Start the THREAD\n        node_process.start()\n        process.append(node_process)\n\n    for any_process in process:\n        print \"Notice: \" + colored(any_process, 'red')\n        any_process.join()\n\n# Function sh_ver runtime calculation\n    runtime = datetime.now() - start_time\n    print \"This operation required \" + colored(runtime, 'blue')\n\nif __name__ == \"__main__\":\n    main()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longestSubsequence(array):\n    longest_start = 0\n    longest_length = 0\n    start = 0\n    current_length = 0\n    for i in range(len(array) - 1):\n        if array[i] == array[i + 1]:\n            current_length += 1\n        else:\n            current_length = 0\n            start = i+1\n        if current_length > longest_length:\n            longest_length = current_length\n            longest_start = start\n    return array[longest_start : longest_start + longest_length + 1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class TwoVariables:\n def __init__(self, a, b):\n self.a = a\n self.b = b\n \n def get_values(self):\n return (self.a, self.b) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Calculate the total distance between two points\ndef distance(c1, c2):\n  return ((c1[0] - c2[0])**2 + (c1[1] - c2[1])**2) ** 0.5\n\n# Calculate the total distance for a complete path\ndef path_distance(cities):\n  dist = 0\n  for i in range(len(cities) - 1):\n    dist += distance(cities[i], cities[i+1])\n  return dist\n\n# Generate a random path of cities\ndef generate_path(cities):\n    path = cities[:]\n    random.shuffle(path)\n    return path\n\n# Simulated Annealing algorithm to optimize the path\ndef anneal(cities):\n    prev_distance = path_distance(cities)\n    T = 1.0\n    T_min = 0.00001\n    alpha = 0.9\n    while T > T_min:\n        i = 1\n        while i <= 500:\n            i += 1\n            new_path = generate_path(cities)\n            curr_distance = path_distance(new_path)\n            ap = accept_prob(prev_distance, curr_distance, T)\n            if ap > random.random():\n                cities = new_path[:]\n                prev_distance = curr_distance\n        T *= alpha\n    return cities\n\n# Calculate the acceptance probability\ndef accept_prob(prev_distance, curr_distance, T):\n    if curr_distance < prev_distance:\n        return 1\n    return math.exp(-abs(curr_distance - prev_distance) / T)\n\n# Main program begins here \nif __name__== \"__main__\":\n # List of cities:\n cities =  [[0, 0], [1, 1], [2, 3], [3, 2]]\n \n # Main loop\n path = anneal(cities)\n print(\"Optimized Path:\")\n for p in path:\n \tprint(p) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Movie:\n    def __init__(self, title, actor, release_date):\n        self.title = title\n        self.actor = actor\n        self.release_date = release_date but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countUniqueCharacters(string):\n    seen = set()\n    count = 0\n    for char in string:\n        if char not in seen:\n            seen.add(char)\n            count += 1\n        else:\n            continue\n    return count\n\nprint(countUniqueCharacters(\"Hello World\"))\n# Output: 10 (The unique characters present in \"Hello World\" are: H, e, l, o, W, r, d) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countNumbers(nums):\n evenCount = 0\n oddCount = 0\n \n for num in nums:\n if num % 2 == 0:\n evenCount += 1\n else:\n oddCount += 1\n \n return (evenCount, oddCount)\n\nnums = [2, 9, 4, 8, 0, 7, 1]\nevenCount, oddCount = countNumbers(nums)\n\nprint(\"Even numbers:\", evenCount)\nprint(\"Odd numbers:\", oddCount) \n# Even numbers: 4\n# Odd numbers: 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.layers import Dense, Flatten, Embedding\nfrom tensorflow.keras.models import Sequential\n\n# some example text\ntexts = ['This new technology is changing the way we do politics',\n 'Business has been affected by the new technology',\n 'Sports have remained unaffected by the new technology',\n 'Politics have become more complex due to the new technology']\n\n# encode the classes\nlabels = [1, 0, 2, 1]\n\n# tokenize the text\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts(texts)\nword_index = tokenizer.word_index\n\n# create the sequence of words\nsequences = tokenizer.texts_to_sequences(texts)\n \n# create the padding for sequences\ndata = pad_sequences(sequences, maxlen=8)\n\n# Build and train a model\nmodel = Sequential()\nmodel.add(Embedding(input_dim=len(word_index)+1, output_dim=8, input_length=8))\nmodel.add(Flatten())\nmodel.add(Dense(4, activation='softmax'))\n\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(data, labels, epochs=10)\n\n# Evaluate the model\n# test_text = 'Sports have become more competitive due to the new technology'\n# test_seq = tokenizer.texts_to_sequences([test_text])\n# test_data = pad_sequences(test_seq, maxlen=8)\n# print('Predicted label:', model.predict_classes(test_data)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class AverageCalculator:\n  def __init__(self, num1, num2):\n    self.num1 = num1\n    self.num2 = num2\n  \n  def get_average(self):\n    return (self.num1 + self.num2) / 2\n\nac = AverageCalculator(4, 8)\nprint(\"The average of 4 and 8 is: \" + str(ac.get_average())) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import speech_recognition as sr\n\nr = sr.Recognizer()\n\nwords = ['happy', 'sad', 'angry']\n\nwith sr.Microphone() as source:\n    print(\"Say a word.\")\n    audio = r.listen(source)\n\ntry:\n    word = r.recognize_google(audio).lower()\n    if word in words:\n        print(\"The emotion of the word is:\", word)\n    else:\n        print(\"The word is unknown.\")\nexcept:\n    print(\"Sorry could not recognize\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [1, 3, 7, 4, 5]\nsmall1 = min(list)\nlist.remove(small1)\nsmall2 = min(list)\n\nprint(small1, small2) # 1, 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_ascending(nums):\n    sorted_list = sorted(nums) \n  \n    return sorted_list\n\nprint(sort_ascending(nums)) # [1, 2, 4, 5, 5, 6] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def average(a, b): \n    return (a + b)/2 \n  \na = 8\nb = 10\nprint(\"Average of\", a, \"and\", b, \"is\", average(a, b)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: X = [[0, 0, 0], \n     [0, 0, 0], \n     [0, 0, 0]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findFirstDivisibleBy7(arr):\n    for i in range(0, len(arr)):\n        if arr[i] % 7 == 0:\n            return arr[i]\n    return -1\n\narr = [41, 42, 43, 44, 45]\nresult = findFirstDivisibleBy7(arr)\nprint(result) # 42 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sumInRange(lower_limit, upper_limit): \n    \n    # initialize sum variable \n    sum = 0; \n  \n    # calculate sum of all numbers between \n    # lower_limit & upper_limit \n    for i in range(lower_limit, upper_limit + 1): \n        sum += i \n    \n    # return the output \n    return sum; but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# load the dataset\ndf = pd.read_csv('./dataset.csv')\n\n# define features\nX = df.loc[:, df.columns != 'Interest.Rate']\n\n# define target\ny = df[['Interest.Rate']]\n\n# create train and test datasets\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# train the model\nfrom sklearn.linear_model import LinearRegression\nreg = LinearRegression()\nreg.fit(X_train, y_train)\n\n# make predictions\ny_predict = reg.predict(X_test)\n\n# evaluate performance\nfrom sklearn.metrics import mean_squared_error\nmse = mean_squared_error(y_test, y_predict)\nprint('Mean Square Error: %.2f' % mse)\n\n# save the model\nimport pickle\nwith open('model.sav', 'wb') as f:\n pickle.dump(reg, f) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: [(1, 2), (3, 4), (5, None)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_lowercase(string):\n    for character in string:\n        if character != character.lower():\n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import unittest\n\nclass TestAlgorithm(unittest.TestCase):\n    \n    def test_algorithm(self):\n        10 = algorithm([1, 2, 3, 4])\n        self.assertEqual(10, 10)\n        \n        40 = algorithm([10, 10, 10, 10])\n        self.assertEqual(40, 40)\n\nif __name__ == '__main__':\n    unittest.main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def first_characters_of_words(string):\n    words = string.split(\" \") \n    characters = [word[0] for word in words] \n    return \"\".join(characters)\n\nprint(first_characters_of_words(\"This is a test string\")) # Tiat but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(arr):\n    new_list = []\n    for i in arr:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n\narr = [1, 2, 2, 3, 3, 4, 4]\nprint(remove_duplicates(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(input_string):\n    if input_string == input_string[::-1]:\n        return True\n    else:\n        return False\n    \ninput_string = \"racecar\"\n\ncheck_palindrome = is_palindrome(input_string)\n\nif check_palindrome == True:\n    print(\"Input string is a palindrome\")\nelse:\n    print(\"Input string is NOT a palindrome\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_nth_element(list_of_lists, n):\n    return [item[n] for item in list_of_lists] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_bmi(height, weight): \n    bmi = weight / ((height/100) ** 2)\n    return bmi but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: if 4 < 8: \n  print('Hello World')\nelse:\n  print('Goodbye World') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.model_selection import GridSearchCV\n\nparameters = {'C': [1, 5, 10, 100], 'gamma': [0.0001, 0.001, 0.01, 0.1]}\nclf = GridSearchCV(svm.SVC(), parameters)\n\n# Run grid search\npython your_program.py --estimator  clf --parameters $parameters but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\ntable = pd.DataFrame(columns=[str(i) for i in range(10)], index=range(20))\nprint(table) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Print a table of numbers 1 to 10\nfor i in range(1, 11):\n print('{0:2d} {1:3d} {2:4d}'.format(i, i**2, i**3))\n\n# Output:\n 1   1    1\n 2   4    8\n 3   9   27\n 4  16   64\n 5  25  125\n 6  36  216\n 7  49  343\n 8  64  512\n 9  81  729\n10 100 1000 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(word):\n  rev_word = word[::-1]\n  if word == rev_word:\n    return True\n  return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Shape:\n    def __init__(self):\n        # Initialize any variables as needed.\n        pass\n\n    def calculate_perimeter(self):\n        # Code to calculate perimeter\n        pass\n    \n    def calculate_area(self):\n        # Code to calculate area\n        pass\n\n    def calculate_volume(self):\n        # Code to calculate volume\n        pass but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Country:\n    def __init__(self, name, population, area):\n        self.name = name\n        self.population = population\n        self. area = area but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_element(l, x):\n    for i in range(len(l)):\n        if l[i] == x:\n            return i\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(s1, s2):\n    s1_dict = {}\n    s2_dict = {}\n\n    for char in s1:\n        if char in s1_dict:\n            s1_dict[char] += 1\n        else:\n            s1_dict[char] = 1\n\n    for char in s2:\n        if char in s2_dict:\n            s2_dict[char] += 1\n        else:\n            s2_dict[char] = 1\n\n    return s1_dict == s2_dict but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.corpus import wordnet\n\n#Define preprocessor\ndef preprocess(sentence):\n lemmatizer = WordNetLemmatizer()\n tokens = nltk.word_tokenize(sentence)\n tokens = [lemmatizer.lemmatize(token, get_wordnet_pos(token)) for token in tokens]\n return ' '.join(tokens)\n\n#Define helper function for getting part-of-speech\ndef get_wordnet_pos(word):\n tag = nltk.pos_tag([word])[0][1][0].upper()\n tag_dict = {\n 'J': wordnet.ADJ,\n 'N': wordnet.NOUN,\n 'V': wordnet.VERB,\n 'R': wordnet.ADV\n }\n return tag_dict.get(tag, wordnet.NOUN)\n\n#Define helper function for getting response\ndef get_response(sentence):\n return responses.get(preprocess(sentence), 'I am not sure about that. Can you Ask me a different question?')\n\n#Define responses\nresponses = {\n 'what programming language': 'I use Python, but there are many programming languages to choose from.',\n 'what programming language should i use': 'It depends on what you are trying to achieve, so you should research what language best suits your purpose.'\n}\n\n#Get user input\nquery = input('Ask me about programming: ')\n\n#Get response\nresponse = get_response(query)\n\n#Print response\nprint(response) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import flask\nfrom flask import Flask, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = flask.Flask(name)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\ndb = SQLAlchemy(app)\n\nclass User(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(120))\n\n@app.route('/users', methods=['GET'])\ndef get_users():\n users = User.query.all()\n users_data = []\n for user in users:\n  users_data.append({'id': user.id, 'name': user.name})\n return jsonify({'users': users_data}) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_common_subsequence(s1, s2): \n    m = len(s1) \n    n = len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1): \n        for j in range(1, n + 1):\n            if s1[i-1] == s2[j-1]: \n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    result = ''\n    i, j = m, n\n    while i > 0 and j > 0:\n        if s1[i-1] == s2[j-1]: \n            result = s1[i-1] + result\n            i -= 1\n            j -= 1\n        elif dp[i-1][j] > dp[i][j-1]: \n            i -= 1\n        else: \n            j -= 1\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import urllib.request\nimport json\nimport logging\n\n# define urls\ndef get_response(url):\n response = urllib.request.urlopen(url)\n data = json.loads(response.read())\n return data\n\n# define intent\ndef respond(message):\n intent, entities = get_entities(message)\n response = get_action(intent, entities)\n return response\n\n# define entity\ndef get_entities(message):\n url = f'http://example.com/api/nlp/{message}'\n result = get_response(url)\n intent = result['intent']\n entities = result['entities']\n return intent, entities\n\n# define action\ndef get_action(intent, entities):\n url = f'http://example.com/api/action/{intent}'\n data = {\n  'entities': entities\n }\n result = get_response(url,data)\n return result['response']\n \n# main loop\nwhile True:\n message = input(\">> \")\n response = respond(message)\n print(response) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Polygon:\n    def __init__(self, sides):\n        self.sides = sides\n\n    def calc_perimeter(self):\n        return (self.sides * 5)\n\n# create a Polygon instance\npolygon = Polygon(5)\n\n# calculate the perimeter\nprint(polygon.calc_perimeter()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(string):\n    return string == string[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ShoppingCart:\n    def __init__(self):\n        self.cart_items = []\n            \n    def add_item(self, item):\n        self.cart_items.append(item)\n\n    def remove_item(self, item):\n        self.cart_items.remove(item)\n\n    def calculate_cost(self):\n        total_cost = 0\n        for item in self.cart_items:\n            total_cost += item.price\n        return total_cost but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_by_value(list_of_dicts):\n return sorted(list_of_dicts, key=lambda k: k['age'], reverse=True)\n\nprint(sort_by_value(list_of_dicts))\n\n# Output:\n[\n {'name': 'Susan', 'age': 35},\n {'name': 'Brian', 'age': 30},\n {'name': 'Tim', 'age': 25},\n {'name': 'John', 'age': 20}\n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_2d_array(my_array):\n    max_number = my_array[0][0]\n    max_index = 0\n    for row_index in range(len(my_array)):\n        for col_index in range(len(my_array[row_index])):\n            if my_array[row_index][col_index] > max_number:\n                max_number = my_array[row_index][col_index]\n                max_index = (row_index, col_index)\n    return max_number, max_index\n\nprint(max_2d_array(my_array)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport json \nimport time\n\n# Define a function to process the text\ndef process_text(text):\n    # Make an API request and get the results in JSON\n    response = requests.get('https://api.example.com', params={\n        'request': text\n        })\n    data = json.loads(response.text)\n    \n    # Get the category from the results\n    category = data['category']\n    \n    # Return the category\n    return category\n\n# Loop as long as the user keeps talking\nwhile True:\n    # Get the user's input\n    user_input = input('> ')\n    \n    # Process the input\n    category = process_text(user_input)\n    \n    # Print the category\n    if category:\n        print(f\"This is a {category} website.\")\n    else:\n        print(\"I'm not sure what to make of this.\")\n    \n    # Wait 5 seconds before asking for the user's input again\n    time.sleep(5) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(arr): \n \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [2, 7, 4, 1, 5, 3] \n  \nbubble_sort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]), but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: A lightweight AI model can be developed using programming languages such as Python, JavaScript, etc. It will contain code to process text data, extract features, apply a suitable machine learning algorithm and train a model to classify and categorize text. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(list):\n     for i in range(0, len(list)): \n          for j in range(0, len(list) - 1 - i): \n               if list[j] > list[j + 1]: \n                    list[j], list[j + 1] = list[j + 1], list[j]\n     return list\n\nlist = [5, 2, 4, 1, 3]\n\nsorted_list = sort_list(list)\n\nprint(sorted_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\nX = np.array([1, 2, 3, 4, 5]).reshape(-1, 1)\ny = np.array([1, 4, 9, 16, 25])\n\n# Build the model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Plot the results\nplt.scatter(X, y)\nplt.plot(X, model.predict(X))\nplt.title(\"Linear Regression Model\")\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a Python program to scrape and store the HTML content of a given website\n\"\"\"\n\nimport requests\nimport bs4\n\ndef scrape_website(url):\n    # Fetch the web page\n    response = requests.get(url)\n    # Parse the web page\n    soup = bs4.BeautifulSoup(response.text, 'html.parser')\n    # Store the HTML content\n    with open('website_content.txt', 'w') as file:\n        file.write(str(soup))\n\nif __name__ == '__main__':\n    scrape_website('https://example.com') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\n\ndef factorial(n):\n if n == 0:\n return 1\n else:\n return n * factorial(n-1)\n\nif __name__ == '__main__':\n number = int(sys.argv[1])\n result = factorial(number)\n print('The factorial of %d is %d' % (number, result)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_x(list, x):\n    count = 0\n    for i in list:\n        if i == x:\n            count += 1\n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import base64\nfrom cryptography.fernet import Fernet\ndef encrypt_message(message):\nkey = Fernet.generate_key()\nf = Fernet(key)\nencoded_message = message.encode()\nencrypted_message = f.encrypt(encoded_message)\nreturn base64.encodestring(encrypted_message) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class PaymentProcessor:\n    def __init__(self):\n        self.transactions = []\n\n    def process_payment(self, amount, account_no, currency):\n        self.transactions.append({\n            'amount': amount,\n            'account_no': account_no,\n            'currency': currency\n        })\n    \n    def get_transaction_count(self):\n        return len(self.transactions) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def shortest_string(strings):\n    shortest_string = strings[0]\n   \n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    \n    return shortest_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def intersection(arr1, arr2):\n  result = [i for i in arr1 if i in arr2]\n  return result\n\narr1 = [1, 2, 3, 4]\narr2 = [3, 4, 5, 6]\nresult = intersection(arr1, arr2)\nprint(result)  # [3, 4] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def palindrome_edit_distance(string):\n    \"\"\"Calculates the number of one-character edit operations required\n    to make a given string a palindrome.\n\n    Args:\n      string (str): The string to be evaluated.\n\n    Returns:\n      int: The number of one-character edit operations required\n      to make the provided string a palindrome.\n    \"\"\"\n    n = len(string)\n \n    # Create a table to store results of subproblems\n    dp = [[0 for x in range(n)] for x in range(n)]\n \n    # Fill d[][] in bottom up manner\n    for gap in range(1, n):\n        for j in range(gap, n):\n            i = j - gap\n            if string[i] == string[j] and gap == 1:\n                dp[i][j] = 0\n            elif string[i] == string[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i][j - 1],   # Insert\n                                   dp[i + 1][j])   # Remove\n \n    # Return the minimum edits\n    return dp[0][n - 1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_words(words, char):\n    count_dict = dict()\n    for word in words:\n        if word.startswith(char):\n            count_dict[word] = count_dict.get(word, 0) + 1\n    return count_dict but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def partition(arr,low,high): \n    i = ( low-1 )         # index of smaller element \n    pivot = arr[high]     # pivot \n  \n    for j in range(low , high): \n  \n        # If current element is smaller than the pivot \n        if   arr[j] < pivot: \n          \n            # increment index of smaller element \n            i = i+1 \n            arr[i],arr[j] = arr[j],arr[i] \n  \n    arr[i+1],arr[high] = arr[high],arr[i+1] \n    return ( i+1 ) \n  \n# The main function that implements QuickSort \n# arr[] --> Array to be sorted, \n# low  --> Starting index, \n# high  --> Ending index \n  \n# Function to do Quick sort \ndef quickSort(arr,low,high): \n    if low < high: \n  \n        # pi is partitioning index, arr[p] is now \n        # at right place \n        pi = partition(arr,low,high) \n  \n        # Separately sort elements before \n        # partition and after partition \n        quickSort(arr, low, pi-1) \n        quickSort(arr, pi+1, high) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\npieces = ['rock','paper','scissors']\n\nplayer1 = random.choice(pieces)\nplayer2 = random.choice(pieces)\n\nprint(\"Player 1 chose\", player1)\nprint(\"Player 2 chose\", player2)\n\nif player1 == player2:\n  print('Draw!')\nelif player1 == 'rock':\n  if player2 == 'scissors':\n    print('Player 1 won!')\n  else:\n    print('Player 2 won!')\nelif player1 == 'scissors':\n  if player2 == 'paper':\n    print('Player 1 won!')\n  else:\n    print('Player 2 won!')\nelse:\n  if player2 == 'rock':\n    print('Player 1 won!')\n  else:\n    print('Player 2 won!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(15, 41):\n    if i % 7 == 0:\n        print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers = [1, 5, 6, 3, 8]\n\nfiltered_numbers = []\n\nfor number in numbers:\n  if number > 5:\n    filtered_numbers.append(number)\n\nprint(filtered_numbers) # output: [6, 8] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\n# Function to calculate Pi to n-digits of precision \ndef pi_calculator(n): \n    pi = format(math.pi, '.' + str(n) + 'f') \n    return pi \n      \n# Driver Code \nprint(\"The value of pi to 3 digits precision is:\", pi_calculator(3)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findSecondLargest(list):\n \n    # Initializing with the smallest possible value \n    max1 = -10000\n    max2 = -10000\n  \n    # Iterating the array \n    for i in range (0, len(list)): \n  \n        # If current element is greater than max1, then update both max1 and max2 \n        if list[i] > max1: \n            max2 = max1 \n            max1 = list[i] \n  \n        # If list[i] is between max1 and max2 then update max2\n        elif list[i] > max2 and list[i] != max1: \n            max2 = list[i] \n  \n    return max2\n\n# Driver code \nlist = [45, 81, 90, 102, 24, 76]\nprint(findSecondLargest(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: i = 1\nwhile i <= 10:\n    print(\"Hello World\")\n    i += 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def permutations(str):\n if len(str) == 1:\n return [str]\n else:\n perms = []\n for i in range(len(str)):\n remaining_elements = str[:i] + str[i+1:]\n z = permutations(remaining_elements)\n for t in z:\n perms.append(str[i] + t)\n \n return perms but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: if lowerBound <= num <= upperBound:\n    print(\"The number is inside the limit.\")\nelse:\n    print(\"The number is outside the limit.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: filtered_strings = [string for string in strings if re.match(r\"^hello.*world$\", string)] \n# filtered_strings = [\"hello_world\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_vowels(string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    res = []\n    for letter in string.lower():\n        if letter in vowels:\n            res.append('_')\n        else:\n            res.append(letter)\n    return ''.join(res) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_min(list):\n    min_value = list[0]\n\n    for value in list:\n        if value < min_value:\n            min_value = value\n\n    return min_value but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\n\nsentence = input('Enter a sentence: ')\n\ntokens = nltk.word_tokenize(sentence)\n\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nsid = SentimentIntensityAnalyzer()\n\nscore_dict = sid.polarity_scores(sentence)\nscore = score_dict['compound']\n\nif score >= 0.05:\n  print('positive')\nelif score <= -0.05:\n  print('negative')\nelse:\n  print('neutral') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student: \n    def __init__(self, name, age, grade): \n        self.name = name \n        self.age = age\n        self.grade = grade but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \ndef merge(head1, head2): \n    # Base cases \n    if head1 is None: \n        return head2  \n    if head2 is None: \n        return head1 \n  \n    mergedHead = None\n    if head1.data <= head2.data: \n        mergedHead = head1 \n        mergedHead.next = merge(head1.next, head2) \n    else: \n        mergedHead = head2\n        mergedHead.next = merge(head1, head2.next) \n  \n    return mergedHead but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 11): \n  print(i**2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_hamming(word1, word2):\n    distance = 0\n    length = len(word1)\n    if len(word2) < length:\n        length = len(word2)\n    \n    #Use fast C-style loop to iterate over strings\n    i = 0\n    while i < length: \n        if word1[i] != word2[i]:\n            distance += 1\n        i += 1\n\n    #count remaining chars\n    if len(word1) != len(word2):\n        distance += abs(len(word1)-len(word2))\n\n    return distance but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_data(feature, value, outcome):\n    if feature == \"Income\" and float(value) <= 50:\n        return outcome\n    else:\n        return \"No Classification\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(lst):\n    new_list = []\n    for i in lst:\n        if i not in new_list:\n            new_list.append(i)\n    \n    return new_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.linear_model import LinearRegression \nfrom sklearn.model_selection import train_test_split \n\n# Read historical stock data\ndata = pd.read_csv(\u2018data.csv\u2019)\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(data.drop(\u2018target\u2019, axis=1), \ndata[\u2018target\u2019], test_size=0.2, random_state=2)\n\n# Create and fit the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Output the prediction \ny_pred = model.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def encode_string(input_str, shift):\n    output_str = \"\"\n    for ch in input_str:\n        if ch != \" \":\n            output_str += chr(ord(ch) + shift)\n        else:\n            output_str += \" \"\n    return output_str\n\n# Example\nprint(encode_string(\"hello\", 5))  # Prints mjqqt but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_string = \"This is a string of text\"\n\nmy_object = {\n    \"string\": my_string\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create a queue\nqueue = []\n\n# Push number one to ten\nfor number in range(1, 11):\n    # Pushing each number into the queue\n    queue.append(number)\n\nprint(queue) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd \n\n# Create dataframe\ndf = pd.DataFrame(customer_df)\n\n# Group by customer and sum up sales\nreport = df.groupby(['customer_id'])['sales'].sum()\nprint(report) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(string): \n    words = string.split() \n      \n    reversed_string = [word[::-1] for word in words]\n    return ' '.join(reversed_string)\n\nreverse_string(sentence) //Returns 'olleH dlrow' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, jsonify\nimport sqlite3\n\napp = Flask(name)\n\n# Connect to SQLite database\nconnection = sqlite3.connect('tasks.db')\ncursor = connection.cursor()\n\n# Create '/tasks' route for the API\n@app.route('/tasks', methods=['GET', 'POST', 'PUT', 'DELETE'])\ndef tasks():\n # Get all tasks\n if request.method == 'GET':\n tasks = cursor.execute('SELECT * FROM tasks').fetchall()\n tasks = [{'id': task[0], 'description': task[1]} for task in tasks]\n return jsonify(tasks)\n\n # Create a task\n elif request.method == 'POST':\n description = request.json['description']\n cursor.execute('INSERT INTO tasks (description) VALUES (?)', (description,))\n connection.commit()\n return jsonify({'message': 'Task created'})\n\n # Update a task\n elif request.method == 'PUT':\n description = request.json['description']\n task_id = request.json['id']\n cursor.execute('UPDATE tasks SET description = ? WHERE id = ?', (description, task_id))\n connection.commit()\n return jsonify({'message': 'Task updated'})\n\n # Delete a task\n elif request.method == 'DELETE':\n task_id = request.json['id']\n cursor.execute('DELETE FROM tasks WHERE id = ?', (task_id,))\n connection.commit()\n return jsonify({'message': 'Task deleted'})\n\nif name == 'main':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ninputList = ['Apple', 'Banana', 'Coconut']\njsonObj = json.dumps(inputList)\nprint(jsonObj) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def edit_distance(str1, str2): \n    \n    # Initialize the DP matrix \n    m = len(str1) + 1\n    n = len(str2) + 1\n    dp_matrix = [[0 for x in range(n)] for x in range(m)] \n  \n    for i in range(m): \n        for j in range(n): \n            if i == 0: \n                dp_matrix[i][j] = j    # Min. operations = j \n            elif j == 0: \n                dp_matrix[i][j] = i    # Min. operations = i \n  \n            # If characters match \n            elif str1[i-1] == str2[j-1]: \n                dp_matrix[i][j] = dp_matrix[i-1][j-1] \n  \n            # If characters don't match \n            else: \n                dp_matrix[i][j] = 1 + min(dp_matrix[i][j-1],        # Insert \n                                          dp_matrix[i-1][j],        # Remove \n                                          dp_matrix[i-1][j-1])    # Replace \n  \n    return dp_matrix[m-1][n-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [2, 5, 3, 1]\n\n# using Python's built in `sorted` function\narr = sorted(arr)\n\n# using the Bubble Sort algorithm\nfor i in range(len(arr) - 1):\n for j in range(len(arr) - 1 - i):\n  if arr[j] > arr[j + 1]:\n   arr[j], arr[j + 1] = arr[j + 1], arr[j] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\nphone_number = \"+1-800-867-5309\"\n\nphone_pattern = re.compile(r'^\\+[1-9]\\d{1,2}\\-\\d{3}\\-\\d{3}\\-\\d{4}$')\n\ndef validate_phone_number(phone_number):\n    return phone_pattern.search(phone_number)\n\nvalid = validate_phone_number(phone_number)\nif valid:\n    print(\"Valid Phone number\")\nelse:\n    print(\"Invalid Phone number\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.datasets import load_digits\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\n\n# load the dataset\ndigits = load_digits()\n\n# split into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(digits.data, digits.target, random_state=0)\n\n# build the model\nmodel = SVC(gamma='auto')\nmodel.fit(X_train, y_train)\n\n# evaluate the model\nprint(model.score(X_test, y_test)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Built-in Python libraries:\n1. ast\n2. dis\n3. math\n4. fractions\n5. datetime\n6. hashlib\n7. itertools\n8. json\n9. urllib\n10. os\n11. pickle\n12. random\n13. re\n14. subprocess\n15. sys\n16. time\n17. zlib but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def duplicate_elements(lst):\n \n seen_elements = set()\n duplicates = set()\n \n for element in lst:\n if element in seen_elements:\n duplicates.add(element)\n else:\n seen_elements.add(element)\n \n return duplicates\n \nlist = [1, 2, 3, 2, 4, 5, 1, 0]\nduplicates = duplicate_elements(list)\nprint(duplicates) # {1, 2} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import necessary libraries\nimport requests\nimport json\n\n# Set authentication credentials\nusername = 'username'\npassword = 'password'\ntoken = 'token'\n\n# Set request headers\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': 'token %s' % token\n}\n\n# Set the data for the request\ndata = {\n    'title': 'My pull request',\n    'head': 'master',\n    'base': 'develop',\n    'body': 'This is the body of my pull request'\n}\n\n# Make the request\nresponse = requests.post('https://api.github.com/repos/username/repo/pulls', data=json.dumps(data),\n                         auth=(username, password), headers=headers)\n\n# Check the response\nif response.status_code == 201:\n    print('Pull request created!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Vector3D(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    def __str__(self):\n        return f\"Vector3D({self.x}, {self.y}, {self.z})\"\n    \n    def __add__(self, other):\n        return Vector3D(self.x + other.x,\n                        self.y + other.y,\n                        self.z + other.z)\n    \n    def __mul__(self, scalar):\n        return Vector3D(self.x * scalar,\n                        self.y * scalar,\n                        self.z * scalar) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom skopt.space import Integer, Real\nfrom skopt import Optimizer\nfrom sklearn.model_selection import cross_val_score\n\n# Define the search space\nsearch_space = [\n Integer(2, 10, name=\"num_layers\"),\n Integer(4, 32, name=\"num_units\"),\n Real(10**-5, 10**0, \"log-uniform\", name=\"learning_rate\"),\n Real(10**-5, 10**0, \"log-uniform\", name=\"weight_regularization\"),\n Integer(2, 5, name=\"dropout_rate\")\n]\n\n# Define the optimizer\nopt = Optimizer(search_space, n_random_starts=100, acq_func=\"EI\")\n\n# Define the objective\n@opt.objective\ndef objective(parameters):\n  # Set the parameters of the model\n  model.set_params(parameters)\n\n  # Calculate the cross-validation score\n  cv_score = cross_val_score(model, X, y).mean()\n\n  # Return the negative score to minimize\n  return -cv_score\n\n# Optimize the model\nopt.maximize(init_points=10, n_iter=100) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pascal_triangle(n):\n rows = []\nfor i in range(1, n + 1):\n row = [1]\n for j in range(1, i):\n  row.append(rows[i-2][j-1] + rows[i-2][j])\n row.append(1)\n rows.append(row)\n \nreturn rows\n \nn = 8\nresult = pascal_triangle(n)\nsum_of_row = sum(result[n-1])\n \nprint(f\"The sum of the {n}th row of Pascal's Triangle is {sum_of_row}.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_char(given_string, character):\n    new_string =  given_string.replace(character, \"\")\n    return new_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndata = json.loads('{\n    \"name\": \"John Smith\",\n    \"age\": 35\n}')\n\ncustomer_name = data[\"name\"]\nprint(customer_name) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseString(string):\n    revString = ''\n    for i in range(len(string)-1, -1, -1):\n        revString += string[i]\n    return revString but is not the same. just give one example and only return the code."}
