{"prompt": "make some code that functions the same as the following code: def capitalize_string(str):\n    words = str.split(' ')\n    capitalized_words = [word.capitalize() for word in words]\n    capitalized_string = ' '.join(capitalized_words)\n    return capitalized_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_avg_max_min(list_of_int):\n    avg = sum(list_of_int) / len(list_of_int)\n    maximum = max(list_of_int)\n    minimum = min(list_of_int)\n    return avg, maximum, minimum\n\nlist_of_int = [1, 7, 4, 6]\navg, max_int, min_int = calculate_avg_max_min(list_of_int)\nprint(\"Average =\", avg)\nprint(\"Maximum =\", max_int)\nprint(\"Minimum =\", min_int) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Google Cloud Platform Application\n\n\nfrom google.appengine.api import appinfo\n\napp = appinfo.AppInfoExternal(\n application='myapp',\n version='1',\n runtime='python27',\n api_version='1',\n threadsafe=True,\n )\n\n# Create a handler for the endpoint\ndef hello_world():\n print(\"Hello, world!\")\n\n# Map the handler to the endpoint\napp.handlers.extend([\n    ('/', hello_world)\n])\n\n# Deploy the application\napp.deploy() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list_by_vowels(list_of_strings):\n    vowels = 'aeiouAEIOU'\n \n    # Create a list of tuples, with each tuple having a \n    # string and the number of vowels it has\n    lst = []\n    for i in list_of_strings:\n        count = 0\n        for j in i:\n            if j in vowels:\n                count += 1\n        lst.append((i, count))\n \n    # Sort the list of tuples based on the number of vowels\n    lst.sort(key = lambda x: x[1],reverse=True)\n \n    # Extract the strings from the list of tuples\n    final_list = []\n    for i in lst:\n        final_list.append(i[0])\n \n    return final_list\n\nprint(sort_list_by_vowels([\"apple\", \"banana\", \"kiwi\", \"strawberry\"])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nimport random\n\nresponses = {\n 'question': [\n \"I don't know :(\",\n 'you tell me!'\n ],\n 'statement': [\n 'tell me more!',\n 'why do you think that?',\n 'how long have you felt this way?',\n 'I find that extremely interesting',\n 'can you back that up?',\n 'oh wow!',\n ':)'\n ]\n}\n\ndef respond(message):\n # check for a question mark\n if message.endswith('?'):\n # return a random question\n return random.choice(responses['question'])\n # return a random statement\n return random.choice(responses['statement'])\n\n# create a dictionary for our bag of words\ndictionary = []\nfor key, value in responses.items():\n for string in value:\n # tokenize each string and add to our bag of words\n tokens = nltk.tokenize.word_tokenize(string)\n dictionary += tokens\n \n# preprocessing\ndef preprocess(message):\n # tokenize the message\n tokens = nltk.tokenize.word_tokenize(message)\n # convert message to lowercase\n tokens = [w.lower() for w in tokens]\n # remove punctuation from each word\n import string\n table = str.maketrans('','',string.punctuation)\n stripped = [w.translate(table) for w in tokens]\n # remove remaining tokens that are not alphabetic\n words = [word for word in stripped if word.isalpha()]\n # filter out stop words\n from nltk.corpus import stopwords\n stop_words = set(stopwords.words('english'))\n words = [w for w in words if not w in stop_words]\n # join filtered tokens back into a string sentence\n return ' '.join(words)\n\n# check for a greeting\ndef greetingCheck(message):\n message = message.lower()\n for string in responses['greeting']:\n if message.startswith(string):\n return True\n\n# main function\ndef main():\n while True:\n message = input('INPUT :\\t')\n if greetingCheck(message):\n print('OUTPUT :\\t')\n print(random.choice(responses['greeting']))\n else:\n message_processed = preprocess(message).lower()\n print('OUTPUT :\\t', respond(message_processed))\n \nmain() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Library import\nimport os\n\n# Path of the file\nfile_name = \"myfile.txt\"\n\n# Open file\ntry:\n  with open(file_name, 'r') as f:\n\n    # Read file\n    contents = f.read()\n\n    # Print file\n    print(contents)\n\nexcept IOError:\n  print('Error: file not found!')\n\nfinally:\n  if f:\n    f.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortDict(dictionary):\n # Sort the keys.\n sorted_keys = sorted(dictionary.keys())\n # Initialize a new dictionary with the sorted keys.\n sorted_dict = dict.fromkeys(sorted_keys)\n # Assign values from the original dictionary to the sorted dictionary.\n for key in sorted_dict:\n sorted_dict[key] = dictionary[key]\n # Return the sorted dictionary.\n return sorted_dict\n\ndictionary = {\n 'Tom': 20,\n 'Jerry': 30,\n 'Jose': 25\n}\n\nprint(sortDict(dictionary)) # {'Jose': 25, 'Jerry': 30, 'Tom': 20} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \n  \n# api-endpoint \nURL = \"https://www.example.com/api/v1/data\"\n  \n# location given here \n  \n# sending get request and saving the response as response object \nr = requests.get(url = URL) \n  \n# extracting data in json format \ndata = r.json() \n  \n# extracting latitude, longitude and formatted address  \n# of the first matching location \n# latitude = data['results'][0]['geometry']['location']['lat'] \n# longitude = data['results'][0]['geometry']['location']['lng'] \n# formatted_address = data['results'][0]['formatted_address'] \n  \n# printing the output \n# print(\"Latitude:%s\\nLongitude:%s\\nFormatted Address:%s\"\n#       %(latitude, longitude,formatted_address)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nSupport for custom structures in client and server\nWe only support a subset of features but should be enough\nfor custom structures\n\"\"\"\n\nimport os\nimport importlib\nimport re\nimport logging\n# The next two imports are for generated code\nfrom datetime import datetime\nimport uuid\nfrom enum import Enum, IntEnum, EnumMeta\n\nfrom lxml import objectify\n\nfrom opcua.ua.ua_binary import Primitives\nfrom opcua import ua\n\n\nlogger = logging.getLogger(__name__)\n\n\ndef get_default_value(uatype, enums):\n    if uatype == \"String\":\n        return \"None\"\n    elif uatype == \"Guid\":\n        return \"uuid.uuid4()\"\n    elif uatype in (\"ByteString\", \"CharArray\", \"Char\"):\n        return \"b''\" \n    elif uatype == \"Boolean\":\n        return \"True\"\n    elif uatype == \"DateTime\":\n        return \"datetime.utcnow()\"\n    elif uatype in (\"Int16\", \"Int32\", \"Int64\", \"UInt16\", \"UInt32\", \"UInt64\", \"Double\", \"Float\", \"Byte\", \"SByte\"):\n        return 0\n    elif uatype in enums:\n        return \"ua.\" + uatype + \"(\" + enums[uatype] + \")\"\n    elif hasattr(ua, uatype) and issubclass(getattr(ua, uatype), Enum):\n        # We have an enum, try to initilize it correctly\n        val = list(getattr(ua, uatype).__members__)[0]\n        return \"ua.{}([})\".format(uatype, val)\n    else:\n        return \"ua.{}()\".format(uatype)\n\n\nclass EnumType(object):\n    def __init__(self, name):\n        self.name = name\n        self.fields = []\n        self.typeid = None\n\n    def get_code(self):\n        code = \"\"\"\n\nclass {0}(IntEnum):\n\n    '''\n    {0} EnumInt autogenerated from xml\n    '''\n\n\"\"\".format(self.name)\n\n        for EnumeratedValue in self.fields:\n            name = EnumeratedValue.Name\n            value = EnumeratedValue.Value\n            code += \"    {} = {}\\n\".format(name, value)\n\n        return code\n\n\nclass EnumeratedValue(object):\n    def __init__(self, name, value):\n        if name == \"None\":\n            name = \"None_\"\n        name = name.replace(\" \", \"\")\n        self.Name = name\n        self.Value = value\n\n\nclass Struct(object):\n    def __init__(self, name):\n        self.name = name\n        self.fields = []\n        self.typeid = None\n\n    def get_code(self):\n        code = \"\"\"\n\nclass {0}(object):\n\n    '''\n    {0} structure autogenerated from xml\n    '''\n\n\"\"\".format(self.name)\n\n        code += \"    ua_types = [\\n\"\n        for field in self.fields:\n            prefix = \"ListOf\" if field.array else \"\"\n            uatype = prefix + field.uatype\n            if uatype == \"ListOfChar\":\n                uatype = \"String\"\n            code += \"        ('{}', '{}'),\\n\".format(field.name, uatype)\n\n        code += \"    ]\"\n        code += \"\"\"\n\n    def __init__(self):\n\"\"\"\n        if not self.fields:\n            code += \"      pass\"\n        for field in self.fields:\n            code += \"        self.{} = {}\\n\".format(field.name, field.value)\n        return code\n\n\nclass Field(object):\n    def __init__(self, name):\n        self.name = name\n        self.uatype = None\n        self.value = None\n        self.array = False\n\n\nclass StructGenerator(object):\n    def __init__(self):\n        self.model = []\n\n    def make_model_from_string(self, xml):\n        obj = objectify.fromstring(xml)\n        self._make_model(obj)\n\n    def make_model_from_file(self, path):\n        obj = objectify.parse(path)\n        root = obj.getroot()\n        self._make_model(root)\n\n    def _make_model(self, root):\n        enums = {}\n        for child in root.iter(\"{*}EnumeratedType\"):\n            intenum = EnumType(child.get(\"Name\"))\n            for xmlfield in child.iter(\"{*}EnumeratedValue\"):\n                name = xmlfield.get(\"Name\")\n                value = xmlfield.get(\"Value\")\n                enumvalue = EnumeratedValue(name, value)\n                intenum.fields.append(enumvalue)\n                enums[child.get(\"Name\")] = value\n            self.model.append(intenum)\n            \n        for child in root.iter(\"{*}StructuredType\"):\n            struct = Struct(child.get(\"Name\"))\n            array = False\n            for xmlfield in child.iter(\"{*}Field\"):\n                name = xmlfield.get(\"Name\")\n                if name.startswith(\"NoOf\"):\n                    array = True\n                    continue\n                field = Field(_clean_name(name))\n                field.uatype = xmlfield.get(\"TypeName\")\n                if \":\" in field.uatype:\n                    field.uatype = field.uatype.split(\":\")[1]\n                field.uatype = _clean_name(field.uatype)\n                field.value = get_default_value(field.uatype, enums)\n                if array:\n                    field.array = True\n                    field.value = []\n                    array = False\n                struct.fields.append(field)\n            self.model.append(struct)\n\n    def save_to_file(self, path, register=False):\n        _file = open(path, \"wt\")\n        self._make_header(_file)\n        for struct in self.model:\n            _file.write(struct.get_code())\n        if register:\n            _file.write(self._make_registration())\n        _file.close()\n\n    def _make_registration(self):\n        code = \"\\n\\n\"\n        for struct in self.model:\n            code += \"ua.register_extension_object('{name}', ua.NodeId.from_string('{nodeid}'), {name})\\n\".format(name=struct.name, nodeid=struct.typeid)\n        return code\n\n    def get_python_classes(self, env=None):\n        return _generate_python_class(self.model, env=env)\n\n    def save_and_import(self, path, append_to=None):\n        \"\"\"\n        save the new structures to a python file which be used later\n        import the result and return resulting classes in a dict\n        if append_to is a dict, the classes are added to the dict\n        \"\"\"\n        self.save_to_file(path)\n        name = os.path.basename(path)\n        name = os.path.splitext(name)[0]\n        mymodule = importlib.import_module(name)\n        if append_to is None:\n            result = {}\n        else:\n            result = append_to\n        for struct in self.model:\n            result[struct.name] = getattr(mymodule, struct.name)\n        return result\n\n    def _make_header(self, _file):\n        _file.write(\"\"\"\n'''\nTHIS FILE IS AUTOGENERATED, DO NOT EDIT!!!\n'''\n\nfrom datetime import datetime\nimport uuid\n\nfrom opcua import ua\n\"\"\")\n\n    def set_typeid(self, name, typeid):\n        for struct in self.model:\n            if struct.name == name:\n                struct.typeid = typeid\n                return\n\n\n\ndef load_type_definitions(server, nodes=None):\n    \"\"\"\n    Download xml from given variable node defining custom structures.\n    If no node is given, attemps to import variables from all nodes under\n    \"0:OPC Binary\"\n    the code is generated and imported on the fly. If you know the structures\n    are not going to be modified it might be interresting to copy the generated files\n    and include them in you code\n    \"\"\"\n    if nodes is None:\n        nodes = []\n        for desc in server.nodes.opc_binary.get_children_descriptions():\n            if desc.BrowseName != ua.QualifiedName(\"Opc.Ua\"):\n                nodes.append(server.get_node(desc.NodeId))\n    \n    structs_dict = {}\n    generators = []\n    for node in nodes:\n        xml = node.get_value()\n        xml = xml.decode(\"utf-8\")\n        generator = StructGenerator()\n        generators.append(generator)\n        generator.make_model_from_string(xml)\n        # generate and execute new code on the fly\n        generator.get_python_classes(structs_dict)\n        # same but using a file that is imported. This can be usefull for debugging library\n        #name = node.get_browse_name().Name\n        # Make sure structure names do not contain charaters that cannot be used in Python class file names\n        #name = _clean_name(name)\n        #name = \"structures_\" + node.get_browse_name().Name\n        #generator.save_and_import(name + \".py\", append_to=structs_dict)\n\n        # register classes\n        # every children of our node should represent a class\n        for ndesc in node.get_children_descriptions():\n            ndesc_node = server.get_node(ndesc.NodeId)\n            ref_desc_list = ndesc_node.get_references(refs=ua.ObjectIds.HasDescription, direction=ua.BrowseDirection.Inverse)\n            if ref_desc_list:  #some server put extra things here\n                name = _clean_name(ndesc.BrowseName.Name)\n                if not name in structs_dict:\n                    logger.warning(\"%s is found as child of binary definition node but is not found in xml\", name)\n                    continue\n                nodeid = ref_desc_list[0].NodeId\n                ua.register_extension_object(name, nodeid, structs_dict[name])\n                # save the typeid if user want to create static file for type definitnion\n                generator.set_typeid(name, nodeid.to_string())\n\n        for key, val in structs_dict.items():\n            if isinstance(val, EnumMeta) and key is not \"IntEnum\":\n                setattr(ua, key, val)\n\n    return generators, structs_dict\n\n\ndef _clean_name(name):\n    \"\"\"\n    Remove characters that might be present in  OPC UA structures\n    but cannot be part of of Python class names\n    \"\"\"\n    name = re.sub(r'\\W+', '_', name)\n    name = re.sub(r'^[0-9]+', r'_\\g<0>', name)\n\n    return name\n\n\ndef _generate_python_class(model, env=None):\n    \"\"\"\n    generate Python code and execute in a new environment\n    return a dict of structures {name: class}\n    Rmw: Since the code is generated on the fly, in case of error the stack trace is \n    not available and debugging is very hard...\n    \"\"\"\n    if env is None:\n        env = {}\n    #  Add the required libraries to dict\n    if \"ua\" not in env:\n        env['ua'] = ua\n    if \"datetime\" not in env:\n        env['datetime'] = datetime\n    if \"uuid\" not in env:\n        env['uuid'] = uuid\n    if \"enum\" not in env:\n        env['IntEnum'] = IntEnum\n    # generate classes one by one and add them to dict\n    for element in model:\n        code = element.get_code()\n        exec(code, env)\n    return env\n\n\ndef load_enums(server, env=None):\n    \"\"\"\n    Read enumeration data types on server and generate python Enums in ua scope for them\n    \"\"\"\n    model = []\n    nodes = server.nodes.enum_data_type.get_children()\n    if env is None:\n        env = ua.__dict__\n    for node in nodes:\n        name = node.get_browse_name().Name\n        try:\n            c = _get_enum_strings(name, node)\n        except ua.UaError as ex:\n            try:\n                c = _get_enum_values(name, node)\n            except ua.UaError as ex:\n                logger.info(\"Node %s, %s under DataTypes/Enumeration, does not seem to have a child called EnumString or EumValue: %s\", name, node, ex)\n                continue\n        if not hasattr(ua, c.name):\n            model.append(c)\n    return _generate_python_class(model, env=env)\n\n\ndef _get_enum_values(name, node):\n    def_node = node.get_child(\"0:EnumValues\")\n    val = def_node.get_value()\n    c = EnumType(name)\n    c.fields = [EnumeratedValue(enumval.DisplayName.Text, enumval.Value) for enumval in val]\n    return c\n\n\ndef _get_enum_strings(name, node):\n    def_node = node.get_child(\"0:EnumStrings\")\n    val = def_node.get_value()\n    c = EnumType(name)\n    c.fields = [EnumeratedValue(st.Text, idx) for idx, st in enumerate(val)]\n    return c\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_search(numbers, number_to_find, low, high):\n \n if low > high:\n return False\n \n mid = (low + high) // 2\n \n if numbers[mid] == number_to_find:\n return True\n elif numbers[mid] > number_to_find:\n return binary_search(numbers, number_to_find, low, mid - 1)\n else:\n return binary_search(numbers, number_to_find, mid + 1, high)\n \n \nif __name__ == '__main__':\n numbers = [1, 3, 8, 10, 12, 15, 17, 20, 22, 34, 38, 40]\n \n number_to_find = int(input('Enter a number: '))\n \n result = binary_search(numbers, number_to_find, 0, len(numbers) - 1)\n \n if result is True:\n print('The number is in the list')\n else:\n print('The number is NOT in the list') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to convert a string to a list, split by words\ndef string_to_list(string):\n    # Initialize an empty list\n    word_list = []\n    \n    # Iterate through each character of the string\n    for character in string:\n        word = \"\"\n        while character != \" \" and character != \"\":\n            word += character\n            string = string[1:]\n            character = string[0]\n        # Add each word to the list\n        word_list.append(word)\n\n    return word_list\n\n# Driver code\nmy_string = \"Hello world!\"\n\nword_list = string_to_list(my_string)\n\nprint(word_list) # prints ['Hello', 'world!'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ReverseList(list):\n    def reverse_list(self):\n    \treturn self[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(arr, key): \n    for item in arr: \n        if item[0] == key: \n            return item[1] \n    return \"Not found\"\n  \n# Driver code \narr = [('a', 2), ('b', 4), ('c', 6), ('d', 7)] \nkey = 'd'\n  \nprint(search(arr, key)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nrandom_set = random.sample(range(1,51), 10)\nprint(random_set) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def split_string(string):\n    result = []\n    for i in range(0, len(string), int(len(string) / 2)):\n        result.append(string[i: i + int(len(string) / 2)])\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_char(s, char):\n    s = s.replace(char, '')\n    return s\n\nremove_char(s, 'l') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_duplicates(arr):\n    # Create a set to store elements\n    s = set()\n\n    # Iterate through the array and check if element is in set\n    for num in arr:\n        if num in s:\n            return True\n        else:\n            s.add(num)\n    return False\n\narr = [3, 5, 2, 4, 2]\n\n# Print the result\nif check_duplicates(arr):\n    print('Array contains duplicates')\nelse:\n    print('Array has no duplicates')\n\n// Output: Array contains duplicates but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from os import listdir, getcwd\nfrom os.path import join, isdir, isfile, dirname, abspath\nimport pandas as pd\nimport numpy as np\nimport datetime\nimport time\nfrom nilmtk.datastore import Key\nfrom nilmtk.measurement import LEVEL_NAMES\nfrom nilm_metadata import convert_yaml_to_hdf5\nimport warnings\nimport numpy as np\nfrom io import StringIO\nfrom multiprocessing import Pool\nfrom nilmtk.utils import get_module_directory\n\ndef _get_blocks(filename):\n    '''\n    Return a list of dataframes from a GREEND CSV file\n    \n    GREEND files can be interpreted as multiple CSV blocks concatenated into\n    a single file per date. Since the columns of the individual blocks can \n    vary in a single file, they need to be read separately.\n    \n    There are some issues we need to handle in the converter:\n    - the headers from the multiple blocks\n    - corrupted data (lines with null chars, broken lines)\n    - more fields than specified in header\n    '''\n    block_data = None\n    dfs = []\n    previous_header = None\n    print(filename)\n    # Use float64 for timestamps and float32 for the rest of the columns\n    dtypes = {}\n    dtypes['timestamp'] = np.float64\n    \n    def _process_block():\n        if block_data is None:\n            return\n            \n        block_data.seek(0)\n        try:\n            # ignore extra fields for some files\n            error_bad_lines = not (\n                ('building5' in filename and 'dataset_2014-02-04.csv' in filename)\n            )\n            df = pd.read_csv(block_data, index_col='timestamp', dtype=dtypes, error_bad_lines=error_bad_lines)\n        except: #(pd.errors.ParserError, ValueError, TypeError):\n            print(\"ERROR\", filename)\n            raise\n            \n        df.index = pd.to_datetime(df.index, unit='s')\n        df = df.tz_localize(\"UTC\").tz_convert(\"CET\").sort_index()\n        dfs.append(df)\n        block_data.close()\n    \n    special_check = (\n        ('dataset_2014-01-28.csv' in filename and 'building5' in filename) or\n        ('dataset_2014-09-02.csv' in filename and 'building6' in filename)\n    )\n    \n    with open(filename, 'r') as f:\n        for line in f:\n            # At least one file have a bunch of nulls present, let's clean the data\n            line = line.strip('\\0')\n            if 'time' in line:\n                # Found a new block\n                if not line.startswith('time'):\n                    # Some lines are corrupted, e.g. 1415605814.541311,0.0,NULL,NUtimestamp,000D6F00029C2918...\n                    line = line[line.find('time'):]\n                \n                if previous_header == line.strip():\n                    # Same exact header, we can treat it as the same block\n                    # print('Skipping split')\n                    continue\n                    \n                # Using a defaultdict for the dtypes didn't work with read_csv,\n                # so we fill a normal dict when we find the columns\n                cols = line.strip().split(',')[1:]\n                for col in cols:\n                    dtypes[col] = np.float32\n                    \n                # print('Found new block')\n                _process_block()\n                block_data = StringIO()\n                previous_header = line.strip()\n\n            \n            if special_check:\n                if ('0.072.172091508705606' in line or\n                    '1409660828.0753369,NULL,NUL' == line):\n                    continue\n\n            block_data.write(line)\n            \n    # Process the remaining block\n    _process_block()\n    \n    return (filename, dfs)\n\n    \ndef _get_houses(greend_path):\n    house_list = listdir(greend_path)\n    return [h for h in house_list if isdir(join(greend_path,h))] \n    \n\ndef convert_greend(greend_path, hdf_filename, use_mp=True):\n    \"\"\"\n    Parameters\n    ----------\n    greend_path : str\n        The root path of the greend dataset.\n    hdf_filename : str\n        The destination HDF5 filename (including path and suffix).\n    use_mp : bool \n        Defaults to True. Use multiprocessing to load the files for\n        each building.\n    \"\"\"\n    store = pd.HDFStore(hdf_filename, 'w', complevel=5, complib='zlib')\n    houses = sorted(_get_houses(greend_path))\n    \n    print('Houses found:', houses)\n    if use_mp:\n        pool = Pool()\n    \n    h = 1 # nilmtk counts buildings from 1 not from 0 as we do, so everything is shifted by 1\n    \n    for house in houses:\n        print('Loading', house)\n        abs_house = join(greend_path, house)\n        dates = [d for d in listdir(abs_house) if d.startswith('dataset')]\n        target_filenames = [join(abs_house, date) for date in dates]\n        if use_mp:\n            house_data = pool.map(_get_blocks, target_filenames)\n\n            # Ensure the blocks are sorted by date and make a plain list\n            house_data_dfs = []\n            for date, data in sorted(house_data, key=lambda x: x[0]):\n                house_data_dfs.extend(data)\n        else:\n            house_data_dfs = []\n            for fn in target_filenames:\n                house_data_dfs.extend(_get_blocks(fn)[1])\n            \n        overall_df = pd.concat(house_data_dfs, sort=False).sort_index()\n        dups_in_index = overall_df.index.duplicated(keep='first')\n        if dups_in_index.any():\n            print(\"Found duplicated values in index, dropping them.\")\n            overall_df = overall_df[~dups_in_index]\n        \n        m = 1\n        for column in overall_df.columns:\n            print(\"meter {}: {}\".format(m, column))\n            key = Key(building=h, meter=m)\n            print(\"Putting into store...\")\n            \n            df = overall_df[column].to_frame() #.dropna(axis=0)\n            \n            # if drop_duplicates:\n                # print(\"Dropping duplicated values in data...\")\n                # df = df.drop_duplicates()\n            \n            df.columns = pd.MultiIndex.from_tuples([('power', 'active')])\n            df.columns.set_names(LEVEL_NAMES, inplace=True)\n            \n            store.put(str(key), df, format = 'table')\n            m += 1\n            # print('Flushing store...')\n            # store.flush()\n            \n        h += 1\n\n    store.close()\n\t\n\t# retrieve the dataset metadata in the metadata subfolder\n    metadata_dir = join(get_module_directory(), 'dataset_converters', 'greend', 'metadata')\n    convert_yaml_to_hdf5(metadata_dir, hdf_filename)\n\n#is only called when this file is the main file... only test purpose\nif __name__ == '__main__':\n    t1 = time.time()\n    convert_greend('GREEND_0-2_300615',\n                   'GREEND_0-2_300615.h5')\n    dt = time.time() - t1\n    print()\n    print()\n    print('Time passed: {}:{}'.format(int(dt/60), int(dt%60)))\n    \n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pascal_triangle(n): \n\t\n\t# 1st base case \n\tif n == 0: \n\t\treturn [] \n\telif n == 1: \n\t\treturn [[1]]\n\t  \n\t# 2nd base case \n\telse: \n\t\tnew_row = [1] \n\t\tresult = pascal_triangle(n-1) \n\t\tprevious_row = result[-1] \n\n\t\t# making the current row \n\t\tfor i in range(len(previous_row)-1): \n\t\t\tvalue = previous_row[i] + previous_row[i+1] \n\t\t\tnew_row.append(value) \n\n\t\tnew_row += [1] \n\t\tresult.append(new_row) \n\t\t\n\treturn result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printPrime(arr): \n    for i in range (len(arr)): \n        if isPrime[arr[i]]: \n            print(arr[i], end = \" \") \n          \n# Function to check if a number is prime or not              \ndef isPrime(n): \n    # Corner case  \n    if (n <= 1): \n        return False\n    # Check from 2 to n-1  \n    for i in range(2, n): \n        if n % i == 0: \n            return False; \n    return True\n\narr = [2, 3, 5, 6, 5, 7, 8, 1, 6]\nprintPrime(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\n\n@app.route('/posts')\ndef get_posts():\n posts = Post.query \\\n .order_by(Post.created_at.desc()) \\\n .limit(5)\n return jsonify([{\n 'title': post.title,\n 'date': post.created_at.strftime('%Y-%m-%d'),\n 'body': post.body\n } for post in posts]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.ensemble import RandomForestClassifier\n\nclf = RandomForestClassifier(n_estimators = 100, criterion = \"entropy\", random_state = 0) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndef lambda_handler(event, context):\n  input1 = event['input1']\n  input2 = event['input2']\n\n  result = input1 * input2\n  return {\n    'statusCode': 200,\n    'body': json.dumps({'result': result})\n  } but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class WordCounter:\n    def __init__(self):\n        self.count = 0\n    \n    def countWords(self, text):\n        words = text.split() # Splits the sentence into a list of words\n        self.count = len(words) # Counts the number of words\n        return self.count\n\n# Creating an instance of the WordCounter class\nwordCounter = WordCounter()\n\n# Counting the words in the text\nwordCount = wordCounter.countWords(\"Hello world, this is a test\")\n\nprint(wordCount) # Outputs 4 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_array(arr):\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        temp = arr[left]\n        arr[left] = arr[right]\n        arr[right] = temp\n        left += 1\n        right -= 1\n\narr = [1, 2, 3, 4]\n\nreverse_array(arr)\n\nprint(arr)  # [4, 3, 2, 1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_numbers = [20, 16, 5, 6, 26, 48]\n\ndivisible_numbers = []\nfor number in list_numbers:\n    if number % 16 == 0:\n        divisible_numbers.append(number)\n\nprint(divisible_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"http://example.com\"\n\n# Get the HTML page\nr = requests.get(url)\n\n# Parse the HTML\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# Get all elements with the class \"article-title\"\ntitles = soup.find_all(class_=\"article-title\")\n\n# Store the titles in a list\ntitles_list = []\nfor title in titles: \n    titles_list.append(title.text)\n\n# Print out the titles\nfor title in titles_list:\n    print(title) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MathOperations:\n    def __init__(self, num1, num2):\n        self.num1 = num1\n        self.num2 = num2\n\n    def add(self):\n        return self.num1 + self.num2\n    \n    def subtract(self):\n        return self.num1 - self.num2\n\nnum1 = 0\nnum2 = 0\nmath_operation = MathOperations(num1, num2)\nprint(math_operation.add())\nprint(math_operation.subtract()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def minmax(array):\n  max_val = max(array)\n  min_val = min(array)\n  return [max_val, min_val] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def subsets(s):\n    res = []\n    for i in range(1 << len(s)):\n        subset = [list(s)[x] for x in range(len(s)) if i & (1 << x)]\n        if not any(set(subset).issubset(r) for r in res):\n            res.append(subset)\n    return res but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(string): \n    res = \"\" \n    for ch in string: \n        if string.count(ch) < 2: \n            res += ch \n    return res\n\nstring = \"aabcdbb\"\nprint(remove_duplicates(string))  # prints acdb but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\nx = np.arange(-2*np.pi, 2*np.pi, 0.5)\n\ny = np.cos(x) + np.sin(x)\n\nsolution = x[np.where(y == 0)]\nprint(solution) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num):\n    for i in range(2, int(num / 2)):\n        if num % i == 0:\n            return False\n    else:\n        if num < 2:\n            return False\n        else:\n            return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(lst, index): \n    if index < 0 or index >= len(lst):  \n        print(\"Index out of bounds\") \n        return None\n    else:  \n        return lst[index] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # This program is used to calculate the median of a given list of integers.\n\n# The input list of integers\nnums = [1,2,3,4,5]\n\n# Function to calculate the median\ndef median(nums):\n  nums.sort()\n  if len(nums) % 2 == 0:\n    median = (nums[len(nums)//2 - 1] + nums[len(nums)//2])/2 \n  else:\n    median = nums[len(nums)//2]\n  return median\n\n# Main program\nif __name__== \"__main__\":\n  print(median(nums)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def dotProduct(vector1, vector2): \n    dotProd = 0\n    for i in range(len(vector1)):\n        dotProd += vector1[i] * vector2[i]\n    return dotProd but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: <html>\n <head>\n <title>Sample Page</title>\n </head>\n <body>\n <h1>Sample Page</h1>\n\n <p>This page has a header, a body, and a footer.</p>\n\n <footer>\n <p>This is the footer.</p>\n </footer>\n </body>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPrime(n):\n    \"\"\"\n    This function checks if a given number is a prime or not\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef printPrime():\n    \"\"\"\n    This function prints all the prime numbers in between 0 and 100\n    \"\"\"\n    for i in range(0, 101):\n        if isPrime(i):\n            print(i)\n\nprintPrime() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Message:\n    def __init__(self, text):\n        self.text = text\n\n    def __str__(self):\n        return self.text but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def timestamp_to_date(timestamp):\n    return datetime.datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(\"Hello World\")\nif a == b:\n print(\"A is equal to B\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(string):\n    left_pos = 0\n    right_pos = len(string) - 1\n\n    while right_pos >= left_pos:\n        if string[left_pos] != string[right_pos]:\n            return False\n        left_pos += 1\n        right_pos -= 1\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def equal(dna1, dna2):\n    if (dna1 ==dna2):\n        return True\n    else:\n        return False\ndna1 = 'ATTCTCA'\ndna2 = 'ATTCCTA'\n\nprint(equal(dna1,dna2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: x = 10\ny = 20\n\n#Swap the values\nx, y = y, x\n\nprint(\"After swapping: x =\", x, \"and y =\", y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1,101):\n    if (i % 15 == 0):\n        print(\"FizzBuzz\")\n    elif (i % 3 == 0):\n        print(\"Fizz\")\n    elif (i % 5 == 0):\n        print(\"Buzz\")\n    else:\n        print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef quadratic_x_intercept(a, b, c):\n  discriminant = b**2 - 4*a*c\n  if discriminant >= 0:\n    x1_intercept = (-b+math.sqrt(discriminant))/(2*a)\n    x2_intercept = (-b-math.sqrt(discriminant))/(2*a)\n    return x1_intercept, x2_intercept\n  else:\n    return 'No real solutions exist!'\n\na = 1\nb = 4\nc = -5\n\nintercepts = quadratic_x_intercept(a, b, c)\nprint(intercepts)\n# Output (2.0, -2.5) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def truncateString(inputString, length):\n    return inputString[:length]\n\nprint(truncateString('Hello World', 5)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # encode\nimport base64\n\nstring = \"Hello World!\"\n\n#Encode to Base64\nencodedBytes = base64.b64encode(string.encode(\"utf-8\"))\nencodedString = str(encodedBytes, \"utf-8\")\n\nprint(encodedString)\n\n# decode\nencodedString = 'SGVsbG8gV29ybGQh'\n\n#Decode from Base64\ndecodedBytes = base64.b64decode(encodedString)\ndecodedString = str(decodedBytes, \"utf-8\")\n\nprint(decodedString) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maximum(x, y):\n    if x > y:\n        return x\n    else:\n        return y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimization(items, cost):  \n    \"\"\"\n    Function to optimize cost production\n    \"\"\"\n    total_cost = 0\n    total_items = len(items)\n    while total_items > 0:\n        # Produce one item at a time\n        total_items -= 1\n        total_cost += cost\n    return total_cost\n\nitems = [4]\ncost = 1\n\ntotal_cost = optimization(items, cost)\nprint(\"Total cost is:\", total_cost) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def shortest_substring(s1, s2): \n      \n    s1_len = len(s1) \n    s2_len = len(s2) \n\n    res_str = \"\"\n    res_len = s1_len + s2_len \n      \n    for i in range(s1_len): \n        for j in range(s2_len): \n              \n            # Initializing starting and ending indexes \n            # of current substring \n            x = i \n            y = j \n              \n            # Initializing substring \n            tmp_str = \"\" \n          \n            # flag to keep track of the order in which two  \n            # characters have been found \n            flag = 0\n          \n            while (x < s1_len and y < s2_len): \n                if s1[x] != s2[y]: \n                    break\n                  \n                # tmp_str stores the current substring \n                if flag == 0: \n                    tmp_str += s1[x] \n                else: \n                    tmp_str += s2[y]; \n          \n                x += 1\n                y += 1\n                  \n                flag = 1 - flag \n          \n            # Updating minimum length substring \n            if (len(tmp_str) < res_len): \n                res_len = len(tmp_str) \n                res_str = tmp_str \n  \n    return res_str \n\nresult = shortest_substring(\"abbcd\", \"accde\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \n  \n# creating 2-dimensional array \narr = np.array([[0, 0, 0, 0, 0, 0, 0], \n                [0, 0, 0, 0, 0, 0, 0], \n                [0, 0, 0, 0, 0, 0, 0], \n                [0, 0, 0, 0, 0, 0, 0], \n                [0, 0, 0, 0, 0, 0, 0]]) \n  \n# displaying the array \nprint (\"2-dimensional array is:: \", arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Compose a program in Python to find the sum of an array of integers\n\ndef array_sum(arr):\n  \"\"\"\n  Compute the sum of an array of integers.\n\n  Parameters\n  ----------\n  arr : array_like\n    The array of integers.\n\n  Returns\n  -------\n  int\n    The sum of the array entries.\n  \"\"\"\n  sum = 0\n  for n in arr:\n    sum += n\n  return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combine(str1, str2):\n  return str1 + str2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_median(arr):\n    n = len(arr) \n    arr.sort() \n  \n    if n % 2 != 0: \n        return arr[n//2] \n  \n    return (arr[(n-1)//2] + arr[n//2]) / 2.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import the necessary library\nimport pymongo\n\n# Establish a connection to the MongoDB database\nclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n\n# Import the data into the database\ndb = client.myDatabase\nrecords = db.myCollection\nwith open('data.json', 'r') as f:\n    data = json.load(f)\n    records.insert_many(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: target = 'hello'\nlist_strings = ['hello world', 'good bye', 'hello', 'hello planet']\n\nresults = [string for string in list_strings if target in string]\n\nprint(results)\n# Output: ['hello world', 'hello', 'hello planet'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import flask\nfrom flask import request, jsonify\nimport matplotlib.pyplot as plt\n\n# create the Flask app\napp = flask.Flask(__name__)\napp.config[\"DEBUG\"] = True\n\n# function to generate the pie chart\ndef generate_pie_chart(data):\n fig, ax = plt.subplots()\n ax.pie(data, labels=['1', '2', '4', '6'], autopct='%1.1f%%')\n ax.axis('equal') \n return fig\n\n# home route\n@app.route('/', methods=['GET'])\ndef home():\n return '''<h1>Pie Chart Generator</h1>\n <p>A web service to generate pie chart from input data.</p>'''\n\n# route to generate the pie chart\n@app.route('/api/v1/generate_pie_chart', methods=['POST'])\ndef generate_pie_chart_route():\n # get the input data\n data = request.json['data']\n \n # generate the pie chart \n fig = generate_pie_chart(data)\n \n # save the figure as a png image\n figure_file = 'figure.png'\n fig.savefig(figure_file)\n \n # read the pie chart image\n data = open(figure_file, 'rb').read()\n \n # return the chart as response\n return data\n\n# run the app\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n \n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get('https://en.wikipedia.org/wiki/Python_(programming_language)').text\n \n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n \n# Find all the h2 tags and iterate through them\nfor h2_tag in soup.find_all(\"h2\"):\n    # Check if h2 tag has a 'tocsection' class\n    if \"tocsection\" in h2_tag.attrs['class']:\n        # Extract the article title from the h2 tag\n        article_title = h2_tag.text.strip()\n        # Print the article title\n        print(\"Article Title:\", article_title)\n        print(\"-\"*50) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_list(list1, list2):\n    result = []\n \n    for i in range(len(list1)):\n        result.append(list1[i] + list2[i])\n \n    return result\n \nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\n \nprint(sum_list(list1, list2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name, age, major):\n        self.name = name\n        self.age = age\n        self.major = major\n        \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n    \n    def get_major(self):\n        return self.major but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\nclass EmailParser:\n def __init__(self, email):\n self.email = email\n \n def parse_username(self):\n return re.search('(.*)@', self.email).group(1)\n \n def parse_domain(self):\n return re.search('@(.*)', self.email).group(1)\n\n# Usage\nparser = EmailParser(\"john@example.com\")\nprint(parser.parse_username())\n# john\nprint(parser.parse_domain())\n# example.com but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n  \ndef generate_matrix():\n    matrix = [[random.randint(1, 9) \n                for x in range(3)] \n                    for y in range(3)] \n  \n    return matrix\n\nresult = generate_matrix()\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def square_array(nums): \n    return [n**2 for n in nums] \n\nresult = square_array([1, 2, 3])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_array = [1,2,3,4,5,6,7,8,9,10] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def partition(arr,low,high): \n    i = ( low-1 )         \n    pivot = arr[high]    \n  \n    for j in range(low , high): \n        if   arr[j] <= pivot: \n            i = i+1 \n            arr[i],arr[j] = arr[j],arr[i] \n  \n    arr[i+1],arr[high] = arr[high],arr[i+1] \n    return ( i+1 ) \n  \ndef quickSort(arr,low,high): \n    if low < high: \n        pi = partition(arr,low,high) \n  \n        quickSort(arr, low, pi-1) \n        quickSort(arr, pi+1, high) \n  \narr = [10, 7, 8, 9, 1, 5] \nn = len(arr) \nquickSort(arr,0,n-1) \nprint (\"Sorted array is:\") \nfor i in range(n): \n    print (\"%d\" %arr[i]), but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \nimport scipy.optimize as opt \n\ndef func(x): \n\treturn 2*np.power(x[0], 3) + 3*np.power(x[1],2) + x[1] + 5\n\nopt.minimize(func, ([0, 0]), method='nelder-mead', \noptions={'xtol': 1e-8, 'disp': True}) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef detect_outliers(data):\n    # calculate summary statistics\n    data_mean, data_std = np.mean(data), np.std(data)\n    \n    # define outliers\n    cut_off = data_std * 3\n    lower, upper = data_mean - cut_off, data_mean + cut_off\n    \n    # identify outliers\n    outliers = [x for x in data if x < lower or x > upper]\n    return outliers\n\ndataset = [6, 7, 8, 10, 8, 8, 9, 11, 12, 15]\noutliers = detect_outliers(dataset) \nprint(outliers)  # [15] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter as tk\n\n#Create root window\nwindow = tk.Tk()\nwindow.title('Python Code Selector')\n\n#Create a selection frame\nselection_frame = tk.Frame(window, bd=2, relief=tk.SUNKEN)\nselection_frame.pack(fill = tk.X)\n\nlanguages = ['Python 2.7', 'Python 3.4', 'Python 3.6', 'Python 3.7']\n\n#Create a variable to store current language\nlanguage_var = tk.StringVar(selection_frame)\nlanguage_var.set(languages[0])\n\n#Create a pull down menu\nlanguage_dropdown = tk.OptionMenu(selection_frame, language_var, *languages)\nlanguage_dropdown.pack(side=tk.LEFT)\n\n#Create a button to accept the selection\naccept_button = tk.Button(selection_frame, text='Accept', command=accept_selection)\naccept_button.pack(side=tk.RIGHT)\n\n#Create a function to accept the selection\ndef accept_selection():\n\tprint(language_var.get())\n\nwindow.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import keras\n\n# Load the FOML-200 dataset\ndata = keras.datasets.imdb\n\n# Create training and test data\n(X_train, y_train), (X_test, y_test) = data.load_data(num_words=88000)\n\n# Create word to index lookup\nword_index = data.get_word_index()\nword_index = {k:(v+3) for k, v in word_index.items()}\nword_index[\"<PAD>\"] = 0\nword_index[\"<START>\"] = 1\nword_index[\"<UNK>\"] = 2\nword_index[\"<UNUSED>\"] = 3\n\n# Convert review to sequence\nX_train = keras.preprocessing.sequence.pad_sequences(X_train, value=word_index['<PAD>'], padding='post', maxlen=250)\nX_test = keras.preprocessing.sequence.pad_sequences(X_test, value=word_index['<PAD>'], padding='post', maxlen=250)\n\n# Create embedding layer from pre-trained Glove embeddings\nembedding_matrix = np.zeros((88000, 100))\nfor word, i in word_index.items():\n    if i >= 88000:\n        continue\n    embedding_vector = embeddings_index.get(word)\n    if embedding_vector is not None:\n        embedding_matrix[i] = embedding_vector\n\n# Create the model\nmodel = keras.Sequential()\nmodel.add(keras.layers.Embedding(88000, 100, weights=[embedding_matrix], input_length=250, trainable=False))\nmodel.add(keras.layers.Dropout(0.2))\nmodel.add(keras.layers.GlobalMaxPooling1D())\nmodel.add(keras.layers.Dense(64, activation='relu'))\nmodel.add(keras.layers.Dropout(0.2))\nmodel.add(keras.layers.Dense(1, activation='sigmoid'))\n\n# Compile the model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# Fit the model\nmodel.fit(X_train, y_train, epochs=25, batch_size=128, validation_data=(X_test, y_test)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def two_sum(arr, target):\n for i in range(len(arr)):\n for j in range(i+1, len(arr)):\n if arr[i] + arr[j] == target:\n return (i, j)\n\n# Usage\narr = [3, 5, 7, 9, 10]\ntarget = 12\n\nprint(two_sum(arr, target))\n# Output: (0, 4) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\n#\n#  Copyright (C) 2010 Toms Baugis\n#\n#  Original code from Banshee control,\n#  Copyright (C) 2009-2010 Jason Smith, Rico Tzschichholz\n#\n#  This program is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License\n#  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n#\n\nimport atexit\nimport gobject\nimport sys, os\nfrom subprocess import Popen\n\n\ntry:\n\timport gtk\n\tfrom dockmanager.dockmanager import DockManagerItem, DockManagerSink, DOCKITEM_IFACE\n\tfrom signal import signal, SIGTERM\n\tfrom sys import exit\nexcept ImportError, e:\n\tprint e\n\texit()\n\n\nfrom hamster import client\nfrom hamster.utils import stuff, i18n\ni18n.setup_i18n()\n\n\nclass HamsterItem(DockManagerItem):\n    def __init__(self, sink, path):\n        DockManagerItem.__init__(self, sink, path)\n\n        self.storage = client.Storage()\n        self.storage.connect(\"facts-changed\", lambda storage: self.refresh_hamster())\n        self.storage.connect(\"activities-changed\", lambda storage: self.refresh_hamster())\n\n        self.id_map = {} #menu items\n\n        self.update_text()\n        self.add_actions()\n        gobject.timeout_add_seconds(60, self.refresh_hamster)\n\n\n    def refresh_hamster(self):\n        try:\n            self.update_text()\n        finally:  # we want to go on no matter what, so in case of any error we find out about it sooner\n            return True\n\n\n    def update_text(self):\n        today = self.storage.get_todays_facts()\n\n        if today and today[-1].end_time is None:\n            fact = today[-1]\n\n            self.set_tooltip(\"%s - %s\" % (fact.activity, fact.category))\n            self.set_badge(stuff.format_duration(fact.delta, human=False))\n        else:\n            self.set_tooltip(_(\"No activity\"))\n            self.reset_badge()\n\n    def menu_pressed(self, menu_id):\n        if self.id_map[menu_id] == _(\"Overview\"):\n            Popen([\"hamster-time-tracker\", \"overview\"])\n        elif self.id_map[menu_id] == _(\"Preferences\"):\n            Popen([\"hamster-time-tracker\", \"preferences\"])\n\n        self.add_actions() # TODO - figure out why is it that we have to regen all menu items after each click\n\n\n    def add_actions(self):\n        # first clear the menu\n        for k in self.id_map.keys():\n            self.remove_menu_item(k)\n\n        self.id_map = {}\n        # now add buttons\n        self.add_menu_item(_(\"Overview\"), \"\")\n        self.add_menu_item(_(\"Preferences\"), \"preferences-desktop-personal\")\n\n\nclass HamsterSink(DockManagerSink):\n    def item_path_found(self, pathtoitem, item):\n        if item.Get(DOCKITEM_IFACE, \"DesktopFile\", dbus_interface=\"org.freedesktop.DBus.Properties\").endswith (\"hamster-time-tracker.desktop\"):\n            self.items[pathtoitem] = HamsterItem(self, pathtoitem)\n\nhamstersink = HamsterSink()\n\ndef cleanup():\n\thamstersink.dispose()\n\nif __name__ == \"__main__\":\n\tmainloop = gobject.MainLoop(is_running=True)\n\n\tatexit.register (cleanup)\n\tsignal(SIGTERM, lambda signum, stack_frame: exit(1))\n\n\twhile mainloop.is_running():\n\t\tmainloop.run()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com/articles.html'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# get the title\ntitle = soup.find(\"h1\", class_=\"article-title\")\ntitle_text = title.text.strip()\n\n# get the date\ndate = soup.find(\"div\", class_=\"article-date\")\ndate_text = date.text\n\n# get the article text\ntext = soup.find(\"div\", class_=\"article-text\")\ntext_text = text.text.strip()\n \n # save the information in the file\nwith open('article.txt', 'w') as file:\n file.write(title_text+'\\n')\n file.write(date_text+'\\n')\n file.write(text_text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num1 = float(input(\"Please enter the first number: \"))\nnum2 = float(input(\"Please enter the second number: \"))\n\nprint(\"The sum of the two numbers is: \" + str(num1 + num2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: occurence_map = {}\n\nfor item in inputArray:\n if item not in occurence_map:\n  occurence_map[item] = 1\n else:\n  occurence_map[item] += 1\n\nprint(occurence_map) # Output: {'a': 4, 'b': 2, 'c': 1, 'd': 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n  \n# Driver Program \nprint(Fibonacci(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\nfrom sklearn.pipeline import Pipeline\n\n# Define the preprocessing steps\ndata_process = Pipeline([\n ('extract_capacity', extract_column('capacity')),\n ('transform_capcity', StandardScaler()),\n ('extract_date', extract_column('date of commission')),\n ('transform_date', YearExtractorTransformer()),\n ('label', BooleanLabelEncoder()),\n ])\n\n# Put the steps together into a pipeline\nmodel = Pipeline([\n ('preprocessing', data_process),\n ('classification', RandomForestClassifier()),\n ])\n\n# Fit and predict labels\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_even_numbers(list):\n    # Write a python program that takes a list and return a new list with only even numbers.\n    return [x for x in list if x % 2 == 0]\n  \nif __name__ == '__main__':\n    list = [2, 3, 5, 7, 9, 10]\n    print(get_even_numbers(list))\n    # Output: [2, 10] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: fahrenheit_temps = [30, 40, 50]\ncelsius_temps = [(temp - 32) * 5/9 for temp in fahrenheit_temps]\n\nprint(f'Below are the temperatures converted from Fahrenheit to Celsius:')\nprint(*celsius_temps, sep=\"\\n\")\n\nOutput:\nBelow are the temperatures converted from Fahrenheit to Celsius:\n-1.1111111111111112\n4.444444444444445\n10.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Vectorization\nfreq = (np.array(freq) + np.array(new_freq)).tolist() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_search(arr, target):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\n\ndef get_time_difference(start_time, current_time):\n    start_time = datetime.datetime.strptime(start_time, \"%H:%M%p\")\n    current_time = datetime.datetime.strptime(current_time, \"%H:%M%p\")\n    return current_time - start_time but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://www.example.com/\"\nresponse = requests.get(url)\nhtml = response.text\n\nsoup = BeautifulSoup(html, \"html.parser\")\n\ntitles = soup.find_all(\"title\")\ndescriptions = soup.find_all(\"meta\", {\"name\": \"description\"})\n\nfor title in titles:\n print(title.string)\n\nfor description in descriptions:\n print(description.attrs[\"content\"]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_average(lst):\n    sum = 0\n    for num in lst: \n        sum += num \n    # average calculation \n    avg = sum / len(lst)  \n      \n    return avg\n\naverage = find_average([3, 5, 7, 9, 11])\nprint(\"The average of the numbers in the list is:\", average) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class CalendarGenerator(object):\n\n    def __init__(self, name):\n        self.name = name\n\n    def generate_calendar(self):\n        calendar = []\n\n        # Code to generate a calendar goes here\n\n        return calendar\n\ncalendar = CalendarGenerator(calendarName)\ncalendar.generate_calendar() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = ['cat', 'apple', 'elephant', 'dog']\n\nlist.sort()\n\nprint(list) # Output: ['apple', 'cat', 'dog', 'elephant'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: letter_frequencies= {}\nfor letter in text:\n    if letter not in letter_frequencies:\n        letter_frequencies[letter] = 1\n    else:\n        letter_frequencies[letter] += 1\n\nfreq = []\nfor key,val in letter_frequencies.items():\n    freq.append([key,val])\n\nprint(freq) # [['h', 1], ['e', 1], ['l', 3], ['o', 2], ['w', 1], ['r', 1], ['d', 1]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(string):\n    '''Checks if the given string is a palindrome by removing non-alphanumeric characters and comparing the reversed version of the string'''\n    string = ''.join(c.lower() for c in string if c.isalnum())\n    reversed_str = string[::-1]\n    return string == reversed_str\n\nstring = \"A man, a plan, a canal, Panama!\" \nprint(is_palindrome(string)) # True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortAscending(numbers):\n    for i in range(len(numbers)):\n        for j in range(i+1,len(numbers)):\n            if numbers[i] > numbers[j] :\n                temp = numbers[i]\n                numbers[i] = numbers[j]\n                numbers[j] = temp\n    return numbers\n\nprint(sortAscending([4, 1, 8, 5, 6]))\n\n# Output:\n# [1, 4, 5, 6, 8] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.feature_extraction.text import CountVectorizer \n  \n# create the transform \nvectorizer = CountVectorizer(token_pattern=r\"(?u)\\b\\w+\\b\") \n  \n# tokenize and build vocab \nvectorizer.fit([text]) \n  \n# summarize \nprint(vectorizer.vocabulary_) \n\n# output {'apple': 0, 'banana': 1, 'cherry': 2} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\n\ndef func():\n    start=time.time()\n    # Optimized code using range instead of while loop\n    lst = range(100000000)\n    end=time.time()\n    print(end-start)\n\nfunc() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(nums):\n    \"\"\"This function takes a series of numbers as input and returns the highest number.\n    \n    Args:\n        nums (list): A list of numbers.\n    \n    Returns:\n        int: The highest number.\n    \"\"\"\n    return max(nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def median(numbers):\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        mid = int(len(numbers) / 2)\n        return (numbers[mid] + numbers[mid - 1]) / 2\n    else:\n        mid = int(len(numbers) / 2)\n        return numbers[mid]\n\nnumber_list = [-2.3, 5.6, 7.6, 4.5, 9.8]\nprint('Median of the list is', median(number_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The benefits of using list comprehensions in Python are: \n1. List comprehensions are more efficient than \"for\" or \"while\" loops, as they allow you to write the same code in fewer lines. \n2. They are easier to read, as the code is concise and requires less mental effort to understand. \n3. They allow you to write compact and elegant code, as you can transform a few lines of code into a single line of list comprehension. \n4. They are faster to execute, as list comprehensions are evaluated at compile-time. \n5. List comprehensions also allow you to process and manipulate data in sophisticated ways. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os\nimport dialogflow_v2 as dialogflow\nfrom google.api_core.exceptions import InvalidArgument\n\nos.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"] = 'PATH_TO_CREDENTIALS_FILE'\n\nDIALOGFLOW_PROJECT_ID = 'YOUR_PROJECT_ID'\nDIALOGFLOW_LANGUAGE_CODE = 'en-us'\nGOOGLE_APPLICATION_CREDENTIALS = 'PATH_TO_CREDENTIALS_FILE'\nSESSION_ID = 'current-user-id'\n\ndef detect_intent_from_text(text, session_id, language_code=DIALOGFLOW_LANGUAGE_CODE):\n session_client = dialogflow.SessionsClient()\n session = session_client.session_path(DIALOGFLOW_PROJECT_ID, session_id)\n text_input = dialogflow.types.TextInput(text=text, language_code=language_code)\n query_input = dialogflow.types.QueryInput(text=text_input)\n try:\n response = session_client.detect_intent(session=session, query_input=query_input)\n return response.query_result\n except InvalidArgument:\n raise\n\n# Create an intent in DialogFlow    \ndef intent_create():\n intents_client = dialogflow.IntentsClient()\n parent = intents_client.project_agent_path(DIALOGFLOW_PROJECT_ID)\n training_phrases = [\n dialogflow.types.Intent.TrainingPhrase(parts=[\n dialogflow.types.Intent.TrainingPhrase.Part(text='What is the weather like?'),\n ]),\n]\n\nmessage_text = dialogflow.types.Intent.Message.Text(text=['That\\'s a great question!'])\n\nresponse = intents_client.create_intent(\n parent,\n intent_name='[INTENT_NAME]',\n training_phrases=training_phrases,\n message=message_text\n).per_response\n\n# Retrieve a response to a user's query\nquery = 'What is the weather like in London?'\nresponse = detect_intent_from_text(query, SESSION_ID)\nprint('Query text: {}'.format(response.query_text))\nprint('Detected intent: {} (confidence: {})\\n'.format(\n response.intent.display_name, response.intent_detection_confidence))\nprint('Fulfillment text: {}'.format(response.fulfillment_text)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(lst):\n  lst.sort()\n  return lst\n\nlst = [5, 7 ,1 ,3, 4]\nsorted_list = sort_list(lst)\nprint(sorted_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort(arr): \n    n = len(arr) \n    \n    for i in range(n-1): \n        min_index = i \n        for j in range(i+1, n): \n            if arr[min_index] > arr[j]: \n                min_index = j \n                  \n        arr[i], arr[min_index] = arr[min_index], arr[i] \n        \n    return arr\n\nlist = [3, 5, 2, 1, 4] \nprint(sort(list)) # [1, 2, 3, 4, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_strings_with_2_or_more_vowels(strings): \n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    filtered_strings = []\n    for s in strings:\n        cnt = 0\n        for c in s:\n            if c in vowels:\n                cnt += 1\n        if cnt >= 2:\n            filtered_strings.append(s)\n    return filtered_strings\n\nstrings = [\"Codecademy\", \"Apples\", \"Frame\", \"AeIouy\"]\nprint(filter_strings_with_2_or_more_vowels(strings)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\n\ndateandtime = datetime.datetime.now()\n# print date and time string\nprint(dateandtime.strftime(\"%d/%m/%Y %H:%M:%S\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_vowels(s):\n  count = 0\n  vowels = \"aeiou\"\n  \n  for char in s:\n    if char in vowels: \n      count += 1\n  \n  return count but is not the same. just give one example and only return the code."}
