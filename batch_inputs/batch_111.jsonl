{"prompt": "make some code that functions the same as the following code: import django\n\n# Setting up a django project\ndjango.setup()\n\n# Providing the project name and the path to working directory\ndjango-admin startproject <project_name> <working_directory_path>\n\n# Running the project server\npython manage.py runserver\n\n# Creating and adding data models\nfrom django.db import models\n\nclass CV(models.Model):\n    name = models.CharField(max_length=256)\n    age = models.IntegerField()\n    education = models.TextField()\n    experience = models.TextField()\n    skills = models.TextField()\n\n# Migrating the models\npython manage.py makemigrations\npython manage.py migrate\n\n# Creating a superuser for the admin panel\npython manage.py createsuperuser\n\n# Adding admin view for the CV\nfrom django.contrib import admin\nfrom .models import CV\n\n# Registering the CV model to the admin panel\nadmin.site.register(CV)\n\n# Creating the CV view and template\nfrom django.shortcuts import render\nfrom django.template import loader\n\ndef cv(request):\n    cvs = CV.objects.all()\n    template = loader.get_template('cv.html')\n    context = {\n        'cvs': cvs,\n    }\n    return  HttpResponse(template.render(context, request)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Customer:\n    def __init__(self,name, email, phone_number, address):\n        self.name = name\n        self.email = email\n        self.phone_number = phone_number\n        self.address = address but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Initialize the expression\nexpression = \"2 + 3 - 5 * 4 + 7 / 6\"\n\n# Evaluate the expression\nresult = eval(expression)\n\n# Print the result\nprint(\"Result of the expression:\", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_array(arr):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[i]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n  \ndef random_int(): \n    return random.randint(0, 10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: False. Python does allow for recursion. Recursion is a technique for iteratively performing a task using a function that calls itself. It is an important technique used in programming for solving complex problems. Recursion can help reduce the amount of code needed to solve a problem, making it easier to read and maintain. Furthermore, it can often times provide more efficient solutions than code that does not use recursion. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = 'https://example.org/api?name=test'\nresponse = requests.get(url)\ndata = response.json()\nresult = data['result'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_multiple(num1, num2):\n   if (num1 % num2 == 0):\n       print(f'{num1} is a multiple of {num2}')\n   else:\n       print(f'{num1} is not a multiple of {num2}')\n\nis_multiple(32, 8)\n\nOutput:\n32 is a multiple of 8 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def group_words(words):\n    # Function to group words of the same length together\n    groups = {}\n    \n    for word in words:\n        length = len(word)\n        if length not in groups:\n            groups[length] = []\n        groups[length].append(word)\n    return groups but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: strings = [\"apple\", \"orange\", \"banana\", \"grape\"]\nwords_to_remove = [\"apple\", \"grape\"]\n\n# Using list comprehension\nfiltered_list = [word for word in strings if word not in words_to_remove] \n\n# Output\nprint(filtered_list)\n\n# Output\n['orange', 'banana'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortArray(arr): \n    arr.sort() \n    return arr \n  \n# Driver code \narr = [9, 5, 1, 10] \nprint(sortArray(arr)) \n# Output: [1, 5, 9, 10] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\ndef plot_2d_data(data):\n x = [p[0] for p in data]\n y = [p[1] for p in data]\n plt.scatter(x, y)\n plt.title('2D Data Points')\n plt.show()\n\n#Testing the visualization\ndata_points = [(1, 2), (3, 4), (5, 6), (7, 8)]\nplot_2d_data(data_points) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Application 1: Generating Fake Data\n\nimport random\nimport time\n\nrandom.seed(time.time())\n\nwhile True:\n x = random.randint(1, 100)\n y = random.randint(1, 100)\n z = random.randint(1, 100)\n \n print('{},{},{}'.format(x, y, z))\n time.sleep(1)\n\n# Application 2: Analyzing Data\n\nimport socket\n\nTCP_IP = '127.0.0.1'\nTCP_PORT = 5005\nBUFFER_SIZE = 1024\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind((TCP_IP, TCP_PORT))\ns.listen(1)\n\nconn, addr = s.accept()\nwhile True:\n data = conn.recv(BUFFER_SIZE)\n if not data: break\n x, y, z = [int(val) for val in data.decode().split(',')]\n print('Received values: {}, {} and {}'.format(x, y, z))\n\u00a0conn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn import tree\n\n#the training data\nX = np.array([[a, b, c, d, e, f, g],\n [a, b, c, d, e, f, g],\n [a, b, c, d, e, f, g],\n [a, b, c, d, e, f, g]])\n\ny = np.array([0, 0, 1, 1])\n\n#create and train the decision tree\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: values = [14, 16, 2]\n \nhighest = values[0]\n \nfor i in values:\n    if highest < i:\n        highest = i\n \nprint(\"The highest value is: \", highest) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = [\"cat\", \"dog\", \"bird\", \"cat\", \"dog\", \"ant\"]\n\n# Create an empty dictionary to store the counts\nwordCounts = {}\n\n# Iterate over the words list\nfor word in words:\n # Check if the word is already in the dictionary\n if word in wordCounts:\n # Increment the count for the word\n wordCounts[word] += 1\n else:\n # Create a new entry with count 1\n wordCounts[word] = 1\n\n# Print out the dictionary\nprint(wordCounts) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_dictionary(dictionary, keys):\n    output = []\n    for key in keys:\n        output.append(dictionary[key])\n    return output but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef hypotenuse(a, b):\n    return math.sqrt(a**2 + b**2)\n\nprint(hypotenuse(3, 4)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from datetime import datetime\n\ndate = datetime.today()\ndate_formatted = date.strftime('%m/%d/%Y')\nprint(date_formatted) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_sum(arr):\n max_sum = 0\n sum = 0\n for num in arr:\n sum += num\n max_sum = max(max_sum, sum)\n return max_sum\n\nmax_sum([3, 8, -2, 10, -6])  # 17 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: elements = [\"A\", \"B\", \"C\", \u201cD\u201d] \nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nmydict = dict()\n\nfor i in range(len(elements)): # iterate through elements\n mydict[elements[i]] = numbers[i:i+3] # assign each element the next three numbers\n\nprint(mydict) \n# {'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9], 'D': [7, 8, 9]} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_list():\n    random_list = []\n    while len(random_list) < 5:\n        new_number = random.randint(1, 30)\n        if new_number not in random_list:\n            random_list.append(new_number)\n    return random_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_arrays(array1, array2):\n    merged_array = array1 + array2\n    return merged_array\n\narray1 = [1, 2, 3]\narray2 = [4, 5, 6]\nmerged_array = merge_arrays(array1, array2)\nprint(merged_array) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def random_forest_classifier(X, y):\n    \"\"\"\n    Create a classification model using random forests.\n\n    Parameters:\n        X(array-like): Training data.\n        y(array-like): Target values.\n\n    Returns:\n        object: The trained random forest classifier.\n    \"\"\"\n    # create the random forest classifier\n    rfc = RandomForestClassifier(random_state=42)\n\n    # fit the classifier to the dataset\n    rfc.fit(X, y)\n\n    return rfc but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def getMax(list):\n    max = 0\n    for num in list:\n        if num > max:\n            max = num\n    return max\n\nlist = [2, 5, 3, 7]\nprint(getMax(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a utility function to convert mathematical expressions to postfix notation in Python\n\"\"\"\n\ndef to_postfix(expression):\n    operations = {\n        '+': 1, \n        '-': 1,\n        '*': 2,\n        '/': 2,\n        '^': 3\n    }\n    output = []\n    stack = []\n    tokens = expression.split(' ')\n    for token in tokens:\n        if token in operations:\n            while stack and operations[stack[-1]] >= operations[token]:\n                output.append(stack.pop())\n            stack.append(token)\n        elif token == '(':\n            stack.append(token)\n        elif token == ')':\n            while stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n        else:\n            output.append(token)\n    while stack:\n        output.append(stack.pop())\n\n    return output\n\nif __name__==\"__main__\":\n    print(to_postfix(\"( a + b ) \u00d7 c \u2212 ( d / e )\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Given k number of student\nstudent_score = [90, 85, 75, 60, 95, 50, 89]\n\nfor score in student_score:\n if score > 90:\n print(\"The student has an A grade\")\n elif score > 80 and score <= 90:\n print(\"The student has a B grade\")\n elif score > 70 and score <= 80:\n print(\"The student has a C grade\")\n elif score > 60 and score <= 70:\n print(\"The student has a D grade\")\n else:\n print(\"The student has an F grade\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\nimport pymongo\n\nclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\ndb = client[\"mydatabase\"]\ncol = db[\"data\"]\n\ndef get_data(url):\n    html = requests.get(url).text\n    soup = BeautifulSoup(html, 'html.parser')\n    name = soup.find('h1').text\n    price = soup.find('span', class_=\"price\").text\n    col.insert_one({'name': name, 'price': price})\n\nget_data(\"https://example.com\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import xml.etree.ElementTree as ET\n\ndef parse_xml(xml_string):\n\n    root  = ET.fromstring(xml_string)\n    for node in root:\n        print(f'Node: {node.tag}: {node.text}')\n\nif __name__ == '__main__':\n    xml_string = \"<node><child>text</child></node>\"\n    parse_xml(xml_string) # prints Node: child: text but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import spacy\n\ndef generate_grammar_based_dataset(sentences):\n    nlp = spacy.load('en_core_web_sm')\n    dataset = []\n    for sentence in sentences:\n        doc = nlp(sentence)\n        grammarTaggedSentence = [(token.text, token.pos_) for token in doc]\n        dataset.append(grammarTaggedSentence)\n    return dataset but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def lexicographic_sort(string_list):\n    # Sort by length\n    string_list.sort(key=len)\n \n    # Second, sort by alphabetical order\n    string_list.sort()\n \n    return string_list\n\nstring_list = [\"abcd\", \"def\", \"fh\", \"ac\", \"a\"]\nprint(lexicographic_sort(string_list)) # [\"a\", \"ac\", \"def\", \"fh\", \"abcd\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_divisible_by_three(num):\n  if num % 3 == 0:\n    return True\n  return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def flatten_list(nested_list):\n    flattened_list = []\n    for item in nested_list:\n        if type(item) == list:\n            flattened_list.extend(flatten_list (item))\n        else:\n            flattened_list.append(item)\n    return flattened_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: primes_dict = {}\nfor i in range(2, 11):\n    is_prime = True\n    for j in range(2, i):\n        if i % j == 0: \n            is_prime = False \n            break\n    if is_prime:\n        primes_dict[i] = i**2\n\nprint (primes_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\ndef count_tags(url):\n    r = requests.get(url)\n    soup = BeautifulSoup(r.text, 'html.parser')\n    count = len(soup.find_all())\n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_search(numbers, n):\n   start = 0\n   end = len(numbers) - 1\n\n   while start <= end:\n      mid = (start + end) // 2\n      if numbers[mid] == n:\n         return mid\n      elif numbers[mid] < n:\n         start = mid + 1\n      else:\n         end = mid - 1\n   return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password():\n min_length = 8\n allchar = string.ascii_letters + string.digits + string.punctuation\n password = \"\".join(random.choice(allchar) for x in range(min_length))\n return password\n\npassword = generate_password()\nprint(password) // eXyCvJ121 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fahrenheit_to_celsius(fahrenheit):\n return (fahrenheit - 32) * 5/9 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_numbers(num1, num2):\n    if (num1 > num2):\n        print(\"Number 1 is greater than Number 2\")\n    elif (num1 == num2):\n        print(\"Number 1 is equal to Number 2\")\n    else:\n        print(\"Number 1 is less than Number 2\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_fibonacci_sequence(N):\n    '''\n    This program takes in an integer N and returns the first N elements of the Fibonacci sequence\n    '''\n    \n    fibonacci_sequence = []\n    \n    if N < 1:\n        return fibonacci_sequence\n    elif N == 1:\n        fibonacci_sequence = [1]\n        return fibonacci_sequence\n    else:\n        fibonacci_sequence = [1,1]\n        for i in range(2,N):\n            fibonacci_sequence.append(fibonacci_sequence[i-2]+fibonacci_sequence[i-1]) \n            \n    return fibonacci_sequence\n \nprint(generate_fibonacci_sequence(10)) # [1, 1, 2, 3, 5, 8, 13, 21, 34, 55] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_alphabetically(students):\n   return sorted(students) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from bs4 import BeautifulSoup \nimport requests\n\ndef crawler(url): \n    source_code = requests.get(url).text \n    soup = BeautifulSoup(source_code, 'html.parser') \n    for link in soup.find_all('a'): \n        href = link.get('href') \n        print(href)\n        crawler(href) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def week_days():\n  week_days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n  for day in week_days:\n    print(day)\n \nweek_days() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt \nimport scipy.stats as st\nimport scikit-learn as sklearn but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n    def __init__(self, name, age , department):\n        self.name = name\n        self.age = age\n        self.department = department\n    \n    def display(self):\n        print(\"Name:\", self.name)\n        print(\"Age:\", self.gender)\n        print(\"Department:\", self.department) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: One of the best ways to decrease the execution time of a Python program is to use the following technique.\n\n1. Utilize the built-in functions instead of writing your own code.\n2. Eliminate loops that can be avoided by using the built-in functions.\n3. Utilize data structures and algorithms to optimize the program.\n4. Utilize asynchronous programming to reduce the execution time.\n5. Look into alternative libraries that provide better performance.\n6. Profile the code to identify inefficient parts and optimize them.\n7. Utilize caching and memoization techniques to speed up the computation.\n8. Reduce the latency of IO operations.\n9. Optimize network and database queries.\n10. Utilize multiprocessing or multithreading to fully utilize the available resources. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: text = \"This is a test sentence. This sentence is used for testing.\"\nword = \"test\"\n\ndef count_words(text, word):\n    words = text.split()\n    count = 0\n    for w in words:\n        if w == word:\n            count += 1\n    return count\n\nprint(count_words(text, word)) #2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: cur.execute('UPDATE records SET value = ? WHERE name = ?', (value, name))\nconn.commit() # Added statement to commit changes to the database. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef random_str():\n  return ''.join(random.choices(string.ascii_letters + string.digits, k=10))\n\nprint(random_str()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef random_walk(n_steps):\n    x = 0\n    y = 0\n\n    for _ in range(n_steps):\n        direction = random.choice([-1, 1])\n        x += direction * random.randint(1, 10)\n        y += direction * random.randint(1, 10)\n\n    return x, y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(\"Hello, World!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def common_words(list_1, list_2):\n result = [word for word in list_1 if word in list_2]\n\n return result\n\n# sample usage\ncommon_words(list_1, list_2) # would return ['John', 'George', 'Ringo'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: value = input(\"Please enter a string:\")\nprint(\"The reversed value is:\", value[::-1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num): \n    if num <= 1:\n        return False \n    for i in range(2,num): \n        if num % i == 0:\n            return False \n    return True\n\nfor num in range(0,1001):\n    if is_prime(num): \n        print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_common_substring(string1, string2):\n # Create a 2D array to save all substrings\n substring_length = [[0 for _ in range(len(string1)+1)] for _ in range(len(string2)+1)]\n \n # Save the length of longest substring\n longest_length = 0\n \n # Iterate over the string and save the length of common substrings\n for row in range(1, len(string2)+1):\n  for col in range(1, len(string1)+1):\n   if string2[row-1] == string1[col-1]:\n    substring_length[row][col] = substring_length[row-1][col-1] + 1\n    if substring_length[row][col] > longest_length:\n     longest_length = substring_length[row][col]\n \n return longest_length\n\nstring1 = 'Hawaii'\nstring2 = 'Alaska'\n\nlongest_length = longest_common_substring(string1, string2)\n\nprint('The longest consecutive common substring has length %d.' % (longest_length)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(num):\n a, b = 0, 1\n for _ in range(num):\n  a, b = b, a + b\n return a but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list1 = [1, 2, 3] \nlist2 = [4, 5, 6] \n  \n# using + \nlist3 = list1 + list2 \n  \n# printing list3 \nprint(list3) \n\n# using extend() \nlist1.extend(list2) \n  \n# printing list1 \nprint(list1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_unique_subsets(integers):\n    subsets = []\n    for subset in itertools.chain.from_iterable(itertools.combinations(integers, r) for r in range(len(integers) + 1)):\n        subsets.append(list(subset))\n    return list(set(map(tuple, subsets))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n        return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(str1, str2): \n    # Get lengths of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If Lengths are different, they can't be anagrams \n    if n1 != n2: \n        return False\n  \n    # Sort both the strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n  \n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # List comprehension approach\nres = [i for i in range(2000, 2501) if i % 7 == 0 and i % 5 != 0] \n  \n# Iterative approach\nres = [] \nfor i in range(2000, 2501): \n    if (i % 7 == 0) and (i % 5 != 0): \n        res.append(i) \n  \n# Print the result \nprint(\"\\nNumbers divisible by 7 and not divisible by 5 are\", res) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: nums = []\nans = 0\n\nfor _ in range(5):\n nums.append(int(input()))\n \nnums.sort()\n\nif len(nums) % 2 == 0:\n ans = (nums[len(nums)//2] + nums[len(nums)//2-1]) / 2\nelse:\n ans = nums[len(nums) // 2]\n \nprint(\"Median of the given numbers is: \" + str(ans)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_2d(value, lst):\n for i, row in enumerate(lst):\n  if value in row:\n   return (i, row.index(value))\n\nprint(search_2d(\"hello\", [[12, \"goodbye\", 21], [\"hello\", 67, 55]]))\n# Output: (1, 0) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_last_char(input_string):\n  print(input_string[-1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_divisible(num, divisor):\n    return num % divisor == 0\n \nnum = int(input(\"Number: \"))\ndivisor = int(input(\"Divisor: \"))\n\nprint(\"Number is divisible by the divisor :\", is_divisible(num, divisor)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(items):\n  no_duplicates = []\n  for item in items:\n    if item not in no_duplicates:\n      no_duplicates.append(item)\n  return no_duplicates\n\nitems = [1, 2, 3, 2, 4, 1]\n\nresult = remove_duplicates(items)\n\nprint(result) # [1, 2, 3, 4] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\nInput = [2, 5, 3, 7, 8, 5, 10, 19, 20] \n  \nCounter = Counter(Input) \n  \nmost_occur = Counter.most_common(3)\n\nfor i in most_occur: \n    print(i[0], \":\", i[1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MultiplicationTable:\n    def __init__(self, limit):\n        self.limit = limit\n\n    def create_table(self):\n        for i in range(1, self.limit+1):\n            for j in range(1, self.limit+1):\n                print(i*j, sep= '\\t', end='')\n            print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binarySearch(arr, item): \n    low = 0\n    high = len(arr) - 1\n  \n    while low <= high: \n        mid = (low + high) // 2\n        guess = arr[mid]\n\n        if guess == item: \n            return mid\n        if guess > item: \n            high = mid - 1\n        else: \n            low = mid + 1\n\n    return None\n\narr = [2, 3, 4, 5, 6, 7, 8]\nitem = 6\nresult = binarySearch(arr, item)\n\nif (result != None):\n    print('Item found at index: ', result)\nelse:\n    print('Item not found in array') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \n\ndef linear_reg(x_data, y_data):\n\n    x_mean = np.mean(x_data)\n    y_mean = np.mean(y_data)\n\n    numerator = 0\n    denominator = 0\n    for i in range(len(x_data)):\n        numerator += (x_data[i] - x_mean) * (y_data[i] - y_mean)\n        denominator += (x_data[i] - x_mean) ** 2\n\n    slope = numerator/denominator\n    intercept = y_mean - (slope * x_mean)\n    return slope, intercept but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({\n 'x': [0,1,3,4,5],\n 'y': [1,2,4,8,16]\n})\n\n# interpolate the missing data\nnew_x = np.linspace(0, 5, 6)\ndf = df.set_index('x').reindex(new_x).interpolate().reset_index()\nprint(df) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'example.com'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ndata = []\nfor item in soup.find_all('div', attrs={'class': 'data_item'}):\n  data.append(item.text)\n\nprint(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn import preprocessing\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Load data from API\nbudget = 50m\ncast = ['Brad Pitt', 'Angelina Jolie']\ncrew = ['David Fincher']\nrelease_date = 'October 10th'\n\n# Preprocess data\ndata = {\n 'budget': budget,\n 'cast': ','.join(cast),\n 'crew': ','.join(crew),\n 'release_date': release_date\n}\ndf = pd.DataFrame.from_dict([data])\n\nle1 = preprocessing.LabelEncoder().fit(df['cast'])\nle2 = preprocessing.LabelEncoder().fit(df['crew'])\n\ndf['cast'] = le1.transform(df['cast'])\ndf['crew'] = le2.transform(df['crew'])\n\n# Create and fit the model\nmodel = RandomForestClassifier()\ny = model.fit(df[['budget', 'cast', 'crew', 'release_date']], df['success'])\n\n# Make predictions\npred = model.predict([[budget, le1.transform(cast), le2.transform(crew), release_date]])\nprint(pred) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(my_list):\n    max_num = my_list[0]\n    for num in my_list:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nmy_list = [8, 5, -1, 7, 2]\n\nprint(find_max(my_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_common_substring(str1, str2):\n    lcs = \"\"\n    for i in range(len(str1)):\n        for j in range(len(str2)):\n            if str1[i] == str2[j]:\n                tmp = str1[i]\n                k = i + 1\n                l = j + 1\n                while k < len(str1) and l < len(str2) and str1[k] == str2[l]:\n                    tmp += str1[k]\n                    k += 1\n                    l += 1\n                if len(tmp) > len(lcs):\n                    lcs = tmp\n    return lcs but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import mysql.connector \n\n# create a connection to the MySQL Database \nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"user\",\n  passwd=\"password\",\n  database=\"database_name\"\n)\n\n# create a function to verify the user\ndef login_user(username, password):\n    # create SQL query\n    query = \"SELECT * FROM users WHERE username = %s AND password = %s\"\n    \n    # initialize cursor\n    cur = mydb.cursor()\n    \n    # execute query\n    cur.execute(query, (username, password))\n    \n    # extract row from the database\n    row = cur.fetchone()\n        \n    # if the username and password does not match\n    if row == None:\n        return False\n    # if the username and password match\n    else:\n        return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def identify_movie_genre(movie, genre_list):\n    movie_genre = None\n  \n    for genre in genre_list:\n        search_terms = genre.lower().split()\n        if all(term in movie.lower() for term in search_terms):\n            movie_genre = genre\n            break\n  \n    return movie_genre\n  \nprint(identify_movie_genre(sample_movie, genre_list))\n# Output: 'Action' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import itertools\n\nlist_nums = [1, 2, 3]\n\nperms = itertools.permutations(list_nums)\nfor perm in perms:\n  print(perm) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: user_num = int(input(\"Enter an integer: \"))\nfor i in range(1, user_num+1):\n print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\n\ndef vectorize_corpus(corpus):\n    # Initialize the CountVectorizer\n    vectorizer = CountVectorizer()\n    # Fit the corpus\n    X = vectorizer.fit_transform(corpus)\n    # Convert the sparse matrix to numpy array\n    X = X.toarray()\n    # Return the vectorized corpus and the corresponding feature names\n    return X, vectorizer.get_feature_names() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Python:\nromans = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n\ndef solve_roman(eq):\n    result = 0\n    for char in eq:\n        result += romans[char]\n    return result\n\nprint(solve_roman(\"MMVII\" - \"MDCCLIV\"))\n\nOutput: 823 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_common_substring(s1, s2):\n    s1_length = len(s1)\n    s2_length = len(s2)\n  \n    matrix = [[0] * (s2_length + 1) for _ in range(s1_length + 1)]\n    longest, x_longest = 0, 0\n    for x in range(1, s1_length + 1):\n        for y in range(1, s2_length + 1):\n            if s1[x - 1] == s2[y - 1]:\n                matrix[x][y] = matrix[x - 1][y - 1] + 1\n                if matrix[x][y] > longest:\n                    longest = matrix[x][y]\n                    x_longest = x\n            else:\n                matrix[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\nlongest_common_substring(string1, string2) \n# output: 'Hello' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_shortest(input_list):\n    shortest = input_list[0]\n    for word in input_list:\n        if len(word) < len(shortest):\n            shortest = word\n    return shortest\n\nshortest_word = find_shortest(my_list)\nprint(shortest_word) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_in_place(arr):\n    low = 0\n    high = len(arr) - 1\n    while low < high:\n        arr[low], arr[high] = arr[high], arr[low]\n        low += 1\n        high -= 1\n    return arr\n\narr = [1, 2, 3, 4]\nprint(reverse_in_place(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_ascending(arr):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr\n\narr = [5, 3, 6, 1, 7]\narr = sort_ascending(arr)\nprint(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http://example.org/'\nr = requests.get(url)\nsoup = BeautifulSoup(r.text, 'html.parser')\n\ndata = soup.find('div', {'class': 'main-content'})\n# data is now a BeautifulSoup object containing the HTML of the <div class=\"main-content\"> element but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: <!DOCTYPE html>\n<html>\n  <head>\n    <title>Basic Website</title>\n  </head>\n  <body>\n    <header>\n      <h1>My Website</h1>\n    </header>\n    <div class=\"main-content\">\n      <div class=\"left-column\">\n        Left column content\n      </div>\n      <div class=\"right-column\">\n        Right column content\n      </div>\n    </div>\n    <footer>\n      Copyright 2020\n    </footer>\n  </body>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: public static double calculateMean(int[] numbers) {\n    int total = 0;\n    for (int i : numbers) {\n        total += i;\n    }\n    double mean = total / numbers.length;\n    return mean;\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nWrite a Python script to iteratively apply a function to all the elements in a list.\n\"\"\"\n\ndef applyFunc(list_data, func):\n    result = []\n    for item in list_data:\n        result.append(func(item))\n    return result\n\nlist_data = [1, 2, 3, 4]\n\ndef square(x):\n    return x**2\n\nsquares = applyFunc(list_data, square)\nprint(squares) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\ndef scrape(url):\n    \"\"\"scrapes a website for name and phone number\"\"\"\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    data = {}\n    names = soup.find_all('h2', attrs={'class': 'name'})\n    phones = soup.find_all('span', attrs={'class': 'phone'})\n    for name, phone in zip(names, phones):\n        data[name.text] = phone.text\n    return data\n\nif __name__ == '__main__':\n    url = \"http://www.example.com\"\n    data = scrape(url)\n    print(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def div(x, y):\n    if y == 0:\n        raise ValueError(\"Cannot divide by 0\")\n    return x / y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: elements_dict = {}\n\nelements_dict[\"Hydrogen\"] = {\n    \"symbol\": \"H\", \n    \"atomic_number\": 1, \n    \"atomic_mass\": 1.008, \n    \"group\": 1, \n    \"period\": 1\n    }\n\nelements_dict[\"Helium\"] = {\n    \"symbol\": \"He\", \n    \"atomic_number\": 2, \n    \"atomic_mass\": 4.003, \n    \"group\": 18, \n    \"period\": 1\n    }\n\n#Repeat for other elements. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\nx = np.array([1,2,3,4,5,6,7])\ny = np.array([2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5])\n\nm = ((np.mean(x)*np.mean(y)) - np.mean(x*y))/((np.mean(x)**2) - np.mean(x**2))\nc = np.mean(y) - (m*np.mean(x))\n\nprint(\"slope =\", m)\nprint(\"intercept =\", c) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_median(numbers):\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        median = (numbers[int((length/2)-1)] + numbers[int(length/2)])/2\n    else:\n        median = numbers[int((length-1) / 2)]\n    return median but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to find the shortest path between \n# a given source cell to a destination cell. \n# Rows and columns in given grid must be \n# numbered such that (0,0) can \n# be most top left cell. \n  \n# Utility function to find the \n# shortest path between \n# a given source cell to a destination cell. \ndef find_shortest_path(grid,m,n): \n  \n    # Create a queue for/ BFS and \n    # mark source cell as visited \n    queue = [] \n  \n    # Mark the source cell as visited \n    # and enqueue the source node \n    queue.append([0, 0]) \n    visited = set((0, 0)) \n  \n    # While queue is not empty \n    while queue: \n        # pop front node from queue and  \n        # process it \n        i, j = queue.pop(0) \n  \n        # if destination is reached, \n        # stop the loop \n        if i == n - 1 and j == n - 1: \n            break\n  \n        # check for all 4 possible movements \n        # from current cell \n        for x, y in [[-1, 0], [0, -1], [1, 0], [0, 1]]: \n            # if current cell is valid, has path  \n            # and not visited yet \n            if 0 <= x + i < m and 0 <= y + j < n and grid[x + i][y + j] and (x + i, y + j) not in visited: \n                # add the cell to queue \n                queue.append([x + i, y + j]) \n  \n                # mark cell as visited \n                visited.add((x + i, y + j)) \n  \n    return visited \n  \n# Driver Code \n# given two-dimensional array with 1s as blocked \n# cells and 0s as cells through which \n# we can move \ngrid = [[1, 0, 0], \n        [1, 1, 0], \n        [1, 1, 1]] \n  \nif find_shortest_path(grid, 3, 3): \n    print('Yes') \nelse: \n    print('No') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n a = 0\n b = 1\n if n < 0: \n  print(\"Incorrect input\") \n elif n == 0: \n  return a \n elif n == 1: \n  return b \n else: \n  for i in range(2,n+1): \n   c = a + b \n   a = b \n   b = c \n return b \n\n# Driver Program \nnterms = 20\n\n# check if the number of terms is valid \nif nterms <= 0: \n print(\"Please enter a positive integer\") \nelse: \n print(\"Fibonacci sequence:\") \n for i in range(nterms, 0, -1):\n  if Fibonacci(i) % 3 == 0:\n   print(Fibonacci(i)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def recursive_sum(x, y):\n    if x == 0:\n        return y \n    else: \n        return recursive_sum(x - 1, y + 1) \n\nprint(recursive_sum(x, y)) # 12 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/bin/bash\n\npython program.py \"example input\"\noutput=$(python program.py \"example input\")\n\necho $output but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def vowel_count(string):\n  count = 0\n  vowels = 'aeiou'\n  for char in string.lower():\n    if char in vowels:\n      count += 1\n  \n  return count\n\nprint(vowel_count(\"Hello World\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(list, x):\n    for item in list:\n        if item == x:\n            return True\n    return False\n\nlist = [10,20,30,40,50]\nx = 20\n \nif linear_search(list, x):\n    print(\"Element is present in the list\")\nelse:\n    print(\"Element is not present in the list\") but is not the same. just give one example and only return the code."}
