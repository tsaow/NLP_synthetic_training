{"prompt": "make some code that functions the same as the following code: def add_prefix(input_string, prefix):\n    \"\"\"Takes a string and adds a prefix to each word in the string.\"\"\"\n    output_string = []\n    words = input_string.split()\n    for word in words:\n        output_string.append(prefix + word)\n    return ' '.join(output_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def swap_values(x, y):\n    temp = x\n    x = y\n    y = temp\n    return x, y\n\nx, y = swap_values(3,5)\nprint(x, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: text = 'I'm writing a Python program now'\ncategories = ['Python', 'Java', 'HTML', 'C++']\n\ndef classify(text, categories):\n  for category in categories:\n    if category in text:\n      return category\n  return \"Not found\"\n\nprint(classify(text, categories)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Read the data set\ndf = pd.read_csv('data_set.csv')\n\n# Plot histograms for each feature\nfor col in df.columns:\n plt.hist(df[col], alpha=0.5, label=col)\n plt.legend(loc='upper right')\n plt.show()\n\n# Compute the mean and median values for each feature\nmean = df.mean()\nmedian = df.median()\n\n# Print the mean and median values\nprint(\"Mean Values:\\n{}\\n\\nMedian Values:\\n{}\".format(mean, median)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def run_length_encoding(s):\n    n = len(s) \n    encoded_string = \"\"\n\n    i = 1\n    while i < n:\n        count = 1\n        while i < n and s[i] == s[i - 1]:\n            count += 1\n            i += 1\n\n        encoded_string += (s[i - 1] + str(count))\n        i += 1\n\n    return encoded_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent(my_list):\n    max_count = 0\n    frequent_string = \"\"\n\n    for i in my_list:\n        if my_list.count(i) > max_count:\n            max_count = my_list.count(i)\n            frequent_string = i\n\n    return frequent_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def distribute_tasks(total, num_workers):\n    tasks_per_worker = [total // num_workers] * num_workers\n    remainder = total - sum(tasks_per_worker)\n    \n    # Distribute the remainder among the workers.\n    for i in range(remainder):\n        tasks_per_worker[i] += 1\n\n    return tasks_per_worker but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_valid_sudoku(board):\n    #Rows\n    for i in range(9):\n        if not (set(board[i]) == {1, 2, 3, 4, 5, 6, 7, 8, 9} or set(board[i]) == {0}):\n            return False\n    \n    #Columns\n    for i in range(9):\n        vals = []\n        for j in range(9):\n            vals.append(board[j][i])\n        if not (set(vals) == {1, 2, 3, 4, 5, 6, 7, 8, 9} or set(vals) == {0}):\n            return False\n    \n    #Cubes\n    for i in range(0, 9, 3):\n        for j in range(0, 9, 3):\n            vals = []\n            for m in range(3):\n                for n in range(3):\n                    vals.append(board[i+m][j+n])\n            if not (set(vals) == {1, 2, 3, 4, 5, 6, 7, 8, 9} or set(vals) == {0}):\n                return False\n    \n    return True\n\ndef generate_board(arr):\n    if len(arr) != 81:\n        return False\n    board = [[0 for i in range(9)] for j in range(9)]\n    for i in range(81):\n        board[int(i/9)][i%9] = arr[i]\n    if is_valid_sudoku(board):\n        return board\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def construct_url(base, start_num):\n num = start_num\n while True:\n url = base + str(num)\n yield url\n num += 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_digits(number):\n    count = 0\n    while (number != 0): \n        count=count+1\n        number = number//10\n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = 'https://api.endpoint.com'\nheaders = {'Authorization': 'Bearer abcdefg', 'Content-Type': 'application/json'}\nparameters = {'name': 'John', 'age': 25}\n\nresponse = requests.post(url, headers=headers, json=parameters) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class DataStorage:\n    def __init__(self):\n        self._data = {}\n\n    def store_data(self, key, value):\n        self._data[key] = value\n\n    def get_data(self, key):\n        return self._data.get(key) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class TurtlePosOri:\n    def __init__(self, pos_x, pos_y, orientation):\n        self.pos_x = pos_x\n        self.pos_y = pos_y\n        self.orientation = orientation\n\n    def get_turtle_position(self):\n        return (self.pos_x, self.pos_y)\n\n    def get_turtle_orientation(self):\n        return self.orientation\n\n    def set_turtle_position(self, pos_x, pos_y):\n        self.pos_x = pos_x\n        self.pos_y = pos_y\n\n    def set_turtle_orientation(self, orientation):\n        self.orientation = orientation but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python3\n\n\"\"\"\nThis is a script to convert GenBank flat files to GFF3 format with a specific focus on\ninitially maintaining as much structural annotation as possible, then expanding into\nfunctional annotation support.\n\nThis is not guaranteed to convert all features, but warnings will be printed wherever possible\nfor features which aren't included.\n\nCurrently supported:\n  Structural features:  gene, CDS, mRNA, tRNA, rRNA\n  Annotations: primary identifiers, gene product name\n\nThis is written to handle multi-entry GBK files\n\nCaveats:\n- Because the GBK flatfile format doesn't explicitly model parent/child features, this script\n  links them using the expected format convention of shared /locus_tag entries for each feature\n  of the gene graph (gene, mRNA, CDS)\n- It has only been tested with prokaryotic (non-spliced) genes\n\nAuthor: Joshua Orvis (jorvis AT gmail)\n\"\"\"\n\nimport argparse\nimport sys\nfrom collections import defaultdict\n\nfrom Bio import SeqIO\nfrom biocode import annotation, things, utils\n\n\ndef main():\n    parser = argparse.ArgumentParser( description='Convert GenBank flat files to GFF3 format')\n\n    ## output file to be written\n    parser.add_argument('-i', '--input_file', type=str, required=True, help='Path to an input GBK file' )\n    parser.add_argument('-o', '--output_file', type=str, required=False, help='Path to an output GFF file to be created' )\n    parser.add_argument('--with_fasta', dest='fasta', action='store_true', help='Include the FASTA section with genomic sequence at end of file.  (default)' )\n    parser.add_argument('--no_fasta', dest='fasta', action='store_false' )\n    parser.set_defaults(fasta=True)\n    args = parser.parse_args()\n\n    ## output will either be a file or STDOUT\n    ofh = sys.stdout\n    if args.output_file is not None:\n        ofh = open(args.output_file, 'wt')\n\n    ofh.write(\"##gff-version 3\\n\")\n\n    assemblies = dict()\n    current_assembly = None\n    current_gene = None\n    current_RNA = None\n\n    rna_count_by_gene = defaultdict(int)\n    exon_count_by_RNA = defaultdict(int)\n\n    seqs_pending_writes = False\n\n    features_skipped_count = 0\n\n    # each gb_record is a SeqRecord object\n    for gb_record in SeqIO.parse(open(args.input_file, \"r\"), \"genbank\"):\n        mol_id = gb_record.name\n\n        if mol_id not in assemblies:\n            assemblies[mol_id] = things.Assembly(id=mol_id)\n\n        if len(str(gb_record.seq)) > 0:\n            seqs_pending_writes = True\n            assemblies[mol_id].residues = str(gb_record.seq)\n            assemblies[mol_id].length = len(str(gb_record.seq))\n\n        current_assembly = assemblies[mol_id]\n            \n        # each feat is a SeqFeature object\n        for feat in gb_record.features:\n            #print(feat)\n            fmin = int(feat.location.start)\n            fmax = int(feat.location.end)\n\n            if feat.location.strand == 1:\n                strand = '+'\n            elif feat.location.strand == -1:\n                strand = '-'\n            else:\n                raise Exception(\"ERROR: unstranded feature encountered: {0}\".format(feat))\n\n            #print(\"{0} located at {1}-{2} strand:{3}\".format( locus_tag, fmin, fmax, strand ) )\n            if feat.type == 'source':\n                continue\n            \n            if feat.type == 'gene':\n                # print the previous gene (if there is one)\n                if current_gene is not None:\n                    gene.print_as(fh=ofh, source='GenBank', format='gff3')\n                \n                locus_tag = feat.qualifiers['locus_tag'][0]\n                gene = things.Gene(id=locus_tag, locus_tag=locus_tag)\n                gene.locate_on( target=current_assembly, fmin=fmin, fmax=fmax, strand=strand )\n                current_gene = gene\n                current_RNA = None\n\n            elif feat.type == 'mRNA':\n                locus_tag = feat.qualifiers['locus_tag'][0]\n                rna_count_by_gene[locus_tag] += 1\n                feat_id = \"{0}.mRNA.{1}\".format( locus_tag, rna_count_by_gene[locus_tag] )\n                \n                mRNA = things.mRNA(id=feat_id, parent=current_gene, locus_tag=locus_tag)\n                mRNA.locate_on( target=current_assembly, fmin=fmin, fmax=fmax, strand=strand )\n                gene.add_mRNA(mRNA)\n                current_RNA = mRNA\n\n                if feat_id in exon_count_by_RNA:\n                    raise Exception( \"ERROR: two different RNAs found with same ID: {0}\".format(feat_id) )\n                else:\n                    exon_count_by_RNA[feat_id] = 0\n\n            elif feat.type == 'tRNA':\n                locus_tag = feat.qualifiers['locus_tag'][0]\n                rna_count_by_gene[locus_tag] += 1\n                feat_id = \"{0}.tRNA.{1}\".format(locus_tag, rna_count_by_gene[locus_tag])\n\n                if 'product' in feat.qualifiers:\n                    anticodon = feat.qualifiers['product'][0]\n                else:\n                    anticodon = None\n                \n                tRNA = things.tRNA(id=feat_id, parent=current_gene, anticodon=anticodon)\n                tRNA.locate_on(target=current_assembly, fmin=fmin, fmax=fmax, strand=strand)\n                gene.add_tRNA(tRNA)\n                current_RNA = tRNA\n\n                if feat_id in exon_count_by_RNA:\n                    raise Exception( \"ERROR: two different RNAs found with same ID: {0}\".format(feat_id) )\n                else:\n                    exon_count_by_RNA[feat_id] = 0\n\n            elif feat.type == 'rRNA':\n                locus_tag = feat.qualifiers['locus_tag'][0]\n                rna_count_by_gene[locus_tag] += 1\n                feat_id = \"{0}.rRNA.{1}\".format(locus_tag, rna_count_by_gene[locus_tag])\n\n                if 'product' in feat.qualifiers:\n                    product = feat.qualifiers['product'][0]\n                else:\n                    product = None\n\n                annot = annotation.FunctionalAnnotation(product_name=product)\n                \n                rRNA = things.rRNA(id=feat_id, parent=current_gene, annotation=annot)\n                rRNA.locate_on( target=current_assembly, fmin=fmin, fmax=fmax, strand=strand )\n                gene.add_rRNA(rRNA)\n                current_RNA = rRNA\n\n                if feat_id in exon_count_by_RNA:\n                    raise Exception( \"ERROR: two different RNAs found with same ID: {0}\".format(feat_id) )\n                else:\n                    exon_count_by_RNA[feat_id] = 0\n\n            elif feat.type == 'CDS':\n                locus_tag = feat.qualifiers['locus_tag'][0]\n                # If processing a prokaryotic GBK, we'll encounter CDS before mRNA, so we have to\n                #  manually make one\n                if current_RNA is None:\n                    feat_id = \"{0}.mRNA.{1}\".format( locus_tag, rna_count_by_gene[locus_tag] )\n                    mRNA = things.mRNA(id=feat_id, parent=current_gene)\n                    mRNA.locate_on( target=current_assembly, fmin=fmin, fmax=fmax, strand=strand )\n                    gene.add_mRNA(mRNA)\n                    current_RNA = mRNA\n\n                    if 'product' in feat.qualifiers:\n                        product = feat.qualifiers['product'][0]\n                    else:\n                        product = None\n\n                    if 'gene' in feat.qualifiers:\n                        gene_symbol = feat.qualifiers['gene'][0]\n                    else:\n                        gene_symbol = None\n                        \n                    annot = annotation.FunctionalAnnotation(product_name=product, gene_symbol=gene_symbol)\n\n                    if 'db_xref' in feat.qualifiers:\n                        for dbxref in feat.qualifiers['db_xref']:\n                            annot.add_dbxref(dbxref)\n                    \n                    polypeptide_id = \"{0}.polypeptide.{1}\".format( locus_tag, rna_count_by_gene[locus_tag] )\n                    polypeptide = things.Polypeptide(id=polypeptide_id, parent=mRNA, annotation=annot)\n                    mRNA.add_polypeptide(polypeptide)\n                \n                exon_count_by_RNA[current_RNA.id] += 1\n                cds_id = \"{0}.CDS.{1}\".format( current_RNA.id, exon_count_by_RNA[current_RNA.id] )\n                current_CDS_phase = 0\n                \n                for loc in feat.location.parts:\n                    subfmin = int(loc.start)\n                    subfmax = int(loc.end)\n                    \n                    CDS = things.CDS(id=cds_id, parent=current_RNA)\n                    CDS.locate_on( target=current_assembly, fmin=subfmin, fmax=subfmax, strand=strand, phase=current_CDS_phase )\n                    current_RNA.add_CDS(CDS)\n\n                    # calculate the starting phase for the next CDS feature (in case there is one)\n                    # 0 + 6 = 0     TTGCAT\n                    # 0 + 7 = 2     TTGCATG\n                    # 1 + 6 = 1     TTGCAT\n                    # 2 + 7 = 1     TTGCATG\n                    # general: 3 - ((length - previous phase) % 3)\n                    current_CDS_phase = 3 - (((subfmax - subfmin) - current_CDS_phase) % 3)\n                    if current_CDS_phase == 3:\n                        current_CDS_phase = 0\n\n                    exon_id = \"{0}.exon.{1}\".format( current_RNA.id, exon_count_by_RNA[current_RNA.id] )\n                    exon = things.Exon(id=exon_id, parent=current_RNA)\n                    exon.locate_on( target=current_assembly, fmin=subfmin, fmax=subfmax, strand=strand )\n                    current_RNA.add_exon(exon)\n                    exon_count_by_RNA[current_RNA.id] += 1\n                \n            else:\n                print(\"WARNING: The following feature was skipped:\\n{0}\".format(feat))\n                features_skipped_count += 1\n\n    # don't forget to do the last gene, if there were any\n    if current_gene is not None:\n        gene.print_as(fh=ofh, source='GenBank', format='gff3')\n\n    if args.fasta is True:\n        if seqs_pending_writes is True:\n            ofh.write(\"##FASTA\\n\")\n            for assembly_id in assemblies:\n                ofh.write(\">{0}\\n\".format(assembly_id))\n                ofh.write(\"{0}\\n\".format(utils.wrapped_fasta(assemblies[assembly_id].residues)))\n\n    if features_skipped_count > 0:\n        print(\"Warning: {0} unsupported feature types were skipped\".format(features_skipped_count))\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sentence_category_predictor(sentence):\n    #split up sentence into words\n    words = sentence.split()\n    #initialize a counter for each category\n    count_drama = 0\n    count_comedy = 0\n    count_thriller = 0\n    #loop over words to get counts of each category\n    for word in words:\n        if word in drama_words:\n            count_drama += 1\n        if word in comedy_words:\n            count_comedy += 1\n        if word in thriller_words:\n            count_thriller += 1\n    #compare counts and return category with highest count\n    max_count = max(count_drama, count_comedy, count_thriller)\n    if max_count == count_drama:\n        return \"drama\"\n    if max_count == count_comedy:\n        return \"comedy\"\n    else:\n        return \"thriller\"\n\n#calling the function\ncategory = sentence_category_predictor(\"This movie is a classic drama.\")\nprint(\"The sentence falls under the category:\", category) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVC\n\n# Read in the data\ndata = pd.read_csv('cars.csv')\n \n# Split into X and y\nX = data.drop('Brand', axis=1).values\ny = data['Brand'].values\n \n# Split into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=0)\n \n# Create the scaler\nsc = StandardScaler()\n \n# Fit and transform the training data\nX_train = sc.fit_transform(X_train)\n \n# Transform the test data\nX_test = sc.transform(X_test)\n \n# Fit the classifier\nclassifier = SVC(kernel='linear')\nclassifier.fit(X_train, y_train)\n \n# Predict the labels\ny_pred = classifier.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import cmd\n\nclass Bot(cmd.Cmd):\n prompt = 'Bot> '\n \n def do_greet(self, args):\n print('Hello! My name is Bot.')\n\ndef do_name(self, args):\n print('My name is Bot.')\n\nif __name__ == '__main__':\n Bot().cmdloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class SomeClass:\n    def __init__(self):\n        pass\n    \n    def method1(self):\n        pass\n\n    def method2(self):\n        pass but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_dict_by_values(dict):\n  return sorted(dict.items(), key=lambda kv: kv[1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\nimport csv\nimport json\nimport requests\nimport numpy as np\nimport sqlite3\n\ncsv_filename = \"testdata/vic_usgs/south_west_stations.csv\"\ndb_filename = \"testdata/vic_usgs/south_west_stations.db\"\n\n# open database\nconn = sqlite3.connect(db_filename)\nc = conn.cursor()\n\n# Create stations table\nc.execute('''CREATE TABLE IF NOT EXISTS stations \n             (id text, short text, name text, lon real, lat real, height real, json text, UNIQUE(id))''')\n\n# Create observations table\nc.execute('''CREATE TABLE IF NOT EXISTS observations \n             (id text, local_date_time text, local_date_time_full text,  \n              apparent_t real, delta_t real, air_temp real, rain_trace text, rel_hum real, wind_dir text, wind_spd_kmh real,\n              UNIQUE(id, local_date_time_full))''')\n\n# Create time point table\nc.execute('''CREATE TABLE IF NOT EXISTS time \n             (id text, local_date_time_full text, UNIQUE(local_date_time_full))''')\n\n# stations\nwith open(csv_filename, 'rb') as csvfile:\n    stations = csv.DictReader(csvfile)\n    for station in stations:\n        id = station[\"ID\"]\n        short = station[\"Short\"]\n        name = station[\"Name\"]\n        lon = float(station[\"Lon\"])\n        lat = float(station[\"Lat\"])\n        height = float(station[\"Height\"])\n        json = station[\"Json\"]\n\n        # Insert a row of data into stations\n        query_str = \"INSERT OR IGNORE INTO stations VALUES ('%s', '%s', '%s', %f, %f, %f, '%s')\" % (id, short, name, lon, lat, height, json)\n        print query_str\n        c.execute( query_str )\n\n        # Update observations table\n        r = requests.get(json)\n        stationdata = r.json()\n        data = stationdata[\"observations\"][\"data\"]\n        nrows = len(data)\n        for i in range(nrows):\n            apparent_t = data[i]['apparent_t']\n            if apparent_t is None:\n                apparent_t = 0\n\n            delta_t = data[i]['delta_t']\n            if delta_t is None:\n                delta_t = 0\n\n            air_temp = data[i]['air_temp']\n            if air_temp is None:\n                air_temp = 0\n\n            rain_trace = data[i]['rain_trace']\n            if rain_trace is None:\n                rain_trace = ''\n\n            rel_hum = data[i]['rel_hum']\n            if rel_hum is None:\n                rel_hum = 0\n\n            wind_spd_kmh = data[i]['wind_spd_kmh']\n            if wind_spd_kmh is None:\n                wind_spd_kmh = 0\n\n            query_str = \"INSERT OR IGNORE INTO observations VALUES ('%s', '%s', '%s', %0.2f, %0.2f, %0.2f, '%s', %0.2f, '%s', %0.2f)\" % \\\n                (id, data[i]['local_date_time'], data[i]['local_date_time_full'], apparent_t, delta_t, \\\n                    air_temp, rain_trace, rel_hum, data[i]['wind_dir'], wind_spd_kmh)\n            print query_str\n            c.execute(query_str)\n\n            query_str = \"INSERT OR IGNORE INTO time VALUES (%s, '%s')\" % (id, data[i]['local_date_time_full'])\n            print query_str\n            c.execute(query_str)\n\n# commit the change\nconn.commit()\n# close database\nconn.close()\n\n\n\n\n# TESTING: print out to check\n\"\"\"\nconn = sqlite3.connect(db_filename)\nc = conn.cursor()\nc.execute(\"SELECT name FROM sqlite_master WHERE type='table';\")\ntables = c.fetchall()\nprint tables\nfor table_name in tables:\n    table_name = table_name[0]\n    table = pd.read_sql_query(\"SELECT * from %s\" % table_name, conn)\n    #print table\n    table.to_csv('testdata/vic_usgs/south_west_stations_' + table_name + '.csv', index_label='index')\n# close database\nconn.close()\n\"\"\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: x = 7\nif x == 7:\n    print(\"The number is 7\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def difference(list1, list2):\n    difference_list = []\n    for num1 in list1:\n        if num1 not in list2:\n            difference_list.append(num1)\n    for num2 in list2:\n        if num2 not in list1:\n            difference_list.append(num2)\n    return difference_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n \nmyJSON = '{\"key\": \"value1\", \n           \"anotherKey\": \"value2\", \n           \"somekey\": \"somevalue\"}'\n \n# parse json\nparsedJSON = json.loads(myJSON)\n \n# access data\nkey = parsedJSON['key']\nvalue = parsedJSON['value']\n \n# print key and value\nprint(\"key: \" + key)\nprint(\"value: \" + value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: lst_strs = []\nfor i in lst:\n    lst_strs.append(str(i)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\n\ndef get_synonyms(sentence):\n    output = []\n    words = nltk.word_tokenize(sentence)\n    for word in words:\n        synonyms = []\n        for syn in wordnet.synsets(word):\n            for l in syn.lemmas():\n                synonyms.append(l.name())\n        output.append(list(set(synonyms)))\n  return output but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def tsp(graph): \n  \n    # Set initial values: \n    best_path = [] \n    best_path_cost = float('Inf') \n  \n    # Iterate through all the possible paths: \n    for i in range(1 << len(graph[0])): \n  \n        # Generate the binary string: \n        path = [] \n        for j in range(len(graph[0])): \n            if (i & (1 << j)) > 0: \n                path.append(j) \n  \n        # Calculate the cost of the path: \n        cost = 0\n        k = 0\n        for j in range(len(path)): \n            if j+1 < len(path): \n                cost += graph[path[j]][path[j+1]] \n            else: \n                cost += graph[path[j]][path[0]] \n  \n        # Check if the cost of the path is less than the \n        # current best path cost: \n        if cost < best_path_cost: \n            best_path_cost = cost \n            best_path = path \n  \n    return best_path, best_path_cost but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///db.sqlite3'\ndb = SQLAlchemy(app)\n\nclass Product(db.Model):\n  id = db.Column(db.Integer, primary_key=True)\n  name = db.Column(db.String(40), nullable=False)\n\n@app.route('/products', methods=['GET'])\ndef get_products():\n  products = Product.query.all()\n  products_list = []\n  for product in products:\n    products_list.append({\n      'id': product.id,\n      'name': product.name\n    })\n  return  jsonify(products_list)\n\nif __name__ == '__main__':\n app.run(host='0.0.0.0', port=5000, debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(s):\n\trev_s = s[::-1]\n\t\n\tif s == rev_s:\n\t\treturn True\n\telse:\n\t\treturn False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n#  Get the HTML from the webpage\npage = requests.get('https://example.com')\nsoup = BeautifulSoup(page.text, 'html.parser')\n\n# Isolate the product information\nproduct_list = soup.find_all('div', class_='product')\n\n# Extract the product information\nproducts = []\nfor product in product_list:\n   name = product.find('div', class_='name').text.strip()\n   price = product.find('div', class_='price').text.strip()\n   description = product.find('div', class_='description').text.strip()\n   products.append({\n      'name': name,\n      'price': price,\n      'description': description\n   })\n\n# Print the product list\nprint(products) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class BankAccount:\n    def __init__(self,name,balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, amount):\n        self.balance += amount\n        return self.balance\n\n    def withdraw(self, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n        else:\n            print(\"Insufficient funds\")\n        return self.balance\n  \n    def checkBalance(self):\n        return self.balance\n\n    def transfer(self, target, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n            target.balance += amount\n        else:\n            print(\"Insufficient funds\")\n        return self.balance but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import fuzzy \n\nfirst_word = 'apple'\nsecond_word = 'apples'\n\n# Create a FuzzySet object\nfuzzy_set = fuzzy.FuzzySet() \n\n# Add strings to the FuzzySet\nfuzzy_set.add(first_word)\nfuzzy_set.add(second_word)\n\n# Calculate similarity between strings\nsimilarity = fuzzy_set.get(first_word)[0][0]\n\nprint(\"The similarity between '{}' and '{}' is {:.2f}\".format(first_word, second_word, similarity)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Friend:\n    def __init__(self, name, age, address):\n        self.name = name\n        self.age = age\n        self.address = address\n\nfriends_list = [] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def primeSum(lower, upper): \n    sum = 0\n    for num in range(lower, upper + 1): \n        if num > 1: \n            for i in range(2, num): \n                if (num % i) == 0: \n                    break \n            else: \n                sum += num \n  \n    return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Define the board\nboard = ['_', '_', '_', \n         '_', '_', '_', \n         '_', '_', '_']\n\n# Define the players\nplayer = 'X'\nai = 'O'\n\n# Define the rules of the game\ndef play_game():\n # Draw initial board\n draw_board(board)\n\n # Choose the player to start (randomly)\n choose_player()\n \n # Start playing the game\n game_state = 'Playing'\n while game_state == 'Playing':\n  if player == 'X':\n   # Ask the player to make a move\n   make_move(player)\n   # Check if anyone has won the game after the player's move\n   game_state = check_game(board, player)\n   # Change the player\n   player = ai\n  else:\n   # Let the AI make a move\n   make_move(ai)\n   # Check if anyone has won the game after the AI's move\n   game_state = check_game(board, ai)\n   # Change the player\n   player = 'X'\n \n\n# Draw the board\ndef draw_board(board):\n print(\"-----------------\")\n for i in range(3):\n  print(\"| \", board[i*3], \" | \", board[i*3 + 1], \" | \", board[i*3 + 2], \" |\")\n  print(\"-----------------\") \n\n# Choose the player to start (randomly)\ndef choose_player():\n global player\n random_num = random.randint(0,1)\n if random_num == 0:\n  player = 'X'\n else:\n  player = 'O'\n\n# Make a move\ndef make_move(player):\n legal_moves = [i for i, x in enumerate(board) if x == '_']\n move = -1\n\n # Player is human\n if player == 'X':\n  while move not in legal_moves:\n     move = int(input(\"Choose your move: (0-9)\"))\n \n # Player is AI\n else:\n  move = random.choice(legal_moves)\n\n # Make the move\n board[move] = player\n\n# Check if anyone has won\ndef check_game(board, player):\n for row in range(3):\n  if board[row*3] == board[row*3 + 1] and board[row*3 + 1] == board[row*3 + 2]:\n   if board[row*3] == player:\n    return 'Player ' + player + ' won the game!'\n\n for col in range(3):\n  if board[col] == board[col + 3] and board[col + 3] == board[col + 6]:\n   if board[col] == player:\n    return 'Player ' + player + ' won the game!'\n\n if board[0] == board[4] and board[4] == board[8]:\n  if board[0] == player:\n   return 'Player ' + player + ' won the game!'\n\n if board[2] == board[4] and board[4] == board[6]:\n  if board[2] == player:\n   return 'Player ' + player + ' won the game!'\n\n # Check if all the squares are filled\n if board.count('_') == 0:\n  return 'Draw!'\n\n return 'Playing'\n\n# Execute the game\nplay_game() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_year(year):\n    leap_year = False\n    if (year % 4) == 0:\n        if (year % 100) == 0:\n            if (year % 400) == 0:\n                leap_year = True\n                do_print = True\n        else:\n            leap_year = True\n            do_print = True\n    else:\n        do_print = True\n\n    if do_print:\n        if leap_year:\n            print(\"{0} is a leap year\".format(year))\n        else:\n            print(\"{0} is not a leap year\".format(year)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee: \n    def __init__(self, name, salary, job_assignment): \n        self.name = name \n        self.salary = salary\n        self.job_assignment = job_assignment\n  \n    # other methods here but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_compound_interest(balance, annual_interest_rate, years):\n    interest = balance * (1 + (annual_interest_rate/100)) ** years\n    return interest\n\n# Test\nbalance = 100\nannual_interest_rate = 4.5\nyears = 5\ncompound_interest = calculate_compound_interest(balance, annual_interest_rate, years)\n\nprint('Your balance after %d years is %.2f.' % (years, compound_interest)) # Your balance after 5 years is 128.77. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\nraw_data = [\n {\n  \"customer_name\": \"John Doe\",\n  \"total_amount_spent\": 2000\n },\n {\n  \"customer_name\": \"Jane Doe\",\n  \"total_amount_spent\": 800\n },\n {\n  \"customer_name\": \"Joe Smith\",\n  \"total_amount_spent\": 200\n }\n]\n\n# calculate total amount spent\ntotal_amount_spent = 0\nfor customer in raw_data:\n total_amount_spent += customer['total_amount_spent']\n\n# generate summary report\nsummary_report = {\n 'total_amount_spent': total_amount_spent,\n 'customers': []\n}\nfor customer in raw_data:\n summary_report['customers'].append({\n  'customer_name': customer['customer_name'],\n  'total_amount_spent': customer['total_amount_spent']\n })\n\n# save summary report to a file\nwith open('summary_report.json', 'w') as outfile:\n json.dump(summary_report, outfile) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def selection_sort(arr):\n    for i in range(0, len(arr)-1):\n        min = i\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[min]:\n                min = j\n        arr[i], arr[min] = arr[min], arr[i] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # get the index of the largest item in a list\ndef get_max_index(arr):\n    max_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] > arr[max_index]:\n            max_index = i\n    return max_index\n\nresult = get_max_index([4, 3, 5, 7, 6])\nprint(result) # 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def create_ordered_dict(list_tuple):\n    ordered_dict = OrderedDict()\n    for key, value in list_tuple:\n        ordered_dict[key] = value\n    return ordered_dict but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insertionSort(array):\n    \"\"\"Algorithm to sort an array using insertion sort.\"\"\"\n    for j in range(1,len(array)):\n        key = array[j]\n        i = j-1\n        while i >= 0 and array[i]> key:\n            array[i+1] = array[i]\n            i-=1\n        array[i+1] = key but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_primes(n):\n primes = []\n for num in range(2, n + 1):\n is_prime = True\n for divisor in range(2, num):\n if num % divisor == 0:\n is_prime = False\n break\n \n if is_prime:\n primes.append(num)\n \n return primes\n \nprimes = get_primes(25)\nprint(primes) # prints [2, 3, 5, 7, 11, 13, 17, 19, 23] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def largestSumNonAdjacent(arr):\n  incl = 0\n  excl = 0\n \n  for i in arr: \n    new_excl = max(incl, excl) \n    incl = excl + i \n    excl = new_excl \n    \n  return max(incl, excl) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printDescending(): \n  for i in range(10,-1,-1): \n    print (i) \n\nprintDescending() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef search(docs, query):\n    # Tokenize the documents\n    tokenized_docs = [tokenize(doc) for doc in docs]\n\n    # Perform pre-processing on the query\n    processed_query = preprocess(query)\n\n    # Calculate the scores for each document based on the query\n    scores = [calculate_score(processed_query, doc) for doc in tokenized_docs]\n\n    # Get the index of the best matching document\n    max_index = scores.index(max(scores))\n    \n    # Return the most relevant document\n    return docs[max_index]\n\ndef tokenize(doc):\n    # Split the document into tokens\n    tokens = re.split('\\W+', doc)\n    # Remove any empty tokens\n    tokens = [token for token in tokens if token != '']\n    return tokens\n\ndef preprocess(query):\n    # Split the query into tokens\n    tokens = re.split('\\W+', query)\n    # Remove any empty tokens\n    tokens = [token for token in tokens if token != '']\n    # Normalize the tokens\n    tokens = [token.lower() for token in tokens]\n    return tokens\n\ndef calculate_score(query, doc):\n    # Calculate the score of a document\n    score = 0\n    for token in query:\n        if token in doc:\n            score += 1\n    return score but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from django.core.management.base import BaseCommand\nfrom users.models import User\nfrom django.core.mail import send_mail\n\nclass Command(BaseCommand):\n def handle(self, *args, **kwargs):\n  users = User.objects.all()\n  for u in users:\n   send_mail('Reminder', 'My reminder message', 'from@example.com',\n   [u.email], fail_silently=False)\n\n# add this line to your crontab\n0 17 * * * python manage.py my_command but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import confusion_matrix\n\n# Load the data\ndata = pd.read_csv('spam_data.csv')\n\n# Create features and target\nX = data['Text']\ny = data['Spam']\n\n# Split into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2)\n\n# Vectorize the text using TF-IDF\nvectorizer = TfidfVectorizer()\nX_train_tfidf = vectorizer.fit_transform(X_train)\nX_test_tfidf = vectorizer.transform(X_test)\n\n# Create and train the model\nmodel = MultinomialNB()\nmodel.fit(X_train_tfidf, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test_tfidf)\n\n# Print confusion matrix\nprint(confusion_matrix(y_test, y_pred)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pymongo\nfrom pymongo import MongoClient\n\n# connect to Mongo\nclient = MongoClient(\"mongodb://localhost:27017/\")\n\n# get a database object\ndb = client['mydb']\n\n# get a collection object\ncollection = db['mycollection']\n\n# create a query object\nquery = { \"text\": { \"$regex\": \"the quick\" } }\n\n# perform a simple query\ndocuments = collection.find(query)\n\n# loop over the documents\nfor doc in documents:\n print(doc) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentences = [\"This product is simply incredible!\"]\n\nanalyzer = SentimentIntensityAnalyzer()\n\nfor sentence in sentences:\n    scores = analyzer.polarity_scores(sentence)\n    print(\"{:-<40} {}\".format(sentence, str(scores))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef password_generator(size=6):\n chars = string.ascii_uppercase + string.ascii_lowercase + string.digits + '!@#$%^&*()'\n return ''.join(random.choice(chars) for x in range(size))\n \npassword = password_generator()\nprint(password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(arr, target_val):\n    \"\"\" This function performs linear search on an array to find the target value \"\"\"\n    for idx in range(len(arr)):\n        if arr[idx] == target_val:\n            return idx\n\n    return -1\n\ntarget_val = 9\narr = [4, 1, 9, 6]\n\ntarget_idx = linear_search(arr, target_val)\nif target_idx == -1:\n    print(\"Target not found!\")\nelse:\n    print(f\"Target found at index {target_idx}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: String url = \"https://www.example.com/search?q=python\";\nString encodedUrl = URLEncoder.encode(url, \"UTF-8\");\nSystem.out.println(encodedUrl);  // https%3A%2F%2Fwww.example.com%2Fsearch%3Fq%3Dpython but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_vowels(string):\n vowels = ['a', 'e', 'i', 'o', 'u']\n return sum(string.count(x) for x in vowels) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef is_valid_email(email):\n    regex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n    return re.search(regex, email) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime \n\nstart_date = datetime.date(2020, 1, 1)\nend_date = datetime.date(2020, 1, 8)\ndelta = end_date - start_date\n\ndate_list = []\nfor i in range(delta.days + 1):\n    day = start_date + datetime.timedelta(days=i)\n    date_list.append(day.strftime('%Y-%m-%d'))\n\nprint(date_list) # Output: ['2020-01-01', '2020-01-02', '2020-01-03', '2020-01-04', '2020-01-05', '2020-01-06', '2020-01-07', '2020-01-08'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: names = [\"John\", \"Anna\", \"David\", \"Bob\", \"Alex\"]\n  \n# sorting the names \nnames.sort() \n  \n# printing the first name in the sorted list \nprint(\"The first name in the sorted list is:\") \nprint(names[0]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def average(nums):\n total = 0\n for num in nums:\n total += num\n return total/len(nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: python -m venv myenv but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_permutations(string):\n    if len(string) == 1:\n        print(string)\n    else:\n        for i, char in enumerate(string):\n            for perm in print_permutations(string[:i] + string[i+1:]):\n                print(char + perm) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def invert_string(string):\n    # Initially create an empty string as result \n    result = ''\n    \n    # Traverse every character of the string \n    for char in string: \n        # If an uppercase character is found \n        if char.isupper(): \n            # Add its lowercase equivalent to the result \n            result += char.lower() \n        # If a lowercase character is found \n        elif char.islower(): \n            # Add its uppercase equivalent to the result \n            result += char.upper() \n        else: \n            # If not an alphabet character \n            result += char\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_rotation(str1, str2):\n if len(str1) != len(str2):\n  return False\n \n concat_str2 = str2 * 2\n \n return str1 in concat_str2\n \nis_rotation(str1, str2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_pairs_with_sum(nums, target):\n    found_pairs = []\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                found_pairs.append([nums[i], nums[j]])\n    return found_pairs but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\nfrom collections import Counter\n\ndef tf_idf(documents):\n  # Split documents into tokens\n  tokens = [tokenize(document) for document in documents]\n  \n  # Get vocabulary\n  vocabulary = get_vocabulary(tokens)\n  \n  # Calculate Term Frequency \n  tf = get_termfrequency(tokens, vocabulary)\n  \n  # Calculate Document Frequency\n  df = get_documentfrequency(tokens, vocabulary)\n  \n  # Calculate Inverse Document Frequency \n  idf = get_inverse_documentfrequency(df, len(documents))\n  \n  # Calculate TF-IDF \n  tf_idf = get_tf_idf(tf, idf)\n  \n  # Return TF-IDF scores\n  return tf_idf\n\ndef tokenize(document):\n  # Tokenize document\n  tokens = re.findall(r\"[\\w']+\", document)\n  \n  # Return tokens\n  return tokens\n\ndef get_vocabulary(tokens):\n  # Get vocabulary\n  vocabulary = set()\n  for token_list in tokens:\n    vocabulary.update(set(token_list))\n  \n  # Return vocabulary\n  return vocabulary\n\ndef get_termfrequency(tokens, vocabulary):\n  # Initialize term frequency\n  tf = {word: [] for word in vocabulary}\n  \n  for token_list in tokens:\n    # Get word frequency\n    counter = Counter(token_list)\n    \n    # Update term frequency\n    for word in vocabulary:\n      tf[word] = tf[word] + [counter[word]]\n    \n  # Return term frequency\n  return tf\n\ndef get_documentfrequency(tokens, vocabulary):\n  # Initialize document frequency\n  df = {word: 0 for word in vocabulary}\n  \n  for token_list in tokens:\n    # Update document frequency\n    for word in vocabulary:\n      if word in token_list:\n        df[word] += 1\n  \n  # Return document frequency\n  return df\n\ndef get_inverse_documentfrequency(df, num_documents):\n  # Initialize Inverse document frequency\n  idf = {word: 0 for word in df.keys()}\n  \n  # Calculate inverse document frequency\n  for word in df.keys():\n    idf[word] = math.log(num_documents / df[word])\n  \n  # Return Inverse Document Frequency\n  return idf\n\ndef get_tf_idf(tf, idf):\n  # Initialize tf-idf\n  tf_idf = {word: [] for word in tf.keys()}\n  \n  # Calculate tf-idf\n  for word in tf.keys():\n    scores = [tf[word][k] * idf[word] for k in range(len(tf[word])) ]\n    tf_idf[word] = scores\n  \n  # Return tf-idf\n  return tf_idf but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insert_at_end(list, item):\n    \"\"\"Inserts an item at the end of a list\"\"\"\n    list.append(item) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n \n# Faster loop implementation\ndef fast_loop(num):\n    result = 1\n    for i in range(int(num)):\n        result += math.sqrt(i*i + 1)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = s.split()\n\nfour_letter_words = []\nfor word in words:\n   if len(word) == 4:\n      four_letter_words.append(word)\n      \nprint(four_letter_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linearSearch(arr, target):\n  for i in range(len(arr)):\n    if arr[i] == target:\n      return i\n  return -1 # target not found but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def function(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[min_idx] > arr[j]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def common_elements(x, y):\n    common = []\n    for i in x:\n        if i in y:\n            common.append(i)\n    return common but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\n\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\nx_train = x_train.reshape(60000, 784)\nx_test = x_test.reshape(10000, 784)\n\nmodel = tf.keras.models.Sequential([\n tf.keras.layers.Dense(256, activation='relu', input_shape=(784,)),\n tf.keras.layers.Dropout(0.2),\n tf.keras.layers.Dense(10, activation='softmax')\n])\nmodel.compile(\n optimizer='adam',\n loss='sparse_categorical_crossentropy',\n metrics=['accuracy']\n)\n\nmodel.fit(x_train, y_train, epochs=5)\nmodel.evaluate(x_test, y_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_inversions(arr): \n  inversion_count = 0  \n  for i in range(len(arr)): \n    for j in range(i + 1, len(arr)): \n        if arr[i] > arr[j]: \n            inversion_count += 1\n  \n  return inversion_count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2,int(n**(1/2))+1):\n        if n%i == 0:\n            return False\n    return True\n\nif is_prime(12):\n    print(\"Prime\")\nelse:\n    print(\"Not Prime\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a python code to optimize an equation for its maximum value.\n\"\"\"\n\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef objective(x):\n    # Objective function\n    return -(2*x[0] + 5*x[1] + 3*x[2] + 6*x[3])\n\nif __name__ == '__main__':\n    # Initial guess\n    x0 = [2,4,1,3]\n\n    # Show initial objective\n    print('Initial Objective: ' + str(objective(x0)))\n\n    #Optimize\n    res = minimize(objective, x0, method='nelder-mead',\n            options={'xtol': 1e-8, 'disp': True})\n\n    #Show final objective\n    print('Final Objective: ' + str(res.fun))\n\n    #Print Optimized values\n    print('Optimized values: ' + str(res.x)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_strings(first, second):\n    return first == second\n\nresult = compare_strings('Apple', 'Orange')\nprint (result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def uniqueVals(arr):\n  uniqueValsArr = []\n  for x in arr:\n    if x not in uniqueValsArr:\n      uniqueValsArr.append(x)\n  return uniqueValsArr\n\nmylist = [1, 2, 4, 1, 5, 7, 8, 2]\nprint(uniqueVals(mylist))\n\n# Output: [1,2,4,5,7,8] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n\nfor x in fibonacci(20):\n    print(x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(0,6):\n    for j in range(0,6):\n        if i != j:\n            print(i,j) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_common_prefix(st):\n    if len(st) == 0: return ''\n \n    first_word = st[0]\n    prefix = ''\n    for i in range(len(first_word)):\n        for w in range(1, len(st)):\n            if i >= len(st[w]) or st[w][i] != first_word[i]:\n                return prefix\n        prefix += first_word[i]\n        \n    return prefix\n \nwords = [\"ABCDE\", \"ABCD\", \"ABCXYZ\", \"ABCDEFG\"]\nprint(longest_common_prefix(words)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printgrid(rows, columns): \n    for i in range(1, rows+1): \n        for j in range(1, columns+1): \n            print(\"*\", end=\" \") \n        print(\"\\r\") \n  \nprintgrid(4, 4) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from Builders import wigile_query\nfrom Builders import kml_builder\n\n\nclass ClassName():\n      #These are the options we will set\n    def __init__(self):\n      # Descriptions that are required!!!\n      self.name = \"Registry Network info corelation\"\n      self.description = \"WIGLE Query your known BSSID\"\n      self.language = \"python\"\n      self.extension = \"py\"\n      self.rating = \"Excellent\"    \n        \n      # options we require user interaction for- format is {Option : [Value, Description]]}\n      self.required_options = {\"bssid\" : ['00:22:55:DF:C8:01', \"Set BSSID or MAC of AP\"],\n                               \"user\" : ['offtest', \"Set Username to WIGLE\"],\n                               \"pass\" : ['83128312', \"Set Password to WIGLE\"]}\n\n    def startx(self):\n      wa = wigile_query.WigleAgent(self.required_options[\"user\"][0], self.required_options[\"pass\"][0])\n      final = wa.get_lat_lng(self.required_options[\"bssid\"][0])\n      print final\n      kml = kml_builder.kml()\n      kml.build(final[\"lat\"], final[\"lng\"], final[\"bssid\"]) #Pass SSID name of network\n      print \"[*] Check output\"\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math \n \nclass Point:\n def __init__(self, x, y):\n self.x = x \n self.y = y \n \n def distance_from_origin(self):\n return math.sqrt(self.x**2 + self.y**2)\n \n pt1 = Point(3, 4)\n print(pt1.distance_from_origin()) # prints 5.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Generate a random 3 X 3 matrix of integers in the range [1, 9].\nmatrix = [[random.randint(1, 9) for _ in range(3)] for _ in range(3)]\n\nfor row in matrix:\n print(row) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_pairs(arr, target): \n    pairs = []\n    i, j = 0, len(arr)-1\n\n    while i < j: \n        sum = arr[i] + arr[j] \n        if sum == target: \n            pairs.append([arr[i], arr[j]])\n            i += 1\n            j -= 1\n          \n        elif sum < target: \n            i += 1\n          \n        else: \n            j -= 1\n\n    return pairs\n\narr = [4, 5, 6, 7, 8] \ntarget = 10\nresult = find_pairs(arr, target)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def overlap_count(a1, a2):\n    a1_set = set(a1)\n    a2_set = set(a2)\n    overlap_set = a1_set.intersection(a2_set)\n    return len(overlap_set)\n\narr1 = [1, 2, 2, 4]\narr2 = [2, 3, 4]\n\nprint(overlap_count(arr1, arr2)) # 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def words_dict(string):\n    \"\"\"This function returns a dictionary with words as keys and their count as values.\"\"\"\n    words = string.split()\n    word_dict = {}\n    \n    for word in words:\n        if word in word_dict:\n            word_dict[word] += 1\n        else: \n            word_dict[word] = 1\n    \n    return word_dict but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from bs4 import BeautifulSoup\nimport requests\n\nteamname = 'Manchester United'\n\nurl = f'https://www.espn.com/soccer/team/_/name/{teamname}'\nhtml = requests.get(url, headers={'User-Agent':'Chrome/85.0.4183.102'}).text\nsoup = BeautifulSoup(html, 'html.parser')\n\nfor tag in soup.find_all('div', {'class': 'stat-cell'}):\n    if tag.find('span') and tag.find('span').string:\n        statname = tag.find('span').string.strip()\n        statnum = tag.find('p').string.strip()\n        print(f'{statname}: {statnum}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\ndata = [2, 3, 4, 6, 7, 8, 9, 10]\n\nplt.hist(data)\nplt.title('Histogram of Wind Direction')\nplt.xlabel('Direction (degrees)')\nplt.ylabel('Frequency')\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Point:\n def __init__(self, x, y):\n     self.x = x\n     self.y = y\n\n# create a Point object\np = Point(2, 4)\n\nprint(p.x)\nprint(p.y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Animal:\n def __init__(self, name, age):\n  self.name = name\n  self.age = age\n \n def speak(self):\n  print(\"My name is\", self.name) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classifyArray(arr): \n  \n    if len(arr) == 0: \n        return [[], []] \n      \n    even, odd = [], [] \n    for num in arr:  \n        if num % 2 == 0: \n            even.append(num)\n        else: \n            odd.append(num)\n      \n    return[even, odd] \n      \n# Driver code \narr = [2, 3, 5, 4, 1] \n[even, odd] = classifyArray(arr) \n  \nprint(\"Even elements of the array:\") \nprint(*even) \nprint(\"Odd elements of the array:\") \nprint(*odd) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef build_bst(lst):\n    root = Node(lst[0])\n    \n    for num in lst[1:]:\n        cur = root\n        while cur:\n            if num < cur.val:\n                if cur.left:\n                    cur = cur.left\n                else:\n                    cur.left = Node(num)\n                    break\n            else:\n                if cur.right:\n                    cur = cur.right\n                else:\n                    cur.right = Node(num)\n                    break\n    return root but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_words_length_n(letters, n):\n    words = set()\n    for combo in itertools.combinations_with_replacement(letters, n):\n        for perm in itertools.permutations(combo):\n            words.add(\"\".join(perm))\n    return words\n\nwords = find_words_length_n([\"a\",\"b\",\"c\"], 2)\nprint(words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def evaluate_expression(expression):\n    try:\n        result = eval(expression)\n        print(result)\n    except:\n        print(\"Error: invalid expression\")\n\nevaluate_expression(\"1+1\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def diff_char(str1, str2):\n count = 0\n for i in range(len(str1)):\n if str1[i] != str2[i]:\n count += 1\n return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef sentiment_analysis(text):\n # Download language models\n nltk.download('vader_lexicon')\n\n # Initialize a sentiment analyzer\n sid = SentimentIntensityAnalyzer()\n\n # Calculate the sentiment score\n sentiment = sid.polarity_scores(text)\n\n # Return the sentiment score\n return sentiment but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nClassify emails into spam or ham using Naive Bayes\n\"\"\"\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# read the emails\ndf = pd.read_csv('emails.csv')\n\n# prepare training and test sets\ndf_train = df[:int(df.shape[0]*0.8)]\ndf_test = df[int(df.shape[0]*0.8):]\n\n# instantiate tf-idf vectorizers\ntfidf_vectorizer = TfidfVectorizer() \n\n# tf-idf vectorize the texts\nX_train = tfidf_vectorizer.fit_transform(df_train.text)\nX_test = tfidf_vectorizer.transform(df_test.text)\n\n# create Naive Bayes classifier\nclf = MultinomialNB().fit(X_train, df_train.label)\n\n# predict the labels for the test set\npredictions = clf.predict(X_test)\n\n# calculate the accuracy\naccuracy = np.mean(predictions == df_test.label)\nprint('Accuracy: {}'.format(accuracy)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef maze_generator(n): \n maze = [[0 for x in range(n)] for y in range(n)] \n  \n # Fill the walls and open paths \n for i in range(n): \n  for j in range(n): \n   if i == 0 and j == 0: \n    maze[i][j] = 0\n   elif i == 0 and j == n-1: \n    maze[i][j] = 0\n   elif i == n-1 and j == 0: \n    maze[i][j] = 0\n   elif i == n-1 and j == n-1: \n    maze[i][j] = 0\n   else: \n    maze[i][j] = random.randint(0, 1) \n      \n # Print the maze \n for i in range(n): \n  for j in range(n): \n   print(maze[i][j], end = ' ') \n  print() \n \nmaze_generator(5) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tweepy\nfrom tweepy import OAuthHandler\n\nconsumer_key = '<your-consumer-key-here>'\nconsumer_secret = '<your-consumer-secret-here>'\naccess_token = '<your-access-token-here>'\naccess_token_secret = '<your-access-token-secret-here>'\n\nauth = OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token,access_token_secret)\n\napi = tweepy.API(auth, wait_on_rate_limit=True, wait_on_rate_limit_notify=True)\n\ndef get_tweets(hashtag):\n    tweets = []\n    for tweet in tweepy.Cursor(api.search, q=hashtag, lang='en').items():\n        tweets.append(tweet.text)\n    return tweets\n\ntweets = get_tweets(\"#python\")\nprint(tweets) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Documentation but is not the same. just give one example and only return the code."}
