{"prompt": "make some code that functions the same as the following code: def search_substring(text, substring):\n    if substring in text:\n        return True\n    else:\n        return False\n\nresult = search_substring(text, substring)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Lambda expression to return the square of the given number \nsquare = lambda x: x * x \n  \n# calling the lambda expression  \nresult = square(5) \n  \n#Printing the result \nprint(result) \n\n# Output: 25 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class CustomDataStructure:\n    def __init__(self):\n        self.data = []\n \n    def appendData(self, val):\n        self.data.append(val)\n \n    def getData(self):\n        return self.data\n \n    def removeData(self, index):\n        self.data.pop(index) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bin_search_tree(numbers): \n    if len(numbers) <= 1: \n        return 1\n  \n    num_of_combinations = 0\n  \n    for i in range(len(numbers)): \n        left_subtree = bin_search_tree(numbers[:i]) \n        right_subtree = bin_search_tree(numbers[i+1:]) \n        num_of_combinations += left_subtree * right_subtree \n  \n    return num_of_combinations but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import necessary packages\nimport pandas as pd \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Read the data\ndata = pd.read_csv(input.csv)\n\n# Extract the features and labels from the data\nX = data.drop('Survived', axis=1)\ny = data['Survived']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Initialize the Random Forest model\nclf = RandomForestClassifier(n_estimators=1000, max_depth=10, random_state=0)\n\n# Train the model\nclf.fit(X_train, y_train)\n\n# Evaluate the model\naccuracy = clf.score(X_test, y_test)\nprint('Model accuracy:', accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import the necessary libraries\nimport webbrowser\nimport sqlite3\nfrom flask import Flask, render_template, request\n\n# Create the app object\napp = Flask(__name__)\n\n# Create the database\nconn = sqlite3.connect('data.db')\ncurs = conn.cursor()\n\ncurs.execute(\"CREATE TABLE IF NOT EXISTS data (name TEXT, age INTEGER)\")\nconn.commit()\n\n# Create the main route\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    if request.method == \"GET\":\n        return render_template(\"index.html\")\n    else:\n        name = request.form.get(\"name\")\n        age = request.form.get(\"age\")\n        curs.execute(\"INSERT INTO data VALUES (?, ?)\", (name, age))\n        conn.commit()\n        return render_template(\"success.html\")\n\n# Run the app\nif __name__ == \"__main__\":\n    webbrowser.open(\"http://localhost:5000\")\n    app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import itertools\n\nletters = [\"a\", \"b\", \"t\"]\nwords = []\n\n# we use itertool's permutations to generate all combinations of letters\nResult = itertools.permutations(letters, 3)\n\n# we iterate through the output of itertool's permutation\n# and append it to result list of words\nfor ele in list(Result):\n    words.append(''.join(ele))\n\n# printing the result\nprint(words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: board = [[0, 0, 0],\n         [0, 0, 0],\n         [0, 0, 0]]\n\ndef start_game():\n    # Display the UI of the game\n    print(\"Let the game begin!\\n\")\n    print(\"1 | 2 | 3\")\n    print(\"---------\")\n    print(\"4 | 5 | 6\")\n    print(\"---------\")\n    print(\"7 | 8 | 9\")\n    print(\"\")\n\n\ndef draw_board(board):\n    print(\" \"+board[0][0]+\" | \"+board[0][1]+\" | \"+board[0][2]+\" \")\n    print(\" \"+\"---------\")\n    print(\" \"+board[1][0]+\" | \"+board[1][1]+\" | \"+board[1][2]+\" \")\n    print(\" \"+\"---------\")\n    print(\" \"+board[2][0]+\" | \"+board[2][1]+\" | \"+board[2][2]+\" \") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def days_to_seconds(days):\n    return days * 86400\n\nresult = days_to_seconds(3)\nprint(result) # Outputs: 259200 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Display():\n  def __init__(self, message):\n    self.message = message\n    \n  def display_message(self):\n    print(self.message)\n    \nmessage = input('Enter a message: ')\ndisplay_obj = Display(message)\ndisplay_obj.display_message() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import findspark\nfindspark.init()\n\nfrom pyspark import SparkContext\n\nsc = SparkContext('local', 'fibonacci-generator')\n\ndef generate_fibonacci():\n rdd = sc.parallelize([0,1])\n for _ in range(100):\n rdd = rdd.flatMap(lambda x: [x, x + rdd.takeSample(withReplacement=True)[0]])\n return rdd.collect()\n\nresult = generate_fibonacci()\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Initializing list \nl = [4, 8, 12, 17, 30] \n\n# Function to calculate sum \ndef sum_multiples(l): \n\tsum = 0\n\t\n\t# iterating over list \n\tfor num in l: \n\t\t\n\t\t# checking for multiples of 8 \n\t\tif num % 8 == 0: \n\t\t\tsum += num \n\t\t\t\n\treturn sum\n\n# Driver code \nprint(sum_multiples(l)) \n# Output: 20 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sumOdd(lst):\n    sum = 0\n    for ele in lst:\n        if ele%2 == 1:\n            sum+=ele\n    return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(nums):\n    max_val = nums[0]\n    for num in nums[1:]:\n        if num > max_val:\n            max_val = num\n    return max_val but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport bs4\n\nurl = 'https://www.wunderground.com/history/airport/KMYF/2017/12/20/DailyHistory.html?req_city=San+Diego&req_state=CA&req_statename=California'\nres = requests.get(url)\nsoup = bs4.BeautifulSoup(res.text, \"lxml\")\n\ntable = soup.find('table', { 'id': 'historyTable'})\n\ntemps = table.find_all('span', {'class': 'wx-value'})\n\nfor temp in temps:\n    print(temp.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def slope(point1, point2):\n    x1, y1 = point1\n    x2, y2 = point2\n   \n    if x2 - x1 == 0:\n        return None\n    else:\n        return (y2 - y1) / (x2 - x1)\n\npoint1 = (1, 0)\npoint2 = (0, 1)\nslope = slope(point1, point2)\nprint(slope) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1,11):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \nfrom sklearn.linear_model import LinearRegression \n\n# Input data\nX = np.array([1000]).reshape(-1, 1)\ny = np.array([78])\n\n# Creating the model\nmodel = LinearRegression().fit(X, y) \n\nprint(\"Predicted grade: \", model.predict([[1000]])[0]) # Output: 78.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to reverse each word\ndef word_reverse(s) : \n    # Splitting each word\n    words = s.split() \n    rev_str = \"\" \n    for word in words: \n        # Reversing each word\n        rev_str += word[::-1] + \" \"\n    return rev_str but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def minimize_meeting_duration(meetings):\n  # sort the meetings by start time\n  meetings.sort(key=lambda x: x[0])\n\n  # initialize cached_end_time as the end time of first meeting\n  cached_end_time = meetings[0][1]\n\n  # initialize the result\n  schedule = [meetings[0]]\n\n  # iterate through all the meetings\n  for m in meetings[1:]:\n    # if the current meeting starts after the cached_end_time\n    # then this meeting can be added to the schedule\n    if m[0] > cached_end_time:\n      schedule.append(m)\n      cached_end_time = m[1]\n\n  # return the result\n  return schedule but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import library\nimport requests\nfrom bs4 import BeautifulSoup\n \n# create a variable with the target URL\nurl = \"https://www.example.com\"\n \n# use requests library to get website content\nr = requests.get(url) \n \n# parse html content\nsoup = BeautifulSoup(r.content, 'html.parser') \n \n# store all the data in a list\ndata_list = []\n \n# extract data\nfor div in soup.find_all('div'):\n    data = div.find_all('p')\n    for row in data:\n        data_list.append(row.text.strip())\n \n# print the data \nprint(data_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def word_frequency(text):\n    # Create a dictionary to store word frequencies\n    freq = {}\n\n    # Split the text into words\n    words = text.split()\n\n    # Iterate through every word and add it to the dictionary\n    for word in words:\n        if word in freq:\n            freq[word] += 1\n        else:\n            freq[word] = 1\n\n    # Return the dictionary\n    return freq but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow import keras\n\n# Load data from CSV\ndf = pd.read_csv('data.csv')\n\n# Extract data\nX = df.iloc[:, 0:-1].values\ny = df.iloc[:, -1:].values\n\n# Build ANN model\nmodel = keras.Sequential()\nmodel.add(keras.layers.Dense(units = 4, activation = 'relu', input_dim = X.shape[1]))\nmodel.add(keras.layers.Dense(units = 4, activation = 'relu'))\nmodel.add(keras.layers.Dense(units = 1))\nmodel.compile(optimizer = 'Adam', loss = 'mean_squared_error')\n\n# Train the model\nmodel.fit(X, y, batch_size = 32, epochs = 100) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def even_number_generator():\n    num = 0\n    while True:\n        if num % 2 == 0:\n            yield num\n        num += 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\n# Regex to match HTML tags\npattern = re.compile('<[^>]+>')\n\n# Input HTML data\nhtml = \"\"\"\n<html> \n <head> \n <title>Parse HTML</title> \n </head> \n <body> \n <h1>Header</h1> \n <p>This is a paragraph</p> \n <h2>Sub-header</h2> \n </body> \n  </html>\n\"\"\"\n\n# Match and print all HTML tags\nprint('HTML Tags:')\nfor tag in re.findall(pattern, html):\n  print(tag) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_dict_by_key(dict_list, key):\n    return sorted(dict_list, key=lambda k: k[key]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to print multiplication table\ndef print_multiplication_table(n):\n    # For loop to iterate multiplies from 1 to 12\n    for i in range(1,13):\n        print(f\"{n} * {i} = {n*i}\")\n \n# Iterate through the numbers from 1 to 12\nfor n in range(1,13):\n    # print the multiplication tables for each of the numbers from 1 to 12\n    print_multiplication_table(n)\n    print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask\nfrom flask_restplus import Api, Resource, reqparse\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\napp = Flask(name)\napi = Api(app)\nparser = reqparse.RequestParser()\n\n\n@api.route('/date-time')\nclass DateTime(Resource):\n    @api.doc(security='basicAuth')\n    def get(self):\n        if not api.user.verified:\n            api.abort(401)\n        else:\n            import datetime\n            return datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\nif name == 'main':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import multiprocessing as mp\nfrom multiprocessing import Pool\n\n# Main function to process data\ndef process_data(data):\n    # Perform complex processing on data\n    processed_data = complex_processing(data)\n    return process_data \n\n# Function to be called in parallel\ndef parallel_fn(data):\n    # Split data\n    data_slice = np.array_split(data, num_procs)\n    # Define a pool of process\n    pool = Pool(processes=num_procs)\n    # Execute process_data in parallel\n    processed_data = pool.map(process_data, data_slice)\n    # Join list of results\n    results = np.concatenate(processed_data)\n    # Close the pool\n    pool.close()\n    # Return results\n    return results but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate(x,y,op):\n if op == \"+\":\n  return x+y\n elif op == \"-\":\n  return x-y\n elif op == \"*\":\n  return x*y\n elif op == \"/\":\n  return x/y\n else:\n  return \"Invalid operator\"\n\n# Function call\nprint(calculate(4,8,\"*\"))\n# Output: 32 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class StringProcessor:\n    def __init__(self, s):\n        self.string = s\n        self.num_words = len(s.split())\n        self.uppercase = s.upper()\n        \n    def reverse_string(self):\n        return self.string[::-1]\n        \n    def remove_whitespace(self):\n        return self.string.replace(' ', '') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_value(arr, val):\n\tfor i in arr:\n\t\tif i == val:\n\t\t\treturn True \n\treturn False \n\narr = [2, 3, 7, 8]\nval = 7\n\nif(check_value(arr, val)):\n\tprint(\"Array contains number \" + str(val))\nelse:\n\tprint(\"Array does not contain number \" + str(val)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_webpage(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    return soup but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_multiple_items(data, key, items):\n  data[key] = items\n  \n  return data but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Vector3:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n        \n    def __str__(self):\n        return \"x = {}, y = {}, z = {}\".format(self.x, self.y, self.z)\n        \n    def __add__(self, vector): \n        x = self.x + vector.x \n        y = self.y + vector.y \n        z = self.z + vector.z\n        return Vector3(x, y, z) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def first_index(str, keyword):\n    for i in range(len(str)):\n        if str[i] == keyword:\n            return i\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_largest_element_index(nums):\n        largest = nums[0]\n        largest_element_index = 0\n        for i in range(0, len(nums)):\n            if nums[i] > largest:\n                largest = nums[i]\n                largest_element_index = i\n        return largest_element_index but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def avg_score(scores):\n    \"\"\"\n    Calculate the average score of a student over the course of a semester\n    \"\"\"\n \n    avg = 0\n    for score in scores:\n        avg += score\n    return round(avg/len(scores),2)\n    \nif __name__ == '__main__':\n    scores = [10,8,9,6,7]\n    print(avg_score(scores)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = list(range(1, 11))\nprint(my_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\ndata_set = [\n    [1,2,3,4,5],\n    [6,7,8,9,10],\n    [11,12,13,14,15]\n]\n\nfig, ax = plt.subplots()\nax.plot(data_set)\nax.legend([\"Group 1\", \"Group 2\", \"Group 3\"])\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import itertools\n\ncharacters = 'abc'\nwords = [''.join(word) for word in itertools.product(characters, repeat=3)]\n\nprint (words)\n\n# output: ['aaa', 'aab', 'aac', 'aba', 'abb', 'abc', 'aca', 'acb', 'acc', 'baa', 'bab', 'bac', 'bba', 'bbb', 'bbc', 'bca', 'bcb', 'bcc', 'caa', 'cab', 'cac', 'cba', 'cbb', 'cbc', 'cca', 'ccb', 'ccc'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n# Initializing the sentiment analyser\nsia = SentimentIntensityAnalyzer()\n\n# Defining the sentiment analysis function\ndef sentiment_analyzer(text):\n    score = sia.polarity_scores(text)\n    neg = score['neg']\n    pos = score['pos']\n    if pos > neg:\n        print('Positive sentiment')\n    elif pos < neg:\n        print('Negative sentiment')\n    else:\n        print('Neutral sentiment')\n\n# Testing the sentiment analysis function\nsentiment_analyzer(\"That movie was great!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_array(arr):\n    for i in range(len(arr)//2):\n        arr[i], arr[len(arr)-i-1] = arr[len(arr)-i-1], arr[i] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import the necessary packages \nimport requests \n  \n# Make an API call and store the response \nurl = 'https://example.com/'\nr = requests.get(url) \n  \n# Extract the content of the response \nhtml_content = r.content \n  \n# Print the response \nprint(html_content) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class User:\n    def __init__(self, username, password, email):\n        self.username = username\n        self.password = password\n        self.email = email but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Dog:\n  # Initialize the attributes \n  def __init__(self, breed='', weight=0, age=0):\n    self.breed = breed\n    self.weight = weight\n    self.age = age\n    \n  # Print the object values\n  def __str__(self):\n    return f\"{self.breed}, {self.weight}, {self.age}\"\n\n# Creating a new object\nmy_dog = Dog(\"Labrador\", 30, 5)\nprint(my_dog) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list_of_dicts(list_of_dicts, key):\n    sorted_list = sorted(list_of_dicts, key=lambda i: i[key])\n    return sorted_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: input_list = [1, 2, 3, 4]\noutput_dict = {}\n\nfor item in input_list:\n  output_dict[item] = None\n\nprint(output_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_duplicates(data):\n    seen = set()\n    duplicates = []\n    \n    for item in data:\n        if item not in seen:\n            seen.add(item)\n        else:\n            duplicates.append(item)\n    return duplicates but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_long_words(words):\n filtered_words = []\n \n for word in words:\n  if len(word) > 3:\n   filtered_words.append(word)\n   \n return filtered_words\n \nwords = ['Cat', 'Dog', 'Bird', 'Fish', 'Turtle']\nlong_words = filter_long_words(words)\n \nprint(long_words) # Output: ['Bird', 'Fish', 'Turtle'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(arr): \n    n = len(arr) \n    for i in range(n-1):\n        for j in range(0, n-i-1):  \n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\narr = [2, 3, 4, 1, 5]\narr = bubble_sort(arr)\nprint(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_recurrence(sequence, initial_condition): \n if len(sequence) <= 1: \n return initial_condition \n \n a_i = sequence[-1] \n a_i_1 = sequence[-2] \n recurrence = a_i + initial_condition - a_i_1 \n return recurrence\n\nresult = generate_recurrence([2, 4, 6, 8], 2)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for item in [1, 2, 3, 4]:\n    print(item) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create a new list with the elements of both lists \nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\n# Multipliy each element of 2 lists and store in the 3rd list \nlist3 = [] \nfor x, y in zip(list1, list2): \n    list3.append(x*y) \n\n# Print the result \nprint(list3)\n\n# Output \n[4, 10, 18] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_of_three(a, b, c):\n  if (a > b) and (a > c):\n    greatest = a\n  elif (b > a) and (b > c):\n    greatest = b\n  else:\n    greatest = c\n  return greatest\n\nprint(\"Max is: \", max_of_three(4, 7, 6)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn import cluster\nimport pandas as pd\n\ndf = pd.read_csv('example.csv')\nX = df[['age', 'height']]\n\n# Create a k-means clustering model using 2 clusters\nkmeans = cluster.KMeans(n_clusters=2)\n# Fit the model with the data\nkmeans.fit(X)\n# Get the labels of the clusters\nlabels = kmeans.labels_\n# Print the clusters\nfor i in range(2):\n    print('Cluster {}:'.format(i))\n    print(df[labels==i])\n    print()\n# Visualize the clusters\nplt.scatter(df['age'], df['height'], c=labels)\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maxVal(arr):\n    maxVal = -float(\"inf\")\n    for num in arr:\n        if num > maxVal:\n            maxVal = num\n    return maxVal\n\nmaxVal([2, 4, 7, 6]) #returns 7 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Rectangle:\n    \n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n        \n    def get_area(self):\n        return self.length * self.width\n    \n    def get_perimeter(self):\n        return 2*(self.length + self.width) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def getKthLargest(arr, k): \n    arr.sort() \n  \n    # Return the k'th largest element\n    return arr[len(arr)-k] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nimport re\n\n# define a function to tokenize words\ndef tokenize_words(words):\n tokens = nltk.word_tokenize(words)\n return tokens\n\n# define a function to remove special characters\ndef remove_special_characters(text):\n tokens = tokenize_words(text)\n pattern = re.compile('[{}]'.format(re.escape(',.!?@#$%^&*()')))\n filtered_tokens = filter(None, [pattern.sub('', token) for token in tokens])\n return ' '.join(filtered_tokens)\n\n# define a function to create a chat response\ndef generate_response(user_input):\n response = ''\n # preprocess the user input\n user_input = remove_special_characters(user_input.lower())\n \n # code for your bot goes here\n \n return response but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.feature_extraction.text import TfidfVectorizer\n\n# documents to be indexed\ndocuments = ['New running shoes perfect for running',\n 'The best fitting shoes for running',\n 'Running is a great way to exercise']\n\n# query\nquery = 'running shoes'\n\n# vectorizer object\nvectorizer = TfidfVectorizer()\n\n# transform documents\nX = vectorizer.fit_transform(documents)\n\n# query vector\nquery_vector = vectorizer.transform([query])\n\n# compute similarity score between query and documents\nscores = np.dot(query_vector, X.T).toarray()\n\n# get most relevant document\nrelevant_document = documents[np.argmax(scores)]\n\nprint(relevant_document) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def break_string(string):\n string = string.lower()\n words = string.split(\" \")\n return words but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: lst=[x**2 for x in range(1,6)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_words(words):\n filtered_words = []\n for word in words:\n if len(word)<=5:\n filtered_words.append(word)\n return filtered_words\n\nwords = [\"hello\", \"world\", \"computer\"]\nprint(filter_words(words))\n# Output: ['hello', 'world'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\nimport pydot\nfrom collections import defaultdict \nfrom HuffmanTree import HuffmanTree\n\n# create a Huffman tree\nsymbols = ['A', 'B', 'C', 'D', 'E', 'F']\nfrequences = [45, 13, 12, 16, 9, 5]\nfrequency = Counter(zip(symbols, frequencies))\nht = HuffmanTree(frequency)\n\n# draw the tree\nnodes = defaultdict(list)\nedges = []\nfor node in ht:\n    label =  '%s\\n%s' % (node.character, node.frequency)\n    nodes[node.parent].append((node.identifier, label))\n    edges.append((node.parent, node.identifier))\n\ng = pydot.Dot(graph_type='graph')\nfor k, v in nodes.items():\n    for i, j in v:\n        n = pydot.Node(i, label=j)\n        g.add_node(n)\nfor e in edges:\n    g.add_edge(pydot.Edge(e[0], e[1]))\ng.write_png('HuffmanTree.png') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insertion_sort(nums):\n for i in range(len(nums)):\n current_num = nums[i]\n position = i\n\n while position > 0 and nums[position - 1] > current_num:\n nums[position] = nums[position - 1]\n position -= 1\n\n nums[position] = current_num\n\n return nums\n\nnums = [5, 3, 4, 6, 1, 2]\nprint(insertion_sort(nums))\n# Output: [1, 2, 3, 4, 5, 6] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_min(list):  \n    max_element = 0\n    min_element = list[0] \n     \n    for num in list:\n        if num > max_element: \n            max_element = num \n        if num < min_element:\n            min_element = num \n     \n    print(\"Max element is: \" + str(max_element)) \n    print(\"Min element is: \" + str(min_element)) \n     \n#test list \nlist = [23, 12, 56, 72, 9, 10]\nmax_min(list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndata = json.loads('''\n{\n   \"name\": \"John Doe\",\n   \"age\": 23,\n   \"address\": {\n      \"street\": \"123 Main Street\",\n      \"city\": \"Berkeley\",\n      \"state\": \"CA\"\n   }\n}\n''')\n\nname = data['name']\nage = data['age']\nstreet = data['address']['street']\ncity = data['address']['city']\nstate = data['address']['state']\n\nprint(name)\nprint(age)\nprint(street)\nprint(city)\nprint(state) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_whitespace(x):\n   return x.replace(\" \", \"\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_array_with_random_numbers(n, seed):\n random.seed(seed)\n return [random.randint(0, 100) for _ in range(n)]\n\nn = 10\nseed = 42\narray = generate_array_with_random_numbers(n, seed)\n\nprint(array)\n# [19, 25, 44, 36, 33, 20, 72, 15, 85, 37] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nPredict stock price movements using a Python program\n\"\"\"\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, LSTM\n\ndef get_data(ticker):\n    # Get the historical data for the given ticker\n    df = pd.read_csv('data/{}.csv'.format(ticker))\n    \n    # Format the data\n    df = df.drop(['Adj Close'], axis=1)\n    df = df.rename(columns={'Close': 'y'})\n    df['Date'] = pd.to_datetime(df['Date'])\n    df.set_index('Date', inplace=True)\n    df = df.sort_index()\n    \n    return df\n\ndef preprocess_data(df, window_size=30):\n    # Scale the data\n    scaler = MinMaxScaler()\n    df = scaler.fit_transform(df)\n    \n    # Create windows of size window_size\n    X, y = [], []\n    for i in range(len(df) - window_size - 1):\n        X.append(df[i : (i + window_size)])\n        y.append(df[i + window_size + 1])\n    \n    X, y = np.array(X), np.array(y)\n    X_train, X_test, y_train, y_test = X[: - int(X.shape[0] * 0.2)], X[-int(X.shape[0] * 0.2):], y[: - int(X.shape[0] * 0.2)], y[-int(X.shape[0] * 0.2):]\n    \n    return X_train, X_test, y_train, y_test\n\ndef create_model(input_dim):\n    # Create a model\n    model = Sequential()\n    model.add(LSTM(64, input_shape=(input_dim, 1)))\n    model.add(Dense(64, activation='relu'))\n    model.add(Dense(1))\n    model.compile(loss='mse', optimizer='adam')\n    return model\n\ndef train_model(model, X_train, y_train):\n    # Fit the model\n    model.fit(X_train, y_train, epochs=20, batch_size=32, validation_split=0.1, shuffle=False)\n    \n    return model\n\ndef predict(model, X_test):\n    # Make predictions\n    predictions = model.predict(X_test)\n    predictions = scaler.inverse_transform(predictions)\n    \n    return predictions\n\ndef main(ticker):\n    # Get the data\n    df = get_data(ticker)\n    \n    # Preprocess the data\n    X_train, X_test, y_train, y_test = preprocess_data(df)\n    \n    # Create a model\n    model = create_model(X_train.shape[1])\n    \n    # Train the model\n    model = train_model(model, X_train, y_train)\n    \n    # Make predictions\n    predictions = predict(model, X_test)\n    \n    return predictions\n\nif __name__ == '__main__':\n    predictions = main('AAPL') # Replace 'AAPL' with your stock ticker\n    print(predictions) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = \"Python\"\n\nprint(string[:3]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def time24(a): \n\n    if len(a) == 4: \n        ampm = 'AM'\n        time = a \n    elif len(a) == 7: \n        ampm = a[5:7] \n        time = a[0:5]\n    time_split = time.split(':') \n\n    if ampm == 'PM': \n        if time_split[0] != '12': \n            time_split[0] = str(int(time_split[0])+ 12) \n  \n    elif ampm == 'AM': \n        if time_split[0] == '12': \n            time_split[0] = '00' \n          \n    time24 = ':'.join(time_split) \n  \n    return time24 \n  \n# Driver Code \na = '2:30:00PM'\nprint(time24(a)) \n  \n# Output: \n# 14:30:00 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Dog:\n    def __init__(self, name):\n        self.name = name\n\n    def get_name(self):\n        return self.name but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num_list = list() \nnum = input(\"Enter how many elements you want:\") \nprint ('Enter numbers in array: ') \n  \nfor i in range(int(num)): \n    n = input(\"num :\") \n    num_list.append(int(n)) \n  \nprint ('Largest number is:', max(num_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: student_grades = {\n    \"Bob\": \"A\",\n    \"Carol\": \"B\",\n    \"Ted\": \"C\",\n    \"Alice\": \"A\"\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_whitespaces(s):\n    return \"\".join(s.split()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_substring(String, SubString):\n    if SubString in String : \n        return True\n    else: \n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def populateDict(lst):\n    my_dict = {}\n    for i in lst:\n        my_dict[i] = i\n    return my_dict\n\nmy_numbers = [1, 2, 3, 4, 5]\nmy_dict = populateDict(my_numbers)\nprint(my_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.datasets import fetch_20newsgroups\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn import metrics\n\n# Load the data\ndataset = fetch_20newsgroups(shuffle=True, random_state=1,\n subset='all')\nX_train, X_test, y_train, y_test = train_test_split(\n dataset.data, dataset.target, test_size=0.25, random_state=0)\n\n# Extract the features\nvectorizer = TfidfVectorizer()\nX_train = vectorizer.fit_transform(X_train)\nX_test = vectorizer.transform(X_test)\n\n# Train the model\nclf = MultinomialNB().fit(X_train, y_train)\n\n# Evaluate the model\npredicted = clf.predict(X_test)\nprint(\"Classification report:\n %s\" % metrics.classification_report(y_test, predicted)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num):\n    # Return True if given number is prime; false otherwise\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef generate_prime_numbers(n):\n    prime_list = []\n    number = 2\n\n    while len(prime_list) < n:\n        if is_prime(number):\n            prime_list.append(number)\n        number += 1\n    \n    return prime_list\n\nn = 8\nprint(generate_prime_numbers(n))\n\n# Output: [2, 3, 5, 7, 11, 13, 17, 19] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: labels = [\"grocery shopping\", \"shopping\", \"going to the store\"]\n\ninput_text = \"I am going to the store to buy groceries.\"\n\ndef classify_input_text(input_text, labels):\n    for label in labels:\n        if label.lower() in input_text.lower():\n            return label\n\noutput_label = classify_input_text(input_text, labels)\nprint(output_label)\n# Output: grocery shopping but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list_alphabetically(input_list): \n    output_list = sorted(input_list) \n    return output_list \n  \ninput_list = ['red', 'green', 'orange']\nsorted_list = sort_list_alphabetically(input_list) \nprint(\"Sorted List in Alphabetical Order:\", sorted_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = 'http://example.com'\nresp = requests.get(url)\ndata = resp.json()\nprint(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\nimport json\n\napp = Flask(name)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"sqlite:////tmp/test.db\"\ndb = SQLAlchemy(app)\n\nclass User(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(80))\n age = db.Column(db.Integer)\n address = db.Column(db.String(120))\n\ndb.create_all()\n\n@app.route('/users', methods=['POST'])\ndef create_user():\n data = request.get_json()\n user = User(name=data['name'], age=data['age'], address=data['address'])\n db.session.add(user)\n db.session.commit()\n return jsonify({'message': 'User created.'})\n\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def natural_sum(n):\n    if n < 0:\n        return 0\n    s = 0\n    for i in range(n+1):\n        s += i\n    return s\n \nnumber = 7\nresult = natural_sum(number)\nprint(result) # 28 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_matrix(m1, m2):\n    result = [[0] * len(m1[0]) for i in range(len(m1))]\n    \n    for i in range(len(m1)):\n        for j in range(len(m1[0])):\n            result[i][j] = m1[i][j] + m2[i][j]\n            \n    return result\n\nresult = add_matrix([[1,4,7], [2,5,8], [3,6,9]], [[9,1,2], [5,3,4], [1,8,7]])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def lcm(m, n):\n    if m > n:\n        greater = m\n    else:\n        greater = n\n\n    while(True):\n        if((greater % m == 0) and (greater % n == 0)):\n            lcm = greater\n            break\n        greater += 1\n\n    return lcm\n\nM = 6\nN = 12\n\nlcm(M, N) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: users = {\n  \"John\": {\n    \"age\": 28,\n    \"location\": \"New York\"\n  },\n  \"Mary\": {\n    \"age\": 34,\n    \"location\": \"London\"\n  },\n  \"David\": {\n    \"age\": 40,\n    \"location\": \"Berlin\"\n  }\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.imdb.com/chart/top?sort=us,asc'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nmovie_names = []\nfor div in soup.find_all('div', {'class': 'lister-list'}):\n  for h3 in div.find_all('h3'):\n    movie_names.append(h3.find('a').text)\n\nprint(movie_names) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import urllib.request \nfrom bs4 import BeautifulSoup\n\n#Providing the url as an argument to urlopen() \nurl = \"http://www.example.com\"\nhtml = urllib.request.urlopen(url).read() \nsoup = BeautifulSoup(html, features = 'html.parser') \n\n# extracting links from the web page \nlinks = [] \nfor link in soup.findAll('a'): \n    links.append(link.get('href')) \n\nprint(links) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPalindrome(s):\n left, right = 0, len(s) - 1\n while left < right:\n if s[left] != s[right]:\n return False\n left += 1\n right -= 1\n return True\n\ns = \"racecar\"\nprint(isPalindrome(s))  # True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport bs4\n\ndef get_data(url):\n    response = requests.get(url)\n    soup = bs4.BeautifulSoup(response.text, 'html.parser')\n\n    products = soup.find_all('div', {'class': 'product'})\n\n    for product in products:\n        name = product.find('h3', {'class': 'name'}).text \n        price = product.find('span', {'class': 'price'}).text\n\n        print(name, price)\n\nif __name__ == '__main__':\n    get_data('www.example.com') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [5, 2, 8, 1]\nlist.sort() \nprint(list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_words(words):\n    counted_words = {}\n    for word in words:\n        if word not in counted_words:\n            counted_words[word] = 1\n        else:\n            counted_words[word] += 1\n    return counted_words\n\nwords = [\"foo\", \"bar\", \"foo\", \"baz\", \"foo\"]\nresult = count_words(words)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_password():\n    lowercase = 'abcdefghijklmnopqrstuvwxyz'\n    uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    numbers = '0123456789'\n    special_characters = '*_/+-.,'\n    total_chars = lowercase + uppercase + numbers + special_characters\n\n    password = ''\n    for i in range(8):\n        password += random.choice(list(total_chars))\n    return password\n\nconst result = generate_password();\nconsole.log(result); but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndef handler(event, context):\n x = event[\"x\"]\n y = event[\"y\"]\n res = x + y\n return {\n \"statusCode\": 200,\n \"body\": json.dumps({\"result\": res})\n } but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\nlength = 10\ncharacters = string.ascii_lowercase + string.ascii_uppercase + string.digits + '!\"#$%\\'&()*+,-./:;<=>?@[]^_`{|}~'\n\npassword = ''.join(random.choice(characters) for i in range(length))\n\nprint(password)  # Output: K>~L}U>Q#3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_password(length):\n    password_characters = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_characters) for i in range(length))\n    return password\n\nlength = 10\npassword = generate_password(length)\n\n# save the password to a file \nwith open('password.txt', 'w') as f:\n    f.write(password)\n    f.close()\n\nprint(password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport bs4\nimport lxml\n\njob_boards = ['Monster.com', 'LinkedIn.com', 'Stack Overflow']\n\nfor board in job_boards:\n # Create a request object for the job board url\n r = requests.get(board)\n\n # Create a BeautifulSoup object from the response\n soup = bs4.BeautifulSoup(r.content, 'lxml')\n\n # Get all job postings on the page\n job_postings = soup.find_all('div', {'class': 'job-posting'})\n\n for job in job_postings:\n # Extract the job details (title, company, location, etc)\n # and store in a dictionary\n job_details = {}\n job_details['title'] = job.find('div', {'class': 'title'}).text\n job_details['company'] = job.find('div', {'class': 'company'}).text\n job_details['location'] = job.find('div', {'class': 'location'}).text\n # ... and so on\n\n# Store the extracted job postings in a database\n# ... but is not the same. just give one example and only return the code."}
