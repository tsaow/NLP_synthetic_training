{"prompt": "make some code that functions the same as the following code: import json\n\ndef array_obj_to_json(arr):\n    json_arr = []\n    for obj in arr:\n        json_arr.append(json.dumps(obj))\n    return json_arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd \nimport numpy as np \n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# Read the data \ndf = pd.read_csv(\"Historical_Data.csv\") \n\n# Select features \nX = df.iloc[:, 1:-1].values\n\n# Target variable\ny = df.iloc[:,-1].values\n\n# Split into train & test sets \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# Train the model \nregressor = LinearRegression()\nregressor.fit(X_train, y_train)\n\n# Make predictions\ny_pred = regressor.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # ===========\n# pysap - Python library for crafting SAP's network protocols packets\n#\n# SECUREAUTH LABS. Copyright (C) 2021 SecureAuth Corporation. All rights reserved.\n#\n# The library was designed and developed by Martin Gallo from\n# the SecureAuth's Innovation Labs team.\n#\n# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n# ==============\n\n\n# Standard imports\nimport struct\nfrom datetime import datetime\n# External imports\nfrom scapy.config import conf\nfrom scapy.packet import Packet\nfrom scapy.asn1fields import (ASN1F_CHOICE, ASN1F_field, ASN1_Error, ASN1F_badsequence, BER_Decoding_Error)\nfrom scapy.volatile import (RandNum, RandTermString, RandBin)\nfrom scapy.fields import (MultiEnumField, StrLenField, Field, StrFixedLenField, StrField, PacketListField, LongField)\n\n\ndef saptimestamp_to_datetime(timestamp):\n    \"\"\"Converts a timestamp in \"SAP format\" to a datetime object. Time zone\n    looks to be fixed at GMT+1.\"\"\"\n    return datetime.utcfromtimestamp((int(timestamp) & 0xFFFFFFFF) + 1000000000)\n\n\nclass PacketNoPadded(Packet):\n    \"\"\"Regular scapy packet with no padding.\n    \"\"\"\n    def extract_padding(self, s):\n        return '', s\n\n\nclass RandByteReduced(RandNum):\n    \"\"\"RandByte that only returns random values between 0 and x2a. Used while\n    performing some fuzz to reduce the test cases space.\n\n    \"\"\"\n    def __init__(self):\n        RandNum.__init__(self, 0, 0x2a)\n\n\nclass ByteMultiEnumKeysField(MultiEnumField):\n    \"\"\"MultiEnumField that picks a reduced number of values. Used for fuzzing\n    Byte fields with reduced number of values.\n\n    \"\"\"\n    def randval(self):\n        return RandByteReduced()\n\n\nclass MutablePacketField(StrLenField):\n    \"\"\"Packet field that mutates the class according to a list of evaluators.\n    The evaluators are run against the packet and given to a class getter.\n\n    If the class can't be found, the field is treated as a StrLenField.\n    \"\"\"\n    __slots__ = [\"length_from\", \"evaluators\", \"_get_class\"]\n\n    def __init__(self, name, default, length_from, get_class, evaluators=None):\n        \"\"\"\n        :param length_from: function to obtain the field length\n        :type length_from: C{callable}\n\n        :param get_class: function to obtain the class\n        :type get_class: C{callable}\n\n        :param evaluators: evaluators\n        :type evaluators: ``list`` of C{callable}\n        \"\"\"\n        StrLenField.__init__(self, name, default, length_from=length_from)\n        self.evaluators = evaluators or []\n        self._get_class = get_class\n\n    def get_class(self, pkt):\n        # Run the evaluators on the actual packet\n        values = [evaluator(pkt) for evaluator in self.evaluators]\n        # Return the class using the function provided\n        return self._get_class(pkt, *values)\n\n    def i2m(self, pkt, i):\n        cls = self.get_class(pkt)\n        if cls is not None:\n            return str(i)\n        else:\n            return StrLenField.i2m(self, pkt, i)\n\n    def m2i(self, pkt, m):\n        cls = self.get_class(pkt)\n        if cls is not None:\n            return cls(m)\n        else:\n            return StrLenField.m2i(self, pkt, m)\n\n\nclass StrNullFixedLenField(StrFixedLenField):\n    \"\"\"Packet field that has a fixed length and is conditionally null-terminated.\n    \"\"\"\n    __slots__ = [\"length_from\", \"max_length\", \"null_terminated\"]\n\n    def __init__(self, name, default, length=None, length_from=None, max_length=None, null_terminated=None):\n        if null_terminated:\n            self.null_terminated = null_terminated\n        else:\n            self.null_terminated = lambda pkt: True\n        self.max_length = max_length or 200\n        StrFixedLenField.__init__(self, name, default, length=length, length_from=length_from)\n\n    def i2repr(self, pkt, v):\n        if self.null_terminated(pkt):\n            if type(v) is str:\n                v = v.rstrip(\"\\0\")\n            return repr(v)\n        return StrFixedLenField.i2repr(self, pkt, v)\n\n    def getfield(self, pkt, s):\n        if self.null_terminated(pkt):\n            l = self.length_from(pkt) - 1\n            return s[l + 1:], self.m2i(pkt, s[:l])\n        return StrFixedLenField.getfield(self, pkt, s)\n\n    def addfield(self, pkt, s, val):\n        if self.null_terminated(pkt):\n            l = self.length_from(pkt) - 1\n            return s + struct.pack(\"%is\" % l, self.i2m(pkt, val)) + \"\\x00\"\n        return StrFixedLenField.addfield(self, pkt, s, val)\n\n    def randval(self):\n        if self.null_terminated:\n            try:\n                l = self.length_from(None) - 1\n            except:\n                l = RandTermString(RandNum(0, self.max_length), \"\\x00\")\n            return RandBin(l)\n        return StrFixedLenField.randval(self)\n\n\nclass StrFixedLenPaddedField(StrFixedLenField):\n    \"\"\"Packet field that has a fixed length and is padded with a\n    given character.\n    \"\"\"\n    __slots__ = [\"length_from\", \"padd\"]\n\n    def __init__(self, name, default, length=None, length_from=None, padd=\" \"):\n        StrFixedLenField.__init__(self, name, default, length, length_from)\n        self.padd = padd\n\n    def getfield(self, pkt, s):\n        l = self.length_from(pkt)\n        return s[l:], self.m2i(pkt, s[:l])\n\n    def addfield(self, pkt, s, val):\n        l = self.length_from(pkt)\n        val += self.padd * l\n        return StrFixedLenField.addfield(self, pkt, s, val)\n\n\nclass StrNullFixedLenPaddedField(StrFixedLenField):\n    \"\"\"Packet field that has a fixed length and is padded with a\n    given character and null terminated.\n    \"\"\"\n    __slots__ = [\"length_from\", \"padd\"]\n\n    def __init__(self, name, default, length=None, length_from=None, padd=\" \"):\n        StrFixedLenField.__init__(self, name, default, length, length_from)\n        self.padd = padd\n\n    def getfield(self, pkt, s):\n        l = self.length_from(pkt)\n        lz = s.find(\"\\x00\")\n        if lz < l:\n            return s[l + 1:], self.m2i(pkt, s[:lz])\n        return s[l + 1:], self.m2i(pkt, s[:l])\n\n    def addfield(self, pkt, s, val):\n        l = self.length_from(pkt)\n        val += self.padd * l\n        return StrFixedLenField.addfield(self, pkt, s, val)\n\n\nclass IntToStrField(Field):\n    \"\"\"Custom field from int to str values, with a variable length\n    \"\"\"\n    __slots__ = [\"length\", \"format\"]\n\n    def __init__(self, name, default, length=11):\n        \"\"\"Initialize the field with a variable length. The 'machine'\n        representation is a string field and the 'internal' repr.\n        is a numeric value.\n        \"\"\"\n        Field.__init__(self, name, default, \"%ds\" % length)\n        # Stores the length of the field\n        self.length = length\n        # Stores the conversion format between representations\n        self.format = \"%\" + \"%d\" % length + \"d\"\n\n    def m2i(self, pkt, x):\n        return str(x)\n\n    def i2m(self, pkt, x):\n        return self.format % int(x)\n\n    def i2count(self, pkt, x):\n        return x\n\n\nclass StrEncodedPaddedField(StrField):\n    __slots__ = [\"remain\", \"encoding\", \"padd\"]\n\n    def __init__(self, name, default, encoding=\"utf-16\", padd=\"\\x0c\",\n                 fmt=\"H\", remain=0):\n        StrField.__init__(self, name, default, fmt, remain)\n        self.encoding = encoding\n        self.padd = padd\n\n    def h2i(self, pkt, x):\n        if x:\n            x = x.encode(self.encoding)\n        return x\n\n    def i2h(self, pkt, x):\n        if x:\n            x = x.decode(self.encoding)\n        return x\n\n    def addfield(self, pkt, s, val):\n        return s + self.i2m(pkt, val) + self.padd\n\n    def getfield(self, pkt, s):\n        l = s.find(self.padd)\n        if l < 0:\n            return \"\", s\n        return s[l + 1:], self.m2i(pkt, s[:l])\n\n\nclass PacketListStopField(PacketListField):\n    \"\"\"Custom field that contains a list of packets until a 'stop' condition is met.\n    \"\"\"\n    __slots__ = [\"count_from\", \"length_from\", \"stop\"]\n\n    def __init__(self, name, default, cls, count_from=None, length_from=None, stop=None):\n        PacketListField.__init__(self, name, default, cls, count_from=count_from, length_from=length_from)\n        self.stop = stop\n\n    def getfield(self, pkt, s):\n        c = l = None\n        if self.length_from is not None:\n            l = self.length_from(pkt)\n        elif self.count_from is not None:\n            c = self.count_from(pkt)\n\n        lst = []\n        ret = \"\"\n        remain = s\n        if l is not None:\n            remain, ret = s[:l], s[l:]\n        while remain:\n            if c is not None:\n                if c <= 0:\n                    break\n                c -= 1\n            try:\n                p = self.m2i(pkt, remain)\n            except Exception:\n                if conf.debug_dissector:\n                    raise\n                p = conf.raw_layer(load=remain)\n                remain = \"\"\n            else:\n                if conf.padding_layer in p:\n                    pad = p[conf.padding_layer]\n                    remain = pad.load\n                    del (pad.underlayer.payload)\n                else:\n                    remain = \"\"\n            lst.append(p)\n            # Evaluate the stop condition\n            if self.stop and self.stop(p):\n                break\n        return remain + ret, lst\n\n\nclass AdjustableFieldLenField(Field):\n    __slots__ = [\"length_of\", \"count_of\", \"adjust\"]\n\n    def __init__(self, name, default, length_of=None):\n        Field.__init__(self, name, default, \">H\")\n        self.length_of = length_of\n\n    def i2m(self, pkt, x):\n        if x is None:\n            fld, fval = pkt.getfield_and_val(self.length_of)\n            x = fld.i2len(pkt, fval)\n        return x\n\n    def addfield(self, pkt, s, val):\n        i2m = self.i2m(pkt, val)\n        fmt = \"B\"\n        padd = \"\"\n        if i2m > 0xf0:\n            fmt = \">H\"\n            padd = struct.pack(\"B\", 0xff)\n        return s + padd + struct.pack(fmt, i2m)\n\n    def getfield(self, pkt, s):\n        if struct.unpack(\"B\", s[:1])[0] == 0xff:\n            return s[3:], self.m2i(pkt, struct.unpack(\">H\", s[1:3])[0])\n        else:\n            return s[1:], self.m2i(pkt, struct.unpack(\"B\", s[:1])[0])\n\n\nclass ASN1F_CHOICE_SAFE(ASN1F_CHOICE):\n    def __init__(self, name, default, *args, **kwargs):\n        if \"implicit_tag\" in kwargs:\n            err_msg = \"ASN1F_CHOICE has been called with an implicit_tag\"\n            raise ASN1_Error(err_msg)\n        self.implicit_tag = None\n        for kwarg in [\"context\", \"explicit_tag\"]:\n            if kwarg in kwargs:\n                setattr(self, kwarg, kwargs[kwarg])\n            else:\n                setattr(self, kwarg, None)\n        ASN1F_field.__init__(self, name, None, context=self.context,\n                             explicit_tag=self.explicit_tag)\n        self.default = default\n        self.current_choice = None\n        self.choices = args\n\n    def m2i(self, pkt, s):\n        \"\"\"Try to safely extract an ASN1_Packet from the choices list.\n\n        :raise ASN1_Error: if unable to parse the packet using any of the given choices\n        \"\"\"\n        if len(s) == 0:\n            raise ASN1_Error(\"ASN1F_CHOICE: got empty string\")\n\n        for choice in self.choices:\n            try:\n                return self.extract_packet(choice, s)\n            except (ASN1_Error, ASN1F_badsequence, BER_Decoding_Error):\n                pass\n        raise ASN1_Error\n\n\nclass TimestampField(LongField):\n    \"\"\"Timestamp field\"\"\"\n\n    def i2h(self, pkt, x):\n        dt = datetime.utcfromtimestamp(x)\n        return dt.strftime(\"%Y-%m-%d %H:%M:%S UTC\")\n\n\nclass LESignedByteField(Field):\n    def __init__(self, name, default):\n        Field.__init__(self, name, default, \"<b\")\n\n\nclass LESignedShortField(Field):\n    def __init__(self, name, default):\n        Field.__init__(self, name, default, \"<h\")\n\n\nclass LESignedLongField(Field):\n    def __init__(self, name, default):\n        Field.__init__(self, name, default, \"<q\")\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_odd_numbers(n):\n    sum = 0\n    for i in range(1,n+1):\n        if i % 2 != 0:\n            sum += i\n    return sum\n\nodd_sum = sum_odd_numbers(10)\nprint(odd_sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from textblob import TextBlob\nfrom textblob.sentiments import NaiveBayesAnalyzer\n\n# Create a TextBlob object using the NaiveBayesAnalyzer\nsentiment_analyzer = TextBlob(analyzer=NaiveBayesAnalyzer())\n\n# Method to predict the sentiment of a given sentence\ndef predict_sentiment(sentence):\n    # Get the polarity score of the sentence\n    polar_score = sentiment_analyzer.sentiment.polarity\n    # class the sentiment of the given sentence\n    if polar_score > 0:\n        sentiment = \"positive\"\n    elif polar_score == 0:\n        sentiment = \"neutral\"\n    else:\n        sentiment = \"negative\"\n    # Print out the sentiment of the given sentence\n    print(\"The sentiment of the given sentence is:\", sentiment)\n\nsentence = \"This movie is amazing!\"\npredict_sentiment(sentence) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def equals(a, b):\n    return a == b\n\nequal = equals(28, 48)\nprint(equal) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findMin(arr): \n   \n    # Initialize minimum element \n    min = arr[0] \n   \n    # Traverse array elements starting from \n    # 1st to the last \n    for i in range(1, len(arr)): \n        if arr[i] < min: \n            min = arr[i]\n   \n    return min\n\narr = [10, 11, 8, 9, 2] \nprint(findMin(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_dict(d):\n new_dict = {}\n for key, value in d.items():\n new_dict[value] = key\n return new_dict\n\nd = {'a':1, 'b':2, 'c':3}\nprint(reverse_dict(d))\n# {1:'a', 2:'b', 3:'c'} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n    def __init__(self, name, age, salary, company):\n        self.name = name\n        self.age = age\n        self.salary = salary\n        self.company = company\n    def get_details(self):\n        return \"{}, {}, {}, {}\".format(self.name, self.age, self.salary, self.company) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(string):\n    # Reversing the string \n    rev = string[::-1] \n  \n    # Checking if both string are equal or not \n    if (string == rev): \n        print(\"The given string is a Palindrome\")\n    else: \n        print(\"The given string is not a Palindrome\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup \n\ndef get_all_links(url):\n  # make a GET request to fetch the raw HTML content\n  html_content = requests.get(url).text\n  \n  # parse the html content\n  soup = BeautifulSoup(html_content, \"lxml\")\n  \n  # fetch all anchors\n  links = soup.find_all(\"a\")\n\n  for link in links:\n    print(link.get(\"href\"))\n\nget_all_links(\"https://www.example.com\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sentiment_analysis(documents):\n  sentiments = []\n  for document in documents:\n    sentiment = None\n    score = 0\n    words = document.split(' ')\n    for word in words:\n      if word == 'great':\n        score += 1\n      elif word == 'bad':\n        score -= 1\n    if score > 0:\n      sentiment = 'positive'\n    elif score == 0:\n      sentiment = 'neutral'\n    else:\n      sentiment = 'negative'\n    sentiments.append(sentiment)\n  return sentiments\n\n# Example\ndocs = [\"This food was really great!\", \"This movie was really bad.\"]\nsentiments = sentiment_analysis(docs)\nprint(sentiments) # ['positive', 'negative'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_words_with_e(str): \n    words = str.split() \n    for word in words: \n        if 'e' in word: \n            print(word) \n\nprint_words_with_e(str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Take input from user\nc = float(input('Enter temperature in Celsius: '))\n\n# Compute temperature in Fahrenheit\nf = (c * 1.8) + 32\n\n# Print the result\nprint('{} degree Celsius is equal to {} degree Fahrenheit.'.format(c, f)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.tokenize import sent_tokenize\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentences = sent_tokenize(\"The movie was so amazing!\")\n\n# Setup VADER sentiment intensity analyzer\nanalyzer = SentimentIntensityAnalyzer()\n\n# Use VADER to get sentiment scores for each sentence\nfor sentence in sentences:\n scores = analyzer.polarity_scores(sentence)\n score = scores['compound']\n if score >= 0.1:\n  sentiment = 'positive'\n elif score <= -0.1:\n  sentiment = 'negative'\n else:\n  sentiment = 'neutral'\n\n print(sentence + ': ' + sentiment)\n\n# Output: The movie was so amazing!: positive but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import plotly.express as px\nimport pandas as pd\n\ndf = pd.DataFrame(salaries)\nfig = px.bar(df, x='year', y='salary',\n hover_data=['salary'], color='salary',\n labels={'salary':'Yearly Salary'}, height=400)\n\nfig.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport numpy as np\n\nBOARD_SIZE = 3\nPLAYER = 1  # player is X\nAI = 2  # AI is O\n\ndef create_board():\n  board = np.zeros((BOARD_SIZE, BOARD_SIZE)) # board is 3x3 array of 0's\n  return board\n\ndef valid_space(board, position):\n  if position[0] < 0 or position[0] >= BOARD_SIZE:\n    return False\n  elif position[1] < 0 or position[1] >= BOARD_SIZE:\n    return False\n  elif board[position[0], position[1]] != 0:\n    return False\n  else:\n    return True\n\ndef make_move(board, pos, symbol):\n  board[pos[0], pos[1]] = symbol\n\ndef ai_move(board, symbol):\n  pos = random.choice(list(zip(*np.where(board == 0)))) # pick random empty space\n  make_move(board, pos, symbol)\n\ndef player_move(board, symbol):\n  pos = input('Enter your move (row column): ').split()\n  pos = [int(i) for i in pos]\n  if not valid_space(board, pos):\n    print('Invalid move!')\n    return False\n  else:\n    make_move(board, pos, symbol)\n    return True\n\n\ndef main():\n  board = create_board()\n  winner = 0\n  turn = PLAYER\n  complete = False\n\n  while not complete and not winner:\n    if turn == PLAYER:\n      player_move(board, PLAYER)\n      turn = AI\n    else:\n      ai_move(board, AI)\n      turn = PLAYER\n    winner = check_winner(board)\n    complete = check_complete(board)\n    print_board(board)\n\n  if winner == PLAYER:\n    print('Player wins')\n  elif winner == AI:\n    print('AI wins')\n  else:\n    print('Draw')\n\ndef check_complete(board):\n  if 0 in board:\n    return False\n  else:\n    return True\n\ndef check_winner(board):\n  for i in range(BOARD_SIZE):\n    if np.all(board[i] == PLAYER):\n      return PLAYER\n    elif np.all(board[i] == AI):\n      return AI\n\n  for j in range(BOARD_SIZE):\n    if np.all(board[:,j] == PLAYER):\n      return PLAYER\n    elif np.all(board[:,j] == AI):\n      return AI\n\n  diag1 = np.diag(board)\n  diag2 = np.diag(np.fliplr(board))\n  if np.all(diag1 == PLAYER):\n    return PLAYER\n  elif np.all(diag1 == AI):\n    return AI\n  elif np.all(diag2 == PLAYER):\n    return PLAYER\n  elif np.all(diag2 == AI):\n    return AI\n\n  else:\n    return 0\n\ndef print_board(board):\n  for i in range(BOARD_SIZE):\n    for j in range(BOARD_SIZE):\n      if board[i,j] == PLAYER:\n        print('X ', end=\"\")\n      elif board[i,j] == AI:\n        print('O ', end=\"\")\n      else:\n        print('  ', end=\"\")\n    print()\n\nif __name__ == \"__main__\":\n  main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compress(string):\n    if string == '' or not string:\n        return string\n    compressed_str = []\n    i = 0\n    j = 0\n    while i < len(string):\n        while j < len(string) and string[j] == string[i]:\n            j = j + 1\n        compressed_str.append([string[i], str(j-i)])\n        i = j\n    return compressed_str\n\ndef decompress(compressed_str):\n    decompressed_str = \"\"\n    for i in compressed_str:\n        decompressed_str+=i[0]*int(i[1])\n    return decompressed_str but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_sorted_lists(list1, list2):\n    # Create a new list for the result\n    result = [] \n    # Make iterators for both lists\n    iter1 = iter(list1)  \n    iter2 = iter(list2) \n    # Initialize the elements to compare\n    elem1 = next(iter1, None) \n    elem2 = next(iter2, None)  \n  \n    # Compare the elements of both lists \n    while elem1 is not None and elem2 is not None: \n        # Pick the smaller element \n        if elem1 <= elem2: \n           result.append(elem1) \n           elem1 = next(iter1, None)  \n        else: \n           result.append(elem2) \n           elem2 = next(iter2, None) \n  \n    # Append the remaining elements of list1  \n    if elem1 is not None: \n        result.append(elem1) \n        for elem1 in iter1: result.append(elem1) \n  \n    # Append the remaining elements of the list2  \n    if elem2 is not None: \n        result.append(elem2) \n        for elem2 in iter2: \n            result.append(elem2) \n  \n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# generates a random number between lower and upper\ndef generateRandomNumber(lower, upper):\n r = random.uniform(lower, upper)\n return r\n\n# driver program\nif __name__ == \"__main__\":\n lower = 10\n upper = 20\n print(generateRandomNumber(lower, upper)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n \ndef area_circle(radius):\n return math.pi * (radius ** 2)\n \nprint(area_circle(radius)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sequence_generator(start, end):\n    return list(range(start, end + 1)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum(n1, n2): \n return n1 + n2\n\nn1 = 5\nn2 = 7\nprint(\"Sum of {0} and {1} is {2}\".format(n1, n2, sum(n1, n2))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Get the inputs\na = input(\"Enter the first number: \")\nb = input(\"Enter the second number: \")\n\n# Convert to integers\na = int(a)\nb = int(b)\n\n# Perform the arithmetic operations \nadd = a + b\nsub = a - b\nmul = a * b\ndiv = a / b\n\n# Print the results\nprint(\"The addition of two numbers is\", add)\nprint(\"The subtraction of two numbers is\", sub)\nprint(\"The multiplication of two numbers is\", mul)\nprint(\"The division of two numbers is\", div) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findMissingNumber(arr):\n    n = len(arr)\n    total_sum = (n+1)*(n+2)//2\n    arr_sum = sum(arr)\n    \n    missing_number = total_sum - arr_sum\n    \n    return missing_number\n\narr = [1,2,3,4,6,7,8]\n\nprint(findMissingNumber(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_negative_with_zero(numbers):\n    new_list = []\n\n    for num in numbers:\n        if num < 0:\n            new_list.append(0)\n        else:\n            new_list.append(num)\n    return new_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nfrom tkinter import Tk, Button\n\nwindow = Tk()\nwindow.title(\"Tile Shuffling\")\n\n# Set size of window\nwindow.geometry(\"500x500\")\n\n# Create a list of letters\nletters = list('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n\n# Create buttons\nfor i in range(25):\n btn = Button(window, text=letters[i], width=\"4\", height=\"2\")\n btn.grid(row=i//5, column=i%5)\n\n# Function to shuffle the letters\ndef shuffle():\n random.shuffle(letters)\n # Update button text\n for i in range(25):\n btn = window.grid_slaves(row=i//5, column=i%5)\n btn[0].config(text=letters[i])\n\nbtn_shuffle = Button(window, text=\"Shuffle\", command=shuffle)\nbtn_shuffle.grid(row=5, column=0, columnspan=5)\n\nwindow.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.tokenize import sent_tokenize\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.corpus import stopwords\n\n# Define the pipeline\ndef summarize(text):\n    sentences = sent_tokenize(text)\n    word_sentences = [word_tokenize(sentence) for sentence in sentences]\n    stemmer = PorterStemmer()\n    stop_words = stopwords.words('english')\n    word_sentences = [[stemmer.stem(w.lower()) for w in word if w not in stop_words] for word in word_sentences]\n    # Build word frequency table\n    word_freq_table = dict()\n    for words in word_sentences:\n        for word in words:\n            if word in word_freq_table:\n                word_freq_table[word] += 1\n            else:\n                word_freq_table[word] = 1\n    # Calculate sentence scores\n    sentence_scores = dict()\n    for i, sentence in enumerate(word_sentences):\n        total = 0\n        for word in sentence:\n            if word in word_freq_table:\n                total += word_freq_table[word]\n        sentence_scores[i] = total\n    # Find top n sentences\n    n = 2 # Change this to change number of summary sentences\n    top_n_sentences_index = sorted(sentence_scores, key=sentence_scores.get, reverse=True)[:n]\n    top_n_sentences = [sentences[i] for i in top_n_sentences_index]\n    # Return summary\n    return ' '.join(top_n_sentences)\n\n# Test the pipeline\ntext = \"These are some words. These are some more words. These are even more words. Here is a summary sentence.\"\nprint(summarize(text))\n\n# Output: These are some words. Here is a summary sentence. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(num_1, num_2):\n  if num_2 == 0:\n    return num_1\n  return gcd(num_2, num_1 % num_2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import csv\nimport json\n\ndata = {\n    \u201cname\u201d: \u201cJohn\u201d,\n    \u201cage\u201d: 30,\n    \u201ccity\u201d: \u201cNew York\u201d\n}\n\nwith open('data.csv', 'w') as csvfile:\n writer = csv.writer(csvfile)\n writer.writerow([\"Name\", \"Age\", \"City\"])\n writer.writerow([data[\"name\"], data[\"age\"], data[\"city\"]]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combinations(arr, r): \n    # Get the length of array \n    n = len(arr) \n      \n    # Create an array to store indexes of elements \n    # taken for combination \n    data = [0]*r \n      \n    combinationUtil(arr, data, 0, n-1, 0, r) \n      \n# arr[]  -->> Input Array \n# data[] -->> Temporary array to store current combination \n# start & end -->> Staring and Ending indexes in arr[] \n# index -->> Current index in data[]  \n# r -->> Size of a combination to be printed \ndef combinationUtil(arr, data, start, end, index, r): \n    # Current combination is ready to be printed, print it \n    if (index == r): \n        for j in range(r): \n            print(data[j], end = \" \") \n        print() \n        return\n  \n    # Replace index with all possible elements. The condition \n    # \"end-i+1 >= r-index\" makes sure that including one element \n    # at index will make a combination with remaining elements \n    # at remaining positions \n    i = start\n    while(i <= end and end - i + 1 >= r - index): \n        data[index] = arr[i] \n        combinationUtil(arr, data, i + 1, end, index + 1, r) \n        i += 1\n\ncombinations([\"A\",\"B\",\"C\"], 2)\n# A B \n# A C \n# B C but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: mydict = {\n    'fruit': 'apple',\n    'animal': 'cat',\n    'city': 'London'\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \ndef random_num(start, end): \n    num = random.randint(start, end) \n    return num but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a python program that takes a string and prints the reverse of it\n\"\"\"\n\n# Get the input string \nmy_string = input('Enter a string: ') \n\n# Reverse the string \nrev_string = my_string[::-1] \n\n# Print the reversed string\nprint(rev_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n \n \ndef scrape_web_page(url, keywords):\n keyword_found = False\n \n # Make a GET request to fetch the raw HTML content\n html_content = requests.get(url).text\n \n # Parse the html content\n soup = BeautifulSoup(html_content, \"lxml\")\n \n # Find all occurrences of the given keywords in the HTML document\n for keyword in keywords:\n   if keyword in soup.text:\n     keyword_found = True\n \n # Return a boolean to indicate if a keyword was found\n return keyword_found but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def swap_without_variable(x, y): \n    x = x + y   \n    y = x - y  \n    x = x - y  \n    return x, y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.pipeline import Pipeline\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.svm import SVC\n\npipeline = Pipeline([\n ('vectorizer',  CountVectorizer()),\n ('classifier', SVC())\n])\n\n# Fit the model\npipeline.fit(X_train, y_train)\n\n# Predicting on test data\ny_pred = pipeline.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_type_and_value(x):\n    t = type(x)\n    v = x\n    return t, v but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for num in range(2, 101):\n   for i in range(2, num):\n      if (num % i == 0):\n         break\n   else:\n      print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_words(sentence):\n    words = sentence.split(' ')\n    return words\n\nwords = get_words('This is a sentence.')\nprint(words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n    def __init__(self, name, age, address):\n        self.name = name\n        self.age = age\n        self.address = address but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class CacheStorage:\n    def __init__(self, ttl):\n        self.ttl = ttl\n        self.cache = {}\n    \n    def store(self, key, value):\n        self.cache[key] = {\"value\": value,\n                           \"expire_at\": time.time() + self.ttl}\n    \n    def fetch(self, key):\n        # Check if key is expired\n        if self.cache[key][\"expire_at\"] > time.time():\n            return self.cache[key][\"value\"]\n        else:\n            # If expired, remove the key and return None\n            self.cache.pop(key)\n            return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_order(lst):\n  ascending = all(lst[i] < lst[i+1] for i in range(len(lst)-1))\n  descending = all(lst[i] > lst[i+1] for i in range(len(lst)-1))\n  if ascending:\n    return 'ascending'\n  elif descending:\n    return 'descending'\n  else:\n    return 'not ordered' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nConvert a given string to an array of characters using Python\n\"\"\"\n\nstr = \"Hello World!\"\n\nlist = []\n\nfor character in str:\n    list.append(character)\n    \nprint(list) #['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def func_name(param1, param2):\n    # Add two parameters\n    a = param1 + param2\n    \n    # Multiply two parameters\n    b = param1 * param2\n    \n    # Return a and b\n    return a, b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: person_details = {\n    'Name': 'John',\n    'Age': 27,\n    'Gender': 'Male'\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: items = [\n    ['apple', 2.00], \n    ['banana', 4.00], \n    ['bread', 3.50], \n    ['orange', 1.50]\n]\n\ntotal = 0\n\nfor item in items:\n    total += item[1]\n\nprint(\"The total price of the grocery list is:\", total) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Car:\n    # Initializer for the car\n    def __init__(self, speed, direction):\n        self.speed = speed\n        self.direction = direction\n\n    # Change direction of the car\n    def change_direction(self, direction):\n        self.direction = direction but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import scrapy\n\nclass ExampleSpider(scrapy.Spider):\n name = 'example'\n allowed_domains = ['example.org']\n start_urls = ['https://example.org/']\n\n def parse(self, response):\n    for article in response.xpath(\"//div[@class='article']\"):\n        yield {\n            'title': article.xpath(\"./h1/text()\").get(),\n            'url': article.xpath(\"./a/@href\").get(),\n        } but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: <html>\n<head>\n<title>List of Programming Languages</title>\n<style>\nh1 {\n font-family: sans-serif; \n color: #444444;\n }\n\nul {\n padding: 0;\n margin: 0;\n list-style-type: none;\n line-height: 1.5;\n font-family: sans-serif;\n font-size: 16px; \n color: #444444; \n }\n</style>\n</head>\n<body>\n <h1>List of Programming Languages</h1> \n <ul>\n  <li>Java</li>\n  <li>Python</li>\n  <li>C++</li>\n  <li>JavaScript</li>\n  <li>C#</li>\n  <li>PHP</li>\n  <li>Perl</li>\n  <li>Ruby</li>\n  <li>Objective-C</li>\n  <li>Swift</li>\n</ul>\n</body>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom scipy.optimize import minimize\n \ndef objective(x):\n    return (x[0] * x[3] * (x[0] + x[1] + x[2]) + x[2])\n \ndef constraint1(x):\n    return x[0]*x[1]*x[2]*x[3] - 25 \n \ndef constraint2(x):\n    sum_sq = 40\n    for i in range(4):\n        sum_sq = sum_sq - x[i]**2 \n    return sum_sq\n     \n# Initial Guess\nx0 = np.array([1, 4, 10, 1])\n \n# show initial objective\nprint('Initial SSE Objective: ' + str(objective(x0))) \n\n# Constraints\ncons = ({'type': 'ineq', 'fun': constraint1}, \n    {'type': 'ineq', 'fun': constraint2})\n \n# Solution\nres = minimize(objective, x0, method='SLSQP', \n        constraints=cons, options={'disp': True})\n     \n# Show final objective\nprint('Final SSE Objective: ' + str(res.fun))\n \n# Print final solution\nprint('x1 = ' + str(res.x[0]))\nprint('x2 = ' + str(res.x[1]))\nprint('x3 = ' + str(res.x[2]))\nprint('x4 = ' + str(res.x[3])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def highest_scoring_word(text): \n    \n    # Split the text into words \n    words = text.split() \n  \n    # Create a dictionary to store the words \n    # and their corresponding scores \n    scores = {} \n    for word in words: \n        score = 0\n        for letter in word: \n            score += ord(letter) - 96 \n        scores[word] = score \n  \n    # Find the highest score \n    highest_score = 0\n    for key, value in scores.items(): \n        if value > highest_score: \n            highest_score = value \n            highest_scoring_word = key \n  \n    return highest_scoring_word\n\n# Driver code\ntext = \"The cat runs fast\"\nprint(highest_scoring_word(text)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import smtplib\n\nsender = \u2018sender@example.com\u2019\nreceivers = \u2018receiver@example.com\u2019\n\nmessage = \u201c\u201d\u201d\nSubject: Sending Email using Python\n\nThis is a test e-mail message.\n\u201d\u201d\u201d\n\ntry:\n   smtpObj = smtplib.SMTP(\u2018localhost\u2019)\n   smtpObj.sendmail(sender, receivers, message)         \n   print(\u201cSuccessfully sent email\u201d)\nexcept SMTPException:\n   print(\u201cError: unable to send email\u201d) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def my_func(a, b)\n  a + b\nend but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def validate_date(year, month, day):\n    try:\n        datetime.datetime(year, month, day)\n        return True\n    except ValueError:\n        return False\n\nvalidate_date(2020, 11, 40) # Output: False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_list(arr):\n    return arr[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculator():\n    operator = input(\"Please enter an operator: \")\n    num1 = float(input(\"Please enter your first number: \"))\n    num2 = float(input(\"Please enter your second number: \"))\n\n    if operator == \"+\":\n        print(num1 + num2)\n    elif operator == \"-\":\n        print(num1 - num2)\n    elif operator == \"*\":\n        print(num1 * num2)\n    elif operator == \"/\":\n        print(num1 / num2)\n    else:\n        print(\"Invalid operator\")\n\ncalculator() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf \nfrom tensorflow import keras \n\n# create a Neural Network\nmodel = keras.Sequential([ \n    keras.layers.Dense(64, activation=tf.nn.relu, input_shape=(6,)), \n    keras.layers.Dense(64, activation=tf.nn.relu), \n    keras.layers.Dense(1) \n]) \n  \n# compile the model \nmodel.compile(optimizer = 'rmsprop', \n              loss = keras.losses.MeanSquaredError(), \n              metrics=['accuracy']) \n              \n# train the model\nmodel.fit(X_train, y_train, epochs=40) \n\n# test the model \ntest_loss, test_acc = model.evaluate(X_test, y_test) \n\nprint('Test accuracy:', test_acc) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk \nimport numpy as np \nimport random \nimport string # to process standard python strings\n\nf=open('corpus.txt','r',errors = 'ignore')\nraw=f.read()\nraw=raw.lower()# converts to lowercase\n#nltk.download('punkt') # first-time use only\n#nltk.download('wordnet') # first-time use only\nsent_tokens = nltk.sent_tokenize(raw)# converts to list of sentences \nword_tokens = nltk.word_tokenize(raw)# converts to list of words\n\n# Preprocessing\nlemmer = nltk.stem.WordNetLemmatizer()\ndef LemTokens(tokens):\n    return [lemmer.lemmatize(token) for token in tokens]\nremove_punct_dict = dict((ord(punct), None) for punct in string.punctuation)\ndef LemNormalize(text):\n    return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))\n\n# Keyword Matching\nGREETING_INPUTS = (\"hello\", \"hi\", \"greetings\", \"sup\", \"what's up\",\"hey\",)\nGREETING_RESPONSES = [\"hi\", \"hey\", \"hi there\", \"hello\", \"I am glad! You are talking to me\"]\n\ndef greeting(sentence):\n \n    for word in sentence.split():\n        if word.lower() in GREETING_INPUTS:\n            return random.choice(GREETING_RESPONSES)\n\n# Generating Response\ndef response(user_response):\n    AI_response=''\n    sent_tokens.append(user_response)\n    TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words='english')\n    tfidf = TfidfVec.fit_transform(sent_tokens)\n    vals = cosine_similarity(tfidf[-1], tfidf)\n    idx=vals.argsort()[0][-2]\n    flat = vals.flatten()\n    flat.sort()\n    req_tfidf = flat[-2]\n    if(req_tfidf==0):\n        AI_response=AI_response+\"I am sorry! I don't understand you\"\n        return AI_response\n    else:\n        AI_response = AI_response+sent_tokens[idx]\n        return AI_response\n\nflag=True\nprint(\"MyBot: My name is MyBot. I will answer your queries about AI. If you want to exit, type Bye!\")\n\nwhile(flag==True):\n    user_response = input()\n    user_response=user_response.lower()\n    if(user_response!='bye'):\n        if(user_response=='thanks' or user_response=='thank you' ):\n            flag=False\n            print(\"MyBot: You are welcome..\")\n        else:\n            if(greeting(user_response)!=None):\n                print(\"MyBot: \"+greeting(user_response))\n            else:\n                print(\"MyBot: \",end=\"\")\n                print(response(user_response))\n                sent_tokens.remove(user_response)\n    else:\n        flag=False\n        print(\"MyBot: Bye! take care..\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_divisible_numbers(n):\n    for i in range(1, n + 1):\n        if i % 3 == 0 or i % 5 == 0:\n            print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bigger_number(num1, num2):\n  if num1 > num2:\n    return num1\n  else:\n    return num2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: private bool IsEven(int n)\n{\n    return n % 2 == 0;\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nPerform stochastic gradient descent on the iris dataset in Python.\n\"\"\"\n\nimport numpy as np\nfrom sklearn import datasets\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\n\n# Load the dataset\niris = datasets.load_iris()\nX = iris.data\ny = iris.target\n\n# Split the dataset into test and train sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Set the hyperparameters\nNUM_ITERATIONS = 1000 \nLEARNING_RATE = 0.01\n\n# Initialize the weights\nw = np.zeros(X_train.shape[1])\nb = np.zeros((1,)) \n\n# Perform the Stochastic Gradient Descent\nfor n in range(NUM_ITERATIONS):\n    # Pick a random point\n    x_i, y_i = X_train[np.random.randint(X_train.shape[0])], y_train[np.random.randint(y_train.shape[0])]\n\n    # Compute the Sigmoid\n    z = np.matmul(w, x_i) + b \n    sigmoid = 1 / (1 + np.exp(-z))\n\n    # Compute the Gradients\n    dw = (sigmoid - y_i) * x_i\n    db = (sigmoid - y_i) \n\n    # Update the weights\n    w = w - LEARNING_RATE * dw \n    b = b - LEARNING_RATE * db\n\n# Make predictions\ny_pred = np.matmul(X_test, w) + b\ny_pred = np.round(1 / (1 + np.exp(-y_pred)))\n\n# Compute the accuracy\naccuracy = metrics.accuracy_score(y_test, y_pred) \nprint(\"Accuracy:\", accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n \ndef sum_primes(nums):\n    prime_sum = 0\n    for num in nums:\n        if is_prime(num):\n            prime_sum += num\n    return prime_sum\n \nnums = [2, 3, 9, 14]\n \nresult = sum_primes(nums)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\nimport pip\n\ndef pip_list():\n    packages = pip.get_installed_distributions()\n    for package in packages:\n        print('{}=={}'.format(package.project_name, package.version))\n        \n\nif __name__ == '__main__':\n    pip_list() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def getFibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return getFibonacci(n-1)+getFibonacci(n-2) \n\nnumber = 8\nfibonacci_number = getFibonacci(number)\nprint(fibonacci_number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_word(word_list): \n    maxLen = len(max(word_list, key = len)) \n    return [x for x in word_list if len(x) == maxLen] \n  \nlist = [\"Hello\", \"World\", \"Welcome\", \"To\", \"the\", \"universe\"]\n  \nprint(longest_word(list)) # Output: [\"Welcome\", \"universe\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # sentiment_rating function takes in a string of text \n# and returns a sentiment score from -1 to 1\ndef sentiment_rating(text):\n    # Create a sentiment analyzer object\n    sentiment_analyzer = SentimentIntensityAnalyzer()\n \n    # Calculate the sentiment score\n    sentiment_score = sentiment_analyzer.polarity_scores(text)\n\n    return sentiment_score['compound'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nimport re\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef classify_tweet(text):\n tokenized_text = nltk.word_tokenize(text)\n tag = nltk.pos_tag(tokenized_text)\n lemmatizer = nltk.WordNetLemmatizer()\n lemmas = [lemmatizer.lemmatize(word) for word, tag in tag]\n\n sentiment_analyzer = SentimentIntensityAnalyzer()\n sentiment = sentiment_analyzer.polarity_scores(' '.join(lemmas))\n\nif sentiment['compound'] < 0:\n print('Negative')\nelif sentiment['compound'] > 0:\n print('Positive')\nelse:\n print('Neutral')\n\nclassify_tweet(\"I am really enjoying this course!\")\n# Output: Positive but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack():\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n   \n    def pop(self):\n        if len(self.items) == 0: \n            return None\n        else: \n            return self.items.pop()\n    \n    def peek(self):\n        if len(self.items) == 0:\n            return None\n        else:\n            return self.items[-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def selection_sort(arr):\n    # traverse through all array elements\n    for i in range(len(arr)):\n        # find the minimum element in the remaining unsorted array\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[min_idx] > arr[j]:\n                min_idx = j\n        # swap the found minimum element\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n\narr = [5, 8, 10, 15, 2] \nselection_sort(arr)\nprint(\"Sorted array: \", arr)\n\nOutput: Sorted array:  [2, 5, 8, 10, 15] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n  \ndef heads_tails(): \n    heads = 0\n    tails = 0\n    res = [\"H\", \"T\"]\n    tosses = int(input(\"Number of tosses: \"))\n    sequence = \"\"\n    for i in range(tosses): \n        if random.choice(res) == \"H\": \n            heads += 1\n            sequence += \"H\"\n        else: \n            tails += 1\n            sequence += \"T\"\n    print(\"Heads: \", heads) \n    print(\"Tails: \", tails)\n    print(\"Sequence:\", sequence)\n\nheads_tails() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def process_expression(exp):\n    symbols = []\n    pos = 0\n\n    # process the expression in order\n    for c in exp:\n        if c in \"+-/*()\":\n            # identify and store the symbol\n            symbol = {\n                \"type\": c,\n                \"pos\": pos\n            }\n            symbols.append(symbol)\n        pos += 1\n    return symbols but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def func1(list):\n    s = 0\n    for x in list:\n        s+= x\n    return s\n\nl = [2, 3]\nresult = func1(l)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import csv\n\ndef read_csv_record(filename):\n    data = {}\n    with open(filename) as csv_file:\n        reader = csv.DictReader(csv_file)\n        for row in reader:\n            data[row['key']] = row['value']\n    return data but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def detect_plagiarism(text1, text2):\n    # your code goes here\n    \n    return is_plagiarized but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: input_words = input_string.split()\noutput_words = [word[::-1] for word in input_words]\nprint(output_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from itertools import combinations\n\ninput_list = [1, 2, 3]\nresult = list(combinations(input_list, 3))\n\nfor combination in result:\n    print(combination) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def solve_sudoku(board):\n size = len(board)\n empty = find_empty_entry(board, size)\n \n if not empty:\n  return True\n \n else:\n  row, col = empty\n \n for num in range(1, size+1):\n  if check_valid_number(board, size, num, (row, col)):\n   board[row][col] = num\n \n   if solve_sudoku(board):\n    return True\n \n   board[row][col] = 0\n \n return False\n \n \ndef find_empty_entry(board, size):\n for row in range(size):\n  for col in range(size):\n   if board[row][col] == 0:\n    return (row, col)\n \n return None\n \n \ndef check_valid_number(board, size, num, position):\n row, col = position\n \n # If the number is already present in the column or row, then return false\n for gen in range(size):\n  if board[row][gen] == num or board[gen][col] == num:\n   return False\n \n # Check if the number is present inside the board's 3x3 box\n row_start = (row//3)*3\n col_start = (col//3)*3\n \n for num_row in range(row_start, row_start+3):\n  for num_col in range(col_start, col_start+3):\n   if board[num_row][num_col] == num:\n    return False\n \n return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_array_elements(arr): \n    result = [] \n    for string in arr: \n        if string[0] == 'A': \n            result.append(string) \n    return result\n\noutput = filter_array_elements([\"Apple\", \"Grape\", \"Banana\", \"Aeroplane\"])\nprint(output) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def highest_common_factor(a, b):\n    if a == 0 and b == 0:\n        return 0\n    if a > 0 and b > 0:\n        while a != b:\n            if a > b:\n                a = a - b\n            else:\n                b = b - a\n        return a but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class CustomException(Exception):\n    def __init__(self, message):\n        self.message = message\n    def __str__(self):\n        return self.message\n\ndef divide(x, y):\n    try:\n        result = x // y\n    except ZeroDivisionError:\n        raise CustomException(\"Division by zero is not allowed\")\n    else:\n        return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\nimport uuid\nimport hashlib\n\napp = Flask(__name__)\n\n@app.route('/register', methods=['POST'])\ndef register():\n # Get form data\n data = request.get_json()\n public_id = str(uuid.uuid4())\n username = data['username']\n password = data['password']\n hashed_password = hashlib.sha256(password.encode()).hexdigest()\n \n # Create new user\n user = User(public_id, username, hashed_password)\n db.session.add(user)\n db.session.commit()\n \n return jsonify({'public_id': public_id})\n\n@app.route('/authenticate', methods=['POST'])\ndef authenticate():\n data = request.get_json()\n username = data['username']\n password = data['password']\n \n user = User.query.filter_by(username=username).first()\n \n if user and hashlib.sha256(password.encode()).hexdigest() == user.password:\n  return jsonify({'public_id': user.public_id})\n\nif name == 'main':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_elements(arr):\n  s = 0\n  for row in arr:\n    s += sum(row)\n  return s\n\narr = [[1,2,3],\n[4,5,6],\n[7,8,9]]\n\nprint(sum_elements(arr))\n\n# Output: 45 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: colors = ['red', 'green', 'blue', 'purple']\nshapes = ['square', 'circle', 'triangle', 'hexagon']\nobjects = [{'color': color, 'shape': shape} for color in colors for shape in shapes]\n\nprint(objects) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def edit_solution(solution, design_pattern):\n if design_pattern == \"MVC\":\n model = \" class Model:\\n def __init__(self):\\n self.list_items = [] \\n\\n\"\n controller = \" class Controller:\\n def __init__(self):\\n self.model = Model() \\n\n def add_item(self, item):\\n self.model.list_items.append(item) \\n\\n\"\n view = \" class View:\\n def input(self):\\n item = input(\\\"Enter the item:\\\")\\n\n return item \\n\\n def output(self, list_items):\\n print(list_items)\\n\"\n edited_solution = solution + model + controller + view\n return edited_solution but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insertion_sort(list_):\n    for i in range(1, len(list_)):\n        temp = list_[i]\n\n        j = i-1\n        while j >= 0 and temp < list_[j]:\n            list_[j+1] = list_[j]\n            j -= 1\n        list_[j+1] = temp\n\n    return list_ but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def all_substrings(string):\n# Create empty list to store all substrings \nsubstrings = []\n\n# Find all possible substrings using two nested loops \nfor i in range(len(string)):\n for j in range(i, len(string)):\n  substring = string[i : j + 1]\n  substrings.append(substring)\n\n# Sort the list and return\nsubstrings.sort()\nreturn substrings\n\n# Test\nprint(all_substrings('hello'))\n# Output: ['h', 'he', 'hel', 'hell', 'hello', 'e', 'el', 'ell', 'ello', 'l', 'll', 'llo', 'l', 'lo', 'o'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(nums):\n    max = nums[0]\n    for num in nums[1:]:\n        if num > max: \n            max = num\n    return max\n\nprint(find_max([12, 34, 23, 45, 13, 65, 66])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_words_from_string(string):\n    \"\"\"This function will return a list of words from the given string.\"\"\"\n    words = string.split()\n    return words\n\nstring = \"The quick brown fox jumped over the lazy dog\"\nwords_list = get_words_from_string(string)\nprint(words_list)\n\n# Output:\n# ['The', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import smtplib\n\n# Get the list of customers and their emails\ncustomers = {}\n\n# Configure the SMTP client\nsmtp = smtplib.SMTP('smtp.example.com', 587)\nsmtp.starttls()\nsmtp.login('username', 'password')\n\n# Loop through customers and send an email when their product is available\nfor customer, product in customers.items():\n    if product_available(product):\n        email_message = 'Dear {customer}, \\n\\nYour product has arrived and is now available to purchase. Please visit our website for more details. \\n\\nSincerely, \\nThe Inventory Team'.format(customer=customer)\n\n        # Send the email\n        smtp.sendmail(from_address, customer, email_message) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_fibonacci(n-1) + get_fibonacci(n-2)\n\ndef get_fibonacci_series(start, end):\n    series = []\n    for i in range(start, end+1):\n        series.append(get_fibonacci(i))\n    return series\n\nif __name__ == '__main__':\n    start = 5\n    end = 10\n    result = get_fibonacci_series(start, end)\n    print(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_two_numbers(a, b): \n    c = a + b\n    print(\"sum is \" + str(c))\n\nif __name__ == \"__main__\": \n    sum_of_two_numbers(10, 20) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://en.wikipedia.org/wiki/Gender_inequality\"\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Extract heading\nheading_list = soup.findAll('h1')\nheading = heading_list[0].text\n\n# Extract paragraphs\nparagraph_list = soup.findAll('p')\n\n# Parse the paragraphs\ndata = []\nfor paragraph in paragraph_list:\n    if any(x.isalpha() for x in paragraph.text):\n        data.append(paragraph.text)\n\nprint(heading)\nprint(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_1_dict =dict() \nfor i in range(len(list_1)): \n    list_1_dict[i] = list_1[i] \nprint(list_1_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\ndef webcrawler(url):\n    page = requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n\n    for url in soup.find_all('a'):\n        url = url.get('href')\n        if url is not None and url not in visited:\n            visited.add(url)\n            print(url)\n            webcrawler(url)\n            \nwebcrawler('https://www.example.com') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 6):\n    for j in range(5-i):\n        print(\" \", end=\"\")\n    for j in range(2*i-1):\n        print(\"*\", end=\"\")\n    print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\nimport streamlit as st\n\nst.title('Data Visualization App') \nst.header('Create a Bar Chart')\n\n# Get user input\nx_labels = st.text_input('Enter data separated by comma for x-axis:')\ny_values = st.text_input('Enter data separated by comma for y-axis:')\n\n# Convert the data to list\nx_list = x_labels.split(\",\")\ny_list = [int(i) for i in y_values.split(\",\")]\n\n# Draw the chart\nplt.bar(x_list, y_list)\n\n# Render the chart with matplotlib\nst.pyplot() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Classifying this Python function as a Predictive Function. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MultiplicationTable: \n    def __init__(self, num): \n        self.num = num \n          \n    def printTable(self):\n        for i in range(1, 11): \n            print(self.num,\"*\",i,\"=\",self.num * i) but is not the same. just give one example and only return the code."}
