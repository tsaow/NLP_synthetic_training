{"prompt": "make some code that functions the same as the following code: if 60 <= temperature <= 75:\n   print(\"It's Perfect Weather!\")\nelse:\n   print(\"The weather is not so great.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ntext = \"He is an excellent programmer\"\n\ndef find_and_replace(text, pattern, replacement):\n    return re.sub(pattern, replacement, text)\n\nresult = find_and_replace(text, r\"excellent\", \"brilliant\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Python is a powerful, open-source programming language that is both object-oriented and procedural in nature. It focuses on readability of code and simplicity of syntax, enabling developers to quickly and efficiently express concepts with fewer lines of code. It is free to use and popularly used for scripting and automation. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_ascii(text):\n    '''This function will print a given string with each character's ASCII code.'''\n    for ch in text:\n        print(f'{ch} : {ord(ch)}')\n\nprint_ascii('Hello world!')\n\n# Output:\n# H : 72\n# e : 101\n# l : 108\n# l : 108\n# o : 111\n#  : 32\n# w : 119\n# o : 111\n# r : 114\n# l : 108\n# d : 100\n# ! : 33 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.tree import DecisionTreeClassifier\n\n# define the model with the desired parameters\nmodel = DecisionTreeClassifier(criterion='entropy', max_depth=5)\n\n# fit the model with the data\nmodel.fit(X, y)\n\n# make predictions\ny_pred = model.predict(X_new) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def arraySum(arr): \n  sum = 0\n  for sublist in arr: \n    for item in sublist: \n      sum = sum + item \n  return sum \n\nprint(arraySum([[2, 3], [2, 5], [5, 6], [4, 5]])) \n\n# Output: 29 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef remove_special_characters(string):\n    return re.sub('[^A-Za-z0-9]+', '', string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def deleteNode(head, key): \n  \n    # Store head node \n    temp = head \n  \n    # If head node itself holds the key to be deleted \n    if (temp is not None): \n        if (temp.data == key): \n            head = temp.next\n            temp = None\n            return head \n  \n    # Search for the key to be deleted, keep track of the \n    # previous node as we need to change 'prev.next' \n    while(temp is not None): \n        if temp.data == key: \n            break \n        prev = temp \n        temp = temp.next\n  \n    # if key was not present in linked list \n    if (temp == None): \n        return head \n  \n    # Unlink the node from linked list \n    prev.next = temp.next\n  \n    temp = None\n  \n    return head but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generateEven():\n    even_int = random.randint(0,10)\n    if(even_int % 2 == 0):\n        return even_int\n    else:\n        return generateEven()\n\nprint(generateEven()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_max_min(numbers):\n    max_val = numbers[0]\n    min_val = numbers[0]\n    for n in numbers:\n        if n > max_val:\n            max_val = n\n        if n < min_val:\n            min_val = n\n    return (max_val, min_val) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_palindrome_substrings(s):\n    # Create a boolean matrix to store the values\n    matrix = [[False for _ in range(len(s))] for _ in range(len(s))]\n\n    # Initialize the substrings with length 1\n    for i in range(len(s)):\n        matrix[i][i] = True\n\n    # Initialize the substrings with length 2\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            matrix[i][i+1] = True\n\n    # Iterate through the string and find the substrings\n    for substring_length in range(3, len(s) + 1):\n        for i in range(0, len(s) - substring_length + 1):\n            j = i + substring_length - 1\n            if s[i] == s[j] and matrix[i+1][j-1]:\n                matrix[i][j] = True\n\n    # Iterate through the matrix and count the palindrome substrings\n    count = 0\n    for row in matrix:\n        for elem in row:\n            if elem:\n                count += 1\n\n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n  def __init__(self, id, name):\n    self.id = id\n    self.name = name\n\n  def get_id(self):\n    return self.id\n\n  def get_name(self):\n    return self.name but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\nlength = 8\n\nchars = string.ascii_letters + string.digits + string.punctuation\npassword = ''.join(random.choice(chars) for _ in range(length))\n\nprint(password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_dict(n):\n    my_dict = {}\n    for num in range(1, n+1):\n        my_dict[num] = num * num\n    return my_dict\n\nprint(generate_dict(8)) # {1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None\n\ndef detect_loop(head):\n  fast_ptr = head\n  slow_ptr = head\n\n  while (slow_ptr and fast_ptr and fast_ptr.next):\n      slow_ptr = slow_ptr.next\n      fast_ptr = fast_ptr.next.next\n      if slow_ptr == fast_ptr:\n          return slow_ptr\n\n  return None\n\ndef remove_loop(head, loop_ptr):\n  slow_ptr = head\n  fast_ptr = loop_ptr\n\n  while (slow_ptr != fast_ptr):\n      slow_ptr = slow_ptr.next\n      fast_ptr = fast_ptr.next\n\n  prev_slow_ptr = None\n  while (slow_ptr != fast_ptr):\n    prev_slow_ptr = slow_ptr\n    slow_ptr = slow_ptr.next\n    fast_ptr = fast_ptr.next\n\n  prev_slow_ptr.next = None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_dict = {1:'one', 2:'two', 3:'three', 4:'four', 5:'five', 6:'six',\n           7:'seven', 8:'eight', 9:'nine', 10:'ten'}\n\nfor key, value in my_dict.items():\n   print(key, '->', value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def concat_strings(str1, str2):\n  return str1 + str2\n\nresult = concat_strings(\"Hello \", \"World!\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort(arr):\n swapped = True\n while swapped:\n swapped = False\n for i in range(len(arr) - 1):\n if arr[i] > arr[i + 1]:\n arr[i], arr[i + 1] = arr[i + 1], arr[i]\n swapped = True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def concat_lists(list1, list2):\n    return [x for t in zip(list1, list2) for x in t]\n\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\nprint(concat_lists(list1, list2)) # [1, 4, 2, 5, 3, 6] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b \n\nprint(fibonacci(5)) # 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_character_frequency(string):\n    freq = {} \n    for i in string: \n        if i in freq: \n            freq[i] += 1\n        else: \n            freq[i] = 1\n    return freq\n \n# example\nstring = \"abbccccdddde\"\nprint(find_character_frequency(string))\n# Output: {'a': 1, 'b': 2, 'c': 4, 'd': 4, 'e': 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(x):\n    result = 1\n    for i in range(1,x+1):\n        result = result*i\n    return result\n    \nprint(factorial(5)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def create_poem(words):\n    poem = \"\"\n    for word in words:\n        poem += word + \"\\n\"\n\n    poem += \"\\nSleep, dream and beauty\\nReality shatters in life\\nWhere dreams forevermore dwell\"\n    return poem\n\nprint(create_poem([\"Sleep\", \"Dream\", \"Reality\", \"Beauty\", \"Life\"])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student(object):\n\n    def __init__(self, name, age, address):\n        self.name = name\n        self.age = age\n        self.address = address but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_numbers(a,b): \n    try:\n        return a + b\n    except TypeError as e:\n        print(e)\n        return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def rolling_average(arr):\n    last_three = arr[-3:]\n    return sum(last_three) / len(last_three)\n\nmylist = [10, 20, 30, 40, 50]\nrolling_avg = rolling_average(mylist)\nprint(\"Rolling average:\", rolling_avg)\n\n# Output:\n# Rolling average: 33.333333333333336 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quickSort(arr): \n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[0]\n        lessThanPivot = [x for x in arr[1:] if x < pivot]\n        moreThanPivot = [x for x in arr[1:] if x >= pivot]\n        sortedArray = quickSort(lessThanPivot) + [pivot] + quickSort(moreThanPivot)\n        return sortedArray but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_dict = {'a': 1, 'b': 2, 'c': 3}\nmy_list = list(my_dict.items())\n\n# Test\nprint(my_list) # [('a', 1), ('b', 2), ('c', 3)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_to_string(my_list):\n  return ' '.join(my_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_string(string):\n sorted_string = sorted(string)\n return ''.join(sorted_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum(num1, num2): \n    return num1 + num2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn import svm\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# define features (height, age) and labels (gender)\nX = [[180, 25], [170, 27], [150, 40], [145, 37], [177, 23]]\ny = ['male', 'female', 'female', 'male', 'female']\n\n# create model \nsvm_model = svm.SVC(gamma='auto', decision_function_shape='ovo')\nknn_model = KNeighborsClassifier(n_neighbors=5)\n\n# train and predict\nsvm_model.fit(X, y)\npred = svm_model.predict([[160, 32]])\nknn_model.fit(X, y)\npred_knn = knn_model.predict([[160, 32]])\n\nprint(pred)\nprint(pred_knn) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printPrimeFactors(n):\n    # Print the number of 2s that divide n\n    while n % 2 == 0:\n        print(2, end=\" \")\n        n = n/2\n  \n    # n must be odd at this point.  So we can skip\n    # one element (note i = i + 2) \n    for i in range(3, int(math.sqrt(n))+1, 2):\n        # While i divides n, print i and divide n\n        while n % i == 0:\n            print(i, end=\" \")\n            n = n/i\n    # This condition is to handle the case when n\n    # is a prime number greater than 2\n    if n > 2:\n        print(n, end=\" \") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class PrimeNumberChecker(object):\n\n    def is_prime(self, number):\n        if number < 2:\n            return False\n        for i in range(2, number):\n            if number % i == 0:\n                return False\n        return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/weather/<city>')\ndef get_weather(city):\n url = \"https://api.openweathermap.org/data/2.5/weather?q=\" + city + \"&appid=xxx\"\n response = requests.get(url)\n if response.status_code == 200:\n  data = response.json()\n  return jsonify({\n   'current_temperature': data['main']['temp']\n  })\n else:\n  return jsonify({'message': 'Error connecting to openweathermap API'}), 400\n\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier \n\n# Define the hyperparameters to optimize\nparam_grid={\n 'n_estimators': np.arange(2, 30, 2),  \n 'max_depth': np.arange(2, 12, 2),  \n 'min_samples_leaf': np.arange(1, 10, 2)\n}\n\n# Create GridSearchCV model object with the hyperparameters\nmodel = GridSearchCV(RandomForestClassifier(), param_grid, verbose=2, cv=3) \n\n# Fit the model to the data\nmodel.fit(X, y) \n\n# Print out the best estimator\nprint(model.best_estimator_) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fib(n):\n    \"\"\"Print a Fibonacci series up to n\"\"\"\n    result = []\n    a = 0\n    b = 1\n    while b < n:\n        result.append(b)\n        tmp_a = a\n        a = b\n        b = tmp_a + b\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import copy\n\noriginal_dict = {'a': 1, 'b': 2}\n\nshallow_copy_dict = copy.copy(original_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def f_Fibonacci(n): \n  a = 0\n  b = 1\n  if n < 0: \n    print(\"Incorrect input\") \n  elif n == 0: \n    return a \n  elif n == 1: \n    return b \n  else: \n    for i in range(2,n): \n      c = a + b \n      a = b \n      b = c \n    return b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def prime_nums(start, end):\n    res = [] \n    for num in range(start, end + 1): \n       if num > 1: \n            for i in range(2, num): \n                if (num % i) == 0: \n                    break\n            else: \n                res.append(num) \n\n    return res\n\nresult = prime_nums(10, 25)\nprint(', '.join(str(r) for r in result)) # prints 11, 13, 17, 19, 23 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import keras \nfrom keras.datasets import mnist \nfrom keras.models import Model \nfrom keras.layers import Input, Dense, Dropout, Flatten \nfrom keras.layers import Conv2D, MaxPooling2D \n\ndef create_model():\n    # Define the input layer\n    inputs = Input(shape=(28, 28, 1))\n    \n    # 1st convolutional layer\n    conv = Conv2D(64, kernel_size=3, activation='relu')(inputs) \n    # 2nd convolutional layer \n    conv = Conv2D(32, kernel_size=3, activation='relu')(conv) \n    # Max pooling layer \n    pool = MaxPooling2D(pool_size=(2, 2))(conv) \n    # Dropout layer \n    drop = Dropout(0.25)(pool) \n    # Flatten layer \n    flatten = Flatten()(drop) \n    # Dense layer \n    dense = Dense(128, activation='relu')(flatten) \n    # Output layer \n    outputs = Dense(10, activation='softmax')(dense) \n    \n    # Create a model and compile it \n    model = Model(inputs, outputs) \n    model.compile(loss='categorical_crossentropy', metrics=['accuracy'], optimizer='adam')\n    \n    return model but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import collections\nimport re\n\ndef find_most_common_words(text):\n    # remove special characters\n    clean_text = re.sub('[^a-zA-Z]+', ' ', text)\n    \n    # tokenize\n    words = clean_text.split(' ')\n    \n    # get counts\n    counts = collections.Counter(words)\n    \n    # get most common\n    most_common = counts.most_common()\n    \n    # print most common words\n    for word, count in most_common:\n        print(word + ' : ' + str(count)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class StudentGrades:\n    def __init__(self, grades=[]):\n        self.grades = grades\n    \n    def add_grade(self, grade):\n        self.grades.append(grade)\n\n    def delete_grade(self, index):\n        del self.grades[index]\n\n    def update_grade(self, index, new_grade):\n        self.grades[index] = new_grade but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nGenerate random data and create a scatterplot\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate 1000 random points\nnp.random.seed(0)\nx = np.random.rand(1000)\ny = np.random.rand(1000)\n\n# Create a scatter plot\nplt.scatter(x,y)\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num): \n    if num > 1: \n       for i in range(2,num): \n           if (num % i) == 0: \n               return False \n       else: \n           return True\n    else: \n       return False\n\nnumbers = [2, 4, 7, 11, 13]   \nfor num in numbers: \n    if is_prime(num): \n        print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Importing the libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n\n# Loading the dataset\ndataset = pd.read_csv('iris.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, 4].values\n\n# Splitting the dataset into the Training set and Test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n\n# Fitting the Decision Tree to the dataset\nclassifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)\n\n# Predicting the Test set result\ny_pred = classifier.predict(X_test)\n\n# Calculating the accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint(accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a basic point-of-sale system in Python\n\"\"\"\n\n# Define a class for a Point of Sale (POS) system\nclass PointOfSale:\n \n  # Constructor to initialize the POS\n  def __init__(self):\n    self.total = 0 # Total amount\n    self.products = [] # List of products purchased\n \n  # Add a product to the list and calculate the total\n  def addProduct(self, product):\n    self.products.append(product)\n    self.total += product.price\n \n  # Print out the list of products purchased and the total amount\n  def printReceipt(self):\n    print(\"List of Products:\")\n    for product in self.products:\n        print(\"{} - {:.2f}\".format(product.name, product.price))\n    print(\"Total Amount: {:.2f}\".format(self.total))\n \n# Define a class for products\nclass Product:\n \n  # Constructor to initialize the product\n  def __init__(self, name, price):\n    self.name = name\n    self.price = price\n \n# Create some products\nproduct1 = Product(\"Apple\", 5.25)\nproduct2 = Product(\"Banana\", 3.00)\n \n# Create a POS System\npos = PointOfSale()\n \n# Add products to the POS\npos.addProduct(product1)\npos.addProduct(product2)\n \n# Print out the receipt\npos.printReceipt() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_dicts_by_keys(dct1, dct2):\n    result = {}\n    keys = sorted(list(dct1.keys()) + list(dct2.keys()))\n    for key in keys:\n        if key in dct1:\n            result[key] = dct1[key]\n        else:\n            result[key] = dct2[key]\n        \n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n def __init__(self, val):\n self.val = val\n self.left = None\n self.right = None\n\ndef findMaxValue(root):\n if root is None:\n return None\n \n if root.right is None:\n return root.val\n \n return findMaxValue(root.right)\n\n# Usage example\nroot = Node(3)\nroot.left = Node(2)\nroot.right = Node(5)\n\nmaxValue = findMaxValue(root)\nprint('Max Value:', maxValue) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 10):\n    for j in range(1, i):\n        print(\"*\", end=\"\")\n    print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = \"This is a sample string.\"\n\n# Split the string into individual words\nwords = string.split()\n\n# Track the frequency of each word\nword_freq = {}\nfor word in words:\n if word in word_freq:\n word_freq[word] += 1\n else:\n word_freq[word] = 1\n\n# Sort the words by frequency\nsorted_words = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)\n\n# Print the five most common words\ncommon_words = sorted_words[:5]\nfor word, freq in common_words:\n print(f'{word}: {freq}')\n\n# Output: \n# this: 1\n# is: 1\n# a: 1\n# sample: 1\n# string: 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_unique_chars(char_array):\n    char_set = set() \n    for char in char_array: \n        char_set.add(char) \n    \n    counting_dict = {} \n    for char in char_set: \n        counting_dict[char] = 0\n        for character in char_array: \n            if char == character: \n                counting_dict[char] += 1\n    \n    return counting_dict\n\nchar_array = [\"a\", \"b\", \"c\", \"a\", \"d\", \"e\", \"c\"]\n\ncounting_dict = count_unique_chars(char_array)\nprint(counting_dict)\n# {'c': 2, 'e': 1, 'a': 2, 'b': 1, 'd': 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef sort_numbers(lst):\n    nums = random.sample(lst, 3)\n    nums.sort(reverse=True)\n\n    return nums\n\nnums = [4, 7, 9, 11, 33, 2]\nsorted_nums = sort_numbers(nums)\n\nprint(sorted_nums) # [33, 11, 9] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 11):\n  for j in range(1, 11):\n    print(f\"{i} x {j} = {i * j}\")\n  print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def permutations(string): \n    if string == \"\": \n        return [''] \n          \n    prev_list = permutations(string[1:]) \n    next_list = [] \n    char = string[0] \n    for word in prev_list: \n        for j in range(len(word) + 1): \n            next_list.append(word[:j] + char + word[j:]) \n    return next_list \n\nstring = \"abc\"\nperm_list = permutations(string) \nprint (perm_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pymongo\n\ndef fetchRecords(host, port, database_name, collection_name):\n    client = pymongo.MongoClient(host, int(port))\n    db = client[database_name]\n    collection = db[ collection_name ]\n    records = collection.find({})\n    return records but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.corpus import stopwords\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Prepare data\ntrain_data = # your train data\ntrain_labels = # your train label\ntest_data = # your test data\n\n# Build a bag of words model\nvectorizer = CountVectorizer(stop_words=stopwords.words('english'))\ntrain_data_features = vectorizer.fit_transform(train_data)\n\n# Train a Naive Bayes classifier\nnb_classifier = MultinomialNB().fit(train_data_features, train_labels)\n\n# Test the classifier\ntest_data_features = vectorizer.transform(test_data)\npredictions = nb_classifier.predict(test_data_features) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport bs4\n \nurl = \"https://www.imdb.com/title/tt0816692/reviews?ref_=tt_urv\"\npage = requests.get(url).text\nsoup = bs4.BeautifulSoup(page, 'html.parser')\n\nreviews = soup.find_all(class_=\"text show-more__control\")\nfor review in reviews:\n    print(review.get_text()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\nimport random\n\nclass Chatbot:\n    # constructor\n    def __init__(self):\n        self.responses = {\n            # greetings\n            \"hi\": [\"Hello!\", \"Hi!\", \"Hey!\", \"Hi there!\"],\n            \"hello\": [\"Howdy!\", \"Hey!\", \"Hey there!\"],\n            # farewells\n            \"bye\": [\"Goodbye!\", \"Bye!\", \"See you later!\"],\n            \"goodbye\": [\"Bye!\", \"Farewell!\", \"See you later!\"],\n            # general\n            \"thanks\": [\"You're welcome!\", \"It was my pleasure!\", \"No problem!\"]\n        }\n    \n    # tokenizes the input\n    def tokenize_input(self, input_text):\n        return re.split(\" \", input_text.lower())\n    \n    # checks if a given word exists in the responses\n    def is_valid_input(self, word):\n        return word in self.responses\n    \n    # main rule-based chatbot logic\n    def chatbot_response(self, input_text):\n        tokenized_input = self.tokenize_input(input_text)\n        \n        if any([self.is_valid_input(word) for word in tokenized_input]):\n            # select a random valid response\n            random_index = random.randint(0, len(self.responses[tokenized_input[0]]) - 1)\n            return self.responses[tokenized_input[0]][random_index]\n        else:\n            return \"I'm sorry, I don't understand.\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n): \n if n == 0:\n return 0\n elif n == 1:\n return 1\n else:\n return fibonacci(n - 1) + fibonacci(n - 2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_sum(number, nums):\n    result_list = []\n\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == number:\n                result_list.append([nums[i], nums[j]])\n\n    return result_list\n\nresult = find_sum(number, nums) \nprint(result) # [[1, 4], [2, 3]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import base64\n\ndef decode_base64(string):\n    decoded_string = base64.b64decode(string).decode('utf-8')\n    return decoded_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def join_list_str(list_str, delimiter):\n  return delimiter.join(list_str)\n\nlist_str = [\"Apple\", \"Orange\", \"Mango\"]\ndelimiter = \",\"\n\nresult = join_list_str(list_str, delimiter)\n\nprint(result)\n\n# Output\nApple,Orange,Mango but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nA Python function to determine whether two given strings are anagrams of each other\n\"\"\"\ndef check_anagram(string1, string2): \n    # If the strings are not of equal length, they cannot be anagrams\n    if len(string1) != len(string2): \n        return False\n\n    # Dictionary to store characters and their frequencies\n    dictionary = {} \n\n    # Store the frequency of the characters of the first string to the dictionary\n    for char in string1:  \n        if char in dictionary: \n            dictionary[char] += 1\n        else: \n            dictionary[char] = 1\n\n    # Iterate over the characters in the second string \n    for char in string2:  \n        # If the character is not in the dictionary, then the string cannot an anagram\n        if char in dictionary:  \n            dictionary[char] -= 1\n        else: \n            return False\n\n    # Check if all the frequencies have been reduced to 0\n    for i in dictionary.values(): \n        if i != 0: \n            return False\n\n    return True\n    \nif __name__ == '__main__':\n    string1 = \"Stop\"\n    string2 = \"post\"\n    print(check_anagram(string1, string2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def square(num):\n    return num**2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name, age, marks):\n        self.name = name\n        self.age = age\n        self.marks = marks\n\n    def get_name(self):\n        return self.name\n\n    def get_age(self):\n        return self.age\n\n    def get_marks(self):\n        return self.marks but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python code to convert a string \n# to a list of words \n\n# Split a string by a delimiter \ndef string_split(string): \n    # Split the string into words \n    words = string.split(' ') \n  \n    return words \n      \n# Driver code \nstring = \"Hello there, how are you?\"\nprint(string_split(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com/'\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\ndata = soup.findAll('div', class_='data-element')\n\nfor datum in data:\n # extract data and process it\n print(datum.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def encrypt(string, shift):\n    encrypted_string = \"\"\n \n    for char in string:\n        if char == ' ':\n            encrypted_string += char\n        else:\n            encrypted_ascii = ord(char) + shift\n            if encrypted_ascii > ord('z'):\n                encrypted_ascii -= 26\n            encrypted_string += chr(encrypted_ascii)\n \n    return encrypted_string\n\ndef decrypt(encrypted_string, shift):\n    decrypted_string = \"\"\n \n    for char in encrypted_string:\n        if char == ' ':\n            decrypted_string += char\n        else:\n            decrypted_ascii = ord(char) - shift\n            if decrypted_ascii < ord('a'):\n                decrypted_ascii += 26\n            decrypted_string += chr(decrypted_ascii)\n    return decrypted_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: [x**2 for x in [1, 2, 3, 4, 5, 6] if x % 2 != 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def extract_unique_words(text): \n    # split the string into words \n    words = text.split() \n  \n    # loop for each word in words \n    for i in range(0, len(words)): \n  \n        # compare words \n        for j in range(i+1, len(words)): \n  \n            # if a match is found \n            if (words[i] == words[j]): \n  \n                # delete the word found at jth index \n                words.pop(j) \n  \n    # return the unique words list  \n    return words\n\nunique_words = extract_unique_words(text)\nprint(unique_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: lst = [1, 2, 3, \"a\", \"b\", \"c\", 4, 5]\n\nnew_lst = []\n\nfor item in lst:\n    if not isinstance(item, int):\n        new_lst.append(item)\n\nprint(new_lst) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optiFunc(n):\n    result = n * (n-1) / 2 \n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def email_classification(email):\n    email_type = \"\"\n    if 'ShippingConfirmation' in email:\n        email_type = 'Shipping Confirmation'\n    elif 'Subscriber' in email:\n        email_type = 'Subscriber'\n    elif 'CommentResponse' in email:\n        email_type = 'Comment Response'\n    else:\n        email_type = 'Unknown'\n\n    return email_type\n\nemails = [\n    'ShippingConfirmation@example.com', \n    'Subscriber@example.com', \n    'CommentResponse@example.com'\n]\n\nfor email in emails:\n    print(email_classification(email)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def frequency(string):\n freq = {}\n for c in string:\n if c not in freq:\n freq[c] = 1\n else:\n freq[c] += 1\n return freq\n\nstring = input('Please enter your string: ')\nprint(frequency(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def word_count(string):\n words = string.split()\n return len(words)\n\nprint(word_count(\"This is a sentence\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_separator(str, separator): \n    # Initialise the output list \n    output = [] \n  \n    # Split the string on the set separator\n    words = str.split() \n      \n    # Iterate through all words in the list\n    for word in words: \n  \n        # Append the word along with a separator\n        output.append(word + separator) \n      \n    # Return the output\n    return ''.join(output) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_strings(arr):\n    arr_lower = [element.lower() for element in arr]\n    sorted_lower = sorted(arr_lower)\n\n    sorted_arr = [arr[arr_lower.index(element)] for element in sorted_lower]\n\n    return sorted_arr\n\narr = [\"Apple\", \"banana\", \"APple\"]\nsorted_arr = sort_strings(arr)\nprint(sorted_arr) # prints [\"APple\", \"Apple\", \"banana\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_numbers(start, end):\n    return random.randint(start, end)\n\nresult = generate_random_numbers(1,10)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Calculator:\n    def __init__(self, num1, num2, num3):\n        self.num1 = num1\n        self.num2 = num2\n        self.num3 = num3\n\n    def total(self):\n        return self.num1 + self.num2 + self.num3\n\n    def average(self):\n        return self.total() / 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicate(list): \n\treturn list(set(list)) \n\nremove_duplicate([1,1,2,3,4,4]) #returns [1, 2, 3, 4] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: text = text.replace(word, replacement)\nprint(text)\n# Output: The quick brown cat jumps over the lazy dog but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def second_largest(lst):\n    sorted_list = sorted(lst)\n    return sorted_list[-2]\n\nresult = second_largest(lst)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import Libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\n\n# Read in the auto dataset\ndf = pd.read_csv('auto.csv')\n\n# Get the features and labels\nX = df.drop(columns='mpg')\ny = df['mpg']\n\n# Split into train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Create the linear regressor\nlr = LinearRegression()\n\n# Train the model\nlr.fit(X_train,y_train)\n\n# Get the predictions\npreds = lr.predict(X_test)\n\n# Calculate the R2 score\nr2 = r2_score(y_test, preds) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password():\n    # Generate a random password\n    password = \"\"\n    char_sets = [string.ascii_lowercase, string.ascii_uppercase, string.digits, string.punctuation]\n    char_set_length = len(char_sets)\n    for _ in range(16):\n        char_set_index = random.randint(0, char_set_length - 1)\n        char_set = char_sets[char_set_index]\n        password += random.choice(char_set)\n    # Return the generated password\n    return password but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: name = input(\"What's your name: \")\nage = int(input(\"How old are you: \"))\n \nif age < 18:\n  print(\"Hello, \"+ name + \", welcome to our website.\")\nelif age < 60:\n  print(\"Greetings, \"+ name + \", how can we help you today?\")\nelse:\n  print(\"Welcome, \"+ name + \", thanks for visiting us.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_gender(name):\n genders = {\n 'male': ['john', 'peter', 'mark'],\n 'female': ['alice', 'anna', 'jane']\n }\n for key, names in genders.items():\n if name in names:\n return key\n return 'unknown' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPrime(num):\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nn = int(input(\"Enter any positive integer: \"))\n\nprint(\"Prime numbers up to\", n, \"are:\")\nfor i in range(2, n+1):\n    if isPrime(i):\n        print(i, end = \" \") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \nfrom bs4 import BeautifulSoup \nimport re\n\n# Fetch the web page \npage = requests.get(\"THE_WEBPAGE_URL\") \n# Parse the content of the page\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Find all visible text in the page \ntext = soup.find_all(text=True)\n\n# Remove text inside scripts and style tags\nfor t in text: \n    if t.parent.name in ['style', 'script', 'head', 'title', 'meta', '[document]']: \n        text.remove(t)\n\n# Remove extra spaces\ntext_string = \" \".join(text)\ntext_string = re.sub('\\s+', ' ', text_string)\n\n# Count the total number of words \nword_count = len(text_string.split()) \n\nprint(\"Total number of words:\", word_count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def normalize_vector(v):\n  norm = 0\n  for x in v:\n    norm += x**2\n  norm = norm**0.5\n  for i in range(len(v)):\n    v[i] = v[i] / norm\n  return v\n\nresult = normalize_vector([2, 3, 4])\nprint(result) # [0.37139068, 0.55708601, 0.74278135] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_words_of_length_n(words, n):\n    \"\"\"\n    Finds all words of length n.\n\n    Parameters:\n    words (list): the list of words\n    n (int): the given number\n\n    Returns:\n    list: list of words of length n\n    \"\"\"\n\n    result = []\n\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def score_similarity(str1, str2):\n    n = len(str1)\n    m = len(str2)\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[n][m] / (n + m) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculater(num1, num2, operator):\n\nif operator == '+':\n return num1 + num2\nelif operator == '-':\n return num1 - num2\nelif operator == '*':\n return num1 * num2\nelif operator == '/':\n return num1 / num2\n\nprint('Sum:', calculater(3, 4, '+'))\nprint('Subtraction:', calculater(3, 4, '-'))\nprint('Multiplication:', calculater(3, 4, '*'))\nprint('Division:', calculater(3, 4, '/')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_integer(arr):\n    \"\"\"\n    Args :\n        arr (list): List of integer\n    \n    Returns :\n        int : Sum of integers\n    \"\"\"\n    \n    res = 0\n    \n    for num in arr:\n        res += num\n    \n    return res\n\nsum_integer([5, 2, 8, 4, 23])\n# output: 42 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pyramid(height): \n \n    # Dot symbol for each row\n    dots = \".\"\n  \n    # loop for printing the pyramid\n    for i in range(height): \n        # insert spaces\n        for j in range(height-i-1): \n            print(\"  \", end='') \n        for j in range(i+1): \n            # print dots and concatenate\n            print(dots + \" \", end='') \n            dots += \"..\"\n  \n        # moving to the new line \n        print(\"\\r\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score\n\n# Load the Iris dataset\ndataset = datasets.load_iris()\n\n# Creating a feature matrix\nX = dataset.data\n\n# Creating a target vector\ny = dataset.target\n\n# Splitting data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state = 0)\n\n# Training a Naive Bayes classifier\nclf = GaussianNB()\nclf.fit(X_train, y_train)\n\n# Making predictions\ny_pred = clf.predict(X_test)\n\n# Checking the accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint(accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\ndata = [\n    ['Atlanta', 1500],\n    ['Boston', 3000],\n    ['Los Angeles', 2500],\n    ['New York', 4000],\n    ]\n\ncity = [x[0] for x in data]\ncars = [x[1] for x in data]\n\nplt.bar(city, cars)\nplt.xlabel('City')\nplt.ylabel('Number of cars')\nplt.title('Number of cars in each city')\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nConstruct a neural network in Python to predict the price of Bitcoin for the next 5 days\n\"\"\"\n\nimport numpy as np\n#import matplotlib.pyplot as plt\nimport pandas as pd\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom sklearn.preprocessing import MinMaxScaler\n\n# Load the dataset\ndataset = pd.read_csv('BTC-USD.csv')\n\n# Get the values\nclosing_prices = dataset.iloc[:, [4]].values\n\n# Normalize the data\nscaler = MinMaxScaler(feature_range=(0, 1))\nprices_scaled = scaler.fit_transform(closing_prices)\n\n# Create the input data for the model\nX, Y = [], []\nfor i in range(30, len(prices_scaled)):\n    X.append(prices_scaled[i-30:i, 0])\n    Y.append(prices_scaled[i, 0])\nX, Y = np.array(X), np.array(Y)\n\n# Reshape the input\nX = np.reshape(X, (X.shape[0], X.shape[1], 1))\n\n# Create the model\nmodel = Sequential()\nmodel.add(LSTM(128, input_shape=(X.shape[1], 1)))\nmodel.add(Dense(1))\nmodel.compile(loss='mse', optimizer='adam')\n\n# Train the model\nmodel.fit(X, Y, epochs=100, batch_size=32)\n\n# Prepare the 5-day prediction data\nprediction_data = prices_scaled[-30:, 0]\nprediction_data = np.reshape(prediction_data, (1, 30, 1))\n\n# Make the 5-day prediction\npredictions = model.predict(prediction_data)\nprediction = scaler.inverse_transform(predictions)\nprint(prediction) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def base_conversion(n, from_base, to_base):\n    # convert from base-10 to from_base\n    rems = []\n    while n > 0:\n        rem = n % from_base\n        rems.append(rem)\n        n //= from_base\n\n    # convert from from_base to to_base\n    result = 0\n    for rem in rems[::-1]:\n        result *= from_base\n        result += rem \n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortDesc(arr):\n    arr.sort(reverse=True)\n    return arr\n\narr = [99, 65, 43, 87, 21]\nprint(sortDesc(arr)) // Output: [99, 87, 65, 43, 21] but is not the same. just give one example and only return the code."}
