{"prompt": "make some code that functions the same as the following code: import random\n\ndataset = {\n 'What is your name?': 'My name is AI Assistant',\n 'What can you do?': 'I can answer questions, perform tasks, and help you with general tasks.',\n 'How can you help me?': 'I can help you with a variety of tasks. Just let me know what you need.'\n}\n\ndef ai_assistant(question):\n\tif question in dataset:\n\t\treturn dataset[question]\n\telse:\n\t\treturn random.choice(list(dataset.values()))\n\nprint(ai_assistant('What can you do?'))\n\n# outputs: I can answer questions, perform tasks, and help you with general tasks. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def encrypt(text):\n    encrypted_text = \"\"\n    for letter in text:\n        if letter.isalpha(): \n            encrypted_text += chr(ord(letter) + 2)\n        else:\n            encrypted_text += letter\n\n    return encrypted_text\n\ntext = \"Hello, world!\"\nencrypted_text = encrypt(text)\nprint(encrypted_text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to find all possible subset sums\n\ndef find_subset_sums(arr):\n    sums = set()\n    for i in range(2**len(arr)):\n        csum = 0\n        for j in range(len(arr)):\n            if i & (1<<j):\n                csum += arr[j]\n        sums.add(csum)\n    return sums but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [10, 15, 7, 8, 12]\narr.sort()\nprint(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def descending_sort(arr): \n    for i in range(len(arr)): \n        for j in range(0, len(arr)-i-1): \n            if arr[j] < arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n  \narr = [4, 5, 2, 6, 1, 3]\n  \ndescending_sort(arr)\n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for year in range(2001,2026):\n    # leap year condition\n    if((year%4 == 0 and year%100 != 0) or year%400 == 0):\n        print(year, end=' ') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(nums):\n  max_num = nums[0]\n  for x in nums:\n    if x > max_num:\n      max_num = x\n  return max_num\n\nprint(find_max([1,9,5,18,21,2])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def delete_element(numbers, element):\n result = []\n for x in numbers:\n if x != element:\n result.append(x)\n return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: String = \"Hello World\"\n\ndef count_characters(str):\n  return len(str)\n\nprint(\"Number of characters in the string:\", count_characters(String)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student: \n    def  __init__(self, name, grade): \n        self.name = name\n        self.grade = grade \n  \n    def getGrade(self): \n        return self.grade but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gen_all_triplets(n):\n    triplets = []\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                triplets.append([i, j, k])\n    return triplets but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseString(s):\n    return s[::-1]\n \ns = \"Hello\"\nprint(reverseString(s)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_matrix():\n matrix = [[0 for _ in range(4)] for _ in range(4)]\n\n for i in range(4):\n  for j in range(4):\n   matrix[i][j] = i + j\n\n return matrix\n\nprint(generate_matrix()) \n# Output: [[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num = 0\nwhile num<=10:\n    if num % 2 == 0:\n        print(num)\n    num+=1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Machine learning model using Python and Scikit-Learn that can classify emails as either spam or ham. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combinations(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append([arr[i], arr[j]])\n    return res\n\nprint(combinations([1, 2, 3])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nfor i in range(10):\n    x = random.randint(1, 100)\n    print(x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nrandom_list = [random.randint(0, 10) for _ in range(10)]\nprint(random_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge(lst1, lst2):\n    merged_list = lst1 + lst2\n    return merged_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import openpyxl\n\ndef createSpreadsheet(name):\n  # Create an Excel workbook\n  workbook = openpyxl.Workbook()\n\n  # Set up the first sheet with the list of expenses\n  expenseSheet = workbook.active\n  expenseSheet.title = 'Expenses'\n  expenseSheet.cell(row=1, column=1).value = 'Item'\n  expenseSheet.cell(row=1, column=2).value = 'Amount'\n\n  # Set up the second sheet with the chart of expenses\n  chartSheet = workbook.create_sheet('Chart')\n  chartSheet.add_data(expenseSheet['A2':'B4'],\n                      from_rows=True,\n                      titles_from_data=True)\n  chartSheet.add_chart(openpyxl.chart.BarChart(), 'C1')\n\n  # Save the workbook\n  workbook.save(name + '.xlsx') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mask_parts_of_string(data_string, mask_char):\n  output_string = \"\"\n  for char in data_string:\n    if char != ' ':\n      output_string += mask_char\n    else:\n      output_string += char\n  return output_string\n\ndata_string = \"This is a demo string\"\nmask_char = '#'\nresult = mask_parts_of_string(data_string, mask_char)\nprint(result) # Outputs but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: X = preprocessing.scale(np.array([[1,2],[2,1],[3,4],[6,7]]))\ny = np.array([1.1,2.2,3.3,4.4])\nmodel = LinearRegression().fit(X, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for num in range(1, 12, 2):\n    print(num, end=\" \") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport tensorflow as tf\nimport keras\nfrom keras.preprocessing import sequence\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Embedding\nfrom keras.layers import LSTM\n\nx_train, y_train = get_data()\nx_test, y_test = get_data()\n\nmax_len = 150 # limit review to 150 words\nx_train = sequence.pad_sequences(x_train, maxlen=max_len)\n\nmodel = Sequential()\n\nmodel.add(Embedding(vocab_size, 32, input_length=max_len))\nmodel.add(LSTM(100))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=3, batch_size=64) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_missing_num(arr):\n    n = len(arr)\n    sum_of_num = (n + 1)*(arr[0] + arr[n-1])/2\n    sum_of_arr = sum(arr)\n    return sum_of_num - sum_of_arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndef parseJSON(json_string):\n    return json.loads(json_string)\n\ndictionary = parseJSON('{\"name\": \"John\", \"age\": 32}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Class_scores = {\n    \"Alan\": [45, 55, 60],\n    \"Beth\" :[75, 84, 91],\n    \"Carla\": [87, 91, 97],\n    \"Dave\": [67, 86, 82]\n}\n\ndef highest_lowest_averages(scores):\n    highest_avg = 0\n    lowest_avg = float(\"inf\")\n    highest_student = None\n    lowest_student = None\n\n    for student, scores in scores.items():\n        avg = sum(scores)/len(scores)\n        if avg > highest_avg:\n            highest_avg = avg\n            highest_student = student\n        if avg < lowest_avg:\n            lowest_avg = avg\n            lowest_student = student\n\n    return highest_student, highest_avg, lowest_student, lowest_avg\n\nhighest_student, highest_avg, lowest_student, lowest_avg = highest_lowest_averages(Class_scores)\n\nprint(\"The highest average score in the class is held by {} with a score of {}.\".format(highest_student, highest_avg))\nprint(\"The lowest average score in the class is held by {} with a score of {}.\".format(lowest_student, lowest_avg)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def second_largest(arr):\n    largest = float(\"-inf\")\n    second_largest = float(\"-inf\") \n    for i in arr:\n        if i > largest:\n            second_largest = largest\n            largest = i\n        elif i > second_largest and i != largest:\n            second_largest = i\n    return second_largest\n\narr = [10, 3, 5, 22, 4]\nprint(second_largest(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\nimport requests\nfrom bs4 import BeautifulSoup\n\n# create sqlite3 DB\nconn = sqlite3.connect('example.db')\ncur = conn.cursor()\n\ncur.execute('CREATE TABLE IF NOT EXISTS ExampleTable (title TEXT, url TEXT)')\n\n# get website page contents\nurl = 'https://example.com/'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# parse data\nlinks = soup.find_all('a')\nfor link in links:\n title = link.string\n url = link['href']\n\n# insert data into DB\ncur.execute('INSERT INTO ExampleTable VALUES (?, ?)', (title, url))\n\nconn.commit()\nconn.close()\n\nprint('Data successfully stored in example.db') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nwords = ['cat', 'dog', 'mouse', 'elephant', 'tiger', 'lion',\n 'giraffe', 'hippo', 'monkey', 'zebra']\n\nusername = random.choice(words) + '_' + random.choice(words)\n\nprint('Username: ' + username) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def func(a, b, c):\n    return a*b + a*c + b*c    # Use an optimized expression for lowest execution time but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"Mission Pinball Framework (mpf) setup.py.\"\"\"\nimport re\nfrom setuptools import setup\n\n#  http://stackoverflow.com/questions/458550/standard-way-to-embed-version-into-python-package\nVERSIONFILE = \"mpf/_version.py\"\nVERSION_STRING_LONG = open(VERSIONFILE, \"rt\").read()\nVSRE = r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\"\n_MO = re.search(VSRE, VERSION_STRING_LONG, re.M)\nif _MO:\n    VERSION_STRING = _MO.group(1)\nelse:\n    raise RuntimeError(\"Unable to find version string in %s.\" % (VERSIONFILE,))\n\npin2dmd_requires = [\n    'pyusb==1.1.0'\n]\n\nlinux_i2c_requires = [\n    'smbus2_asyncio==0.0.5'\n]\n\nrpi_requires = [\n    'apigpio-mpf==0.0.3'\n]\n\ncli_requires = [\n    'prompt_toolkit==3.0.8',\n    'asciimatics==1.12.0',\n    'terminaltables==3.1.0',\n]\n\nosc_requires = [\n    'python-osc==1.7.4'\n]\n\nirc_requires = [\n    'irc==19.0.1'\n]\n\nvpe_requires = [\n    'grpcio_tools==1.34.0',\n    'grpcio==1.34.0',\n    'protobuf==3.14.0',\n]\n\ncrash_reporter_requires = [\n    'requests==2.22.0'\n]\n\n\nall_requires = (pin2dmd_requires + cli_requires + linux_i2c_requires + rpi_requires + osc_requires + irc_requires +\n                vpe_requires + crash_reporter_requires)\n\nsetup(\n\n    name='mpf',\n    version=VERSION_STRING,\n    description='Mission Pinball Framework',\n    long_description='''Let's build a pinball machine!\n\nThe Mission Pinball Framework (MPF) is an open source, cross-platform,\nPython-based software framework for powering real pinball machines.\n\nMPF is written in Python. It can run on Windows, OS X, and Linux\nwith the same code and configurations.\n\nMPF interacts with real, physical pinball machines via modern pinball\ncontroller hardware such as a Multimorphic P-ROC or P3-ROC, a FAST Pinball\ncontroller, or Open Pinball Project hardware controllers. You can use MPF to\npower your own custom-built machine or to update the software in existing\nWilliams, Bally, Stern, or Data East machines.\n\nMPF is a work-in-progress that is not yet complete, though we're actively\ndeveloping it and checking in several commits a week. It's MIT licensed,\nactively developed by fun people, and supported by a vibrant, pinball-loving\ncommunity.''',\n\n    url='https://missionpinball.org',\n    author='The Mission Pinball Framework Team',\n    author_email='brian@missionpinball.org',\n    license='MIT',\n\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Natural Language :: English',\n        'Operating System :: MacOS :: MacOS X',\n        'Operating System :: Microsoft :: Windows',\n        'Operating System :: POSIX :: Linux',\n        'Topic :: Artistic Software',\n        'Topic :: Games/Entertainment :: Arcade'\n\n    ],\n\n    keywords='pinball',\n\n    include_package_data=True,\n    package_data={'': ['*.yaml', '*.png', '*.so', '*.pyd', '*.ogg', '*.wav']},\n\n    # MANIFEST.in picks up the rest\n    packages=['mpf'],\n\n    zip_safe=False,\n\n    install_requires=['ruamel.yaml==0.15.100',\n                      'pyserial==3.5',\n                      'pyserial-asyncio==0.4;platform_system==\"Windows\"',\n                      'pyserial-asyncio==0.5;platform_system!=\"Windows\"',\n                      'sortedcontainers==2.3.0',\n                      'psutil==5.7.3',\n                      ],\n\n    extras_require={\n        'all': all_requires,\n        'pin2dmd': pin2dmd_requires,\n        'linux_i2c': linux_i2c_requires,\n        'rpi': rpi_requires,\n        'cli': cli_requires,\n        'osc': osc_requires,\n        'irc': irc_requires,\n        'vpe': vpe_requires,\n        'crash_reporter': crash_reporter_requires,\n    },\n\n    tests_require=[],\n    test_suite=\"mpf.tests\",\n\n    entry_points={\n        'console_scripts': [\n            'mpf = mpf.commands:run_from_command_line',\n        ]\n    }\n)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def missing_number(arr): \n  n = len(arr) \n  total = (n+1)*(n+2)/2\n  for i in range(n): \n    total -= arr[i] \n  return total\n  \narr = [1,2,4,5]\nprint(\"The missing number is\",int(missing_number(arr))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #tic-tac-toe game\n\n#define the board\nboard = [\"-\", \"-\", \"-\",\n                  \"-\", \"-\", \"-\",\n                  \"-\", \"-\", \"-\"]\n\n#display the board\ndef display_board():\n  print(\" \"+ board[0] + \" | \" +   board[1] + \" | \" + board[2])\n  print(\" \"+ board[3] + \" | \" +   board[4] + \" | \" + board[5])\n  print(\" \"+ board[6] + \" | \" +   board[7] + \" | \" + board[8])\n\n#define function to update the board\ndef update_board(position, player):\n  board[position] = player\n\n#Function to check if the board is full\ndef full_board_check():\n  for i in range(0, 9):\n    if board[i] == \"-\":\n      return False\n  return True\n\n#Function to check if the one of the players has won\ndef win_check(player):\n  return(\n    (board[0] == player and board[1] == player and board[2] == player) or\n    (board[3] == player and board[4] == player and board[5] == player) or\n    (board[6] == player and board[7] == player and board[8] == player) or\n    (board[0] == player and board[3] == player and board[6] == player) or\n    (board[1] == player and board[4] == player and board[7] == player) or\n    (board[2] == player and board[5] == player and board[8] == player) or\n    (board[0] == player and board[4] == player and board[8] == player) or\n    (board[2] == player and board[4] == player and board[6] == player)\n  )\n\n#Function to determine player\ndef determin_player():\n  if turn%2 == 0:\n    return 'X'\n  else:\n    return 'O'\n  \n#Function to handle current player turn\ndef handle_player_turn(player):  \n  selection = int(input('Player '+ player +': Choose a position from 0 - 8: '))\n  valid = False\n  while not valid:\n    while selection not in range(0,9):\n      selection = int(input('Choose a position from 0-8: '))\n\n    if board[selection] == '-':\n      valid = True\n    else:\n      selection = int(input('Choose a valid position from 0 - 8: '))\n\n  update_board(selection,player)\n  display_board()\n\n#Function to start the game\ndef start_game():\n  print('Welcome to Tic Tac Toe')\n  display_board()\n\n  if full_board_check():\n    return\n\n  global turn\n  turn = 0\n\n  while not full_board_check():\n    player = determin_player()\n    handle_player_turn(player)\n    if win_check(player):\n      print('Congratulations ' + player + ': You have won!')\n      break\n    turn+=1\n  if not win_check(player):\n    print('Its a tie')\n\nstart_game() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_primes_less_than(max_value):\n    primes=[]\n    for num in range(2, max_value + 1):\n        is_prime = True\n        for i in range(2, num):\n            if (num % i == 0):\n               is_prime = False\n        if is_prime:\n            primes.append(num) \n    return primes but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\n# Load the data \ndf = pd.read_csv('path/to/data')\n\n# Tokenize the data \ntokenizer = Tokenizer(num_words = 5000, oov_token = \"<OOV>\")\ntokenizer.fit_on_texts(df['text'])\nX = tokenizer.texts_to_sequences(df['text'])\nX = pad_sequences(X, padding = \"post\")\n\n# Set up the classification task \ny = pd.get_dummies(df['sentiment']).values\n\n# Split the data into training and test sets \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)\n\n# Build the model \nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(input_dim = 5000, output_dim = 16),\n    tf.keras.layers.GlobalAveragePooling1D(),\n    tf.keras.layers.Dense(24, activation = 'relu'),\n    tf.keras.layers.Dense(2, activation = 'softmax')\n])\n\nmodel.compile(loss = 'categorical_crossentropy', optimizer = 'adam', metrics = ['accuracy']) \nmodel.fit(X_train, y_train, epochs = 15, validation_data = (X_test, y_test), verbose = 2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_list_items(list):\n    sum = 0\n    for item in list:\n        sum += item\n    return sum\n\nprint(sum_list_items(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Input values\nitems = [\n ['Item 1', 2, 3.00],\n ['Item 2', 5, 1.50]\n]\n\n# Calculate total cost\ntotal_cost = 0\nfor item in items:\n cost = item[1] * item[2]\n total_cost += cost\n\n# Print cost\nprint('Total cost: $' + str(total_cost)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Get the html from the given url\nr = requests.get('https://en.wikipedia.org/wiki/Python_(programming_language)')\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# Count the number of occurrences of the given keyword\ncounter = 0\nfor text in soup.find_all(text=True):\n if 'Python' in text:\n counter += 1\n\nprint('The keyword \"Python\" appears {} times on this page.'.format(counter)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combine(s1, s2):\n    result = \"\" \n    for i in range(max(len(s1), len(s2))):\n        if i < len(s1):\n            result += s1[i]\n        if i < len(s2):\n            result += s2[i]\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef generateRandomMatrix(m, n):\n  return np.random.randn(m, n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python3\n\nimport os\n\nfrom django.contrib.auth.hashers import make_password\nfrom django.http import HttpResponse\nfrom django.shortcuts import render\n\n# Create your views here.\ndef register(request):\n    if request.method == 'POST':\n        user_name = request.POST['username']\n        password = request.POST['password']\n        confirm_password = request.POST['confirm_password']\n\n        if password != confirm_password:\n            return HttpResponse('Passwords do not match')\n\n        users = User.objects.all()\n        if user_name in users:\n            return HttpResponse('Username already taken')\n\n        # Store hashed password\n        password = make_password(password)\n        user = User.objects.create(username=user_name, password=password)\n        user.save()\n        return render(request, 'user_login.html')\n\n    else:\n        return render(request, 'user_registration.html') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: dictionary = {1:'a', 2:'b', 3:'c'}\n\ndoubled = {}\nfor key, value in dictionary.items():\n doubled[key] = value * 2\n\nprint(doubled) # {1: 'aa', 2: 'bb', 3: 'cc'} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string \nimport random \n\ndef secure_password(length): \n password_characters = string.ascii_letters + string.punctuation + string.digits\n password = \"\".join(random.choice(password_characters) for i in range(length)) \n return password \n\nsecure_pw = secure_password(20) \nprint(\"Secure Password:\", secure_pw) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Hello World! but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generateFibonacciSequence(num):\n    a = 0\n    b = 1\n    fib = []\n    for i in range(num):\n        fib.append(a)\n        c = a + b\n        a = b\n        b = c\n    return fib\n\nnum = 10\nprint(generateFibonacciSequence(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def concatTwoBinStrings(str1, str2):\n    str = \"\"\n    for i in (str1 + str2):\n        if i == '0':\n            str += '0'\n        else:\n            str += '1'\n    return str\n\nstr1 = \"10101\"\nstr2 = \"101\"\n\nprint(concatTwoBinStrings(str1, str2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: function selectionSort(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        let minimum = i;\n        for (let j = i+1; j < arr.length; j++) {\n            if (arr[minimum] > arr[j]) {\n                minimum = j;\n            }\n        }\n        let temp = arr[i];\n        arr[i] = arr[minimum];\n        arr[minimum] = temp;\n    }\n    return arr;\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import psycopg2\n\nconn = psycopg2.connect(host=\"localhost\", database=\"testdb\", user=\"postgres\", password=\"<your password>\")\n\ncur = conn.cursor()\n\n# Create table\ncur.execute(\"CREATE TABLE users(id int PRIMARY KEY, username varchar, password varchar)\")\n\n# Insert a record\ncur.execute(\"INSERT INTO users VALUES(1, 'user1', 'password1')\")\n\n# Retrieve data\ncur.execute(\"SELECT * FROM users\")\nrows = cur.fetchall()\nfor row in rows:\n print(\"ID =\", row[0])\n print(\"Username =\", row[1])\n print(\"Password =\", row[2])\n\ncur.close()\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_valid_ip(ip):\n    ip = ip.split('.')\n    if len(ip) != 4:\n        return False\n    for i in ip:\n        if not i.isdigit():\n            return False\n        i = int(i)\n        if i < 0 or i > 255:\n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_revenue(revenue):\n  result = []\n  for n in revenue:\n    if n == 'Revenue':\n      result.append('Classification')\n    elif n < 0:\n      result.append('Loss')\n    elif n >= 0 and n < 1000:\n      result.append('Low')\n    elif n >= 1000 and n < 2000:\n      result.append('Medium')\n    elif n >= 2000 and n <= 3000:\n      result.append('High')\n    else:\n      result.append('Error')\n  return result\n\nrevenue = ['Revenue', '0', '-1000', '2000', '3000']\nresult = classify_revenue(revenue)\nprint(result)\n# Output: ['Classification', 'Low', 'Loss', 'High', 'High'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_common_substring(s1, s2):\n    n1, n2 = len(s1), len(s2)\n    lcs_matrix = [[0]*(n2 + 1) for _ in range(n1 + 1)]\n\n    longest_length, end_of_longest = 0, 0\n    for i in range(1, n1 + 1):\n        for j in range(1, n2 + 1):\n            if s1[i-1] == s2[j-1]:\n                lcs_matrix[i][j] = lcs_matrix[i-1][j-1] + 1\n\n                if lcs_matrix[i][j] > longest_length:\n                    longest_length = lcs_matrix[i][j]\n                    end_of_longest = i\n            else:\n                lcs_matrix[i][j] = 0\n\n    return s1[end_of_longest-longest_length:end_of_longest] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\n# Get form's (POST) data\ndata = {\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"message\": \"Hello\"\n}\n\n# Send POST request\nr = requests.post(\"http://www.example.com/submit-form.php\", params=data)\n\n# Get web form's response\nprint(r.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_area(radius): \n    return math.pi*(radius**2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Patient:\n def __init__(self, name, condition):\n  self.name = name\n  self.condition = condition\n \n def get_name(self):\n  return self.name\n \n def get_condition(self):\n  return self.condition but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn import linear_model\n\n# Initialize the features and target\nX = np.array([[1.1, 1.5], [1.3, 1.9], [1.5, 2.3], [1.7, 2.7], [1.9, 3.1]])\ny = np.array([2.5, 3.2, 4.0, 4.7, 5.4])\n\n# Create the model\nmodel = linear_model.LinearRegression()\n\n# Fit the model\nmodel.fit(X, y)\n\n# Check the model\nprint(model.intercept_)\nprint(model.coef_) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import threading \nimport time \n\t\ndef function(x): \n\ttime.sleep(1) \n\treturn x * x \n\ndef worker(x, i): \t\n\tresult = function(x) \n\tprint(\"Result of\", i, \"is\", result) \n\n# main \ni = 0\n\nwhile i < 5: \n\tt = threading.Thread(target=worker, args=(int(input()), i)) \n\tprint(\"Started thread\", i) \n\tt.start() \n\ti += 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\n\n# Take two inputs from command line \nfirst, second = int(sys.argv[1]), int(sys.argv[2])\n\n# Display the result of multiplication \nprint(f\"Result of {first} * {second} is: {first * second}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: divisible_by_four = [num for num in range(1000) if num % 4 == 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: students_dict = {\n \"John\": 98,\n \"Jennifer\": 95,\n \"Noah\": 87,\n \"Frank\": 92\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import subprocess\n\ndef deploy_application(app_name, manifest_file):\n # Run 'kubectl' command to deploy the application\n result = subprocess.run(\n  ['kubectl', 'apply', '-f', manifest_file],\n  stdout=subprocess.PIPE\n )\n\n# Check the return code\nif result.returncode == 0:\n print(f'Application {app_name} deployed successfully')\nelse:\n print(f'Error deploying application {app_name}: {result.stderr}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def index_of_word(sentence, word):\n    words = sentence.split()\n    for index, value in enumerate(words):\n        if value == word:\n            return index\n    return -1\n\nsentence = \"Python is a programming language.\"\nword = \"language\"\nprint(index_of_word(sentence, word)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longestConsecutive(string):\n max_consecutive = \"\"\n current_consecutive = \"\"\n\n for char in string:\n if current_consecutive == \"\" or current_consecutive[-1] == char:\n current_consecutive += char\n else:\n if len(current_consecutive) > len(max_consecutive):\n max_consecutive = current_consecutive\n \n current_consecutive = char\n\n if len(current_consecutive) > len(max_consecutive):\n max_consecutive = current_consecutive\n\n return max_consecutive\n\nstring = \"aaaaaaabbbccdddee\"\n\nprint(longestConsecutive(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def to_upper(string):\n    return string.upper()\n\nstring = \"Python Programming\"\nprint(to_upper(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = list(dict.fromkeys(my_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def word_set(string, words):\n    words_set = set(words)\n    string_set = set(string)\n    \n    if string_set.issubset(words_set):\n        return True \n    else:\n        return False\n\nword_set(\"justdoit\", [\"just\", \"do\", \"it\"]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import collections\n\nsentence = \"This is a really long sentence with many words.\"\n\n# Split the given sentence into a list of words\nwords = sentence.split(\" \")\n\n# Count the occurrence of each word\nword_freq = collections.Counter(words)\n\n# Print out the top three words\nfor word, count in word_freq.most_common(3):\n    print(f'{word}: {count}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def min_num_iterations(start, end):\n    num_iterations = 0\n\n    while start < end:\n        start += 1\n        num_iterations += 1\n\n    return num_iterations\n\nprint(min_num_iterations(5, 10)) # Output: 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: total = 0\n\nnums = [1, 2, 3, 4]\n\nfor num in nums:\n    total += num\n\nprint(total) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(string):\n    return string[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maxSubArraySum(arr):\n    max_so_far = arr[0]\n    curr_max = arr[0]\n    \n    for i in range(1, len(arr)):\n        curr_max = max(arr[i], curr_max + arr[i])\n        max_so_far = max(max_so_far, curr_max)\n        \n    return max_so_far but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def are_all_characters_unique(string): \n    return len(set(string)) == len(string) \n\n# Driver code \nprint(are_all_characters_unique(\"Hello\")) # Output: false\nprint(are_all_characters_unique(\"abcdef\")) # Output: true but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_even(num): \n    if num % 2 == 0: \n        return True \n    else: \n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\nnp.random.randint(1, 11, size=10)\n# Output: array([7, 4, 9, 9, 2, 2, 4, 7, 1, 5]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: last_name = full_name.split()[1]\nprint(last_name) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Return the pair of numbers that add up to the given sum\ndef two_num_sum(arr, sum):\n  # Store all elements in a set\n  seen = set()\n  \n  # For each element in the array\n  for num in arr:\n    # Calculate the target needed to achieve the sum\n    target = sum - num\n    \n    # if target number exists in the set, return the pair\n    if target in seen:\n      return [num, target]\n      \n    # Add current number to the set\n    seen.add(num)\n\n# Tests \nassert two_num_sum([1,9,7,2,8, 3, 4], 10) == [7,3]\nassert two_num_sum([4,5,6,7,2,3], 16) == [4, 12]\nassert two_num_sum([18,21,5], 6) == None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sinusoidal_wave(x):\n    return np.sin(2*np.pi*x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt \n  \n# x-axis values \nx = [1,2,3,4,5,4,3,2,1] \n  \n# Y-axis values \ny = [1,2,3,4,5,4,3,2,1] \n  \n# Function to plot the histogram \nplt.hist(x, y, histtype = 'bar', rwidth = 0.8) \n  \n# Deifne labels and titles \nplt.xlabel('x') \nplt.ylabel('y') \nplt.title('Histogram') \n  \n# Function to show the plot \nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: let sentence = \"I love coding in Python\";\nlet reversed = sentence.split(\"\").reverse().join(\"\");\nconsole.log(reversed); but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Calculate the Future Value of an Investment \ndef future_value(principal, rate, years): \n\n# Calculate the total amount  \ntotal_amount = principal * (1+(rate/100))**years\n\n# return the future value\nreturn round(total_amount,2)\n\n# Testing \nprint(future_value(10000,10,5)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCalculate the area of different shapes\n\"\"\"\n\ndef calculate_area():\n    # Loop until the user chooses to exit\n    while True:\n        print(\"Choose your shape:\")\n        print(\"1. Rectangle\")\n        print(\"2. Square\")\n        print(\"3. Triangle\")\n        print(\"4. Circle\")\n        print(\"5. Exit\")\n\n        # Get the choice from the user\n        choice = int(input(\"Enter your choice: \"))\n\n        if choice == 1:\n            length = float(input(\"Enter the length: \"))\n            breadth = float(input(\"Enter the breadth: \"))\n            area = length * breadth\n            print(\"Area of the rectangle is:\", area)\n        elif choice == 2:\n            side = float(input(\"Enter the side: \"))\n            area = side * side\n            print(\"Area of the square is:\", area)\n        elif choice == 3:\n            base = float(input(\"Enter the base: \"))\n            height = float(input(\"Enter the height: \"))\n            area = 0.5 * base * height\n            print(\"Area of the triangle is:\", area)\n        elif choice == 4:\n            radius = float(input(\"Enter the radius: \"))\n            area = 3.14 * radius * radius\n            print(\"Area of the circle is:\", area)\n        elif choice == 5:\n            break\n        else:\n            print(\"Invalid input!\")\n\nif __name__ == '__main__':\n    calculate_area() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(list): \n    temp_list = [] \n    for i in list: \n        if i not in temp_list:\n            temp_list.append(i)\n    return temp_list\n\nremove_duplicates(list) # output: [2, 10, 20, 30, 40] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom lxml import html\n\ndef crawl(url):\n page = requests.get(url)\n tree = html.fromstring(page.content)\n\n # Extract the data from the HTML source code\n data = tree.xpath('xpath expression')\n\n # Return the data\n return data\n\n# Crawl multiple URLs\nurls = [url1, url2, ...]\nfor url in urls:\n data = crawl(url)\n \n print(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(l):\n    for i in range(len(l)):\n        for j in range(0, len(l)-i-1):\n            if l[j] > l[j+1]:\n                l[j], l[j+1] = l[j+1], l[j]\n\n# Test code\nl = [64, 34, 25, 12, 22, 11, 90]\nbubble_sort(l)\nprint(l) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import mysql.connector\n\nconn = mysql.connector.connect(host=\"localhost\", port=\"3306\", database=\"myDB\", user=\"root\", password=\"mypassword\")\n\ncursor = conn.cursor()\n\ncursor.execute(\"SELECT * from myTable\")\ndata = cursor.fetchall()\n\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(list, target):\n    \"\"\"\n    This function will implement linear search algorithm in a Python list\n    and return the index of the target value or -1 if the target value is not found.\n    \"\"\"\n    for index, element in enumerate(list):\n        if element == target:\n            return index\n    return -1\n\nif __name__ == '__main__':\n    list = [1, 3, 5, 7, 9]\n    target = 7\n    print(linear_search(list, target)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def permutation(lst, s):\n    if len(lst) == 1:\n        return s\n    else:\n        perm_list = [] \n        for y in permutation(lst[:-1], s): # recursive call \n            for x in lst:\n                if x not in y: # check if element is already in permutation\n                    perm_list.append(y+x)\n        return perm_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import typehints\n\n@typehints.with_hints\ndef template(data):\n    # Retreive the data\n    greeting = data[\"greeting\"]\n    message = data[\"message\"]\n    name = data[\"name\"]\n\n    # Construct the greeting\n    greeting = f\"{greeting}, {name}!\"\n    # Construct the final message\n    message = f\"{greeting} {message}\"\n\n    # Return the message\n    return message\n\n@typehints.hints(\n    data=dict(\n               greeting=str,\n               message=str,\n               name=str\n           )\n)\ndef template_hinted(data):\n    pass # Implement your templating extension but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\nmatrix = np.random.rand(3,3,3) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nnltk.download('vader_lexicon')\n\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentences = [\n \"This is a great movie!\",\n \"This movie was terrible.\"\n]\n\nanalyzer = SentimentIntensityAnalyzer()\n\nfor sentence in sentences:\n scores = analyzer.polarity_scores(sentence)\n print(\"{:-<40} {}\".format(sentence, str(scores))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import zmq\nimport sys\nimport threading\n\n# define constants\nHOST = \"127.0.0.1\"\nPORT = 6680\n\ncontext = zmq.Context()\n\n# Socket 1 \npub = context.socket(zmq.PUB)\npub.bind(\"tcp://%s:%s\" % (HOST, PORT))\n\n# Socket 2\nsub = context.socket(zmq.SUB)\nsub.connect(\"tcp://%s:%s\" % (HOST, PORT))\nsub.setsockopt_string(zmq.SUBSCRIBE, '')\n\n# Function to receive message from subscriber\ndef get_message():\n while True:\n message = sub.recv()\n print(message.decode('utf-8'))\n\n# Start thread\nthread = threading.Thread(target=get_message)\nthread.start()\n\n# Send messages\nwhile True:\n message = input('Say something: ')\n pub.send_string(str(message)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import csv \n\n# Initialize the list of records \ndata = [['apple', 'Washington', 400], \n        ['banana', 'California', 800], \n        ['cherry', 'Texas', 300]]\n\n# Sort the CSV data according to value \ndata.sort(key=lambda x: x[2], reverse=True) \n\n# Print the sorted data \nfor row in data: \n    print(row) \n\n# Output \n['banana', 'California', 800] \n['apple', 'Washington', 400] \n['cherry', 'Texas', 300] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pascal_triangle(n): \n    trow = [1] \n    y = [0] \n    for x in range(max(n,0)): \n        print(trow) \n        trow=[l+r for l,r in zip(trow+y, y+trow)] \n  \n# Driver program to test the above function \nn = 5\npascal_triangle(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n\n# Linked List class contains a Node object \nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n        \n    def push(self, data):\n        # Allocate the Node & Put in the data \n        new_node = Node(data)\n    \n        # Make next of new Node as head \n        new_node.next = self.head\n    \n        # Move the head to point to new Node \n        self.head = new_node \n  \n    # Utility function to print the linked LinkedList \n    def printList(self): \n        temp = self.head \n        while(temp): \n            print(temp.data, end=\" \") \n            temp = temp.next but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(myList):\n    unique_list = []\n    for item in myList:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n\nresult = remove_duplicates(myList)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(a, b): \n    if a == 0: \n        return b \n    return gcd(b % a, a) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [1, -2, 9, 4, -7, 0]\n\n# Initialize variables\nlargest_number = my_list[0]\nsmallest_number = my_list[0]\n\n# Loop through list\nfor number in my_list:\n    # Update variables\n    if number > largest_number:\n        largest_number = number\n    if number < smallest_number:\n        smallest_number = number\n\nprint(\"Largest number:\", largest_number)\nprint(\"Smallest number:\", smallest_number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_character(string, character):\n    return string.replace(character, '')\n\nprint(remove_character(string, character)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef is_prime(n):\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0: \n            return False\n    return True\n\ninput_list = [4, 15, 22, 50, 119]\n\nfor num in input_list:\n    if is_prime(num):\n        print(num)\n\n# Output: \n# 4\n# 15\n# 50\n# 119 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: a = (4 + 2) * 3\nprint(a) but is not the same. just give one example and only return the code."}
