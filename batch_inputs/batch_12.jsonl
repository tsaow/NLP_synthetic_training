{"prompt": "make some code that functions the same as the following code: arr.sort() \nprint(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maxOfTwo Numbers(num1, num2):\n\tif num1 > num2:\n\t\treturn num1\n\telse:\n\t\treturn num2\n\nprint(maxOfTwoNumbers(4, 6)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Establish an SQL connection \nimport sqlite3\nconn = sqlite3.connect(\"mydatabase.db\")\n\n# Create a cursor object \nc = conn.cursor()\n\n# Execute SQL Query \nc.execute(\"SELECT * FROM TABLE\")\n\n# Store the result in a dataframe \nimport pandas as pd\ndf = pd.DataFrame(c.fetchall()) \n\n# Perform some manipulation on the data \n# E.g. Add a new column \ndf['new_col'] = df['old_col1'] + df['old_col2']\n\n# Update the table \ndf.to_sql(\"TABLE\", conn, if_exists='replace', index=False)\n\n# Close connection \nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generateURL(productName, productCategory, productPrice):\n productName = productName.lower().replace(' ', '-')\n productCategory = productCategory.lower().replace(' ', '-')\n return 'https://www.etsy.com/listing/{}-{}-{}/{}'.format(productName, productPrice, productCategory, productName)\n \ngeneratedURL = generateURL('Tulip Breeze Necklace', 'Jewelry', 45)\n# https://www.etsy.com/listing/tulip-breeze-necklace-45-jewelry/tulip-breeze-necklace but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    \n    def area(self):\n        return self.width * self.height but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\ndf = pd.DataFrame(customer_data)\ndf[\"age_category\"] = df[\"age\"].apply(lambda a: \"Young\" if 0 < a <= 20 else \"Middle-aged\" if 21 <= a <= 60 else \"Senior\")\ndf[\"gender_category\"] = df[\"gender\"].apply(lambda g: \"Male\" if g == \"Male\" else \"Female\" if g == \"Female\" else \"Other\")\n\nprint(df) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def centimeter_to_inches(cm):\n    inches = cm * 0.39\n    return inches\n\ncm = 10\ninches = centimeter_to_inches(cm)\nprint(inches) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def checkNum(arr, num):\n    response = []\n    for element in arr: \n        if element > num: \n            response.append('greater than')\n        elif element < num:\n            response.append('less than')\n        else:\n            response.append('equal to')\n    return response\n\nnums = [3,5,7]\nout = checkNum(nums, 4)\nprint(out) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_sentiment(comments):\n    results = []\n    for comment in comments:\n        if \"great\" in comment or \"love\" in comment:\n            results.append(\"positive\")\n        elif \"hate\" in comment or \"bad\" in comment:\n            results.append(\"negative\")\n        else: \n            results.append(\"neutral\")\n    return results\n\nprint(classify_sentiment(comments)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from random import shuffle\nfrom itertools import product\n\ndeck = list(product(['A','2','3','4','5','6','7','8','9','10','J','Q','K'],['C','D','H','S']))\nshuffle(deck)\n\nplayer1_score = 0\nplayer2_score = 0\n\ndef deal_cards(player):\n    card1 = deck.pop()\n    card2 = deck.pop()\n    player.append(card1)\n    player.append(card2)\n    return player\n\nplayer1 = deal_cards([])\nplayer2 = deal_cards([])\n\n# Player 1 turn\nplayer1_score = 0\nfor i in range(len(player1)):\n    card_score = 0\n    if (player1[i][0] == 'A'):\n        card_score = 11\n    elif (player1[i][0] == 'J' or player1[i][0] == 'Q' or player1[i][0] == 'K'):\n        card_score = 10\n    else:\n        card_score = int(player1[i][0])\n        \n    player1_score += card_score\n\n# Player 2 turn\nplayer2_score = 0\nfor i in range(len(player2)):\n    card_score = 0\n    if (player2[i][0] == 'A'):\n        card_score = 11\n    elif (player2[i][0] == 'J' or player2[i][0] == 'Q' or player2[i][0] == 'K'):\n        card_score = 10\n    else:\n        card_score = int(player2[i][0])\n        \n    player2_score += card_score\n\n# Checking the winner\nif (player1_score > player2_score):\n    print(\"Player 1 wins!\")\nelif (player2_score > player1_score):\n    print(\"Player 2 wins!\")\nelse:\n    print(\"It's a Tie!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_length(word):\n  return len(word)\n\nprint(string_length('Hello World!'))\n# Output: 12 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\n\ndef log(content):\n timestamp = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n message = f\"{timestamp}: {content}\"\n print(message)\n \nlog('Logging Message') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nfor i in range(10):\n    print(random.randint(1, 10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list=[2,4,5,7,1,3]\n\neven_sum= 6\nodd_sum= 15\n\ndef sum_even_odd(list):\n    even_sum=0\n    odd_sum=0\n    \n    for num in list:\n        if num % 2 == 0:\n            even_sum+=num\n        else:\n            odd_sum+=num \n    \n    print(\"even_sum=\",even_sum)\n    print(\"odd_sum=\",odd_sum)\n    \nsum_even_odd(list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import unittest\nfrom flask_testing import TestCase\nfrom app import db, Task\n\nclass TestModel(TestCase):\n def create_app(self):\n return app\n\n def setUp(self):\n db.create_all()\n self.task = Task(description='Description')\n db.session.add(self.task)\n db.session.commit()\n\n def tearDown(self):\n db.session.remove()\n db.drop_all()\n\nclass TestTask(TestModel):\n def test_task_creation(self):\n self.assertEqual('Description', self.task.description)\n\nif __name__ == '__main__':\n unittest.main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def odd_numbers(numbers):\n return [n for n in numbers if n % 2 != 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def top_frequent(data, key):\n  grouped = data.groupby(key)\n  result = []\n\n  for name, group in grouped:\n    counts = group.value_counts()\n    top_3 = counts.nlargest(3).index.tolist()\n    result.append((name, top_3))\n  \n  return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def nth_prime(n):\n  \n num_primes = 0\n curr_num = 2\n \n while num_primes < n:\n   is_prime = True\n   for i in range(2, curr_num):\n       if curr_num % i == 0:\n           is_prime = False\n           break\n   if is_prime:\n       num_primes += 1\n   curr_num += 1\n\nreturn curr_num - 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_search(arr,target):\n  low = 0\n  high = len(arr) - 1\n  while low <= high: \n    mid = (low + high) // 2\n    if arr[mid] == target:\n      return mid\n    elif arr[mid] < target: \n      low = mid + 1\n    else: \n      high = mid - 1\n  return -1\n\narr = [2, 3, 4, 10, 40]\ntarget = 10\nindex = binary_search(arr, target)\nif index != -1: \n    print(\"Element is present at index\", index)\nelse: \n    print(\"Element is not present in the array\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculateSum(a, b): \n    return int((b - a + 1) * (a + b) / 2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport time\n\n# Create classes\nclass Player:\n    def __init__(self, name):\n        self.name = name\n        self.hp = 100\n        self.position = [0, 0]\n\nclass Enemy:\n    def __init__(self, name):\n        self.name = name\n        self.hp = random.randint(50, 100)\n\n# Initialize globals\nplayer = Player(input(\"What is your name? \"))\nenemies = []\ndone = False\n\n# Game loop\nwhile not done:\n    print(\"You are in room ({}, {})\".format(player.position[0], \n                                            player.position[1]))\n    print(\"1. Move\")\n    print(\"2. Check HP\")\n    print(\"3. Exit Game\")\n    action = int(input(\"What do you want to do? \"))\n\nif action == 1:\n    # Movement\n    x = int(input(\"Move how many units on the x-axis? \"))\n    y = int(input(\"Move how many units on the y-axis? \"))\n    player.position[0] += x\n    player.position[1] += y\n\nelif action == 2:\n    # Check HP\n    print(\"Your HP is {}\".format(player.hp))\n\nelif action == 3:\n    # Exit Game \n    done = True\n\n# Generate enemies randomly\nif random.random() < 0.1:\n    enemies.append(Enemy(\"Rat\"))\n    print(\"An enemy appeared!\")\n\n# Combat\nfor enemy in enemies:\n    print(\"A {} approaches!\".format(enemy.name))\n    print(\"What do you do? 1. Fight 2. Flee\")\n    action = int(input(\">\"))\n\n    if action == 1:\n        fight(player, enemy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_strings(strings, filter_function):\n    filtered = []\n    for string in strings:\n        if filter_function(string):\n            filtered.append(string)\n    return filtered but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence = \"This is a sample sentence.\"\noutput = sentence.upper()\nprint(output) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def prefix_sum(arr):\nresult = []\ns = 0\nfor x in arr:\n    s += x\n    result.append(s)\nreturn result\n\narr = [1, 2, 3, 4]\nprefix_sum(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countElements(Array): \n    count = 0\n    for i in Array: \n        if i != -1: \n            count = count + 1\n        else: \n            break\n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter as tk\nfrom tkinter import filedialog, Text, Menu\n\n# root window configuration\nroot = tk.Tk()\nroot.title(\"Code Editor\")\n\n# text area where code is written\ntextArea = Text(root, relief=\"sunken\")\ntextArea.grid(row=0, column = 0, columnspan=3, padx = 5, pady = 5, sticky = \"nsew\")\n\n# sets the scrollbar x y\nscrollbar = tk.Scrollbar(textArea)\ntextArea.configure(xscrollcommand=scrollbar.set)\nscrollbar.config(command=textArea.yview)\nscrollbar.grid(row=0, column=3, sticky='nsew')\n\n# open file\ndef open_file():\n    global filename\n    filename = filedialog.askopenfilename(defaultextension=\".txt\", filetypes=[(\"All Files\", \"*.*\"), (\"Text Files\", \"*.txt\")])\n    if filename == \"\":\n        filename = None\n    else:\n        root.title(f\"Code Editor - {filename}\")\n        textArea.delete(1.0, tk.END)\n        f = open(filename, \"r\")\n        textArea.insert(1.0, f.read())\n        f.close()\n\n# save file\ndef save_file():\n    if filename == None:\n        save_as()\n    else:\n        f = open(filename, \"w\")\n        f.write(textArea.get(1.0, tk.END))\n        f.close()\n\n# save as file\ndef save_as():\n    global filename\n    filename = filedialog.asksaveasfilename(initialfile=\"Untitled.txt\", defaultextension=\".txt\", filetypes=[(\"All Files\", \"*.*\"), (\"Text Files\", \"*.txt\")])\n    f = open(filename, \"w\")\n    f.write(textArea.get(1.0, tk.END))\n    f.close()\n\n# creating the statusbar\nstatusBar = tk.Label(root, text=\"Status Bar\")\nstatusBar.grid(row=1, column=0, columnspan=3, sticky=\"ew\")\n\n# creating the menubar\nmenubar = Menu(root)\nroot.config(menu=menubar)\n\n# creating the options for the file menu\nfileMenu = Menu(menubar)\nmenubar.add_cascade(label=\"File\", menu=fileMenu)\nfileMenu.add_command(label=\"Open\", command=open_file)\nfileMenu.add_command(label=\"Save\", command=save_file)\nfileMenu.add_command(label=\"Save As\", command=save_as)\n\n# coding syntax highlighting\ntextArea.configure(bg=\"grey\", fg=\"white\")\n\n# loop to run application\nroot.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/save', methods=['POST'])\ndef save():\n    # Extract request data\n    title = request.json['title']\n    content = request.json['content']\n\n    # Connect to database\n    conn = sqlite3.connect('blog.db')\n    c = conn.cursor()\n\n    # Save blog post to database\n    c.execute(\n        'INSERT INTO blog_posts(title, content) VALUES(?, ?)',\n        (title, content)\n    )\n    conn.commit()\n    conn.close()\n\n    return 'Blog post saved successfully!'\n\nif __name__ == '__main__':\n    app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# Load the data\ndata = pd.read_csv('./dataset.csv')\n\n# Get the text and the labels\ntexts = data['text'].values\nlabels = data['label'].values\n\n# Generate a dictionary of all the words in the dataset\nwords = set()\nfor text in texts:\n for word in text.split():\n words.add(word)\n\n# Create a dictionary of word counts\nword_counts = {}\nfor word in words:\n word_counts[word] = 0\n\n# Count the number of times each word appears in each sentiment label\nfor i in range(len(texts)):\n for word in texts[i].split():\n if labels[i] == 0:\n word_counts[word] -= 1\n else:\n word_counts[word] += 1\n\n# Print out the words with the highest sentiment polarity\nsorted_words = sorted(word_counts.items(), key=lambda x: x[1])\n\nfor word, count in sorted_words[:10]:\n print(f'{word}: {count}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Strategy:\n    \"\"\"The Strategy Pattern class\"\"\"\n\n    def __init__(self, func=None):\n        if func:\n            self.execute = func\n\n    def execute(self):\n        \"\"\"The default method that prints 'Hello world!'\"\"\"\n        print(\"Hello world!\")\n\n# Replace by other strategies\ndef execute_replacement1():\n    print(\"Hola mundo!\")\n\ndef execute_replacement2():\n    print(\"Mere saath kaam kar!\")\n\n# Instantiate the strategy\ns1 = Strategy()\n# Execute the strategy\ns1.execute()\n\n# Create replacement strategy 1\ns2 = Strategy(execute_replacement1)\n# Execute the strategy\ns2.execute()\n\n# Create replacement strategy 2\ns3 = Strategy(execute_replacement2)\n# Execute the strategy\ns3.execute() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!env/python3\n# coding: utf-8\ntry:\n    import ipdb\nexcept ImportError:\n    pass\n\n\nimport os\nimport shutil\nimport json\nimport zipfile\nimport datetime\nimport time\nimport uuid\nimport subprocess\nimport requests\n\n\n\nfrom config import *\nfrom core.framework.common import *\nfrom core.framework.postgresql import execute\nfrom core.model import *\n\n\n\n\n\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n# PIPELINE MANAGER\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \nclass PipelineManager:\n    def __init__(self):\n        pass\n\n\n    def list(self):\n        \"\"\"\n            List all pipelines with minimum of data\n        \"\"\"\n        sql = \"SELECT id, name, type, status, description, version, image_file_id, starred, installation_date, manifest, documents FROM pipeline ORDER BY id\"\n        result = []\n        for res in execute(sql): \n            result.append({\n                \"id\": res.id,\n                \"name\": res.name,\n                \"description\": res.description,\n                \"type\": res.type,\n                \"status\": res.status,\n                \"version\": res.version,\n                \"image_file_id\": res.image_file_id,\n                \"starred\": res.starred,\n                \"installation_date\": res.installation_date.isoformat(),\n                \"manifest\": res.manifest,\n                \"documents\": res.documents\n            })\n        return result\n\n    def get(self, fields=None, query=None, order=None, offset=None, limit=None, depth=0):\n        \"\"\"\n            Generic method to get pipelines according provided filtering options\n        \"\"\"\n        if not isinstance(fields, dict):\n            fields = None\n        if query is None:\n            query = {}\n        if order is None:\n            order = \"name, installation_date desc\"\n        if offset is None:\n            offset = 0\n        if limit is None:\n            limit = RANGE_MAX\n        pipes = Session().query(Pipeline).filter_by(**query).order_by(order).limit(limit).offset(offset).all()\n        for p in pipes: p.init(depth)\n        return pipes\n\n\n\n    def install_init (self, name, metadata={}):\n        pipe = Pipeline.new()\n        pipe.name = name\n        pipe.status = \"initializing\"\n        pipe.save()\n\n        if metadata and len(metadata) > 0:\n            pipe.load(metadata)\n        log('core.PipeManager.register : New pipe registered with the id {}'.format(pipe.id))\n        return pipe\n\n\n\n    def install_init_image_upload(self, filepath, file_size, pipe_metadata={}):\n        \"\"\" \n            Initialise a pipeline installation. \n            To use if the image have to be uploaded on the server.\n            Create an entry for the pipeline and the file (image that will be uploaded) in the database.\n            Return the Pipeline and the File objects created\n\n            This method shall be used to init a resumable upload of a pipeline \n            (the pipeline/image are not yet installed and available, but we need to manipulate them)\n        \"\"\"\n        from core.core import core\n\n        pfile = core.files.upload_init(filepath, file_size)\n        pipe = self.install_init(filepath, pipe_metadata)\n        pipe.image_file_id = pfile.id\n        pipe.save()\n        return pipe, pfile\n\n\n\n    async def install_init_image_url(self, url, pipe_metadata={}):\n        \"\"\" \n            Initialise a pipeline installation. \n            To use if the image have to be retrieved via an url.\n            Create an entry for the pipeline and the file (image) in the database.\n            Async method as the download start immediatly, followed by the installation when it's done\n\n            Return the Pipeline object ready to be used\n        \"\"\"\n        raise NotImplementedError(\"TODO\")\n\n\n\n    def install_init_image_local(self, filepath, move=False, pipe_metadata={}):\n        \"\"\" \n            Initialise a pipeline installation. \n            To use if the image have to be retrieved on the local server.\n            Create an entry for the pipeline and the file (image) in the database.\n            Copy the local file into dedicated directory and start the installation of the Pipeline\n\n            Return the Pipeline object ready to be used\n        \"\"\"\n        from core.core import core\n\n        pfile = core.files.from_local(filepath, move)\n        pipe = self.install_init(os.path.basename(filepath), pipe_metadata)\n\n        # FIXME: Sometime getting sqlalchemy error 'is not bound to a Session' \n        # why it occure here ... why sometime :/ \n        check_session(pfile)\n        check_session(pipe)\n\n        pipe.image_file_id = pfile.id\n        pipe.save()\n        return pipe\n\n\n    def install_init_image(self, file_id, pipe_metadata={}):\n        \"\"\" \n            Initialise a pipeline installation. \n            To use if the image have already been uploaded the local server via the regovar file api.\n            Create an entry for the pipeline in the database.\n            Return the Pipeline object ready to be used\n        \"\"\"\n        from core.core import core\n\n        pfile = File.from_id(file_id)\n        if pfile:\n            pipe = self.install_init(os.path.basename(pfile.path), pipe_metadata)\n            pipe.image_file_id = file_id\n            pipe.save()\n            return pipe\n        return None\n    \n\n\n    def check_manifest(self, manifest):\n        \"\"\"\n            Check that manifest (json) is valid and return the full version completed \n            with default values if needed\n        \"\"\"\n        missing = \"\"\n        for k in [\"name\", \"version\"]:\n            if k not in manifest.keys():\n                missing += k + \", \"                \n        if missing != \"\":\n            missing = missing[:-2]\n            raise RegovarException(\"FAILLED Checking validity of manifest (missing : {})\".format(missing))\n\n        # 2- Default value for optional fields in mandatory file\n        default = {\n            \"description\": \"\",\n            \"type\": \"job\",\n            \"contacts\": [],\n            \"regovar_db_access\": False,\n            \"inputs\": \"/pipeline/inputs\",\n            \"outputs\": \"/pipeline/outputs\",\n            \"databases\": \"/pipeline/databases\",\n            \"logs\": \"/pipeline/logs\"\n        }\n        for k in default.keys():\n            if k not in manifest.keys():\n                manifest[k] = default[k]\n\n        # 3- check type\n        if manifest[\"type\"] not in [\"job\", \"importer\", \"exporter\", \"reporter\"]:\n            raise RegovarException(\"FAILLED Checking validity of manifest (type '{}' not supported)\".format(manifest[\"type\"]))\n\n\n        log('Validity of manifest checked')\n        return manifest\n\n\n\n    def install(self, pipeline_id, asynch=True):\n        \"\"\"\n            Start the installation of the pipeline. (done in another thread)\n            The initialization shall be done (image ready to be used)\n        \"\"\"\n        from core.core import core\n\n        pipeline = Pipeline.from_id(pipeline_id, 1)\n        if not pipeline : \n            raise RegovarException(\"Pipeline not found (id={}).\".format(pipeline_id))\n        if pipeline.status != \"initializing\":\n            raise RegovarException(\"Pipeline status ({}) is not \\\"initializing\\\". Cannot perform another installation.\".format(pipeline.status))\n        if pipeline.image_file and pipeline.image_file.status not in [\"uploaded\", \"checked\"]:\n            raise RegovarException(\"Wrong pipeline image (status={}).\".format(pipeline.image_file.status))\n\n        if not pipeline.image_file or pipeline.image_file.status in [\"uploaded\", \"checked\"]:\n            if asynch:\n                run_async(self.__install, pipeline)\n            else:\n                pipeline = self.__install(pipeline)\n\n        return pipeline\n\n\n    def __install(self, pipeline):\n        from core.core import core\n        # Dezip pirus package in the pirus pipeline directory\n        root_path = os.path.join(PIPELINES_DIR, str(pipeline.id))\n        log('Installation of the pipeline package : ' + root_path)\n        os.makedirs(root_path)\n        os.chmod(pipeline.image_file.path, 0o777)\n\n        # TODO: Check zip integrity and security before extracting it\n        #       see python zipfile official doc\n        with zipfile.ZipFile(pipeline.image_file.path,\"r\") as zip_ref:\n            zip_ref.extractall(root_path)\n\n            # check package tree\n            # find root folder\n            files = [i.filename for i in zip_ref.infolist()]\n            for f in files:\n                if f.endswith(\"manifest.json\"): break\n            zip_root = os.path.dirname(f)\n            # remove intermediate folder\n            if zip_root != \"\":\n                zip_root = os.path.join(root_path, zip_root)\n                for filename in os.listdir(zip_root):\n                    shutil.move(os.path.join(zip_root, filename), os.path.join(root_path, filename))\n                os.rmdir(zip_root)\n\n        # Load manifest\n        try:\n            log(os.path.join(root_path, \"manifest.json\"))\n            with open(os.path.join(root_path, \"manifest.json\"), \"r\") as f:\n                data = f.read()\n                log(data)\n                # Fix common parsing problem regarding json syntaxe\n                data = data.replace(\"False\", \"false\")\n                data = data.replace(\"True\", \"true\")\n                manifest = json.loads(data)\n                manifest = self.check_manifest(manifest)\n                pipeline.developpers = manifest.pop(\"contacts\")\n                pipeline.manifest = manifest \n\n                # list documents available\n                pipeline.documents = {\n                    \"about\": os.path.join(root_path, \"doc/about.html\"),\n                    \"help\": os.path.join(root_path, \"doc/help.html\"),\n                    \"icon\": os.path.join(root_path, \"doc/icon.png\"),\n                    \"icon2\": os.path.join(root_path, \"doc/icon.jpg\"),\n                    \"form\": os.path.join(root_path, \"form.json\"),\n                    \"license\":os.path.join(root_path, \"LICENSE\"),\n                    \"readme\": os.path.join(root_path, \"README\")\n                }\n                for k in pipeline.documents.keys():\n                    if not os.path.exists(pipeline.documents[k]):\n                        pipeline.documents[k] = None\n                p = pipeline.documents.pop(\"icon2\")\n                if not pipeline.documents[\"icon\"]:\n                    pipeline.documents[\"icon\"] = p\n                pipeline.load(manifest)\n                pipeline.save()\n        except Exception as ex:\n            pipeline.status = \"error\"\n            pipeline.save()\n            raise RegovarException(\"Unable to open and read manifest.json. The pipeline package is wrong or corrupt.\", exception=ex)\n        \n        # Update and save pipeline status\n        pipeline.type = manifest[\"type\"]\n        pipeline.installation_date = datetime.datetime.now()\n        pipeline.status = \"installing\"\n        pipeline.save()\n        \n        # Install pipeline\n        result = core.container_manager.install_pipeline(pipeline)\n        return result\n\n\n\n\n    def delete(self, pipeline_id, asynch=True):\n        \"\"\"\n            Start the uninstallation of the pipeline. (done in another thread)\n            Remove image file if exists.\n        \"\"\"\n        from core.core import core\n\n        result = None\n        pipeline = Pipeline.from_id(pipeline_id, 1)\n        if pipeline:\n            result = pipeline.to_json()\n            # Clean container\n            try:\n                if asynch: \n                    run_async(self.__delete, pipeline) \n                else: \n                    self.__delete(pipeline)\n            except Exception as ex:\n                war(\"core.PipelineManager.delete : Container manager failed to delete the container with id {}.\".format(pipeline.id))\n            try:\n                # Clean filesystem\n                shutil.rmtree(pipeline.path, True)\n                # Clean DB\n                core.files.delete(pipeline.image_file_id)\n                Pipeline.delete(pipeline.id)\n            except Exception as ex:\n                raise RegovarException(\"core.PipelineManager.delete : Unable to delete the pipeline's pirus data for the pipeline {}.\".format(pipeline.id), ex)\n        return result\n\n\n    def __delete(self, pipeline):\n        from core.core import core\n        \n        try:\n            core.container_manager.uninstall_pipeline(pipeline)\n        except Exception as ex:\n            raise RegovarException(\"Error occured during uninstallation of the pipeline. Uninstallation aborded.\", ex)\n \n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import csv\n\ndef csv_to_dict(filename):\n with open(filename) as csv_file:\n reader = csv.DictReader(csv_file)\n csv_dict = {}\n for row in reader:\n csv_dict[row['Date']] = row['Product']\n return csv_dict but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def format_address(address):\n    address_items = address.split(',')\n    street = address_items[0]\n    city_state = address_items[1].split()\n    city = city_state[0]\n    state = city_state[1]\n    formatted_address = street + ', ' + city + ', ' + state\n\n    return formatted_address\n\naddress = '60 Fifth Avenue, New York'\nformatted_address = format_address(address)\nprint(formatted_address) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef remove_non_alphanum(str):\n return re.sub(r'[^\\w]', '', str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nGenerate a sentence based on the input text\n\"\"\"\n\nimport random\n\n#get the user input\nuser_input = \"The quick brown fox jumps over the lazy dog.\"\n\n#split the string into a list of words\nword_list = user_input.split()\n\n#shuffle the list\nrandom.shuffle(word_list)\n\n#convert the list back to a string\ngenerated_sentence = ' '.join(word_list)\n\n#print the generated sentence\nprint(generated_sentence) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: L = [1, 2, 2, 3, 4, 4] \n\nL = list(set(L)) \n\nprint(L) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(value, list):\n    for i in range(len(list)):\n        if list[i] == value:\n            return i\n    return -1\n\nvalue= 'apple'\nlist = ['bannanas', 'oranges', 'apple']\nprint(search(value, list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef get_unique_string():\n    characters = string.ascii_uppercase + string.digits\n    return ''.join(random.choice(characters) for _ in range(6))\n\nunique_string = get_unique_string()\nprint(unique_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Customer:\n    def __init__(self, first_name, last_name, email):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.email = email\n\ncustomer = Customer(\"John\", \"Smith\", \"john.smith@example.com\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string \nimport random \n\ndef generate_password(length):\n    all_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(all_chars) for _ in range(length))\n    if (any(c.islower() for c in password)\n        and any(c.isupper() for c in password)\n        and any(c.isdigit() for c in password)\n        and any(c in string.punctuation for c in password)):\n       return password\n    else:\n       return generate_password(length)\n  \n# Create random passwords with length 10 \nx = generate_password(10) \nprint ('Random Password :', x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_domain_name(url): \n    return url.split(\"/\")[2]\n\nprint(get_domain_name(\"https://www.google.com\"))  # prints www.google.com but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_prime_numbers(lower, upper):\n  prime_numbers = []\n  for num in range(lower, upper + 1):\n    if num > 1:\n      for i in range(2, num):\n        if (num % i) == 0:\n          break\n      else:\n        prime_numbers.append(num)\n  return prime_numbers but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 11):\n    print(str(i) + \" squared is \" + str(i ** 2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Computer: \n    def __init__(self, name): \n        self.name = name \n\n    def calculate(self): \n        pass\n\n# Let's create a class to add two numbers\nclass Add(Computer): \n    def calculate(self, x, y): \n        return x + y\n\n# Let's create a class to multiply two numbers\nclass Multiply(Computer): \n    def calculate(self, x, y): \n        return x * y\n\n# Client code to use the classes above \nclass Client(Computer): \n    # Utility method to calculate sum \n    def sum(self, a, b): \n        s = Add(self.name)\n        m = Multiply(self.name)\n        total = s.calculate(a, b) + m.calculate(a, b) \n        print(\"Result of sum and multiply\", total)\n        return total \n\n# Create a client object\nc = Client(\"Comp\")\nc.sum(2, 6)  # Result of sum and multiply 14 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(n):\n if n == 1:\n return False\n for i in range(2, n):\n if n % i == 0:\n return False\n return True\n\n# Print out prime numbers from 1 to 100\nlimit = 100\n\nfor i in range(1, limit+1):\n if is_prime(i):\n print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import http.server\n\nclass myHandler(http.server.BaseHTTPRequestHandler):\n\tdef do_GET(self):\n\t\tif self.path == '/page1':\n\t\t\tself.send_response(200)\n\t\t\tself.end_headers()\n\t\t\tself.wfile.write(b\"This is page 1\")\n\t\telif self.path == '/page2':\n\t\t\tself.send_response(200)\n\t\t\tself.end_headers()\n\t\t\tself.wfile.write(b\"This is page 2\")\n\t\telse:\n\t\t\tself.send_error(404)\n\nhttpd = http.server.HTTPServer(('0.0.0.0',8080), myHandler)\nhttpd.serve_forever() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef randomString(stringLength=8):\n lettersAndDigits = string.ascii_letters + string.digits\n return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))\n\nprint(randomString()) // output '7Oti2cgn' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [4, 2, 9, 12, 3, 5, 7] \n  \nbubble_sort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]), but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # define a function \ndef getIntersectionPoint(line1, line2): \n    # line1 (slope and intercept) \n    l1_m = line1[0]\n    l1_c = line1[1]\n  \n    # line2 (slope and intercept) \n    l2_m = line2[0]\n    l2_c = line2[1]\n    \n    x = (l2_c - l1_c) / (l1_m - l2_m)\n    y = l1_m * x + l1_c\n    return (x, y) \n  \n# given two lines\nline1 = (3, 5) \nline2 = (7, 9)\n  \n# calculate intersection point\nintersection_point = getIntersectionPoint(line1, line2)\n  \n# print the point\nprint(\"Intersection point of lines is:\", intersection_point) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndata_string = '{\"FirstName\": \"John\", \"LastName\": \"Smith\"}'\ndata = json.loads(data_string)\n\nfor key, value in data.items(): \n    print(\"{} = {}\".format(key, value)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: temperatures_fahrenheit = [32, 64, 78, -10]\n\ntemperatures_celsius = [((temp-32)*5)/9 for temp in temperatures_fahrenheit]\nprint(temperatures_celsius) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://www.example.com\"\n\npage = requests.get(url)\n\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ntext = soup.find_all(text=True)\n\nfor t in text:\n    print(t.strip()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import xlrd\n\ndef extract_bold_strings(filename):\n strings = []\n workbook = xlrd.open_workbook(filename)\n sheet = workbook.sheet_by_index(0)\n for row in range(sheet.nrows):\n  for col in range(sheet.ncols):\n   cell_value = sheet.cell(row, col).value\n   font_style = sheet.cell_xf_index(row, col).font_record.weight\n   if font_style == 700:\n    strings.append(cell_value)\n return strings\n \n strings = extract_bold_strings('test.xlsx') \n print(strings) # prints ['STRING1', 'STRING2'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Rectangle:\n  def __init__(self, length, width):\n    self.length = length\n    self.width = width but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for customer in customers:\n  print(f\"Name: {customer['name']}, Age: {customer['age']}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class HelloWorld:\n    def __init__(self):\n        print(\u201cHello World\u201d) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n a, b = 0, 1\n result = []\n \n while a < n:\n result.append(a)\n a, b = b, a + b\n\n return result\n\nprint(fibonacci(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\ntext1 = \"He went to the store\"\ntext2 = \"She visited the store\"\n\nedited_text = text1[:2] + text2[2:]\n\nprint edited_text but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = \u201chttps://www.example.com/reviews\u201d\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, \u201chtml.parser\u201d)\n\ntitles = []\nsummaries = []\n\nfor review in soup.find_all(\u2018div\u2019, {\u2018class\u2019: \u2018review\u2019}):\n titles.append(review.find(\u2018h3\u2019).text)\n summaries.append(review.find(\u2018p\u2019).text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: String methods include capitalize(), count(), endswith(), find(), format(), index(), isalnum(), join(), lower(), replace(), split(), startswith(), strip(), title(), upper(), and zfill(). but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Libraries\nimport requests\nimport json\n\n# Get user input\nuser_input = input('Please enter your query: ')\n\n# Process user input\nif 'weather' in user_input:\n # Get weather data\n city = user_input.split()[-1] # extract city from user query \n r = requests.get(f'http://api.openweathermap.org/data/2.5/weather?q={city}&units=metric&appid=YOUR_API_KEY')\n data = json.loads(r.text) \n\n# Output response\n if data['cod'] == '404':\n print('City not found!')\n else:\n print(f'The temperature in {city} is: {data[\"main\"][\"temp\"]} \u00b0C')\n\nelif 'population' in user_input:\n # Get population data\n country = user_input.split()[-1] # extract country from user query\n r = requests.get(f'https://restcountries.eu/rest/v2/name/{country}')\n data = json.loads(r.text)[0] # extract population from API response\n\n# Output response\n print(f'The population of {country} is: {data[\"population\"]}')\n\nelse:\n print(\"I'm sorry, I don't understand.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import stripe\n\nstripe.api_key = 'sk_test_YOUR_KEY'\n\ndef process_payment(card_info):\n    # validate the credit card information\n    if not stripe.Token.create(\n        card={\n            'number': card_info['number'],\n            'exp_month': card_info['exp_month'],\n            'exp_year': card_info['exp_year'],\n            'cvc': card_info['cvc'],\n        },\n    ):\n        return False\n\n    # create and process the charge:\n    stripe.Charge.create(\n        amount=card_info['amount'],\n        currency='usd',\n        source=card_info['token'],\n        description='Example charge',\n    )\n\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_squares(x, y):\n    return x**2 + y**2\n\nx = 2\ny = 4\ns = sum_squares(x, y)\nprint(\"The sum of two squares is {}\".format(s)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci_sequence(n):\n a, b = 0, 1\n for i in range(n):\n a, b = b, a + b\n return a but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk \nfrom nltk.metrics import edit_distance \n\ndef levenshtein_similarity(string1, string2):\n    edit_dist = edit_distance(string1, string2)\n    similarity = 1-(edit_dist/max(len(string1), len(string2)))\n    return similarity\n\ndef detect_plagiarism(s1, s2):\n    similarity_score = levenshtein_similarity(s1, s2)\n    if  similarity_score > 0.75: \n        return \"The texts have high similarity\"\n    elif  similarity_score > 0.5:\n        return \"The texts have moderate similarity\"\n    else:\n        return \"The texts have low similarity\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nRecognize handwritten digits using OpenCV library\n\"\"\"\nimport cv2\nimport numpy as np\n\n# Load the model\nmodel = cv2.ml.SVM_load('svm_model.xml')\n\n# Read the input image\nimg = cv2.imread('input.png')\n\n# Convert to grayscale and apply Gaussian filtering\nimg_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\nimg_gray = cv2.GaussianBlur(img_gray, (5,5), 0)\n\n# Threshold the image\nret, img_thresh = cv2.threshold(img_gray, 90, 255, cv2.THRESH_BINARY_INV)\n\n# Find contours\n_, ctrs, _ = cv2.findContours(img_thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n\n# Get rectangles contains each contour\nrects = [cv2.boundingRect(ctr) for ctr in ctrs]\n\n# For each rectangular region, calculate HOG features and predict\n# the digit using Linear SVM.\nfor rect in rects:\n    # Draw the rectangles\n    #cv2.rectangle(img, (rect[0], rect[1]), (rect[0] + rect[2], rect[1] + rect[3]), (0, 255, 0), 3) \n    # Make the rectangular region around the digit\n    leng = int(rect[3] * 1.6)\n    pt1 = int(rect[1] + rect[3] // 2 - leng // 2)\n    pt2 = int(rect[0] + rect[2] // 2 - leng // 2)\n    roi = img_thresh[pt1:pt1+leng, pt2:pt2+leng]\n    # Resize the image\n    roi = cv2.resize(roi, (64, 64), interpolation=cv2.INTER_AREA)\n    roi = cv2.dilate(roi, (3, 3))\n    # Calculate the HOG features\n    roi_hog_fd = hog(roi, orientations=9, pixels_per_cell=(8, 8), cells_per_block=(1, 1), visualize=False)\n    roi_hog_fd = np.asarray(roi_hog_fd, dtype=np.float32)\n    # Predict the digit using Linear SVM\n    nbr = model.predict(roi_hog_fd)\n    #cv2.putText(img, str(int(nbr[0][0])), (rect[0], rect[1]),cv2.FONT_HERSHEY_DUPLEX, 2, (0, 255, 255), 3)\n    print(int(nbr[0][0])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class SomeClass:\n\n    def __init__(self, field1, field2):\n        self.field1 = field1\n        self.field2 = field2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def trace_function(F):\n    def wrapper(*args, **kwargs):\n        print(F.__name__ + str(args) + str(kwargs))\n        value = F(*args, **kwargs)\n        print(F.__name__ + \" returns \" + str(value))\n        return value\n    return wrapper but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import the needed libraries\nfrom pymongo import MongoClient\n\n# Connect to the MongoDB client\nclient = MongoClient('localhost:27017')\n\n# Create an instance of a MongoDB database\ndb = client['customer_database']\n\n# Create the customers collection\ncustomers = db.create_collection('customers')\n\n# Add the needed fields\ncustomers.create_index([(\"Name\", 1)], unique=True)\ncustomers.create_index([(\"Phone Number\", 1)], unique=True)\ncustomers.create_index([(\"Email\", 1)], unique=True)\ncustomers.create_index([(\"Address\", 1)], unique=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def base64_encode(string):\n    encoded_string = base64.b64encode(string.encode('utf-8')) \n    return encoded_string.decode('utf-8') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_common_elements(list1, list2):\n    result = [] \n    i = 0\n    j = 0\n    while i < len(list1) and j < len(list2): \n        if list1[i] < list2[j]: \n            i += 1\n        elif list2[j] < list1[i]: \n            j += 1\n        else: \n            result.append(list1[i])\n            i += 1\n            j += 1\n      \n    for i in range(len(result)):\n        print(result[i],end=\" \") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Read in data\ndata = pd.read_csv('data.csv')\n\n# Train the classifier\nfeatures = ['location', 'size', 'bedrooms', 'bathrooms', 'price']\nX = data[features]\ny = data['label']\nclf = RandomForestClassifier(n_estimators=100)\nclf.fit(X, y)\n\n# Make predictions\npredictions = clf.predict(X)\nprint(predictions) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nProviding a Python program that resizes an array of integers in place\n\"\"\"\ndef resize_array(arr, new_size):\n    # base case\n    if len(arr) == new_size:\n        return\n\n    # add elements to increase the size\n    if len(arr) < new_size:\n        for _ in range(new_size - len(arr)):\n            arr.append(0)\n\n    # delete elements to decrease the size    \n    elif len(arr) > new_size:\n        for _ in range(len(arr) - new_size):\n            arr.remove(arr[-1])\n\nif __name__ == '__main__':\n    arr = [10, 20, 30, 40]\n    new_size = 6\n    resize_array(arr, new_size)\n    print(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [3, 6, 3, 2, 7, 5, 6]\n\ndef unique_elements(arr):\n  return list(set(arr))\n\nunique_arr = unique_elements(arr)\nprint(unique_arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def splitOnWhitespace(inputString):\n\twords = inputString.split()\n\treturn words\n\nstringToBeSplit = \"Python is an interpreted language.\"\nwords = splitOnWhitespace(stringToBeSplit)\nprint(words) // Output: ['Python', 'is', 'an', 'interpreted', 'language.'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPool2D, Dense, Flatten\nfrom tensorflow.keras.utils import to_categorical\n\n# Load the dataset\nX = np.load('fruits-images.npy')\ny = np.load('fruits-labels.npy')\ny = to_categorical(y)\n\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Create the model\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=(100,100,3)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(y_train.shape[1], activation='softmax'))\n\n# Compile and fit\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nhistory = model.fit(X_train, y_train, epochs=15, batch_size=32, validation_data=(X_test, y_test))\n\n# Plot the accuracy\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.classify import maxent\nfrom nltk.tokenize import word_tokenize\n\n# define the categories\nCATEGORIES = ['noun', 'verb', 'adjective', 'adverb', 'other']\n\n# generate training data\ntraining_data = [\n    (\"That's an interesting book.\", {'category': 'noun'}),\n    (\"Can I borrow it?\", {'category': 'verb'}),\n    (\"It's really amazing.\", {'category': 'adjective'}),\n    (\"I'm learning a lot.\", {'category': 'adverb'}),\n    (\"It's blue.\", {'category': 'other'})\n]\n\n# create a feature extractor\ndef extract_features(sentence):\n words = word_tokenize(sentence)\n features = {}\n for w in words:\n features[w.lower()] = True\n return features\n\n# train the classifier\nclassifier = maxent.MaxentClassifier.train(\ntraining_data, 'GIS', trace=0, encoding=None, labels=CATEGORIES\n)\n\n# classify a sentence\nsentence = \"It's yellow.\"\nfeatures = extract_features(sentence)\nlabel = classifier.classify(features)\n\n# print the result\nprint(label) # other but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from datetime import datetime\n\nnow = datetime.now()\nprint(now.strftime(\"%Y-%m-%d %H:%M:%S\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers = []\nwhile True:\n    userInput = input(\"Enter a number: \") \n    if userInput == 'done':\n        break\n    try:\n        userInput = int(userInput)\n        numbers.append(userInput)\n    except ValueError:\n        print(\"Invalid input, please enter a valid number\")\n\nprint(\"Sum of entered numbers : \" + str(sum(numbers))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def area_trapezoid(base1, base2, height):\n return (base1 + base2) * (height / 2)\n \nprint(area_trapezoid(2, 4, 3)) # Output: 9.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(\"Hello World!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nnames = [\"John\", \"Mary\", \"Paul\", \"Gerry\"]\n\nprint(\"The randomly chosen name is\", random.choice(names)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# Read data\ndata = {'Country': ['USA', 'China', 'France'], \n        'Population': [330000000, 1400000000, 67000000], \n        'Area': [3796000, 9596961, 640679], \n        'GDP': [21427000,14140163,2777000]}\ndf = pd.DataFrame(data, columns =['Country', 'Population', 'Area', 'GDP'])\n\n# Filter for rows with a population higher than 500 million\nlarge_countries = df[df['Population'] > 500000000]\nprint(large_countries) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def largestNumber(list): \n    maximum = list[0] \n      \n    for num in list: \n        if num > maximum: \n            maximum = num \n    return maximum \n  \nlist = [4, 8, 2, 6, 9] \nlargestNumber = largestNumber(list) \n  \nprint(\"Largest number in the given list is:\", largestNumber) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(x, n):\n    found = False\n    for i in range(len(x)):\n        if x[i] == n:\n            found = True\n            break\n\n    if found == True:\n        print('Element', n, 'found at position', i)\n    else:\n        print('Element', n, 'not found')\n\nx = [1, 5, 8, 3]\nn = 8\n\nlinear_search(x, n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [value * 2 for value in range(10)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_search(array, target):\n  left = 0\n  right = len(array) - 1\n  while left <= right:\n      middle = (left + right)//2\n      if array[middle] < target:    \n          left = middle + 1\n      elif array[middle] > target:  \n          right = middle - 1\n      else:                         \n          return middle             \n  return -1                        \n\nposition = binary_search(array, number) \nif position == -1:\n  print(\"Number not found in array.\")\nelse:\n  print(f\"{number} found at position {position}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def main():\n try:\n counter = 0\n while True:\n print(counter)\n counter += 1\n time.sleep(1)\n \n except KeyboardInterrupt:\n print('Goodbye!') \n sys.exit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: pattern = r\"learn (Python|Java) (\\w+)\" \nmatch = re.search(pattern, text) \nif match: \n    print(match.group(2)) # Prints \"now\" or \"later\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\nproducts = [\n {\n  \"name\": \"book\",\n  \"price\": 15\n }, \n {\n  \"name\": \"pen\",\n  \"price\": 5\n }, \n {\n  \"name\": \"tablet\",\n  \"price\": 200\n }, \n {\n  \"name\": \"chair\",\n  \"price\": 80\n }\n]\n\n@app.route(\"/top_three_products\", methods=[\"GET\"])\ndef get_top_three_products():\n   # Sort the list of products by price in descending order\n   sorted_products = sorted(products, key=lambda product: -product['price'])\n   # Return only the top 3 products\n   highest_priced_products = sorted_products[:3]\n   return jsonify(highest_priced_products)\n\nif __name__ == \"__main__\":\n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom scipy.optimize import minimize\n\n# Define the objective function\ndef objective(allocation):\n    # Calculate portfolio return on investment\n    portfolio_return = np.sum(allocation * stock_return)\n    return -portfolio_return\n\n# Set the bounds and constraints\nbounds = [(0, n) for n in available_stocks]\nconstraints = [{'type': 'eq', 'fun': lambda x: np.sum(x)-1}]\n\n# Initialize the starting allocations\nstarting_allocations = np.array([1/len(available_stocks)]*len(available_stocks))\n\n# Optimize\nresult = minimize(objective, starting_allocations, bounds=bounds, constraints=constraints)\nallocation = result.x\n\n# Print the optimal portfolio allocation\nprint(allocation) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def caesar_cipher_encode(input_string, cipher):\n    output = ''\n    for c in input_string:\n        ascii_val = ord(c)\n        if (ascii_val > 64 and ascii_val < 91) or (ascii_val > 96 and ascii_val < 123):\n            new_ascii_val = ascii_val + cipher\n            if (ascii_val > 64 and ascii_val < 91 and new_ascii_val > 90) or (ascii_val > 96 and ascii_val < 123 and new_ascii_val > 122):\n                new_ascii_val = ascii_val - 26 + cipher\n            output += chr(new_ascii_val)\n        else:\n            output += c\n    return output but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Python program to print \"Hello World!\"\n\nprint(\"Hello, World!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nfor i in range(10):\n    print(random.randint(1,100)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Bill:\n    def __init__(self, items):\n        self.items = items\n        self.total_cost = 0.0\n\n    def calculate_total_cost(self):\n        for item in self.items:\n            self.total_cost += item['price']\n        return self.total_cost\n\n# Create an object of Bill\nrestaurant_bill = Bill([{'item': 'burger', 'price': 10.99}, {'item': 'fries', 'price': 2.49}])\nprint(restaurant_bill.calculate_total_cost()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words_dict = {}\nfor word in words:\n    if word in words_dict:\n        words_dict[word] += 1\n    else:\n        words_dict[word] = 1\n\nprint(words_dict)\n\n# Output\n# {'a': 3, 'b': 2, 'c': 1, 'd': 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sumOfSquares(a, b, c):\n     return a*a + b*b + c*c but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"sentence. a is This\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier \n\n# Creating pandas dataframe to hold the animal data\nanimals_df = pd.DataFrame({'Animal': Animals})\n\n# Create target variable Mammal, Bird and Fish\nmammals = ['dog', 'cat', 'elephant']\nbirds = ['owl']\nfishes = ['tuna', 'salmon']\n\nanimals_df['Mammal'] = animals_df.Animal.apply(lambda x: 1 if x in mammals else 0)\nanimals_df['Bird'] = animals_df.Animal.apply(lambda x: 1 if x in birds else 0)\nanimals_df['Fish'] = animals_df.Animal.apply(lambda x: 1 if x in fishes else 0)\n\n\n# Create the target variable using the code labels\nanimals_df['target'] = animals_df.Mammal.astype(str) + '_' + animals_df.Bird.astype(str) + '_' + animals_df.Fish.astype(str)\n\n#drop unwanted columns\nanimals_df.drop(columns = ['Mammal', 'Bird', 'Fish'], inplace=True)\n\n# Create decision tree classifier object\nclf = DecisionTreeClassifier()\n\n# Train the model using the data\nclf.fit(animals_df[['Animal']], animals_df['target']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def movie_recommender_system(user):\n    \"\"\"\n    This function uses a collaborative filtering algorithm \n    to suggest movies to the given user\n    \"\"\"\n    # Get the list of rated movies by the user\n    user_movies = user.get_rated_movies()\n\n    # Get the list of ratings given by other users\n    user_ratings = user.get_ratings()\n\n    # Calculate the similarity between the user and other users\n    user_similarity = user.calculate_similarity(user_movies, user_ratings)\n\n    # Get the list of movies rated highly by other users\n    other_rated_movies = user.get_top_rated_movies(user_ratings) \n\n    # Find the movies which the user has not seen so far, but recommended by other users\n    unseen_movies = [m for m in other_rated_movies if m not in user_movies]\n    \n    # Sort the movies based on their similarity and the ratings given by other users\n    sorted_movies = sorted(unseen_movies, \n                            key=lambda m: user_similarity[m] * user_ratings[m], \n                            reverse=True)\n    \n    # Get the top 10 movies\n    top_movies = sorted_movies[:10]\n\n    return top_movies but is not the same. just give one example and only return the code."}
