{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import ComplementNB\n\ncategory_map = {\n 0: 'positive',\n 1: 'negative',\n 2: 'neutral',\n 3: 'mixed'\n}\n\n# get text data\ntext_data = //...\n\n# extract features from text data\nvectorizer = CountVectorizer()\nfeatures = vectorizer.fit_transform(text_data)\n\n# create and train model\nmodel = ComplementNB()\nmodel.fit(features, labels)\n\n# make predictions\npredictions = model.predict(features)\n\n# map predictions to category labels\nprediction_labels = [category_map[i] for i in predictions] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def prime_numbers(number):\n    # initialise prime list to empty\n    prime_list = []\n    \n    # loop over the range from 2 to the given number\n    for num in range(2, number + 1):\n        \n        # assume the number to be a prime number\n        is_prime = True\n        \n        # check if any number less than it divides num\n        for divider in range(2, num):\n            if (num % divider == 0):\n                is_prime = False\n                break\n        \n        # append the number to the prime list\n        if is_prime:\n            prime_list.append(num)\n    \n    # return the result\n    return prime_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calc_avg_temperature(temperatures):\n  total = 0\n  for temp in temperatures:\n    total += temp\n  avg = total / len(temperatures)\n  return avg\n\nprint(calc_avg_temperature([64.7, 67.3, 71.3, 73.1, 75.7, 73.2, 75.7]))\n\n# Output: 71.17142857142857 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_string_to_ints(strings):\n    return [int(string) for string in strings] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\n\ninput_str = \"This is a cool string!\"\npunctuation_removed = input_str.translate(str.maketrans('', '', string.punctuation))\nprint(punctuation_removed) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Palindrome:\n    def __init__(self, string):\n        self.string = string  \n  \n    def checkPalindrome(self):\n        if(self.string == self.string[::-1]): \n            return True\n        else:\n             return False\n\nstring = 'radar'\nobj = Palindrome(string)\nif(obj.checkPalindrome()): \n    print(\"String is a Palindrome!\")\nelse:\n    print(\"String is not a Palindrome!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Fraction:\n    def __init__(self, numerator, denominator):\n        self.numerator = numerator\n        self.denominator = denominator\n\n    def __str__(self):\n        return '{}/{}'.format(self.numerator, self.denominator) \n\n    def __mul__(self, other):\n        new_numerator = self.numerator * other.numerator\n        new_denominator = self.denominator * other.denominator \n        return Fraction(new_numerator, new_denominator)\n\n    def __truediv__(self, other):\n        new_numerator = self.numerator * other.denominator\n        new_denominator = self.denominator * other.numerator \n        return Fraction(new_numerator, new_denominator)\n \n    def __add__(self, other):\n        new_numerator = (self.numerator * other.denominator) + (other.numerator * self.denominator)\n        new_denominator = self.denominator * other.denominator\n        return Fraction(new_numerator, new_denominator)\n\n    def __sub__(self, other):\n        new_numerator = (self.numerator * other.denominator) - (other.numerator * self.denominator)\n        new_denominator = self.denominator * other.denominator\n        return Fraction(new_numerator, new_denominator) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndata = {\n \"a\": 1,\n \"b\": 2,\n \"c\": 3,\n \"d\": 4\n}\n\nfor key, value in data.items():\n if value % 2 == 0:\n print(value**2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\ndef query_database(database_name, query):\n conn = sqlite3.connect(database_name)\n c = conn.cursor()\n results = c.execute(query).fetchall()\n conn.close()\n return results\n\n# Example query to get all rows in the table\nquery_database('mydatabase.db', 'SELECT * FROM mytable') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_odd_squares(m, n):\n  squares = []\n  for i in range(m, n+1):\n    if i % 2 != 0:\n      squares.append(i*i)\n  return squares but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # create a dictionary of words and their sentiment values\nsentiment_dict = {\n    'amazing': 1,\n    'good': 1,\n    'bad': -1,\n    'awful': -1\n    }\n\n# function to classify sentiment \ndef sentiment_classifier(text):\n    sentiment = 0\n    words = text.split(' ')\n    for word in words:\n        if word in sentiment_dict:\n            sentiment += sentiment_dict[word]\n\n    if sentiment > 0:\n        return 'positive'\n    elif sentiment < 0:\n        return 'negative'\n    else:\n        return 'neutral'\n\n# call the classifier\nsentiment = sentiment_classifier(\"This is amazing!\")\nprint(sentiment)  # prints: positive but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # This program prints out the numbers from 1 to 10\nfor x in range(10):\n    print(x + 1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import codepy, codepy.jit, codepy.toolchain, codepy.bpl, codepy.cuda\nfrom asp.util import *\nimport asp.codegen.cpp_ast as cpp_ast\nimport pickle\nfrom variant_history import *\nimport sqlite3\nimport asp\nimport scala_module\n\nclass ASPDB(object):\n\n    def __init__(self, specializer, persistent=False):\n        \"\"\"\n        specializer must be specified so we avoid namespace collisions.\n        \"\"\"\n        self.specializer = specializer\n\n        if persistent:\n            # create db file or load db\n            # create a per-user cache directory\n            import tempfile, os\n            if os.name == 'nt':\n                username = os.environ['USERNAME']\n            else:\n                username = os.environ['LOGNAME']\n\n            self.cache_dir = tempfile.gettempdir() + \"/asp_cache_\" + username\n\n            if not os.access(self.cache_dir, os.F_OK):\n                os.mkdir(self.cache_dir)\n            self.db_file = self.cache_dir + \"/aspdb.sqlite3\"\n            self.connection = sqlite3.connect(self.db_file)\n            self.connection.execute(\"PRAGMA temp_store = MEMORY;\")\n            self.connection.execute(\"PRAGMA synchronous = OFF;\")\n            \n        else:\n            self.db_file = None\n            self.connection = sqlite3.connect(\":memory:\")\n\n\n    def create_specializer_table(self):\n        self.connection.execute('create table '+self.specializer+' (fname text, variant text, key text, perf real)')\n        self.connection.commit()\n\n    def close(self):\n        self.connection.close()\n\n    def table_exists(self):\n        \"\"\"\n        Test if a table corresponding to this specializer exists.\n        \"\"\"\n        cursor = self.connection.cursor()\n        cursor.execute('select name from sqlite_master where name=\"%s\"' % self.specializer)\n        result = cursor.fetchall()\n        return len(result) > 0\n\n    def insert(self, fname, variant, key, value):\n        if (not self.table_exists()):\n                self.create_specializer_table()\n        self.connection.execute('insert into '+self.specializer+' values (?,?,?,?)',\n            (fname, variant, key, value))\n        self.connection.commit()\n\n    def get(self, fname, variant=None, key=None):\n        \"\"\"\n        Return a list of entries.  If key and variant not specified, all entries from\n        fname are returned.\n        \"\"\"\n        if (not self.table_exists()):\n            self.create_specializer_table()\n            return []\n\n        cursor = self.connection.cursor()\n        query = \"select * from %s where fname=?\" % (self.specializer,)\n        params = (fname,)\n\n        if variant:\n            query += \" and variant=?\"\n            params += (variant,)\n        \n        if key:\n            query += \" and key=?\"\n            params += (key,)\n\n        cursor.execute(query, params)\n\n        return cursor.fetchall()\n\n    def update(self, fname, variant, key, value):\n        \"\"\"\n        Updates an entry in the db.  Overwrites the timing information with value.\n        If the entry does not exist, does an insert.\n        \"\"\"\n        if (not self.table_exists()):\n            self.create_specializer_table()\n            self.insert(fname, variant, key, value)\n            return\n\n        # check if the entry exists\n        query = \"select count(*) from \"+self.specializer+\" where fname=? and variant=? and key=?;\"\n        cursor = self.connection.cursor()\n        cursor.execute(query, (fname, variant, key))\n        count = cursor.fetchone()[0]\n        \n        # if it exists, do an update, otherwise do an insert\n        if count > 0:\n            query = \"update \"+self.specializer+\" set perf=? where fname=? and variant=? and key=?\"\n            self.connection.execute(query, (value, fname, variant, key))\n            self.connection.commit()\n        else:\n            self.insert(fname, variant, key, value)\n\n\n    def delete(self, fname, variant, key):\n        \"\"\"\n        Deletes an entry from the db.\n        \"\"\"\n        if (not self.table_exists()):\n            return\n\n        query = \"delete from \"+self.specializer+\" where fname=? and variant=? and key=?\"\n        self.connection.execute(query, (fname, variant, key))\n        self.connection.commit()\n\n    def destroy_db(self):\n        \"\"\"\n        Delete the database.\n        \"\"\"\n        if not self.db_file:\n            return True\n\n        import os\n        try:\n            self.close()\n            os.remove(self.db_file)\n        except:\n            return False\n        else:\n            return True\n\n\nclass SpecializedFunction(object):\n    \"\"\"\n    Class that encapsulates a function that is specialized.  It keeps track of variants,\n    their timing information, which backend, functions to determine if a variant\n    can run, as well as a function to generate keys from parameters.\n\n    The signature for any run_check function is run(*args, **kwargs).\n    The signature for the key function is key(self, *args, **kwargs), where the args/kwargs are\n    what are passed to the specialized function.\n\n    \"\"\"\n    \n    def __init__(self, name, backend, db, variant_names=[], variant_funcs=[], run_check_funcs=[], \n                 key_function=None, call_policy=None):\n        self.name = name\n        self.backend = backend\n        self.db = db\n        self.variant_names = []\n        self.variant_funcs = []\n        self.run_check_funcs = []\n        self.call_policy = call_policy\n        \n        if variant_names != [] and run_check_funcs == []:\n            run_check_funcs = [lambda *args,**kwargs: True]*len(variant_names)\n        \n        for x in xrange(len(variant_names)):\n            self.add_variant(variant_names[x], variant_funcs[x], run_check_funcs[x])\n\n        if key_function:\n            self.key = key_function\n\n    def key(self, *args, **kwargs):\n        \"\"\"\n        Function to generate keys.  This should almost always be overridden by a specializer, to make\n        sure the information stored in the key is actually useful.\n        \"\"\"\n        import hashlib\n        return hashlib.md5(str(args)+str(kwargs)).hexdigest()\n\n\n    def add_variant(self, variant_name, variant_func, run_check_func=lambda *args,**kwargs: True):\n        \"\"\"\n        Add a variant of this function.  Must have same call signature.  Variant names must be unique.\n        The variant_func parameter should be a CodePy Function object or a string defining the function.\n        The run_check_func parameter should be a lambda function with signature run(*args,**kwargs).\n        \"\"\"\n        if variant_name in self.variant_names:\n            raise Exception(\"Attempting to add a variant with an already existing name %s to %s\" %\n                            (variant_name, self.name))\n        self.variant_names.append(variant_name)\n        self.variant_funcs.append(variant_func)\n        self.run_check_funcs.append(run_check_func)\n        \n        if isinstance(self.backend.module, scala_module.ScalaModule):\n            self.backend.module.add_to_module(variant_func)\n            self.backend.module.add_to_init(variant_name)\n        elif isinstance(variant_func, basestring):\n            if isinstance(self.backend.module, codepy.cuda.CudaModule):#HACK because codepy's CudaModule doesn't have add_to_init()\n                self.backend.module.boost_module.add_to_module([cpp_ast.Line(variant_func)])\n                self.backend.module.boost_module.add_to_init([cpp_ast.Statement(\"boost::python::def(\\\"%s\\\", &%s)\" % (variant_name, variant_name))])\n            else:\n                self.backend.module.add_to_module([cpp_ast.Line(variant_func)])\n                if self.call_policy == \"python_gc\":\n                    self.backend.module.add_to_init([cpp_ast.Statement(\"boost::python::def(\\\"%s\\\", &%s, boost::python::return_value_policy<boost::python::manage_new_object>())\" % (variant_name, variant_name))])\n                else:\n                    self.backend.module.add_to_init([cpp_ast.Statement(\"boost::python::def(\\\"%s\\\", &%s)\" % (variant_name, variant_name))])\n        else:\n            self.backend.module.add_function(variant_func)\n\n        self.backend.dirty = True\n\n    def pick_next_variant(self, *args, **kwargs):\n        \"\"\"\n        Logic to pick the next variant to run.  If all variants have been run, then this should return the\n        fastest variant.\n        \"\"\"\n        # get variants that have run\n        already_run = self.db.get(self.name, key=self.key(*args, **kwargs))\n\n\n        if already_run == []:\n            already_run_variant_names = []\n        else:\n            already_run_variant_names = map(lambda x: x[1], already_run)\n\n        # which variants haven't yet run\n        candidates = set(self.variant_names) - set(already_run_variant_names)\n\n        # of these candidates, which variants *can* run\n        for x in candidates:\n            if self.run_check_funcs[self.variant_names.index(x)](*args, **kwargs):\n                return x\n\n        # if none left, pick fastest from those that have already run\n        return sorted(already_run, lambda x,y: cmp(x[3],y[3]))[0][1]\n\n    def __call__(self, *args, **kwargs):\n        \"\"\"\n        Calling an instance of SpecializedFunction will actually call either the next variant to test,\n        or the already-determined best variant.\n        \"\"\"\n        if self.backend.dirty:\n            self.backend.compile()\n\n        which = self.pick_next_variant(*args, **kwargs)\n\n        import time\n        start = time.time()\n        ret_val = self.backend.get_compiled_function(which).__call__(*args, **kwargs)\n        elapsed = time.time() - start\n        #FIXME: where should key function live?\n        #print \"doing update with %s, %s, %s, %s\" % (self.name, which, self.key(args, kwargs), elapsed)\n        self.db.update(self.name, which, self.key(*args, **kwargs), elapsed)\n        #TODO: Should we use db.update instead of db.insert to avoid O(N) ops on already_run_variant_names = map(lambda x: x[1], already_run)?\n\n        return ret_val\n\nclass HelperFunction(SpecializedFunction):\n    \"\"\"\n    HelperFunction defines a SpecializedFunction that is not timed, and usually not called directly\n    (although it can be).\n    \"\"\"\n    def __init__(self, name, func, backend):\n        self.name = name\n        self.backend = backend\n        self.variant_names, self.variant_funcs, self.run_check_funcs = [], [], []\n        self.call_policy = None\n        self.add_variant(name, func)\n\n\n    def __call__(self, *args, **kwargs):\n        if self.backend.dirty:\n            self.backend.compile()\n        return self.backend.get_compiled_function(self.name).__call__(*args, **kwargs)\n\nclass ASPBackend(object):\n    \"\"\"\n    Class to encapsulate a backend for Asp.  A backend is the combination of a CodePy module\n    (which contains the actual functions) and a CodePy compiler toolchain.\n    \"\"\"\n    def __init__(self, module, toolchain, cache_dir, host_toolchain=None):\n        self.module = module\n        self.toolchain = toolchain\n        self.host_toolchain = host_toolchain\n        self.compiled_module = None\n        self.cache_dir = cache_dir\n        self.dirty = True\n        self.compilable = True\n\n    def compile(self):\n        \"\"\"\n        Trigger a compile of this backend.  Note that CUDA needs to know about the C++\n        backend as well.\n        \"\"\"\n        if not self.compilable: return\n        if isinstance(self.module, codepy.cuda.CudaModule):\n            self.compiled_module = self.module.compile(self.host_toolchain,\n                                                                        self.toolchain,\n                                                                        debug=True, cache_dir=self.cache_dir)\n        else:\n            self.compiled_module = self.module.compile(self.toolchain,\n                                                       debug=True, cache_dir=self.cache_dir)\n        self.dirty = False\n\n    def get_compiled_function(self, name):\n        \"\"\"\n        Return a callable for a raw compiled function (that is, this must be a variant name rather than\n        a function name).\n        \"\"\"\n        try:\n            func = getattr(self.compiled_module, name)\n        except:\n            raise AttributeError(\"Function %s not found in compiled module.\" % (name,))\n\n        return func\n\n\nclass ASPModule(object):\n    \"\"\"\n    ASPModule is the main coordination class for specializers.  A specializer creates an ASPModule to contain\n    all of its specialized functions, and adds functions/libraries/etc to the ASPModule.\n\n    ASPModule uses ASPBackend instances for each backend, ASPDB for its backing db for recording timing info,\n    and instances of SpecializedFunction and HelperFunction for specialized and helper functions, respectively.\n    \"\"\"\n\n    #FIXME: specializer should be required.\n    def __init__(self, specializer=\"default_specializer\", cache_dir=None, use_cuda=False, use_cilk=False, use_tbb=False, use_pthreads=False, use_scala=False):\n\n        self.specialized_functions= {}\n        self.helper_method_names = []\n\n        self.db = ASPDB(specializer)\n        \n        if cache_dir:\n            self.cache_dir = cache_dir\n        else:\n            # create a per-user cache directory\n            import tempfile, os\n            if os.name == 'nt':\n                username = os.environ['USERNAME']\n            else:\n                username = os.environ['LOGNAME']\n\n            self.cache_dir = tempfile.gettempdir() + \"/asp_cache_\" + username\n            if not os.access(self.cache_dir, os.F_OK):\n                os.mkdir(self.cache_dir)\n\n        self.backends = {}\n        self.backends[\"c++\"] = ASPBackend(codepy.bpl.BoostPythonModule(),\n                                          codepy.toolchain.guess_toolchain(),\n                                          self.cache_dir)\n        if use_cuda:\n            self.backends[\"cuda\"] = ASPBackend(codepy.cuda.CudaModule(self.backends[\"c++\"].module),\n                                               codepy.toolchain.guess_nvcc_toolchain(),\n                                               self.cache_dir,\n                                               self.backends[\"c++\"].toolchain)\n            self.backends['cuda'].module.add_to_preamble([cpp_ast.Include('cuda.h', True)]) # codepy.CudaModule doesn't do this automatically for some reason\n            self.backends['cuda'].module.add_to_preamble([cpp_ast.Include('cuda_runtime.h', True)]) # codepy.CudaModule doesn't do this automatically for some reason\n            self.backends['c++'].module.add_to_preamble([cpp_ast.Include('cuda_runtime.h', True)]) # codepy.CudaModule doesn't do this automatically for some reason\n            self.backends[\"cuda\"].toolchain.cflags += [\"-shared\"]\n        if use_cilk:\n            self.backends[\"cilk\"] = self.backends[\"c++\"]\n            self.backends[\"cilk\"].toolchain.cc = \"icc\"\n        if use_tbb:\n            self.backends[\"tbb\"] = self.backends[\"c++\"]\n            self.backends[\"tbb\"].toolchain.cflags += [\"-ltbb\"]\n        if use_pthreads:\n            self.backends[\"pthreads\"] = self.backends[\"c++\"]\n            self.backends[\"pthreads\"].toolchain.cflags += [\"-pthread\"]\t    \n        if use_scala:\n            self.backends[\"scala\"] = ASPBackend(scala_module.ScalaModule(),\n                                                scala_module.ScalaToolchain(),\n                                                self.cache_dir)\n\n\n    def add_library(self, feature, include_dirs, library_dirs=[], libraries=[], backend=\"c++\"):\n        self.backends[backend].toolchain.add_library(feature, include_dirs, library_dirs, libraries)\n        \n    def add_cuda_arch_spec(self, arch):\n        archflag = '-arch='\n        if 'sm_' not in arch: archflag += 'sm_' \n        archflag += arch\n        self.backends[\"cuda\"].toolchain.cflags += [archflag]\n\n    def add_header(self, include_file, brackets=False, backend=\"c++\"):\n        \"\"\"\n        Add a header (e.g. #include \"foo.h\") to the module source file.\n        With brackets=True, it will be C++-style #include <foo> instead.\n        \"\"\"\n        self.backends[backend].module.add_to_preamble([cpp_ast.Include(include_file, brackets)])\n\n    def add_to_preamble(self, pa, backend=\"c++\"):\n        if isinstance(pa, basestring):\n            pa = [cpp_ast.Line(pa)]\n        self.backends[backend].module.add_to_preamble(pa)\n\n    def add_to_init(self, stmt, backend=\"c++\"):\n        if isinstance(stmt, str):\n            stmt = [cpp_ast.Line(stmt)]\n        if backend == \"cuda\":\n            self.backends[backend].module.boost_module.add_to_init(stmt) #HACK because codepy's CudaModule doesn't have add_to_init()\n        else:\n            self.backends[backend].module.add_to_init(stmt)\n        \n    def add_to_module(self, block, backend=\"c++\"):\n        if isinstance(block, basestring):\n            block = [cpp_ast.Line(block)]\n        self.backends[backend].module.add_to_module(block)\n\n    def add_function(self, fname, funcs, variant_names=[], run_check_funcs=[], key_function=None, \n                     backend=\"c++\", call_policy=None):\n        \"\"\"\n        Add a specialized function to the Asp module.  funcs can be a list of variants, but then\n        variant_names is required (also a list).  Each item in funcs should be a string function or\n        a cpp_ast FunctionDef.\n        \"\"\"\n        if not isinstance(funcs, list):\n            funcs = [funcs]\n            variant_names = [fname]\n\n        self.specialized_functions[fname] = SpecializedFunction(fname, self.backends[backend], self.db, variant_names,\n                                                                variant_funcs=funcs, \n                                                                run_check_funcs=run_check_funcs,\n                                                                key_function=key_function,\n                                                                call_policy=call_policy)\n\n    def add_helper_function(self, fname, func, backend=\"c++\"):\n        \"\"\"\n        Add a helper function, which is a specialized function that it not timed and has a single variant.\n        \"\"\"\n        self.specialized_functions[fname] = HelperFunction(fname, func, self.backends[backend])\n\n\n    def expose_class(self, classname, backend=\"c++\"):\n        \"\"\"\n        Expose a class or struct from C++ to Python, letting us pass instances back and forth\n        between Python and C++.\n\n        TODO: allow exposing *functions* within the class\n        \"\"\"\n        self.backends[backend].module.add_to_init([cpp_ast.Line(\"boost::python::class_<%s>(\\\"%s\\\");\\n\" % (classname, classname))])\n\n\n    def __getattr__(self, name):\n        if name in self.specialized_functions:\n            return self.specialized_functions[name]\n        else:\n            raise AttributeError(\"No method %s found; did you add it to this ASPModule?\" % name)\n\n    def generate(self):\n        \"\"\"\n        Utility function for, during development, dumping out the generated\n        source from all the underlying backends.\n        \"\"\"\n        src = \"\"\n        for x in self.backends.keys():\n            src += \"\\nSource code for backend '\" + x + \"':\\n\" \n            src += str(self.backends[x].module.generate())\n\n        return src\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(data):\n    \"\"\"Removes duplicates from a given list while preserving the order.\"\"\"\n    seen = set()\n    result = []\n    for x in data:\n        if x not in seen:\n            seen.add(x)\n            result.append(x)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport random\nimport simanneal\n\n# Optimization function\ndef optimize(state):\n x1, x2, x3, x4 = state\n value = x1**2 + x2**2 - 3*x3 + x4**2\n return -value\n\n# Simulated Annealing Algorithm\ninit_state = [1.0, 1.0, 1.0, 1.0]\nschedule = simanneal.Annealer(optimize, init_state)\nschedule.steps = 1000\nresult = schedule.anneal()\n\n# Print results\nprint(\"Optimized variables: \")\nprint(\"x1 = {0}\".format(result[0]))\nprint(\"x2 = {0}\".format(result[1]))\nprint(\"x3 = {0}\".format(result[2]))\nprint(\"x4 = {0}\".format(result[3])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class User:\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n        self.is_authenticated = False\n\n    def authenticate(self, username, password):\n        if (username == self.username and password == self.password):\n            self.is_authenticated = True\n    \n    def logout(self):\n        self.is_authenticated = False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci():\n    a, b = 0, 1\n    while True:\n        yield b\n        a, b = b, a + b\n\nfor num in fibonacci():\n    print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(s): \n\n    # Strip punctuation and make input lowercase \n    s = ''.join(e.lower() for e in s if e.isalnum())\n\n    # Check if the string is a palindrome \n    return s == s[::-1] \n\n# Driver Code\nstring = \"A man, a plan, a canal: Panama\"\nprint(is_palindrome(string)) # Output: true but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MyClass:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n    \n    def add(self):\n        return self.a + self.b + self.c\n    \n    def multiply(self):\n        return self.a * self.b * self.c but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def searchElement(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return i\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # encoding: utf-8\nimport datetime\nfrom south.db import db\nfrom south.v2 import SchemaMigration\nfrom django.db import models\n\nclass Migration(SchemaMigration):\n\n    def forwards(self, orm):\n        \n        # Removing M2M table for field project on 'New'\n        db.delete_table('news_new_project')\n\n        # Adding M2M table for field projects_relateds on 'New'\n        db.create_table('news_new_projects_relateds', (\n            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),\n            ('new', models.ForeignKey(orm['news.new'], null=False)),\n            ('project', models.ForeignKey(orm['projects.project'], null=False))\n        ))\n        db.create_unique('news_new_projects_relateds', ['new_id', 'project_id'])\n\n\n    def backwards(self, orm):\n        \n        # Adding M2M table for field project on 'New'\n        db.create_table('news_new_project', (\n            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),\n            ('new', models.ForeignKey(orm['news.new'], null=False)),\n            ('project', models.ForeignKey(orm['projects.project'], null=False))\n        ))\n        db.create_unique('news_new_project', ['new_id', 'project_id'])\n\n        # Removing M2M table for field projects_relateds on 'New'\n        db.delete_table('news_new_projects_relateds')\n\n\n    models = {\n        'auth.group': {\n            'Meta': {'object_name': 'Group'},\n            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),\n            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),\n            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': \"orm['auth.Permission']\", 'symmetrical': 'False', 'blank': 'True'})\n        },\n        'auth.permission': {\n            'Meta': {'ordering': \"('content_type__app_label', 'content_type__model', 'codename')\", 'unique_together': \"(('content_type', 'codename'),)\", 'object_name': 'Permission'},\n            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),\n            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['contenttypes.ContentType']\"}),\n            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),\n            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})\n        },\n        'auth.user': {\n            'Meta': {'object_name': 'User'},\n            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),\n            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),\n            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),\n            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': \"orm['auth.Group']\", 'symmetrical': 'False', 'blank': 'True'}),\n            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),\n            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),\n            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),\n            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),\n            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),\n            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),\n            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),\n            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': \"orm['auth.Permission']\", 'symmetrical': 'False', 'blank': 'True'}),\n            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})\n        },\n        'contenttypes.contenttype': {\n            'Meta': {'ordering': \"('name',)\", 'unique_together': \"(('app_label', 'model'),)\", 'object_name': 'ContentType', 'db_table': \"'django_content_type'\"},\n            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),\n            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),\n            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),\n            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})\n        },\n        'news.new': {\n            'Meta': {'object_name': 'New'},\n            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['auth.User']\"}),\n            'body': ('django.db.models.fields.TextField', [], {}),\n            'datetime': ('django.db.models.fields.DateTimeField', [], {}),\n            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),\n            'image': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),\n            'projects_relateds': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': \"orm['projects.Project']\", 'null': 'True', 'blank': 'True'}),\n            'summary': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),\n            'title': ('django.db.models.fields.CharField', [], {'max_length': '200'})\n        },\n        'projects.project': {\n            'Meta': {'object_name': 'Project'},\n            'description': ('django.db.models.fields.TextField', [], {}),\n            'end_date': ('django.db.models.fields.DateField', [], {'null': 'True'}),\n            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),\n            'logo': ('django.db.models.fields.files.ImageField', [], {'max_length': '100'}),\n            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),\n            'sponsor': ('django.db.models.fields.CharField', [], {'max_length': '100'}),\n            'start_date': ('django.db.models.fields.DateField', [], {}),\n            'status': ('django.db.models.fields.CharField', [], {'max_length': '100'})\n        }\n    }\n\n    complete_apps = ['news']\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: line1: emocleW ot gnirtS ecnerefxeT\nline2: sI si nuf but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: len(\"Hello World\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return '({}, {})'.format(self.x, self.y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sqrt(x): \n    if x == 0 or x == 1: \n        return x \n      \n    i = 1 \n    res = 1 \n    while res <= x: \n        i += 1 \n        res = i * i \n      \n    return i-1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n \nurl = \"https://www.example.com/\"\npage = requests.get(url)\n \nsoup = BeautifulSoup(page.content, 'html.parser')\ntext = soup.find(string=\"Hello, world!\")\nprint(text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Enigma(object):\n    def __init__(self, rotors, reflector, ringsetting, plugboard):\n        self.rotors = rotors\n        self.reflector = reflector\n        self.ringsetting = ringsetting\n        self.plugboard = plugboard\n\n    def encrypt(self, message):\n        # code for encryption\n        pass\n\n    def decrypt(self, message):\n        # code for decryption\n        pass but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for x in range(0, 11):\n print(x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# make an HTTP request to the given URL\nr = requests.get(url)\n\n# parse the response\nsoup = BeautifulSoup(r.content, 'html.parser')\n\n# find all the links on the page\nlinks = soup.find_all('a')\nexternal_links = []\n\n# loop through the links and extract the external ones\nfor link in links:\n    href = link.get('href')\n    # check if the link is valid and external (not on the same page)\n    if href and href.startswith('http'):\n        external_links.append(href)\n\n# print the list of external links\nprint(external_links) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # size is the dimension of the square\nsize = 5\n\n# loop through the rows\nfor row in range(size):\n\n # loop through the columns\n for col in range(size):\n print('*', end='') # end='' prevents line break\n\n print() # prints new line but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import mysql.connector\nimport matplotlib.pyplot as plt\n\n# Connect to the database\nmydb = mysql.connector.connect(\n    host=\"localhost\",\n    user=\"root\",\n    passwd=\"password\",\n    database=\"dbname\"\n)\n\n# Create a cursor\nmycursor = mydb.cursor()\n\n# Execute a query\nmycursor.execute(\"SELECT customer_id, COUNT(*) FROM orders GROUP BY customer_id\")\n\n# Fetch results\nresults = mycursor.fetchall()\n\n# Generate Chart\nordercounts = [result[1] for result in results]\ncustomers = []\nfor result in results:\n    mycursor.execute(\"SELECT name FROM customers WHERE id = %s\" % (result[0],))\n    name_result = mycursor.fetchone()\n    customers.append(name_result[0])\n\nplt.bar(customers, ordercounts)\nplt.xticks(customers, rotation=90)\nplt.ylabel('Order Count')\nplt.xlabel('Customer')\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\nimport datetime as dt\n\n# import price data for the asset\nprices = pd.read_csv('data.csv', index_col=0, parse_dates=True)\n\n# add a new column for the relative strength index\nprices['RSI'] = np.nan\n\n# define the period for the rolling window\nn = 14 \n\n# calculate the relative strength index\nfor i in range(n,len(prices)):\n prices.loc[prices.index[i],'RSI'] = round(100 - \n 100/(1+prices['Close'][i-n:i].pct_change().mean()/prices['Close'][i-n:i].pct_change().std()),2)\n  \n# generate buy and sell signals\nprices['Signal'] = np.nan\n\nfor i in range(n,len(prices)):\n if prices.loc[prices.index[i],'RSI'] <= 30:\n prices.loc[prices.index[i],'Signal'] = 'BUY'\n elif prices.loc[prices.index[i],'RSI'] >= 70:\n prices.loc[prices.index[i],'Signal'] = 'SELL'\n else:\n prices.loc[prices.index[i],'Signal'] = None\n\n# define capital to trade\ncapital = 100000\n\n# assign positions\nposition = 0 # 0 = no position, 1 = long, -1 = short\n\n# plot the RSI indicator with buy and sell signals\nplt.figure(figsize=(15,10))\nplt.plot(prices.RSI, label='Relative Strength Index (RSI)')\nplt.scatter(prices[prices['Signal']=='BUY'].index,prices[prices['Signal']=='BUY'].RSI,\n marker='o', color='green', label='Buy Signal')\nplt.scatter(prices[prices['Signal']=='SELL'].index,prices[prices['Signal']=='SELL'].RSI,\n marker='o', color='red', label='Sell Signal')\nplt.legend(loc='upper left')\nplt.title('Relative Strength Index (RSI) with Buy and Sell Signals')\nplt.show()\n\n# execute trades\nfor i in range(0, len(prices)-1):\n\n if prices.loc[prices.index[i],'Signal'] == 'BUY' and position == 0:\n # enter long position\n position = 1\n # calculate the number of contracts \n lotSize = np.int(np.floor(capital * 0.01 / (prices.loc[prices.index[i],'Close'] * 100)))\n # calculate entry price\n entryPrice = prices.loc[prices.index[i],'Close']\n # update capital\n capital = capital - lotSize * entryPrice * 100\n elif prices.loc[prices.index[i],'Signal'] == 'SELL' and position == 0:\n # enter short position\n position = -1\n # calculate the number of contracts\n lotSize = np.int(np.floor(capital * 0.01 / (prices.loc[prices.index[i],'Close'] * 100)))\n # calculate entry price\n entryPrice = prices.loc[prices.index[i],'Close']\n # update capital\n capital = capital + lotSize * entryPrice * 100\n elif prices.loc[prices.index[i+1],'Signal'] == 'SELL' and position == 1:\n # exit long position\n position = 0\n # calculate exit price\n exitPrice = prices.loc[prices.index[i+1],'Close']\n # update capital\n capital = capital + lotSize * exitPrice * 100\n elif prices.loc[prices.index[i+1],'Signal'] == 'BUY' and position == -1:\n # exit short position\n position = 0\n # calculate exit price\n exitPrice = prices.loc[prices.index[i+1],'Close']\n # update capital\n capital = capital - lotSize * exitPrice * 100\n\n# print final capital\nprint('Final capital:',round(capital,2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def access_key(key, dictionary): \n    if key not in dictionary: \n        return -1\n    return dictionary[key] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nwords = text.split()\n\nword_counts = Counter(words)\nmost_common_words = word_counts.most_common()\n\nfor word, count in most_common_words:\n    print(word, count)\n# Output:\n# the 2\n# quick 1\n# brown 1\n# fox 1\n# jumps 1\n# over 1\n# lazy 1\n# dog 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stock:\n  def __init__(self, symbol):\n    self.symbol = symbol\n    self.prices = []\n \n  def add_price(self, price):\n    self.prices.append(price)\n \n  def get_prices(self):\n    return self.prices\n      \nAAPL = Stock('AAPL')\nAAPL.add_price(191.43)\nAAPL.add_price(193.57)\nAAPL.add_price(190.08)\nAAPL.get_prices() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_word(inp, src, target):\n    inp = inp.split()\n    for i in range(len(inp)):\n        if inp[i] == src:\n            inp[i] = target\n    return ' '.join(inp) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize_list(numbers):\n    optimized_list = []\n    for i, n in enumerate(numbers):\n        if i == 0:  # first element\n            optimized_list.append(numbers[1]/2)\n        elif i == len(numbers)-1:  # last element\n            optimized_list.append(numbers[-2]/2)\n        else:  # any other element\n            optimized_list.append(sum(numbers[i-1:i+2])/3)\n    return optimized_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import speech_recognition as sr\nimport pyttsx3\n\n# Initialize text-to-speech engine\nengine = pyttsx3.init()\n\n# Listen for voice commands\nr = sr.Recognizer()\nwith sr.Microphone() as source:\n\tr.adjust_for_ambient_noise(source)\n\taudio = r.listen(source)\n\n# Get transcript\ncommand = r.recognize_google(audio).lower()\n\nif 'hello' or 'hi' in command:\n\tengine.say('Hello! How can I help you?')\n\tengine.runAndWait()\n\n# Create logic for other commands here... but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import statistics\n\ndata_set = [\n    [21, 24, 23, 20, 19, 19],\n    [15, 22, 20, 16, 8, 14],\n    [7, 6, 5, 9, 10, 14]\n]\n\nfor group in data_set:\n    print(\"Mean: \" + str(statistics.mean(group)))\n    print(\"Median: \" + str(statistics.median(group)))\n    print(\"Standard Deviation: \" + str(statistics.stdev(group)))\n    print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_random_numbers(start, end):\n    import random \n    return random.randint(start, end) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# URL of the website to scrape\nurl = 'https://www.example.com/articles/'\n\n# Request the HTML page\nr = requests.get(url)\n\n# Create a BeautifulSoup object\nsoup = BeautifulSoup(r.content, 'html.parser')\n\n# Extract all the links from the page\nlinks = soup.find_all('a')\n\n# Iterate through the links and download the articles\nfor link in links:\n    # Get the link target\n    link_target = link.get('href')\n    \n    # If the link target is an article, download it\n    if 'article' in link_target:\n        article_url = url + link_target\n        r = requests.get(article_url)\n        with open(link_target, 'w') as f:\n            f.write(r.content) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def menu():\n    \n    menu_items = {\n        '1': 'Apple',\n        '2': 'Orange',\n        '3': 'Banana',\n        '4': 'Exit'\n    }\n    \n    print(\"Menu Items:\")\n    print(\"1. Apple\")\n    print(\"2. Orange\")\n    print(\"3. Banana\")\n    print(\"4. Exit\")\n    while True:\n        selection = input(\"Enter your selection: \")\n        if selection in menu_items:\n            if selection == '4':\n                break\n            else:\n                print(\"Selected item:\", menu_items[selection])\n                break\n        else:\n            print(\"Invalid selection!\")\n\nmenu() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_lengths(strings):\n  return {string : len(string) for string in strings}\n\nstrings = ['one', 'two', 'three', 'four']\n\nprint(count_lengths(strings))\n# Output: {'one': 3, 'two': 3, 'three': 5, 'four': 4} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \nimport pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score \n\n# load and prepare the data\ndata = pd.read_csv(\"data.csv\")\n# split into training and test datasets\nX_train, X_test, y_train, y_test = train_test_split(data['text'], data['sentiment'], test_size=0.3, random_state=42)\n\n# transform text into numbers\ntfidf = TfidfVectorizer(max_features=1000, stop_words='english')\nX_train_tfidf = tfidf.fit_transform(X_train) \nX_test_tfidf = tfidf.transform(X_test)\n\n# create and train the model \nmodel = MultinomialNB()\nmodel.fit(X_train_tfidf, y_train)\n\n# make predictions\ny_pred = model.predict(X_test_tfidf)\n\n# evaluate the model \nscore = accuracy_score(y_test, y_pred)\nprint(score) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_primes(start, end):\n for i in range(start, end + 1):\n  if is_prime(i):\n   print(i)\n   \ndef is_prime(n):\n if n <= 1:\n  return False\n if n == 2:\n  return True\n if n > 2 and n % 2 == 0:\n  return False\n \n for i in range(3, int(n ** 0.5) + 1, 2):\n  if n % i == 0:\n   return False\n \n return True\n \n \nprint_primes(2, 10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Name:\n    def __init__(self, name):\n        self.name = name\n\n    def showName(self):\n        print(self.name)\n\n    def hideName(self):\n        self.name = '*****'\n        print(self.name) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_greater_numbers(arr, num):\n    result = [x for x in arr if  x > num]\n    result.sort()\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(list, target):\n  for index, item in enumerate(list):\n    if target == item:\n      return index\n    return -1\n\nresult = linear_search([2, 3, 5, 7, 11], 5)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef areaOfCircle(radius):\n    area = round(math.pi * (radius ** 2), 2)\n    return area\n\narea = areaOfCircle(7)\nprint(area) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create the project\n$ django-admin startproject myproject \n\n# Create the application\n$ cd myproject\n$ python manage.py startapp user_data\n\n# Add the app to installed apps\n# myproject/settings.py\nINSTALLED_APPS = [\n 'user_data',\n ...\n]\n\n# Create the models\n# user_data/models.py\nfrom django.db import models\n\nclass User(models.Model):\n name = models.CharField(max_length=100)\n email = models.EmailField()\n\nclass Data(models.Model):\n user = models.ForeignKey(User, on_delete=models.CASCADE)\n data = models.TextField()\n\n# Create the migrations\n$ python manage.py makemigrations\n$ python manage.py migrate\n\n# Create the views\n# user_data/views.py\nfrom django.shortcuts import render\nfrom .models import User, Data\n\ndef index(request):\n users = User.objects.all()\n context = {\n  'users': users,\n }\n return render(request, 'user_data/index.html', context)\n\ndef user_data(request, user_id):\n user = User.objects.get(id=user_id)\n data = Data.objects.filter(user=user)\n context = {\n  'user': user,\n  'data': data,\n }\n return render(request, 'user_data/user_data.html', context) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def double(number: int) -> int:\n    return number << 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n\n    def description(self):\n        return f'This car is a {self.year} {self.make} {self.model}' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter \n  \ndef is_anagram(str1, str2): \n    # Convert both strings to lowercase \n    str1 = str1.lower() \n    str2 = str2.lower() \n  \n    # Remove all whitespaces\n    str1 = str1.replace(\" \", \"\") \n    str2 = str2.replace(\" \", \"\") \n \n    # remove all special characters\n    for char in \"!'_,@#$%^&*():;\":\n        str1 = str1.replace(char, '')\n        str2 = str2.replace(char, '')\n\n    # sort the character of both strings \n    sorted_str1 = sorted(str1) \n    sorted_str2 = sorted(str2) \n  \n    # Check if both strings are equal or not \n    if(sorted_str1 == sorted_str2):  \n        return True \n    else: \n        return False \n  \n# Driver program \nstr1 = \"listen\"\nstr2 = \"silent\"\n\nif is_anagram(str1, str2): \n    print(\"The strings are anagrams.\") \nelse: \n    print(\"The strings are not anagrams.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_profit(prices):\n n = len(prices) \n profit = [0]*n \n max_price = prices[n-1]  \n\n ## Traverse from last element of Prices array \n for i in range(n-2, -1, -1): \n     if (prices[i]> max_price): \n         max_price = prices[i] \n     profit[i] = max(profit[i+1], max_price-prices[i]) \n\n total_profit = profit[0] \n\n for i in range(1,n): \n     if (profit[i] > total_profit): \n         total_profit = profit[i] \n\n return total_profit \n\n# Driver code \nstock_prices = [10, 7, 5, 8, 11, 9] \nprint(\"Total profit:\", max_profit(stock_prices)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom scipy.optimize import minimize\n\nclass ParamOptimizer:\n    def __init__(self, X, y):\n        self.X = X\n        self.y = y\n        \n    def cost_function(self, x):\n        return np.sum(np.reshape(x, (self.X.shape[1], -1)) * self.X - self.y) ** 2\n    \n    def optimize(self):\n        res = minimize(self.cost_function, np.zeros(self.X.shape[1]))\n        return res.x but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_common_element(arr1, arr2):\n    common_elements = []\n    for element1 in arr1:\n        for element2 in arr2:\n            if element1 == element2 and element1 not in common_elements:\n                common_elements.append(element1)\n    return common_elements but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# We can use requests to get the webpage data\nwebpage = requests.get('http://localnewwebsite.com')\n\n# Parse the HTML using BeautifulSoup\nsoup = BeautifulSoup(webpage.content, 'html.parser')\n\n# Find the div containing the headlines\nheadlines_div = soup.find('div', class_='headlines')\n\n# Find all the h2 elements within the headlines div\nheadlines = headlines_div.find_all('h2')\n\n# Print the top 5 headlines\nfor h in headlines[:5]:\n print (h.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize(arr): \n    # Get the length of the list \n    n = len(arr) \n  \n    # Initialize index variables \n    max_len = 1\n    ending_index = 0\n  \n    # Initialize temp index \n    temp_index = 0\n  \n    # If array of length is more than 1 \n    if (n > 1): \n  \n        # Create a loop to find the longest sub sequence \n        for i in range(1, n): \n  \n            # If previous value is less then the current value \n            if (arr[temp_index] < arr[i]): \n\n                # increment the max_len and temp_index \n                max_len += 1\n                temp_index = i\n  \n            else: \n  \n                # If max_len is greater then previous max_len \n                if (max_len > (i - ending_index)): \n  \n                    # assign the ending_index and temp_index \n                    ending_index = temp_index \n                    temp_index = i \n  \n                # else assiging the max_len to its minimum value \n                max_len = 1\n                  \n    return max_len but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_even_numbers(start, end):\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            print(i)\n\nif __name__ == '__main__':\n    print_even_numbers(1, 10)\n\n# Output\n2\n4\n6\n8\n10 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generateFibo(length):\n    fibo = [0, 1]\n    for i in range(2, length):\n        fibo.append(fibo[i-2] + fibo[i-1])\n    return fibo\n\nif __name__ == '__main__':\n    print(generateFibo(10)) # [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\nconn = sqlite3.connect('database.db')\ncursor = conn.cursor()\n\ncursor.execute(\"SELECT CustomerID, FirstName, LastName FROM Customers WHERE Country = 'Germany'\") \nrows = cursor.fetchall()\n\nconn.close()\n\n# Output rows\nfor row in rows:\n    print(row[0], row[1], row[2]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: const directoryStructure = {\n  \"root\": {\n    \"Projects\": {\n      \"Python\": {\n        \"Scripts\": {\n          \"script1.py\": null,\n          \"script2.py\": null\n        }\n      },\n      \"JavaScript\": {\n        \"Scripts\": {\n          \"script1.js\": null,\n          \"script2.js\": null\n        }\n      }\n    },\n    \"Documents\": {\n      \"paper1.pdf\": null,\n      \"paper2.pdf\": null\n    }\n  }\n}; but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(s):\n    result = \"\"\n    for i in range(len(s)-1, -1, -1):\n        result += s[i]\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def word_count(str):\n words = str.split()\n return len(words)\n\nprint(word_count(\"This is a sample string with some words\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def encrypt(text): \n    result = \"\" \n    for i in range(len(text)): \n        char = text[i] \n        if (char.isupper()): \n            result += chr((ord(char) + 7)) \n        else: \n            result += chr((ord(char) + 3)) \n    return result \n\ntext = \"Hello, World!\"\nprint(encrypt(text)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_range(start, end): \n    sum = 0\n    for i in range(start, end+1): \n        sum += i\n    return sum \n  \n# Driver Code \nprint(sum_of_range(10, 20)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create a dictionary to store contact info\ncontacts = {}\n \n# Ask user to enter contact name\nname = input('Enter contact name: ')\n \n# Ask user to enter contact number\nnumber = input('Enter contact number: ')\n \n# Store contact in contacts dictionary\ncontacts[name] = number\n \n# Print out contact info\nfor contact, number in contacts.items():\n    print(f'{contact}: {number}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import psycopg2\n\ntry:\n connection = psycopg2.connect(\n user = \"postgres\",\n password = \"your_password\",\n host = \"localhost\",\n port = \"5432\",\n database = \"your_database\"\n )\n\n cursor = connection.cursor()\n postgreSQL_select_Query = \"select * from table_name\"\n  \n cursor.execute(postgreSQL_select_Query)\n  \n print(\"Table Before inserting a record\")\n records = cursor.fetchall() \n \n postgres_insert_query = \"\"\" INSERT INTO table_name (column_1, column_2, colum_n) VALUES (%s,%s,%s)\"\"\"\n record_to_insert = ('value1', 'value2', 'value3')\n cursor.execute(postgres_insert_query, record_to_insert)\n connection.commit()\n\n print(\"Table After inserting a record\")\n cursor.execute(postgreSQL_select_Query)\n records = cursor.fetchall() \n\nexcept (Exception, psycopg2.Error) as error :\n    print (\"Error while connecting to PostgreSQL\", error)\nfinally:\n    if(connection):\n        cursor.close()\n        connection.close()\n        print(\"PostgreSQL connection is closed\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef get_password():\n chars = string.ascii_letters + string.digits\n password = ''.join((random.choice(chars)) for i in range(8))\n if (any(x.isupper() for x in password) and \n any(x.islower() for x in password) \n and any(x.isdigit() for x in password)):\n return password\n else:\n return get_password()\n\npassword = get_password()\nprint(password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(length):\n # Initialize the first two numbers \n a, b = 0, 1 \n\n # We generate the Fibonacci series \n # up to a given length \n res = [] \n while (len(res) < length): \n res.append(b)\n \n # Calculate the next Fibonacci number \n a, b = b, a + b \n\n # Return the generated Fibonacci series \n return res\n\nprint(fibonacci(5))\n# Output -> [1, 1, 2, 3, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def computeTable(num):\n  # Print the header row\n  print(\"   \", end=\"\")\n  for colNum in range(1, 11):\n    print(f\"{colNum:4}\", end=\"\")\n  print()\n  \n  # Print each row\n  for rowNum in range(1, 11):\n    print(f\"{rowNum:3} \", end=\"\")\n    for colNum in range(1, 11):\n      # Compute and print the product\n      product = rowNum * colNum\n      print(f\"{product:4}\", end=\"\")\n    print()\n\nnum = 6\ncomputeTable(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sum = 7 + 4\nprint(sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def groupStrings(strings):\n    # Initialize a dictionary\n    dict = {}\n\n    # Iterate over the list\n    for string in strings:\n        # Get the first character\n        first_char = string[0]\n\n        # Check if the first character is in the dictionary\n        if first_char in dict:\n            # Append the string to the existing list\n            dict[first_char].append(string)\n        else:\n            # Create a list with the string\n            dict[first_char] = [string]\n\n    return dict\n\nresult = groupStrings(['apple', 'elephant', 'ball', 'cat'])\nprint(result) # {'a': ['apple'], 'e': ['elephant'], 'b': ['ball'], 'c': ['cat']} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nlowerLimit = int (input(\"Enter lower limit: \"))\nhigherLimit = int (input(\"Enter higher limit: \"))\n\nif (lowerLimit > higherLimit):\n    print(\"Invalid range.\")\nelse:\n    print(\"Random number between\", lowerLimit, \"and\", higherLimit, \"is:\", random.randint(lowerLimit, higherLimit)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n#Read the dataset\ndata = pd.read_csv('YOUR_DATASET.csv')\n\n#Split dataset into train & test sets\ntrain_data, test_data = train_test_split(data,test_size=0.2)\n\n#Vectorizing the words in the dataset for training and testing\nvectorizer = CountVectorizer(stop_words = 'english',lowercase = True)\n\n# Creating a document-term matrix\nx_train = vectorizer.fit_transform(train_data['TEXT'])\nx_test = vectorizer.transform(test_data['TEXT'])\n\n#Creating the model\nnb_model = MultinomialNB()\n \n# Training the model\nnb_model.fit(x_train, train_data['Spam/Non-Spam'])\n \n# Predicting the outcomes of the test data\npredictions = nb_model.predict(x_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def parse_string(s):\n    info = s.split(\", \")\n\n    result = {}\n    for item in info:\n        k, v = item.split(\": \")\n        result[k] = v\n\n    return result\n\nresult = parse_string(\"bio: John Smith, age: 32\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for number in range(0, 11, 2):\n    print(number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: @app.route('/search', methods=['POST'])\ndef search():\n    req = request.get_json()\n    search_term = req['search_term']\n\n    # Query your database here\n    query_result = db.find_by_search_term(search_term)\n\n    return jsonify({'result': query_result}) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# Load the dataset\ndf = pd.read_csv('car-pricing-dataset.csv')\n\n# Create new row of data\nnew_row = {\n 'make': 'Honda',\n 'model': 'Odyssey',\n 'year': 2020,\n 'features': 'V6 engine, navigation system',\n}\n\n# Vectorize data\nX = pd.get_dummies(df)\nX_row = pd.get_dummies(pd.DataFrame(new_row, index=[0]))\n\n# Train a model\nfrom sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor(n_estimators=100)\nmodel.fit(X, df['price'])\n\n# Predict new row of data\npredicted_price = model.predict(X_row)[0]\n\n# Print result\nprint(f'The estimated price of the {new_row[\"year\"]} {new_row[\"make\"]} {new_row[\"model\"]} {new_row[\"features\"]} is ${predicted_price:.2f}.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import deque\n\nclass FIFOQueue:\n    def __init__(self):\n        self.queue = deque([])\n\n    def enqueue(self, item):\n        self.queue.appendleft(item)\n\n    def dequeue(self):\n        if self.is_empty():\n            raise IndexError(\"Cannot dequeue from an empty queue.\")\n        return self.queue.pop()\n\n    def is_empty(self):\n        return len(self.queue) == 0\n\n    def size(self):\n        return len(self.queue) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef generate_primes(n): \n    primes = []\n    num = 2\n    while len(primes) < n: \n        is_prime = True\n        for i in range(2, int(math.sqrt(num)) + 1): \n            if num % i == 0: \n                is_prime = False\n                break\n\n        if is_prime: \n            primes.append(num)\n\n        num += 1\n    \n    return primes\n\nn = 8\nprimes = generate_primes(n)\nprint(primes) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def extract_first_word(sentence):\n    words = sentence.split()\n    return words[0]\n\nsentence = \"This is a sentence\"\nfirst_word = extract_first_word(sentence)\nprint(first_word) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_sum(numbers):\n    return sum(numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import networkx as nx\n\ndef connected_components(graph):\n    subgraphs = nx.connected_components(graph)\n    components = [graph.subgraph(c).copy() for c in subgraphs]\n    return components but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = 'https://example.com/api'\nresponse = requests.get(url)\ndata = response.json()\n\nmax_value = 0\nfor item in data:\n if item['field'] > max_value:\n max_value = item['field']\n\nprint('The largest value is:', max_value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(str1, str2):\n str1 = str1.lower()\n str2 = str2.lower()\n\n if len(str1) != len(str2):\n return False\n   \n char_count = {}\n \n for c in str1:\n if c not in char_count:\n char_count[c] = 1\n else:\n char_count[c] += 1\n  \n for c in str2:\n if c not in char_count:\n return False\n else:\n char_count[c] -= 1\n  \n for k in char_count:\n if char_count[k] != 0:\n return False\n  \n return True\n\nprint(is_anagram(\"listen\", \"silent\")) // True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def traverse_2d_list(list2d):\n    for row in list2d:\n        print(row) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Compute list of squared values using vectorization\nmy_list = [1,2,3,4,5]\n\nout_list = [pow(element,2) for element in my_list] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class NumStringConverter:\n    def int_to_str(self, number):\n        return str(number)\n    \n    def str_to_int(self, string):\n        return int(string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def largest_prime(num):\n    largest_prime = 0\n    for n in range (num):\n        if(isPrime(n)):\n            largest_prime = n\n    return largest_prime\n\ndef isPrime(n):\n    if(n == 1):\n        return False\n    elif(n == 2):\n        return True\n    else:\n        for x in range(2,n//2+1):\n            if(n % x == 0):\n                return False\n        return True\n\nprint(largest_prime(100)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list1 = [1, 2, 3, 4, 5]\nitem_index = 3\n\ndef access_list_item(my_list, index):\n    return my_list[index]\n\nresult = access_list_item(list1, item_index)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import RPi.GPIO as GPIO\nimport time\n\n# Set GPIO mode\nGPIO.setmode(GPIO.BCM)\n\n# Set up GPIO pin\nGPIO.setup(18, GPIO.IN, pull_up_down = GPIO.PUD_UP)\n\n# Function that will run every time a button is pressed\ndef buttonPressed(channel):\n print(\"Button was pressed!\")\n\n# Bind the button press to the function\nGPIO.add_event_detect(18, GPIO.FALLING, callback=buttonPressed, bouncetime=300)\n\nwhile True:\n time.sleep(1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nA function that finds the maximum occurring character in a given string.\n\"\"\"\n\ndef maxCharFinder(string):\n    charDict = dict()\n\n    for char in string:\n        if char in charDict:\n            charDict[char] += 1\n        else:\n            charDict[char] = 1\n\n    maximumOccurChar = max(charDict, key=charDict.get)\n\n    return maximumOccurChar\n\nif __name__ == '__main__':\n    string = \"worldwide\"\n    print(maxCharFinder(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport unittest\n\ndef sorting_algorithm(arr):\n    # Insert sorting algorithm here\n    return sorted_arr\n\ndef test_sorting_algorithm():\n    test_arr = [random.randint(0, 100) for _ in range(20)]\n    assert sorting_algorithm(test_arr) == sorted(test_arr)\n\nif __name__=='__main__':\n    unittest.main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nDynamic programming program in Python to solve the knapsack problem \n\"\"\"\n\ndef knapsack(weights, values, capacity):\n    n = len(weights)\n \n    K = [[0 for x in range(capacity+1)] for x in range(n+1)]\n \n    # Build table K[][] in bottom up manner\n    for i in range(n+1):\n        for w in range(capacity+1):\n            if i==0 or w==0:\n                K[i][w] = 0\n            elif weights[i-1] <= w:\n                K[i][w] = max(values[i-1] + K[i-1][w-weights[i-1]],  K[i-1][w])\n            else:\n                K[i][w] = K[i-1][w]\n \n    # stores the result of Knapsack\n    res = K[n][capacity]\n    return res but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# Read the dataset\ndf = pd.read_csv('data.csv')\n\n# Split the dataset into features and labels\nX = df.drop('price',axis=1)\ny = df['price']\n\n# Split the dataset into train and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Build the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Evaluate the model\ntest_score = model.score(X_test, y_test)\nprint('Test Score:', test_score)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Print out some example predictions\nprint('\\nSample Predictions')\nfor i in range(10):\n    print(f'Predicted Price: {y_pred[i]:.2f}, Actual Price: {y_test.values[i]}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_power_two(num):\n    if num == 0:\n        return False\n    \n    while num != 1:\n        if num % 2 != 0:\n            return False\n        num = num // 2\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Send a request to the URL\nres = requests.get(\"https://www.example.com\")\n\n# Parse the response\nsoup = BeautifulSoup(res.text, 'html.parser')\n\n# Extract the data\ndata = soup.find_all('div') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_occurrence(string, character):\n    # Initializing the counter\n    count = 0\n    \n    # Traversing the string\n    for i in range(len(string)):\n        # Checking if character is the same\n        if (string[i] == character):\n            count += 1\n            \n    # Returning the result\n    return count\n\n# Testing the code\nif __name__ == \"__main__\": \n    # Testing string\n    string = 'This is a sample string' \n    character = 's' \n    # Printing the result\n    print(\"Number of occurrence of '\", character, \"' =\", count_occurrence(string, character)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_digits(n):\n    \"\"\"\n    Calculates the sum of all digits of a number\n\n    Args:\n        n (int): The number\n\n    Returns:\n        int: The sum of the digits\n    \"\"\"\n    if n == 0:\n        return 0\n    return n % 10 + sum_digits(n // 10) but is not the same. just give one example and only return the code."}
