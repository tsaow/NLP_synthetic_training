{"prompt": "make some code that functions the same as the following code: def fx(nums): \n return sum(map(lambda x : x*x if x % 2==0 else 0, nums)) \n\nprint(fx([3, 4, 5, 6, 7, 8, 9, 10]))  # Output: 240 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortArray(arr): \n    for i in range(len(arr)): \n        if (arr[i] > arr[i+1]):\n            temp = arr[i] \n            arr[i] = arr[i+1] \n            arr[i+1] = temp \n    return arr\n\nprint(sortArray([98, 45, 21, 99, 74, 44])) # Output: [21, 44, 45, 74, 98, 99] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: primes = [2]\nfor number in range(3,101):\n\tis_prime = True\n\tfor element in primes:\n\t\tif number % element == 0:\n\t\t\tis_prime = False\n\tif is_prime:\n\t\tprimes.append(number)\nprint(primes) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Calculates roots of quadratic equation\n\na = 1\nb = -7\nc = 10\n\n#Calculate root using formula\ndiscriminant = (b**2) - (4*a*c)\n\nif discriminant < 0:\n    print(\"The equation has no real solutions.\")\nelse:\n    root1 = (-b + (discriminant**.5)) / (2*a)\n    root2 = (-b - (discriminant**.5)) / (2*a)\n\n    print(\"The roots of this equation are:\", root1, \"and\", root2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_2d_array = [[1,2,3],[4,5,6],[7,8,9]]\nrow_to_retrieve = 2\ncolumn_to_retrieve = 0\n\nretrieved_element = my_2d_array[row_to_retrieve][column_to_retrieve] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def comb_four(nums): \n    result = [] \n    for i in range(len(nums)-3): \n        for j in range(i+1, len(nums)-2): \n            for k in range(j+1, len(nums)-1):\n                for l in range(k+1, len(nums)): \n                    result.append([nums[i], nums[j], nums[k], nums[l]]) \n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.tree import DecisionTreeClassifier\nimport pandas as pd\n\n# Read in the data\ndata = pd.read_csv('data.csv')\n\n# Split the data into target (purchase or not) and features\nX = data.iloc[:, 0:-1]\ny = data.iloc[:,-1]\n\n# Create the decision tree classifier\nclf = DecisionTreeClassifier(criterion='entropy')\n\n# Train the classifier\nclf.fit(X, y)\n\n# Make predictions on test data\ny_pred = clf.predict(X)\n\n# Calculate the accuracy of the predictions\nfrom sklearn import metrics\nprint('Accuracy: ', metrics.accuracy_score(y, y_pred)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Polygon:\n    def __init__(self, sides):\n        self.sides = sides\n    \n    def perimeter(self):\n        perimeter = 0\n        for side in self.sides:\n            perimeter += side\n        return perimeter but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_common_subsequence(s1, s2):\n m = len(s1)\n n = len(s2)\n \n # Create a table to store results of subproblems\n dp = [[0 for x in range(n + 1)] for x in range(m + 1)]\n \n # Fill d[][] in bottom up manner\n for i in range(m + 1):\n  for j in range(n + 1):\n   if i == 0 or j == 0:\n    dp[i][j] = 0\n   elif s1[i - 1] == s2[j - 1]:\n    dp[i][j] = dp[i - 1][j - 1] + 1\n   else:\n    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n \n # LCS will be last entry in the lookup table\n return dp[m][n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci_Generator(n): \n    if n<0: \n        print(\"Incorrect input\") \n  \n    # First and Second Fibonacci numbers are 0 and 1 respectively \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci_Generator(n-1)+Fibonacci_Generator(n-2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def celsius_to_fahrenheit(celsius): \n    fahrenheit = celsius * 9/5 + 32\n    return fahrenheit but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: new_list = []\nfor i in range(0, len(list)):\n    new_list.append(str(list[i])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Load and clean the data\ndata = pd.read_csv('imdb_data.csv').dropna()\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(data['review'], \n                                                    data['label'], \n                                                    test_size=0.2)\n\n# Create bag of words model\ncv = CountVectorizer()\ncv.fit(X_train)\nX_train = cv.transform(X_train)\nX_test = cv.transform(X_test)\n\n# Create Naive Bayes model\nNB_model = MultinomialNB()\nNB_model.fit(X_train, y_train)\n\n# Make predictions\ny_predictions = NB_model.predict(X_test)\n\n# Evaluate performance\naccuracy = np.mean(y_predictions==y_test)\nprint('Model accuracy is:', accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(3, 11):\n    if(i % 2 == 0):\n        print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(n):\n    if n <= 1: \n        return False\n    if n == 2: \n        return True\n    if n > 2 and n % 2 == 0: \n        return False\n\n    sqrt_n = int(n**0.5)\n    for i in range(3, sqrt_n+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\nif is_prime(37):\n    print('37 is a prime number!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [8, 5, 6, 3, 9]\n\nodd = 0\neven = 0\n\nfor num in arr: \n    if num % 2 == 0: \n        even += 1\n    else: \n        odd += 1\n\nprint(\"Number of odd numbers in the array: \", odd)\nprint(\"Number of even numbers in the array: \", even) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: String = \"Hello! What is your name?\"\ndef characterCounter(string, character):\n    count = 0\n    for ch in string:\n        if ch == character:\n            count += 1\n    return count\n\nprint(characterCounter(String, 'o')) # 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Dog:\n    def __init__(self, name, breed):\n        self.name = name\n        self.breed = breed\n    \n    def bark(self):\n        print(\"Woof!\")\n    \n    def __str__(self):\n        return f\"Name: {self.name}, Breed: {self.breed}\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: matches = []\n\nfor string in list_of_strings:\n if substring.lower() in string.lower():\n matches.append(string)\n\nprint(\"Matches: \", matches)\n# Output: Matches: ['Google', 'Amazon'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import torch\nimport torch.nn as nn\n\nclass NeuralNet(nn.Module):\n    def __init__(self, vocab_size, embedding_dim, output_dim):\n        super().__init__()\n        \n        self.embedding = nn.Embedding(vocab_size, embedding_dim)\n        self.fc = nn.Linear(embedding_dim, output_dim)\n        \n    def forward(self, x):\n        x = self.embedding(x)\n        x = x.view(x.shape[0], -1)\n        x = self.fc(x)\n        return x\n        \nmodel = NeuralNet(vocab_size, embedding_dim, output_dim) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longestString(str1, str2):\n  if len(str1) > len(str2):\n    return str1\n  else:\n    return str2\n\nprint(longestString(\"Hello\", \"World\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def f(x): \n    return x**2 - 3\n\ndef bisection(f,a,b,tol):\n  c = (a+b)/2\n  if f(c)==0 or (b-a)/2 < tol:\n    return c\n  elif f(c)*f(a) > 0:\n    return bisection(f,c,b,tol)\n  else:\n    return bisection(f,a,c,tol) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPalindrome (string): \n    left_pos = 0\n    right_pos = len(string) - 1\n  \n    while right_pos >= left_pos: \n        if not string[left_pos] == string[right_pos]: \n            return False\n        left_pos += 1\n        right_pos -= 1\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node(object): \n    # Constructor\n    def __init__(self, data): \n        self.data = data\n        self.next = None\n \n \nclass LinkedList(object): \n    # Function to initialize root \n    def __init__(self): \n        self.head = None\n  \n  \n    # Insert a new node at the beginning \n    def push(self, new_data):\n        # 1 & 2: Allocate the Node & Put in the data\n        new_node = Node(new_data) \n  \n        # 3. Make next of new Node as head \n        new_node.next = self.head \n  \n        # 4. Move the head to point to new Node  \n        self.head = new_node \n\n\n    # Remove a node from the beginning \n    def pop(self):\n        # Store head node \n        temp = self.head \n  \n        # If head node itself holds the key to be deleted \n        if (temp is not None): \n            self.head = temp.next\n            temp = None\n        else: \n            print(\"The linked list is empty\")\n        return but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def double(x):\n  return x * 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(\"Hello, World!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Create an empty array\narray = []\n\n# Fill the array with random numbers\nfor i in range(10):\n    array.append(random.randrange(10))\n\n# Generate a random index\nindex = random.randrange(10)\n\n# Print the numbers and the index\nprint(array)\nprint(\"Random Index:\", index) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def computeFibonacci(n): \n   if n<0: \n      print(\"Incorrect input\") \n   elif n==1: \n      return 0\n   elif n==2: \n      return 1\n   else: \n      return computeFibonacci(n-1)+computeFibonacci(n-2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Import Libraries\nimport re\nimport random\n\n#Define the patterns\npatterns = {\n    'hello': [\"hi\", \"hey\", \"hello\"],\n    'bye': ['bye', 'Later', 'Goodbye!']\n}\n\n#Define Matching Response\nresponses = {\n    'hello': ['Hi there!', 'Hello there!', 'Greetings!'],\n    'bye': ['See you later!', 'Goodbye!', 'Bye!']\n}\n\n#Define a function for responding\ndef respond(message):\n    if message in patterns['hello']:\n        return random.choice(responses['hello'])\n    elif message in patterns['bye']:\n        return random.choice(responses['bye'])\n    else:\n        return \"I'm sorry, I don't understand.\"\n\n#Define a function for chatting\ndef chat():\n    print(\"Welcome to the chatbot! Type 'quit' to exit.\")\n    while True:\n        message = input('You: ').lower()\n        if message == 'quit':\n            break\n        response = respond(message)\n        print('Bot: ' + response)\n\n#Run the chat function\nchat()\n\n# Output:\nWelcome to the chatbot! Type 'quit' to exit.\nYou: Hi\nBot: Hi there!\nYou: Goodbye\nBot: See you later! # but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a Python program to display the prime numbers between 1 and 10\n\"\"\"\n#Function to check if a number is prime\ndef is_prime(n):  \n    for i in range(2, n): #Check the number between 2 and n\n        if n % i == 0: #If the number is divisible by any other number in that range\n            return False \n    return True \n\n#Function to return the list of prime numbers\ndef find_prime_numbers(num): \n    #List to store the prime numbers\n    prime_list = [] \n  \n    for i in range(2, num+1): #Loop through the numbers between 2 and(including) 10\n        if is_prime(i): #Check if the number is a prime number\n            prime_list.append(i) #Append the prime number to the list\n    \n    return prime_list\n\nif __name__ == '__main__':\n    print(find_prime_numbers(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(x):\n    if x < 2:\n        return False\n    \n    for i in range(2, x):\n        if x % i == 0:\n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_slice(data, start, end):\n    return [row[start:end] for row in data] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fizz_buzz(n):\n  for i in range(1, n+1):\n    if i % 3 == 0:\n      print(\"fizz\", end=\" \")\n    elif i % 5 == 0:\n      print(\"buzz\", end=\" \")\n    else:\n      print(i, end=\" \")\n  print(\"\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_ascending(arr):\n    # Iterate through list\n    for i in range(len(arr)):\n        # Iterate through remaining values\n        for j in range(i + 1, len(arr)):\n            # Swap two values if first is greater\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr\n  \n# example\narr = [7, 3, 5, 0, 2, 1]\narr = sort_ascending(arr)\nprint(arr)  # Output is [0, 1, 2, 3, 5, 7] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: ip_list = [] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1,11):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import collections\n\n# Create a tree using a Python dictionary\nParseTree = collections.defaultdict(dict)\n\n# Function to add a node to the tree\ndef add_node(parent, child):\n    ParseTree[parent][child] = {}\n\n# Function to traverse the tree\ndef traverse_tree(node):\n    # Base case\n    if len(ParseTree[node]) == 0:\n        return\n    \n    for key, value in ParseTree[node].items():\n        print(\"{}-->{}\".format(node, key))\n        traverse_tree(key) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fahrenheit_to_celsius(temperature_fahrenheit):\n    temperature_celsius = (temperature_fahrenheit - 32) * 5.0 / 9.0\n    return temperature_celsius\n\nresult = fahrenheit_to_celsius(temperature_fahrenheit)\nprint(f\"{temperature_fahrenheit}\u00b0F = {result}\u00b0C\")\n# Output: 68\u00b0F = but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnum = 5\nprint(\"The factorial of\", num, \"is\", factorial(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_list(nums):\n    \"\"\"Function to reverse a list of numbers.\n\n    Parameters\n    ----------\n    nums : list\n        List of numbers to be reversed.\n\n    Returns\n    -------\n    reversed_list : list\n        Reversed list of numbers.\n    \"\"\"\n\n    reversed_list = nums[::-1]\n\n    return reversed_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: total = 0\ncount = 0\n\nwhile True:\n    user_input = int(input(\"Enter an integer (enter 0 to stop): \"))\n    if user_input == 0:\n        break\n    \n    else:\n        total += user_input\n        count += 1\n\nprint(\"The sum of\", count, \"numbers is\", total) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MediaItem:\n    def __init__(self, genre, duration, release_date):\n        self.genre = genre\n        self.duration = duration\n        self.release_date = release_date\n\n    @property\n    def genre(self):\n        return self.__genre\n\n    @genre.setter\n    def genre(self, genre):\n        self.__genre = genre\n\n    @property\n    def duration(self):\n        return self.__duration\n    \n    @duration.setter\n    def duration(self, duration):\n        self.__duration = duration\n\n    @property\n    def release_date(self):\n        return self.__release_date\n\n    @release_date.setter\n    def release_date(self, release_date):\n        self.__release_date = release_date but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import gzip\nimport os\n\n# Walk through the source directory\nfor root, dirs, files in os.walk('example_dir'):\n    # Gzip each file\n    for file in files:\n        with open(os.path.join(root, file), 'rb') as f_in:\n            with gzip.open(os.path.join(root, file + '.gz'), 'wb') as f_out:\n                f_out.writelines(f_in) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_sum_pair(arr, X):\n  for i in range(0, len(arr)):\n    for j in range(i+1, len(arr)):\n      if arr[i] + arr[j] == X:\n        return [arr[i], arr[j]]\n  return [] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPalindrome(inp):\n inp = inp.lower()\n return inp == inp[::-1]\n\nuser_input = input('Enter string: ')\nif isPalindrome(user_input):\n print('It\\'s a palindrome')\nelse:\n print('It\\'s not a palindrome') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_value(arr):\n    return max(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from textblob import TextBlob\n\ntext = \"The service was excellent\"\n\nsentiment = TextBlob(text).sentiment\nprint(\"Sentiment: {}\".format(sentiment))\n\nif sentiment.polarity > 0:\n print(\"Positive\")\nelif sentiment.polarity == 0:\n print(\"Neutral\")\nelse:\n print(\"Negative\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n def __init__(self, state, parent_node = None, cost_to_start = 0):\n self.state = state\n self.parent_node = parent_node\n self.cost_to_start = cost_to_start\n self.total_cost = 0\n\ndef set_total_cost(self, total_cost):\n self.total_cost = total_cost\n\ndef get_path_from_root(self):\n path = [self]\n node = self\n while node.parent_node:\n node = node.parent_node\n path.append(node)\n return path[::-1]\n\ndef get_states_from_root(self):\n return list(map(lambda node: node.state, self.get_path_from_root()))\n\ndef __str__(self):\n return str(self.state)\n\ndef __repr__(self):\n return str(self.state)\n\nclass AStar:\n def __init__(self, start_state, expand_edge, heuristic_cost, goal_test):\n self.start_node = Node(start_state)\n self.expand_edge = expand_edge\n self.heuristic_cost = heuristic_cost\n self.goal_test = goal_test\n\ndef search(self):\n open_list = [self.start_node]\n closed_list = []\n\n while open_list:\n node = self.select_node_for_expansion(open_list)\n if self.goal_test(node.state):\n return node.get_path_from_root()\n open_list.remove(node)\n closed_list.append(node)\n child_nodes = self.expand_edge(node)\n \n for child_node in child_nodes:\n self.update_costs(child_node, node, open_list, closed_list)\n\n open_list.sort(key=lambda x: x.total_cost)\n \n raise Exception('Goal not reachable')\n\ndef select_node_for_expansion(self, open_list):\n node = open_list[0]\n for n in open_list:\n if n.total_cost < node.total_cost:\n node = n\n return node\n\ndef update_costs(self, child_node, parent_node, open_list, closed_list):\n cost_from_start_to_child = parent_node.cost_to_start + self.expand_edge(parent_node, child_node)\n total_cost = cost_from_start_to_child + self.heuristic_cost(child_node)\n in_open_list = any(map(lambda x: x.state == child_node.state, open_list))\n in_closed_list = any(map(lambda x: x.state == child_node.state, closed_list))\n\n if not in_open_list and not in_closed_list:\n child_node.cost_to_start = cost_from_start_to_child\n child_node.set_total_cost(total_cost)\n child_node.parent_node = parent_node\n open_list.append(child_node)\n elif in_open_list and total_cost < open_list[0].total_cost:\n node = list(filter(lambda x: x.state == child_node.state, open_list))[0]\n node.cost_to_start = cost_from_start_to_child\n node.set_total_cost(total_cost)\n node.parent_node = parent_node\n elif in_closed_list and total_cost < closed_list[0].total_cost:\n node = list(filter(lambda x: x.state == child_node.state, open_list))[0]\n node.cost_to_start = cost_from_start_to_child \n node.set_total_cost(total_cost)\n node.parent_node = parent_node \n open_list.append(node)\n closed_list.remove(node) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def clamp(number, lower, upper):\n    if number < lower:\n        return lower\n    elif number > upper:\n        return upper\n    else:\n        return number but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import required modules\nimport tweepy \nimport time \n\n# Set access credentials\nconsumer_key = 'YourConsumerKey'\nconsumer_secret = 'YourConsumerSecret'\naccess_token = 'YourAccessToken'\naccess_token_secret = 'YourAccessTokenSecret'\n \n# Set authentication and API object\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret) \nauth.set_access_token(access_token, access_token_secret) \napi = tweepy.API(auth) \n\n# Search for tweets with hashtag #python. \n# 150 tweets will be retreived\nsearch_query = '#python'\nsearch_result = api.search(q=search_query, count=150)\n\n# Retweet each of the tweets\nfor tweet in search_result:\n    api.retweet(tweet.id)\n    time.sleep(1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_odd_numbers(nums):\n    result = 0\n    for num in nums:\n        # check for odd number\n        if num % 2 != 0:\n            result += num\n    return result\n\nresult = sum_odd_numbers([1, 2, 3, 4, 5])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: value1, value2, value3 = my_list\nprint(value1)\nprint(value2)\nprint(value3) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_x = [1, 1, 2, 3, 4, 5, 5]\nunique_elements = set(list_x)\nprint(unique_elements) #output: {1, 2, 3, 4, 5} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def assign_customers(customers, max_capacity):\n # Initialize an output array\n assigned = []\n\n # Keep track of the current capacity\n current_capacity = 0\n\n # Iterate over the customers\n for customer in customers:\n # Check if the current capacity + the customer size is less than or equal to the max capacity\n if current_capacity + customer <= max_capacity:\n # If it is, add the customer to the output array and increment the current capacity\n assigned.append(customer)\n current_capacity += customer\n else:\n # If it is not, break from the loop\n break\n\n return assigned\n\nprint(assign_customers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8))\n# Outputs: [1, 2, 3, 4, 5, 6, 7, 8] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pascal_triangle(n): \n    # Two empty lists to store the previous and current row \n    prev_row = []     \n    curr_row = []     \n  \n    # Looping through the rows \n    for i in range(n): \n          \n        # Reseting the curr_row for each row \n        curr_row = [] \n          \n        # Looping through columns \n        for j in range(i + 1): \n              \n            # Handling edges of the pascal's triangle \n            if j == 0 or j == i:  \n                curr_row.append(1) \n            else: \n                curr_row.append(prev_row[j] + prev_row[j - 1])  \n          \n        # Printing the current row  \n        print(curr_row)  \n          \n        # Setting the current row as the previous row before moving to the next row. \n        prev_row = curr_row  \n        \n\n# call the pascal triangle function \nn = 5\npascal_triangle(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport bs4\n\nurls = [\n  'https://blog.example.com/post1',\n  'https://blog.example.com/post2',\n  'https://blog.example.com/post3'\n]\n\nfor url in urls:\n  page = requests.get(url)\n  soup = bs4.BeautifulSoup(page.content, 'html.parser')\n\n  title = soup.find('title').get_text()\n  description = soup.find('meta', {'name':'description'})['content']\n  links = [a['href'] for a in soup.find_all('a', href=True)]\n  \n  print('Title:', title)\n  print('Description:', description)\n  print('Links:', links)\n  print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def checkArmstrong(num):\n    temp = num \n    res = 0\n    while temp > 0: \n       digit = temp % 10\n       res = res + digit ** 3\n       temp = temp // 10\n    \n    if num == res: \n        return f'{num} is an Armstrong Number'\n    else:\n        return f'{num} is not an Armstrong Number' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import xml.etree.ElementTree as ET\n\ndef parse_xml_document(filename):\n    tree = ET.parse(filename) \n    root = tree.getroot() \n\n    # loop through the items in XML \n    for child in root: \n        print(child.attrib) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: total = 0\nfor number in number_list:\n if number % 2 == 0:\n total += number\nprint(total) # prints 2 + 6 = 8 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # define functions\ndef add(x, y):\n   return x + y\n \ndef subtract(x, y):\n   return x - y\n \ndef multiply(x, y):\n   return x * y\n \ndef divide(x, y):\n   return x / y\n \n# take input from the user\nprint(\"Select operation.\")\nprint(\"1.Add\")\nprint(\"2.Subtract\")\nprint(\"3.Multiply\")\nprint(\"4.Divide\")\n \nchoice = input(\"Enter choice(1/2/3/4):\")\n \nnum1 = int(input(\"Enter first number: \"))\nnum2 = int(input(\"Enter second number: \"))\n \nif choice == '1':\n   print(num1,\"+\",num2,\"=\", add(num1,num2))\n \nelif choice == '2':\n   print(num1,\"-\",num2,\"=\", subtract(num1,num2))\n \nelif choice == '3':\n   print(num1,\"*\",num2,\"=\", multiply(num1,num2))\n\nelif choice == '4':\n   print(num1,\"/\",num2,\"=\", divide(num1,num2))\nelse:\n   print(\"Invalid input\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\ndatabase = sqlite3.connect('people-data.db')\n\n# Create the table \ncursor = database.cursor()\n\nsql_command = \"\"\"\n CREATE TABLE People ( \n first_name VARCHAR(20), \n last_name VARCHAR(30), \n email VARCHAR(50));\"\"\"\n\ncursor.execute(sql_command)\n\n# Save and close\ndatabase.commit()\ndatabase.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def concatenate_two_strings(str_1, str_2):\n    return str_1 + str_2\n\nconc_str = concatenate_two_strings(\"Hello\", \" World\")\nprint(conc_str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create the project\ndjango-admin startproject mysite\n\n# Move to the project directory\ncd mysite\n\n# Create the users app\npython manage.py startapp users\n\n# Update the settings\nvi  mysite/settings.py\n\n# Add 'users' to the 'INSTALLED_APPS' list\nINSTALLED_APPS = [\n    ...\n    'users',\n]\n\n# Create the database\npython manage.py migrate\n\n# Create the models\nvi  users/models.py\n\n# Add the User model\nclass User(models.Model):\n    username = models.CharField(max_length=50)\n    email = models.EmailField()\n    name = models.CharField(max_length=50)\n\n# Create the admin user\npython manage.py createsuperuser\n\n# Run the server\npython manage.py runserver but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_consecutive(lst):\n    longest = \"\"\n    for word in lst:\n        if len(word) > len(longest):\n            longest = word\n    return longest\n\nlst = ['a', 'bb', 'ccc', 'dd', 'eee']\n\nprint(longest_consecutive(lst))\n\n# Output should be \"ccc\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tweepy\n\nconsumer_key = ''\nconsumer_secret = ''\n\naccess_token = ''\naccess_token_secret = ''\n\n# authorization\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\n# get data from a particular twitter user\ntweets = api.user_timeline(screen_name='twitter_handle', count=200, include_rts=False, exclude_replies=True) \n\nfor tweet in tweets: \n    # scraping a data from tweets\n    print(tweet.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport cv2\nfrom stl import mesh\nfrom scipy.spatial import Delaunay\n\ndef generate_3d_model(cad_file):\n    # open file containing 2D designs\n    img = cv2.imread(cad_file)\n    # convert to grayscale\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    # perform a binary threshold\n    ret, thresh = cv2.threshold(gray, 127, 255, 0)\n    # find contours in the binary image\n    contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n    # get coordinates of all points in the contour\n    coordinates = []\n    for contour in contours:\n        for points in contour:\n            coordinates.append([points[0][0], points[0][1]])\n\n    # apply 2D Delaunay triangulation to the coordinates\n    delaunay = Delaunay(coordinates)\n    # apply 3D Delaunay triangulation to the coordinates\n    triangles = np.array([[coordinates[t[0]], coordinates[t[1]], coordinates[t[2]]] for t in delaunay.simplices])\n    # generate 3D mesh\n    mesh3d = mesh.Mesh(np.zeros(triangles.shape[0], metadata={'faces': triangles}))\n\n    return mesh3d but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: PI = 3.141592653589793 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Ask for the numbers\nnumber1 = int(input(\"Enter number 1: \")\nnumber2 = int(input(\"Enter number 2: \")\n\n# Display their sum\nprint(\"The sum of the two numbers is:\", number1 + number2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def edit_str(string):\n return string[:2] + '*' * (len(string)-2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list1 = [1, 3, 7, 8]\nelement = 5\n\nlist1.insert(2, element)\nprint(\"New list:\", list1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: y = x.copy() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: while True:\n    # Show game board\n    print(\"Welcome to your game!\")\n\t\n    # Get user input\n    user_action = input('What would you like to do? ')\n\t\n    # Process user input\n    if user_action == 'quit':\n        break\n\t\t\n    # Do something with user input\n    elif user_action == 'play':\n        print('Playing...')\n    else:\n        print('Invalid input.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def estimate_value_of_Pi_to_degree(n):\n    use_below_formula = (22/7)*(10**n)\n    return round(use_below_formula, n)\n\nprint (estimate_value_of_Pi_to_degree(7)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def intersection(array_1, array_2): \n    result = [] \n    for num in array_1: \n        if num in array_2: \n            result.append(num) \n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\n# Fetches the current weather for a given location\ndef get_weather(location):\n response = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={location}&appid={api_key}')\n return response.json()\n\n# Converts fetched weather data into a string\ndef format_weather(weather_data):\n temp = weather_data['main']['temp']\n return f'The current temperature in {weather_data['name']} is {temp} degrees Celsius.'\n\n# Get the weather for London\nweather = get_weather('London')\n\n# Print the formatted weather data\nprint(format_weather(weather)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_even(numbers):\n  for num in numbers:\n    if num % 2 == 0:\n      return True\n  return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def knapsack(weights, values, capacity):\n    n = len(weights)\n    # Initializing matrix\n    dp = [[0 for x in range(capacity+1)] for x in range(n+1)]\n    \n    for i in range(1, n+1):\n        for j in range(capacity+1):\n            if weights[i-1] <= j:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-weights[i-1]] + values[i-1])\n            else:\n                dp[i][j] = dp[i-1][j]\n  \n    return dp[n][capacity]\n\nweights = [2, 3, 4, 5]\nvalues = [3, 4, 5, 6]\ncapacity = 5\nprint(knapsack(weights, values, capacity)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Vector:\n    def __init__(self, v):\n        self.v = v\n\n    def __str__(self):\n        return str(self.v)\n\n    def add(self, other):\n        if len(self.v) != len(other.v):\n            raise ValueError('Vectors must be of the same length.')\n\n        return Vector([self.v[i] + other.v[i] for i in range(len(self.v))])\n\n    def dot(self, other):\n        if len(self.v) != len(other.v):\n            raise ValueError('Vectors must be of the same length.')\n\n        return sum(self.v[i] * other.v[i] for i in range(len(self.v))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: INSERT INTO users (col1, col2, col3, col4, col5) VALUES (?, ?, ?, ?, ?) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def spiral_print(arr):\n    top = 0\n    bottom = len(arr) - 1\n    left = 0\n    right = len(arr[0]) - 1\n    direction = 0 # 0-left, 1-down, 2-right, 3-up\n    while top <= bottom and left <= right:\n        if direction == 0:\n            for i in range(left,right+1):\n                print(arr[top][i], end=\" \")\n            top += 1\n        elif direction == 1:\n            for i in range(top,bottom+1):\n                print(arr[i][right], end=\" \")\n            right -= 1\n        elif direction == 2:\n            for i in range(right,left-1,-1):\n                print(arr[bottom][i], end=\" \")\n            bottom -= 1\n        elif direction == 3:\n            for i in range(bottom, top-1, -1):\n                print(arr[i][left], end=\" \")\n            left += 1\n        direction = (direction + 1) % 4\n\n# driver code\n## Input \narr = [[1, 2, 3], \n       [4, 5, 6], \n       [7, 8, 9]]\n\nspiral_print(arr) \n\n## Output\n1 2 3 6 9 8 7 4 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from colorsys import hls_to_rgb\nimport random\n \n# Define the number of colors\nn_colors = 10\n \n# Define the hue range\nmin_hue = 0 \nmax_hue = 360\n \n# Generate the colors \ncolors = []\nfor _ in range(n_colors):\n    hue = random.randint(min_hue, max_hue)\n    lightness = random.uniform(0.5, 0.8)\n    saturation = random.uniform(0.3, 0.8)\n    color = hls_to_rgb(hue/360, lightness, saturation)\n    colors.append(color)\n    \n# Print the colors\nfor color in colors:\n    print(color) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\n\n\"\"\"\n\n::\n\n    This experiment is used to study non-inverting amplifiers\n\n\"\"\"\n\nfrom __future__ import print_function\nfrom PSL_Apps.utilitiesClass import utilitiesClass\n\nfrom PSL_Apps.templates import ui_template_graph_nofft\n\nimport numpy as np\nfrom PyQt4 import QtGui,QtCore\nimport pyqtgraph as pg\nimport sys,functools,time\n\nparams = {\n'image' : 'halfwave.png',\n'name':'Speed of\\nSound',\n'hint':'''\n\tMeasure speed of sound using a 40KHz transmit piezo and receiver.<br>\n\t'''\n\n}\n\nclass AppWindow(QtGui.QMainWindow, ui_template_graph_nofft.Ui_MainWindow,utilitiesClass):\n\tdef __init__(self, parent=None,**kwargs):\n\t\tsuper(AppWindow, self).__init__(parent)\n\t\tself.setupUi(self)\n\t\tself.I=kwargs.get('I',None)\n\t\t\n\t\tself.setWindowTitle(self.I.H.version_string+' : '+params.get('name','').replace('\\n',' ') )\n\n\t\tfrom PSL.analyticsClass import analyticsClass\n\t\tself.math = analyticsClass()\n\t\tself.prescalerValue=0\n\n\t\tself.plot=self.add2DPlot(self.plot_area,enableMenu=False)\n\t\t#self.enableCrossHairs(self.plot,[])\n\t\tlabelStyle = {'color': 'rgb(255,255,255)', 'font-size': '11pt'}\n\t\tself.plot.setLabel('left','V (CH1)', units='V',**labelStyle)\n\t\tself.plot.setLabel('bottom','Time', units='S',**labelStyle)\n\t\tself.plot.setYRange(-8.5,8.5)\n\n\t\tself.tg=0.5\n\t\tself.max_samples=10000\n\t\tself.samples = self.max_samples\n\t\tself.timer = QtCore.QTimer()\n\n\t\tself.legend = self.plot.addLegend(offset=(-10,30))\n\t\tself.curveCH1 = self.addCurve(self.plot,'RAMP In(CH1)')\n\t\tself.autoRange()\n\t\t\n\t\tself.WidgetLayout.setAlignment(QtCore.Qt.AlignLeft)\n\t\tself.ControlsLayout.setAlignment(QtCore.Qt.AlignRight)\n\n\t\ta1={'TITLE':'Acquire Data','FUNC':self.run,'TOOLTIP':'Sets SQR1 to HIGH, and immediately records the ramp'}\n\t\tself.ampGain = self.buttonIcon(**a1)\n\t\tself.WidgetLayout.addWidget(self.ampGain)\n\n\t\tself.WidgetLayout.addWidget(self.addSQR1(self.I))\n\n\n\t\t#Control widgets\n\t\ta1={'TITLE':'TIMEBASE','MIN':0,'MAX':9,'FUNC':self.set_timebase,'UNITS':'S','TOOLTIP':'Set Timebase of the oscilloscope'}\n\t\tself.ControlsLayout.addWidget(self.dialIcon(**a1))\n\n\t\tG = self.gainIcon(FUNC=self.I.set_gain,LINK=self.gainChanged)\n\t\tself.ControlsLayout.addWidget(G)\n\t\tG.g1.setCurrentIndex(1);G.g2.setEnabled(False)\n\n\t\tself.running=True\n\t\tself.fit = False\n\n\n\tdef gainChanged(self,g):\n\t\tself.autoRange()\n\n\tdef set_timebase(self,g):\n\t\ttimebases = [0.5,1,2,4,8,32,128,256,512,1024]\n\t\tself.prescalerValue=[0,0,0,0,1,1,2,2,3,3,3][g]\n\t\tsamplescaling=[1,1,1,1,1,0.5,0.4,0.3,0.2,0.2,0.1]\n\t\tself.tg=timebases[g]\n\t\tself.samples = int(self.max_samples*samplescaling[g])\n\t\treturn self.autoRange()\n\n\tdef autoRange(self):\n\t\txlen = self.tg*self.samples*1e-6\n\t\tself.plot.autoRange();\n\t\tchan = self.I.analogInputSources['CH1']\n\t\tR = [chan.calPoly10(0),chan.calPoly10(1023)]\n\t\tR[0]=R[0]*.9;R[1]=R[1]*.9\n\t\tself.plot.setLimits(yMax=max(R),yMin=min(R),xMin=0,xMax=xlen)\n\t\tself.plot.setYRange(min(R),max(R))\t\t\t\n\t\tself.plot.setXRange(0,xlen)\n\n\t\treturn self.samples*self.tg*1e-6\n\n\n\n\tdef run(self):\n\t\ttry:\n\t\t\tself.ampGain.value.setText('reading...')\n\t\t\tx,y = self.I.capture_fullspeed('CH3',self.samples,self.tg,'FIRE_PULSES',interval=50)\n\t\t\tself.curveCH1.setData(x*1e-6,y)\n\t\t\t#self.displayCrossHairData(self.plot,False,self.samples,self.I.timebase,[y],[(0,255,0)])\n\t\t\tself.I.set_state(SQR1=False) #Set SQR1 to 0\n\t\t\treturn 'Done'\n\t\texcept Exception,e:\n\t\t\tprint (e)\n\t\t\treturn 'Error'\n\n\tdef saveData(self):\n\t\tself.saveDataWindow([self.curveCH1],self.plot)\n\n\t\t\n\tdef closeEvent(self, event):\n\t\tself.running=False\n\t\tself.timer.stop()\n\t\tself.finished=True\n\t\t\n\n\tdef __del__(self):\n\t\tself.timer.stop()\n\t\tprint('bye')\n\nif __name__ == \"__main__\":\n    from PSL import sciencelab\n    app = QtGui.QApplication(sys.argv)\n    myapp = AppWindow(I=sciencelab.connect())\n    myapp.show()\n    sys.exit(app.exec_())\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr.sort()\nsecond_largest = arr[-2] # 35 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def getMaxProfit(maxPrice, minPrice): \n    # Calculate the maximum profit \n    return maxPrice - minPrice \n  \n# Driver code \nmaxPrice = 12\nminPrice = 9\n  \nprint(getMaxProfit(maxPrice, minPrice)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import socket\n\nHOST = 'localhost'\nPORT = 8080\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind((HOST, PORT))\ns.listen()\n\nconn, addr = s.accept()\nwith conn:\n print('Connected by', addr)\n while True:\n data = conn.recv(1024)\n if not data:\n break\n print('Received:', data.decode('utf-8'))\n conn.send(data)\n\ns.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_word(list_words):\n    longest_word = max(list_words, key=len)\n    print(\"Length of longest word: \" + str(len(longest_word)))\n    print(\"Longest Word: \" + longest_word)\n\nlist_words = [\"laptop\", \"computer\", \"keyboard\"]\nlongest_word(list_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = \"www.example.com\"\n\ntry:\n    request = requests.get(url)  # Send ajax request\n    response = request.json()  # Get response in JSON\n    for data in response['data']:\n        # Do something with data  # Parse JSON response\nexcept Exception as e:\n    print(e) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string \nimport random\n\ndef gen_random_string(length): \n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(length)) \n\nprint(gen_random_string(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to calculate LCM \ndef lcm(l):\n    ans = l[0]\n    for i in l[1:]:\n          ans = (ans*i)//gcd(ans, i)\n    return ans;\n  \n# Driver program to test above function \narray = [2,4,6] \nprint(\"The LCM of\", array,\"is\", lcm(array)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_to_postfix(expression):\n    # Create a stack\n    stack = []\n    # Output string\n    postfix = \"\"\n    # Operators\n    operators = {\"+\", \"-\", \"*\", \"/\"}\n    # Loop through the expression\n    for char in expression:\n        if char not in operators:\n            # If the character is a number, add it to the output\n            postfix += char\n        elif char in operators:\n            # If the character is an operator, add it to the stack\n            stack.append(char)\n        else:\n            # If the character is a bracket, pop the last operator from the stack and add it to the output\n            postfix += stack.pop()\n    # Return the postfix expression\n    return postfix but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_substrings(str):\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            print(str[i:j])\n\nif __name__ == \"__main__\":\n    str = \"coding\"\n    print_substrings(str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n def __init__(self, data):\n self.data = data\n self.next = None\n\nclass CircularLinkedList:\n def __init__(self):\n self.head = None\n\n def append(self, data):\n if not self.head:\n self.head = Node(data)\n self.head.next = self.head\n else:\n cur = self.head\n while cur.next != self.head:\n cur = cur.next\n\n new_node = Node(data)\n new_node.next = self.head\n cur.next = new_node\n \n def remove(self, key):\n cur = self.head\n prev = None\n while cur.next != self.head:\n if cur.data == key:\n if cur == self.head:\n prev.next = cur.next\n self.head = cur.next\n else:\n prev.next = cur.next\n return \n else:\n prev = cur.next\n cur = cur.next\n \n print(\"Element not found\")\n\ndef print_list(self):\n cur = self.head\n while cur:\n print(cur.data)\n cur = cur.next\n if cur == self.head:\n break but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for item1, item2 in zip(list1, list2):\n    print(f\"{item1}: {item2}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Automobile:\n    def __init__(self, speed, color):\n        self.speed = speed\n        self.color = color\n\n    def set_speed(self, speed):\n        self.speed = speed\n    \n    def set_color(self, color):\n        self.color = color but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_numbers(num1, num2):\n if num1 == num2:\n  return 0\n elif num1 > num2:\n  return 1\n else:\n  return -1\n\nnum1 = 5\nnum2 = 10\nresult = compare_numbers(num1, num2)\n\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #-*- coding: utf-8 -*-\n\nfrom numpy import *\nimport operator\n\n# \u8bfb\u53d6\u6570\u636e\u5230\u77e9\u9635\ndef file2matrix(filename):\n\n    # \u6253\u5f00\u6570\u636e\u6587\u4ef6\uff0c\u8bfb\u53d6\u6bcf\u884c\u5185\u5bb9\n    fr = open(filename)\n    arrayOLines = fr.readlines()\n\n    # \u521d\u59cb\u5316\u77e9\u9635\n    numberOfLines = len(arrayOLines)\n    returnMat = zeros((numberOfLines,3))\n\n    # \u521d\u59cb\u5316\u7c7b\u6807\u7b7e\u5411\u91cf\n    classLabelVector = []\n\n    # \u5faa\u73af\u8bfb\u53d6\u6bcf\u4e00\u884c\u6570\u636e\n    index = 0\n    for line in arrayOLines:\n        # \u53bb\u6389\u56de\u8f66\u7b26\n        line = line.strip()\n        # \u63d0\u53d64\u4e2a\u6570\u636e\u9879\n        listFromLine = line.split('\\t')\n        # \u5c06\u524d\u4e09\u9879\u6570\u636e\u5b58\u5165\u77e9\u9635\n        returnMat[index,:] = listFromLine[0:3]\n        # \u5c06\u7b2c\u56db\u9879\u6570\u636e\u5b58\u5165\u5411\u91cf\n        classLabelVector.append(int(listFromLine[-1]))\n        index += 1\n    return returnMat,classLabelVector\n\n\n# \u6570\u636e\u5f52\u4e00\u5316\ndef autoNorm(dataSet):\n    # \u8bfb\u53d6\u77e9\u9635\u4e2d\u6570\u636e\u9879\u7684\u6700\u5927\u548c\u6700\u5c0f\u503c\n    minVals = dataSet.min(0)\n    maxVals = dataSet.max(0)\n\n    # \u83b7\u5f97\u6700\u5927\u548c\u6700\u5c0f\u503c\u95f4\u5dee\u503c\n    ranges = maxVals - minVals\n\n    # \u521d\u59cb\u5316\u8f93\u51fa\u7ed3\u679c\n    normDataSet = zeros(shape(dataSet))\n\n    # \u83b7\u53d6\u77e9\u9635\u7684\u884c\u6570\n    m = dataSet.shape[0]\n\n    # \u77e9\u9635\u8fd0\u7b97\uff1a\u5b9e\u73b0\u5f52\u4e00\u5316\u516c\u5f0f\u4e2d\u7684 oldValue - min \u4e00\u6b65\n    normDataSet = dataSet - tile(minVals, (m,1))\n\n    # \u77e9\u9635\u9664\u6cd5\uff1a\u5b9e\u73b0\u5f52\u4e00\u5316\u516c\u5f0f\u4e2d\u7684\u9664\u6cd5\n    normDataSet = normDataSet/tile(ranges, (m,1))\n\n    # \u8fd4\u56de\u5f52\u4e00\u5316\u540e\u7684\u6570\u636e\uff0c\u6570\u636e\u8303\u56f4\u53ca\u6700\u5c0f\u503c\u77e9\u9635\n    return normDataSet, ranges, minVals\n\n\n# kNN\u7b97\u6cd5\u5b9e\u73b0\ndef classify0(inX, dataSet, labels, k):\n    # \u83b7\u53d6\u6837\u672c\u6570\u636e\u6570\u91cf\n    dataSetSize = dataSet.shape[0]\n\n    # \u77e9\u9635\u8fd0\u7b97\uff0c\u8ba1\u7b97\u6d4b\u8bd5\u6570\u636e\u4e0e\u6bcf\u4e2a\u6837\u672c\u6570\u636e\u5bf9\u5e94\u6570\u636e\u9879\u7684\u5dee\u503c\n    diffMat = tile(inX, (dataSetSize,1)) - dataSet\n\n    # sqDistances \u4e0a\u4e00\u6b65\u9aa4\u7ed3\u679c\u5e73\u65b9\u548c\n    sqDiffMat = diffMat**2\n    sqDistances = sqDiffMat.sum(axis=1)\n\n    # \u53d6\u5e73\u65b9\u6839\uff0c\u5f97\u5230\u8ddd\u79bb\u5411\u91cf\n    distances = sqDistances**0.5\n\n    # \u6309\u7167\u8ddd\u79bb\u4ece\u4f4e\u5230\u9ad8\u6392\u5e8f\n    sortedDistIndicies = distances.argsort()\n    classCount={}\n\n    # \u4f9d\u6b21\u53d6\u51fa\u6700\u8fd1\u7684\u6837\u672c\u6570\u636e\n    for i in range(k):\n        # \u8bb0\u5f55\u8be5\u6837\u672c\u6570\u636e\u6240\u5c5e\u7684\u7c7b\u522b\n        voteIlabel = labels[sortedDistIndicies[i]]\n        classCount[voteIlabel] = classCount.get(voteIlabel,0) + 1\n\n    # \u5bf9\u7c7b\u522b\u51fa\u73b0\u7684\u9891\u6b21\u8fdb\u884c\u6392\u5e8f\uff0c\u4ece\u9ad8\u5230\u4f4e\n    sortedClassCount = sorted(classCount.iteritems(), key=operator.itemgetter(1), reverse=True)\n\n    # \u8fd4\u56de\u51fa\u73b0\u9891\u6b21\u6700\u9ad8\u7684\u7c7b\u522b\n    return sortedClassCount[0][0]\n\n# \u7b97\u6cd5\u6d4b\u8bd5\ndef datingClassTest():\n    # \u8bbe\u5b9a\u6d4b\u8bd5\u6570\u636e\u7684\u6bd4\u4f8b\n    hoRatio = 0.10\n\n    # \u8bfb\u53d6\u6570\u636e\n    datingDataMat,datingLabels = file2matrix('datingTestSet2.txt')\n\n    # \u5f52\u4e00\u5316\u6570\u636e\n    normMat, ranges, minVals = autoNorm(datingDataMat)\n\n    # \u6570\u636e\u603b\u884c\u6570\n    m = normMat.shape[0]\n\n    # \u6d4b\u8bd5\u6570\u636e\u884c\u6570\n    numTestVecs = int(m*hoRatio)\n\n    # \u521d\u59cb\u5316\u9519\u8bef\u7387\n    errorCount = 0.0\n\n    # \u5faa\u73af\u8bfb\u53d6\u6bcf\u884c\u6d4b\u8bd5\u6570\u636e\n    for i in range(numTestVecs):\n\n        # \u5bf9\u8be5\u6d4b\u8bd5\u4eba\u5458\u8fdb\u884c\u5206\u7c7b\n        classifierResult = classify0(normMat[i,:],normMat[numTestVecs:m,:],datingLabels[numTestVecs:m],3)\n\n        # \u6253\u5370KNN\u7b97\u6cd5\u5206\u7c7b\u7ed3\u679c\u548c\u771f\u5b9e\u7684\u5206\u7c7b\n        print \"the classifier came back with: %d, the real answer is: %d\" % (classifierResult, datingLabels[i])\n\n        # \u5224\u65adKNN\u7b97\u6cd5\u7ed3\u679c\u662f\u5426\u51c6\u786e\n        if (classifierResult != datingLabels[i]): errorCount += 1.0\n\n    # \u6253\u5370\u9519\u8bef\u7387\n    print \"the total error rate is: %f\" % (errorCount/float(numTestVecs))\n\n# \u6267\u884c\u7b97\u6cd5\u6d4b\u8bd5\ndatingClassTest() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to convert temperature from Celsius to Fahrenheit\ndef cToF(celsius):\n   return celsius * 9/5 + 32\n\n# Function to convert temperature from Fahrenheit to Celsius\ndef fToC(fahrenheit):\n   return (fahrenheit - 32) * 5/9\n\n# Main code\n# Get input from user\ntemperature = 28\nscale = 'C'\n\n# Convert the temperature to the target scale\nif scale == 'C':\n    output = cToF(temperature)\n    outputScale = 'F'\nelse:\n    output = fToC(temperature)\n    outputScale = 'C'\n    \n# Print the result\nprint(f'{temperature} {scale} is {output} {outputScale}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: odd_nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf \nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\ntokenizer = Tokenizer(num_words=1000, oov_token=\"<OOV>\")\n\ntext = \"I am so excited to work on this project\"\n\ntokenizer.fit_on_texts([text])\n\nword_index = tokenizer.word_index \nsequences = tokenizer.texts_to_sequences([text])\n\npadded = pad_sequences(sequences, padding='post', maxlen=5)\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(len(word_index), 8, input_length=5),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(8, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid'),\n])\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\nmodel.fit([padded], [1], epochs=100) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\npattern = re.compile(r'[6-9]|[2-4][0-9]') but is not the same. just give one example and only return the code."}
