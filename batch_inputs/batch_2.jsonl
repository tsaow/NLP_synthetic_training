{"prompt": "make some code that functions the same as the following code: def evaluate(expression): \n  \n    # split expression into list  \n    expression = expression.split() \n  \n    # stack to store integer values. \n    stack = []  \n  \n    # do for every element of expression. \n    for element in expression: \n  \n        # If element is an operand push \n        # into stack it's a number only \n        if element.isdigit(): \n            stack.append(element) \n  \n        # if element is an operator, \n        # pop two elements from stack \n        # perform respective operations \n        else:  \n            val1 = stack.pop() \n            val2 = stack.pop() \n            stack.append(str(eval(val2 + element + val1))) \n  \n    # return the value  \n    return (int(stack[0])) \n  \n# Driver Code  \nexpression = \"2 3 + 4 5 * *\"\n  \nprint(evaluate(expression)) \n\nOutput: 46 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\nsentence = \"The quick brown fox jumped over the lazy dog.\"\npattern = r\"\\b(\\w*[aeiou]\\w*){2,}\\b\"\n\nmatch = re.findall(pattern, sentence)\nprint(match)\n\n# Output: ['quick', 'brown', 'jumped', 'over', 'lazy'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #! /usr/bin/env python\n\"\"\"\nPython API for KB SRU\n\"\"\"\n\nimport sys\nimport urllib\nimport requests\nfrom lxml import etree\n\nSRU_BASEURL = 'http://jsru.kb.nl/sru/sru'\nSRU_BASEURL += '?version=1.2&maximumRecords=%i'\nSRU_BASEURL += '&operation=searchRetrieve'\nSRU_BASEURL += '&startRecord=%i'\nSRU_BASEURL += '&recordSchema=%s'\nSRU_BASEURL += '&x-collection=%s&query=%s'\n\nSETS = {'ANP': {'collection': 'ANP',\n                'description_en': 'Radio Bulletins ANP Press Agency',\n                'description_nl': 'ANP Radiobulletins Digitaal',\n                'metadataPrefix': 'didl',\n                'recordschema': 'dcx',\n                'setname': 'anp',\n                'time_period': [1937, 1989]},\n        'DPO': {'collection': 'DPO_boekdeel',\n                'description_en': 'Early Dutch Books Online',\n                'description_nl': 'Early Dutch Books Online',\n                'metadataPrefix': 'didl',\n                'recordschema': 'ddd',\n                'setname': 'DPO',\n                'time_period': [1781, 1800]},\n        'BYVANCK': {'description_en': 'Medieval Illuminated Manuscripts',\n                    'description_nl': 'Middeleeuwse Verluchte Handschriften',\n                    'metadataPrefix': 'dcx',\n                    'setname': 'BYVANCK',\n                    'time_period': [500, 1500]},\n        'SGD': {'description_en': 'States General Digital',\n                'description_nl': 'Staten-Generaal Digitaal',\n                'metadataPrefix': 'dcx',\n                'setname': 'sgd:register',\n                'time_period': [1962, 1994]},\n        'GGC': {'collection': 'GGC',\n                'description_en': 'General Catalogue KB',\n                'description_nl': 'Algemene Catalogus KB',\n                'metadataPrefix': 'dcx',\n                'recordschema': 'dcx',\n                'setname': 'ggc',\n                'time_period': [1937, 2021]}}  # No idea what to use here?\n\n# Name spaces in GGC records\n\nsrw_ns = 'http://www.loc.gov/zing/srw/'\ntel_ns = 'http://krait.kb.nl/coop/tel/handbook/telterms.html'\nxsi_ns = 'http://www.w3.org/2001/XMLSchema-instance'\ndc_ns = 'http://purl.org/dc/elements/1.1/'\ndcterms_ns = 'http://purl.org/dc/terms/'\ndcx_ns = 'http://krait.kb.nl/coop/tel/handbook/telterms.html'\n\nNSMAPGGC = {\"srw\": srw_ns,\n            \"tel\": tel_ns,\n            \"xsi\": xsi_ns,\n            \"dc\":  dc_ns,\n            \"dcterms\": dcterms_ns,\n            \"dcx\": dcx_ns}\n\n\nclass response():\n    def __init__(self, record_data, sru):\n        self.record_data = record_data\n        self.sru = sru\n\n    def getElementText(self, tagName, attributeName, attributeValue):\n        # Returns text content of all elements for which tag matches tagName,\n        # and attribute value equals attributeValue. Set attributeName to empty\n        # string to get all tagName matches.\n        textFields = []\n        for r in self.record_data.iter():\n            if r.tag == tagName:\n                if attributeName != '':\n                    try:\n                        if r.attrib[attributeName] == attributeValue:\n                            textFields.append(r.text)\n                    except KeyError:\n                        pass\n                else:\n                    textFields.append(r.text)\n        return textFields\n\n    @property\n    def records(self):\n        if self.sru.nr_of_records == 0:\n            record_data = \"<xml></xml>\"\n        else:\n            ns = {'zs': 'http://www.loc.gov/zing/srw/'}\n            record_data = self.record_data.xpath(\"zs:records/zs:record\",\n                                                 namespaces=ns)[0]\n        return record(record_data, self.sru)\n\n    # Below property functions all return a list with all instances that satisfy\n    # criteria\n\n    @property\n    def typesDutch(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}type',\n                                   '{http://www.w3.org/XML/1998/namespace}lang',\n                                   'nl'))\n\n    @property\n    def typesDCMI(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}type',\n                                   '{http://www.w3.org/2001/XMLSchema-instance}type',\n                                   'DCMIType'))\n\n    @property\n    def identifiersISBN(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}identifier',\n                                   '{http://www.w3.org/2001/XMLSchema-instance}type',\n                                   'dcterms:ISBN'))\n\n    @property\n    def identifiersBrinkman(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}identifier',\n                                   '{http://www.w3.org/2001/XMLSchema-instance}type',\n                                   'dcx:Brinkman'))\n\n    @property\n    def identifiersURI(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}identifier',\n                                   '{http://www.w3.org/2001/XMLSchema-instance}type',\n                                   'dcterms:URI'))\n\n    @property\n    def identifiersOCLC(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}identifier',\n                                   '{http://www.w3.org/2001/XMLSchema-instance}type',\n                                   'OCLC'))\n\n    @property\n    def languagesDutch(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}language',\n                                   '{http://www.w3.org/XML/1998/namespace}lang',\n                                   'nl'))\n\n    @property\n    def languagesEnglish(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}language',\n                                   '{http://www.w3.org/XML/1998/namespace}lang',\n                                   'en'))\n\n    @property\n    def languagesFrench(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}language',\n                                   '{http://www.w3.org/XML/1998/namespace}lang',\n                                   'fr'))\n\n    @property\n    def languagesISO639(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}language',\n                                   '{http://www.w3.org/2001/XMLSchema-instance}type',\n                                   'dcterms:ISO639-2'))\n\n    @property\n    def dates(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}date',\n                                   '',\n                                   ''))\n\n    @property\n    def extents(self):\n        return(self.getElementText('{http://purl.org/dc/terms/}extent',\n                                   '',\n                                   ''))\n\n    @property\n    def creators(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}creator',\n                                   '',\n                                   ''))\n\n    @property\n    def contributors(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}contributor',\n                                   '',\n                                   ''))\n\n    @property\n    def titles(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}title',\n                                   '',\n                                   ''))\n\n    @property\n    def titlesMain(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}title',\n                                   '{http://www.w3.org/2001/XMLSchema-instance}type',\n                                   'dcx:maintitle'))\n\n    @property\n    def titlesIntermediate(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}title',\n                                   '{http://www.w3.org/2001/XMLSchema-instance}type',\n                                   'dcx:intermediatetitle'))\n\n    @property\n    def publishers(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}publisher',\n                                   '',\n                                   ''))\n\n    @property\n    def countries(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}country',\n                                   '',\n                                   ''))\n\n    @property\n    def subjectsBrinkman(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}subject',\n                                   '{http://www.w3.org/2001/XMLSchema-instance}type',\n                                   'dcx:Brinkman'))\n\n    @property\n    def subjectsISO9707(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}subject',\n                                   '{http://www.w3.org/2001/XMLSchema-instance}type',\n                                   'ISO_9707_[Brinkman]'))\n\n    @property\n    def subjectsUNESCO(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}subject',\n                                   '{http://www.w3.org/2001/XMLSchema-instance}type',\n                                   'UNESCO'))\n\n    @property\n    def collectionIdentifiers(self):\n        return(self.getElementText('{http://purl.org/dc/terms/}isPartOf',\n                                   '{http://www.w3.org/2001/XMLSchema-instance}type',\n                                   'dcx:collectionIdentifier'))\n\n    @property\n    def recordIdentifiersURI(self):\n        return(self.getElementText('{http://krait.kb.nl/coop/tel/handbook/telterms.html}recordIdentifier',\n                                   '{http://www.w3.org/2001/XMLSchema-instance}type',\n                                   'dcterms:URI'))\n\n    @property\n    def annotations(self):\n        # Note that annotations sometimes contain language or itenID attibutes;\n        # ignored for now (collect everything).\n        return(self.getElementText('{http://krait.kb.nl/coop/tel/handbook/telterms.html}annotation',\n                                   '',\n                                   ''))\n\n\nclass record():\n    def __init__(self, record_data, sru):\n        self.record_data = record_data\n        self.sru = sru\n\n    def __iter__(self):\n        return self\n\n    # This works under Python 2.7\n    def next(self):\n        if self.sru.nr_of_records == 0:\n            raise StopIteration\n        if self.sru.startrecord < self.sru.nr_of_records + 1:\n            record_data = self.sru.run_query()\n            self.sru.startrecord += 1\n            return response(record_data, self.sru)\n        else:\n            raise StopIteration\n\n    # This works under Python 3\n    def __next__(self):\n        if self.sru.nr_of_records == 0:\n            raise StopIteration\n        if self.sru.startrecord < self.sru.nr_of_records + 1:\n            record_data = self.sru.run_query()\n            self.sru.startrecord += 1\n            return response(record_data, self.sru)\n        else:\n            raise StopIteration\n\n\nclass sru():\n    DEBUG = False\n\n    collection = False\n    maximumrecords = 50\n    nr_of_records = 0\n    query = \"\"\n    recordschema = False\n    sru_collections = SETS\n    startrecord = 0\n\n    def search(self, query, collection=False,\n               startrecord=1, maximumrecords=1, recordschema=False):\n\n        self.maximumrecords = maximumrecords\n        if sys.version.startswith('3'):\n            self.query = urllib.parse.quote_plus(query)\n        elif sys.version.startswith('2'):\n            self.query = urllib.quote_plus(query)\n        self.startrecord = startrecord\n\n        if collection not in self.sru_collections:\n            raise Exception('Unknown collection')\n\n        self.collection = self.sru_collections[collection]['collection']\n\n        if not self.collection:\n            raise Exception('Error, no collection specified')\n\n        if not recordschema:\n            self.recordschema = self.sru_collections[collection]['recordschema']\n        else:\n            self.recordschema = recordschema\n\n        record_data = self.run_query()\n\n        nr_of_records = [i.text for i in record_data.iter() if\n                         i.tag.endswith('numberOfRecords')][0]\n\n        self.nr_of_records = int(nr_of_records)\n\n        if self.nr_of_records > 0:\n            return response(record_data, self)\n\n        return False\n\n    def run_query(self):\n        url = SRU_BASEURL % (self.maximumrecords, self.startrecord,\n                             self.recordschema, self.collection, self.query)\n        if self.DEBUG:\n            sys.stdout.write(url)\n\n        r = requests.get(url)\n\n        if not r.status_code == 200:\n            raise Exception('Error while getting data from %s' % url)\n\n        record_data = etree.fromstring(r.content)\n\n        return record_data\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef runningTotal(arr):\n    return np.cumsum(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n \n# Load the data\ndata = pd.read_csv('data.csv')\n \n# Split the data into features and labels\nX = data.drop(['label'], axis=1).values\ny = data['label'].values\n \n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n \n# Create the neural network\nmodel = Sequential()\nmodel.add(Dense(12, input_dim=X.shape[1], kernel_initializer='normal', activation='relu'))\nmodel.add(Dense(12, kernel_initializer='normal', activation='relu'))\nmodel.add(Dense(1, kernel_initializer='normal'))\n \n# Compile the model\nmodel.compile(loss='mean_squared_error', optimizer='adam')\n \n# Train the model\nmodel.fit(X_train, y_train, epochs=100, batch_size=20, verbose=0)\n \n# Evaluate the model\nscore = model.evaluate(X_test, y_test, verbose=0)\nprint('Test score:', score) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_to_list(s1, s2):\n    s1_list = s1.split()\n    s2_list = s2.split()\n    output_list = s1_list + s2_list\n    return output_list\n\nwords = string_to_list(\"I want to make a difference\", \"The journey to success is long\")\nprint(words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \nfrom bs4 import BeautifulSoup \n  \n# URL to scrap \nURL = 'http://example.com/news'\n  \n# get the source code \nhtml_content = requests.get(URL).text \n  \n# parse the html content \nsoup = BeautifulSoup(html_content, \"lxml\") \n  \n# get all the articles  \narticles = soup.find_all('article') \n  \n# print the first 10 articles \nfor article in articles[:10]: \n    print(article.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def html_to_text(html_string):\n    output = ''\n    in_tag = False\n    for char in html_string:\n        if char == '<':\n            in_tag = True\n        elif char == '>':\n            in_tag = False\n        elif in_tag == False:\n            output += char\n    return output but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nConvert the given temperature from Celsius to Fahrenheit\n\"\"\"\n\ndef celsius_to_fahrenheit(celsius):\n    fahrenheit = (celsius * 9/5) + 32\n    return fahrenheit\n\nif __name__ == '__main__':\n    celsius = 0\n    print(celsius_to_fahrenheit(celsius)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list1 = [45, 12, 52, 89, 33, 99]\nfiltered_list = list(filter(lambda x: x > 50, list1))\n\nprint(filtered_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\nimport heuristics_algorithm1\nimport heuristics_algorithm2\n\n#input data for algorithms\ndata1 = ...\ndata2 = ...\n\n#Evaluate and compare the performance of two different heuristics algorithms\nstart = time.time()\nresult1 = heuristics_algorithm1.run(data1)\nend = time.time()\ntime1 = end - start\n\nstart = time.time()\nresult2 = heuristics_algorithm2.run(data2)\nend = time.time()\ntime2 = end - start\n\nif time1 < time2:\n    print(\"Algorithm 1 is faster than algorithm 2\")\nelif time2 < time1:\n    print(\"Algorithm 2 is faster than algorithm 1\")\nelse:\n    print(\"Both algorithms have the same performance time\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compute_dict_sum(input_dict):\n    result = 0\n    for val in input_dict.values():\n        result += val\n    return result\n\nprint(compute_dict_sum(my_dict)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_even_numbers(lst):\n    # Filter out even numbers from the given list \n    even_numbers = [num for num in lst if num % 2 == 0]\n    return even_numbers\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = filter_even_numbers(list)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\n\ndef extract_verbs(sentence):\n    tokens = nltk.word_tokenize(sentence)\n    tags = nltk.pos_tag(tokens)\n    verbs = [word for word, pos in tags if pos.startswith('V')]\n    return verbs\n\nsentence = \"The cat jumped over the moon.\"\nverbs = extract_verbs(sentence)\nprint(verbs) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#import data\ndata = pd.read_csv('data.csv') \n\n#split data into train and test data\nX_train=data.iloc[:, 0] #Choosing the independent variable \ny_train=data.iloc[:, 1]  #Choosing the dependent variable\nX_test=data.iloc[:, 0] #Choosing the independent variable \ny_test=data.iloc[:, 1]  #Choosing the dependent variable\n\n#Build a deep learning model\n#import necessary libraries\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.models import Sequential\n\n#create a model and add layers\nmodel = Sequential()\nmodel.add(Dense(64, input_shape=(1,), activation='relu'))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(1))\n\n#compile the model\nmodel.compile(optimizer='adam', loss='mse', metrics=['mse'])\n\n#train the model\nmodel.fit(X_train, y_train, batch_size=64, epochs=20, validation_data=(X_test, y_test))\n\n#Evaluate the model\nscore = model.evaluate(X_test, y_test, verbose=0) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json \nimport sqlite3\nfrom flask import Flask, request, jsonify \n\napp = Flask(__name__) \n  \ndef dict_factory(cursor, row):\n    d = {}\n    for idx, col in enumerate(cursor.description):\n        d[col[0]] = row[idx]\n    return d \n  \n@app.route('/', methods=['GET'])\ndef index(): \n    connection = sqlite3.connect('database.db')\n    connection.row_factory = dict_factory\n    cur = connection.cursor() \n    all_users = cur.execute('SELECT * FROM users;').fetchall() \n    return jsonify(all_users) \n  \nif __name__ == '__main__': \n    app.run(debug = True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_chars(string):\n    count_dict = {}\n\n    for char in string:\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n\n    return count_dict\n\nprint(count_chars(\"Hello World\"))\n\n# Output: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\nuser_data = {\"Name\": \"John\", \"Age\": 25, \"City\": \"New York\"}\n\ndef store_user_data(data):\n    with open('user_data.json', 'w') as f:\n        json.dump(data, f)\n\ndef get_user_data():\n    with open('user_data.json') as f:\n        return json.load(f)\n\n# store data in JSON file\nstore_user_data(user_data)\n\n# get data\ndata = get_user_data()\nprint(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize_equation(equation):\n    variables = []\n    for term in equation.split('+'):\n        var, count = term.strip().split(' ')\n        variables.append((var, int(count)))\n\n    new_equation = \"\"\n    for var, count in variables:\n        new_equation += (var + '^' + str(count)) + ' + '\n    return new_equation[:-3]\n\nequation = 'x + x + y + y + y'\n\nprint(optimize_equation(equation)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_word_lists(strings):\n    word_lists = []\n    for string in strings:\n        words = string.split(\" \")\n        word_list = []\n        for i in range(len(words)):\n            word_list.append(words[i:])\n        word_lists.append(word_list)\n    return word_lists\n\nword_lists = get_word_lists([\"Hello world\", \"This is a test\"])\nprint(word_lists) # prints \"[[\"Hello\", \"world\"], [\"This\", \"is\", \"a\", \"test\"]]\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The web scraper should utilize the Python package BeautifulSoup to parse webpages and extract the required data. BeautifulSoup will allow us to find HTML elements on the webpage using tags and attributes. Once the data is found, it can be converted into the desired format and stored.\n\nFor example, to extract the URL from a list of webpages, the following code snippet can be used:\n\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Get the web page\nwebpage = requests.get(\"<url_of_webpage>\")\n\n# Parse the web page\nsoup = BeautifulSoup(webpage.content, 'html.parser')\n\n# Find all 'a' tags\nlinks = soup.find_all('a')\n\n# Extract the URLs in the 'href' attribute\nfor link in links:\n    print(link.get('href')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/bin/bash\n\n# Download latest version of Python\ncurl -O https://www.python.org/ftp/python/3.8.5/Python-3.8.5.tgz\n\n# Extract the tgz file\ntar -xzf Python-3.8.5.tgz\n\n# Move into the Python directory\ncd Python-3.8.5\n\n# Run the configure script\n./configure\n\n# Compile and install\nmake\nmake install but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def odd_numbers_list(numbers):\n    return [num for num in numbers if num % 2 != 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add(a, b):\n    sum = a + b\n    print(sum)\n\nadd(5,7) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_common(nums):\n    # Create a dictionary to store the counts\n    counts = {}\n\n    # Iterate over the elements\n    for num in nums:\n        # If the element is not present in the dictionary, add it\n        if num not in counts:\n            counts[num] = 0\n\n        # Update the count\n        counts[num] += 1\n\n    # Get the maximum count\n    max_count = max(counts.values())\n\n    # Return the elements that have maximum count\n    return [num for num, count in counts.items() if count == max_count] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: array = [1, 10, 50, 3, 8]\n\n# Get the maximum element\nmax_element = max(array)\n\nprint(max_element) # Output: 50 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\nfrom nltk.stem.snowball import SnowballStemmer\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer \n\ndef sentiment_analyzer(text):\n    # Tokenize the text\n    tokens = word_tokenize(text)\n\n    # Create stemmer object\n    stemmer = SnowballStemmer('english')\n\n    # Stem each token\n    stemmed_words = [stemmer.stem(word) for word in tokens]\n\n    # Remove punctuation\n    clean_words = [word for word in stemmed_words if re.match('[a-zA-Z-]+$', word)]\n\n    # Remove stopwords\n    meaningful_words = [word for word in clean_words if not word in stopwords.words('english')]\n\n    # Create a SentimentIntensityAnalyzer object\n    sid = SentimentIntensityAnalyzer()\n\n    # Get the polarity score of the text\n    polarity_score = sid.polarity_scores(' '.join(meaningful_words))\n\n    return polarity_score but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: filtered_list = [email for email in list if email.endswith(\"@gmail.com\")]\n\nprint(filtered_list)\n# Output: [\"john@gmail.com\", \"sophie@gmail.com\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insertion_sort(arr):\n for i in range(1, len(arr)):\n key = arr[i]\n j = i -1\n while j >= 0 and key < arr[j] :\n    arr[j + 1] = arr[j]\n    j = j - 1\n arr[j + 1] = key\n\nreturn arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insertionSort(arr):\n\tfor i in range(1, len(arr)):\n\t\tcurrent = arr[i]\n\t\tj =i-1\n\t\twhile j>=0 and arr[j]>current:\n\t\t\tarr[j+1] = arr[j]\n\t\t\tj-=1\n\t\tarr[j+1] = current\n\treturn arr\n\nif __name__ == '__main__':\n\tarr = [2, 4, 7, 3, 8, 6, 1]\n\tprint(insertionSort(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def eval_expr(expr):\n   return eval(expr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndata = '{\"name\": \"John\",\"age\": 30,\"address\": {\"city\": \"New York\",\"state\": \"NY\"}}'\n\ndata_dict = json.loads(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compress(s): \n    # Initialize results \n    output = \"\" \n  \n    # Initialize count \n    count = 1\n  \n    # Traverse the string \n    for i in range(len(s)): \n          \n        # If the current character is same \n        # as next one, increment its count \n        if (i+1 < len(s) and s[i] == s[i+1]): \n            count += 1\n          \n        else: \n            # Append the count and character \n            outputo + = str(count) + s[i] \n          \n            # Reset the  count  \n            count = 1\n          \n    # Append the last obtained characters \n    # and their count \n    output += str(count) + s[i] \n  \n    return output\n\ns = \"aabbbbbbcccc\"\nprint(compress(s))\n# Output: 2a6b4c but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, jsonify, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] =  'sqlite:///test.db'\ndb = SQLAlchemy(app)\n\nclass BlogPost(db.Model):\n  id = db.Column(db.Integer, primary_key=True)\n  title = db.Column(db.String(200))\n  content = db.Column(db.Text)\n\n  def __repr__(self):\n    return '<BlogPost %r>' % self.title\n\n@app.route('/post', methods=['POST'])\ndef create_post():\n  data = request.get_json()\n  post = BlogPost(title=data['title'], content=data['content'])\n  db.session.add(post)\n  db.session.commit()\n  return jsonify(post.id)\n\n@app.route('/posts', methods=['GET'])\ndef get_posts():\n  posts = BlogPost.query.all()\n  return jsonify([post.serialize() for post in posts])\n\n@app.route('/post/<id>', methods=['GET'])\ndef get_post(id):\n  post = BlogPost.query.filter_by(id=id).first()\n  return jsonify(post.serialize())\n\n@app.route('/post/<id>', methods=['PUT'])\ndef edit_post(id):\n  data = request.get_json()\n  post = BlogPost.query.filter_by(id=id).first()\n  post.title = data['title']\n  post.content = data['content']\n  db.session.commit()\n  return jsonify(post.serialize())\n\n@app.route('/post/<id>', methods=['DELETE'])\ndef delete_post(id):\n  post = BlogPost.query.filter_by(id=id).first()\n  db.session.delete(post)\n  db.session.commit()\n  return jsonify({ 'message' : 'Post deleted' })\n\nif __name__ == '__main__':\n  app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #include <iostream>\n#include <math.h>\n\nint main() \n{ \n    int x1 = 3; \n    int y1 = 4; \n\n    int x2 = -9; \n    int y2 = -2;\n\n    float distance = sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2)); \n\n    std::cout << \"Distance between the two points is: \" << distance << std::endl; \n\n    return 0; \n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# The answers to the queries\nanswers = {\n    'What is XYZ?': 'XYZ is a company that provides XYZ services.',\n    'What does XYZ do?': 'XYZ helps customers find solutions to their problems.',\n    'Where is XYZ located?': 'XYZ is located in ABC city.',\n    'What are the benefits of using XYZ?': 'XYZ provides a quick and easy way to find solutions to your problems.'\n}\n\n# Generate a response\ndef generate_response(question):\n    if question in answers:\n        return answers[question]\n    else:\n        return random.choice(['I am not sure I understand.', 'Can you give me more information?', 'Can I help you with something else?'])\n\n# Start the conversation\nquestion = input('Welcome to XYZ. How can I help you? ')\nresponse = generate_response(question)\n\nwhile response != 'Goodbye':\n    print(response)\n    question = input('Is there anything else I can help you with? ')\n    response = generate_response(question)\n\nprint('Goodbye!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\ndef read_url(url):\n  r = requests.get(url)\n  if r.status_code == 200:\n    return r.text\n  else:\n    return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(n):\n # check if n is divisible by any of the numbers\n # between 2 and n-1\n for i in range(2, n):\n if n % i== 0:\n return False\n\n return True \n\ndef check_lst(lst):\n # generate a list of booleans \n # where each element corresponds to the corresponding\n # element of lst\n result_lst = []\n for i in range(len(lst)):\n if is_prime(lst[i]):\n result_lst.append(True)\n else:\n result_lst.append(False)\n\n return result_lst\n\nlst = [7, 8, 12, 19, 22, 23]\nprint(check_lst(lst))\n\n# Output: \n# [True, False, False, True, False, True] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def top_three(numbers):\n    sorted_numbers = sorted(numbers, reverse=True)\n    return sorted_numbers[:3]\n\nprint(top_three([7, 13, 5, 8, 50, 11, 64, 48])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_dict = {}\n\nfor i in range(1,n+1):\n my_dict[i] = i**2\n\nprint(my_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = 'https://api.example.com/users'\n\nheaders = {\n 'Authorization': 'Bearer YOUR_API_TOKEN',\n 'Content-Type': 'application/json',\n}\n\nresponse = requests.get(url, headers=headers).json()\n\nfor user in response['data']:\n print(user) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re \n  \n# input string \nstrings = [\"First\",\"Second\",\"Third\"]\n\n# Get the string \ninp_str = input(\"Please enter your string :\") \n\n# Initialize the flag \nfound = False\n  \n# Search the string \nfor i in strings: \n    if re.search(i, inp_str):\n        found = True\n\n# Print result \nif found == True: \n    print(\"String matches\") \nelse: \n    print(\"String doesn't matches\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def to_lower(string):\n    return string.lower() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: items = {1: 'one', 2: 'two', 3: 'three', 4: 'four'}\n\nfor key, value in items.items():\n print(value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def primeSieve(n): \n    prime_list = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime_list[p] == True): \n            for i in range(p * 2, n+1, p): \n                prime_list[i] = False\n        p += 1\n    primes=[] \n    for p in range(2, n): \n        if prime_list[p]: \n            primes.append(p) \n    return primes\n\nprint(primeSieve(10))  # [2, 3, 5, 7] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to generate prime numbers between 1 and a given number n \ndef generate_prime_numbers(n): \n  \n    # Array for checking if a number is prime or not\n    prime_list = [True for i in range(n + 1)] \n    p = 2\n    while (p * p <= n): \n          \n        # If prime_list[p] is not changed, then it is a prime \n        if (prime_list[p] == True): \n              \n            # Update all multiples of p \n            for i in range(p * 2, n + 1, p): \n                prime_list[i] = False\n        p += 1\n  \n    # Collecting prime numbers \n    for p in range(2, n): \n        if prime_list[p]: \n            print(p) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: // A Naive recursive Python \n// program for 0-1 Knapsack problem \n \n# Returns the maximum value  \n# that can be put in a knapsack of  \n# capacity W \ndef knapSack(W, wt, val, n): \n  \n    # Base Case \n    if n == 0 or W == 0 : \n        return 0\n  \n    # If weight of the nth item is more \n    # than Knapsack capacity W, then \n    # this item cannot be included in the optimal solution \n    if (wt[n-1] > W): \n        return knapSack(W, wt, val, n-1) \n  \n    # return the maximum of two cases: \n    # (1) nth item included \n    # (2) not included \n    else: \n        return max(val[n-1] + knapSack(W-wt[n-1], wt, val, n-1), \n                    knapSack(W, wt, val, n-1)) \n  \n# end of function knapSack but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_eq(a, b, c):\n    return a*x + b*y - c\n\n# For example:\nresult = linear_eq(3, 5, 7)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insertion_sort(list):\n    for i in range(1,len(list)):\n        key = list[i]\n        j = i - 1\n        while j>=0 and key < list[j]:\n            list[j+1] = list[j]\n            j-=1\n        list[j+1] = key\n    return list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n  \n  \n# All the possible characters \n# that could go into the password \nstring = \"abcdefghijklmnopqrstuvwxyz01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()?\"\n  \n# Using the choice function of the \n# random module choose any \n# character randomly from the set of characters \npassword =  \"\".join(random.sample(string, 8)) \nprint(password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_numbers(length, min_value, max_value):\n    return [random.uniform(min_value, max_value) for _ in range(length)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Recursion is a powerful technique for solving problems. It involves defining a problem in terms of itself. A recursion problem is solved by breaking it down into smaller problems, until the problem is small enough to be solved directly. The result from a smaller problem can then be combined with the result from the larger problem, until the original problem is solved. In Python, a recursive function is one that calls itself. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, render_template, request, redirect\nimport sqlite3\n\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n return render_template('index.html')\n\n@app.route('/submit', methods=['POST'])\ndef submit():\n name = request.form.get('name')\n email = request.form.get('email')\n phone = request.form.get('phone')\n \n conn = sqlite3.connect('data.db')\n cur = conn.cursor()\n \n cur.execute(\"INSERT INTO data (name, email, phone) VALUES (?, ?, ?)\", (name, email, phone))\n conn.commit()\n \n return redirect('/')\n\t\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def transpose(A):\n n = len(A)\n m = len(A[0])\n\n B = [[0 for x in range(n)] for x in range(m)]\n\n for i in range(n):\n for j in range(m):\n B[j][i] = A[i][j]\n\n return B but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_ints(*args):\n    total = 0\n    for num in args:\n        total += num\n    \n    return total\n\nprint(sum_ints(3, 5, 7)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_list(input_list):\n  sum = 0\n  for i in input_list:\n    sum += i\n  return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\nimport time\n\n# Initialize web driver\ndriver = webdriver.Chrome()\n\n# Navigate to the target web page\ndriver.get('http://www.example.com')\n\n# Locate username field\nusername = driver.find_element_by_name('username')\n\n# Enter username\nusername.send_keys('username')\n\n# Locate password field\npassword = driver.find_element_by_name('password')\n\n# Enter password\npassword.send_keys('password')\n\n# Locate submit button\nsubmit_button = driver.find_element_by_name('submit')\n\n# Click submit button\nsubmit_button.click()\n\n# Wait for login process to complete\ntime.sleep(5)\n\n# Login successful\nprint('Login successful!')\n\ndriver.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import svm\nfrom sklearn.metrics import precision_score\n\n# Load the dataset\ndf = pd.read_csv(\"spam.csv\", encoding='iso-8859-1')\n# Load label and data\nX = df['EmailText']\ny = df['Label']\n\n# Split data into train-test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)\n\n# Create bag of words model\ncount_vectorizer = CountVectorizer()\nX_train_counts = count_vectorizer.fit_transform(X_train)\n\n# Train the model\nclf = svm.SVC(kernel='linear')\nclf.fit(X_train_counts, y_train)\n\n# Test the model\nX_test_counts = count_vectorizer.transform(X_test)\npredictions = clf.predict(X_test_counts)\nscore = precision_score(y_test, predictions, average='binary')\n\nprint('Precision score of the model:', score) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\nconn = sqlite3.connect('movies.db') \ncursor = conn.cursor()\n\ncursor.execute(\"SELECT * FROM Movies WHERE category = 'horror'\")\n\nresult = cursor.fetchall()\nfor row in result:\n    print(row)\n\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python\ndef matrixMultiplication(A, B):\n    if len(A[0]) != len(B):\n        return \"Matrix multiplication not possible\"\n\n    C = [[0 for i in range(len(A[0]))] for j in range(len(B[0]))]\n\n    for i in range(len(A)):\n        for j in range(len(B[0])):\n            for k in range(len(B)):\n                C[i][j] += A[i][k] * B[k][j]\n\n    return C\n\nA = [[3, 4], \n     [1, 2]]\nB = [[7, 5],\n     [0, 1]]\nC = matrixMultiplication(A, B)\n\nprint(C) # Output = [[21, 17], [0, 2]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers = [1, 2, 3, 4, 5, 6]\n\nprint(*numbers, sep='\\n') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def vowelCheck(inputString): \n    vowels = ['a','e','i','o','u','A','E','I','O','U'] \n    for x in inputString: \n        if x in vowels: \n            return x but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\ndf = pd.read_sql_query(\"SELECT * FROM book;\", conn) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\ndata = [3, 5, 7, 2, 8, 10, 11, 65, 72, 81, 99, 100, 150]\n\n# plotting the histogram \nplt.hist(data, bins = [0, 20, 40, 60, 80, 100, 120, 140, 160], edgecolor = 'black') \n  \n# x-axis label \nplt.xlabel('Range of values') \n# y-axis label \nplt.ylabel('Number of Occurrences') \n# plot title \nplt.title('Histogram of data') \n  \n# function to show the plot \nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef populateArray(array_length):\n array = []\n for i in range(array_length):\n array.append(random.randint(1, 100))\n return array but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\n\n# Split the text into individual words\nwords = text.split()\n\n# Create a counter object\ncounter = Counter(words)\n\n# Get the top 10 most frequent words\ntop_words = counter.most_common(10)\n\nprint(top_words)\n\n# Output: [('dolor', 1), ('Lorem', 1), ('ipsum', 1), ('amet', 1), ('consectetur', 1), ('adipiscing', 1), ('elit,', 1), ('sed', 1), ('do', 1), ('eiusmod', 1)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def removeDuplicates(arr):\n result = [] \n  \n # traverse for all elements \n for i in arr: \n  \n  # check if exists in result \n  if i not in result: \n   result.append(i) \n  \n # return result \n return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_common_substring(str1, str2):\n    match = 0\n    substr = \"\"\n    for i in range(len(str1)):\n        for j in range(len(str2)):\n            l = 0\n            while (i + l < len(str1) and j + l < len(str2) and str1[i + l] == str2[j + l]):\n                l += 1\n            if l > match:\n                substr = str1[i:i + l]\n                match = l\n    return substr\n\nresult = longest_common_substring(\"Helwallomst\", \"Welcome\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def serach_char(input_str, char):\n  for char in input_str:\n    if char == input_char:\n      return True\n  return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def parse_xml(text):\n    tag_objects = []\n\n    root = ET.fromstring(text)\n    for child in root:\n        tag = Tag(child.attrib[\"id\"])\n        for subchild in child:\n            tag.add_value(subchild.attrib[\"value\"])\n        tag_objects.append(tag)\n\n    return tag_objects\n\nclass Tag:\n    def __init__(self, tag_id):\n        self.tag_id = tag_id\n        self.values = []\n    \n    def add_value(self, value):\n        self.values.append(value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef random_string(length):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(length))\n\nrandom_string(6) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def averageMatrix(matrix):\n sum = 0\n for row in matrix:\n  for e in row:\n   sum += e\n\n return sum / (len(matrix) * len(matrix[0]))\n\na = [[3,2,6],\n     [8,5,9],\n     [4,7,1]]\n\nprint(averageMatrix(a)) # 4.77 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nGenerate a code in Python to convert a number into binary format\n\"\"\"\ndef convert_to_binary(num):\n    # check if the number is 0, if so return 0\n    if num == 0:\n        return 0\n    \n    # initialize an empty binary string\n    binary = ''\n    \n    # loop through the number and get the remainder \n    # which is the bits of the binary\n    while num != 0:\n        remainder = num % 2\n        binary = str(remainder) + binary\n        num = num // 2\n    \n    return binary\n\n# test the function \nprint(convert_to_binary(10)) # 1010 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(num):\n    if num <= 1:\n        return 1\n    else:\n        return num * factorial(num - 1) \n\nn = int(input(\"Enter a number: \"))  \nprint(\"Factorial of\",n,\"is\",factorial(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_to_negative(x): \n    return ~x + 1 \n  \ndef convert_to_positive(x): \n    return ~(x-1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import hashlib\nimport json\n\n# Define the Block class\nclass Block:\n def __init__(self, index, timestamp, data, previous_hash):\n self.index = index\n self.timestamp = timestamp\n self.data = data\n self.previous_hash = previous_hash\n self.hash = self.hash_block()\n\n # Create the hash of the block contents\n def hash_block(self):\n sha = hashlib.sha256()\n sha.update((str(self.index) + \n str(self.timestamp) + \n str(self.data) + \n str(self.previous_hash)).encode('utf-8'))\n return sha.hexdigest()\n\n# Create the blockchain\ndef create_blockchain():\n blockchain = [create_genesis_block()]\n previous_block = blockchain[0]\n\n # Add blocks for each item in the list of transactions\n for i in range(1, len(blockchain_transactions)):\n block_to_add = next_block(previous_block, blockchain_transactions[i])\n blockchain.append(block_to_add)\n previous_block = block_to_add\n\n# Print the blockchain\ndef print_blockchain():\n for block in blockchain:\n block_index = str(block.index)\n block_timestamp = str(block.timestamp)\n block_data = str(block.data)\n block_hash = block.hash but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findGCD(a, b): \n   if (b == 0): \n       return a\n   return findGCD(b, a % b)\n    \na = 1000\nb = 500\nprint(\"GCD of number is: \", findGCD(a, b)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_x(x, y):\n    count = 0\n    for i in y:\n        if i == x:\n            count += 1\n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def str_to_float(ratings):\n    return [float(x) for x in ratings] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def caesar_encrypt(message, shift):\n    encrypted_message = \"\"\n    for c in message:\n        encrypted_c = ord(c) + shift\n        if encrypted_c > 126:\n            encrypted_c -= 94\n        encrypted_message += chr(encrypted_c)\n    return encrypted_message but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [1, 6, 3, 8, 7, 4]\nlargest_three = sorted(my_list)[-3:]\nprint(largest_three) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to check if \n# a binary tree is subtree of another binary tree \n  \n# A binary tree node \nclass Node: \n      \n    # Constructor to create a new node \n    def __init__(self, data): \n        self.data = data \n        self.left = None\n        self.right = None\n  \ndef isSubTree(T, S): \n    \n    if S is None: \n        return True\n  \n    if T is None: \n        return False\n  \n    if areIdentical(T, S): \n        return True\n  \n    return isSubTree(T.left, S) or isSubTree(T.right, S) \n  \n  \ndef areIdentical(T, S): \n      \n    if T is None and S is None: \n        return True\n  \n    if T is None or S is None: \n        return False\n  \n    return (T.data == S.data and areIdentical(T.left, S.left)and\n        areIdentical(T.right, S.right)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: x = 5\ny = 10\n\n# Swapping process \nx, y = y, x \n\nprint(\"x:\", x) \nprint(\"y:\", y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def removeDuplicates(array): \n    finalArray = []\n    for element in array: \n        if element not in finalArray: \n            finalArray.append(element)\n    return finalArray but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\ndef frequent_words(words, n):\n    counts = Counter(words)\n    return [word for word, count in counts.items() if count >= n]\n\nresult = frequent_words(words, n)\n\nprint(result) # prints ['a', 'd'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def even_or_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import hashlib\nimport json\n\n# We will use SHA256 as our hashing function\ndef sha256(data):\n    hash_function = hashlib.sha256()\n    hash_function.update(data.encode('utf-8'))\n    return hash_function.hexdigest()\n\n# Create a class for each block\nclass Block:\n    def __init__(self, index, timestamp, data, previous_hash):\n        self.index = index\n        self.timestamp = timestamp\n        self.data = data\n        self.previous_hash = previous_hash\n        self.hash = sha256(f'{self.index}{self.timestamp}{self.data}{self.previous_hash}')\n\n# Create a class for the blockchain\nclass Blockchain:\n    def __init__(self):\n        self.chain = []\n\n    def add_block(self, data):\n        previous_hash = self.chain[-1].hash if len(self.chain) > 0 else None\n        block = Block(len(self.chain), data['timestamp'], data['data'], previous_hash)\n        self.chain.append(block)\n\n    # This method will return the entire blockchain in JSON format\n    def get_chain(self):\n        return json.dumps([b.__dict__ for b in self.chain], indent=2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nThis code uses the exponential smoothing algorithm to predict the next day's forecasted temperature given the past three day's forecasted temperatures.\n\"\"\"\n\ndef predict_temperature(temperature_list):\n    alpha = 0.5 #Confidence value\n    predicted_temperature = temperature_list[-1] # Initializing prediction\n    for temperature in temperature_list[:-1]:\n        predicted_temperature = alpha*temperature + (1-alpha)*predicted_temperature\n    return predicted_temperature\n\nif __name__ == '__main__':\n    temperature_list = [21, 22, 20]\n    print(predict_temperature(temperature_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortDictionary(dictionary):\n  sorted_list = sorted(dictionary.items(), key=lambda x: x[1], reverse=True)\n  sorted_dictionary = dict(sorted_list)\n  return sorted_dictionary\n\nsorted_dictionary = sortDictionary({'apple': 2, 'banana': 3, 'mango': 1})\nprint(sorted_dictionary) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiplication_table(start, end):\n\tfor x in range(start, end + 1):\n\t\tfor y in range(start, end + 1):\n\t\t\tprint(x * y, end = \"  \")\n\t\tprint(\"\\n\")\n\t\t\nmultiplication_table(start, end) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def matching_paren(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False \n            stack.pop()\n    \n    if len(stack) == 0:\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def swap(arr1, arr2):\n    assert len(arr1) == len(arr2)\n    for i in range(len(arr1)):\n        temp = arr1[i]\n        arr1[i] = arr2[i]\n        arr2[i] = temp but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_list(list): \n    return list[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def build_dictionary(samples):\n dictionary = {}\n for sample in samples:\n  key, value = sample.split(\"->\")\n  dictionary[key] = value\n return dictionary\n \nsamples = [\"apple->red\", \"banana->yellow\", \"cherry->red\"]\ndictionary = build_dictionary(samples)\n\nprint(dictionary) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_mean(numbers):\n    total_sum = 0\n    for num in numbers:\n        total_sum += num\n    mean = total_sum / len(numbers)\n    return mean\n\nprint(calculate_mean([10, 20, 30])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def common_elements(list1, list2): \n    common_list=[]\n    for element in list1: \n        if element in list2: \n            common_list.append(element) \n    return common_list\n  \nlist1 = [1, 2, 3, 4, 8] \nlist2 = [2, 6, 8, 10]\n\ncommon_list = common_elements(list1, list2) \n\nprint(common_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 11):\n    if i % 2 != 0:\n        print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Preprocessing\ndf = pd.read_csv('transactions.csv')\nX = df.iloc[:,:-1].values\ny = df.iloc[:,-1].values\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\n\n# Model Training\nmodel = RandomForestRegressor()\nmodel.fit(X, y)\n\n# Prediction\ncustomer_input = np.array([[10,100,5,...]]) # provide data related to past transactions\ntrans_scaled = scaler.transform(customer_input)\npredicted_LTV = model.predict(trans_scaled)[0]\nprint('Predicted customer lifetime value', predicted_LTV) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_pair(lst, target):\n    for i in range(len(lst)):\n        if (target - lst[i]) in lst[i+1:]:\n            return [lst[i], target-lst[i]]\n\nfind_pair([1,2,3,4,4,5,6], 8) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Matrix: \n    def __init__(self, m, n, lst): \n        self.m = m             \n        self.n = n             \n        self.mat = [] \n  \n        c = 0\n        for i in range(self.m): \n            a =[] \n            for j in range(self.n): \n                    a.append(lst[c]) \n                    c += 1\n            self.mat.append(a) \n  \n    def __str__(self): \n        output = \"\"\n        for i in self.mat: \n            for j in i: \n                output += str(j) + \" \"\n            output += '\\n'\n        return output \n  \n    def add(self, mat2): \n        for i in range(self.m): \n            for j in range(self.n): \n                self.mat[i][j] += mat2.mat[i][j] \n  \n    def sub(self, mat2): \n        for i in range(self.m): \n            for j in range(self.n): \n                self.mat[i][j] -= mat2.mat[i][j]\n    \n    def mul(self, mat2): \n        result = [] \n        for i in range(self.m): \n            a =[] \n            for j in range(mat2.n): \n                s = 0\n                for k in range(self.n): \n                    s += self.mat[i][k] * mat2.mat[k][j] \n                a.append(s) \n            result.append(a) \n        self.mat = result \n        self.m = len(result) \n        self.n = len(result[0]) \n  \n    def transpose(self):\n        result = [[self.mat[j][i] for j in range(len(self.mat))] for i in range(len(self.mat[0]))]\n        self.mat = result \n        self.m = len(result) \n        self.n = len(result[0]) but is not the same. just give one example and only return the code."}
