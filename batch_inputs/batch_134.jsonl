{"prompt": "make some code that functions the same as the following code: def sort_dict_by_value(input_dict):\n    output_list = []\n    for item in sorted(input_dict.items(), key=lambda x: x[1]):\n        output_list.append(item)\n    return output_list\n\nd = {'z': 1, 'b': 2, 'a': 4, 'c': 3}\nresult = sort_dict_by_value(d)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pygame  # used to display the game board \nimport numpy as np  # used to manage board states \nimport time  # used for measuring time spent for each move \nimport copy  # used to copy game boards \n\n# define the game board size\nBOARD_SIZE = 4\n\n# define useful game constants\nTILE_2 = 2\nTILE_4 = 4\n\n# define useful game variables \nopening_tile_value = TILE_2\nscore = 0 \n\n# define a game board class\nclass Board:\n    # init game board\n    def __init__(self):\n        self.board = np.zeros((BOARD_SIZE,BOARD_SIZE), dtype=int)\n        self.place_opening_tile()        \n\n    # get available moves\n    def get_available_moves(self):\n        x_direction = [0,1,0,-1]\n        y_direction = [1,0,-1,0]\n        valid_moves = []\n        # loop through each column/row\n        for i in range(BOARD_SIZE):\n            for j in range(BOARD_SIZE):\n                # loop through each direction \n                for x_dir, y_dir in zip(x_direction, y_direction):\n                    x, y = i + x_dir, j + y_dir\n                    if 0 <= x < BOARD_SIZE and 0 <= y < BOARD_SIZE and self.board[x][y] == 0:\n                        valid_moves.append((i, j, x, y))\n        return valid_moves\n    \n    # make a move\n    def make_move(self, tile_value, movement):\n        x_from, y_from = movement[0], movement[1]\n        x_to, y_to = movement[2], movement[3]\n        self.board[x_from][y_from] = 0\n        self.board[x_to][y_to] = tile_value\n        self.place_opening_tile()\n\n    # place an opening tile\n    def place_opening_tile(self):\n        available_pos = np.where(self.board == 0)\n        if len(available_pos[0]) == 1:\n            x_pos, y_pos = available_pos[0][0], available_pos[1][0]\n            self.board[x_pos][y_pos] = opening_tile_value\n        elif len(available_pos[0]) == 0:\n            # game over\n            pass\n        else:\n            x_pos, y_pos = available_pos[0][np.random.choice(range(len(available_pos[0])))], \\\n                available_pos[1][np.random.choice(range(len(available_pos[1])))]\n            self.board[x_pos][y_pos] = opening_tile_value but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # !/usr/bin/env python3\n# Software License Agreement (BSD License)\n#\n# Copyright (c) 2018, UFACTORY, Inc.\n# All rights reserved.\n#\n# Author: Vinman <vinman.wen@ufactory.cc> <vinman.cub@gmail.com>\n\nimport time\nimport functools\nfrom ..core.utils.log import logger\nfrom .code import APIState\n\n\ndef check_modbus_baud(baud=2000000, _type='set', default=None):\n    def _check_modbus_baud(func):\n        @functools.wraps(func)\n        def decorator(*args, **kwargs):\n            code = args[0].checkset_modbus_baud(baud)\n            if code != 0:\n                logger.error('check modbus baud is failed, code={}'.format(code))\n                return code if _type == 'set' else (code, default if default != -99 else [])\n            else:\n                return func(*args, **kwargs)\n        return decorator\n    return _check_modbus_baud\n\n\ndef xarm_is_connected(_type='set'):\n    def _xarm_is_connected(func):\n        @functools.wraps(func)\n        def decorator(*args, **kwargs):\n            if args[0].connected:\n                return func(*args, **kwargs)\n            else:\n                logger.error('xArm is not connect')\n                return APIState.NOT_CONNECTED if _type == 'set' else (APIState.NOT_CONNECTED, 'xArm is not connect')\n        return decorator\n    return _xarm_is_connected\n\n\ndef xarm_is_ready(_type='set'):\n    def _xarm_is_ready(func):\n        @functools.wraps(func)\n        def decorator(*args, **kwargs):\n            if args[0].connected and kwargs.get('auto_enable', False):\n                if not args[0].ready:\n                    args[0].motion_enable(enable=True)\n                    args[0].set_mode(0)\n                    args[0].set_state(0)\n            if args[0].connected:\n                if args[0].state_is_ready:\n                    return func(*args, **kwargs)\n                else:\n                    logger.error('xArm is not ready')\n                    logger.info('Please check the arm for errors. If so, please clear the error first. '\n                                'Then enable the motor, set the mode and set the state')\n                    return APIState.NOT_READY if _type == 'set' else (APIState.NOT_READY, 'xArm is not ready')\n            else:\n                logger.error('xArm is not connect')\n                return APIState.NOT_CONNECTED if _type == 'set' else (APIState.NOT_CONNECTED, 'xArm is not connect')\n        return decorator\n    return _xarm_is_ready\n\n\ndef xarm_is_pause(_type='set'):\n    def _xarm_is_pause(func):\n        @functools.wraps(func)\n        def decorator(*args, **kwargs):\n            args[0].check_is_pause()\n            return func(*args, **kwargs)\n        return decorator\n    return _xarm_is_pause\n\n\ndef xarm_wait_until_cmdnum_lt_max(only_wait=False):\n    def _xarm_wait_until_cmdnum_lt_max(func):\n        @functools.wraps(func)\n        def decorator(*args, **kwargs):\n            ret = args[0].wait_until_cmdnum_lt_max()\n            if not only_wait and ret is not None:\n                args[0].log_api_info('API -> {} -> code={}'.format(func.__name__, ret), code=ret)\n                return ret\n            return func(*args, **kwargs)\n        return decorator\n    return _xarm_wait_until_cmdnum_lt_max\n\n\ndef xarm_is_not_simulation_mode(ret=0):\n    def _xarm_is_not_simulation_mode(func):\n        @functools.wraps(func)\n        def decorator(*args, **kwargs):\n            if not args[0].check_is_simulation_robot():\n                return func(*args, **kwargs)\n            else:\n                return ret\n        return decorator\n    return _xarm_is_not_simulation_mode\n\n\ndef api_log(func):\n    @functools.wraps(func)\n    def decorator(*args, **kwargs):\n        ret = func(*args, **kwargs)\n        logger.info('{}, ret={}, args={}, kwargs={}'.format(func.__name__, ret, args[1:], kwargs))\n        return ret\n    return decorator\n\n\ndef compare_time(time1, time2):\n    try:\n        s_time = time.mktime(time.strptime(time1, '%Y-%m-%d'))\n        e_time = time.mktime(time.strptime(time2, '%Y-%m-%d'))\n        return int(s_time) - int(e_time) > 0\n    except:\n        return False\n\n\ndef compare_version(v1, v2):\n    for i in range(3):\n        if v1[i] > v2[i]:\n            return True\n        elif v1[i] < v2[i]:\n            return False\n    return False\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Game:\n    def __init__(self, player1, player2, board_size=3):\n        self.player1 = player1\n        self.player2 = player2\n        self.board_size = board_size\n        self.board = []\n        self.turn = player1\n    \n    def create_board(self):\n        for x in range(self.board_size):\n            self.board.append([\"_\"] * self.board_size)\n        return self.board\n    \n    def print_board(self):\n        for row in self.board:\n            print(\" \".join(row))\n    \n    def move(self):\n        while True:\n            move_column = int(input(f\"{self.turn} enter a column: \"))\n            move_row = int(input(f\"{self.turn} enter a row: \"))\n            if self.board[move_row][move_column] == \"_\":\n                self.board[move_row][move_column] = self.turn\n                return True\n            else:\n                print(\"This position is already taken\")\n    \n    def game_over(self):\n        # Check for winner\n        for player in [self.player1, self.player2]:\n            # check for columns\n            for col in range(self.board_size):\n                if self.board[0][col] == self.board[1][col] == self.board[2][col] == player:\n                    return True\n            \n            # check for rows\n            for row in range(self.board_size):\n                if self.board[row] == [player, player, player]:           \n                    return True\n        \n            # check for diagonals\n            if self.board[0][0] == self.board[1][1] == self.board[2][2] == player:\n                return True\n        \n            if self.board[0][2] == self.board[1][1] == self.board[2][0] == player:\n                return True\n        \n        # Check for draw\n        if \"_\" not in self.board[0] and \"_\" not in self.board[1] and \"_\" not in self.board[2]:\n            return True\n        return False\n        \n    def run_game(self):\n        self.create_board()\n        while True:\n            self.print_board()\n            self.move()\n            is_game_over = self.game_over()\n            if is_game_over:\n                if self.turn == self.player1:\n                    print(f\"{self.player2} wins!\")\n                else:\n                    print(f\"{self.player1} wins!\")\n                break\n            #change turn\n            if self.turn == self.player1:\n                self.turn = self.player2\n            else:\n                self.turn = self.player1\n\nif __name__ == \"__main__\":\n    player1 = input(\"Player 1, enter a name: \")\n    player2 = input(\"Player 2, enter a name: \")\n    game = Game(player1, player2)\n    game.run_game() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\nx = np.array([3, 4, 5])\ny = np.array([2, 6, 4])\n\ndot_product = np.dot(x, y)\n\nprint(dot_product) # 46 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def network_search(graph, start, end):\n visited, queue = set(), [(start, 0)]\n \n while queue:\n vertex, depth = queue.pop(0)\n \n if vertex not in visited:\n visited.add(vertex)\n \n if vertex == end:\n return depth\n \n for neighbor in graph[vertex]:\n queue.append((neighbor, depth + 1))\n \n return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreating an AI Chatbot in Python\n\"\"\"\n\nimport re\nimport random\n\nbot_greetings = [\"Hi!\", \"Hey there!\", \"Good morning!\", \"Good afternoon!\"]\n\n# Define a function that responds to a user's message\ndef respond_to_message(message):\n    # If the message is a greeting, then return a random greeting response\n    if re.search('(hey|hi|hello|morning|afternoon)', message):\n        return random.choice(bot_greetings)\n    # For other messages, you can provide a response that contains the appropriate task instructions\n    elif re.search('(ticket|booking|reservation)', message):\n        return \"To book a ticket, you can enter your travel details here .\"\n    elif re.search('(hotel|accomodation)', message):\n        return \"To book a hotel room, you can enter your dates and other details here .\"\n    else:\n        return \"I don't understand your query. Please enter a valid input!\"\n  \nif __name__ == '__main__':\n    user_message = input(\"User: \")\n    bot_response = respond_to_message(user_message)\n    print(\"Bot:\", bot_response) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn import tree\n \n# example data as an array\nX = np.array([[21, 180, 70], [22, 178, 68], [19, 182, 72], \n [18, 186, 80]])\n \n# output label (The label can be any string that you set)\ny = np.array(['male', 'male', 'female', 'female'])\n \n# decision tree classifier\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X, y)\n \n# predict based on the given input\nprediction = clf.predict([[24, 185, 85]])\n \nprint(prediction) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_matches(arr1, arr2):\n    count = 0\n    for i in arr1:\n        if i in arr2:\n            count += 1\n    return count\n\nprint(count_matches(arr1, arr2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_arrays(arr1, arr2):\n    merged_array = []\n    \n    # While both arrays have elements\n    while len(arr1) and len(arr2):\n        if arr1[0] < arr2[0]:\n            merged_array.append(arr1.pop(0))\n        else:\n            merged_array.append(arr2.pop(0))\n \n    # If one of the array still has elements\n    while len(arr1):\n        merged_array.append(arr1.pop(0))\n    \n    while len(arr2):\n        merged_array.append(arr2.pop(0))\n    return merged_array\n\narr1 = [5, 7, 11]\narr2 = [2, 3, 8]\n  \nmerged_array = merge_arrays(arr1, arr2)\n \nprint(merged_array) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\nstring = 'mississippi'\nc = Counter(string)\nfor char, count in c.most_common():\n    print(f\"{char}: {count}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(s):\n    for i in range(len(s)):\n        for j in range(len(s)-i+1):\n            substring = s[i:j]\n            if substring == substring[::-1]:\n                return True\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_min(matrix): \n    result = float('inf') \n    for row in matrix: \n        result = min(result, min(row))\n    return result \n\nmatrix = [[3, 4, 5], [2, 7, 8], [12, 1, 9]]\nprint(find_min(matrix)) # Output: 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def searchSubstring(str, substr):\n  for i in range(len(str)):\n    if str[i:i+len(substr)] == substr:\n      return i\n\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Program to round off a number \nnum = 89.15\n\nrounded_num = round(num)\nprint(\"The rounded number is: \", rounded_num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_list(nums):\n    if not nums: \n        return 0\n    return nums[0] + sum_list(nums[1:])\n\nsum_list([1,2,3,4,5]) # 15 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n  # Base Case\n  if n == 0:\n    return 1\n  # Recursive Case\n  else:\n    return n * factorial(n-1)\n\n#Testing\nnum = int(input(\"Enter a number to calculate it's factorial: \"))\n\nprint(f\"The factorial of {num} is { factorial(num)}) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: name = input(\"Please enter your name: \")\n\nprint(\"Hello \" + name + \"!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Import libraries \nimport requests \nfrom bs4 import BeautifulSoup \n\n#Make a request to the url \nurl = 'http://www.example.com'\n\nr = requests.get(url)\nsoup = BeautifulSoup(r.content, 'html.parser') \n\n#Extract data \ndata = [] \n\nfor x in soup.find_all('div', class_=\"data-cell\"): \n data.append(x.text.strip()) \n\n#Print the data \nprint(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_two(list):\n    #sort the list in ascending order\n    list.sort()\n    #return the last two elements\n    return list[-2:]\n\n#example\nnumber_list = [2, 4, 5, 9, 10, 11]\nresult = max_two(number_list)\n\nprint(result)\n# Output: [10, 11] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num1 = int(input(\"Enter the first number: \"))\nnum2 = int(input(\"Enter the second number: \"))\n\nsum = num1 + num2\n\nprint(\"The sum of the two numbers is:\", sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter as tk\n\nclass CalculatorApp:\n def __init__(self, master):\n self.master = master\n master.title('Calculator')\n\n self.total = 0\n self.entered_number = 0\n\n self.total_label_text = tk.StringVar()\n self.total_label_text.set(self.total)\n self.total_label = tk.Label(master, textvariable=self.total_label_text)\n \n self.label = tk.Label(master, text=\"Total:\")\n\n vcmd = master.register(self.validate)\n self.entry = tk.Entry(master, validate=\"key\", validatecommand=(vcmd, '%P'))\n\n self.add_button = tk.Button(master, text=\"+\", command=lambda: self.update(\"add\"))\n self.subtract_button = tk.Button(master, text=\"-\", command=lambda: self.update(\"subtract\"))\n self.reset_button = tk.Button(master, text=\"Reset\", command=lambda: self.update(\"reset\"))\n\n self.label.grid(row=0, column=0, sticky=tk.W)\n self.total_label.grid(row=0, column=1, columnspan=2, sticky=tk.E)\n \n self.entry.grid(row=1, column=0, columnspan=3, sticky=tk.W+tk.E)\n self.add_button.grid(row=2, column=0)\n self.subtract_button.grid(row=2, column=1)\n self.reset_button.grid(row=2, column=2, sticky=tk.W+tk.E)\n\n def validate(self, new_text):\n if not new_text:\n self.entered_number = 0\n return True\n\n try:\n self.entered_number = int(new_text)\n return True\n except ValueError:\n return False\n\n def update(self, method):\n if method == \"add\":\n self.total += self.entered_number\n elif method == \"subtract\":\n self.total -= self.entered_number\n else:\n self.total = 0\n\n self.total_label_text.set(self.total)\n self.entry.delete(0, tk.END)\n\nroot = tk.Tk()\nmy_gui = CalculatorApp(root)\nroot.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_common_elements(list1, list2):\n    common_elements = []\n    for element in list1:\n        if element in list2:\n            common_elements.append(element)\n    \n    return common_elements\n\nlist1 = [1, 2, 3, 4]\nlist2 = [2, 3, 4, 5]\n\nresult = find_common_elements(list1, list2)\nprint(result) # [2, 3, 4] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printDict(dictionary): \n    for key in dictionary: \n        print(\"{}: {}\".format(key, dictionary[key])) \n\ndict = {\n    \"Alice\": 23,\n    \"Bob\": 30,\n    \"John\": 27\n}\nprintDict(dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Copyright 2016-2021 Peppy Player peppy.player@gmail.com\n# \n# This file is part of Peppy Player.\n# \n# Peppy Player is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n# \n# Peppy Player is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n# \n# You should have received a copy of the GNU General Public License\n# along with Peppy Player. If not, see <http://www.gnu.org/licenses/>.\n\nimport threading\nimport time\nimport urllib\n\nfrom player.client.baseplayer import BasePlayer\nfrom vlc import Meta\nfrom vlc import EventType\nfrom queue import Queue\nfrom util.fileutil import FILE_PLAYLIST, FILE_AUDIO\n\nclass Vlcclient(BasePlayer):\n    \"\"\" This class extends base player and provides communication with VLC player \n    using Python binding for 'libvlc' library \"\"\"\n        \n    def __init__(self):\n        \"\"\" Initializer. Starts separate threads for handling VLC events \"\"\"\n        \n        self.RADIO_MODE = \"radio\"\n        BasePlayer.__init__(self)\n        self.mode = self.RADIO_MODE\n        self.instance = None\n        self.player = None\n        self.media = None\n        self.current_track = \"\"\n        self.seek_time = \"0\"\n        self.cd_track_id = None\n        self.cd_drive_name = None\n        self.END_REACHED = \"end reached\"\n        self.TRACK_CHANGED = \"track changed\"\n        self.PAUSED = \"paused\"\n        self.player_queue = Queue()\n        self.threads_running = False\n        self.changing_volume = False\n\n    def start_client(self):\n        \"\"\" Start threads. \"\"\"\n        \n        self.threads_running = True\n        thread_1 = threading.Thread(target = self.radio_stream_event_listener)\n        thread_1.start()\n        thread_2 = threading.Thread(target = self.handle_event_queue)\n        thread_2.start()\n\n    def stop_client(self):\n        \"\"\" Stop threads \"\"\"\n\n        with self.lock:\n            self.threads_running = False\n\n    def set_proxy(self, proxy_process, proxy=None):\n        \"\"\" Create new VLC player \"\"\"\n        \n        self.instance = proxy_process\n        self.proxy = proxy\n        self.player = self.instance.media_player_new()\n        player_mgr = self.player.event_manager()\n        player_mgr.event_attach(EventType.MediaPlayerEndReached, self.player_callback, [self.END_REACHED])\n        player_mgr.event_attach(EventType.MediaPlayerPlaying, self.player_callback, [self.TRACK_CHANGED])\n    \n    def player_callback(self, event, data):\n        \"\"\" Player callback method \n        \n        :param event: event to handle\n        :param data: event data\n        \"\"\"\n        if data:\n            self.player_queue.put(data[0])\n    \n    def radio_stream_event_listener(self):\n        \"\"\" Starts the loop for listening VLC events for radio track change \"\"\"\n\n        while self.threads_running:\n            with self.lock:\n                if self.media and self.mode == self.RADIO_MODE:\n                    t = self.media.get_meta(Meta.NowPlaying)\n                    if t and t != self.current_track:\n                        self.current_track = t\n                        if self.enabled:\n                            self.notify_player_listeners({\"current_title\": t})\n            time.sleep(1)\n\n    def handle_event_queue(self):\n        \"\"\" Handling player event queue \"\"\"\n        \n        if not self.enabled:\n            return\n\n        while self.threads_running:\n            d = self.player_queue.get() # blocking line\n            if d  == self.END_REACHED:\n                self.notify_end_of_track_listeners()\n                self.player_queue.task_done()\n            elif d  == self.TRACK_CHANGED:\n                self.track_changed()\n                self.player_queue.task_done()\n                \n    def track_changed(self):\n        \"\"\" Handle track change event \"\"\"\n\n        if not self.enabled:\n            return\n        \n        if self.mode == self.RADIO_MODE: \n            return\n        \n        current = {\"source\": \"player\"}\n        current[\"state\"] = \"playing\"\n        t = self.media.get_meta(Meta.Title)\n        if t == \".\":\n            return\n        if self.cd_track_id and t.startswith(\"cdda:\"):\n            current[\"cd_track_id\"] = self.cd_track_id\n            if self.cd_tracks:\n                t = self.cd_tracks[int(self.cd_track_id) - 1].name\n            else:\n                t = self.cd_drive_name + self.cd_track_title + \" \" + self.cd_track_id\n                \n        m = self.media.get_mrl()\n        m = m[m.rfind(\"/\") + 1:]\n        m = urllib.parse.unquote(m)\n        current[\"file_name\"] = m\n        current[\"current_title\"] = t\n        current[\"Time\"] = str(self.player.get_length()/1000)\n        \n        if not self.seek_time:\n            self.seek_time = \"0\"\n        current[\"seek_time\"] = self.seek_time\n        self.notify_player_listeners(current)\n\n    def set_player_volume_control(self, flag):\n        \"\"\" Player Volume Control type setter\n\n        :param volume: True - player volume cotrol type, False - amixer or hardware volume control type\n        \"\"\"\n        BasePlayer.set_player_volume_control(self, flag)\n        if not self.player_volume_control:\n            self.set_volume(100)\n\n    def play(self, state):\n        \"\"\" Start playing specified track/station. First it cleans the playlist \n        then adds new track/station to the list and then starts playback\n        syntax for CD:\n        self.media = self.instance.media_new(\"cdda:///E:/\", (\":cdda-track=7\"))\n        \n        :param state: button state which contains the track/station info\n        \"\"\"\n        url = None\n        self.enabled = True\n\n        if state == None:\n            if self.state != None:\n                url = getattr(self.state, \"url\", None)\n            else:\n                url = None\n        else:\n            url = getattr(state, \"url\", None)\n            self.state = state    \n\n        if url == None: \n            return      \n\n        url = url.replace(\"\\\\\", \"/\").replace(\"\\\"\", \"\")\n        track_time = getattr(self.state, \"track_time\", None)\n        if track_time == None:\n            track_time = \"0\"\n        else:\n            track_time = str(track_time)\n            if \":\" in track_time:\n                track_time = track_time.replace(\":\", \".\")\n        self.seek_time = track_time\n            \n        s = getattr(self.state, \"playback_mode\", None)\n        \n        if s and s == FILE_PLAYLIST:\n            self.stop()            \n            self.mode = FILE_PLAYLIST\n            self.enabled = True\n        elif s and s == FILE_AUDIO:\n            self.mode = FILE_AUDIO\n        else:\n            self.mode = self.RADIO_MODE\n        \n        if url.startswith(\"http\") and self.mode != self.RADIO_MODE:\n            url = self.encode_url(url)\n        \n        with self.lock:\n            file_name = getattr(self.state, \"file_name\", None)\n            if file_name and file_name.startswith(\"cdda://\"):\n                parts = file_name.split()\n                self.cd_track_id = parts[1].split(\"=\")[1]                \n                self.cd_drive_name = parts[0][len(\"cdda:///\"):]\n                self.media = self.instance.media_new(parts[0], parts[1])\n            else:            \n                self.media = self.instance.media_new(url)\n            self.player.set_media(self.media)            \n            \n            self.player.play()\n            try:\n                self.player.set_time(int(float(self.seek_time)) * 1000)\n            except:\n                pass\n            \n            if self.player_volume_control and getattr(self.state, \"volume\", None) != None:\n                self.set_volume(int(self.state.volume))\n            \n    def stop(self, state=None):\n        \"\"\" Stop playback \"\"\"\n        \n        with self.lock:\n            self.enabled = False\n            self.player.stop()\n    \n    def seek(self, time):\n        \"\"\" Jump to the specified position in the track\n        \n        :param time: time position in track\n        \"\"\"\n        \n        if \":\" in time:\n            self.seek_time = self.get_seconds_from_string(time)\n        else:\n            self.seek_time = time\n        \n        with self.lock:            \n            msec = int(float(self.seek_time) * 1000)\n            t = threading.Thread(target=self.seek_method, args=[msec])\n            t.start()\n\n    def seek_method(self, msec):\n        \"\"\" Seek track thread method\n\n        :param msec: milliseconds for new position\n        \"\"\"\n        self.player.set_time(msec)\n    \n    def play_pause(self, pause_flag=None):\n        \"\"\" Play/Pause playback \n        \n        :param pause_flag: play/pause flag\n        \"\"\" \n        with self.lock:\n            self.seek_time = self.get_current_track_time()\n            self.player.pause()\n    \n    def set_volume(self, level):\n        \"\"\" Set volume.\n        \n        :param level: new volume level\n        \"\"\"\n        self.player.audio_set_volume(int(level))\n        \n        if getattr(self, \"state\", None) != None:\n            if self.state.volume == level:\n                return\n            self.state.volume = level\n\n        v = self.get_volume()\n        if v != int(level): # usually initial volume setting\n            if hasattr(self, \"volume_thread\"):\n                self.volume_thread.join()    \n            self.volume_thread = threading.Thread(target=self.set_volume_level, args=[level])\n            self.volume_thread.start()\n    \n    def set_volume_level(self, level):\n        \"\"\" Set volume level in separate thread\n        \n        :param level: volume level\n        \"\"\"\n        n = 0\n        max_n = 20\n        vol = -2\n        \n        while n < max_n and level != vol:\n            self.player.audio_set_volume(int(level))\n            time.sleep(0.1)\n            vol = self.get_volume()\n            n += 1\n    \n    def get_volume(self):\n        \"\"\"  Return current volume level \n        \n        :return: volume level or -1 if not available\n        \"\"\"\n        with self.lock:\n            return self.player.audio_get_volume()\n    \n    def mute(self):\n        \"\"\" Mute \"\"\"\n        \n        with self.lock:\n            self.player.audio_toggle_mute()\n        \n    def current(self):\n        \"\"\" Return the current song \"\"\"\n        pass\n\n    def shutdown(self):\n        \"\"\" Shutdown the player \"\"\"\n        with self.lock:\n            self.player.stop()\n        \n    def get_current_track_time(self):\n        \"\"\"  Return current track time\n        \n        :return: current track time\n        \"\"\"\n        t = self.player.get_time()/1000\n        return str(t)\n    \n    def get_current_playlist(self):\n        \"\"\"  Return current playlist\n        \n        :return: current playlist\n        \"\"\"\n        return self.playlist\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_unique(num_list):\n    return len(num_list) == len(set(num_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_divisible_numbers(start, end):\n for i in range(start, end + 1):\n  if i % 5 == 0:\n   print(i)\n\nfind_divisible_numbers(0, 15) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(s1, s2):\n    # remove all whitespaces and make it lower case\n    s1 = ''.join(s1.split()).lower()\n    s2 = ''.join(s2.split()).lower()\n\n    # edge case check\n    if len(s1) != len(s2):\n        return False\n\n    # count occurrences of each character\n    count = {}\n    for char in s1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n            \n    for char in s2:\n        if char in count:\n            count[char] -= 1\n        else:\n            return False\n    \n    # check that count of each character is zero\n    for k in count:\n        if count[k] != 0:\n            return False\n\n    return True\n\n# sample call to function\nwords = [\"silent\", \"listen\"]\nprint(is_anagram(words[0], words[1])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: MORSE_CODE_DICT = { 'A':'.-', 'B':'-...',\n                   'C':'-.-.', 'D':'-..', 'E':'.',\n                   'F':'..-.', 'G':'--.', 'H':'....',\n                   'I':'..', 'J':'.---', 'K':'-.-',\n                   'L':'.-..', 'M':'--', 'N':'-.',\n                   'O':'---', 'P':'.--.', 'Q':'--.-',\n                   'R':'.-.', 'S':'...', 'T':'-',\n                   'U':'..-', 'V':'...-', 'W':'.--',\n                   'X':'-..-', 'Y':'-.--', 'Z':'--..',\n                   '1':'.----', '2':'..---', '3':'...--',\n                   '4':'....-', '5':'.....', '6':'-....',\n                   '7':'--...', '8':'---..', '9':'----.',\n                   '0':'-----', ', ':'--..--', '.':'.-.-.-',\n                   '?':'..--..', '/':'-..-.', '-':'-....-',\n                   '(':'-.--.', ')':'-.--.-'}\n\ndef text_to_morse(text):\n    morse_code = \"\"\n    for ch in text:\n        if ch.upper() in MORSE_CODE_DICT:\n            morse_code += MORSE_CODE_DICT[ch.upper()] + \" \"\n    return morse_code\n\ntext = \"hello\"\nmorse_code = text_to_morse(text)\n\nprint(morse_code) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combine_sorted_arrays(arr1, arr2):\n    arr3 = arr1 + arr2\n    arr3.sort()\n    return arr3\n\narr1 = [1, 2, 5]\narr2 = [2, 4, 6]\n\narr3 = combine_sorted_arrays(arr1, arr2)\nprint(arr3) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import cv2\nimport numpy as np\nimport tensorflow as tf\n\n# Load the COCO class labels .txt file\nlabels_file_path = tf.keras.utils.get_file('label.txt', 'https://raw.githubusercontent.com/qw3081020/models/master/label.txt')\nwith open(labels_file_path, 'r') as f:\n    labels = [line.strip() for line in f.readlines()]\n\n# Initialize the recognition model\nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.ZeroPadding2D((1, 1), input_shape=(300, 300, 3)))\nmodel.add(tf.keras.layers.Convolution2D(64, (3, 3), activation='relu'))\nmodel.add(tf.keras.layers.ZeroPadding2D((1, 1)))\nmodel.add(tf.keras.layers.Convolution2D(64, (3, 3), activation='relu'))\nmodel.add(tf.keras.layers.MaxPooling2D((2, 2), strides=(2, 2)))\n\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(256, activation='relu'))\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))\nmodel.add(tf.keras.layers.Dense(len(labels), activation='softmax'))\n\n# Load model weights\nmodel.load_weights('model.h5')\n\n# Load the input image\nimage = cv2.imread('input_image.jpg')\nimage = cv2.resize(image, (300, 300))\n\n# Use the model to predict the labels\nlabels_predicted = model.predict(np.expand_dims(image, axis=0))[0]\n\n# Sort the labels by confidence\nlabels_sorted_by_confidence = [\n    label for label, confidence in \n    sorted(zip(labels, labels_predicted), key=lambda x: x[1], reverse=True)\n]\n\n# Print the predicted labels\nprint(labels_sorted_by_confidence) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import flask\nfrom flask_restful import Resource, Api\nfrom flask_basicauth import BasicAuth\n\napp = flask.Flask(__name__)\napi = Api(app)\n\n# Set BasicAuth credentials\napp.config['BASIC_AUTH_USERNAME'] = 'user'\napp.config['BASIC_AUTH_PASSWORD'] = 'pass'\n\n# Initialize BasicAuth\nbasic_auth = BasicAuth(app)\n\n# Create a protected endpoint\n@app.route('/protected')\n@basic_auth.required\ndef protected():\n return 'You have access!'\n\n# Create an unprotected endpoint\n@app.route('/unprotected')\ndef unprotected():\n return 'This endpoint is unprotected!'\n\nif __name__ == '__main__':\n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\nchars = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation\n\ndef generate_password(size=8, chars=chars):\n return ''.join(random.choice(chars) for _ in range(size))\n\nprint(generate_password()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def get_area(self):\n        return 3.14 * (self.radius ** 2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pounds_to_kilos(pounds):\n  return pounds * 0.453592\n\nwhile True:\n  pounds = float(input(\"Enter a weight in pounds: \"))\n  print(f\"{pounds} lbs = {pounds_to_kilos(pounds)} kgs\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize(arr):\n    min = arr[0] \n    max = arr[0] \n    for i in range(1, len(arr)): \n        if arr[i] < min: \n            min = arr[i] \n  \n        if arr[i] > max: \n            max = arr[i] \n  \n    print(\"Minimum element is:\", min) \n    print(\"Maximum element is:\", max)\n\n# Main   \narr = [45, 2, 84, 33, 8, 1, 2]\noptimize(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def num_ways(start, end): \n    # Create an array to store results of subproblems \n    dp = [0 for i in range(end + 1)] \n  \n    # Count of ways for 0'th step is 1 \n    dp[0] = 1\n  \n    for i in range(start, end + 1): \n        if i > start: \n            dp[i] += dp[i - 1] \n        if i > start + 1: \n            dp[i] += dp[i - 2] \n  \n    return dp[end] \n\nprint(num_ways(start, end)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Calc:\n    def add(self, x, y):\n        return  x + y \n\n    def subtract(self, x, y): \n        return  x - y\n\n    def multiply(self, x, y):\n        return x * y\n\ncalc = Calc()\nprint(calc.add(2, 3)) \nprint(calc.subtract(2, 3)) \nprint(calc.multiply(2, 3)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import required libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\n\n#load the dataset\ndf = pd.read_csv('housing_data.csv')\n\n#separate features and targets\nX = df.iloc[:, 0:-1].values\ny = df.iloc[:, -1].values\n\n#scale the data\nscaler = MinMaxScaler()\nX_scaled = scaler.fit_transform(X)\n\n#split the data in train and test\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2)\n\n#build the model\nmodel = tf.keras.models.Sequential([\n tf.keras.layers.Dense(32, activation='relu', input_shape=[X_train.shape[1]]),\n tf.keras.layers.Dense(1)\n])\n\nmodel.compile(loss='mean_squared_error', optimizer='adam', metrics=['mae'])\n\n#train the model\nmodel.fit(X_train, y_train, epochs=50, batch_size=10)\n\n#test the model\nmodel.evaluate(X_test, y_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: array = [2, 7, 5, 4]\n\ntotal = 0\nfor num in array:\n total += num\naverage = total/len(array)\n\nprint(\"The average of the array is:\", average) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_equilibrium_price(data):\n    \"\"\"\n    Args:\n        data (dict): A dictionary with the prices of the commodity\n        in different stores\n    Returns:\n        int: The equilibrium price of the commodity\n    \"\"\"\n\n    num_stores = len(data)\n    total_price = 0\n    for store_price in data.values():\n        total_price += store_price\n    equilibrium_price = total_price / num_stores\n    return equilibrium_price but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n fact = 1\n for i in range(1, n+1):\n   fact *= i\n  return fact but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport sqlite3\n\n# Get the data from the URL\nresponse = requests.get(\"https://example.com/data.json\")\npeople_data = response.json()\n\nconn = sqlite3.connect('people.db')\ncursor = conn.cursor()\n\n# Create the people table\ncursor.execute('''\nCREATE TABLE people (\n name text,\n email text,\n phone text,\n address text\n)\n''')\n\n# Insert the data into the database\nfor person in people_data:\n name = person['name']\n email = person['email']\n phone = person['phone']\n address = person['address']\n cursor.execute('''\n INSERT INTO people (name, email, phone, address)\n VALUES (?, ?, ?, ?)\n ''', (name, email, phone, address))\n\nconn.commit()\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def query_table(table):\n    query = \"\"\"SELECT * \n            FROM %s \n            ORDER BY col1, col2 DESC\"\"\" % table\n    return query but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: model = Sequential()\nmodel.add(Dense(8, activation='relu', input_shape=[6]))\nmodel.add(Dense(1, activation='linear'))\nmodel.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])\nmodel.fit(x_train, y_train, epochs=500, verbose=False) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def AI_sort(list):\n  sorted_list = sorted(list) \n  return sorted_list\n\nlist = [4,3,7,8,2,1,6]\nprint(\"Sorted list is :\", AI_sort(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Load libraries\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n# Create a corpus\ndoc1 = \"Python is a great programming language\"\ndoc2 = \"Python and web development go hand in hand\"\ndoc3 = \"Data science is also powered by Python\"\ncorpus = [doc1, doc2, doc3]\n\n# Create a CountVectorizer object\nvectorizer = CountVectorizer()\n\n# Generate the matrix\nX = vectorizer.fit_transform(corpus)\n\n# Generate the cosine similarity matrix\nsimilarity_matrix = cosine_similarity(X)\n\n# Function to get a query\ndef get_query(query):\n    query_vector = vectorizer.transform([query])\n    results = cosine_similarity(query_vector, X)\n    return results\n\n# Function to get the results\ndef get_results(results, corpus):\n    list_results = []\n    for i, score in enumerate(results):\n        if score[0] > 0.0:\n            list_results.append([score[0], corpus[i]])\n\n    # Sort in descending order\n    sorted_results = sorted(list_results, reverse = True)\n    return sorted_results but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_unique_string(s):\n    d = {} \n    for i in s:\n        if i in d:\n            return False\n        d[i] =1\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def prime_numbers(num):\n    primes = []\n    for n in range(2, num + 1):\n        is_prime = True\n        for i in range(2, n):\n            if n % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(n)\n    return primes\n\nprint(prime_numbers(10)) # Outputs: [2, 3, 5, 7] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\n\n# load the MNIST dataset\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n\n# reshape and rescale the data\nx_train = x_train.reshape(x_train.shape[0], 28, 28, 1).astype('float32')\nx_test = x_test.reshape(x_test.shape[0], 28, 28, 1).astype('float32')\nx_train = x_train / 255.0\nx_test = x_test / 255.\n\n# build the model\nmodel = tf.keras.models.Sequential([\ntf.keras.layers.Conv2D(32, (3, 3), input_shape=(28, 28 ,1), activation='relu'),\ntf.keras.layers.MaxPooling2D(2, 2),\ntf.keras.layers.Dropout(0.2),\ntf.keras.layers.Flatten(),\ntf.keras.layers.Dense(128, activation='relu'),\ntf.keras.layers.Dense(10, activation='softmax')])\n\n# compile and train the model\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=10)\n\n# evaluate the model\ntest_loss, test_accuracy = model.evaluate(x_test, y_test, verbose=1)\nprint('Test Accuracy:', test_accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\ncountry_data = [['United States', 212000], ['Russia', 180000], ['Italy', 105000], ['Spain', 90000], ['Germany', 70000]]\ncountry = [data[0] for data in country_data]\ncases = [data[1] for data in country_data]\n\nplt.barh(country, cases)\nplt.title(\"Total number of Coronavirus cases by country\")\nplt.xlabel('Number of cases')\nplt.ylabel('Country')\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef generate_random_matrix(rows, columns):\n    matrix = np.random.randint(low = 0, high = 100, size = (rows,columns))\n    return matrix but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_double_array(size):\n\tarr = [1]\n\tfor i in range(1, size):\n\t\tarr.append(arr[i - 1] * 2)\n\treturn arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\n# generate a random password\ndef randomPassword():\n password = ''\n\n all_characters = string.ascii_letters + string.digits + string.punctuation\n # loop over the length\n for _ in range(8):\n # select a random character\n password += random.choice(all_characters)\n\n return password\n\n# print the generated password\nprint(randomPassword()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def frequency(sentence):\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    \n    most_common_word, frequency = max(frequency.items(), key=lambda x: x[1])\n    return most_common_word, frequency but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Calculate BMI\nheight = 1.75 # meters\nweight = 80 # kilograms\nbmi = weight / (height * height)\nprint(\"BMI: \", bmi) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import paramiko\n\nhostname = \"[REMOTEHOSTNAME]\"\nusername = \"[USERNAME]\"\npassword = \"[PASSWORD]\"\n\nssh_client = paramiko.SSHClient()\nssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())\nssh_client.connect(hostname=hostname, username=username, password=password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nresp = requests.get(url)\n\nif resp.status_code == 200:\n print('Success!')\n print(resp.text)\n else:\n print('An error occurred.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_vowels(s):\n    count = 0\n    for char in s:\n        if char in \"aeiouAEIOU\":\n            count += 1\n    return count\n\ns = \"Hello\"\nresult = count_vowels(s)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import base64\n\ndef encodeInBase64(msg):\n    msg_bytes = msg.encode('ascii')\n    base64_bytes = base64.b64encode(msg_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    return base64_message but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_average(lst):\nsum = 0\nfor num in lst:\n sum+=num\navg = sum/len(lst)\nreturn avg\n\nlist = [2, 3, 6, 8, 9]\naverage = calculate_average(list)\nprint(\"Average of list:\", average) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_strings(string):\n    strings = string.split(',')\n    filtered = []\n    for s in strings:\n        if len(s) > 3:\n            filtered.append(s)\n    return filtered\n\nfiltered_strings = filter_strings(\"Code,Generation,Task,Instructions\")\nprint(filtered_strings) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(text):\n # preprocess the text to remove whitespace, punctuation, etc\n text = ''.join(ch for ch in text.lower() if ch.isalpha())\n # reverse the text\n rev_text = text[::-1]\n # compare the reversed text to the original text\n return rev_text == text\n\ninput_text = \"Madam, I'm Adam\"\n\nif is_palindrome(input_text):\n print(\"The text '{}' is a palindrome\".format(input_text))\nelse:\n print(\"The text '{}' is not a palindrome\".format(input_text)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def armstrong_number(num):\n  digits = [int(x) for x in str(num)]\n  n_digits = len(digits)\n  sum_of_cubes = 0\n  for digit in digits:\n    sum_of_cubes += digit ** n_digits\n  if sum_of_cubes == num:\n    return True\n  else:\n    return False\n\narmstrong_number(370) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_words():\n    sentence = input(\"Please enter a sentence here: \")\n    num_words = len(sentence.split())\n    print(\"The sentence has\", num_words, \"words.\")\n\ncount_words() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Create a 3x3x3 cube\ncube = [[[0] * 3 for _ in range(3)] for _ in range(3)]\n\n# Fill the cube with random colors\ncolors = [1, 2, 3, 4, 5, 6]\nfor plane in cube:\n for row in plane:\n for i in range(3):\n row[i] = random.choice(colors)\n\n# Print out the cube configuation\nfor plane in cube:\n print(plane) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/opt/local/bin/python\nimport string\nimport os\nimport re\n\n\ndef header(n) :\n    return \"//\\n\\\n// BAGEL - Brilliantly Advanced General Electronic Structure Library\\n\\\n// Filename: RelCASPT2\" + n + \".cc\\n\\\n// Copyright (C) 2014 Toru Shiozaki\\n\\\n//\\n\\\n// Author: Toru Shiozaki <shiozaki@northwestern.edu>\\n\\\n// Maintainer: Shiozaki group\\n\\\n//\\n\\\n// This file is part of the BAGEL package.\\n\\\n//\\n\\\n// This program is free software: you can redistribute it and/or modify\\n\\\n// it under the terms of the GNU General Public License as published by\\n\\\n// the Free Software Foundation, either version 3 of the License, or\\n\\\n// (at your option) any later version.\\n\\\n//\\n\\\n// This program is distributed in the hope that it will be useful,\\n\\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n\\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n\\\n// GNU General Public License for more details.\\n\\\n//\\n\\\n// You should have received a copy of the GNU General Public License\\n\\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\\n//\\n\\\n\\n\\\n#include <bagel_config.h>\\n\\\n#ifdef COMPILE_SMITH\\n\\\n\\n\\\n\\n\\\n#include <src/smith/relcaspt2/RelCASPT2.h>\\n\"\n\ndef insert():\n    return \"#include <src/smith/relcaspt2/RelCASPT2_tasks.h>\\n\"\n\ndef header2():\n    return \"\\n\\\nusing namespace std;\\n\\\nusing namespace bagel;\\n\\\nusing namespace bagel::SMITH;\\n\\\n\\n\\\n\"\n\nfooter = \"#endif\\n\"\n\nf = open('RelCASPT2.cc', 'r')\nlines = f.read().split(\"\\n\")[34:]\n\ntasks = []\ntmp = \"\"\n\nfor line in lines:\n    if (len(line) >= 17 and (line[0:17] == \"shared_ptr<Queue>\" or line[0:17] == \"RelCASPT2::RelCAS\")):\n        if (tmp != \"\"):\n            tasks.append(tmp)\n            tmp = \"\"\n    tmp += line + \"\\n\"\n    if (line == \"}\"):\n        tmp += \"\\n\"\ntasks.append(tmp)\n\np = re.compile('make_[a-z0-9]+q')\nfor task in tasks[0:-1]:\n    tag = p.search(task).group()[5:]\n    fout = open(\"RelCASPT2_\" + tag + \".cc\", \"w\")\n    out = header(\"_\" + tag + \"q\") + insert() + header2() + task + footer\n    fout.write(out)\n    fout.close()\n\nos.remove(\"RelCASPT2.cc\")\n\nfout = open(\"RelCASPT2.cc\", \"w\")\nout = header(\"\") + header2() + tasks[len(tasks)-1] + footer\nfout.write(out)\nfout.close()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def double(x):\n  return 2 * x but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def selectionSort(nums):\n  for i in range(len(nums) - 1):\n    # Find the minimum element in the unsorted array\n    # Assume it is the first element\n    min_index = i\n    \n    for j in range(i+1, len(nums)):\n      if nums[j] < nums[min_index]:\n        min_index = j\n        \n    # Swap the minimum element with the first element    \n    if min_index != i:\n      nums[i], nums[min_index] = nums[min_index], nums[i] \n\n  return nums\n  \nprint(selectionSort([8, 5, 2, 9, 5, 6, 3])) # [2, 3, 5, 5, 6, 8, 9] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nanswer  = random.randint(1, 10)\n\nguess = int(input('Guess a number between 1 and 10: '))\n\nif guess == answer:\n print('You guessed correct!')\nelif guess < answer:\n print('Your guess is too low')\nelif guess > answer:\n print('Your guess is too high') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n    def __init__(self, data):\n        self.data= data\n        self.next = None\n        \nclass Stack:\n    def __init__(self):\n        self.head = None\n        self.tail = self.head\n        self.items = 0\n\n    def push(self, data):\n        new_node = Node(data)\n      \n        if self.head is None:\n            self.head = new_node\n        else:\n            new_node.next = self.head\n            self.head = new_node\n        self.tail = self.head\n        self.items +=1\n\n    def pop(self):\n        if self.head is None:\n            return None\n\n        data = self.head.data\n        self.head = self.head.next\n        self.items -= 1\n        return data but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def highest_product(arr):\n largest = max(arr[0], arr[1])\n smallest = min(arr[0], arr[1])\n largest_product = arr[0] * arr[1]\n\n for i in range(2, len(arr)):\n if arr[i] > largest:\n largest = arr[i]\n elif arr[i] < smallest:\n smallest = arr[i]\n\n largest_product = max(largest_product, largest*smallest)\n\n return largest_product\n\nprint(highest_product([4, -2, 10, 8, 9])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras import layers\n\n# define the model\nmodel = tf.keras.Sequential()\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\n\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(10, activation='softmax'))\n\n# compile the model\nmodel.compile(optimizer='adam',\n          loss='sparse_categorical_crossentropy',\n          metrics=['accuracy']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_all_occurrences(string, word, replace_word):\n    \"\"\"\n    This function takes a string and finds all occurrences of the given 'word' and replaces it with the 'replace_word'.\n    \"\"\"\n    new_str = string.replace(word, replace_word)\n    return new_str\n  \n# Driver Code \ntext = 'Course: Machine Learning, Platform: Coursera.'\nword = 'Course'\nreplace_word = 'Program'\n  \nprint(replace_all_occurrences(text, word, replace_word)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\nimport argparse\nimport numpy as np\nimport sys, os\nfrom os import listdir\nimport plantcv as pcv\nimport datetime\n\n### Parse command-line arguments\ndef options():\n  parser = argparse.ArgumentParser(description=\"Get images from an SQLite database and some input information\")\n  parser.add_argument(\"-d\", \"--directory\", help=\"path to directory of images to average.\")\n  parser.add_argument(\"-o\", \"--outdir\", help=\"Output directory.\", required=False)\n  args = parser.parse_args()\n  return args\n\n\n### Functions\n\ndef average_all_img(directory,outdir):\n    allfiles=os.listdir(directory)\n    \n    path=str(directory)\n    \n    allpaths=[]\n    \n    for files in allfiles:\n        p=path+str(files)\n        allpaths.append(p)\n    \n    img, path, filename = pcv.readimage(allpaths[0])\n    n=len(allpaths)\n\n    \n    if len(np.shape(img))==3:\n        ix,iy,iz=np.shape(img)\n        arr=np.zeros((ix,iy,iz),np.float)\n    else:\n        ix,iy=np.shape(img)\n        arr=np.zeros((ix,iy,iz),np.float)\n\n    # Build up average pixel intensities, casting each image as an array of floats\n    for i,paths in enumerate(allpaths):\n        img,path,filename=pcv.readimage(allpaths[i])\n        imarr=np.array(img,dtype=np.float)\n        arr=arr+imarr/n\n\n    #Round values in array and cast as 8-bit integer\n    arr=np.array(np.round(arr),dtype=np.uint8)\n\n    pcv.print_image(arr, (str(outdir)+\"average_\"+str(allfiles[0])))\n\n\n\n### Main pipeline\n\ndef main():\n    \n  # Get options\n  args = options()\n  \n  average_all_img(args.directory, args.outdir)\n\nif __name__ == '__main__':\n  main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_consecutive_sum(array):\n    max_val = 0\n    cur_man = 0\n    for x in array:\n        cur_man = max(cur_man + x, 0)\n        max_val = max(cur_man, max_val)\n    return max_val but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPalindrome(txt):\n    i = 0\n    j = len(txt) - 1\n    \n    while i < j:\n        if txt[i] != txt[j]:\n            return False\n        i += 1\n        j -= 1\n    \n    return True\n\nprint(isPalindrome(txt)) // True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_divisible_by_3_and_5(n):\n s = 0\n for i in range(n + 1):\n if i % 3 == 0 or i % 5 == 0:\n s += i\n return s\n\nprint(sum_divisible_by_3_and_5(10)) # 33 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nrandom_numbers = [random.randint(1, 10) for _ in range(20)]\nmax_number = max(random_numbers)\n\nprint(random_numbers)\nprint(f'The largest number is {max_number}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Summator:\n    def __init__(self, num1, num2):\n        self.num1 = num1\n        self.num2 = num2\n\n    def get_sum(self):\n        return self.num1 + self.num2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n  def __init__(self, name, age, gender, college):\n    self.name = name\n    self.age = age\n    self.gender = gender\n    self.college = college but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_triplet_sum(a, b, c):\n    \n    if a + b == c or b + c == a or a + c == b:\n        return True\n    else:\n        return False\n\na = int(input(\"Enter the first number: \"))\nb = int(input(\"Enter the second number: \"))\nc = int(input(\"Enter the third number: \"))\n\nif check_triplet_sum(a, b, c):\n    print(\"Numbers can form a triplet.\")\nelse:\n    print(\"Numbers cannot form a triplet.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def rotate_array(arr, k):\n n = len(arr)\n \n for i in range(k):\n  temp = arr[n-1]\n  for i in range(n-1,0,-1):\n   arr[i] = arr[i-1]\n  arr[0] = temp\n  \n return arr\n \nprint(rotate_array([1,2,3,4,5],2)) # prints [4,5,1,2,3] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def IntToBinString(number):\n    if number == 0:\n        return \"0\"\n    ret = \"\"\n    while number > 0:\n        if number % 2 == 1:\n            ret = \"1\" + ret\n        else:\n            ret = \"0\" + ret\n        number //= 2\n    return ret but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def capitalize_first_letter(text):\n  return text[0].upper() + text[1:]\n\nprint(capitalize_first_letter(\"hello world\")) # Output: Hello world but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # imports \nimport tkinter as tk\n\n# window config\nwin = tk.Tk()\nwin.title(\"list operations\")\n\n# list variable\ndata = []\n\n# functions\ndef add_item():\n    data.append(txt_input.get())\n    refresh_list()\n    \ndef delete_item():\n    data.remove(lst_data.get(tk.ACTIVE))\n    refresh_list()\n\ndef modify_item():\n    data[lst_data.curselection()[0]] = txt_input.get()\n    refresh_list()\n        \ndef refresh_list():\n    lst_data.delete(0, tk.END)\n    for item in data:\n        lst_data.insert(tk.END, item)\n\n# frame\nfrm_list = tk.Frame(win)\nlbl_input = tk.Label(frm_list, text=\"Input\")\ntxt_input = tk.Entry(frm_list, width=15)\n\nlbl_input.grid(row=0, column=0)\ntxt_input.grid(row=0, column=1)\n\n# listbox config\nlst_data = tk.Listbox(frm_list, height=5)\nlst_data.grid(row=1, column=0, columnspan=2)\n\n# button config\nbtn_add = tk.Button(frm_list, text=\"add\", command=add_item)\nbtn_delete = tk.Button(frm_list, text=\"delete\", command=delete_item)\nbtn_modify = tk.Button(frm_list, text=\"modify\", command=modify_item)\nbtn_add.grid(row=2, column=0)\nbtn_delete.grid(row=2, column=1)\nbtn_modify.grid(row=2, column=2)\n\n# frame grid\nfrm_list.grid(row=0, column=0)\n\nwin.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def create_dictionary(keys, values):\n  dictionary = dict(zip(keys, values))\n  return dictionary\n\ndictionary = create_dictionary(keys, values)\nprint(dictionary) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def word_count(sentence):\n    words = sentence.split()\n    return len(words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def total_marks(marks):\n    total = 0\n    for student in marks:\n        total += sum(student)\n    return total\n\nmarks = [[75, 75, 76, 78, 80], [90, 88, 87, 85, 83], [68, 70, 79, 82, 76], [80, 79, 66, 77, 85], [90, 85, 83, 75, 73]]\ntotal = total_marks(marks)\nprint(total) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom scipy.cluster.hierarchy import dendrogram, linkage\n\n# define the data points\ndata_points = np.array([1,2,3,4,5])\n\n# create the linkage matrix\nlinkage_matrix = linkage(data_points, 'ward')\n\n# generate the dendrogram\ndendrogram(linkage_matrix) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nrand_int = random.randint(1, 10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def character_frequency(strings):\n  result = []\n  for string in strings:\n    freq = {}\n    for char in string:\n      if char in freq:\n        freq[char] += 1\n      else:\n        freq[char] = 1\n    result.append(freq)\n  return result\n\nprint(character_frequency(['hello', 'world']))\n# Output: [{'h': 1, 'e': 1, 'l': 2, 'o': 1}, {'w': 1, 'o': 1, 'r': 1, 'l': 1, 'd': 1}] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # To create a Django project, run the following command:\n$ django-admin startproject projectname\n\n# To create an app inside the project (e.g. accounts app):\n$ python manage.py startapp accounts\n```\n# In accounts/views.py\nfrom django.shortcuts import render\nfrom django.contrib.auth import authenticate, login\nfrom .forms import RegisterForm\n\ndef register_view(request):\n    if request.method == 'POST':\n        forms = RegisterForm(request.POST)\n        if forms.is_valid():\n            user = forms.save()\n            user.refresh_from_db()  # load the profile instance created by the signal\n            user.save()\n            raw_password = forms.cleaned_data.get('password1')\n            user = authenticate(username=user.username, password=raw_password)\n            login(request, user)\n            return redirect('index')\n    else:\n        forms = RegisterForm()\n    return render(request, 'accounts/register.html', {'forms': forms})\n``` but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_list(inputList): \n    sum_list = 0\n    for num in inputList: \n        sum_list += num \n    return sum_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef findRoots(a, b, c):\n    discriminant = (b * b) - (4 * a * c)\n    if discriminant > 0:\n        root1 = (-b + math.sqrt(discriminant) / (2 * a))\n        root2 = (-b - math.sqrt(discriminant) / (2 * a))\n        return (root1, root2)\n    elif discriminant == 0:\n        root1 = root2 = -b / (2 * a)\n        return (root1, root2)\n    else:\n        return (None, None)\n\nfindRoots(4, 5, 6) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def solver(board):\n    zero_position = find_zero(board) # find the zero tile of the board\n\n    if not zero_position:  # no zero tile found\n        return False\n\n    # try each possible move\n    for move in possible_moves(board): \n        board_copy = board.copy() #copy board in order not to change it\n        board_copy = make_move(board_copy, zero_position, move)\n        if board_copy == goal:  # goal found\n            return True\n        else:\n            if (solver(board_copy)):\n                return True  # call itself again if the move brings us closer to the goal\n            \n    return False # no goal found but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_roots(a, b, c): \n  # calculate the discriminant\n  d = (b**2) - (4*a*c)\n\n  # find two solutions\n  sol1 = (-b-cmath.sqrt(d))/(2*a)\n  sol2 = (-b+cmath.sqrt(d))/(2*a)\n\n  return sol1, sol2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def predict(x):\n    if x[0] > 0:\n        return 'positive'\n    if x[1] < 0:\n        return 'negative'\n    if x[2] > 0:\n        return 'positive'\n    return 'neutral' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for item, price in food_items.items():\n print(f'{item}: ${price}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = []\n\n# remove all non-alphanumeric characters\nfor char in string:\n if char.isalnum():\n words.append(char)\n\n# count number of times each word is used\nword_count = {}\nfor word in words:\n if word in word_count:\n word_count[word] += 1\n else:\n word_count[word] = 1\n\nfor k,v in word_count.items():\n print('{} : {}'.format(k,v)) but is not the same. just give one example and only return the code."}
