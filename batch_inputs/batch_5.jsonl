{"prompt": "make some code that functions the same as the following code: def factorial(n):\n fact = 1\n for i in range(2,n+1):\n  fact = fact * i\n return fact but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Calculator:\n def __init__(self):\n   pass\n    \n def add_two_numbers(self, a, b):\n   return a + b\n\n def add(self, a, b, c):\n   return a + b + c\n\ncalculator = Calculator()\nresult = calculator.add_two_numbers(1, 2)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num = int(input(\"Enter a positive integer: \"))\n\nwhile num > 0:\n    print(num)\n    num -= 1\n\nprint(\"Done!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n  \n# printing the board  \ndef drawBoard(board): \n  \n    print(\"---------------\") \n    print(\" \"+board[1]+\" | \"+board[2]+\" | \"+board[3]+\" \") \n    print(\"___|___|___\") \n    print(\" \"+board[4]+\" | \"+board[5]+\" | \"+board[6]+\" \") \n    print(\"___|___|___\") \n    print(\" \"+board[7]+\" | \"+board[8]+\" | \"+board[9]+\" \") \n    print(\"   |   |   \") \n  \n# defining the part of the game  \ndef checkWin(board, player): \n    return ( \n        (board[1] == board[2] == board[3] == player) or\n        (board[5] == board[4] == board[6] == player) or \n        (board[7] == board[8] == board[9] == player) or \n        (board[1] == board[5] == board[9] == player) or \n        (board[3] == board[5] == board[7] == player) or \n        (board[1] == board[4] == board[7] == player) or \n        (board[2] == board[5] == board[8] == player) or \n        (board[3] == board[6] == board[9] == player))  \n       \ndef getComputerSpot(board,player): \n    openSpots = [] \n    indices = [i for i, spot in enumerate(board) if spot == '-'] \n    \n    for i in indices: \n        board[i] = player  \n          \n        if checkWin(board, player):  \n            board[i] = '-'  \n            return i  \n        board[i] = '-'  \n          \n    for i in indices: \n        openSpots.append(i) \n    if len(openSpots): \n        return random.choice(openSpots) \n    else: \n        return None \n      \n                \ndef playGame(): \n    board = ['-' for x in range(10)] \n    won = False\n    turn = -1\n    while not won: \n        if turn == -1: \n            # human turn   \n            humanSpot = int(input(\"Enter your spot: \"))\n            if board[humanSpot] == '-': \n                board[humanSpot] = 'X' \n            else: \n                print(\"the spot is already filled!\") \n                continue\n            turn *= -1\n       \n        if checkWin(board,'X'): \n            drawBoard(board) \n            print(\"You won!\") \n            won = True\n            break\n          \n        if turn == 1: \n            # computer turn  \n            computerSpot = getComputerSpot(board,'O') \n            if computerSpot == None: \n                drawBoard(board) \n                print(\"The game is drawn!\")\n                break\n            else: \n                board[computerSpot] = 'O' \n            turn *= -1\n              \n        drawBoard(board) \n          \nplayGame() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def seriesSum(n):\n    # set the initial sum to 0\n    total = 0\n\n    # loop over the range\n    for i in range(1, n+1):\n        total += 1 / i\n\n    return total\n\nprint(seriesSum(5)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n#importing the dataset \ndataset = pd.read_csv('data.csv')\n\n#splitting the dataset into features and labels \nX = dataset.iloc[:, :-1].values \ny = dataset.iloc[:, 3].values\n\n#importing DecisionTreeClassifier \nfrom sklearn.tree import DecisionTreeClassifier\n\nclassifier = DecisionTreeClassifier(criterion = 'entropy')\n\n#fitting the classifier to the dataset\nclassifier.fit(X,y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(input_string):\n    reversed_string = ''\n    for i in range(len(input_string)-1, -1, -1):\n        reversed_string += input_string[i]\n    return reversed_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_sum(numbers, target):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sieve_of_eratosthenes(n):\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5)+1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n\n    prime_numbers = []\n    for i in range(len(primes)):\n        if primes[i]:\n            prime_numbers.append(i) \n    return prime_numbers but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def invert_dictionary(d):\n inverted_d = {}\n\n for key, value in d.items():\n if value not in inverted_d:\n inverted_d[value] = []\n inverted_d[value].append(key)\n\n return inverted_d but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nImplement gradient descent algorithm in Python\n\"\"\"\nimport numpy as np\n\ndef gradient_descent(x,y,learning_rate=0.01,iterations=100): \n    m_curr = b_curr = 0\n    n = len(x)\n    for i in range(iterations):\n        y_predicted = m_curr * x + b_curr\n        cost = (1/n) * sum([val**2 for val in (y-y_predicted)])\n        md = -(2/n)*sum(x*(y-y_predicted))\n        bd = -(2/n)*sum(y-y_predicted)\n        m_curr = m_curr - learning_rate * md\n        b_curr = b_curr - learning_rate * bd\n        print (\"m {}, b {}, cost {} iteration {}\".format(m_curr,b_curr,cost, i))\n    return m_curr, b_curr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_search(nums, val):\n    low = 0\n    high = len(nums) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if nums[mid] == val:\n            return mid\n        elif nums[mid] > val:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for x in [1,2,3]:\n  for y in [4,5,6]:\n      for z in [7,8,9]:\n          print(x,y,z) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import classification_report\n\n# Load the data\ndata = pd.read_csv(\"data.csv\")\n\n# Vectorize the text\ncv = CountVectorizer()\nX = cv.fit_transform(data[\"text\"])\n\n# Convert target labels to numerical values\ny = np.array([1 if label == \"category1\" else 2 if label == \"category2\" else 3 for label in data[\"category\"]])\n\n# Split into train and test data\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)\n\n# Train the model\nnb = MultinomialNB()\nnb.fit(X_train, y_train)\n\n# Test the model\ny_pred = nb.predict(X_test)\n\n# Print out the results\nprint(classification_report(y_test, y_pred)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def product_of_list(list):\n    output = {}\n    for element in list:\n        output[element] = element * element\n    return output\n\nprint(product_of_list([7, 8, 5])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printFibonacciSeries(n): \n  \n    # Taking 1st two fibonacci nubers as 0 and 1 \n    f1 = 0\n    f2 = 1\n    print(f1, f2, end = \" \") \n  \n    for i in range(2, n): \n        next = f1 + f2 \n        print(next, end = \" \") \n  \n        # update values \n        f1 = f2 \n        f2 = next but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longestCommonSubstring(string1, string2):\n    n1=len(string1)\n    n2=len(string2)\n    \n    L=[[0 for _ in range(n2+1)]for _ in range(n1+1)]\n    longestSubstring=\"\"\n    longestSubstringLength=0\n    for i in range(1, n1+1):\n        for j in range(1, n2+1):\n            if string1[i-1]==string2[j-1]:\n                L[i][j]=L[i-1][j-1]+1\n                if L[i][j]>longestSubstringLength:\n                    longestSubstringLength=L[i][j]\n                    longestSubstring=string1[i-1-longestSubstringLength+1:i]\n            else:\n                L[i][j]=0\n    return longestSubstring but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef shuffle_list(nums):\n random.shuffle(nums)\n return nums\n\nshuffled_list = shuffle_list([1, 2, 3, 4, 5])\nprint(shuffled_list) #[3, 5, 2, 4, 1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(str1, str2):\n    if len(str1) != len(str2):\n        return False\n\n    str1_counts = collections.Counter(str1)\n    str2_counts = collections.Counter(str2)\n    \n    for char in str1_counts:\n        if str1_counts[char] != str2_counts[char]:\n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # compute the sum of x and y\nresult = x + y\n\n# store the result in a third variable\nz = result\n\n#print the result\nprint(z) # Output: 13 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nrandom_numbers = set()\nwhile len(random_numbers) < 10:\n    random_numbers.add(random.randint(0, 10))\n\nprint(random_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findWord(document, word):\n lines = document.split('\\n')\n line_number = -1\n for i, line in enumerate(lines):\n if word in line:\n line_number = (i + 1)\n break\n return line_number\n\nfindWord(largeDocument, word) # 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nScript to scrape photos and captions from a given website\n\"\"\"\n\nfrom bs4 import BeautifulSoup\nimport requests\n\n# Get the HTML source code\nurl = 'https://example.com/webpage'\nreq = requests.get(url)\nhtml = req.text\n\n# Parse HTML source and extract photo and caption\nsoup = BeautifulSoup(html, features='lxml')\nimage_divs = soup.find_all('div', {'class': 'image-gallery__image'})\n\nfor image_div in image_divs:\n    figure = image_div.find('figure')\n    src = figure.find('img')['src']\n    caption = figure.find('figcaption')\n    print('Photo: ', src)\n    if caption:\n        print('Caption: ', caption.text)\n    else:\n        print('No caption')\n    print('\\n') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for x in range(5):\n    print(\"Hello World!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_common_elements(list1, list2):\n    common = [x for x in list1 if x in list2]\n    return common but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [x for x in range(0, 51) if x % 3 == 0 and x % 5 == 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport json\n\nfrom flask import Flask, request\n\napp = Flask(name)\n\n@app.route('/getTemp', methods=['POST'])\ndef get_temp():\n city = request.json['city']\n url = 'http://api.openweathermap.org/data/2.5/weather?q={}&APPID=xxxxxx'\n r = requests.get(url.format(city))\n weather = json.loads(r.text)\n return {'temperature': weather['main']['temp']}\n\nif name == 'main':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max_sum(arr):\n    max_sum = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] + arr[right] > max_sum:\n            max_sum = arr[left] + arr[right]\n        if arr[left] > arr[right]:\n            right -= 1\n        else:\n            left += 1\n    return max_sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def format_text(text, font=\"Times New Roman\", size='14px', color='#000000'):\n  return \"<span style='font-family: {} font-size: {} color: {}'>{}</span>\".format(font, size, color, text)\n\nprint(format_text('Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer ut lectus vel nisi consequat bibendum ac a erat. Aliquam non velit sit amet arcu placerat vulputate a ut nibh.')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def square_index(nums):\n    return [(index, num ** 2) for index, num in enumerate(nums)]\n\nsquare_index(nums)\n# Output: [(0, 1), (1, 4), (2, 9), (3, 16), (4, 25)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def random_number_generator(min, max):\n    return random.randint(min, max) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(mylist):\n for i in range(len(mylist)):\n \n min_index = i\n temp = mylist[i]\n \n for j in range(i + 1, len(mylist)):\n \n  if mylist[min_index] > mylist[j]:\n   min_index = j\n \n mylist[i] = mylist[min_index]\n mylist[min_index] = temp\n \n return mylist\n \nmylist = [1, 5, 7, 8, 4, 10, 2]\n \nprint(\"Sorted list is:\")\nprint(sort_list(mylist)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to delete a node from Linked List  \n  \n# Node class  \nclass Node:  \n  \n    # Function to initialize the node object  \n    def __init__(self, data):  \n        self.data = data  # Assign data  \n        self.next = None  # Initialize next as null  \n  \n  \n# Linked List class contains a Node object  \nclass LinkedList:  \n  \n    # Function to initialize head  \n    def __init__(self):  \n        self.head = None\n  \n    # Function to delete a node  \n    def deleteNode(self, node): \n  \n        # Store head node  \n        temp = self.head  \n  \n        # If head node itself holds the key to be deleted  \n        if (temp is not None):  \n            if (temp == node):  \n                self.head = temp.next\n                temp = None\n                return\n  \n        # Search for the key to be deleted, keep track of the  \n        # previous node as we need to change 'prev.next'  \n        while(temp is not None):  \n            if temp == node:  \n                break\n            prev = temp  \n            temp = temp.next \n  \n        # if key is not present in linked list  \n        if(temp == None):  \n            return\n  \n        # Unlink the node from linked list  \n        prev.next = temp.next\n  \n        temp = None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_sum_of_list(arr):\n    total_sum = 0\n    for item in arr:\n        total_sum += item\n    return total_sum\n\nlist1 = [1, 2, 3, 4]\nsum_of_list = calculate_sum_of_list(list1)\nprint(sum_of_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Load the necessary libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# Read in the data\ntrain_data = pd.read_csv(\"data.csv\")\n\n# Split the data into X (predictors) and y (response)\nX = train_data.drop('response', axis=1)\ny = train_data['response']\n\n# Split into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)\n\n# Define the model and fit it\nmodel = ...\nmodel.fit(X_train, y_train)\n\n# Make predictions on the test set\ny_pred = model.predict(X_test)\n\n# Score the prediction\nscore = accuracy_score(y_test, y_pred)\n\n# Submit the prediction to Kaggle\n# ... but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_consecutive_integers(lst, k):\n    # Edge cases\n    if k > sum(lst) or k < 0:\n        return -1\n \n    # Create a window and move it's boundaries\n    l, h, curr_sum = 0, 0, 0\n    while h < len(lst):\n        # Sum of current window\n        curr_sum += lst[h] \n \n        # See if the window sum equals k\n        while curr_sum > k and l <= h:\n            curr_sum -= lst[l]\n            l += 1\n \n        # When window sum is equal to k, print the winow\n        if curr_sum == k:\n            return lst[l:h+1]\n \n        # Move the window one step at a time\n        h += 1\n \n    # If window size reaches last element and no window is \n    # found\n    return -1\n \nlst = [1,3,5,7,9]\nk = 10\nprint(find_consecutive_integers(lst, k)) # Output: [3,5,7] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n#list of possible answers \nanswers = [\"That's a great question!\", \n    \"I'm not sure, but I'll try to find out!\", \n    \"That sounds interesting, tell me more!\", \n    \"I have no idea, sorry!\"]\n\ndef chatbot_response(user_input): \n    # get a random response from answers\n    response = random.choice(answers)\n    return response\n\n# simple loop to keep the conversation going\nwhile True:\n    user_input = input('You: ')\n    if user_input == 'Goodbye':\n        print('Chatbot: Goodbye!')\n        break\n    else:\n        print('Chatbot: ', chatbot_response(user_input)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import collections\n \nsentence = \"Python is an interpreted, high-level, general-purpose programming language.\"\n \n# Split sentence into words\nwords = sentence.split()\n \n# Set the counter for words\ncounter = collections.Counter(words)\n \n# Find top 5 most frequent words\nresult = counter.most_common(5)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def staircase(n): \n    for i in range(0, n): \n        for j in range(0, n - i - 1): \n            print(end=\" \") \n        for j in range(0, i + 1): \n            print(\"#\", end=\"\") \n        print(\"\\r\") \n  \n# Driver code \nn = 5\nstaircase(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(nums):\n    '''Returns the maximum number in the list.'''\n    max_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n    \n    return max_val but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef identify_characters(alphabet):\n    char_list = []\n    for c in alphabet:\n        char_list.append(c)\n    return char_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/api/<endpoint>', methods=['GET', 'POST'])\ndef process_request(endpoint):\n    # Performance optimization\n    # Use Redis for caching session and query performance\n    # Use uWSGI for Python applications\n    # Use gunicorn as WSGI server\n    # Use Flask-Compress extension for compression\n    # Use global variables where applicable\n    # Don't use sql queries directly, always use model methods\n    # Use query parameter in URLs instead of plain parameters\n    # Use thread-local objects for performance\n\n    # Your code here but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_even_numbers(numbers):\n \n result = 0\n \n for number in numbers:\n  if number % 2 == 0:\n   result += number\n \n return result\n \nprint(sum_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_num(nums):\n    max = nums[0]\n    for num in nums[1:]:\n        if num > max:\n            max = num\n    return max\n\nnums = [5, 4, 2, 7, 12]\nprint(max_num(nums)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list_of_dicts_by_key(my_list, key):\n    return sorted(my_list, key=lambda k: k[key]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_element(arr, element):\n    arr = [x for x in arr if x != element]\n    return arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import scipy.optimize as opt \n  \ndef optimize_function(function, initial_guess): \n    result = opt.minimize(function, initial_guess) \n    return result.x but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class PrimeNumber:\n    def __init__(self, num):\n        self.num = num\n\n    def is_prime(self):\n        for i in range(2, self.num):\n            if(self.num % i == 0):\n                return False\n        return True\n\nnum = 10\nobj = PrimeNumber(num)\n\nif obj.is_prime():\n    print(\"Number is Prime\")\nelse:\n    print(\"Number is Composite\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printTable(array):\n    # find the longest string in each of the inner lists\n    # so we can format the output\n    col_width = [max(len(str(x)) for x in col) for col in array]\n    for row in array:\n        print(\"  \".join(str(x).ljust(col_width[i]) for i, x in enumerate(row)))\n\narray = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprintTable(array)\n\n# Output: \n# 1   2   3\n# 4   5   6\n# 7   8   9 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_digit_only(string):\n    for char in string:\n        if not char.isdigit():\n            return False\n    return True\n\nprint(is_digit_only(\"0123\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node: \n    # Function to initialise the node object \n    def __init__(self, data): \n        self.data = data # Assign data \n        self.next = None # Initialize next as null \n  \n  \n# Linked List class contains a Node object \nclass LinkedList: \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n\n    def remove_duplicates(self, list_nodes):\n        curr_node= self.head \n        new_list=[]\n        while curr_node != None: \n            if curr_node.data not in new_list: \n                new_list.append(curr_node.data) \n            curr_node = curr_node.next\n                \n        # creating a linked list from the unique elements of list_nodes  \n        self.head=None\n        for i in new_list:\n            self.insert_node(i)\n    \n    def insert_node(self, data): \n    # Create a new node \n        new_node = Node(data) \n        # Check if list is empty\n        if self.head is None: \n            self.head = new_node \n            return\n        # Otherwise, traverse to the end of list before \n        # inserting the new Node \n        last = self.head \n        while (last.next): \n            last = last.next\n        last.next =  new_node but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to calculate the maximum, minimum, and average values\ndef calculate_metrics(list):\n    # Calculate the maximum value\n    maximum = max(list)\n    \n    # Calculate the minimum value\n    minimum = min(list)\n   \n    # Calculate the average\n    n = len(list)\n    total = 0\n    for num in list:\n        total += num\n    average = total/n\n    \n    return maximum, minimum, average\n\n# Main Program \nlist = [3, 4, 5, 6, 21, 8]\n\nmaximum, minimum, average = calculate_metrics(list)\n\nprint(\"Maximum value:\", maximum)\nprint(\"Minimum value:\", minimum)\nprint(\"Average value:\", average) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout\nimport numpy as np\n\n# define constants\ntime_steps = 60\nbatch_size = 32\n\n# build the model\nmodel = Sequential()\nmodel.add(LSTM(units=50, return_sequences=True, input_shape=(time_steps, 1)))\nmodel.add(Dropout(0.2))\n\nmodel.add(LSTM(units=50, return_sequences=True))\nmodel.add(Dropout(0.2))\n\nmodel.add(LSTM(units=50))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(units=1))\n\nmodel.compile(optimizer='adam', loss='mean_squared_error')\n\n# read the data \ndataset = np.loadtxt('data.csv', delimiter=',')\n\ndata = dataset[:, 0:1]\n\n# create train and test data\nx_train = data[:int(len(data)*0.8)]\nx_test = data[int(len(data)*0.8):]\n\n# reshape the data for input format\nx_train = np.reshape(x_train, (x_train.shape[0], time_steps, 1))\nx_test = np.reshape(x_test, (x_test.shape[0], time_steps, 1))\n\n# train the model\nmodel.fit(x_train, x_train, epochs=50, batch_size=batch_size, validation_data=(x_test, x_test)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def edit_distance(str1, str2):\n    m = len(str1)\n    n = len(str2)\n    edit_table = [[0 for x in range(n+1)] for x in range(m+1)] \n  \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0: \n                edit_table[i][j] = j\n            elif j == 0: \n                edit_table[i][j] = i\n            elif str1[i-1] == str2[j-1]: \n                edit_table[i][j] = edit_table[i-1][j-1] \n            else: \n                edit_table[i][j] = 1 + min(edit_table[i][j-1], edit_table[i-1][j], edit_table[i-1][j-1]) \n  \n    return edit_table[m][n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_squares(n):\n    result = 0\n    for i in range(n+1):\n        result += i**2\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def capitalize_string(str):\n    words = str.split(' ')\n    capitalized_words = [word.capitalize() for word in words]\n    return \" \".join(capitalized_words)\n\ncapitalized_string = capitalize_string(\"this is an example\")\nprint(capitalized_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_jagged_array(array_size):    \n    # Initialize a jagged array with the given size\n    array = [None] * array_size\n    \n    # Populate the array with empty arrays\n    for i in range(array_size):\n        array[i] = []\n    \n    # Print the output array\n    print(array)\n\nif __name__ == \"__main__\":\n    array_size = 4\n    print_jagged_array(array_size) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask\nfrom flask_restful import Resource, Api\nfrom dialogflow import detect_intent_texts\n\napp = Flask(__name__)\napi = Api(app)\n\n\n@app.route('/', methods=['GET', 'POST'])\ndef detect_intent_text():\n    IF session_id NOT present\n        PLEASE create session_id\n    request = detect_intent_texts(session_id, text)\n    response = request.fulfillment_text\n    return response\n\n\nif __name__ == '__main__':\n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Load libraries\nimport pandas as pd\nimport numpy as np\n\n# Load data\ndata = pd.read_csv(\"stockdata.csv\")\n\n# Split data\nX = data.iloc[:, :-1].values\ny = data.iloc[:, -1].values\n\n# Train/Test Split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Decision Tree Model\nfrom sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier(criterion='entropy', random_state=0)\nclf.fit(X_train, y_train)\n\n# Model Accuracy\ny_pred = clf.predict(X_test)\nprint('Model accuracy: ',clf.score(X_test, y_test)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n    \n    def __init__(self, name, age, email):\n        self.name = name\n        self.age = age\n        self.email = email\n    \n    def toString(self):\n        return f\"Name: {self.name}, Age: {self.age}, Email: {self.email}\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Car:\n    def __init__(self, make, model, color, mileage):\n        self.make = make\n        self.model = model\n        self.color = color\n        self.mileage = mileage\n\n    def accelerate(self, speed):\n        self.speed = speed\n\n    def decelerate(self, speed):\n        self.speed = speed but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python Program to print the Fibonacci series up to n numbers\n\nn = int(input(\"Enter the value of 'n': \"))\n\n# first two numbers\na = 0\nb = 1\n\nprint(\"Fibonacci Series:\") \nprint(a, b, end=\" \") \n  \nfor i in range(2,n):\n               \n    c = a + b\n    a = b\n    b = c\n    print(c, end = \" \")\n    \nprint() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_hello(s):\n    return 'Hello' in s but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: nums = [5, 10, 20, 6, 8]\nmax_num = max(nums)\nmax_index = nums.index(max_num)\n\nprint(max_index) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fizz_buzz(arr):\n    new_arr = []\n    for element in arr:\n        if element % 3 == 0 and element % 5 == 0:\n            new_arr.append(\"FizzBuzz\")\n        elif element % 3 == 0:\n            new_arr.append(\"Fizz\")\n        elif element % 5 == 0:\n            new_arr.append(\"Buzz\")\n        else:\n            new_arr.append(element)\n    return new_arr\n\nprint(fizz_buzz([2, 3, 4, 5, 6, 15])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_substring(str_1, str_2):\n    len_1 = len(str_1)\n    len_2 = len(str_2)\n    longest_substring = ''\n    for x in range(len_1):\n        for y in range(len_2):\n            if str_1[x] == str_2[y]:\n                cur_substring = str_1[x]\n                while (x + 1 < len_1 and y + 1 < len_2 and\n                       str_1[x + 1] == str_2[y + 1]):\n                    cur_substring += str_1[x + 1]\n                    x += 1\n                    y += 1\n                    if len(cur_substring) > len(longest_substring):\n                        longest_substring = cur_substring\n    return longest_substring\n\nlongest_sub = longest_substring(str_1, str_2)\nprint(longest_sub) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(input_string):\n    reversed_string = \"\"\n    for i in range(len(input_string)-1, -1, -1):\n        reversed_string += input_string[i]\n    return reversed_string\n\ninput_string = \"Python\"\n\nprint(reverse_string(input_string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def min_max(array):\n    min = array[0]\n    max = array[0]\n\n    for val in array[1:]:\n        if val > max:\n            max = val\n        if val < min:\n            min = val\n    return min, max but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convertToCamelCase(list):\n    camelCaseList = []\n\n    for string in list:\n        string = string.capitalize()\n        camelCaseList.append(string)\n\n    return ''.join(camelCaseList) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_longest_increasing_sequence(arr):\n longest_start = 0\n longest_length = 0\n\n current_start = 0\n current_length = 0\n\n for i in range(1, len(arr)):\n prev_val = arr[i - 1]\n curr_val = arr[i]\n\n if curr_val > prev_val:\n current_length += 1\n else:\n current_start = i\n current_length = 1\n\n if current_length > longest_length:\n longest_start = current_start\n longest_length = current_length\n\n longest_sequence = arr[longest_start:longest_start + longest_length]\n return longest_sequence\n\narr = [3, 2, 1, 4, 5, 6, 7, 8]\nlongest_seq = find_longest_increasing_sequence(arr)\nprint(longest_seq) // Output: [4, 5, 6, 7, 8] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndef parse_json(data):\n data = json.loads(data)\n return data['name'], data['age'], data['occupation']\n\nname, age, occupation = parse_json(data)\nprint(name, age, occupation)\n# Output: John 18 Software Engineer but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_elements(arr):\n    return sum(arr) # return sum of elements of arr with one line of code. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Vector3D:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    def length(self):\n        return (self.x**2 + self.y**2 + self.z**2)**0.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def TowersOfHanoi(n, fromRod, toRod, auxRod): \n    if n == 1: \n        print(\"Move disk 1 from rod\",fromRod,\"to rod\",toRod) \n        return\n    TowersOfHanoi(n-1, fromRod, auxRod, toRod) \n    print(\"Move disk\", n, \"from rod\", fromRod, \"to rod\", toRod) \n    TowersOfHanoi(n-1, auxRod, toRod, fromRod) \n\nn = 4\nTowersOfHanoi(n, 'A', 'C', 'B') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def euclidean_distance(point1, point2): \n    sum_squared_distance = 0\n\n    for i in range(len(point1)): \n        sum_squared_distance += (point1[i] - point2[i])**2 \n    return sum_squared_distance**0.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def absolute_difference(A, B): \n    return abs(A - B) \n  \n# Driver Code \nA = 9\nB = 5\nprint(absolute_difference(A, B)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.neighbors import NearestNeighbors\n\n# Read in data\ndata = pd.read_csv('product_data.csv')\n\n# Create an item-based collaborative filter\ncf = NearestNeighbors(metric='cosine', algorithm='brute')\ncf.fit(data)\n\n# Make recommendations\ndistances, indices = cf.kneighbors(data, n_neighbors=3)\n\n# Print results \nfor i in range(len(data)):\n print('Recommendations for item {}:'.format(i), indices[i]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_prime(nums):\n    # Keep track of the prime numbers\n    primes = []\n    \n    # Iterate through each number\n    for num in nums:\n        is_prime = True\n        # Check if the number is divisible by any number from 2 to itself\n        for i in range(2, num):\n            # If so, the number is not prime\n            if num % i == 0:\n                is_prime = False\n                break\n        # Add the number to the list of primes if it is prime\n        if is_prime:\n            primes.append(num)\n            \n    # Return the updated list\n    return primes but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: book_list = [\n  {'title': 'The Hobbit', 'author': 'J.R.R. Tolkien', 'pages': 295},\n  {'title': 'The Catcher in the Rye', 'author': 'J.D. Salinger', 'pages': 223},\n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pymysql\nfrom pymongo import MongoClient\nimport psycopg2\n\n# connect to MySQL\nconnection_mysql = pymysql.connect(host='localhost', user='root', password='password', database='db_name')\n\n# connect to MongoDB\nclient = MongoClient('mongodb://localhost:27017')\n\n# connect to PostgreSQL\nconnection_postgresql = psycopg2.connect(host='localhost', user='postgres', password='password', dbname='db_name')\n\n# define a query for each database\nquery_mysql = 'SELECT * FROM table_name'\nquery_mongodb = {'name': 'John Doe'}\nquery_postgresql =  'SELECT * FROM table_name WHERE age > 18'\n\n# execute the query and fetch the results\nresult_mysql = connection_mysql.execute(query_mysql)\nresult_mongodb = client.db_name.collection_name.find(query_mongodb)\nresult_postgresql = connection_postgresql.execute(query_postgresql)\n\n# close the connections\nconnection_mysql.close()\nclient.close() \nconnection_postgresql.close()\n\n# render the results on webpage\ndef render_page(request):\n    return render(request, 'template.html', {\n        'data_mysql': result_mysql, \n        'data_mongodb': result_mongodb,\n        'data_postgresql': result_postgresql\n    }) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ComplexNumber:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __str__(self):\n        return \"({0} + {1}i)\".format(self.real, self.imaginary) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num):\n for i in range(2, num // 2 + 1):\n if num % i == 0:\n return False\n return True\n\ndef prime_list(lst):\n prime_lst = []\n for num in lst:\n if is_prime(num):\n prime_lst.append(num)\n return prime_lst\n\nlst = [2, 8, 3, 6, 10, 7, 14, 11, 17, 15]\nprime_lst = prime_list(lst)\nprint(prime_lst) # Output: [2, 3, 7, 11, 17] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to find the most efficient path\ndef find_path(start, end):\n    # Current location of the robot\n    x = start[0]\n    y = start[1] \n    # Destination coordinates\n    goal_x = end[0] \n    goal_y = end[1] \n    # set to record the cells already visited\n    visited = set() \n    # define a queue to store the tuple of current position and the path\n    queue = [([x, y], [])] \n    # define a neighbor list \n    neighbor = [[1, 0], [0, 1], [-1, 0], [0, -1]] \n    # define a maximum tries\n    max_tries = 100 \n    # define a while loop\n    while queue:\n        # get current position and current path\n        position, path = queue.pop(0) \n        # check if the goal is reached\n        if position[0] == goal_x and position[1] == goal_y:\n            return path + [position]\n        # check if the current position is out of maximum tries and not visited before\n        if position not in visited and max_tries > 0:\n            visited.add(position)\n            max_tries = max_tries - 1 \n            #get all neighbors of the current position\n            for neighbor_x, neighbor_y in neighbor:\n                next_x = position[0] + neighbor_x\n                next_y = position[1] + neighbor_y\n                # add to the queue\n                queue.append(([next_x, next_y], path + [position]))\n    return None\n \nstart = (4, 2) \nend = (9, 9) \n# most efficient path from start to end\npath = find_path(start, end) \nprint(path) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: data = [1, 2, 3, 4]\n\nresult = [x for x in data if x > 2] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # define f1 #\ndef f1(x):\n    return x + 1\n\n# define f2 #\ndef f2(x):\n    return f1(x) * f1(x)\n\n# call f2 #\nprint(f2(2)) #Output: 9 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def func(a, b): \n  c = a + b \n  return c \n\na = 4 \nb = 5 \n\nres = func(a, b) \nprint(res) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # bin/usr/python\n\n# Setting up GPIO pins\nfrom time import sleep\nimport RPi.GPIO as GPIO\n\nGPIO.setmode(GPIO.BOARD) # Identifies the pin numbers to the pi\nGPIO.setwarnings(False)\n\nGPIO.setup(3, GPIO.OUT) # Should sets pin #3 as an output...but doesnt work yet\nGPIO.setup(3, GPIO.LOW) # Turns initial output for pin 3 off\n\nimport time\ntimestr = time.strftime(\"%Y%m%d %H%M%S\")\n\n# Import functions to analyze license validity from CheckLicense.py\nfrom CheckLicense import check_license, calc_BAC\n\n                                 \nimport getpass\nimport sys\nimport re\n\n# Operating modes\nwhile True:\n    #try:\n    mode_req=raw_input(\"Enter Mode(normal, party, barkeep): \")\n\n    if mode_req==\"party\":\n         passwd=getpass.getpass(\"Enter password: \")\n         if passwd==\"admin\":\n                 mode=\"party\"\n                 \n    if mode_req==\"normal\":\n         passwd=getpass.getpass(\"Enter password: \")\n         if passwd==\"admin\":\n                 mode=\"normal\"\n\n    if mode_req==\"barkeep\":\n         passwd=getpass.getpass(\"Enter password: \")\n         if passwd==\"admin\":\n                 mode=\"barkeep\"\n\n            \n#Normal mode operations--------------------------------------------------------------------------------------------\n    while mode=='normal':\n            #try:\n        print '{0} mode!' .format(mode)\n\n        raw_text=getpass.getpass('Swipe card now:   ').strip() \n\n        check_license_out=check_license(raw_text)\n            \n        valid_license=check_license_out[0] \n        first_name=check_license_out[1]\n        last_name=check_license_out[2]\n        DL_num=check_license_out[3]\n        \n# Check to see if person is registered user\n\n        users=open(\"users_list.txt\", 'r')\n        hit=0\n        print DL_num\n        \n        if valid_license=='Yes':\n              for line in users:\n                      if re.search(DL_num, line, re.IGNORECASE):\n                              hit=hit+1\n              if hit>=1:\n                      valid_license='Yes'\n              else: \n                      print 'Not registered user'\n                      valid_license='No'\n# Calculating the BAC\n    \n        BAC=calc_BAC(raw_text)\n        print BAC\n\n    # Opening the solenoid \n        if valid_license=='Yes':\n              GPIO.setup(3, GPIO.HIGH)\n              print 'Beer time!'\n              sleep(2);\n              GPIO.setup(3, GPIO.LOW)\n              with open(\"swipes.txt\", \"a\") as myfile:\n                      myfile.write(last_name+\",\"+first_name+\" \")\n                      myfile.write(DL_num+\" \")\n                      myfile.write(mode+\" \")\n                      myfile.write(time.strftime(\"%Y-%m-%d\")+\" \")\n                      myfile.write(str(time.time())+\"\\n\")\n\n       # except (NameError, IndexError, ValueError):\n        #    print \"error\"\n        #    continue\n\n    #Party mode operations--------------------------------------------------------------------------------------------\n                                     \n    while mode==\"party\":\n        try:\n         print '{0} mode!' .format(mode)\n\n         raw_license_text=getpass.getpass('Swipe card now:   ').strip()\n         check_license_out=check_license(raw_license_text) \n\n         valid_license=check_license_out[0] \n         first_name=check_license_out[1]\n         last_name=check_license_out[2] \n\n\n        # Opening the solenoid \n\n         if valid_license=='Yes':\n                 GPIO.setup(3, GPIO.HIGH)\n                 print 'Beer time!'\n                 sleep(2);\n                 GPIO.setup(3, GPIO.LOW)\n                 with open(\"swipes_normal.txt\", \"a\") as myfile:\n                         myfile.write(last_name)\n                         myfile.write(\",\")\n                         myfile.write(first_name)\n                         myfile.write(\",\")\n                         myfile.write(time.strftime(\"%Y%m%d%H%M%S\\n\"))\n\n        except (NameError, IndexError, ValueError):\n             print \"error\"\n             continue\n                                  \n    #Barkeep mode operations-------------------------------------------------------------------------------------------\n     \n    while mode==\"barkeep\":\n        try:\n            print '{0} mode!' .format(mode)\n\n            check_license_out=check_license(getpass.getpass('Swipe card now:   ').strip()) \n\n            valid_license=check_license_out[0] \n            first_name=check_license_out[1]\n            last_name=check_license_out[2] \n            #usr_chksum = #chksum(firstname_lastname)\n            #'{0}beer_score' .format(usr_chksum) \n            #Check to see if person is blacklisted\n            blacklist=open(\"blacklist.txt\", 'r')\n            hit=0\n\n            if valid_license=='Yes':\n                 for line in blacklist:\n                         if re.search(last_name, line, re.IGNORECASE):\n                                 hit=hit+1\n                         if re.search(first_name, line, re.IGNORECASE):\n                                 hit=hit+1\n                 if hit>=2:\n                         print \"We don't serve your kind here.\"\n                         blacklisted='Yes'\n                 else: \n                         blacklisted='No'\n\n            #Calculate BAC\n                         \n            #Opening the solenoid \n            if blacklisted=='No':\n                if BAC < intoxicated:\n                    GPIO.setup(3, GPIO.HIGH)\n                    print 'Beer time!'\n                    print BAC\n                    sleep(2);\n                    GPIO.setup(3, GPIO.LOW)\n                    with open(\"swipes_barkeep.txt\", \"a\") as myfile:\n                         myfile.write(last_name)\n                         myfile.write(\",\")\n                         myfile.write(first_name)\n                         myfile.write(\"_\")\n                         myfile.write(time.strftime(\"%Y-%m-%d %H:%M%S\\n\"))\n                else:\n                    print 'Your BAC is {0}' .format(BAC)\n                    print \"You are too drunk, beer time is over\"\n                 \n        except (NameError, IndexError, ValueError):\n             print \"error\"\n             continue\n                    \n   # except (NameError, IndexError, ValueError):\n        print \"error\"\n       # continue\n#end ---------------------------------------------------------------------------\n        \n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# list of fruits\nfruits = [\"apple\", \"banana\", \"mango\", \"pear\", \"grape\"]\n\n# generate a random index\nrandomIndex = random.randint(0, len(fruits)-1)\n\n# select and print the random fruit\nrandomFruit = fruits[randomIndex]\nprint(\"Random fruit: \" + randomFruit) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Player class\nclass Player(object):\n def __init__(self):\n self.health = 100\n self.location = 'room one'\n self.monsters_killed = 0\n\n# Room class\nclass Room(object):\n def __init__(self):\n self.name = ''\n self.description = ''\n self.monsters = []\n\n def add_monster(self, monster):\n self.monsters.append(monster)\n\n# Monster class\nclass Monster(object):\n def __init__(self):\n self.name = ''\n self.health = 100\n\n def attack(self, player):\n player.health -= 10\n\n# Function to start the game\ndef start_game():\n # Create player, rooms and monsters\n player = Player()\n\n# Main game loop\nwhile True:\n # Show the current room;\n print(f'You are in {player.location}.')\n # Display available actions\n print('Available actions: move, fight')\n # Get user's action\n response = input('What would you like to do? ').lower()\n\n # Moving to a new room\n if response == 'move':\n # Get the list of available rooms\n # Get the user's destination\n # Move the player to the chosen room\n\n# Fighting a monster\n if response == 'fight':\n # Get all monsters in the current room\n # Get the user's chosen monster\n # Initiate a battle between the player and the monster\n\n# End of the game\n if player.health <= 0:\n print ('You have been defeated!')\n break\n\nif __name__ == '__main__':\n start_game() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pyttsx3\n\ndef text_to_speech(sentence):\n    engine = pyttsx3.init()\n    engine.say(sentence)\n    engine.runAndWait()\n    \ntext_to_speech(\"Hello, this is a simple sentence\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python Backend\n# Web server setup\napp = Flask(__name__)\n\n# Database setup\ndb = SQLAlchemy(app)\n\n# Model for tasks\nclass Task(db.Model):\n  id = db.Column(db.Integer, primary_key=True)\n  title = db.Column(db.String(80), unique=True, nullable=False)\n  is_completed = db.Column(db.Boolean, default=False)\n\n  def __repr__(self):\n    return f'<Task {self.id}: {self.title}>'\n\n# API Endpoint\n@app.route('/tasks', methods=['POST'])\ndef create_task():\n  request_data = request.get_json()\n  title = request_data.get('title')\n  if not title:\n    return jsonify({'error': 'Title must be provided.'}), 400\n\n  task = Task(title=title)\n  db.session.add(task)\n  db.session.commit()\n\n  return jsonify(task.serialize())\n\n# React Frontend\nimport React, { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nexport const TaskList = () => {\n  const [tasks, setTasks] = useState([])\n\n  useEffect(() => {\n    getTasks()\n  }, [])\n\n  const getTasks = async () => {\n    const response = await axios.get('http://localhost:3000/tasks')\n    setTasks(response.data)\n  }\n\n  return (\n    <div>\n      {tasks.map(task => (\n        <div key={task.id}>\n          <input type=\"checkbox\" checked={task.is_complete} />\n          <label>{task.title}</label>\n        </div>\n      ))}\n    </div>\n  )\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_dict(dict_a, dict_b):\n    merged_dict = {**dict_a, **dict_b}\n    return merged_dict but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_of_ints = [1, 3, 6, 8, 10]\n\nlist_of_ints.reverse()\n\nprint(list_of_ints) # [10, 8, 6, 3, 1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_tree(root):\n    if root is None:\n        return 0\n\n    return root.val + sum_tree(root.left) + sum_tree(root.right) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request\napp = Flask(name)\n\n@app.route('/minmax', methods=['POST'])\ndef minmax():\n data = request.get_json()\n nums = data['nums']\n minVal = min(nums)\n maxVal = max(nums)\n return {'min': minVal, 'max': maxVal}\n\nif name == 'main':\n app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Defining a class for 3-dimensional vectors \n \nclass Vector: \n  \n    # defining constructor \n    def __init__(self, x, y, z): \n        self.x = x \n        self.y = y \n        self.z = z \n  \n    # Defining function to print vector\n    def printVec(self):\n        print(self.x, self.y, self.z) \n  \n    # Defining function to add two vectors \n    def addVec(self, V):\n        return Vector(self.x+V.x, self.y+V.y, self.z+V.z) \n  \n    # Defining function to subtract two vectors \n    def subVec(self, V): \n        return Vector(self.x-V.x, self.y-V.y, self.z-V.z) \n\n# Driver code \nv1= Vector(1, 2, 3)\nv2= Vector(5, 3, 2) \n\nprint(\"Vector 1: \")\nv1.printVec() \nprint(\"Vector 2: \")\nv2.printVec()\n\nv3 = v1.addVec(v2)\nprint(\"sum of vector 1 and vector 2: \")\nv3.printVec()\n\nv4 = v1.subVec(v2) \nprint(\"difference of vector 1 and vector 2: \")\nv4.printVec() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def slicing(string, start, end):\n    return string[start:end]\n    \nprint(slicing(string, start, end)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk \nfrom nltk.tokenize import word_tokenize \n  \n# input text  \ntext = 'Python is an interpreted, high-level, general-purpose programming language.'\n  \n# converting the text into tokens \ntoken = word_tokenize(text) \n  \nprint(token) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def shortest_path(matrix, start, end):\n  queue = []\n  min_len = math.inf\n  queue.append([start])\n  while queue:\n    path = queue.pop(0)\n    x, y = path[-1]\n    if (x, y) == end:\n      if len(path) < min_len:\n        min_len = len(path)\n    for dx, dy in [[-1, 0], [1, 0], [0, -1], [0, 1]]:\n      new_x, new_y = x + dx, y + dy\n      if 0 <= new_x < len(matrix) and 0 <= new_y < len(matrix[0]):\n        if matrix[new_x][new_y] == 0:\n          queue.append(path + [(new_x, new_y)])\n  return min_len but is not the same. just give one example and only return the code."}
