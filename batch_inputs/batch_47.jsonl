{"prompt": "make some code that functions the same as the following code: from http.server import HTTPServer, BaseHTTPRequestHandler\nfrom urllib.parse import urlparse\n\nclass RequestHandler(BaseHTTPRequestHandler):\n\n  def do_GET(self):\n    self.send_response(200)\n    self.send_header('Content-Type', 'text/html')\n    self.end_headers()\n    self.wfile.write(b\"<!DOCTYPE html><html><head> <title>Home Page</title> </head><body> <h1> Welcome to my website! </h1> </body></html>\")\n\ndef run(server_class = HTTPServer, handler_class = RequestHandler):\n  server_address = ('', 8000)\n  httpd = server_class(server_address, handler_class)\n  httpd.serve_forever()\n\nrun() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generateList(start, end):\n    res = []\n    for num in range(start, end+1):\n        res.append(num)\n    return res\n\nstart = 2\nend = 6\nprint(generateList(start, end))  # Output: [2, 3, 4, 5, 6] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()\nmodel.fit(X, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\nimport pandas as pd\nfrom tensorflow.keras.layers import Input, Embedding, Dense, Flatten\nfrom tensorflow.keras.models import Model\n\n# Preprocess data\ncustomers = pd.read_csv('customers.csv', usecols=['customer_id', 'name', 'purchase_history'])\ncustomers['purchase_history'] = customers['purchase_history'].str.split(';')\n\n# Create model\ninputs = Input(shape=(1,))\nemb_layer = Embedding(input_dim=customers.shape[0], output_dim=5)(inputs)\nflatten = Flatten()(emb_layer)\ndense_1 = Dense(10, activation='relu')(flatten)\noutputs = Dense(1, activation='sigmoid')(dense_1)\n\nmodel = Model(inputs=inputs, outputs=outputs)\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# Train model\nmodel.fit(x_train, y_train, \n          epochs=50,\n          batch_size=32, \n          validation_data=(x_test, y_test))\n\n# Deploy model in web service\napi = tf.keras.models.load_model('purchase_prediction.h5') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_to_dict(string_list):\n  result = {}\n  for string in string_list:\n    if string not in result:\n      result[string] = 1\n    else:\n      result[string] += 1\n  return result\n\nlist_dict = list_to_dict(['red','blue','red','green','blue','blue'])\nprint(list_dict) # {'red': 2, 'blue': 3, 'green': 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_largest(nums):\n    max_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nprint(get_largest([1, 3, 4, 5, 19, 13, 7])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from paginator import Paginator\n\ndef page_items(items, page_number):\n    p = Paginator(items, 3) # items per page\n    return p.page(page_number).object_list\n\npage_1 = page_items([\"apple\", \"banana\", \"carrot\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"iceberg lettuce\"], 1)\nprint(page_1) # [\"apple\", \"banana\", \"carrot\"]\n\npage_2 = page_items([\"apple\", \"banana\", \"carrot\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"iceberg lettuce\"], 2)\nprint(page_2) # [\"date\", \"elderberry\", \"fig\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def example_function(a, b):\n    return a + b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(my_list):\n new_list = []\n\n for item in my_list:\n if item not in new_list:\n new_list.append(item)\n\n return new_list\n\nmy_list = [1,2,3,3,4,5,5,5,6,7,7]\nmy_list = remove_duplicates(my_list)\nprint(my_list)\n# [1, 2, 3, 4, 5, 6, 7] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n  if n == 0 or n == 1:\n    return 1\n  else:\n    return n * factorial(n-1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def summarize_article(text):\n    sentence_list = text.split(\". \")\n    summary = []\n    for sentence in sentence_list:\n        if \"imagination\" in sentence or \"inventiveness\" in sentence:\n            summary.append(sentence)\n    return '. '.join(summary) + '.'\n\nprint(summarize_article(text))\n\n# Output\n\"Einstein once said that \u201cimagination is more important than knowledge\u201d. According to his famous quote, in order to truly move forward and make an impact on the world, one should use creativity and inventiveness to push boundaries.\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_website(url):\n    # sending get request and saving the response as response object \n    r = requests.get(url) \n    \n    # extracting data in json format \n    data = r.text\n    soup = BeautifulSoup(data, 'html.parser')\n    \n    contents = soup.find_all('p')\n    for content in contents:\n        print(content.text)\n\nscrape_website(\"https://example.com\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_even_number():\n    n = 0\n    while n < 1000 or n > 9999:\n        n = 0\n        for i in range(4):\n            n += random.randint(0, 8) * (10 ** i)\n        if n % 2 == 0:\n            break\n    return n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: even_list = [x for x in list if x%2 == 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_fibonacci_sequence(n):\n  a = 0\n  b = 1\n  sequence = [a]\n  while b < n:\n    a, b = b, a + b\n    sequence.append(a)\n  return sequence\n\nresult = generate_fibonacci_sequence(7)\nprint(result) # [0, 1, 1, 2, 3, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_regression(X,Y):\n    n = len(X)\n    sumx = sum([x**2 for x in X])\n    sumy = sum([y**2 for y in Y])\n    sumxy = sum([x*y for x,y in zip(X,Y)])\n    # calculate slope \n    m = (n*sumxy - sum(X)*sum(Y))/(n*sumx - sum(X)**2) \n    # calculate intercept  \n    c = sum(Y)/n - (m*sum(X))/n \n  \n    return m, c but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_two_arrays(arr1, arr2):\n    # Padd the smaller array with zeros\n    if len(arr1) < len(arr2):\n        for _ in range(len(arr2) - len(arr1)):\n            arr1.insert(0, 0)\n    else:\n        for _ in range(len(arr1) - len(arr2)):\n            arr2.insert(0, 0)\n    \n    # Create result array\n    res = []\n\n    # Loop through the two arrays\n    carry = 0\n    for i in range(len(arr1)):\n        num = arr1[i] + arr2[i] + carry\n\n        # Check if number is > 10\n        if num > 9:\n            carry = 1\n            num = num%10\n        else:\n            carry = 0\n\n        res.append(num)\n\n    if carry:\n        res.append(1)\n\n    return res\n\nres = add_two_arrays(arr1, arr2)\nprint(res) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\npattern = r'^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\ndef mode(list):\n    c = Counter(list)\n    freq = c.most_common()\n    if freq[0][1] == freq[1][1]:\n        return \"No single mode found\" \n    else:\n        return freq[0][0]\n\nlist = [6, 2, 8, 9, 3, 2, 10]\nprint(\"Mode:\", mode(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: result = (2*3 - 6) / (4 + 8)\nprint(result)\n# - 0.25 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def delete_duplicates(array):\n    seen = set()\n    non_duplicates = []\n    for val in array:\n        if val not in seen:\n            non_duplicates.append(val)\n            seen.add(val)\n    return non_duplicates but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quadratic(a, b, c):\n    # calculate the discriminant\n    d = (b**2) - (4*a*c)\n\n    # find the two roots\n    root1 = (-b-d**0.5)/(2*a)\n    root2 = (-b+d**0.5)/(2*a)\n    return root1, root2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: text = \"The quick brown fox jumps over the lazy dog. The race across the wood was won by the swift horse.\"\n\nwords = text.split(\".\")\nfirst_sentences = []\nfor sentence in words:\n    first_sentences.append(sentence.split(\" \")[0])\n\nprint(first_sentences) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\nx = range(-10, 11)\ny = [2 * x_coord + 3 for x_coord in x]\nplt.plot(x, y)\nplt.title('Graph of the function: f(x) = 2x + 3')\nplt.xlabel('x')\nplt.ylabel('2x + 3')\n\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: start = 10\nend = 20\n\nfor num in range(start, end + 1):\n   # all prime numbers are greater than 1\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(string): \n  return string[::-1] \n  \nprint(reverse_string(\"GPT-3\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_search(sorted_list, item):\n    low = 0 \n    high = len(sorted_list) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        guess = sorted_list[mid]\n        if guess == item:\n            return mid\n        if guess > item:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import cv2\n \ncap = cv2.VideoCapture(0)\n \ncascPath = \"haarcascade_frontalface_default.xml\"\nfaceCascade = cv2.CascadeClassifier(cascPath)\n \nwhile True:\n ret, frame = cap.read()\n gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n \n faces = faceCascade.detectMultiScale(\n gray,\n scaleFactor=1.1,\n minNeighbors=5,\n minSize=(30, 30)\n )\n \n for (x, y, w, h) in faces:\n cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)\n \n cv2.imshow('Video', frame)\n \n if cv2.waitKey(1) & 0xFF == ord('q'):\n break\n \ncap.release()\ncv2.destroyAllWindows() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef calculate_circle_perimeter(radius):\n        return 2 * math.pi * radius but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent(arr):\n    arr.sort()\n    max_count = 1\n    max_item = arr[0]\n    curr_count = 1\n    \n    for i in range(1, len(arr)):\n        if arr[i] == arr[i - 1]:\n            curr_count += 1\n            if curr_count > max_count:\n                max_count = curr_count\n                max_item = arr[i]\n        else:\n            curr_count = 1\n    \n    return max_item but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import the necessary packages\nfrom keras.models import Sequential\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.layers.core import Activation\nfrom keras.layers.core import Flatten\nfrom keras.layers.core import Dense\n\n# Construct the model \nmodel = Sequential()\nmodel.add(Conv2D(20, (5, 5), padding=\"same\",\ninput_shape=(28, 28, 1)))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(units=500))                 # Number of nodes in the hidden layer\nmodel.add(Activation(\"relu\"))\nmodel.add(Dense(units=10))                  # Output layer with 10 classes\nmodel.add(Activation(\"softmax\"))\n\n# Compile the model\nmodel.compile(loss=\"categorical_crossentropy\",\n   optimizer=\"adam\", metrics=[\"accuracy\"]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node: \n def __init__(self, data): \n self.data = data\n self.left = None\n self.right = None\n\n# Function to insert a node \ndef insert(node, data): \n if node is None: \n node = Node(data) \n elif data < node.data: \n node.left = insert(node.left, data) \n else: \n node.right = insert(node.right, data) \n\nreturn node \n\nif __name__ == '__main__':\n root = None \n root = insert(root, 8) \n root = insert(root, 3) \n root = insert(root, 10) \n root = insert(root, 1) \n root = insert(root, 6)\n root = insert(root, 4) \n root = insert(root, 7) \n root = insert(root, 14)\n root = insert(root, 13) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence = \"He is working on it\"\nword = \"working\"\n\nsentence = sentence.replace(word, \"\")\n\nprint(sentence) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def counter(text):\n    \"\"\"\n    Function to count the occurrence of each word in the text using \n    a dictionary data structure.\n    \n    Parameters: \n    text (str): The given text to count.\n    \n    Returns: \n    dict: A dictionary of words with their counts.\n    \"\"\"\n    result = {}  # Create empty dictionary\n    for word in text.split():\n        if word in result: \n            result[word] += 1\n        else: \n            result[word] = 1\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\ndef read_data(filename):\n    return pd.read_csv(filename) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class User:\n    def __init__(self, name, age, email):\n        self.name = name\n        self.age = age\n        self.email = email\n\n    def display(self):\n        print(f\"\"\"\n            Name: {self.name}\n            Age: {self.age}\n            Email: {self.email}\n            \"\"\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python 3 program to find sum over a range\n# A recursive function to find the sum of given range\ndef rangeSum(start, end):\n  \n    # If range consists of only one number\n    if (start == end):\n        return start\n    return start + rangeSum(start + 1 , end)\n  \n# Driver code\nstart = 1\nend = 5\nprint(rangeSum(start, end)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnumber = 4\nresult = factorial(number)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nimport numpy as np\nimport random\nimport string # to process standard python strings\n\n# Read in the data\nf = open('student_questions.txt','r',errors = 'ignore')\ndata = f.read()\n\nconversationsPoints = data.lower().split(\"\n\n\")\n\n# Create a dictionary that maps each word to its occurrence\nword2count = {}\nfor conversation in conversationsPoints:\n for word in conversation.split():\n if word not in word2count.keys():\n word2count[word] = 1\n else:\n word2count[word] += 1\n\n# Tokenize the words\nwords = sorted(list(word2count.keys()))\n\n# Create the token_to_int dictionary\ntoken2int = {}\nint2token = {}\n\nfor i, word in enumerate(words):\n token2int[word] = i\n int2token[i] = word\n\n# Create input and output datasets\nX = []\nY = []\n\nfor conversation in conversationsPoints:\n sentence = conversation.lower().split()\n for i in range(1,len(sentence)):\n x = token2int[sentence[i-1]]\n y = token2int[sentence[i]]\n X.append(x)\n Y.append(y)\n\n# One hot encode our input and output data\nX_one_hot = np.zeros((len(X), len(words)), dtype=np.int32)\nY_one_hot = np.zeros((len(Y), len(words)), dtype=np.int32)\n\nfor i, x in enumerate(X):\nX_one_hot[i][x] = 1\n\nfor i, y in enumerate(Y):\nY_one_hot[i][y] = 1\n\n\n# Create and train the chatbot model\nmodel = MyChatbot()\nmodel.fit(X_one_hot, Y_one_hot, epochs=500, batch_size=32)\n\n# Define bot response function\ndef bot_response(s):\n sentence = [word.lower() for word in s.split()]\n sentence = [token2int[word] for word in sentence]\n prediction = model.predict_single(sentence)\n int2word[prediction]\n return int2word[prediction]\n\n# Run the app\nwhile True:\n print('User: ', end='')\n s = input()\n response = bot_response(s)\n print('Chatbot: ' + response) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: data = [['a', 1], ['b', 2], ['c', 3], ['d', 4]]\n\nmy_dict = dict(data)\nprint(my_dict) # {'a': 1, 'b': 2, 'c': 3, 'd': 4} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def integer_to_binary(num):\n    if num == 0:\n        return 0\n    elif num < 0:\n        num += 2**32\n    binary = ''\n    while num > 0:\n        binary = str(num%2) + binary\n        num //= 2\n    return binary but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combine_strings(strings): \n    return ' '.join(strings) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Cat:\n    def __init__(self):\n        self.name = \"\"\n        self.colour = \"\"\n        self.age = 0\n        self.breed = \"\"\n\n    def meow(self):\n        print(self.name, \"says meow!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def intersection(list1, list2):\n    return [value for value in list1 if value in list2]\n\nlist1 = [1, 2, 3, 4]\nlist2 = [2, 4, 6, 7]\n\nprint(intersection(list1, list2)) # [2, 4] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: mystring = mystring[:-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(\", \".join([str(x) for x in [1, 8, 10, 15, 12]])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def toCamelCase(s):\n    s = s.split(' ')\n    return ''.join(x.title() for x in s)\n\ns = \"this is some random text\"\nprint(toCamelCase(s)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list3 = []\n\nlist3.extend(list1)\nlist3.extend(list2)\n  \nprint(list3) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_numbers(a, b):\n return a + b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def matrix_mult(mat1, mat2): \n  res = [[0, 0], [0, 0]] \n  for i in range(len(mat1)): \n    for j in range(len(mat2[0])): \n      for k in range(len(mat2)): \n        res[i][j] += mat1[i][k] * mat2[k][j] \n  return res\n\nA = [[1, 2], [3, 4]]\nB = [[4, 3], [2, 1]]\n\nprint(matrix_mult(A, B))\n# Output: [[8, 5], [20, 13]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def process_string(string):\n    return string.lower()\n\nprocess_string(\"MyString\") # returns \"mystring\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def initialize_matrix(c, d):\n    rows = len(c)\n    cols = len(c[0])\n    matrix = []\n    for i in range(rows):\n        row = []\n        for j in range(cols):\n            row.append(c[i][j] + d[i][j])\n        matrix.append(row)\n    return matrix but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculatePowerDemand(util, time, power):\n    return util * time * power\n\nPowerDemand = calculatePowerDemand(0.1, 10, 100)\nprint(PowerDemand) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def freq_word(sentence):\n    words = sentence.split()\n    # make a dictionary to count the occurrance of each word\n    d = {}\n    for word in words:\n        # if the word is already in the dictionary, increment its count\n        if word in d.keys():\n            d[word] += 1\n        # else add the word in the dictionary\n        else:\n            d[word] = 1\n    # set the first most_freq to the first word in the sentence\n    most_freq = words[0]\n    # loop trough the words\n    for word in words:\n        # if we find a word with higher frequency, set most_freq to that word\n        if d[word] > d[most_freq]:\n            most_freq = word\n    return most_freq but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: A Python list is an ordered collection of objects, stored in memory and indexed by number that can contain items of different types such as numbers, strings, and other lists. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n def __init__(self, name, age):\n   self.name = name\n   self.age = age\n\n def get_name(self):\n   return self.name\n\n def get_age(self):\n   return self.age\n\n def set_name(self, name):\n   self.name = name\n\n def set_age(self, age):\n   self.age = age but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: total = 0\nfor person in people:\n total += person['age']\n\naverage = total / len(people)\n\nprint(f'Average age is {average}') // 24.4 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ntext = \"The list of contacts is john@test.com,jane@example.com,bob@test.com\"\n\npattern = r'[\\w\\.-]+@[\\w\\.-]+'\n\nmatch = re.findall(pattern, text)\n\nprint(match) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import difflib\n\ndef plagiarism_detector(string_a, string_b):\n    sequence = difflib.SequenceMatcher(None, string_a, string_b)\n    similarity = sequence.ratio() * 100\n    print('Similarity = {:.2f}%'.format(similarity))\n\nplagiarism_detector('The quick brown fox', 'The quick brown fox jumps over the lazy dog') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import socket\n\nHOST, PORT = '', 8888\n\nlisten_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nlisten_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nlisten_socket.bind((HOST, PORT))\nlisten_socket.listen(1)\nprint 'Serving HTTP on port %s ...' % PORT\nwhile True:\n    client_connection, client_address = listen_socket.accept()\n    request = client_connection.recv(1024)\n    print request\n\n    http_response = \"\"\"\\\nHTTP/1.1 200 OK\n\nHello, World!\n\"\"\"\n    client_connection.sendall(http_response)\n    client_connection.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nGenerate a solution for finding all possible subsets of a given set in Python.\n\"\"\"\n\ndef find_subsets(nums):\n  subsets = [[]]\n\n  for current_num in nums:\n    for i in range(len(subsets)):\n      set_to_add = subsets[i] + [current_num]\n      subsets.append(set_to_add)\n\n  return subsets\n\nnums = [1, 2, 3]\nprint(find_subsets(nums)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_sentiment(string):\n if 'positive' in string:\n  return 'Positive' \n elif 'negative' in string:\n  return 'Negative' \n elif 'neutral' in string:\n  return 'Neutral'\n else:\n  return 'Unknown'\n\nsentiment = classify_sentiment(\"This is an amazing service.\")\nprint(sentiment) # Positive but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password(length):\n    chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(chars) for _ in range(length))\n    return password but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# Create Series\ndata = [1, 2, 2, 3, 3, 3, 4, 5]\nseries = pd.Series(data)\n\n# Calculate mean\nmean = series.mean()\n\n# Calculate median\nmedian = series.median()\n\n# Calculate mode\nmode = series.mode()\n\n# Print results\nprint(\"Mean:\", mean)\nprint(\"Median:\", median)\nprint(\"Mode:\", mode) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\n\nfrom keras.models import Sequential\n\nfrom keras.layers import Dense, GRU, Embedding\n\n# Load the dataset\ndf = pd.read_csv(\"reviews.csv\")\n\n# Select labels and text\ndata = df[[\"review\", \"sentiment\"]]\n\n# Split data into training and test set\ntrain_data, test_data = train_test_split(data, random_state=42)\n\n# Tokenize the text\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts(train_data['review'])\n\n# Pad and encode the sequences\n# This pad the article to a length of 120\nX_train = tokenizer.texts_to_sequences(train_data['review'])\nX_test = tokenizer.texts_to_sequences(test_data['review'])\n\nX_train = pad_sequences(X_train, maxlen=120)\nX_test = pad_sequences(X_test, maxlen=120)\n\n# Prepare labels\ny_train = train_data['sentiment']\ny_test = test_data['sentiment']\n\n# Create a model\nmodel = Sequential()\nmodel.add(Embedding(1000, 128, input_length=120))\nmodel.add(GRU(256))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# Compile the model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# Fit the model\nmodel.fit(X_train, y_train, batch_size=128, epochs=20) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nGenerate a loop to iterate through each character of a string\n\"\"\"\n\n# Define a string\nstring = 'Example string'\n\n# Iterate through the characters of the string\nfor char in string:\n    # Print each character\n    print(char) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\ndef random_matrix(row, col):\n    matrix = np.random.random((row,col))\n    print(matrix)\n\nrandom_matrix(3,3) #Outputs: [[0.48281427 0.8640267  0.16479638]\n                      [0.65602432 0.37230416 0.05444421]\n                      [0.78832705 0.19239374 0.03173512]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: [2, 4, 8, 16, 32] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n # Initialize a memoization dictionary\n memo = {\n 0: 0,\n 1: 1\n }\n \n # If n is in the memoization dictionary, return the value\n if n in memo:\n return memo[n]\n \n # Calculate the Fibonacci number\n if n > 1:\n memo[n] = fibonacci(n-1) + fibonacci(n-2)\n \n return memo[n]\n\nprint(fibonacci(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def ipv4_format(ip):\n octets = ip.split('.')\n octets.extend(['0', '0', '0', '0'])\n octets = octets[:4]\n return '.'.join(octets)\n\nif __name__ == '__main__':\n ip = '192.168.1'\n print(ipv4_format(ip)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Read in csv data\ndata = pd.read_csv('stock_data.csv')\n\n# Split our data into testing and training sets\nX_train = data[data['date'] < '2014-01-01']\nX_test = data[data['date'] >= '2014-01-01']\n\n# Extract our feature and target columns\nX_train = X_train.drop(['date', 'price'], axis=1)\nX_test = X_test.drop(['date', 'price'], axis=1)\ny_train = data[data['date'] < '2014-01-01']['price']\ny_test = data[data['date'] >= '2014-01-01']['price']\n\n# Fit our Linear Regression Model\nlinear_regression = LinearRegression()\nlinear_regression.fit(X_train, y_train)\ny_preds = linear_regression.predict(X_test)\n\n# Print out our predictions\nfor i in range(1, len(y_preds)):\n print(f\"Predicted: {y_preds[i]}, Actual: {y_test.iloc[i]}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\ndef scraper(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.content, 'html.parser')\n    for article in soup.find_all('article'):\n        print(article.text)\n\nif __name__ == \"__main__\":\n    scraper(\"https://www.example.com\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_search(arr, target):\n  low = 0\n  high = len(arr) - 1\n\n  while low <= high:\n    mid = (low + high) // 2 # floor division\n    guess = arr[mid]\n\n    if guess == target:\n      return mid\n    elif guess > target:\n      high = mid - 1\n    else:\n      low = mid + 1\n  return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(n):\n \n if n <= 1:\n return False\n \n for i in range(2, int(n**0.5)+1):\n if n % i == 0:\n return False\n \n return True\n \n \ndef next_prime(num):\n \n if is_prime(num):\n num += 1\n \n while (True):\n if is_prime(num):\n return num\n \n num += 1\n \n \nnum = 19\nprint(next_prime(num))\n# Output: 23 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_common(arr):\n    counts = {}\n    for n in arr:\n        if n in counts:\n            counts[n] += 1\n        else:\n            counts[n] = 1\n    max_count = 0\n    max_element = None\n    for k, v in counts.items():\n        if v > max_count:\n            max_count = v\n            max_element = k\n    return max_element but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_punc_and_whitespace(string): \n    return ''.join([x for x in string if x not in [\" \", \",\", \":\", \"-\", \"!\", \"?\", \".\"]]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class A:\n    def __init__(self, x):\n        self.x = x\n    \n    def get_x(self):\n        return self.x\n\nclass B(A):\n    def modify_x(self, x):\n        A.modify_x(self, x)\n        self.x += 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_avg(values):\n  total = 0\n  count = len(values)\n \n  for value in values:\n    total += value\n \n  return total/count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: lst = list(range(100))\n \nfor i in lst:\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: if st1 == st2:\n    print(\"Strings are equal.\")\nelse:\n    print(\"Strings are not equal.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def LCM(x, y):\n   if x > y:\n       z = x\n   else:\n       z = y\n\n   while(True):\n       if((z % x == 0) and (z % y == 0)):\n           lcm = z\n           break\n       z += 1\n\n   return lcm\n\na = 15\nb = 20\nprint(LCM(a, b)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr.sort(key=lambda x: len(x), reverse=True)\nprint(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: apiVersion: apps/v1\nkind: Deployment\nmetadata:\n name: my-app-deployment\nspec:\n replicas: 3\n selector:\n  matchLabels:\n   app: my-app\n template:\n  metadata:\n   labels:\n    app: my-app\n  spec:\n   containers:\n   - name: my-app\n    image: my-app-image\n    ports:\n    - containerPort: 8080 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\nusers = json.loads(input)\ntotal_age = 0\nfor user in users:\n total_age += user[\"age\"]\n\naverage_age = total_age / len(users)\n\nprint(f\"Average age of users is {average_age}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt \nimport numpy as np\n\nmean = 5 \nstd = 1 \nx = np.linspace(mean - 3*std, mean+3*std, 100)\nplt.plot(x, 1/(np.sqrt(2*np.pi*std**2)) *np.exp(-(x-mean)**2/(2*std**2))) \nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: 44 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_words_by_length(word_list, length):\n    return [word for word in word_list if len(word) == length] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def double(x):\n    return x * 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter as tk\n\n# Create a window\nwindow = tk.Tk()\nwindow.title(\"Printed Text Output\") \nwindow.geometry(\"500x500\") \n\n# Label and Entry to input text\nlabel1 = tk.Label(window, text=\"Input text:\").place(x=50, y=50)\nentry = tk.Entry(window)\nentry.place(x=120, y=50)\n\n# Print out the text\ndef print_text():\n    userInput = entry.get()\n    label2 = tk.Label(window, text=\"The printed text is: \"+userInput, font=(\"Helvetica\", 30))\n    label2.place(x=50, y=100)\n  \n# Button to trigger the printing of text\nbutton = tk.Button(window, text=\"Print\", command=print_text) \nbutton.place(x=50, y=80)\n\n# Run the window\nwindow.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class UserProfile:\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n\n    def get_username(self):\n        return self.username\n\n    def get_password(self):\n        return self.password\n\nuser = UserProfile('username', 'password')\nprint(user.get_username()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def display_square(number):\n    result = number * number\n    print(result)\n\ndisplay_square(5) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_random_string(stringLength=8):\n    \"\"\"Generate a random string of fixed length \"\"\"\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(stringLength))\n\nprint(generate_random_string()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent(list): \n  return max(set(list), key = list.count)\n  \nmost_frequent([3,4,3,4,3]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_dict = dict(my_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MultiplicationQuiz:\n    def __init__(self, num_questions):\n        self.num_questions = num_questions\n    \n    def generate_quiz(self):\n        # Generate num_questions random questions \n        for _ in range(self.num_questions):\n            num1 = random.randint(1, 12)\n            num2 = random.randint(1, 12)\n            print(f'What is {num1} x {num2}?')\n\n# Test\nquiz = MultiplicationQuiz(10)\nquiz.generate_quiz() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Calculate the sum of the first 10 prime numbers\n \n# Variable to store the sum\nsum = 0\n \n# Iterate over the first 10 prime numbers and add them to the sum \nfor i in range(2,37):\n   # Check for Prime number\n   if all(i % j != 0 for j in range(2, i)):\n      sum += i\n \n# Output the result \nprint(\"Sum of the first 10 prime numbers is\",sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import hashlib\n\nclass User:\n    def __init__(self, username, password):\n        self.username = username\n        self.password_hash = self.hash_password(password)\n\n    def check_password(self, password):\n        if self.hash_password(password) == self.password_hash:\n            return True\n        else:\n            return False\n\n    def hash_password(self, password):\n        return hashlib.sha256(password.encode('utf-8')).hexdigest()\n\nusers = {}\n\ndef register(username, password):\n    if username in users:\n        print('Username already exists!')\n        return\n    \n    users[username] = User(username, password)\n    print('Registration successful!')\n    \ndef login(username, password):\n    if username not in users:\n        print('Username doesn\\'t exist!')\n        return \n    \n    user = users[username]\n    if user.check_password(password):\n        print('Login successful!')\n    else:\n        print('Wrong password!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\ncountry_data = [ \n    [\"Afghanistan\", \"Kabul\"],\n    [\"Albania\", \"Tirana\"],\n    [\"Algeria\", \"Algiers\"],\n    [\"Andorra\", \"Andorra la Vella\"],\n    [\"Angola\", \"Luanda\"],\n    [\"Antigua and Barbuda\", \"St. John's\"],\n    [\"Argentina\", \"Buenos Aires\"],\n    [\"Armenia\", \"Yerevan\"],\n    [\"Australia\", \"Canberra\"],\n    [\"Austria\", \"Vienna\"]\n]\n\ndf = pd.DataFrame(country_data, columns=[\"Country\", \"Capital\"])\nprint(df) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: inp_str = \"HELLO WORLD\"\n\nresult_str = ''\n\nfor c in inp_str:\n    if c.isupper():\n        result_str += c.lower()\n    else:\n        result_str += c.upper()\n        \nprint(result_str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from BeautifulSoup import BeautifulSoup\n\ndef parseHtml(html):\n    soup = BeautifulSoup(html)\n    links = []\n    for link in soup.findAll('a'):\n        links.append(link.get('href'))\n    return links but is not the same. just give one example and only return the code."}
