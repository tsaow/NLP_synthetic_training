{"prompt": "make some code that functions the same as the following code: def area_of_triangle(a, b, c):\n    # calculate the semi-perimeter\n    s = (a + b + c) / 2\n    # calculate the area\n    area = (s * (s-a) * (s-b) * (s-c)) ** 0.5\n    return area but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: nums = []\nfor i in range(1, 11): \n    nums.append(i)\nprint(nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def distance_three_d(p1,p2):\n    a = (p2[0] - p1[0])**2\n    b = (p2[1] - p1[1])**2\n    c = (p2[2] - p1[2])**2\n    return (a + b + c) **0.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nEnumerate several simple programming solutions to compute the factorial of a number in Python\n\"\"\" \n\n# Solution 1: Using a loop \ndef factorial_1(n):\n    fact = 1\n    for i in range(2, n+1):\n        fact *= i\n    return fact\n\n# Solution 2: Using recursion \ndef factorial_2(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial_2(n-1)\n\n# Solution 3: Using math library\nimport math \ndef factorial_3(n):\n    return math.factorial(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def contains_number(string):\n    return any(char.isdigit() for char in string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Some techniques to optimize the speed of a Python program include:\n- Optimal use of libraries\n- Use of efficient data structures\n- Using vectorization and/or NumPy arrays\n- Writing efficient loops\n- Enabling for in-place operations\n- Avoiding unnecessary computations\n- Using efficient algorithms\n- Avoiding global accesses\n- Profiling and memory optimization but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def dot_product(v1, v2):\n    total  = 0\n    for (x1, x2) in zip(v1, v2):\n        total += x1*x2\n    return total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\nimport os\nimport urllib\n\n# Set the URL you want to webscrape from\nurl = 'https://example.com/'\n\n# Connect to the URL\nresponse = requests.get(url)\n\n# Parse HTML and save to BeautifulSoup object\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# Create directory for website\nos.mkdir(url.split('//')[-1])\n\n# Changing working directory to website directory\nos.chdir(url.split('//')[-1])\n\n# Create HTML file and save content\nwith open('index.html', 'wb') as f:\n f.write(soup.prettify('utf-8'))\n\n# Get all images\n# images = soup.findAll('img') \nimages = soup.findAll('img', {'src': True})\n\n# Download images:\nfor image in images:\n filename = image['src'].split('/')[-1]\n urllib.request.urlretrieve(image['src'], filename) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # This function calculates the sum of the numbers 0 to n.\ndef my_sum(n):\n  if n <= 1:\n    return n\n  else: \n    return n + my_sum(n-1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_multiples(max_num):\n    values = []\n    for i in range(1, max_num):\n        if i % 3 == 0 or i % 5 == 0:\n            values.append(i)\n    return sum(values)\n\nresult = sum_multiples(500)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\nprint(Fibonacci(6)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def substring(string, start, end):\n    '''This function takes a string, start index and end index, and returns the substring between the two given indexes.'''\n    return string[start:end] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\nimport collections\n\ndef words(text): \n    return re.findall('[a-z]+', text.lower()) \n\ndef train(features):\n    model = collections.defaultdict(lambda: 1)\n    for f in features:\n        model[f] += 1\n    return model\n\nNWORDS = train(words(open('big.txt').read()))\n\ndef edits1(word):\n    s = [(word[:i], word[i:]) for i in range(len(word) + 1)]\n    deletes    = [a + b[1:] for a, b in s if b]\n    transposes = [a + b[1] + b[0] + b[2:] for a, b in s if len(b)>1]\n    replaces   = [a + c + b[1:] for a, b in s for c in alphabet if b]\n    inserts    = [a + c + b     for a, b in s for c in alphabet]\n    return set(deletes + transposes + replaces + inserts)\n\ndef known_edits2(word):\n    return set(e2 for e1 in edits1(word) for e2 in edits1(e1) if e2 in NWORDS)\n\ndef known(words): \n    return set(w for w in words if w in NWORDS)\n\ndef correct(word):\n    candidates = known([word]) or known(edits1(word)) or known_edits2(word) or [word]\n    return max(candidates, key=NWORDS.get) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def to_time_string(duration):\n    hours, remainder = divmod(duration, 3600)\n    minutes, seconds = divmod(remainder, 60)\n    return \"%02d:%02d:%02d\" % (hours, minutes, seconds)\n\nprint(to_time_string(32400)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n def __init__(self, name, age, height, weight):\n self.name = name\n self.age = age\n self.height = height\n self.weight = weight\n\n def describe(self):\n return f'{self.name} is {self.age} years old, {self.height} cm tall and weighs {self.weight} kg.' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Program to print the first 20 prime numbers\n\ndef is_prime(num):\n\n    # Base case\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n\n    # Iterate from 3 to the sqrt of number\n    i = 3\n    while(i * i <= num):\n        \n        if num % i == 0:\n            return False\n        i = i + 2\n\n    return True\n\n# Print the first 20 prime numbers\nn = 2\ncount = 0\n\nwhile count < 20:\n\n    if is_prime(n):\n        print(n, end=' ', flush=True)\n        count += 1\n    n += 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_order(text):\n  # Split the text into sentences\n  sentences = text.split(\".\")\n  # Reverse the order of the words in each sentences\n  for index, sentence in enumerate(sentences):\n    words = sentence.split(\" \")\n    reversed_words = words[::-1]\n    sentences[index] = \" \".join(reversed_words)\n  # Join the sentences in the original order\n  reversed_text = \". \".join(sentences)\n  # Return the result\n  return reversed_text\n\nreverse_order(\"The quick brown fox jumped over the lazy dog.\")\n\n# Output: dog. lazy the over jumped fox brown quick The but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(500, 1001):\n    if i%7 == 0:\n        print(i, end=' ') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import the relevant libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# Load the dataset\ndata = pd.read_csv('posts.csv')\n\n# Preprocess the data\ndata['is_recent'] = data['date'] > (pd.datetime.now() - pd.Timedelta(days=1))\n\n# Create the feature matrix and the target vector\nX = data[['text_content', 'shares_count', 'is_recent']]\ny = data['likes_count']\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Make predictions on test set\npredictions = model.predict(X_test)\n\n# Calculate the accuracy\naccuracy = model.score(X_test, y_test)\n\nprint('Model accuracy:', accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def first_non_repeated_char(string):\n    for ch in string:\n        if string.count(ch) == 1:\n            return ch but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n#make a GET request\nresponse = requests.get('https://www.example.com')\n\n#parse HTML\nsoup = BeautifulSoup(response.text, 'html.parser') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python2\n##################################################\n# GNU Radio Python Flow Graph\n# Title: Output Window\n# Generated: Sat Apr 30 16:45:27 2016\n##################################################\n\nif __name__ == '__main__':\n    import ctypes\n    import sys\n    if sys.platform.startswith('linux'):\n        try:\n            x11 = ctypes.cdll.LoadLibrary('libX11.so')\n            x11.XInitThreads()\n        except:\n            print \"Warning: failed to XInitThreads()\"\n\nfrom gnuradio import analog\nfrom gnuradio import blocks\nfrom gnuradio import eng_notation\nfrom gnuradio import fft\nfrom gnuradio import gr\nfrom gnuradio import wxgui\nfrom gnuradio.eng_option import eng_option\nfrom gnuradio.fft import window\nfrom gnuradio.filter import firdes\nfrom gnuradio.wxgui import fftsink2\nfrom gnuradio.wxgui import forms\nfrom gnuradio.wxgui import numbersink2\nfrom grc_gnuradio import wxgui as grc_wxgui\nfrom optparse import OptionParser\nimport osmosdr\nimport time\nimport wx\n\n\nclass Output_window(grc_wxgui.top_block_gui):\n\n    def __init__(self):\n        grc_wxgui.top_block_gui.__init__(self, title=\"Output Window\")\n        _icon_path = \"/usr/share/icons/hicolor/32x32/apps/gnuradio-grc.png\"\n        self.SetIcon(wx.Icon(_icon_path, wx.BITMAP_TYPE_ANY))\n\n        ##################################################\n        # Variables\n        ##################################################\n        self.threshold = threshold = -55\n        self.samp_rate = samp_rate = 2.048e6\n        self.freq = freq = 658e6\n        self.fft_size = fft_size = 1.024e3\n\n        ##################################################\n        # Blocks\n        ##################################################\n        self.notebook = self.notebook = wx.Notebook(self.GetWin(), style=wx.NB_TOP)\n        self.notebook.AddPage(grc_wxgui.Panel(self.notebook), \"Spectrum\")\n        self.notebook.AddPage(grc_wxgui.Panel(self.notebook), \"Output\")\n        self.notebook.AddPage(grc_wxgui.Panel(self.notebook), \"Stream\")\n        self.Add(self.notebook)\n        _threshold_sizer = wx.BoxSizer(wx.VERTICAL)\n        self._threshold_text_box = forms.text_box(\n        \tparent=self.notebook.GetPage(1).GetWin(),\n        \tsizer=_threshold_sizer,\n        \tvalue=self.threshold,\n        \tcallback=self.set_threshold,\n        \tlabel=\"Threshold\",\n        \tconverter=forms.float_converter(),\n        \tproportion=0,\n        )\n        self._threshold_slider = forms.slider(\n        \tparent=self.notebook.GetPage(1).GetWin(),\n        \tsizer=_threshold_sizer,\n        \tvalue=self.threshold,\n        \tcallback=self.set_threshold,\n        \tminimum=-100,\n        \tmaximum=0,\n        \tnum_steps=100,\n        \tstyle=wx.SL_HORIZONTAL,\n        \tcast=float,\n        \tproportion=1,\n        )\n        self.notebook.GetPage(1).Add(_threshold_sizer)\n        _freq_sizer = wx.BoxSizer(wx.VERTICAL)\n        self._freq_text_box = forms.text_box(\n        \tparent=self.notebook.GetPage(0).GetWin(),\n        \tsizer=_freq_sizer,\n        \tvalue=self.freq,\n        \tcallback=self.set_freq,\n        \tlabel=\"freq\",\n        \tconverter=forms.float_converter(),\n        \tproportion=0,\n        )\n        self._freq_slider = forms.slider(\n        \tparent=self.notebook.GetPage(0).GetWin(),\n        \tsizer=_freq_sizer,\n        \tvalue=self.freq,\n        \tcallback=self.set_freq,\n        \tminimum=10e6,\n        \tmaximum=10e9,\n        \tnum_steps=100,\n        \tstyle=wx.SL_HORIZONTAL,\n        \tcast=float,\n        \tproportion=1,\n        )\n        self.notebook.GetPage(0).Add(_freq_sizer)\n        self.wxgui_numbersink2_1 = numbersink2.number_sink_f(\n        \tself.notebook.GetPage(1).GetWin(),\n        \tunit=\"signal present\",\n        \tminval=0,\n        \tmaxval=1,\n        \tfactor=1,\n        \tdecimal_places=0,\n        \tref_level=0,\n        \tsample_rate=samp_rate,\n        \tnumber_rate=15,\n        \taverage=False,\n        \tavg_alpha=None,\n        \tlabel=\"Signal Detection\",\n        \tpeak_hold=False,\n        \tshow_gauge=True,\n        )\n        self.notebook.GetPage(1).Add(self.wxgui_numbersink2_1.win)\n        self.wxgui_numbersink2_0 = numbersink2.number_sink_f(\n        \tself.notebook.GetPage(1).GetWin(),\n        \tunit=\"dB\",\n        \tminval=-120,\n        \tmaxval=0,\n        \tfactor=1.0,\n        \tdecimal_places=10,\n        \tref_level=0,\n        \tsample_rate=samp_rate,\n        \tnumber_rate=15,\n        \taverage=False,\n        \tavg_alpha=30e-3,\n        \tlabel=\"level\",\n        \tpeak_hold=False,\n        \tshow_gauge=False,\n        )\n        self.notebook.GetPage(1).Add(self.wxgui_numbersink2_0.win)\n        self.wxgui_fftsink2_0 = fftsink2.fft_sink_c(\n        \tself.notebook.GetPage(0).GetWin(),\n        \tbaseband_freq=freq,\n        \ty_per_div=5,\n        \ty_divs=10,\n        \tref_level=0,\n        \tref_scale=2.0,\n        \tsample_rate=samp_rate,\n        \tfft_size=1024,\n        \tfft_rate=15,\n        \taverage=True,\n        \tavg_alpha=30e-3,\n        \ttitle=\"Spectrum\",\n        \tpeak_hold=False,\n        \twin=window.rectangular,\n        )\n        self.notebook.GetPage(0).Add(self.wxgui_fftsink2_0.win)\n        self.rtlsdr_source_0 = osmosdr.source( args=\"numchan=\" + str(1) + \" \" + \"\" )\n        self.rtlsdr_source_0.set_sample_rate(samp_rate)\n        self.rtlsdr_source_0.set_center_freq(freq, 0)\n        self.rtlsdr_source_0.set_freq_corr(0, 0)\n        self.rtlsdr_source_0.set_dc_offset_mode(0, 0)\n        self.rtlsdr_source_0.set_iq_balance_mode(0, 0)\n        self.rtlsdr_source_0.set_gain_mode(False, 0)\n        self.rtlsdr_source_0.set_gain(20, 0)\n        self.rtlsdr_source_0.set_if_gain(10, 0)\n        self.rtlsdr_source_0.set_bb_gain(5, 0)\n        self.rtlsdr_source_0.set_antenna(\"\", 0)\n        self.rtlsdr_source_0.set_bandwidth(0, 0)\n          \n        self.fft_1 = fft.fft_vcc(1024, True, (window.rectangular(1024)), True, 1)\n        self.blocks_vector_to_stream_0 = blocks.vector_to_stream(gr.sizeof_float*1, 1024)\n        self.blocks_threshold_ff_0 = blocks.threshold_ff(-100, threshold, 0)\n        self.blocks_stream_to_vector_0 = blocks.stream_to_vector(gr.sizeof_gr_complex*1, 1024)\n        self.blocks_nlog10_ff_0 = blocks.nlog10_ff(10, 1, 0)\n        self.blocks_file_sink_0 = blocks.file_sink(gr.sizeof_float*1, \"/media/shashwat/DATA/Q3/Wireless Networking/gnu codes/Outputs/db_498\", False)\n        self.blocks_file_sink_0.set_unbuffered(False)\n        self.blocks_divide_xx_0 = blocks.divide_ff(1)\n        self.blocks_complex_to_mag_squared_0 = blocks.complex_to_mag_squared(1024)\n        self.analog_const_source_x_0 = analog.sig_source_f(0, analog.GR_CONST_WAVE, 0, 0, 1.04858e6)\n\n        ##################################################\n        # Connections\n        ##################################################\n        self.connect((self.analog_const_source_x_0, 0), (self.blocks_divide_xx_0, 1))    \n        self.connect((self.blocks_complex_to_mag_squared_0, 0), (self.blocks_vector_to_stream_0, 0))    \n        self.connect((self.blocks_divide_xx_0, 0), (self.blocks_nlog10_ff_0, 0))    \n        self.connect((self.blocks_nlog10_ff_0, 0), (self.blocks_file_sink_0, 0))    \n        self.connect((self.blocks_nlog10_ff_0, 0), (self.blocks_threshold_ff_0, 0))    \n        self.connect((self.blocks_nlog10_ff_0, 0), (self.wxgui_numbersink2_0, 0))    \n        self.connect((self.blocks_stream_to_vector_0, 0), (self.fft_1, 0))    \n        self.connect((self.blocks_threshold_ff_0, 0), (self.wxgui_numbersink2_1, 0))    \n        self.connect((self.blocks_vector_to_stream_0, 0), (self.blocks_divide_xx_0, 0))    \n        self.connect((self.fft_1, 0), (self.blocks_complex_to_mag_squared_0, 0))    \n        self.connect((self.rtlsdr_source_0, 0), (self.blocks_stream_to_vector_0, 0))    \n        self.connect((self.rtlsdr_source_0, 0), (self.wxgui_fftsink2_0, 0))    \n\n\n    def get_threshold(self):\n        return self.threshold\n\n    def set_threshold(self, threshold):\n        self.threshold = threshold\n        self._threshold_slider.set_value(self.threshold)\n        self._threshold_text_box.set_value(self.threshold)\n        self.blocks_threshold_ff_0.set_hi(self.threshold)\n\n    def get_samp_rate(self):\n        return self.samp_rate\n\n    def set_samp_rate(self, samp_rate):\n        self.samp_rate = samp_rate\n        self.rtlsdr_source_0.set_sample_rate(self.samp_rate)\n        self.wxgui_fftsink2_0.set_sample_rate(self.samp_rate)\n\n    def get_freq(self):\n        return self.freq\n\n    def set_freq(self, freq):\n        self.freq = freq\n        self._freq_slider.set_value(self.freq)\n        self._freq_text_box.set_value(self.freq)\n        self.rtlsdr_source_0.set_center_freq(self.freq, 0)\n        self.wxgui_fftsink2_0.set_baseband_freq(self.freq)\n\n    def get_fft_size(self):\n        return self.fft_size\n\n    def set_fft_size(self, fft_size):\n        self.fft_size = fft_size\n\n\nif __name__ == '__main__':\n    parser = OptionParser(option_class=eng_option, usage=\"%prog: [options]\")\n    (options, args) = parser.parse_args()\n    tb = Output_window()\n    tb.Start(True)\n    tb.Wait()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_substrings(input_string):\n\t# Initializing empty list to contain substrings\n    substrings = []\n    for i in range(len(input_string)+1):\n        for j in range(i+1, len(input_string)+1):\n            # populating the list with substrings\n            substrings.append(input_string[i:j])\n    return substrings\n\n# driver code\nstring = \"codecode\"\nprint(find_substrings(string))\n\n# Output: ['c', 'co', 'cod', 'code', 'codec', 'codeco', 'codecod', 'codecode'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(a,b): \n    if(b==0): \n        return a \n    else: \n        return gcd(b,a%b) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = 'https://example.com'\n\n# Make get request\nr = requests.get(url)\n\n# Check the response status\nif r.status_code == 200:\n print('success')\n\n# Make post request\nr = requests.post(url, data = {'key':'value'})\n\n# Check the response status\nif r.status_code == 200:\n print('success') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\n\nfile_name = sys.argv[1]\nnumber = int(sys.argv[2])\n\nwith open(file_name, 'r') as f:\n for line in f:\n if len(line) < number:\n print(line, end='') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for year in range(start_year, end_year+1):\n    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n        print(year) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_longest_sequence(arr):\n longest = []\n for i in range(len(arr)):\n  current = []\n  for j in range(i, len(arr)):\n   if arr[j] > arr[j-1]:\n    current.append(arr[j])\n    if len(current) > len(longest):\n     longest = current\n  current = []\n return longest\n\narr = [3, 10, 2, 1, 20] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(lst):\n    for i in range(len(lst) - 1):\n        for j in range(i+1, len(lst)):\n            if lst[i] < lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n    return lst but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack(object):\n    def __init__(self):\n        self.items = []\n\n    def is_empty(self):\n        return self.items == []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n\n    def peek(self):\n        return self.items[len(self.items)-1]\n\n    def size(self):\n        return len(self.items) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_domain(url):\n  from urllib.parse import urlparse\n  parsed_uri = urlparse(url)\n  domain = '{uri.netloc}'.format(uri=parsed_uri)\n  return domain\n\ndomain = get_domain(\"https://www.google.com\")\nprint(domain) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_array(A):\n    if len(A) <= 1:\n        return A\n\n    less = []\n    equal = []\n    greater = []\n\n    pivot = A[0]\n    for num in A:\n        if num < pivot:\n            less.append(num)\n        elif num == pivot:\n            equal.append(num)\n        elif num > pivot:\n            greater.append(num)\n\n    return sort_array(less) + equal + sort_array(greater) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(s1, s2):\n    s1 = s1.lower()\n    s2 = s2.lower()\n    if (len(s1) != len(s2)):\n        return False\n    \n    count = {}\n    for i in s1: \n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n\n    for i in s2: \n        if i in count:\n            count[i] -= 1\n        else:\n            return False\n    for i in count: \n        if count[i] != 0: \n            return False\n      \nreturn True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndata = pd.read_csv('stock_data.csv') \nX = data.iloc[:, :-1] \ny = data.iloc[:, -1] \n\nmodel = LinearRegression() \nmodel.fit(X, y) \n\ndef predict_price(prices):\n x = np.array(prices).reshape(1, -1)\n return model.predict(x)[0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n\ndef extract_site_information(url):\n result = requests.get(url)\n soup = BeautifulSoup(result.text, 'html.parser')\n data = []\n for link in soup.find_all('a'):\n if link.get('href'):\n data.append((link.text, link.get('href')))\n return data\n\n\nif __name__ == '__main__':\n url = 'https://en.wikipedia.org/wiki/Web_scraping'\n print(extract_site_information(url)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \nfrom bs4 import BeautifulSoup \n  \ndef crawl(url): \n    r = requests.get(url) \n    html_doc = r.text\n    soup = BeautifulSoup(html_doc, 'html.parser') \n  \n    # find all links on web page \n    links = soup.find_all('a') \n  \n    # filter the link sending with http \n    for link in links: \n        if 'http' in link.get('href'): \n            print(link.get('href')) \n  \n# Driver code \nif __name__ == '__main__': \n    crawl(\"https://www.example.com\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\nimport requests\n \ndef search_engine(query):\n \n # Make a request to the search engine API\n r = requests.get('http://search-engine.com/api/search', params={'query': query})\n \n # Parse the response\n response = json.loads(r.text)\n \n # Return the most relevant result\n return response['results'][0]\n \nsearch_engine('python programming') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_sequence(sequences):\n longest_sequence = sequences[0]\n\n for sequence in sequences:\n if len(sequence) > len(longest_sequence):\n longest_sequence = sequence\n\n return longest_sequence\n\nprint(longest_sequence(sequences))  # ATGATATCATCGATTGTA but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_sentence(sentences):\n    \n    labels = []\n    for sentence in sentences:\n        # add code to classify the sentence\n        # e.g. using a sentiment classifier\n        labels.append(\"positive\" if is_positive(sentence) else \"negative\")\n    \n    return labels but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport bs4\n\nurl = \"YOUR WEBPAGE URL\"\nresponse = requests.get(url)\nsoup = bs4.BeautifulSoup(response.text, 'html.parser')\n\n# Retrieve appropriate data from webpage\ndata = soup.find_all('YOUR TAGS')\n\n# Code to write the data to a file\nwith open('scraped_data.txt', 'w') as file:\n    for item in data:\n        file.write(str(item)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(s1, s2): \n    # Convert both strings to lower case \n    s1 = s1.lower() \n    s2 = s2.lower() \n\n    # Sort both strings \n    s1 = sorted(s1) \n    s2 = sorted(s2) \n\n    if s1 == s2: \n        return True \n    else: \n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\ndef predict_stock_prices(data):\n    # Your code here\n    # ...\n\n    return prediction but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to convert Infix expression to Postfix \ndef infixToPostfix(expression): \n\n# empty list that will store the postfix expression \npostfix = []  \n\n# dictionary containing the precedence value of operators \nprecedence = {'^':3, '*':3, '/':3, '+':2, '-':2, '(':1} \n\n# Stack to store operators \nstack = [] \n\n# Iterate over the expression for conversion \nfor char in expression: \n\n# If an operand is encountered, add it to the list postfix \nif char not in precedence.keys(): \n  postfix.append(char) \n\n# If left parenthesis is encountered, push it onto the stack \nelif char == '(': \n  stack.append(char) \n\n# If right parenthesis is encountered, pop from the  \n# stack, till the corresponding left parenthesis is not found \n# and append all operators to postfix expression \nelif char == ')': \n  temp = stack.pop() \n  while(temp != '('): \n    postfix.append(temp) \n    temp = stack.pop() \n\n# If an operator is encountered, check which operator  \n# has higher precedence, then pop the higher precedence  \n# operator and add it to the postfix expression, then  \n# push the lower precedence operator onto the stack  \nelse: \n  while(len(stack) != 0 and precedence[char] <= precedence[stack[-1]]): \n    postfix.append(stack.pop()) \n  stack.append(char) \n\n# Pop the remaining operators from the stack and add them  \nwhile len(stack) != 0: \n  postfix.append(stack.pop()) \n\nreturn \"\".join(postfix) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: A = [x, y, z]\nB = [a, b, c]\n\nC = []\nfor x,y in zip(A,B):\n    C.append(x)\n    C.append(y)\n\nprint(C) #[x, a, y, b, z, c] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                # swap elements\n                arr[j], arr[j+1] = arr[j+1], arr[j] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def checkSum(arr, target): \n for i in range(len(arr)): \n for j in range(i + 1, len(arr)): \n if arr[i] + arr[j] == target: \n return True\n\n return False\n\nnums = [3, 2, 5, 7]\ntarget = 9\n\nprint(checkSum(nums, target)) # output: True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Euclidean3D:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\nif __name__ == '__main__':\n    point1 = Euclidean3D(1, 2, 3)\n    point2 = Euclidean3D(4, 5, 6) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binaryToDecimals(binary_number):\n  decimal = 0\n  for i, digit in enumerate(reversed(binary_number)):\n    decimal += int(digit) * (2**i)\n  return decimal\n\nprint (binaryToDecimals(\"1010\"))  # Output 10 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combinations(nums):\n  \"\"\"\n Generate all possible combinations of a given set of numbers\n  \n  Args:\n    nums: a list of integers\n \n  Returns:\n    A list of list representing the possible combinations\n  \"\"\"\n  \n  # Base case\n  if len(nums) == 0:\n    return [[]]\n  \n  # Recursive step\n  ans = []\n  for comb in combinations(nums[1:]):\n    for i in range(len(comb)+1):\n      ans.append(comb[:i] + [nums[0]] + comb[i:])\n  return ans\n\n# Call the function with the given input\nprint(combinations(nums)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_even_odd(numbers):\n even_count = 0\n odd_count = 0\n for num in numbers:\n     if num % 2 == 0:\n         even_count += 1\n     else:\n         odd_count += 1\n return even_count, odd_count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPalindrome(s):\n    left = 0 \n    right = len(s)-1 \n      \n    while(left < right ): \n        if (s[left] != s[right]): \n            return False\n        left += 1\n        right -= 1\n    return True\n  \nprint (isPalindrome(\"racecar\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_words(string):\n word_counts = {}\n words = string.split()\n\nfor word in words:\n if word in word_counts:\n word_counts[word] += 1\n else:\n word_counts[word] = 1\n\nreturn word_counts\n\nstring = 'the quick brown fox jumps over the lazy dog'\nword_counts = count_words(string)\nprint(word_counts) # output: {'the': 2, 'quick': 1, 'brown': 1, 'fox': 1, 'jumps': 1, 'over': 1, 'lazy': 1, 'dog': 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_armstrong_number(num): \n    n = len(str(num)) \n      \n    # initialize sum \n    sum = 0 \n  \n    # find the sum of the cube of each digit \n    temp = num \n    while temp > 0: \n        digit = temp % 10\n        sum += digit ** n \n        temp //= 10\n  \n    # if num is equal to the sum,  \n    # then the number is an Armstrong number \n    if num == sum: \n        return True \n    else: \n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class BookSet:\n    def __init__(self):\n        \n        self.books = []\n    \n    def add_book(self, book):\n        self.books.append(book)\n    \n    def sort_by_isbn(self):\n        self.books.sort(key=lambda x: x.isbn)\n\nclass Book:\n    def __init__(self, isbn, title, author):\n        self.isbn = isbn\n        self.title = title\n        self.author = author\n\n# Instantiate the BookSet\nbs = BookSet()\n\n# Add books\nbs.add_book(Book(1234567890, \"Harry Potter\", \"J.K. Rowling\"))\nbs.add_book(Book(11223344, \"Book title\", \"Author name\"))\n\n# Sort by ISBN numbers\nbs.sort_by_isbn() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def areaTriangle(a, b, c): \n    \"\"\"\n    Calculate the area of a triangle.\n    Parameters: \n    a (float): length of side a\n    b (float): length of side b\n    c (float): length of side c\n    \"\"\"\n    s = (a + b + c) / 2.0\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return area\n \na = 3\nb = 4\nc = 5\n \narea = areaTriangle(a, b, c)\nprint(\"The area of the triangle is\", area)  # 6.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_n(n):\n    total = 0\n    for i in range(n+1):\n        total += i\n    return total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef random_string(stringLength=8):\n    letters_and_numbers = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    return ''.join(random.choice(letters_and_numbers) for i in range(stringLength)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(numbers):\n    numbers.sort()\n    return numbers\n\nresult = sort_list([5, 7, 2, 3, 4, 1])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers = [9, 8, 10, 27, 12, 15]\n\ndef filter_div_by_3(numbers):\n    return [num for num in numbers if num % 3 != 0]\n\nfiltered_numbers = filter_div_by_3(numbers)\nprint(filtered_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# Load the dataset \ndf = pd.read_csv('dataset.csv')\n\n# Split the dataset into features and labels\nX = df.drop('label', axis=1).values\ny = df['label'].values\n\n# Train the model\nfrom sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier()\nmodel.fit(X, y)\n\n# Make predictions on the dataset\npredictions = model.predict(X) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \ndef random_element(lst): \n    return random.choice(lst) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_strings(pattern, strings):\n    filtered_strings = [x for x in strings if pattern in x]\n    return filtered_strings\n\nresult = filter_strings('asterisks', [\"daisy\", \"sunflower\", \"asterisk\", \"cat\", \"monkey\"])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nDevelop a tool to detect plagiarism in python programs\n\"\"\"\n\nimport difflib\n\ndef detect_plagiarism(file1, file2):\n    file1_lines = open(file1).readlines()\n    file2_lines = open(file2).readlines()\n\n    similarity = difflib.SequenceMatcher(None, file1_lines, file2_lines).ratio()\n    print(\"Similarity between the two files is : \" + str(similarity*100) + \"%\")\n    if similarity > 0.7:\n        print(\"Highly Plagiarised code!\")\n    elif similarity <= 0.7 and similarity > 0.5:\n        print(\"Moderately Plagiarised Code\")\n    else:\n        print(\"Unique code\")\n\n# Driver Code\ndetect_plagiarism(\"program1.py\", \"program2.py\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for x in [1, 2, 3, 4]:\n    print(x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longestIncreasingSubsequence(list):\n n = len(list)\n maxLength = 0\n\n# Create a list to store the maximum length \n# of the increasing subsequence ending at 'i' \nlengthList = [1] * n\n\n# Compute optimized values in bottom up manner \nfor i in range(1, n):\n for j in range(0, i):\n  if (list[i] > list[j] and lengthList[i] < lengthList[j] + 1):\n   lengthList[i] = lengthList[j] + 1\n\n# Pick maximum of all computed values \nmaxLength = max(lengthList)\n\nreturn maxLength but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Point3D:\n    # constructor to define a point\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    # method to calculate the distance from origin\n    def distance_from_origin(self):\n        return (self.x**2 + self.y**2 + self.z**2)**(1/2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_words(text):\n    words = text.split()\n    return sorted(words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculateSimpleInterest(principal, rate, duration):\n    if rate != 0:\n        interest = (principal * rate * duration) / 100\n    else:\n        interest = 0\n    return interest but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndata = '{\"2017\":2.2,\"2018\":2.4,\"2019\":1.7,\"2020\":0.1}'\n\ninflation_data = json.loads(data)\ninflation_rate = inflation_data[\"2020\"] \nprint(inflation_rate)  # Output: 0.1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def cel_to_fahr(cel):\n    return cel * (9 / 5) + 32\n  \ndef fahr_to_cel(fahr):\n    return (fahr - 32) * (5 / 9) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name, age, subject):\n        self.name = name\n        self.age = age\n        self.subject = subject but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Input number\nn = int(input(\"Enter a number: \"))\n\n# Using format() \nprint(\"The binary equivalent of {} is:\".format(n), format(n, 'b')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add(num1, num2):\n    return num1 + num2\n\nresult = add(5, 7)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_difference(arr):\n  if len(arr) < 2:\n    return 0\n  curr_max = arr[1]-arr[0]\n  min_elem = min(arr[0], arr[1])\n  for i in range(2, len(arr)):\n    curr_max = max(curr_max, arr[i] - min_elem)\n    min_elem = min(min_elem, arr[i])\n  return curr_max\n  \nprint(max_difference([2, 3, 10, 6, 4, 8, 1])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(10, 0, -1):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter\n\n# Create main window.\nmain_window = tkinter.Tk()\nmain_window.title(\"User Data Entry\")\nmain_window.geometry(\"200x100\")\n\n# Create entry boxes\nname_label = tkinter.Label(main_window, text=\"Name\")\nname_label.grid(row=0, column=0, sticky=\"w\")\nname_entry = tkinter.Entry(main_window)\nname_entry.grid(row=0, column=1, sticky=\"w\")\n\nage_label = tkinter.Label(main_window, text=\"Age\")\nage_label.grid(row=1, column=0, sticky=\"w\")\nage_entry = tkinter.Entry(main_window)\nage_entry.grid(row=1, column=1, sticky=\"w\")\n\n# Create button\nsave_button = tkinter.Button(main_window, text=\"Save\")\nsave_button.grid(row=2, column=0, sticky=\"w\")\n\nmain_window.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_capitals(s):\n    count = 0\n    arr = s.split(' ')\n    for word in arr:\n        if word[0].isupper():\n            count += 1\n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\n\ndriver = webdriver.Chrome()\ndriver.get(\"http://example.com\")\nhtml = driver.find_element_by_tag_name('html')\nhtml.send_keys(Keys.CONTROL + Keys.SHIFT + Keys.BACKSPACE)\ndriver.execute_script(\"document.body.style.backgroundColor='\" + color + \"'\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\n# Establish a connection\nconn = sqlite3.connect('population.db')\ncursor = conn.cursor()\n\n# Create the table\ncreate_query = 'CREATE TABLE population_table (country TEXT, population INT)'\ncursor.execute(create_query)\n\n# Insert data\ninsert_query = 'INSERT INTO population_table VALUES (\"USA\", 331000000), (\"Brazil\", 212000000), (\"China\", 1420000000), (\"India\", 1380000000), (\"Russia\", 144000000)'\ncursor.execute(insert_query)\n\n# Commit the changes\nconn.commit()\n\n# Close the connection\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def minimize_difference(list_1, list_2):\n    '''This function takes two lists, lists, \n    and minimizes the differences between them.'''\n    min_diff = float('inf')\n    for i in range(len(list_1)):\n        for j in range(len(list_2)):\n            diff = abs(list_1[i] - list_2[j])\n            if diff < min_diff:\n                min_diff = diff\n    \n    return min_diff but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_angle(angle):\n  if angle == 0:\n    return \"Zero angle\"\n  elif angle > 0 and angle < 90:\n    return \"Acute angle\"\n  elif angle == 90:\n    return \"Right angle\"\n  elif angle > 90 and angle < 180:\n    return \"Obtuse angle\"\n  elif angle == 180:\n    return \"Straight angle\"\n\nresult = classify_angle(angle) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"Write Python script to replace all occurrences of a given letter in a string with another.\"\"\"\n\n# Take a string as an input\nstring = \"fortnite\"\n\n# Replace the target letter with the replacement letter\nnew_string = string.replace(\"t\", \"l\")\n\n# Print the new string\nprint(new_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = 'hello world!'\n\nfreq = {} \nfor i in string: \n    if i in freq: \n        freq[i] += 1\n    else: \n        freq[i] = 1\n\nprint (\"count of all characters in hello world! is :\\n \"\n                    +  str(freq))\n\n# Output would be \ncount of all characters in hello world! is :\n {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1, '!': 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # function to sort the array\ndef sort_nums(arr):\n  # Use Selection Sort Algorithm\n  for i in range(len(arr)):\n    min_index = i\n    for j in range(i+1, len(arr)):\n      if arr[min_index] > arr[j]:\n        min_index = j\n    arr[i], arr[min_index] = arr[min_index], arr[i]\n  \n  return arr\n\n# driver code\narr = [125, 33, 52, 45, 24]\nresult = sort_nums(arr)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_max_value(listOfIntegers):\n maxValue = listOfIntegers[0]\n for num in listOfIntegers:\n if num > maxValue:\n maxValue = num\n return maxValue\n\nprint(get_max_value(listOfIntegers)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_sequence(start, end):\n nums = []\n for i in range(start, end+1):\n nums.append(i)\n return nums\n\nnums = generate_sequence(3, 15)\nprint(nums) // [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_mean(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total / len(numbers)\n    \ndataset = [0.07, 0.69, 0.29, 0.17, 0.11, 0.51, 0.5]\nmean = calculate_mean(dataset)\nprint(mean)  # Output: 0.3542857142857143 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_times_table(x):\n  times_table = []\n  for i in range(10):\n      times_table.append(x * i)\n  return times_table but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_sum(numbers):\n    return sum(numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: function say_hello(name) {\n return `Hello, ${name}!`;\n}\n\nfunction add_two(num) {\n return num + 2;\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def cube_volume(side_length):\n  volume = side_length ** 3\n  return volume but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def unique_chars(s): \n    # Create an empty list \n    unique_list = [] \n      \n    # Intialize index \n    index = 0\n  \n    # Iterate through the string \n    for i in range(len(s)): \n        # Check if the character is present in  \n        # unique_list or not \n        if s[i] not in unique_list: \n            unique_list.append(s[i]) \n              \n    return unique_list \n \n# Driver code \ns = \"aeiou\"\nprint(unique_chars(s)) \n\n# Output\n# ['a', 'e', 'i', 'o', 'u'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_prime_numbers(n):\n    prime_numbers = []\n    for num in range(2, n + 1):\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            prime_numbers.append(num)\n    return prime_numbers\n\nif __name__ == \"__main__\":\n    n = 10\n    prime_numbers = generate_prime_numbers(n)\n    print(prime_numbers) # Output: [2, 3, 5, 7] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_web_page(html, css):\n    html = html.encode('utf-8')\n    css = css.encode('utf-8')\n    html = html.replace(\"<style>\", f\"<style>{css}\")\n    page = f\"\"\"<!DOCTYPE html>\n    <html>\n    <head>\n    <title>Generated web page</title>\n    </head>\n    <body>\n    {html}\n    </body>\n    </html>\"\"\"\n    return page but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def histogram_elements(example_list):\n    histogram = {}\n    for i in example_list:\n        histogram[i] = example_list.count(i)\n    return histogram but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_longest_substring(string):\n    seenChars = set()\n    longestSubstring = ''\n    currentSubstring = ''\n\n    for char in string:\n        if char not in seenChars:\n            seenChars.add(char)\n            currentSubstring += char\n\n            if len(currentSubstring) > len(longestSubstring):\n                longestSubstring = currentSubstring\n        else:\n            seenChars.clear()\n            currentSubstring = ''\n\n    return longestSubstring but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_adjacent(my_list):\n  result = {}\n  \n  for i in range(len(my_list)-1):\n    key = (my_list[i],my_list[i+1])\n    result[key] = my_list[i]+my_list[i+1]\n  \n  return result\n  \nmy_list = [1,4,5,6,10]\n\nprint(sum_adjacent(my_list))\n\n# Output: {(1, 4): 5, (4, 5): 9, (5, 6): 11, (6, 10): 16} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(4):\n    for j in range(4):\n        print(\"*\", end=\" \")\n    print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_frequency(string):\n    counts = {}\n    for char in string:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    return counts but is not the same. just give one example and only return the code."}
