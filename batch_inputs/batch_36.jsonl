{"prompt": "make some code that functions the same as the following code: # Function to count words\ndef word_count(string):\n \n # Create a dictionary to store results\n words = {}\n \n # Split the string into words\n for word in string.split():\n \n  # Check if the word is in the dictionary\n  if word in words:\n   # Increment the count\n   words[word] += 1\n  else:\n   # Add the word to the dictionary\n   words[word] = 1\n \n return words\n\n# Test\nstring = 'This is a test string to count the words in the string.'\nprint(word_count(string)) # Output: {'This': 1, 'is': 1, 'a': 1, 'test': 1, 'string': 2, 'to': 1, 'count': 1, 'the': 1, 'words': 1, 'in': 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from typing import NamedTuple\n\nclass Student(NamedTuple):\n    name: str\n    age: int but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_of_integers.sort() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(s1, s2):\n    # Remove whitespace and make strings lowercase\n    s1 = s1.replace(\" \", \"\").lower()\n    s2 = s2.replace(\" \", \"\").lower()\n\n    # Check lengths. If lengths differ, strings cannot be anagrams\n    if len(s1) != len(s2):\n        return False\n \n    # Check each letter. Strings are anagrams when there is a one-to-one mapping of characters.\n    count = [0] * 26\n    for i in range(len(s1)):\n        index1 = ord(s1[i]) - ord('a')\n        index2 = ord(s2[i]) - ord('a')\n\n        count[index1] += 1\n        count[index2] -= 1\n \n    for i in range(26):\n        if count[i] != 0:\n            return False\n \n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Euclidean_distance(coord1, coord2):\n    x1, y1 = coord1\n    x2, y2 = coord2\n\n    return ((x2-x1)**2 + (y2-y1)**2)**0.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n\n        merge_sort(left)\n        merge_sort(right)\n\n        i = 0\n        j = 0\n        k = 0\n\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n            k += 1\n\n        while i < len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n\n        while j < len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1\n\narr = [3,7,5,2,1]\nmerge_sort(arr)\nprint(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\nlength = 20\nall_chars = string.ascii_letters + string.digits + string.punctuation\n\nrandom_str = ''.join(random.choice(all_chars) for _ in range(length))\n\nprint('Random string of length {}: {}'.format(length, random_str)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add(a, b):\n    return a + b  # remove unnecessary intermediate variable 'c' and return the result directly. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Importing the necessary libraries\nimport random\n\n# Defining the responses for the bot\nquestions = [\"What is your favorite movie?\", \"What is your favorite color?\"]\nresponses = [\"My favorite movie is 'The Godfather'. I love the classic vibe of the movie.\", \n             \"My favorite color is blue. It's soothing and calming to me.\"]\n\n# Function to respond to the questions\ndef respond(user_input):\n    if user_input in questions:\n        return random.choice(responses)\n    else:\n        return \"I'm sorry, I don't understand.\"\n\n# Driver code\nprint(\"Bot: Hi! What can I help you with?\")\nuser_input = input(\"User: \")\n\nwhile user_input != \"bye\":\n    print(\"Bot: \" + respond(user_input))\n    user_input = input(\"User: \")\n\nprint(\"Bot: Bye! It was nice talking to you!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #encoding=utf-8\n\nimport MySQLdb, os\nfrom django.core.checks.registry import Tags\n\ndef insertDomain(db):\n    cursor = db.cursor()\n    sql = \"insert into %(table)s (%(para)s) values ('%(value)s')\"\n    insertValues = {'table' : 'quotation_domain', 'para' : 'name', 'value' : 'CD'}\n    f = open(os.path.dirname(os.path.abspath(__file__)) + os.path.sep + 'domain', 'r+')\n    for line in f.readlines():\n        line = line.strip()\n        if('' != line):\n            insertValues['value'] = line\n            exesql = sql % insertValues\n            cursor.execute(exesql)\n    db.commit()\n    db.close()\n    \ndef insertSubDomain(db):\n    cursor = db.cursor()\n    sql = \"insert into %(table)s (%(para)s) values ('%(value)s')\"\n    insertValues = {'table' : 'quotation_domain', 'para' : 'name', 'value' : 'CD'}\n    insertValues['table'] = 'quotation_subdomain'\n    f = open(os.path.dirname(os.path.abspath(__file__)) + os.path.sep + 'subdomain', 'r+')\n    for line in f.readlines():\n        line = line.strip()\n        if('' != line):\n            insertValues['value'] = line\n            exesql = sql % insertValues\n            cursor.execute(exesql)\n    db.commit()\n    db.close()\n    \ndef insertRegion(db, tableName, valueTag, fileName):\n    cursor = db.cursor()\n    sql = \"insert into %(table)s (%(valueTag)s) values ('%(value)s')\"\n    insertValues = {'table' : tableName, 'valueTag' : valueTag, 'value' : 'xxxxx'}\n    #print sql % insertValues\n    f = open(os.path.dirname(os.path.abspath(__file__)) + os.path.sep + fileName, 'r+')\n    for line in f.readlines():\n        line = line.strip()\n        if('' != line):\n            para = line.split('**')\n            if(len(para) > 1):\n                insertValues['value'] = para[0].strip()\n                cursor.execute(sql % insertValues)\n    db.commit()\n    db.close()\n\ndef insertValuesWithForignKey(db, table, tagValue, tagForKey, f_table, f_tagvalue, fileName = 'unitid'):\n    cursor = db.cursor()\n    sql = \"insert into %(table)s (\" + tagValue + \",\" + tagForKey + \") values ('%(\" + tagValue + \")s', %(\" + tagForKey + \")s)\"\n    insertValues = {'table' : table, tagValue : 'OMS CD', tagForKey : 1}\n    \n    f = open(os.path.dirname(os.path.abspath(__file__)) + os.path.sep + fileName, 'r+')\n    \n    f_id = -1\n    exeTimes = 0\n    for line in f.readlines():\n        exeTimes += 1\n        line = line.strip()\n        if('' != line):\n            para = line.split('**')\n            if(len(para) > 1):\n                f_name = para[0].strip()\n                cursor.execute(\"select id from %s where %s='%s'\" % (f_table, f_tagvalue, f_name))\n                f_id = cursor.fetchone()[0]\n                insertValues[tagValue] = para[1].strip().replace('\\'', \"\\\\'\")\n                insertValues[tagForKey] = f_id\n                print sql % insertValues\n            else:\n                insertValues[tagValue] = para[0].strip().replace('\\'', \"\\\\'\")\n                insertValues[tagForKey] = f_id\n                print sql % insertValues\n            cursor.execute(sql % insertValues)\n        \n        if(exeTimes % 10 == 0):\n            db.commit()\n            #pass\n    db.commit()\n    db.close()\n\ndef insertWorkcenter(db, tableName, fileName, *tags):\n    if(4 != len(tags)):\n        return False\n    else:\n        cursor = db.cursor()\n        sql = \"insert into %(tableName)s (\" + tags[0] + \",\" + tags[1] + \",\" + tags[2] + \",\" + tags[3] + \") values ('%(\" + tags[0] + \")s','%(\" + tags[1] + \")s','%(\" + tags[2] + \")s','%(\"+ tags[3] +\")s')\".encode('utf-8')\n        insertDatas = {\n                       'tableName' : tableName,\n                       tags[0] : '',\n                       tags[1] : '',\n                       tags[2] : '',\n                       tags[3] : ''\n                       }\n        f = open(os.path.dirname(os.path.abspath(__file__)) + os.path.sep + fileName, 'r+')\n        \n        cIndex = 0\n        for line in f.readlines():\n            cIndex += 1\n            if('' != line):\n                para = line.split('**')\n                if(len(para) > 3):\n                    insertDatas[tags[0]] = para[0].strip().replace(\"\\'\", \"\\\\'\").encode('utf-8')\n                    insertDatas[tags[1]] = para[1].strip().replace(\"\\'\", \"\\\\'\").encode('utf-8')\n                    insertDatas[tags[2]] = para[2].strip().replace(\"\\'\", \"\\\\'\").encode('utf-8')\n                    insertDatas[tags[3]] = para[3].strip().replace(\"\\'\", \"\\\\'\").encode('utf-8')\n                    #print (sql % insertDatas).encode('utf-8')\n                    cursor.execute((sql % insertDatas).encode('utf-8'))\n            if(cIndex % 10 == 0):\n                db.commit()\n        db.commit()\n        db.close()\n\ndef insertPostatus(db, fileName):\n    cursor = db.cursor()\n    sql = \"insert into quotation_postatus (name) values ('%s')\"\n    f = open(os.path.dirname(os.path.abspath(__file__)) + os.path.sep + fileName, 'r+')\n    for line in f.readlines():\n        line = line.strip()\n        if('' != line):\n            exesql = sql % line\n            cursor.execute(exesql)\n    db.commit()\n    db.close()\n\ndef insertOrderingcompany(db, fileName):\n    cursor = db.cursor()\n    sql = \"insert into quotation_orderingcompany (name) values ('%s')\"\n    f = open(os.path.dirname(os.path.abspath(__file__)) + os.path.sep + fileName, 'r+')\n    \n    cIndex = 0\n    for line in f.readlines():\n        cIndex += 1\n        line = line.strip()\n        if('' != line):\n            exesql = sql % line\n            #print exesql\n            cursor.execute(exesql)\n        if( 0 == cIndex % 10):\n            db.commit()\n    db.commit()\n    db.close()\n\nif __name__ == '__main__':\n    host = \"localhost\"\n    passwd = \"tatool\"\n    user = \"tatool\"\n    dbname = \"eeep\"\n    db = MySQLdb.connect(host=host, user=user, passwd=passwd, db=dbname)\n    \n    #insertDomain(db)\n    #insertSubDomain(db)\n    #insertValuesWithForignKey(db, 'quotation_unitid', 'name', 'domain_id', \"quotation_domain\", \"name\")\n    #insertRegion(db, 'quotation_region', 'name', 'regionandcountry')\n    #insertValuesWithForignKey(db, 'quotation_country', 'name', 'region_id', \"quotation_region\", \"name\", 'regionandcountry')\n    #insertWorkcenter(db, 'quotation_workcenter', 'workcenter', 'number', 'descworkcenter', 'icrrbactivitytype', 'intracompanyactivitytyoe')\n    #insertPostatus(db, 'postatus')\n    insertOrderingcompany(db, 'orderingcompany')\n    \n    \n     but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def translate(word):\n vowels = ('a', 'e', 'i', 'o', 'u')\n consonants = ('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\n 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z')\n\nif word[0] in vowels:\n new_word = word + 'ay'\n\nelif word[0] in consonants:\n new_word = word[1:] + word[0] + 'ay'\n\nelse:\n new_word = word\n\nreturn new_word\n\n# Test\nsentence = 'My name is John'\n\nwords = sentence.split(' ')\npig_latin = [translate(word) for word in words]\npig_latin_sentence = ' '.join(pig_latin)\n\nprint(pig_latin_sentence)\n\n# Output: yMay amenay isay ohnJay but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def eval_expr(expr):\n    return eval(expr)\n\nprint(eval_expr(\"2 * (3 + 4)\"))\n# 14 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n    def __init__(self, name, address, phone_number):\n        self.name = name\n        self.address = address\n        self.phone_number = phone_number\n    \n    def get_name(self):\n        return self.name\n    \n    def get_address(self):\n        return self.address\n    \n    def get_phone_number(self):\n        return self.phone_number but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # imports\nfrom flask import Flask, render_template, request\n\n# init app\napp = Flask(__name__)\n\n# set route\n@app.route('/', methods=['POST', 'GET'])\ndef index():\n if request.method == 'POST':\n  data = request.form['data']\n  counts = {}\n  for char in data:\n   if char in counts:\n    counts[char] += 1\n   else:\n    counts[char] = 1\n  \n  return render_template('index.html', counts=counts)\n else:\n  return render_template('index.html')\n\n# run app \nif __name__ == '__main__':\n app.run(debug=True)\n\nAnd for the index.html template:\n<html>\n <head>\n  <title>Letter Counter</title>\n </head>\n <body>\n  <h1>Letter Counter</h1>\n  <form method=\"POST\">\n   <input type=\"text\" name=\"data\">\n   <input type=\"submit\" value=\"Submit\">\n  </form>\n \n  {% if counts %}\n   <h2>Results</h2>\n   {% for key, val in counts.items() %}\n    <p>{{ key }}: {{ val }}</p>\n   {% endfor %}\n  {% endif %}\n </body>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_product_of_two(arr):\n    n = len(arr)\n    if n == 0:\n        return None\n\n    max_val1 = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_val1:\n            max_val1 = arr[i]\n\n    max_val2 = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_val2 and arr[i] != max_val1:\n            max_val2 = arr[i]\n\n    return max_val1 * max_val2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\ndf = pd.read_csv('email_dataset.csv')\n\n#Create feature vectors\nfrom sklearn.feature_extraction.text import CountVectorizer\n\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(df['email'])\n\n#Train the data with Naive Bayes\nfrom sklearn.naive_bayes import MultinomialNB\n\nmodel = MultinomialNB()\nmodel.fit(X, df['label'])\n\n#Test the model\nspam_predictions = model.predict(X)\nprint(spam_predictions) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \nimport string\n\ndef random_string(string_length):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(string_length))\n\nstring_length = 10\nprint(\"Random String of length\", string_length, \"is:\", random_string(string_length)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def matrix_multiply(matrixA, matrixB):\n    if len(matrixA[0]) != len(matrixB):\n        print(\"Error: The number of columns of matrix A is not equal to the number of rows of matrix B\")\n        return\n \n    m, n, p = len(matrixA), len(matrixA[0]), len(matrixB[0])\n    result = [[0 for i in range(p)] for j in range(m)]\n    # multiplying matrix A and matrix B \n    for i in range(m): \n        for j in range(p): \n            for k in range(n):\n                result[i][j] += matrixA[i][k] * matrixB[k][j]\n  \n    return result\n\n# Example\nmata = [[2, 4, -3], \n        [6, 1, 0]] \nmatb = [[1, -1],  \n        [2, 0], \n        [3, 4]]\n\nres = matrix_multiply(mata, matb)\n\nfor row in res:\n   print(row)\n\n# Output\n# [4, -4] \n# [24, 12] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\ndef solve_equation(eqn):\n    eqn_parts = eqn.split(' ')\n\n    # co-efficients of x and y\n    a = int(eqn_parts[0].replace('x', ''))\n    b = int(eqn_parts[2].replace('y', ''))\n\n    # RHS value\n    c = int(eqn_parts[4])\n\n    # solving the equation\n    x = (c - (b * 3)) / (2 * a)\n    y = (5 - (2 * x)) / 3\n\n    return x, y\n\n\nif __name__ == '__main__':\n    eqn = '2x + 3y = 5'\n    x, y = solve_equation(eqn)\n\n    print(f'Equation: {eqn}\\n')\n    print(f'x = {x}')\n    print(f'y = {y}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\ndef add_node(head, new_data):\n    new_node = Node(new_data)\n    if head is None:\n        head = new_node\n    else:\n        last = head\n        while(last.next):\n            last = last.next\n        last.next = new_node\n    return head but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def searchElement(arr, x): \n    for i in range(len(arr)): \n        if arr[i] == x: \n            return i\n    return -1\n    \narr = [2, 4, 6, 8]\nx = 8\n\nresult = searchElement(arr, x) \n\nif(result == -1): \n  print(\"Element is not present in array\") \nelse: \n  print(\"Element is present at index\", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_first_occurrence(test_string, target_string): \n    # Search for the first occurrence of target_string \n    # within the test_string\n    return test_string.find(target_string) \n  \n# Driver code \ntest_string = \"This is just a sample string to test out search within a string program\"\ntarget_string = \"Within\"\n\n# print the first occurrence of target_string within test_string \nprint(find_first_occurrence(test_string, target_string)) \n\n# Output: \n39  # The index of the first occurrence of the substring within the string. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\n# parse file\ndata = json.loads(json_string)\n\n# get values\nname = data[\"name\"]\nage = data[\"age\"]\ncity = data[\"city\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def extract_odd(arr):\n    odd = [x for x in arr if x % 2 != 0]\n    return sorted(odd, reverse = True)\n\narr = [1, 8, 5, 9, 12, 17]\nprint(extract_odd(arr)) # Output: [17, 9, 5, 1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [\"hello\", \"world\", \"python\"]\nprefix = \"Programming - \"\n\n# Insert the prefix to all items in the list\nnew_list = [prefix + item for item in my_list]\n\nprint(new_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def normalize(arr):\n    minVal = min(arr)\n    maxVal = max(arr)\n    normalizedArr = [(x - minVal) / (maxVal - minVal) for x in arr]\n    return normalizedArr\n\nresult = normalize([3, 4, 6, 8, 10])\nprint(result)  // [0.0, 0.2, 0.4, 0.6, 0.8] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python3\n# Copyright (c) 2017  Genome  Research  Ltd.\n# Author: Alistair Dunham\n# This  program  is free  software: you  can  redistribute  it and/or  modify  it  under\n# the  terms  of the  GNU  General  Public  License  as  published  by the  Free  Software\n# Foundation; either  version 3 of the  License , or (at your  option) any  later\n# version.\n# This  program  is  distributed  in the  hope  that it will be useful , but  WITHOUT\n# ANY  WARRANTY; without  even  the  implied  warranty  of  MERCHANTABILITY  or  FITNESS\n# FOR A PARTICULAR  PURPOSE. See  the  GNU  General  Public  License  for  more\n# details.\n# You  should  have  received a copy of the  GNU  General  Public  License  along  with\n# this  program. If not , see <http :// www.gnu.org/licenses/>.\n\n## Script to convert bedtools cluster output of merged breakdancer calls into a feature table\n## which has columns for each sample indicating the presence of each deletion\nimport argparse\nimport fileinput\nimport re\n\n## Read arguments\nparser = argparse.ArgumentParser(description=\"Transform bedtools cluster output for deletion calls into a feature table of 'genotypes'.\")\nparser.add_argument('tenx',metavar='T',type=str,help=\"Bed file containing clustered deletion calls\")\nparser.add_argument('--bd','-b',action='store_true',help=\"Expect BreakDancer formatted IDs. Otherwise expect 10X formatted IDs.\")\nargs = parser.parse_args()\n\n## Determine function to use for setting sample ID depending on given source format\nif args.bd:\n\tdef getSample(x):\n\t\t\"\"\"Extract sample from BreakDancer formatted ID tags\"\"\"\n\t\treturn(re.split(\"[_.]\",x)[-2])\nelse:\n\tdef getSample(x):\n\t\t\"\"\"Extract sample from 10X formatted ID tags\"\"\"\n\t\treturn(x.split('.')[0])\n\t\n\n## Extract each deletion call and its cluster number\ndels = []\nsamples = set()\nwith fileinput.input(args.tenx) as bed:\n\tfor li in bed:\n\t\tt = li.strip().split()\n\t\ts = getSample(t[3])\n\t\tn = int(t[4])\n\t\tsamples.add(s)\n\t\tif len(dels) < n:\n\t\t\tdels.append(set([s]))\n\t\t\n\t\telse:\n\t\t\tdels[n - 1].add(s)\n\n\n## Print feature table\nsamples = sorted(list(samples))\nprint(\"Deletion\",*samples,sep='\\t')\nfor n,delSamples in enumerate(dels):\n\t## generate feature string\n\tfeats = [(1 if i in delSamples else 0) for i in samples]\n\tprint('_'.join([\"del\",str(n + 1)]),*feats,sep='\\t')\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: input_list = ['a', '', 'b', '', 'c']\n\nfor i, val in enumerate(input_list):\n    if val == '':\n        input_list[i] = input_list[i-1]\n\nprint(input_list) # ['a', 'a', 'b', 'b', 'c'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Create a game in Python that involves the user's personal preferences. The game should allow the user to input their interests, goals, and preferences to produce a dynamic and personalised experience. The game should use a combination of text, graphics and sounds to create an engaging and immersive experience. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a method in Python which prints the frequency of each letter in a string\n\"\"\"\n\n# Function to print frequency of characters in a string  \ndef characterFrequency(text): \n    count = [0 for i in range(256)] \n    output = [] \n  \n    # count frequency of each character  \n    # in string \n    for i in range(len(text)):  \n        count[ord(text[i])] += 1\n  \n    # Print characters and their frequencies \n    for i in range(len(count)): \n        if count[i] > 0: \n            output.append((chr(i), count[i]))\n    output.sort(key=lambda x:x[1], reverse=True)\n    \n    for i in output: \n        print(i[0], '-', i[1])\n  \n# Driver code\ntext = \"hello world\"\ncharacterFrequency(text)\n\n# Output:\n# l - 3\n# o - 2\n# h - 1\n# e - 1\n# d - 1\n# r - 1\n# w - 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n    def __init__(self, Name, Age, Gender):\n        self.Name = Name\n        self.Age = Age\n        self.Gender = Gender but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import PorterStemmer, WordNetLemmatizer\nfrom nltk.corpus import stopwords\n\ntext = 'The brown bear walked in the woods, searching for a nut to snack on.'\n\ntokens = word_tokenize(text)\n\nstemmer = PorterStemmer()\nlemmatizer = WordNetLemmatizer()\n\npunctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n\npunct_tokens = [word for word in tokens if word not in punctuations]\nstop_words = set(stopwords.words('english'))\n\ncleaned_tokens = [word for word in punct_tokens if word not in stop_words]\n\nstemmed_tokens = [stemmer.stem(word) for word in cleaned_tokens]\n\nlemmatized_tokens = [lemmatizer.lemmatize(word) for word in stemmed_tokens]\n\nprint(lemmatized_tokens) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def word_count(sentence,word):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0word_count=0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0words=sentence.split(\" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for w in words:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(w==word):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0word_count+=1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return word_count\n\n\nsentence = \"She sells sea shells on the sea shore\"\nword = \"sea\"\nres = word_count(sentence, word) \nprint(res) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/bin/bash\n\n# Update existing packages\nsudo apt-get update\n# Install pip3\nsudo apt-get install python3-pip\n# Install the necessary packages\npip3 install jupyter notebook\n# Install virtual environment\npip3 install virtualenv\n# Create a virtual environment in the current directory\nvirtualenv notebook-env\n# Activate the virtual environment\nsource notebook-env/bin/activate\n# Upgrade pip and jupyter inside the virtual environment\npip3 install --upgrade pip jupyter\n# Make jupyter launchable from inside the virtual environment\npython3 -m ipykernel install --user\n\n# To exit from the virtual environment\ndeactivate but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def to_ascii(s): \n  ascii_list = [] \n    \n  # traverse the string character \n  # by character  \n  for char in s: \n      # cast each character into its corresponding ASCII code value \n      ascii_list.append(ord(char)) \n      \n  return ascii_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def create_html_table(slist):\n    table_html = \"<table>\"\n    for str in slist:\n        table_html += \"<tr>\"\n        table_html += \"<td>\" + str + \"</td>\" \n        table_html += \"</tr>\"\n\n    table_html += \"</table>\"\n    return table_html but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_dictionaries(d1, d2):\n  for key in d1:\n    if key not in d2 or d1[key] != d2[key]: \n      return False\n  return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(arr):\n    for i in range(len(arr)):\n\t\tfor j in range(len(arr)-1-i):\n\t\t\tif arr[j] > arr[j+1]:\n\t\t\t\ttemp = arr[j]\n\t\t\t\tarr[j] = arr[j+1]\n\t\t\t\tarr[j+1] = temp\n\t\t\t\t\narr = [6, 2, 5, 1, 8]\n\nbubble_sort(arr)\n\nprint(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_string(dict, keyword):\n    # iterate through the dictionary\n    for key, value in dict.items():\n        # check if the keyword is present in the value of the dictionary\n        if keyword in value:\n            return key\n    # if keyword not found in dictionary\n    return \"Not found\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n \nnouns = [\"car\", \"cat\", \"dog\", \"woman\"]\nverbs = [\"drove\", \"meowed\", \"barked\", \"laughed\"]\n\ndef generate_sentence():\n    random_int1 = random.randint(0, 3)\n    random_int2 = random.randint(0, 3)\n    sentence = f\"The {nouns[random_int1]} {verbs[random_int2]}.\"\n    return sentence\n\ngenerate_sentence() #returns e.g. \"The car meowed.\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# load the dataset\ndata = pd.read_csv('data.csv')\n\n# display information about the dataset\ndata.info()\n\n# observe the first five rows\ndata.head()\n\n# list all columns\ndata.columns \n\n# display summary statistics\ndata.describe() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_string = \"Python is an interesting language\"\n\n# create an empty dictionary\ndi = {}\n\n# iterate through each character\nfor char in my_string:\n    # check if the character is already present in the dict\n    if char in di.keys():\n        # if present, increment the value of the character\n        di[char] += 1\n    else:\n        # if not present, set the value to 1\n        di[char] = 1\n\n# find the character with the maximum count\nmax_char = max(di, key=di.get)\n\n# display the maximum occurring character\nprint(f\"Maximum occurring character is: {max_char}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def rearrange_chars(string):\n    char_list = list(string)\n    for i in range(len(char_list)):\n        for j in range(i + 1, len(char_list)):\n            if char_list[i] == char_list[j]:\n                char_list.insert(j, '_')\n    return \"\".join(char_list).replace('_', '') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from bs4 import BeautifulSoup\nimport requests\nimport re\n\n\ndef getTopSites():\n url = 'https://www.alexa.com/topsites'\n response = requests.get(url)\n soup = BeautifulSoup(response.text, 'html.parser')\n \n table = soup.find('table')\n \n table_rows = table.find_all('tr')\n \n top_websites = []\n \n for row in table_rows:\n \n cols = row.find_all('td')\n \n if cols != []:\n website_name = cols[1].text\n website_rank = re.sub('[^0-9]', '', cols[0].text) \n \n top_websites.append({\n 'name': website_name,\n 'alexa_rank': website_rank\n })\n \n return top_websites\n \n \nif __name__ == '__main__':\n print(getTopSites()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Load the Iris dataset\nX, y = load_iris(return_X_y=True)\n\n# Create a training and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=21, stratify=y)\n\n# Fit the model using K-Nearest Neighbors classifier\nknn = KNeighborsClassifier(n_neighbors=8)\nknn.fit(X_train, y_train)\n\n# Make predictions on the test set\ny_pred = knn.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_coins(coins, change):\n\tmin_coins = change\n\tif change in coins:\n\t\treturn [change]\n\n\tfor i in [c for c in coins if c <= change]:\n\t\tnum_coins = 1 + get_coins(coins, change-i)\n\t\tif len(num_coins) < min_coins:\n\t\t\tmin_coins = num_coins\n\treturn min_coins\n\n# Test \ncoins = [1, 6, 10]\nchange = 8\nprint(get_coins(coins, change)) # [1, 6, 1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password(length):\n charPool = string.ascii_letters + string.digits\n password = ''.join(random.sample(charPool,length))\n return password\n\npassword = generate_password(8)\nprint(password) # e.g. hg6bs2Vu but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(arr):\n new_arr = [] \n for num in arr: \n if num not in new_arr:\n new_arr.append(num) \n return new_arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: input_list = [10, 20, 30, 10, 40, 20]\nunique_list = list(dict.fromkeys(input_list))\nprint(unique_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: a = 5\nb = 10\nc = a + b\n\nprint(c) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Importing essential libraries\nimport os\nimport sys\n \n# start a new Django project\nfrom django.core.management import execute_from_command_line\n \n# check the requirements.txt file to get the list of libraries \nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"my_app.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nImplement a function in Python to convert a pascal triangle to a 2D list\n\"\"\"\ndef pascal_to_list(pascal):\n    lines = pascal.split('\\n')\n    # convert list of strings to list of lists\n    table = [[int(i) for i in line.split()] for line in lines]\n    return table\n\nif __name__ == \"__main__\":\n    pascal = \"\"\"\n    1 \n    1 1\n    1 2 1\n    1 3 3 1\n    1 4 6 4 1\n    \"\"\"\n    print(pascal_to_list(pascal)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import io\nimport os\n\n# Imports the Google Cloud client library\nfrom google.cloud import vision\n\n# Instantiates a client\nclient = vision.ImageAnnotatorClient()\n\n# The name of the image file to annotate\nfile_name = 'park.jpg'\n\n# Loads the image\nwith io.open(file_name, 'rb') as image_file:\n content = image_file.read()\n\nimage = vision.types.Image(content=content)\n\n# Performs label detection on the image file\nresponse = client.label_detection(image=image)\nlabels = response.label_annotations\n\nprint('Labels:')\nfor label in labels:\n print(label.description)\n\n# Performs object detection\nresponse = client.object_localization(image=image)\nobjects = response.localized_object_annotations\n\nprint('Objects:')\nfor object_ in objects:\n print(object_.name) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def move_greater_elements(arr):\n    left_pointer = 0\n    right_pointer = len(arr) - 1\n    while left_pointer < right_pointer:\n        while arr[left_pointer] < 5:\n            left_pointer += 1\n        while arr[right_pointer] >= 5 and right_pointer > left_pointer:\n            right_pointer -= 1\n        arr[left_pointer], arr[right_pointer] = arr[right_pointer], arr[left_pointer]\n    return arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_common_elements(list1, list2):\n    result = []\n    for val in list1:\n        if val in list2:\n            result.append(val)\n    return result\n\nlist1 = [1, 2, 3, 4]\nlist2 = [3, 4, 5, 6]\n\nresult = find_common_elements(list1, list2)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Calculator:\n \n def __init__(self):\n  pass\n \n def add(self, a, b):\n  return a + b\n \n def subtract(self, a, b):\n  return a - b\n \n def divide(self, a, b):\n  return a / b\n \n def multiply(self, a, b):\n  return a * b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [1, 10, 5, 6, 9, 8, 20]\n\ndef largest_number(arr):\n  largest = arr[0]\n  for num in arr:\n    if num > largest:\n      largest = num\n\n  return largest\n\nlargest = largest_number(arr)\nprint(largest) # 20 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def BinaryToDecimal(binary): \n    binary1 = binary \n    decimal, i, n = 0, 0, 0\n    while(binary != 0): \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary//10\n        i += 1\n    return decimal \n  \n# Driver code \nbinary = 101010\nprint(BinaryToDecimal(binary)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: keys = list_of_dicts[0].keys()\nfor dicts in list_of_dicts:\n    print('-'*20)\n    for k in keys:\n        print(f\"{k}: {dicts[k]}\")\n    print('-'*20) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: @app.route(\"/users\", methods=[\"GET\"])\ndef get_users():\n    users = User.query.order_by(User.last_name).all()\n    return jsonify([user.serialize() for user in users]), 200 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_common(lst):\n    lst_set = set(lst)\n    max_val = -1\n    max_item = None\n    most_common_num = []\n    for x in lst_set:\n        item_count = lst.count(x)\n        if max_val < item_count:\n            max_val = item_count\n            max_item = x\n            if len(most_common_num) == 3:\n                most_common_num.pop(0)\n            most_common_num.append(x)\n    return most_common_num\n  \na = [1, 4, 2, 6, 7, 5, 1, 10, 4]\nmost_common_elements = most_common(a)\nprint(\"The most common 3 elements are:\", most_common_elements) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef rock_paper_scissors():\n  \n    choices = ['rock', 'paper', 'scissors']\n    while True:\n        player_choice = input(\"Choose rock, paper, or scissors: \")\n        if player_choice not in choices:\n            print(\"Invalid choice! Please choose again.\")\n            continue\n\n        computer_choice = random.choice(choices)\n        print(\"The computer chose\", computer_choice)\n\n        if player_choice == computer_choice:\n            print(\"It's a draw!\")\n        elif (player_choice == 'rock' and computer_choice == 'scissors') or (player_choice == 'paper' and computer_choice == 'rock') or (player_choice == 'scissors' and computer_choice == 'paper'):\n            print(\"You win!\")\n        else:\n            print(\"You lose!\")\n        break but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def select_users_male_age_above_20(users):\n    output = []\n    for user in users:\n        if user['gender'] == 'M' and user['age'] >= 20:\n            output.append({'id':user['id'], 'name':user['name']})\n    return output but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Read data\ndata = pd.read_csv('data.csv')\n\n# Preprocess data\nfeatures = data.drop('Attrition', axis=1)\nle = LabelEncoder()\ntarget = le.fit_transform(data['Attrition'])\n\n# Split data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=0)\n\n# Build Decision Tree classifier\nclf = DecisionTreeClassifier()\nclf.fit(X_train, y_train)\n\n# Make predictions on the test set\ny_pred = clf.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def closest_sum(array, target):\n  diff = float('inf')\n  for i in range(len(array) - 1):\n    for j in range(i + 1, len(array)):\n      pair_sum = array[i] + array[j]\n      if abs(target - pair_sum) < diff:\n        diff = abs(target - pair_sum)\n        result = [array[i], array[j]]\n  return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \nimport math\n\ndef random_mixture(mean1, mean2, stddev1, stddev2, N):\n    data = []\n    for _ in range(N):\n        if random.random() < 0.5:\n            data.append(random.normalvariate(mean1, stddev1))\n        else:\n            data.append(random.normalvariate(mean2, stddev2))\n    return data but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \n  \ndef getFileData(url):\n  # Get binary data\n  r = requests.get(url)\n  return r.content\n\nurl = \"https://example.com/sample.txt\"\ndata = getFileData(url)\n\nprint(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(nums):\n for i in range(len(nums)-1):\n for j in range(i+1, len(nums)):\n if nums[i] > nums[j]:\n nums[i], nums[j] = nums[j], nums[i]\n\nnums = [5,3,2,4]\nbubble_sort(nums)\nprint(nums)\n\n# Output\n[2,3,4,5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a function which reverses the characters in a string\n\"\"\"\n\ndef reverse_string(string):\n    reversed_string = \"\"\n    for i in range(len(string) -1, -1, -1):\n        reversed_string += string[i]\n    return reversed_string\n\nstring = \"Python\"\nreversed_string = reverse_string(string)\n\nprint(\"The original string is:\", string)\nprint(\"The reversed string is:\", reversed_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Statistics:\n    def __init__(self):\n        self.scores = []\n\n    def add_score(self, score):\n        self.scores.append(score)\n\n    def mean(self):\n        return sum(self.scores) / len(self.scores)\n\n    def variance(self):\n        mean = self.mean() \n        return sum((x - mean) ** 2 for x in self.scores) / len(self.scores)\n\n    def median(self):\n        self.scores.sort()\n        mid = len(self.scores) // 2\n        if len(self.scores) % 2 == 0:\n            median = (self.scores[mid - 1] + self.scores[mid]) / 2\n        else:\n            median = self.scores[mid]\n        return median\n\n    def mode(self):\n        mode = []\n        nums = {} \n        for num in self.scores: \n            if num in nums: \n                nums[num] += 1\n            else: \n                nums[num] = 1\n  \n        max_freq = max(nums.values()) \n  \n        for num in nums: \n            if nums[num] == max_freq: \n                mode.append(num) \n\n        return mode but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printEvenNumbers(num):\n for n in range(2, num+1):\n if n%2 == 0:\n print(n)\n\nprintEvenNumbers(50) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(num: int):\n if num < 0:\n  return \"Error: Must be a positive integer\"\n elif num <= 1:\n  return 1\n else:\n  return num * factorial(num-1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Sort the given dictionary by value \nimport operator\n \nd = {'a':3, 'b':1, 'c':5, 'd':4, 'e':2}\nsorted_d = sorted(d.items(), key=operator.itemgetter(1),reverse=True)\n \nprint(sorted_d)\n\n// Output: [('c', 5), ('d', 4), ('a', 3), ('e', 2), ('b', 1)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import flask\n\napp = flask.Flask(__name__)\n\n@app.route('/cities?latitude=<float:latitude>&longitude=<float:longitude>&radius=<float:radius>', methods=['GET'])\ndef cities(latitude, longitude, radius):\n    ... \n    cursor.execute(SELECT * from city WHERE distance(latitude, longitude, %s, %s) < %s, (latitude, longitude, radius))\n    cities = cursor.fetchall()\n    return flask.jsonify(cities)\n\nif __name__ == '__main__':\n    app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_most_frequent(numbers):\n    frequency_dict = {}\n    for n in numbers:\n        if n in frequency_dict:\n            frequency_dict[n] += 1\n        else:\n            frequency_dict[n] = 1\n            \n    max_frequency = 0\n    most_frequent = 0\n    for k, v in frequency_dict.items():\n        if v > max_frequency:\n            max_frequency = v\n            most_frequent = k\n            \n    return most_frequent\n    \n# Usage\nnumbers = [1, 2, 3, 1, 2, 2]\nmost_frequent = find_most_frequent(numbers)\nprint(most_frequent) # Outputs 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def separate_list(numbers):\n    prime_nums = []\n    composite_nums = []\n    odd_even_nums = []\n\n    for num in numbers:\n        if num == 1:\n            prime_nums.append(num)\n        elif all([num % i != 0 for i in range(2,num)]):\n            prime_nums.append(num)\n        else:\n            composite_nums.append(num)\n        if num % 2 == 0:\n            odd_even_nums.append(num)\n        else: \n            odd_even_nums.append(num)\n    return prime_nums, composite_nums, odd_even_nums but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_pattern(n): \n  \n    # outer loop to handle number of rows \n    for i in range(1,n+1): \n      \n        # inner loop to handle number of columns \n        for j in range(1,i+1): \n          \n            # printing stars \n            print('* ', end=\"\") \n       \n        # ending line after each row \n        print(\"\\r\") \n  \n# Driver Code \nn = 3\nprint_pattern(n)\n\nOutput:\n* \n* * \n* * * but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from google.cloud import texttospeech\n\n# Create a client\nclient = texttospeech.TextToSpeechClient()\n\n# Construct the request\ntext = 'Hello World!'\nsynthesis_input = texttospeech.types.SynthesisInput(text=text)\nvoice = texttospeech.types.VoiceSelectionParams(\n language_code='en-US',\n ssml_gender=texttospeech.enums.SsmlVoiceGender.FEMALE)\n\n# Select the type of audio file you want returned\naudio_config = texttospeech.types.AudioConfig(\n audio_encoding=texttospeech.enums.AudioEncoding.MP3)\n\n# Perform the text-to-speech request\nresponse = client.synthesize_speech(synthesis_input, voice, audio_config)\n\n# Write the response to an audio file\nwith open('output.mp3', 'wb') as out:\n out.write(response.audio_content)\n print('Audio content written to file \"output.mp3\"') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from math import sqrt\n\ndef calcDistance(p1, p2):\n    return sqrt( (p2[0] - p1[0])**2 + (p2[1] - p1[1])**2 )\n\npoint1 = [2, 4]\npoint2 = [10, 6]\n\ndistance = calcDistance(point1, point2)\nprint(\"Distance between the two points is\", distance) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: a = \"test\"\nb = \"test\"\n\nif a == b:\n  print(\"true\")\nelse:\n  print(\"false\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n    \"\"\"Class to represent an employee\"\"\"\n    def __init__(self, name, age, salary):\n        \"\"\"Initialize the employee\"\"\"\n        self.name = name\n        self.age = age\n        self.salary = salary\n    \n    def get_details(self):\n        \"\"\"Print the details of the employee\"\"\"\n        print('Name:', self.name)\n        print('Age:', self.age)\n        print('Salary:', self.salary) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Python code\n\narr = [13, 18, 25, 1, 7, 23, 12]\n\ntime_start = time.time()\n# Optimized code\narr.sort()\n\ntime_end = time.time()\nprint(f'Time taken: {time_end - time_start} seconds') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\na = 1\nb = 5\nc = 6\n\n# calculate the discriminant\nd = (b**2) - (4*a*c)\n\n# find the two solutions \nsol1 = (-b-math.sqrt(d))/(2*a)\nsol2 = (-b+math.sqrt(d))/(2*a)\n\nprint('The solutions are {0} and {1}'.format(sol1, sol2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def cumulative_sum(nums):\n sums = []\n current_sum = 0\n \n for n in nums:\n current_sum += n\n sums.append(current_sum)\n \n return sums\n \nprint(cumulative_sum([1, 2, 3, 4]))    # [1, 3, 6, 10] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isArmstrongNumber(n):\n    length = len(str(n))\n    total = 0\n\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        total += digit ** length\n        temp //= 10\n    return n == total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_common_substring(s1, s2):\n    longest_length = 0\n    longest_substring = \"\"\n\n    for i in range(min(len(s1), len(s2))):\n        substr = s1[i]\n\n        for j in range(i + 1, min(len(s1), len(s2))):\n            if s2[j] == s1[i]:\n                substr += s1[j]\n\n            if len(substr) > longest_length and substr in s2:\n                longest_length = len(substr)\n                longest_substring = substr\n\n    return longest_substring\n\nresult = longest_common_substring('string', 'longest')\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nx = random.randint(1, 10)\ny = random.randint(1, 10)\nz = random.randint(1, 10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_largest_number(list):\n largest = list[0]\n for number in list:\n if number > largest:\n largest = number\n return largest\n\nlist = [7, 2, -4, 5, 8, 1]\nprint(find_largest_number(list))\n# Output: 8 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_password(length):\n    \"\"\"Generate a random password of given length\n    Args:\n        length (int): The length of the password to generate.\n    Returns:\n        str: The generated password.\n    \"\"\"\n    password_characters = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(password_characters) for i in range(length)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef random_list(start, end, size):\n    rand_list = []\n    \n    for i in range(size):\n        rand_num = random.choice(range(start, end))\n        while rand_num in rand_list:\n            rand_num = random.choice(range(start, end))\n        rand_list.append(rand_num)\n    \n    return rand_list\n\nstart = 2\nend = 10\nsize = 5\nrandom_list_result = random_list(start, end, size)\nprint(random_list_result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def all_words_beginning_with(str, alphabet):\n  words = str.split()\n  result = []\n  for word in words:\n    if word[0].upper() == alphabet.upper():\n      result.append(word)\n  \n  return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_by_column(dataset): \n\t# extract second column from dataset\n\tsecond_column = [row[1] for row in dataset] \n\n\t# sort dataset using second column\n\tsorted_dataset = [row for _, row in sorted(zip(second_column, dataset))] \n\t\n\treturn sorted_dataset but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def transpose(matrix):\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n    transposed = [ [0 for j in range(num_rows)] for i in range(num_cols) ]\n    for i in range(num_rows):\n        for j in range(num_cols):\n            transposed[j][i] = matrix[i][j]\n    return transposed but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_two_lists(list1, list2):\n    \"\"\"Function to sort two lists by the order of list2\"\"\"\n    zipped_lists = zip(list1, list2)\n    zipped_lists = sorted(zipped_lists, key=lambda x: x[1])\n    sorted_list1, sorted_list2 = zip(*zipped_lists)\n    return list(sorted_list1), list(sorted_list2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_nums = [1, 2, 3, 4, 5]\n\naverage = lambda list_nums: sum(list_nums) / len(list_nums)\n\nprint(average(list_nums)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import logging\n\ndef handler(e):\n logging.exception(e)\n # Do any other error handling logic here.\n\ntry:\n # the code that could throw an error\nexcept Exception as e:\n handler(e) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from datetime import datetime, timedelta \n\ndef month_names():\n  today = datetime.today()\n  last_month = today - timedelta(weeks=4)\n\n  current_month = today.strftime(\"%B\")\n  prev_month = last_month.strftime(\"%B\")\n\n  print(\"Current month: \", current_month)\n  print(\"Previous month: \", prev_month) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\ndef extract_links(url):\n r = requests.get(url)\n soup = BeautifulSoup(r.content, 'html.parser')\n links = []\n for link in soup.find_all('a'):\n  links.append(link.get('href'))\n return links\n\nurl = \"https://www.example.com\"\nprint(extract_links(url)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_last_n_characters(str, n):\n  return str[:len(str)-n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The performance complexity of the code snippet is O(n). but is not the same. just give one example and only return the code."}
