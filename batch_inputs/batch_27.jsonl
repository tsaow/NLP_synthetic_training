{"prompt": "make some code that functions the same as the following code: import urllib.request\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com'\n\nhtml = urllib.request.urlopen(url).read()\nsoup = BeautifulSoup(html, 'html.parser')\ntotal_words = 0\n\nfor link in soup.find_all('a'):\n    new_url = link.get('href')\n    new_html = urllib.request.urlopen(url + new_url).read()\n    soup2 = BeautifulSoup(new_html, 'html.parser')\n\n    words = soup2.get_text().split(' ')\n    total_words += len(words)\n\nprint(total_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef classify_email(subject, body):\n    # Check the subject line for keywords\n    flags = check_subject(subject)\n\n    # Check the body for keywords\n    if not flags:\n        flags = check_body(body)\n\n    # return flags\n    return flags\n\ndef check_subject(subject):\n    flags = []\n    # Check for spam\n    spam_keywords = ['***SPAM***', '***ADV***']\n    for keyword in spam_keywords:\n        if re.search(keyword, subject):\n            flags.append('SPAM')\n            break\n\n    # Check for purchases\n    purchase_keywords = ['order', 'purchase', 'shipping', 'payment']\n    for keyword in purchase_keywords:\n        if re.search(keyword, subject):\n            flags.append('PURCHASE')\n            break\n\n    return flags\n\ndef check_body(body):\n    flags = []\n    # Check for offensive language\n    offensive_words = ['crap', 'stupid', 'idiot', 'shut up']\n    for word in offensive_words:\n        if re.search(word, body):\n            flags.append('OFFENSIVE')\n            break\n\n    # Check for marketing content\n    marketing_keywords = ['buy now', 'limited time', 'special offer', 'free']\n    for keyword in marketing_keywords:\n        if re.search(keyword, body):\n            flags.append('MARKETING')\n            break\n\n    return flags but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_sum(nums):\n assert all(n >= 0 for n in nums), \"list items must all be positive!\"\n\n # return the sum of the two largest numbers\n max_num = max(nums)\n nums.remove(max_num)\n second_max_num = max(nums)\n return max_num + second_max_num\n\n# test\nmy_list = [123, 534, 745, 321, 876]\nprint(get_sum(my_list)) # will print out 1671 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1,6):\n    for j in range(1,6):\n        print(i*j,end=\"\\t\")\n    print(\"\\n\")\n\n# Output:\n1\t2\t3\t4\t5\t\n2\t4\t6\t8\t10\t\n3\t6\t9\t12\t15\t\n4\t8\t12\t16\t20\t\n5\t10\t15\t20\t25 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_name(name):\n    print(name) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def addNums(num1, num2):\n  return num1+num2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_numbers = [8, 4, 6, 10, 3]\n\nlist_numbers.sort(reverse=True)\n\nprint(list_numbers) # Output: [10, 8, 6, 4, 3] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def greater_than_n(nums, n):\n return [num for num in nums if num > n]\n\ngreater_than_n([3,4,5,6,7], 5)\n# Returns [6,7] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_dict_by_value(in_dict):\n    \"\"\" Function to sort a dictionary by it's values\n    \"\"\"\n    return {k: v for k, v in sorted(in_dict.items(), key=lambda item: item[1])} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The system architecture will use two microservices, one service for fetching the tweet and another for performing sentiment analysis on each tweet. The first service will periodically fetch tweets from Twitter using the Twitter API and store them in a database. The second service will then read from the database and analyze the tweets using Natural Language Processing (NLP) techniques to determine the sentiment of each tweet. Finally, a web UI service will be used to display the results of the sentiment analysis.\n\nThe system architecture could use any language for the microservices, but Python is recommended due to its ease of use for NLP tasks. Additionally, for the database, a NoSQL database like MongoDB is recommended due to its scalability and flexibility. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_to_roman(num):\n    int_nums = [1000, 500, 100, 50, 10, 5, 1]\n    roman_nums = ['M', 'D', 'C', 'L', 'X', 'V', 'I']\n    roman_value = ''\n\n    i = 0\n    while num > 0:\n        for _ in range(num // int_nums[i]):\n             roman_value += roman_nums[i]\n             num -= int_nums[i]\n        i += 1\n\n    return roman_value\n\nprint(convert_to_roman(99))\n# Output: 'XCIX' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: String x = \"Hello World\"; but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neural_network import MLPClassifier\n\n# Read in the data\ndata = pd.read_csv('flowers.csv')\nX = data.iloc[:, :-1].values\ny = data.iloc[:, -1].values\n\n# Scale the data\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\n\n# Train the neural network\nclf = MLPClassifier(hidden_layer_sizes=(20, 20), max_iter=1000)\nclf.fit(X, y)\n\n# Test the model\npreds = clf.predict(X)\n\n# Evaluate the model\naccuracy = np.mean(preds == y)\nprint('Model accuracy: {:.2f}%'.format(accuracy*100)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isOdd(number): \n  \n    if number % 2 == 0: \n        return False\n    else: \n        return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n  \n# create a list of all the letters in the alphabet\nalphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \n             \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \n             \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \n             \"y\", \"z\"] \n  \n# generate a random letter\nrandom_letter = random.choice(alphabet)\nprint(random_letter) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: number_rounded = round(number, round_places)\nprint(number_rounded)\n# Output: 2.68 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent(list):\n    return max(list, key=list.count)\n\nlist = [1,2,3,4,4,4,5,5]\nprint(most_frequent(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_string = \"Hello World\"\nif \"World\" in my_string:\n    print(\"Yes, the specified substring is found.\")\nelse:\n    print(\"No, the substring is not found.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_string(words):\n    longest = 0\n    result = ''\n    for w in words:\n        if len(w) > longest:\n            longest = len(w)\n            result = w\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_odd_numbers(input_list):\n    new_list = [x for x in input_list if x % 2 == 0]\n    return new_list\n\ndef find_sum_of_even_numbers(input_list):\n    new_list = remove_odd_numbers(input_list)\n    sum = 0\n    for number in new_list:\n        sum += number\n    return sum\n\ninput_list = [1, 2, 3, 4, 5, 6, 7]\nprint('Sum of even numbers:', find_sum_of_even_numbers(input_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_lists(list1, list2):\n    merged_list = [] \n    i, j = 0, 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i]) \n            i += 1\n        else:\n            merged_list.append(list2[j]) \n            j += 1\n    merged_list.extend(list1[i:])\n    merged_list.extend(list2[j:])\n    return merged_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import rasa\nfrom rasa.nlu.training_data import load_data\nfrom rasa.nlu.model import Trainer\n\n# Load data\ndata = load_data('queries_data.json')\n\n# Create a trainer and train the model\ntrainer = Trainer(rasa.nlu.config.load(\"config.yml\"))\ninterpreter = trainer.train(data)\n\n# Use the model to predict customer queries\npredictions = interpreter.parse('I need a product with high durability')\n\n# Print the prediction results\nprint(predictions) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1,11):\n    print(9, \"x\", i, \"=\", 9*i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Creating a virtual environment\npython -m venv env\nsource env/bin/activate\npip install Django\n\n# Create a Django project\ndjango-admin startproject Blog\n\n# Create an app\ncd Blog\npython manage.py startapp blog_app\n\n# Install dependencies\n# Install crispy_forms to use for styling forms\npip install django-crispy-forms\n\n# Adding applications to the settings.py\n# Add the blog_app to the installed applications\nINSTALLED_APPS = [\n    # django dependencies\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n\n    # third-party dependencies\n    'crispy_forms', \n\n    #  project applications\n    'blog_app',\n]\n\n# Add template settings to the settings.py\n# Include the templates directory in the settings\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\n# Register models and create the URL path\n# Create views to handle requests\n# Add templates for posts and pages\n# Configure your Django admin interface\n# Configure static and media files\n# Start the server to see the blog but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: if string1 == string2:\n    print(\"Equal\")\nelse:\n    print(\"Not Equal\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sum = 0\nfor y in range(10):\n    sum += y\nprint sum\nfor x in range(10):\n    print sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_non_negative_integers(n):\n    total = 0\n    for i in range(n): \n        if i > 0:\n            total += i\n    return total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n def __init__(self, name, age, salary):\n  self.name = name\n  self.age = age\n  self.salary = salary\n\nemployeeA = Employee('John Doe', 35, 5000)\nemployeeB = Employee('Jane Smith', 28, 6000) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Importing the libraries\nimport numpy as np\nimport re\nimport nltk\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Importing the dataset\ndataset = pd.read_csv('spam.csv', encoding = \"latin-1\")\ndataset = dataset.drop(['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'], 1)\n\n# Cleaning the texts\nimport re\nimport nltk\nnltk.download('stopwords')\n\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\n\n# Create corpus\ncorpus = []\nfor i in range(0, 5572):\n    review = dataset['v2'][i]\n    review = re.sub(r'\\W', ' ', review)\n    review = re.sub(r'[^a-zA-Z]', ' ', review)\n    review = review.lower()\n    review = review.split()\n    stemmer = PorterStemmer()\n    review = [stemmer.stem(word) for word in review if not word in set(stopwords.words('english'))]\n    review = ' '.join(review)\n    corpus.append(review)\n    \n# Creating the bag of words model\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(max_features = 2600)\nX = cv.fit_transform(corpus).toarray()\n\n# Output Variable\ny = dataset.iloc[:, 0].values\n\n# Split the dataset\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)\n\n# Training the classifier\nfrom sklearn.naive_bayes import MultinomialNB\nclassifier = MultinomialNB()\nclassifier.fit(X_train, y_train)\n\n# Prediction\ny_pred = classifier.predict(X_test)\n\n# Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\nprint(cm) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def format_text(string):\n    \"\"\"Format the given string with the correct indentation levels.\"\"\"\n    lines = string.splitlines()\n    level = 0\n    formated = \"\"\n    for line in lines:\n        if line.isspace():\n            continue\n        formated += \"  \" * level + line + \"\\n\"\n        if line.endswith(\":\"):\n            level += 1\n        elif line.startswith(\"return\") or line.startswith(\"break\"):\n            level -= 1\n    return formated\n\n# Usage Example\nstring = \"\"\"This is \na string\nwith different lines.\"\"\"\nformated = format_text(string)\nprint(formated) \n\n# This is\n#   a string\n#   with different lines. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_second_smallest(arr):\n    smallest = arr[0]\n    second_smallest = None\n    for i in range(1, len(arr)):\n        if arr[i] < smallest:\n            second_smallest = smallest\n            smallest = arr[i]\n    return second_smallest\n\narr = [9, 7, 4, 8, 2]\n\nsecond_smallest = find_second_smallest(arr)\n\nprint(\"Second smallest number is:\", second_smallest) # Output is 7 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n@app.route('/items', methods=['GET', 'POST'])\ndef items():\n if request.method == 'GET':\n # Return all items\n # ...\n elif request.method == 'POST':\n # Create a new item\n # ...\n\n@app.route('/items/<id>', methods=['GET', 'PUT', 'DELETE'])\ndef item(id):\n if request.method == 'GET':\n # Return item with given id\n # ...\n elif request.method == 'PUT':\n # Update item with given id\n # ...\n elif request.method == 'DELETE':\n # Delete item with given id\n # ...\n\nif __name__ == '__main__': \n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseString(str):\n  return str[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport matplotlib.pyplot as plt\nimport keras\nfrom keras.models import Sequential \nfrom keras.layers import Dense, Conv2D, Flatten, MaxPooling2D \nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ModelCheckpoint\n\n# Specify image dimensions \nimg_width, img_height = 150, 150\n\n# # Create the model \nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(img_width, img_height, 3))) \nmodel.add(MaxPooling2D(pool_size=(2,2))) \nmodel.add(Conv2D(64, kernel_size=(3, 3)))\nmodel.add(MaxPooling2D(pool_size=(2,2))) \nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu')) \nmodel.add(Dense(7, activation='softmax'))\n\n# Compile the model \nmodel.compile(loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.Adam(), metrics=['accuracy'])\n\n# Prepare the data\ntrain_datagen = ImageDataGenerator(rescale=1./255, shear_range=0.2, zoom_range=0.2, horizontal_flip=True)\ntest_datagen = ImageDataGenerator(rescale=1./255) \n\ntrain_generator = train_datagen.flow_from_directory('train', target_size=(img_width, img_height), batch_size=16, class_mode='categorical')\nvalidation_generator = test_datagen.flow_from_directory('test',target_size=(img_width, img_height), batch_size=16,class_mode='categorical')\n\n# Train the model \ncheckpoint = ModelCheckpoint(filepath='best-model.h5',save_best_only=True,verbose=1)\nmodel.fit_generator(train_generator,steps_per_epoch=2000//16,epochs=50,validation_data=validation_generator,validation_steps=1000//16,callbacks=[checkpoint])\n\n# Evaluate the model\nscores = model.evaluate_generator(validation_generator, steps=1000//16)\nprint(\"Accuracy = \", scores[1])\n\n# Make predictions\ny_pred = model.predict_generator(validation_generator, steps=1000//16)\n\n# Print predictions\nfor i in range(len(y_pred)): \n print(\"Prediction: \", np.argmax(y_pred[i]), \"Actual: \", validation_generator.labels[i])\nprint(\"Done!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def tower_of_hanoi(n, from_rod, to_rod, aux_rod): \n    if n == 1: \n        print(\"Move disk 1 from rod\",from_rod,\"to rod\",to_rod) \n        return\n    tower_of_hanoi(n-1, from_rod, aux_rod, to_rod) \n    print(\"Move disk\",n,\"from rod\",from_rod,\"to rod\",to_rod) \n    tower_of_hanoi(n-1, aux_rod, to_rod, from_rod) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_sum_of_largest(lst):\n  lst.sort()\n  return lst[-1] + lst[-2]\n\nprint(find_sum_of_largest([1, 3, 5, 7, 9])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\n\ndate_string = \"27/09/2017\"\n\ndate_object = datetime.datetime.strptime(date_string, \"%d/%m/%Y\")\n\nprint(\"Year:\", date_object.year)\nprint(\"Month:\", date_object.month)\nprint(\"Day:\", date_object.day) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def create_nested_dict(keys, values): \n  my_dict = {}\n  for i in range(len(keys)):\n    my_dict[keys[i]] = values[i]\n  return my_dict but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask\nfrom flask_restplus import Api, Resource\n\napp = Flask(__name__) # create a Flask app\napi = Api(app) # initialize Flask-RESTplus\n\n# This is a dummy list of user posts.\n# In a real application these would\n# be pulled from a database.\nposts = [\n {'user_id': 123, 'title': 'My post 1', 'content': 'Lorem ipsum dolor sit amet...'},\n {'user_id': 123, 'title': 'My post 2', 'content': 'Lorem ipsum dolor sit amet...'},\n {'user_id': 123, 'title': 'My post 3', 'content': 'Lorem ipsum dolor sit amet...'},\n]\n\n@api.route('/posts')\nclass Posts(Resource):\n def get(self):\n user_id = request.args.get('user_id')\n posts = [post for post in posts if post['user_id'] == user_id]\n return posts\n\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from cryptography.fernet import Fernet\nimport base64\n\ndef encrypt(message):\n key = Fernet.generate_key() \n cipher_suite = Fernet(key)\n cipher_text = cipher_suite.encrypt(message) \n cipher_text_string = str(cipher_text, 'utf-8')\n encoded_text = base64.b64encode(key)\n return cipher_text_string, encoded_text\n\ndef decrypt(cipher_text_string, encoded_text):\n key = base64.b64decode(encoded_text)\n cipher_suite = Fernet(key)\n plain_text = cipher_suite.decrypt(cipher_text_string) \n return plain_text but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num = int(input(\"Enter a number: \"))\n \nfor i in range(1, num + 1):\n  for j in range(1, i + 1):\n      print(\"*\", end=\" \")\n  print(\"\\r\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import mysql.connector\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\ndb = mysql.connector.connect(\n host='localhost',\n user='user',\n database='database',\n)\n\ncursor = db.cursor()\n\n@app.route('/user/<int:user_id>', methods=['PUT'])\ndef update_user(user_id):\n user = request.get_json()\n try:\n  cursor.execute(\n   'UPDATE users SET name = %s, email = %s WHERE id = %s',\n   (user['name'], user['email'], user_id)\n  )\n  db.commit()\n  return {'message': 'User updated'}\n except mysql.connector.Error as err:\n  db.rollback()\n  return {'error': err.msg}, 500\n\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_common_word(string):\n    # convert string to lower case \n    string = string.lower() \n  \n    # split the string into words  \n    words = string.split() \n  \n    # create a dictionary to store words and their frequency  \n    word_freq_dict = {} \n  \n    # iterate through each word in words list  \n    for word in words: \n          \n        if word not in word_freq_dict: \n            word_freq_dict[word] = 0\n        word_freq_dict[word] += 1\n  \n    # sort the dictionary in descending order of frequency  \n    sorted_dict = sorted(word_freq_dict.items(), key=lambda kv: kv[1], reverse=True) \n  \n    # return the most frequent word  \n    return sorted_dict[0][0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def matrix_transpose(matrix):\n    num_of_rows = len(matrix)\n    num_of_cols = len(matrix[0])\n    transposed_matrix = [[0 for _ in range(num_of_rows)] for _ in range(num_of_cols)]\n\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            transposed_matrix[j][i] = matrix[i][j]\n    \n    return transposed_matrix\n\nmatrix = [[1,2,3], [4,5,6], [7,8,9]]\ntranspose = matrix_transpose(matrix)\nprint(transpose) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import flask from flask\nimport sqlite3\n\napp = flask.Flask(__name__)\n\n# create the database\nconn = sqlite3.connect('data.db')\ncur = conn.cursor()\n\n# create the table for your data\ncur.execute('''CREATE TABLE IF NOT EXISTS search \n(query TEXT, results TEXT)''')\n\n@app.route('/search', methods = ['GET', 'POST'])\ndef search():\n if flask.request.method == 'POST':\n # get the search term from the form\n query = flask.request.form['query']\n\n # search the database for the query\n cur.execute('''SELECT results FROM search \n WHERE query=?''', (query,))\n results = cur.fetchall()\n\n # return the results\n return flask.render_template('results.html', \nquery = query, results = results)\n\n# the search form\n@app.route('/')\ndef index():\n return flask.render_template('search.html')\n\nif __name__ == '__main__':\n app.run(debug = True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_long_string(string_list):\n    for string in string_list:\n        if len(string) > 10:\n            print(string)\n            break\n\nstring_list = [\"cat\", \"doggo\", \"elephant\", \"giraffe\"]\nfind_long_string(string_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = \"https://example.com\"\n\n# Send Get request to the API\nresponse = requests.get(url)\n\n# Store the response text\nresponse_text = response.text but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def closest_pair(points): \n    min_distance = float('inf')\n    n = len(points) \n    for i in range(n-1): \n        for j in range(i+1, n): \n            distance = ((points[i][0] - points[j][0])**2 + \n                        (points[i][1] - points[j][1])**2)**0.5 \n            if distance < min_distance: \n                min_distance = distance\n                min_pair = (points[i], points[j]) \n  \n    return min_distance, min_pair \n\npoints = [(1,1), (3,3), (-2, 4), (-3, -2), (2, 4)] \nprint(closest_pair(points)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def swap(x, y):\n    x, y = y, x\n    return x, y\n\nx = int(input(\"Enter x: \"))\ny = int(input(\"Enter y: \"))\nx, y = swap(x, y)\nprint(\"x:\", x, \"y:\", y) #output: x: 4  y: 8 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \ndef extract_text(url): \n  page = requests.get(url) \n  return page.content but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def second_smallest_num(arr):\n    min1 = min(arr)\n    arr.remove(min1)\n    min2 = min(arr)\n    return min2\n\n\narr = [45, 25, 12, 34, 36]\nres = second_smallest_num(arr)\nprint(res) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\n\ndate_iso = datetime.datetime.now().isoformat()\nprint(date_iso) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math \n\ndef closestPair(arr, n): \n    min_dist = math.inf \n    for i in range(n):\n        for j in range(i+1,n):\n            dist = ((arr[i][0] - arr[j][0]) * \n                (arr[i][0] - arr[j][0]) + \n                  (arr[i][1] - arr[j][1]) * \n                  (arr[i][1] - arr[j][1])) \n            \n            if (dist < min_dist):\n                min_dist = dist\n  \n    return min_dist\n\narr = [(-2, -4), (0, 0), (-1, 1), (2,2), (3, 3), (-2,2), (4,4)] \nn = len(arr)\nmin_dist = closestPair(arr, n) \nprint(\"The shortest distance is\", min_dist) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n \n    def push(self, new_data):\n        new_node = Node(new_data)\n        new_node.next = self.head\n        self.head = new_node but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    \n    def insert(self, data):\n        node = Node(data)\n        if not self.head:\n            self.head = node\n        else:\n            tmp = self.head\n            while tmp.next:\n                tmp = tmp.next\n            tmp.next = node but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Animal:\n    def __init__(self, name):\n        self.name = name\n    \n    def move(self):\n        print(f\"{self.name} is moving\")\n    \n    def eat(self):\n        print(f\"{self.name} is eating\")\n    \n    def sleep(self):\n        print(f\"{self.name} is sleeping\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nPython script to print the nth Fibonacci number\n\"\"\"\n\ndef fibonacci(num):\n    a, b = 0, 1\n    for _ in range(num):\n        a, b = b, a+b\n    return a\n\nnum = int(input(\"Enter a number: \"))\nprint(\"The Fibonacci number at position {0} is {1}\".format(num, fibonacci(num))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_lists(list1, list2):\n    if len(list1) != len(list2):\n        return False\n\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class DecisionTreeClassifier:\n    def __init__(self):\n        self.tree = None\n    \n    def fit(self, X, y):\n        # Create empty Decision Tree\n        self.tree = {'feats': [], 'thresholds': [], 'left': None, 'right': None}\n\n        # Find the best feature to split data\n        bestFeature, bestThreshold = self.findBestSplit(X, y)\n\n        # Split data into two subsets\n        leftMask = X[:, bestFeature] < bestThreshold\n        rightMask = ~leftMask\n\n        # Add the feature and threshold to the tree\n        self.tree['feats'].append(bestFeature)\n        self.tree['thresholds'].append(bestThreshold)\n\n        # Split data into subsets\n        XLeft, yLeft = X[leftMask], y[leftMask]\n        XRight, yRight = X[rightMask], y[rightMask]\n        \n        # Recursively build decision tree\n        self.tree['left'] = self.fit(XLeft, yLeft)\n        self.tree['right'] = self.fit(XRight, yRight)\n        \n        return self.tree\n      \n    def predict(self, X):\n        pass but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Calculator:\n    def __init__(self):\n        # initialization code\n    \n    def add(self, x, y):\n        return x + y\n    \n    def subtract(self, x, y):\n        return x - y\n    \n    def multiply(self, x, y):\n        return x * y\n    \n    def divide(self, x, y):\n        return x / y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\n# create a connection to the database\nconn = sqlite3.connect(\"example.db\")\n\n# create the database\nc = conn.cursor()\nc.execute(\"create table countries (name text, country text, population int)\")\n\n# commit changes\nconn.commit()\n\n# close the connection\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Define cube\na = np.array([[0, 0, 0], [1, 0, 0], [1, 1, 0], [0, 1, 0], \n [0, 0, 1], [1, 0, 1], [1, 1, 1], [0, 1, 1]])\n\n# Set up graph\nfig = plt.figure(figsize=(5,5))\nax = fig.add_subplot(111, projection='3d')\nax.set_xlim(-1, 2)\nax.set_ylim(-1, 2)\nax.set_zlim(-1, 2)\n\n# Plot cube\nax.scatter(a[:, 0], a[:, 1], a[:, 2])\n\n# Connect the dots\nfor i in range(4):\n ax.plot([a[i, 0], a[i+4, 0]], [a[i, 1], a[i+4, 1]], \n [a[i, 2], a[i+4, 2]])\nfor i in range(4):\n ax.plot([a[i, 0], a[(i+1)%4, 0]], [a[i, 1], \n a[(i+1)%4, 1]], [a[i, 2], a[(i+1)%4, 2]])\nax.plot([a[4, 0], a[7, 0]], [a[4, 1], a[7, 1]], \n [a[4, 2], a[7, 2]])\nax.plot([a[5, 0], a[6, 0]], [a[5, 1], a[6, 1]], \n [a[5, 2], a[6, 2]])\n\n# Show plot\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_list(l):\n    result = 0\n    for num in l:\n        result += num\n    return result\n\nlist = [1, 2, 3, 4, 5]\nprint(sum_list(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_alphanumeric(strings_list):\n    filtered_list = []\n    for string in strings_list:\n        if any(char.isalnum() for char in string):\n            filtered_list.append(string)\n    return filtered_list\n\nstrings_list = ['hello', 'world', '1234', '56jklm']\nfiltered_list = filter_alphanumeric(strings_list)\nprint(filtered_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_frequency(lst, element):\n    return lst.count(element)\n\nlst = [1, 2, 3, 4, 1, 2, 1]\nprint(find_frequency(lst, 1)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isDivisible(num1, num2):\n    # check if num1 is divisible by num2\n    if (num1 % num2) == 0:\n        return True\n    else:\n        return False\n\nnum1 = 6\nnum2 = 3\n\nresult = isDivisible(num1, num2)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_to_lowercase(string): \n    lowercase_string = \"\" \n    for char in string: \n        lowercase_string += char.lower() \n    return lowercase_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Encrypter:\n    def ceaserCypherEncryptor(self, key, string):\n        encStr = \"\"\n        for ch in string:\n            encStr += chr(ord(ch)+key)\n        return encStr\n        \ne = Encrypter()\nencStr = e.ceaserCypherEncryptor(3, \"Hello World\") \nprint(encStr) \n# Output \nKhoor#Zruog but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maxSubarrySum(arr):\n  cur_max = 0\n  global_max = 0\n  \n  for i in arr:\n    cur_max = max(cur_max + i, 0)\n    global_max = max(global_max, cur_max)\n    \n  return global_max\n  \n# test\narr = [1, -2, 3, 4, -5]\nprint(maxSubarrySum(arr))\n\n# output: 7 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(a):\n    new_list = []\n    for i in a:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n\na = [1, 1, 2, 3, 3, 5]\nb = remove_duplicates(a)\nprint(b) \n\n# Output: [1, 2, 3, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string \nimport random \n  \ndef generate_pass(size = 8, chars=string.ascii_letters + string.digits + string.punctuation): \n  ''' \n  Generates a random password with given size and given \n  characters \n  '''\n  return ''.join(random.choice(chars) for _ in range(size)) \n\n# Driver code \nprint(generate_pass()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_engine(documents, keyword):\n    # Create an index of the documents\n    index = create_index(documents)\n    # Search the index for the keyword\n    search_result = search(index, keyword)\n    # Return the search result\n    return search_result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_by_second_element(list):\n    list.sort(key= lambda x : x[1])\n    return list\n\nlist = [['B', 'b'], ['A', 'a'], ['C', 'c']]\n\nprint(sort_by_second_element(list)) # [['A', 'a'], ['B', 'b'], ['C', 'c']] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(10):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_lists(list1, list2):\n    \n    if len(list1) != len(list2):\n        return False\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\n\ndef remove_punctuation(text):\n    return text.translate(str.maketrans(\"\",\"\", string.punctuation))\n\ntext = \"Wel,come to the wo,rld of 'programming'.\"\nprint(remove_punctuation(text))\nOutput:\nWelcome to the world of programming but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_all_keys(input_dict):\n    keys = set()\n    if isinstance(input_dict, dict):\n        keys.update(input_dict.keys())\n        for v in input_dict.values():\n            keys.update(get_all_keys(v))\n    return keys\n\ndict1 = {\n    \"key1\": [1,2],\n    \"key2\": [2,3],\n    \"key3\": {\n        \"key4\": [3,4]\n    }\n}\n\nunique_items = get_all_keys(dict1)\nprint(unique_items) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Define a list of routes\nroutes = [\n    ('/', 'homepage'), \n    ('/about', 'aboutpage'), \n    ('/contact', 'contactpage')\n]\n\n# Define a function to match the route and \n# get the name of the page\ndef match_route(route):\n    for url, page in routes:\n        if url == route:\n            return page\n\n# Test the function\nresult = match_route('/')\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from fuzzywuzzy import fuzz \ndef fuzzy_match(str1, str2): \n    return fuzz.ratio(str1, str2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_tree(h): \n    # h is the height of the tree\n    # Initialize the number of spaces per line \n    n_spaces = h - 1\n  \n    # Generate the tree structure \n    for i in range(1, h+1): \n        # Print h-i spaces at the beginning of each line \n        for j in range(n_spaces): \n            print(end=\" \") \n              \n        # Print i stars at the end of each line \n        for j in range(i): \n            print(\"* \", end=\"\") \n              \n        # Move to the next line (Print a newline character) \n        print() \n          \n        # Update the number of spaces used \n        n_spaces -= 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max_even_index(lst):\n  max_even = None\n  index = -1\n  \n  for i, num in enumerate(lst):\n    if num % 2 == 0 and (max_even is None or num > max_even):\n      max_even = num\n      index = i\n  \n  return index but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def even_odd(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [1, 2, 3, 2, 4, 1, 1]\n\nfrequency_dict = {}\n\nfor num in my_list:\n    if num in frequency_dict:\n        frequency_dict[num] = frequency_dict[num] + 1\n    else:\n        frequency_dict[num] = 1\n\nfor num, freq in frequency_dict.items():\n    print(\"{} : {}\".format(num, freq)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Function to calculate the sum of the natural numbers \ndef sumOfNaturals(n): \n  \n    #using Gauss formula\n    if n % 2 == 0: \n        sum = (n//2)*(n+1) \n    else: \n        sum = (n//2)*(n+1) + (n+1)//2\n  \n    return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def median(nums):\n    nums.sort()\n    if len(nums) % 2 == 0:\n        left = len(nums) // 2 - 1\n        right = len(nums) // 2\n        return (nums[left] + nums[right]) / 2\n    else:\n        middle = len(nums) // 2\n        return nums[middle] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countCommonDivisors(a,b): \n   \n    divisors = [] \n   \n    for i in range(1, min(a,b)+1): \n        if (a % i == 0 and b % i == 0): \n            divisors.append(i) \n              \n    return len(divisors) \n\nnum1 = 350\nnum2 = 400\n\nprint (countCommonDivisors(num1, num2)) \n# Output: 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ItemList:\n    def __init__(self):\n        self.items = []\n\n    def add(self, item):\n        self.items.append(item)\n\n    def remove(self, item):\n        self.items.remove(item)\n\n    def print_all_items(self):\n        for item in self.items:\n            print(item) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent_item(myList):\n    max_item = myList[0]\n    max_count = 1\n    for i in range(1, len(myList)):\n        count = 1\n        for j in range(i+1, len(myList)):\n            if(myList[i] == myList[j]):\n                count += 1\n                if(count > max_count):\n                    max_count = count\n                    max_item = myList[i]\n    \n    return (max_item)\n\nmyList = [1, 2, 3, 2, 4, 2]\nprint(most_frequent_item(myList)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import mysql.connector\n\n# Connect to the database \nmydb = mysql.connector.connect(\n    host=\"localhost\",\n    user=\"yourusername\",\n    passwd=\"yourpassword\",\n    database=\"mydatabase\"\n)\n# Create a cursor \nmycursor = mydb.cursor()\n\n# Execute a query\nmycursor.execute(\"SELECT * FROM customers\")\n\n# Fetch all records \nrecords = mycursor.fetchall()\n\n# Print records \nfor record in records:\n    print(record) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: a = 10\nb = 13\n\nc = a * b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password(length):\n    characters = string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation\n    password = ''.join(random.choice(characters) for _ in range(length)) \n  \n    if not any(char.isdigit() for char in password) or not any(char.islower() for char in password) or not any(char.isupper() for char in password) or not any(char in string.punctuation for char in password):\n        return generate_password(length)\n    else:\n        return password but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import hashlib\nimport json\n\n# define a block in the blockchain\nclass Block:\n    def __init__(self, index, data, timestamp, prev_hash):\n        self.index = index\n        self.data = data\n        self.timestamp = timestamp\n        self.prev_hash = prev_hash\n        self.hash = self.hash_it()\n\n    # generates a SHA256 based on the contents of the block\n    def hash_it(self):\n        sha = hashlib.sha256()\n        block_data = str(self.index) + str(self.data) + str(self.timestamp) + str(self.prev_hash) \n        sha.update(block_data.encode())\n        return sha.hexdigest()\n\n# defines a blockchain\nclass Blockchain:\n    def __init__(self):\n        self.chain = []\n\n    # adds a block to the blockchain\n    def add_block(self, data):\n        data = self.parse_data(data)\n        index = len(self.chain)\n        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        prev_hash = self.chain[-1].hash if self.chain else '0'\n\n        self.chain.append(Block(index, data, timestamp, prev_hash))\n\n    # records a user's name and age in the block data\n    def parse_data(self, data):\n        user_data = {\n            'name': data['name'],\n            'age': data['age']\n        }\n        return json.dumps(user_data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countPermutations(n):\n # if n is 0 or 1, return 1 as there is 1 permutation\n if n <= 1:\n return 1\n \n # recursive calculation\n result = n * countPermutations(n - 1)\n \n return result\n\ncountPermutations(4) # returns 24 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def flatten_array(my_array):\n    flattened_array=[]\n    for element in my_array:\n        if type(element) == int:\n            flattened_array.append(element)\n        else:\n            flattened_array+=flatten_array(element)\n    return flattened_array\n\nprint(flatten_array([[1,2,[3]],4])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\nclass DecisionTree():\n    def __init__(self):\n        self.max_depth = 3\n        self.tree = self._build_tree()\n\n    def _build_tree(self):\n        tree = {}\n        tree['index'] = 0 # features index\n        tree['thresh'] = 0. # threshold for feature\n        tree['left'] = None # left subtree\n        tree['right'] = None # right subtree\n        return tree\n    \n    def fit(self, X, y):   \n        self._build_tree(X, y, self.tree, 0, self.max_depth)\n        return self.tree\n    \n    def _build_tree(self, X, y, node, depth, max_depth):\n        # get index of all the samples\n        samples_index = np.arange(X.shape[0]) \n        # node is pure or depth == max_depth\n        if self._check_purity(y, samples_index) or depth == max_depth:\n            self.__set_leaf_node(y, node)\n            return\n        \n        # find best split \n        feature_index, threshold = self._get_best_split(X, y, samples_index)\n        \n        # create two subtrees \n        left_index, right_index = self._split(X, feature_index, threshold, samples_index)\n        \n        # add the returned feature index to the node\n        node['index'] = feature_index\n        # add the returned node threshold  to the node\n        node['thresh'] = threshold \n        \n        # define left and right children \n        node['left'] = self._build_tree(X, y, {}, depth+1, max_depth) \n        node['right'] = self._build_tree(X, y, {}, depth+1, max_depth)\n        \n        # build right and left subtrees\n        self._build_tree(X, y, node['left'], depth+1, max_depth)\n        self._build_tree(X, y, node['right'], depth+1, max_depth)\n    \n    def _check_purity(self, y, samples_index):\n        # check for the purity of label\n        unique_labels = np.unique(y[samples_index])\n\n        if len(unique_labels) == 1:\n            return True\n        else:\n            return False\n        \n    def _get_best_split(self, X, y, samples_index):\n        best_index = 0\n        best_threshold = 0\n        max_ig = 0\n        n_features = X.shape[1]\n        \n        # loop through all the feature and get the best split\n        for col in range(n_features):\n            ig, threshold = self._information_gain(X, y, col, samples_index)\n            \n            if ig > max_ig:\n                max_ig = ig\n                best_index = col \n                best_threshold = threshold\n                \n        return best_index, best_threshold\n        \n    def _information_gain(self, X, y, col, samples_index):\n        # function to calculate information gain\n        total_sets = len(samples_index)\n        classes, counts = np.unique(y[samples_index], return_counts=True)\n        entropies = self._entropy(counts, total_sets)\n                \n        #sort the X sample\n        sorted_x = np.sort(X[samples_index, col])\n        threshold_sets = [(sorted_x[i]+sorted_x[i+1])/2 for i in range(len(sorted_x)-1)] \n        \n        max_ig = 0\n        best_threshold = 0\n        for thr in threshold_sets:\n            l_set, r_set = self._split(X, col, thr, samples_index)\n            l_classes, l_counts = np.unique(y[l_set], return_counts=True)\n            r_classes, r_counts = np.unique(y[r_set], return_counts=True)\n            l_entrp = self._entropy(l_counts, len(l_set))\n            r_entrp = self._entropy(r_counts, len(r_set))\n            entrp = (len(l_set)*l_entrp + len(r_set)*r_entrp) / total_sets\n            ig = entropies - entrp\n            \n            if ig > max_ig:\n                max_ig = ig\n                best_threshold = thr\n                \n        return max_ig, best_threshold\n        \n    def _entropy(self, counts, total_samples):\n        # calculate the entropy\n        entropies = np.sum([(-count/total_samples)*np.log2(count/total_samples) for count in counts])\n        return entropies    \n    \n    def _split(self, X, col, thresh, samples_index):\n        # split data\n        left_index = np.argwhere(X[samples_index, col] < thresh).flatten()\n        right_index = np.argwhere(X[samples_index, col] >= thresh).flatten()\n        return left_index, right_index\n    \n    def __set_leaf_node(self, y, node):\n        # get predictions \n        node['predictions'] = np.bincount(y).argmax() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport json\n\ndef get_stock_price(ticker):\n    url = 'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol={ticker}&interval=1min&apikey=<Your_API_KEY>'.format(ticker=ticker)\n    response = requests.get(url)\n    data = json.loads(response.text)\n    if data:\n        ts = data['Time Series (1min)']\n        latest_data_point = list(ts.values())[0]\n        return latest_data_point['4. close']\n\nif __name__ == '__main__':\n    g_price = get_stock_price('GOOGL')\n    m_price = get_stock_price('MSFT')\n    print(f'Google stock price: {g_price}')\n    print(f'Microsoft stock price: {m_price}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [[1, 2, 3], \n[4, 5, 6], \n[7, 8, 9]] \n\n# Initialize result \nresult = 0\n\n# Iterate every element in the array \nfor row in arr: \n  for col in row:\n    # Adding elements of each row \n    result = result + col  \n\n# Displaying sum \nprint(result)\n\n# Output: 45 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quick_sort(array):\n    if len(array) == 0 or len(array) == 1:\n        return array\n    \n    pivot = array[0]\n    left = []\n    right = []\n    \n    for i in range(1, len(array)):\n        if array[i] <= pivot:\n            left.append(array[i])\n        else:\n            right.append(array[i])\n    \n    left = quick_sort(left)\n    right = quick_sort(right)\n    \n    return left + [pivot] + right but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers.sort(reverse=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: max_num = max([10, 5, 15, 35, 20])\nprint(max_num) but is not the same. just give one example and only return the code."}
