{"prompt": "make some code that functions the same as the following code: # Import Flask and other necessary libraries\nfrom flask import Flask, render_template, request, jsonify\n\n# Create a Flask app\napp = Flask(__name__)\n\n# Create a books list in memory\nbooks = [\n   { 'name': 'Python Crash Course', 'author': 'Eric Matthes', 'read': False },\n   { 'name': 'Fluent Python', 'author': 'Luciano Ramalho', 'read': False }\n]\n\n# Create app routes\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/books', methods=['GET', 'POST'])\ndef all_books():\n if request.method == 'GET':\n return jsonify({'books': books})\n\n elif request.method == 'POST':\n new_book = {'name': request.form.get('name'), 'author': request.form.get('author'), 'read': False}\n books.append(new_book)\n return jsonify({'books': books})\n\n@app.route('/books/<int:index>', methods=['PUT', 'DELETE'])\ndef single_book(index):\n if request.method == 'PUT':\n book = books[index]\n book['name'] = request.form.get('name')\n book['author'] = request.form.get('author')\n\n return jsonify({'book': book})\n\n elif request.method == 'DELETE':\n books.pop(index)\n return jsonify({'books': books}) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nDevelop a Python code to generate the nth number in the Fibonacci series.\n\"\"\"\n\ndef generate_fibonacci(n):\n    if n == 1 or n == 2:\n        return 1\n    else:\n        a = 1\n        b = 1\n        for i in range(2, n):\n            a, b = b, a + b\n        return b\n    \nif __name__ == '__main__':\n    n = 8\n    print(generate_fibonacci(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\ndef find_frequency(list): \n    return Counter(list) \n\nmy_list = [1, 2, 3, 4, 1, 2, 3]\nfreq = find_frequency(my_list)\nprint(freq) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isDivisible(num): \n    if num % 5 == 0 and num % 11 == 0:\n        print(\"Number is divisible by 5 and 11\") \n    else:\n        print(\"Number is not divisible by 5 and 11\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Develop a function in Python to analyze the sentiment in a given text. Utilize natural language processing (NLP) techniques such as tokenization and parts of speech tagging, then leverage a pre-trained sentiment classifier to determine the sentiment in the given text. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\nposts = [] # Store posts in memory\n\n# Create a post\n@app.route('/posts', methods=['POST'])\ndef create_post():\n data = request.get_json()\n post = {\n  'id': len(posts)+1,\n  'title': data['title'],\n  'content': data['content']\n }\n posts.append(post)\n return jsonify(post)\n\n# Get all posts\n@app.route('/posts', methods=['GET'])\ndef get_posts():\n return jsonify(posts)\n\n# Get single post\n@app.route('/posts/<int:id>', methods=['GET'])\ndef get_post(id):\n return jsonify(posts[id-1])\n\napp.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_subsequence(s1, s2):\n    n = len(s1) \n    m = len(s2) \n   \n    LCS = [[0 for k in range(m+1)]for l in range(n+1)]  \n   \n    for i in range(n+1): \n        for j in range(m+1): \n            if i == 0 or j == 0: \n                LCS[i][j] = 0\n            elif s1[i-1] == s2[j-1]: \n                LCS[i][j] = LCS[i-1][j-1]+1\n            else: \n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1]) \n\n    return LCS[n][m] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_occurrences(sentence, character): \n    return sentence.count(character) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [3, 4, 5]\nsum = 0\nfor i in arr:\n    sum = sum + i\n\naverage = sum / len(arr)\nprint(average) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def create_tree(incidence_list):\n    \"\"\"\n    Generates a tree from the given incidence list.\n    @param incidence_list: List\n    @return: tuple\n    \"\"\"\n    tree = {}\n    for item in incidence_list:\n        parent, child = item\n        if parent in tree:\n            tree[parent].append(child)\n        else:\n            tree[parent] = [child]\n    return tree but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n a, b = 0, 1\n while a < n:\n print(a, end=' ')\n a, b = b, a + b\n print()\n\nfibonacci(100) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def move_towers(n, source, target, middle):\n  if n == 1:\n    print('move disk from {} to {}'.format(source, target))\n  else:\n    move_towers(n - 1, source, middle, target)\n    move_towers(1, source, target, middle)\n    move_towers(n - 1, middle, target, source) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def median(X): \n    sorted_X = sorted(X) \n    mid_index = (len(sorted_X) - 1) // 2 \n    if len(sorted_X) % 2 == 0: \n        return (sorted_X[mid_index] + sorted_X[mid_index + 1]) / 2\n    else: \n        return sorted_X[mid_index] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_array(arr):\n result = 0\n for item in arr:\n result += item\n return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\nimport sqlite3\n\n# Connect to the database\nconn = sqlite3.connect('data.db')\n\n# Scrape the webpage\nr = requests.get(\"http://example.com\")\nsoup = BeautifulSoup(r.content, 'html.parser')\n\n# Extract the necessary data\ndata = []\nfor tag in soup.find_all('div'):\n  data.append(tag.text)\n\n# Insert the data into the database\nwith conn:\n  c = conn.cursor()\n  c.execute(\"CREATE TABLE IF NOT EXISTS example_data (data TEXT)\")\n  c.executemany(\"INSERT INTO example_data VALUES (?)\", data)  \n\n# Close connection\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n if n == 0:\n return 0\n elif n == 1:\n return 1\n else:\n return fibonacci(n-1) + fibonacci(n-2)\n\n# Main Program\nn = int(input(\"Enter number of terms: \"))\n\nfor i in range(n):\n print(fibonacci(i), end=\" \") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_linked_lists(l1, l2):\n    # Initialize current node to dummy head of resulting list \n    curr = dummy_head = Node(0)\n\n    # Initialize carry to 0 \n    carry = 0\n\n    # Iterate till both list exists\n    while l1 or l2:\n        # Calculate the value of next digit in resultant list\n        # The next digit is sum of following things \n        # (i) Carry \n        # (ii) Next digit of first list (if there is a next digit)\n        # (iii) Next digit of second list (if there is a next digit)\n        x = l1.val if l1 else 0\n        y = l2.val if l2 else 0\n        s = carry + x + y\n\n        # update carry for next calculation\n        carry = s // 10\n\n        # update sum (s) if it is greater than 10\n        # we use modulus operator to get the second digit\n        s = s % 10\n\n        # Create a new node with sum as data\n        curr.next = Node(s)\n\n        # Move pointers to next nodes\n        if l1 is not None:\n            l1 = l1.next\n        if l2 is not None:\n            l2 = l2.next\n        curr = curr.next\n\n    # if some carry is still there, add a new node to result list\n    if carry > 0:\n        curr.next = Node(carry)\n\n    # return the dummy_head node\n    return dummy_head.next but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(string):\n    string = string[::-1]\n    return string\n\nresult = reverse_string(string)\nprint(result) # output -> \"!dlrow olleh\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_paths(x, y, z):\n    if x == 5 and y == 5 and z == 5:\n        return 1\n    total_paths = 0\n    if x < 5:\n        total_paths += calculate_paths(x + 1, y, z)\n    if y < 5:\n        total_paths += calculate_paths(x, y + 1, z)\n    if z < 5:\n        total_paths += calculate_paths(x, y, z + 1)\n    return total_paths but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_to_lowercase(string):\n    return string.lower() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\nimport nltk\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom nltk.metrics import scores\nfrom sklearn.model_selection import train_test_split\n\n# Load the data\ndf = pd.read_csv('data.csv')\n\n# Preprocessing\ndf['text'] = df['text'].apply(lambda x: re.sub(r'\\W', ' ', str(x).lower()))\ndf['text'] = df['text'].apply(lambda x: re.sub(r'\\s+', ' ', x))\n\n# Feature extraction\nX = df['text'].values\ny = df['label'].values\n\n# Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Vectorize the data\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nvectorizer = TfidfVectorizer(max_features=5000)\nX_train = vectorizer.fit_transform(X_train)\nX_test = vectorizer.transform(X_test)\n\n# Model training\nfrom sklearn.svm import LinearSVC\nclassifier = LinearSVC()\nclassifier.fit(X_train, y_train)\n\n# Model evaluation\ny_pred = classifier.predict(X_test)\nprint(\"Accuracy score:\", scores.accuracy(y_test, y_pred)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef random_number():\n    return random.randint(1,100)\n\n# Testing\nprint(random_number()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printDivisible(lower, upper, divisible):\n    for i in range(lower, upper + 1):\n        if i % divisible == 0:\n            print(i)\n\nprintDivisible(lower, upper, divisible) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def levenshtein_distance(word1, word2):\n    m = len(word1)\n    n = len(word2)\n\n    distance = [[0 for x in range(n+1)] for x in range(m+1)]\n\n    for i in range(1, m+1):\n        distance[i][0] = i\n    for j in range(1, n+1):\n        distance[0][j] = j\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if word1[i-1] == word2[j-1]:\n                cost = 0\n            else:\n                cost = 1\n            distance[i][j] = min(distance[i-1][j] + 1, \n                                    distance[i][j-1] + 1, \n                                    distance[i-1][j-1] + cost)\n\n    return distance[m][n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_subset(A, B):\n    # Iterate through A\n    for elem in A:\n        # Check if the element is in B \n        if elem not in B:\n            # If not, return False\n            return False\n\n    # If we reach here, all the elements of A\n    # were present in B, so return True \n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(\"Hello, World!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_average(list_numbers):\n    # Calculate the sum of all elements in the list\n    list_sum = 0\n    for i in range(len(list_numbers)):\n        list_sum += list_numbers[i]\n\n    # Calculate the average\n    list_average = list_sum / len(list_numbers)\n\n    # Return the average\n    return list_average\n\n# Call the function\nlist_average = find_average(list_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def random_num(start, end):\n  return random.randint(start, end) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(arr):\n    \n    max_val = arr[0]\n    \n    for num in arr:\n        if num > max_val:\n            max_val = num\n            \n    return max_val\n\nprint(find_max([2, 4, 8, 9, 10])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n   if n <= 1:\n       return n\n   else:\n       return(fibonacci(n-1) + fibonacci(n-2))\n\n# Print the first 10 numbers in the sequence\nfor i in range(10):\n   print(fibonacci(i)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.tokenize import sent_tokenize\n\ndef split_into_sentences(text):\n    sentences = sent_tokenize(text)\n    return sentences but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mean(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total / len(numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt \n\n# Input data \nx = [1, 2, 3, 4, 5, 6, 7] \ny = [15, 12, 16, 8, 13, 20, 18] \n\n# Plotting a graph \nplt.plot(x, y) \n\n# Labeling x and y axes\nplt.xlabel('Day') \nplt.ylabel('Temperature') \n\n# Title of the graph\nplt.title('Temperature Forecast') \n\n# Function to show the plot\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n\tdef __init__(self, name, age, address):\n\t\tself.name = name\n\t\tself.age = age\n\t\tself.address = address but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_dict(dict):\n for key in dict:\n   print(key,\":\", dict[key]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Point:\n  def __init__(self, x, y):\n    self.x = x\n    self.y = y\n\n  def move(self, dx, dy):\n    self.x += dx\n    self.y += dy\n\n  def distance(self, other_point):\n    return ((self.x - other_point.x)**2 + (self.y - other_point.y)**2)**0.5\n\n#example \np1 = Point(2,3)\np2 = Point(5,7)\n\nprint(p1.distance(p2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_letters(word):\n    for letter in word:\n        print(letter) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def extract_numbers(string):\n    numbers = []\n    for char in string:\n        if char.isdigit():\n            numbers.append(int(char))\n    return numbers but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'example.com'\n\n# Send GET request\nr = requests.get(url)\n\n# Parse HTML\nsoup = BeautifulSoup(r.content, 'html.parser')\n\n# Get item title\ntitle = soup.find('h1', {'class': 'title'}).text.strip()\n\n# Get item price\nprice = soup.find('span', {'class': 'price'}).get_text().strip()\n\nprint(title)\nprint(price) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_duplicates(text):\n  n = len(text)\n  duplicates = []\n\n  for i in range(n):\n    for j in range(i+1, n):\n      if text[i] == text[j]:\n        duplicates.append(text[i])\n\n  return duplicates but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linearSearch(list, num):\n    for i in range(len(list)):\n        if list[i] == num:\n            return i\n    return -1\n\nlist = [4,3,1,7,9,6]\nnum = 9\nprint(linearSearch(list, num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from datetime import datetime\n\ndef get_days_diff(date1, date2):\n d1 = datetime.strptime(date1, \"%Y-%m-%d\")\n d2 = datetime.strptime(date2, \"%Y-%m-%d\")\n return abs((d2 - d1).days) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: result = string[:3]\nprint(result) #pro but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def rotate_matrix(matrix):\n    # Create an empty list to store the rotated matrix\n    rotated = []\n  \n    # Iterate through the columns of the matrix \n    for i in range(len(matrix[0])):\n        # Create a new list to store the row\n        row = []\n      \n        # Iterate through the rows of the matrix\n        for j in range(len(matrix)):\n            # Add each element to the row\n            row.append(matrix[j][i])\n      \n        # Add the row to the rotated matrix\n        rotated.append(row)\n  \n    return rotated\n\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nrotated = rotate_matrix(matrix) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_gcd(num1, num2):\n    for i in range(max(num1, num2), 0, -1):\n        if num1 % i == 0 and num2 % i == 0:\n            return i\n\nresult = get_gcd(7, 8)\nprint(result)\n# Output: 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: d = { \"A\": 4, \"B\": 6, \"C\": 10 } but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num_cats = 0\nnum_dogs = 0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def textToList(string):\n words = []\n\n for char in string:\n  if char.isalpha():\n   words[-1] += char\n  else:\n   words.append('')\n \n words = [word.lower() for word in words if word]\n return words\n\nprint(textToList('Hi there, how are you?')) # returns ['hi', 'there', 'how', 'are', 'you'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def join_list_with_separator(list, separator):\n    joined_string = separator.join(list)\n    return joined_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_lcs(str1, str2):\n # create a matrix to store solutions to subproblems \n dp = [[0 for j in range(len(str2) + 1)] for i in range(len(str1) + 1)]\n\n # fill the lookup table in bottom-up manner\n for i in range(1, len(str1) + 1):\n  for j in range(1, len(str2) + 1):\n   if str1[i-1] == str2[j-1]:\n    dp[i][j] = 1 + dp[i-1][j-1]\n   else:\n    dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n \n # find the longest common sub sequence\n i, j = len(str1), len(str2)\n lcs = \"\"\n while i > 0 and j > 0:\n  if str1[i-1] == str2[j-1]:\n   lcs += str1[i-1]\n   i-=1\n   j-=1\n  elif dp[i][j-1] > dp[i-1][j]:\n   j-=1\n  else:\n   i-=1\n \n # Reverse the lcs string \n return lcs[::-1]\n\nstr1 = \"ACBA\"\nstr2 = \"ABAC\"\n\nprint(find_lcs(str1, str2))\n\n# Output: ACBA but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class AccessControlList():\n def __init__(self):\n self.access_rules = {}\n\n def add_user(self, user):\n self.access_rules[user.name] = user.access_rights\n\n def remove_user(self, user):\n del self.access_rules[user.name]\n\n def update_user_rights(self, user, new_access_rights):\n self.access_rules[user.name] = new_access_rights\n\n def get_user_rights(self, user):\n return self.access_rules[user.name]\n\nacl = AccessControlList()\n\n# add users\nACL.add_user(user1)\nACL.add_user(user2)\n\n# update access rights\nnew_access_rights = ['read', 'write', 'edit']\nACL.update_user_rights(user1, new_access_rights)\n\n# get access rights\nuser1_access_rights = ACL.get_user_rights(user1)\nuser2_access_rights = ACL.get_user_rights(user2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def triangleArea(side1, side2, side3):\n  s = (side1 + side2 + side3) / 2\n  area = (s * (s - side1) * (s - side2) * (s - side3)) ** 0.5\n  return area but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 11):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def intersect(dict1, dict2): \n    keys1 = set(dict1.keys())\n    keys2 = set(dict2.keys())\n    common_keys = keys1 &  keys2\n    return list(common_keys)\n\ndict1 = {\n    \"Name\": \"John\",\n    \"Age\": \"31\",\n    \"Fav_Color\": \"Green\"\n}\ndict2 = {\n    \"Name\": \"Martin\",\n    \"Age\": \"30\",\n    \"Fav_Book\": \"Harry Potter\"\n}\n\ncommon_keys = intersect(dict1, dict2)\n\nprint(common_keys) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_numbers(numbers):\n    numbers.sort(reverse=True)\n    return numbers\n\nnumbers = [28, 5, 17, 10, 43]\n\nsorted_numbers = sort_numbers(numbers)\nprint(sorted_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create a dictionary to store the words and their frequencies\ndictionary = {}\n\n# Read the input text document\nwith open('input.txt', 'r') as f:\n    text = f.read()\n\n# Split the text into words\nwords = text.split()\n\n# Calculate the word frequencies\nfor word in words:\n    # Update the frequency if the word already exists\n    if word in dictionary:\n        dictionary[word] += 1\n    # Add the word if it doesn't exist\n    else:\n        dictionary[word] = 1\n\n# Spell-check the words\nmisspelled_words = set()\nfor word in words:\n    # Check for the existence of the word in the dictionary\n    if word not in dictionary:\n        misspelled_words.add(word)\n\n# Print out the set of misspelled words\nprint(\"Misspelled words: \", misspelled_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ntext = \"I love programming\"\n\nsid = SentimentIntensityAnalyzer()\nscores = sid.polarity_scores(text)\n\nif scores['compound'] > 0.0:\n print(\"Positive sentiment\")\nelif scores['compound'] == 0.0:\n print(\"Neutral sentiment\")\nelse:\n print(\"Negative sentiment\")\n\n# Output: Positive sentiment but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from concurrent.futures import ThreadPoolExecutor\n\ndef asynchronous_tasks(tasks):\n    # initialize a thread pool executor \n    pool_executor = ThreadPoolExecutor(max_workers=4)\n\n    # submit tasks to the executor \n    futures = [pool_executor.submit(task) for task in tasks]\n\n    # wait for the tasks to finish \n    for future in futures:\n        print(future.result()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef start_game():\n print('Welcome to Text-based Game!')\n print('You have been dropped into a dangerous dungeon. Your objective is to find the exit door and reach the next level.')\n print()\n\ndef explore_dungeon():\n print('You find yourself in a dark and mysterious dungeon.')\n room_descriptions = ['You find a dark and cramped room.', \n                      'You enter a large and well lit chamber.',  \n                      'You enter a room with a small river running through it.']\n description = random.choice(room_descriptions)\n print(description)\n  \ndef get_user_command():\n command = input('What would you like to do? ')\n return command \n\nif __name__ == '__main__':\n start_game()\n explore_dungeon()\n running = True\n while running:\n  command = get_user_command()\n  if command.lower() == 'exit':\n    running = False\n  else:\n   print('I don\\'t understand.')\n print('Goodbye!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [12, 45, 37, 13, 4]\nx = 4\n\nif x in list:\n print(\"Given number is present in the list\") \nelse: \n print(\"Given number is not present in the list\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\n# make HTTP request\nr = requests.get(\"https://www.example.com/userdata?query=example\")\nif r.status_code == 200:\n    # parse response\n    data = r.json()\n    # do something with the data\n    # ... but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_desc(lst): \n    return sorted(lst, reverse=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isDivisible(a, b):\n    return a % b == 0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: data = [\n    {'name': 'John', 'age': 25, 'team': 'A'}, \n    {'name': 'Mark', 'age': 30, 'team': 'B'}\n]\n\nrecords = []\nfor item in data:\n    record = {}\n    for key, value in item.items():\n        record[key] = value\n    records.append(record)\n\nprint(records) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(word): \n    # get length of the word\n    n = len(word) \n\n    # loop from left and right\n    for i in range(n//2): \n        if word[i] != word[n - i - 1]:\n            return False \n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_sum(x, y):\n    \"\"\"\n    Takes in the arguments x and y and prints the result of p + q.\n    Args:\n        x: first argument.\n        y: second argument.\n    Returns:\n        result: the sum of the two arguments.\n    \"\"\"\n    result = x + y\n    return result\n\np = 5\nq = 7\nresult = calculate_sum(p, q)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: n = int(input())\narr = [int(x) for x in input().split()]\nx = int(input())\n\nj = 0\nfor i in range(n):\n    if arr[i] > x:\n        print(arr[i])\n        j = i\n        break\n\nfor i in range(j+1, n):\n    if arr[i] > x and arr[i] < arr[j]:\n        print(arr[i])\n        j = i but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: <!DOCTYPE html>\n<html>\n\n<head>\n <title>Popular Programming Languages</title>\n <script src=\"https://d3js.org/d3.v5.min.js\"></script>\n</head>\n\n<body>\n <h1>Popular Programming Languages</h1>\n <div id=\"graph\"></div>\n <script>\n const data = [\n  { language: 'JavaScript', count: 25 },\n  { language: 'Python', count: 18 },\n  { language: 'C++', count: 13 },\n  { language: 'Java', count: 9 },\n  { language: 'Go', count: 7 },\n  { language: 'C', count: 6 }\n ];\n\n const w = 500;\n const h = 500;\n const padding = 20;\n\n const svg = d3.select(\"#graph\")\n   .append(\"svg\")\n   .attr(\"width\", w)\n   .attr(\"height\", h);\n\n const xScale = d3.scaleBand()\n   .domain(data.map(d => d.language))\n   .range([padding, w - padding]);\n\n const yScale = d3.scaleLinear()\n   .domain([0, d3.max(data, d => d.count)])\n   .range([h - padding, padding]);\n\n const chart = svg.selectAll(\"rect\")\n   .data(data)\n   .enter()\n   .append(\"rect\")\n   .attr(\"x\", d => xScale(d.language))\n   .attr(\"y\", d => yScale(d.count))\n   .attr(\"width\", xScale.bandwidth())\n   .attr(\"height\", d => h - yScale(d.count) - padding)\n   .attr(\"fill\", \"teal\");\n\n const xAxis = d3.axisBottom(xScale);\n svg.append(\"g\")\n   .attr(\"transform\", `translate(0, ${h - padding})`)\n   .call(xAxis);\n\n const yAxis = d3.axisLeft(yScale);\n svg.append(\"g\")\n   .attr(\"transform\", `translate(${padding}, 0)`)\n   .call(yAxis);\n </script>\n</body>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicate_characters(string): \n result = \"\" \n  \n for i in range(len(string)): \n  if string[i] not in result: \n   result += string[i] \n  \n return result \n  \nprint(remove_duplicate_characters(\"tree traversal\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\n\nsentence = \"He is enjoying the warm weather\"\nword = \"enjoying\"\n\ntokens = nltk.word_tokenize(sentence)\ntagged = nltk.pos_tag(tokens)\n\nfor (token, tag) in tagged:\n   if token == word:\n     print(\"POS Tag of the word:\", tag) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ShoppingCart():\n    def __init__(self):\n        self.items = []\n    \n    def add_item(self, item):\n        self.items.append(item)\n\n    def remove_item(self, item):\n        if item in self.items:\n            self.items.remove(item) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def evaluate_expression(expression):\n    \"\"\"\n    Function to evaluate an arithmetic expression and return the result\n    \"\"\"\n    # define an operator precedence dictionary\n    op_precedence = {'+': 1, '-': 1, '*': 2, '/': 2} \n    \n    # break the expression into tokens\n    expression_tokens = expression.split(' ')\n    \n    # Initialize a stack\n    expression_stack = []\n    # loop through each token\n    for token in expression_tokens:\n        # push numbers onto the stack\n        if token.isdigit():\n            expression_stack.append(int(token))\n        # if the token is an operator\n        elif token in op_precedence:\n            # pop two numbers off of the stack\n            num2 = expression_stack.pop()\n            num1 = expression_stack.pop()\n            # perform the operation\n            if token == '+':\n                result = num1 + num2\n            elif token == '-':\n                result = num1 - num2\n            elif token == '*':\n                result = num1 * num2\n            elif token == '/':\n                result = num1 / num2\n            # push the result onto the stack\n            expression_stack.append(result)\n    \n    # return the result of the Expression\n    return expression_stack[0]\n\nif __name__ == '__main__':\n    expression = '3 + 4 * 5 + 9'\n    print(evaluate_expression(expression)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longestPalindromeSubstring(str):\n\tcurrLength = 1\n\tmaxLength = 1\n\tstart = 0\n\tlen = len(str)\n\n\tfor i in range(1, len):\n\t\t# even length palindromes\n\t\tlow = i - 1\n\t\thigh = i\n\t\twhile (low >= 0 and high < len and str[low] == str[high]):\n\t\t\tif (high - low + 1 > currLength):\n\t\t\t\tstart = low\n\t\t\t\tcurrLength = high - low + 1\n\t\t\tlow -= 1\n\t\t\thigh += 1\n\n\t\t# odd length palindromes\n\t\tlow = i - 1\n\t\thigh = i + 1\n\t\twhile (low >= 0 and high < len and str[low] == str[high]):\n\t\t\tif (high - low + 1 > currLength):\n\t\t\t\tstart = low\n\t\t\t\tcurrLength = high - low + 1\n\t\t\tlow -= 1\n\t\t\thigh += 1\n\n\tif (currLength > maxLength):\n\t\tmaxLength = currLength\n\n\tprint(\"Longest palindrome substring is:\")\n\tprint(str[start:start + maxLength])\n\treturn maxLength but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_longest_palindrome_substrings(s):\n    n = len(s)\n    dp = [[ False for _ in range(n)] for _ in range(n)]\n \n    start, maxLen = 0, 0\n    for i in range(n):\n        dp[i][i] = True\n    for i in range(n-1):\n        j = i + 1\n        if s[i] == s[j]:\n            dp[i][j] = True\n            start = i\n            maxLen = 2\n \n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if dp[i+1][j-1] and s[i] == s[j]:\n                dp[i][j] = True\n \n                if k > maxLen:\n                    maxLen = k\n                    start = i\n    return s[start : start+maxLen]\n \nprint(get_longest_palindrome_substrings('abbacca')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_mean(values):\n    total_sum = 0\n\n    for num in values:\n        total_sum += num\n\n    return total_sum / len(values)\n\nvalues = [1, 2, 3, 4, 5]\n\nmean = calculate_mean(values)\nprint(\"Mean Value:\", mean) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(arr):\n    max_number = 0\n\n    for i in arr:\n        if i > max_number:\n            max_number = i\n    return max_number but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_subarray_sum(arr):\n    # Keep track of the current sum and the maximum sum \n    current_sum = 0\n    max_sum = float('-inf')\n    \n    # Iterate over the array and update the current/max sum\n    for num in arr:\n        current_sum += num\n        max_sum = max(max_sum, current_sum)\n        current_sum = max(current_sum, 0)\n        \n    return max_sum\n\nif __name__ == '__main__':\n    arr = [2, -5, 4, -2, 7, -1]\n    result = max_subarray_sum(arr)\n    print(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers = [1, 7, 8, 4, 9]\naverage = sum(numbers) / len(numbers)\nprint(average) # 5.6 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n  def __init__(self, name, age, gender):\n    self.name = name\n    self.age = age\n    self.gender = gender\n    \n    def display_person(self):\n      print(\"Name: \" + self.name + \"\\nAge: \" + str(self.age) + \"\\nGender: \" + self.gender)\n\nperson = Person(\"John\", 28, \"Male\")\nperson.display_person() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Deck:\n    \n    #constructor\n    def __init__(self):\n        self.cards = []\n\n    #function to create a deck of playing cards\n    def create_deck(self):\n        suits = [\"C\", \"S\", \"H\", \"D\"]\n        ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n\n        for suit in suits:\n            for rank in ranks:\n                card = (rank, suit)\n                self.cards.append(card)\n\n     #function to draw a card from the deck\n    def draw_card(self):\n        if self.cards:\n            return self.cards.pop()\n        else:\n            return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def area(self):\n        return 3.14 * self.radius**2\n    \n    def circumference(self):\n        return 2 * 3.14 * self.radius but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def nearest_prime(num):\n    if num <= 2:\n        return -1\n    for i in range(num-1,2,-1):\n        for j in range(2,i):\n            if i % j == 0:\n                break\n        else:\n            return i\n\nprint(nearest_prime(173)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n#load dataset\ndf = pd.read_csv('data.csv')\n\n#Vectorize the data\ncv = CountVectorizer(stop_words='english', max_features=1000)\nX = cv.fit_transform(df['text']).toarray()\ny = df['sentiment']\n\n#Split the dataset into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n#Train the model\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n\n#Evaluate the model\nscore = model.score(X_test, y_test)\nprint(f'Model Accuracy: {score*100}%') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def minCoins(amount):  \n  \n    # Initializing the list of coins with the given amount \n    coins = [1, 2, 5] \n    num_coins = [999999999] * (amount+1) \n    num_coins[0] = 0\n  \n    for i in range(1, amount+1): \n        for j in coins: \n            if j <= i: \n                sub_res = num_coins[i-j] \n                if sub_res + 1 < num_coins[i]: \n                    num_coins[i] = sub_res + 1\n  \n    return num_coins[amount] \n\nprint(minCoins(8)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport pandas as pd\nimport json\n\nurl = 'https://www.example.com/'\n\nresponse = requests.get(url)\nproducts = json.loads(response.content)\n\nprice_df = pd.DataFrame(columns=['Product', 'Price'])\n\nfor product in products:\n    product_name = product['name']\n    product_price = product['price']\n    price_df = price_df.append({'Product': product_name, 'Price': product_price}, ignore_index=True)\n\nprice_df.to_csv('product_price.csv', index=False) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\nif n==0: return 0\nelif n==1: return 1\nelse:\n return fibonacci(n-2) + fibonacci(n-1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #\n# A module capable of changing alphabet letter cases.\n#\n# It uses very generic Python functionality to ensure\n# backward compatibility.\n#\n#\n# The programme processes a set of characters by default\n# If no character is entered for processing, the programme\n# simply exists. This can be turned off by setting 'a' to 1\n# (for all vowels) or 2 (for all consonants).\n# \n#\n#\n\nimport os;\nimport sys;\nimport re;\nimport string;\nfrom re import sub;\n\n\n#\n#! Get parsed arguments\n#\ndef get_parsed_args():\n        \n    # Pre-allocate\n    parser = \"\";\n    args = \"\";\n    if sys.version_info < (2,7):\n        from optparse import OptionParser\n        parser = OptionParser();\n        parser.add_option(\"-i\", \"--input_path\", type=str, help=\"Input file path with extension\");\n        parser.add_option(\"-o\", \"--output_path\", type=str, help=\"Output file path with extension\");\n        parser.add_option(\"-a\", \"--all_chars\", type=int, help=\"Switch a type of characters (all vowels or cons.), disable=0, vowel=1, cons=2\", default=0);\n        parser.add_option(\"-c\", \"--c\", type=str, help=\"Characters to process (comma-separated list, no whitespace)\", default=\"\");\n\n    else:\n        from argparse import ArgumentParser\n        parser = ArgumentParser();\n        parser.add_argument(\"-i\", \"--input_path\", type=str, help=\"Input file path with extension\");\n        parser.add_argument(\"-o\", \"--output_path\", type=str, help=\"Output file path with extension\");\n        parser.add_argument(\"-a\", \"--all_chars\", type=int, help=\"Switch a type of characters (all vowels or cons.), disable=0, vowel=1, cons=2\", default=0);\n        parser.add_argument(\"-c\", \"--c\", type=str, help=\"Characters to process (comma-separated list, no whitespace)\", default=\"\");\n    \n    args = parser.parse_args();\n    args = vars(args);\n\n    ##print(option)\n    ##print(args)\n    ##print(type(option))\n    ##print(option.c)\n    ##print(option.all_chars)\n    ##print(option.input_path)\n    ##print(option.output_path)\n\n    # Safety assertions\n    assert (args['all_chars'] >= 0 and args['all_chars'] <= 2), \\\n           \"Invalid value! programme exiting!\\n type python switchLetterCase.py -h for information on arguments\"\n\n    # If nothing to process, programme will exit\n    if (args['all_chars'] == 0) and \\\n       ((args['c'] == \"\") or \\\n        (args['c'] == \" \") or \\\n        args['all_chars'] is None or \\\n        all([x is ',' for x in args['c']])):\n        \n        print(\".....Nothing to process, programme exiting.\\n\\n\");\n        sys.exit(0);\n\n    return args;\n\n\n#\n#! Main processor function\n#\n\ndef process_files(args):\n\n    \n    try:\n        # Get handlers\n        f1 = open(args['input_path'], 'r')\n        f2 = open(args['output_path'], 'w');\n\n        # Initial setup\n        line_to_write = \"\"       \n        if (args['all_chars'] == 0):    # process characters in the list\n\n            gg = \"\".join(args['c'])\n\n            for line in f1:\n                g = [y.upper() if y in gg else y.lower() if y.upper() in gg else y for y in line];\n                line_to_write = \"\".join(g);\n                f2.write(line_to_write);\n\n        elif (args['all_chars'] == 1):    # process vowels only\n\n            vowels = sub('[^aeiou]+','',string.ascii_lowercase)\n\n            for line in f1:\n                g = [y.upper() if y in vowels else y.lower() if y.upper() in vowels else y for y in line];\n                line_to_write = \"\".join(g);\n                f2.write(line_to_write);       \n\n        elif (args['all_chars'] == 0):    # process consonants in the list\n\n            consonants = sub('[aeiou]+','',string.ascii_lowercase)\n\n            for line in f1:\n                g = [y.upper() if y in gg else y.lower() if y.upper() in gg else y for y in line];\n                line_to_write = \"\".join(g);\n                f2.write(line_to_write);\n\n        # Print some INFO    \n        print(\"All characters toggled! Terminating programme......\\n\\n\");\n\n        f1.close();\n        f2.close();\n          \n    except (Exception, BaseException, IOError, ValueError, WindowsError) as e:        \n        print(e);\n\n    finally:\n        del f1, f2\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from http.server import BaseHTTPRequestHandler, HTTPServer\n \n# HTTPRequestHandler class\nclass HTTPServer_RequestHandler(BaseHTTPRequestHandler):\n \n  # GET\n  def do_GET(self):\n    # Send response status code\n    self.send_response(200)\n \n    # Send headers\n    self.send_header('Content-type','text/html')\n    self.end_headers()\n \n    # Send message back to client\n    message = \"Hello world!\"\n    # Write content as utf-8 data\n    self.wfile.write(bytes(message, \"utf8\"))\n    return\n \ndef run():\n  print('starting server...')\n \n  # Server settings\n  # Choose port 8080, for port 80\n  server_address = ('127.0.0.1', 8080)\n  httpd = HTTPServer(server_address, HTTPServer_RequestHandler)\n  print('running server...')\n  httpd.serve_forever()\n \n \nrun() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\n \n# Define a song length\nsong_length = 300\n\n# Start the progress bar\nprogress_bar = 0\nfor x in range(0, song_length):\n    # Update the progress bar\n    progress_bar += 1\n    # Sleep a second\n    time.sleep(1)\n    print(\"Progress Bar: {}%\".format(progress_bar/song_length * 100))\n\n# Song has ended\nprint(\"Song Ended!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #load Libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n#load Data\ndata = pd.read_csv('user_data.csv')\n\n#split Data\nX = data[['age', 'gender', 'interest']]\ny = data['click']\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n#train Model\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(x_train, y_train)\n\n#evaluate Model\nfrom sklearn.metrics import accuracy_score\n\ny_pred = model.predict(x_test)\nprint('Accuracy: ', accuracy_score(y_test, y_pred)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: vowels = \"aeiou\"\ninput_string = input(\"Input string: \")\n\nvowel_count = {}\nfor char in input_string:\n  if char in vowels:\n    if char in vowel_count:\n      vowel_count[char] += 1\n    else:\n      vowel_count[char] = 1\n\nprint (vowel_count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_nums(list_of_nums):\n sum = 0\n for num in list_of_nums:\n  sum += num\n return sum\n\nsum_of_nums = add_nums(list_of_nums)\nprint(sum_of_nums) # 15 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # A function to calculate the Square Root of a number using \n# the babylonian method \ndef sqrt(n): \n\t\n\t# We are using n itself as initial approximation \n\t# This can definitely be improved \n\tx = n \n\ty = 1\n\t\n\t# e decides the accuracy level \n\te = 0.000001\n\t\n\twhile(x - y > e): \n\t\tx = (x + y)/2\n\t\ty = n/x \n\n\treturn x \n\n# Driver Program \nnum = 25\nprint(sqrt(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def frequencySort(text):\n    # create a dictionary to store words and its frequencies\n    word_freq = {}\n    # split the given text in to words\n    words = text.split()\n    # count the frequency of each word\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n    # sort the words based on the frequency\n    sorted_words_freq = sorted(word_freq.items(), key=lambda kv: kv[1], reverse=True) \n    sorted_words = [tup[0] for tup in sorted_words_freq] \n    # return the list of frequency-sorted words\n    return sorted_words\n\ntext = \"This is a sample text for generating a frequency-sorted list of words.\"\nresult = frequencySort(text)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def SumArray(arr):\n  result = 0\n  for num in arr: \n    result += num\n  return result \n \nprint(SumArray([1, 4, 8, 10, 12]))\n    # Outputs: 35 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef hasPalindrome(sentence):\n words = sentence.split(' ')\n for word in words:\n  if word == word[::-1]:\n   return True\n return False\n\ndef isPalindrome(sentence):\n sentence = re.sub('\\W+', '', sentence.lower())\n return sentence == sentence[::-1]\n\nif __name__ == '__main__': \n sentence = 'A man, a plan, a canal, Panama'\n print(hasPalindrome(sentence)) # Outputs True\n print(isPalindrome(sentence)) # Outputs True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def knapsack(items, capacity):\n n = len(items)\n dp = [[0 for _ in range(capacity+1)] for _ in range(n+1)]\n\n for i in range(1, n+1):\n  for j in range(capacity+1):\n   if items[i-1][1] <= j:\n    dp[i][j] = max(items[i-1][0] + dp[i-1][j-items[i-1][1]], dp[i-1][j])\n   else:\n    dp[i][j] = dp[i-1][j]\n   \n return dp[n][capacity]\n\n# Sample run\n# The items are (10, 5), (5, 7), (8, 3), (9, 9)\n# The capacity of the knapsack is 16\nitems = [(10, 5), (5, 7), (8, 3), (9, 9)]\ncapacity = 16\nprint(knapsack(items, capacity)) # Outputs: 21 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def solve_maze(maze, start_pos, end_pos):\n    # Initialize an empty path \n    path = [] \n  \n    # Create a visited array to mark \n    # the positions that are visited \n    visited_positions = set() \n  \n    # Insert the start position into \n    # the stack \n    stack = [start_pos] \n  \n    # Loop until the stack is empty \n    while stack: \n  \n        # Pop a position from the stack \n        position = stack.pop() \n  \n        # If this is the end position \n        # then return the path \n        if position == end_pos: \n            path.append(position) \n            return path \n  \n        # Mark the visited position \n        visited_positions.add(position) \n  \n        # Fetch all the adjacent positions \n        # that are not yet visited \n        adjacent_positions = get_adjacent_positions(maze, position) \n        unvisited_adjacent_positions = [pos for pos in adjacent_positions \n               if pos not in visited_positions] \n  \n        # Push the unvisited adjacent \n        # position into the stack \n        stack.extend(unvisited_adjacent_positions) \n  \n        # Push the current position \n        # into the path \n        path.append(position) \n  \n    return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com/product/123'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nprice_block = soup.find('div', class_='price')\nprices = [float(price.text) for price in price_block.find_all('span')]\n\nprint(f\"Prices for {url} are {prices}\") but is not the same. just give one example and only return the code."}
