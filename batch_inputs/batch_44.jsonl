{"prompt": "make some code that functions the same as the following code: import base64\nfrom Crypto.Cipher import AES\n\nsecret_key = \"YourSecr3tEncrKey\"\n\ndef encodeAES(text):\nKey = base64.b64encode(secret_key.encode(\"utf-8\"))\n\nIV = 16 * '\\x00' \n\nmode = AES.MODE_CBC\nencryptor = AES.new(Key, mode, IV=IV)\ntext = text.encode(\"utf-8\")\nciphertext = encryptor.encrypt(text)\n\nreturn base64.b64encode(ciphertext).decode(\"utf-8\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Calculator:\n    def __init__(self):\n        pass\n    \n    def add(self, a, b):\n        return a + b\n    \n    def subtract(self, a, b):\n        return a - b\n    \n    def multiply(self, a, b):\n        return a * b\n    \n    def divide(self, a, b):\n        if b == 0:\n            raise ValueError(\"Cannot divide by zero.\")\n        else:\n            return a/b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_values(list_of_dicts): \n  return sum([v for d in list_of_dicts for v in d.values()]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_area(shape, *args):\n if shape == 'triangle':\n base= args[0]\n height= args[1]\n return (0.5 * base * height)\n\n elif shape == 'square':\n side = args[0]\n return (side ** 2)\n\n elif shape == 'rectangle':\n length = args[0]\n breadth = args[1]\n return (length * breadth)\n\n elif shape == 'circle':\n radius = args[0]\n return (3.142 * radius * radius)\n\nelse:\n return \"Incorrect shape\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_common_substring(s1, s2):\n  len1, len2 = len(s1), len(s2)\n  table = [[0 for _ in range(len2+1)] for _ in range(len1+1)] #2-D array\n  longest, x_longest = 0, 0\n\n  for x in range(1, len1+1):\n    for y in range(1, len2+1):\n      if s1[x-1] == s2[y-1]:\n        table[x][y] = table[x-1][y-1] + 1\n        if table[x][y] > longest:\n          longest = table[x][y]\n          x_longest = x\n      else:\n        table[x][y] = 0\n\n  return s1[x_longest - longest: x_longest] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sieve_of_eratosthenes(n): \n    sieve = [True] * (n + 1) \n    sieve[0] = False\n    sieve[1] = False\n    for i in range(2, n + 1):  \n        if (sieve[i] == True): \n            for j in range(2 * i, n + 1, i): \n                sieve[j] = False\n    return sieve\n\nnumbers = [7, 9, 13, 27]\nsieve = sieve_of_eratosthenes(50)\nfor num in numbers: \n    if sieve[num]: \n        print(num,\"is prime number\")\n    else: \n        print(num,\"is not a prime number\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: a = int(input())\nb = int(input())\n\nprint(a + b) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n#  Author:\n#  Rudiger Birkner (Networked Systems Group ETH Zurich)\n\n\nclass FlowModMsgBuilder(object):\n    def __init__(self, participant, key):\n        self.participant = participant\n        self.key = key\n        self.flow_mods = []\n\n    def add_flow_mod(self, mod_type, rule_type, priority, match, action, datapath = None, cookie = None):\n        if cookie is None:\n            cookie = (len(self.flow_mods)+1, 65535)\n\n        fm = {\n               \"cookie\": cookie,\n               \"datapath\": datapath,\n               \"mod_type\": mod_type,\n               \"rule_type\": rule_type,\n               \"priority\": priority,\n               \"match\": match,\n               \"action\": action\n             }\n\n        self.flow_mods.append(fm)\n\n        return cookie\n\n    def delete_flow_mod(self, mod_type, rule_type, cookie, cookie_mask):\n        fm = {\n            \"cookie\": (cookie, cookie_mask),\n            \"mod_type\": mod_type,\n            \"rule_type\": rule_type,\n        }\n\n        self.flow_mods.append(fm)\n\n    def get_msg(self):\n        msg = {\n                \"auth_info\": {\n                               \"participant\" : self.participant,\n                               \"key\" : self.key\n                             },\n                \"flow_mods\": self.flow_mods\n              }\n\n        return msg\n\n    def reset_flow_mod(self):\n        self.flow_mods = []\n\n#  request body format:\n#    {\"auth_info\": {\n#            \"participant\": 1,\n#            \"key\": \"xyz\"\n#            }\n#     \"flow_mods\": [\n#            { \"cookie\": (1, 2**16-1),\n#              \"mod_type\": \"insert/remove\",\n#              \"rule_type\": \"inbound/outbound/main\",\n#              \"priority\": 1,\n#              \"match\" : {\n#                         \"eth_type\" : 0x0806,\n#                         \"arp_tpa\" : (\"172.1.0.0\", \"255.255.255.0\"),\n#                         \"in_port\" : 5,\n#                         \"eth_dst\" : \"ff:ff:ff:ff:ff:ff\",\n#                         \"eth_src\" : \"80:23:ff:98:10:01\",\n#                         \"ipv4_src\" : \"192.168.1.1\",\n#                         \"ipv4_dst\" : \"192.168.1.2\",\n#                         \"tcp_src\" : 80,\n#                         \"tcp_dst\" : 179,\n#                         \"udp_src\" : 23,\n#                         \"udp_dst\" : 22,\n#                        },\n#              \"action\" : {\n#                         \"fwd\": [\"inbound\"/\"outbound\"/\"main-in\"/main-out\"],\n#                         \"set_eth_src\": \"80:23:ff:98:10:01\",\n#                         \"set_eth_dst\": (\"00:00:00:00:00:01\",\"00:00:00:00:03:ff\")\n#                         }\n#            },\n#            { \"cookie\": (2, 2**16-1),\n#              \"mod_type\": \"insert/remove\",\n#              \"rule_type\": \"inbound/outbound/main\",\n#              \"match\" : {\"tcp_dst\" : 80},\n#              \"action\" : {\"fwd\": [3]}\n#            }\n#            ...]\n#    }\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from http.server import CGIHTTPRequestHandler, HTTPServer\n\nclass MyHTTPServer(CGIHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n        file = open('index.html', 'r')\n        html = file.read()\n        file.close()\n        self.wfile.write(html.encode())\n\nserver = HTTPServer(('', 8080), MyHTTPServer)\nprint(\"Starting server at http://localhost:8080\")\nserver.serve_forever() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_add(list_a, list_b):\n  result = []\n\n  for i in range(len(list_a)):\n     result.append(list_a[i] + list_b[i])\n\n  return result\n\nresult = list_add(list_a, list_b)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pig_latin(word):\n    first_letter = word[0]\n\n    # check if the word starts with a vowel \n    if first_letter in \"aeiou\":\n        latin_word = word + \"ay\"\n    else:\n        latin_word = word[1:] + first_letter + \"ay\"\n\n    return latin_word but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from nltk import word_tokenize, pos_tag\n \ndef match_pos(sent1, sent2):\n    sent1_tokens, sent2_tokens = word_tokenize(sent1), word_tokenize(sent2)\n    sent1_pos, sent2_pos = pos_tag(sent1_tokens), pos_tag(sent2_tokens)\n    matches = []\n    for i in range(min(len(sent1_pos),len(sent2_pos))):\n        if sent1_pos[i][1] == sent2_pos[i][1]:\n            matches.append(sent1_pos[i][0] + ':' + sent2_pos[i][0])\n    return matches\n \nsent1 = 'She is the best player.'\nsent2 = 'He is the worst player.'\n \nprint(match_pos(sent1,sent2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def detectString(sentence, string):\n  if string in sentence:\n    return \"String '{}' detected in the sentence\".format(string)\n  else:\n    return \"String '{}' not detected in the sentence\".format(string)\n\nsentence = \"This is an example sentence\"\nstring = \"example\"\n\nprint(detectString(sentence, string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_discounted_cost(cost, discount_percentage):\n discounted_cost = cost - (cost * (discount_percentage/100))\n return discounted_cost\n\ndiscounted_cost = calculate_discounted_cost(100, 25)\nprint ('The discounted cost is: ', discounted_cost) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def tokenize(string):\n    words = string.split(\" \")\n    return words\n\ntokenized_str = tokenize(\"Hello, World!\")\nprint(tokenized_str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gini(data):\n    n = len(data)\n    data.sort()\n \n    gini_coef = 0\n    for k in range(n):\n        i = n - k - 1\n        gini_coef += (2 * i + 1 - n) * data[i]\n    gini_coef = gini_coef / (n * sum(data))\n \n    return gini_coef\n\nprint(gini(data))\n# Output: 0.32 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_emails(emails, valid_domains):\n filtered_emails = []\n for email in emails:\n domain = email.split('@')[1]\n if domain in valid_domains:\n filtered_emails.append(email)\n return filtered_emails\n\nemails = [\n 'jane@domain1.com',\n 'john@domain2.com',\n 'dave@domain3.com',\n 'sarah@domain4.com'\n]\nvalid_domains = ['domain1.com', 'domain2.com']\n\nfiltered_emails = filter_emails(emails, valid_domains)\nprint(filtered_emails) // ['jane@domain1.com', 'john@domain2.com'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mean(list):\n    \"\"\"Calculate the mean of the given list.\"\"\"\n    total = 0\n    for i in list:\n        total += i\n    return total / len(list)\n\n# Usage Example\nlist = [1, 2, 3, 4, 5]\nmean = mean(list)\nprint(mean)  # 3.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.tree import DecisionTreeClassifier\n\n# Create and train a Decision Tree classifier\nclf = DecisionTreeClassifier().fit(X, y)\n\n# Make predictions\npredictions = clf.predict(X)\n\n# Print the predictions\nprint(predictions) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fib(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\nn = 8\nprint(fib(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Import the necessary libraries\nfrom azureml.core import Workspace\nfrom azureml.pipeline.core import Pipeline\nfrom azureml.core.dataset import Dataset\nfrom azureml.pipeline.steps import PythonScriptStep\n\n#Create workspace\nws = Workspace.from_config()\n\n#Build the Pipeline\npre_process_step = PythonScriptStep(\n    script_name='pre-process.py',\n    arguments=['--data', input_ds.as_named_input('input_ds').as_mount()],\n    outputs=['processed_ds'],\n    compute_target=compute_target\n)\n\npipeline = Pipeline(\n    workspace=ws,\n    steps=[pre_process_step],\n    description='A pipeline to pre-process the input dataset'\n)\n\npipeline.validate()\n\n#Submit the pipeline to the Azure Machine Learning workspace\npipeline_run = Experiment(ws, 'Pre-Process_Dataset').submit(pipeline)\n\n#Wait for the pipeline to finish\npipeline_run.wait_for_completion(show_output=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for word in ['cat', 'dog', 'bird']:\n    print(word) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\ndata = [('John', 24, 'Male'), \n        ('Sarah', 32, 'Female')] \n  \n# Create the pandas DataFrame \ndf = pd.DataFrame(data, columns = ['Name', 'Age', 'Gender']) \n  \nprint(df) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import turtle\n\nt = turtle.Turtle()\n\nfor i in range(20):\n    t.left(90)\n    t.forward(50)\n    t.right(90)\n    t.forward(50) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\n\n# Modificated ShoutBox Library\n#   enables further modifications for the ShoutBox\n#   Run without to generate htmlfile\n#   Run the following to enter a new line from command line\n#     psogen.py input Anonymous default \"Text\"\n\nimport os, re\n\nimport messages, broadcast\n\ndatafilename = os.environ[\"SHOUTBOX_CHATFILE\"]\nhtmlfilename = os.environ[\"SHOUTBOX_GEN_HTMLFILE\"]\n\nstyle=(\"name { font-weight: bold; font-family:Tahoma } \"\n       \"data { font-family: Tahoma } \"\n       \"data.def { color: #000000 } \"\n       \"data.blue { color: #0000FF } \"\n       \"data.green { color: #008000 } \"\n       \"data.orange { color: #FF8040 } \"\n       \"data.red { color: #FF0000 }\")\n\ntry:\n     raw_dest =  os.environ[\"SHOUTBOX_BROADCAST_DESTINATIONS\"]\n     finished_dest = re.sub ( '#' , '\"' , raw_dest )\n     broadcast_destination = eval ( finished_dest )\nexcept KeyError:\n     broadcast_destination = False\n\n\n#--------------\n#  Generates Shoutbox-HTML-Frame  ...\n#           Imports:\n#               content    -   String  containing preformatted data\n#--------------\ndef generate_html(content):\n    htmlstring =   \"<html><head><meta http-equiv='cache-control' content='no-cache'><meta name='GENERATOR' content='PyShoutOut'><title>Shout-Out Data</title>\"\n    htmlstring +=  \"<style type='text/css'>\" + style  + \"</style></head><body>\"\n    htmlstring +=  content\n    htmlstring +=  \"</body></html>\"\n    return htmlstring\n\n#--------------\n#   Generates HTML Data based on given content  and write it to static html file\n#          Imports:\n#               content    -   String  containing preformatted data\n#--------------\ndef generate_html_into_file(content):\n    htmlstring = generate_html ( content )\n\n    htmlfile = open( htmlfilename , 'w' )\n    htmlfile.write( htmlstring )\n    htmlfile.close()\n\n#--------------\n# Generates HTML Data based on datafilename 's content\n#--------------\ndef generate_html_from_file():\n    old =  read_data_file()\n    generate_html_into_file( old   )\n\n#--------------\n# Generates and Displays generated HTML\n#--------------\ndef generate_html_to_display_from_file():\n    old =  read_data_file()\n    htmlstring = generate_html ( old )\n    print htmlstring\n\n#--------------\n#  Reads Data file from datafilename given name\n#--------------\ndef read_data_file():\n    datafile = open(datafilename, 'r')\n    old = datafile.read()\n    datafile.close()\n    return old\n\n#--------------\n# Function for saving new Shoubox-Content & Regenerate static HTML file -- usually called by HTML-Form\n#--------------\ndef process_form( name , indata , color ):\n    content = save_input(  name , indata , color )\n\n    if broadcast_destination == False:\n          generate_html_into_file ( content )\n\n\n#--------------\n# Acutally Saves SB-Content to datafile\n#--------------\ndef save_input( name , indata , color ):\n\n    content = prepare_line ( name, indata, color  )\n\n    if broadcast_destination != False:\n        return writeToNetwork( content , broadcast_destination )\n    else:\n        return writeToDisk ( content )\n\ndef writeToNetwork ( content , broadcast_destination ):\n        message = messages.shoutbox_message()\n\tmessage.set(content)\n        casting = broadcast.broadcast( )\n\tcasting.setDestination(broadcast_destination)\n\tcasting.set( message.get_message() )\n\tcasting.send()\n\treturn None\n\ndef writeToDisk ( content ):\n        old = read_data_file()\n        finalcontent = content  + old\n        datafile = open(datafilename, 'r+')\n        datafile.write(finalcontent)\n        datafile.close()\n\treturn finalcontent\n\n\ndef prepare_line ( name, indata, color  ):\n    datapass = re.sub(\"<\", \"&lt;\", indata)\n    data = re.sub(\">\", \"&gt;\", datapass)\n    content = \"<name>\" + name + \":</name>&nbsp;&nbsp;&nbsp;<data class='\" + color + \"'>\" + data + \"</data><br>\\n\"\n    return content\n\n#--------------\n#  Testing or Generating static HTML File\n#--------------\nif __name__ == \"__main__\":\n  import sys\n  if sys.argv.count(\"input\") >= 1 :\n     save_input(  sys.argv[2] ,  sys.argv[3] ,  sys.argv[4] )\n     generate_html_to_display_from_file()\n     print \"Entered Text.\"\n\n  generate_html_from_file ()\n  print \"Generated HTML-Shoutbox File.\"\n\n\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: a, b = 0, 1\nfor _ in range(10):\n print(a, end=' ')\n a, b = b, a + b\n# 0 1 1 2 3 5 8 13 21 34 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def getFactorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num * getFactorial(num - 1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef linear_regression(X, y):\n    X_b = np.array([np.ones(X.shape[0]), X]).T\n    theta = np.linalg.inv(X_b.T @ X_b) @ X_b.T @ y\n    return theta but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def celcius_to_fahrenheit(temp):\n    return ((temp*9/5) + 32)\n\nprint(celcius_to_fahrenheit(20)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def get_x(self):\n        return self.x\n    def get_y(self):\n        return self.y\n    def is_origin(self):\n        return self.x == 0 and self.y == 0\n    def __str__(self):\n        return 'Point(x = {}, y = {})'.format(self.x, self.y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nWrite a Python program to generate random walk data.\n\"\"\"\n\nimport numpy as np\n\ndef random_walk(n):\n    \"\"\"\n    Generates a n-step random walk\n    \"\"\"\n    steps = np.random.normal(0, 1, n)\n    return np.cumsum(steps)\n\nif __name__ == '__main__':\n    n = 10\n    random_walk_data = random_walk(n)\n    print(random_walk_data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport re\n\ntarget_url = 'www.example.com'\n\ndef scrape_emails(url):\n    # get the HTML source code from the given url\n    response = requests.get(url)\n    html = response.text\n    # extract all emails from html with the help of regular expression\n    emails = re.findall('\\S+@\\S+', html)\n    # print all scraped emails\n    print('Emails found:')\n    print('\\n'.join(emails))\n\nif __name__ == '__main__':\n    scrape_emails(target_url) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_factors(number):\n    factors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            factors.append([i, int(number/i)])\n    return factors\n\nprint(get_factors(45)) # Output: [[1, 45], [3, 15], [5, 9], [9, 5], [15, 3], [45, 1]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Square: \n    def __init__(self, number): \n        self.number = number \n\n    def square_number(self): \n        return self.number * self.number \n\nnumber_obj = Square(10) \nprint(number_obj.square_number()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def permute_word(word):\n    # Base case \n    if len(word) == 0: \n        return [''] \n    \n    prev_list = permute_word(word[1:]) \n    next_list = [] \n    \n    # Insert the first character at different positions in the word \n    for each_string in prev_list: \n        for index in range(len(each_string)+1): \n            new_string = each_string[:index] + word[0] + each_string[index:] \n            next_list.append(new_string)\n    return next_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score\n\n# Load data\ndata = pd.read_csv('student_data.csv')\nX = data.iloc[:,0:-1]\ny = data.iloc[:, -1]\n\n# Preprocssing\nX = StandardScaler().fit_transform(X)\n\n# Split train, test data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n\n# Train machine learning model \nknn_classifier = KNeighborsClassifier(n_neighbors=6)\nknn_classifier.fit(X_train, y_train)\n\n# Make predictions\ny_pred = knn_classifier.predict(X_test)\n\n# Evaluate performance\nprint(confusion_matrix(y_test, y_pred))\nprint(accuracy_score(y_test, y_pred)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nWrite a Python script to traverse a directory and its subdirectories.\n\"\"\"\n\nimport os\n\ndef list_files(start_path):\n    for root, dirs, files in os.walk(start_path):\n        for name in files:\n            print(os.path.join(root, name))\n\nif __name__ == '__main__':\n    start_path = '.'\n    list_files(start_path) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack:\n    def __init__(self):\n        self.items = []\n    \n    def is_empty(self):\n        return self.items == []\n    \n    def push(self, item):\n        self.items.append(item)\n    \n    def pop(self):\n        return self.items.pop()\n    \n    def peek(self):\n        return self.items[len(self.items)-1]\n    \n    def size(self):\n        return len(self.items) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import smtplib \n# creates SMTP session \ns = smtplib.SMTP('smtp.gmail.com', 587) \n# start TLS for security \ns.starttls() \n# Authentication \ns.login(\"Your Email\", \"Your Password\") \n# message to be sent \nmessage = \"Segment your emails according to their purpose.\"\n# sending the mail \ns.sendmail(\"SenderMail\", \"ReceiverMail\", message) \n# terminating the session \ns.quit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\nimport csv\n\ntotal_attendees = 0\nwith open('attendance.csv', 'r') as csv_file:\n    csv_reader = csv.reader(csv_file)\n    for row in csv_reader:\n        total_attendees += 1\n\nprint(f'Total Attendees: {total_attendees}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Object-oriented programming (OOP) is a programming paradigm in Python that focuses on creating reusable code through the use of classes and objects. Classes are a template for creating objects, which are instances of a class and contain properties and methods that are specific to that object. In OOP, objects interact with one another to perform tasks, as opposed to procedural programming, which calls a list of instructions and may have different functions manipulating the same data. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class lazy_evaluation:\n def __init__(self, func):\n self.func = func\n\n def __call__(self, *args, **kwargs):\n result = self.func(*args, **kwargs)\n return result\n\n@lazy_evaluation\ndef add(a, b):\n return a + b\n\nresult = add(2, 3)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n#\n# This script takes a database (SQLite) obtained from the PIQMIe service and populates\n# additional tables/views to facilitate differential protein expression analyses based\n# on standardized SILAC ratios.\n#\n# Note:\n#   z_score_{raw|norm}_ratio  - column with canonical Z-score transformed raw/normalized\n#                               SILAC protein ratios\n#\n#   mz_score_{raw|norm}_ratio - column with modified Z-score transformed SILAC protein ratios\n#                               suitable for heavy-tailed data (Iglewicz and Hoaglin, 1993)\n# \n#\n# Author: Arnold Kuzniar\n#\n# Version: 1.0\n#\n\nimport os\nimport sys\nimport argparse as argp\nimport math\nimport numpy as np\nimport scipy.stats as st\nimport sqlite3 as sqlt\nimport collections as cls\n\nratio_types = { # lookup to link column values to column names\n    'RATIO H/L': 'raw_ratio_HL',\n    'RATIO H/M': 'raw_ratio_HM',\n    'RATIO M/L': 'raw_ratio_ML',\n    'RATIO H/L NORMALIZED': 'norm_ratio_HL',\n    'RATIO H/M NORMALIZED': 'norm_ratio_HM',\n    'RATIO M/L NORMALIZED': 'norm_ratio_ML'\n}\n\nscore_types = { # lookup to link user input to table column\n    'Zr' : 'z_score_raw_ratio',\n    'Zn' : 'z_score_norm_ratio',\n    'Mr' : 'm_score_raw_ratio',\n    'Mn' : 'm_score_norm_ratio'\n}\n\n# parse command-line args\nparser = argp.ArgumentParser(\n   description = 'Differential analysis of SILAC protein ratios based on standardized scores.')\n\nparser.add_argument(\n   '-n',\n   action = 'store_true',\n   dest = 'new_tabs',\n   help = 'populate new db tables with (modified) Z-scores')\n\nparser.add_argument(\n   '-d',\n   dest = 'dts',\n   required = True,\n   choices = ['VH10', 'U2OS', 'IB10'],\n   help = 'select one of the data sets or cell lines')\n\nparser.add_argument(\n   '-s',\n   required = True,\n   choices = score_types.keys(),\n   help = 'select one of the score types for filtering: Z*,M* - Z-score or modified Z-score; *r,*n - score based on raw or normalized SILAC protein ratios')\n\nparser.add_argument(\n   '-c',\n   required = True,\n   dest = 'cutoff',\n   type = float,\n   help = 'absolute score cutoff (e.g. 1.65, 1.96 or 2.58)')\n\nparser.add_argument(\n   '-o',\n   dest = 'outfile',\n   help = 'output file')\n\nparser.add_argument(\n   'dbfile',\n   help = 'sqlite3 database file')\n\nargs = parser.parse_args()\n\n# check user input\ndbfile = args.dbfile\noutfile = args.outfile\nnew_tabs = args.new_tabs\ndts = args.dts\nstype = args.s\ncutoff = args.cutoff\nscore_type = None\n\nif os.path.isfile(dbfile) is False:\n   parser.error(\"dbfile '%s' not found\" % dbfile)\n\nif stype and cutoff:\n   score_type = score_types[stype]\nelse:\n   parser.error('-s and -c args must be used together')\n\nif outfile is None:\n   # set the default output filename\n   outfile = os.path.join(os.path.dirname(dbfile), '%s_mzscore_%s_%.2f.tab' % (dts, stype, cutoff))\n\nif cutoff < 0:\n   parser.error('the absolute score cutoff must be a positive value')\n\n# print info into STDOUT\nprint \"\"\"\ndbfile = %s\noutfile = %s\ndataset = %s\nre-score = %s\nscore type = %s\nscore cutoff = %.2f\n\"\"\" % (dbfile, outfile, dts, new_tabs, stype, cutoff)\n\n# sqlite3 user-defined functions (UDFs)\ndef log(value, base):\n    try:\n        return math.log(value) / math.log(base)\n    except:\n        return None\n\ndef sqrt(value):\n    try:\n        return math.sqrt(value)\n    except:\n        return None\n\ndef pvalue(score): # convert Z- or M-score to two-tailed probability (P-value)\n    try:\n        return 2 * st.norm.cdf(-abs(score))\n    except:\n        return None\n\nclass Stdev: # sample standard deviation (aggregate function)\n    def __init__(self):\n        self.vec = []\n\n    def step(self, value):\n        self.vec.append(value)\n\n    def finalize(self):\n        return np.array(self.vec).std(ddof=1)\n\nclass Median: # median (aggregate function)\n    def __init__(self):\n        self.arr = []\n\n    def step(self, value):\n        self.arr.append(value)\n\n    def finalize(self):\n        return np.median(np.array(self.arr))\n\nclass Mad: # median absolute deviation (aggregate function)\n    def __init__(self):\n        self.arr = []\n\n    def step(self, value):\n        self.arr.append(value)\n\n    def finalize(self):\n        median = np.median(np.array(self.arr))\n        return np.median(np.abs(self.arr - median))\n\n# SQL statements to populate tables/views\nsql_create_tables = \"\"\"\nDROP VIEW IF EXISTS V_PGROUP_RATIO;\nCREATE VIEW V_PGROUP_RATIO AS\n-- simplifies the selection of SILAC ratios/types\nSELECT\n    A.grp_id,\n    exp_name,\n    CAST(CASE %s\n    END AS TEXT) AS ratio_type,\n    CAST(quant_value AS NUMERIC) AS ratio_value\nFROM\n    PGROUP_QUANT A, V_PGROUP B\nWHERE\n    A.grp_id = B.grp_id\n    AND quant_type IN ('%s')\n    AND quant_value;\n\nDROP TABLE IF EXISTS PGROUP_LOG2RATIO_STAT;\nCREATE TABLE PGROUP_LOG2RATIO_STAT AS\n-- stores descriptive statistics on SILAC protein ratios for each experiment\nSELECT\n    exp_name,\n    ratio_type,\n    CAST(COUNT(ratio_value) AS INT) AS n,\n    CAST(MIN(LOG(ratio_value, 2)) AS NUMERIC) AS min,\n    CAST(MAX(LOG(ratio_value, 2)) AS NUMERIC) AS max,\n    CAST(AVG(LOG(ratio_value, 2)) AS NUMERIC) AS mean,\n    CAST(MEDIAN(LOG(ratio_value, 2)) AS NUMERIC) AS median,\n    CAST(STDEV(LOG(ratio_value, 2)) AS NUMERIC) AS sd,\n    CAST(MAD(LOG(ratio_value, 2)) AS NUMERIC) AS mad\nFROM\n    V_PGROUP_RATIO\nGROUP BY\n    exp_name, ratio_type;\nCREATE INDEX idx_PGROUP_LOG2RATIO_STAT_exp_name_ratio_type ON PGROUP_LOG2RATIO_STAT(exp_name, ratio_type);\n\nDROP VIEW IF EXISTS V_PGROUP_LOG2RATIO_STAT;\nCREATE VIEW V_PGROUP_LOG2RATIO_STAT AS\n-- shows rounded values of the statistics\nSELECT\n    exp_name,\n    ratio_type,\n    n,\n    ROUND(min, 4) AS min,\n    ROUND(max, 4) AS max,\n    ROUND(mean, 4) AS mean,\n    ROUND(median, 4) AS median,\n    ROUND(sd, 4) AS sd,\n    ROUND(mad, 4) AS mad\nFROM\n    PGROUP_LOG2RATIO_STAT;\n\nDROP TABLE IF EXISTS PGROUP_MZSCORE;\nCREATE TABLE PGROUP_MZSCORE AS\n-- stores (modified) Z-score transformed SILAC protein raw/norm ratios\nSELECT\n    grp_id,\n    A.exp_name AS exp_name,\n    CAST(A.ratio_type AS TEXT) AS ratio_type,\n    CAST((LOG(ratio_value, 2) - mean) / sd AS NUMERIC) AS z_score,\n    CAST(0.6745 * (LOG(ratio_value, 2) - median) / mad AS NUMERIC) AS m_score\nFROM\n    V_PGROUP_RATIO A, PGROUP_LOG2RATIO_STAT B\nWHERE\n    A.exp_name = B.exp_name\n    AND A.ratio_type = B.ratio_type;\nCREATE INDEX idx_PGROUP_MZSCORE_grp_id ON PGROUP_MZSCORE(grp_id);\nCREATE INDEX idx_PGROUP_MZSCORE_exp_name_ratio_type ON PGROUP_MZSCORE(exp_name, ratio_type);\n\"\"\" % (' '.join([ \"\\n\\tWHEN quant_type='%s' THEN '%s'\" % (k, v) for (k, v) in ratio_types.iteritems() ]),\n       \"','\".join(ratio_types.keys()))\n\n# dynamically construct SQL query to select diff. reg. protein groups\nsql_sel_pgrps = \"\"\"\nSELECT\n    A.grp_id grp_id,\n    IFNULL(GROUP_CONCAT(DISTINCT gene), '-') genes,\n    {dts}_L0_M0_H1_{score_type}_HL '{stype}_H1L0', -- Z or M-score ON/OFF  (treat1)\n    {dts}_L1_M1_H0_{score_type}_LH '{stype}_L1H0', -- Z or M-score ON/OFF  (treat2)\n    {dts}_L0_M0_H1_{score_type}_HM '{stype}_H1M0', -- Z or M-score ON/OFF  (treat3)\n    {dts}_L1_M1_H0_{score_type}_MH '{stype}_M1H0', -- Z or M-score ON/OFF  (treat4)\n    {dts}_L0_M0_H1_{score_type}_LM '{stype}_L0M0', -- Z or M-score OFF/OFF (ctrl1)\n    {dts}_L1_M1_H0_{score_type}_LM '{stype}_L1M1', -- Z or M-score ON/ON   (ctrl2)\n    PVALUE({dts}_L0_M0_H1_{score_type}_HL) 'pval_H1L0', -- P-value ON/OFF  (treat1)\n    PVALUE({dts}_L1_M1_H0_{score_type}_LH) 'pval_L1H0', -- P-value ON/OFF  (treat2)\n    PVALUE({dts}_L0_M0_H1_{score_type}_HM) 'pval_H1M0', -- P-value ON/OFF  (treat3)\n    PVALUE({dts}_L1_M1_H0_{score_type}_MH) 'pval_M1H0', -- P-value ON/OFF  (treat4)\n    PVALUE({dts}_L0_M0_H1_{score_type}_LM) 'pval_L0M0', -- P-value OFF/OFF (ctrl1)\n    PVALUE({dts}_L1_M1_H0_{score_type}_LM) 'pval_L1M1'  -- P-value ON/ON   (ctrl2)\nFROM\n    V_PGROUP_MZSCORE A, PROT2GRP B, V_PROTEIN C\nWHERE\n    A.grp_id = B.grp_id\n    AND B.prot_acc = C.acc\n    AND (({dts}_L0_M0_H1_{score_type}_HL > {cutoff}\n    AND {dts}_L0_M0_H1_{score_type}_HM > {cutoff}\n    AND {dts}_L1_M1_H0_{score_type}_LH > {cutoff}\n    AND {dts}_L1_M1_H0_{score_type}_MH > {cutoff})\n    OR ({dts}_L0_M0_H1_{score_type}_LH > {cutoff}\n    AND {dts}_L0_M0_H1_{score_type}_MH > {cutoff}\n    AND {dts}_L1_M1_H0_{score_type}_HL > {cutoff}\n    AND {dts}_L1_M1_H0_{score_type}_HM > {cutoff}))\n    AND {dts}_L0_M0_H1_{score_type}_ML <= {cutoff}\n    AND {dts}_L0_M0_H1_{score_type}_LM <= {cutoff}\n    AND {dts}_L1_M1_H0_{score_type}_ML <= {cutoff}\n    AND {dts}_L1_M1_H0_{score_type}_LM <= {cutoff}\nGROUP BY A.grp_id;\n\"\"\".format(dts=dts, score_type=score_type, stype=stype, cutoff=cutoff)\n\n# connect to db\nwith sqlt.connect(args.dbfile) as conn:\n   conn.row_factory = sqlt.Row # enable column access by name: row['colnm']\n   conn.create_function('log', 2, log)\n   conn.create_function('sqrt', 1, sqrt)\n   conn.create_function('pvalue', 1, pvalue)\n   conn.create_aggregate('stdev', 1, Stdev)\n   conn.create_aggregate('median', 1, Median)\n   conn.create_aggregate('mad', 1, Mad)\n   cur = conn.cursor()\n\n   if new_tabs is True: # populate tables/views only with -n option\n      cur.executescript(sql_create_tables)\n      cur.execute('SELECT DISTINCT exp_name FROM EXPERIMENT')\n      exp_names = [ str(r[0]) for r in cur.fetchall() ]\n      cur.execute(\"SELECT DISTINCT ratio_type FROM PGROUP_LOG2RATIO_STAT\")\n      ratio_types = [ str(r[0]) for r in cur.fetchall() ]\n      n = len(exp_names) * len(ratio_types)\n      i = 0\n      comma = ','\n\n      # create view for selecting diff. reg. proteins\n      sql_create_view = \"\"\"\nDROP VIEW IF EXISTS V_PGROUP_MZSCORE;\nCREATE VIEW V_PGROUP_MZSCORE AS\nSELECT\n    grp_id,\n\"\"\"\n      for e in exp_names:\n         for r in ratio_types:\n            i += 1\n            rr = r[:-2] + r[-2:][::-1] # add inverse ratio (e.g., {raw|norm}_ratio_HL for *_ratio_LH)\n            if i == n: comma = ''\n            sql_create_view += \"\\tROUND(CAST(GROUP_CONCAT(CASE WHEN exp_name = '{exp}' AND ratio_type = '{ratio}' THEN z_score ELSE NULL END) AS NUMERIC), 4) AS '{exp}_z_score_{ratio}',\\n\".format(exp=e, ratio=r)\n            sql_create_view += \"\\tROUND(CAST(GROUP_CONCAT(CASE WHEN exp_name = '{exp}' AND ratio_type = '{ratio}' THEN -1 * z_score ELSE NULL END) AS NUMERIC), 4) AS '{exp}_z_score_{iratio}',\\n\".format(exp=e, ratio=r, iratio=rr)\n            sql_create_view += \"\\tROUND(CAST(GROUP_CONCAT(CASE WHEN exp_name = '{exp}' AND ratio_type = '{ratio}' THEN m_score ELSE NULL END) AS NUMERIC), 4) AS '{exp}_m_score_{ratio}',\\n\".format(exp=e, ratio=r)\n            sql_create_view += \"\\tROUND(CAST(GROUP_CONCAT(CASE WHEN exp_name = '{exp}' AND ratio_type = '{ratio}' THEN -1 * m_score ELSE NULL END) AS NUMERIC), 4) AS '{exp}_m_score_{iratio}'{comma}\\n\".format(exp=e, ratio=r, iratio=rr, comma=comma)\n      sql_create_view += \"FROM PGROUP_MZSCORE GROUP BY grp_id\"\n      cur.executescript(sql_create_view)\n   \n   # write results onto tab-delim file\n   if dts is not None:\n      sep = '\\t' # column separator\n      n_pgrps = 0 # count diff. reg. protein groups\n      with open(outfile, 'w+') as fout:\n         try:\n            for drow in [ cls.OrderedDict(xi) for xi in cur.execute(sql_sel_pgrps) ]:\n               # first output column names\n               if n_pgrps == 0:\n                  header = sep.join(drow.keys()) + os.linesep\n                  fout.write(header)\n\n               # output remaining rows with column values (grp_id, Z-/M-scores and P-values)\n               row = drow.values()\n               grp_id = str(drow['grp_id'])\n               genes = str(drow['genes'])\n               scores = [ str(round(float(x), 4)) for x in row[2:] ]\n               srow = grp_id + sep + genes + sep + sep.join(scores) + os.linesep\n               fout.write(srow)\n               n_pgrps += 1\n\n         except sqlt.OperationalError as e:\n            sys.stderr.write('Error: Selected data set not found: %s\\n' % e)\n            sys.exit(1)\n\n      # remove empty outfile\n      if os.path.getsize(outfile) == 0:\n         print 'Nothing to write onto outfile.'\n         os.remove(outfile)\n      else:\n         print 'Ndiff =', n_pgrps\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_in_range(n, lower, upper):\n    return True if lower <= n & n <= upper else False\n\nis_in_range(3, 1, 10)\n# Output: True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_words(text):\n \n # find all words in the string\n words = text.split(' ')\n \n # filter out words that are not 4 characters long\n filtered_words = [word for word in words if len(word) == 4]\n \n return filtered_words\n \n# example\ntext = 'The quick brown fox jumps over the lazy dog'\nwords = find_words(text)\n \nprint(words)\n \n# output: ['quick', 'brown', 'over', 'lazy'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: x = False and False\n\n# Output\nprint(x)\n# False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: student_dict = {'john': {'grade': 'A', 'age': 15},\n 'jane': {'grade': 'B', 'age': 12},\n 'dave': {'grade': 'B', 'age': 10}}\n\ncourses_dict = {'math': {'grade': 'B', 'duration': 18},\n 'science': {'grade': 'A', 'duration': 20}} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack:\n   def __init__(self):\n      self.items = []\n \n   def isEmpty(self):\n      return self.items == []\n \n   def push(self, item):\n      self.items.append(item)\n \n   def pop(self):\n      return self.items.pop()\n \n   def peek(self):\n      return self.items[len(self.items)-1]\n \n   def size(self):\n      return len(self.items) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def display_prime_numbers(min, max):\n    for n in range(min, max):\n        if is_prime(n):\n            print(n)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndisplay_prime_numbers(50, 75) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\ndef generate_random_nums(length):\n  lst = []\n  for _ in range(length):\n    lst.append(random.randint(1, 10))\n  return lst but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def highest_temp(temp_list):\n    highest_temp_day = 0 \n    highest_temp_val = temp_list[0]\n\n    for i in range(1, len(temp_list)):\n        if temp_list[i] > highest_temp_val:\n            highest_temp_day = i\n            highest_temp_val = temp_list[i]\n            \n    return highest_temp_day but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_string(text, old_string, new_string):\n return text.replace(old_string, new_string)\n\ntext = 'This is an old_string'\nold_string = 'old_string'\nnew_string = 'new_string'\n\nprint(replace_string(text, old_string, new_string))\n# Output: This is an new_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn import tree\n\n# Prepare Input\nInput = [['M', 24, 33800, 'Petrol'], \n         ['F', 35, 35000, 'Electric'], \n         ['F', 40, 45000 , 'Petrol'], \n         ['M', 20, 25000, 'Electric'],\n         ['M', 30, 32000, 'Petrol'],\n         ['F', 50, 60000, 'Electric']]\n\n# Prepare Target\nTarget = [1, 0, 1, 0, 0, 1]\n\n# Create a decision tree\nmodel = tree.DecisionTreeClassifier()\n\n# Train the model \nmodel.fit(Input,Target)\n\n# Visualize the decision tree\ntree.plot_tree(model) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def checkDivisible(array):\n  for num in array:\n    if num % 5 != 0:\n      return False\n  return True\n\narray = [10, 15, 20, 25, 30]\n\nif checkDivisible(array):\n  print('All numbers are divisible by 5')\nelse:\n  print('Not all numbers are divisible by 5') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\nimport pandas as pd\n\n# Read the data\ndf = pd.read_csv('data.csv', index_col=False)\n\n# Prepare the input data\nX = df[['height', 'weight']]\ny = df['label'].astype('int32')\n\n# Build the model\nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Dense(2, input_shape=(2,), activation='softmax'))\nmodel.compile(optimizer=tf.keras.optimizers.Adam(0.05),\n loss=tf.keras.losses.SparseCategoricalCrossentropy(),\n metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X, y, epochs=100, batch_size=32) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\ndef linreg_univariate_model(X, y):\n   linreg = LinearRegression()\n   linreg.fit(X.reshape(-1,1), y)\n   return linreg but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from datetime import datetime\nfrom datetime import timedelta\nimport time\n \ndef alarm_clock():\n    while True:\n        currentTime = datetime.now().time()\n        if (currentTime.hour == 9 and currentTime.minute == 0):\n            print(\"Time to get up!\")\n        time.sleep(10)\n \nalarm_clock() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \ndef shuffle_list(lst):\n    if len(lst) > 1:\n        random.shuffle(lst)\n    return lst but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num):\n    #Ignore negative numbers and zero\n    if num < 2:\n        return False\n    \n    #Return true if num is prime\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n#Print all prime numbers between 0 and a given number\nnum_input = int(input(\"Enter a number: \"))\nfor i in range(num_input):\n    if is_prime(i):\n        print(i, \"is a prime number\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def third_largest(arr): \n    first = arr[0] \n    second = -float(\"inf\") \n    third = -float(\"inf\") \n  \n    for num in arr[1:]: \n        if (num > first): \n            third = second \n            second = first \n            first = num\n  \n        elif (num > second):              \n            third = second \n            second = num \n  \n        elif (num > third):               \n            third = num \n                               \n    return third but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify(num):\n if num > 0:\n return \"positive\"\n elif num < 0:\n return \"negative\"\n else:\n return \"zero\"\n\nn = int(input(\"Please enter a number: \"))\nresult = classify(n)\nprint(result) # Prints \"positive\" if n is positive, \"negative\" if n is negative and \"zero\" if n is zero but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Program to implement a basic calculator\n\n#Define a function to perform the operation\ndef calculate(num1, num2, operation):\n    if operation == 'add':\n        return num1 + num2\n    elif operation == 'subtract':\n        return num1 - num2\n    elif operation == 'multiply':\n        return num1 * num2\n    elif operation == 'divide':\n        return num1 / num2\n\n#Take the numbers and operation as input\nnum1 = int(input('Enter first number: '))\nnum2 = int(input('Enter second number: '))\noperation = input('Select an operation (add, subtract, multiply, divide): ')\n\n#Call the function to perform the operation\nresult = calculate(num1, num2, operation)\n\n#Print the result\nprint('Result:',result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num = int(input(\"Please enter a number: \"))\n\n# Check if num is a prime number\n\ndef is_prime(n):\n    \n    # Check if n is greater than 1\n    if n > 1: \n       # Check for factors \n       for i in range(2,n): \n          if (n % i) == 0: \n              return False # n is not prime\n       else:\n           return True # n is prime\n    \n    else:\n       return False\n\nif is_prime(num): \n   print(num, \"is a prime number\")\nelse: \n   print(num, \"is not a prime number\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_list(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def num_vowels(string):\n num_vowels = 0\n for char in string:\n if char in \"aeiouAEIOU\":\n num_vowels += 1\n return num_vowels but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def dot_product(list1, list2):\n  if len(list1) != len(list2):\n    raise ValueError('List lengths must be the same.')\n  dot_product = 0\n  for i, val in enumerate(list1):\n    dot_product += val * list2[i]\n  return dot_product\n\nlist1 = [1,2,3]\nlist2 = [4,5,6]\n\ndot_product_result = dot_product(list1, list2)\nprint(dot_product_result) # 32 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -*- coding:utf-8 -*-\n# Author: Kei Choi(hanul93@gmail.com)\n\n\nimport os\nimport re\nimport kernel\nimport kavutil\nimport cryptolib\n\n\n# -------------------------------------------------------------------------\n# KavMain \ud074\ub798\uc2a4\n# -------------------------------------------------------------------------\nclass KavMain:\n    # ---------------------------------------------------------------------\n    # init(self, plugins_path)\n    # \ud50c\ub7ec\uadf8\uc778 \uc5d4\uc9c4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4.\n    # \uc778\ub825\uac12 : plugins_path - \ud50c\ub7ec\uadf8\uc778 \uc5d4\uc9c4\uc758 \uc704\uce58\n    #         verbose      - \ub514\ubc84\uadf8 \ubaa8\ub4dc (True or False)\n    # \ub9ac\ud134\uac12 : 0 - \uc131\uacf5, 0 \uc774\uc678\uc758 \uac12 - \uc2e4\ud328\n    # ---------------------------------------------------------------------\n    def init(self, plugins_path, verbose=False):  # \ud50c\ub7ec\uadf8\uc778 \uc5d4\uc9c4 \ucd08\uae30\ud654\n        pat = r'POST /cdn-cgi/\\x00\\x00 HTTP/1.1\\r\\nUser-Agent: \\x00\\r\\nHost:' + \\\n              r'[\\d\\D]+?GET\\x00+/\\x00+Cookie:[\\d\\D]+?http[\\d\\D]+?url=[\\d\\D]+?POST'\n        self.p_linux_mirai = re.compile(pat)\n\n        # \ubcc0\uc885 \ubc14\uc774\ub7ec\uc2a4 \ud328\ud134\n        self.mirai_a_strings = [\n            'POST /cdn-cgi/',\n            'HTTP/1.1\\r\\nUser-Agent: ',\n            'Host:',\n            'GET',\n            'Cookie:',\n            'http',\n            'url=',\n            'proc/net/tcp'\n        ]\n\n        self.aho_mirai_a = kavutil.AhoCorasick()\n        self.aho_mirai_a.make_tree(self.mirai_a_strings)\n        return 0  # \ud50c\ub7ec\uadf8\uc778 \uc5d4\uc9c4 \ucd08\uae30\ud654 \uc131\uacf5\n\n    # ---------------------------------------------------------------------\n    # uninit(self)\n    # \ud50c\ub7ec\uadf8\uc778 \uc5d4\uc9c4\uc744 \uc885\ub8cc\ud55c\ub2e4.\n    # \ub9ac\ud134\uac12 : 0 - \uc131\uacf5, 0 \uc774\uc678\uc758 \uac12 - \uc2e4\ud328\n    # ---------------------------------------------------------------------\n    def uninit(self):  # \ud50c\ub7ec\uadf8\uc778 \uc5d4\uc9c4 \uc885\ub8cc\n        return 0  # \ud50c\ub7ec\uadf8\uc778 \uc5d4\uc9c4 \uc885\ub8cc \uc131\uacf5\n\n    # ---------------------------------------------------------------------\n    # getinfo(self)\n    # \ud50c\ub7ec\uadf8\uc778 \uc5d4\uc9c4\uc758 \uc8fc\uc694 \uc815\ubcf4\ub97c \uc54c\ub824\uc900\ub2e4. (\uc81c\uc791\uc790, \ubc84\uc804, ...)\n    # \ub9ac\ud134\uac12 : \ud50c\ub7ec\uadf8\uc778 \uc5d4\uc9c4 \uc815\ubcf4\n    # ---------------------------------------------------------------------\n    def getinfo(self):  # \ud50c\ub7ec\uadf8\uc778 \uc5d4\uc9c4\uc758 \uc8fc\uc694 \uc815\ubcf4\n        info = dict()  # \uc0ac\uc804\ud615 \ubcc0\uc218 \uc120\uc5b8\n\n        info['author'] = 'Kei Choi'  # \uc81c\uc791\uc790\n        info['version'] = '1.1'  # \ubc84\uc804\n        info['title'] = 'eMalware Engine'  # \uc5d4\uc9c4 \uc124\uba85\n        info['kmd_name'] = 'emalware'  # \uc5d4\uc9c4 \ud30c\uc77c \uc774\ub984\n        info['sig_num'] = kavutil.handle_pattern_md5.get_sig_num('emalware') + 2   # \uc9c4\ub2e8/\uce58\ub8cc \uac00\ub2a5\ud55c \uc545\uc131\ucf54\ub4dc \uc218\n\n        return info\n\n    # ---------------------------------------------------------------------\n    # listvirus(self)\n    # \uc9c4\ub2e8/\uce58\ub8cc \uac00\ub2a5\ud55c \uc545\uc131\ucf54\ub4dc\uc758 \ub9ac\uc2a4\ud2b8\ub97c \uc54c\ub824\uc900\ub2e4.\n    # \ub9ac\ud134\uac12 : \uc545\uc131\ucf54\ub4dc \ub9ac\uc2a4\ud2b8\n    # ---------------------------------------------------------------------\n    def listvirus(self):  # \uc9c4\ub2e8 \uac00\ub2a5\ud55c \uc545\uc131\ucf54\ub4dc \ub9ac\uc2a4\ud2b8\n        vlist = kavutil.handle_pattern_md5.get_sig_vlist('emalware')\n        vlist.append('Backdoor.Linux.Mirai.a.gen')\n        vlist = list(set(vlist))\n        vlist.sort()\n\n        vlists = []\n        for vname in vlist:\n            vlists.append(kavutil.normal_vname(vname))\n\n        vlists.append(kavutil.normal_vname('<n>AdWare.Win32.Sokuxuan.gen'))\n\n        return vlists\n\n    # ---------------------------------------------------------------------\n    # scan(self, filehandle, filename, fileformat)\n    # \uc545\uc131\ucf54\ub4dc\ub97c \uac80\uc0ac\ud55c\ub2e4.\n    # \uc785\ub825\uac12 : filehandle  - \ud30c\uc77c \ud578\ub4e4\n    #         filename    - \ud30c\uc77c \uc774\ub984\n    #         fileformat  - \ud30c\uc77c \ud3ec\ub9f7\n    #         filename_ex - \ud30c\uc77c \uc774\ub984 (\uc555\ucd95 \ub0b4\ubd80 \ud30c\uc77c \uc774\ub984)\n    # \ub9ac\ud134\uac12 : (\uc545\uc131\ucf54\ub4dc \ubc1c\uacac \uc5ec\ubd80, \uc545\uc131\ucf54\ub4dc \uc774\ub984, \uc545\uc131\ucf54\ub4dc ID) \ub4f1\ub4f1\n    # ---------------------------------------------------------------------\n    def scan(self, filehandle, filename, fileformat, filename_ex):  # \uc545\uc131\ucf54\ub4dc \uac80\uc0ac\n        try:\n            mm = filehandle\n\n            # \ubbf8\ub9ac \ubd84\uc11d\ub41c \ud30c\uc77c \ud3ec\ub9f7\uc911\uc5d0 PE \ud3ec\ub9f7\uc774 \uc788\ub294\uac00?\n            if 'ff_pe' in fileformat:\n                ff = fileformat['ff_pe']\n\n                # case 1 : \uc139\uc158 \uc804\uccb4\ub97c hash\ub85c \uac80\uc0ac\n                for idx, section in enumerate(ff['pe']['Sections']):\n                    # if (section['Characteristics'] & 0x20000000) == 0x20000000:  # \uc2e4\ud589 \uc18d\uc131?\n                    # print section['Name'], hex(section['SizeRawData'])\n                    fsize = section['SizeRawData']\n                    if fsize and kavutil.handle_pattern_md5.match_size('emalware', fsize):\n                        foff = section['PointerRawData']\n                        fmd5 = cryptolib.md5(mm[foff:foff+fsize])\n                        # print fsize, fmd5\n                        vname = kavutil.handle_pattern_md5.scan('emalware', fsize, fmd5)\n                        if vname:\n                            vname = kavutil.normal_vname(vname)\n                            return True, vname, 0, kernel.INFECTED\n\n                # case 2. \ub9c8\uc9c0\ub9c9 \uc139\uc158\uc5d0 \uc2e4\ud589 \ud30c\uc77c \uc874\uc7ac\n                if len(ff['pe']['Sections']):\n                    # \ub9c8\uc9c0\ub9c9 \uc139\uc158\n                    sec = ff['pe']['Sections'][-1]\n                    off = sec['PointerRawData']\n                    size = sec['SizeRawData']\n\n                    # \uc2e4\ud589 \ud30c\uc77c\uc774 \uc874\uc7ac\ud558\ub294\uac00?\n                    exe_offs = [m.start() for m in re.finditer('MZ', mm[off:off+size])]\n\n                    for exe_pos in exe_offs:\n                        fsize = 0x1d5\n                        if fsize and kavutil.handle_pattern_md5.match_size('emalware', fsize):\n                            fmd5 = cryptolib.md5(mm[off + exe_pos:off + exe_pos + fsize])\n                            # print fsize, fmd5\n                            vname = kavutil.handle_pattern_md5.scan('emalware', fsize, fmd5)\n                            if vname:\n                                # return True, vname, 0, kernel.INFECTED\n                                idx = len(ff['pe']['Sections']) - 1\n                                vname = kavutil.normal_vname(vname)\n                                return True, vname, (0x80000000 + idx), kernel.INFECTED\n\n                # case 3. pdb\ub97c \uc774\uc6a9\ud574\uc11c \uc545\uc131\ucf54\ub4dc \uac80\uc0ac\n                if 'PDB_Name' in ff['pe']:\n                    pdb_sigs = {\n                        ':\\\\pz_git\\\\bin\\\\': '<n>AdWare.Win32.Sokuxuan.gen',\n                        ':\\\\CODE\\\\vitruvian\\\\': '<n>AdWare.Win32.Vitruvian.gen',\n                    }\n\n                    for pat in pdb_sigs.keys():\n                        if ff['pe']['PDB_Name'].find(pat) != -1:\n                            vname = kavutil.normal_vname(pdb_sigs[pat])\n                            return True, vname, 0, kernel.INFECTED\n\n            # \ubbf8\ub9ac \ubd84\uc11d\ub41c \ud30c\uc77c \ud3ec\ub9f7\uc911\uc5d0 ELF \ud3ec\ub9f7\uc774 \uc788\ub294\uac00?\n            elif 'ff_elf' in fileformat:\n                ff = fileformat['ff_elf']\n\n                if len(ff['elf']['Sections']):\n                    for section in ff['elf']['Sections']:\n                        if (section['Type'] & 0x1) == 0x1 and (section['Flag'] & 0x4) == 0x4:  # \ud504\ub85c\uadf8\ub7a8 \ub370\uc774\ud130\uc774\uba74\uc11c \uc2e4\ud589 \uc18d\uc131?\n                            # print section['Name'], section['Size'], section['Offset']\n                            fsize = section['Size']\n                            if fsize and kavutil.handle_pattern_md5.match_size('emalware', fsize):\n                                foff = section['Offset']\n                                fmd5 = cryptolib.md5(mm[foff:foff + fsize])\n                                # print fsize, fmd5\n                                vname = kavutil.handle_pattern_md5.scan('emalware', fsize, fmd5)\n                                if vname:\n                                    vname = kavutil.normal_vname(vname)\n                                    return True, vname, 0, kernel.INFECTED\n                elif len(ff['elf']['ProgramHeaders']):\n                    for ph in ff['elf']['ProgramHeaders']:\n                        if (ph['Type'] & 0x1) == 0x1 and (ph['Flag'] & 0x1) == 0x1:\n                            fsize = ph['Size']\n                            if fsize and kavutil.handle_pattern_md5.match_size('emalware', fsize):\n                                foff = ph['Offset']\n                                fmd5 = cryptolib.md5(mm[foff:foff + fsize])\n                                # print fsize, fmd5\n                                vname = kavutil.handle_pattern_md5.scan('emalware', fsize, fmd5)\n                                if vname:\n                                    vname = kavutil.normal_vname(vname)\n                                    return True, vname, 0, kernel.INFECTED\n\n                # Mirai \ubcc0\uc885 \uc9c4\ub2e8\n                '''\n                for section in ff['elf']['Sections']:\n                    if section['Name'] == '.rodata':\n                        fsize = section['Size']\n                        foff = section['Offset']\n                        if self.p_linux_mirai.match(mm[foff:foff+fsize]):\n                            return True, 'Backdoor.Linux.Mirai.gen', 0, kernel.SUSPECT\n                '''\n                for section in ff['elf']['Sections']:\n                    if section['Name'] == '.rodata':\n                        vstring = []\n\n                        foff = section['Offset']\n                        ret = self.aho_mirai_a.search(mm[foff:foff + 0x200])\n\n                        for n in ret[:len(self.mirai_a_strings)]:\n                            vstring.append(n[1])\n\n                        # print vstring\n                        # print len(set(vstring)), len(self.mirai_a_strings)\n\n                        if set(vstring) == set(self.mirai_a_strings):\n                            return True, 'Backdoor.Linux.Mirai.a.gen', 0, kernel.SUSPECT\n\n            # NSIS \uac19\uc740 \uc124\uce58 \ud504\ub85c\uadf8\ub7a8\uc758 \uacbd\uc6b0 \ucca8\ubd80 \uc601\uc5ed\uc5d0 \uc874\uc7ac\ud558\ub294\ub370..\n            # \ub514\ucef4\ud30c\uc77c\ud558\uc9c0 \uc54a\uace0 \uc624\ub9ac\uc9c0\ub110 \uc774\ubbf8\uc9c0 \uc6d0\ubcf8\uc744 \ud0d0\uc9c0\ud558\ub3c4\ub85d \ud588\uc74c..\n            if 'ff_attach' in fileformat:\n                foff = fileformat['ff_attach']['Attached_Pos']\n                buf = mm[foff:]\n                fsize = len(buf)\n                if fsize and kavutil.handle_pattern_md5.match_size('emalware', fsize):\n                    fmd5 = cryptolib.md5(buf)  # \ucca8\ubd80 \uc704\uce58\ubd80\ud130 \ub05d\uae4c\uc9c0\n                    vname = kavutil.handle_pattern_md5.scan('emalware', fsize, fmd5)\n                    if vname:\n                        vname = kavutil.normal_vname(vname)\n                        return True, vname, 0, kernel.INFECTED\n\n        except IOError:\n            pass\n\n        # \uc545\uc131\ucf54\ub4dc\ub97c \ubc1c\uacac\ud558\uc9c0 \ubabb\ud588\uc74c\uc744 \ub9ac\ud134\ud55c\ub2e4.\n        return False, '', -1, kernel.NOT_FOUND\n\n    # ---------------------------------------------------------------------\n    # disinfect(self, filename, malware_id)\n    # \uc545\uc131\ucf54\ub4dc\ub97c \uce58\ub8cc\ud55c\ub2e4.\n    # \uc785\ub825\uac12 : filename    - \ud30c\uc77c \uc774\ub984\n    #        : malware_id - \uce58\ub8cc\ud560 \uc545\uc131\ucf54\ub4dc ID\n    # \ub9ac\ud134\uac12 : \uc545\uc131\ucf54\ub4dc \uce58\ub8cc \uc5ec\ubd80\n    # ---------------------------------------------------------------------\n    def disinfect(self, filename, malware_id):  # \uc545\uc131\ucf54\ub4dc \uce58\ub8cc\n        try:\n            # \uc545\uc131\ucf54\ub4dc \uc9c4\ub2e8 \uacb0\uacfc\uc5d0\uc11c \ubc1b\uc740 ID \uac12\uc774 0\uc778\uac00?\n            if malware_id == 0:\n                os.remove(filename)  # \ud30c\uc77c \uc0ad\uc81c\n                return True  # \uce58\ub8cc \uc644\ub8cc \ub9ac\ud134\n            if malware_id & 0x80000000 == 0x80000000:\n                idx = malware_id & 0x7fffffff\n\n                import pe\n\n                buf = open(filename, 'rb').read()\n                pe = pe.PE(buf, False, filename)\n                try:\n                    pe_format = pe.parse()  # PE \ud30c\uc77c \ubd84\uc11d\n                except MemoryError:\n                    pe_format = None\n\n                if pe_format is None:\n                    return False\n\n                ff = {'pe': pe_format}\n\n                if len(ff['pe']['Sections']) > idx:\n                    section = ff['pe']['Sections'][idx]\n                    fsize = section['SizeRawData']\n                    foff = section['PointerRawData']\n\n                    data = buf[:foff] + ('\\x00' * fsize) + buf[foff+fsize:]\n                    open(filename, 'wb').write(data)\n                    return True\n        except IOError:\n            pass\n\n        return False  # \uce58\ub8cc \uc2e4\ud328 \ub9ac\ud134\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_search(arr, item):\n first = 0\n last = len(arr) - 1\n found = False\n \n while(first <= last and not found):\n mid = (first + last) // 2\n if arr[mid] == item:\n found = True\n else:\n if item < arr[mid]:\n last = mid - 1\n else:\n first = mid + 1\n \n return found\n \narray = [1, 3, 5, 7, 9, 11, 13, 15, 17]\nitem = 9\n\nresult = binary_search(array, item)\nif result:\n print('Element present in the array') \nelse:\n print('No such element') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nrandom_number = random.randint(1, 100)\nprint('I am thinking of a number between 1 and 100. Can you guess it?')\n\nwhile True:\n\tguess_str = input('Enter your guess: ')\n\tguess = int(guess_str)\n\n\tif guess == random_number:\n\t\tprint('Congratulations! You guessed it correctly.')\n\t\tbreak\n\telif guess < random_number:\n\t\tprint('Your guess is too low.')\n\telse:\n\t\tprint('Your guess is too high.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport smtplib\n\nTHRESHOLD_TIME = 5 # In seconds\nWEBSITE_URL = 'http://www.example.com'\nFROM_EMAIL_ADDRESS = 'alert@example.com'\nTO_EMAIL_ADDRESS = 'admin@example.com'\n\ndef main():\n response = requests.get(WEBSITE_URL)\n response_time = response.elapsed.total_seconds()\n if response_time > THRESHOLD_TIME:\n send_email_alert()\n\ndef send_email_alert():\n server = smtplib.SMTP('smtp.gmail.com', 587)\n server.starttls()\n server.login(FROM_EMAIL_ADDRESS, 'password')\n \n message = 'Website response time exceeded threshold'\n server.sendmail(FROM_EMAIL_ADDRESS, TO_EMAIL_ADDRESS, message)\n server.quit()\n\nif __name__ == '__main__':\n main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(list):\n    max_num = list[0]\n    for num in list:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nmax_number = find_max(list)\nprint(max_number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndef lambda_handler(event, context):\n # Get the operation and operands from the event\n operation = event['operation']\n operands = event['operands']\n \n # Perform the operation\n if operation == 'add':\n result = sum(operands)\n elif operation == 'subtract':\n result = operands[0] - operands[1]\n elif operation == 'multiply':\n result = operands[0] * operands[1]\n elif operation == 'divide':\n result = operands[0] / operands[1]\n else:\n return {\n 'statusCode': 500,\n 'body': json.dumps('Unsupported operation')\n }\n \n # Return the response\n return {\n 'statusCode': 200,\n 'body': json.dumps(result)\n } but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# a data frame with the customer's purchase history\npurchases = pd.DataFrame({\n    'item' : [\"Lipstick\", \"Wine Glasses\", \"Cap\"],\n    'price': [10, 20, 15],\n    'gender': [0, 1, 0]\n})\n\n# number of customers who bought each item\nitem_counts = purchases.groupby('item').count()\n\n# probability of each item being bought by a customer\nprob_items = item_counts / len(purchases)\n\n# probability of the customer being either male or female\nprob_gender = purchases.groupby('gender').count() / len(purchases)\n\n# probability of the customer being male given they bought the items\nprob_gender_given_items = (purchases.groupby(['item','gender']).count() / len(purchases)).divide(prob_items, axis=0)\n\n# gender of the customer based on their purchase history\ncustomer_gender = prob_gender_given_items['price']['Lipstick', 'Wine Glasses', 'Cap'].multiply(prob_gender['price']).idxmax()\n\nprint(\"The customer is classified as: \" + str(customer_gender)) # Output: The customer is classified as: 0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def algorithm(arr):\n    result = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == 0:\n                result.append((arr[i], arr[j]))\n    return result\n\ndef optimizedAlgorithm(arr):\n    result = []\n    seen = set()\n    for num in arr:\n        if -num in seen:\n            result.append((num, -num))\n        seen.add(num)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nweb_url = \"https://en.wikipedia.org/wiki/Wikipedia\"\n\nweb_data = requests.get(web_url).text\nsoup = BeautifulSoup(web_data,\"html.parser\")\n\nfor title in soup.find_all(\"h1\"):\n    print(title.string)\n\nfor para in soup.find_all(\"p\"):\n    print(para.string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n): \n    if n == 0:\n        return 1\n    else: \n        return n * factorial(n-1) \n\n# Test\nnum = 5\nfac = factorial(num)\nprint(\"Factorial of\", num, \"is\", fac) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def validate_email(email):\n    \"\"\"This function validates an email address.\n\n    It returns True if the email address is valid, False otherwise.\n    \"\"\"\n\n    if len(email) > 7:\n        if re.match('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$', email) is not None:\n            return True\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Find the sum of numbers within a range\ndef sum_range(start, end):\n sum = 0\n for i in range(start, end + 1):\n  sum = sum + i\n return sum\n\nprint(sum_range(2, 6)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom lxml import html\nimport openpyxl\n\n# Setup the web page URL\nurl = 'https://example.com/data.html'\n\n# Scrape the web page\nresponse = requests.get(url)\nhtml_data = html.fromstring(response.text)\n\n# Create an Excel workbook\nwb = openpyxl.Workbook()\nsheet = wb.active\n\n# Read the data from the web page and store it in the workbook\ndata_table = html_data.xpath('//table')\nfor i, row in enumerate(data_table[0].xpath('./tbody/tr'), 1):\n for j, cell in enumerate(row.xpath('./td'), 1):\n sheet.cell(row=i, column=j, value=cell.text_content().strip())\n\n# Save the workbook\nwb.save(\"data.xlsx\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nmovies = [\"Guardians of the Galaxy\",\n          \"The Godfather\",\n          \"The Shawshank Redemption\",\n          \"Pulp Fiction\",\n          \"Inception\",\n          \"The Dark Knight\"]\n\ndef random_movie_selector(movies):\n    return random.choice(movies)\n  \n# Driver Code \nprint(random_movie_selector(movies)) \n\n# Output (Example): \n# The Shawshank Redemption but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = ['love', 'wings', 'stars', 'moon', 'ocean']\n \npoem = \"\"\n \nfor word in words:\n    poem += f\"The {word} so strong and bright\\nTurns shadows into light\\n\"\n\npoem += f\"The universe so vast and wide\\nSurrounds us all with its pride\\n\"\n\nprint(poem) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import asyncio\n\nasync def do_something():\n\tprint('starting something')\n\tawait asyncio.sleep(2)\n\tprint('done with something')\n\nasyncio.run(do_something()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_longest(arr):\n    length = 0\n    current_length = 0\n    prev_num = float('-inf')\n    for i in range(len(arr)):\n        if arr[i] > prev_num:\n            current_length += 1\n            if current_length > length:\n                length = current_length\n        else:\n            current_length = 0\n        prev_num = arr[i]\n    return length but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef validate_password(password):\n    # password should be at least 8 characters\n    if len(password) < 8:\n        return False\n \n    # password should have at least one number\n    if re.search('[0-9]', password) is None:\n        return False\n \n    # password should have at least one uppercase\n    if re.search('[A-Z]', password) is None:\n        return False\n \n    # password should have at least one lowercase\n    if re.search('[a-z]', password) is None:\n        return False\n \n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(str1, str2):\n    if (len(str1) != len(str2)):\n        return False\n    \n    list1 = sorted(list(str1)) \n    list2 = sorted(list(str2)) \n  \n    for i in range(0, len(str1)): \n        if (list1[i] != list2[i]): \n            return False\n  \n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn import tree\n\n#features \nfeatures = [[104,0], [100,0], [120,1], [80,0], [105,1]]\n#labels\nlabels = [0,0,1,0,1]\n\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(features, labels)\n\nprint(\"Predicted Label:\", clf.predict([[120,1]])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \nfrom bs4 import BeautifulSoup\n  \ndef crawl(url): \n    page = requests.get(url) \n    soup = BeautifulSoup(page.text, 'html.parser') \n  \n    # retrieve all of the anchor tags\n    # We are going to find all links out of the page\n    tags = soup('a')\n    for tag in tags:  \n        link = tag.get('href', None) \n        if link != None: \n            print(link) \n            \n# Driver code \nif __name__ == \"__main__\": \n    URL = \"http://example.com\"   # type your address instead of example.com\n    crawl(URL) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def FibonacciSeries(num):\n    a = 0\n    b = 1\n    print(\"Fibonacci Series: \")\n    for i in range(0, num):\n        print(a, end=\" \")\n        temp = a\n        a = b\n        b = temp + b\n\nnum = int(input(\"Enter a number: \"))\nFibonacciSeries(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt \n\n# define training data\nx = np.array([i for i in range(len(stock_prices))]).reshape(-1,1)\ny = np.array(stock_prices)\n\n# create and train model \nmodel = LinearRegression()\nmodel.fit(x, y)\n\n# make predictions \ny_pred = model.predict(x)\n\n# plot results\nplt.plot(x, y, 'o-')\nplt.plot(x, y_pred, 'x-')\nplt.title('Stock Prices with Linear Regression Model')\nplt.xlabel('Day')\nplt.ylabel('Price')\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_odd_numbers(start, end):\n    for i in range(start, end+1):\n        if i % 2 != 0:\n            print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortByLength(strings):\n    \"\"\"Sort a list of strings according to their lengths\"\"\"\n    # Sort the list using a key function\n    return sorted(strings, key=len)\n\nif __name__ == '__main__':\n    strings = [\"Python\", \"is\", \"a\", \"programming\", \"language\"]\n    print(sortByLength(strings)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # function to generate the nth term of the Fibonacci sequence\ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n      \n# take input from the user\nnterms = 10\n\n# check if the number of terms is valid\nif nterms<=0: \n    print(\"Please enter a positive integer\") \nelse: \n    print(\"Fibonacci sequence:\")\n    for i in range(1,nterms+1):\n        print(Fibonacci(i))\n\n# Output: Fibonacci sequence: 0 1 1 2 3 5 8 13 21 34 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\ndef predict_sentiment(text):\n    data = {'query': text}\n    _URL = \"http://localhost:5000/sentiment-prediction\"\n    response = requests.post(url = _URL, data = data)\n    return response.json()\n    \nsentiment = predict_sentiment(\"This is an example sentence\")\nprint(sentiment) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for num in range(1, 101):\n    if (num % 3 == 0):\n        print(num)\n\nOutput: 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75 78 81 84 87 90 93 96 99 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: unsorted_list = [5, 8, 2, 1, 3, 10]\n\nsorted_list = sorted(unsorted_list)\n\nprint(sorted_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_larger_number(num1, num2):\n if num1 > num2:\n return num1\n else:\n return num2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_max(arr):\n    max_num = None\n\n    for num in arr:\n        if max_num == None or num > max_num:\n            max_num = num \n\n    return max_num\n\nresult = get_max([7, 9, 5, 10, 2])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter as tk\nimport pandas as pd\n\nroot= tk.Tk() \ncanvas1 = tk.Canvas(root, width = 300, height = 300,  relief = 'raised')\ncanvas1.pack()\n\ndf = pd.DataFrame({'Product':['Apple','Banana','Orange'],'Price':[10,20,30]})\n\ntable = tk.LabelFrame(root, text='Product Table')\ntable.place(relx = 0.1, rely = 0.1, relwidth = 0.8, relheight = 0.8)\n\ntable_body = tk.Frame(table) \ntable_body.place(relx = 0.1, rely = 0.1, relwidth = 0.8, relheight = 0.8)\n\ndata = df.values.tolist() \ncolumn_headings = list(df.columns.values) \n\nframe_header = tk.Frame(table_body)\nframe_header.pack(fill='both', expand='yes')\n\nfor col_h in column_headings:\n    label=tk.Label(frame_header,text=str(col_h),font=\"Helvetica 10 bold\")\n    label.pack(fill='both', pady=10, padx=10, side='left')\n\nframe_table=tk.Frame(table_body)   \nframe_table.pack(fill='both', expand='yes')\n\nrow_num = 0\n\nfor row in data:\n    col_num = 0\n    for col in row:\n        label = tk.Label(frame_table,text=str(col), relief='solid', width=10)\n        label.grid(column=col_num, row=row_num)\n        col_num += 1\n    row_num += 1\n\nroot.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Importing the required libraries\nimport numpy as np\nfrom sklearn import datasets\nfrom sklearn.linear_model import LogisticRegression\n\n# Load the iris dataset\niris = datasets.load_iris()\nX = iris.data[:, :2] #take only first 2 features\ny = iris.target\n\n# Create an instance of Logistic Regression Classifier and fit the data.\nlogreg = LogisticRegression()\nlogreg.fit(X, y) but is not the same. just give one example and only return the code."}
