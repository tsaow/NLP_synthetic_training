{"prompt": "make some code that functions the same as the following code: import random\n\ndef random_number(n):\n  return random.randint(0, n)\n\nrandom_num = random_number(6)\nprint(random_num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(nums):\n    # create a set to remove duplicates\n    unique_list = set(nums)\n    # convert the set back to a list\n    nums = list(unique_list)\n    return nums\n\ninput_list = [2, 2, 3, 4, 5, 5]\nresult = remove_duplicates(input_list)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(sentence): \n    rev=(sentence.lower()).replace(\" \",\"\")\n    return rev == rev[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # all prime numbers less than or equal to 25\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n\n    return True\n\n# generate list of primes\nprimes = []\nfor x in range(2, 26):\n    if is_prime(x):\n        primes.append(x)\n\n# print the list\nprint(primes) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_longest_substring(s, characters):\n    longest_length = 0\n    longest_substring = \"\"\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            if set(substring).issubset(characters):\n                if len(substring) > longest_length:\n                    longest_length = len(substring)\n                    longest_substring = substring\n\n    return longest_substring but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndata = {\n 'name': 'Alice',\n 'age': 22,\n 'hobbies': ['coding', 'guitar']\n}\n\njson_data = json.dumps(data)\n\nprint(json_data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tweepy\nimport nltk\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Get the user's tweets\nconsumer_key = 'YOUR_CONSUMER_KEY'\nconsumer_secret = 'YOUR_CONSUMER_SECRET'\naccess_token = 'YOUR_ACCESS_TOKEN'\naccess_token_secret = 'YOUR_ACCESS_TOKEN_SECRET'\n\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\nuser = '@Apple'\ntweets = api.user_timeline(screen_name=user, \n                           count=200, \n                           include_rts=False)\n\n# Analyze the sentiment\ntweet_data = [[tweet.text] for tweet in tweets]\n\nsentiment_data = []\nfor t in tweet_data:\n    sentiment_data.append(nltk.sentiment.util.extract_unigram_feats(t, top_n=30))\n\nsentiment_data = np.array(sentiment_data)\n\n# Plot the sentiment of the user's tweets\nplt.plot(np.arange(len(sentiment_data)),sentiment_data[:,1], '-b')\nplt.title(\"Sentiment of @Apple's Tweets\")\nplt.xlabel('Tweet')\nplt.ylabel('Sentiment')\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MyClass(object):\n    pass but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_unique_list(my_list):\n    unique_list =[]\n    for i in my_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    if len(unique_list) == len(my_list):\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\n# Create an array of 10 random numbers between 1 to 10\narr = np.random.randint(low=1, high=11, size=10)\n\n# Sort the array in ascending order\narr.sort()\n\nprint(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_of_three(x, y, z):\n    max_num = x\n    if y > max_num:\n        max_num = y\n    if z > max_num:\n        max_num = z\n    return max_num but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.ensemble import RandomForestClassifier\n\ndata = pd.DataFrame(input)\n\nvectorizer = TfidfVectorizer()\nX = vectorizer.fit_transform(data.text)\ny = data.label\n\nmodel = RandomForestClassifier()\nmodel.fit(X, y)\n\n# Predictions\npredictions = model.predict(X)\nprint(predictions) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef is_valid_email(email):\n    regex = '^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'\n    if re.search(regex, email):\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def discount(items):\n    '''\n    This function takes a dictionary of items and their respective price and quantity as input and calculates the discount.\n    '''\n    # calculate the total cost \n    total_cost = 0\n    for item, price in items.items():\n        total_cost += price[0] * price[1]\n    \n    # calculate the discount \n    discount = 0.2 * total_cost\n    \n    return discount but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import collections\n\ntext = \"It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout.\"\nwords = text.split()\nword_counts = collections.Counter(words)\n\nfor word, count in word_counts.items():\n    print(f\"{word}: {count}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(10):\n    print(\"This line will be printed 10 times\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: totalCost = 0\nfor item, price in items.items():\ntotalCost += price\n\nprint(f'Total cost of the cart is {totalCost}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\n# Load in the dataset \ndata = pd.read_csv('movie_dataset.csv')\n\n# Set the features and target to X and y respectively \nX = data.drop(columns=['genre'])\ny = data['genre']\n\n# Split into test and training sets \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\n\n# Initialize the Random Forest Classifier  \nclf = RandomForestClassifier()\n\n# Fit the model \nclf.fit(X_train, y_train)\n\n# Make predictions \ny_pred = clf.predict(X_test)\n\n# Calculate accuracy \naccuracy = accuracy_score(y_test, y_pred)\n\n# Print accuracy \nprint('Accuracy of model is: ', accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sorted_list = []\ninput_strings = input(\"Enter a list of strings, separated by spaces: \")\n\ninput_strings = input_strings.split()\nfor string in input_strings:\n    sorted_list.append(string)\n\nsorted_list.sort()\n\nprint(sorted_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import imaplib, email\n\n#Connect to the mail server\nmail = imaplib.IMAP4_SSL('imap.example.com')\n\n#Login\nmail.login('username', 'password')\n\n#Select the mailbox\nmail.select('INBOX')\n\n#Search for emails\n_, data = mail.search(None, 'ALL')\n\n#Fetch the emails\nfor num in data[0].split():\n  _, data = mail.fetch(num, '(RFC822)')\n  email_message = email.message_from_bytes(data[0][1])\n  #Process the email but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pair(num_1, num_2):\n return [num_1, num_2]\n\nprint(pair(10, 20)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def celsius_to_fahrenheit(celsius):\n    return celsius * (9/5) + 32\n\ntemperature = celsius_to_fahrenheit(32)\n \nprint(\"32\u00b0C is equal to %.2f\u00b0F\" % temperature) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def odd_numbers(num):\n for n in range(num+1):\n if n % 2 != 0:\n print(n)\n\nodd_numbers(user_number)\n# Output: 1, 3, 5, 7, 9 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Vector3D: \n    def __init__(self, x, y, z): \n        self.x = x \n        self.y = y \n        self.z = z \n\n    def magnitude(self): \n        return (self.x**2 + self.y**2 + self.z**2)**0.5 \n  \n    def normalize(self): \n        magnitude = self.magnitude() \n        self.x /= magnitude \n        self.y /= magnitude \n        self.z /= magnitude but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import the necessary libraries\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# create the arrays\nx = np.array(X).reshape(-1,1)\ny = np.array(Y).reshape(-1,1)\n\n# create and fit the model\nmodel = LinearRegression()\nmodel.fit(x, y)\n\n# print the model coefficients\nprint('Intercept: ', model.intercept_)\nprint('Coefficient: ', model.coef_) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_words(sentence):\n    words = sentence.split()\n    words.reverse()\n    return \" \".join(words)\n\nprint(reverse_words(\"I love programming.\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_largest_sum(lst):\n    largest_sum = 0\n    for i in range(len(lst) - 1):\n        current_sum = lst[i] + lst[i+1]\n        if current_sum > largest_sum:\n            largest_sum = current_sum\n    return largest_sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_set_elements(s):\n    return list(s)\n\nmy_set = {1, 2, 3, 4}\nresult = get_set_elements(my_set)\nprint(result) # Outputs: [1, 2, 3, 4] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_bill(rate, consumption):\n    bill = rate * consumption\n    print(\"Your total electricity bill is Rs. {}\".format(bill))\n\ncalculate_bill(40, 300) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\n# load the data\ndata = # List of texts and their categories\nx = [text for (text, category) in data]\ny = [category for (text, category) in data]\n\n# transform the texts to tf-idf vectors\nvec = TfidfVectorizer()\nX = vec.fit_transform(x)\n\n# train classifier\nclf = LogisticRegression()\nclf.fit(X, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\n\ntext1 = 'This is a nice day.'\ntext2 = 'It looks like a pleasant day.'\n\ntext1_tokens = nltk.word_tokenize(text1)\ntext2_tokens = nltk.word_tokenize(text2)\n\nsimilarity_score = len(set(text1_tokens).intersection(text2_tokens)) / float(len(set(text1_tokens).union(text2_tokens)))\n\nprint(similarity_score)\n// Output: 0.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_primes(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if is_prime(i):\n            count += 1\n    return count\n\ndef is_prime(num):\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from selenium import webdriver\n\nurl = 'https://en.wikipedia.org/wiki/Python'\n\ndriver = webdriver.Chrome()\ndriver.get(url)\n\npage_content = driver.page_source\n \ndriver.close()\n\n# Process page_content but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os\nimport sys\n\nclass game:\n    def __init__(self):\n        self.board = [[0, 0, 0],\n                      [0, 0, 0],\n                      [0, 0, 0]]\n        self.turn = 'X'\n        self.score = [0, 0]\n\n    def move(self, x, y):\n        self.board[x][y] = self.turn\n        if self.turn == 'X':\n            self.turn = 'O'\n        else:\n            self.turn = 'X'\n\n    def display(self):\n        os.system('clear')\n        for i in range(3):\n            print(self.board[i])\n\n    def winCondition(self):\n        for player in ['X', 'O']:\n            # check rows\n            for i in range(3):\n                if self.board[i] == [player, player, player]:\n                    self.score[0 if player == 'X' else 1] += 1\n                    return True\n\n            # check columns\n            for i in range(3):\n                if self.board[0][i] == player and self.board[1][i] == player and self.board[2][i] == player:\n                    self.score[0 if player == 'X' else 1] += 1\n                    return True\n\n            # check diagonals\n            if self.board[0][0] == player and self.board[1][1] == player and self.board[2][2] == player:\n                self.score[0 if player == 'X' else 1] += 1\n                return True\n\n            if self.board[2][0] == player and self.board[1][1] == player and self.board[0][2] == player:\n                self.score[0 if player == 'X' else 1] += 1\n                return True\n\n        return False\n\ndef main():\n    myGame = game()\n    while True:\n        myGame.display()\n        print(\"Turn: {}\".format(myGame.turn))\n        move = input(\"Please input move (x, y): \").split(',')\n        x, y = int(move[0]), int(move[1])\n        if 0 <= x < 3 and 0 <= y < 3 and myGame.board[x][y] == 0:\n            myGame.move(x, y)\n        if myGame.winCondition():\n            myGame.display()\n            print(\"Player X: {} | Player O: {}\".format(myGame.score[0], myGame.score[1]))\n            sys.exit(0)\n\nif __name__ == \"__main__\":\n    main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def prim(G, start):\n    node = start\n    visited = set()\n    edges = []\n    visited.add(node)\n    while len(visited) < G.num_nodes:\n        min_edge = float(\"inf\")\n        for neighbor, weight in G.neighbors[node]:\n            if neighbor not in visited and weight < min_edge:\n                min_edge = weight\n                new_node = neighbor\n        edges.append((node, new_node, min_edge))\n        visited.add(new_node)\n        node = new_node\n    return edges but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent_character(string): \n    counts = dict() \n    max = -1\n    character = '' \n\n    for char in string: \n        if char in counts: \n            counts[char] += 1\n        else: \n            counts[char] = 1\n\n        if counts[char] > max: \n            max = counts[char] \n            character = char \n    return character but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://en.wikipedia.org/wiki/Python_(programming_language)\"\n\nr = requests.get(url)\nsoup = BeautifulSoup(r.content)\n\n# get page title\ntitle = soup.find('h1', attrs={'id': 'firstHeading'}).text\n\n# get all div nodes with class\ndivs = soup.find_all('div', class_='mw-body-content')\n\n# get all links\nlinks = []\nfor div in divs:\n links.extend(div.find_all('a'))\n\n# print title and links\nprint(\"Page title: {}\".format(title))\nfor link in links:\n print(\"Link: {}\".format(link['href'])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def rotate_k_times(my_list, k):\n    rotated_list = my_list.copy()\n    for i in range(k):\n        rotated_list = [rotated_list[-1]] + rotated_list[:-1]\n    return rotated_list\n\nif __name__ == '__main__':\n    print(rotate_k_times(my_list, 3)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def total_amount(lst): \n \n    # Initializing total \n    total = 0\n \n    # Iterate through each dictionary \n    # and calculate total  \n    for dic in lst: \n        total += (dic['quantity'] * dic['price']) \n \n    # Returning total \n    return total \n \n# Driver Code \nlst = [{ \"item\": \"apple\", \"quantity\": 5, \"price\": 2 }, \n        { \"item\": \"bread\", \"quantity\": 2, \"price\": 3 }] \nprint(\"Total Amount :\", total_amount(lst)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def dfs(root): \n    if root is not None: \n        print(root.data) \n        dfs(root.left) \n        dfs(root.right) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n \n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + middle + quick_sort(right) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_of_two(x, y):\n    if x > y:\n        return x\n    return y\n\n# This code is correct and will output the maximum value of the two numbers. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef evaluate(board, player_turn):\n moves = find_valid_moves(board)\n \n if len(moves) == 0:\n  return 0\n \n scores = []\n for move in moves:\n  board_copy = board.copy()\n  board_copy[move] = player_turn\n  scores.append(evaluate(board_copy, -player_turn))\n \n if player_turn == 1:\n  return max(scores)\n else:\n  return min(scores)\n\ndef find_valid_moves(board):\n moves = []\n \n for i in range(9):\n  for j in range(9):\n   if board[i][j] == 0:\n    moves.append((i, j))\n \n return moves\n\ndef play_game(board, player_turn):\n while True:\n  valid_moves = find_valid_moves(board)\n \n  if len(valid_moves) == 0:\n  return 0\n \n  best_move = None\n  best_score = -float('inf')\n \n  for move in valid_moves:\n   board_copy = board.copy()\n   board_copy[move] = player_turn\n   score = evaluate(board_copy, -player_turn)\n   \n   if score > best_score:\n    best_score = score\n    best_move = move\n \n  board[best_move] = player_turn\n \n  if has_won(board, player_turn):\n    return 1\n \n  player_turn = -player_turn but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_matches(list_a, list_b):\n    count = 0\n    for item_a in list_a:\n        for item_b in list_b:\n            if item_b == item_a:\n                count += 1\n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: longest_str = \"\"\nfor string in list_of_strings:\n    if len(string) > len(longest_str):\n        longest_str = string\n\nprint(longest_str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\")\n    elif n == 0: \n        return a # when n is 0\n    elif n == 1: \n        return b # when n is 1 \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\ndef compare_pages(url1, url2):\n  page1_data = requests.get(url1).text\n  page2_data = requests.get(url2).text\n\n  page1_soup = BeautifulSoup(page1_data, 'html.parser')\n  page2_soup = BeautifulSoup(page2_data, 'html.parser')\n\n  page1_text = page1_soup.get_text()\n  page2_text = page2_soup.get_text()\n\n  # if there are fewer than 3 differences, they are considered similar \n  diffs = 0\n  for i in range(min(len(page1_text), len(page2_text))):\n    if page1_text[i] != page2_text[i]:\n      diffs += 1\n      if diffs > 3:\n        return False\n\n  # if the pages were different length, they are considered different      \n  if len(page1_text) != len(page2_text):\n    return False\n  \n  return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_length(string):\n     length = 0\n     for i in string:\n         length = length+1 \n     return length but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max_non_consecutive_sum(arr):\n    incl = 0\n    excl = 0\n     \n    for i in arr:\n        new_excl = max(incl, excl)   \n        incl = excl + i \n        excl = new_excl \n       \n    return max(incl, excl) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The code creates a list of the squares of numbers from 0 to 5, inclusive. It does this by using a list comprehension and the range() function. The range() function takes in two parameters, the starting point (start) and the ending point (end). In this case, the starting point is 0 and the ending point is 5, meaning the list will include the numbers 0, 1, 2, 3, 4 and 5. The list comprehension then takes each of these numbers and squares them, giving us the list [0, 1, 4, 9, 16, 25]. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def activity_selection_greedy(arr):\n    n = len(arr)\n    \n    result = []\n    i = 0\n    result.append(arr[i])\n    \n    for j in range(1,n):\n        if arr[j][0] >= arr[i][1]:\n            result.append(arr[j])\n            i = j\n\n    return result\n\nresult = activity_selection_greedy([[1, 4], [3, 5], [0, 6], [5, 7], [3, 8], [5, 9], [6, 10], [8, 11], [8, 12], [2, 13], [12, 14]])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import lint\n\ndef check_code(source_code):\n    lint.py_run(source_code, \"--report=yes\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\n# Use randomly generated data\ndata = np.random.normal(size=1000)\n\n# Generate histogram\nplt.hist(data, bins=30, edgecolor='k', alpha=0.7)\nplt.xlabel(\"Value\")\nplt.ylabel(\"Frequency\")\n\n# Show histogram\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # main.py\nimport datetime\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n greeting = \"Hello, world!\"\n return jsonify(greeting)\n\n@app.route('/date')\ndef date():\n now = datetime.datetime.now()\n return jsonify(now)\n\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import lxml.html\n\ndef parse_table(html_str):\n    root = lxml.html.fromstring(html_str)\n\n    # locate the table\n    table = root.xpath('//table')[0]\n\n    # collect header names\n    header_names = [th.text_content() for th in table.xpath('//th')]\n\n    # collect data rows\n    data_rows = table.xpath('//tr')[1:]\n    data_rows = [[td.text_content().strip() for td in row.xpath('td')]\n                    for row in data_rows]\n\n    # print the result\n    print(header_names)\n    print(data_rows) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPrime(n):\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            return False\n        i += 1    \n    return True\n\ndef printPrimes(N):\n    for i in range (2, N+1):\n        if isPrime(i):\n            print(i, end=\" \")\n\nprintPrimes(10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_prime_numbers(start, end):\n  total = 0\n  for num in range(start, end + 1):\n    if is_prime(num):\n      total += num\n  return total\n\ndef is_prime(num):\n  for i in range(2, num):\n    if num % i == 0:\n      return False\n  \n  return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Python is a powerful, high-level programming language that can be used to create efficient algorithms and data types. It has a wide range of applications from web development to artificial intelligence and machine learning. Python can be used to develop complex algorithms that can process large datasets and uncover valuable insights from the data. It can also be used to develop sophisticated data types that can be used to store a variety of data structures. Python provides a good foundation for developing efficient algorithms and powerful data types. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_arrays(arr_1, arr_2):\n  return arr_1 + arr_2\n  \nresult = merge_arrays(arr_1, arr_2)\nprint(result) #[1, 2, 3, 4, 5, 6] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: function add_two_numbers(a, b) {\n  return a + b;\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\nwords_regex = re.compile(r\"apple|banana|strawberry|orange\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Input data\nrooms = np.array([4, 3, 2, 5]).reshape(-1, 1)\nsquare_feet = np.array([2000, 1600, 1400, 2500]).reshape(-1, 1)\nprice = np.array([400000, 340000, 280000, 480000])\n\n# Create linear regression model\nmodel = LinearRegression()\nmodel.fit(rooms, price)\nmodel.fit(square_feet, price)\n\n# Output predicted prices\npredicted_price = model.predict([[4], [1600]])\nprint(predicted_price) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to calculate the maximum value \ndef knapSack(weights, values, max_weight): \n    n = len(weights)\n\n    # Array with one extra item \n    table = [[0 for x in range(max_weight + 1)] for x in range(n + 1)] \n\n    # Build table memonizing the subproblems \n    for i in range(n + 1): \n        for w in range(max_weight + 1): \n            if i == 0 or w == 0: \n                table[i][w] = 0\n            elif weights[i-1] <= w: \n                table[i][w] = max(values[i-1] + table[i-1][w-weights[i-1]], table[i-1][w]) \n            else: \n                table[i][w] = table[i-1][w] \n\n    # Handles the case when there is no item in the knapsack \n    # Maximum value is 0 \n    return table[n][max_weight] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: {\n 'a': ['A', 'into'],\n 'c': ['cat'],\n 'j': ['jumped'],\n 'k': ['kitchen'],\n 'w': ['wild']\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\ndb = sqlite3.connect('sample_database.db')\n\ncursor = db.cursor()\ncursor.execute(\"CREATE TABLE IF NOT EXISTS users (name TEXT, age INT)\")\n\ndb.commit()\n\ncursor.execute(\"INSERT INTO users VALUES ('John', 18)\")\ncursor.execute(\"INSERT INTO users VALUES ('Mary', 25)\")\ncursor.execute(\"INSERT INTO users VALUES ('Mark', 30)\")\ncursor.execute(\"INSERT INTO users VALUES ('Jill', 45)\")\ncursor.execute(\"INSERT INTO users VALUES ('Tom', 22)\")\ncursor.execute(\"INSERT INTO users VALUES ('Alice', 28)\")\ncursor.execute(\"INSERT INTO users VALUES ('Bob', 50)\")\ncursor.execute(\"INSERT INTO users VALUES ('George', 15)\")\ncursor.execute(\"INSERT INTO users VALUES ('Jane', 36)\")\ncursor.execute(\"INSERT INTO users VALUES ('Josh', 33)\")\n\ndb.commit()\ndb.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_even_numbers(numbers):\n  even_numbers = []\n  for number in numbers:\n    if number % 2 == 0:\n      even_numbers.append(number)\n  return even_numbers\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(filter_even_numbers(numbers)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Python is an interpreted, high-level programming language that was created by Guido van Rossum in 1991. It has a strong emphasis on code readability thanks to the use of significant whitespace. Its language constructs and object-oriented approach help programmers write clear and logical code for both small and large-scale projects. The language is great for beginners and experienced coders alike, with its easy-to-read syntax and numerous libraries available. Python is well-suited for a wide variety of tasks and is a great choice for almost any programming project. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The best way to debug a Python program is to use a debugger. Popular Python debuggers include pdb, ipdb, and the Python built-in debugger. These debuggers allow you to step through code line-by-line, view and modify variables, and set breakpoints. Additionally, some IDEs such as PyCharm have built-in debuggers which incorporate some of these features. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndataset = [12, 34, 37, 10, 89, 67, 99, 101]\ndataset_without_outliers = [x for x in dataset if abs(x-np.mean(dataset)) < 3*np.std(dataset)]\n\nprint(dataset_without_outliers) # prints [12, 34, 37, 10, 89, 67, 99] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j] \n    return arr\n\narr = [2, 3, 4, 1, 5]\nprint(bubble_sort(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def cube_volume(side_length):\n    return side_length ** 3\n\nvolume = cube_volume(side_length)\nprint(f\"Volume of cube is {volume}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def unique_pairs(number):\n    pairs = set()\n    for i in range(number + 1):\n    \tfor j in range(number + 1):\n            if i + j == number and (j, i) not in pairs:\n                pairs.add((i, j))\n    return pairs but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_of_two(a,b):\n    if a> b:\n        return a\n    else:\n        return b\n\nmax_of_two(10,11) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef validate_password(password):\n    if len(password) < 8:\n        return False\n\n    if not any(map(str.isupper, password)):\n        return False\n\n    if not any(map(str.islower, password)):\n        return False\n\n    if not any(map(str.isalnum, password)):\n        return False\n    \n    return True\n\n#Test\npassword = \"Myn@Passw0rd\"\nvalid = validate_password(password)\n\nif valid:\n    print(\"This is a valid password\")\nelse:\n    print(\"This is an invalid password\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_prime_numbers_between_two_numbers(low, high): \n    for numb in range(low,high + 1): \n        if numb > 1: \n            for i in range(2,numb): \n                if (numb % i) == 0: \n                    break\n            else: \n                print(numb) \n\n#calling the function\nprint_prime_numbers_between_two_numbers(5, 10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [2, 3, [4, 5, [6]], [7, 8]]\nnew_list = []\ndef flatten(lst):\n    for item in lst:\n        if isinstance(item, list):\n            flatten(item)\n        else:\n            new_list.append(item)\n\nflatten(my_list)\nprint(new_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re \n  \n# function to validate an Email \ndef validate_email(email): \n      \n    # make a regular expression \n    # for validating an Email \n    regex = '^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'\n    if (re.search(regex, email)): \n        print(\"Valid Email\")  \n    else: \n        print(\"Invalid Email\")  \n  \nif __name__ == \"__main__\":      \n    # enter the email  \n    email = \"test@example.com\"\n      \n    validate_email(email) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [1, 2, 3, 4, 5, 6]\n\n# sum comprehension \ntotal = sum(num for num in my_list if num % 2 == 0)\nprint(total) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def average_even(list):\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return sum(even_list)/len(even_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compute_sum(a, b): \n    return a + b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\nnum = float(input(\"Enter a number: \"))\n\n# checking if the number is negative\nif num < 0:\n    print(\"The square root of the given number cannot be computed\")\nelse:\n    print(\"The square root of the given number is:\",math.sqrt(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def topologicalSort(adj): \n    indeg := [0]*V \n    top_order = [] \n  \n    # calculate in-degrees of all \n    # vertices \n    for i in range(V): \n        for j in adj[i]:\n            indeg[j]+=1\n  \n    # Create a queue and enqueue \n    # all vertices with indegree 0 \n    queue=[]\n    for i in range(V): \n        if indeg[i] == 0: \n            queue.append(i) \n  \n    # we've got our topological order\n    curr_count = 0\n    while queue: \n        u = queue.pop(0) \n        top_order.append(u) \n  \n        # decrease every vertex's indegree  \n        # by 1 as long as all its edges are \n        # traversed. \n        for v in adj[u]: \n            indeg[v] -= 1\n            if indeg[v] == 0:\n                queue.append(v) \n        curr_count+=1\n\n    # Check if there was a cycle\n    if curr_count != V: \n        print(\"There exists a cycle in the graph\") \n        return\n    else: \n        for i in top_order: \n            print(i)\n\n        return top_order but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pytorch\nimport numpy as np\n\n# Define the board size\nROWS = 6\nCOLS = 7\n\n# Create a 2-dimensional numpy array board\nboard = np.zeros((ROWS,COLS))\n\n# Define players\nplayer1 = 1\nplayer2 = -1\n\n# Define a class for our agent\nclass Agent:\n    def __init__(self, symbol):\n        self.symbol = symbol\n        \n    def move(self, board):\n        valid_moves = []\n        for c in range(COLS):\n            if board[ROWS-1][c] == 0:\n                valid_moves.append(c)\n        \n        # Get the highest predicted value column\n        col = self.predict(board, valid_moves)\n        \n        # Drop the piece in column\n        for r in range(ROWS):\n            # If row is empty\n            if board[r][col] == 0:\n                board[r][col] = self.symbol\n                \n                # End for loop\n                break\n    \n    # Artificial intelligence/Machine Learning\n    def predict(self, board, valid_moves):\n        predictions = []\n        # Loop through all the valid moves\n        for col in valid_moves:\n            # Create a deep copy of the board\n            temp_board = board.copy()\n            # Drop the piece in the column\n            for r in range(ROWS):\n                if temp_board[r][col] == 0:\n                    temp_board[r][col] = self.symbol\n                    break\n            # Make a prediction with the Neural Network\n            prediction = model.predict(temp_board.reshape(1, ROWS, COLS))\n            predictions.append(prediction)\n        \n        # Search predictions for the highest value\n        # and return the corresponding column index\n        return int(np.argmax(predictions)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def PrintFibonacci(n):\n a = 0\n b = 1\n for _ in range(n):\n c = a + b \n print(c, end = \" \")\n a = b \n b = c \n\nPrintFibonacci(20) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Properly functioning Python script for extracting data from a web page. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def largest_palindrome(arr):\n    max_palindrome = 0\n    for item in arr:\n        temp = str(item)\n        if temp == temp[::-1] and max_palindrome < item:\n            max_palindrome = item\n    return max_palindrome\n\nprint(largest_palindrome([12, 521, 1212, 84561, 91332])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_anagrams(string1, string2):\n\t# Put the strings in lower case\n\tstring1 = string1.lower()\n\tstring2 = string2.lower()\n\n\t# Remove all the white spaces\n\tstring1 = string1.replace(\" \", \"\")\n\tstring2 = string2.replace(\" \", \"\")\n\n\t# Sort the strings  \n\tstring1_sorted = ''.join(sorted(string1)) \n\tstring2_sorted = ''.join(sorted(string2)) \n\n\t# Check if the sorted strings are same \n\tif (string1_sorted == string2_sorted): \n\t\treturn True\n\t\n\treturn False\n\nif __name__ == '__main__':\n\tstring1 = \"Dormitory\"\n\tstring2 = \"Dirty room\"\n\t\n\tif check_anagrams(string1, string2):\n\t\tprint(\"The strings are anagrams!\")\n\telse:\n\t\tprint(\"The strings are not anagrams!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, jsonify\nfrom netaddr import IPNetwork\n\napp = Flask(__name__)\n\n@app.route('/devices', methods=['GET'])\ndef get_devices():\n ip_range = request.args.get('ip_range')\n ip_network = IPNetwork(ip_range)\n\n# Query your data store to retrieve all devices in the given IP range\n devices = [\n {'ip_address': '192.168.1.5', 'vendor': 'Cisco'},\n {'ip_address': '192.168.1.6', 'vendor': 'Huawei'},\n {'ip_address': '192.168.1.7', 'vendor': 'Juniper'},\n {'ip_address': '192.168.1.8', 'vendor': 'HP'}\n ]\n\n# Filter the list of devices to those in the specified IP range\n devices = [device for device in devices if IPNetwork(device['ip_address']) in ip_network]\n return jsonify(devices)\n\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: input_list = [\"a\", \"b\", \"c\", \"d\", \"a\", \"e\"]\nunique_list = set(input_list)\n\nprint(unique_list)\n# Output: {'a', 'c', 'b', 'e', 'd'} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from typing import List, Optional, Union\n\nfrom hdlConvertorAst.hdlAst._defs import HdlIdDef\nfrom hdlConvertorAst.hdlAst._expr import HdlValueId\nfrom hdlConvertorAst.hdlAst._structural import HdlModuleDec, HdlModuleDef, \\\n    HdlCompInst\nfrom hwt.code import If\nfrom hwt.hdl.operatorDefs import AllOps\nfrom hwt.hdl.types.defs import BIT\nfrom hwt.hdl.value import HValue\nfrom hwt.serializer.utils import HdlStatement_sort_key, RtlSignal_sort_key\nfrom hwt.synthesizer.dummyPlatform import DummyPlatform\nfrom hwt.synthesizer.exceptions import SigLvlConfErr\nfrom hwt.synthesizer.interfaceLevel.mainBases import InterfaceBase\nfrom hwt.synthesizer.param import Param\nfrom hwt.synthesizer.rtlLevel.mark_visibility_of_signals_and_check_drivers import\\\n    markVisibilityOfSignalsAndCheckDrivers\nfrom hwt.synthesizer.rtlLevel.remove_unconnected_signals import removeUnconnectedSignals\nfrom hwt.synthesizer.rtlLevel.rtlSignal import RtlSignal, NOT_SPECIFIED\nfrom hwt.synthesizer.rtlLevel.rtlSyncSignal import RtlSyncSignal\nfrom hwt.synthesizer.rtlLevel.statements_to_HdlStmCodeBlockContainers import\\\n    statements_to_HdlStmCodeBlockContainers\nfrom hwt.doc_markers import internal\n\n\nclass RtlNetlist():\n    \"\"\"\n    Hierarchical container for signals\n\n    :ivar ~.parent: optional parent for debug and late component inspection\n    :ivar ~.signals: set of all signals in this context\n    :ivar ~.statements: list of all statements which are connected to signals in this context\n    :ivar ~.subUnits: is set of all units in this context\n    :type ~.interfaces: Dict[RtlSignal, DIRECTION]\n    :ivar ~.interfaces: initialized in create_HdlModuleDef\n    :type ~.ent: HdlModuleDec\n    :ivar ~.ent: initialized in create_HdlModuleDec\n    :type ~.arch: HdlModuleDef\n    :ivar ~.arch: initialized in create_HdlModuleDef\n    :ivar ~.hdl_objs: The list of HDL objects which were produced by this instance\n        usually contains HdlModudeleDef but may contain imports/globals etc.\n    \"\"\"\n\n    def __init__(self, parent: Optional[\"Unit\"]=None):\n        self.parent = parent\n        self.signals = set()\n        self.statements = set()\n        self.subUnits = set()\n        self.interfaces = {}\n        self.hdl_objs = []\n        self.ent = None\n        self.arch = None\n        self._port_items = []\n\n    def sig(self, name, dtype=BIT, clk=None, syncRst=None,\n            def_val=None, nop_val=NOT_SPECIFIED) -> Union[RtlSignal, RtlSyncSignal]:\n        \"\"\"\n        Create new signal in this context\n\n        :param clk: clk signal, if specified signal is synthesized\n            as SyncSignal\n        :param syncRst: synchronous reset signal\n        :param def_val: a default value used for reset and intialization\n        :param nop_val: a value which is used to drive the signal if there is no other drive\n            (used to prevent latches and to specify default values for unconnected signals)\n        \"\"\"\n        _def_val = _try_cast_any_to_HValue(def_val, dtype, True)\n        if nop_val is not NOT_SPECIFIED:\n            nop_val = _try_cast_any_to_HValue(nop_val, dtype, False)\n\n        if clk is not None:\n            s = RtlSyncSignal(self, name, dtype, _def_val, nop_val)\n            if syncRst is not None and def_val is None:\n                raise SigLvlConfErr(\n                    \"Probably forgotten default value on sync signal %s\", name)\n            # dst_resolve_fn is overriden because default assign would assign to the \"next\" signal\n            if syncRst is not None:\n                r = If(syncRst._isOn(),\n                       s(_def_val, dst_resolve_fn=lambda x: x)\n                    ).Else(\n                       s(s.next, dst_resolve_fn=lambda x: x)\n                    )\n            else:\n                r = [\n                    s(s.next, dst_resolve_fn=lambda x: x)\n                ]\n\n            if isinstance(clk, (InterfaceBase, RtlSignal)):\n                clk_trigger = clk._onRisingEdge()\n            else:\n                # has to be tuple of (clk_sig, AllOps.RISING/FALLING_EDGE)\n                clk, clk_edge = clk\n                if clk_edge is AllOps.RISING_EDGE:\n                    clk_trigger = clk._onRisingEdge()\n                elif clk_edge is AllOps.FALLING_EDGE:\n                    clk_trigger = clk._onRisingEdge()\n                else:\n                    raise ValueError(\n                        \"Invalid clock edge specification\", clk_edge)\n\n            If(clk_trigger,\n               r\n            )\n        else:\n            if syncRst:\n                raise SigLvlConfErr(\n                    f\"Signal {name:s} has reset but has no clk\")\n            s = RtlSignal(self, name, dtype, def_val=_def_val, nop_val=nop_val)\n\n        return s\n\n    def create_HdlModuleDec(self, name: str,\n                            store_manager: \"StoreManager\",\n                            params: List[Param]):\n        \"\"\"\n        Generate a module header (entity) for this module\n        \"\"\"\n        self.ent = ent = HdlModuleDec()\n        ent.name = store_manager.name_scope.checked_name(name, ent)\n        ns = store_manager.hierarchy_push(ent)\n        # create generics\n        for p in sorted(params, key=lambda x: x._name):\n            hdl_val = p.get_hdl_value()\n            v = HdlIdDef()\n            v.origin = p\n            v.name = p.hdl_name = ns.checked_name(p._name, p)\n            v.type = hdl_val._dtype\n            v.value = hdl_val\n            ent.params.append(v)\n\n        return ent\n\n    def create_HdlModuleDef(self,\n                            target_platform: DummyPlatform,\n                            store_manager: \"StoreManager\"):\n        \"\"\"\n        Generate a module body (architecture) for this module\n\n        * Resolve name collisions\n        * Convert netlist representation to HdlProcesses\n        * Remove unconnected\n        * Mark visibility of signals\n        \"\"\"\n        for proc in target_platform.beforeHdlArchGeneration:\n            proc(self)\n\n        ns = store_manager.name_scope\n        mdef = HdlModuleDef()\n        mdef.dec = self.ent\n        mdef.module_name = HdlValueId(self.ent.name, obj=self.ent)\n        mdef.name = \"rtl\"\n\n        processes = sorted(self.statements, key=HdlStatement_sort_key)\n        processes = sorted(statements_to_HdlStmCodeBlockContainers(processes), key=HdlStatement_sort_key)\n\n        # add signals, variables etc. in architecture\n        for s in sorted((s for s in self.signals\n                        if not s.hidden and\n                        s not in self.interfaces.keys()),\n                        key=RtlSignal_sort_key):\n                v = HdlIdDef()\n                v.origin = s\n                s.name = v.name = ns.checked_name(s.name, s)\n                v.type = s._dtype\n                v.value = s.def_val\n                v.is_const = s._const\n                mdef.objs.append(v)\n\n        for p in processes:\n            p.name = ns.checked_name(p.name, p)\n        mdef.objs.extend(processes)\n        # instantiate subUnits in architecture\n        for u in self.subUnits:\n            ci = HdlCompInst()\n            ci.origin = u\n            ci.module_name = HdlValueId(u._ctx.ent.name, obj=u._ctx.ent)\n            ci.name = HdlValueId(ns.checked_name(u._name + \"_inst\", ci), obj=u)\n            e = u._ctx.ent\n\n            ci.param_map.extend(e.params)\n            ci.port_map.extend(e.ports)\n\n            mdef.objs.append(ci)\n\n        self.arch = mdef\n        return mdef\n\n    def getDebugScopeName(self):\n        scope = []\n        p = self.parent\n        while p is not None:\n            scope.append(p._name)\n            try:\n                p = p._parent\n            except AttributeError:\n                break\n\n        return \".\".join(reversed(scope))\n\n\n@internal\ndef _try_cast_any_to_HValue(v, dtype, require_const):\n    if isinstance(v, RtlSignal):\n        assert not require_const or v._const, \\\n            \"Initial value of signal has to be a constant\"\n        return v._auto_cast(dtype)\n    elif isinstance(v, HValue):\n        return v._auto_cast(dtype)\n    elif isinstance(v, InterfaceBase):\n        return v._sig\n    else:\n        return dtype.from_py(v) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_fibonacci_series(n):\n    a, b = 0, 1\n    for i in range(n):\n        print(a)\n        a, b = b, a + b\n\nprint_fibonacci_series(7) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compute_distance(x1, y1, x2, y2):\n    return ((x2-x1)**2 + (y2-y1)**2)**0.5\n\ndistance = compute_distance(5, 4, 9, 2)\nprint(\"The distance between two points is:\", distance) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\n# Copyright 2020 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Game Servers sample for updating a game server cluster.\n\nExample usage:\n    python update_cluster.py --project-id <project-id> --location <location> --realm-id <realm-id> --cluster-id <cluster-id>\n\"\"\"\n\nimport argparse\n\nfrom google.cloud import gaming\nfrom google.cloud.gaming_v1.types import game_server_clusters\nfrom google.protobuf import field_mask_pb2 as field_mask\n\n\n# [START cloud_game_servers_cluster_update]\ndef update_cluster(project_id, location, realm_id, cluster_id):\n    \"\"\"Updates a game server cluster.\"\"\"\n\n    client = gaming.GameServerClustersServiceClient()\n\n    request = game_server_clusters.UpdateGameServerClusterRequest(\n        game_server_cluster=game_server_clusters.GameServerCluster(\n            name=f\"projects/{project_id}/locations/{location}/realms/{realm_id}/gameServerClusters/{cluster_id}\",\n            labels={\"label-key-1\": \"label-value-1\", \"label-key-2\": \"label-value-2\"},\n        ),\n        update_mask=field_mask.FieldMask(paths=[\"labels\"]),\n    )\n\n    operation = client.update_game_server_cluster(request)\n    print(f\"Update cluster operation: {operation.operation.name}\")\n    operation.result(timeout=120)\n# [END cloud_game_servers_cluster_update]\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--project-id', help='Your cloud project ID.', required=True)\n    parser.add_argument('--location', help='Your realm location.', required=True)\n    parser.add_argument('--realm-id', help='Your realm ID.', required=True)\n    parser.add_argument('--cluster-id', help='Your game server cluster ID.', required=True)\n\n    args = parser.parse_args()\n\n    update_cluster(args.project_id, args.location, args.realm_id, args.cluster_id)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def diff_characters(firstString, secondString):\n if len(firstString) != len(secondString):\n return -1\n\n diff_characters = 0\n for i in range(len(firstString)):\n if firstString[i] != secondString[i]:\n diff_characters +=1\n \n return diff_characters but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\")\n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        print(a)\n        print(b)\n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n            print(c)\n    \nprint_fibonacci(10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num): \n    if num > 1: \n       for i in range(2,num): \n           if (num % i) == 0: \n               return False \n       return True \n    else: \n       return False\n\ndef compute_sum_primes(n):\n    sum = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            sum += i \n    return sum\n\nn = 100\nprint(\"The sum of all prime numbers between 1 and\", n, \"is\", compute_sum_primes(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_cost(price, discount, tax_rate):\n    discount_amount = price * (discount / 100.0)\n    total = price - discount_amount\n    tax = total * (tax_rate / 100.0)\n    final_cost = total + tax\n    return final_cost\n\nprice = 150\ndiscount = 20\ntax_rate = 0.1\nfinal_cost = calculate_cost(price, discount, tax_rate)\nprint(final_cost) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from itertools import combinations\nlist_of_nums = [4, 6, 2, 9, 7, 3]\n\n# Get the combinations\ncombo = combinations(list_of_nums, 3)\n\n# Iterate over the combinations\nmax_sum = 0\nmax_combo = None\n\nfor i in combo: \n    current_sum = sum(i)\n    if current_sum > max_sum:\n        max_sum = current_sum\n        max_combo = i\n\n# Print the result\nprint(\"The maximum sum is: \", max_sum)\nprint(\"The combination is: \", max_combo) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef arr_of_random_numbers(size):\n    arr = []\n    for i in range(size):\n        arr.append(random.randint(1, 100))\n    return arr\n\nsize = 10\narr = arr_of_random_numbers(size)\nprint(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_by_key(dict_list, key):\n    # Sort a list of dictionaries by the given key  \n    sorted_list = sorted(dict_list, key=lambda x: x[key])\n    return sorted_list\n \ndict_list = [{'first_name': 'John', 'last_name': 'Doe', 'age': 20}, {'first_name': 'Jane', 'last_name': 'Doe', 'age': 30}]\n \nresult = sort_by_key(dict_list, 'age')\nprint(result) but is not the same. just give one example and only return the code."}
