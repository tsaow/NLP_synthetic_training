{"prompt": "make some code that functions the same as the following code: <html>\n<head>\n    <title>Python Form Demo</title>\n</head>\n<body>\n    <form method=\"post\" action=\"/add\">\n        <input type=\"text\" name=\"num1\">\n        <input type=\"text\" name=\"num2\">\n        <input type=\"submit\" value=\"Calculate\">\n    </form>\n</body>\n</html>\n\n@app.route('/add', methods=['POST'])\ndef add():\n    num1 = int(request.form['num1'])\n    num2 = int(request.form['num2'])\n    result = num1 + num2\n    return \"The result of {} + {} is {}\".format(num1, num2, result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class KeyValuePairs:\n    def __init__(self):\n        self.data = dict()\n    \n    def set(self, key, value):\n        self.data[key] = value\n    \n    def get(self, key):\n        return self.data[key]\n    \n    def containsKey(self, key):\n        return key in self.data\n    \n    def containsValue(self, value):\n        for v in self.data.values():\n            if v == value:\n                return True\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def largest_string(str1, str2): \n    if len(str1) >= len(str2): \n        return str1 \n    else: \n        return str2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Program to convert Celsius to Fahrenheit\n\n#user input\nC = 32\n\n#Celsius to Fahrenheit conversion\nF = (C*9/5)+32\n\n#print the result\nprint('%0.2f degree Celsius is equal to %0.2f degree Fahrenheit' %(C, F)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count(list_data):\n    return sum(list_data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndictionary = {\n   \"name\": \"John\",\n   \"age\": 30,\n   \"car\": [\"Ford\", \"BMW\", \"Fiat\"]\n}\n\njson_data = json.dumps(dictionary)\nprint(json_data) // Output: {\"name\": \"John\", \"age\": 30, \"car\": [\"Ford\", \"BMW\", \"Fiat\"]} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sum = 0\nfor i in range(n):\n    sum += i but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_sum(a, b):\n   sum = a + b \n   return sum \n\nc = calculate_sum(2, 3)\nprint(\"The sum is\", c) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef random_int():\n    return random.randint(1, 10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \n\nX = np.array([[2, 3], \n     [1, 4]]) \n\nY = np.array([[5, 6], \n     [7, 8]])\n\nZ = X + Y \n\nprint(\"Matrix addition result:\") \nprint(Z) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findMaxLen(listA, listB):\n  lengthA = len(listA)\n  lengthB = len(listB) \n  \n  # Initialize left and right pointers \n  l, r = 0, 0\n  \n  max_len = 0 \n  \n  # While left and right pointer cross the other    \n  # maintain a maximum length\n  while l < lengthA and r < lengthB: \n      # If they both have same element \n      if listA[l] == listB[r]:\n          max_len = max(max_len, l + r + 1) \n          l += 1\n          r += 1\n      \n      # If listA's element is less, increment  \n      # listB pointer \n      elif listA[l] > listB[r]:\n          r += 1\n          \n      # If listA's element is more, increment  \n      # listA pointer\n      else:\n          l += 1   \n  return max_len but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num):\n   # check if num is a multiple of 2\n   if (num % 2 == 0):\n      return False\n \n   # if not, then just check the odds\n   for i in range(3, num//2, 2):\n      if num % i == 0:\n         return False\n \n   return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class PriorityQueue:\n\n    def __init__(self):\n        self.queue = []\n    \n    def is_empty(self):\n        return len(self.queue) == 0\n    \n    def insert(self, key):\n        self.queue.append(key)\n        self.queue.sort(reverse=True)\n    \n    def pop(self):\n        if not self.is_empty():\n            return self.queue.pop(0)\n        return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_average(arr): \n    sum = 0\n    \n    for i in range(len(arr)): \n        sum += arr[i] \n        \n    return sum/len(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(list):\n    return sorted(list, key=lambda x: len(x), reverse=True)\n\nlist = [\"cat\", \"dog\", \"elephant\", \"tiger\"]\nprint(sort_list(list))\n\n# Output: [\"elephant\", \"tiger\", \"dog\", \"cat\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # create the grid function\ndef createGrid(length, width): \n    grid = [[0 for x in range(width)] for y in range(length)] \n    return grid \n  \n# initialise the grid with cells \ndef initGrid(grid): \n    for i in range(len(grid)): \n        for j in range(len(grid[i])): \n            grid[i][j] = int(random.random()+.5) \n    return grid \n  \n# display the grid \ndef display(grid): \n    for i in range(len(grid)): \n        for j in range(len(grid[i])): \n            print(grid[i][j], \" \", end=\"\") \n        print() \n  \n# make each cell follow the game rules \ndef updateGrid(grid): \n    newGrid = [[0 for x in range(len(grid[0]))] for y in range(len(grid))] \n  \n    for i in range(len(grid)): \n        for j in range(len(grid[i])): \n            # calculate the current cell's neighbors \n            neighbors = 0\n            for k in range(-1, 2): \n                for l in range(-1, 2): \n                    if k == 0 and l == 0: \n                        continue\n                    elif (i+k >= 0 and i+k < len(grid) and \n                            j+l >= 0 and j+l < len(grid[i])): \n                        neighbors += grid[i+k][j+l] \n  \n            # rule 1 and rule 3 \n            if (grid[i][j] == 1 and (neighbors < 2 or neighbors > 3)): \n                newGrid[i][j] = 0\n            # rule 4 \n            elif (grid[i][j] == 0 and neighbors == 3): \n                newGrid[i][j] = 1\n            # rule 2 \n            else: \n                newGrid[i][j] = grid[i][j] \n    return newGrid \n\nsize = 10\ngrid = createGrid(size, size)\ngrid = initGrid(grid) \n  \n# display the initial grid \nprint(\"Initial Grid\") \ndisplay(grid) \n  \n# update the grid for 25 iterations \nfor i in range(25): \n    print(\"Iteration\", i+1) \n    grid = updateGrid(grid) \n    display(grid) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence = 'The quick brown fox jumps over the lazy dog'\n\n# Split the sentence into individual words\nwords = sentence.split(' ')\n\n# Create an empty dictionary\nword_count = {}\n\n# Count the number of times each word appears\nfor word in words:\n    if word in word_count:\n        word_count[word] += 1\n    else:\n        word_count[word] = 1\n\n# Print the results\nfor word in word_count:\n    print(\"{}: {}\".format(word, word_count[word])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(x):\n    if x == 0:\n        return 1\n    else:\n        return x * factorial(x-1)\n\nx = 7\n\nfactorial_of_x = factorial(x)\nprint(\"The factorial of {} is {}\".format(x, factorial_of_x)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: factors = [list_element for list_element in range(1,15+1) if 15%list_element == 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_by_freq(nums):\n    \"\"\"\n    A sort function to order a list of numbers by their frequency.\n\n    Parameters\n    ----------\n    nums : List\n        A list of numbers\n\n    Returns\n    -------\n    List\n        The given list of numbers sorted by their frequency\n    \"\"\"\n    freq_map = {}\n    for num in nums:\n        if num not in freq_map:\n            freq_map[num] = 0\n        freq_map[num] += 1\n\n    sorted_nums = sorted(freq_map, key=freq_map.get, reverse=True)\n    return sorted_nums but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef password_generator(length):\n   password_characters = string.ascii_letters + string.digits + string.punctuation\n   new_password = \"\".join(random.choice(password_characters) for i in range(length))\n   return new_password but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create a project\ndjango-admin startproject MyProject\n\n# Create an app\npython manage.py startapp MyApp\n\n# Create the 'User' model in 'models.py'\nfrom django.db import models\n\nclass User(models.Model):\n    \n    # User fields\n    name = models.CharField(max_length=255)\n    age = models.PositiveIntegerField()\n    \n    def __str__(self):\n        return self.name\n\n# Create the 'Post' model in 'models.py'\nclass Post(models.Model):\n    \n\t# Post fields\n    title = models.CharField(max_length=255)\n    content = models.TextField()\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    \n    def __str__(self):\n        return self.title\n\n# Register the models in 'admin.py'\nfrom django.contrib import admin\n\nfrom .models import User, Post\n\nadmin.site.register(User)\nadmin.site.register(Post) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(word1, word2):\n    list_word1 = sorted(list(word1))\n    list_word2 = sorted(list(word2))\n    \n    return list_word1 == list_word2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression \n\n# Load the dataset \ndf = pd.read_csv('data.csv')\n\n# Separate the target variable and input variables \nX = df.drop('SuccessProb', axis=1)\ny = df['SuccessProb']\n\n# Split data into train and test sets \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n#Build the logistic regression model \nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Make predictions \npredictions = model.predict_proba(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci_seq(n):\n    if n < 0:\n        raise ValueError(\"Index must be a positive integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        for i in range(2, n + 1):\n            c = a + b\n            a = b\n            b = c\n        return c\n\nfib_7 = fibonacci_seq(7)\nprint(fib_7) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\ndata = np.array(list(dictionary.values()),\n      dtype=[('name','U20'),('age','i4'),('nationality','U10')]\n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(unsorted_list): \n    n = len(unsorted_list) \n  \n    for i in range(n): \n        for j in range(0, n-i-1): \n  \n            if unsorted_list[j] > unsorted_list[j+1] : \n                unsorted_list[j], unsorted_list[j+1] = unsorted_list[j+1], unsorted_list[j] \n  \n    return unsorted_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\nfrom tensorflow.keras.datasets import mnist\n\n# Get train and test data\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\n# Reshape data\nx_train = x_train.reshape(60000, 784)\nx_test = x_test.reshape(10000, 784)\nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\n\n# Normalize data\nx_train /= 255\nx_test /= 255\n\n# Build model\nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Dense(128, activation='relu', input_shape=(784,)))\nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy',\n metrics=['accuracy'])\n\n# Train the model\nmodel.fit(x_train, y_train, epochs=10)\n\n# Evaluate model\naccuracy = model.evaluate(x_test, y_test)[1]\nprint('Accuracy of model:', accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(nums):\n    for i in range(len(nums)):\n        min_index = i\n        \n        for j in range(i+1, len(nums)):\n            if nums[min_index] > nums[j]:\n                min_index = j\n        \n        nums[i], nums[min_index] = nums[min_index], nums[i]\n        \n    return nums\n    \nprint(sort_list([3, 7, 2, 1, 19]))\n\n# Output: [1, 2, 3, 7, 19] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_common_substring(s1, s2):\n    dp = [[0 for _ in range(len(s2) + 1)] for _ in range(len(s1) + 1)]\n    longest_len = 0\n    longest_string = \"\"\n\n    for i in range(1, len(s1) + 1):\n        for j in range(1, len(s2) + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                if dp[i][j] > longest_len:\n                    longest_len = dp[i][j]\n                    longest_string = s1[i - longest_len:i]\n            else:\n                dp[i][j] = 0\n    return longest_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\nfrom flask import Flask, jsonify, request, abort\n\n# Initial setup of a Flask application\napp = Flask(__name__)\nconn = sqlite3.connect('movies.db')\n\n# SQL queries\n# 1 - Create the tables in Database\nsql_create_movies_table = \"\"\" CREATE TABLE IF NOT EXISTS movies (\n id integer PRIMARY KEY,\n title text NOT NULL\n); \"\"\"\n\nsql_create_actors_table = \"\"\"CREATE TABLE IF NOT EXISTS actors (\n id integer PRIMARY KEY,\n name text NOT NULL,\n movie_id integer NOT NULL,\n FOREIGN KEY (movie_id) REFERENCES movies (id)\n);\"\"\"\n\n# 2 - Create two functions to insert Movie and Actor information into the Database\ndef create_new_movie(title):\n with conn:\n cur = conn.cursor()\n cur.execute(\"INSERT INTO movies (title) VALUES (?)\", (title,))\n return cur.lastrowid\n\ndef create_new_actor(name, movie_id):\n with conn:\n cur = conn.cursor()\n cur.execute(\"INSERT INTO actors (name, movie_id) VALUES (?,?)\", (name, movie_id))\n return cur.lastrowid\n\n# 3 - Create a function to get a list of movies\ndef get_all_movies():\n cur = conn.cursor()\n cur.execute(\"SELECT * FROM movies\")\n rows = cur.fetchall()\n return rows\n\n# 4 - Create a function to get a list of actors for a given movie\ndef get_all_actors(movie_id):\n cur = conn.cursor()\n cur.execute(\"SELECT * FROM actors WHERE movie_id=?\", (movie_id))\n rows = cur.fetchall()\n return rows\n\n# 5 - Create two endpoints (POST and DELETE) to modify the actors of the movie\n@app.route('/movies/<int:movie_id>/actors', methods=['POST'])\ndef add_actor(movie_id):\n error = None\n if not request.json:\n abort(400)\n if 'name' not in request.json:\n abort(400)\n if 'movie_id' not in request.json:\n abort(400)\n\n name = request.json['name']\n movie_id = request.json['movie_id']\n \n try:\n actor_id = create_new_actor(name, movie_id)\n return jsonify({'actor_id': actor_id}), 201\n except:\n error = 'Error inserting actor into the database.'\n\n return jsonify({'error': error}), 500\n\n@app.route('/movies/<int:movie_id>/actors/<int:actor_id>', methods=['DELETE'])\ndef delete_actor(movie_id, actor_id):\n with conn:\n cur = conn.cursor()\n cur.execute(\"DELETE FROM actors WHERE id=?\", (actor_id,))\n rows = cur.fetchall()\n return jsonify({'result': True})\n\nif __name__ == '__main__':\n # Create tables\n conn.execute(sql_create_movies_table)\n conn.execute(sql_create_actors_table)\n # Run the applications\n app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * 5 / 9\n    return celsius\n\nfahrenheit = 32\ncelsius = convert_to_celsius(fahrenheit)\nprint(f\"Fahrenheit: {fahrenheit}, Celsius: {celsius}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt \ndata = [5, 10, 15, 20, 25, 30, 35, 40, 45]\nplt.plot(data) \n\n# formatting the text\nplt.title('Data Visualisation') \nplt.xlabel('Data Points') \nplt.ylabel('Value') \n\n# function to show the plot \nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def caesar_encrypt(string, encryption_key):\n    encrypted_string = \"\"\n    for char in string:\n        # convert char to ASCII code\n        ascii_code = ord(char)\n        # shift the char by given encryption_key\n        shifted_char = ascii_code + encryption_key\n        # convert shifted_char to its character form\n        encrypted_char = chr(shifted_char)\n        # append the encrypted_char to encrypted_string\n        encrypted_string += encrypted_char\n\n    return encrypted_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num = 15\nwhile num >= 10:\n    print(num)\n    num -= 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: if a < b:\n    print(\"A is less than B\")\nelse:\n    print(\"A is not less than B\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -*- coding: utf-8 -*-\n\n# 1st-run initialisation\n\n# Set settings.base.prepopulate to 0 in Production\n# (to save 1x DAL hit every page).\npop_list = settings.get_base_prepopulate()\nif pop_list == 0:\n    pop_list = []\nelse:\n    table = db[auth.settings.table_group_name]\n    # The query used here takes 2/3 the time of .count().\n    if db(table.id > 0).select(table.id, limitby=(0, 1)).first():\n        pop_list = []\n    if not isinstance(pop_list, (list, tuple)):\n        pop_list = [pop_list]\n\nif len(pop_list) > 0:\n\n    # =========================================================================\n    # Populate default roles and permissions\n    #\n\n    # Allow debug\n    import sys\n\n    print >> sys.stdout, \"Please be patient whilst the database is populated\"\n\n    # Shortcuts\n    acl = auth.permission\n    sysroles = auth.S3_SYSTEM_ROLES\n    create_role = auth.s3_create_role\n    #update_acls = auth.s3_update_acls\n\n    # Do not remove or change order of these 5 definitions (System Roles):\n    create_role(\"Administrator\",\n                \"System Administrator - can access & make changes to any data\",\n                uid=sysroles.ADMIN,\n                system=True, protected=True)\n\n    create_role(\"Authenticated\",\n                \"Authenticated - all logged-in users\",\n                uid=sysroles.AUTHENTICATED,\n                protected=True)\n\n    create_role(\"Anonymous\",\n                \"Unauthenticated users\",\n                # Allow unauthenticated users to view the list of organisations\n                # so they can select an organisation when registering\n                dict(t=\"org_organisation\", uacl=acl.READ, entity=\"any\"),\n                # Allow unauthenticated users to see the list of sites for an\n                # org when registering\n                dict(c=\"org\", f=\"sites_for_org\", uacl=acl.READ, entity=\"any\"),\n                uid=sysroles.ANONYMOUS,\n                protected=True)\n\n    # Primarily for Security Policy 2\n    create_role(\"Editor\",\n                \"Editor - can access & make changes to any unprotected data\",\n                uid=sysroles.EDITOR,\n                system=True, protected=True)\n\n    # MapAdmin\n    map_admin = create_role(\"MapAdmin\",\n                            \"MapAdmin - allowed access to edit the MapService Catalogue\",\n                            dict(c=\"gis\", uacl=acl.ALL, oacl=acl.ALL),\n                            dict(c=\"gis\", f=\"location\", uacl=acl.ALL, oacl=acl.ALL),\n                            uid=sysroles.MAP_ADMIN,\n                            system=True, protected=True)\n\n    # OrgAdmin (policies 6, 7 and 8)\n    create_role(\"OrgAdmin\",\n                \"OrgAdmin - allowed to manage user roles for entity realms\",\n                uid=sysroles.ORG_ADMIN,\n                system=True, protected=True)\n\n    # Enable shortcuts (needed by default.py)\n    system_roles = auth.get_system_roles()\n    ADMIN = system_roles.ADMIN\n    AUTHENTICATED = system_roles.AUTHENTICATED\n    ANONYMOUS = system_roles.ANONYMOUS\n    EDITOR = system_roles.EDITOR\n    MAP_ADMIN = system_roles.MAP_ADMIN\n    ORG_ADMIN = system_roles.ORG_ADMIN\n\n    # =========================================================================\n    # Configure Scheduled Tasks\n    #\n\n    has_module = settings.has_module\n    if has_module(\"msg\"):\n\n        # Send Messages from Outbox\n        # SMS every minute\n        s3task.schedule_task(\"msg_process_outbox\",\n                             vars={\"contact_method\":\"SMS\"},\n                             period=120,  # seconds\n                             timeout=120, # seconds\n                             repeats=0    # unlimited\n                             )\n        # Emails every 5 minutes\n        s3task.schedule_task(\"msg_process_outbox\",\n                             vars={\"contact_method\":\"EMAIL\"},\n                             period=300,  # seconds\n                             timeout=300, # seconds\n                             repeats=0    # unlimited\n                             )\n        # Tweets every minute\n        #s3task.schedule_task(\"msg_process_outbox\",\n        #                     vars={\"contact_method\":\"TWITTER\"},\n        #                     period=120,  # seconds\n        #                     timeout=120, # seconds\n        #                     repeats=0    # unlimited\n        #                     )\n\n        # Subscription notifications\n        s3task.schedule_task(\"notify_check_subscriptions\",\n                             period=300,\n                             timeout=300,\n                             repeats=0)\n\n    # Daily maintenance\n    s3task.schedule_task(\"maintenance\",\n                         vars={\"period\":\"daily\"},\n                         period=86400, # seconds, so 1/day\n                         timeout=600,  # seconds\n                         repeats=0     # unlimited\n                         )\n\n    # =========================================================================\n    # Import PrePopulate data\n    #\n\n    # Override authorization\n    auth.override = True\n\n    # Load all Models to ensure all DB tables present\n    s3db.load_all_models()\n\n    # Shortcuts\n    path_join = os.path.join\n    request_folder = request.folder\n\n    if settings.get_auth_opt_in_to_email():\n        table = db.pr_group\n        for team in settings.get_auth_opt_in_team_list():\n            table.insert(name = team, group_type = 5)\n\n    # Synchronisation\n    db.sync_config.insert() # Defaults are fine\n\n    # Person Registry\n    tablename = \"pr_person\"\n    # Add extra indexes on search fields\n    # Should work for our 3 supported databases: sqlite, MySQL & PostgreSQL\n    field = \"first_name\"\n    db.executesql(\"CREATE INDEX %s__idx on %s(%s);\" % (field, tablename, field))\n    field = \"middle_name\"\n    db.executesql(\"CREATE INDEX %s__idx on %s(%s);\" % (field, tablename, field))\n    field = \"last_name\"\n    db.executesql(\"CREATE INDEX %s__idx on %s(%s);\" % (field, tablename, field))\n\n    # GIS\n    # Add extra index on search field\n    # Should work for our 3 supported databases: sqlite, MySQL & PostgreSQL\n    tablename = \"gis_location\"\n    field = \"name\"\n    db.executesql(\"CREATE INDEX %s__idx on %s(%s);\" % (field, tablename, field))\n\n    # Messaging Module\n    if has_module(\"msg\"):\n        update_super = s3db.update_super\n        # To read inbound email, set username (email address), password, etc.\n        # here. Insert multiple records for multiple email sources.\n        table = db.msg_email_channel\n        id = table.insert(server = \"imap.gmail.com\",\n                          protocol = \"imap\",\n                          use_ssl = True,\n                          port = 993,\n                          username = \"example-username\",\n                          password = \"password\",\n                          delete_from_server = False\n                          )\n        update_super(table, dict(id=id))\n        # Need entries for the Settings/1/Update URLs to work\n        table = db.msg_sms_outbound_gateway\n        id = table.insert(outgoing_sms_handler = \"WEB_API\")\n        update_super(table, dict(id=id))\n        table = db.msg_sms_modem_channel\n        id = table.insert(modem_baud = 115200)\n        update_super(table, dict(id=id))\n        table = db.msg_sms_webapi_channel\n        id = table.insert(to_variable = \"to\")\n        update_super(table, dict(id=id))\n        table = db.msg_sms_smtp_channel\n        id = table.insert(address=\"changeme\")\n        update_super(table, dict(id=id))\n        table = db.msg_tropo_channel\n        id = table.insert(token_messaging = \"\")\n        update_super(table, dict(id=id))\n        table = db.msg_twitter_channel\n        id = table.insert(enabled = False)\n        update_super(table, dict(id=id))\n\n    # Budget Module\n    if has_module(\"budget\"):\n        db.budget_parameter.insert() # Defaults are fine\n\n    # Climate Module\n    if has_module(\"climate\"):\n        s3db.climate_first_run()\n\n    # CAP module\n    if has_module(\"cap\"):\n        db.cap_alert.insert(template_title=\"Default\", is_template=True)\n\n    # Incident Reporting System\n    if has_module(\"irs\"):\n        # Categories visible to ends-users by default\n        table = db.irs_icategory\n        table.insert(code = \"flood\")\n        table.insert(code = \"geophysical.landslide\")\n        table.insert(code = \"roadway.bridgeClosure\")\n        table.insert(code = \"roadway.roadwayClosure\")\n        table.insert(code = \"other.buildingCollapsed\")\n        table.insert(code = \"other.peopleTrapped\")\n        table.insert(code = \"other.powerFailure\")\n\n    # Supply Module\n    if has_module(\"supply\"):\n        db.supply_catalog.insert(name = settings.get_supply_catalog_default())\n\n    # Ensure DB population committed when running through shell\n    db.commit()\n\n    # =========================================================================\n    # PrePopulate import (from CSV)\n    #\n\n    # Create the bulk Importer object\n    bi = s3base.S3BulkImporter()\n\n    s3.import_role = bi.import_role\n    s3.import_user = bi.import_user\n    s3.import_image = bi.import_image\n    s3.import_remote_csv = bi.import_remote_csv\n\n    # Relax strict email-matching rule for import updates of person records\n    email_required = settings.get_pr_import_update_requires_email()\n    settings.pr.import_update_requires_email = False\n\n    # Additional settings for user table imports:\n    s3db.configure(\"auth_user\",\n                   onaccept = lambda form: auth.s3_approve_user(form.vars))\n    s3db.add_components(\"auth_user\", auth_membership=\"user_id\")\n\n    # Flag that Assets are being imported, not synced\n    s3.asset_import = True\n\n    # Allow population via shell scripts\n    if not request.env.request_method:\n        request.env.request_method = \"GET\"\n\n    grandTotalStart = datetime.datetime.now()\n    for pop_setting in pop_list:\n        start = datetime.datetime.now()\n        # Clear Tasklist\n        bi.tasks = []\n        # Import data specific to the prepopulate setting\n        if pop_setting == 1:\n            # Populate with the default data\n            path = path_join(request_folder,\n                             \"private\",\n                             \"templates\",\n                             \"default\")\n            bi.perform_tasks(path)\n        else:\n            path = path_join(request_folder,\n                             \"private\",\n                             \"templates\",\n                             pop_setting)\n            if os.path.exists(path):\n                bi.perform_tasks(path)\n            else:\n                print >> sys.stderr, \"Unable to install data %s no valid directory found\" % pop_setting\n\n        grandTotalEnd = datetime.datetime.now()\n        duration = grandTotalEnd - grandTotalStart\n        try:\n            # Python 2.7\n            duration = '{:.2f}'.format(duration.total_seconds()/60)\n            print >> sys.stdout, \"Pre-populate task completed in %s mins\" % duration\n        except AttributeError:\n            # older Python\n            print >> sys.stdout, \"Pre-populate task completed in %s\" % duration\n        bi.resultList = []\n    for errorLine in bi.errorList:\n        try:\n            print >> sys.stderr, errorLine\n        except:\n            s3_unicode = s3base.s3_unicode\n            _errorLine = \"\"\n            for i in range(0, len(errorLine)):\n                try:\n                    _errorLine += s3_unicode(errorline[i])\n                except:\n                    pass\n            print >> sys.stderr, _errorLine\n\n    # Restore setting for strict email-matching\n    settings.pr.import_update_requires_email = email_required\n\n    # Restore Auth\n    auth.override = False\n\n    # Update Location Tree (disabled during prepop)\n    start = datetime.datetime.now()\n    gis.update_location_tree()\n    end = datetime.datetime.now()\n    print >> sys.stdout, \"Location Tree update completed in %s\" % (end - start)\n\n    # Countries are only editable by MapAdmin\n    db(db.gis_location.level == \"L0\").update(owned_by_group=map_admin)\n\n    if has_module(\"stats\"):\n        # Populate stats_demographic_aggregate (disabled during prepop)\n        # - needs to be done after locations\n        start = datetime.datetime.now()\n        s3db.stats_demographic_rebuild_all_aggregates()\n        end = datetime.datetime.now()\n        print >> sys.stdout, \"Demographic data aggregation completed in %s\" % (end - start)\n\n    if has_module(\"vulnerability\"):\n        # Populate vulnerability_aggregate (disabled during prepop)\n        # - needs to be done after locations\n        start = datetime.datetime.now()\n        s3db.vulnerability_rebuild_all_aggregates()\n        end = datetime.datetime.now()\n        print >> sys.stdout, \"Vulnerability data aggregation completed in %s\" % (end - start)\n\n    grandTotalEnd = datetime.datetime.now()\n    duration = grandTotalEnd - grandTotalStart\n    try:\n        # Python 2.7\n        duration = '{:.2f}'.format(duration.total_seconds()/60)\n        print >> sys.stdout, \"Pre-populate completed in %s mins\" % duration\n    except AttributeError:\n        # older Python\n        print >> sys.stdout, \"Pre-populate completed in %s\" % duration\n\n    # Restore view\n    response.view = \"default/index.html\"\n\n# END =========================================================================\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_schedule(working_hours, tasks):\n    start = working_hours[0]\n    end = working_hours[1]\n    time = start\n\n    print(\"| Tasks | Start | End | Duration |\")\n    print(\"| ----- | ----- | --- | -------- |\")\n\n    for task in tasks:\n        task_name, duration = task\n        time_start = time\n        time_end = time + duration\n        if time_end > end:\n            print(\"Can not finish all tasks within given working hours\")\n            break\n        else:\n            print(\"| {0} | {1} | {2} | {3} |\".format(task_name, time_start, time_end, duration))\n            time = time + duration\n\nworking_hours = (9, 17)\ntasks = [(\"Task 1\", 2), (\"Task 2\", 3), (\"Task 3\", 4)]\nprint_schedule(working_hours, tasks) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Message(object):\n    def __init__(self,subject, sender, receiver, body):\n        self.subject = subject\n        self.sender = sender\n        self.receiver = receiver\n        self.body = body\n\nclass MessageStore(object):\n    def __init__(self, messages):\n        self.messages = messages\n        self.indexes = {}\n\n    def addMessage(self,message):\n        message_id = len(self.messages) + 1\n        self.messages.append(message)\n        self.indexes[message.subject] = message_id\n\n    def getMessage(self,message_id):\n        if message_id in self.indexes.values():\n            return self.messages[message_id - 1]  # Array index is 1 lower than message_id\n        else:\n            return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class HashTable:\n    def __init__(self):\n        self.table = {}\n\n    def put(self, key, value):\n        # Get the hash for the given key\n        hash_value = self._hash(key)\n        # If the hash value is not in the table, create an empty list\n        if hash_value not in self.table:\n            self.table[hash_value] = []\n        # Append the value to the list\n        self.table[hash_value].append((key, value))\n\n    def get(self, key):\n        # Get the hash for the given key\n        hash_value = self._hash(key)\n        # If the hash is not in the table, return None\n        if hash_value not in self.table:\n            return None\n        # Search the list of (key, value) pairs for a matching key\n        for k, v in self.table[hash_value]:\n            if key == k:\n                return v\n        # If no matching key is found, return None\n        return None\n\n    def _hash(self, key):\n        # Generate a simple hash of the given key\n        return hash(key) % 1000 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, jsonify, request\nfrom flask_pymongo import PyMongo\n\napp = Flask(name)\nmongo = PyMongo(app)\n \n@app.route('/products', methods=['POST'])\ndef add_product():\n data = request.get_json()\n mongo.db.products.insert_one(data)\n return jsonify({'message': 'Product added successfully!'})\n \n@app.route('/products/int:pid', methods=['GET'])\ndef get_product(pid):\n product = mongo.db.products.find_one({'pid': pid})\n return jsonify(product) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_unique_strings(strings):\n \n    unique_strings = []\n    for s in strings:\n        if s not in unique_strings:\n            unique_strings.append(s)\n \n    return unique_strings but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef validate_email(address):\n    regex = '^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'\n    if re.search(regex, address):\n        return True\n    else:\n        return False\n\ndef main():\n    address = input('Enter email address: ')\n    if validate_email(address):\n        print(\"Valid email address\")\n    else:\n        print(\"Invalid email address!\")\n\nmain() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: user_input = input('Please enter anything: ')\n\nprint('The type of user input is:', type(user_input)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create instances of each class\ncar1 = Car('Toyota', 'Camry', '2018')\ndog1 = Dog('Labrador', 'Max')\n\n# Print attributes and methods\nprint(\"The car is a {} {} manufactured in {}\".format(car1.make, car1.model, car1.year))\nprint(\"The dog is a {} named {}\".format(dog1.breed, dog1.name))\n\n# Print the instance methods of each class\nprint(\"The car class has these methods: \", dir(car1))\nprint(\"The dog class has these methods: \", dir(dog1)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: <html>\n<head>\n  <title>Shortest Path Finder</title>\n</head>\n<body>\n  <form method=\"post\" action=\"pathFinder.py\">\n    <input type=\"text\" name=\"source\" placeholder=\"Source City\" />\n    <input type=\"text\" name=\"destination\" placeholder=\"Destination City\" />\n    <input type=\"submit\" value=\"Get Shortest Path\" />\n  </form>\n</body>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\n\ndate_info = datetime.datetime.today()\n\nday_name = date_info.strftime(\"%A\")\nmonth_name = date_info.strftime(\"%B\")\ndate_num = date_info.strftime(\"%-d\")\nyear_num = date_info.strftime(\"%Y\")\n\nprint(f\"{day_name}, {month_name} {date_num}th, {year_num}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply_matrices(m1, m2):\n if len(m1[0]) != len(m2):\n raise ValueError('The matrices cannot be multiplied.')\n\n # Create the result matrix\n # Dimensions would be m1 rows x m2 columns\n result = [[0 for col in range(len(m2[0]))] for row in range(len(m1))]\n\n for i in range(len(m1)):\n # Iterate through rows of m1\n for j in range(len(m2[0])):\n # Iterate through columns of m2\n for k in range(len(m2)):\n result[i][j] += m1[i][k] * m2[k][j]\n return result\n\n# Test\nm1 = [[1, 2], [3, 4]]\nm2 = [[2, 0], [1, 2]]\n\nresult = multiply_matrices(m1, m2)\nfor row in result:\n print(row)\n\n# Output\n# [4, 4]\n# [10, 8] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_strings( string1, string2 ):\n    s1, s2 = set(string1), set(string2)\n    intersection = s1.intersection(s2)\n\n    return (len(intersection) * 100) / len(s1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\n# Get the input list\nlist = [1, 3, 5, 3, 6, 2, 4, 6, 8, 4]\n\n# Use Counter library to get a dictionary of the top 5 items\ntop_five = Counter(list).most_common(5)\n\n# Print the top five items\nprint(\"Top five items in the list:\")\nfor key, val in top_five:\n    print(key, \":\", val, \"occurrences\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def median(arr):\n    arr.sort()\n    if len(arr) % 2 != 0:\n        return arr[int(len(arr)/2)]\n    else:\n        return (arr[int(len(arr)/2)] + arr[int(len(arr)/2)-1]) / 2\n\nmedianValue = median(arr)\nprint(medianValue) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_palindrome(string):\n  reversed_string = string[::-1]\n  if string == reversed_string:\n    return True\n  else:\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sortedTuples = sorted(tuples, key = lambda x: x[1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n  \n# Random password generator \ndef randomString(stringLength=8):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(stringLength))\n  \nprint (\"Random Password is:\", randomString()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.datasets import load_iris\n\n# load data\niris = load_iris()\nX = iris.data\ny = iris.target\n\n# split data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)\n\n# Training\ndtree_model = DecisionTreeClassifier(max_depth=2).fit(X_train, y_train)\n\n# Testing\ndtree_predictions = dtree_model.predict(X_test)\n\n# Checking accuracy\nprint(\"Accuracy:\",np.mean(dtree_predictions==y_test)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: even_nums_sum = [x + y for x in [1, 2, 3, 4] for y in [9, 8, 7, 6] if x % 2 == 0 and y % 2 == 0]\nprint(sum(even_nums_sum)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(a, b):\n    if a > b:\n        return a\n    else:\n        return b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def divisible_by_seven(number_list):\n    for i in number_list:\n        if i % 7 == 0:\n            print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n# Create a SentimentIntensityAnalzyer\nanalyzer = SentimentIntensityAnalyzer()\n \n# Calculate scores\nscores = analyzer.polarity_scores(text)\n\n# Print scores\nprint(scores) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os\nfrom collections import Counter\nfrom nltk import word_tokenize\n\n# Specify the directory containing the files\ndirectory = 'articles_folder'\n\n# Initialize a Counter object\nword_counts = Counter()\n\n# Iterate through all the files in the directory\nfor filename in os.listdir(directory):\n  if filename.endswith('.txt'):\n    with open(os.path.join(directory, filename)) as f:\n      for line in f:\n        tokens = word_tokenize(line)\n        word_counts.update(tokens)\n\n# Print the most common words\nfor word, count in word_counts.most_common(20):\n  print(f'{word}: {count}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortByLength(strings):\n    return sorted(strings, key=len)\n\nstrings = ['cat', 'dog', 'goat', 'tiger', 'bird']\n\nprint(sortByLength(strings)) # Output: ['cat', 'dog', 'goat', 'bird', 'tiger'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseString(string):\n    reversed = \"\" \n    for character in string:\n        reversed = character + reversed\n    return reversed but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def CountLetterOccurrences(str, letter): \n    return str.count(letter) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Function to print the tic tac toe board\ndef print_board(board):\n for i in range(3):\n for j in range(3):\n print(board[i][j], end=\" \")\n print()\n print()\n\n# Function to generate a random tic tac toe board\ndef generate_board():\n board = [[0, 0, 0],\n [0, 0, 0],\n [0, 0, 0]]\n\n for i in range(3):\n for j in range(3):\n board[i][j] = random.choice([\"X\", \"O\"]) \n \n print_board(board)\n\ngenerate_board() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Circle:\n def __init__(self, radius):\n self.radius = radius\n \n def area(self):\n return 3.14 * (self.radius ** 2)\n \n def circumference(self):\n return 2 * 3.14 * self.radius but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import hashlib\n\ndef get_hash(string):\n    sha1 = hashlib.sha1()\n    sha1.update(string.encode('utf-8'))\n    return sha1.hexdigest()\n\nprint(get_hash(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_element(arr):\n    s = 0\n    for sub_list in arr:\n        for element in sub_list:\n            s += element\n    return s\n\narr = [[1, 2], [3, 4], [5, 6]]\ntotal = sum_of_element(arr)\nprint(total) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Parameters for the genetic algorithm\nnum_generations = 50   # Number of generations\npopulation_size = 20  # Population size\n\n# Training data\nX = np.array([[feature_1], [feature_2]]).T\ny = np.array([[label]]).T\n\n# Function to evaluate the fitness of a given individual\ndef get_fitness(individual):\n lin_ model = LinearRegression()\n model.fit(X, y)\n y_pred = model.predict(X)\n error = mean_squared_error(y_true, y_pred)\n return error\n\n# Function to generate a single member of the population\ndef generate_individual():\n individual = [random.uniform(-1, 1) for x in range(2)]\n return individual\n\n# Function to generate a whole population\ndef generate_population():\n population = [generate_individual() for x in range(population_size)]\n return population \n\n# Main loop of the genetic algorithm\npopulation = generate_population()\nfor generation in range(num_generations):\n new_population = []\n for individual in population:\n  # Evaluate the fitness of the individual\n  fitness = get_fitness(individual)\n  # Select the two best individuals based on their fitness\n  mates = selection(population, fitness)\n  # Crossover\n  new_individual = crossover(mates)\n  # Mutation\n  new_individual = mutation(new_individual)\n  # Add this individual to the new population\n  new_population.append(new_individual)\n # Set the population to the new one\n population = new_population\n\n# Print the optimal solution\noptimal_solution = population[0] # Best individual is the first one\nprint(\"Optimal solution: \", optimal_solution) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def concatenate_strings(string1, string2):\n    return string1 + string2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(n):\n    n = str(n)\n    return n == n[::-1]\n\nprint(is_palindrome(\"middle\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node: \n    def __init__(self, data):\n        self.data = data\n        self.next = None\n  \n\nclass LinkedList: \n    def __init__(self):\n        self.head = None\n  \n    # Function to insert a new node at the beginning\n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head \n        self.head = new_node \n  \n\n# Example \nllist = LinkedList() \nnode_values = [1, 2, 3, 4, 5]\nfor node in node_values:\n    llist.push(node) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printFibonacci(n):\n    if n<0:\n        print('Incorrect input')\n    elif n==0:\n        print(0)\n    elif n==1:\n        print(0,1)\n    else:\n        a=0\n        b=1\n        print(a)\n        print(b)\n        for i in range(2,n):\n            c=a+b\n            a=b\n            b=c\n            print(c) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [1, 2, 3, 4, 5]\n\ndef calculate(arr):\n    return sum(arr)\n\ndef main():\n    print(calculate(arr))\n\nif __name__ == '__main__':\n    main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        return result\n\nnum = 7\nprint('factorial of {} is {}'.format(num, factorial(num))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nfor i in range(4):\n num = random.randint(0,9)\n print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nprime_nums = []\n\nfor i in range(2, 1000):  \n    if is_prime(i):\n        prime_nums.append(i)\n        if len(prime_nums) == 10:\n            break\n\nfor item in prime_nums:\n    print(item) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# Read in the dataset\ndf = pd.read_csv('data.csv')\n\n# Specify the feature and target columns\nfeatures = ['age', 'gender', 'hours_per_week',\n            'marital_status', 'education']\ntarget = 'income'\n\n# Create the random forest model\nrf = RandomForestClassifier(n_estimators=100)\nrf.fit(df[features], df[target]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_spaces(s,replace_with):\n    return s.replace(\" \",replace_with)\n\ns = \"This is a test string\"\nreplace_with = \"X\"\n\nprint(replace_spaces(s,replace_with)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef generate_question(sentence):\n tokens = re.findall('\\w+', sentence)\n if tokens[0] == 'The':\n  question = 'What is' + ' ' + ' '.join(tokens[1:]) + '?'\n else:\n  question = 'What is the' + ' ' + ' '.join(tokens) + '?'\n  \n return question but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\ndef call_web_service():\n    API_ENDPOINT = \"http://example.com/api/v1\"\n\n    # Make a post request to call the web service\n    r = requests.post(url= API_ENDPOINT)\n\n# Create webhook\nwebhook = call_web_service('http://example.com/callback')\n\n# Use the webhook to call the web service\nrequests.post(url = webhook) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: total = 0\n\nfor i in range(1,1000):\n    if i % 3 == 0 or i % 5 == 0:\n        total += i\n\nprint(total) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\nfrom sklearn import tree\n\n# Load the dataset\ndata = pd.read_csv(\"data.csv\")\n\n# Create target variable\ntarget = data[\"target\"]\n\n# Create feature variables\nfeatures = data.drop(columns = [\"target\"])\n\n# Create decision tree model\nmodel = tree.DecisionTreeClassifier()\nmodel.fit(features, target) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def area_of_triangle(base, height):\n    \"\"\"Compute the area of a triangle in Python\n    \n    Parameters\n    --------------\n    base: float\n        The length of the triangle's base\n    height: float\n        The measure of the triangle's height\n\n    Returns\n    --------------\n    float\n        The area of the triangle\n    \"\"\"\n    return 0.5 * base * height but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n  if n == 0:\n    return 0\n  elif n == 1:\n    return 1\n  else:\n    return fibonacci(n-1) + fibonacci(n-2)\n\nfor i in range(10):\n  print(fibonacci(i)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers = [1, 2, 3, 4, 5, 6]\n\nfor x in reversed(numbers):\n    print(x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def decToBin(n):\n    binString = \"\"\n    while n > 0:\n        binary = n % 2\n        binString = str(binary) + binString\n        n = n//2\n \n    return binString\n  \n# Driver Code \nn = int(input(\"Enter a number: \"))\n  \nresult = decToBin(n)\nprint(\"The binary representation is \", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_odd_numbers(n):\n    result = 0\n    for i in range(n):\n        if i % 2 != 0:\n            result += i\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def area(b, h):\n    return 0.5 * b * h but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_int(x):\n    if x < 0:\n        return 'negative'\n    elif x == 0: \n        return 'zero'\n    elif x > 0:\n        return 'positive' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: <!DOCTYPE html>\n<html>\n<head>\n    <title>Input Page</title>\n</head>\n<body>\n    <h1>Input Page</h1>\n    <form action=\"script.py\" method=\"POST\">\n      <label>Enter your input: <input type=\"text\" name=\"user_input\" size=\"50\"></label>\n      <input type=\"submit\" text=\"Submit\">\n    </form>\n</body>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return i\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def create_dictionary(my_list):\n    res = {num: num * 2 for num in my_list}\n    return res\n\n# run the code\nmy_list = [3, 5, 7]\n\nres = create_dictionary(my_list)\nprint('The dictionary is ' + str(res)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import csv\n\ndef read_csv(filename):\n    with open(filename, 'r') as csv_file:\n        csv_reader = csv.reader(csv_file, delimiter=',')\n        next(csv_reader) # Skip the header\n\n        for row in csv_reader:\n            yield row\n\ndef write_csv(filename, rows):\n    with open(filename, 'w') as csv_file:\n        csv_writer = csv.writer(csv_file, delimiter=',', quoting=csv.QUOTE_MINIMAL)\n        csv_writer.writerow(['A', 'C'])\n        for row in rows:\n            csv_writer.writerow([row[0], row[2]])\n\n# Main\nif __name__ == \"__main__\":\n    filename = 'myfile.csv'\n    rows = read_csv(filename)\n    write_csv('newfile.csv', rows) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_number(x, y):\n    return sum(range(x, y)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(type(variable)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def split_into_words(text):\n    \"\"\"\n    Splits a string into a list of words\n    \"\"\"\n    # Split the text on whitespace\n    return text.split() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to return average\ndef average(lst):\n    \n    # Calculate sum of list\n    sum_num = 0\n    for x in lst:\n        sum_num += x\n        \n    # Return average \n    return sum_num / len(lst)\n\n# Sample List\nlst = [1, 2, 3, 4, 5, 6, 7]\n\n# Calling average function\nprint(average(lst)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n):\n a = 0\n b = 1\n if n < 0:\n  print(\"Incorrect input\")\n elif n == 0:\n  return a\n elif n == 1:\n  return b\n else:\n  for i in range(2,n):\n   c = a + b\n   a = b\n   b = c\n  return b\n\nprint(Fibonacci(5)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def last_elements(lst, n):\n    return lst[-n:] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\n# Define the automata\ncell_size = 10\nauto = np.zeros(cell_size)\n\n# Create the display\ndef display_automata(cells):\n for cell in cells:\n if cell == 0:\n print('\u2588', end=\"\")\n else:\n print(' ', end='')\n print()\n\n# Iterate the automata\nfor i in range(100):\n temp_auto = np.copy(auto)\n for j in range(cell_size):\n if j == 0:\n value = temp_auto[-1] ^ temp_auto[j] ^ temp_auto[j + 1]\n elif j == cell_size - 1:\n value = temp_auto[j-1] ^ temp_auto[j] ^ temp_auto[0]\n else:\n value = temp_auto[j - 1] ^ temp_auto[j] ^ temp_auto[j + 1]\n auto[j] = value\n display_automata(auto) but is not the same. just give one example and only return the code."}
