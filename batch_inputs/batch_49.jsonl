{"prompt": "make some code that functions the same as the following code: import re\n\n# Input string\nstring = \"My age is 25 and my friend's age is 30.\"\n\n# Find all the numbers in the string\nnumbers = re.findall(\"\\d+\", string)\n\n# Calculate the sum\nsum = 0\nfor number in numbers:\n sum += int(number)\n\n# Print the sum\nprint(\"The sum of the numbers is:\", sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mostCommonElement(list):\n    element_count = {}\n    for i in list:\n        if i in element_count:\n            element_count[i] += 1\n        else:\n            element_count[i] = 1 \n    \n    max_element = None\n    max_num = 0\n    for i in element_count:\n        if element_count[i] > max_num:\n            max_element = i\n            max_num = element_count[i]\n    \n    return max_element but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_palindrome(string):\n  rev_str = string[::-1]\n  if rev_str == string:\n    return \"The string is a palindrome\"\n  return \"The string is not a palindrome\"\n\nprint(check_palindrome(\"madam\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Developer : Hamdy Abou El Anein\n\nimport os\nimport sys\nfrom easygui import *\n\nprint(\"IMPORTANT\\n\\nThis software work only if google_speech is installed on the system. To install it go to this link please : https://pypi.python.org/pypi/google_speech/\\n\\n\")\n\n\ndef language():\n\n    global lang\n\n    msg = \"What's the language do you want to make PySpeaking speak ?\"\n    title = \"PySpeaking-GUI\"\n    choices = [\"English\", \"French\", \"German\", \"Spanish\",\"Japanese\",\"Chinese\",\"Italian\",\"Arabic\", \"Russian\"]\n    choice = choicebox(msg, title, choices)\n\n    if choice == \"English\":\n        lang = ' en '\n        textToSpeak()\n    elif choice == \"French\":\n        lang = ' fr '\n        textToSpeak()\n    elif choice == \"German\":\n        lang = ' de '\n        textToSpeak()\n    elif choice == \"Spanish\":\n        lang = ' es '\n        textToSpeak()\n    elif choice == \"Japanese\":\n        lang = ' ja '\n        textToSpeak()\n    elif choice == \"Chinese\":\n        lang = ' zh-CN '\n        textToSpeak()\n    elif choice == \"Italian\":\n        lang = ' it '\n        textToSpeak()\n    elif choice == \"Arabic\":\n        lang = ' ar '\n        textToSpeak()\n    elif choice == \"Russian\":\n        lang = ' ru '\n        textToSpeak()\n    else:\n        sys.exit(0)\n\ndef textToSpeak():\n    global fieldValues\n\n    msg = \"Enter the text to speak\"\n    title = \"Enter the text to speak\"\n    fieldNames = [\"Text to speak\"]\n    fieldValues = []\n    fieldValues = multenterbox(msg, title, fieldNames)\n    fieldValues[0]\n    speak()\n\ndef speak():\n    global lang, fieldValues\n\n    textValue = \"google_speech -l\" +str(lang) +str(\" \\\"\")+str(fieldValues[0].replace(\"'\",\"\\'\"))+str(\"\\\"\")\n    os.system(textValue)\n\nlanguage() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Node class \nclass Node: \n \n    # Function to initialise the node object\n    def __init__(self, data): \n        self.data = data  # Assign data \n        self.next = None  # Initialize next as null \n  \n  \n# Linked List class \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n  \n    # This function should reverse linked list and return \n    # head of the modified linked list \n    def reverse(self): \n        prev = None\n        current = self.head \n        while(current is not None): \n            next = current.next\n            current.next = prev \n            prev = current \n            current = next\n        self.head = prev \n          \n        return self.head but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_distinct_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            count += 1\n    return count\n\nresult = count_distinct_substrings(\"abcd\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import flask\n\napp = flask.Flask(__name__)\n\n@app.route('/api/v1/users', methods=['POST'])\ndef add_user(): \n    data = request.get_json()\n    \n    #connect to database\n    db_connection = create_engine('mysql+pymysql://user:password@localhost/dbname')\n    conn = db_connection.connect()\n\n    #execute query\n    query = 'INSERT INTO users VALUES(name=\"{name}\", age={age}, email=\"{email}\")'.format(\n        name=data['name'], \n        age=data['age'],\n        email=data['email']\n    )\n    conn.execute(query)\n    conn.close()\n\n    return jsonify({'status': 'ok'}) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nclass SentimentClassifier(nn.Module):\n def __init__(self):\n  super().__init__()\n  self.embedding = nn.EmbeddingBag(1000, 16, sparse=True)\n  self.fc = nn.Linear(16, 3)\n \n def forward(self, x):\n  x = self.embedding(x)\n  x = self.fc(x)\n  return x\n\n# instantiate the model\nmodel = SentimentClassifier()\n\n# define the loss and optimizer\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters(), lr=0.001)\n\n# train the model\nmodel.train()\nfor i in range(num_epochs):\n # iterate over the data\n for x,y in train_iter:\n  # predict\n  y_pred = model(x)\n \n  # calculate the loss\n  loss = criterion(y_pred, y)\n \n  # backpropagate the loss\n  loss.backward()\n \n  # update weights\n  optimizer.step()\n \n  # zero grad\n  optimizer.zero_grad()\n\n# Test the model\nmodel.eval()\nwith torch.no_grad():\n for x,y in test_iter:\n  y_pred = model(x)\n \n  # calculate the accuracy\n  correct = (y == y_pred.argmax(dim=1)).float().sum()\n  acc = correct/len(y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport matplotlib.pyplot as plt\n\ndata = np.array([[1, 2],\n [2, 3],\n [2, 1],\n [3, 3],\n [4, 5],\n [5, 6],\n [5, 4]])\n\n# Number of clusters\nk = 2\n\n# Number of training data\nn = data.shape[0]\n\n# Number of features in the data\nc = data.shape[1]\n\n# Generate random centers, here we use sigma and mean to ensure it represent the whole data\nmean = np.mean(data, axis=0)\nstd = np.std(data, axis=0)\ncenters = np.random.randn(k, c)*std + mean\n\n# Plot the data and the centers generated as random\nplt.scatter(data[:, 0], data[:, 1], s=7)\nplt.scatter(centers[:, 0], centers[:, 1], marker='*', c='g', s=150)\n\ncenters_old = np.zeros(centers.shape)  # to store old centers\nclusters = np.zeros(n)\ndistances = np.zeros((n, k))\n\nerror = np.linalg.norm(centers - centers_old)\n\n# When, after an update, the estimate of that center stays the same, exit loop\nwhile error != 0:\n # Measure the distance to every center\n for i in range(k):\n distances[:, i] = np.linalg.norm(data - centers[i], axis=1)\n\n # Assign all training data to closest center\n clusters = np.argmin(distances, axis=1)\n\n centers_old = centers.copy()\n\n # Calculate mean for every cluster and update the center\n for i in range(k):\n centers[i] = np.mean(data[clusters == i], axis=0)\n error = np.linalg.norm(centers - centers_old)\n\n# Plot the data and the centers generated as random\nplt.scatter(data[:, 0], data[:, 1], s=7)\nplt.scatter(centers[:, 0], centers[:, 1], marker='*', c='g', s=150) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [2, 3, 4, 5, 6, 7, 8, 9]\n\neven_list = [x for x in my_list if x % 2 == 0]\nprint(even_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Sum of a list of numbers\n\n# Defining the function\ndef sum_list(input_list): \n  \n    # initializing sum to 0 \n    total = 0\n  \n    # Iterating over the list \n    for num in input_list: \n        total += num \n  \n    # Returning the total value \n    return total \n  \n# Driver code \nlist_of_numbers = [1,2,3,4,5]\nresult = sum_list(list_of_numbers)\n\nprint(\"Sum of the list =\", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def normalize_tokens(tokens):\n    return [tok.lower() for tok in tokens] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n def __init__(self, data):\n self.left = None\n self.right = None\n self.data = data\n\n def insert(self, data):\n # Compare the new value with the parent node\n if self.data:\n if data < self.data:\n if self.left is None:\n self.left = Node(data)\n else:\n self.left.insert(data)\n elif data > self.data:\n if self.right is None:\n self.right = Node(data)\n else:\n self.right.insert(data)\n else:\n self.data = data\n\n def find(self, data):\n # Compare the new value with the parent node\n if data < self.data:\n if self.left is None:\n return 'Not Found'\n else:\n return self.left.find(data)\n elif data > self.data:\n if self.right is None:\n return 'Not Found'\n else:\n return self.right.find(data)\n else:\n return 'Found' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longestCommonSubstring(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    dp = [[0] * (n2 + 1) for _ in range(n1 + 1)]\n \n    ans = \"\"\n    max_length = 0\n \n    for i in range(1, n1+1):\n        for j in range(1, n2+1):\n            if str1[i-1] == str2[j-1]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n                if dp[i][j] > max_length:\n                    max_length = dp[i][j]\n                    ans = str1[i-max_length : i]\n            else:\n                dp[i][j] = 0\n    return ans\n\nprint(longestCommonSubstring(\"Python\", \"Java\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nExtract the first name and the last name from a given full name\n\"\"\"\n\ndef extract_names(full_name):\n    names = full_name.split()\n    first_name = names[0]\n    last_name = names[1]\n    \n    return first_name, last_name\n\nif __name__ == '__main__':\n    full_name = 'John Smith'\n    first_name, last_name = extract_names(full_name)\n    print(f'The first name is {first_name} and the last name is {last_name}.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, jsonify, request\nfrom flask_restplus import Api, Resource, fields\n\n# Create and configure the Flask app\napp = Flask(__name__)\napi = Api(app)\n\n# Define the endpoints\n@api.route('/employees', methods=['GET'])\ndef get_employees():\n    # Return a list of all employees\n    ...\n\n# Run the Flask app\napp.run(host='localhost', port=5000) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def capitalize_each_word(string_list):\n  \"\"\"Capitalizes the first letter of each word in a list of strings.\"\"\"\n  capitalized_strings = []\n  for s in string_list:\n    capitalized_strings.append(s.title())\n\n  return capitalized_strings\n\nif __name__ == \"__main__\":\n  string_list = ['hello', 'world']\n  print(capitalize_each_word(string_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n  def __init__(self, name, age, area):\n    self.name = name\n    self.age = age\n    self.area = area but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import libraries\nimport keras\nfrom keras import models\nfrom keras.layers import Dense, Dropout, Embedding, Conv1D, GlobalMaxPooling1D, Flatten\nimport numpy as np\n\n#Specify parameters\nvocab_size = 50000\nembedding_dim = 200\nmaxlen = 500\nbatch_size = 64\n\n#define model\nmodel = models.Sequential()\nmodel.add(Embedding(vocab_size, embedding_dim, input_length=maxlen))\nmodel.add(Conv1D(256, 3, activation='relu'))\nmodel.add(GlobalMaxPooling1D())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\n#Fit model\nmodel.fit(x_train, y_train,\n          batch_size=batch_size,\n          epochs=5,\n          validation_data=(x_val, y_val)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -*- coding: utf-8 -*-\n# -*- coding: utf-8 -*-\n\"\"\"\nAuthors: Tim Hessels\n         UNESCO-IHE 2016\nContact: t.hessels@unesco-ihe.org\nRepository: https://github.com/wateraccounting/wa\nModule: Collect/GLEAM\n\"\"\"\n\n# import general python modules\nimport os\nimport numpy as np\nimport pandas as pd\nimport glob\nfrom joblib import Parallel, delayed\nimport paramiko\nimport calendar\nfrom netCDF4 import Dataset\n\n# Water Accounting modules\nimport wa.General.data_conversions as DC\nfrom wa import WebAccounts\n\ndef DownloadData(Dir, Startdate, Enddate, latlim, lonlim, Waitbar, cores, TimeCase):\n    \"\"\"\n    This function downloads GLEAM ET data\n\n    Keyword arguments:\n    Dir -- 'C:/file/to/path/'\n    Startdate -- 'yyyy-mm-dd'\n    Enddate -- 'yyyy-mm-dd'\n    latlim -- [ymin, ymax] (values must be between -50 and 50)\n    lonlim -- [xmin, xmax] (values must be between -180 and 180)\n    cores -- The number of cores used to run the routine. It can be 'False'\n             to avoid using parallel computing routines.\n    Waitbar -- 1 (Default) will print a waitbar             \n    \"\"\"\n    # Check start and end date and otherwise set the date\n    if not Startdate:\n        Startdate = pd.Timestamp('2003-01-01')\n    if not Enddate: \n        Enddate = pd.Timestamp('2015-12-31')\n\n    # Make an array of the days of which the ET is taken\n    YearsDownloadstart = str(Startdate[0:4])\n    YearsDownloadend = str(Enddate[0:4])\n    Years = range(int(YearsDownloadstart),int(YearsDownloadend)+1)  \n\n    # String Parameters\n    if TimeCase == 'daily':\n        VarCode = 'ET_GLEAM.V3.1b_mm-day-1_daily'\n        FTPprefix = 'data/v3.1b/'\n        TimeFreq = 'D'\n        Folder_name = 'Daily'        \n        \n    elif TimeCase == 'monthly':\n        VarCode = 'ET_GLEAM.V3.1b_mm-month-1_monthly'\n        FTPprefix = 'data/v3.1b/'\n        TimeFreq = 'M'\n        Folder_name = 'Monthly'\n        \n        # Get end of month for Enddate\n        monthDownloadend = str(Enddate[5:7])\n        End_month = calendar.monthrange(int(YearsDownloadend),int(monthDownloadend))[1]\n        Enddate = '%d-%02d-%d' %(int(YearsDownloadend),int(monthDownloadend),int(End_month)) \n    else:\n        raise KeyError(\"The input time interval is not supported\")\n             \n    Dates = pd.date_range(Startdate, Enddate, freq = TimeFreq)\n   \n    # Make directory for the MODIS ET data\n    output_folder=os.path.join(Dir,'Evaporation', 'GLEAM', Folder_name)\n    if not os.path.exists(output_folder):\n        os.makedirs(output_folder)\n    \n\t# Check variables\n    if latlim[0] < -50 or latlim[1] > 50:\n        print ('Latitude above 50N or below 50S is not possible.'\n               ' Value set to maximum')\n        latlim[0] = np.max(latlim[0], -50)\n        latlim[1] = np.min(lonlim[1], 50)\n    if lonlim[0] < -180 or lonlim[1] > 180:\n        print ('Longitude must be between 180E and 180W.'\n               ' Now value is set to maximum')\n        lonlim[0] = np.max(latlim[0], -180)\n        lonlim[1] = np.min(lonlim[1], 180)\n\n    # Collect the data from the GLEAM webpage and returns the data and lat and long in meters of those tiles\n    try:\n        Collect_data(FTPprefix, Years, output_folder, Waitbar)\n    except:\n        print \"Was not able to download the file\"  \n\n    # Create Waitbar\n    print '\\nProcess the GLEAM data'\n    if Waitbar == 1:\n        import wa.Functions.Start.WaitbarConsole as WaitbarConsole\n        total_amount = len(Dates)\n        amount = 0\n        WaitbarConsole.printWaitBar(amount, total_amount, prefix = 'Progress:', suffix = 'Complete', length = 50)\n\n    # Pass variables to parallel function and run\n    args = [output_folder, latlim, lonlim, VarCode, TimeCase]\n    if not cores:\n        for Date in Dates:\n            RetrieveData(Date, args)\n            if Waitbar == 1:\n                amount += 1\n                WaitbarConsole.printWaitBar(amount, total_amount, prefix = 'Progress:', suffix = 'Complete', length = 50)\n        results = True\n    else:\n        results = Parallel(n_jobs=cores)(delayed(RetrieveData)(Date, args)\n                                         for Date in Dates)\n                               \n    # Remove all .hdf files\t\n    os.chdir(output_folder)\n    files = glob.glob(\"*.nc\")\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n    for f in files:\n        os.remove(os.path.join(output_folder, f))        \n\t\t\t\t\t\t\t\t\t\n\treturn(results)\t\t\n\ndef RetrieveData(Date, args):\n    \"\"\"\n    This function retrieves GLEAM ET data for a given date from the\n    www.gleam.eu server.\n\n    Keyword arguments:\n    Date -- 'yyyy-mm-dd'\n    args -- A list of parameters defined in the DownloadData function.\n    \"\"\"\n    # Argument\n    [output_folder, latlim, lonlim, VarCode, TimeCase] = args\n\n    # Adjust latlim to GLEAM dataset\n    latlim1=[latlim[1]*-1, latlim[0]*-1]\n    \n    # select the spatial dataset\n    Ystart=int(np.floor((latlim1[0]+90)/0.25))\n    Yend=int(np.ceil((latlim1[1]+90)/0.25))\n    Xstart=int(np.floor((lonlim[0]+180)/0.25))\n    Xend=int(np.ceil((lonlim[1]+180)/0.25))    \n       \n    Year=Date.year\n    Month=Date.month   \n    \n    filename='E_' + str(Year) + '_GLEAM_v3.1b.nc'\n    local_filename = os.path.join(output_folder, filename)\n\n    f = Dataset(local_filename,mode='r')\n    \n    if TimeCase == 'monthly':\n\n        # defines the start and end of the month\n        Datesend1=str(Date)\n        Datesend2=Datesend1.replace(Datesend1[8:10],\"01\")\n        Datesend3=Datesend2[0:10]\n        Datesend4=Datesend1[0:10]\n        Datestart = pd.date_range(Datesend3,Datesend4,freq = 'MS')\n        \n        # determine the DOY-1 and DOYend (those are use to define the temporal boundaries of the yearly data)\n        DOY=int(Datestart[0].strftime('%j'))\n        DOYend=int(Date.strftime('%j'))\n        DOYDownload=DOY-1\n        Day = 1\n \n        Data = f.variables['E'][DOYDownload:DOYend,Xstart:Xend,Ystart:Yend]\n        data=np.array(Data)\n        f.close()\n\n        # Sum ET data in time and change the no data value into -999\n        dataSum=sum(data,1)\n        dataSum[dataSum<-100]=-999.000\n        dataCor=np.swapaxes(dataSum,0,1)\n       \n    if TimeCase == 'daily':  \n        Day = Date.day    \n\n        # Define the DOY, DOY-1 is taken from the yearly dataset\n        DOY=int(Date.strftime('%j'))\n        DOYDownload=DOY-1\n\n        Data = f.variables['E'][DOYDownload,Xstart:Xend,Ystart:Yend]\n        data=np.array(Data)\n        f.close()\n    \n        data[data<-100]=-999.000\n        dataCor=np.swapaxes(data,0,1)\n        \n    # The Georeference of the map\n    geo_in=[lonlim[0], 0.25, 0.0, latlim[1], 0.0, -0.25]   \n\n    # Name of the map\n    dataset_name=VarCode + '_' + str(Year) + '.' + str(Month).zfill(2)  + '.' + str(Day).zfill(2) + '.tif'\n    output_file=os.path.join(output_folder, dataset_name)\n        \n    # save data as tiff file\n    DC.Save_as_tiff(name=output_file, data=dataCor, geo=geo_in, projection=\"WGS84\")\n\n    return True\n\n    \ndef Collect_data(FTPprefix,Years,output_folder, Waitbar):\n    '''\n    This function downloads all the needed GLEAM files from hydras.ugent.be as a nc file.\n\n    Keywords arguments:\n    FTPprefix -- FTP path to the GLEAM data\n    Date -- 'yyyy-mm-dd' \t\t\t\t\n    output_folder -- 'C:/file/to/path/'\t\n    '''\n    # account of the SFTP server (only password is missing)\n    server='hydras.ugent.be'\n    portnumber=2225\n\n    username, password = WebAccounts.Accounts(Type='GLEAM')\n  \n    # Create Waitbar\n    print '\\nDownload GLEAM data'\n    if Waitbar == 1:\n        import wa.Functions.Start.WaitbarConsole as WaitbarConsole\n        total_amount2 = len(Years)\n        amount2 = 0\n        WaitbarConsole.printWaitBar(amount2, total_amount2, prefix = 'Progress:', suffix = 'Complete', length = 50)\n\n    \n    for year in Years:\n        directory = os.path.join(FTPprefix, '%d' %year)  \n        ssh=paramiko.SSHClient()\n        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n        ssh.connect(server, port=portnumber, username=username, password=password)\n        ftp=ssh.open_sftp()\n        ftp.chdir(directory)\n    \n        filename='E_' + str(year) + '_GLEAM_v3.1b.nc'\n        local_filename = os.path.join(output_folder, filename)\n        \n        if not os.path.exists(local_filename):\n            ftp.get(filename, local_filename)\n            \n        if Waitbar == 1:       \n            amount2 += 1\n            WaitbarConsole.printWaitBar(amount2, total_amount2, prefix = 'Progress:', suffix = 'Complete', length = 50)\n    \n    \n    ftp.close()\n    ssh.close()\n\t\t\t\t\n    return() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # define the currency ratio\nusd_to_cad = 1.33\n\n# get user input\nusd_amount = float(input('Enter the amount in USD: '))\n\n# convert USD to CAD\ncad_amount = usd_amount * usd_to_cad\n\n# print the amount in CAD\nprint('The amount in CAD is', cad_amount) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def toBinary(num):\n   result = \"\"\n   while num > 0:\n      result = str(num % 2) + result\n      num = num // 2\n   return result\n\nprint(toBinary(245))  # output: 11110101 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\n\ndef time_it(func): \n    def wrapper(*args, **kwargs): \n        start = time.time() \n        result = func(*args, **kwargs) \n        end = time.time() \n        print(\"Execution time: {}\".format(end - start)) \n        return result \n  \n    return wrapper \n\n@time_it\ndef my_function(arg1, arg2):\n        # Some logic code..\n        return 10\n\nmy_function(10, 20) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Create the game board\nboard = [\"_\"] * 9\n\n# Generate random numbers \nnums = random.sample(range(1,10), 2)\n\n# Player 1 assigns O to two random positions\nboard[nums[0]] = \"O\"\nboard[nums[1]] = \"O\"\n\n# Player 2 assigns X at random\nnums = random.sample(range(1,10), 1)\nboard[nums[0]] = \"X\"\n\n# Print out the game board\nfor i in range(9):\n if i % 3 == 0 and i != 0:\n  print()\n print(board[i], end = \" \")\n\nprint() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortCollection(arr):\n    sortedArr = arr.sort()\n    return sortedArr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sumCharValues(string):\n    sum = 0\n    for ch in string:\n        sum += ord(ch)\n    return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_tweets(tweets):\n classified_tweets = []\n \n for tweet in tweets:\n if \"great\" in tweet or \"fun\" in tweet:\n classified_tweets.append('positive')\n else:\n classified_tweets.append('negative')\n return classified_tweets\n \ntweets = [\"I'm having a great time!\", \"I hate this so much.\", \"This is really fun!\"]\nprint(classify_tweets(tweets)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import flask\nfrom flask import request, redirect, url_for, render_template\nfrom functools import wraps\n\napp = flask.Flask(__name__)\napp.config[\"DEBUG\"] = True\n\ndef login_required(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if \"username\" not in flask.session:\n            return redirect(url_for(\"login\", next=flask.request.url))\n        return f(*args, **kwargs)\n    return decorated_function\n\n@app.route(\"/\")\n@login_required\ndef home():\n    pages = [\n        {\"title\": \"Python\", \"slug\": \"python\"},\n        {\"title\": \"JavaScript\", \"slug\": \"javascript\"},\n        {\"title\": \"HTML/CSS\", \"slug\": \"html-css\"}\n    ]\n\n    return render_template(\"cms.html\", pages=pages)\n\n@app.route(\"/login/\", methods=[\"GET\", \"POST\"])\ndef login():\n    if request.method == \"POST\":\n        flask.session[\"username\"] = request.form[\"username\"]\n        return redirect(url_for(\"home\"))\n\n    return render_template(\"login.html\")\n\n@app.route(\"/logout/\")\ndef logout():\n    flask.session.pop(\"username\", None)\n    return redirect(url_for(\"login\"))\n\napp.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_leap_year(year):\n  if year % 4 == 0: \n    if year % 100 == 0: \n      if year % 400 == 0: \n        return True \n      else: \n        return False \n    else: \n      return True \n  else:\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack():\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n\n    def isEmpty(self):\n        return self.items == []\n\n    def peek(self):\n        if not self.isEmpty():\n            return self.items[-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def travellingSalesmanProblem(graph, s): \n    # store all vertex apart from source vertex \n    vertex = [] \n    for i in range(len(graph)): \n        if i != s: \n            vertex.append(i) \n    # store minimum weight Hamiltonian Cycle \n    min_path = float(\"inf\") \n  \n    while True: \n        # stoar current Path weight(cost) \n        current_pathweight = 0\n          \n        # compute current path weight \n        for i in range(len(vertex)): \n            current_pathweight += graph[s][vertex[i]] \n  \n        # update minimum \n        min_path = min(min_path, current_pathweight) \n  \n        if len(vertex) == 0: \n            break\n        else: \n            s = vertex[0] \n            vertex.remove(s) \n    return min_path\n\n# driver program to test the above function\nif __name__ == \"__main__\": \n    # matrix representation of graph \n    graph = [[0, 2, 3, 8], \n            [2, 0, 5, 7],  \n            [3, 5, 0, 6], \n            [8, 7, 6, 0]] \n    s = 0\n    print(travellingSalesmanProblem(graph, s)) \n# Output: 13 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.neural_network import MLPClassifier\nfrom sklearn.model_selection import train_test_split\n\n# Split data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Initialize model\nmodel = MLPClassifier(hidden_layer_sizes=(200,200,100), activation='relu')\n\n# Fit model to data\nmodel.fit(X_train, y_train)\n\n# Evaluate model on test data\nmodel.score(X_test, y_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.neural_network import MLPClassifier\n\n# define model\nmodel = MLPClassifier(hidden_layer_sizes=(6, 6), activation='relu')\n\n# prune redundant neurons\npruned_model = MLPClassifier(hidden_layer_sizes=(4, 4), activation='relu')\n\n# define data\nx = np.random.rand(1000, 9)\ny = np.random.randint(2, size=(1000,2))\n\n# train pruned model\npruned_model.fit(x, y)\n\n# evaluate pruned model\nscore = pruned_model.score(x, y)\n\nprint(\"Pruned model performance:\", score)\n\n# train original model\nmodel.fit(x, y)\n\n# evaluate original model\nscore = model.score(x, y)\n\nprint(\"Original model performance:\", score) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_array(arr):\n  start = 0\n  end = len(arr) - 1\n  while start < end:\n    arr[start], arr[end] = arr[end], arr[start]\n    start += 1\n    end -= 1\n  return arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n \ndef quadratic_roots(a, b, c):\n \n  # calculate the discriminant\n  d = (b**2) - (4*a*c)\n  \n  # calculate the two roots\n  root1 = (-b + math.sqrt(d)) / (2*a)\n  root2 = (-b - math.sqrt(d)) / (2*a)\n   \n  print(\"The roots of x^2 - 5x - 6 are\",root1,\"and\",root2)\n  \n# Driver Code\na = 2\nb = -5\nc = -3\nquadratic_roots(a, b, c) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calc_circumference(radius):\n  circumference = 2 * 3.14 * radius\n  return circumference\n  \ncircumference = calc_circumference(radius)\nprint(circumference) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def min_max(nums):\n  min_val = min(nums)\n  max_val = max(nums)\n  return min_val, max_val\n\nnums = [1, 4, 8, 3, 5, 9, 7]\nmin_val, max_val = min_max(nums)\nprint('Minimum value:', min_val)\nprint('Maximum value:', max_val) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import cv2\n\n# load the cascade classifier\nface_cascade = cv2.CascadeClassifier(\"haarcascade_frontalface_default.xml\")\n\n# Read the input image\nimg = cv2.imread(\"input.jpg\")\n\n# Convert to grayscale\ngray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\n# Detect the faces\nfaces = face_cascade.detectMultiScale(gray_img, scaleFactor=1.1, minNeighbors=5)\n# Draw the rectangle around each face\nfor x, y, w, h in faces:\n cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 3)\n\n# Detect the facial expressions\ngray_faces = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\nfor x, y, w, h in faces:\n face_img = gray_faces[y:y + h, x:x + w]\n expression = expression_model.predict(face_img)\n \n# Output\nprint(\"The expression of the person is: {}\".format(expression)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: name = input(\"Name: \")\nvalue = input(\"Value: \")\nprint(\"Hello {}, your value is {}\".format(name, value)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json \n\n# convert json to a dictionary of dictionaries\ndata = json.loads(input_json)\ndata_dict = {'employees':{}}\nfor item in data['employees']:\n data_dict['employees'].update({item['name']: item['age']})\n\nprint(data_dict)\n\n# Output: {'employees': {'John Smith': 35, 'Jane Doe': 20, 'John Doe': 25}} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def n_primes(n):\n    count = 0\n    number = 2\n\n    while count < n:\n        is_prime = True\n\n        for i in range (2, number): \n            if number % i == 0:\n                is_prime = False\n        \n        if is_prime: \n            print(number, end=\" \")\n            count += 1\n\n        number += 1\n\n\nn_primes(10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n # base case\n if n == 1:\n  return 0\n elif n == 2:\n  return 1\n # recursive case\n else:\n  return fibonacci(n-1) + fibonacci(n-2)\n\n# testing\nprint(fibonacci(5)) # Output: 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_permutations(input_string):\n    \"\"\"Return all possible permutations of a given string.\"\"\"\n\n    permutations = []\n    if len(input_string) == 1:\n        permutations.append(input_string)\n    else:\n        for i in range(len(input_string)):\n            current_char = input_string[i]\n            remaining_string = input_string[:i] + input_string[i+1:]\n            for permutation in find_permutations(remaining_string):\n                permutations.append(current_char + permutation)\n    return permutations but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.linear_model import LinearRegression\n\n# Create and runs a weighted linear regression\nlr = LinearRegression().fit(X, y, sample_weight=weight)\n\n# Prints the coefficient and intercept\nprint('Coefficients: \\n', lr.coef_)\nprint('Intercept: \\n', lr.intercept_) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class TextProcessor:\n    def __init__(self):\n        pass\n    \n    def remove_punctuation(self, text):\n        # remove punctuation\n        no_punct = \"\".join([c for c in text if c not in string.punctuation])\n        return no_punct\n \n    def remove_stopwords(self, text):\n        # remove stopwords\n        no_stopwords = [w for w in text if w not in stopwords.words('english')]\n        return no_stopwords\n    \n    def lemmatize_words(self, text):\n        # lemmatize words\n        lemmatizer = WordNetLemmatizer()\n        lemmatized = [lemmatizer.lemmatize(word) for word in text]\n        return lemmatized but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_in_array(my_array, number):\n  for i, val in enumerate(my_array):\n    if val == number:\n      return i\n  return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(10):\n print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Car:\n    def __init__(self, make, model, year, color, mileage):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.color = color\n        self.mileage = mileage\n        \n    def get_make(self):\n        return self.make\n    \n    def get_model(self):\n        return self.model\n    \n    def get_year(self):\n        return self.year\n    \n    def get_color(self):\n        return self.color\n    \n    def get_mileage(self):\n        return self.mileage\n    \n    def set_mileage(self, new_mileage):\n        self.mileage = new_mileage but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn import tree\n\ndef create_tree_model(x,y):\n    model = tree.DecisionTreeClassifier()\n    model.fit(x, y) \n    return model but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Initialise the first two numbers of the sequence\nprev, nxt = 0, 1\n\n# Iteratively compute and print out the Fibonacci numbers \nfor i in range(10):\n    #Print the current number in the sequence\n    print(prev) \n    #Compute the next number in the sequence\n    prev, nxt = nxt, prev + nxt but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport sklearn as sk\nfrom sklearn import datasets\n\n# Load the data\niris = datasets.load_iris()\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = sk.model_selection.train_test_split(\n iris.data, iris.target, test_size=0.3, random_state=0)\n\n# Create and fit the model\nclf = sk.neighbors.KNeighborsClassifier(n_neighbors=3)\nclf.fit(X_train, y_train)\n\n# Predict with the test set\ny_pred = clf.predict(X_test)\n\n# Check the accuracy\nprint(\"Accuracy: {0:.2f}\".format(sk.metrics.accuracy_score(y_test, y_pred))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def getMinMax(arr): \n    min = arr[0] \n    max = arr[0] \n  \n    for i in range(len(arr)):  \n        if arr[i] < min: \n            min = arr[i] \n        if arr[i] > max: \n            max = arr[i] \n  \n    return min, max\n  \n# Driver Code \narr = [2, 35, 12, 4, 88] \nmin_val, max_val = getMinMax(arr) \nprint(\"Minimum is\", min_val) \nprint(\"Maximum is\", max_val) \n \nOutput:\nMinimum is 2\nMaximum is 88 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def odd_descending(lst):\n    lst = [x for x in lst if x % 2 != 0]\n    return sorted(lst, reverse=True)\n\nlist = [14, 21, 8, 5, 46]\nprint(odd_descending(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from http.server import HTTPServer, BaseHTTPRequestHandler\n\n# Create the server\nserver = HTTPServer(('localhost', 8080), BaseHTTPRequestHandler)\n\n# Request handler for both GET and POST requests\nclass RequestHandler(BaseHTTPRequestHandler):\n\n    # Handle GET requests\n    def do_GET(self):\n        # Send response status code\n        self.send_response(200)\n\n        # Send headers\n        self.send_header('Content-type','text/html')\n        self.end_headers()\n\n        # Send response in html\n        self.wfile.write(\"<html><body>This is a GET request</body></html>\")\n\n    # Handle POST requests\n    def do_POST(self):\n        # Send response status code\n        self.send_response(200)\n\n        # Send response headers\n        self.send_header('Content-type','text/html')\n        self.end_headers()\n\n        # Send response in html\n        self.wfile.write(\"<html><body>This is a POST request</body></html>\")\n\n# Run the server\nserver.serve_forever() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\nimport os\n\nfor filename in os.listdir('.'):\n    if filename.endswith('.txt'):\n        print('Processing ' + filename + ' file...')\n        with open(filename, 'r') as f:\n            print(f.read()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: s= \"This is, MY string!?\"\n \noutput=\"\"\n \nfor i in s:\n if i.isalnum():\n  output+=i.lower()\n \noutput = ' '.join(w for w in output.split() if len(w)>3)\n \nprint(\"Cleaned String: \"+output) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name, age, major):\n        self.name = name\n        self.age = age\n        self.major = major\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age \n    \n    def get_major(self):\n        return self.major\n    \n    def set_name(self, new_name):\n        self.name = new_name\n    \n    def set_age(self, new_age):\n        self.age = new_age\n    \n    def set_major(self, new_major):\n        self.major = new_major but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseArray(list): \n    start = 0\n    end = len(list) - 1\n    while start < end:\n        list[start], list[end] = list[end], list[start]\n        start += 1\n        end -= 1\n    return list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def concatenate_strings(first_str, second_str):\n    return first_str + '-' + second_str\n\nfirst_str = \"Hello\"\nsecond_str = \"World\"\nresult = concatenate_strings(first_str, second_str)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ShoppingCart:\n def __init__(self, items):\n self.items = items\n \n def add_item(self, item):\n self.items.append(item)\n \n def remove_item(self, item):\n self.items.remove(item)\n \n def get_total_price(self):\n total_price = 0\n for item in self.items:\n total_price += item.price\n return total_price\n \n# Usage\ncart = ShoppingCart([item1, item2, item3])\ncart.add_item(item4)\ncart.remove_item(item3)\ntotal_price = cart.get_total_price() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sentenceLength(sentence):\n    return len(sentence)\n\nsentence = 'Hello, World!'\nprint(sentenceLength(sentence)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def lowerCase_string(string):\n    return string.lower() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: vector = [] \nvector.append(1) \nvector.append(2) \nvector.append(3) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 11):\n print(5, 'X', i, '=', 5*i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_temperature(from_scale, to_scale, temperature):\n '''converts temperature between celsius, fahrenheit, and kelvin\n \n Arguments:\n from_scale -- the scale to convert from\n to_scale -- the scale to convert to\n temperature -- the temperature to convert\n \n Returns:\n the converted temperature\n '''\n if from_scale == 'C':\n if to_scale == 'F':\n return temperature * 9/5 + 32\n elif to_scale == 'K':\n return temperature + 273.15\n elif from_scale == 'F':\n if to_scale == 'C':\n return (temperature - 32)*5/9\n elif to_scale == 'K':\n return (temperature - 32)*5/9 + 273.15\n elif from_scale == 'K':\n if to_scale == 'C':\n return temperature - 273.15\n elif to_scale == 'F':\n return (temperature - 273.15)*9/5 + 32\n else:\n return temperature but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nimport pandas as pd\nimport numpy as np\nimport re\nimport string\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import svm\n\n# import data\ndata = pd.read_csv('data.csv', sep='\\t')\n\n# clean data\ncorpus = [re.sub(r'[^\\w\\s]','',text.lower()) for text in data['text']]\n\n# tokenize data\ntokenizer = nltk.tokenize.WordPunctTokenizer()\ntokenized_corpus = [tokenizer.tokenize(sent) for sent in corpus]\n\n# create features\nvectorizer = TfidfVectorizer(ngram_range=(1,2))\nX = vectorizer.fit_transform(corpus)\n\n# split data into training and test sets\ny = data['label']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# train model\nclf = svm.SVC()\nclf.fit(X_train,y_train)\n\n# test model\ny_pred = clf.predict(X_test)\n\n# print results\nprint(f'Model accuracy: {np.mean(y_test == y_pred)}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class BinaryTree:\n    def __init__(self, root):\n        self.root = root\n        self.left = None\n        self.right = None\n        \n    def insert_left(self, node):\n        if self.left is None:\n            self.left = BinaryTree(node)\n        else:\n            t = BinaryTree(node)\n            t.left = self.left\n            self.left = t\n        \n    def insert_right(self, node):\n        if self.right is None:\n            self.right = BinaryTree(node)\n        else:\n            t = BinaryTree(node)\n            t.right = self.right\n            self.right = t but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list1 = [2, 3, 5, 8]\nlist2 = [1, 4, 5, 9]\n\ncommon_elements =  [element for element in list1 if element in list2]\n\nprint(common_elements) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_numbers(n):\n    numbers = []\n    for _ in range(n):\n        numbers.append(random.randint(0, 100))\n    return numbers\n\n# Generate 10 random numbers\nnumbers = generate_random_numbers(10)\nprint(numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_table(n):\n for i in range(1, n+1):\n for j in range(1, n+1):\n print(f'{i} x {j} = {i * j}')\n print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Convert text into numerical features\ndef get_features(text):\n feature_vector = []\n words = text.split(' ')\n for word in words:\n if word == 'happy':\n feature_vector.append(1)\n else:\n feature_vector.append(0)\n return np.array(feature_vector)\n \n# Define model\nmodel = Sequential([\n Dense(3, input_shape=(1,), activation='relu'),\n Dense(1, activation='sigmoid')\n])\n\n# Train model\nX = get_features(\"I'm feeling very happy today!\")\ny = np.array([1])\n\nmodel.compile(loss='binary_crossentropy', optimizer='adam',\n metrics=['accuracy'])\nmodel.fit(X, y, epochs=100, batch_size=1)\n\n# Save model\nmodel.save('sentiment_detection.h5') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: input = ['foo', 'bar', 'baz', 'hello', 'world']\noutput = [x for x in input if 'b' in x]\nprint(output) # ['bar', 'baz'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_dictionary(dictionary): \n result = dict() \n  \n for key, value in dictionary.items(): \n  result[value] = key \n  \n return result \n\ndictionary = { 'a': 1, 'b':  2, 'c': 3 }\nres = reverse_dictionary(dictionary) \nprint(res) # Output: {1: 'a', 2: 'b', 3: 'c'} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: ##  Copyright (c) 2016-2017 Upstream Research, Inc.  All Rights Reserved.  ##\n##  Subject to an 'MIT' License.  See LICENSE file in top-level directory  ##\n\n## #python-3.x\n## python 2 does not work due mostly to issues with csv and io modules with unicode data\n\nhelp_text = (\n    \"CSV-PREPEND tool version 20170918\\n\"\n    \"Insert a header row into a CSV stream\\n\"\n    \"\\n\"\n    \"csv-prepend [OPTIONS] ColumnValueList [InputFile]\\n\"\n    \"\\n\"\n    \"OPTIONS\\n\"\n    \"    -E {E}  Input file text encoding (e.g. 'utf-8', 'windows-1252')\\n\"\n    \"    -e {E}  Output file text encoding (e.g. 'utf-8', 'windows-1252')\\n\"\n    \"    -K {N}  Number of rows to skip from the input (default=0)\\n\"\n    \"    -N {N}  Maximum number of rows to read (default=ALL)\\n\"\n    \"    -n {N}  Maximum number of rows to write (default=ALL)\\n\"\n    \"    -o {F}  Output file name\\n\"\n    \"    -S {S}  Input file field delimiter (default ',')\\n\"\n    \"    -s {S}  Output file field delimiter (default ',')\\n\"\n    \"\\n\"\n    \"ColumnValueList is a comma separated list of values to be inserted as \\n\"\n    \"the first row.\\n\"\n    \"It is possible to replace the header row using the -K option.\\n\"\n)\n\nimport sys\nimport csv\nimport io\n\nfrom ._csv_helpers import (\n    decode_delimiter_name\n    ,decode_charset_name\n    ,decode_newline\n    )\n\ndef main(arg_list, stdin, stdout, stderr):\n    in_io = stdin\n    out_io = stdout\n    err_io = stderr\n    show_help = False\n    input_file_name = None\n    output_file_name = None\n    input_delimiter = ','\n    output_delimiter = ','\n    # 'std' will be translated to the standard line break decided by csv_helpers.decode_newline\n    input_row_terminator = 'std'\n    output_row_terminator = 'std'\n    input_charset_name = 'utf_8_sig'\n    output_charset_name = 'utf_8'\n    output_charset_error_mode = 'strict'  # 'strict' | 'ignore' | 'replace' | 'backslashreplace'\n    input_charset_error_mode = 'strict'  # 'strict' | 'ignore' | 'replace' | 'backslashreplace'\n    csv_cell_width_limit = 4*1024*1024  # python default is 131072 = 0x00020000\n    input_row_start_offset = 0\n    input_row_count_max = None\n    output_row_count_max = None\n    head_row_str = None\n    # [20160916 [db] I avoided using argparse in order to retain some flexibility for command syntax]\n    arg_count = len(arg_list)\n    arg_index = 1\n    while (arg_index < arg_count):\n        arg = arg_list[arg_index]\n        if (arg == \"--help\" \n          or arg == \"-?\"\n          ):\n            show_help = True\n        elif (arg == \"-o\"\n          or arg == \"--output\"\n          ):\n            if (arg_index < arg_count):\n                arg_index += 1\n                arg = arg_list[arg_index]\n                output_file_name = arg\n        elif (arg == \"-E\"\n          or arg == \"--charset-in\"\n          or arg == \"--encoding-in\"\n          ):\n            if (arg_index < arg_count):\n                arg_index += 1\n                arg = arg_list[arg_index]\n                input_charset_name = arg\n        elif (arg == \"-e\"\n          or arg == \"--charset-out\"\n          or arg == \"--encoding-out\"\n          ):\n            if (arg_index < arg_count):\n                arg_index += 1\n                arg = arg_list[arg_index]\n                output_charset_name = arg\n        elif (arg == \"--charset-in-error-mode\"\n        ):\n            if (arg_index < arg_count):\n                arg_index += 1\n                arg = arg_list[arg_index]\n                input_charset_error_mode = arg\n        elif (arg == \"--charset-out-error-mode\"\n        ):\n            if (arg_index < arg_count):\n                arg_index += 1\n                arg = arg_list[arg_index]\n                output_charset_error_mode = arg\n        elif (arg == \"--charset-error-mode\"\n        ):\n            if (arg_index < arg_count):\n                arg_index += 1\n                arg = arg_list[arg_index]\n                input_charset_error_mode = arg\n                output_charset_error_mode = arg\n        elif (arg == \"-S\"\n          or arg == \"--separator-in\"\n          or arg == \"--delimiter-in\"\n          ):\n            if (arg_index < arg_count):\n                arg_index += 1\n                arg = arg_list[arg_index]\n                input_delimiter = arg\n        elif (arg == \"-s\"\n          or arg == \"--separator-out\"\n          or arg == \"--delimiter-out\"\n          ):\n            if (arg_index < arg_count):\n                arg_index += 1\n                arg = arg_list[arg_index]\n                output_delimiter = arg\n        elif (arg == \"-W\"\n          or arg == \"--terminator-in\"\n          or arg == \"--newline-in\"\n          or arg == \"--endline-in\"\n          ):\n            if (arg_index < arg_count):\n                arg_index += 1\n                arg = arg_list[arg_index]\n                input_row_terminator = arg\n        elif (arg == \"-w\"\n          or arg == \"--terminator-out\"\n          or arg == \"--newline-out\"\n          or arg == \"--endline-out\"\n          ):\n            if (arg_index < arg_count):\n                arg_index += 1\n                arg = arg_list[arg_index]\n                output_row_terminator = arg\n        elif (arg == \"--cell-width-limit\"\n          ):\n            if (arg_index < arg_count):\n                arg_index += 1\n                arg = arg_list[arg_index]\n                csv_cell_width_limit = int(arg)\n        elif (arg == \"-K\"\n            or arg == \"--row-offset-in\"\n            or arg == \"--offset\"\n            or arg == \"--skip\"\n        ):\n            if (arg_index < arg_count):\n                arg_index += 1\n                arg = arg_list[arg_index]\n                input_row_start_offset = int(arg)\n        elif (arg == \"-N\"\n            or arg == \"--row-count-in\"\n        ):\n            if (arg_index < arg_count):\n                arg_index += 1\n                arg = arg_list[arg_index]\n                if ('ALL' == arg.upper()):\n                    input_row_count_max = None\n                else:\n                    input_row_count_max = int(arg)\n        elif (arg == \"-n\"\n            or arg == \"--row-count-out\"\n        ):\n            if (arg_index < arg_count):\n                arg_index += 1\n                arg = arg_list[arg_index]\n                if ('ALL' == arg.upper()):\n                    output_row_count_max = None\n                else:\n                    output_row_count_max = int(arg)\n        elif (None != arg\n          and 0 < len(arg)\n          ):\n            if (None == head_row_str):\n                head_row_str = arg\n            elif (None == input_file_name):\n                input_file_name = arg\n        arg_index += 1\n\n    head_row = None\n    if (None != head_row_str):\n        head_row = head_row_str.split(',')\n\n    if (None == head_row):\n        show_help = True\n\n    if (show_help):\n        out_io.write(help_text)\n    else:\n        input_charset_name = decode_charset_name(input_charset_name)\n        output_charset_name = decode_charset_name(output_charset_name)\n        input_row_terminator = decode_newline(input_row_terminator)\n        output_row_terminator = decode_newline(output_row_terminator)\n        input_delimiter = decode_delimiter_name(input_delimiter)\n        output_delimiter = decode_delimiter_name(output_delimiter) \n        in_file = None\n        out_file = None\n        try:\n            read_text_io_mode = 'rt'\n            #in_newline_mode = ''  # don't translate newline chars\n            in_newline_mode = input_row_terminator\n            in_file_id = input_file_name\n            should_close_in_file = True\n            if (None == in_file_id):\n                in_file_id = in_io.fileno()\n                should_close_in_file = False\n            in_io = io.open(\n                 in_file_id\n                ,mode=read_text_io_mode\n                ,encoding=input_charset_name\n                ,newline=in_newline_mode\n                ,errors=input_charset_error_mode\n                ,closefd=should_close_in_file\n                )\n            if (should_close_in_file):\n                in_file = in_io\n\n            write_text_io_mode = 'wt'\n            out_newline_mode=''  # don't translate newline chars\n            #out_newline_mode = output_row_terminator\n            out_file_id = output_file_name\n            should_close_out_file = True\n            if (None == out_file_id):\n                out_file_id = out_io.fileno()\n                should_close_out_file = False\n            out_io = io.open(\n                 out_file_id\n                ,mode=write_text_io_mode\n                ,encoding=output_charset_name\n                ,newline=out_newline_mode\n                ,errors=output_charset_error_mode\n                ,closefd=should_close_out_file\n                )\n            if (should_close_out_file):\n                out_file = out_io\n\n            in_csv = csv.reader(\n                in_io\n                ,delimiter=input_delimiter\n                ,lineterminator=input_row_terminator\n                )\n            out_csv = csv.writer(\n                out_io\n                ,delimiter=output_delimiter\n                ,lineterminator=output_row_terminator\n                )\n            execute(\n                in_csv\n                ,out_csv\n                ,input_row_terminator\n                ,output_row_terminator\n                ,input_row_start_offset\n                ,input_row_count_max\n                ,output_row_count_max\n                ,head_row\n                )\n        except BrokenPipeError:\n            pass\n        finally:\n            if (None != in_file):\n                in_file.close()\n                in_file = None\n            if (None != out_file):\n                out_file.close()\n                out_file = None\n\ndef execute(\n    in_csv\n    ,out_csv\n    ,input_row_terminator\n    ,output_row_terminator\n    ,in_row_offset_start\n    ,in_row_count_max\n    ,out_row_count_max\n    ,new_head_row\n):\n    # first write the new row\n    out_csv.writerow(new_head_row)    \n    \n    # then write the output using the csv-translate code\n    # [20170918 [db] This is just a copy of the code from -csv-translate;\n    #  it is a bit overkill to include all of this here]\n    end_row = None\n    cr_newline = '\\r'\n    lf_newline = '\\n'\n    crlf_newline = '\\r\\n'\n    out_newline = output_row_terminator\n    \n    in_row_count = 0\n    out_row_count = 0\n    in_row = next(in_csv, end_row)\n    while (end_row != in_row\n        and (None == in_row_count_max or in_row_count < in_row_count_max)\n        and (None == out_row_count_max or out_row_count < out_row_count_max)\n    ):\n        in_row_count += 1\n        if (in_row_offset_start < in_row_count):\n            out_row = list(in_row)\n            column_count = len(out_row)\n            column_position = 0\n            while (column_position < column_count):\n                cell_value = out_row[column_position]\n                # fix newline characters in the data\n                # (some tools - like postgres - can't handle mixed newline chars)\n                if (None != cell_value):\n                    # replace crlf with lf, then we will replace lf's with the output newline,\n                    #  this prevents us from turning a crlf into a double newline\n                    cell_value = cell_value.replace(crlf_newline, lf_newline)\n                    cell_value = cell_value.replace(cr_newline, lf_newline)\n                    cell_value = cell_value.replace(lf_newline, out_newline)\n                    out_row[column_position] = cell_value\n                column_position += 1\n            out_csv.writerow(out_row)\n            out_row_count += 1\n        in_row = next(in_csv, end_row)\n\n\ndef console_main():\n    main(sys.argv, sys.stdin, sys.stdout, sys.stderr)\n\n        \nif __name__ == \"__main__\":\n    console_main()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\nimport json\n \nurl = '<Your URL>'\n \n# Get the page\npage = requests.get(url)\n\n# Parse the HTML\nsoup = BeautifulSoup(page.content, 'html.parser')\n \n# Scrape the content\ndata = {\n 'title': soup.find(id='firstHeading').text,\n 'content': soup.find(id='mw-content-text').text\n}\n \n# Save as JSON\nwith open('data.json', 'w') as outfile:\n   json.dump(data, outfile) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\ndef most_common_word(text):\n    words = text.split()\n    cnt = Counter()\n    for word in words:\n        cnt[word] += 1\n    return cnt.most_common(1)[0][0]\n\ntext = \"This is an example sentence. The quick brown fox jumps over the lazy dog\"\nprint(most_common_word(text)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_depth(node):\n  if node is None:\n    return 0\n  \n  leftDepth = max_depth(node.left)\n  rightDepth = max_depth(node.right)\n  \n  if leftDepth > rightDepth:\n    return leftDepth + 1\n  else:\n    return rightDepth + 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def switchIndexes(arr): \n    result = [[0 for i in range(len(arr[0]))] for j in range(len(arr))] \n    for i in range(0, len(arr)): \n        for j in range(0, len(arr[0])): \n            result[j][i] = arr[i][j] \n    return result \n\nswitchIndexes(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter\n\ndef on_submit():\n print(user_input.get())\n\n# Create the main window\nroot = tkinter.Tk()\nroot.geometry(\"300x200\")\n\n# Create a textbox\nuser_input = tkinter.Entry(root)\nuser_input.pack()\n\n# Create the submit button\nsubmit_button = tkinter.Button(root, text=\"Submit\", command=on_submit)\nsubmit_button.pack()\n\n# Run the main loop\nroot.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MaxHeap:\n    def __init__(self):\n        self.heap_list = [0]\n        self.current_size = 0\n\n\n    def perc_up(self, i):\n        while i // 2 > 0:\n            if self.heap_list[i] > self.heap_list[i // 2]:\n               self.heap_list[i // 2], self.heap_list[i] = self.heap_list[i], self.heap_list[i // 2]\n            i = i // 2\n\n    def insert(self, k):\n        self.heap_list.append(k)\n        self.current_size = self.current_size + 1\n        self.perc_up(self.current_size)\n\n    def perc_down(self, i):\n        while (i * 2) <= self.current_size:\n            mc = self.max_child(i)\n            if self.heap_list[i] < self.heap_list[mc]:\n                self.heap_list[i], self.heap_list[mc] = self.heap_list[mc], self.heap_list[i]\n            i = mc\n\n    def max_child(self, i):\n        if i * 2 + 1 > self.current_size:\n            return i * 2\n        else:\n            if self.heap_list[i*2] > self.heap_list[i*2+1]:\n                return i * 2\n            else:\n                return i * 2 + 1\n\n    def delete_max(self):\n        retval = self.heap_list[1]\n        self.heap_list[1] = self.heap_list[self.current_size]\n        self.current_size = self.current_size - 1\n        self.heap_list.pop()\n        self.perc_down(1)\n        return retval\n\n    def build_heap(self, alist):\n        i = len(alist) // 2\n        self.current_size = len(alist)\n        self.heap_list = [0] + alist[:]\n        while (i > 0):\n            self.perc_down(i)\n            i = i - 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def handle_corner_cases(input_string):\n    input_string = input_string.lower()\n    if 'heavy' in input_string or 'big' in input_string:\n        return 'Heavy/Big objects detected!'\n    elif 'light' in input_string or 'small' in input_string:\n        return 'Light/Small objects detected!'\n    else:\n        return 'Input not recognized!' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Create a Python program to implement a reinforcement learning agent that utilizes Q-learning for solving an environment with sparse rewards. The algorithm should keep the learning agent in a continuous loop of taking actions, observing rewards and updating the Q-value function to reach the outcome desired. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_path_sum(root):\n    if not root:\n        return 0\n\n    left_sum = max_path_sum(root.left)\n    right_sum = max_path_sum(root.right)\n\n    max_single_val = max(max(left_sum, right_sum) + root.data, root.data)\n\n    max_top = max(max_single_val, left_sum + root.data + right_sum)\n\n    max_path_sum.res = max(max_path_sum.res, max_top)\n\n    return max_single_val\n\nmax_path_sum.res = float('-inf')\nmax_path_sum(root)\nprint (max_path_sum.res) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Sort the dataset according to age\nsorted_dataset = sorted(dataset, key=lambda x: x['age'])\n\n# Output the sorted dataset\nfor record in sorted_dataset:\n print(record)\n\n# Output:\n{'name': 'Benjamin', 'age': 17}\n{'name': 'Adam', 'age': 20}\n{'name': 'Olivia', 'age': 20}\n{'name': 'Sophia', 'age': 19}\n{'name': 'Adam', 'age': 23}\n{'name': 'Noah', 'age': 22}\n{'name': 'Ethan', 'age': 24}\n{'name': 'Mia', 'age': 25}\n{'name': 'Ava', 'age': 26}\n{'name': 'Isabella', 'age': 27}\n{'name': 'John', 'age': 30}\n{'name': 'Jasper', 'age': 30}\n{'name': 'Daniel', 'age': 33}\n{'name': 'Liam', 'age': 35}\n{'name': 'Emma', 'age': 35}\n{'name': 'Charlotte', 'age': 38}\n{'name': 'Eva', 'age': 45}\n{'name': 'Amelia', 'age': 44}\n{'name': 'Eric', 'age': 40}\n{'name': 'Levi', 'age': 40} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_area(n):\n    \"\"\"\n    Calculates the area of an n-sided regular polygon\n    \"\"\"\n    # Calculate the area of the n-sided regular polygon\n    side_length = 1\n    area = (n * side_length**2) / (4 * math.tan(math.pi / n))\n    return round(area, 2)\n\n# Get the number of sides as an input\nn = int(input(\"Enter the number of sides\"))\n\n# Calculate the area and print it\narea = calculate_area(n)\nprint(\"The area of the regular polygon is\", area) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def delete_element(arr, element):\n    if element in arr:\n        arr.remove(element)\n    return arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def parse_words(string):\n    words = []\n\n    for word in string.split(\" \"):\n        words.append(word.strip(\"!,.? \\n\\t\\r\\\"\\'-\"))\n    return words\n\nresult = parse_words(\"Hello, World!\")\nprint(result)\n##\nOutput: ['Hello', 'World'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compute_accuracy(true, pred):\n    correct = 0\n    total = len(true)\n    for i in range(total):\n        if true[i] == pred[i]:\n            correct += 1\n    return correct/total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def celsius_to_fahrenheit(celsius):\n    return celsius * 9/5 + 32\n\ncelsius = float(input(\"Enter the temperature in Celsius: \"))\nfahrenheit = celsius_to_fahrenheit(celsius)\nprint(\"The temperature in Fahrenheit is: \", fahrenheit) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n#Data processing\ndata = pd.read_csv('dataset.csv')\ntrain, test = train_test_split(data,test_size=0.2,random_state=1)\nX_train = train['Sentence'].values\ny_train = train['Sentiment'].values\nX_test = test['Sentence'].values\ny_test = test['Sentiment'].values\n\n#Create a CountVectorizer\ncount_vectorizer = CountVectorizer(stop_words='english')\ncount_train = count_vectorizer.fit_transform(X_train)\ncount_test = count_vectorizer.transform(X_test)\n\n#Train the model\nnb_classifier = MultinomialNB()\nnb_classifier.fit(count_train,y_train)\n\n#Evaluate the model\npredictions = nb_classifier.predict(count_test)\nprint('Accuracy score: ', format(np.mean(predictions==y_test))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_elements(list, start, end):\n    elements_count = 0\n    start_index = list.index(start)\n    end_index = list.index(end)\n    for i in range(start_index + 1, end_index):\n        elements_count += 1\n    return elements_count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        x = 0\n        y = 1\n        for i in range(2, n): \n            z = x+y \n            x = y \n            y = z \n        return z \n  \nfor i in range(1, 11): \n    print(Fibonacci(i)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_sum(n):\n sum = 0\n for i in range(n):\n  if i % 3 == 0 or i % 5 == 0:\n   sum += i\n return sum\n \nprint(calculate_sum(15)) # 42 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndata = {\n 'name': 'John',\n 'age': 34,\n 'hobbies': ['surfing', 'hiking', 'golf']\n}\n\njson_data = json.dumps(data)\n\nprint(json_data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_by_val(mylist, val):\n     return [i for i in mylist if i != val]\n\nmylist = [1,2,3,4,2]\nresult = remove_by_val(mylist, 2)\nprint(\"Updated list after removing elements are: \", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(arr, target): \n  for idx, num in enumerate(arr): \n    if num == target:\n      return idx\n  return -1\n\nidx = search([1, 4, 6, 8, 10], 8)\nprint(idx) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \nfrom bs4 import BeautifulSoup\n\nr = requests.get(\"http://example.com\") \ndata = r.text \nsoup = BeautifulSoup(data, 'html.parser') \n\nfor item in soup.find_all(\"div\"): \n print(item.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_string_to_number(str):\n    try: \n        return int(str)\n    except ValueError:\n        try:\n            return float(str)\n        except ValueError:\n            return \"String could not be converted to number.\"\n\nstr = input(\"String: \")\nprint(\"Number:\", convert_string_to_number(str)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import http.server\nimport socketserver\n\nPORT = 8080\n\nHandler = http.server.SimpleHTTPRequestHandler\n\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n print(\"Serving at port\", PORT)\n httpd.serve_forever() but is not the same. just give one example and only return the code."}
