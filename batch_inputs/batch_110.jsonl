{"prompt": "make some code that functions the same as the following code: # Define set of labels:\nlabels = ['fruit', 'vegetable']\n\n# Read the input data\ninput_data = ['apple', 'carrot', 'tomato', 'cherry']\n\n# Define function to classify the items\ndef classify(data):\n result = []\n\n for item in data:\n  if item in ['apple', 'cherry']:\n   result.append('fruit')\n  else:\n   result.append('vegetable')\n\n return result\n\n# Call the function to classify\nclassified_data = classify(input_data)\n\n# Print the results\nfor item, label in zip(input_data,classified_data):\n print(f'{item} is classified as {label}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combinationSum(nums, target):\n    result = []\n\n    def dfs(cur, index, nums, target, result):\n        \"\"\"\n        cur: current combination of numbers\n        index: start index\n        nums: given array\n        target: given target number\n        \"\"\"\n        if target == 0:\n            result.append(cur[:])\n            return\n        for i in range(index, len(nums)):\n            if nums[i] <= target:\n                cur.append(nums[i])\n                dfs(cur, i, nums, target-nums[i], result)\n                del cur[-1]\n    dfs([], 0, nums, target, result)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def second_largest_num(numbers):\n    largest_num = max(numbers)\n    second_largest = 0\n    for num in numbers:\n        if (num > second_largest and num < largest_num):\n            second_largest = num\n    return second_largest\n\nresult = second_largest_num([2, 1, 4, 5])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_up_to_number(number):\n   sum_number = 0\n   for num in range(1,number+1):\n      sum_number += num\n   return sum_number but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from dialogflow_v2.SessionClient import SessionClient\nfrom dialogflow_v2.Objects import QueryInput, TextInput\n\nsession_client = SessionClient.SessionClient() #create a session\n\ndef get_response(query):\n inputs = QueryInput(text=TextInput(text=query, language_code='en-US'))\n query_result = session_client.detect_intent(session_id=\"1\", query_input=inputs)\n return query_result.query_result.fulfillment_text but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\n# Driver Code \nn = 5\nprint(Fibonacci(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack:\n def __init__(self):\n self.stack = []\n\n def push(self, element):\n self.stack.append(element)\n\n def pop(self):\n if self.stack:\n return self.stack.pop()\n else:\n return None\n\n def size(self):\n return len(self.stack) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linearSearch(arr, x): \n  \n    for i in range(len(arr)): \n  \n        if arr[i] == x: \n            return i \n  \n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_power(number):\n    flag = False\n    if number > 2:\n        for i in range(2, number // 2 + 1):\n            while number % i == 0:\n                if number % (i ** 2) == 0:\n                    flag = True\n                number = number / i\n    \n    return flag\n\nprint(is_power(18)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def celsiusToFahrenheit(celsius):\n return (9/5)*celsius + 32 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Simulate a dice roll by randomly selecting a number between 1 and 6\ndie_roll = random.randint(1, 6)\nprint(\"You rolled a\", die_roll) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\n# ------------------------------\n# importacion\n# ------------------------------\nimport socket, sys, time, ConfigParser\n\ndef poner_mensaje( tipo , mensaje ):\n\t# -----------------------------\n\t# Colocar mensajes con formato\n\t# y marca de tiempo\n\t# -----------------------------\n\tprint time.strftime('%Y-%m-%d-%X') + \" \" + tipo + \": \" + mensaje\n\ndef activar_configuracion():\n\t# ------------------------------\n\t# Variables del servidor desde\n\t# un archivo de configuracion\n\t# ------------------------------\n\tconfiguracion = \"./configuracion/agente-servidor.cfg\"\n\tglobal direccion\n\tglobal puerto\n\tglobal clave\n\ttry:\n\t\tcfg = ConfigParser.ConfigParser()\n\t\tcfg.read([configuracion])\n\t\tpuerto = int(cfg.get('servidor','puerto'))\n\t\tclave = cfg.get('servidor','clave')\n\t\tclientes = cfg.get('servidor','clientes')\n\texcept:\n\t\tponer_mensaje( 'ERROR' , \"No se pudo leer el archivo de configuracion \" + configuracion )\n\t\tponer_mensaje( 'AVISO' , \"Se tomaran los valores por omision: 6470 root\" )\n\t\tpuerto = 6470\n\t\tclave = 'root'\n\nif __name__ == \"__main__\":\n\tactivar_configuracion()\n\t# ------------------------------\n\t# parametros a utilizar\n\t# ------------------------------\n\tif( len(sys.argv) == 3 ):\n\t\tcontinuar = True\n\t\tdireccion =  sys.argv[1]\n\t\tcomando =  sys.argv[2]\n\t\tagente = socket.socket( socket.AF_INET, socket.SOCK_STREAM )\n\t\ttry:\n\t\t\tagente.connect( ( direccion, puerto ) )\n\t\texcept:\n\t\t\tponer_mensaje ( 'ERROR' , \"No se pudo establecer la conexion en la direccion: \"+ direccion +\" con el puerto: \" + str(puerto) )\n\t\t\tcontinuar = False\n\t\tif ( continuar == True ):\n\t\t\tdata, server = agente.recvfrom( 100 )\n\t\t\tponer_mensaje ( 'MENSAJE' , data )\n\t\t\tagente.send( clave )\n\t\t\tdata, server = agente.recvfrom( 100 )\n\t\t\tponer_mensaje ( 'MENSAJE' , data )\n\t\t\tagente.send( comando )\n\t\t\tdata, server = agente.recvfrom( 100 )\n\t\t\tponer_mensaje ( 'MENSAJE' , data )\n\t\t\tagente.close()\n\telse:\n\t\tprint \"--------------------------------------------------------------\"\n\t\tprint \" Tiene que mandar cuatro parametros\"\n\t\tprint \"     agente-servidor.py <direccion> <comando>\"\n\t\tprint \"--------------------------------------------------------------\"\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci_Sequence(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci_Sequence(n-1)+Fibonacci_Sequence(n-2) \n  \nprint(Fibonacci_Sequence(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\nimport requests\n\ndef lambda_handler(event, context):\n\n# Get the city name from the event\n city_name = event['request']['intent']['slots']['city']['value']\n\n# Make an API call for weather data\n response = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={city_name}&appid=<your_app_id_here>')\n response_json = response.json()\n\n# Get temperature, humidity, and wind speed\n temp = response_json['main']['temp']\n humidity = response_json['main']['humidity']\n wind_speed = response_json['wind']['speed']\n\n# Create the response\n response = {\n 'version': '1.0',\n 'response': {\n 'outputSpeech': {\n 'type': 'PlainText',\n 'text': f'The temperature is {temp}, the humidity is {humidity}, and the wind speed is {wind_speed} in {city_name}.'\n }\n }\n }\n\nreturn response but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def average(a, b, c):\n    return (a + b + c) / 3.0\n\nprint(average(1,2,3)) # Output: 2.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def knapsack(weights, values, capacity):\n if len(weights) == 0 or len(values) == 0 or capacity == 0:\n return 0\n \n v = [0 for _ in range(len(weights))]\n for i in range(len(weights)):\n if weights[i] <= capacity:\n v[i] = values[i]\n \n for i in range(len(weights)):\n for c in range(capacity, weights[i] - 1, -1):\n v[i] = max(v[i], values[i] + v[c - weights[i]])\n \n return v[capacity]\n \nweights = [5, 4, 3, 2] \nvalues = [20, 10, 12, 4] \ncapacity = 6\n\nprint(knapsack(weights, values, capacity)) # Prints 24 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_permutation(string1, string2):\n if len(string1) != len(string2):\n return False\n char_map = {}\n for char in string1:\n char_map[char] = char_map.get(char, 0) + 1\n for char in string2:\n if char_map.get(char, 0) == 0:\n return False\n char_map[char] -= 1\n return True\n\nstring1 = \"abc\"\nstring2 = \"cba\"\nprint(is_permutation(string1, string2)) # Output: True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_vowels(word_string):\n    vowels = ('a', 'e', 'i', 'o', 'u') \n    word_string = word_string.lower()\n    for x in word_string:\n        if x in vowels: \n            word_string = word_string.replace(x,\"\")\n             \n    print(word_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to check if a string is a palindrome\ndef is_palindrome(original_string):  \n    reversed_string = original_string[::-1]  \n    if original_string == reversed_string:\n        return True \n    else:\n        return False  \n  \n# Print result\nprint(is_palindrome(original_string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Yes, it is possible to implement a k-nearest neighbor model using Python. The SciKit-Learn library and other effective libraries such as PyKNN, KNeighbors-Classifier, and NearestNeighbors provide various functions and modules for users to implement a k-nearest neighbor model in Python. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/sum\", methods=['GET'])\ndef get_sum():\n    numbers = request.args.getlist('numbers')\n    result = sum([int(num) for num in numbers])\n    return str(result)\n\nif __name__ == \"__main__\":\n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: i = 1\nwhile i <= 10:\n  print(i)\n  i += 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Copyright 2009 Humanitarian International Services Group\n#\n#Licensed under the Apache License, Version 2.0 (the \"License\");\n#you may not use this file except in compliance with the License.\n#You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n#Unless required by applicable law or agreed to in writing, software\n#distributed under the License is distributed on an \"AS IS\" BASIS,\n#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#See the License for the specific language governing permissions and\n#limitations under the License.\n\nfrom mod_python import apache\nimport xml.dom.minidom\nimport utaka.src.core.BucketWithACPAndLog as Bucket\nimport utaka.src.accessControl.BucketACP as BucketACP\nimport utaka.src.accessControl.AcpXml as AcpXml\nimport utaka.src.exceptions.MethodNotAllowedException as MethodNotAllowedException\nimport utaka.src.exceptions.BadRequestException as BadRequestException\n\nclass UtakaBucket:\n\n\tdef __init__(self, utakaReq):\n\t\tself.utakaReq = utakaReq\n\n\tdef handleRequest(self):\n\t\tif 'torrent' in self.utakaReq.subresources:\n\t\t\traise BadRequestException.RequestTorrentOfBucketErrorException()\n\t\tif 'acl' in self.utakaReq.subresources:\n\t\t\tif self.utakaReq.req.method == 'GET':\n\t\t\t\toperation = self.__getAclOperation\n\t\t\telif self.utakaReq.req.method == 'PUT':\n\t\t\t\toperation = self.__putAclOperation\n\t\t\telse:\n\t\t\t\traise MethodNotAllowedException.ACLMethodNotAllowedException(self.utakaReq.req.method)\n\t\telif 'logging' in self.utakaReq.subresources:\n\t\t\tif self.utakaReq.req.method == 'GET':\n\t\t\t\toperation = self.__getLoggingOperation\n\t\t\telif self.utakaReq.req.method == 'PUT':\n\t\t\t\traise MethodNotAllowedException.BucketLogginStatusMethodException\n\t\t\telse:\n\t\t\t\traise MethodNotAllowedException.LoggingStatusMethodNotAllowedException(self.utakaReq.req.method)\n\t\telif self.utakaReq.req.method == 'GET':\n\t\t\toperation = self.__getOperation\n\t\telif self.utakaReq.req.method == 'PUT':\n\t\t\toperation = self.__putOperation\n\t\telif self.utakaReq.req.method == 'DELETE':\n\t\t\toperation = self.__deleteOperation\n\t\telif self.utakaReq.req.method == 'POST':\n\t\t\toperation = self.__postOperation\n\t\telif self.utakaReq.req.method == 'COPY':\n\t\t\toperation = self.__copyOperation\n\t\telse:\n\t\t\traise MethodNotAllowedException.BucketMethodNotAllowedException(self.utakaReq.req.method)\n\t\treturn operation()\n\n\n\tdef __copyOperation(self):\n\t\tpass\n\n\n\tdef __postOperation(self):\n\t\tpass\n\n\n\tdef __deleteOperation(self):\n\t\tresult = Bucket.destroyBucket(bucket=self.utakaReq.bucket, user=self.utakaReq.user)\n\t\tself.utakaReq.req.status = 204\n\n\n\tdef __putOperation(self):\n\t\tcannedACL = self.utakaReq.customHeaderTable.get('acl', 'private')\n\t\tacp = {}\n\t\tacp['owner'] = {'userid':self.utakaReq.user}\n\t\tacl = [{'grantee':{'userid':self.utakaReq.user}, 'permission':'FULL_CONTROL'}]\n\t\tif cannedACL == 'public-read':\n\t\t\tacl.append({'grantee':{'userid':1}, 'permission':'read'})\n\t\telif cannedACL == 'public-read-write':\n\t\t\tacl.append({'grantee':{'userid':1}, 'permission':'read'})\n\t\t\tacl.append({'grantee':{'userid':1}, 'permission':'write'})\n\t\telif cannedACL == 'authenticated-read':\n\t\t\tacl.append({'grantee':{'userid':2}, 'permission':'read'})\n\t\telif cannedACL != 'private':\n\t\t\t'''throw error'''\n\t\tacp['acl'] = acl\n\t\tresult = Bucket.setBucket(bucket = self.utakaReq.bucket, user = self.utakaReq.user, accessControlPolicy = acp)\n\n\n\tdef __getOperation(self):\n\t\tgetBucketParams = {'name':self.utakaReq.bucket}\n\t\tfor param in 'prefix', 'marker', 'max-keys', 'delimiter':\n\t\t\tif param in self.utakaReq.subresources:\n\t\t\t\tgetBucketParams[param] = self.utakaReq.subresources[param][0]\n\t\tif 'max-keys' not in getBucketParams:\n\t\t\tgetBucketParams['max-keys'] = 1000\n\t\tres = Bucket.getBucket(bucket = self.utakaReq.bucket, user = self.utakaReq.user,\n\t\t\t\t\tprefix = getBucketParams.get('prefix'), marker = getBucketParams.get('marker'),\n\t\t\t\t\tmaxKeys = getBucketParams.get('max-keys'), delimiter = getBucketParams.get('delimiter'))\n\t\tgetBucketParams['isTruncated'] = str(res[2])\n\t\tself.utakaReq.req.content_type = 'application/xml'\n\t\tself.utakaReq.write(self.__getXMLResponse(getBucketParams, res[0], res[1]))\n\n\tdef __putLoggingOperation(self):\n\t\tpass\n\n\n\tdef __getLoggingOperation(self):\n\t\tBucket.getBucketLogStatus(user=self.utakaReq.user, bucket=self.utakaReq.bucket)\n\n\n\n\tdef __putAclOperation(self):\n\t\t#READ BODY\n\t\tacp = AcpXml.fromXML(self.utakaReq.req.read())\n\t\tBucket.setBucketACP(user=self.utakaReq.user, bucket=self.utakaReq.bucket, accessControlPolicy=acp)\n\t\tpass\n\n\n\tdef __getAclOperation(self):\n\t\tbucket_acp = Bucket.getBucketACP(bucket=self.utakaReq.bucket, user=self.utakaReq.user)\n\t\tif len(bucket_acp) == 0:\n\t\t\t'''bucket not found, throw error'''\n\t\telse:\n\t\t\tself.utakaReq.req.content_type = 'applicaton/xml'\n\t\t\tself.utakaReq.write(AcpXml.toXML(bucket_acp))\n\n\n\tdef __getXMLResponse(self, bucketDictionary, contentDictionaryList, commonPrefixesList):\n\n\t\tdoc = xml.dom.minidom.Document()\n\t\tlistBucketEl = doc.createElement(\"ListBucketResult\")\n\t\tlistBucketEl.setAttribute('xmlns', 'http://s3.amazonaws.com/doc/2006-03-01/')\n\n\t\tnameEl = doc.createElement(\"Name\")\n\t\tnameEl.appendChild(doc.createTextNode(bucketDictionary.get('name')))\n\t\tlistBucketEl.appendChild(nameEl)\n\n\t\tprefixEl = doc.createElement(\"Prefix\")\n\t\tprefixEl.appendChild(doc.createTextNode(bucketDictionary.get('prefix', '')))\n\t\tlistBucketEl.appendChild(prefixEl)\n\n\t\tmarkerEl = doc.createElement(\"Marker\")\n\t\tmarkerEl.appendChild(doc.createTextNode(bucketDictionary.get('marker', '')))\n\t\tlistBucketEl.appendChild(markerEl)\n\n\t\tmaxkeysEl = doc.createElement(\"MaxKeys\")\n\t\tmaxkeysEl.appendChild(doc.createTextNode(str(bucketDictionary.get('max-keys', ''))))\n\t\tlistBucketEl.appendChild(maxkeysEl)\n\n\t\ttruncatedEl= doc.createElement(\"IsTruncated\")\n\t\ttruncatedEl.appendChild(doc.createTextNode(bucketDictionary.get('isTruncated', '')))\n\t\tlistBucketEl.appendChild(truncatedEl)\n\n\t\tfor val in contentDictionaryList:\n\t\t\tcontentsEl = doc.createElement(\"Contents\")\n\t\t\tkeyEl = doc.createElement(\"Key\")\n\t\t\tkeyEl.appendChild(doc.createTextNode(val['key']))\n\t\t\tcontentsEl.appendChild(keyEl)\n\n\t\t\tlastModifiedEl = doc.createElement(\"LastModified\")\n\t\t\tlastModifiedEl.appendChild(doc.createTextNode(val['lastModified']))\n\t\t\tcontentsEl.appendChild(lastModifiedEl)\n\n\t\t\teTagEl = doc.createElement(\"ETag\")\n\t\t\teTagEl.appendChild(doc.createTextNode(val['eTag']))\n\t\t\tcontentsEl.appendChild(eTagEl)\n\n\t\t\tsizeEl = doc.createElement(\"Size\")\n\t\t\tsizeEl.appendChild(doc.createTextNode(str(val['size'])))\n\t\t\tcontentsEl.appendChild(sizeEl)\n\n\t\t\tstorageClassEl = doc.createElement(\"StorageClass\")\n\t\t\tstorageClassEl.appendChild(doc.createTextNode(\"STANDARD\"))\n\t\t\tcontentsEl.appendChild(storageClassEl)\n\n\t\t\townerEl = doc.createElement(\"Owner\")\n\t\t\townerIdEl = doc.createElement(\"ID\")\n\t\t\townerIdEl.appendChild(doc.createTextNode(str(val['owner']['id'])))\n\t\t\townerNameEl = doc.createElement(\"DisplayName\")\n\t\t\townerNameEl.appendChild(doc.createTextNode(val['owner']['name']))\n\t\t\townerEl.appendChild(ownerIdEl)\n\t\t\townerEl.appendChild(ownerNameEl)\n\t\t\tcontentsEl.appendChild(ownerEl)\n\t\t\tlistBucketEl.appendChild(contentsEl)\n\n\t\tif commonPrefixesList:\n\t\t\tcommonPrefixesEl = doc.createElement(\"CommonPrefixes\")\n\t\t\tfor val in commonPrefixesList:\n\t\t\t\tcommonPrefixEl = doc.createElement(\"Prefix\")\n\t\t\t\tcommonPrefixEl.appendChild(doc.createTextNode(val))\n\t\t\t\tcommonPrefixesEl.appendChild(commonPrefixEl)\n\t\t\tlistBucketEl.appendChild(commonPrefixesEl)\n\n\t\tdoc.appendChild(listBucketEl)\n\t\treturn doc.toxml('utf-8') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize_array(array):\n    optimized_array = []\n    prev = -float(\"inf\")\n    for n in array:\n        if(n>=prev):\n            optimized_array.append(n)\n            prev = n\n    return optimized_array\n\narray = [7, 2, 5, 8, 4, 0]\nprint(optimize_array(array))\n# Output: [7, 5, 8, 4] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_sorted(array):\n    for i in range(len(array)-1):\n        if array[i] > array[i+1]:\n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndata = json.loads('{ \"name\": \"Adam\", \"age\": 24, \"city\": \"New York\" }')\n\nprint(\"Name: \", data['name']) \nprint(\"Age: \", data['age']) \nprint(\"City: \", data['city']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python2\n#\n# This file is part of Archivematica.\n#\n# Copyright 2010-2012 Artefactual Systems Inc. <http://artefactual.com>\n#\n# Archivematica is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Archivematica is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Archivematica.    If not, see <http://www.gnu.org/licenses/>.\n\n# @package Archivematica\n# @subpackage archivematicaClientScript\n# @author Joseph Perry <joseph@artefactual.com>\n# @version svn: $Id$\n\n#/src/dashboard/src/main/models.py\n\nimport collections\nimport csv\nimport os\nimport sys\nimport traceback\n# archivematicaCommon\nimport archivematicaFunctions\nfrom custom_handlers import get_script_logger\nfrom sharedVariablesAcrossModules import sharedVariablesAcrossModules\n\n\ndef parseMetadata(SIPPath):\n    \"\"\"\n    Parse all metadata.csv files in SIPPath.\n\n    Looking for metadata.csvs in metadata/ and\n    objects/metadata/transfers/<transfer name>/metadata/\n\n    See parseMetadataCSV for details on parsing.\n\n    :param SIPPath: Path to the SIP\n    :return: {<filename>: OrderedDict(key: [values]) }\n    \"\"\"\n    all_metadata = {}\n    metadata_csvs = archivematicaFunctions.find_metadata_files(SIPPath, 'metadata.csv')\n\n    for metadataCSVFilePath in metadata_csvs:\n        try:\n            csv_metadata = parseMetadataCSV(metadataCSVFilePath)\n        except Exception:\n            print >>sys.stderr, \"error parsing: \", metadataCSVFilePath\n            traceback.print_exc(file=sys.stderr)\n            sharedVariablesAcrossModules.globalErrorCount += 1\n            continue\n        # Provide warning if this file already has differing metadata\n        # Not using all_metadata.update(csv_metadata) because of that\n        for entry, values in csv_metadata.iteritems():\n            if entry in all_metadata and all_metadata[entry] != values:\n                print >> sys.stderr, 'Metadata for', entry, 'being updated. Old:', all_metadata[entry], 'New:', values\n            existing = all_metadata.get(entry, collections.OrderedDict())\n            existing.update(values)\n            all_metadata[entry] = existing\n\n    return all_metadata\n\n\ndef parseMetadataCSV(metadataCSVFilePath):\n    \"\"\"\n    Parses the metadata.csv into a dict with entries for each file.\n\n    Each file's entry is an OrderedDict containing the column header and a list of values for each column.\n\n    Example CSV:\n    Filename,dc.title,dc.type,dc.type,Other metadata\n    objects/foo.jpg,Foo,Photograph,Still Image,Taken on a sunny day\n    objects/bar/,Bar,Photograph,Still Image,All taken on a rainy day\n\n    Produces:\n    {\n        'objects/foo.jpg': OrderedDict(dc.title=[Foo], dc.type=[Photograph, Still Image], Other metadata=[Taken on a sunny day])\n        'objects/bar': OrderedDict(dc.title=[Bar], dc.date=[Photograph, Still Image], Other metadata=[All taken on a rainy day])\n    }\n\n    :param metadataCSVFilePath: Path to the metadata CSV to parse\n    :return: {<filename>: OrderedDict(<metadata name>: [<metadata value>]) }\n    \"\"\"\n    metadata = {}\n    # use universal newline mode to support unusual newlines, like \\r\n    with open(metadataCSVFilePath, 'rbU') as f:\n        reader = csv.reader(f)\n        # Parse first row as header\n        header = reader.next()\n        # Strip filename column, strip whitespace from header values\n        header = [h.strip() for h in header[1:]]\n        # Parse data\n        for row in reader:\n            if not row:\n                continue\n            entry_name = row[0]\n            if entry_name.endswith(\"/\"):\n                entry_name = entry_name[:-1]\n            # Strip file/dir name from values\n            row = row[1:]\n            values = archivematicaFunctions.OrderedListsDict(zip(header, row))\n            if entry_name in metadata and metadata[entry_name] != values:\n                print >> sys.stderr, 'Metadata for', entry_name, 'being overwritten. Old:', metadata[entry_name], 'New:', values\n            metadata[entry_name] = values\n\n    return collections.OrderedDict(metadata)  # Return a normal OrderedDict\n\n\nif __name__ == '__main__':\n    logger = get_script_logger(\"archivematica.mcp.client.createMETSMetadataCSV\")\n\n    parseMetadata(sys.argv[1])\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\n\ndate_str = \"21 October 2020\"\ndate = datetime.datetime.strptime(date_str, \"%d %B %Y\")\nprint(date.strftime(\"%A\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def smallestCommonMultiple(n1, n2):\n n1_factors = set(getFactors(n1));\n n2_factors = set(getFactors(n2));\n\n # Get the union of the two sets,\n # then find the product of the union set\n scm = 1;\n for factor in n1_factors.union(n2_factors):\n  scm *= factor;\n\n return scm;\n\n# A method to return the factors of a number\ndef getFactors(n):\n factors = [];\n for i in range(2, n+1):\n  if n % i == 0:\n   factors.append(i);\n   n //= i;\n\n return factors;\n\n# Testing\nprint(smallestCommonMultiple(9, 12)) # Outputs 36 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Tree:\n def __init__(self, data=None):\n self.data = data\n self.children = []\n\n def add_child(self, obj):\n self.children.append(obj)\n\n def remove_child(self, obj):\n self.children.remove(obj)\n\n\nroot = Tree('root')\nnode1 = Tree('node1')\nnode2 = Tree('node2')\n\nroot.add_child(node1)\nroot.add_child(node2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n \ndef maxDepth(node):\n    if node is None:\n        return 0\n    else:\n        leftDepth = maxDepth(node.left)\n        rightDepth = maxDepth(node.right)\n \n        if leftDepth > rightDepth:\n            return leftDepth+1\n        else:\n            return rightDepth+1\n \nif __name__ == '__main__':\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    print(maxDepth(root)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_all(nums):\n    sum = 0\n    for i in range(len(nums)):\n        sum += sum(nums[:i+1])\n    return sum\n\n#Test\nprint(sum_of_all([2, 3, 4, 5, 6])) # Output: 20 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python2\n# -*- coding: utf-8 -*-\n\"\"\"\n    Blockstack\n    ~~~~~\n    copyright: (c) 2014-2015 by Halfmoon Labs, Inc.\n    copyright: (c) 2016 by Blockstack.org\n\n    This file is part of Blockstack\n\n    Blockstack is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    Blockstack is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n    You should have received a copy of the GNU General Public License\n    along with Blockstack. If not, see <http://www.gnu.org/licenses/>.\n\"\"\" \n\nimport testlib \nimport json\nimport virtualchain\n\nwallets = [\n    testlib.Wallet( \"5JesPiN68qt44Hc2nT8qmyZ1JDwHebfoh9KQ52Lazb1m1LaKNj9\", 100000000000 ),\n    testlib.Wallet( \"5KHqsiU9qa77frZb6hQy9ocV7Sus9RWJcQGYYBJJBb2Efj1o77e\", 100000000000 ),\n    testlib.Wallet( \"5Kg5kJbQHvk1B64rJniEmgbD83FpZpbw2RjdAZEzTefs9ihN3Bz\", 100000000000 ),\n    testlib.Wallet( \"5JuVsoS9NauksSkqEjbUZxWwgGDQbMwPsEfoRBSpLpgDX1RtLX7\", 100000000000 ),\n    testlib.Wallet( \"5KEpiSRr1BrT8vRD7LKGCEmudokTh1iMHbiThMQpLdwBwhDJB1T\", 100000000000 )\n]\n\nconsensus = \"17ac43c1d8549c3181b200f1bf97eb7d\"\n\ndef scenario( wallets, **kw ):\n\n    testlib.blockstack_namespace_preorder( \"test\", wallets[1].addr, wallets[0].privkey )\n    testlib.next_block( **kw )\n\n    testlib.blockstack_namespace_reveal( \"test\", wallets[1].addr, 52595, 250, 4, [6,5,4,3,2,1,0,0,0,0,0,0,0,0,0,0], 10, 10, wallets[0].privkey )\n    testlib.next_block( **kw )\n\n    resp = testlib.blockstack_name_import( \"foo.test\", wallets[2].addr, \"11\" * 20, wallets[1].privkey )\n    if 'error' in resp:\n        print json.dumps(resp, indent=4 )\n\n    testlib.next_block( **kw )\n\n    resp = testlib.blockstack_name_import( \"foo.test\", wallets[3].addr, \"22\" * 20, wallets[1].privkey )\n    if 'error' in resp:\n        print json.dumps(resp, indent=4 )\n\n    testlib.next_block( **kw )\n\n    resp = testlib.blockstack_name_import( \"foo.test\", wallets[4].addr, \"44\" * 20, wallets[1].privkey )\n    resp = testlib.blockstack_name_import( \"foo.test\", wallets[4].addr, \"55\" * 20, wallets[1].privkey )\n    resp = testlib.blockstack_name_import( \"foo.test\", wallets[4].addr, \"33\" * 20, wallets[1].privkey )\n    if 'error' in resp:\n        print json.dumps(resp, indent=4 )\n\n    testlib.next_block( **kw )\n    \n    testlib.blockstack_namespace_ready( \"test\", wallets[1].privkey )\n    testlib.next_block( **kw )\n\n\ndef check( state_engine ):\n\n    # not revealed, but ready \n    ns = state_engine.get_namespace_reveal( \"test\" )\n    if ns is not None:\n        return False \n\n    ns = state_engine.get_namespace( \"test\" )\n    if ns is None:\n        return False \n\n    if ns['namespace_id'] != 'test':\n        return False \n\n    # each name must exist \n    foo = state_engine.get_name( \"foo.test\" )\n\n    if foo is None:\n        return False\n\n    if foo['value_hash'] != \"33\" * 20:\n        return False\n\n    if foo['address'] != wallets[4].addr or foo['sender'] != virtualchain.make_payment_script(wallets[4].addr):\n        return False \n    \n    return True\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def encrypt_string(word):\n    vowels = ('a', 'e', 'i', 'o', 'u') \n    encrypted_word = \"\"\n    for ch in word: \n        if ch in vowels:\n            if ch == \"u\":\n                encrypted_word += \"a\"\n            else:\n                encrypted_word += chr(ord(ch) + 1) \n        else:\n            encrypted_word += ch\n    return encrypted_word\n\nword = \"python\"\nprint(encrypt_string(word)) \n\n# Output:\n# 'pythun' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n    def __init__(self, data):\n        self.data = data\n        self.prev = None\n        self.next = None\n\nclass DLinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def add(self, data):\n        node = Node(data)\n        if self.head is None:\n            self.head = node\n        else:\n            self.tail.next = node\n            node.prev = self.tail\n        self.tail = node\n\n    def delete(self, node):\n        if node.prev is not None:\n            node.prev.next = node.next\n        else:\n            self.head = node.next\n        if node.next is not None:\n            node.next.prev = node.prev\n        else:\n            self.tail = node.prev but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Traceback (most recent call last):\n  File \"code.py\", line 6, in <module>\n    foo(10, 0)\n  File \"code.py\", line 3, in foo\n    return x/y\nZeroDivisionError: division by zero but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def nth_prime(n):\n primes = [2]\n\nnum = 3\nwhile len(primes) < n:\n isPrime = True\n for prime in primes:\n if num % prime == 0:\n isPrime = False\n break\n if isPrime:\n primes.append(num)\n num += 2\n\nreturn primes[n-1]\n\n#Example\nprint(nth_prime(100)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\nimport requests\n\ndef extract_email_addresses(url):\n    r = requests.get(url)\n    emails = re.findall(r\"[a-z0-9\\.\\-+_]+@[a-z0-9\\.\\-+_]+\\.[a-z]+\", r.text)\n    return emails\n\nemail_list = extract_email_addresses('https://example.org')\n\nfor email in email_list:\n    print(email) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_string(string):\n    if len(string) < 3:\n        return \"Short\" \n    elif string.isalpha():\n        return \"Alphabet\" \n    elif string.isnumeric():\n        return \"Numeral\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def repeat_char(s):\n    result = ''\n    for i,c in enumerate(s):\n        if i % 2 == 0:\n            result += c\n        else:\n            result += c*2\n    return result\n\nprint(repeat_char('HelloWorld'))\n# Output: HeellooWorrlld but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def split_list(data):\n    # Calculate the length of data\n    length = len(data)\n    # calculate the midpoint of the list \n    midpoint = length//2\n    \n    # split the data into two halves \n    first_half = data[:midpoint]\n    second_half = data[midpoint:]\n    \n    return first_half, second_half\n    \nsplit_list([1, 2, 3, 4, 5]) # Returns ([1, 2], [3, 4, 5]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_numbers(list_of_numbers):\n    for number in list_of_numbers:\n        try:\n            if number % 3 == 0:\n                print('Number {} is divisible by 3'.format(number))\n        except ZeroDivisionError:\n            print('Number {} cannot be divided by 3: division by zero bug'.format(number)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortAscending(list): \n    list.sort() \n    return list\n  \n# Driver Code \nlist = [5, 3, 7, 2, 4, 9, 1]  \nprint(sortAscending(list)) \n\n# Output: [1, 2, 3, 4, 5, 7, 9] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom lxml import html\n\nurl = \"http://example.com\"\nr = requests.get(url)\ntree = html.fromstring(r.content)\n\n# Scrape table with results\ntable = tree.xpath('//table[@id=\"results-table\"]')[0]\n\n# Access table entries\nrows = table.xpath('.//tr')\nfor row in rows:\n    cells = row.xpath('.//td')\n    for cell in cells:\n        print(cell.text_content()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortList(lst): \n    lst.sort(key = lambda x: x[0]) \n    return lst \n  \nresult = sortList([[2, 4, 6], [1, 9, 8], [3, 7, 5]]) \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_substring(string):\n    # Keep track of the longest substring\n    longest_substring = \"\"\n    start_index = 0\n  \n    # Iterate over each letter in the string\n    for current_index in range(len(string)):\n        # Check if the current letter has occurred before in the substring\n        if string[current_index] in string[start_index:current_index]:\n            # If so, the previous substring is no longer valid\n            start_index = current_index\n        # Check if the current substring is longer than the longest\n        longest_substring = max(longest_substring, string[start_index:current_index+1], key=len)\n  \n    return longest_substring but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ClickCounter:\n    def __init__(self):\n        self.click_count = 0\n\n    def record_click(self):\n        self.click_count += 1\n\n    def get_click_count(self):\n        return self.click_count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class FibonacciSeries:\n    '''This class will generate a Fibonacci series'''\n\n    def __init__(self, length):\n        self.length = length\n        self.series = []\n\n    def generate_series(self):\n        '''Generates a Fibonacci series of a given length'''\n        a = 0\n        b = 1\n        while len(self.series) < self.length:\n            c = a + b\n            self.series.append(c)\n            a, b = b, c   # Parallel Assignment \n        \nif __name__ == '__main__':\n    fibonacci_series = FibonacciSeries(10)\n    fibonacci_series.generate_series()\n    print(fibonacci_series.series) # Output: [1, 1, 2, 3, 5, 8, 13, 21, 34, 55] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: text = \"The best way to learn a programming language is to practice coding.\"\nwords = text.split()\n\nkeywords = [\"for\", \"if\", \"while\", \"in\", \"range\", \"def\", \"import\", \"from\", \"as\", \"return\"]\n\nfor word in words:\n    if word in keywords:\n        print(word) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [\"apple\",\"orange\",\"banana\",\"grapes\",\"Mango\"]\n\n# function to search elements in given array\ndef searchElement(arr, val): \n    for i in range(len(arr)): \n        if arr[i] == val: \n            return i \n    return -1\n    \n# function to sort array in ascending order\ndef sortArray(arr): \n    n = len(arr) \n    for i in range(n): \n        for j in range(0, n - i - 1): \n            if arr[j] > arr[j+1]: \n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    \n# function to filter even elements\ndef filterElement(arr): \n    for i in range(len(arr)):\n        if(arr[i] % 2 == 0):\n            arr.remove(arr[i])\n  \n# Driver Code \nval = 'grapes'\nindex = searchElement(list, val) \nif index != -1: \n    print(\"%s is present at index %d\" %(val, index)) \nelse: \n    print(\"%s is not present\" %val) \n    \nprint(\"Unsorted array:\", list)\n\nsortArray(list)\nprint(\"Sorted array:\", list)\n\nfilterElement(list)\nprint(\"Filtered array:\", list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_longest_subarray_length(arr):\n    s = 0\n    e = 0\n    max_length = 0\n    while e < len(arr):\n        if arr[e] == 1:\n            e += 1\n        else:\n            num_ones = e - s\n            num_zeros = 1\n            while e < len(arr) and arr[e] == 0:\n                num_zeros += 1\n                e += 1\n            if num_ones == num_zeros:\n                max_length = max(max_length, (num_ones + num_zeros))\n            s = e\n    return max_length but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\nbot_greeting = \"Hello! I am a bot. I'm here to help you.\"\nbot_unknown = \"I'm sorry, I don't understand. Please ask me something else.\"\n\ndef respond(message):\n    if \"hi\" in message.lower():\n        return bot_greeting\n    elif \"how are you\" in message.lower():\n        return \"I'm doing well, thanks for asking!\"\n    elif \"what can you do\" in message.lower():\n        return \"I can answer questions about myself, like who created me or what language I'm written in.\"\n    elif re.search(\"[Aa]re you .*\", message):\n        return \"I'm just a bot, so I don't have feelings.\"\n    else:\n        return bot_unknown but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import flask\n\napp = flask.Flask(__name__)\n\n# Create routes and functions for the web application\n@app.route('/')\ndef index():\n    return 'This is the main page of the web application!' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: upper_limit = 10\n\nfibonacci_sequence = [0, 1]\n\na = 0\nb = 1\n\nwhile b <= upper_limit:\n c = a + b\n a = b\n b = c\n fibonacci_sequence.append(b)\n\nprint(fibonacci_sequence) # Output: [0, 1, 1, 2, 3, 5, 8, 13] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python3\n#\n# Copyright {{ cookiecutter.author_name }}, {{ cookiecutter.initial_year_to_release }}\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"\n{{ cookiecutter.package_name }}.cli\n-----------------------------------\n\nEntry for the `{{ cookiecutter.package_name }}` CLI.\n\n\"\"\"\n\nimport sys\nimport argparse\n\nfrom {{ cookiecutter.package_name }} import __version__\n\nfrom {{ cookiecutter.package_name }}.utils.environment import python_version\n\nfrom {{ cookiecutter.package_name }}.api.greetings import Greetings\nfrom {{ cookiecutter.package_name }}.api.greetings import howdy_greeting\n\n\ndef main(argv=sys.argv):\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        \"-V, --version\", help=\"show the version and exit\", action=\"version\",\n        version=\"%(prog)s: version {version} (Python {pyversion})\".format(version=__version__, pyversion=python_version()))\n\n    parser.add_argument(\n        \"-c, --cowboy\", help=\"cowboy greeting\",\n        action=\"store_true\", dest=\"iscowboy\",\n        default=False)\n\n    args = parser.parse_args()\n\n    # Do some meaningful ...\n    if args.iscowboy:\n        print(howdy_greeting())\n    else:\n        greetings = Greetings()\n        print(greetings)\n\n    return 0\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\nstring = \"The quick brown fox jumped over the lazy dog.\"\nwords = string.split()\nword_counts = Counter(words)\n\nunique_words = set(words)\n\nfor word in unique_words:\n    print(f\"{word:15} {word_counts[word]:3}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: val = [1, 10, 125, 400]\nres = []\n\nfor v in reversed(val):\n    res.append(v)\n    \nprint(res) # Output: [400, 125, 10,1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Roman(number):\n roman = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD',\n100: 'C', 90: 'XC', 50: 'L', 40: 'XL',\n 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n result = ''\n\n for num in roman.keys():\n while number >= num:\n result += roman[num]\n number -= num\n\n print (result) \n\nnumber = int(input('Enter a number: '))\nRoman(number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gradient_descent(objective_function, gradients, learning_rate, initial_parameters):\n    parameters = initial_parameters\n    while True:\n        # Step 1: Calculate Gradient\n        grads = gradients(parameters)\n        \n        # Step 2: Update parameters\n        parameters -= learning_rate * grads\n        \n        # Step 3: Check stopping criteria\n        if np.allclose(grads, 0):\n            break\n    return parameters but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_power_of_two(x):\n  while x % 2 == 0 and x > 1:\n    x = x / 2\n  return x == 1\n\nnum = 16\n\nprint(is_power_of_two(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #importing libraries\nimport pulp\n\n#creating array\nstocks = [\"a\", \"b\", \"c\"]\n\n#creating problem\nprob = pulp.LpProblem(\"Maximise Profit\", pulp.LpMaximize)\n\n#creating variables\nx = pulp.LpVariable.dicts(\"number of stocks\", stocks, lowBound=0)\n\n#creating objective function\nprob += pulp.lpSum([200*x[\"a\"], 150*x[\"b\"], 250*x[\"c\"]]), \"Maximizing Profit\"\n\n#constraints\nprob += x[\"a\"] + x[\"b\"] + x[\"c\"] <= 4, \"Total Cost\"\nprob += x[\"a\"] * 300 + x[\"b\"] * 250 + x[\"c\"] * 250 <= 1000, \"Investment Cost\"\n\n#solving problem\nprob.solve()\n\n#printing results\nfor stock in stocks:\n print(\"Number of\", stock, \"stocks bought:\", pulp.value(x[stock]))\n\n#printing total profit\nprint(\"Total Profit:\", pulp.value(prob.objective)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.cluster import KMeans\n\n# load and prepare the data\ndata = pd.read_csv('iris.csv')\nX = data.iloc[:, :-1].values\n\n# apply K-Means clustering\nkmeans = KMeans(n_clusters = 3, init = 'k-means++', random_state=0)\npred_y = kmeans.fit_predict(X)\n\n# visualise the clusters\nplt.scatter(X[pred_y == 0, 0], X[pred_y == 0, 1], s = 100, c = 'red', label = 'Iris-setosa')\nplt.scatter(X[pred_y == 1, 0], X[pred_y == 1, 1], s = 100, c = 'blue', label = 'Iris-versicolor')\nplt.scatter(X[pred_y == 2, 0], X[pred_y == 2, 1], s = 100, c = 'green', label = 'Iris-virginica')\n\n# plot centroids\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 200, c = 'yellow', label = 'Centroids')\n\nplt.legend()\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python code to identify word is palindrome or not \n  \nword = 'radar'\n  \n# Reversing a word \nrev_word = word[::-1] \n  \n# checking if the word is equal to its reverse \nif (word == rev_word): \n    print(\"The word is a palindrome.\") \nelse: \n    print(\"The word is not a palindrome.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n    if request.method == 'POST':\n        animal = request.form['animal'];\n        \n        if animal == 'Lion':\n            description = 'The lion is a large mammal of the family Felidae. It is a formidable and famous predator of the African savanna. It has a majestic presence and strength.'\n        else:\n            description = 'No description available.'\n        return render_template(\"index.html\", description=description)\n    \n    return render_template(\"index.html\")\n\nif __name__ == \"__main__\":\n    app.run()\n\n# index.html content\n\n<h1>Animal Description</h1>\n\n<form method=\"post\">\n <p>Enter the Animal name: <input type=\"text\" name=\"animal\" /></p>\n    <input type=\"submit\" value=\"Submit\" />\n</form>\n\n<p>{{ description }}</p> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Course:\n    def __init__(self, title, description, rating):\n        self.title = title\n        self.description = description\n        self.rating = rating\n    \n    def get_title(self):\n        return self.title\n    \n    def get_description(self):\n        return self.description\n    \n    def get_rating(self):\n        return self.rating but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def normalize_string(text):\n\ttext = text.lower()\n\ttext = ''.join(ch for ch in text if ch.isalnum() or ch == ' ')\n\treturn text but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers = [1, 2, 3, 4, 5]\n\nnew_numbers = [n * 2 for n in numbers] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n \n# Make a get request to get the latest position of the International Space Station\nresponse = requests.get(\"http://api.open-notify.org/iss-now.json\")\n \n# Print the status code of the response\nprint(response.status_code) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def asterisk_triangle(n):\n    for i in range(n):\n        for j in range(i+1):\n            print('*', end=\" \")\n        print()\n\nn = 5\nasterisk_triangle(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def normalize(string):\n    return string.lower().strip() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The function is correct but the parameter names could be more descriptive.\nFor example, 'item_cost' could be 'price' and 'tax_rate' could be 'tax_percentage'.\n\nAnother bug is that the function does not round the result to the nearest hundredth. This could cause the result to be slightly inaccurate. To fix this, add a call to the 'round()' function.\n\ndef calculate_tax(price, tax_percentage):\n    return round(price * (1 + tax_percentage), 2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nURL = 'https://www.amazon.com/'\npage = requests.get(URL)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n#find all products\nproducts = soup.find_all('span', class_ = 'a-size-medium a-color-base a-text-normal')\n\n#  iterate through products\nfor product in products:\n    # find product title, price, etc. \n    title = product.find('span', class_ = 'a-size-medium a-color-base a-text-normal')\n    price = product.find('span', class_ = 'a-price-whole')\n\n    print(title.text)\n    print(price.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: s = 'Google'\n# improved code\n# use of built-in functions to count the number of occurrences of 'o' in a string\ncount = s.count('o')\n\nprint('Number of occurrences of \"o\": {}'.format(count)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_numbers():\n    for i in range(1, 11):\n        print(i)\n\nprint_numbers() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name, age, gender, major, gpa):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.major = major\n        self.gpa  = gpa\n    \n    def print_student_info(self):\n        print(\"Name: {}\".format(self.name))\n        print(\"Age: {}\".format(self.age))\n        print(\"Gender: {}\".format(self.gender))\n        print(\"Major: {}\".format(self.major))\n        print(\"GPA: {}\".format(self.gpa)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add(num1, num2): \n    sum = num1 + num2 \n    print(sum) \n  \n# Driver code \nnum1 = int(input(\"Enter num1: \")) \nnum2 = int(input(\"Enter num2: \")) \nadd(num1, num2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Door:\n    #Initializing a door with default values\n    def __init__(self, is_open=False, color=\"brown\", material=\"wood\"):\n        self.is_open = is_open\n        self.color = color\n        self.material = material\n\n    #Function to open door \n    def open_door(self):\n        self.is_open = True\n\n    #Function to close door \n    def close_door(self):\n        self.is_open = False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node: \n    def __init__(self, key): \n        self.key = key  \n        self.left = None\n        self.right = None\n  \ndef buildTree(inorder, postorder, inStrt, inEnd): \n  \n    if (inStrt > inEnd): \n        return None\n  \n    node = Node(postorder[buildTree.postIndex]) \n    buildTree.postIndex -= 1\n  \n    if inStrt == inEnd: \n        return node \n  \n    else: \n        inIndex = search(inorder, inStrt, inEnd, node.key) \n  \n        node.right = buildTree(inorder, postorder, inIndex + 1, inEnd) \n        node.left = buildTree(inorder, postorder, inStrt, inIndex - 1) \n  \n        return node \n  \ndef search(arr, start, end, value): \n    for i in range(start, end + 1): \n        if arr[i] == value: \n            return i \n  \ndef printInorder(node): \n    if node is None: \n        return\n  \n    printInorder(node.left) \n    print(node.key, end=\" \") \n    printInorder(node.right) \n  \ninStrt = 0\ninEnd = len(inorder) - 1\nbuildTree.postIndex = len(postorder) - 1\nroot = buildTree(inorder, postorder, inStrt, inEnd) \nprint(\"Inorder traversal of the constructed tree: \") \nprintInorder(root) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubbleSort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_divisors(n):\n    '''Returns the sum of all divisors of the given number.'''\n    if n <= 1:\n        return 0\n    #assume n is a positive integer\n    sum_divisors = 1\n    for i in range(2, int(n/2)+1):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n \ndef predict(x, params):\n x = np.array(x)\n params = np.array(params)\n \n y = 0\n for i in range(params.shape[0]):\n y += params[i] * x ** i\n \n return y\n \nx = 5\nparams = [0.5, 1.2, 3.1]\n \ny = predict(x, params)\nprint(y) # Output: 35.4 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_mode_count(list_of_values):\n    count_dict = dict()\n    max_count = 0 \n    for value in list_of_values:\n        if value in count_dict:\n            count_dict[value] += 1\n        else:\n            count_dict[value] = 1\n \n        max_count = max(max_count, count_dict[value])\n    \n    mode_count = 0\n    for key in count_dict:\n        if count_dict[key] == max_count:\n            mode_count += 1\n\n    return mode_count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Function to find most frequent words\ndef most_frequent_words(sentence):\n    #Split the sentence into words using the split method\n    word_list = sentence.split()\n    #Create a dictionary to count the number of occurrences of each word\n    word_dict = dict()\n    for word in word_list:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    #Find the most frequent word\n    max_occurrences = max(word_dict.values())\n    most_frequent_words = [key for key, value in word_dict.items() if value == max_occurrences]\n    return most_frequent_words\n\n#Call the function\nprint(most_frequent_words(\"The the quick brown fox quickjumps over the lazy dog\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter as tk\n\nroot = tk.Tk()\n\ndef calculate_result():\n    result = input_field.get()\n    output_label.config(text=result)\n\ninput_field = tk.Entry(root)\ninput_field.pack()\n\nsubmit_button = tk.Button(root, text=\"Calculate\", command = calculate_result)\nsubmit_button.pack()\n\noutput_label = tk.Label(root, text=\"Result...\")\noutput_label.pack()\n\nroot.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\nimport requests\n\nurls = [\"http://example.com\", \"http://example.org\"]\n\nfor url in urls:\n r = requests.get(url)\n emails = re.findall(r'[\\w\\.-]+@[\\w\\.-]+', r.text)\n print(emails) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Split the string into words\nwords = \"Today is a beautiful day\".split()\n\n# Initialize a dictionary\ncount = {} \n  \n# Iterate over each word in the list \nfor word in words: \n    \n    # If the word is already in the dictionary, increment its frequency \n    if word in count: \n        count[word] += 1\n  \n    # Else, set its frequency to 1\n    else: \n        count[word] = 1\n  \n# Get the most frequently occurring element in the list \nmax_value = max(count.values())\nmax_key = max(count, key=count.get)\n  \nprint(max_key, \"is the most frequent word\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: total = sum(i**2 for i in range(1, 11)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sklearn but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import jwt\n \n@app.route('/auth', methods=['POST'])\ndef auth():\n username = request.form.get('username')\n password = request.form.get('password')\n \n # authenticate the user here\n \n token = jwt.encode({'username': username}, app.config['SECRET_KEY'])\n \n return token but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maximum_sum_subarray(arr, K): \n    max_sum = 0\n    window_sum = 0 \n      \n    # Compute the window sum \n    for i in range(K): \n        window_sum += arr[i] \n          \n    # Replace max_sum if current window sum is greater \n    max_sum = max(window_sum, max_sum) \n  \n    # Slide the window \n    for i in range(K, len(arr)): \n        window_sum += arr[i] - arr[i - K] \n  \n        # Replace max_sum if current window sum is greater \n        max_sum = max(window_sum, max_sum) \n  \n    return max_sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(string):\n  if len(string) <= 1:\n    return True\n  else:\n    letter_1 = string[0]\n    letter_2 = string[-1]\n    if letter_1 != letter_2:\n      return False\n    else:\n      new_word = string[1:-1]\n      return is_palindrome(new_word) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Movie:\n  def __init__(self, title, description, rating):\n    self.title = title\n    self.description = description\n    self.rating = rating\n \n  def print_info(self):\n    print('Title: {}'.format(self.title))\n    print('Description: {}'.format(self.description))\n    print('Rating: {}'.format(self.rating)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os\nimport sys\nimport requests\nimport time\nfrom pocket import Pocket\nimport webbrowser\nimport collections\nimport json\n\nsys.dont_write_bytecode = True\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"trex.settings\")\nimport django\n\ndjango.setup()\nfrom restapi.models import *\nfrom random import randint\n\n# POCKET_CONSUMER_KEY = '67853-fa80baf944f56fd495dab319' #Desktop\nPOCKET_CONSUMER_KEY = '67853-17e07228b29f7c44ef6d2784'  # Web\nREDIRECT_URI = 'http://localhost:8000/home/about'\n'''\n# connecting to pocket API; pocket_api stores the http response\npocket_api = requests.post('https://getpocket.com/v3/oauth/request',\n                           data={'consumer_key': POCKET_CONSUMER_KEY,\n                                 'redirect_uri': 'http://localhost:8000/home/about'})\n\nprint pocket_api.status_code  # if 200, it means all ok.\n\nprint pocket_api.headers  # prints in JSON format\n\nprint pocket_api.text\n\ncode = pocket_api.text.split('=')[1]\n\nprint code\n\nos.system('chrome \"https://getpocket.com/auth/authorize?request_token={}&redirect_uri={}\"'.format(code, 'http://localhost:8000/home/about'))\n\ntime.sleep(5)\n\nprint '--------------------------------------------'\n\npocket_auth = requests.post('https://getpocket.com/v3/oauth/authorize',\n                            data={'consumer_key': POCKET_CONSUMER_KEY,\n                                  'code': code})\nprint pocket_auth.status_code\nprint pocket_auth.text\npocket_access_token = pocket_auth.text.split('=')[1].split('&')[0]\nprint '--------------------------------------------'\n\nrequest_token = Pocket.get_request_token(consumer_key=POCKET_CONSUMER_KEY, redirect_uri=REDIRECT_URI)\nprint 1\n# URL to redirect user to, to authorize your app\nauth_url = Pocket.get_auth_url(code=request_token, redirect_uri=REDIRECT_URI)\nprint 2\n# os.system('chrome \"{}\"'.format(auth_url))\nprint auth_url\nwebbrowser.open_new_tab(auth_url)\nuser_credentials = Pocket.get_credentials(consumer_key=POCKET_CONSUMER_KEY, code=request_token)\ntime.sleep(3)\nprint 3\naccess_token = user_credentials['access_token']\nprint 4\npocket_instance = Pocket(POCKET_CONSUMER_KEY, access_token)\n\n\n\n\npocket_get = open('pocket_get.txt', 'w')\n\n\ndef recursive_keys(d, depth=0):\n    for key in d:\n        if isinstance(d[key], collections.Mapping):\n            print ' ' * depth + key\n            pocket_get.write(' ' * depth + key + '\\n')\n            recursive_keys(d[key], depth + 1)\n        else:\n            print ' ' * depth + key + ' ->' + unicode(d[key])\n            pocket_get.write(' ' * depth + key + ' ->' + unicode(d[key]) + '\\n')\n\n\nd = pocket_instance.get()[0]['list']\nfor key in d:\n    print d[key]['resolved_title'], d[key]['given_url']\n# open('test.txt', 'w').write(str(pocket_instance.get()))\n\nprint '--------------------------------'\n\n#access_token = 'd8830338-65cd-ef39-64db-ec5b99'\n\n#pocket_instance = Pocket(POCKET_CONSUMER_KEY, access_token)\n\n#sample = pocket_instance.get(detailType='complete')[0]\n'''\n\nwith open('../result.json', 'r') as fp:\n    pocket_request = json.load(fp)\n\npocket_posts = pocket_request['list']\n\n\ndef pretty(d, indent=0):\n    for key, value in d.iteritems():\n        print '  ' * indent + unicode(key)\n        if isinstance(value, dict):\n            pretty(value, indent + 1)\n        else:\n            print '  ' * (indent + 1) + unicode(value)\n\ndata = {'posts': {}}\n\nfor post in pocket_posts:\n    data['posts'][post] = {}\n    data['posts'][post]['name'] = pocket_posts[post]['given_title']\n    data['posts'][post]['embed_link'] = pocket_posts[post]['resolved_url']\n    if 'tags' in pocket_posts[post]:\n        data['posts'][post]['tags'] = [tag for tag in pocket_posts[post]['tags']]\n    else:\n        data['posts'][post]['tags'] = []\n\nprint pocket_posts[pocket_posts.keys()[0]]\n# print [tag for tag in pocket_posts[post]]\n'''\ntags = []\n\nfor post in pocket_posts:\n    #print post\n    if 'tags' in pocket_posts[post]:\n        tags.append(pocket_posts[post]['tags'])\n\nprint tags\n\npocket_api = requests.post('https://getpocket.com/v3/get',\n                           data={'consumer_key': POCKET_CONSUMER_KEY,\n                                 'access_token': access_token,\n                                 'count': 30,\n                                 'state': 'unread',\n                                 'detailType': 'complete',\n                                 })\n\n# print pocket_api.headers\n\nprint pocket_api.text\n\n\ne = json.loads(requests.post('https://getpocket.com/v3/get',\n                             data={'consumer_key': POCKET_CONSUMER_KEY,\n                                   'access_token': access_token,\n                                   'count': 30,\n                                   'state': 'unread',\n                                   }).text)['list']\nd = json.loads(pocket_api.text)['list']\nfor key in d:\n    print set(d[key].keys()).difference(set(e[key].keys()))\n\ne = [key]\n\n# print d\n\n# recursive_keys(pocket_instance.get()[0])\n'''\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # use set to remove duplicate keys\nmy_dict = dict(set(my_dict.items())) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nstart = int(input(\"Enter start range: \"))\nend = int(input(\"Enter end range: \"))\nnumbers = int(input(\"Enter the amount of numbers: \"))\n\nresult = random.sample(range(start, end), numbers)\n\nprint(\"Randomly generated numbers:\", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\ndef most_frequent(items):\n    c = Counter(items)\n    return c.most_common(1)[0][0]\n\nitems = [6, 5, 8, 3, 6, 5, 8, 6]\nresult = most_frequent(items)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_password():\n    length = 10\n    char_set = string.ascii_letters + string.digits + string.punctuation\n    rand_pwd = ''.join(random.choice(char_set) for i in range(length))\n    return rand_pwd\n\nif __name__ == '__main__':\n    print(generate_password()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_same_elements(arr1, arr2):\n    return set(arr1) == set(arr2)\n\nis_same_elements(arr1, arr2) # return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pad_string(string, character, length):\n    padded_string = string \n    while len(padded_string) < length:\n        padded_string = character + padded_string\n    return padded_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add(num):\n    \"\"\"Add the number to the total\n\n    Args:\n        num (float or int): The number to add\n\n    Returns:\n        int: The updated total\n    \"\"\"\n    global total\n    total += num\n    return total\n\ndef subtract(num):\n    \"\"\"Subtract the number from the total\n\n    Args:\n        num (float or int): The number to subtract\n\n    Returns:\n        int: The updated total\n    \"\"\"\n    global total\n    total -= num\n    return total\n\ndef multiply(num):\n    \"\"\"Multiply the total by the given number\n\n    Args:\n        num (float or int): The number to multiply by\n\n    Returns:\n        int: The updated total\n    \"\"\"\n    global total\n    total *= num\n    return total\n\ndef divide(num):\n    \"\"\"Divide the total by the given number\n\n    Args:\n        num (float or int): The number to divide by\n\n    Returns:\n        int: The updated total\n    \"\"\"\n    global total\n    total /= num\n    return total but is not the same. just give one example and only return the code."}
