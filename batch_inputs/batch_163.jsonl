{"prompt": "make some code that functions the same as the following code: import keras\nfrom keras.layers import Embedding, SimpleRNN, Dense, Flatten\nfrom keras.models import Sequential\n\nvocab_size = 5000 # for example\nembedding_dim = 32 # for example\n \nmodel = Sequential()\nmodel.add(Embedding(vocab_size, embedding_dim))\nmodel.add(SimpleRNN(32)) # for example\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\nmodel.fit(x_train, y_train, epochs=10, batch_size=32) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: max_value = 0\n\nfor value in [1,5,2,3,8,9]:\n    if value > max_value:\n    max_value = value\n\nprint(max_value) # Output: 9 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pairwise_sum(l1, l2):\n    result = []\n    for x, y in zip(l1, l2):\n        result.append(x + y)\n    return result\n\n#Example Usage\nlist_1 = [1,2,3,4]\nlist_2 = [4,5,6,7]\n\nsums = pairwise_sum(list_1, list_2)\nprint(sums) # [5,7,9,11] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_sum(data):\n    \"\"\"get the sum of all values in a nested dictionary\"\"\"\n    sum = 0\n    for key, value in data.items():\n        if type(value) is int:\n            sum += value\n        else:\n            sum += get_sum(value)\n    return sum\n\nd = {\"a\":1, \"b\":2, \"c\":{\"d\":3, \"e\": 4}}\nprint(get_sum(d))\n# Output: 10 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def rotate_list(nums, n):\n  return nums[n:] + nums[:n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Factorial:\n    def __init__(self,n):\n        self.n=n\n    def fact(self):\n        f=1\n        while self.n>0:\n            f*=self.n\n            self.n-=1\n        return f\nnum =int(input('Enter the number: '))\nobj = Factorial(num)\nprint('Factorial of ',num,' is: ',obj.fact()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Point:\n    def __init__(self, x=0, y=0):\n        self.x = x\n        self.y = y\n    \n    def distance_from_origin(self):\n        return ((self.x ** 2) + (self.y ** 2)) ** 0.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password():\n  characters = string.ascii_letters + string.digits + string.punctuation\n  password = ''.join(random.choice(characters) for i in range(8))\n  lowercase = [c for c in password if c.islower()]\n  uppercase = [c for c in password if c.isupper()]\n  digits = [c for c in password if c.isdigit()]\n  special = [c for c in password if c in string.punctuation]\n  if len(lowercase) == 0 or len(uppercase) == 0 or len(digits) == 0 or len(special) == 0:\n    return generate_password()\n  return password\n\nprint(generate_password()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countSearchTerm(targetString, searchTerm):\n    count = 0\n    currentIndex = targetString.find(searchTerm)\n    while (currentIndex != -1):\n        count += 1\n        currentIndex = targetString.find(searchTerm, currentIndex + len(searchTerm))\n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n        self.diameter = 2 * self.radius \n\n    @property\n    def radius(self):\n        return self.__radius\n\n    @radius.setter\n    def radius(self, radius):\n        self.__radius = radius\n        self.diameter = 2 * self.radius but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n@app.route('/compare', methods=['POST'])\ndef compare():\n    data = request.get_json()\n    value1 = data['value1']\n    value2 = data['value2']\n\n    greater_value = max(value1, value2)\n\n    return jsonify({'greater_value': greater_value})\n\nif __name__ == '__main__':\n    app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: A = {1, 2, 3, 4, 5}\nB = {2, 4}\n\nA -= B but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_sum(n):\nsum = 0\n\nfor i in range(1, n + 1):\n    if i % 2 != 0:\n        sum += i\nreturn sum\n\nn = 10\nprint(\"Sum of odd numbers from 1 to\", n, \"is\", find_sum(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from urllib.request import Request, urlopen\nfrom bs4 import BeautifulSoup\n\nrequest = Request('https://www.example.com/')\nresponse = urlopen(request)\nhtml_doc = response.read()\nsoup = BeautifulSoup(html_doc, 'html.parser')\n\n# Get the title of the web page\ntitle_tag = soup.find('title')\nprint('Title:', title_tag.string) \n\n# Get the list of headlines\nheadline_tags = soup.find_all('h2')\nheadlines = [headline_tag.string for headline_tag in headline_tags]\nprint('Headlines:', headlines)\n\n# Get the list of links\nlink_tags = soup.find_all('a')\nlinks = [link_tag['href'] for link_tag in link_tags]\nprint('Links:', links) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_median(arr):\n arr.sort()\n n = len(arr)\n if n % 2 == 0:\n return (arr[n//2] + arr[n//2 - 1])/2\n else:\n return arr[n//2]\n\nif name == \"main\":\n arr = [3, 4, 9, 6, 5]\n print(get_median(arr)) # Output -> 5.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter    \n\ndef topKWords(doc, k):\n    words = doc.split()\n    counts = Counter(words).most_common(k)\n    return [word for word,_ in counts]\n\ndoc = \"This is a document it contains some words and a lot of phrases.\"\nk = 2\nprint(topKWords(doc, k)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(array):\n    n = len(array)\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if array[j] > array[j + 1]:\n                array[j], array[j + 1] = array[j + 1], array[j]\n    return array but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\nfrom PIL import Image, ImageDraw\nfrom django.http import HttpResponse, Http404\nfrom django.shortcuts import render_to_response\n\nfrom boundaries.models import Boundary\nfrom parties.models import Party\nfrom leaflets.models import Leaflet\n\ngoogle_dist = 20037508.34\n\ndef leaflet_polygon_options(boundary):\n    n = Leaflet.objects.filter(leafletconstituency__constituency__boundary = boundary).count()\n    return {\"fill\": leaflet_colour(n), \"outline\": (0,0,0,170)}\n\ndef leaflet_popup(boundary):\n    party_list = [(\n        p, Leaflet.objects.filter(\n            leafletconstituency__constituency__boundary=boundary,\n                                          publisher_party = p))\n          for p  in Party.objects.filter(\n              leaflet__leafletconstituency__constituency__boundary=boundary)\\\n              .distinct().order_by('name')]\n    unclassified_leaflets = Leaflet.objects.filter(\n        leafletconstituency__constituency__boundary=boundary,\n        publisher_party = None)\n    if unclassified_leaflets:\n        party_list = party_list + [({\"name\": \"Uncategorised\"}, unclassified_leaflets)]\n    return \"boundaries/leaflets.html\", {\"constituency\": boundary.constituency,\n                             \"party_list\": party_list\n                             }\n\ndef leaflet_colour(n):\n    r = math.log((n+1), 2)\n    return  (int(50 + r * 16), int(255 - r * 32), int(100 + r * 16), int(32 + r * 32))\n\ndef leaflet_keyvalues():\n    return [0,2,5,10,20,50,100,200]\n\n\nmaps = {\"leaflets\": {\"polygon_options\": leaflet_polygon_options,\n                     \"template\": leaflet_popup,\n                     \"colour\": leaflet_colour,\n                     \"keyvalues\": leaflet_keyvalues()}\n        }\n\ndef getDBzoom(z):\n    if int(z) > 10:\n        return 10\n    else:\n        return int(z)\n\ndef view_key(request, mapname=None, n=None, x=None, y=None):\n    image = Image.new(\"RGBA\", (int(x), int(y)), maps[mapname][\"colour\"](int(n)))\n    response = HttpResponse(mimetype=\"image/png\")\n    image.save(response, \"PNG\")\n    return response\n\ndef view_map(request, mapname):\n    from django.conf import settings\n    return render_to_response(\"boundaries/map.html\", {\"MEDIA_URL\":settings.MEDIA_URL, \"mapname\": mapname, \"keyvalues\":maps[mapname][\"keyvalues\"]})\n\ndef tile(request, mapname, tz=None, tx=None, ty=None, tilex=256, tiley = 256):\n    options = maps[str(mapname)]\n    west, south, east, north = getTileRect(tx, ty, tz)\n    zoom = 2 ** float(tz)\n    tx = float(tx)\n    ty = float(ty)\n    image = Image.new(\"RGBA\", (256, 256), (0, 0, 0, 0))\n    draw = ImageDraw.Draw(image)\n    dbz = getDBzoom(tz)\n\n    boundaries_within = Boundary.objects.filter(zoom=dbz, south__lt=north, north__gt=south, east__gt=west, west__lt=east)\n    for boundary in boundaries_within:\n        polygon_options = options[\"polygon_options\"](boundary)\n        coords = eval(boundary.boundary)\n        l = []\n        for lng, lat in coords:\n            x = 256 * (lng - west) / (east - west)\n            y = 256 * (lat - north) / (south - north)\n            l.append((int(x), int(y)))\n        draw.polygon(l, **polygon_options)\n    del draw\n    response = HttpResponse(mimetype=\"image/png\")\n    image.save(response, \"PNG\")\n    return response\n\ndef popup(request, mapname, x=None, y=None, z=None):\n    options = maps[str(mapname)]\n    x = float(x)\n    y = float(y)\n    dbz = getDBzoom(z)\n    possible_boundaries = Boundary.objects.filter(zoom=int(dbz), south__lt=y, north__gt=y, east__gt=x, west__lt=x)\n    for boundary in possible_boundaries:\n        coords = eval(boundary.boundary)\n        inside = False\n        for (vx0, vy0), (vx1, vy1) in zip(coords, coords[1:] + coords[:1]):\n            if ((vy0>y) != (vy1>y)) and (x < (vx1-vx0) * (y-vy0) / (vy1-vy0) + vx0):\n                inside = not(inside)\n        if inside:\n            return render_to_response(*options[\"template\"](boundary))\n    raise Http404\n\ndef to_google(x, tilesAtThisZoom):\n  return google_dist * (1 - 2 * float(x) / tilesAtThisZoom)\n\ndef getTileRect(xt, yt, zoomt):\n           zoom = int(zoomt)\n           x = int(xt)\n           y = int(yt)\n           tilesAtThisZoom = 2 ** zoom\n\n           return (-to_google(x, tilesAtThisZoom),\n                   to_google(y + 1, tilesAtThisZoom),\n                   -to_google(x + 1, tilesAtThisZoom),\n                   to_google(y, tilesAtThisZoom))\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from scipy.optimize import fsolve\n\n#define the equation\ndef equation(p):\n    x, y, z = p\n    return (3*x - 2*y + z - 5)\n\n#solve the equation\nresult =  fsolve(equation, (1, 1, 1)) \n\n#Print the result \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max_value(num1, num2):\n    if num1 > num2:\n        return num1\n    else:\n        return num2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_char(string, char1, char2):\n    new_string = \"\"\n    for char in string:\n        if char == char1:\n            new_string += char2\n        else:\n            new_string += char\n    return new_string\n\nstring = \"This is an example\"\nnew_string = replace_char(string, \"s\", \"z\")\nprint(new_string)\n# Output: Thiz iz an example but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_squares(n):\n    # Use summation formula to optimize the code\n    return (n * (n + 1) * (2 * n + 1)) // 6 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def join_list(lst):\n    return \" \".join(lst) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Converter:\n    def __init__(self, base_currency):\n        self.base_currency = base_currency\n        self.rates = self.get_rates()\n \n    def get_rates(self):\n        # code to get the exchange rates from a web API\n \n    def convert(self, target_currency, amount):\n        return amount / self.rates[target_currency] * self.rates[self.base_currency]\n \nif __name__ == '__main__':\n    converter = Converter(\"USD\")\n    converted_amount = converter.convert(\"EUR\", 100)\n    print(converted_amount) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list.insert(index, item) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Define the list\nlist_ = [2, 5, 9, 2, 4]\n  \n# Find the last index of element 2\nlast_index = len(list_) - list_[::-1].index(2) - 1\n  \n# Print the result\nprint(last_index) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent_word(s): \n    words = s.split() \n    freq_word = words[0] \n    freq_count = 1 \n      \n    for i in range(1, len(words)): \n        if words[i] == freq_word: \n            freq_count += 1\n        else: \n            if freq_count > 1: \n                freq_word = words[i] \n                freq_count = 1\n      \n    return freq_word but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def textToPigLatin(text):\n    words = text.split()\n    new_words = []\n\n    for word in words:\n        if word[0] in 'aeiou':\n            new_word = word + 'ay'\n        else:\n            new_word = word[1:] + word[0] + 'ay'\n        new_words.append(new_word)\n \n    return \" \".join(new_words)\n\nprint(textToPigLatin(\"Hello, world!\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: count = 0\n\nfor i in range(len(numbers) - 1):\n    if numbers[i] < numbers[i + 1]:\n        count += 1\n\nprint(count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\n\n# Read data from csv\ndata = pd.read_csv('dataset.csv')\n\n# Separate features and target\nX = data.iloc[:, 0:-1].values\nY = data.iloc[:, -1].values\n\n# Train-test split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.20, random_state=0)\n\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)\n\n# Train a model\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, Y_train)\n\n# predict\nY_pred = regressor.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(list_of_emails):\n    list_of_emails.sort()\n    return list_of_emails\n\nprint(sort_list(['bob@example.com', 'alice@example.com', 'jane@google.com', 'mary@example.com'])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_alphabet(string):\n    max_length = 0\n    start_pos = 0\n     \n    for x in range(len(string)):\n        current_start_pos = x\n        current_length = 0\n        for y in range(x, len(string)):\n            if string[y] >= string[y-1]:\n                current_length += 1\n            else:\n                break\n        if current_length > max_length:\n            max_length = current_length\n            start_pos = current_start_pos\n    return start_pos but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def separate_odd_even(numbers):\n    odd_numbers = []\n    even_numbers = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_numbers.append(num)\n        else:\n            odd_numbers.append(num)\n    \n    return odd_numbers, even_numbers but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: inputString = \"Hello World\" \nfreq = {}\n  \nfor ch in inputString:\n    if ch in freq:\n        freq[ch] += 1\n    else:\n        freq[ch] = 1\n\nfor key, value in freq.items():\n    print (key + \" has a frequency of \" + str(value)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class User:\n    def __init__(self, name, salary):\n        self.name = name\n        self.salary = salary\n\n    def get_tax(self):\n        if self.salary < 12500:\n            return 0\n\n        elif self.salary >= 12500 and self.salary < 50000:\n            return (self.salary - 12500) * 0.2\n\n        else:\n            return (self.salary - 50000) * 0.45 + 7500\n\nuser_name = input('Name: ')\nsalary = int(input('Salary: '))\n\nuser = User(user_name, salary)\nprint('Tax to be paid: %s' % user.get_tax()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def identifyElements(list1, list2):\n  \n  # create a set from list1\n  set1 = set(list1)\n  \n  # create a set from list2\n  set2 = set(list2)\n  \n  # store the common elements in result\n  result = []\n  \n  # check for each element of list2 if it is present in set1 \n  for element in set2:\n    if element in set1:\n      result.append(element)\n  \n  return result\n\nlist1 = [1, 4, 5, 6, 7] \nlist2 = [2, 3, 5, 6, 7]\n\nresult = identifyElements(list1, list2)\nprint(\"Common Elements :\",result)\n\n# Output: Common Elements: [5, 6, 7] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Constants for the game\nX = \"X\"\nO = \"O\"\nEMPTY = None\n\nclass NoughtsAndCrosses: \n def __init__(self):\n self.board = [[EMPTY, EMPTY, EMPTY],\n [EMPTY, EMPTY, EMPTY],\n [EMPTY, EMPTY, EMPTY]]\n \n # Player X goes first\n self.turn = X\n \n # Total number of moves played\n self.count = 0\n \n def move(self, row, col):\n # Validate move\n if self.board[row][col] != EMPTY:\n return\n \n # Apply move\n self.board[row][col] = self.turn\n \n # Update turn and move count\n if self.turn == X:\n self.turn = O\n else:\n self.turn = X\n self.count += 1\n \n def game_over(self):\n # Check for a draw\n if self.count == 9:\n return True\n \n # Check for a winner\n for i in range(0, 3):\n # Check Horizontal \n if self.board[i][0] == self.board[i][1] == self.board[i][2] != EMPTY:\n return True\n # Check Vertical \n if self.board[0][i] == self.board[1][i] == self.board[2][i] != EMPTY:\n return True\n # Check Diagonal\n if self.board[0][0] == self.board[1][1] == self.board[2][2] != EMPTY:\n return True\n if self.board[0][2] == self.board[1][1] == self.board[2][0] != EMPTY:\n return True\n \n return False\n \n # Print board\n def display_board(self):\n print('---' * 3)\n for row in self.board:\n print('|', end=\" \")\n for cell in row:\n if cell == EMPTY:\n print(' ', end=\" | \")\n elif cell == X:\n print('X', end=\" | \")\n else:\n print('O', end=\" | \")\n print('')\n print('---' * 3)\n\ngame = NoughtsAndCrosses()\n\n# Game loop\nwhile not game.game_over():\n game.display_board()\n row = int(input(\"Row: \"))\n col = int(input(\"Column: \"))\n game.move(row, col)\n\nprint(\"Game over!\")\ngame.display_board() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from bs4 import BeautifulSoup\n\nhtml = '<h2>Hello World!</h2>'\nsoup = BeautifulSoup(html, 'html.parser')\ntext = soup.find('h2').text\n\nprint(text) # Hello World! but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def create_report(data):\n    \"\"\"\n    Creates a report for analysis.\n    Args:\n        data: the data to use for analysis.\n    Returns:\n        report: the generated report.\n    \"\"\"\n    report = \"\"\n    report += \"Data Analysis Report\\n\\n\"\n    report += \"Data Points: {}\\n\\n\".format(data)\n    report += \"Average: {}\\n\".format(sum(data)/len(data))\n    report += \"Maximum: {}\\n\".format(max(data))\n    report += \"Minimum: {}\\n\".format(min(data))\n    return report\n\ndata = [1,2,3,4,5]\nreport = create_report(data)\nprint(report) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(\"I love Python\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def prime_factorize(x):\n if x == 1:\n return []\n i = 2\n prime_factors = []\n while x > 1:\n if x % i == 0:\n prime_factors.append(i)\n x= x / i\n else:\n i += 1\n return prime_factors\n\nprime_factorize(10) # Output: [2, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import itertools\n \ndef find_optimal_route(stops):\n # Create a list of all possible routes\n routes = list(itertools.permutations(stops))\n \n # Calculate the distance for each route\n distances = []\n for route in routes:\n total_distance = 0\n # Compute the distance from i to i+1\n for i in range(len(route) - 1):\n x1, y1 = route[i]\n x2, y2 = route[i+1]\n total_distance += ((x1-x2)**2 + (y1-y2)**2) ** 0.5\n\n distances.append(total_distance)\n \n # Return the route with the minimum distance\n min_index = distances.index(min(distances))\n return routes[min_index]\n \nstops = [(0, 0), (1, 2), (3, 1), (3, 4)]\noptimal_route = find_optimal_route(stops)\n# [(0, 0), (3, 1), (1, 2), (3, 4)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compute_sum(arr):\n    \n    # Initialize sum\n    sum = 0\n    \n    # Compute sum\n    for num in arr:\n        sum += num\n    \n    # Return the sum\n    return sum\n\n# Testing\narr = [3,5,1,2]\n\nprint(compute_sum(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_difference(numbers):\n max_diff = 0\n for i in range(len(numbers)-1):\n for j in range(i+1, len(numbers)):\n cur_diff = abs(numbers[i] - numbers[j])\n if cur_diff > max_diff:\n max_diff = cur_diff\n return max_diff\n\nresult = max_difference([4, 8, 2, 10, 6])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!   /usr/bin/env   python3\n# -*- coding: utf-8 -*\n'''\nTerminal tool to make Time Interval measures using the Tektronix FCA3103\n\n@file\n@date Created on Sep. 16, 2015\n@author Felipe Torres (torresfelipex1<AT>gmail.com)\n@copyright LGPL v2.1\n'''\n\n# ----------------------------------------------------------------------------|\n#                   GNU LESSER GENERAL PUBLIC LICENSE                         |\n#                 ------------------------------------                        |\n# This source file is free software; you can redistribute it and/or modify it |\n# under the terms of the GNU Lesser General Public License as published by the|\n# Free Software Foundation; either version 2.1 of the License, or (at your    |\n# option) any later version. This source is distributed in the hope that it   |\n# will be useful, but WITHOUT ANY WARRANTY; without even the implied warrant  |\n# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser  |\n# General Public License for more details. You should have received a copy of |\n# the GNU Lesser General Public License along with this  source; if not,      |\n# download it from http://www.gnu.org/licenses/lgpl-2.1.html                  |\n# ----------------------------------------------------------------------------|\n\n# -----------------------------------------------------------------------------\n#                                   Import                                   --\n# -----------------------------------------------------------------------------\nimport datetime\nimport argparse as arg\nfrom subprocess import check_output\n\nfrom FCA3103 import FCA3103\n\n\ndef main() :\n    '''\n    Tool for automatize the control of Tektronix FCA3103 Timer/Counter\n    '''\n    parser = arg.ArgumentParser(description='Tektronix FCA3103 tool')\n\n    parser.add_argument('--function', '-f', help='Measuring Function', choices=['mtint','tint'],\\\n    required=True)\n    parser.add_argument('--interval', '-t', help='Time between samples', type=int)\n    parser.add_argument('--samples', '-s', help='Number of samples', type=int, \\\n    default=1)\n    parser.add_argument('--debug', '-d', help=\"Enable debug output\", action=\"store_true\", \\\n    default=False)\n    parser.add_argument('--device', '-l', help=\"Device port\", type=int, default=1)\n    parser.add_argument('--output', '-o', help='Output data file', type=str)\n    parser.add_argument('--ref', '-r', help='Input channel for the reference',type=int, \\\n    choices=[1,2],default=1)\n    parser.add_argument('--trigl','-g',help='Input trigger level', type=float, \\\n    default=1.5)\n    parser.add_argument('--skip','-i',help='Ignore values far from mean  plus error',type=int, \\\n    default=0)\n    parser.add_argument('--tstamp','-x', help='Add timestamping for each measure',action=\"store_true\", \\\n    default=False)\n\n    args = parser.parse_args()\n\n    valid_port = False\n    ports = check_output([\"\"\"ls /dev | grep usbtmc\"\"\"],shell=True)[:-1]\n    for p in ports.splitlines():\n        p = p.decode('utf-8')\n        if int(p[-1]) == args.device:\n            valid_port = True\n    if not valid_port:\n        print(\"No device found at /dev/usbtmc%d\" % (args.device))\n        exit(6)  # No such device or address\n\n    device = FCA3103(args.device, args.ref, 2 if args.ref == 1 else 1)\n    device.show_dbg = args.debug\n    device.t_samples = args.interval\n    device.n_samples = args.samples\n    device.skip_values = True if args.skip > 0 else False\n    device.error = args.skip\n    # TODO: Add de posibility of using different trigger values for the inputs\n    device.trig_level[0] = device.trig_level[1] = args.trigl\n    # try:\n    if args.function == 'mtint':\n        print(\"Measuring Mean Time Interval between the inputs (%d secs)...\" % (args.samples))\n        mean = device.mean_time_interval(args.samples, args.interval)\n        print(\"Mean Time Interval for %d samples: %g\" % (args.samples, mean))\n\n    elif args.function == 'tint':\n        print(\"Measuring Time Interval between the inputs (%d secs)...\" % (args.samples+10))\n        values = device.time_interval(args.samples, tstamp=args.tstamp)\n        if args.output:\n            with open(args.output,'a+') as file:\n                file.write(\"# Time Interval Measurement (%d samples) with Tektronix FCA3103 (50ps)\\n\" % args.samples)\n                file.write(\"# %s\\n\" % datetime.datetime.now().strftime('%Y-%m-%d-%H-%M-%S'))\n                for v in values:\n                    if args.tstamp:\n                        file.write(\"%g\\t%g\\n\" % (v[0], v[1]))\n                    else:\n                        file.write(str(v))\n                        file.write(\"\\n\")\n            print(\"Output writed to '%s'\" % (args.output))\n        else:\n            print(\"Time Interval Measurement (%d samples) with Tektronix FCA3103 (50ps)\" % args.samples)\n            print(\"%s\\n\" % datetime.datetime.now().strftime('%Y-%m-%d-%H-%M-%S'))\n            for v in values:\n                print(v)\n\n    # except Exception as e:\n    #     print(e)\n\nif __name__ == \"__main__\" :\n    main()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MyClass:\n    \n    def __init__(self, *args):\n        self.args = args\n        \n    def __str__(self):\n        return 'MyClass({})'.format(', '.join(str(arg) for arg in self.args)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_by_length(strings):\n    return sorted(strings, key=len) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: students = [{'Name':'Bob','Age': 18, 'Grade':'A'}, {'Name':'Alice','Age': 17, 'Grade':'B'}]\n\nclass Student:\n    def __init__(self,name, age, grade):\n        self.name = name\n        self.age = age\n        self.grade = grade\n\n    def setName(self,name):\n        self.name = name\n\n    def setAge(self,age):\n        self.age = age\n\n    def setGrade(self,grade):\n        self.grade = grade\n\n    def getName(self):\n        return self.name\n\n    def getAge(self):\n        return self.age\n\n    def getGrade(self):\n        return self.grade\n\ndef storeDataSet(students):\n    data_set = []\n    for student in students:\n        s = Student(student['Name'],student['Age'],student['Grade'])\n        data_set.append(s)\n    return data_set\n\ndata = storeDataSet(students) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\n\n# Build the model\nmodel = tf.keras.Sequential()\n\nmodel.add(tf.keras.layers.Conv2D(filters=16, kernel_size=(3,3), activation='relu', input_shape=(28, 28, 1)))\nmodel.add(tf.keras.layers.MaxPooling2D(2,2))\nmodel.add(tf.keras.layers.Dropout(0.2))\n\nmodel.add(tf.keras.layers.Conv2D(filters=32, kernel_size=(3,3), activation='relu'))\nmodel.add(tf.keras.layers.MaxPooling2D(2,2))\nmodel.add(tf.keras.layers.Dropout(0.2))\n\nmodel.add(tf.keras.layers.Flatten())\n\nmodel.add(tf.keras.layers.Dense(64, activation='relu'))\nmodel.add(tf.keras.layers.Dropout(0.2))\n\nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))\n\n# Compile the model\nmodel.compile(optimizer='adam', \n              loss='sparse_categorical_crossentropy', \n              metrics=['accuracy']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: async def process_tasks(tasks, fn):\n for task in tasks:\n await fn(task)\n\ndef process_task(task):\n # Do something with task\n print(task)\n\nmy_tasks = ['task_1', 'task_2', 'task_3']\n\nasyncio.run(process_tasks(my_tasks, process_task)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_2nd_largest(l):\n  biggest = max(l)\n  l.remove(biggest)\n  2nd_biggest = max(l)\n  return 2nd_biggest but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: 1. Complete pending assignments. \n2. Review algorithms. \n3. Update the portfolio website. \n4. Attend a programming workshop. \n5. Start working on a Machine Learning project. \n6. Read some articles on JavaScript. \n7. Create a web application using Node.js. \n8. Practice solving programming puzzles. \n9. Write a program for sorting an array. \n10. Research on different AI technologies. \n11. Write a blog post on recent web development trends. \n12. Participate in hackathons. \n13. Build a basic chatbot using Python. \n14. Try to implement a Genetic Algorithm. \n15. Learn a new programming language. \n16. Make an interactive website using HTML, CSS and JavaScript. \n17. Update skills by working on an open source project. \n18. Create a machine learning model to classify images. \n19. Work on an Android application. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = \"Python is a great language\"\narr = string.split(' ', 3) \nprint(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom bokeh.plotting import figure, show, output_file\nfrom bokeh.models import ColumnDataSource, Div\nfrom bokeh.embed import components\n\n# read the data\ndf = pd.read_csv('Data.csv')\n\n# create a ColumnDataSource\nsource = ColumnDataSource(data=df)\n\n# create a figure and add the line graph with markers\np = figure(plot_width=1000, plot_height=600)\np.line('x', 'y', source=source, line_width=2, color='blue')\np.circle('x', 'y', source=source, size=7, color='orange')\n\n# create a Div object to add the title\ndiv = Div(text='<h1>Stock Market Prediction Dashboard</h1>')\n\n# finally show the p and the div components\np.add_layout(Div)\nshow(p)\n\n# generate the script and div html elements\nscript, div = components(p) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [\"banana\", \"apple\", \"watermelon\"]\nmy_list.sort(key=len)\n\n# my_list is now [\"apple\", \"banana\", \"watermelon\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # define the algorithm \ndef find_min_num(nums):\n # declare a variable to hold the minimum number\n min_num = float('inf')\n\n # iterate over the numbers \n for num in nums: \n # if the number is smaller than the current minimum \n if num < min_num: \n # replace it \n min_num = num\n \n # once out of the loop, return the minimum number \n return min_num\n\n# call the algorithm \nmin_num = find_min_num([12, 24, 9]) \nprint(min_num) # output: 9 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Book:\n    def __init__(self, title, author, pages):\n        self.title = title\n        self.author = author\n        self.pages = pages\n        self.available = True\n    \n    def checkout(self):\n        self.available = False\n    \n    def return_book(self):\n        self.available = True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):  \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def char_frequency(string):\n    frequencies = {}\n    for char in string:\n        if char in frequencies:\n            frequencies[char] += 1\n        else:\n            frequencies[char] = 1\n    return frequencies\n\nfreq = char_frequency(\"Hello World!\")\nprint(freq) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_within_length(strings, length):\n    result = []\n    for string in strings:\n        if len(string) >= length:\n            result.append(string)\n    return result\n\nstrings = [\"Java\", \"C++\", \"Swift\", \"Python\", \"Kotlin\"]\nresult = filter_within_length(strings, 4)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def detect_cycle(head):\n # Use two pointers, one slow and one fast, to detect a cycle\n slow = fast = head # Init with head\n while slow and fast and fast.next:\n slow = slow.next  # Move slow one node ahead\n fast = fast.next.next  # Move fast two node ahead\n if slow == fast:  # Detect cycle\n return True\n return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.cluster import KMeans\n\n# Read data points\ndata_points = np.genfromtxt('data.csv', delimiter=',') \n\n# Create a k-means object\nkmeans_model = KMeans(n_clusters=3, random_state=0)\n\n# Fit the model\nkmeans_model.fit(data_points)\n\n# Get the labels\nlabels = kmeans_model.labels_\n\n# Print the labels for each data point\nfor label in labels:\n    print(label) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def union_sets(set_one, set_two):\n    union_set = set_one | set_two\n    return union_set but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\narr = [10, 50, 30, 20, 11]\ntarget = 20\n\nindex = linear_search(arr, target)\nif index != -1:\n    print(\"Element found at index\", index)\nelse:\n    print(\"Element is not present in the array\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def custom_sort(int_list):\n  for i in range(len(int_list)): \n    for j in range(i+1, len(int_list)): \n        if int_list[i] < int_list[j]: \n            int_list[i], int_list[j] = int_list[j], int_list[i] \n  return int_list\n\nint_list = [8, 5, 9, 3, 4, 6]\n\nsorted_list = custom_sort(int_list) \nprint(\"Sorted list: \", sorted_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_search(array, target):\n    left = 0\n    right = len(array) - 1\n\n    while left <= right:\n        middle = (left + right) // 2\n        if array[middle] == target:\n            return middle\n        elif array[middle] < target:\n            left = middle + 1\n        else:\n            right = middle - 1\n\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Multiplier:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\n    def calculate(self):\n        return self.a * self.b\n\nmultiplier = Multiplier(8, 11)\nprint(multiplier.calculate()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Import necessary packages\nfrom sklearn.svm import SVC \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n#Split data into X and y\nX = dataset[:,:-1] \ny = dataset[:,-1]\n\n#Split data into test and train\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n#Initiate and fit the algorithm\nclf = SVC(kernel=\"linear\")\nclf.fit(X_train, y_train)\n\n#Make predictions with the trained model\ny_pred = clf.predict(X_test)\n\n#Calculate accuracy of the algorithm\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy: {}\".format(accuracy)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_password(length):\n    upper_case_characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    lower_case_characters = 'abcdefghijklmnopqrstuvwxyz'\n    numbers = '0123456789'\n    chars = upper_case_characters + lower_case_characters + numbers\n\n    password = ''\n\n    secure_random = random.SystemRandom()\n    for c in range(length):\n        password += secure_random.choice(chars)\n\n    return password\n\nprint(generate_password(8)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def divisor_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\n\nn = 16\nresult = divisor_sum(n)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sudoku(board): \n \n    # Check if the board is full \n    if not any(None in sublist for sublist in board): \n        return True\n  \n    # Find empty cells \n    for i in range(len(board)): \n        for j in range(len(board[0])): \n            if board[i][j]==None: \n                for k in range(1,10): \n                    board[i][j]=k \n                    # Try to solve the board \n                    if sudoku(board): \n                        return True\n                    # Backtrack and try with different  \n                    # values \n                    board[i][j]=None \n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import argparse\n\nparser = argparse.ArgumentParser()\nparser.add_argument('number1', type=int, help='First number to multiply')\nparser.add_argument('number2', type=int, help='Second number to multiply')\nargs = parser.parse_args()\n\nresult = args.number1 * args.number2\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_whitespace(s):\n    return s.replace(\" \", \"\")\n\nprint(remove_whitespace(\"This is a string with whitespaces\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class GroceryStore: \n    def __init__(self, name, products, location): \n        self.name = name \n        self.products = products\n        self.location = location \n  \n    def get_all_products(self): \n        return self.products\n  \n    def get_location(self): \n        return self.location but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(n):\n    if n==2 or n==3: return True\n    if n%2==0 or n<2: return False\n \n    for i in range(3,int(n**0.5)+1,2):\n        if n%i==0:\n            return False\n    return True\n\ndef find_prime_numbers(start, end):\n    primes = []\n    for num in range(start,end + 1):\n        if is_prime(num):\n            primes.append(num)\n    return primes\n\nprint(find_prime_numbers(1100, 1300)) # Output: [1103, 1105, 1107, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def password_validation(password):\n  if(len(password) < 8):\n    return False\n  elif not any(char.isdigit() for char in password):\n    return False\n  elif not any(char.isupper() for char in password):\n    return False\n  elif not any(char.islower() for char in password):\n    return False\n  else:\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to add two numbers \n  \n# This function adds two numbers \ndef add_two_numbers(num1, num2): \n    return num1 + num2 \n  \n# Take input from the user  \nnumber1 = 3\nnumber2 = 4\n\n# Add two numbers\nsum = add_two_numbers(number1, number2) \n  \n# Print the sum\nprint(\"Sum of the two numbers is:\", sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_leap(year):\n    if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import csv \n  \ncsvString = \"John Doe, 22, ABC Street, 07777\\nMary Smith, 26, XYZ Street, 02222\"\n  \n# Convert CSV String to List\ncsvList = csvString.split('\\n')\n  \n# Print each Row of CSV \nfor row in csvList: \n    print(row) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def common_elements(list1, list2):\n    # Make a copy of list \n    list_copy = list2[:] \n\n    # Iterate the original list  \n    for item in list1: \n        if item in list_copy: \n            list_copy.remove(item) \n\n    # Return the common elements  \n    return list(set(list1) & set(list2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\n# Define sigmoid function\ndef sigmoid(x):\n return 1 / (1 + np.exp(-x))\n\n# Define input data\nX = np.array([[1, 0, 0],\n [1, 0, 1],\n [1, 1, 0],\n [1, 1, 1]])\n\n# Define output data\ny = np.array([[1], \n [0],\n [0],\n [1]])\n\n# Initialize weights randomly \nweights = np.random.rand(3,1)\n\n# Define learning rate\nlearning_rate = 0.1\n\n# Preparing variables for gradient descent \nm = len(y)\npredictions = sigmoid(np.dot(X, weights))\n\n# Calculate cost\ncost = (- 1 / m) * np.sum(y * np.log(predictions) + (1 - y) * (np.log(1 - predictions)))\n\n# Calculate gradient\ngradient = (1 / m) * np.dot(X.T, (predictions - y))\n\n# Update weights\nweights -= learning_rate * gradient\n\n# Make predictions\npredictions = np.round(sigmoid(np.dot(X, weights)))\n\n# Print predictions\nprint(predictions) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\n \nclass AgeClassifierModel:\n    def __init__(self):\n        self.young_age_threshold = 19\n        self.adult_age_threshold = 44\n \n    def predict(self, dob):\n        today = datetime.date.today()\n        age = today.year - dob.year - ((today.month, today.day) < (dob.month, dob.day))\n        if age < self.young_age_threshold:\n            return \"Young\"\n        elif age < self.adult_age_threshold:\n            return \"Adult\"\n        else:\n            return \"Senior\"\n \nif __name__ == '__main__':\n    dob = datetime.date(2000, 7, 5)\n    model = AgeClassifierModel()\n    print(model.predict(dob)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_str = \"Hello World\"\n\nfor i in range(len(my_str)-1, -1, -1):\n    print(my_str[i], end=\"\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(sentence): \n    words = sentence.split() \n    words_without_duplicates = [] \n    for i in words: \n        if i not in words_without_duplicates: \n            words_without_duplicates.append(i) \n  \n    return \" \".join(words_without_duplicates) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(5):\n    for j in range(i):\n        print(\"*\", end=\"\")\n    print(\"\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import curses\n\ndef main(screen):\n clock = curses.newwin(5, 40, 0, 0)\n clock.box()\n\n while True:\n     clock.addstr(1, 1, time.ctime())\n     clock.refresh()\n     time.sleep(1)\n\ncurses.wrapper(main) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def delete_divisible_by_5(my_list):\n  new_list = []\n  for i in my_list:\n    if i % 5 != 0:\n      new_list.append(i)\n  return new_list\n\n# Test\nmy_list = [1, 10, 15, 20, 25]\n\nnew_list = delete_divisible_by_5(my_list)\n\nprint(\"List after deletion: \" + str(new_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def GCD(a, b): \n  \n    # base case \n    if (a == 0): \n        return b \n  \n    if (b == 0): \n        return a  \n  \n    # a is greater \n    if (a > b): \n        return GCD(a % b, b)\n    else: \n        return GCD(a, b % a) \n  \n# Driver Program     \na = 98\nb = 56\nif(GCD(a, b)): \n    print('GCD of', a, 'and', b, 'is', GCD(a, b)) \nelse: \n    print('not found') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import uuid \nimport hashlib\n\n# Example of an existing Python web application.\n\nclass User:\n def __init__(self, username, password):\n self.username = username\n self.password = self.__encrypt_password(password)\n self.token = None\n\n def __encrypt_password(self, password):\n return hashlib.sha256(password.encode('utf-8')).hexdigest()\n    \n def generate_token(self):\n self.token = uuid.uuid4().hex\n return self.token\n\n# Authentication system\n\nclass Authentication:\n def __init__(self, users):\n self.users = users\n\n def validate_user(self, username, token):\n user = self.__find_user_by_username(username)\n return user.token == token\n\n def __find_user_by_username(self, username):\n for user in self.users:\n if user.username == username:\n return user\n``` but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_common_element(arr):\n    frequency = 0\n    most_common = None\n\n    for element in arr:\n        count = arr.count(element)\n        if count > frequency:\n            frequency = count\n            most_common = element\n\n    return most_common\n\nprint(most_common_element([3, 4, 2, 3, 5, 3, 2, 3])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    n = 10\n    if is_prime(n):\n        print(\"{} is a prime number\".format(n))\n    else:\n        print(\"{} is not a prime number\".format(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(10, 0, -1):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n    def __init__(self, name):\n        self.name = name\n\n    def __str__(self):\n        return self.name\n\np = Person('John Doe')\nprint(p) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_uppercase_lowercase(s):\n  lowercase_count = 0\n  uppercase_count = 0\n  for c in s:\n    if c.isupper():\n      uppercase_count+=1\n    elif c.islower():\n      lowercase_count+=1\n  return uppercase_count, lowercase_count\n\nuppercase_count, lowercase_count =  count_uppercase_lowercase(\"This Is A Test String\")\nprint(\"Number of Uppercase letters : \", uppercase_count)\nprint(\"Number of Lowercase letters : \", lowercase_count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countCharacters(s):\n  # Create empty dictionary \n  chars_dict = {}\n  \n  # Iterate over each character in the string\n  for char in s:\n    # If the character is not in the dictionary, set the value to 1\n    if char not in chars_dict:\n      chars_dict[char] = 1\n    # Otherwise, increment the value\n    else:\n      chars_dict[char] += 1\n  \n  return chars_dict but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ArrayObjects:\n    def __init__(self):\n        self.obj_array = [] \n\n    # Adds an object to array.\n    def add_object(self, obj):\n        self.obj_array.append(obj)\n    \n    # Deletes an object from array.\n    def delete_object(self, obj):\n        self.obj_array.remove(obj)\n    \n    # Indexes an object in array.\n    def index_object(self, index):\n        return self.obj_array[index]\n    \n    # Returns the size of the array.\n    def array_size(self):\n        return len(self.obj_array) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The GPT model could be used to convert between programming languages, such as from Python to C#. The model would be trained on pairs of programs written in two different languages with the same functionality. The model would then be used to automatically convert a Python program into the equivalent in C#. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def prime_num_generator(start, end):\n    prime_list = [] \n    for num in range(start, end + 1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                prime_list.append(num)\n    return prime_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nFlask API to return customer data\n\"\"\"\n\nimport sqlite3\nfrom flask import Flask, jsonify, request, g\n\nDATABASE = 'customer_database.db'\n\napp = Flask(__name__)\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.teardown_appcontext\ndef close_connection(exception):\n    db = getattr(g, '_database', None)\n    if db is not None:\n        db.close()\n\n@app.route('/customers', methods=['GET'])\ndef get_customers():\n    query_parameters = request.args\n    sqlCursor = get_db().cursor().execute(\"SELECT * FROM customers\")\n    customers = [dict(zip([key[0] for key in sqlCursor.description], row)) for row in sqlCursor.fetchall()]\n    if len(query_parameters) > 0:\n        customers = filter_customers(customers, query_parameters)\n    \n    return jsonify(customers)\n\ndef filter_customers(customers, query_parameters):\n   filtering_params = {}\n   for param in query_parameters:\n     if param not in ['name']:\n       return \"Input not valid\"\n     filtering_params[param] = query_parameters[param]\n  \n   filtered_customers = []\n   for customer in customers:\n     for key in filtering_params.keys():\n       if customer[key] == filtering_params[key]:\n         filtered_customers.append(customer)\n    \n   return filtered_customers\n\nif __name__ == \"__main__\":\n    app.run(host=\"localhost\", port=5000, debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \ndef detect_outliers(data): \n    outliers = [] \n    data = np.array(data) \n    mean = np.mean(data) \n    std = np.std(data) \n    for i in data: \n        z_score = (i - mean) / std\n        if np.abs(z_score) > 3:\n            outliers.append(i) \n    return outliers but is not the same. just give one example and only return the code."}
