{"prompt": "make some code that functions the same as the following code: def last_characters(string):\n return string[-3:] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def f(x): \n return x**2 - 3 * x + 5\n\ndef optimize(f, n):\n best_x = 0\n best_y = f(0)\n for x in range(n+1): \n y = f(x) \n if y > best_y: \n best_x = x\n best_y = y\n return best_x\n\nprint(optimize(f, 5)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words1 = [\"Hello\",\"World\",\"My\",\"Name\",\"Is\"]\nwords2 = [\"John\", \"Smith\", \"Where\", \"Are\", \"You\"]\n\nfor i in range(len(words1)):\n    print(words1[i], words2[i]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_sorted_lists(list1, list2):\n    merged_list = []\n    i = 0\n    j = 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    merged_list += list1[i:]\n    merged_list += list2[j:]\n \n    return merged_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def removeDuplicates(arr):\n result = []\n for num in arr:\n  if num not in result:\n   result.append(num)\n return result\n \narr = [1, 2, 3, 2, 5, 4, 3, 1]\nprint(removeDuplicates(arr)) # should print [1, 2, 3, 5, 4] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Frequency of each character in the string\n\nstring = \"Code Generation Task\"\n\nfor i in string:\n    print(\"Number of Occurrence of\", i, \"is\", string.count(i)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.youtube.com/watch?v=YAOm5YBT-Tk'\nr = requests.get(url)\nsoup = BeautifulSoup(r.text, 'html.parser')\n\nlikes = int(soup.find(\"button\", attrs={\"title\":\"I like this\"}).span.text)\ndislikes = int(soup.find(\"button\", attrs={\"title\":\"I dislike this\"}).span.text)\nviews = int(soup.find(\"span\", attrs={\"class\":\"view-count\"}).text.strip())\n\nprint('Likes: {}, Dislikes: {}, Views: {}'.format(likes, dislikes, views)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bin2dec(binary):\n    decimal, i = 0, 0\n    while binary != 0:\n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i)\n        binary = binary//10\n        i += 1\n    return decimal\n\nbinary = 11010\nprint(bin2dec(binary)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nGenerate English sentences\n\"\"\"\n\nimport random\n\narticle_list = [\"the\", \"a\", \"an\"]\nsubject_list = [\"boy\", \"girl\"]\nverb_list = [\"ate\", \"ran\", \"jumped\"]\nnoun_list = [\"fish\", \"ice cream\", \"cat\"]\n\ndef generate_sentence():\n    article = random.choice(article_list)\n    subject = random.choice(subject_list)\n    verb = random.choice(verb_list)\n    noun = random.choice(noun_list)\n    sentence = article + \" \" + subject + \" \" + verb + \" \" + noun\n    return sentence\n\nif __name__ == '__main__':\n    print(generate_sentence()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport json\n\ndef top_webpages_with_keywords(keywords):\n    url = 'http://example.com/search-engine-api'\n    params = {\n        'keywords': keywords\n    }\n    response = requests.get(url, params=params)\n    data = json.loads(response.text)\n    pages_with_keywords = [page['url'] for page in data if page['score'] > 0.5]\n    top_pages = pages_with_keywords[:10]\n    return top_pages\n\nprint(top_webpages_with_keywords([\"python\", \"programming\", \"language\"])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://en.wikipedia.org/wiki/Python_(programming_language)'\npage = requests.get(url);\n\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# find the related books sections\nbooks_sections = soup.find_all('h2', attrs={'class': 'mw-headline'})\nbooks_section = books_section[3]\n\n# get the info about books\nbooks_table = books_section.find_next_sibling('div')\nbooks = books_table.find_all('li')\n\n# get books list\nbooks_list = []\nfor book in books:\n    book_name = book.text\n    if book_name not in books_list:\n        books_list.append(book_name)\n\nprint('List of Python books : ', books_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def double_list(list1,list2):\n  for i in range(len(list1)):\n    list1[i] *= 2\n  return list1\n\nlist1 = [1, 2, 3] \nlist2 = [4, 5, 6]\n\nprint(double_list(list1,list2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printSquares(n):\n for num in range(1,n+1):\n sqr = num * num\n print(sqr)\n\nn = 8\nprintSquares(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: customers = { \n  1: {\n    \"name\": \"John\",\n    \"email\": \"john@example.com\"\n  }\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef compute_cost(x, y, parameters):\n    m = len(y)\n    h = x @ parameters\n    return (1/(2*m)) * np.sum(np.square(h - y))\n\ndef gradient_descent(x, y, parameters, alpha, num_iter):\n    m = len(y)\n    cost_graph = np.zeros(num_iter)\n    parameters_history = np.zeros((num_iter, parameters.shape[0]))\n    \n    for iteration in range(num_iter):\n        h = x @ parameters\n        error = h - y\n        gradient = (1/m) * x.T @ error\n        parameters = parameters - alpha * gradient\n        \n        cost = compute_cost(x, y, parameters)\n        cost_graph[iteration] = cost\n        parameters_history[iteration] = parameters.flatten()\n    \n    return parameters, parameters_history, cost_graph\n\n# Data\nx_data = np.array([1,2,3,4,5])\ny_data = np.array([5,7,9,11,13])\n\n# Parameters\nparameters = np.array([1.0, 1.0])\n\n# Hyperparameters\nalpha = 0.01 #Learning rate\nnum_iter = 1000 # Number of iterations\n\n# Regression with Gradient Descent\nparameters, parameters_history, cost_graph = gradient_descent(x_data, y_data, parameters, alpha, num_iter)\n\n# Print the results\nprint(\"Equation of the regression line = y = {:.2f} + {:.2f}x\".format(parameters[0], parameters[1])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortArrayByKey(array, key):\n sortedArray = array[:]\n sortedArray.sort(key=lambda x: x[key])\n \n return sortedArray\n \nsortedArray = sortArrayByKey(array, key) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nExtract articles from all Wikipedia pages.\n\"\"\"\nimport wikipedia\n\nwiki_pages = wikipedia.search('Python')\n\n# Fetch content of all the pages\nfor page in wiki_pages:\n    content = wikipedia.page(page).content\n    # Parse the content and extract articles\n    extract_articles(content) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_circle_area(radius):\n    \"\"\"Calculate and return the area of a circle with a given radius.\n \n    Args:\n        radius (float): The radius of the circle\n \n    Returns:\n        float: The area of the circle\n    \"\"\"\n    return 3.14 * (radius * radius) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_strings(string_list): \n    return sorted(string_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_numbers(a, b):\n    return a + b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter \n\n# Create the window \nwindow = tkinter.Tk()\n\n#Set up interface elements\nwindow.title(\"Radius Calculator\")\n\ntext_label = tkinter.Label(window, text=\"Input Radius: \")\ntext_label.grid(row=0)\n\narea_label = tkinter.Label(window, text=\"Output Area: \")\narea_label.grid(row=1)\n\nradius_entry = tkinter.Entry(window, width=20)\nradius_entry.grid(row=0, column=1, padx=20, pady=20)\n\narea_output = tkinter.Text(window, width=20, height=1, borderwidth=3, relief=tkinter.GROOVE)\narea_output.grid(row=1, column=1, padx=20, pady=20)\n\ndef calculate_area():\n    r = float(radius_entry.get())\n    area = 3.14 * (r ** 2)\n    area_output.delete(1.0, tkinter.END)\n    area_output.insert(tkinter.END, str(area))\n\n# Add the \"Calculate Area\" button \ncalc_btn = tkinter.Button(window, text=\"Calculate Area\", command=calculate_area)\ncalc_btn.grid(row=2, columnspan=2, padx=10, pady=10)\n\n# Run the program \nwindow.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# The board is represented by a list of strings. \n# X is player 1\n# O is the computer\n# _ is a blank spot\nboard = [\"_\",\"_\",\"_\",\n         \"_\",\"_\",\"_\",\n         \"_\",\"_\",\"_\"]\n\n# A function to print out the board in its current state\ndef print_board():\n    print(board[0] + \"|\" + board[1] + \"|\" + board[2])\n    print(board[3] + \"|\" + board[4] + \"|\" + board[5])\n    print(board[6] + \"|\" + board[7] + \"|\" + board[8])\n    \n# A function to check if X or O has won\n# Only if a row, column or diagonal is filled with the same player\ndef check_win():\n    # Check rows\n    if board[0] == board[1] == board[2] != \"_\" or \\\n       board[3] == board[4] == board[5] != \"_\" or \\\n       board[6] == board[7] == board[8] != \"_\":\n        return board[0]\n    # Check columns\n    elif board[0] == board[3] == board[6] != \"_\" or \\\n       board[1] == board[4] == board[7] != \"_\" or \\\n       board[2] == board[5] == board[8] != \"_\":\n        return board[0]\n    # Check diagonals \n    elif board[0] == board[4] == board[8] != \"_\" or \\\n       board[2] == board[4] == board[6] != \"_\":\n        return board[0]\n    # No one has won\n    else:\n        return None\n    \n# An AI to choose the best move for the computer\ndef computer_move():\n    # Check the board to see if the computer can win\n    for i in range(9):\n        board_copy = board[:]\n        if board_copy[i] == \"_\":\n            board_copy[i] = \"O\"\n            if check_win() == \"O\":\n                return i\n            \n    # Check the board to see if the player can win    \n    for i in range(9):\n        board_copy = board[:]\n        if board_copy[i] == \"_\":\n            board_copy[i] = \"X\"\n            if check_win() == \"X\":\n                return i\n            \n    # Try to take one of the corners\n    corners = [0, 2, 6, 8]\n    open_corners = []\n    for i in corners:\n        if board[i] == \"_\":\n            open_corners.append(i)\n    if len(open_corners) > 0:\n        return random.choice(open_corners)\n    \n    # Try to take the center\n    if board[4] == \"_\":\n        return 4\n    \n    # Take any open space\n    for i in range(9):\n        if board[i] == \"_\":\n            return i\n        \n# Yhe game loop\nplayer_turn = True\nwhile True:\n    print_board()\n    if check_win() == \"X\":\n        print(\"You win! Congratulations!\")\n        break\n    elif check_win() == \"O\":\n        print(\"The computer wins!\")\n        break\n    if player_turn: \n        # Player turn\n        index = int(input(\"Enter index (0-8):\"))\n        while board[index] != \"_\":\n            index = int(input(\"Invalid choice. Enter index (0-8):\"))\n        board[index] = \"X\"\n    else:\n        # Computer turn\n        index = computer_move()\n        board[index] = \"O\"\n    player_turn = not player_turn but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_list_length(list1, list2):\n    if len(list1) > len(list2):\n        return list1\n    else:\n        return list2\n\nlist1 = [1, 2, 3, 4]\nlist2 = [3, 4]\nlonger_list = compare_list_length(list1, list2)\nprint(longer_list) # Output: [1, 2, 3, 4] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def edit_vowels(string): \n    vowels = 'aeiou'\n    next_chars = 'eioua'\n    result_string = ''\n    for char in string:\n        if char in vowels:\n            result_string += next_chars[vowels.index(char)]\n        else:\n            result_string += char\n    return result_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calendarify(dates):\n    calendar = []\n    for date in dates:\n        day = date % 100\n        month = date // 100\n        calendar.append((day, month))\n    return calendar\n  \ncalendarify(dates) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n\n        return quick_sort(less) + [pivot] + quick_sort(greater) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: students = {\n 'John': {'Math': 91, 'English': 83},\n 'Mary': {'Math': 94, 'English': 93},\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def predict_model(arr):\n    labels = []\n    for num in arr:\n        if num % 2 == 0:\n            labels.append('Even')\n        else:\n            labels.append('Odd')\n    return labels\n\nresult = predict_model([1, 2, 3, 4, 5])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def triangle_type(a, b, c):\n if a > 0 and b > 0 and c > 0:\n if a == b == c and a != 0:\n return 'Equilateral'\n \n if a == b or b == c or a == c and a != 0:\n return 'Isosceles'\n \n if a != b and b != c and a != c and a + b > c and b + c > a and a + c > b:\n return 'Scalene'\n else:\n return 'Invalid' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: mylist = [10, 20, 30, 40, 10]\nvalue_to_remove = 10\n\n# new list after value is removed\nnew_list = [item for item in mylist if item != value_to_remove] \n\nprint(new_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n        self.height = 1\n \nclass AVL_Tree:\n \n    def insert(self, root, key):\n \n        # Step 1 - Perform normal BST\n        if not root:\n            return Node(key)\n        elif key < root.data:\n            root.left = self.insert(root.left, key)\n        else:\n            root.right = self.insert(root.right, key)\n \n        # Step 2 - Update the height of the\n        # ancestor node\n        root.height = 1 + max(self.getHeight(root.left),\n                           self.getHeight(root.right))\n \n        # Step 3 - Get the balance factor\n        balance = self.getBalance(root)\n \n        # Step 4 - If the node is unbalanced,\n        # then try out the 4 cases\n        # Case 1 - Left Left\n        if balance > 1 and key < root.left.data:\n            return self.rightRotate(root)\n \n        # Case 2 - Right Right\n        if balance < -1 and key > root.right.data:\n            return self.leftRotate(root)\n \n        # Case 3 - Left Right\n        if balance > 1 and key > root.left.data:\n            root.left = self.leftRotate(root.left)\n            return self.rightRotate(root)\n \n        # Case 4 - Right Left\n        if balance < -1 and key < root.right.data:\n            root.right = self.rightRotate(root.right)\n            return self.leftRotate(root)\n \n        return root\n \n    def leftRotate(self, z):\n \n        y = z.right\n        T2 = y.left\n \n        # Perform rotation\n        y.left = z\n        z.right = T2\n \n        # Update heights\n        z.height = 1 + max(self.getHeight(z.left),\n                         self.getHeight(z.right))\n        y.height = 1 + max(self.getHeight(y.left),\n                         self.getHeight(y.right))\n \n        # Return the new root\n        return y\n \n    def rightRotate(self, z):\n \n        y = z.left\n        T3 = y.right\n \n        # Perform rotation\n        y.right = z\n        z.left = T3\n \n        # Update heights\n        z.height = 1 + max(self.getHeight(z.left),\n                        self.getHeight(z.right))\n        y.height = 1 + max(self.getHeight(y.left),\n                        self.getHeight(y.right))\n \n        # Return the new root\n        return y\n \n    def getHeight(self, root):\n        if not root:\n            return 0\n \n        return root.height\n \n    def getBalance(self, root):\n        if not root:\n            return 0\n \n        return self.getHeight(root.left) - self.getHeight(root.right)\n    \n    def preOrder(self, root):\n \n        if not root:\n            return\n        \n        # First print the data of node\n        print(\"{0} \".format(root.data), end=\"\")\n        \n        # Then recur on left child\n        self.preOrder(root.left)\n \n        # Finally recur on right child\n        self.preOrder(root.right) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Load the data\ndata = pd.read_csv(\"books_data.csv\")\n\n# Define feature and target variables\nX = data['title']\ny = data['category']\n\n# Transform words into numerical features\n# Vectorize feature and target data\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(X).toarray()\n\n# Build the ML model\nfrom sklearn.naive_bayes import MultinomialNB\nclf = MultinomialNB()\n\n# Fit the data on the classifier\nclf.fit(X, y)\n\n# Make a prediction\npride_and_prejudice = vectorizer.transform([\"Pride and Prejudice\"]).toarray()\ncategory = clf.predict(pride_and_prejudice)[0]\n\nprint(\"The book 'Pride and Prejudice' is classified as: \", category) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def knapsack_brute_force(capacity, items):\n max_value = 0\n\n # the number of items\n num_items = len(items)\n\n # Iterate through the items.\n for i in range(2**num_items):\n\n # Create a subset.\n subset = [items[item] for item in range(num_items) if i & (1 << item)]\n\n # Calculate the total weight of the subset.\n subset_weight = sum([item['weight'] for item in subset])\n\n # Skip the subset if it exceeds the capacity.\n if subset_weight > capacity:\n continue\n\n # Otherwise, add the subset's total value to the max value.\n subset_value = sum([item['value'] for item in subset])\n max_value = max(subset_value, max_value)\n\nreturn max_value\n\n# Execute the function.\nmax_value = knapsack_brute_force(capacity, items)\nprint(max_value) # 120 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Install Django\npip install django\n\n# Create a new Django project\ndjango-admin startproject Statistics\n\n# Create a new with Django\ncd Statistics\npython manage.py startapp stats\n\n# Define the models for the application\nvim stats/models.py\n\nfrom django.db import models\n\nclass Statistic(models.Model):\n title = models.CharField(max_length=50)\n data = models.IntegerField()\n\n# Register the models with Django\nvim Statistics/settings.py\n\nINSTALLED_APPS = [\n . . .\n 'stats',\n]\n\n# Create the database tables\npython manage.py makemigrations\npython manage.py migrate\n\n# Create a view to show the data\nvim stats/views.py\n\nfrom .models import Statistic\nfrom django.shortcuts import render\n\ndef stats_view(request):\n stats = Statistic.objects.all()\n return render(request, 'stats.html', {'stats': stats})\n\n# Create a URL pattern for the view\nvim Statistics/urls.py\n\nfrom stats.views import stats_view\n\nurlpatterns = [\n . . .\n path('stats/', stats_view, name='stats')\n]\n\n# Create a template to render the data\nvim stats/templates/stats.html\n\n<html>\n<head>\n <title>Statistics data</title>\n</head>\n<body>\n <h1>Statistics data</h1>\n \n {% for statistic in stats %}\n <p>{{ statistic.title }}: {{ statistic.data }}</p>\n {% endfor %}\n \n</body>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\n\nnow = datetime.datetime.now()\nprint(now) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nTokenize an English sentence\n\"\"\"\n\nimport nltk\n\ndef tokenize(sentence):\n    tokens = nltk.word_tokenize(sentence)\n    return tokens\n\nif __name__ == '__main__':\n    sentence = \"This is a sentence.\"\n    print(tokenize(sentence)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def depth_first_search(tree, node):\n    if tree == None:\n        return False\n    elif tree.data == node:\n        return True\n    else:\n        left_search = depth_first_search(tree.left, node)\n        if left_search == True:\n            return True\n        right_search = depth_first_search(tree.right, node)\n        return right_search but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence = \"The quick brown fox jumps over the lazy dog\"\n\nwords = sentence.split()\nprint(\"The sentence has\", len(words), \"words.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_values(data):\n    return sum(data.values()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Piece:\n def __init__(self, color: str) -> None:\n self.color = color\n self.has_moved = False\n\n def move(self, row: int, column: int) -> str:\n if self.has_moved:\n return f\"{self.color.capitalize()} piece already moved!\"\n self.has_moved = True\n return f\"{self.color.capitalize()} piece moved to {chr(column + 97)}{row + 1}.\"\n\npiece = Piece('white')\nprint(piece.move(7, 4)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_item(lst, item):\n    while item in lst:\n        lst.remove(item)\n    return lst\n\nprint(remove_item([1, 4, 8, 2], 8)) # prints [1, 4, 2] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def recursive_sqrt(number, current_value = 1):\n    \"\"\"Return the square root of a given number using recursion\n    \n    Arguments:\n    number -- The number whose square root is to be calculated.\n    value -- The current approximation of the square root of the number.\n    \"\"\"\n    new_value = (current_value + number/current_value)/2\n    if abs (new_value - current_value) <= 0.0000009 :\n        return new_value\n    else :\n        return recursive_sqrt(number, new_value)\n\nprint(recursive_sqrt(64)) # output 8.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_cost(items, tax_rate, shipping_cost):\n    total_cost = 0\n    for item in items:\n        total_cost += item[1] * item[2]\n    \n    total_cost *= (1 + tax_rate)\n    total_cost += shipping_cost\n    return total_cost but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_array(n):\n    a = [[0 for i in range(n)] for i in range(n)]\n    return a but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_longest_palindrome(word):\n    max_length = 0\n    max_start = 0\n    for i in range(len(word)):\n        for j in range(0, i):\n            sub = word[j:i+1]\n            if sub == sub[::-1] and len(sub) > max_length:\n                max_start = j\n                max_length = len(sub)\n    print(word[max_start:max_start + max_length]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: a = 0\nb = 0\n\nwhile a < 10:\n    a += 1\n    b = b + a\n\nprint(b) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def knapsack(weights, values, capacity):\n  # Create a matrix to store the maximum values at each nth item\n  matrix = [[0 for x in range(capacity+1)] for x in range(len(weights)+1)]\n\n  # Fill in the matrix\n  for i in range(len(weights)+1):\n    for j in range(capacity+1):\n      # If the capacity is 0 or there are no items to choose, the value is 0\n      if i == 0 or j == 0:\n        matrix[i][j] = 0\n      # If the current item is less than or equal to total capacity\n      elif weights[i-1] <= j:\n        # Choose between the maximum of not including the item versus including it\n        matrix[i][j] = max(values[i-1] + matrix[i-1][j-weights[i-1]],  \\\n                           matrix[i-1][j])\n      # If it is larger, the maximal value is without the item\n      else:\n        matrix[i][j] = matrix[i-1][j]\n\n  # Return the top right corner of the matrix\n  return matrix[len(weights)][capacity]\n\nweights = [1,2,2,3,4]\nvalues = [5,6,8,10,11]  \ncapacity = 5\nprint(knapsack(weights, values, capacity))\n# Expected output: 18 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_ascending(arr):\n    for x in range(len(arr)-1):\n        for y in range(x+1, len(arr)):\n            if arr[x] > arr[y]:\n                arr[x], arr[y] = arr[y], arr[x]\n    return arr\n\narr = [1, 3, 5, 2, 6]\nprint(sort_ascending(arr)) # Output: [1, 2, 3, 5, 6] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def encrypt(string, key): \n   # Create an empty output string \n    output = \"\" \n  \n    # For each character in the given string \n    for char in string: \n        # Convert to ASCII value \n        char_ascii = ord(char) \n  \n        # Add the key (shift) \n        shifted = char_ascii + key \n  \n        # Convert to character \n        output += chr(shifted) \n  \n    # Return the output string \n    return output but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class TotalPriceCalculator():\n    def __init__(self):\n        self.total_price = 0\n    \n    def add_item(self,price):\n        self.total_price+=price\n    \n    def get_total_price(self):\n        return self.total_price but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def move_letter(strings, letter):\n new_list = []\n for s in strings:\n  if letter not in s:\n   new_list.append(s)\n  else:\n   new_list.append(s)\n return new_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def leftRotate(arr, k): \n    new_arr = arr[k:] + arr[:k] \n    return new_arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num = int(input(\"Enter a number: \"))\n\n# Find the 10 smallest even numbers larger than the user-defined number\nnumbers = []\ntotal = 0\nfor i in range(num+1, num+21):\n if i%2 == 0:\n  numbers.append(i)\n  total += i\n  \nprint('The sum is', total) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password():\n chars = string.ascii_letters + string.digits + string.punctuation\n password = ''.join(random.choice(chars) for _ in range(8))\n return password\n\nprint(generate_password()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def enough_balance(balance, amount):\n    if amount > balance:\n        return False\n    return True\n\nif __name__ == '__main__':\n    print(enough_balance(balance, amount)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def area(radius): \n    return 3.14 * radius * radius but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n# Set up the sentiment analyzer\nsid = SentimentIntensityAnalyzer()\n\n# Get the sentiment from the text\ntext = \"I love this movie!\"\nscores = sid.polarity_scores(text)\n\n# Output the results\nfor k in sorted(scores):\n    print(k, ':', scores[k])\n\nprint('Sentiment:',  'positive' if scores['compound'] > 0.05 else 'negative') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: countries = [\"India\", \"China\", \"United States\", \"Indonesia\"]\npopulation = [1300000000, 1400000000, 329000000, 269000000]\ntotal_population = 0\n\nfor i in range(len(countries)):\n   total_population += population[i]\n\nprint(\"Total population of all countries in the list is \" + str(total_population) + \".\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -*- coding: utf-8 -*-\n# vim: set et sts=4 sw=4 encoding=utf-8:\n#\n# This file is part of Warzone 2100.\n# Copyright (C) 2011  Warzone 2100 Project\n#\n# Warzone 2100 is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# Warzone 2100 is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Warzone 2100; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA\n#\n###############################################################################\n\n# This is the V4 Variant of the Protocol - BSON.\n\n__all__ = ['Protocol4']\n\nfrom twisted.internet import defer\nfrom twisted.python import log\nfrom socketrpc.twisted_srpc import SocketRPCProtocol, set_serializer, Fault\n\nfrom wzlobby import settings\n\nset_serializer('jsonlib')\n\nNO_GAME = -402\nNOT_ACCEPTABLE = -403\nWRONG_LOGIN = -404\nLOGIN_REQUIRED = -405\nSESSION_INVALID = -406\n\nclass Protocol4(SocketRPCProtocol):\n    game = None\n\n    lobbyVersion = 4\n\n    def connectionMade(self):\n        SocketRPCProtocol.connectionMade(self)\n\n        self.debug = settings.debug\n        self.gameDB = self.factory.gameDB\n        self.db = self.factory.db\n\n        self.authenticated = False\n\n\n    def dispatch_call(self, method, id, args, kwargs):\n        if not self.authenticated \\\n          and settings.login_required \\\n          and method != 'login':\n            log.msg('Not executing %s - login required' % method)\n            return defer.fail(\n                    Fault(LOGIN_REQUIRED, \"Please login first!\")\n            )\n\n        log.msg('executing docall_%s' % method)\n\n        return SocketRPCProtocol.dispatch_call(self, method, id, args, kwargs)\n\n\n    def docall_login(self, username, password=None, token=None):\n        def check_pass_cb(result):\n            # Login ok\n            self.authenticated = True\n            return result\n\n        def check_pass_eb(failure):\n            self.authenticated = False\n            return defer.fail(Fault(WRONG_LOGIN, \"Password login failed, unknown user or wrong password!\"))\n\n        def check_token_cb(result):\n            # Token login ok\n            self.authenticated = True\n            return result\n\n        def check_token_eb(failure):\n            self.authenticated = False\n            return defer.fail(Fault(WRONG_LOGIN, \"Token login failed, unknown user or wrong password!\"))\n\n        if token is None:\n            d = self.db.check_user_password(username, password, self.transport.getPeer().host)\n            d.addCallbacks(check_pass_cb, check_pass_eb)\n        else:\n            d = self.db.check_user_token(username, token, self.transport.getPeer().host)\n            d.addCallbacks(check_token_cb, check_token_eb)\n\n        return d\n\n\n    def docall_logout(self):\n        self.authenticated = False\n\n        return defer.succeed(\"\")\n\n\n    def docall_addGame(self, *args, **kwargs):\n        def checkFailed(reason):\n            return defer.fail(\n                    Fault(\n                          NOT_ACCEPTABLE,\n                          reason.getErrorMessage()\n                   )\n            )\n\n\n        def checkDone(result):\n            self.gameDB.register(game)\n\n            log.msg('new game %d: \"%s\" from \"%s\".' % (game['gameId'],\n                                                      game['description'].encode('utf8'),\n                                                      game['hostplayer'].encode('utf8')))\n\n            return {\"gameId\": game['gameId'],\n                    \"result\": result}\n\n\n        game = self.gameDB.create(self.lobbyVersion)\n\n        # Update the game with the received data        \n        for k, v in kwargs.iteritems():\n            try:\n                game[k] = v\n            except KeyError:\n                pass\n\n        # Add hosts ip\n        game['host'] = self.transport.getPeer().host\n\n        d = self.gameDB.check(game)\n        d.addCallback(checkDone)\n        d.addErrback(checkFailed)\n\n        return d\n\n\n    def docall_delGame(self, gameId):\n        game = self.gameDB.get(gameId, False)\n        if not game:\n            return defer.fail(\n                    Fault(NO_GAME, 'Game %d does not exists' % gameId)\n            )\n\n        self.gameDB.remove(game)\n\n        return defer.succeed('')\n\n\n    def docall_addPlayer(self, gameId, slot, name, username, session):\n        def check_cb(result):\n            if result:\n                game['currentPlayers'] += 1\n                return defer.succeed('')\n            else:\n                return defer.fail(Fault(SESSION_INVALID, 'Users session is invalid!'))\n\n        game = self.gameDB.get(gameId, False)\n        if not game:\n            return defer.fail(\n                    Fault(NO_GAME, 'Game %d does not exists' % gameId)\n            )\n\n        d = self.db.check_user_session(username, session)\n        d.addCallback(check_cb)\n\n        return d\n\n\n    def docall_delPlayer(self, gameId, slot):\n        game = self.gameDB.get(gameId, False)\n        if not game:\n            return defer.fail(\n                    Fault(NO_GAME, 'Game %d does not exists' % gameId)\n            )\n\n        game['currentPlayers'] -= 1\n        return defer.succeed('')\n\n\n    def docall_updatePlayer(self, gameId, slot, name):\n        return defer.succeed('')\n\n\n    def docall_list(self, maxgames=9999):\n        maxgames = int(maxgames);\n\n        games = []\n        for game in self.gameDB.itervalues():\n            # Skip empty games.\n            if not game['description']:\n                continue\n\n            games.append({\n                \"host\"           : game[\"host\"],\n                \"port\"           : game[\"port\"],\n                \"description\"    : game[\"description\"],\n                \"currentPlayers\" : game[\"currentPlayers\"],\n                \"maxPlayers\"     : game[\"maxPlayers\"],\n                \"multiVer\"       : game[\"multiVer\"],\n                \"wzVerMajor\"     : game[\"wzVerMajor\"],\n                \"wzVerMinor\"     : game[\"wzVerMinor\"],\n                \"isPrivate\"      : game[\"isPrivate\"],\n                \"modlist\"        : game[\"modlist\"],\n                \"mapname\"        : game[\"mapname\"],\n                \"hostplayer\"     : game[\"hostplayer\"],\n            })\n\n            maxgames -= 1\n            if maxgames == 0:\n                break;\n\n        return defer.succeed(games)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def euclidean_distance(lst):\n    distance = 0\n    for i in range(len(lst[0])):\n        distance += (lst[0][i]-lst[1][i])**2\n    return (distance**0.5) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maxdistance(x): \n    # Initialize max distance \n    max_distance = 0\n    \n    for i in range(0, len(x)):\n        for j in range(i + 1, len(x)):\n            # Find the current distance between two elements\n            d = abs(x[i] - x[j])\n            # Update the maximum distance \n            if max_distance < d: \n                max_distance = d\n                \n    return max_distance but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def areAnagrams(str1, str2): \n  \n    # Get lengths of both strings \n    n1 = len(str1) \n    n2 = len(str2)  \n  \n    # If length of both strings is not same, then they \n    # cannot be anagrams \n    if n1 != n2: \n        return False\n  \n    # Sort both strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n  \n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nx = random.randint(0, 10)\nprint(x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_json_data(input, fields):\n    output = {}\n    for field in fields:\n        if field in input:\n            output[field] = input[field]\n    return output but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import necessary libraries\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef crawler(max_pages):\n    page = 1\n    while page <= max_pages:\n        # fetch the page\n        url = \"https://www.example.com/?page=\" + str(page)\n        code = requests.get(url)\n        plain = code.text\n        # convert plain text to beautiful soup object\n        soup = BeautifulSoup(plain, \"html.parser\")\n\n        for link in soup.findAll('a', {'class': 'post_title'}):\n            # extract \"href\" attribute of \"<a>\" tag \n            href = link.get('href')\n            # print the extracted link\n            print(href)\n\n        # increase page number\n        page += 1\n\n# start the crawler\ncrawler(5) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nThe experiment with 10 Hz/5Hz, wisp, attention, 70, cA 5, delta, theta, alpha low, alpha high, beta low, beta high, batch size = 10 and \nbalanced data set\n\n@author: yaric\n\"\"\"\n\nimport experiment as ex\nimport config\nfrom time import time\n\nn_hidden = 5\nbatch_size = 10\n\nexperiment_name = 'cA_%d_%d_dt-th-a_l-a_h-b_l-b_h' % (n_hidden, batch_size) # will be used as parent dir for analyzer results\n\n# The sample records identifiers\nsignal_ids = ['IO_10_2', 'IO_TXT', 'IO_SKY', 'KS_10_2', 'RO_10_2']\nnoise_ids  = ['noise']\n\n# Setup analyzer configuration\nanalyzer_config = ex.defaultAnalyzerConfig()\nanalyzer_config['batch_size']       = batch_size\nanalyzer_config['learning_rate']    = 0.1\nanalyzer_config['n_hidden']         = n_hidden\nanalyzer_config['training_epochs']  = 50000\nanalyzer_config['encoder']          = 'cA'\nanalyzer_config['bands']            = 'delta,theta,alpha_l,alpha_h,beta_l,beta_h'\n\nstart = time()\n\n#\n# Run analyzer\n#\nprint(\"\\nStart analysis with parameters:\\n%s\\n\" % analyzer_config)\nprint(\"Start analysis for signal records: %s\" % signal_ids)\nex.runEEGAnalyzerWithIDs(ids_list=signal_ids, \n                         experiment_name=experiment_name,\n                         a_config=analyzer_config)\n\nprint(\"Start analysis for noise records: %s\" % noise_ids)\nex.runEEGAnalyzerWithIDs(ids_list=noise_ids, \n                         experiment_name=experiment_name,\n                         a_config=analyzer_config)\n\n\n#\n# Run classifiers\n#\nsignal_dir  = \"%s/%s\" % (config.analyzer_out_dir, experiment_name)\nnoise_dir   = \"%s/%s/%s\" % (config.analyzer_out_dir, experiment_name, noise_ids[0])\nout_suffix  = experiment_name\nprint(\"Run classifiers over analyzed records. \\nSignal dir: %s\\nNoise dir: %s\" \n      % (signal_dir, noise_dir))\nex.runClassifier(signal_dir=signal_dir, \n                 signal_records=signal_ids, \n                 noise_dir=noise_dir, \n                 out_suffix=out_suffix)\n\nprint(\"\\n\\nExperiment %s took %.2f seconds.\\n\"\n          % (experiment_name, time() - start))\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: target_key = \"age\"\nmy_dict = {\n    \"name\": \"John Smith\",\n    \"age\": 27,\n    \"location\": \"New York\"\n    }\n\nvalue = my_dict[target_key]\nprint(\"The value of {} is {}.\".format(target_key, value)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def missingNumber(arr): \n    n = len(arr) \n    total = (n + 1)*(n + 2)/2\n    sum_of_arr = sum(arr) \n    return total - sum_of_arr \n\narr = [2, 3, 1, 5, 4]\nmissing = missingNumber(arr) \nprint(missing) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_pair(arr, s): \n    pairs = [] \n      \n    # traverse each element \n    for i in range(0, len(arr)):\n          \n        # traverse each element again \n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == s: \n                pairs.append((arr[i], arr[j]))\n                  \n    return pairs\n      \n# Driver Code \narr = [2, 3, 4, 5, 6, 7] \ns = 9\n      \nprint(find_pair(arr, s)) # Output: [(2, 7), (3, 6), (4, 5)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fillMissingValues(arr, n): \n   \n    for i in range(n): \n          \n        if (arr[i] == -1): \n              \n            # j is used to store the index of \n            # element before the zero \n            j = i - 1; \n            while (arr[j] != -1 and j >= 0) : \n                j -= 1; \n  \n            # If there is no element before 0, \n            # then assign zeroes to all  \n            # missing elements \n            if (j < 0): \n                j = i; \n  \n            # fill the missing elements with \n            # the last found non-zero element \n            while (j < n): \n                arr[j] = arr[j - 1]; \n                j += 1; \n  \n  \n# Driver program \narr = [ 3, 7, -1, 4, 5, 6, -1, 1 ]; \nn = len(arr); \nfillMissingValues(arr, n); \n  \n# Print the modified array \nfor i in range(n): \n    print(arr[i], end = ' '); but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Polynomial:\n    def __init__(self, coeff):\n        self.coeff = coeff\n\n    def __call__(self, x):\n        result = 0\n        for idx, c in enumerate(self.coeff):\n            result += c * x ** idx\n        return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nWrite a python code for solving the following equation for \"x\".\n\"\"\"\n\nimport math\n\ndef solve_equation(a, b, c):\n    d = (b**2) - (4 * a * c)\n    x1 = (-b + math.sqrt(d)) / (2 * a)\n    x2 = (-b - math.sqrt(d)) / (2 * a)\n    return x1, x2\n    \nif __name__ == '__main__':\n    a = 4\n    b = 7\n    c = -5\n    x1, x2 = solve_equation(a, b, c)\n    print(\"The solutions are x1 = {}, x2 = {}\".format(x1, x2))\n\n# Output\n# The solutions are x1 = 1.5, x2 = -2.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combinations(arr, target):\n results = []\n \n for i in range(len(arr)):\n for j in range(i+1, len(arr)):\n for k in range(j+1, len(arr)):\n if arr[i] + arr[j] + arr[k] == target:\n results.append([arr[i], arr[j], arr[k]])\n \n return results\n \n arr = [1, 2, 3, 4, 5]\n target = 7\n \n results = combinations(arr, target)\n print(results) # [[1, 2, 4], [1, 3, 3], [2, 3, 2]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class DecisionTreeClassifier:\n def __init__(self):\n self.tree = {}\n \n def fit(self, X, y):\n \"\"\"\n Constructs a decision tree from the given training data.\n \n Args:\n X (list): Training input data\n  y (list): Training output labels\n \"\"\"\n # Calculate the best split attribute\n best_attr = self.__find_best_split_attr(X, y)\n \n # Build tree recursively\n if best_attr:\n self.tree = {best_attr: {}}\n sub_tree = self.tree[best_attr]\n \n # Find best split values\n best_values = self.__find_best_split_values(X, y, best_attr)\n \n # Do splits\n for val in best_values:\n x_subset, y_subset = self.__split(X, y, best_attr, val)\n sub_tree[val] = self.fit(x_subset, y_subset)\n else:\n # Leaf node\n unique_labels = set(y)\n self.tree = {'label': list(unique_labels)[0]}\n \n return self.tree\n \ndef predict(self, X):\n \"\"\"\n Predicts the labels of the given test data using the built decision tree.\n \n Args:\n X (list): Test input data\n \n Returns:\n list: Predicted labels\n \"\"\"\n preds = []\n for x in X:\n # Find the most likely label\n pred_label = self.__predict_instance(x, self.tree)\n preds.append(pred_label)\n \n return preds but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: str = \"apple, banana, orange\"\n\n# split the string\nstring_list = str.split(', ')\n\n# print result\nprint(string_list)  # ['apple', 'banana', 'orange'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import datasets\nboston = datasets.load_boston()\n\nX = boston.data\ny = boston.target\n\nX_rm = X[:, 5]\n\ndef model(X, w):\n    return X * w\n\n# Mean Squared Error\ndef cost(X, y, w):\n    y_pred = model(X, w)\n    mse = np.sum((y_pred - y) ** 2) / len(X)\n    return mse\n\n# Gradient Descent\ndef gd(X, y, learning_rate, n_iters):\n    w = np.zeros()\n    mse = []\n\n    for i in range(n_iters):\n        y_pred = model(X, w)\n        grad_w = X.T.dot(y_pred - y)\n        w = w - learning_rate * grad_w\n\n        current_mse = cost(X, y, w)\n        mse.append(current_mse)\n    \n    return w, mse\n\nw, mse = gd(X_rm, y, 0.2, 100)\n\ny_pred = model(X_rm, w)\n\n# Plotting the data\nplt.scatter(X_rm, y)\nplt.plot(X_rm, y_pred, c='r')\nplt.show()\n\n# Plotting the cost curve\nplt.plot(np.arange(100), mse)\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(n):\n    if n == 1:\n        return False\n    if n in (2, 3):\n        return True\n    if not (n & 1) and n > 2:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd \nfrom sklearn.linear_model import LinearRegression \nfrom sklearn.metrics import mean_squared_error\n\n# Read data\ndata = pd.read_csv('data.csv')\nX = data[['x']]\ny = data['y']\n\n# Create a linear regression model\nmodel = LinearRegression()\nmodel.fit(X,y)\n\n# Make predictions\npredictions = model.predict(X)\n\n# Calculate the mean squared error\nmse = mean_squared_error(y, predictions)\nprint(mse) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def removeDuplicates(list):\n  newList = []\n  for element in list:\n    if element not in newList:\n      newList.append(element)\n  return newList but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\n# Training set\nprefix = [ \"at\", \"in\", \"up\" ]\ninfix = [ \"around\", \"between\", \"through\" ]\nsuffix = [ \"ate\", \"ize\", \"lfy\" ]\n\n# Classifier\ndef classify(word):\n pattern = re.compile(r'^(.*?)(\\w+?)(.*?)$')\n m = pattern.match(word)\n \n if m.group(1) in prefix:\n  print('Prefix - {}'.format(word))\n elif m.group(2) in infix:\n  print('Infix - {}'.format(word))\n elif m.group(3) in suffix:\n  print('Suffix - {}'.format(word))\n  \n# Test\nwords = [\"attempting\", \"beyond\", \"caresses\"]\nfor word in words:\n classify(word)\n\n# Output\n# Prefix - attempting\n# Infix - beyond\n# Suffix - caresses but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import libraries\nimport pandas as pd\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nnltk.download('vader_lexicon')\n\n# Read the customer comments into a dataframe \ndf = pd.read_csv('customer_comments.csv')\ndf.head()\n\n# Create an instance of the SentimentIntensityAnalyzer\nsia = SentimentIntensityAnalyzer()\n\n# Loop over comments in the dataframe and compute sentiment scores\nfor comment in df[\"comment\"]:\n    sentiment=sia.polarity_scores(comment)['compound']\n    df.loc[df[\"comment\"]==comment,\"sentiment\"]=sentiment\n    \n# Print the results\nprint(df.head()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def even_sum(numbers): \n    even_sum = 0\n    for num in numbers:\n        if (num % 2 == 0):\n            even_sum += num\n    return even_sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_params(a, b):\n  print(b + ' ' + a) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = input() \nlength = len(string) \n\nfor i in range(length-1, -1, -1):\n    print(string[i], end=\"\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: nums = [11, 9, 12, 8, 5]\nmax_num = max(nums)\n\nprint(max_num) # 12 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom scipy.optimize import minimize \n\n# Define the objective function\ndef objective(x):\n  return -np.sum(np.log(x))\n\n# Define the constraints\ndef constraints(x):\n  return np.sum(x) - 1\n\n# Set the initial values of the variables\nx0 = np.ones(5)/5\n\n# Minimize the portfolio\nx = minimize(objective, x0, method=\"SLSQP\", constraints=[constraints]) \n\n# Print the optimized portfolio\nprint(\"Optimized weights: \", x.x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calcSystem(equations):\n  ans = []\n  M = [equations[0][0],equations[1][0],equations[0][2]]\n  N = [equations[0][1],equations[1][1],equations[1][2]]\n  for x in range(3):\n    if N[x] != 0:\n      ans.append(M[x]/N[x])\n      M[(x+1)%3] = M[(x+1)%3] - (M[x]/N[x]) * N[(x+1)%3]\n      N[(x+1)%3] = N[(x+1)%3] - (M[x]/N[x]) * N[(x+1)%3]\n    else:\n      ans.append(M[x+1]/N[x+1])\n      break\n  ans.append(M[2]/N[2])\n  return ans\n\neq1 = [3,2,8]\neq2 = [1,-1,0]\n\nanswer = calcSystem([eq1, eq2])\nprint(\"x = \", answer[0])\nprint(\"y = \", answer[1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_largest_number(numbers):\n    largest_number = -float('inf')\n    for number in numbers:\n        if number > largest_number:\n            largest_number = number\n    return largest_number\n\nmy_list = [1, 5, 10, 15, 20]\nlargest_number = find_largest_number(my_list)\nprint(largest_number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def copyArray(arr): \n  \n    res = [] \n  \n    for i in range(len(arr)): \n        res.append(arr[i]) \n  \n    return res but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Calculator:\n    def __init__(self, num1, operator, num2):\n        self.num1 = num1\n        self.operator = operator\n        self.num2 = num2\n        \n    def calculate(self):\n        if self.operator == \"+\":\n            return self.num1 + self.num2\n        elif self.operator == \"-\": \n            return self.num1 - self.num2\n        elif self.operator == \"*\":\n            return self.num1 * self.num2\n        elif self.operator == \"/\":\n            return self.num1 / self.num2\n\ncalc = Calculator(2,\"+\",4)\nresult = calc.calculate()\nprint(result) # Outputs 6 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string1 = \"Hello\"\nstring2 = \"World\"\nconcatenated_string = string1 + string2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maximumOfThreeNumbers(a, b, c):\n   if (a >= b) and (a >= c):\n     return a\n   elif (b >= a) and (b >= c):\n     return b\n   else:\n     return c\n\nmaximum = maximumOfThreeNumbers(10, 5, 20)\nprint(\"The maximum number is:\", maximum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def dot_product(v1, v2):\n    return sum(x1*x2 for x1, x2 in zip(v1, v2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport tensorflow as tf\n\n# Input layer\ninputs = tf.keras.Input(shape=(3,))\n\n# Hidden layers\ndense_1 = tf.keras.layers.Dense(7, activation='relu')(inputs)\ndense_2 = tf.keras.layers.Dense(5, activation='relu')(dense_1)\n\n# Output layer\noutput = tf.keras.layers.Dense(1, activation='relu')(dense_2)\n\n# Create model\nmodel = tf.keras.Model(inputs=inputs, outputs=output)\n\n# Compile model\nmodel.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_number_greater_than_10(arr):\n    for num in arr:\n        if num > 10:\n            return num\n\n# Example\ndata_set = [1, 2, 11, 20, 6, 7]\nprint(find_number_greater_than_10(data_set))  # Output: 11 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport tensorflow as tf\n\n# Define inputs and outputs\nX = tf.placeholder(tf.float32, shape=[3, 4])\ny = tf.placeholder(tf.float32, shape=[3, 1])\n\n# Define weights and biases\nW = tf.Variable(tf.random_normal([4, 1]))\nb = tf.Variable(tf.random_normal([1]))\n\n# Define model\nmodel = tf.sigmoid(tf.matmul(X, W ) + b)\n\n# Define cost and optimizer\ncost = tf.reduce_mean(-y * tf.log(model) - (1-y) * tf.log(1-model))\noptimizer = tf.train.GradientDescentOptimizer(0.1).minimize(cost)\n\n# Train model\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n    for i in range(1000):\n        sess.run(optimizer, feed_dict={X:[[0,0,1,0],[1,0,0,0],[1,1,0,0]], y:[[0],[1],[1]]})\n\n# Print results\nprint(\"Final weights\", sess.run(W))\nprint(\"Final bais: \", sess.run(b)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: let leader_info = {\n    \"name\": \"Diana Prince\",\n    \"job\": \"Leader\"\n}; but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_sequence():\n  sequence = [random.randint(0,20) for i in range(5)]\n  print(sequence)\n  \ngenerate_sequence() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_words(sentence):\n    words = sentence.split()\n    freq_dict = {}\n    for word in words:\n        if word in freq_dict:\n            freq_dict[word] += 1\n        else:\n            freq_dict[word] = 1\n    return freq_dict\n\nprint(count_words(\"This is a sentence of words which contains words repeated multiple times\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef contains_numbers(string):\n    \"\"\"Classify if a given string contains any numbers.\"\"\"\n    return bool(re.search(r'\\d', string))\n\n# Usage Example\nstring = \"password123\"\ncontains_numbers = contains_numbers(string)\nprint(contains_numbers)  # True but is not the same. just give one example and only return the code."}
