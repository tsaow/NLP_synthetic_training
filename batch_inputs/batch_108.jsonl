{"prompt": "make some code that functions the same as the following code: # Hash table class \nclass Hash: \n     \n    def __init__(self, capacity): \n        self.capacity = capacity \n        self.data = {} \n          \n    # returns true if there is a \n    # key present in the hash \n    def contains(self, key): \n        return key in self.data \n          \n    # returns the value of a  \n    # given key in the hash \n    def get(self, key): \n        return self.data.get(key, -1) \n      \n    # inserts the given key value \n    # pair in the hash \n    def set(self, key, value): \n        if len(self.data) >= self.capacity: \n            self.removeLRU() \n        self.data[key] = value \n          \n    # removes the least recently  \n    # used entry from the hash \n    def removeLRU(self): \n        minkey = None\n        for key in self.data: \n            if minkey is None: \n                minkey = key \n            elif self.data[key] < self.data[minkey]: \n                minkey = key \n        self.data.pop(minkey) \n  \n# LRU Cache class \nclass LRUCache: \n  \n    # initializes class \n    def __init__(self, capacity): \n        self.capacity = capacity \n        self.hash = Hash(capacity) \n        self.timestamp = 0 \n  \n    # Given a key, returns value \n    # from cache if key is present \n    # else returns -1 \n    def get(self, key): \n        if self.hash.contains(key): \n            value = self.hash.get(key) \n            self.timestamp += 1\n            self.hash.set(key, (self.timestamp, value)) \n            return value \n        return -1\n  \n    # sets the key value pair in the cache \n    def set(self, key, value): \n        if self.capacity == 0: \n            return \n        self.timestamp += 1\n        self.hash.set(key, (self.timestamp, value)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\n# Calculate the square root of 68\nsqrt_num = math.sqrt(68)\n\n# Print the result\nprint(\"The square root of 68 is:\", sqrt_num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_dict_nums(nums1, nums2):\n    result = dict()\n    for key in nums1.keys():\n        result[key] = nums1[key] + nums2[key]\n    return result\n\nprint(add_dict_nums(nums1, nums2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\nimport xml.etree.ElementTree as ET\n\nroot = ET.fromstring('<books><book title=\"Harry Potter\" author=\"J.K. Rowling\" /><book title=\"Pride and Prejudice\" author=\"Jane Austen\" /></books>')\n\ndata = []\n\nfor book in root:\n data.append({\n 'title': book.attrib['title'],\n 'author': book.attrib['author'],\n })\n\njson_data = json.dumps(data)\nprint(json_data)\n\n# Output:\n[\n {\"title\": \"Harry Potter\", \"author\": \"J.K. Rowling\"}, \n {\"title\": \"Pride and Prejudice\", \"author\": \"Jane Austen\"}\n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from bs4 import BeautifulSoup\nimport requests\n\nurl = 'https://www.example.com'\nresponse = requests.get(url)\n\nsoup = BeautifulSoup(response.text, 'lxml')\nfor link in soup.find_all('a'):\n    print(link.get('href')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n     a, b = 0, 1\n     if n < 0: \n        print(\"Incorrect input\") \n     elif n == 0: \n        return a \n     elif n == 1: \n        return b \n     else: \n        for _ in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_common(set_a, set_b):\n  return [item for item in set_a if item in set_b] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Function to generate random numbers \ndef random_number(start, end): \n\treturn random.randint(start, end) \n\n# Driver code\nstart = 1\nend = 10\nprint(random_number(start, end)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ncharacters = string.ascii_lowercase + string.digits + string.ascii_uppercase\npassword =  \"\".join(random.choice(characters) for x in range(6))\nprint(password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nPrint the Fibonacci sequence up to the given number\n\"\"\"\n\ndef fibonacci(n):\n    # Base case\n    if n == 0 or n == 1:\n        return n\n \n    # Recursive case\n    return fibonacci(n-1) + fibonacci(n-2)\n \n# Print the Fibonacci sequence up to the given number\nn = 10\nfor i in range(n + 1):\n    print(fibonacci(i)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Assume input is a valid mathematical expression with no syntax errors \n\ndef expression_parser(expression): \n    tokens = expression.split() \n    stack = [] \n  \n    for token in tokens: \n        if token == '+' or token == '*' or token == '/': \n            a = stack.pop() \n            b = stack.pop() \n            if token == '+': \n                c = b + a \n            elif token == '*': \n                c = b * a \n            else: \n                c = b / a \n            stack.append(c) \n        else: \n            stack.append(int(token)) \n    return stack.pop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_array(arr): \n n = len(arr) \n  \n# Traverse through all array elements \nfor i in range(n): \n  \n # Last i elements are already in place \n for j in range(0, n-i-1): \n  \n  # traverse the array from 0 to n-i-1 \n  # Swap if the element found is greater \n  # than the next element \n  if arr[j] > arr[j+1] : \n   arr[j], arr[j+1] = arr[j+1], arr[j] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# generate the sequence\nsequence_length = 10\nsequence = [] \nfor i in range(sequence_length):\n  sequence.append(random.randint(1, 10))\n\nprint(sequence) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def largestNumber(list): \n    max_num = 0\n    for i in list:  \n        if i > max_num: \n            max_num = i \n    return max_num \n  \n\nlist = [3, 6, 4, 8, 1]\nlargestNumber = largestNumber(list) \nprint(\"Largest element in the list is: \", largestNumber); but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\ndef get_movie_info(year):\n    url = f'https://www.imdb.com/search/title/?title_type=feature&release_date={year}-01-01,{year}-12-31'\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    movie_containers = soup.find_all('div', class_ = 'lister-item mode-advanced')\n    movie_list = []\n    for container in movie_containers:\n        movie_data = {}\n        movie_data['title'] = container.h3.a.text\n        movie_data['year'] = container.h3.find('span', class_ = 'lister-item-year').text\n        movie_data['genre'] = container.p.find('span', class_ = 'genre').text.strip()\n        movie_data['rating'] = float(container.strong.text)\n        movie_list.append(movie_data)\n    return movie_list\n\n# Usage example\nmovies = get_movie_info(2020)\nprint(movies) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# Create the data frame\ndata_frame = pd.DataFrame(data)\n  \n# Print the data frame\nprint(data_frame) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nspell_checker_input = \"The qick brown fox jumps over the layy dog\"\n\nurl = 'https://api.cognitive.microsoft.com/bing/v7.0/spellcheck?mode=proof&mkt=en-US'\n\nheaders = {\n    'Ocp-Apim-Subscription-Key': YOUR_API_KEY\n}\n\nparams = {\n    'text': spell_checker_input\n}\n\nresponse = requests.post(url, headers=headers, params=params)\n\nresult = response.json()\n\ncorrected_version = result['flaggedTokens'][0]['suggestions'][0]['suggestion']\n\nprint(f\"Corrected version is: {corrected_version}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [10,2,5,1,20]\n\nfor x in my_list:\n    print(x)\n    \nfor x in sorted(my_list, reverse=True):\n    print(x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# Read data\ndata = pd.DataFrame({\n 'Temperature': [79.6, 92.1, 81.1, 80.2, 86.3, 89.2, 80.4, 88.5, 91.3, 76.2, 83.3]\n})\n\n# Plot data\ndata.plot()\n\n# Initialize and train the model\nfrom sklearn.linear_model import LinearRegression\n\nX = data.index.values.reshape(-1, 1)\ny = data.Temperature\nmodel = LinearRegression().fit(X, y)\n\n# Make a prediction\npredicted_temperature = model.predict([[12]]) # Predict temperature at the 12th index\nprint(f'Predicted temperature: {predicted_temperature[0]}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: powers_list = [] \nfor i in range(0,6): \n    powers_list.append(3**i) \n  \nprint(powers_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_squares(s):\n    total = 0\n    for x in s:\n        total += x * x\n    return total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n  def __init__(self, name, job, age):\n    self.name = name\n    self.job = job\n    self.age = age but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Python. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_average(numbers):\n    total = sum(numbers)\n    length = len(numbers)\n    return total/length but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def numPaths(m, n):\n\n #Create an array to store the results of subproblems\n paths = [[0] * n for _ in range(m)] \n  \n #Fill the base cases \n for i in range(m): \n  paths[i][0] = 1\n for j in range(n): \n  paths[0][j] = 1\n  \n #Calculate the number of unique paths\n for i in range(1, m): \n  for j in range(1, n): \n   paths[i][j] = paths[i - 1][j] + paths[i][j - 1] \n  \n #return the final result\n return paths[m - 1][n - 1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_largest_number(nums):\n    highest_num = nums[0]\n    for i in nums:\n        if i>highest_num:\n            highest_num = i\n    return highest_num but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from scipy.optimize import minimize\n\ndef f(x):\n return 3*x[0] + 2*x[1]\n\ndef con(x):\n return x[0] + x[1] - 10\n\ncons = ({'type': 'ineq', 'fun': con})\n\nresult = minimize(f, [0, 0], method='SLSQP', constraints=cons)\nx = result.x\n\nprint('Solution:', x)\nprint('Maximum value:', result.value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def set_difference(Set1, Set2):\n    return set(Set1) - set(Set2)\n\nresult = set_difference({1, 2, 3, 4, 5}, {3, 4, 5, 6, 7})\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os\n\npath = \".\"\n\nfor dirName, subdirList, fileList in os.walk(path):\n print(os.path.abspath(dirName)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\nfrom sklearn import cluster\n\n# define model\nk_means = cluster.KMeans(n_clusters=4)\n\n# fit and predict\nk_means.fit(X)\npredictions = k_means.predict(X) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(10): \n    print(\"Perfect square at position\", i+1, \"is\", (i+1)*(i+1)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Game:\n    def __init__(self):\n        pass\n    \n    def play_game(self, player_choice):\n        # list of possible choices\n        choices = [\"rock\", \"paper\", \"scissors\"]\n        \n        # randomly choose one from the list\n        computer_choice = choices[random.randint(0, 2)]\n        \n        # compare choice\n        # rock beats scissors\n        if computer_choice == choices[0] and player_choice == choices[2]:\n            print(\"Computer chose rock. You lose.\")\n        elif computer_choice == choices[2] and player_choice == choices[0]:\n            print(\"Computer chose scissors. You win.\")\n            \n        # paper beats rock\n        elif computer_choice == choices[1] and player_choice == choices[0]:\n            print(\"Computer chose paper. You lose.\")\n        elif computer_choice == choices[0] and player_choice == choices[1]:\n            print(\"Computer chose rock. You win.\")\n            \n        # scissors beats paper\n        elif computer_choice == choices[2] and player_choice == choices[1]:\n            print(\"Computer chose scissors. You lose.\")\n        elif computer_choice == choices[1] and player_choice == choices[2]:\n            print(\"Computer chose paper. You win.\")\n            \n        # draw\n        elif computer_choice == player_choice:\n            print(\"Computer chose the same thing. Draw.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack:\n    def __init__(self):\n        self.items = []\n\n    def isEmpty(self):\n        return self.items == []\n\n    def push(self, data):\n        self.items.append(data)\n\n    def pop(self):\n        return self.items.pop()\n\n    def peek(self):\n        return self.items[len(self.items)-1]\n\n    def size(self):\n        return len(self.items) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport keras\nfrom keras.layers import Input, LSTM, Dense\nfrom keras.models import Model\n\ninputs = Input(shape=(1000,))\nencoded = LSTM(128)(inputs)\ndense1 = Dense(16, activation='relu')(encoded)\ndense2 = Dense(1, activation='sigmoid')(dense1)\n\nencoder_decoder_model = Model(inputs, dense2)\nencoder_decoder_model.compile(optimizer='adam', loss='binary_crossentropy')\n\n# Fit the model\nX_train = np.load('X_train.npy')\ny_train = np.load('y_train.npy')\n\nencoder_decoder_model.fit(X_train, y_train, batch_size=128, epochs=30)\n\n# Evaluate the model\nX_test = np.load('X_test.npy')\ny_test = np.load('y_test.npy')\n\nloss, accuracy = encoder_decoder_model.evaluate(X_test, y_test)\nprint('Test accuracy:', accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import necessary libraries\nimport requests\nfrom bs4 import BeautifulSoup\n\n#define main function to scrape titles\ndef ScrapeTitles(keyword):\n  #specify the url\n  url = 'http://www.example.com/articley-page/'\n\n  #query the website and return the html to the variable page\n  page = requests.get(url)\n\n  #parse the html using beautiful soup and store in variable `soup`\n  soup = BeautifulSoup(page.content, 'html.parser')\n\n  #find all article titles with `h2` tag\n  titles = soup.find_all('h2')\n\n  #initialize empty list to store titles\n  result = []\n\n  #loop through all titles and check the keyword\n  for title in titles:\n    if keyword in title.text.lower():\n      result.append(title.text)\n  \n  return result\n\n#sample call to scrape titles\ntitles = ScrapeTitles('data science')\nfor title in titles:\n  print(title) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\n\n########################################################################\n# 20 Oct 2014\n# Patrick Lombard, Centre for Stem Stem Research\n# Core Bioinformatics Group\n# University of Cambridge\n# All right reserved.\n########################################################################\n\nimport argparse\nimport subprocess\nimport sys, re, os\n\ndef paired_bowtie(fastq1, fastq2, name, index, outdir):\n\tsam1 = outdir + \"/\" + \"tmp.sam\"\n\tsam1_o = open(sam1, \"wb\")\n\treport = outdir+'/'+name+'_report.txt'\n\treport1_o = open(report, \"wb\")\n\tuniq = \"bowtie -m 2 -v 1 --best --strata --seed 0 --sam {0} -1 {1} -2 {2}\".format(index, fastq1, fastq2)\n\tp = subprocess.Popen(uniq.split(), stdout = sam1_o, stderr=report1_o)\n\tp.communicate()\n\tsam2 = outdir+\"/\"+name+\".sam\"\n\tgrep_paired_unique(sam1, sam2)\n\tos.remove(sam1)\n\ndef single_bowtie(fastq, name, index, outdir):\n\tsam1 = outdir + \"/\" + \"tmp.sam\"\n\tsam1_o = open(sam1, \"wb\")\n\treport = outdir+'/'+name+'_report.txt'\n\treport1_o = open(report, \"wb\")\n\tuniq = \"bowtie -m 2 -v 1 --best --strata --seed 0 --sam {0} {1}\".format(index, fastq)\n\tp = subprocess.Popen(uniq.split(), stdout = sam1_o, stderr=report1_o)\n\tp.communicate()\n\tsam2 = outdir+\"/\"+name+\".sam\"\n\tgrep_single_unique(sam1, sam2)\n\tos.remove(sam1)\n\ndef grep_paired_unique(samfile, outfile):\n\toutput=  open(outfile, \"w\")\n\twith open(samfile) as f:\n\t\tfor line in f:\n\t\t\tline = line.rstrip()\n\t\t\tword = line.split(\"\\t\")\n\t\t\tif line.startswith(\"@\"):\n\t\t\t\toutput.write(\"{}\\n\".format(line)),\n\t\t\t\tcontinue\n\t\t\tif len(word) > 12:\n\t\t\t\tm = re.match(\"XS:i:\", word[12])\n\t\t\t\tif not m:\n\t\t\t\t\tif int(word[1]) == 147 or int(word[1]) == 83 or int(word[1]) == 99 or int(word[1]) == 163 or int(word[1]) == 81 or int(word[1]) == 97 or int(word[1]) == 145 or int(word[1]) == 161:\n\t\t\t\t\t\toutput.write(\"{}\\n\".format(line)),\n\ndef grep_single_unique(samfile, outfile):\n\toutput=  open(outfile, \"w\")\n\twith open(samfile) as f:\n\t\tfor line in f:\n\t\t\tline = line.rstrip()\n\t\t\tword = line.split(\"\\t\")\n\t\t\tif line.startswith(\"@\"):\n\t\t\t\toutput.write(\"{}\\n\".format(line)),\n\t\t\t\tcontinue\n\t\t\tif len(word) > 12:\n\t\t\t\tm = re.match(\"XS:i:\", word[12])\n\t\t\t\tif not m:\n\t\t\t\t\tif int(word[1]) == 0 or int(word[1]) == 16:\n\t\t\t\t\t\toutput.write(\"{}\\n\".format(line)),\n\n\ndef paired_bowtie2(fastq1, fastq2, name, index, outdir, threads):\n\treport = outdir+'/'+name+'_report.txt'\n\treport1_o = open(report, \"wb\")\n\tuniq = \"bowtie2 -p {4} -k 2 -N 1 --mm --no-mixed --no-discordant -x {0} -1 {1} -2 {2} -S {3}/tmp.sam\".format(index, fastq1, fastq2, outdir, threads)\n\tp = subprocess.Popen(uniq.split(), stderr=report1_o)\n\tp.communicate()\n\tgrep_paired_unique(outdir+\"/tmp.sam\", outdir+'/'+name+'.sam')\n\tos.remove(outdir+\"/tmp.sam\")\n\ndef single_bowtie2(fastq, name, index, outdir, threads):\n\treport = outdir+'/'+name+'_report.txt'\n\treport1_o = open(report, \"wb\")\n\tuniq = \"bowtie2 -p {3} -k 2 -N 1 --mm  -x {0} -U {1} -S {2}/tmp.sam\".format(index, fastq, outdir, threads)\n\tp = subprocess.Popen(uniq.split(), stderr=report1_o)\n\tp.communicate()\n\tgrep_single_unique(outdir+\"/tmp.sam\", outdir+'/'+name+'.sam')\n\tos.remove(outdir+\"/tmp.sam\")\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_abundant(num):\n    divisor_sum = 0\n    for i in range(1, int(num/2)+1):\n        if num % i == 0:\n            divisor_sum += i\n\n    return divisor_sum > num\n\nnum = 21\n\nif is_abundant(num):\n    print(f\"{num} is abundant\")\nelse:\n    print(f\"{num} is not abundant\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def intersection(list1, list2):\n result = []\n \n for element in list1:\n if element in list2:\n result.append(element)\n \n return result\n\nintersection(list1, list2) // Output: [3, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def squares_up_to_n(n):\n  for i in range(n):\n    yield i**2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack: \n   \n    def __init__(self): \n        self.stack = [] \n   \n    def isEmpty(self): \n        return len(self.stack) == 0\n       \n    def push(self, item): \n        self.stack.append(item) \n       \n    def pop(self): \n        if (self.isEmpty()): \n            return \"Stack is empty\"\n       \n        return self.stack.pop() \n       \n    def peek(self): \n        if (self.isEmpty()): \n            return \"Stack is empty\"\n\n        return self.stack[-1] \n       \n    def size(self): \n        return len(self.stack) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # function to print the square pattern \ndef printSquarePattern(n): \n\n\t# create a container to hold the data \n\tmat = [[0 for x in range(n)] for y in range(n)] \n\n\t# counter for the list of integers \n\tindex = 0\n\n\t# traverse the matrix \n\tfor i in range(0, n // 2 + 1): \n\t\tfor j in range(i, n - i): \n\t\t\tmat[i][j] = index \n\t\t\tindex = index + 1\n\n\t\tfor j in range(i + 1, n - i): \n\t\t\tmat[j][n - i - 1] = index \n\t\t\tindex = index + 1\n\n\t\tfor j in range(n - i - 2, i, -1): \n\t\t\tmat[n - i - 1][j] = index\n\t\t\tindex = index + 1\n\n\t\tfor j in range(n - i - 2, i, -1): \n\t\t\tmat[j][i] = index \n\t\t\tindex = index + 1\n\n\t# print the pattern \n\tfor i in range(0, n): \n\t\tfor j in range(0, n): \n\t\t\tprint(mat[i][j], end=\" \") \n\t\tprint() \n\n# Driver code \nn = 4\nprintSquarePattern(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef heron(a, b, c):\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area\n\nprint('The area of the triangle is ', heron(6, 8, 10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sumN(num): \n  response = 0\n  for i in range(1, num + 1):\n    response += i\n  return response but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_num(myList, num):\n    return [x for x in myList if x != num]\n  \nremoved_list = remove_num(list, 2)\nprint(removed_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class TreeIterator:\n    def __init__(self, root):\n        self.root = root\n        self.stack = []\n        self.current = None\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        # Case 1: there is a left-subtree\n        if self.current is None:\n            if self.root is not None:\n                self.stack.append(self.root)\n                self.current = self.root.left\n            else:\n                # Tree is empty\n                raise StopIteration\n        # Case 2: there is a right-subtree\n        elif self.current.right is not None:\n            self.stack.append(self.current.right)\n            self.current = self.current.right.left\n        # Case 3: there is no right-subtree and no left-subtree\n        elif self.stack:\n            self.current = self.stack.pop()\n        else:\n            # It's the end of the traversal\n            self.current = None\n            raise StopIteration\n        return self.current.value but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n return 1 if n in (0, 1) else n * factorial(n - 1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(n):\n    if n <= 1: \n        return False\n    for i in range(2, n): \n        if n % i == 0: \n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def extract_words_from_string(s): \n    return s.split(' ') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_word(word_list):\n longest_word = word_list[0]\n for word in word_list:\n if len(word) > len(longest_word):\n longest_word = word\n return longest_word but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tabulate\n\nfruits = [\"apple\", \"orange\", \"pineapple\", \"melon\"] \ntable = [(fruit,) for fruit in fruits] \nprint(tabulate.tabulate(table, headers=[\"Fruits\"])) \n# Output: \n# Fruits\n# apple\n# orange\n# pineapple\n# melon but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Function to get the computer's decision\ndef computer_decision():\n choices = ['rock', 'paper', 'scissors']\n decision = random.choice(choices)\n return decision\n \n# Function to compare the user's and computer's decisions\ndef compare_decisions(user_decision, computer_decision):\n if user_decision == computer_decision:\n print(\"It's a tie!\")\n \n elif (user_decision == 'rock' and computer_decision == 'scissors') or (user_decision == 'paper' and computer_decision == 'rock') or (user_decision == 'scissors' and computer_decision == 'paper'):\n print(\"You win!\")\n \n else:\n print(\"The computer wins!\")\n\n# Function to get the user's decision\ndef user_decision():\n choices = ['rock', 'paper', 'scissors']\n user_decision = input('Enter your decision: ').lower()\n \n if user_decision in choices:\n return user_decision\n \n else:\n print('Invalid choice! Please enter either rock, paper or scissors.')\n user_decision()\n\n# Main program loop\nwhile True:\n user_decision1 = user_decision()\n computer_decision1 = computer_decision()\n compare_decisions(user_decision1, computer_decision1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(target, array):\n  for item in array:\n    if target == item:\n      return True\n   \n  return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def celsius_to_fahrenheit(celsius):\n    return (celsius * 9 / 5 + 32)\n\ntemperature_in_fahrenheit = celsius_to_fahrenheit(24)\nprint(temperature_in_fahrenheit) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(list):\n    new_list = []\n    for e in list:\n        if e not in new_list:\n            new_list.append(e)\n    return new_list\n\nlist = [1, 2, 3, 1, 3, 4]\nlist = remove_duplicates(list)\nprint(list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class HashTable:\n    def __init__(self):\n        self.table = {}\n    \n    def put(self, key, value):\n        self.table[key] = value\n    \n    def get(self, key):\n        return self.table.get(key) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\n\n# Define buckets\nbuckets = [0]*10\n\n# Read line-by-line\nfor line in sys.stdin:\n # Read as integer\n value = int(line)\n\n # Find the bucket\n bucket = max(int(value/10), 0)\n buckets[bucket] += 1\n\n# Output result\nfor i, count in enumerate(buckets):\n print('{}-{}: {}'.format(i*10, i*10+9, count)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #! /usr/bin/python \n#\n# Auto-generate reST documentation for Sphinx from Evennia source\n# code.\n# \n# Uses etinenned's sphinx autopackage script. Install it to folder\n# \"autogen\" in this same directory:\n#\n#   hg clone https://bitbucket.org/etienned/sphinx-autopackage-script autogen\n#\n# Create a directory tree \"code/\" containing one directory for every\n# package in the PACKAGE dictionary below. Make sure EVENNIA_DIR\n# points to an Evennia root dir.  Then just run this script. A new\n# folder sphinx/source/code will be created with the reST sources.\n#\n# Note - this is not working very well at the moment, not all sources\n# seems to be properly detected and you get lots of errors when\n# compiling. To nevertheless make a link to the code from the doc\n# front page, edit docs/sphinx/sources/index.rst to reference\n# code/modules.\n#\n\n\nimport os, subprocess, shutil\n\nEVENNIA_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))\n\nSPHINX_DIR = os.path.join(os.path.join(EVENNIA_DIR, \"docs\"), \"sphinx\")\nSPHINX_SRC_DIR = os.path.join(SPHINX_DIR, \"source\")\nSPHINX_CODE_DIR = os.path.join(SPHINX_SRC_DIR, \"code\")\n\nCONVERT_DIR = os.path.join(SPHINX_DIR, 'src2rest')\nAUTOGEN_EXE = os.path.join(CONVERT_DIR, os.path.join(\"autogen\", \"generate_modules.py\"))\n\ndef src2rest():\n    \"\"\"\n    Run import \n    \"\"\"\n    try:\n        shutil.rmtree(SPHINX_CODE_DIR)\n        print \"Emptied old %s.\" % SPHINX_CODE_DIR\n    except OSError:\n        pass \n    os.mkdir(SPHINX_CODE_DIR)\n       \n    inpath = EVENNIA_DIR\n    outpath = SPHINX_CODE_DIR\n    excludes = [r\".*/migrations/.*\", r\"evennia\\.py$\", r\"manage\\.py$\", \n                r\"runner\\.py$\", r\"server.py$\", r\"portal.py$\"]\n        \n    subprocess.call([\"python\", AUTOGEN_EXE, \n                     \"-n\", \"Evennia\",\n                     \"-d\",  outpath,\n                     \"-s\", \"rst\",\n                     \"-f\",\n                     inpath] + excludes)\n\nif __name__ == '__main__':\n\n    try:\n        src2rest()\n    except Exception, e:\n        print e\n        print \"Make sure to read the header of this file so that it's properly set up.\"\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_random_password(length):\n    alphanumeric = string.ascii_letters + string.digits\n    password = \"\".join(random.choice(alphanumeric) for i in range(length))\n    return password\n\npwd = generate_random_password(10)\nprint(pwd) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_values = [21, 15, 11, 17, 12, 29]\nmax_value = max(list_values) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_top_k_frequent_words(words, k):\n    \"\"\"\n    Finds the top k most frequent words in a given list of words\n    :param words: A list of words\n    :type words: list\n    :param k: The number of words to return\n    :type k: int\n    :return: A list of top k most frequent words\n    :rtype: list\n    \"\"\"\n    frequencies = {}\n    for word in words:\n        if word in frequencies:\n            frequencies[word] += 1\n        else:\n            frequencies[word] = 1\n\n    frequent_words = sorted(frequencies.items(), key=lambda item: item[1], reverse=True)\n    return [word[0] for word in frequent_words[:k]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nfor _ in range(10):\n    print(random.randint(0,100)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_permutation(str1, str2):\n    # If lengths of strings are not same, then they cannot be permutations \n    if len(str1) != len(str2): \n        return False\n\n    # Create a count array and initialize all values as 0 \n    count_arr = [0] * 256\n\n    # For each character in input strings, increment count in \n    # the corresponding count array \n    for i in range(len(str1)):\n           count_arr[ord(str1[i])] += 1\n\n    # Decrement count for every character in second string \n    for i in range(len(str2)): \n           count_arr[ord(str2[i])] -= 1\n\n    # Check if all counts become 0 \n    for i in range(256):\n            if count_arr[i]:\n               return False\n  \n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_letter(text):\n    result = ''\n    for letter in text:\n        if letter == 'a':\n            result += '$'\n        else:\n            result += letter\n    return result\n\ntext = 'show me the money'\n\nprint(replace_letter(text)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n#Load the input dataset as a pandas dataframe\ndf = pd.read_csv(\"input_data.csv\")\n\n#Randomly sample 100 records from the dataset\ndf_sampled = df.sample(n=100)\n\n#Print the resulting dataframe\nprint(df_sampled) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isAnagram(s1, s2):\n # Convert strings to dictionaries\n s1_dict = {}\n for c1 in s1:\n s1_dict[c1] = s1_dict.get(c1, 0) + 1\n s2_dict = {}\n for c2 in s2:\n s2_dict[c2] = s2_dict.get(c2, 0) + 1\n\n # Compare dictionaries\n if (s1_dict == s2_dict):\n return True\n else:\n return False\n\ns1 = \"cat\"\ns2 = \"act\"\n\nif (isAnagram(s1, s2)):\n print(\"Strings are anagrams\")\nelse:\n print(\"Strings are not anagrams\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n \n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\n\nimport sys\nimport os\nimport tempfile\nimport gobject\nimport gtk \nimport socket\nimport shm\nimport threading\nimport time\nimport struct\nimport cairo\nimport array\nimport cPickle as pickle\n\nimport message\nimport config\n\n#gtk.gdk.threads_init()\n\ndef olog(str):\n    olog_nonl(str + \"\\n\")\n\ndef olog_nonl(str):\n    sys.stderr.write(\"O: \" + str)\n    sys.stderr.flush()\n\nclass UI:\n    shm_obj = None\n    sem_obj = None\n    cr = None\n    pixbuf = None\n    rectangle = None\n\n    def redraw(self) :\n        print \"redraw-----\"\n        if self.sem_obj != None:\n            self.thread_lock.acquire()\n            try :\n                try :\n                    self.sem_obj.P()\n                    try :\n                        shm_obj = self.shm_obj\n                        size = struct.unpack_from(\"i\", shm_obj.read(4,4*0))[0]\n                        x = struct.unpack_from(\"i\", shm_obj.read(4,4*1))[0]\n                        y = struct.unpack_from(\"i\", shm_obj.read(4,4*2))[0]\n                        width = struct.unpack_from(\"i\", shm_obj.read(4,4*3))[0]\n                        height = struct.unpack_from(\"i\", shm_obj.read(4,4*4))[0]\n                        pixbufloader = gtk.gdk.PixbufLoader()\n                        pixbufloader.write(shm_obj.read(size,4*5))\n                        pixbufloader.close()                \n                        pixbuf = pixbufloader.get_pixbuf()\n\n                        # shm_obj = self.shm_obj\n                        # size = struct.unpack_from(\"i\", shm_obj.read(4,4*0))[0]\n                        # x = struct.unpack_from(\"i\", shm_obj.read(4,4*1))[0]\n                        # y = struct.unpack_from(\"i\", shm_obj.read(4,4*2))[0]\n                        # width = struct.unpack_from(\"i\", shm_obj.read(4,4*3))[0]\n                        # height = struct.unpack_from(\"i\", shm_obj.read(4,4*4))[0]\n                        # pixels = pickle.loads(shm_obj.read(size,4*5))\n                        # pixbuf = gtk.gdk.pixbuf_new_from_array(pixels, gtk.gdk.COLORSPACE_RGB,8)   \n                    finally :\n                        self.sem_obj.V()\n                        pass\n\n                    #print pixbuf.get_width()\n                    #print pixbuf.get_height()\n                    #print x\n                    #print y\n                    pixbuf.copy_area(0, 0, pixbuf.get_width(), pixbuf.get_height(), self.pixbuf, x, y)\n                    self.rectangle = (x,y,width,height)\n                    self.win.queue_draw_area(x,y, pixbuf.get_width(), pixbuf.get_height())\n\n                except TypeError:\n                    olog(\"unexpected error:\" + str(sys.exc_info()[0]))\n                    pass\n                except :\n                    olog(\"unexpected general error:\" + str(sys.exc_info()[0]))\n                    pass                    \n            finally:\n                self.thread_lock.release()\n                pass\n                \n    def window_destroyed(self, widget, data=None):\n        #olog(\"window is destroyed\")\n        gtk.main_quit()\n\n    def expose(self, widget, event):\n        # Load Cairo drawing context.\n        self.thread_lock.acquire()\n        try :\n            if self.pixbuf <> None :\n                area = event.area\n                #olog(\"x,y,width,height = %d %d %d %d\" % (area.x, area.y, area.width, area.height))\n                self.pixbuf.render_to_drawable(self.win.window, gtk.gdk.GC(self.win.window), area.x, area.y, area.x, area.y, area.width, area.height)\n\n                # if self.rectangle <> None:\n                #     cr = widget.window.cairo_create()\n                #     cr.set_line_width(1)\n                #     cr.set_source_rgb(255, 0, 0)\n                #     cr.rectangle(self.rectangle[0], self.rectangle[1], self.rectangle[2], self.rectangle[3])\n                #     cr.stroke()\n        finally:\n            self.thread_lock.release()\n\n    def handle_input(self, source, condition):\n        #olog(\"handle_input:\")\n        m = self.message_handler.recv()\n        if m[0] == message.RenderCompleted :\n            # load a new shared memory\n            #olog(\"display msg is received\")\n            shmid = int(m[1])\n            if self.shm_obj <> None:\n                if self.shm_obj.shmid == shmid :\n                    self.redraw()\n                else:\n                    self.thread_lock.acquire()\n                    try :\n                        self.shm_obj.detach()\n                        self.shm_obj = shm.memory(shmid)\n                        self.sem_obj = shm.semaphore(shm.getsemid(shmid))\n                        self.shm_obj.attach()\n                    finally:\n                        self.thread_lock.release()\n            else :\n                self.thread_lock.acquire()\n                try :\n                    self.shm_obj = shm.memory(shmid)\n                    self.sem_obj = shm.semaphore(shm.getsemid(shmid))\n                    self.shm_obj.attach()\n                finally:\n                    self.thread_lock.release()\n        else :\n            sys.stderr.write('invalid event type\\n')\n            sys.exit(1)\n        gobject.io_add_watch(self.soc.fileno(), gobject.IO_IN, self.handle_input)\n        return False\n\n    def handle_hup(self, source, condition):\n        gtk.main_quit()\n        return False\n\n    def main(self):\n        self.thread_lock = threading.Lock()\n        self.shm_obj = None\n        self.sem_obj = None\n\n        self.message_handler = message.MessageHandler()\n        self.soc = self.message_handler.KCHAN\n        # socket.fromfd(int(sys.argv[1]), msg.FAMILY, msg.TYPE)\n\n        gobject.io_add_watch(self.soc.fileno(), gobject.IO_IN, self.handle_input)\n        gobject.io_add_watch(self.soc.fileno(), gobject.IO_HUP, self.handle_hup)\n\n        window = gtk.Window() #gtk.WINDOW_TOPLEVEL) \n        window.set_decorated(False)\n        window.set_app_paintable(True)\n        screen = window.get_screen()\n        rgba = screen.get_rgba_colormap()\n        window.set_colormap(rgba)\n\n        window.set_title(\"Quark Web Browser Output\")\n        vsize = config.ydimension\n        window.set_default_size(1100, vsize - 200)\n        #window.set_keep_above(True)\n        window.set_decorated(False)\n        window.connect(\"destroy\", self.window_destroyed)\n        window.connect('expose-event', self.expose)\n        #window.move(100,300)\n        window.move(63,143)\n        self.win = window\n\n        window.show_all()\n\n        (x,y,width,height,depth) = self.win.window.get_geometry()\n        #width = 4000\n        #height = 4000\n        #self.pixbuf = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, False, 8, width, height)\n        self.pixbuf = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, False, 8, width, height)\n        gtk.main()\n\n    def curr_tab(self):\n        return self.tabs[self.curr]        \n\nUI().main()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\nx = 16\n\ndef sqrt(x):\n sqrt_val = 0\n\n# Start from the left most digit in x\nwhile sqrt_val * sqrt_val <= x: \n \n # if sqrt_val is equal to x, \n # return it \n if (sqrt_val * sqrt_val == x): \n  return sqrt_val \n  \n # else continue the loop \n sqrt_val = sqrt_val + 1\n  \nreturn sqrt_val - 1\n\n# Driver Function    \nx = 16\nprint(\"Square root of x is\", sqrt(x)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nScraper for querying NeuroMorpho.Org from Python.\n\nFor more on NeuroMorpho.Org, see:\n\n    Ascoli GA, Donohue DE, Halavi M. (2007) NeuroMorpho.Org: a central\n    resource for neuronal morphologies.J Neurosci., 27(35):9247-51\n\nRun this file as a stand-alone script for a demo. The demo queries NeuroMorpho.Org\nin general, and provides extra information about the cell mb100318-a which is\nassociated with the publication:\n\n    Bagnall, M. W., Hull, C., Bushong, E. A., Ellisman, M. H., & Scanziani, M. (2011).\n    Multiple clusters of release sites formed by individual thalamic afferents onto\n    cortical interneurons ensure reliable transmission. Neuron, 71(1), 180-194.\n\nAs a web-scraper, this module may break if the website structure changes, but it\nwas known to work as of April 2, 2016.\n\nTo get a list of all cell types, species, or regions, call cell_types(), species(),\nor regions(), respectively.\n\nGiven a type from one of these lists, get the matching cell names via cell_names.\ne.g. cell_names('blowfly')\n\nTo get the metadata for a given cell name, use metadata.\ne.g. metadata('mb100318-a')\n\nTo get the morphology for a given cell name, use morphology.\ne.g. morphology('mb100318-a')\n\nAn optional format keyword argument allows selecting between the original and the\nstandardized versions.\n\"\"\"\nimport urllib2\nimport re\nimport json\nimport base64\n\n_cache = {}\n\ndef _read_neuromorpho_table(bywhat):\n    \"\"\"Helper function, reads data from NeuroMorpho.Org, stores in cache.\"\"\"\n    html = urllib2.urlopen('http://neuromorpho.org/by%s.jsp' % bywhat).read()\n    result = [m.strip() for m in re.findall(\"maketable\\('(.*?)'\\)\", html)]\n    _cache[bywhat] = set(result)\n    return result\n\ndef cell_types():\n    \"\"\"Return a list of all cell types.\"\"\"\n    return _read_neuromorpho_table('cell')\n\ndef species():\n    \"\"\"Return a list of all species.\"\"\"\n    return _read_neuromorpho_table('species')\n\ndef regions():\n    \"\"\"Return a list of all the brain regions.\"\"\"\n    return _read_neuromorpho_table('region')\n\ndef cell_names(category):\n    \"\"\"Return a list of all the names of cells of a given cell type, species, or region.\n\n    Examples:\n\n        cell_names('Aspiny')\n        cell_names('blowfly')\n        cell_names('amygdala')\n    \"\"\"\n    # figure out if category is a cell type, species, or region\n    # check the cached sets first\n    for bywhat, items in _cache.iteritems():\n        if category in items:\n            return _get_data_for_by(bywhat, category)\n    # no luck: try all three options\n    for bywhat in ['cell', 'region', 'species']:\n        result = _get_data_for_by(bywhat, category)\n        if result:\n            return result\n    return []\n\ndef _get_data_for_by(bywhat, category):\n    \"\"\"Helper function for cell_names.\"\"\"\n    query_code = bywhat if bywhat != 'cell' else 'class'\n\n    html = urllib2.urlopen('http://neuromorpho.org/getdataforby%s.jsp?%s=%s' % (bywhat, query_code, category.replace(' ', '%20'))).read()\n    return [m for m in re.findall(\"neuron_name=(.*?)'\", html)]\n\ndef metadata(neuron_name):\n    \"\"\"Return a dict of the metadata for the specified neuron.\n\n    Example:\n\n        metadata('mb100318-a')\n    \"\"\"\n    html = urllib2.urlopen('http://neuromorpho.org/neuron_info.jsp?neuron_name=%s' % neuron_name).read()\n    # remove non-breaking spaces\n    html = html.replace('&nbsp;', ' ')\n\n    # remove units\n    html = html.replace('&#956;m<sup>2</sup>', ' ')\n    html = html.replace('&#956;m', ' ')\n    html = html.replace('&deg;', ' ')\n    html = html.replace('<b>x</b>', ' ')\n    html = html.replace('<sup>3</sup>', '')\n    html2 = html.replace('\\n', '')\n    keys = [i[1][:-3].strip() for i in re.findall('<td align=\"right\" width=\"50%\"(.*?)>(.*?)</td>', html2)]\n    values = [i[1].strip() for i in re.findall('<td align=\"left\"(.*?)>(.*?)</td>', html2)[2:]]\n\n    return dict(zip(keys, values))\n\ndef morphology(neuron_name, format='swc'):\n    \"\"\"Return the morphology associated with a given name.\n\n    Format options:\n\n        swc -- always \"stanadardized\" file format (default)\n        original -- original\n\n    Example:\n\n        morphology('mb100318-a', format='swc')\n        morphology('mb100318-a', format='original')\n    \"\"\"\n    url_paths_from_format = {'swc': 'CNG%20Version', 'original': 'Source-Version'}\n    assert(format in url_paths_from_format)\n    # locate the path to the downloads\n    html = urllib2.urlopen('http://neuromorpho.org/neuron_info.jsp?neuron_name=%s' % neuron_name).read()\n    if format == 'swc':\n        url = re.findall(\"<a href=dableFiles/(.*?)>Morphology File \\(Standardized\", html)[0]\n    else:\n        url = re.findall(\"<a href=dableFiles/(.*?)>Morphology File \\(Original\", html)[0]\n    return urllib2.urlopen('http://NeuroMorpho.org/dableFiles/%s' % url).read()\n\ndef download(neuron_name, filename=None):\n    format = 'swc'\n    if filename is not None and len(filename.split('.'))==0:\n        filename = base64.urlsafe_b64encode(filename+'.'+format)\n    if filename is None:\n        filename = base64.urlsafe_b64encode(neuron_name+'.'+format)\n    with open(filename, 'w') as f:\n        f.write(morphology(neuron_name, format=format))\n\nif __name__ == '__main__':\n    print 'Demo of reading data from NeuroMorpho.Org'\n    print\n\n    for string, fn in zip(['cell types', 'brain regions', 'species'], [cell_types, regions, species]):\n        print 'All %s:' % string\n        print ', '.join(fn())\n        print\n    for category in ['amygdala', 'blowfly', 'Aspiny']:\n        print 'All %s:' % category\n        print ', '.join(cell_names(category))\n        print\n    print 'Metadata for mb100318-a:'\n    print json.dumps(metadata('mb100318-a'), indent=4)\n    print\n    print 'Morphology (standardized) for mb100318-a (first 10 lines):'\n    print '\\n'.join(morphology('mb100318-a', format='standardized').split('\\n')[:10]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_html(text): \n    \n    html_string = \"\"\n    for line in text.splitlines():\n        html_string += \"<p align=\\\"justify\\\">{}</p>\\n\".format(line)\n    \n    return html_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.model_selection import KFold\n\n# Define model and data\nmodel = Model()\nX = data\n\n# 10-fold cross-validation\nkf = KFold(n_splits=10)\nscores = []\n\n# Iterate through group and train model\nfor train_index, test_index in kf.split(X):\n X_train, X_test = X[train_index], X[test_index]\n model.fit(X_train)\n scores.append(model.score(X_test))\n\n# Calculate average score across all folds\navg_score = np.mean(scores)\nprint(f'Average Score: {avg_score}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create Tic-Tac-Toe game\n\n# Initialize board\nboard = ['-' for x in range(9)]\n\n# Function to choose marker\ndef chose_marker():\n    marker = ''\n\n    while marker != 'X' and marker != 'O':\n        marker = input('Player 1 - Do you want to be X or O? ').upper()\n\n    if marker == 'X':\n        return ('X', 'O')\n    else:\n        return ('O', 'X')\n\n# Function to display board\ndef display_board():\n    print('   |   |')\n    print(' ' + board[0] + ' | ' + board[1] + ' | ' + board[2])\n    print('   |   |')\n    print('-----------')\n    print('   |   |')\n    print(' ' + board[3] + ' | ' + board[4] + ' | ' + board[5])\n    print('   |   |')\n    print('-----------')\n    print('   |   |')\n    print(' ' + board[6] + ' | ' + board[7] + ' | ' + board[8])\n    print('   |   |')\n\n# Function to check if the game is won\ndef win_check(mark):\n    return ((board[0] == mark and board[1] == mark and board[2] == mark) or\n    (board[3] == mark and board[4] == mark and board[5] == mark) or \n    (board[6] == mark and board[7] == mark and board[8] == mark) or\n    (board[0] == mark and board[3] == mark and board[6] == mark) or \n    (board[1] == mark and board[4] == mark and board[7] == mark) or \n    (board[2] == mark and board[5] == mark and board[8] == mark) or\n    (board[0] == mark and board[4] == mark and board[8] == mark) or \n    (board[2] == mark and board[4] == mark and board[6] == mark))\n\n# Function to check if board is full\ndef is_board_full():\n    if '-' in board:\n        return False\n    else:\n        return True\n\n# Function to take player inputs\ndef take_input(mark):\n    position = 0\n\n    while position not in range(1,10) or board[position-1] != '-':\n        position = int(input('Choose your position (1-9): '))\n    \n    board[position-1] = mark\n\n# Main function\ndef play_game():\n    print('Welcome to tic-tac-toe!')\n\n    # initialize the board and player markers\n    board_init()\n\n    player_marker, bot_marker = choose_marker()\n    turn = 'Player 1'\n    over = False\n\n    while not over:\n        if turn == 'Player 1':\n\n            # Display board\n            display_board()\n\n            # Take player 1 input\n            take_input(player_marker)\n\n            # Check if player won\n            if win_check(player_marker):\n                display_board()\n                print('Congratulations! You won!')\n                over = True\n            else:\n                if is_board_full():\n                    display_board()\n                    print('The game is a draw!')\n                    break\n                else:\n                    turn = 'Player 2'\n\n        else:\n            # Take player 2 input\n            take_input(bot_marker)\n\n            # Check if bot won\n            if win_check(bot_marker):\n                display_board()\n                print('Player 2 has won!')\n                over = True\n            else:\n                if is_board_full():\n                    display_board()\n                    print('The game is a draw!')\n                    break\n                else:\n                    turn = 'Player 1'\n\n#Main function\nplay_game() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter \n\ndef most_common (collection): \n\tdata = Counter(collection) \n\treturn data.most_common(1)[0] \n\ncollection = [1, 4, 5, 3, 4, 6, 5, 3, 4]\nassert most_common(collection) == (4, 3) \nprint (\"Most Common element is: \",most_common(collection)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Sort a list of words in lexicographic order\nwords = [\"apple\", \"bike\", \"dog\", \"cat\"]\n\n# Sort the list\nwords.sort()\n\n# Print the list\nprint(words)\n\n# Output:\n# ['apple', 'bike', 'cat', 'dog'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sqrt_calc(num):\n    return num**0.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create a list to store the result\nlong_words_list = []\n\n# Iterate the list to find words longer than the given length\nfor word in word_list:\n    if len(word) > length:\n        long_words_list.append(word)\n\n# Print the result\nprint(long_words_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def area(side1, side2, side3):\n    # calculate the semi-perimeter\n    s = (side1 + side2 + side3)/2\n    # calculate the area\n    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5\n    return area but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\n# sample json\njson_object = {\n    \"name\": \"John Doe\",\n    \"age\": 25,\n    \"hobbies\": [\"sports\", \"gaming\", \"reading\"]\n}\n\n# parse to Python object\npython_object = json.loads(json.dumps(json_object))\n\nprint(python_object) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(list, n):\n  i = 0\n  while i < len(list):\n    if list[i] == n:\n      return i\n    i = i+1\n  return -1\n\nlist = [1, 3, 8, 10, 15, 20, 25]\nn = 15\nindex = linear_search(list, n)\nprint(\"Number found at index:\", index) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCalculate total cost of an item given its unit price and number of units\n\"\"\"\n\n# Function to calculate total cost \ndef calculate_total_cost(total_quantity, unit_price): \n    total_cost = total_quantity * unit_price \n    return total_cost\n\n# main \nif __name__ == \"__main__\": \n    # Given quantity \n    total_quantity = 10\n    \n    # Given price \n    unit_price = 4.50\n    \n    total_cost = calculate_total_cost(total_quantity, unit_price) \n    print(\"Total cost: \", total_cost) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_password():\n char_list = list(string.ascii_letters + string.digits + string.punctuation)\n random.shuffle(char_list)\n return ''.join(char_list[:20])\n\nprint(generate_password()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\nfrom tensorflow.keras.layers import Input, Embedding, LSTM, Dense\nfrom tensorflow.keras.models import Sequential\n\ndef create_model():\n model = Sequential()\n model.add(Embedding(input_dim=vocab_size, output_dim=50, input_length=1000))\n model.add(LSTM(50, return_sequences=True))\n model.add(LSTM(50))\n model.add(Dense(1, activation='sigmoid'))\n model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n return model\n\nmodel = create_model()\nmodel.fit(X_train, y_train,\n epochs=10,\n batch_size=32,\n validation_data=(X_test, y_test)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom scipy.optimize import minimize\n\n# the objective function to minimize\n# the parameters are weights (w_1, w_2, w_3)\ndef objective_function(weights):\n    '''The objective function to minimize.'''\n    return np.sum(weights**2)\n\n# the constraint that must be satisfied\n# the parameters are weights (w_1, w_2, w_3)\ndef constraint(weights):\n    '''The constraint to be satisfied'''\n    return np.sum(weights) - 1.0 \n\n# define constraints\ncons1 = {'type':'eq', 'fun': constraint}\n\n# initialize weights\nweights = np.array([0.0, 0.0, 0.0])\n\n# optimize weights\nsolution = minimize(objective_function, weights, constraints=cons1, method='SLSQP', options={'disp':True})\n\n# final solution\nprint(solution.x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from keras.models import Sequential\nfrom keras.layers import Dense, Embedding, LSTM\nfrom keras.layers import Flatten\nfrom keras.datasets import imdb\n\n# set hyperparameters\nvocabulary_size = 5000\nembedding_dim = 64\nmaxlen = 200 \nnum_words = 5000\n\n# preprocess data\n(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=num_words)\nx_train = preprocessing.sequence.pad_sequences(x_train, maxlen=maxlen)\nx_test = preprocessing.sequence.pad_sequences(x_test, maxlen=maxlen)\n\n# define model architecture\nmodel = Sequential()\nmodel.add(Embedding(vocabulary_size, embedding_dim, input_length=maxlen))\nmodel.add(LSTM(64))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# train model\nmodel.fit(x_train, y_train,\n epochs=3,\n batch_size=64,\n validation_data=(x_test, y_test))\n\n# evaluate model\nscore = model.evaluate(x_test, y_test, verbose=1)\nprint(\"Test Loss:\", score[0])\nprint(\"Test Accuracy:\", score[1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import urllib.request\n\ndef download_webpage_source(url):\n    '''This function will download the source code of a given web page'''\n\n    response = urllib.request.urlopen(url)\n    data = response.read()\n    text = data.decode('utf-8')\n\n    return text but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nExtract data from a web page using python requests\n\"\"\"\n\nimport requests\n\n# Define the url\nurl = 'https://example.com'\n\n# Get the data from the url\nresponse = requests.get(url)\n\n# Extract the data\ndata = response.text # or response.json() for JSON data\n\n# Print the data\nprint(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Selection Sort in Python \ndef selectionSort(arr): \n    for i in range(len(arr)): \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j         \n        arr[i], arr[min_idx] = arr[min_idx], arr[i] \n\n# Test program\narr = [3, 8, 5, 4, 1, 9, 6]\nselectionSort(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for num in range(a, b+1): \n   if num > 1: \n       for i in range(2, num): \n           if (num % i) == 0: \n               break\n       else: \n           print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longer_string(string1, string2):\n    if len(string1) > len(string2):\n        return string1\n    else:\n        return string2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from datetime import datetime\n\ndate1 = datetime.strptime(date1, \"%d-%m-%Y\")\ndate2 = datetime.strptime(date2, \"%d-%m-%Y\")\n\ndef within_year (date1, date2):\n  if abs((date2 - date1).days) <= 365:\n    return True\n  else:\n    return False\n\nif within_year(date1, date2):\n  print(\"The two dates are within one year of each other.\")\nelse:\n  print(\"The two dates are not within one year of each other.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\n\ndef get_object_size(obj):\n    #Return the size of the object in bytes\n    return sys.getsizeof(obj) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndef flatten(data):\n flattened_data = {}\n def flatten_helper(item, key):\n if type(item) is dict:\n for k, v in item.items():\n flatten_helper(v,f\"{key}.{k}\")\n elif type(item) is list:\n for idx,val in enumerate(item):\n flatten_helper(val,f\"{key}[{idx}]\")\n else:\n flattened_data[key] = item\n\n flatten_helper(data, \"\")\n return flattened_data\n\ndata = {\n \"a\": 1,\n \"b\": {\n \"c\": 2,\n \"d\": 3\n }\n}\n\nresult = flatten(data)\nprint(json.dumps(result, indent=2))\n\n# Output: \n# {\n#   \"a\": 1,\n#   \"b.c\": 2,\n#   \"b.d\": 3\n# } but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_by_second_elem(tuple_list):\n    return sorted(tuple_list, key=lambda x: x[1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers = '1,2,3,4,5,6'\n\nnumbers_list = [int(x) for x in numbers.split(',')]\n\nprint(numbers_list) # [1, 2, 3, 4, 5, 6] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import required libraries\nimport nltk\nfrom nltk.tokenize import word_tokenize\n\n#assign input string\nsample_input = \"The new iPhone has a great design.\"\n\n#tokenize the input string\ntokens = word_tokenize(sample_input)\n\n#create and train Naive Bayes classifier\nclassifier = nltk.NaiveBayesClassifier.train([\n\t({'words': ['The', 'new', 'iPhone', 'has', 'a', 'great', 'design']}, 'positive'),\n\t({'words': ['The', 'old', 'phone', 'has', 'a', 'horrible', 'design']}, 'negative'),\n\t({'words': ['The', 'new', 'tablet', 'is', 'amazing', 'build']}, 'positive')\n])\n\n#input to be classified\ninput_words = set(tokens)\n\n#classify the input\nclassification = classifier.classify({'words':input_words})\nprint(\"The input is classified as: {}\".format(classification)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert24To12(time24): \n  \n    # Get the first two elements representing hours \n    hrs = int(time24[0:2]) \n  \n    # Find the string for AM / PM  \n    ampm = ' AM'\n    if hrs >= 12: \n        ampm = ' PM'\n        hrs -= 12\n  \n    # Convert to string and append AM/PM  \n    return str(hrs) + time24[2:] + ampm \n  \n# Driver Code \ntime1 = '09:35:00'\ntime2 = '13:35:00'\nprint(convert24To12(time1))\nprint(convert24To12(time2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Print numbers 1 to 10\nfor num in range(1, 11):\n    print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_account_number():\n    # Generate a random Account number\n    account_number = '00' \n    nums = [str(random.randint(0, 9)) for _ in range(7)]\n    account_number += \"\".join(nums)\n    checksum = get_checksum(account_number)\n    account_number += str(checksum)\n    return account_number\n\ndef get_checksum(account_number):\n    n = 0\n    for i, num in enumerate(account_number):\n        n += int(num) * (i % 6 + 2)\n\n    checksum = 11 - (n % 11)\n    if checksum == 10:\n        return 0\n    elif checksum == 11:\n        return 5\n    else:\n        return checksum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com/'\n\nresponse = requests.get(url) #get the response\nhtml_data = response.text # get the data in text\n\nsoup = BeautifulSoup(html_data, 'html.parser') #parse the data\n\nfor item in soup.find_all('div', {'class': 'post-content'}): #find all elements with the class 'post-content' and loop through them\n    content = item.get_text() #get the text content\n    print(content) #print the content but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\n\ndef remove_punctuations(sentence):\n    translator = str.maketrans('', '', string.punctuation)\n    return sentence.translate(translator)\n\nprint(remove_punctuations(\"He loves to eat Italian; pizza, pasta, and gelato\")) but is not the same. just give one example and only return the code."}
