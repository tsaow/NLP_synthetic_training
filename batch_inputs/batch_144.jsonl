{"prompt": "make some code that functions the same as the following code: def sort_by_second_item(list_of_tuples):\n  return sorted(list_of_tuples, key=lambda item: item[1])\n\nsorted_list = sort_by_second_item(list_of_tuples)\nprint(sorted_list)\n\n# Output: [('Orange', 1), ('Apple', 2), ('Banana', 3), ('Grape', 4)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.svm import SVC\n\nX = np.array([[0.8, 0.1, 0.3],\n            [1.0, 0.4, 0.7],\n            [0.4, 0.5, 0.9],\n            [0.2, 0.7, 0.8]])\n\ny = np.array([0, 1, 0, 1])\n\nmodel = SVC()\nmodel.fit(X, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n\n    def get_make(self):\n        return self.make\n\n    def get_model(self):\n        return self.model\n\n    def get_year(self):\n        return self.year\n\n    def set_make(self, make):\n        self.make = make\n\n    def set_model(self, model):\n        self.model = model\n\n    def set_year(self, year):\n        self.year = year but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_char(s, c):\n    count = 0\n    for ch in s:\n        if ch == c:\n            count += 1\n    return count\n\nprint(count_char('hello world', 'l')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, jsonify\nimport mysql.connector\n\n# create a Flask app\napp = Flask(__name__)\n\n# connect to the database\nmydb = mysql.connector.connect(\n host=\"host\",\n user=\"username\",\n passwd=\"password\",\n database=\"databasename\"\n)\n\n# create a GET endpoint\n@app.route('/users', methods=['GET'])\ndef get_users():\n cur = mydb.cursor()\n cur.execute(\"SELECT * FROM users\")\n results = cur.fetchall()\n return jsonify(results)\n\n# create a POST endpoint\n@app.route('/users', methods=['POST'])\ndef create_user():\n data = request.get_json()\n username = data['username']\n password = data['password']\n\n cur = mydb.cursor()\n cur.execute('INSERT INTO users (username, password) VALUES (%s, %s)', (username, password))\n mydb.commit()\n\n return jsonify({'message': 'User created successfully'})\n\n# run the app\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_paragraph_words(par):\n    par = par.split()\n    return len(par) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: time_in_secs = 8 * 3600 + 11 * 60 + 15 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport sqlite3\n\nconn = sqlite3.connect('example.db')\n\ndf = pd.read_sql_query(\"SELECT name, age, gender, location FROM table_name\", conn)\n\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import libraries\n#import nltk\n#nltk.download('popular')\nfrom textblob import TextBlob\n\n# define text\ntext = \"This is some text I want to analyze and get key phrases and keywords from.\"\n\n# analyze text\nblob = TextBlob(text)\n\n# extract keywords\nkeywords = [word for (word, score) in blob.keywords]\nprint('Keywords:', ', '.join(keywords))\n\n# extract key phrases\nkey_phrases = [phrase for phrase in blob.noun_phrases ]\nprint('Key Phrases:', ', '.join(key_phrases)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_elem(my_list1, my_list2, elem):\n    for list in [my_list1, my_list2]:\n        found = False\n        for val in list:\n            if val == elem:\n                found = True\n                break\n        if found:\n            return True\n    return False\n\nfound = search_elem(my_list1, my_list2, elem)\nprint(found) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Random Forest classifier setup\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Sample data \nX = [['email_1'], ['email_2'], ...]\ny = [0, 1, ...] # 0 is not-spam, 1 is spam\n\n# Train the model\nmodel = RandomForestClassifier(n_estimators=100)\nmodel.fit(X, y)\n\n# Make predictions\npredictions = model.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Triangle:\n    def __init__(self, side1, side2, side3):\n        self.side1 = side1\n        self.side2 = side2\n        self.side3 = side3\n\n    def get_area(self):\n        s = (self.side1 + self.side2 + self.side3) / 2\n        area = (s*(s - self.side1)*(s - self.side2) *\n                (s - self.side3)) ** 0.5\n        return area but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def appendElementToList(list, element):\n     list.append(element)\n     return list\n\nlist = [1, 2, 3]\nelement = 4\nprint(appendElementToList(list, element)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_even(arr):\n    result = []\n    for i in arr:\n        if i % 2 != 0:\n            result.append(i)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def my_function(n):\n    while n > 1000 :\n        n = n//10\n    return n\n\nn = 2000\nprint(my_function(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_fibonacci_sequence(n):\n  a = 0\n  b = 1\n  \n  print(a, end=' ')\n  print(b, end=' ')\n  \n  for i in range(2, n):\n    c = a + b\n    a = b\n    b = c\n    print(c, end=' ')\n\nn = 10\nprint_fibonacci_sequence(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def contains_substring(haystack, needle): \n return needle in haystack\n\n# Usage example\ncontains_substring(\"This is a string\", \"is\") # returns True \ncontains_substring(\"This is a string\", \"xyz\") # returns False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_pattern(arr):\n    div_by_3 = []\n\n    for num in arr:\n        if num % 3 == 0:\n            div_by_3.append(num)\n    \n    return div_by_3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def closest_match(arr1, arr2):\n    \n    closest_match = None\n    min_diff = float('inf')\n    \n    for x in arr1:\n        for y in arr2:\n            diff = abs(x - y)\n            if diff < min_diff:\n                min_diff = diff\n                closest_match = y\n    \n    return closest_match but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import libraries\nimport gensim\nfrom gensim.test.utils import common_texts\nfrom gensim.models import Word2Vec\n \n# Define the input corpus\ndocs = [\"this is a sentence\", \n        \"this is also a sentence\", \n        \"this sentence is not like the others\"]\n \n# Create the word2vec model\nmodel = Word2Vec(docs, size=10, window=3, min_count=1, workers=4)\n \n# Get the vocabulary\nwords = list(model.wv.vocab)\n \n# Get word vectors\nword_vectors = model.wv[words] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_to_dict(list):\n    dictionary = {}\n    for item in list:\n        dictionary[item] = 0\n\n    return dictionary but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n def __init__(self, name, ID, salary):\n self.name = name\n self.ID = ID\n self.salary = salary\n\nemployee = Employee('John', '123456', 50000) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_document(doc):\n words = doc.split()\n sports_words = 0\n politics_words = 0\n business_words = 0\n for word in words:\n if word in sports_words:\n sports_words += 1\n elif word in politics_words:\n politics_words += 1\n elif word in business_words:\n business_words += 1\n if sports_words > politics_words and sports_words > business_words:\n return \"sports\"\n elif politics_words > sports_words and politics_words > business_words:\n return \"politics\"\n else:\n return \"business\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Python but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num = 4 # Take input\n  \n# To take input from the user \n# num = int(input(\"Display multiplication table of? \")) \n  \n# Iterate 10 times from i = 1 to 10 \nfor i in range(1, 11): \n   print(num, 'x', i, '=', num*i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def divide(nums):\n    return [num for num in nums if num % 2 == 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Generate data\nX, y = np.random.rand(1000, 10), np.random.randint(2, size = (1000, 1))\n\n# Define model\nmodel = Sequential()\nmodel.add(Dense(64, input_dim=10, activation='relu'))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# Compile model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# Fit model\nmodel.fit(X, y, epochs=20, batch_size=32) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def BFS(tree, item):\n    # Create an empty queue for BFS\n    queue = []\n \n    # Enqueue the root of tree\n    queue.append(tree)\n \n    # Do till the queue is empty\n    while(len(queue) > 0):\n        # Dequeue an item from queue\n        item = queue.pop(0)\n \n        # If the dequeued item is the item we are looking for then return\n        if item == item:\n            return item\n \n        # Enqueue the left node\n        if item.left is not None:\n            queue.append(item.left)\n \n        # Right node enqueue\n        if item.right is not None:\n            queue.append(item.right)\n    \n    # Item not found\n    return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def first_non_repeated_char(input): \n    counts = {} \n    chars = [] \n    for char in input: \n        if char in counts: \n            counts[char] += 1\n        else: \n            counts[char] = 1\n            chars.append(char) \n  \n    for char in chars: \n        if counts[char] == 1: \n            return char \n  \n    return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: output_list = []\n\ndef flatten_list(my_list):\n    for item in my_list:\n        if isinstance(item, list):\n            flatten_list(item)\n        elif isinstance(item, tuple):\n            flatten_list(list(item))\n        else:\n            output_list.append(item)\n\nflatten_list(input_list)\n\nprint(output_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import WordNetLemmatizer\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\nstop_words = set(stopwords.words('english'))\nlemmatizer = WordNetLemmatizer()\n\n# get the data\nnews_data = open('news.txt').read()\n\n# preprocess it\nwords = word_tokenize(news_data)\nwords = [w for w in words if not w in stop_words]\nwords = [lemmatizer.lemmatize(w) for w in words]\nnews_data = ' '.join(words)\n\n# build the model\nvectorizer = CountVectorizer()\nfeatures = vectorizer.fit_transform([news_data])\ntransformer = TfidfTransformer()\ntfidf = transformer.fit_transform(features)\n\n# split the data\nX = tfidf.todense()\ny = ['politics', 'sports', 'finance', 'health']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# train the model\nclf = MultinomialNB().fit(X_train, y_train)\n\n# test the model\nprint(clf.score(X_test, y_test)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import mido\nfrom mido import MidiFile\n\n# Create MIDI file object\nmid = MidiFile()\n\n# Create track for beat and one for notes\nbeat = MidiTrack()\nnotes = MidiTrack()\n\n# Append tracks to midi object\nmid.tracks.append(beat)\nmid.tracks.append(notes)\n\n# Add beats to beat track\nbeat.append(Message('program_change', program=12, time=0))\nbeat.append(Message('note_on', note=60, velocity=64, time=0))\n\n# Generate random notes for notes track\n# constrained by midi scale\nfor i in range(100):\n    note = random.randrange(127)\n    pitch = mido.note_to_midi[note]\n    on = random.randrange(127)\n    off = random.randrange(127)\n    notes.append(Message('note_on', note=pitch, velocity=on, time=i))\n    notes.append(Message('note_off', note=pitch, velocity=off, time=i + 3))\n\n# Save to file\nmid.save('song.mid') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_lists(list1, list2):\n  return [a + b for a, b in zip(list1, list2)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: palindromes = []\n\nfor word in words:\n    if word == word[::-1]:\n        palindromes.append(word)\n\nprint(palindromes) # prints ['radar', 'mom', 'dad', 'civic'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(str_input):\n    reversed_string = ''\n    index = len(str_input)\n    while index > 0: \n        reversed_string += str_input[ index - 1 ]\n        index = index - 1\n    return reversed_string\n\nprint(reverse_string(\"testing\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def create_poem(keywords):\n    poem = \"The night sky is so beautiful \\nFill with stars, moon and \" + keywords[0] + \".\\nNo matter how dark it is now,\\nHope will come if we look above.\"\n    poem += \"\\n\\nThe \" + keywords[0] + \" will shining its light,\\nBring calm and peace in the night.\\nAlong with the stars, and the \" + keywords[1] + \" above,\\nLighting our path and giving us love.\"\n    poem += \"\\n\\nThough life can be hard, don't give up \\nLook above, between the \" + keywords[2] + \". \\nShine through the darkness and keep strong,\\nWe will find hope, just like the sun.\n\n    return poem but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_password():\n    lettersAndDigits = string.ascii_letters + string.digits\n    password = ''.join(random.choice(lettersAndDigits) for i in range(12))\n    return password but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_password():\n    chars = string.ascii_lowercase + string.digits + string.punctuation\n    size = random.randint(8, 16)\n    return ''.join(random.choice(chars) for _ in range(size))\n\nprint(generate_password()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_common_substring(string1, string2):\n    x = len(string1)\n    y = len(string2)\n    table = [[0]*(y+1) for _ in range(x+1)]\n    longest, x_longest = 0, 0\n    for i in range(x):\n        for j in range(y):\n            if string1[i] == string2[j]:\n                c = table[i][j] + 1\n                table[i+1][j+1] = c\n                if c > longest:\n                    longest = c\n                    x_longest = i+1\n    return string1[x_longest-longest: x_longest]\n\nstring1 = \"abcdjfgh\"\nstring2 = \"abcdjfeeee\"\n\nprint(longest_common_substring(string1, string2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def romanToInt(s):\n    values = {\n    'I': 1,\n    'V': 5,\n    'X': 10,\n    'L': 50,\n    'C': 100,\n    'D': 500,\n    'M': 1000\n    }\n\n    number = 0\n    for i in range(len(s)):\n        if i == 0 or values[s[i]] <= values[s[i-1]]:\n            number += values[s[i]]\n        else:\n            number += values[s[i]] - 2*values[s[i-1]]\n\n    return number but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n    def __init__(self, name, age, salary): \n        self.name = name \n        self.age = age \n        self.salary = salary \n  \n    def get_name(self):\n        return self.name\n  \n    def get_age(self):\n        return self.age\n  \n    def get_salary(self):\n        return self.salary  \n    \n    def set_name(self, name):\n        self.name = name\n        \n    def set_age(self, age):\n        self.age = age\n        \n    def set_salary(self, salary):\n        self.salary = salary but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(w1, w2):\n    # Check if lengths are equal\n    if len(w1) == len(w2):\n        # Sort the strings\n        s1 = sorted(w1)\n        s2 = sorted(w2)\n        # Check if sorted strings are equal\n        if s1 == s2:\n            return True\n    return False\n\n# Example\nw1 = \"silent\"\nw2 = \"listen\"\n\nprint(is_anagram(w1, w2)) #Output: True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_counter(str_list):\n    word_count = {}\n    for i in str_list:\n        if i not in word_count:\n            word_count[i] = 1\n        else:\n            word_count[i] += 1\n    return word_count\n\nmy_list = ['this', 'is', 'a', 'sentence', 'with', 'repeated', 'words', 'this', 'sentence', 'contains', 'four', 'unique', 'words']\nprint(string_counter(my_list))\n\n# Output: {'this': 2, 'is': 1, 'a': 1, 'sentence': 2, 'with': 1, 'repeated': 1, 'words': 2, 'contains': 1, 'four': 1, 'unique': 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Importing Libraries\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Defining Input and Output\nx = np.array([[1, 3], [1, 4], [2, 4], [3, 1], [4, 1], [4, 2]])\ny = np.array([[1], [1], [2], [3], [3], [2]])\n\n# Defining and Compiling the Model\nmodel = Sequential()\nmodel.add(Dense(4, input_dim=2, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# Training the Model\nmodel.fit(x, y, epochs=100, batch_size=5)\n\n# Testing the Model\ntest_x = np.array([[5, 2], [4, 3]])\nresults = model.predict(test_x)\nprint(\"Classes predicted: \", np.round(results)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for item in List:\n    print(item) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\ndef print_frequency_report(words):\n    word_frequencies = Counter(words)\n    print('Word\\tFrequency')\n    print('==============')\n    for word, frequency in word_frequencies.items():\n        print('{}\\t{}'.format(word, frequency)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\ndef feature_engineering(df):\n    '''\n    Function to perform feature engineering steps on a dataframe\n    '''\n    # Drop columns with missing values\n    df = df.dropna(axis=1)\n    # Check for outliers\n    df = df[(df < 3 * df.std()).all(axis=1)]\n    # Identify and remove highly correlated values\n    corr_matrix = df.corr().abs()\n    upper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(np.bool))\n    to_drop = [column for column in upper.columns if any(upper[column] > 0.95)]\n    df.drop(columns = to_drop, inplace=True)\n    # Normalize data\n    for col in df.columns:\n        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())\n    return df\n\ndf = pd.read_csv('data.csv')\ndf = feature_engineering(df) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculateTriangleArea(a, b, c): \n    s = (a + b + c) / 2\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return area\n  \narea = calculateTriangleArea(a, b, c) \nprint(\"Area of triangle is %.2f\" % area) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countPairs(a, b, c):\n    count = 0\n    for x in range(0, c + 1):\n        for y in range(0, c + 1):\n            if a * x + b * y == c:\n                count += 1\n    return count\n\na = 2\nb = 2\nc = 4\nprint(countPairs(a, b, c)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  models.py\n#  \n#  Copyright 2012 Thomas Grainger <tagrain@gmail.com>\n#  \n#  This program is free software; you can redistribute it and/or modify\n#  it under the terms of the GNU Affero General Public License as\n#  published by the Free Software Foundation; version 3.\n#  \n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU Affero General Public License for more details.\n#  \n#  You should have received a copy of the GNU Affero General Public\n#  License along with this program; if not, write to the Free Software\n#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n#  MA 02110-1301, USA.\n#  \n#\n\nfrom django.db import models\n\nclass Event(models.Model):\n    id = models.BigIntegerField(db_column= \"event_id\", primary_key=True)\n    username = models.CharField(max_length=765)\n    radius_account_id = models.CharField(max_length=765)\n    radius_session_id = models.CharField(max_length=765)\n    radius_info = models.TextField()\n    ip_src = models.CharField(max_length=765)\n    ip_dst = models.CharField(max_length=765)\n    start = models.DateTimeField()\n    finish = models.DateTimeField()\n    alerts = models.BigIntegerField()\n    blacklist = models.ForeignKey(\"Blacklist\", db_column = \"blacklist\")\n    rule = models.ForeignKey(\"Rule\", db_column = \"rule\")\n    rule_class = models.CharField(max_length=93)\n    \n    def __unicode__(self):\n        return \"{username}@{ip_src} accessed {ip_dst} from {start} till {finish}. Rule class: {rule_class}\".format(\n            username = self.username,\n            ip_src = self.ip_src,\n            ip_dst = self.ip_dst,\n            start = self.start,\n            finish = self.finish,\n            rule_class = self.rule_class\n        )\n    \n    class Meta:\n        db_table = u'event'\n        unique_together = (\"username\", \"ip_src\", \"ip_dst\", \"start\", \"finish\")\n\nclass Rule(models.Model):\n    id = models.BigIntegerField(primary_key=True, db_column=\"rule_id\", editable=False)\n    name = models.CharField(max_length=765, db_column = \"rule_name\")\n    hide = models.BooleanField()\n    \n    @models.permalink\n    def get_absolute_url(self):\n        return ('rule', (), {\"pk\":str(self.pk)});\n    \n    \n    def __unicode__(self):\n        return \"{name}[{pk}]\".format(name=self.name, pk=self.pk)\n    \n    class Meta:\n        db_table = u'rules'\n        \nclass Blacklist(models.Model):\n    id = models.BigIntegerField(primary_key=True, db_column=\"bl_id\", editable=False)\n    name = models.CharField(max_length=765, editable=False)\n    url = models.CharField(max_length=765, editable=False)\n    serialized = models.TextField(editable=False)\n    updated = models.DateTimeField(editable=False)\n    hide = models.BooleanField()\n    \n    @models.permalink\n    def get_absolute_url(self):\n        return ('blacklist', (), {\"pk\":str(self.pk)});\n    \n    def __unicode__(self):\n        return self.name\n    \n    class Meta:\n        db_table = u'blacklists'\n\nclass Script(models.Model):\n    id = models.AutoField(primary_key=True, db_column = \"script_id\", editable=False)\n    name = models.CharField(max_length=765)\n    updated = models.DateTimeField(db_column=\"lastupdated\", editable=False)\n    \n    @models.permalink\n    def get_absolute_url(self):\n        return ('script', (), {\"pk\":str(self.pk)});\n    \n    def __unicode__(self):\n        return \"{name}[{pk}]\".format(\n            name=self.name,\n            pk=self.pk\n        ) \n    \n    class Meta:\n        db_table = u'scripts'\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combinationSum(lst):\n result = []\n for i in range(len(lst)):\n for j in range(i + 1, len(lst)):\n result.append(lst[i] + lst[j])\n return result\n\ninput_list = [2, 4, 6, 8]\nprint(combinationSum(input_list))\n\n# Output: [6, 10, 12, 16] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def detect_vowels(inp_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    return [char for char in inp_str if char.lower() in vowels] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def rotateArray(arr, d):\n    \n    result = []\n    for i in range(len(arr)-d, len(arr)): \n        result.append(arr[i])\n \n    for i in range(0, len(arr)-d):  \n        result.append(arr[i])\n \n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_grade(marks):\n    if marks >= 90:\n        grade = \"A+\"\n    elif marks >= 80 and marks < 90:\n        grade = \"A\"\n    elif marks >= 70 and marks < 80:\n        grade = \"B+\"\n    elif marks >= 60 and marks < 70:\n        grade = \"B\"\n    elif marks >= 50 and marks < 60:\n        grade = \"C+\"\n    else:\n        grade = \"F\"\n    \n    print(\"Grade: %s\" %grade)\n\nmarks = 60\nget_grade(marks) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_words(words): \n    filtered_words = [] \n    for word in words: \n        if len(word) > 5: \n            filtered_words.append(word) \n    return filtered_words \n\nwords = [\"hello\", \"world\", \"example\", \"test\"]\n\nfiltered_words = filter_words(words) \n\nprint(filtered_words)  # Output: ['example', 'test'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max_value(array, start, end):\n    max_value = -float('inf')\n    for i in range(start, end):\n        max_value = max(max_value, max(array[i][start:end]))\n    return max_value but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #include <stdio.h>\n#include <stdlib.h>\n\nfloat avg(int nums[], int len) {\n    float sum = 0;\n    for (int i = 0; i < len; i++) {\n        sum += nums[i];\n    }\n    return sum / len;\n}\n\nint main() {\n    int nums[] = {1, 2, 3};\n    int len = 3;\n    printf(\"Average = %f\\n\", avg(nums, len));\n    return 0;\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.linear_model import LinearRegression\nimport numpy as np\n\ndef linear_regression(x, y):\n    lr = LinearRegression()\n    lr.fit(x , y)\n    y_hat = lr.predict(x)\n    return np.abs(y_hat - y).mean() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a python program that takes in a list of URLs and returns a list \nof the top 5 URLs that are visited most often.\n\"\"\"\n\nfrom collections import Counter\n\ndef most_visited_urls(urls):\n    counts = Counter(urls)\n    top_5 = counts.most_common(5)\n\n    print(\"Top 5 URLs:\")\n    for url, count in top_5:\n        print(\"%s: %d\" % (url, count))\n\n\nif __name__ == '__main__':\n    urls = ['www.example1.com', 'www.example2.com', 'www.example3.com', 'www.example4.com']\n    most_visited_urls(urls) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def levenshtein(s1, s2):\n    if len(s1) > len(s2):\n        s1, s2 = s2, s1\n\n    distances = range(len(s1) + 1)\n    for i2, c2 in enumerate(s2):\n        distances_ = [i2+1]\n        for i1, c1 in enumerate(s1):\n            if c1 == c2:\n                distances_.append(distances[i1])\n            else:\n                distances_.append(1 + min((distances[i1], distances[i1 + 1], distances_[-1])))\n        distances = distances_\n    return distances[-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Creating a list of cards\ncards = [1,2,3,4,5,6,7,8,9,10,11,12,13] * 4\n\ndef shuffle_cards(cards):\n    # We use the Fisher-Yates algorithm\n    # Get last index\n    last_index = len(cards) - 1\n    \n    # Loop from back\n    for i in range(last_index, 0, -1):\n        # Get a random index between the current index and 0     \n        random_index = random.randint(0, i)\n        \n        # Swap the cards using Python's tuple unpacking  \n        cards[i], cards[random_index] = cards[random_index], cards[i]\n        \n    return cards\n\n# Call the shuffling algorithm\nprint(shuffle_cards(cards)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = 'Hello world'\n\n# print the length of string\nprint(len(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def algorithm(input_list):\n    output_list = []\n    for i in input_list: \n        if i % 2 == 0:\n            output_list.append(str(i) + ' is an even number')\n        else:\n            output_list.append(str(i) + ' is an odd number')\n    return output_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def matrix_min_cost_path(matrix):\n n = len(matrix)\n m = len(matrix[0])\n\n min_cost = [[0 for i in range(m + 1)] for j in range(n + 1)] \n\n for i in range(1, n + 1): \n  for j in range(1, m + 1): \n   if i == 1 and j == 1: \n    min_cost[i][j] = matrix[i-1][j-1]\n   else: \n    min_cost[i][j] = matrix[i-1][j-1] + min(min_cost[i][j-1], min_cost[i-1][j], min_cost[i-1][j-1]) \n  \n return min_cost[n][m] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(my_list):\n    result = []\n    seen = set()\n    for item in my_list:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import copy \n\ndef deep_copy_dictionary(dictionary): \n deep_copy = copy.deepcopy(dictionary) \n return deep_copy\n\ndata = {\"name\": \"John\", \"age\": 28}\n\nresult = deep_copy_dictionary(data)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import base64\n\ndef encrypt(key, string):\n    enc = []\n    for i in range(len(string)):\n        key_c = key[i % len(key)]\n        enc_c = chr((ord(string[i]) + ord(key_c)) % 256)\n        enc.append(enc_c)\n    return base64.urlsafe_b64encode(\"\".join(enc).encode()).decode()\n\nencrypted_string = encrypt(secret_key, string)\nprint(encrypted_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_nested_depth(dictionary):\n    max_depth = 0\n    stack = []\n    stack.append((dictionary, 1))\n\n    while len(stack) > 0:\n        item, depth = stack.pop()\n        if depth > max_depth:\n            max_depth = depth\n        if type(item) is dict:\n            for value in item.values():\n                stack.append((value, depth+1))\n    \n    return max_depth\n\nprint(max_nested_depth(dictionary)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # activate the virtual environment \nsource venv/bin/activate but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compute_bmi(height, weight):\n    bmi = weight / (height * height)\n    return bmi\n\nbmi = compute_bmi(172, 85)\nprint(\"Your BMI is {:.2f}\".format(bmi)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, jsonify\nfrom pymongo import MongoClient\n\napp = Flask(__name__)\n\nclient = MongoClient('localhost', 27017)\ndb = client.user_database\nusers = db.users\n\n@app.route('/user', methods=['GET', 'POST'])\ndef user_profile():\n if request.method == 'GET':\n # Retrieve user profile information\n user_info = users.find_one({'_id': request.args.get('id')})\n return jsonify(user_info)\n\n elif request.method == 'POST':\n # Update user profile information\n data = request.get_json()\n users.update({\n '_id': data['id']\n }, {\n 'name': data['name'],\n 'email': data['email'],\n 'phone': data['phone'],\n 'age': data['age'],\n 'location': data['location'],\n 'profession': data['profession']\n })\n result = users.find_one({'_id': data['id']})\n return jsonify({'result': result})\n\nif __name__ == '__main__':\n app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python code:\ndef convert_usd_to_gbp(usd):\n  gbp = usd / 1.3\n  return gbp\n\nusd = 500\ngbp = convert_usd_to_gbp(usd)\n\nprint(f\"{usd} USD = {gbp:.2f} GBP\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def daysBetween (date1, date2): \n  \n    # Number of days per month in \n    # non leap year. \n    monthDays = [31, 28, 31, 30, 31, 30, \n                31, 31, 30, 31, 30, 31] \n  \n    # Initialize count using years and day \n    n1 = date1[2] * 365 + date1[0] \n    n2 = date2[2] * 365 + date2[0] \n  \n    # Add days for months in given date \n    for i in range(date1[1]-1): \n        n1 += monthDays[i] \n  \n    for i in range(date2[1]-1): \n        n2 += monthDays[i] \n  \n    # Since every leap year is of 366 days, \n    # Add a day for every leap year \n    n1 += date1[2]//4 - date1[2]//100 + date1[2]//400 \n    n2 += date2[2]//4 - date2[2]//100 + date2[2]//400 \n  \n    # Return difference between two counts \n    return (n2 - n1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\nfrom sklearn import linear_model\n\n# Load the data\ndata = pd.read_csv('house_price_data.csv')\n\n# Select features\nX = data[['size', 'bedrooms', 'bathrooms', 'year']]\n\n# Select target\ny = data['price']\n\n# Create and fit the model\nmodel = linear_model.LinearRegression()\nmodel.fit(X, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to find the first word alphabetically larger than the target\ndef find_next_word(words, target):\n    for word in words:\n        if word > target:\n            return word\n    return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_characters(my_string):\n    my_dict = dict()\n    for character in my_string:\n        if character in my_dict:\n            my_dict[character] += 1\n        else:\n            my_dict[character] = 1\n    return my_dict\n\nString = \"Hello, World!\"\nprint(count_characters(String)) # Output: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ', ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nA class to predict the growth rate of a particular crop in a given environment.\n\"\"\"\n\nclass GrowthRatePredictor:\n    \"\"\"A class to predict the growth rate of a particular crop in a given environment.\"\"\"\n\n    def __init__(self, crop, environment):\n        \"\"\"\n        Initializes the GrowthRatePredictor class with the crop being predicted and environment in which it is growing.\n        \n        Parameters:\n        crop (string): The type of crop being predicted.\n        environment (string): The environment in which the crop is growing.\n        \"\"\"\n        self.crop = crop\n        self.environment = environment\n\n    def predict_growth_rate(self):\n        \"\"\"\n        Predicts the growth rate of the given crop in the given environment.\n        \n        Returns:\n        (int): The predicted growth rate of the crop in the given environment.\n        \"\"\"\n\n        # Code to predict the growth rate of the given crop in the given environment\n        return growth_rate but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python3\n## -*- coding: utf-8 -*-\n##\n## Example to detect opaque predicates. This example is based\n## on the Tomislav Zubcic's blog post [0,1] =).\n##\n## Output:\n##\n##  $ python3 proving_opaque_predicates.py\n##  xor eax, eax\n##  jo 7\n##  opaque predicate: never taken\n##  ----------------------------------\n##  xor eax, eax\n##  je 7\n##  opaque predicate: always taken\n##  ----------------------------------\n##  xor eax, ebx\n##  je 7\n##  not an opaque predicate\n##  ----------------------------------\n##  and eax, 0x3fffffff\n##  and ebx, 0x3fffffff\n##  xor ecx, edx\n##  xor edx, edi\n##  add eax, ebx\n##  jo 0x16\n##  opaque predicate: never taken\n##  ----------------------------------\n##  and eax, 0x3fffffff\n##  and ebx, 0x3fffffff\n##  xor ecx, edx\n##  xor edx, edi\n##  xor eax, ebx\n##  je 0x16\n##  not an opaque predicate\n##  ----------------------------------\n##\n## [0] http://zubcic.re/blog/experimenting-with-z3-proving-opaque-predicates\n## [1] https://www.reddit.com/r/ReverseEngineering/comments/4yf6tz/experimenting_with_z3_proving_opaque_predicates/\n##\n## -- jonathan\n\nfrom __future__ import print_function\nfrom triton     import TritonContext, ARCH, Instruction\n\nimport sys\n\ntrace_1 = [\n    b\"\\x31\\xC0\",                  # xor eax, eax\n    b\"\\x0F\\x80\\x01\\x00\\x00\\x00\",  # jo 7\n]\n\ntrace_2 = [\n    b\"\\x31\\xC0\",                  # xor eax, eax\n    b\"\\x0F\\x84\\x01\\x00\\x00\\x00\",  # je 7\n]\n\ntrace_3 = [\n    b\"\\x31\\xD8\",                  # xor eax, ebx\n    b\"\\x0F\\x84\\x01\\x00\\x00\\x00\",  # je 7\n]\n\ntrace_4 = [\n    b\"\\x25\\xff\\xff\\xff\\x3f\",      # and eax, 0x3fffffff\n    b\"\\x81\\xe3\\xff\\xff\\xff\\x3f\",  # and ebx, 0x3fffffff\n    b\"\\x31\\xd1\",                  # xor ecx, edx\n    b\"\\x31\\xfa\",                  # xor edx, edi\n    b\"\\x01\\xd8\",                  # add eax, ebx\n    b\"\\x0f\\x80\\x10\\x00\\x00\\x00\",  # jo 27\n]\n\ntrace_5 = [\n    b\"\\x25\\xff\\xff\\xff\\x3f\",      # and eax, 0x3fffffff\n    b\"\\x81\\xe3\\xff\\xff\\xff\\x3f\",  # and ebx, 0x3fffffff\n    b\"\\x31\\xd1\",                  # xor ecx, edx\n    b\"\\x31\\xfa\",                  # xor edx, edi\n    b\"\\x31\\xD8\",                  # xor eax, ebx\n    b\"\\x0F\\x84\\x10\\x00\\x00\\x00\",  # je 16\n]\n\nTriton = TritonContext()\n\n\ndef symbolization_init():\n    Triton.symbolizeRegister(Triton.registers.eax)\n    Triton.symbolizeRegister(Triton.registers.ebx)\n    Triton.symbolizeRegister(Triton.registers.ecx)\n    Triton.symbolizeRegister(Triton.registers.edx)\n    return\n\ndef test_trace(trace):\n    Triton.setArchitecture(ARCH.X86)\n    symbolization_init()\n\n    astCtxt = Triton.getAstContext()\n\n    for opcode in trace:\n        instruction = Instruction()\n        instruction.setOpcode(opcode)\n        Triton.processing(instruction)\n        print(instruction.getDisassembly())\n\n        if instruction.isBranch():\n            # Opaque Predicate AST\n            op_ast = Triton.getPathPredicate()\n            # Try another model\n            model = Triton.getModel(astCtxt.lnot(op_ast))\n            if model:\n                print(\"not an opaque predicate\")\n            else:\n                if instruction.isConditionTaken():\n                    print(\"opaque predicate: always taken\")\n                else:\n                    print(\"opaque predicate: never taken\")\n\n    print('----------------------------------')\n    return\n\nif __name__ == '__main__':\n    test_trace(trace_1)\n    test_trace(trace_2)\n    test_trace(trace_3)\n    test_trace(trace_4)\n    test_trace(trace_5)\n    sys.exit(0)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def evaluate_string(str):\n try:\n result = eval(str)\n return result\n except SyntaxError:\n return \"Syntax Error\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: all(dict_values) # This statement will return a boolean indicating whether all values in the dictionary are True. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class LowercaseFilter:\n    def __init__(self, my_string):\n        self.my_string = my_string\n\n    def filter_string(self):\n        return ''.join([c for c in self.my_string if c.islower()]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, jsonify\n\napp = Flask(__name__)\n\nposts = [\n {\n \"id\": 1,\n \"title\": \"Lorem Ipsum\",\n \"body\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\n },\n {\n \"id\": 2,\n \"title\": \"Sed Ut Perspiciatis\",\n \"body\": \"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam.\"\n }\n]\n\n@app.route('/posts', methods=['GET'])\ndef get_posts():\n return jsonify({'posts': posts})\n\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def rowSum(matrix):\n    row_sums = []\n    for row in matrix:\n        row_sum = 0\n        for num in row:\n            row_sum += num\n        row_sums.append(row_sum)\n    return row_sums\n\nmatrix = [[1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9]]\n\nprint(rowSum(matrix)) # [6, 15, 24] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = \"This is a sentence.\"\nwords = string.split(\" \")\nprint(words)\n# Output: ['This', 'is', 'a', 'sentence.'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_smallest_element_2D(arr):\n    smallest = float('inf')\n    for row in arr:\n        smallest = min(smallest, min(row))\n    return smallest but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score\n\n\n# Load the data\ndata = ...\n\n# Process the data\n# Create a list of stopwords\nstop_words = stopwords.words('english')\n\n# Vectorize the data using CountVectorizer\nvectorizer = CountVectorizer(stop_words=stop_words)\ndata_vectorized = vectorizer.fit_transform([d['Text'] for d in data])\n\n# Split the data\nX_train, X_test, y_train, y_test = train_test_split(data_vectorized, [d['Sentiment'] for d in data], test_size=0.2)\n\n# Train the model\nnb_model = MultinomialNB()\nnb_model.fit(X_train, y_train)\n\n# Evaluate the model\npredictions = nb_model.predict(X_test)\nprint(accuracy_score(y_test, predictions)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import plotly.offline as py\nimport plotly.graph_objs as go\nimport pandas as pd\n\n# Read in the data\ndata = pd.read_csv('AAPL_data.csv')\n\n# Create traces\napple_trace = go.Scatter(\n    x = data['date'],\n    y = data['close'],\n    name = 'Apple'\n)\n\n# Create the layout\nlayout = go.Layout(\n    title = 'Apple Stock Price Trends',\n    xaxis = dict(\n        title = 'Past 3 Years'\n    ),\n    yaxis = dict(\n        title = 'Closing Price ($)'\n    )\n)\n\n# Create the figure and plot it\nfig = go.Figure(data = [apple_trace], layout = layout)\npy.plot(fig, filename = 'apple_chart.html') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: balance = 10000\ninterestRate = 4.4\n\ndef getInterestEarned(balance, interestRate):\n totalInterestEarned = 0\n for i in range(1, 11):\n  interest = balance * interestRate/100\n  balance += interest\n  totalInterestEarned += interest\n return totalInterestEarned\n\ninterestEarned = getInterestEarned(balance, interestRate)\n\nprint(\"Total interest earned in 10 years: \" + str(interestEarned)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef optimize(f, x_init):\n # Set the learning rate\n learning_rate = 0.01\n \n # Initiate the function and its derivative\n x = x_init\n f_x = f(x)\n f_prime_x = 2*x - 4\n \n # Repeat the optimization routine\n for i in range(1000):\n # Calculate the new x\n x_new = x - learning_rate * f_prime_x\n \n # Calculate the new f(x)\n f_x_new = f(x_new)\n \n # Update the values if the new f(x) is greater\n if f_x_new > f_x:\n x = x_new\n f_x = f_x_new\n f_prime_x = 2*x - 4\n \nreturn x\n\n# Call the function\nx_opt = optimize(lambda x: 2*(x**2) - 4*x, 10)\nprint('The optimized x is:', x_opt) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_invoice(customer_info):\n  items = customer_info['items']\n  total = sum(item['price'] * item['quantity'] for item in items)\n  subtotal = total - (total * customer_info['discount'])\n  tax = subtotal * 0.15\n  invoice = {\n    'name': customer_info['name'],\n    'items': items,\n    'discount': customer_info['discount'],\n    'total': total,\n    'subtotal': subtotal,\n    'tax': tax\n  }\n \n  return invoice but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def round_up(f):\n    if f - int(f) >= 0.5:\n        return int(f) + 1\n    return int(f)\n\nround_val = round_up(3.14)\nprint(round_val) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import smtplib\n\nwhile True:\n print('========Email Tool========')\n to_addr = input('To: ')\n subject = input('Subject: ')\n body = input('Message: ')\n print('=========================')\n \nconfirm = input('Send email?[y/n]: ')\nif confirm.lower() == 'y': \n smtpObj = smtplib.SMTP('smtp.gmail.com', 587)\n smtpObj.starttls()\n \n# replace with your own email address and password\n smtpObj.login('me@gmail.com', 'mypassword')\n smtpObj.sendmail('me@gmail.com', to_addr, \nf'Subject: {subject}\\n\\n{body}')\n\n print('Email sent!')\n smtpObj.quit()\nelse:\n print('Email discarded!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_multiple(number, div):\n    '''This function takes two numbers, ``number`` and ``div``, and returns ``True`` if number is a multiple of div, and ``False`` otherwise.'''\n    return number % div == 0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class WordFrequency:\n    def __init__(self):\n        self.words = {}\n\n    def add_word(self, word):\n        if word not in self.words:\n            self.words[word] = 1\n        else:\n            self.words[word] += 1\n\n    def count_frequency(self):\n        for word, count in self.words.items():\n            print(f\"{word}: {count}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_to_integers(lst):\n    return [int(i) for i in lst] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [x**2 for x in [1, 2, 3, 4, 5, 6]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: dictionary = {'a': 3, 'b': 6, 'c': 9, 'd': 12}\n\nmax_value = max(dictionary.values())\nfor key, value in dictionary.items():\n if value == max_value:\n print(key) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def repl():\n    while True:\n        # read user input\n        user_input = input(\"> \")\n        # evaluate user input\n        result = eval(user_input)\n        # print the result\n        print(result)\n\nrepl() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(s):\n  return s[::-1]\n  \nprint(reverse_string('Python'))  # nohtyP but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_combinations(nums): \n    result = [] \n    for x in range(0, len(nums)): \n        for y in range(x + 1, len(nums)): \n            result.append([nums[x], nums[y]]) \n    return result \n\nnums = [1, 2, 3, 4]\n\nresult = generate_combinations(nums)\n\nfor item in result:\n    print(item)\n\n# output\n[1, 2]\n[1, 3]\n[1, 4]\n[2, 3]\n[2, 4]\n[3, 4] but is not the same. just give one example and only return the code."}
