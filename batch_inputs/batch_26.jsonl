{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.nytimes.com/'\nresponse  = requests.get(url)\nhtml = response.text\n\nsoup = BeautifulSoup(html, 'html.parser')\n\nall_articles = soup.findAll(\"div\", {\"class\": \"css-1l4spti\"})\n\nfor article in all_articles:\n    title = article.find(\"h2\").text\n    published_date = article.find(\"time\")[\"datetime\"]\n    \n    print(title)\n    print(published_date) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def permutation(str):\n    if len(str) == 0:\n        return []\n    if len(str) == 1:\n        return [str]\n    l = [] \n    for i in range(len(str)):\n       m = str[i] \n       remLst = permutation(str[:i] + str[i+1:])\n       for p in remLst:\n           l.append(m + p)\n    return l\n\nstring = 'ABC'\nl = permutation(string)\nfor s in l:\n    print(s) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def valid_phone_number(phone):\n    phone = str(phone)\n    return len(phone) == 10 and phone.isdigit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(lst, key):\n    # Sorts a list of dictionaries\n    return sorted(lst, key=lambda k: k[key]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import statistics\n\ndata = [\n {'name': 'John', 'age': 42},\n {'name': 'Harry', 'age': 34},\n {'name': 'Jack', 'age': 29},\n {'name': 'Joe', 'age': 22},\n {'name': 'James', 'age': 18},\n]\n\nages = [person['age'] for person in data]\n\nmedian_age = statistics.median(ages)\nprint(median_age) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import http.server\n\nserver_address = ('', 80)\n\nclass MyHttpRequestHandler(http.server.SimpleHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type','text/html')\n        self.end_headers()\n        self.wfile.write(b\"Hello World!\")\n\nhttpd = http.server.HTTPServer(server_address, MyHttpRequestHandler)\nhttpd.serve_forever() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def RGB_to_HSL(RGBList):\n    output = []\n    for color in RGBList:\n        r = color[0]/255\n        g = color[1]/255\n        b = color[2]/255\n        c_max = max(r, g, b)\n        c_min = min(r, g, b)\n        delta = c_max - c_min\n\n        h = 0\n        if delta == 0:\n            h = 0\n        elif c_max == r:\n            h = 60 * (((g - b)/delta) % 6)\n        elif c_max == g:\n            h = 60 * (((b - r)/delta) + 2)\n        elif c_max == b:\n            h = 60 * (((r - g)/delta) + 4)\n\n        l = (c_max + c_min)/2\n\n        s = 0\n        if delta == 0:\n            s = 0\n        else:\n            s = delta/(1 - abs((2 * l) - 1))\n\n        output.append([h,s,l])\n    return output but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # define the parameters for the query\ncolumn1 = 'value1'\ncolumn2 = 'value2'\n\n# execute the query\nresult = table.objects.filter(column1=column1, column2=column2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # function to perform quick sort\ndef QuickSort(arr):\n    # base case \n    if len(arr) <= 1:\n        return arr\n    \n    # Select pivot\n    pivot = arr[len(arr) // 2]\n    # partition the array\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    \n    # recursive call\n    return QuickSort(left) + middle + QuickSort(right)\n\n# unsorted list\narr = [10, 7, 8, 9, 1, 5]\n# Print the sorted array\nprint(\"Sorted array is: \", QuickSort(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\nx = [1,2,3,4,5]\ny = [2,4,6,8,10]\n\nplt.plot(x,y)\nplt.title('Graph title')\nplt.xlabel('X-axis Label')\nplt.ylabel('Y-axis Label')\n\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # views.py\nfrom django.shortcuts import render\nimport datetime\n\n# Create your views here.\ndef show_time(request):\n    now = datetime.datetime.now()\n    date_time = now.strftime(\"%d/%m/%Y, %H:%M:%S\")\n    context = {\n        'current_date_time': date_time\n    }\n    return render(request, 'time.html', context)\n\n# urls.py\nfrom django.urls import path\nfrom .import views\n\nurlpatterns = [\n    path('time/', views.show_time, name='time'),\n]\n\n# time.html\n<p>Current date and time: <strong>{{ current_date_time }}</strong></p> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_average(a, b, c):\n    \"\"\"\n    Calculate the average of the three numbers\n    \"\"\"\n    return (a + b + c)/3\n\nif __name__ == '__main__':\n    result = calculate_average(55, 48, 65)\n    print('Average of 55, 48 and 65 is', result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def join_strings(string1, string2):\n    return string1 + string2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(str1, str2): \n if sorted(str1) == sorted(str2): \n  return True\n else:\n return False\n\nstr1 = \"listen\"\nstr2 = \"silent\"\nprint(is_anagram(str1, str2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: i = 1\nwhile i <= 10:\n  print(i)\n  i += 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_longer_string(string1, string2):\n    if len(string1) > len(string2):\n        return string1\n    else:\n        return string2\n\nlonger_string = get_longer_string(\"Hello\", \"World\")\nprint(longer_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def expression_solver(expression):\n    '''This function solves a given mathematical expression'''\n\n    return eval(expression)\n\nexpression = \"2 + 2\"\n\nresult = expression_solver(expression)\n\nprint(result) # 4 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a game of Rock, Paper, Scissors\n\"\"\"\nimport random\n\ndef game(): \n    choices = [\"Rock\", \"Paper\", \"Scissors\"] \n    # randomly select a choice  \n    user = random.choice(choices)  \n    # randomly select a choice \n    computer = random.choice(choices) \n    print(\"User chooses: \", user) \n    print(\"Computer chooses: \", computer) \n    if user == computer:\n        print(\"It is a tie\") \n    if user == \"Rock\": \n        if computer == \"Paper\": \n            print(\"Computer wins!\", computer, \"covers\", user)\n        else: \n            print(\"User wins!\", user, \"smashes\", computer)\n    elif user == \"Paper\": \n        if computer == \"Scissors\": \n            print(\"Computer wins!\", computer, \"cut\", user)\n        else: \n            print(\"User wins!\", user, \"covers\", computer)\n\nif __name__ == '__main__': \n    game() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_triangle(rows):\n    \"\"\"\n    This function prints a triangle of stars with a given number of rows.\n    \n    Parameters:\n    rows (int): The number of rows\n    \n    Returns:\n    None\n    \"\"\"\n    \n    for i in range(rows):  \n        for j in range(i+1): \n            print(\"* \", end=\"\")\n        print('\\r') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Defining the function\ndef count_positive_negative_zero(arr):\n # Keeping track of the counts\n positive_count = 0\n negative_count = 0\n zero_count = 0\n\n # Iterating over the array of integers\n for number in arr:\n if number > 0:\n positive_count += 1\n elif number == 0:\n zero_count += 1\n elif number < 0:\n negative_count += 1\n\n # Printing the results\n print('Number of positive elements:', positive_count)\n print('Number of zero elements:', zero_count)\n print('Number of negative elements:', negative_count)\n\n# Testing the function\narr = [1, 0, -2, 3, 4, -6]\ncount_positive_negative_zero(arr)\n\n# Output\n# Number of positive elements: 3\n# Number of zero elements: 1\n# Number of negative elements: 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = ['hello', 'world', 'hello', 'world', 'this', 'is', 'a', 'test']\n\nword_counts = {word: words.count(word) for word in words}\n\nprint(word_counts)\n# Output: {'hello': 2, 'world': 2, 'this': 1, 'is': 1, 'a': 1, 'test': 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class SampleObject:\n    def __init__(self, param1, param2):\n        self.param1 = param1\n        self.param2 = param2\n\nobj = SampleObject(1, 2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_lowercase(string):\n    return string.lower() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name, age, address, number):\n        self.name = name\n        self.age = age\n        self.address = address\n        self.number = number\n\n# Usage\nstudent = Student(\"John Smith\", 20, \"123 Main St\", 123456789) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\n \ndef classify_dataset(X, y):\n X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 0)\n svm = SVC(kernel = 'linear', C = 0.1).fit(X_train, y_train)\n y_pred = svm.predict(X_test)\n return y_pred but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_error(message):\n    if 'Connection timed out' in message:\n        return 'Network'\n    else:\n        return 'Other' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(array, x):\n\tfor i in range(len(array)):\n\t\tif array[i] == x:\n\t\t\treturn i\n\treturn -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import http.server\n\nPORT = 8080\n\nserver_address = ('localhost', PORT)\n\nwith http.server.HTTPServer(server_address, http.server.CGIHTTPRequestHandler) as httpd:\n    print('Serving HTTP on port {0} ...'.format(PORT))\n    httpd.serve_forever() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: tax_rate = 0.2\ncost = 5\n\ntotal_cost = cost + (cost * tax_rate)\n\nprint(\"The total cost of the item after adding tax is $\" + str(total_cost))\n\nalert(\"The total cost of the item after adding tax is $\" + str(total_cost)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def celsius_to_fahrenheit(temp):\n    fahrenheit = temp * 9/5 + 32\n    return fahrenheit\n\ndef fahrenheit_to_celsius(temp):\n    celsius = (temp - 32) * 5/9\n    return celsius\n\nprint(\"Fahrenheit to Celsius:\", fahrenheit_to_celsius(59))\nprint(\"Celsius to Fahrenheit:\", celsius_to_fahrenheit(15)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\n\n# Create an input layer with two input features\ninputs = tf.keras.Input(shape=(2,))\n\n# Add a dense layer with three neurons\nx = tf.keras.layers.Dense(3, activation='sigmoid')(inputs)\n\n# Add a dense layer with three neurons\noutputs = tf.keras.layers.Dense(3, activation='softmax')(x)\n\n# Create the model\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\n\n# Compile\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize_function(x):\n    return 3*x**2 + 8*x + 7\n\ndef objective_function(x):\n    return optimize_function(x)\n\ndef optimize():\n    optimal_x = 0\n    min_val = objective_function(optimal_x)\n\n    for x in range(1, 1000):\n        current_val = objective_function(x)\n        if current_val < min_val:\n            min_val = current_val\n            optimal_x = x\n\n    return optimal_x but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_sublists(my_list):\n # Initialize result \n res = [[]]  \n # Consider each element of the original list  \n for elements in my_list: \n  # Initialize temp \n  temp = []  \n  \n  # Store current element in temp \n  temp.append(elements) \n  \n  # For every element in the result, add the \n  # current element - temp \n  for r in res: \n   new_r = r + temp \n   res.append(new_r) \n   \n  # Print the result \n  for r in res: \n   print(r)          \n\n# Driver code \nmy_list = [1, 2, 3, 4] \n\nfind_sublists(my_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk \nimport numpy as np \nimport random\nimport string\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\ndef create_chatbot():\n  greetings = [\"hi\", \"hey\", \"hello\", \"hola\", \"greetings\", \"wassup\", \"yo\"]\n  greet_response = [\"hey there friend!\", \"hi there! How can I help you?\", \"hello! What would you like to know?\"]\n\n  question_responses = {\n    \"what is python?\": \"Python is a widely-used general-purpose, high-level programming language.\",\n    \"who created python?\": \"Python was created in the late 1980s by Guido van Rossum, and released in 1991.\",\n    \"what is java\": \"Java is a class-based, object-oriented programming language developed by Sun Microsystems in the 1990s.\"\n  }\n\n  # tokenize the user's input string\n  def tokenize(user_input): \n    tokens = nltk.word_tokenize(user_input) \n    return tokens\n\n  # generate a response from the chatbot\n  def response(user_input, greetings, greet_responses, question_responses): \n    tokens = tokenize(user_input) \n\n    # check if the user's input contains a greeting\n    for token in tokens:\n      if token.lower() in greetings: \n        random_greeting = random.choice(greet_responses)\n        return random_greeting\n\n    # check if the user's input is contained in the question_responses dictionary\n    for token in tokens:\n      if token.lower() in question_responses.keys(): \n        return question_responses[token]\n\n  print(\"Hello! I'm your friendly programming chatbot. What can I help you with?\")\n    \n  exit_chat = False\n  while(exit_chat == False):\n    user_input = input() \n    user_input = user_input.lower() \n    \n    if user_input != 'bye': \n      if user_input == 'thanks' or user_input =='thank you': \n        exit_chat = True\n        print(\"My pleasure!\")\n      \n      else:\n        if response(user_input, greetings, greet_responses, question_responses) != None:\n          chatbot_response = response(user_input, greetings, greet_responses, question_responses)\n          print(chatbot_response)\n        else:\n          print(\"I'm sorry, I don't understand. Can you ask in a different way?\")\n    else:\n      exit_chat = True\n      print(\"Bye! Have a nice day!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def length(string):\n    count = 0\n    for char in string:\n        count += 1\n    return count\n\nstring=\"Python\"\n\nprint(length(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mean(lst):\n    return sum(lst) / len(lst)\n\ndef std_dev(lst):\n    avg = mean(lst)\n    variance = 0\n    for num in lst:\n        variance += (num - avg)**2\n    variance /= len(lst)\n    return variance**0.5\n\n# Driver Code\nlst = [5, 7, 10, 8, 6]\n\nprint(\"Mean: \", mean(lst))\nprint(\"Standard Deviation: \", std_dev(lst)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(lst):\n  return sorted(lst, key=lambda x: x[1])\n\nresult = sort_list([('a', 1), ('b', 3), ('c', 2)]) \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(input_list):\n    unique_list = []\n    for item in input_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    \n    return unique_list\n\nmy_list = [\"Apple\", \"Pear\", \"Apple\", \"Banana\", \"Pear\"]\nprint(remove_duplicates(my_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # =========================================================================\n# Copyright 2012-present Yunify, Inc.\n# -------------------------------------------------------------------------\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this work except in compliance with the License.\n# You may obtain a copy of the License in the LICENSE file, or at:\n#\n#  http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# =========================================================================\nfrom qingcloud.cli.iaas_client.actions.base import BaseAction\n\n\nclass DescribeNotificationItemsAction(BaseAction):\n\n    action = 'DescribeNotificationItems'\n    command = 'describe-notification-items'\n    usage = '%(prog)s [-i --notification_items...] [-f <conf_file>]'\n\n    @classmethod\n    def add_ext_arguments(cls, parser):\n        parser.add_argument('-i', '--notification-items', dest='notification_items',\n                            action='store', type=str, default=None,\n                            help='An array including IDs of notification items.')\n\n        parser.add_argument('-l', '--notification-list', dest='notification_list',\n                            action='store', type=str, default=None,\n                            help='The ID of notification list.')\n\n        parser.add_argument('-t', '--notification-item-type', dest='notification_item_type',\n                            action='store', type=str, default=None,\n                            help='The type of notification item, including email, phone and webhook.')\n\n    @classmethod\n    def build_directive(cls, options):\n        directive = {\n            \"notification_items\": options.notification_items,\n            \"notification_list\": options.notification_list,\n            \"notification_item_type\": options.notification_item_type\n        }\n\n        return directive\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import graphene\n\nclass Query(graphene.ObjectType):\n    # An endpoint to fetch all books\n    books = graphene.List(BookType)\n\n    def resolve_books(self, info):\n        return books\n\n\nclass Mutation(graphene.ObjectType):\n    # An endpoint to add a book\n    add_book = graphene.Field(BookType, title=graphene.String(), author=graphene.String(), )\n\n    def mutate(self, info, title, author):\n        book = Book(title=title, author=author)\n        book.save()\n\n        return book\n\nschema = graphene.Schema(query=Query, mutation=Mutation) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_dictionaries(dict1, dict2):\n  dict1_keys = set(dict1.keys())\n  dict2_keys = set(dict2.keys())\n\n  # Get the list of keys that are in both dictionaries\n  common_keys = dict1_keys & dict2_keys\n\n  # Iterate over the list of common keys and compare the values\n  for key in common_keys:\n    if dict1[key] == dict2[key]:\n      print(f\"{key} is common and value is same\")\n    else:\n      print(f\"{key} is common but value is not same\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_substring(input_string1, input_string2): \n    \n     # Create empty list to store all substrings \n    substr = [] \n      \n    # we will find the length of strings \n    len1 = len(input_string1) \n    len2 = len(input_string2) \n      \n    # Iterate through the string \n    for i in range(len1): \n        tmp = \"\" \n        for j in range(len2): \n            if (i + j < len1 and input_string1[i + j] == input_string2[j]): \n                tmp += input_string2[j] \n            else: \n                if (len(tmp) > len(substr)): \n                    substr = tmp  \n                tmp = \"\" \n      \n    # check for lastest substring  \n    if len(tmp) > len(substr): \n        substr = tmp \n          \n    # return longest substring  \n    return substr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def c_to_f(celsius):\n    return (celsius * 9.0/5) + 32 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def word_count(sentence):\n    words = sentence.split() \n    word_freq = {}\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n    return word_freq\n\nword_counts = word_count(sentence)\nprint(word_counts) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_min_max(lst):\n    \"\"\"\n    Function to take a list of integers and returns the summation of the largest and smallest numbers\n    Arguments:\n    lst -- list -- list of integers\n    Output:\n    summation -- int -- summation of the largest and smallest numbers\n    \"\"\"\n    min_val = min(lst)\n    max_val = max(lst)\n    summation = min_val + max_val\n    return summation but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(a, b): \n    if a == 0 : \n        return b  \n    if b == 0 : \n        return a  \n  \n    if a == b: \n        return a \n  \n    if a > b: \n        return gcd(a-b, b) \n    return gcd(a, b-a) \n  \n# Driver program to test above function \na = 36 \nb = 30\n  \nif(gcd(a, b)): \n    print('GCD of', a, 'and', b, 'is', gcd(a, b)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_by_length(input_list):\n result = []\n for item in input_list:\n if len(item) >= 5:\n  result.append(item)\n return result\n\ninput_list = ['apple', 'cat', 'banana', 'dog', 'potato']\nresult = filter_by_length(input_list) \n# result = ['apple', 'banana', 'potato'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_strings(*strings):\n    for s in strings:\n        print(s)\n\nprint_strings(\"Hello\", \"World\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\ndata = pd.read_csv(\"temperature_data.csv\")\nX = data[[\"Year\", \"Month\", \"Day\"]]\ny = data[\"Temperature\"]\n\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n#The model is now created and we can use it to make predictions but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_pairs(numbers, target_sum):\n count = 0\n for i in range(len(numbers)):\n for j in range(i + 1, len(numbers)):\n if numbers[i] + numbers[j] == target_sum:\n count += 1\n return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Fraction:\n    def __init__(self, numerator, denominator):\n        self.numerator = numerator\n        self.denominator = denominator\n    \n    def add(self, x):\n        self.numerator = self.numerator * x.denominator + x.numerator * self.denominator\n        self.denominator = self.denominator * x.denominator\n        return self.numerator, self.denominator but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseWords(sentence):\n  words = sentence.split()\n  reversed_sentence = []\n  for i in range(len(words)):\n    if (i % 2 == 0):\n      reversed_sentence.append(words[i])\n    else:\n      reversed_sentence.append(words[i][::-1])\n  return \" \".join(reversed_sentence)\n\nprint(reverseWords(\"This is a test\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: vat_number = \"DE1905303456\"\n\nvat_number_without_check_digit = vat_number[:-1]\n\nsum = 0\nfor c in vat_number_without_check_digit:\n if c.isdigit():\n sum += int(c)\n\nprint(f'Sum of digits: {sum}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def common_elements(set1, set2): \n    return set1 & set2\n\nprint(common_elements({1,2,3,4,5,6,7}, {2,4,5,6})) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\n# Enter the city for which the forecast is required\ncity = 'Berlin'\n\n# OpenWeatherMap API key\napi_key = '<your_api_key>'\n\n# Get the json data from API using the city name\nurl = 'http://api.openweathermap.org/data/2.5/weather?q=' + city + '&APPID=' + api_key\nweather_data = requests.get(url).json()\n\n# Extract the temperature and wind forecast\ntemperature = round(weather_data['main']['temp'] - 273.15, 2)\nwind_speed = round(weather_data['wind']['speed'], 2)\n\n# Print the forecast\nprint('Temperature:', temperature, '\u00b0C')\nprint(' Wind Speed:', wind_speed, 'm/s') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [3, 5, 9, 15, 22]\nfor item in list:\n    if item < 10:\n        print(\"less than 10\")\n    else:\n        print(\"greater than 10\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: fruit = ['apple', 'banana', 'cherry'] \nfruit.sort(reverse=True)\nprint(fruit) # ['cherry', 'banana', 'apple'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci_sequence(max): \n    nums = [] \n    current, nxt = 0, 1\n    while current < max: \n        current, nxt = nxt, nxt+current\n        nums.append(current)\n    \n    return nums but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_num(num, text):\n    words = text.split()\n    result = [str(int(w) + num) for w in words]\n    return ' '.join(result)\n\nprint(add_num(5, \"Today is Monday\")) # Output: 10 Today is 10 Monday but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n    def __init__(self, name, age, address):\n        self.name = name\n        self.age = age\n        self.address = address but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(list): \n  list.sort() \n  return list\n  \nprint(sort_list([2,4,3,1,5])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer \nfrom sklearn.naive_bayes import MultinomialNB\n\n# Load the data\ndata = pd.read_csv('movie_reviews.csv')\n\n# Extract the reviews and the labels\nreviews = data.text.tolist()\nlabels = data.label.tolist()\n\n# Transform the reviews to a numerical feature vector\ncv = CountVectorizer(binary=True)\nX = cv.fit_transform(reviews)\n\n# Initialize the classifier\nmnb = MultinomialNB()\n\n# Train the classifier\nmnb.fit(X, labels)\n\n# Make predictions\npreds = mnb.predict(X)\n\n# Print the accuracy\nprint('Accuracy:', mnb.score(X, labels)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Car():\n\n    def __init__(self, model, make, color, engine_power, num_wheels):\n        self.model = model\n        self.make = make\n        self.color = color\n        self.engine_power = engine_power\n        self.num_wheels = num_wheels\n\n    def start_engine(self):\n        print(\"Engine started.\")\n\n    def stop_engine(self):\n        print(\"Engine stopped.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortArray(arr):\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n    return arr\n\narr = [9, 3, 5, 1, 6]\nprint(sortArray(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_letter_frequency(text): \n    frequency = {} \n    for letter in text: \n        if letter in frequency: \n            frequency[letter] += 1\n        else: \n            frequency[letter] = 1\n    return frequency \n  \ntext = \"Hello, World!\"\nprint(count_letter_frequency(text)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_long_strings(my_list):\n  long_strings = []\n  for i in my_list:\n    if len(i) > 10:\n      long_strings.append(i)\n  return long_strings but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_longest_word(sentence):\n    words = sentence.split(\" \")\n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n\nresult = find_longest_word(\"This is a sample sentence\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The code implements a function for summing the squares of a list of numbers. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def kClosestValues(arr, x, k):\n    closestPrimes = []\n    diff = float(\"inf\")\n    for num in arr:\n        currentDiff = abs(num - x)\n        if currentDiff <= diff:\n            if currentDiff < diff:\n                closestPrimes = []\n            closestPrimes.append(num)\n            diff = currentDiff\n    if closestPrimes[0] > x:\n        closestPrimes.sort()\n    else:\n        closestPrimes.sort(reverse=True)\n    return closestPrimes[:k] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nThe MIT License (MIT)\n\nCopyright (c) 2018 Zuse Institute Berlin, www.zib.de\n\nPermissions are granted as stated in the license file you have obtained\nwith this software. If you find the library useful for your purpose,\nplease refer to README.md for how to cite IPET.\n\n@author: Gregor Hendel\n\"\"\"\nfrom .StatisticReader import StatisticReader\nimport re\nimport builtins\nimport logging\nfrom ipet import misc\nfrom ipet.concepts.IPETNode import IpetNode\n\nlogger = logging.getLogger(__name__)\n\nclass CustomReader(StatisticReader):\n    \"\"\"\n    Reader to be initialised interactively through IPET or from an interactive python shell\n    \"\"\"\n    name = 'CustomReader'\n    regexp = 'Custom'\n    datakey = 'Custom'\n    data = None\n\n    METHOD_FIRST = 1\n    METHOD_LAST = 2\n    METHOD_SUM = 3\n    METHOD_MIN = 4\n    METHOD_MAX = 5\n    METHOD_COUNT = 6\n\n    str2method = {\n                  \"first\" : METHOD_FIRST,\n                  \"last\" : METHOD_LAST,\n                  \"sum\" : METHOD_SUM,\n                  \"min\" : METHOD_MIN,\n                  \"max\" : METHOD_MAX,\n                  \"count\" : METHOD_COUNT\n                  }\n\n\n    requiredoptions = {\n            \"datatype\" : [\"float\", \"int\"],\n            \"method\" : list(str2method.keys())\n        }\n\n    def __init__(self, name = None, regpattern = None, datakey = None, index = 0, datatype = \"float\", method = \"last\", active = True):\n        \"\"\"\n        constructor of a custom reader to parse additional simple solver output from log file context\n\n        Parameters:\n        -----------\n\n        name : a name to distinguish this reader from the others\n\n        regpattern : A string or regular expression pattern to detect lines from which output should be read\n\n        datakey : The data key under which the parsed datum gets stored for every problem\n\n        index : The zero-based index of the number in the specified line (only numbers count)\n\n        datatype : choose 'int' or 'float'\n\n        method : how to treat multiple occurrences of this data within one problem; 'count' occurrences or parse 'first', 'last', 'sum', 'min' or 'max'\n        \"\"\"\n\n        IpetNode.__init__(self, active)\n\n        if regpattern is None:\n            raise ValueError(\"Error: No 'regpattern' specified for reader with name %s\" % str(name))\n\n        if name in [None, \"\"]:\n            self.name = datakey + \"Reader\"\n            self.username = False\n        else:\n            self.name = name\n            self.username = True\n\n        self.set_datakey(datakey)\n\n        self.set_index(index)\n\n        self.regpattern = regpattern\n        self.set_regpattern(regpattern)\n\n        self.method = method\n        self.methodint = self.METHOD_LAST\n        self.set_method(method)\n\n        self.set_datatype(datatype)\n\n    def getEditableAttributes(self):\n        return ['name', 'regpattern', 'datakey', 'index', 'datatype', 'method'] + IpetNode.getEditableAttributes(self)\n\n    def getRequiredOptionsByAttribute(self, attr):\n        return self.requiredoptions.get(attr, IpetNode.getRequiredOptionsByAttribute(self, attr))\n\n    def extractStatistic(self, line):\n        if self.regexp.search(line):\n\n            logging.debug(\"Custom Reader {} found match in line \\n{}\".format(self.name, line.strip()))\n            logging.debug(\"Numerical expression matches: {}\".format(\", \".join(misc.numericExpression.findall(line))))\n\n            previousdata = self.testrun.getCurrentProblemData(self.datakey)\n            if self.methodint == CustomReader.METHOD_COUNT:\n                if previousdata is None:\n                    self.addData(self.datakey, 1)\n                else:\n                    self.addData(self.datakey, previousdata + 1)\n                return\n\n            try:\n                data = misc.getNumberAtIndex(line, self.index)\n                data = self.datatypemethod(data)\n\n\n                if self.methodint == CustomReader.METHOD_FIRST:\n                    if previousdata is None:\n                        self.addData(self.datakey, data)\n\n                elif self.methodint == CustomReader.METHOD_LAST:\n                    self.addData(self.datakey, data)\n\n                elif self.methodint == CustomReader.METHOD_SUM:\n                    if previousdata is None:\n                        previousdata = 0\n\n                    self.addData(self.datakey, data + previousdata)\n\n                elif self.methodint == CustomReader.METHOD_MIN:\n                    if previousdata is None:\n                        self.addData(self.datakey, data)\n                    elif data < previousdata:\n                        self.addData(self.datakey, data)\n\n                elif self.methodint == CustomReader.METHOD_MAX:\n                    if previousdata is None:\n                        self.addData(self.datakey, data)\n                    elif data > previousdata:\n                        self.addData(self.datakey, data)\n\n            except:\n                logger.warn(\"Reader %s could not retrieve data at index %d from matching line '%s'\", self.getName(), self.index, line)\n                pass\n\n\n        return None\n\n    def setDataType(self, sometype):\n        \"\"\"\n        recognizes data types (e.g., 'float' or 'int') and sets reader data type to this value\n        \"\"\"\n        try:\n            self.datatypemethod = getattr(builtins, sometype)\n            self.datatype = sometype\n        except:\n            logger.debug(\"Error: Could not recognize data type %s, using float\" % sometype)\n            self.datatypemethod = float\n            self.datatype = 'float'\n    def set_datatype(self, datatype):\n        self.setDataType(datatype)\n\n    def set_method(self, method):\n        self.methodint = self.str2method.get(method, self.methodint)\n        self.method = method\n\n    def set_regpattern(self, regpattern):\n        self.regexp = re.compile(regpattern)\n        self.regpattern = regpattern\n\n    def set_name(self, name):\n        if name == self.getName():\n            return\n        if name in [\"\", None]:\n            self.name = self.datakey + \"Reader\"\n            self.username = False\n        else:\n            self.name = name\n            self.username = True\n\n\n    def set_datakey(self, datakey):\n        self.datakey = datakey\n        if not self.username:\n            self.name = self.datakey + \"Reader\"\n\n    def set_index(self, index):\n        self.index = int(index)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quicksort(arr): \n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [\"Apple\", \"Banana\", \"Cherry\"]\nlist.sort() \nprint(list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\n# read data \ndata =  pd.read_csv('data.csv')\n\n# split data into features and labels\nX = data['customer_reviews']\ny = data['Popularity']\n\n# train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42)\n\n# Create Tf-idf vectorizer \ntf = TfidfVectorizer(stop_words='english')\n\n# Fit the vectorizer to the data\ntf.fit(X_train)\n\n# Transform train and test data\nX_train_tf = tf.transform(X_train)\nX_test_tf = tf.transform(X_test)\n\n# Train and fit the model\nlog_model = LogisticRegression()\nlog_model.fit(X_train_tf,y_train)\n\n# Predict the labels\ny_preds = log_model.predict(X_test_tf)\n\n# Evaluate the model \naccuracy = accuracy_score(y_test, y_preds)\n\nprint('The model accuracy is:', accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def wrap_text(text, width):\n    for i in range(0, len(text), width):\n        print(text[i: width + i]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [100, 50, 30, 10, 7]\nlist.sort()\nprint(list) # Output: [7, 10, 30, 50, 100] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Program to implement basic calculator operations \n# Addition, Subtraction, Multiplication, Division, Modulus\n\n# Function to add two numbers \ndef add(num1, num2): \n return num1 + num2 \n\n# Function to subtract two numbers \ndef subtract(num1, num2): \n return num1 - num2 \n\n# Function to multiply two numbers \ndef multiply(num1, num2): \n return num1 * num2 \n\n# Function to divide two numbers \ndef divide(num1, num2): \n return num1 / num2 \n\n# Function to find modulus of two numbers \ndef modulus(num1, num2): \n return num1 % num2\n\n# Print results \nprint(add(10, 20)) \nprint(subtract(20, 10)) \nprint(multiply(20, 10)) \nprint(divide(20, 10)) \nprint(modulus(20, 10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_array(arr): \n    low = 0\n    high = len(arr) - 1\n    \n    while low < high: \n        arr[low], arr[high] = arr[high], arr[low] \n        low += 1\n        high -= 1\n  \n    return arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [1, 2, 3, 4, 5, 6, 7, 8]\n\ncount = 0\nfor i in my_list:\n    if i % 2 == 0:\n        count += 1\n\nprint(count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program for implementation of Bubble Sort \ndef bubbleSort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_to_tuples(words):\n    # create an empty list\n    result = []\n\n    # create a tuple for each string\n    for word in words:\n        result.append((word, len(word)))\n    \n    return result\n\nresult = list_to_tuples(['foo', 'bar', 'baz'])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_prime_numbers(start, end):\n    prime_numbers_list = []\n    for num in range(start, end + 1):\n        if all(num % i != 0 for i in range(2, num)):\n            prime_numbers_list.append(num)\n    \n    return prime_numbers_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_string():\n   characters = 'abcdefghijklmnopqrstuvwxyz'\n   random_string = ''\n   for i in range(5):\n       random_string += random.choice(characters)\n   return random_string\n\nresult = generate_random_string()\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def complex_computation(x):\n    return x * (2 + x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quicksort(left) + middle + quicksort(right) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: strings = [\"Code\", \"Python\", \"JavaScript\", \"Java\"]\n\n# sort the list by word length\nstrings.sort(key = lambda x: len(x))\n\nprint(strings)\n# Output: [\"Code\", \"Java\", \"Python\", \"JavaScript\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_integer(x):\n  if x <= 0:\n    return False\n  if x*x > 10:\n    return True\n  return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from scipy.optimize import minimize\n\ndef objFun(x):\n  return (x[0] - 1)**2 + (x[1] - 4)**2\n\nx0 = [0,0]\n\nopt = minimize(objFun, x0)\n\nprint(opt)\n\n# Output is a OptimizeResult object\n# x: array([1., 4.]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_characters(string, character):\n    count = 0\n    for c in string:\n        if c == character:\n            count += 1\n    return count\n\ncount_characters(\"abracadabra\", 'a')  # 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from pylab import *\n\nfrom statsmodels.tsa.arima_model import ARIMA\n\n# create a dataset\ndata = [12, 15, 8, 7, 8, 10, 13, 6, 11, 10, 13]\n\n# fit model\nmodel = ARIMA(data, order=(1, 1, 0))\nmodel_fit = model.fit(disp=0)\n# print summary of fit model\nprint(model_fit.summary())\n# make prediction\nyhat = model_fit.predict(len(data), len(data))\nprint('Prediction: %f' % yhat) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_most_frequent(lst):\n    max_count = 0\n    most_frequent = None\n    count_dict = {}\n    for elem in lst:\n        if elem not in count_dict:\n            count_dict[elem] = 1\n        else:\n            count_dict[elem] += 1\n            \n        if count_dict[elem] > max_count:\n            most_frequent = elem\n            max_count = count_dict[elem]\n            \n    return most_frequent, max_count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import scipy.optimize\n\n# define the black box function\ndef black_box(x):\n    return x ** 2 + 40\n\n# set the initial parameters \nstart = (0, 0)\n\n# minimize the black box function\nres = scipy.optimize.minimize(black_box, start, method=\"L-BFGS-B\")\n\n# print the result\nprint(res.x) # prints [0.] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pygame\n\n# Define some colors\nBLACK = (0, 0, 0)\nWHITE = (255, 255, 255)\n \n# Define the class car which represents the car\n# It contains the car image, the starting position, the x and y movement\nclass Car(pygame.sprite.Sprite):\n    def __init__(self):\n        # Call the parent class (Sprite) constructor\n        pygame.sprite.Sprite.__init__(self)\n \n        self.image = pygame.image.load(\"car.png\").convert()\n        self.image.set_colorkey(BLACK) \n \n        self.rect = self.image.get_rect()\n        self.rect.x = 350\n        self.rect.y = 400\n        self.change_x = 0\n        self.change_y = 0\n \n    def update(self):\n        self.rect.x += self.change_x\n        self.rect.y += self.change_y\n \n# Initializes the game \npygame.init()\nscreen_width = 700\nscreen_height = 500\n\nscreen = pygame.display.set_mode([screen_width, screen_height])\n \n#Initializes all sprites\ncar_sprite_list = pygame.sprite.Group()\ncar = Car()\ncar_sprite_list.add(car)\n \n#This is the main loop of the game\nclock = pygame.time.Clock()\ndone = False\n \nwhile not done:\n    #Main event loop\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            done = True\n \n    #Update the movement of the car\n    car_sprite_list.update()\n \n    #Draw everything\n    screen.fill(WHITE)\n \n    car_sprite_list.draw(screen)\n \n    pygame.display.flip()\n \n    clock.tick(60)\n \npygame.quit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python2.7\nimport sys\nimport os\nimport math\n\n# Link parameters\nlink_latency = \"10us\"\nlink_bandwidth = 10\nlink_bandwidth_unit = \"Gbps\"\n\n\n# Convenient math wrappers\ndef floor(x):\n\treturn int(math.floor(x))\ndef ceil(x):\n\treturn int(math.ceil(x))\ndef pow2(x):\n\treturn int(math.pow(2,x))\n\n# XML generation functions\ndef issueHead():\n        head = (\"<?xml version='1.0'?>\\n\"\n                \"<!DOCTYPE platform SYSTEM \\\"http://simgrid.gforge.inria.fr/simgrid/simgrid.dtd\\\">\\n\"\n                \"<platform version=\\\"4\\\">\\n\\n\")\n\n        config_clause = (\"<!--  WARNING:  This <config></config> clause below\\n\"\n                       \"makes it so that NO COMPUTATION TIME is simulated. This is because\\n\"\n                       \"in this module, for pedagogic purposes, we don't want to muddy the\\n\"\n                       \"(simulation) waters with computational times. As a results, this\\n\"\n                       \"XML platform file may not be suitable for running other\\n\"\n                       \"simulations, unless you remove the <config></config> clause.\\n\"\n                       \"-->\\n\"\n                       \"<config>\\n\"\n                       \"<prop id=\\\"smpi/simulate-computation\\\" value=\\\"0\\\"></prop>\\n\"\n                       \"<prop id=\\\"smpi/running-power\\\" value=\\\"200000000000\\\"></prop>\\n\"\n                       \"</config>\\n\\n\")\n\n        AS_head = \"<AS id=\\\"AS0\\\" routing=\\\"Full\\\">\\n\"\n\n        return head + config_clause + AS_head\n\n\ndef issueTail():\n\treturn \"</AS>\\n</platform>\\n\"\n\ndef issueLink1(x):\n\treturn \"  <link id=\\\"link-\"+str(x)+\"\\\" latency=\\\"\"+str(link_latency)+\"\\\" bandwidth=\\\"\"+str(link_bandwidth)+link_bandwidth_unit+\"\\\"/>\\n\"\n\ndef issueLink2(x,y):\n\treturn \"  <link id=\\\"link-\"+str(x)+\"-\"+str(y)+\"\\\" latency=\\\"\"+str(link_latency)+\"\\\" bandwidth=\\\"\"+str(link_bandwidth)+link_bandwidth_unit+\"\\\"/>\\n\"\n\ndef issueLink3(x,y,bw):\n\treturn \"  <link id=\\\"link-\"+str(x)+\"-\"+str(y)+\"\\\" latency=\\\"\"+str(link_latency)+\"\\\" bandwidth=\\\"\"+str(bw)+link_bandwidth_unit+\"\\\"/>\\n\"\n\ndef issueHost(index):\n\treturn \"  <host id=\\\"host-\"+str(index)+\".hawaii.edu\\\" speed=\\\"200Gf\\\"/>\\n\"\n\ndef issueRouteHead(index1, index2):\n\treturn \"  <route src=\\\"host-\"+str(index1)+\".hawaii.edu\\\" dst=\\\"host-\"+str(index2)+\".hawaii.edu\\\">\\n\"\ndef issueRouteTail():\n\treturn \"  </route>\\n\"\n\ndef issueRouteLink1(x):\n\treturn \"\\t<link_ctn id=\\\"link-\"+str(x)+\"\\\"/>\\n\"\n\ndef issueRouteLink2(x,y):\n\treturn \"\\t<link_ctn id=\\\"link-\"+str(x)+\"-\"+str(y)+\"\\\"/>\\n\"\n\n######################################################################\n# Parse command-line arguments\nif (len(sys.argv) != 2):\n\tprint >> sys.stderr, \"Usage:a\"+sys.argv[0]+\" <num hosts>\\n\"\n        print >> sys.stderr, \"  Will generate a bintree_<num hosts>.xml and hostfile_<num hosts>.txt file\\n\"\n\texit(1)\n\nnum_hosts = int(sys.argv[1])\n\n\n###############################################################\n# Generate Binary Tree XML file\n\nfilename = \"./bintree_\"+str(num_hosts)+\".xml\"\nfh = open(filename, 'w')\nfh.write(issueHead())\n\n# Create all hosts and links\nfor i in range(0,num_hosts):\n\tfh.write(issueHost(i))\n\tif (i*2+1 < num_hosts):\n  \t\tfh.write(issueLink2(i,i*2+1))\n\tif (i*2+2 < num_hosts):\n  \t\tfh.write(issueLink2(i,i*2+2))\n\n# Create all routes\nfor i in range(0,num_hosts):\n\tlevel_i = floor(math.log(1+i,2))\n\tfor j in range(i+1,num_hosts):\n\t\tfh.write(issueRouteHead(j,i))\n\t\t# Host j is at the same of lower level than host i\n\t\tlevel_j = floor(math.log(1+j,2))\n\t\tcurrent_host_path_j = j\n\t\t# Go up to the same level of that of host i\n\t\tfor l in range(level_j,level_i,-1):\n\t\t\tparent_host = floor(float(current_host_path_j-1)/2)\n\t\t\tfh.write(issueRouteLink2(min(current_host_path_j,parent_host),max(current_host_path_j,parent_host)))\n\t\t\tcurrent_host_path_j = parent_host\n\t\t# Find the common ancestor\n\t\tcurrent_host_path_i = i\n\t\twhile (current_host_path_j != current_host_path_i):\n\t\t\tfh.write(issueRouteLink2(min(current_host_path_j,floor(float(current_host_path_j-1)/2)), max(current_host_path_j,floor(float(current_host_path_j-1)/2))))\n\t\t\tcurrent_host_path_i = floor(float(current_host_path_i-1)/2)\n\t\t\tcurrent_host_path_j = floor(float(current_host_path_j-1)/2)\n\t\tcommon_ancestor = current_host_path_j\n\t\t# Go back from i to the common ancestor\n\t\tcurrent_host_path_i = i\n\t\tsequence = []\n\t\tsequence.append(current_host_path_i)\n\t\twhile (current_host_path_i != common_ancestor):\n\t\t\tparent_host = floor(float(current_host_path_i-1)/2)\n\t\t\tsequence.append(parent_host)\n\t\t\tcurrent_host_path_i = parent_host\n\t\t# Issue links in the common ancestor -> i order\n\t\tsequence = sequence[::-1]\n\t\tfor k in range(0,len(sequence)-1):\n\t\t\tfh.write(issueRouteLink2(min(sequence[k],sequence[k+1]),max(sequence[k],sequence[k+1])))\n\t\tfh.write(issueRouteTail())\n\nfh.write(issueTail())\nfh.close()\nprint >> sys.stderr, \"BinTree XML platform description file created: \"+filename\n\n###############################################################\n## Generate host file\nfilename = \"./hostfile_\"+str(num_hosts)+\".txt\"\nfh = open(filename, 'w')\n\nfor i in range(0,num_hosts):\n\tfh.write(\"host-\"+str(i)+\".hawaii.edu\\n\")\n\nfh.close()\nprint >> sys.stderr, \"Hostfile created: \"+filename\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n): \n    if n == 0: return 0\n    if n == 1 or n == 2: return 1\n\n    fib_n_2 = 1\n    fib_n_1 = 1\n    fib_n = 0\n\n    for i in range(3, n + 1): \n        fib_n = fib_n_1 + fib_n_2\n        fib_n_2 = fib_n_1  \n        fib_n_1 = fib_n \n    return fib_n \n\nprint(fibonacci(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: d = {'Name': 'John', 'Age': 30, 'City': 'New York'}\n \nfor key, value in d.items():\n    print(f'{key}: {value}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # take a list \nlist = [19,7,32,1,8,27] \n  \n# initializinf max_val to INT_MIN so that \n# any int number would be greater that it \nmax_val = float(\"-inf\") \n  \n# traversing through the list \nfor item in list: \n    if item > max_val: \n        max_val = item \n  \n# printing the maximum value \nprint(\"The maximum value of the list is:\", max_val) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Get user input\ncity = input(\"City Name: \")\nmonth = input(\"Month: \")\n\n# Calculate the average hours of sunlight in a given city during a month\ndef average_sunlight(city, month):\n    # Your code goes here\n    ...\n\n# Print the result\nprint(average_sunlight(city, month)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(lst):\n  return list(set(lst))\n\nlst = [1, 2, 4, 2, 5, 6, 3, 3]\nnew_list = remove_duplicates(lst)\nprint(new_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: rectA_min = (2, 6)\nrectA_max = (4, 2)\n\nrectB_min = (3, 5)\nrectB_max = (6, 3)\n\ndef check_overlap(rectA, rectB):\n  overlap_x = min(rectA_max[0], rectB_max[0]) - max(rectA_min[0], rectB_min[0])\n  overlap_y = min(rectA_max[1], rectB_max[1]) - max(rectA_min[1], rectB_min[1])\n \n  if overlap_x>0 and overlap_y>0:\n    overlap_area = overlap_x * overlap_y\n    return overlap_area\n  else:\n    return 0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = 'https://jsonplaceholder.typicode.com/posts'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n  posts = response.json()\n  for post in posts:\n    print(post['title']) but is not the same. just give one example and only return the code."}
