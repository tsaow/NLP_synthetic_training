{"prompt": "make some code that functions the same as the following code: import nltk\n\ndef synonyms_words(text):\n    text_tokens = nltk.word_tokenize(text)\n    replacement_words = []\n    \n    for token in text_tokens:\n        synonyms = nltk.wordnet.synsets(token)\n        if synonyms:\n            replacement_words.append(synonyms[0].name().split('.')[0])\n        else:\n            replacement_words.append(token)\n\n    return ' '.join(replacement_words)\n\ntext = \"this is an example sentence\"\nprint(synonyms_words(text)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\nimport pytz\n \ndef print_time(timezone):\n    tz = pytz.timezone(timezone)\n    current_time = datetime.datetime.now(tz)\n    print(\"Current time in {tz}: {time}\".format(tz=timezone, time=str(current_time)))\n \nif __name__ == '__main__':\n    print_time('America/Chicago') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\n\ndef process_sentence(sentence):\n \"\"\"\n A basic NLP pipeline for analyzing a given sentence.\n \"\"\"\n tokens = nltk.word_tokenize(sentence) # Tokenize the sentence\n tagged = nltk.pos_tag(tokens) # Assign part-of-speech labels\n parsed = nltk.parse.stanford.StanfordParser().raw_parse(sentence) # Parse the sentence\n return tokens, tagged, parsed but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Counter:\n    def __init__(self):\n        self.counter = 0\n\n    def increase(self):\n        self.counter += 1\n\n    def decrease(self):\n        self.counter -= 1\n\n    def getter(self):\n        return self.counter but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def average(array):\n '''\n Finds the average of all numbers in an array\n\n Args:\n array (list): List of numbers\n\n Returns:\n float: The average of all values in the array\n '''\n\n total = 0\n for value in array:\n total += value\n\n return total / len(array) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def roots(a, b, c):\n    disc = b*b - 4*a*c \n    root1 = (-b + math.sqrt(disc))/(2*a)\n    root2 = (-b - math.sqrt(disc))/(2*a)\n    return root1, root2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\nfrom flask import Flask, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(name)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\ndb = SQLAlchemy(app)\n\n@app.route('/query', methods=['GET'])\ndef get_data():\n query = request.args['query']\n users = db.session.execute(query)\n users_list = [dict(user) for user in users]\n return json.dumps({ \"users\": users_list })\n\nif name == 'main':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python module for classes and objects\n\n\nclass MyClass:\n    \"\"\"A basic example to demonstrate classes and objects\"\"\"\n\n    # Class attributes\n    color = 'red'\n    shape = 'circle'\n\n    # Initializer\n    def __init__(self, radius):\n        self.radius = radius\n\n    # Methods\n    def area(self):\n        return 3.14 * self.radius * self.radius\n\n\n# Create an object\nobj = MyClass(radius = 15)\n\n# Access object attributes\nprint(\"The color of the object is:\", obj.color)\nprint(\"The shape of the object is:\", obj.shape)\n\n# Access object methods\nprint(\"The area of the object is:\", obj.area()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_x = [\"apples\", \"oranges\", \"bananas\", \"pineapples\"]\nfor item in list_x:\n if(len(item) % 2 == 0):\n  print(item)\n#output: apples, oranges, pineapples but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_hostname(url):\n    hostname = url.split(\"/\")[2]\n    return hostname\n\nhostname  = get_hostname(url)\nprint(hostname) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_anagrams(s):\n    if len(s) == 1:\n        return s\n\n    anagrams = [] \n    for i, letter in enumerate(s):\n        for anagram in generate_anagrams(s[:i] + s[i+1:]):\n            anagrams.append(letter + anagram)\n    return anagrams but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def lis(arr):\n    n = len(arr)\n \n    # Initialize LIS values for all indices \n    lis = [1]*n\n \n    # Compute optimized LIS values in bottom up manner \n    for i in range (1 , n):\n        for j in range(0 , i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1 : \n                lis[i] = lis[j]+1 \n \n    # Initialize maximum to 0 to get the maximum of all LIS \n    maximum = 0\n \n    # Pick maximum of all LIS values \n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n \n    return maximum \n \narr = [3,4,-1,0,6,2,3]\nprint('Length of LIS is', lis(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Triangle:\ndef __init__(self, side1, side2, side3):\n self.side1 = side1\n self.side2 = side2\n self.side3 = side3\n \ndef get_area(self):\n s = (self.side1 + self.side2 + self.side3) / 2\n return (s*(s-self.side1)*(s-self.side2)*(s-self.side3)) ** 0.5\n \ndef is_equilateral(self):\n return self.side1 == self.side2 == self.side3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MobilePhone:\n    def __init__(self, brand, model, year, display_size):\n        self.brand = brand\n        self.model = model\n        self.year = year\n        self.display_size = display_size but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_vowels(input_string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    output_string = ''\n    for s in input_string:\n        if s in vowels:\n            output_string += '_'\n        else:\n            output_string += s\n    return output_string\n\nresult = replace_vowels('teststring')\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findNearestSquares(n):\n  nearestSquareList = []\n  i = 1\n  # Find all the nearest squares\n  while i * i <= n:\n    nearestSquareList.append(i * i)\n    i += 1\n  \n  # Find the nearest 3 squares\n  nearest3Squares = nearestSquareList[-3:]\n  \n  return nearest3Squares\n\nnearest3Squares = findNearestSquares(30)\nprint(nearest3Squares)\n\n# Output:\n# [25, 28, 29] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\nwith open('data.json', 'r') as f:\n data = json.load(f)\n\ndata_list = []\n\nfor item in data:\n data_list.append(item)\n\nprint(data_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def word_frequency(string):\n    word_freq = {} \n  \n    for word in string.split(): \n        if word in word_freq: \n            word_freq[word] += 1\n        else: \n            word_freq[word] = 1\n  \n    return word_freq \n      \nstring = \"Hello world hello world\"\nprint(word_frequency(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_x(lst):\n    \"\"\"\n    Function to remove all occurrences of a character 'x' from a list.\n\n    Args:\n        lst (list): The list to process.\n\n    Returns:\n        A list with all occurrences of the character 'x' removed.\n    \"\"\"\n    \n    return [item for item in lst if item != 'x'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Queue:\n  def __init__(self):\n    self.items = []\n\n  def is_empty(self):\n    return self.items == []\n\n  def enqueue(self, item):\n    self.items.insert(0, item)\n  \n  def dequeue(self):\n    return self.items.pop()\n\n  def size(self):\n    return len(self.items) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nDevelop a neural network model in Python to recognize a hand-written number\n\"\"\"\n\nimport numpy as np\nimport tensorflow as tf\n\n#load the mnist dataset\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n\n#discretize the images by flattening them\nx_train = x_train.reshape(-1, 784) \nx_test = x_test.reshape(-1, 784)\n\n#normalize the pixel values from 0 to 1\nx_train = x_train/255.0\nx_test = x_test/255.0\n\n#create a neural network model\nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Dense(512, activation='relu', input_shape= (784,)))\nmodel.add(tf.keras.layers.Dense(512, activation='relu'))\nmodel.add(tf.keras.layers.Dropout(0.2))\nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))\n\n#compile and train the model\nmodel.compile(\n    loss='sparse_categorical_crossentropy', metrics=['accuracy']\n)\nmodel.fit(x_train, y_train,  epochs = 10)\n\n#evaluate the model\nmodel.evaluate(x_test, y_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport matplotlib.pyplot as plt\n\n\nclass LinearRegression:\n def __init__(self):\n self.weights = None\n self.bias = None\n\n def fit(self, X, y):\n\"\"\"\nFit the linear regression model to the given data\n\nParameters\n----------\nX : array-like, shape (n_samples, n_features)\nTraining data\n\ny : array-like, shape (n_samples,)\nTarget values\n\nReturns\n-------\nself : returns an instance of self.\n\"\"\"\n \n # Compute the weights and bias\n X = np.array(X)\n y = np.array(y)\n weights = np.dot(np.linalg.pinv(X), y)\n bias = y - np.dot(X, weights)\n \n self.weights = weights\n self.bias = bias\n \n def predict(self, x):\n\"\"\"\nPredict the output value for a given input\n\nParameters\n----------\nx : array-like, shape (n_samples, n_features)\nInput data\n\nReturns\n-------\ny : array-like, shape (n_samples,)\nPredicted output value\n\"\"\"\n \n # Return the predictions using the weights and bias\n predictions = np.dot(np.array(x), self.weights) + self.bias\n return predictions but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def infix_to_postfix(expression):\n    # Separate the expression by tokens\n    tokens = expression.split(' ')\n    \n    # Create an operator stack\n    op_stack = []\n    \n    # Create a list for the postfix output\n    postfix_output = []\n    \n    # Iterate through the tokens\n    for token in tokens:\n        # If token is an operator\n        if token == '+' or token == '-' or token == '*':\n            # Append it to the operator stack\n            op_stack.append(token)\n        # If token is an operand\n        else:\n            # Append it to the postfix output\n            postfix_output.append(token)\n            # Pop operands from the stack while not empty\n            while op_stack:\n                # Append it to the postfix output\n                postfix_output.append(op_stack.pop())\n                \n    # Return the postfix output as a string\n    return ' '.join(postfix_output) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: A 3D array can be created using the numpy.array() method in Python and specifying three dimensions, such as:\n\narray_3d = numpy.array([[[0, 0, 0], [1, 1, 1], [2, 2, 2]],\n                       [[3, 3, 3], [4, 4, 4], [5, 5, 5]],\n                       [[6, 6, 6], [7, 7, 7], [8, 8, 8]]]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class GameController:\n    def __init__(self):\n        self.state = {'lives': 3, 'score': 0, 'level': 1}\n    \n    def update_game_state(self, lives, score, level):\n        self.state['lives'] = lives\n        self.state['score'] = score\n        self.state['level'] = level\n\n    def get_game_state(self):\n        return self.state but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_dictionaries(d1, d2):\n    d3 = {}\n    \n    for key in d1:\n        d3[key] = d1[key]\n    for key in d2:\n        d3[key] = d2[key]\n        \n    return d3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def break_sentence(sentence):  \n    return sentence.split(\" \") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string \n\ndef is_pangram(sentence): \n   alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n   for char in alphabet: \n      if char not in sentence.lower(): \n         return False\n   return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from bs4 import BeautifulSoup\nimport requests\n\ndef get_hyperlinks(url):\n    page = requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n    links = []\n    for a in soup.find_all('a', href=True):\n        links.append(a['href'])\n    return links but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Importing necessary libraries \nimport numpy as np \nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score\n\n# Defining the function which takes the classifier object and optimizes it\ndef optimize_model(classifier, parameters):\n    # Create a GridSearchCV object, which will use 5-fold cross validation \n    clf = GridSearchCV(classifier, parameters, scoring = 'accuracy', cv = 5)\n\n    # Fit the model on the training data \n    clf.fit(X_train, y_train)\n\n    # Predict the values on the test dataset\n    y_pred = clf.predict(X_test)\n\n    # Calculate the accuracy score\n    accuracy = accuracy_score(y_test, y_pred)\n    \n    # Print the accuracy\n    print('Accuracy: {:.2f}%'.format(accuracy*100)) \n\n    # Return the best parameters and the classifier\n    return clf.best_params_, clf but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_subarray_sum(arr):\n    current_sum = 0\n    max_sum = 0\n\n    for x in arr:\n        current_sum += x\n        if current_sum < 0:\n            current_sum = 0\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n\nresult = max_subarray_sum([-2, 4, -1, 5, 6])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_substr(str, substr):\n    count = 0\n    start = 0\n    while (str.find(substr, start) != -1):\n        count += 1\n        start = str.find(substr, start) + 1\n    return count\n\nstring = \"abcdabcd\"\nsubstring = \"cd\"\nresult = count_substr(string, substring)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: ^\\(?\\d{3}\\)?\\s?\\-?\\d{8,12}$ but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_list(n):\n    random_list = []\n    for i in range(n):\n        random_list.append(random.randint(0, 100))\n    return random_list\n\nn = 8\nrandom_list = generate_random_list(n)\nprint(random_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Create a data frame from the input data\ndf = pd.read_csv(\"emails.csv\")\n# Extract features and outputs\nX = df['content'].values\ny = df['label'].values\n# Split the dataset into train & test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n# Count vectorizer\nvectorizer = CountVectorizer()\nX_train = vectorizer.fit_transform(X_train)\nX_test = vectorizer.transform(X_test)\n# Create & fit the model\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n# Test the model\nscore = model.score(X_test, y_test)\nprint(score) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http://example.com/'\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\ndata = []\nfor li in soup.find_all('li'):\n    data.append({\n        'name': li.text.split(\":\")[0],\n        'value': li.text.split(\":\")[1]\n    })\n\nprint(data)\n# Output: [{'name': 'Name', 'value': 'John Smith'}, {'name': 'Age', 'value': '38'}] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nprint(factorial(4)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def rotateNodes(root): \n    # if node has a left child \n    if root.left is not None: \n        # we rotate clockwise \n        newRoot = root.left \n        root.left = newRoot.right \n        newRoot.right = root \n        root = newRoot \n  \n    # if node has a right child \n    if root.right is not None: \n        # we rotate counter clockwise \n        newRoot = root.right \n        root.right = newRoot.left  \n        newRoot.left = root \n        root = newRoot \n\n    return root but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt \n \n# Data to plot\ndata = [1, 2, 3, 6, 5, 4, 7]\n \n# Create the graph object\nplt.bar(range(len(data)), data, align='center')\n \n# Label the graph\nplt.xticks(range(len(data)), range(1, len(data)+1))\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Bar Graph')\n \n# Display the graph\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_numbers(strings): \n    return [s for s in strings if not any(c.isdigit() for c in s)]\n\nif __name__ == '__main__':\n    strings = [\"apple\",\"hello123\",\"hi12345\", \"good15\"]\n    print (filter_numbers(strings)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password(n):\n    password = ''\n    for i in range(n):\n        password += random.choice(string.ascii_letters + \n        string.digits + string.punctuation)\n    return password but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def contains(s1, s2):\n return s2 in s1\n\nstring1 = \"Hello World!\"\nstring2 = \"World\"\n\nprint(contains(string1, string2)) # True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: total_cost = 0\nfor order in orders: \n total_cost += order['price']\n\nprint('Total cost is', total_cost) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_distinct_letters(string):\n   distinct_letters = set()\n   for word in string.split(' '):\n        distinct_letters.update(set(word))\n   return len(distinct_letters)\n\n# example\nstring = 'hello world'\nprint(count_distinct_letters(string)) # 6 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef random_integer(start, end):\n  return random.randint(start, end) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countCharacters(string): \n    # Create dictionary to return  \n    # count of each character \n    str_dict = {} \n  \n    # Count frequency of each \n    # character of the string \n    for i in string: \n        if i in str_dict: \n            str_dict[i] += 1\n        else: \n            str_dict[i] = 1\n  \n    return str_dict \n\n# Driver code \nstring = \"String Counting\"\n\n# Print result \nprint(countCharacters(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def test_gt_5(num):\n    return num > 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Cube:\n    def __init__(self):\n        self.sideLengthA = 10\n        self.sideLengthB = 10\n        self.sideLengthC = 10 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_obj = {\n    'a': 1,\n    'b': 2,\n    'c': 3\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Machine learning. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_sentence(sentence):\n reversed_sentence = \" \".join(sentence.split()[::-1])\n return reversed_sentence\n\nprint(reverse_sentence(sentence))\n# Output: sentence test a is This but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_even_sum(nums):\n    even_sum = 0\n    for num in nums:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum\n\nnums = [2, 3, 6, 7, 13, 14]  \neven_sum = get_even_sum(nums)\nprint(even_sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Website URL\nurl = 'LINK'\n \n# Make a request and get the HTML content\nr = requests.get(url) \nhtml_content = r.text\n\n# Parse the HTML content\nsoup = BeautifulSoup(html_content, 'lxml')\n\n# Price\nprice_tag = soup.find(class_='price')\nprice = price_tag.text\n\n# Description\ndescription_tag = soup.find(class_='product-description')\ndescription = description_tag.text\n\nprint('Price:', price)\nprint('Description:', description) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# URL to scrape\nurl = \"https://www.nytimes.com/\"\n\n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get(url).text\n\n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n\n# News Section\nnews_Section = soup.find(\"div\", class_=\"css-1qwxefa esl82me1\")\n# print(news_Section)\n\n# News Articles\narticles = news_Section.find_all(\"h2\", class_=\"e1xfvim30\")\n# print(articles)\n\n# Empty list to store all news articles\nnews_list = []\n\n# Loop over each article\nfor article in articles:\n    # Extract the title of the article\n    title = article.find(\"a\").text\n\n    # Extract the author of the article\n    author = article.find(\"span\", class_=\"css-1n7hynb\").text\n    \n    # Extract the date the article was published\n    date = article.find(\"time\").text\n    \n    # Extract the URL of the article\n    link = article.find(\"a\")[\"href\"]\n    \n    # Store all the information in one dictionary\n    news_dict = {\n        \"title\": title,\n        \"author\": author,\n        \"date\": date,\n        \"link\": link\n    }\n    \n    # Append the dictionary to the list\n    news_list.append(news_dict)\n\n# Print the list\nprint(news_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_for_item(strings, item):\n    for string in strings:\n        if string == item:\n            return True\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import urllib.request\nfrom bs4 import BeautifulSoup\n\nurls = [\n\"https://en.wikipedia.org/wiki/Python_(programming_language)\",\n\"https://wikipedia.org/wiki/Deep_learning\",\n\"https://www.wikipedia.org/wiki/Cat\"\n]\n\nfor url in urls:\n html = urllib.request.urlopen(url).read()\n soup = BeautifulSoup(html)\n title = soup.title.string\n print(title) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: array = [3, 4, 2, 8, 5, 6]\nsum = 10\n\ndef find_pair(array,sum):\n for i in range (len(array)-1):\n  for j in range (i+1, len(array)):\n   if array[i] + array[j] == sum:\n    print(\"Pair found:\",array[i], array[j])\n\nfind_pair(array,sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseArray(arr): \n    return arr[::-1] \n  \narr = [1,2,3,4,5] \nreverseArr = reverseArray(arr) \n  \nprint(\"Reversed array is\", reverseArr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: a = 5\nb = 10\nc = a + b\nprint(c) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python script to validate an email address\n# Ask the user to enter an email address\nemail = input(\"Please enter your email address:\")\n\n# Define a regular expression to validate the email address\nvalid_email_regex = r\"^[\\w-]+@([\\w-]+\\.)+[\\w]+$\"\n# Check whether the given email address is valid\nif re.search(valid_email_regex, email):\n    # If valid display success message\n    print(\"The entered email address is valid\")\nelse:\n    # Otherwise display an error message\n    print(\"The entered email address is invalid!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python3 program to find frequency table \nfrom collections import Counter \ndef freq_table(arr):\n    return dict(Counter(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def closest_to_zero(arr):\n    closest_val = 0\n    closest_diff = float('inf')\n    \n    for val in arr:\n        if abs(val) < abs(closest_diff):\n            closest_diff = val\n            closest_val = val\n\n    return closest_val\n\narr1 = [-2, 4, -5, -1]\nresult = closest_to_zero(arr1)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def FibonacciGenerator(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n  \n \n# Driver Program \nprint(FibonacciGenerator(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndef convert_json_to_dict(json_object):\n    return json.loads(json_object) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# set the maximum number of guess\nmax_guesses = 5\n\n# generate a random number\ntarget_num = random.randint(1, 10)\n\n# initialize number of guesses\nnum_guesses = 0\n\n# prompt user for a guess\nwhile num_guesses < max_guesses:\n    user_guess = int(input(\"Guess a number between 1 and 10: \"))\n    \n    # check if user guess is correct\n    if user_guess == target_num:\n        print(\"You have guessed the number correctly\")\n        break\n    # check if user guess is greater or lesser\n    elif user_guess > target_num:\n        print(\"Your guess is greater than the target number\")\n    else:\n        print(\"Your guess is lesser than the target number\")\n    num_guesses += 1\n\nif num_guesses == max_guesses:\n    print(\"You have reached your maximum number of guesses\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Fetch the website content\nlink = \"https://example.com\"\ndata = requests.get(link)\n\n# Parse the HTML content\nsoup = BeautifulSoup(data.text, 'html.parser')\n\n# Extract all the <p> tags\ncontent = soup.find_all('p')\n\n# Print the content\nfor item in content:\n    print(item.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: avg = lambda a,b : (a + b)/2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nnumber = random.randint(10, 20)\nwhile (number == 14):\n  number = random.randint(10, 20)\n\nprint(number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def normalize(numbers):\n avg = sum(numbers) / len(numbers)\n variance = sum((x - avg) ** 2 for x in numbers) / len(numbers)\n stdev = variance ** 0.5\n return [(x - avg) / stdev for x in numbers] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def extract_data(dataset):\n    name_list = []\n    age_list = []\n    hobby_list = []\n    \n    for entry in dataset:\n        name_list.append(entry[\"name\"])\n        age_list.append(entry[\"age\"])\n        hobby_list.append(entry[\"hobby\"])\n    \n    return name_list, age_list, hobby_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_poem(input): \n  poem = []\n  for i in range(len(input)):\n      line = ''\n      for j in range(i):\n          line += input[j] + ' '\n      poem.append(line)\n  return poem but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort(list):\n    \"\"\"\n    Implements a comparison sorting algorithm using Python.\n    Sorts the given list in ascending order.\n    \"\"\"\n    for i in range(len(list)):\n        for j in range(i + 1, len(list)):\n            if list[i] > list[j]:\n                list[i], list[j] = list[j], list[i]\n    return list\n\nif __name__ == '__main__':\n    list = [9, 8, 7, 6, 5, 4, 3, 2, 1]\n    print(sort(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Make a GET request to fetch the raw HTML content\nurl = \"https://www.example.com/\"\nhtml_content = requests.get(url).text\n\n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n\n# Find all links in the page\ntitles_list = soup.find_all(\"a\")\ntitles_urls = [(title.text, title[\"href\"]) for title in titles_list]\n\n# Print all titles and their corresponding links\nfor title, url in titles_urls:\n    print(\"Title:\", title)\n    print(\"URL:\", url)\n    print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list1 = [3, 4, 5, 6, 7]\nlist2 = [2, 3, 4, 5, 6]\n\ncommon_elements = set(list1) & set(list2)\nprint(list(common_elements)) \n# Output: [3, 4, 5, 6] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport spacy\nimport nltk\n\n# load the English language model\nnlp = spacy.load('en_core_web_sm')\n\n# define some sample conversations\nconversations = [ \n       ['Hello', 'Hi there'], \n       ['How are you?', 'I am doing great!'], \n       ['Bye', 'Goodbye!'], \n]\n\n# define an answer generator\ndef answer(text):\n    doc = nlp(text)\n    tokens = [token.text for token in doc]\n    for conversation in conversations:\n        if conversation[0] in tokens:\n            return random.choice(conversation[1:])\n    return ''\n\n# create a loop to run the chatbot\nwhile True:\n    text = input('You: ')\n    response = answer(text)\n    print('Bot: ', response)\n    if response == 'Goodbye!':\n        break but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n \ndef reformat_json(json_string):\n    return json.dumps(json.loads(json_string), indent=4, sort_keys=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(arr): \n    new_arr = [] \n    \n    for i in arr: \n        if i not in new_arr: \n            new_arr.append(i) \n            \n    return new_arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nRemove duplicates from an array\n\"\"\"\n\ndef remove_duplicates(arr):\n    # Create a set \n    seen = set()\n    \n    # Traverse the array\n    for i in range(len(arr)):\n        if arr[i] not in seen:\n            seen.add(arr[i])\n            \n    return seen\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 3, 3, 4, 5, 6]\n    print(remove_duplicates(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import xml.etree.ElementTree as ET\n \n# Read the XML file\ntree = ET.parse('items.xml')\n \n# Get the root element\nroot = tree.getroot()\n \n# Iterate over each item\nfor item in root.findall('item'):\n # Get the title\n title = item.find('title').text\n # Get the description\n description = item.find('description').text\n \n print('Title: ', title)\n print('Description: ', description) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import collections \n\ndef calculate_price(items): \n    items_dict = collections.Counter(items) \n    total_price = 0\n    # Iterate through each item\n    for item in items_dict: \n        price = items_dict[item] * prices[item] \n        total_price += price \n    # Return the total price\n    return total_price \n\n# Mapping of item and its price \nprices = { \n    'apple': 2, \n    'banana': 4, \n    'orange': 6\n    } \n# List of items to buy\nitems = ['apple', 'apple', 'orange', 'banana', 'apple'] \n\n# Calculate total price\nprice = calculate_price(items) \nprint(\"Total Price is\", price) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import base64\nfrom Crypto.Cipher import AES\n\ndef encrypt_string(plain_text, key, iv):\n # convert strings to bytes\n plain_text_bytestring = bytes(plain_text, encoding='utf8')\n key = bytes(key, encoding='utf8')\n iv = bytes(iv, encoding='utf8')\n\n # create an AES cipher object with the key\n cipher = AES.new(key, AES.MODE_CBC, iv)\n\n # encrypt the message using the cipher object\n encrypted_string = cipher.encrypt(plain_text_bytestring)\n\n # base64 encode the encrypted message\n base64_encrypted_string = base64.b64encode(encrypted_string)\n\n # return the base64 encoded message\n return base64_encrypted_string.decode('utf-8')\n\ndef decrypt_string(base64_encrypted_string, key, iv):\n # convert strings to bytes\n base64_encrypted_string = bytes(base64_encrypted_string, encoding='utf8')\n key = bytes(key, encoding='utf8')\n iv = bytes(iv, encoding='utf8')\n\n # decode the base encoded message\n encrypted_string = base64.b64decode(base64_encrypted_string)\n\n # create an AES cipher object with the key\n cipher = AES.new(key, AES.MODE_CBC, iv)\n\n # decrypt the message using the cipher object\n decrypted_string = cipher.decrypt(encrypted_string)\n\n # return the decrypted message in string format\n return decrypted_string.decode('utf-8') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def prime_numbers(n):\n for i in range(2,n+1):\n prime = True\n for j in range(2,i):\n if i % j == 0:\n prime = False\n if prime:\n print(i)\n \nprime_numbers(10) # Output: 2, 3, 5, 7 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(nums):\n    max_num = 0\n    for num in nums:\n        str_num = str(num)\n        mul_res = 1\n        for digit in str_num:\n            mul_res *= int(digit)\n        max_num = max(max_num, mul_res)\n    return max_num but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_number_data(data):\n    numbers_below_15 = []\n    numbers_above_15 = []\n\n    for number in data:\n        if number <= 15:\n            numbers_below_15.append(number)\n        else:\n            numbers_above_15.append(number)\n    \n    return numbers_below_15, numbers_above_15 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_nums(n):\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n\nprint(sum_nums(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def word_count(text_list):\n    result = {}\n    for word in text_list:\n        if word in result.keys():\n            result[word] += 1\n        else:\n            result[word] = 1\n    return result\n\ntext_list = ['a', 'b', 'a', 'a', 'c', 'b', 'd', 'a']\ncounts = word_count(text_list)\nprint(counts)  # Output: {'a': 4, 'b': 2, 'c': 1, 'd': 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_vowels(strings):\n vowels = ['a', 'e', 'i', 'o', 'u']\n result = []\n for string in strings:\n result.append(''.join(c for c in string if c not in vowels))\n return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n \ndef get_page_word_count(url):\n  r = requests.get(url)\n  soup = BeautifulSoup(r.content, 'html.parser')\n  words = soup.find_all(text=True)\n  count = 0 \n  for w in words:\n    count += len(w.split())\n  return count\n  \nurl = \"http://example.com\"\nword_count = get_page_word_count(url)\nprint(\"word count = \", word_count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_to_int(string):\n    num = 0 \n    for char in string:\n        num = num * 10 + (ord(char) - ord('0')) \n    return num but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_maximum_item(arr):\n    if len(arr) == 0:\n        return float('-infinity')\n    \n    maximum_number = arr[0]\n\n    for item in arr[1:]:\n        if item > maximum_number:\n            maximum_number = item \n            \n    return maximum_number but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubbleSort(arr): \n    n = len(arr) \n  \n     # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [5, 3, 2, 4, 1] \n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]), but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: word_dict = {}\n\n# Count frequency of each word\nfor word in input_list:\n if word in word_dict.keys():\n word_dict[word] += 1\n else:\n word_dict[word] = 1\n\nprint(word_dict)\n# Output: {'word': 2, 'words': 1, 'python': 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(lst):\n n = len(lst)\n    \n for i in range(n-1):\n for j in range(0, n-i-1):\n if lst[j] > lst[j+1]:\n lst[j], lst[j+1] = lst[j], lst[j+1]\n \n sorted_list = bubble_sort(unsorted_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_words_in_order(string):\n    \"\"\"Print out all the words in the input in alphabetical order\"\"\"\n    words = string.split()\n    words.sort()\n    for word in words:\n        print(word) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from lxml import html\nimport requests\n\nurl = \"https://www.tripadvisor.com/Hotel_Review-g469893-d13034369-Reviews-The_Fountainhead_Hotel-San_Fernando_Trinidad_Tobago.html\"\npage = requests.get(url)\n\ntree = html.fromstring(page.content)\nuser_names = tree.xpath('//a[@class=\"scrname\"]/text()')\nreview_texts = tree.xpath('//p[@class=\"partial_entry\"]/text()')\n\n# print user names and comments\nfor user_name, review_text in zip(user_names, review_texts):\n print(user_name, '\\n', review_text, '\\n\\n') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mergeSort(arr): \n    if len(arr) >1: \n        mid = len(arr)//2 #Finding the mid of the array \n        L = arr[:mid] # Dividing the array elements  \n        R = arr[mid:] # into 2 halves \n  \n        mergeSort(L) # Sorting the first half \n        mergeSort(R) # Sorting the second half \n  \n        i = j = k = 0\n          \n        # Copy data to temp arrays L[] and R[] \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                arr[k] = L[i] \n                i+=1\n            else: \n                arr[k] = R[j] \n                j+=1\n            k+=1\n          \n        # Checking if any element was left \n        while i < len(L): \n            arr[k] = L[i] \n            i+=1\n            k+=1\n          \n        while j < len(R): \n            arr[k] = R[j] \n            j+=1\n            k+=1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(str):\n    \"\"\" Reverses a given string \"\"\"\n\n    rev_str = \"\"\n\n    for c in str:\n        rev_str = c + rev_str\n\n    return rev_str\n\nstr = \"Hello World\"\nrev_str = reverse_string(str)\n\nprint(rev_str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: result = set(seq)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(n):\n    '''\n    Function to check if the given number is a prime\n    '''\n    if n < 2:\n        return False\n\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a stack with basic push and pop operations\n\"\"\"\n\nclass Stack:\n    def __init__(self):\n        self.stack = []\n    def push(self, item):\n        self.stack.append(item)\n    def pop(self):\n        return self.stack.pop()\n    def peek(self):\n        return self.stack[-1]\n    def is_empty(self):\n        return len(self.stack) == 0 but is not the same. just give one example and only return the code."}
