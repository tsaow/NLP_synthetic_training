{"prompt": "make some code that functions the same as the following code: def sum_three_numbers(nums):\n    return sum(nums)\n\nresult = sum_three_numbers([5, 10, 8])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentences = [\"The food was absolutely delicious.\"]\nsid = SentimentIntensityAnalyzer()\n\nfor sentence in sentences:\n print(sentence)\n ss = sid.polarity_scores(sentence)\n for k in ss:\n print('{0}: {1}'.format(k, ss[k]), end='\\n') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_missing_number(list_of_numbers):\n    max_number = max(list_of_numbers)\n    total_sum = (max_number * (max_number + 1)) // 2\n    actual_sum = 0\n    \n    for number in list_of_numbers:\n        actual_sum += number\n    return total_sum - actual_sum\n\nlist_of_numbers = [2, 3, 1, 5]\nmissing_number = find_missing_number(list_of_numbers)\nprint(\"Missing number: \", missing_number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nnumbers = []\ntotal = 0\n\n#Generate 10 random numbers\nfor i in range(10):\n    n = random.randint(0, 100)\n    numbers.append(n)\n    total += n\n\n#Print the generated numbers\nprint(\"Generated numbers :\")\nfor i in numbers:\n    print(i)\n\n#Calculate and print the average\naverage = total / len(numbers)\nprint(\"The average is:\", average) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: original = [-1, -2, 5, 0, 6, 8, 4, 9]\nfiltered = [x for x in original if x > 0]\nprint(filtered) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to print reverse level \n# order traversal\n  \n# Binary Tree Node\nclass Node: \n    def __init__(self, data): \n        self.data = data\n        self.left = None\n        self.right = None\n  \n#reverse Level Order Traversal \ndef reverseLevelOrder(root): \n    # Base Case \n    if root is None: \n        return\n  \n    # Create an empty queue for level order  \n    # traversal \n    q = []\n  \n    # Enqueue Root and initialize height \n    q.append(root) \n      \n    # Loop while there is at least one  \n    # discovered node \n    while(len(q) > 0): \n        # Print front of queue and remove it from queue \n        print(q[len(q)-1].data) \n        node = q.pop(len(q)-1) \n          \n        # Insert right child first \n        if node.right is not None: \n            q.append(node.right) \n          \n        # Insert left child \n        if node.left is not None: \n            q.append(node.left)  \n  \n#Driver Program\nroot = Node(1)\nroot.left = Node(2)\nroot.right = Node(3)\nroot.left.left = Node(4)\nroot.left.right = Node(5)\n  \n# Function Call \nreverseLevelOrder(root) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_word_index(words, target_word):\n    for i, word in enumerate(words):\n        if word == target_word:\n            return i\n    return -1\n\nword_index = find_word_index(words, target_word)\nprint(word_index) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_telephone_number(telephone_number):\n    is_valid = False\n \n    if len(telephone_number) == 6 and telephone_number[1] == '9':\n        is_valid = True\n    return is_valid\n\nif __name__ == '__main__':\n    telephone_number = '370641'\n    is_valid = check_telephone_number(telephone_number)\n    print(is_valid) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com'\n\nheaders = {\n    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36'\n}\n\nresponse = requests.get(url, headers=headers)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nprice_list = []\nfor price in soup.find_all('span', class_='price'):\n    price_list.append(price.text)\n\nprint(price_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_pos(mat):\n max_v = -float('inf')\n max_i = -1\n max_j = -1\n \n for i in range(len(mat)):\n  for j in range(len(mat[i])):\n   if mat[i][j] > max_v:\n    max_i = i\n    max_j = j\n \n return (max_i, max_j)\n \nmatrix = [[2, 8, 7], [3, 11, 5], [1, 9, 4]]\npos = max_pos(matrix)\nprint(pos) # (1, 1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport json\nfrom flask import Flask, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(name)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\ndb = SQLAlchemy(app)\n\nclass Data(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(50), nullable=False)\n age = db.Column(db.Integer, nullable=False)\n\ndb.create_all()\n\n@app.route('/fetch', methods=['GET'])\ndef fetch_data():\n r = requests.get('https://example.com/public-api/data')\n response = r.json()\n \n for item in response:\n  data = Data(name=item['name'], age=item['age'])\n  db.session.add(data)\n\n db.session.commit()\n return {'message': 'Data successfully fetched'}\n\nif name == 'main':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re \n\ndef find_vowel_words(string): \n    # split the string into words\n    words = string.split() \n      \n    # Define the regular expression to identify words starting with vowels\n    regex = r\"\\b[aeiouAEIOU][a-zA-Z]*\\b\"\n  \n    # Initialize an empty list to store all the words\n    vowel_words = [] \n  \n    # Iterate over all the words \n    for word in words:\n        \n        # Check if the word starts with a vowel\n        if re.match(regex, word): \n            \n            # Append it to the vowel_words list\n            vowel_words.append(word) \n  \n    return vowel_words \n\n# Driver code  \nstring = \"Apple, orange, banana\" \nvowel_words = find_vowel_words(string)  \nprint(vowel_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # imports\nfrom flask import Flask, jsonify, request\n\n# setting up the application\napp = Flask(__name__)\n\n# defining the data\nblog_posts = [\n {\n 'id': '1',\n 'title': 'Introducing my blog',\n 'content': 'This blog is all about my journey as a software developer.'\n },\n {\n 'id': '2',\n 'title': 'My First day',\n 'content': 'Today I created a website and wrote a few lines of code!'\n }\n]\n\n# routes\n@app.route('/posts', methods=['GET'])\ndef get_all_posts():\n return jsonify({'posts': blog_posts})\n\n@app.route('/posts/<post_id>', methods=['GET'])\ndef get_post_by_id(post_id):\n post = next((item for item in blog_posts if item['id'] == post_id), None)\n return jsonify({'post': post})\n\n@app.route('/posts', methods=['POST'])\ndef create_post():\n data = request.get_json()\n blog_posts.append(data)\n return jsonify({'posts': blog_posts})\n\n@app.route('/posts/<post_id>', methods=['PUT'])\ndef update_post(post_id):\n data = request.get_json()\n for item in blog_posts:\n if item['id'] == data['id']:\n item['title'] = data['title']\n item['content'] = data['content']\n return jsonify({'posts': blog_posts})\n\n@app.route('/posts/<post_id>', methods=['DELETE'])\ndef delete_post(post_id):\n data = request.get_json()\n for item in blog_posts:\n if item['id'] == data['id']:\n blog_posts.remove(item)\n return jsonify({'posts': blog_posts})\n\nif __name__ == '__main__':\n app.run(host='0.0.0.0', port=8000) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def transform_sum(numbers, transform_function):\n transformed_numbers = [transform_function(x) for x in numbers]\n return sum(transformed_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: <html>\n    <head>\n        <title>Digit 3x3 Matrix</title>\n        <style>\n            table{\n                border:1px solid black; \n                width: 50px; \n                height:50px;\n            }\n        </style>\n    </head>\n    <body>\n        <h1>Digit 3x3 Matrix</h1>\n        <table>\n            <tr>\n                <td>1</td><td>2</td><td>3</td>\n            </tr>\n            <tr>\n                <td>4</td><td>5</td><td>6</td>\n            </tr>\n            <tr>\n                <td>7</td><td>8</td><td>9</td>\n            </tr>\n        </table>\n    </body>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nGenerate random colors using the 'matplotlib color' module\n\"\"\"\n\nimport matplotlib.colors as colors\n\n# Generate 10 random colors\ncolors = [colors.to_hex(colors.rgb2hex(np.random.rand(3)))\n          for i in range(10)]\nprint(colors) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nnum = random.randint(min, max)\nprint(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MultiValueDict:\n    def __init__(self):\n        # Initialize and empty dictionary\n        self.dict = {}\n\n    def add(self, key, value):\n        # Add value to key\n        if key in self.dict:\n            self.dict[key].append(value)\n        else:\n            self.dict[key] = [value]\n\n    def get(self, key):\n        # Return the list of values for given key\n        if key in self.dict:\n            return self.dict[key]\n-->\n        else:\n            return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply(A, B):\n        rows_A = len(A)\n        cols_A = len(A[0])\n        rows_B = len(B)\n        cols_B = len(B[0])\n        if cols_A != rows_B:\n            # Check matrix dimensions\n            print(\"Cannot multiply the two matrices. Incorrect dimensions.\")\n            return\n\n        result = [[0 for row in range(cols_B)] for col in range(rows_A)]\n    \n        for i in range(rows_A):\n            for j in range(cols_B):\n                for k in range(cols_A):\n                    result[i][j] += A[i][k] * B[k][j]\n        return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ReverseString():\n    \n    def __init__(self, string):\n        self.string = string\n    \n    def reverse(self):\n        splittedString = self.string.split(' ')\n        reversedString = []\n        for word in splittedString:\n            reversedString.insert(0, word)\n        reversedString = ' '.join(reversedString)\n        return reversedString\n        \nr = ReverseString(string)\nprint(r.reverse()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def getNumberOfChars(String):\n    total_len = 0\n    for word in string.split():\n        total_len += len(word)\n    return total_len but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_overlap(string1, string2): \n    #split string1 into a list of words\n    words1 = string1.split()\n    #split string2 into a list of words\n    words2 = string2.split()\n    #initialize an empty list\n    result = []\n    #compare between the two words list \n    for word in words1:\n        if word not in words2:\n            result.append(word)\n    #join string2 into the result list\n    result = result + words2\n    # join the result list into a single string\n    new_string = ' '.join(result)\n  \n    return new_string\n\n#call the remove_overlap()function\nresult = remove_overlap(string1, string2)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_to_list(string):\n    return string.split()\n\nstring = \"Hello, World!\"\nwords_list = convert_to_list(string)\nprint(words_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import OpenGL\nfrom OpenGL.GL import *\nfrom OpenGL.GLU import *\n\nfrom math import pi, cos, sin\n\n# Variables that will be used for the game\nwidth = 15    #Maze width\nheight = 15   #Maze height\nkeyDistance = 3.0  #Distance between keys\n\n# Define constants used to create the maze\nMAZE_WALL = 0\nMAZE_EXIT = 2\nMAZE_EMPTY = 1\n\n# Create the maze\nmaze = [\n    [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0],\n    [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0],\n    [1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0],\n    [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1],\n    [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0],\n    [1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1],\n    [1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1],\n    [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0],\n    [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1],\n    [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0],\n    [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0],\n    [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0],\n    [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0],\n    [0, 0, 0, 0, 1, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0]\n]\n# The starting position\nposX = 0.0\nposY = 0.0\n\n# The rotation angle of the camera\nangle = 0.0\n\n#Draw each maze world\ndef draw_maze():\n    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)\n    glLoadIdentity()\n    \n    glTranslatef(-float(width)/2.0, -float(height)/2.0, -5.0)\n    glRotatef(angle,0.0,1.0,0.0)\n    glTranslatef(posX, posY, 0)\n\n    # Draw each of the cubes in the maze\n    for x in range(width):\n        for y in range(height):\n            # Select the appropriate shade for the cube\n            if maze[y][x] == MAZE_WALL:\n                glColor3f(0.0, 0.0, 0.0)\n            elif maze[y][x] == MAZE_EXIT:\n                glColor3f(1.0, 0.0, 0.0)\n            elif maze[y][x] == MAZE_EMPTY:\n                glColor3f(1.0, 1.0, 1.0)\n            # Draw the cube\n            glPushMatrix()\n            glTranslatef(x, y, 0.0)\n            draw_cube(1.0)\n            glPopMatrix()\n\n    glutSwapBuffers()\n\n# Determine the position of the camera and key presses\ndef update(dt):\n    global angle, posX, posY\n    \n    # Check for key presses\n    keys = glutGetModifiers()\n    if keys & GLUT_ACTIVE_ALT:\n        # Rotate the camera\n        angle += 5.0\n    if keys & GLUT_ACTIVE_SHIFT:\n        # Move the camera backward\n        posX -= keyDistance * cos(angle * pi/180.0)\n        posY -= keyDistance * sin(angle * pi/180.0)\n    if keys & GLUT_ACTIVE_CTRL:\n        # Move the camera forward\n        posX += keyDistance * cos(angle * pi/180.0)\n        posY += keyDistance * sin(angle * pi/180.0)\n\n# Draw a cube. The cube is of size 1 and is centered around the origin\ndef draw_cube(size):\n    halfSize = size / 2.0\n\n    glBegin(GL_LINE_STRIP)\n    glVertex3f(-halfSize,-halfSize, halfSize)\n    glVertex3f( halfSize,-halfSize, halfSize)\n    glVertex3f( halfSize, halfSize, halfSize)\n    glVertex3f(-halfSize, halfSize, halfSize)\n    glVertex3f(-halfSize,-halfSize, halfSize)\n    glEnd()\n\n    glBegin(GL_LINE_STRIP)\n    glVertex3f(-halfSize,-halfSize,-halfSize)\n    glVertex3f( halfSize,-halfSize,-halfSize)\n    glVertex3f( halfSize, halfSize,-halfSize)\n    glVertex3f(-halfSize, halfSize,-halfSize)\n    glVertex3f(-halfSize,-halfSize,-halfSize)\n    glEnd()\n\n    glBegin(GL_LINES)\n    glVertex3f(-halfSize,-halfSize, halfSize)\n    glVertex3f(-halfSize,-halfSize,-halfSize)\n\n    glVertex3f( halfSize,-halfSize, halfSize)\n    glVertex3f( halfSize,-halfSize,-halfSize)\n\n    glVertex3f( halfSize, halfSize, halfSize)\n    glVertex3f( halfSize, halfSize,-halfSize)\n\n    glVertex3f(-halfSize, halfSize, halfSize)\n    glVertex3f(-halfSize, halfSize,-halfSize)\n    glEnd() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Make a request to the website and get the HTML\nurl = \"https://www.example.com\"\nresponse = requests.get(url)\nhtml = response.content\n\n# Parse the HTML using BeautifulSoup\nsoup = BeautifulSoup(html, 'html.parser')\n\n# Extract data from tags which contain specific class names\ndata = soup.find_all('div', {\"class\": \"example-class\"}) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify(value, threshold):\n    if value < threshold[0]:\n        return 'low'\n    elif threshold[0] <= value < threshold[1]:\n        return 'medium'\n    else:\n        return 'high' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: primes = []\n\nfor x in range(2, 1001):\n    for i in range(2, x):\n        if x % i == 0:\n            break\n    else:\n        primes.append(x)\n\nprint(primes) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_alphabet(s):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in alphabet:\n        if letter not in s:\n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import itertools\n\ndef generate_names(first_names, last_names):\n  names = []\n  \n  for first, last in itertools.product(first_names, last_names):\n    names.append(first + ' ' + last)\n  \n  return names\n\nfirst_names = ['John', 'Emma', 'Sarah', 'Liam']\nlast_names = ['Smith', 'Jones', 'Brown', 'Robinson']\n\nnames = generate_names(first_names, last_names)\nprint(names) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Node class \nclass Node: \n  \n    # Function to initialise the node object \n    def __init__(self, data): \n        self.data = data  # Assign data \n        self.next = None  # Initialize next as null \n  \n  \n# Linked List class \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n  \n    # This function prints contents of linked list \n    # starting from head \n    def printList(self): \n        temp = self.head \n        while (temp): \n            print(temp.data) \n            temp = temp.next\n  \n    # Function to delete node at position 'index'\n    def delete_node(self, index):\n  \n        # Initialize temp and prev\n        temp = self.head \n        prev = None\n  \n        # Check if index is valid\n        if temp is None or index < 0: \n            return\n  \n        # If index is 0, delete the first node\n        if index == 0: \n            self.head = temp.next\n            temp = None\n            return \n  \n        # Find the node before the node to be deleted\n        for i in range(index): \n            prev = temp \n            temp = temp.next\n  \n        # Unlink the node from linked list \n        prev.next = temp.next\n        temp = None\n  \n  \n# Driver Program \nllist = LinkedList()\n  \n# Create the list 1->2->3->4\nllist.head = Node(1) \nsecond = Node(2) \nthird = Node(3) \nfourth = Node(4) \n\nllist.head.next = second;  # Link first node with second \nsecond.next = third;  # Link second node with the third node \nthird.next = fourth;  # Link third node with the fourth node \n\n# Delete the node at positions 2\nllist.delete_node(2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = \"https://www.example.com\"\n\nresponse = requests.get(url)\nif response.status_code == 200:\n html = response.content\n print(html) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #-------------------------------------------------------------------------------\n# Name:         executive_dashboard.py\n# Purpose:\n#\n# Author:       Local Government\n#\n# Created:      05/06/2016 AM\n# Version:      Python 2.7\n#-------------------------------------------------------------------------------\n\nimport json, urllib, arcrest, re\nfrom arcrest.security import AGOLTokenSecurityHandler\nfrom arcresthelper import securityhandlerhelper\nfrom arcresthelper import common\nfrom arcrest.agol import FeatureLayer\nfrom datetime import datetime as dt\nfrom datetime import timedelta as td\nimport getpass\nimport indicator_constants as ic\nfrom os.path import dirname, join\n\n# Messages\nm1 = \"Can not not create token to access map. Please check username, password, and organization URL.\"\nm2 = \"Can not access web map JSON. Please check map ID.\"\nm3 = \"Map does not contain the specified data layer\"\nm4 = \"Map does not contain the specified stats layer\"\nm5 = \"Apply a filter to the stats layer so that exactly one record is available in the map.\"\nm6 = \"Layer does not contain a filter that uses the provided date field, {0}, and the BETWEEN operator.\"\nm7 = \"Stats layer capabilities must include 'Update'.\"\n\ndef get_layer_properties(title, layers):\n    \"\"\"Parse the JSON of a web map and retrieve the URL of a specific layer,\n    and any filters that have been applied to that layer.\"\"\"\n    for layer in layers:\n        if layer['title'] == title:\n            url = layer['url']\n            if 'layerDefinition' in layer:\n                query = layer['layerDefinition']['definitionExpression']\n            else:\n                query = \"1=1\"\n            return url, query\n    return \"\", \"\"\n\ndef connect_to_layer(url, sh, proxy_port=None, proxy_url=None, initialize=True):\n    \"\"\"Establish a connection to an ArcGIS Online feature layer\"\"\"\n    fl = FeatureLayer(\n            url=url,\n            securityHandler=sh,\n            proxy_port=proxy_port,\n            proxy_url=proxy_url,\n            initialize=initialize)\n    return fl\n\ndef count_features(layer, query=\"1=1\"):\n    \"\"\"Count feature in a feature layer, optionally respecting a where clause\"\"\"\n    cnt = layer.query(where=query, returnGeometry=False, returnCountOnly=True)\n    return cnt['count']\n\ndef featureset_to_dict(fs):\n    \"\"\"Returns JSON of a feature set in dictionary format\"\"\"\n    fs_str = fs.toJSON\n    fs_dict =json.loads(fs_str)\n    return fs_dict\n\ndef get_attributes(layer, query=\"1=1\", fields=\"*\"):\n    \"\"\"Get all attributes for a record in a table\"\"\"\n    vals = layer.query(where=query, out_fields=fields, returnGeometry=False)\n    valsdict = featureset_to_dict(vals)\n    return valsdict['features'][0]['attributes']\n\ndef update_values(layer, field_info, query=\"1=1\"):\n    \"\"\"Update feature values \"\"\"\n    out_fields = ['objectid']\n    for fld in field_info:\n        out_fields.append(fld['FieldName'])\n\n    resFeats = layer.query(where=query, out_fields=\",\".join(out_fields))\n    for feat in resFeats:\n\n        for fld in field_info:\n            feat.set_value(fld[\"FieldName\"],fld['ValueToSet'])\n\n    return layer\n\ndef trace():\n    \"\"\"\n        trace finds the line, the filename\n        and error message and returns it\n        to the user\n    \"\"\"\n    import traceback, inspect,sys\n    tb = sys.exc_info()[2]\n    tbinfo = traceback.format_tb(tb)[0]\n    filename = inspect.getfile(inspect.currentframe())\n    # script name + line number\n    line = tbinfo.split(\", \")[1]\n    # Get Python syntax error\n    #\n    synerror = traceback.format_exc().splitlines()[-1]\n    return line, filename, synerror\n\ndef create_security_handler(security_type='Portal', username=\"\", password=\"\",\n                            org_url=\"\", proxy_url=None, proxy_port=None,\n                            referer_url=None, token_url=None, certificatefile=None,\n                            keyfile=None, client_id=None, secret_id=None):\n    \"\"\"Creates a security handler helper using the specified properties.\"\"\"\n    securityinfo = {}\n    securityinfo['security_type'] = security_type#LDAP, NTLM, OAuth, Portal, PKI, ArcGIS\n    securityinfo['username'] = username\n    securityinfo['password'] = password\n    securityinfo['org_url'] = org_url\n    securityinfo['proxy_url'] = proxy_url\n    securityinfo['proxy_port'] = proxy_port\n    securityinfo['referer_url'] = referer_url\n    securityinfo['token_url'] = token_url\n    securityinfo['certificatefile'] = certificatefile\n    securityinfo['keyfile'] = keyfile\n    securityinfo['client_id'] = client_id\n    securityinfo['secret_id'] = secret_id\n\n    return securityhandlerhelper.securityhandlerhelper(securityinfo=securityinfo)\n\ndef get_epoch_time(date):\n    epoch = dt.utcfromtimestamp(0)\n    return (date - epoch).total_seconds() * 1000\n\ndef main():\n    with open(join(dirname(__file__), 'DashboardLog.log'), 'a') as log_file:\n\n        # Get current time for report datetime range\n        start_time = dt.utcnow()\n        today_agol = get_epoch_time(start_time)\n        temp_fc = arcpy.env.scratchGDB + \"\\\\temp_fc\"\n        proj_out = \"{}_proj\".format(temp_fc)\n        min_date = None\n\n        try:\n\n            # Get security handler for organization content\n            org_shh = create_security_handler(security_type='Portal',\n                                              username=ic.org_username,\n                                              password=ic.org_password,\n                                              org_url=ic.org_url)\n\n            if org_shh.valid == False:\n                raise Exception(org_shh.message)\n\n            org_sh = org_shh.securityhandler\n\n            # Access map JSON\n            admin = arcrest.manageorg.Administration(securityHandler=org_sh)\n            item = admin.content.getItem(ic.map_id)\n            mapjson = item.itemData()\n\n            if 'error' in mapjson:\n                raise Exception(m2)\n\n            # Get security handler for ags services\n            ags_sh = None\n            if ic.ags_username is not None and ic.ags_username != \"\":\n                ags_sh = arcrest.AGSTokenSecurityHandler(username=ic.ags_username,\n                                     password=ic.ags_password,\n                                     token_url=ic.ags_token_url,\n                                     proxy_url=None,\n                                     proxy_port=None)\n\n            print \"Getting stats layer info...\"\n\n            # Get attributes of a single row in stats layer\n            statsurl, statsquery = get_layer_properties(ic.stats_layer_name,\n                                                      mapjson['operationalLayers'])\n            if not statsurl:\n                raise Exception(m4)\n\n            if ic.stats_service_type in ['AGOL', 'Portal']:\n                statslayer = connect_to_layer(statsurl, org_sh)\n            else:\n                statslayer = connect_to_layer(statsurl, ags_sh)\n\n            if not count_features(statslayer, query=statsquery) == 1:\n                raise Exception(m5)\n\n            stats = get_attributes(statslayer, query=statsquery)\n\n            # If requested, update layer query using today as max date\n            if ic.auto_update_date_query:\n\n                print \"Updating date filter on layer...\"\n\n                if ic.report_duration:\n                    # get diff value to min date\n                    if ic.report_time_unit == 'minutes':\n                        delta = td(minute=ic.report_duration)\n                    elif ic.report_time_unit == 'hours':\n                        delta = td(hours=ic.report_duration)\n                    elif ic.report_time_unit == 'days':\n                        delta = td(days=ic.report_duration)\n                    elif ic.report_time_unit == 'weeks':\n                        delta = td(weeks=ic.report_duration)\n\n                    min_date = start_time - delta\n                else:\n                    # Use end date of previous report\n                    min_date = stats[ic.end_date]\n\n                # update filter on layer\n                for layer in mapjson['operationalLayers']:\n                    if layer['title'] == ic.data_layer_name:\n                        try:\n                            original_query = layer['layerDefinition']['definitionExpression']\n\n                            #Find if the expression has a clause using the date field and Between operator\n                            match = re.search(\".*?{0} BETWEEN.*?'(.*?)'.*?AND.*?'(.*?)'.*\".format(ic.date_field), original_query)\n                            if match is None:\n                                raise ValueError()\n\n                            #Construct a new query replacing the min and max date values with the new dates\n                            new_query = match.group()[0:match.start(1)] + min_date.strftime(\"%Y-%m-%d %H:%M:%S\") + match.group()[match.end(1):match.start(2)] + start_time.strftime(\"%Y-%m-%d %H:%M:%S\") + match.group()[match.end(2):]\n\n                            # Update JSON with new query\n                            layer['layerDefinition']['definitionExpression'] = new_query\n\n                        except ValueError, KeyError:\n                            d = dt.strftime(dt.now(), \"%Y-%m-%d %H:%M:%S\")\n                            log_file.write(\"{}:\\n\".format(d))\n                            log_file.write(\"{}\\n\".format(m6.format(ic.date_field)))\n                            print(m6.format(ic.date_field))\n                            continue\n\n                # Commit update to AGOL item\n                useritem = item.userItem\n                params = arcrest.manageorg.ItemParameter()\n                useritem.updateItem(itemParameters = params,\n                                    text=json.dumps(mapjson))\n\n            # Retrieve the url and queries associated with the data and stats layers\n            print \"Getting layer info...\"\n\n            dataurl, dataquery = get_layer_properties(ic.data_layer_name, mapjson['operationalLayers'])\n\n            if not dataurl:\n                raise Exception(m3)\n\n            # Connect to the services\n            print \"Connecting to data layer...\"\n\n            if ic.data_service_type in ['AGOL', 'Portal']:\n                datalayer = connect_to_layer(dataurl, org_sh)\n            else:\n                datalayer = connect_to_layer(dataurl, ags_sh)\n\n            # If necessary, load new points to hosted service\n            if ic.data_feature_class:\n\n                # only attemp append if there are new features\n                temp_fc = arcpy.CopyFeatures_management(ic.data_feature_class, temp_fc)\n                sr_output = datalayer.extent['spatialReference']['wkid']\n                temp_fc_proj = arcpy.Project_management(temp_fc, proj_out, sr_output)\n\n                # Load data from layer to service\n                datalayer.deleteFeatures(where=\"1=1\")\n                datalayer.addFeatures(temp_fc_proj)\n                arcpy.Delete_management(temp_fc)\n                arcpy.Delete_management(temp_fc_proj)\n\n            # Count the data features that meet the map query\n            print \"Counting features\"\n            feature_cnt = count_features(datalayer, query=dataquery)\n\n            print \"Getting new stats...\"\n\n            # Current editor\n            editor = getpass.getuser()\n\n            attributes = get_attributes(statslayer, statsquery)\n            attributes[ic.datecurr] = today_agol\n            attributes[ic.date1] = stats[ic.datecurr]\n            attributes[ic.date2] = stats[ic.date1]\n            attributes[ic.date3] = stats[ic.date2]\n            attributes[ic.date4] = stats[ic.date3]\n            attributes[ic.observcurr] = feature_cnt\n            attributes[ic.observ1] = stats[ic.observcurr]\n            attributes[ic.observ2] = stats[ic.observ1]\n            attributes[ic.observ3] = stats[ic.observ2]\n            attributes[ic.observ4] = stats[ic.observ3]\n            attributes[ic.last_update] = today_agol\n            attributes[ic.last_editor] = editor\n            attributes[ic.end_date] = today_agol\n            if min_date is None:\n                attributes[ic.start_date] = stats[ic.end_date]\n            else:\n                attributes[ic.start_date] = get_epoch_time(min_date)        \n\n            edits = [{\"attributes\" : attributes}]\n            statslayer.applyEdits(updateFeatures=edits)\n\n            print \"Done.\"\n\n        except (common.ArcRestHelperError),e:\n            print \"error in function: %s\" % e[0]['function']\n            print \"error on line: %s\" % e[0]['line']\n            print \"error in file name: %s\" % e[0]['filename']\n            print \"with error message: %s\" % e[0]['synerror']\n            if 'arcpyError' in e[0]:\n                print \"with arcpy message: %s\" % e[0]['arcpyError']\n\n        except Exception as ex:\n            print(\"{}\\n\".format(ex))\n            d = dt.strftime(dt.now(), \"%Y-%m-%d %H:%M:%S\")\n            log_file.write(\"{}:\\n\".format(d))\n            log_file.write(\"{}\\n\".format(ex))\n        finally:\n            if arcpy.Exists(temp_fc):\n                arcpy.Delete_management(temp_fc)\n            if arcpy.Exists(proj_out):\n                arcpy.Delete_management(proj_out)\n\n# End main function\n\nif __name__ == '__main__':\n    main()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def select_points_of_distribution(customers, warehouse_location, max_distance):\n  # Sort customers by distance from the warehouse\n  sorted_customers = sorted(customers, key=lambda c: distance(c, warehouse_location))\n\n  # Keep track of the points of distribution we select\n  points_of_distribution = []\n\n  # Initialize variables\n  current_customer = 0\n  points_covered = 0\n\n  # Iterate until all points are covered\n  while points_covered < len(customers):\n    # Select the customer with the largest demand\n    max_demand_customer = sorted_customers[current_customer]\n    points_of_distribution.append(max_demand_customer)\n\n    # Iterate through customers and mark those within the max_distance\n    for customer in sorted_customers:\n      if distance(max_demand_customer, customer) <= max_distance:\n        points_covered += 1\n\n    # Move on to the next customer\n    current_customer += 1\n\n  # Return the points of distribution\n  return points_of_distribution\n\ndef distance(point_1, point_2):\n  # Calculate the Euclidean distance between two points\n  return math.sqrt((point_1[0] - point_2[0])**2 + (point_1[1] - point_2[1])**2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to print the minimum number in a list \ndef min_in_list(list): \n    # Inialise minimum to first element in the list \n    min = list[0] \n  \n    # Traverse through the list from 1st index \n    # and update minimum if found \n    for i in range(len(list)): \n        if list[i] < min: \n            min = list[i] \n  \n    return min\n  \n# Driver Code \nlist = [5, 12, 3, 1, 8] \nprint (\"Minimum in the list is \", min_in_list(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Create the list of possible values\ncards = [\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\"] * 4\n\n# Shuffle the cards\nrandom.shuffle(cards)\n\n# Create a variable to store the user's score\nuser_score = 0\n\n# Initialize the game\n# The user is shown a card, and asked if they remember what it is\nwhile cards:\n    current_card = cards.pop()\n    print(f\"What is the card? {current_card}\")\n    answer = input()\n\n    # Check the user's answer\n    if answer == current_card:\n        user_score += 1\n        print(\"Correct!\")\n    else:\n        print(\"Incorrect.\")\n        break\n\nprint(f\"Game over! Your score is {user_score}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = \"hello world\"\nstring_upper_characters = string.upper()\nprint(string_upper_characters) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Program to print the squares of all \n# the numbers from 1 to the given number \n  \n# Positive number taken as an input \nnum = 5\n  \n# Iterate from 1 to num \nfor i in range(1, num+1): \n  \n    # Calculate the square \n    value = i**2\n      \n    # Print the value \n    print(value)\n\n# Output:\n# 1\n# 4\n# 9\n# 16\n# 25 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combine_lists(list1, list2):\n result = list1 + list2\n return list(set(result))\n\nlist1 = [1, 2, 3]\nlist2 = [2, 3, 4]\n\nprint(combine_lists(list1, list2)) # [1, 2, 3, 4] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: r'\\d{10}' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_iris(flower):\n    if flower[0] < 5 and flower[2] < 4:\n        return 'Iris setosa'\n    elif flower[2] >= 4.9 and flower[3] <= 1.8:\n        return 'Iris virginica'\n    else:\n        return 'Iris versicolor' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: ['programming', 'algorithm', 'python', 'coding'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_dictionary(dictionary):\n    return sorted(dictionary.items(), key=lambda x: x[1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(num):\n  rev = 0\n  tmp = num\n  \n  while tmp > 0:\n    rev = rev * 10\n    rev = rev + (tmp % 10)\n    tmp = tmp // 10\n\n  return num == rev\n  \nnum = 12321\nif (is_palindrome(num)):\n  print(\"Number is a palindrome\")\nelse:\n  print(\"Number is not a palindrome\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a python script to search a given source code \nfor the given keywords and display the search results.\n\"\"\"\nimport re\n\ndef search_source_code(source_code, keywords):\n    matches = []\n    for keyword in keywords:\n        matches += re.findall(keyword, source_code)\n    return matches\n\nif __name__ == '__main__':\n    source_code = '''\n    #def hou(a, b):\n        # some code\n    #def calc(a, b):\n        # some code\n    '''\n    keywords = ['hou', 'calc']\n    print(search_source_code(source_code, keywords)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum(x, y):\n return x + y\n\n# testing\nprint(sum(2, 3)) # Output: 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = []\nfor i in range(11):\n    list.append(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: even_list = []\nodd_list = []\n\nfor num in input_list:\n if num % 2 == 0:\n even_list.append(num)\n else:\n odd_list.append(num)\n\nprint('Even list:', even_list)\nprint('Odd list:', odd_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def build_inverted_index(filename):\n    inverted_index = {}\n\n    with open(filename) as fin:\n        for line in fin:\n            for word in line.split():\n                if word in inverted_index:\n                    inverted_index[word].append(fin.tell())\n                else:\n                    inverted_index[word] = [fin.tell()]\n\n    return inverted_index but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # sum_list function takes in a list and \n# returns the sum of the elements of the list\ndef sum_list(input_list):\n  # Set sum to 0\n  sum = 0\n  \n  # Iterate through the list and \n  # add each element to the sum\n  for element in input_list:\n    sum = sum + element\n  \n  # Return the sum\n  return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\nfrom collections import Counter\n\ndef get_top_words(txt):\n    words = re.findall(r'\\w+', txt.lower())\n    return Counter(words).most_common(10)\n\nprint(get_top_words('My name is John and I work as a software engineer.'))\n# Output: [('i', 2), ('a', 1), ('as', 1), ('engineer', 1), ('john', 1), ('name', 1), ('software', 1), ('work', 1)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_number_divisible_by_three_five(numbers): \n      result = []\n      for number in numbers:\n          if (number % 3 == 0 or number % 5 == 0):\n              result.append(number)    \n      return result\n\n# Testing\nprint(find_number_divisible_by_three_five([3, 4, 6, 7, 8, 9, 10, 12, 15]))\n\n# Output\n[3, 6, 9, 10, 12, 15] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_palindrome(str_list):\n  longest_palindrome = \"\"\n  for s in str_list:\n    if s == s[::-1] and len(s) > len(longest_palindrome):\n      longest_palindrome = s\n  print(longest_palindrome)\n  \nlongest_palindrome([\"racecar\", \"python\", \"mom\", \"abba\"]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tweepy\n\n# Set up API access for your application\nconsumer_key = \"<your_consumer_key>\"\nconsumer_secret = \"<your_consumer_secret>\"\naccess_token = \"<your_access_token>\"\naccess_token_secret = \"<your_access_token_secret>\"\n\n# Create the API access object\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\napi = tweepy.API(auth)\n\n# Get the user's timeline\nuser_timeline = api.user_timeline('username', count=5)\n\n# Print each tweet\nfor tweet in user_timeline:\n    print(tweet.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def same_charset(str1, str2):\n\t\n\tstr1 = sorted(str1) \n\tstr2 = sorted(str2)\n \n\tif(str1 == str2):\n\t\treturn True\n\telse:\n\t\treturn False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport xml.etree.ElementTree as ET\n\nurl = 'https://example.com/data.xml'\nr = requests.get(url)\nxml_data = r.text\n\nroot = ET.fromstring(xml_data)\n\nfor child in root:\n print(child.tag, child.attrib) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def array_copy(arr):\n    return arr[:]\n\ndef array_append(arr, value):\n    arr.append(value)\n\narr = [2, 4, 6]\narr_copy = array_copy(arr)\narray_append(arr_copy, 8)\n\nprint(arr_copy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: while True:\n user_input = input(\"Enter your input: \")\n \n # handle user input\n if user_input == 'exit':\n  break but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_combinations(numbers, target):\n    solutions = []\n    #recursive solution\n    def find_combos(solution, index):\n        if sum(solution) == target:\n            solutions.append(solution)\n        elif sum(solution) < target:\n            for i in range(index, len(numbers)):\n               find_combos(solution + [numbers[i]], i)\n    find_combos([], 0)\n    return solutions but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: if isinstance(variable, str):\n    # variable is a string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n  \ndef genPassword(length): \n    # Create strings of possible characters \n    digits = string.digits\n    upper = string.ascii_uppercase\n    lower = string.ascii_lowercase\n    special = string.punctuation\n    all = upper + lower + digits + special\n  \n    # Create empty strings \n    password = ''\n    upper_password = ''\n    lower_password = ''\n    digit_password = ''\n    special_password = ''\n  \n    # Iterate a loop over given length of string and all character array to generate random password with given rules\n    for x in range(length):\n        upper_password = upper_password + random.choice(upper)\n        lower_password = lower_password + random.choice(lower)\n        digit_password = digit_password + random.choice(digits)\n        special_password = special_password + random.choice(special)\n    \n    # Concate all character string to generate random password\n    password = upper_password + lower_password + digit_password + special_password\n    # Use 'sample' method to scatter characters in password string\n    password = ''.join(random.sample(password, len(password))) \n  \n    return password \n  \nlength = 12\npassword = genPassword(length)\nprint(password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: letter = 's'\nstring = \"Mississippi\"\ncount = 0\nfor char in string:\n   if char == letter:\n       count += 1\nprint(count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def dot_product(x, y):\n    result = 0\n    for i in range(len(x)):\n        result += x[i] * y[i]\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: employees = [\n    ['John', 45000],\n    ['Jane', 50000],\n    ['Michael', 60000],\n    ['Josh', 40000]\n]\n\nhighest_salary = 0\nhighest_name = \"\"\n\nfor name, salary in employees:\n    if salary > highest_salary:\n        highest_salary = salary\n        highest_name = name\n\nprint(\"The highest-paid employee is \" + highest_name + \" with a salary of \" + str(highest_salary)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import libraries\nimport requests\nfrom bs4 import BeautifulSoup\n \n# define the search url\nurl = 'https://www.quora.com/search'\n \n# create a payload for the query parameters\npayload = {'q': 'machine learning'}\n \n# get the content from the specified url\nr = requests.get(url, params=payload)\n \n# parse the content\nsoup = BeautifulSoup(r.content, 'html.parser')\n \n# collect data from all the elements with class 'question_link'\nresults = soup.find_all('a', class_='question_link')\n \n# print the results\nfor result in results:\n    print(result.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def monkey_sort(arr): \n \n    # Check array length \n    arr_len = len(arr) \n  \n    # Create a copy of the array \n    result = arr.copy() \n  \n    # Randomly shuffle the elements of the array  \n    # until it is sorted \n    while(result != sorted(result)): \n        for i in range(arr_len): \n            r = random.randint(0, arr_len - 1) \n            result[i], result[r] = result[r], result[i] \n  \n    # Return the sorted array \n    return result \n\n# Driver code \narr = [7, 5, 4, 9, 6, 2, 1, 8] \nprint(monkey_sort(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef findRoots(a, b, c):\n    discriminant = b ** 2 - 4 * a * c\n  \n    if discriminant < 0:\n        print('No real roots.')\n  \n    elif discriminant == 0:\n        root = -b / (2 * a)\n        print('One root: ', root)\n  \n    else:\n        root1 = (-b + math.sqrt(discriminant)) / (2 * a)\n        root2 = (-b - math.sqrt(discriminant)) / (2 * a)\n        print('Two roots: ', root1, root2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random as rd\n\ndef random_selection(n):\n    num_list = [i for i in range(1, n+1)]\n    index_list = rd.sample(range(1, n+1), 10)\n    \n    selected_list = [num_list[i] for i in index_list]\n    return selected_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def validateCreditCardNumber(number):\n    \n    # Reverse of the card number\n    rev_number = number[::-1]\n    \n    # Declare a sum of all digits\n    sum_of_digits = 0\n    \n    for i in range(len(rev_number)):\n        digit = int(rev_number[i])\n        \n        # For alternate digits multiply by 2\n        if i % 2 != 0:\n            digit *= 2\n        \n        # Add the higher digit of each result to the sum\n        if digit > 9:\n            sum_of_digits += digit // 10 + digit % 10\n        else:\n            sum_of_digits += digit\n            \n    # If the sum is divisible by 10 its a valid card number\n    return sum_of_digits % 10 == 0\n\nprint(validateCreditCardNumber('45397431 85747991'))\n// Output: True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: str = \"hello world\"\n\nfrom collections import Counter\n\ndef most_common_letter(str):\n    letters_count = Counter(str).most_common()\n    return letters_count[0][0]\n\nprint(most_common_letter(str)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_val(arr):\n    max_val = 0\n    for num in arr:\n        if num > max_val:\n            max_val = num\n    return max_val but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num = int(input('Enter an integer: '))\nfactorial = 1\n\nif num < 0:\n   print(\"Sorry, factorial does not exist for negative numbers\")\nelif num == 0:\n   print(\"The factorial of 0 is 1\")\nelse:\n   for i in range(1,num + 1):\n       factorial = factorial*i\n   print(\"The factorial of\",num,\"is\",factorial) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num-1)\n\nnum = int(input(\"Enter an integer: \"))\nprint(\"Factorial of \", num, \"is: \", factorial(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_max_min(arr):\n    max_num = None\n    min_num = None\n\n    for n in arr:\n        if max_num is None or n > max_num:\n            max_num = n\n\n        if min_num is None or n < min_num:\n            min_num = n\n\n    return max_num, min_num\n\nmax_num, min_num = get_max_min([-5, 7, 2, 11, -9])\nprint(f\"max = {max_num}, min = {min_num}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_string_lengths(s1, s2):\n if len(s1) == len(s2):\n return 0\n elif len(s1) < len(s2):\n return -1\n else:\n return 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # List of colors\ncolors = ['Red', 'Green', 'White', 'Black']\n\n# First color\nprint(colors[0])\n\n# Last color\nprint(colors[-1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def frequency(lst):\n result = {}\n for el in lst:\n if el in result:\n result[el] += 1\n else:\n result[el] = 1\n return result\n\nprint(frequency([\"hello\", \"world\", \"hello\", \"goodbye\", \"world\", \"hello\"]))\n# Output: {'hello': 3, 'world': 2, 'goodbye': 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_array(array):\n    reversed_array = array[::-1]\n    return reversed_array\n\nreversed_array = reverse_array([1,2,3,4,5])\nprint(reversed_array) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def rev_string(input_str):\n    if len(input_str) == 0:\n        return input_str\n    else:\n        return rev_string(input_str[1:]) + input_str[0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_strings(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nGenerate a Python API wrapper for an existing API\n\"\"\"\nimport requests\n\nclass APIWrapper():\n    # API URL\n    API_URL = 'https://api.example.com'\n\n    # API Endpoints\n    API_ENDPOINTS = {\n        'get': '/v1/get',\n        'create': '/v1/create'\n    }\n\n    def __init__(self):\n        pass\n\n    def get(self, endpoint, data):\n        url = self.API_URL + self.API_ENDPOINTS.get(endpoint)\n        response = requests.get(url, params=data)\n        return response.json()\n\n    def create(self, endpoint, data):\n        url = self.API_URL + self.API_ENDPOINTS.get(endpoint)\n        response = requests.post(url, data=data)\n        return response.json() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quickSort(nums):\n    if len(nums) <= 1:\n        return nums\n    pivot = nums[len(nums) // 2]\n    left = [x for x in nums if x < pivot]\n    middle = [x for x in nums if x == pivot]\n    right = [x for x in nums if x > pivot]\n    return quickSort(right) + middle + quickSort(left)\n\nif __name__ == \"__main__\":\n    numbers = [7, 5, 2, 4, 2, 9, 3, 8]\n    print(quickSort(numbers)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(str):\n    # Get the length of the string\n    n = len(str)\n\n    for i in range(n//2):\n        # Compare characters from both ends\n        if str[i] != str[n-i-1]:\n            return False\n    return True\n\nstr = \"abccba\"\nprint(is_palindrome(str)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def toPigLatin(word):\n    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    first_letter = word[0]\n    if first_letter in vowels:\n        modified_word = word + \"way\"\n    else:\n        modified_word = word[1:] + first_letter + \"ay\"\n    return modified_word\n\nresult = toPigLatin(\"Hello\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_prime_numbers(limit):\n  sum = 0\n  for num in range(2, limit + 1):\n    if all(num % i != 0 for i in range(2, num)):\n      sum += num\n  return sum\n\nprint(sum_prime_numbers(100)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_mean(numbers):\n    # Get the length of the list\n    numbers_len = len(numbers)\n    # Sum up all the elements in the list\n    total = 0\n    for num in numbers:\n        total += num\n    # Divide the total with the length of the list\n    mean = total / numbers_len\n    # Return the mean\n    return mean\n\nmean = calculate_mean([1,2,3,4])\nprint(mean) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The process of extracting data from a web page can be automated by using web scraping techniques. Web scraping is a process of extracting data from websites using programming languages such as Python or JavaScript. It involves making web requests to the respective web pages using tools like BeautifulSoup and then parsing the data from the response using libraries like lxml or html5lib. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Make the request\nurl = f'https://en.wikipedia.org/wiki/List_of_languages_by_number_of_native_speakers'\nr = requests.get(url)\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# Get the official language for each country\nlanguages = []\nfor table in soup.find_all('table'):\n    headings = table.find('th').text\n    if headings == 'Official language(s)':\n        rows = table.find_all('td')\n        for row in rows:\n            lang = row.find('a')\n            if lang.text.lower() == 'english':\n                languages.append(lang.text)\n\n# Print out the list of languages\nprint(languages) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pymongo\nimport requests\nfrom bs4 import BeautifulSoup\n\n\n# mongodb connection\nclient = pymongo.MongoClient(\n'mongodb+srv://username:password@mycluster.mongodb.net/pubmed')\ndb = client.pubmed\n\n# configure request headers\nheaders = {\n'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36'\n}\n\n# get the html from the page\nres = requests.get('https://pubmed.ncbi.nlm.nih.gov/?term=covid-19', headers=headers)\nsoup = BeautifulSoup(res.text, 'html.parser')\n\n# parse the html and extract the articles \narticles = soup.find_all('div', {'class': 'docsum-content'})\nfor article in articles:\n    # article title\n    title = article.find('p', {'class': 'title'}).text\n    # link to article\n    link = article.find('p', {'class':'links'}).find('a')['href']\n\n    # insert article into DB\n    db.articles.insert_one({'title': title, 'link': link})\n\nclient.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = [\"carpet\", \"chair\", \"table\", \"floor\"]\n\ncategories = {}\nfor word in words:\n    if word in [\"carpet\"]:\n        categories[\"furnishing\"] = categories.get(\"furnishing\", []) + [word]\n    elif word in [\"chair\", \"table\"]:\n        categories[\"furniture\"] = categories.get(\"furniture\", []) + [word]\n    elif word in [\"floor\"]:\n        categories[\"flooring\"] = categories.get(\"flooring\", []) + [word]\n    else:\n        categories[\"other\"] = categories.get(\"other\", []) + [word]\n\nprint(categories) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Job:\n    def __init__(self, title, company, location, job_type):\n        self.title = title\n        self.company = company\n        self.location = location\n        self.job_type = job_type but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def build_model(input_values):\n    # Build the model code\n    return model but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def to_uppercase(items):\n    return [item.upper() for item in items]\n\nresult = to_uppercase(['Hello', 'World']) \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_grade(score):\n    if score >= 90:\n        return \"A\"\n    elif score >= 80:\n        return \"B\"\n    elif score >= 70:\n        return \"C\"\n    elif score >= 60:\n        return \"D\"\n    else:\n        return \"F\"\n\nresult = calculate_grade(90)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_min(a, b, c):\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n\nmin = find_min(2, -6, 4)\nprint(min) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def three_integers(x, y, z):\n  return x + y + z\n\nx = 5\ny = 8\nz = 10\n\nprint(three_integers(x, y, z)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\nfrom __future__ import (absolute_import, division, print_function)\n# Copyright 2019 Fortinet, Inc.\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n__metaclass__ = type\n\nANSIBLE_METADATA = {'status': ['preview'],\n                    'supported_by': 'community',\n                    'metadata_version': '1.1'}\n\nDOCUMENTATION = '''\n---\nmodule: fortios_wireless_controller_hotspot20_h2qp_osu_provider\nshort_description: Configure online sign up (OSU) provider list in Fortinet's FortiOS and FortiGate.\ndescription:\n    - This module is able to configure a FortiGate or FortiOS (FOS) device by allowing the\n      user to set and modify wireless_controller_hotspot20 feature and h2qp_osu_provider category.\n      Examples include all parameters and values need to be adjusted to datasources before usage.\n      Tested with FOS v6.0.4\nversion_added: \"2.9\"\nauthor:\n    - Miguel Angel Munoz (@mamunozgonzalez)\n    - Nicolas Thomas (@thomnico)\nnotes:\n    - Requires fortiosapi library developed by Fortinet\n    - Run as a local_action in your playbook\nrequirements:\n    - fortiosapi>=0.9.8\noptions:\n    host:\n        description:\n            - FortiOS or FortiGate IP address.\n        type: str\n        required: false\n    username:\n        description:\n            - FortiOS or FortiGate username.\n        type: str\n        required: false\n    password:\n        description:\n            - FortiOS or FortiGate password.\n        type: str\n        default: \"\"\n    vdom:\n        description:\n            - Virtual domain, among those defined previously. A vdom is a\n              virtual instance of the FortiGate that can be configured and\n              used as a different unit.\n        type: str\n        default: root\n    https:\n        description:\n            - Indicates if the requests towards FortiGate must use HTTPS protocol.\n        type: bool\n        default: true\n    ssl_verify:\n        description:\n            - Ensures FortiGate certificate must be verified by a proper CA.\n        type: bool\n        default: true\n    state:\n        description:\n            - Indicates whether to create or remove the object.\n        type: str\n        required: true\n        choices:\n            - present\n            - absent\n    wireless_controller_hotspot20_h2qp_osu_provider:\n        description:\n            - Configure online sign up (OSU) provider list.\n        default: null\n        type: dict\n        suboptions:\n            friendly_name:\n                description:\n                    - OSU provider friendly name.\n                type: list\n                suboptions:\n                    friendly_name:\n                        description:\n                            - OSU provider friendly name.\n                        type: str\n                    index:\n                        description:\n                            - OSU provider friendly name index.\n                        required: true\n                        type: int\n                    lang:\n                        description:\n                            - Language code.\n                        type: str\n            icon:\n                description:\n                    - OSU provider icon. Source wireless-controller.hotspot20.icon.name.\n                type: str\n            name:\n                description:\n                    - OSU provider ID.\n                required: true\n                type: str\n            osu_method:\n                description:\n                    - OSU method list.\n                type: str\n                choices:\n                    - oma-dm\n                    - soap-xml-spp\n                    - reserved\n            osu_nai:\n                description:\n                    - OSU NAI.\n                type: str\n            server_uri:\n                description:\n                    - Server URI.\n                type: str\n            service_description:\n                description:\n                    - OSU service name.\n                type: list\n                suboptions:\n                    lang:\n                        description:\n                            - Language code.\n                        type: str\n                    service_description:\n                        description:\n                            - Service description.\n                        type: str\n                    service_id:\n                        description:\n                            - OSU service ID.\n                        type: int\n'''\n\nEXAMPLES = '''\n- hosts: localhost\n  vars:\n   host: \"192.168.122.40\"\n   username: \"admin\"\n   password: \"\"\n   vdom: \"root\"\n   ssl_verify: \"False\"\n  tasks:\n  - name: Configure online sign up (OSU) provider list.\n    fortios_wireless_controller_hotspot20_h2qp_osu_provider:\n      host:  \"{{ host }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      vdom:  \"{{ vdom }}\"\n      https: \"False\"\n      state: \"present\"\n      wireless_controller_hotspot20_h2qp_osu_provider:\n        friendly_name:\n         -\n            friendly_name: \"<your_own_value>\"\n            index: \"5\"\n            lang: \"<your_own_value>\"\n        icon: \"<your_own_value> (source wireless-controller.hotspot20.icon.name)\"\n        name: \"default_name_8\"\n        osu_method: \"oma-dm\"\n        osu_nai: \"<your_own_value>\"\n        server_uri: \"<your_own_value>\"\n        service_description:\n         -\n            lang: \"<your_own_value>\"\n            service_description: \"<your_own_value>\"\n            service_id: \"15\"\n'''\n\nRETURN = '''\nbuild:\n  description: Build number of the fortigate image\n  returned: always\n  type: str\n  sample: '1547'\nhttp_method:\n  description: Last method used to provision the content into FortiGate\n  returned: always\n  type: str\n  sample: 'PUT'\nhttp_status:\n  description: Last result given by FortiGate on last operation applied\n  returned: always\n  type: str\n  sample: \"200\"\nmkey:\n  description: Master key (id) used in the last call to FortiGate\n  returned: success\n  type: str\n  sample: \"id\"\nname:\n  description: Name of the table used to fulfill the request\n  returned: always\n  type: str\n  sample: \"urlfilter\"\npath:\n  description: Path of the table used to fulfill the request\n  returned: always\n  type: str\n  sample: \"webfilter\"\nrevision:\n  description: Internal revision number\n  returned: always\n  type: str\n  sample: \"17.0.2.10658\"\nserial:\n  description: Serial number of the unit\n  returned: always\n  type: str\n  sample: \"FGVMEVYYQT3AB5352\"\nstatus:\n  description: Indication of the operation's result\n  returned: always\n  type: str\n  sample: \"success\"\nvdom:\n  description: Virtual domain used\n  returned: always\n  type: str\n  sample: \"root\"\nversion:\n  description: Version of the FortiGate\n  returned: always\n  type: str\n  sample: \"v5.6.3\"\n\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.connection import Connection\nfrom ansible.module_utils.network.fortios.fortios import FortiOSHandler\nfrom ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG\n\n\ndef login(data, fos):\n    host = data['host']\n    username = data['username']\n    password = data['password']\n    ssl_verify = data['ssl_verify']\n\n    fos.debug('on')\n    if 'https' in data and not data['https']:\n        fos.https('off')\n    else:\n        fos.https('on')\n\n    fos.login(host, username, password, verify=ssl_verify)\n\n\ndef filter_wireless_controller_hotspot20_h2qp_osu_provider_data(json):\n    option_list = ['friendly_name', 'icon', 'name',\n                   'osu_method', 'osu_nai', 'server_uri',\n                   'service_description']\n    dictionary = {}\n\n    for attribute in option_list:\n        if attribute in json and json[attribute] is not None:\n            dictionary[attribute] = json[attribute]\n\n    return dictionary\n\n\ndef underscore_to_hyphen(data):\n    if isinstance(data, list):\n        for elem in data:\n            elem = underscore_to_hyphen(elem)\n    elif isinstance(data, dict):\n        new_data = {}\n        for k, v in data.items():\n            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)\n        data = new_data\n\n    return data\n\n\ndef wireless_controller_hotspot20_h2qp_osu_provider(data, fos):\n    vdom = data['vdom']\n    state = data['state']\n    wireless_controller_hotspot20_h2qp_osu_provider_data = data['wireless_controller_hotspot20_h2qp_osu_provider']\n    filtered_data = underscore_to_hyphen(filter_wireless_controller_hotspot20_h2qp_osu_provider_data(wireless_controller_hotspot20_h2qp_osu_provider_data))\n\n    if state == \"present\":\n        return fos.set('wireless-controller.hotspot20',\n                       'h2qp-osu-provider',\n                       data=filtered_data,\n                       vdom=vdom)\n\n    elif state == \"absent\":\n        return fos.delete('wireless-controller.hotspot20',\n                          'h2qp-osu-provider',\n                          mkey=filtered_data['name'],\n                          vdom=vdom)\n\n\ndef is_successful_status(status):\n    return status['status'] == \"success\" or \\\n        status['http_method'] == \"DELETE\" and status['http_status'] == 404\n\n\ndef fortios_wireless_controller_hotspot20(data, fos):\n\n    if data['wireless_controller_hotspot20_h2qp_osu_provider']:\n        resp = wireless_controller_hotspot20_h2qp_osu_provider(data, fos)\n\n    return not is_successful_status(resp), \\\n        resp['status'] == \"success\", \\\n        resp\n\n\ndef main():\n    fields = {\n        \"host\": {\"required\": False, \"type\": \"str\"},\n        \"username\": {\"required\": False, \"type\": \"str\"},\n        \"password\": {\"required\": False, \"type\": \"str\", \"default\": \"\", \"no_log\": True},\n        \"vdom\": {\"required\": False, \"type\": \"str\", \"default\": \"root\"},\n        \"https\": {\"required\": False, \"type\": \"bool\", \"default\": True},\n        \"ssl_verify\": {\"required\": False, \"type\": \"bool\", \"default\": True},\n        \"state\": {\"required\": True, \"type\": \"str\",\n                  \"choices\": [\"present\", \"absent\"]},\n        \"wireless_controller_hotspot20_h2qp_osu_provider\": {\n            \"required\": False, \"type\": \"dict\", \"default\": None,\n            \"options\": {\n                \"friendly_name\": {\"required\": False, \"type\": \"list\",\n                                  \"options\": {\n                                      \"friendly_name\": {\"required\": False, \"type\": \"str\"},\n                                      \"index\": {\"required\": True, \"type\": \"int\"},\n                                      \"lang\": {\"required\": False, \"type\": \"str\"}\n                                  }},\n                \"icon\": {\"required\": False, \"type\": \"str\"},\n                \"name\": {\"required\": True, \"type\": \"str\"},\n                \"osu_method\": {\"required\": False, \"type\": \"str\",\n                               \"choices\": [\"oma-dm\", \"soap-xml-spp\", \"reserved\"]},\n                \"osu_nai\": {\"required\": False, \"type\": \"str\"},\n                \"server_uri\": {\"required\": False, \"type\": \"str\"},\n                \"service_description\": {\"required\": False, \"type\": \"list\",\n                                        \"options\": {\n                                            \"lang\": {\"required\": False, \"type\": \"str\"},\n                                            \"service_description\": {\"required\": False, \"type\": \"str\"},\n                                            \"service_id\": {\"required\": False, \"type\": \"int\"}\n                                        }}\n\n            }\n        }\n    }\n\n    module = AnsibleModule(argument_spec=fields,\n                           supports_check_mode=False)\n\n    # legacy_mode refers to using fortiosapi instead of HTTPAPI\n    legacy_mode = 'host' in module.params and module.params['host'] is not None and \\\n                  'username' in module.params and module.params['username'] is not None and \\\n                  'password' in module.params and module.params['password'] is not None\n\n    if not legacy_mode:\n        if module._socket_path:\n            connection = Connection(module._socket_path)\n            fos = FortiOSHandler(connection)\n\n            is_error, has_changed, result = fortios_wireless_controller_hotspot20(module.params, fos)\n        else:\n            module.fail_json(**FAIL_SOCKET_MSG)\n    else:\n        try:\n            from fortiosapi import FortiOSAPI\n        except ImportError:\n            module.fail_json(msg=\"fortiosapi module is required\")\n\n        fos = FortiOSAPI()\n\n        login(module.params, fos)\n        is_error, has_changed, result = fortios_wireless_controller_hotspot20(module.params, fos)\n        fos.logout()\n\n    if not is_error:\n        module.exit_json(changed=has_changed, meta=result)\n    else:\n        module.fail_json(msg=\"Error in repo\", meta=result)\n\n\nif __name__ == '__main__':\n    main()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json \nimport requests \n\n#Get the URL for the website\nurl = 'https://example.com/blogpage'\nr = requests.get(url)\n\n#Check for errors\nif r.status_code != 200:\n print('Error:', r.status_code)\n\n#Parse the page content\npage_content = r.text \n\n#Parse the page_content into a Key-Value format\ndict = {}\nfor line in page_content.split('\\n'):\n  words = line.split()\n  if len(words) > 1:\n    key = words[0]\n    value = words[1]\n    dict[key] = value\n\n#Create a new JSON \ndata = json.dumps(dict);\n\n#Print the JSON\nprint(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findMode(arr): \n max_count = 1 \n mode = arr[0] \n count = 1 \n  \n for i in range(1,len(arr)): \n if (arr[i] == arr[i - 1]): \n count = count + 1 # increment count\n if (count > max_count): \n max_count = count # update max_count \n mode = arr[i] \n else: \n count = 1 # reset count \n  \n return mode \n\n# Driver program \narr = [2, 4, 3, 3, 5, 3, 7] \nprint(findMode(arr)) # prints 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def average(a, b):\n    return (a + b) / 2\n\nresult = average(2, 3)\nprint(result) but is not the same. just give one example and only return the code."}
