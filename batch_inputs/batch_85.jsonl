{"prompt": "make some code that functions the same as the following code: def find_longest_common_subsequence(s1, s2):\n    # Create a two dimensional array \n    arr = [[0 for i in range(len(s2) + 1)]  \n           for j in range(len(s1) + 1)] \n    \n    # Iterate over the strings \n    for i in range(1, len(s1) + 1): \n        for j in range(1, len(s2) + 1): \n    \n        # if the characters are same, update the \n        # value at current index by adding 1 to \n        # value at the diagonal left \n            if s1[i - 1] == s2[j - 1]: \n                arr[i][j] = arr[i - 1][j - 1] + 1\n            else: \n        # If not same, take the maximum \n        # value of the cell to the left \n        # and cell above \n                arr[i][j] = max(arr[i - 1][j], \n                                arr[i][j - 1])\n\n    # return the last element of the \n    # table which is our result \n    return arr[len(s1)][len(s2)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def caesar_cipher(text, key):\n    encrypted_text = ''\n    for c in text: \n        if c.isalpha(): \n            encrypted_text += chr(ord(c) + key) \n        else:\n            encrypted_text += c\n  \n    return encrypted_text but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/bin/bash\n\npython script.py\necho $? but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: student_data = [\n    {\n        'name': 'John',\n        'id': 105, \n        'subjects': {\n            'Science': 90\n        }\n    }\n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to convert English sentence to Pig Latin \ndef pig_latin(sentence): \n      \n    # Separate the sentence into words \n    words = sentence.split(' ') \n      \n    # Convert each word into Pig Latin \n    pig_latin_words = [] \n    for word in words: \n        pig_latin_words.append(convert(word)) \n      \n    # Return the sentence with words converted to Pig Latin \n    return ' '.join(pig_latin_words) \n  \n# Function to convert English word to Pig Latin \ndef convert(word): \n      \n    # IF the word contains just one letter then return the same \n    if len(word) == 1: \n        return word \n     \n    # If word is a vocal then just add \"way\" at the end \n    elif word[0] in 'aeiou': \n        return word + \"way\"\n      \n    # If word begins with a consonant then move the consonant to the end and add \"ay\" \n    else: \n        return word[1:] + word[0] + \"ay\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Copyright (C) 2020 Christopher Gearhart\n# chris@bblanimation.com\n# http://bblanimation.com/\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n# System imports\nimport bpy\nimport bmesh\nimport math\nimport numpy as np\n\n# Blender imports\nfrom mathutils import Vector\n\n# Module imports\nfrom .generator_utils import *\n\n\ndef make_tile(dimensions:dict, brick_type:str, brick_size:list, circle_verts:int=None, type:str=None, detail:str=\"LOW\", bme:bmesh=None):\n    \"\"\"\n    create inverted slope brick with bmesh\n\n    Keyword Arguments:\n        dimensions   -- dictionary containing brick dimensions\n        brick_type   -- cm.brick_type\n        brick_size   -- size of brick (e.g. standard 2x4 -> [2, 4, 3])\n        circle_verts -- number of vertices per circle of cylinders\n        type         -- type of tile in ('TILE', 'TILE_GRILL')\n        detail       -- level of brick detail (options: ('FLAT', 'LOW', 'HIGH'))\n        bme          -- bmesh object in which to create verts\n\n    \"\"\"\n    # create new bmesh object\n    bme = bmesh.new() if not bme else bme\n\n    # get halfScale\n    d = Vector((dimensions[\"half_width\"], dimensions[\"half_width\"], dimensions[\"half_height\"]))\n    d.z = d.z * (brick_size[2] if flat_brick_type(brick_type) else 1)\n    # get scalar for d in positive xyz directions\n    scalar = Vector((brick_size[0] * 2 - 1,\n                     brick_size[1] * 2 - 1,\n                     1))\n    d_scaled = vec_mult(d, scalar)\n    # get thickness of brick from inside to outside\n    thick_xy = dimensions[\"thickness\"] - (dimensions[\"tick_depth\"] if \"High\" in detail and min(brick_size) != 1 else 0)\n    thick = Vector((thick_xy, thick_xy, dimensions[\"thickness\"]))\n\n    # create cube\n    if \"GRILL\" in type:\n        coord1 = -d\n        coord1.z += dimensions[\"slit_height\"]\n        coord2 = d_scaled\n        coord2.z = coord1.z\n        v1, v4, v3, v2 = make_rectangle(coord1, coord2, face=False, bme=bme)[1]\n    else:\n        sides = [1, 1 if detail == \"FLAT\" else 0, 1, 1, 1, 1]\n        coord1 = -d\n        coord1.z += dimensions[\"slit_height\"]\n        coord2 = d_scaled\n        v1, v2, v3, v4, v5, v6, v7, v8 = make_cube(coord1, coord2, sides, bme=bme)[1]\n\n    # make verts for slit\n    slit_depth = Vector([dimensions[\"slit_depth\"]]*2)\n    coord1 = -d\n    coord1.xy += slit_depth\n    coord2 = Vector((d_scaled.x, d_scaled.y, -d.z + dimensions[\"slit_height\"]))\n    coord2.xy -= slit_depth\n    v9, v10, v11, v12, v13, v14, v15, v16 = make_cube(coord1, coord2, [0, 1 if detail == \"FLAT\" and \"GRILL\" not in type else 0, 1, 1, 1, 1], bme=bme)[1]\n    # connect slit to outer cube\n    bme.faces.new((v14, v4, v1, v13))\n    bme.faces.new((v15, v3, v4, v14))\n    bme.faces.new((v16, v2, v3, v15))\n    bme.faces.new((v13, v1, v2, v16))\n\n    # add details\n    if \"GRILL\" in type:\n        if brick_size[0] < brick_size[1]:\n            add_grill_details(dimensions, brick_size, thick, scalar, d, v4, v1, v2, v3, v9, v10, v11, v12, bme)\n        else:\n            add_grill_details(dimensions, brick_size, thick, scalar, d, v1, v2, v3, v4, v9, v10, v11, v12, bme)\n\n    elif detail != \"FLAT\":\n        # making verts for hollow portion\n        coord1 = -d + Vector((thick.x, thick.y, 0))\n        coord2 = vec_mult(d, scalar) - thick\n        v17, v18, v19, v20, v21, v22, v23, v24 = make_cube(coord1, coord2, [1, 0, 1, 1, 1, 1], flip_normals=True, bme=bme)[1]\n        # connect hollow portion to verts for slit\n        bme.faces.new((v18, v17, v9, v10))\n        bme.faces.new((v19, v18, v10, v11))\n        bme.faces.new((v20, v19, v11, v12))\n        bme.faces.new((v17, v20, v12, v9))\n\n        # add supports\n        if max(brick_size[:2]) > 2:\n            add_supports(dimensions, dimensions[\"height\"], brick_size, brick_type, circle_verts, type, detail, d, scalar, thick, bme)\n\n    return bme\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \nfrom bs4 import BeautifulSoup \n\n# URL of the page to be scraped \nurl = \"https://www.nytimes.com/\"\n\n# Fetching the webpage \nr = requests.get(url) \n\n# Extracting all the headlines from the page \nsoup = BeautifulSoup(r.content, 'html.parser') \nheadlines = soup.find_all('h2') \n\n# Extracting the text from all the headlines \nheadlines_text = [] \nfor headline in headlines: \n    headlines_text.append(headline.get_text()) \n\n# Printing the extracted headlines \nprint(headlines_text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: d = {1: [1], 2: [1,2], 3: [1,2,3]}\nfor k,v in d.items():\n    print(k,v) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: mylist = [item for item in mylist if isinstance(item, int)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def checkNum(s): \n    flag = True\n    for i in s: \n        if i.isdigit() == False: \n            flag = False\n            break\n  \n    return flag but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_max(ins):\n    return max(ins) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import http.server\nimport socketserver\n\n# web server running on port 80\nPORT = 80\nHandler = http.server.SimpleHTTPRequestHandler\n\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n    print(\"serving at port\", PORT)\n    httpd.serve_forever() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import dash\nimport dash_core_components as dcc\nimport dash_html_components as html\nimport plotly.graph_objs as go\nimport pandas as pd\n\ndf = pd.read_csv('data/my_dataset.csv')\n\napp = dash.Dash()\n\napp.layout = html.Div([\n    html.H1('My Dashboard'),\n    dcc.Graph(id='my-graph',\n        figure={\n            'data': [\n                go.Scatter3d(\n                    x=df['x'],\n                    y=df['y'],\n                    z=df['z'],\n                    mode='markers',\n                    marker={\n                        'size': 5,\n                        'opacity': 0.8\n                    }\n                )\n            ],\n            'layout': go.Layout(\n                scene={\n                    'xaxis': {'title': 'X'},\n                    'yaxis': {'title': 'Y'},\n                    'zaxis': {'title': 'Z'}\n                }\n            )\n        }\n    )\n])\n\nif __name__ == '__main__':\n    app.run_server() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Vector:\n def __init__(self, x, y):\n  self.x = x\n  self.y = y\n\n def __add__(self, other):\n  return Vector(self.x + other.x, self.y + other.y)\n\n def __sub__(self, other):\n  return Vector(self.x - other.x, self.y - other.y)\n\nv1 = Vector(2, 4)\nv2 = Vector(4, 6)\nv3 = v1 + v2\nprint(v3.x, v3.y) # 6, 10\nv4 = v1 - v2\nprint(v4.x, v4.y) # -2, -2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\nclass Person:\n    def __init__(self, json_object):\n        self.first_name = json_object[\"first_name\"]\n        self.last_name = json_object[\"last_name\"] \n\n    def __str__(self):\n        return self.first_name + ' ' + self.last_name\n\njson_object = json.loads('{\"first_name\": \"John\", \"last_name\": \"Smith\"}')\n\nperson = Person(json_object)\nprint(person) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(arr, number): \n    for i in range(len(arr)): \n        if arr[i] == number: \n            return True\n    return False\n  \narr = [5, 8, 2, 10, 48, 41] \nnumber = 8\nif search(arr, number): \n    print(\"Number found\") \nelse: \n    print(\"Number not found\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os\nimport subprocess\n\ndef migrate_database(host1, username1, password1, host2, username2, password2):\n    command_str = \"mysqldump -h '{host1}' -u '{username1}' -p{password1} \\\n            | mysql -h '{host2}' -u '{username2}' -p{password2}\"\n    os.system(command_str.format(host1 = host1, username1 = username1, password1 = password1,\n                                host2 = host2, username2 = username2, password2 = password2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Node class \nclass Node: \n    def __init__(self, data): \n        self.data = data  \n        self.next = None\n\n# LinkedList class \nclass LinkedList: \n    def __init__(self):  \n        self.head = None\n\n# Insert at the beginning of the list\n    def insert_at_beginning(self, data): \n        new_node = Node(data)\n        new_node.next = self.head \n        self.head = new_node\n\n# Insert at the end of the list\n    def insert_at_end(self, data): \n        new_node = Node(data) \n  \n        # If linked list is empty \n        if self.head is None: \n            self.head = new_node \n            return \n  \n        # Otherwise iterate to the last node\n        last = self.head \n        while (last.next): \n            last = last.next\n  \n        # Change the next of the last node \n        last.next =  new_node \n##\n13. Instruction: Develop a sorting algorithm to sort a list of words in alphabetical order.\n13. Input: \nNot applicable\n13. Output: \n# Function to sort the list of words\ndef sort_words(words):\n   # Split the words into letters\n   letters = [list(word) for word in words]\n\n   # Loop through the list of letters\n   for i in range(len(letters) - 1):\n      # Set min_idx to the current index \n      min_idx = i\n      # Check the rest of the list\n      for j in range(i + 1, len(letters)):\n         # Determine if the current letter comes before the letter in min_idx \n         if letters[j] < letters[min_idx]:\n            # Update the minimum index\n            min_idx = j\n      # Swap the minimums\n      letters[i], letters[min_idx] = letters[min_idx], letters[i]\n\n   # Re-combine the letters and join the words\n   sorted_words = []\n   for word in letters:\n      sorted_words.append(\"\".join(word))\n   return sorted_words but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def second_biggest(lst):\n max1 = 0\n max2 = 0\n for num in lst:\n if num > max1:\n max1 = num\n elif num > max2:\n max2 = num\n return max2\n\nsecond_largest_num = second_biggest([1, 5, 9, 4, 16, 11])\nprint(second_largest_num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCalculate the total number of words and characters in a list of strings\n\"\"\" \ndef count_words_and_characters(strings):\n    total_words = 0\n    total_characters = 0\n    for string in strings:\n        words = string.split()\n        total_words += len(words)\n        for word in words:\n            total_characters += len(word)\n    return total_words, total_characters\n \nif __name__ == '__main__':\n    strings = [\"Hello\",\"world!\"]\n    num_words, num_characters = count_words_and_characters(strings)\n    print(f\"Total number of words: {num_words}\")\n    print(f\"Total number of characters: {num_characters}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def password_strength(password):\n    strength = 0\n    \n    # check length of the password\n    if len(password) >= 8: \n        strength += 2\n    elif len(password) >= 4:\n        strength += 1\n    \n    # check lowercase characters\n    if any(c.islower() for c in password): \n        strength += 2\n                    \n    # check uppercase characters\n    if any(c.isupper() for c in password): \n        strength += 2\n                    \n    # check for numbers\n    if any(c.isdigit() for c in password):\n        strength += 2\n                    \n    # check for special characters\n    if any(not c.isalnum() for c in password):\n        strength += 2\n                    \n    # calculate strength score\n    score = strength * 10 / 10 \n    return int(score)\n\n# Output: 9 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer,TfidfTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\n\ntrain_df = pd.read_csv('movie_reviews.csv')\n\nX_train = train_df['review']\ny_train = train_df['sentiment']\n\npipeline = Pipeline([\n ('vectorizer', CountVectorizer()),\n ('tfidf', TfidfTransformer()),\n ('classifier', LogisticRegression())\n])\n\npipeline.fit(X_train, y_train)\n\ndef sentiment(text):\n prediction = pipeline.predict_proba([text])[0][1]\n return prediction\n\nsentiment('I loved the movie!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\nimport os\nimport numpy\nimport gdspy\n\nld_mask_edge = {'layer': 300, 'datatype': 0}\nld_kerf = {'layer': 200, 'datatype': 0}\nld_acfmask = {'layer': 100, 'datatype': 0}\nld_topmetal= {'layer': 81, 'datatype': 0}\nld_po= {'layer': 27, 'datatype': 1}\n\n\ndef GenerateCell(chipX = 14100., chipY=16210.,leftKerf=85.,rightKerf=15.,topKerf=465.,botKerf=15.,narray_X=13,narray_Y=11,mask_width=254000.,wafer_offset_x=-570.0,wafer_offset_y=2595.0,wafer_radius=100000) :\n\n    #Extract existing die mask top cell from GDS\n    gdsii = gdspy.current_library.read_gds(infile='Timepix3_top_ACF_Nometal.GDS',layers=ld_acfmask)\n    die =  gdspy.current_library.extract(\"Timepix3_top\")\n    die_ref = gdspy.CellReference(die,origin=(leftKerf,botKerf))\n\n    #Create top reticle cell\n    pixel_cell = gdspy.Cell(\"Reticle_top\")\n\n    # Create a kerf layer for visualization\n    kerfWidth  = leftKerf+rightKerf+chipX\n    kerfHeight = topKerf+botKerf+chipY\n    Kerf = gdspy.Rectangle((0,0), (kerfWidth, kerfHeight),**ld_kerf)\n\n   # Add cells to the top cell\n    pixel_cell.add(Kerf)\n    pixel_cell.add(die_ref.get_polygonsets())\n    pixel_cell.add(die_ref.get_paths())\n    #Fill the Kerf with Resist\n    pixel_cell.add(gdspy.Rectangle((0,0), (leftKerf, kerfHeight),**ld_acfmask))\n    pixel_cell.add(gdspy.Rectangle((0,0), (kerfWidth, botKerf),**ld_acfmask))\n    pixel_cell.add(gdspy.Rectangle((0,kerfHeight), (kerfWidth, kerfHeight-topKerf),**ld_acfmask))\n    pixel_cell.add(gdspy.Rectangle((kerfWidth-rightKerf,0), (kerfWidth, kerfHeight-topKerf),**ld_acfmask))\n\n    wafer_cell = gdspy.Cell('Wafer_Top')\n    mask_edge = gdspy.Rectangle((-mask_width/2,-mask_width/2), (mask_width/2., mask_width/2.),**ld_mask_edge)\n\n    array_origin_x = -narray_X*(leftKerf+rightKerf+chipX)/2. + wafer_offset_x\n    array_origin_y = -narray_Y*(botKerf+topKerf+chipY)/2. + wafer_offset_y\n\n\n    wafer_edge = gdspy.Path(1,(wafer_radius,0))\n    wafer_edge.arc(wafer_radius,0,360,layer=400)\n    wafer_cell.add(wafer_edge)\n\n    print kerfWidth,kerfHeight\n    wafer_cell.add(gdspy.CellArray(pixel_cell,narray_X,narray_Y,spacing=(kerfWidth,kerfHeight),origin=(array_origin_x,array_origin_y)))\n    wafer_cell.add(mask_edge)\n\n\n\n\n    # View the resulting cell\n    gdspy.LayoutViewer(cells=[wafer_cell],depth=1)\n\n\n    gdspy.write_gds(\"wafer_mask.gds\",cells=[wafer_cell,pixel_cell])\n\n\n\nif __name__ == '__main__':\n    GenerateCell() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\nx = [0, 1, 2, 3, 4, 5, 6, 7]\ny = [0, 1, 4, 9, 16, 25, 36, 49]\n\nplt.plot(x, y)\nplt.xlabel('X Axis')\nplt.ylabel('Y Axis')\nplt.title('Plot of X and Y')\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #print the verses\nprint(\"Twinkle, twinkle, little star,\")\nprint(\"How I wonder what you are!\")\nprint(\"Up above the world so high,\")\nprint(\"Like a diamond in the sky.\")\nprint(\"Twinkle, twinkle, little star,\")\nprint(\"How I wonder what you are!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def square_list(nums):\n    return [num ** 2 for num in nums] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: data = [\"A\", \"NULL\", \"B\", \"NULL\", \"C\", \"NULL\"]\n\n##\nnew_data = []\nfor i in data:\n if i == \"\":\n new_data.append(\"NULL\")\n else:\n new_data.append(i)\n\nprint(new_data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_difference(arr):\n    # Initialize max_difference to a negative value\n    max_difference = -float(\"inf\")\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_difference:\n                max_difference = diff\n    return max_difference\n\nresult = max_difference([7, 1, 3, 8, 25])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import timeit\n\ndef find_value(l):\n    for v in l:\n        if v >= 0:\n            # Early exit once value is found\n            return v\n    return -1\n\nprint(timeit.timeit('find_value([-5, 0, 4, -1, 3])', number=10000)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os\n\ndef list_directory_contents(directory_path):\n    contents = os.listdir(directory_path)\n    return contents\n\ndirectory = \"your_directory_path\"\ncontents = list_directory_contents(directory)\nprint(contents) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: @app.route('/data', methods=['GET'])\ndef get_data():\n data = {\n 'key1': 'value1',\n 'key2': 'value2',\n 'key3': 'value3'\n }\n return jsonify(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\nimport re\n\nimport django\nfrom django.db import models, migrations\nfrom django.db.models import Q\n\n\ndef add_self_organized_host(apps, schema_editor):\n    \"\"\"Make new host: self-organized.\"\"\"\n    Host = apps.get_model('workshops', 'Host')\n    Host.objects.create(domain='self-organized', fullname='self-organized',\n                        country='W3')\n\n\ndef update_administrator_to_self_organized(apps, schema_editor):\n    \"\"\"Find all events that were self-organized and set administrator for them\n    to be \"self-organized\".\"\"\"\n    Host = apps.get_model('workshops', 'Host')\n    self_org = Host.objects.get(fullname='self-organized')\n\n    Event = apps.get_model('workshops', 'Event')\n    Event.objects.filter(administrator__isnull=True) \\\n        .filter(\n            Q(invoice_status='na-self-org') |\n            Q(notes__contains='self-organized') |\n            Q(notes__contains='self organized')\n        ) \\\n        .update(administrator=self_org)\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('workshops', '0053_merge'),\n    ]\n\n    operations = [\n        # some missing migration, totally healthy (changes only validators for the field)\n        migrations.AlterField(\n            model_name='event',\n            name='url',\n            field=models.CharField(validators=[django.core.validators.RegexValidator(re.compile('https?://github\\\\.com/(?P<name>[^/]+)/(?P<repo>[^/]+)/?', 32), inverse_match=True)], unique=True, max_length=100, help_text='Setting this and startdate \"publishes\" the event.<br />Use link to the event\\'s website.', blank=True, null=True),\n        ),\n\n        migrations.RunPython(add_self_organized_host),\n        migrations.RunPython(update_administrator_to_self_organized),\n    ]\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_common_substring(s1, s2):\n    max_length = 0\n    for i in range(len(s1)):\n        for j in range(len(s2)):\n            common_length = 0\n            while s1[i + common_length] == s2[j + common_length]:\n                common_length += 1\n            if common_length > max_length:\n                max_length = common_length\n    return max_length\n\ns1 = 'people'\ns2 = 'talent'\n\nlongest_common_substring_length = longest_common_substring(s1, s2)\n\nprint(longest_common_substring_length) # Output: 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n \ndef generate_random_string(size=8):\n return ''.join(random.choices(string.ascii_uppercase + string.digits, k=size))\n \nrandom_string = generate_random_string()\nprint(random_string)\n# Output: '6L6Y4M4V' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_text_from_html(html_str):\n    soup = BeautifulSoup(html_str, 'html.parser')\n    all_text = soup.find_all(text=True)\n    return ' '.join(all_text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -*- coding: utf-8 -*-\n\nimport re\nimport time\n\nfrom pyload.plugin.Account import Account\n\n\nclass Keep2ShareCc(Account):\n    __name    = \"Keep2ShareCc\"\n    __type    = \"account\"\n    __version = \"0.05\"\n\n    __description = \"\"\"Keep2Share.cc account plugin\"\"\"\n    __license     = \"GPLv3\"\n    __authors     = [(\"aeronaut\", \"aeronaut@pianoguy.de\"),\n                       (\"Walter Purcaro\", \"vuolter@gmail.com\")]\n\n\n    VALID_UNTIL_PATTERN  = r'Premium expires:\\s*<b>(.+?)<'\n    TRAFFIC_LEFT_PATTERN = r'Available traffic \\(today\\):\\s*<b><a href=\"/user/statistic.html\">(.+?)<'\n\n    LOGIN_FAIL_PATTERN = r'Please fix the following input errors'\n\n\n    def loadAccountInfo(self, user, req):\n        validuntil  = None\n        trafficleft = -1\n        premium     = False\n\n        html = req.load(\"http://keep2share.cc/site/profile.html\", decode=True)\n\n        m = re.search(self.VALID_UNTIL_PATTERN, html)\n        if m:\n            expiredate = m.group(1).strip()\n            self.logDebug(\"Expire date: \" + expiredate)\n\n            if expiredate == \"LifeTime\":\n                premium    = True\n                validuntil = -1\n            else:\n                try:\n                    validuntil = time.mktime(time.strptime(expiredate, \"%Y.%m.%d\"))\n\n                except Exception, e:\n                    self.logError(e)\n\n                else:\n                    premium = validuntil > time.mktime(time.gmtime())\n\n            m = re.search(self.TRAFFIC_LEFT_PATTERN, html)\n            if m:\n                try:\n                    trafficleft = self.parseTraffic(m.group(1))\n\n                except Exception, e:\n                    self.logError(e)\n\n        return {'validuntil': validuntil, 'trafficleft': trafficleft, 'premium': premium}\n\n\n    def login(self, user, data, req):\n        req.cj.setCookie(\"keep2share.cc\", \"lang\", \"en\")\n\n        html = req.load(\"http://keep2share.cc/login.html\",\n                        post={'LoginForm[username]'  : user,\n                              'LoginForm[password]'  : data['password'],\n                              'LoginForm[rememberMe]': 1,\n                              'yt0'                  : \"\"},\n                        decode=True)\n\n        if re.search(self.LOGIN_FAIL_PATTERN, html):\n            self.wrongPassword()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quadratic_roots(a, b, c):\n    # Calculate the discriminant \n    discriminant = (b**2) - (4*a*c)\n\n    # Compute the root\n    root1 = (-b + discriminant**0.5)/(2*a) \n    root2 = (-b - discriminant**0.5)/(2*a)\n\n    # Print the roots\n    print(\"The roots are {0} and {1}\".format(root1, root2))\n\nquadratic_roots(2, 5, -3) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for char in \"Hello World\":\n    print(char) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def order_by_length(input_list):\n  return sorted(input_list, key=len, reverse=True)\n  \ninput_list = [\"Hello\", \"World\", \"This\", \"is\", \"a\", \"test\"]\nprint(order_by_length(input_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Flatten, Conv2D, MaxPooling2D\n\nmodel = Sequential()\n\n# convolutional layers\nmodel.add(Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\n# fully connected layers\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))\n\n# compile\nmodel.compile(optimizer='adam',\n    loss='categorical_crossentropy',\n    metrics=['accuracy']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_multi_element_index(arr):\n    \"\"\"\n    Returns index of the first element in the \n    array which resolves to multiple different element\n    \"\"\"\n    seen = set()\n\n    for i in range(len(arr)):\n        elem = arr[i]\n        if elem in seen:\n            return i\n        else:\n            seen.add(elem)\n\n    return None\n    \narr = ['a', 'b', 'a', 'c', 'a']\nind = find_multi_element_index(arr)\nprint('Found multiple elements for index', ind) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\nimport signal\nimport time\nimport random\nimport speech_recognition as sr\n\ndef signal_handler(signal, frame):\nsys.exit(0)\n\nsignal.signal(signal.SIGINT, signal_handler)\n\n# Setup the recognizer\nrec = sr.Recognizer()\nmic = sr.Microphone()\n\n# Some useful commands\ncommands = {\n 'time': lambda : print(time.strftime('%H:%M:%S')),\n 'date': lambda : print(time.strftime('%d/%m/%Y')),\n 'greeting': lambda : print(\"Hello, how can I help you?\"),\n 'random': lambda : print(random.randint(1, 100))\n}\n\ndef listen():\n while True:\n with mic as source:\n audio = rec.listen(source)\n try:\n text = rec.recognize_google(audio)\n # Call the corresponding command\n commands[text]()\n except:\n print(\"Sorry, I didn't understand that\")\n\nlisten() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt \n\ndef generate_histogram(data):\n    plt.hist(data)\n    plt.xlabel(\"Data\")\n    plt.ylabel(\"Frequency\")\n    plt.title(\"Histogram of Data\")\n    plt.show()\n    \ngenerate_histogram(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\n#Numpy array of the board\nboard = np.zeros((3, 3))\n\n#List to keep track of all the moves made\nmoves_made = []\n\n#Available actions\nactions = ['up', 'down', 'left', 'right']\n\n#Target reward\ntarget = 100\n\n# Learning rate\nrate = 0.2\n\n# Discount factor\ngamma = 0.7\n\n# Maximum Episodes\nmax_episodes = 10000\n\n#This function will evaluate the board and choose the best move\ndef choose_action(state):\n  if np.random.uniform(0, 1) < rate:\n    action = np.random.choice(actions)\n  else:\n    values = []\n    # Evaluate all possible moves\n    for a in actions:\n      values.append(evaluate_board(state, a))\n\n    # Choose the action with the maximum value\n    action = values.index(max(values))\n  \n  return action\n\n#This function evaluates the board state for a given action\ndef evaluate_board(state, action):\n  next_state = make_move(state, action)\n  reward = check_win(next_state)\n  value = reward + gamma * get_values_actions(next_state)\n  return value\n\n#This function makes a move on the board\ndef make_move(state, action):\n  next_state = np.copy(state)\n  if action == 'up':\n    if np.any(next_state[0] == 0):\n      next_state[0][np.argwhere(next_state[0] == 0)] = 1\n  elif action == 'down':\n    if np.any(next_state[2] == 0):\n      next_state[2][np.argwhere(next_state[2] == 0)] = 1\n  elif action == 'left':\n    for row in next_state:\n      if 0 in row:\n        row[np.argwhere(row == 0)] = 1\n        break\n  elif action == 'right':\n    for row in reversed(next_state):\n      if 0 in row:\n        row[np.argwhere(row == 0)] = 1\n        break\n  \n  return next_state\n\n#This function checks the board to see if there is a winner\ndef check_win(next_state):\n  win = False\n  for row in next_state:\n    if np.all(row == 1):\n      win = True\n  for col in range(3):\n    if np.all(next_state[:,col] == 1):\n      win = True\n\n  diag1 = np.array(next_state[0][0] == next_state[1][1] == next_state[2][2] == 1)\n  diag2 = np.array(next_state[0][2] == next_state[1][1] == next_state[2][0] == 1)\n\n  if np.any(diag1):\n    win = True\n  elif np.any(diag2):\n    win = True\n\n  return win\n\n#This function gets the values of each action for a given board\ndef get_values_actions(state):\n  current_val = 0\n  for move in moves_made:\n    current_val += evaluate_board(state, move)\n\n  return current_val\n\n#Game Loop\nfor i in range(max_episodes):\n  state = board\n  print('Episode:', i)\n  done = False\n\n  while not done:\n    action = choose_action(state)\n    moves_made.append(action)\n\n    state = make_move(state, action)\n    done = check_win(state)\n\n    if done:\n      reward = target\n      print('Reward:', reward)\n      break; but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def str_to_int(input_str):\n    num = 0\n    for char in input_str:\n        num = num * 10 + ord(char) - ord('0')\n    return num but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def getDifference(data):\n min_value = min(data)\n max_value = max(data)\n return max_value - min_value\n\ndifference = getDifference(data)\nprint(difference) # 8 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, jsonify\nimport sqlalchemy as sql\n\napp = Flask(__name__)\n\nengine = sql.create_engine(\"sqlite:///my_database.db\")\n\n@app.route('/users')\ndef list_users():\n conn = engine.connect()\n query = \"SELECT id, name, email FROM users\"\n result = conn.execute(query)\n users = [dict(row.items()) for row in result]\n return jsonify(users)\n \nif __name__ == '__main__':\n app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_element(lst, index):\n    return lst[index] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Matrix:\n    def __init__(self, data):\n        self.data = data\n\n    def __repr__(self):\n        return str(self.data)\n\n    def shape(self):\n        \"\"\"\n        Shape of matrix\n        \"\"\"\n        return (len(self.data), len(self.data[0]))\n\n    def add_scalar(self, scalar):\n        \"\"\"\n        Scalar addition\n        \"\"\"\n        return [[v + scalar for v in row] for row in self.data]\n\n    def add_matrix(self, other):\n        \"\"\"\n        Matrix addition\n        \"\"\"\n        return [[v1 + v2 for (v1, v2) in zip(row1, row2)] for (row1, row2) in zip(self.data, other.data)]\n\n    def subtract_scalar(self, scalar):\n        \"\"\"\n        Scalar subtraction\n        \"\"\"\n        return [[v - scalar for v in row] for row in self.data]\n\n    def subtract_matrix(self, other):\n        \"\"\"\n        Matrix subtraction\n        \"\"\"\n        return [[v1 - v2 for (v1, v2) in zip(row1, row2)] for (row1, row2) in zip(self.data, other.data)]\n\n    def multiply_scalar(self, scalar):\n        \"\"\"\n        Scalar multiplication\n        \"\"\"\n        return [[v*scalar for v in row] for row in self.data]\n\n    def transpose(self):\n        \"\"\"\n        Matrix transposition\n        \"\"\"\n        return [list(v) for v in list(zip(*self.data))] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers = [4, 19, -3, 27, -9, 5]\n\nmax_num = max(numbers)\nmin_num = min(numbers)\n\nprint(\"The maximum number in the list is {}\".format(max_num))\nprint(\"The minimum number in the list is {}\".format(min_num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_two_numbers(a, b, x=0):\n    return a + b + x but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Calc:\n    def __init__(self, num1, num2):\n        self.num1 = num1\n        self.num2 = num2\n \n    def add(self):\n        return self.num1 + self.num2\n \n    def sub(self):\n        return self.num1 - self.num2\n \n    def mul(self):\n        return self.num1 * self.num2\n \n    def div(self):\n        return self.num1 / self.num2\n\ncalc = Calc(4, 5)\nprint(calc.add())\nprint(calc.sub())\nprint(calc.mul())\nprint(calc.div()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(string):\n rev_str = string[::-1]\n for i in range(len(string) - 3):\n  surr_str = string[i:i+4]\n  if rev_str[i:i+4] == surr_str:\n   return True\n return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: keys = dict.keys()\nfor i in keys:\n    value = dict[i]\n    print(i, \":\", value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Calculate average cost of a meal\n\n# List of meals. Each meal is represented as a tuple (name, cost)\nmeals = [('Burger', 6.50), ('Fries', 2.50), ('Soda', 1.00),\n ('Pizza', 8.00), ('Salad', 3.00), ('Soda', 1.00)]\n\n# Calculate the total cost of all meals\ntotal_cost = sum(cost for _, cost in meals)\n\n# Calculate the average cost of a meal\naverage_cost = total_cost / len(meals)\n\nprint('Average cost of a meal: $' + str(average_cost)) # Output: Average cost of a meal: $5.083333333333334 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(x, y): \n    while(y): \n        x, y = y, x % y \n  \n    return x\n\na = int(input(\"Enter the first number: \"))\nb = int(input(\"Enter the second number: \"))\nprint(gcd(a, b)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicate(my_string):\n    char_seen = []\n    for character in my_string:\n        if character not in char_seen:\n            char_seen.append(character)\n    return ''.join(char_seen)\n\nprint(remove_duplicate(\"Hello World\")) #Helo Wrld but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiplesOf7(number): \n    for i in range(1,number+1): \n        if(i % 7 == 0): \n            print(i, end =\" \") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport sqlite3\n\nconn = sqlite3.connect('example.sqlite')\ncur = conn.cursor()\n\ndef scrape_data():\n r = requests.get('https://www.example.com/')\n\n# do something with the response\n\ndef store_data(data):\n sql = 'INSERT INTO table_name (column_1, column_2, column_3) VALUES (?, ?, ?)'\n cur.execute(sql, data)\n cur.commit()\n\nif __name__ == '__main__':\n scrape_data()\n store_data(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Capitalize the first letter of each word in a sentence\n\nsentence = \"python is a popular programming language\"\n\n# split the sentence into words \nwords = sentence.split(\" \") \n# capitalize the first letter of each word \nwords = [word.capitalize() for word in words] \n# join the edited words \nsentence = \" \".join(words) \n\nprint(sentence) # Output: Python Is A Popular Programming Language but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Assuming you have a variable named 'conn' pointing to the database connection \n\nresult = conn.execute(\n    \"SELECT * FROM Users WHERE active = true\"\n)\nfor row in result:\n    # Do something with the retrieved record\n    # ... but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_str(str):\n    return str[::-1]\n\n# Example\nprint(reverse_str(\"Hello World!\"))  # Prints !dlroW olleH but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\n\n#Create model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Embedding(input_dim=1000, output_dim=32))\nmodel.add(tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64)))\nmodel.add(tf.keras.layers.Dense(64, activation='relu'))\nmodel.add(tf.keras.layers.Dense(1, activation='sigmoid'))\n\n#Compile model\nmodel.compile(loss='binary_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'],)\n\n#Train model \nmodel.fit(x_train, y_train, epochs=10, batch_size=128) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \n\nAAPL_url = \"https://api.iextrading.com/1.0/stock/AAPL/quote?filter=symbol,latestPrice,latestSource,latestTime\"\n\nres = requests.get(AAPL_url)\ndata = res.json()\n\nprint(\"Symbol: \" + data['symbol']) \nprint(\"Price: \" + str(data['latestPrice'])) \nprint(\"Source: \" + data['latestSource']) \nprint(\"Time: \" + data['latestTime']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password():\n    letters_and_digits = string.ascii_letters + string.digits\n    special_chars = \"!@#$%^&*\"\n    chars = letters_and_digits + special_chars\n    password = random.choice(string.ascii_lowercase)\n    password += random.choice(string.ascii_uppercase)\n    password += random.choice(string.digits)\n    password += random.choice(special_chars)\n    for i in range(4):\n        password += random.choice(chars)\n    password_list = list(password)\n    random.SystemRandom().shuffle(password_list)\n    password = ''.join(password_list)\n    return password\n\nresult = generate_password()\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def average(a, b):\n    return (a+b)/2\n\nprint(average(4, 8)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: strings = ['Python', 'Java', 'C++', 'C']\n\nstrings.sort(reverse=True)\n\nprint(strings) # ['Python', 'Java', 'C++', 'C'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import psycopg2\nfrom flask import Flask, render_template\n\napp = Flask(__name__)\n\n# Connect to the PostgreSQL database\nconn = psycopg2.connect(host=\"localhost\", database=\"postgres\", user=\"postgres\", password=\"password\")\ncursor = conn.cursor()\n\n# Execute a query to select all rows from the table\ncursor.execute('SELECT * FROM table_name')\nresults = cursor.fetchall()\n\n@app.route('/')\ndef index():\n    return render_template('index.html', results=results)\n\nif __name__ == '__main__':\n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport sqlite3\nimport json\n\n# Connect to SQL database\nconn = sqlite3.connect(\"results.db\")\n\n# Scrape online store\nurl = <placeholder url>\ndata = requests.get(url).json()\n\n# Store scraped data in SQL database\nc = conn.cursor()\nfor item in data:\n c.execute(\"INSERT INTO online_store VALUES (?, ?, ?)\", [item[\"title\"], item[\"price\"], item[\"quantity\"]])\n\nconn.commit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply_matrices(A, B):\n    if len(A[0]) != len(B):\n        return \"Matrices can't be multiplied!\"\n\n    # create a matrix of zeros\n    multiplied_matrix = [[0 for row in range(len(B[0]))] for col in range(len(A))]\n\n    # iterate through rows of first matrix\n    for i in range(len(A)):\n        # iterate through columns of second matrix\n        for j in range(len(B[0])):\n            # iterate through rows of second matrix\n            for k in range(len(B)):\n                multiplied_matrix[i][j] += A[i][k] * B[k][j]\n\n    return multiplied_matrix but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_sentence(sentence): \n  \n    # base condition for recursion\n    if len(sentence) == 0: \n        return \"\" \n  \n    # calling reverse_sentence recursively\n    return reverse_sentence(sentence[1:]) + sentence[0] \n  \n# driver code \nsentence = \"Geeks For Geeks\"\nprint(reverse_sentence(sentence)) \n\n# Output: skeeG roF skeeG but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n  \n    def distance_from_origin(self):\n        return (self.x ** 2 + self.y ** 2) ** 0.5\n  \np = Point(3, 4)\nprint(p.distance_from_origin()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: count = 0\nfor word in words:\n    if word == 'the':\n        count += 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password(length):\n    chars=string.ascii_uppercase + string.ascii_lowercase + string.digits\n    return ''.join(random.choice(chars) for i in range(length))\n\nprint(generate_password(8)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\nimport logging \nimport sched\n\nimport vehicle_data # module for reading vehicle data\n\n# configure logging \nlogging.basicConfig(level=logging.INFO)\n\n# define the scheduler \nscheduler = sched.scheduler(time.time, time.sleep)\n\n# define diagnostics job\ndef job_diagnostics(vehicle_id): \n # reading and processing vehicle data\n data = vehicle_data.read(vehicle_id) \n performance = data['performance']\n fuel_consumption = data['fuel_consumption']\n wear_level = data['wear_level']\n\n # logging diagnostics \n logging.info(f'Vehicle {vehicle_id} diagnostics report: performance={performance} fuel_consumption={fuel_consumption}\n wear_level={wear_level}.')\n\n# define setup for periodic jobs\ndef setup_job(job, vehicle_id, interval): \n scheduler.enter(interval, 1, job, argument=(vehicle_id,))\n\n# setup diagnostics job for a vehicle\nsetup_job(job_diagnostics, vehicle_id, interval=3600) \n\n# start the scheduler\nscheduler.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_array(arr):\n    return arr[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password():\n password_characters = string.ascii_letters + string.digits \n password = ''.join(random.choice(password_characters) for i in range(6))\n return password\n\nprint(generate_password()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: This is not a Python class. It is a Python function. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nrandom_array = random.sample(range(10,20), 50)\nprint(random_array) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: user_input = input(\"What is your name and age: \")\nname, age = user_input.split()\nprint(f\"Hi {name}, you are {int(age)+1} years old\")\n# Output: Hi John, you are 11 years old but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(list):\n    max_value = list[0]\n    for value in list:\n        if value > max_value:\n            max_value = value\n    return max_value but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(100):\n    print(\"Word\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ntext = \"<p>This is a sample web page.<br>This text has <b>some</b> <i>html</i> tags.</p>\"\n\ncleaned_text = re.sub(r'<.*?>', '', text)\n\nprint(cleaned_text)\n# Output: This is a sample web page.This text has some html tags. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_large_element(lst):\n  largest_number = lst[0]\n  for i in range(1, len(lst)):\n    if lst[i] > largest_number:\n      largest_number = lst[i]\n  return largest_number\n\nmy_list = [10, 5, 20, 8, 9, 12]\nprint(find_large_element(my_list)) # 20 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy\n\ndef create_zeros_array(N):\n  return numpy.zeros(N)\n\nresult = create_zeros_array(N)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Book:\n \n def __init__(self, title, author, num_pages):\n self.title = title\n self.author = author\n self.num_pages = num_pages\n \n def __repr__(self):\n return f\"Book: {self.title}, by {self.author} ({self.num_pages} pages)\"\n\nbook = Book(\"The Great Gatsby\", \"F. Scott Fitzgerald\", 180)\n# Book: The Great Gatsby, by F. Scott Fitzgerald (180 pages) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nFind out the roots of given quadratic equation\n\"\"\"\nfrom math import sqrt\n\ndef quadratic_roots(a, b, c):\n    # calculate the discriminant\n    D = b**2 - 4*a*c\n\n    # calculate the two roots\n    if D == 0:\n        return (-b+sqrt(D)) // (2*a)\n    else:\n        x1 = (-b + sqrt(D)) // (2*a)\n        x2 = (-b - sqrt(D)) // (2*a)\n        return (x1, x2)\n    \nif __name__ == '__main__':\n    a = 1\n    b = 4\n    c = 4\n    print(\"Roots of the quadratic equation:\", quadratic_roots(a, b, c)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def BFS(graph, start):\n    visited = set()\n    queue = [start]\n    while queue:\n        vertex = queue.pop(0)\n        if vertex not in visited:\n            visited.add(vertex)\n            queue.extend(graph[vertex] - visited)\n    return visited but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mergeDictionaries(dict1, dict2):\n    res_dict = {**dict1,**dict2}\n    return res_dict\n\ndict1 = { 'a': 1, 'b': 2, 'c': 3 }\ndict2 = { 'd': 4, 'e': 5, 'f': 6 }\n\nprint(mergeDictionaries(dict1, dict2)) # {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pig_latin(word):\n    if len(word) > 0 and word.isalpha():\n        first_letter = word[0]\n        pig_word = word[1:] + first_letter + \"ay\"\n    else:\n        pig_word = \"Please enter a valid word!\"\n    return pig_word\n\nresult = pig_latin(\"word\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn import datasets\nfrom sklearn import svm\n\n# load the data\niris = datasets.load_iris()\nX = iris.data\ny = iris.target\n\n# split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# create the SVM model\nmodel = svm.SVC(kernel='linear')\nmodel.fit(X_train, y_train)\n\n# predict the labels for test set\npredictions = model.predict(X_test)\n\n# check the accuracy of the model\naccuracy = model.score(X_test, y_test)\nprint(\"Accuracy:\", accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: [i for i in range (1, 10) if i % 2 != 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n def __init__(self, data):\n self.left = None\n self.right = None\n self.data = data\n\n    \nclass BST:\n def __init__(self):\n self.root = None\n \n def insert(self, data):\n if self.root == None:\n self.root = Node(data)\n else:\n self._insert(data, self.root)\n \n def _insert(self, data, curr_node):\n if data < curr_node.data:\n if curr_node.left == None:\n curr_node.left = Node(data)\n else:\n self._insert(data, curr_node.left)\n \n elif data > curr_node.data:\n if curr_node.right == None:\n curr_node.right = Node(data)\n else:\n self._insert(data, curr_node.right)\n else:\n print(\"Value already present in tree\")\n \n def search(self, data):\n if self.root != None:\n return self._search(data, self.root)\n else:\n return False\n \n def _search(self, data, curr_node):\n if data == curr_node.data:\n return True\n elif data < curr_node.data and curr_node.left != None:\n return self._search(data, curr_node.left)\n elif data > curr_node.data and curr_node.right != None:\n return self._search(data, curr_node.right)\n \n def traverse(self):\n if self.root != None:\n self._traverse(self.root)\n \n def _traverse(self, curr_node):\n if curr_node.left != None:\n self._traverse(curr_node.left)\n \n print(curr_node.data)\n \n if curr_node.right != None:\n self._traverse(curr_node.right) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndata_json = json.dumps(data)\n\n# Output:\n{\"name\":\"John Doe\",\"age\":18,\"hobbies\":[\"reading\",\"swimming\",\"gaming\"],\"contact\":{\"email\":\"johndoe@example.com\",\"mobile\":\"+1900000000\"}} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: inputList = [\"Hello\", \"World\"]\nnewString = \"Hi\"\n\noutputList = []\n\nfor string in inputList:\n    outputList.append(string)\n\noutputList.append(newString)\n\nprint(outputList) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_password(length):\n  characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*(){}[]?/'\n  password = ''\n  for c in range(length):\n    password += random.choice(characters)\n  return password\n\nlength = 10\npassword = generate_password(length)\nprint(password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nfrom random import choice\n\n''.join(choice(string.ascii_letters) for _ in range(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nresponse = requests.get('https://www.google.com')\nprint(response.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: strings = ['hello!', 'hey,', 'where, are, you?', 'I am here']\nstrings = [s.replace(\",\", \"\").replace(\"?\", \"\").replace(\"!\", \"\") for s in strings]\nprint(strings) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\n# Send GET request\nr = requests.get('https://reqres.in/api/users')\n\n# Get response\nif r.status_code == 200:\n print(r.text) but is not the same. just give one example and only return the code."}
