{"prompt": "make some code that functions the same as the following code: input_array = [1, 2, 3, 4, 5]\n\n# calculate the average value\naverage = sum(input_array) / len(input_array)\n\n# print result\nprint(\"Average:\", average)\n\n# Output:\nAverage: 3.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_list(input_list, input_value):\n    \"\"\"Checks whether a given value is in a list\"\"\"\n    for num in input_list:\n        if num == input_value:\n            return True\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence = \"This is a sentence with @ symbols.\"\nsentence = sentence.replace('@', '#')\nprint(sentence) # This is a sentence with # symbols. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Fibonacci series program\ndef fibonacci(n, f_values):\n # base case\n if n == 0:\n  return 0\n elif n == 1:\n  return 1\n if n in f_values:\n  return f_values[n]\n else:\n  f_values[n] = fibonacci(n-1, f_values) + fibonacci(n-2, f_values)\n  return f_values[n]\n\n# calculate the fibonacci series\ndef calculate_fibonacci(n):\n f_values = {}\n for i in range(n+1):\n  value = fibonacci(i, f_values)\n  print(f\"{i}: {value}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculateMedian(numbers):\n    n = len(numbers)\n    if n % 2 == 0:\n        num1 = numbers[n//2]\n        num2 = numbers[n//2 - 1]\n        median = (num1 + num2)/2\n    else: \n        median = numbers[n//2]\n    return median\n        \nnumbers = [2, 4, 3, 5, 7]\nmedian = calculateMedian(numbers)\nprint(\"Median of list is:\", median) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def roman_to_int(roman):\n    # Create a dictionary for the Roman numerals\n    roman_values = {\n        'M': 1000,\n        'D': 500,\n        'C': 100,\n        'L': 50,\n        'X': 10,\n        'V': 5,\n        'I': 1\n    }\n    total = 0\n    for i in range(len(roman)):\n        # If the current value is greater than the previous value, subtract it from the total\n        if i != 0 and roman_values[roman[i]] > roman_values[roman[i-1]]:\n            total -= roman_values[roman[i-1]]\n        # Add the current value to the total\n        total += roman_values[roman[i]]\n\n    return total\n\nnum = roman_to_int('MCMLIV')\nprint(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: contactlist = {}\n\n# Function to add contact\ndef add_contact():\n  name = input(\"Enter the name of the contact: \")\n  phone = input(\"Enter the phone number: \")\n  email = input(\"Enter the email address: \")\n\n  contactlist[name] = {\n    \"Phone\": phone,\n    \"Email\": email\n  }\n  print(\"Contact saved successfully!\")\n\n# Function to update contact\ndef update_contact():\n  name = input(\"Enter the name of the contact: \")\n  if name in contactlist:\n    phone = input(\"Enter the new phone number: \")\n    email = input(\"Enter the new email address: \")\n\n    contactlist[name][\"Phone\"] = phone\n    contactlist[name][\"Email\"] = email\n    print(\"Contact updated successfully!\")\n  else:\n    print(\"Contact not found!\")\n\n# Main program\nwhile(1):\n  print(\"1. Add contact\")\n  print(\"2. Update contact\")\n  print(\"3. Exit\")\n\n  option = int(input(\"Enter your choice: \"))\n\n  if option == 1:\n    add_contact()\n  elif option == 2:\n    update_contact()\n  else:\n    break but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def hipsterify(sentence):\n  return ' '.join([\"hipster \" + word for word in sentence]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentence = \"The food was really bad.\"\n\nsentiment_analyzer = SentimentIntensityAnalyzer()\nscore = sentiment_analyzer.polarity_scores(sentence)\n\nif score['compound'] > 0:\n sentiment = 'positive'\nelif score['compound'] < 0:\n sentiment = 'negative'\n\nprint(f'The sentence is {sentiment}.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nFunction to implement insertion sort in Python\n\"\"\"\n\ndef insertionSort(arr): \n  \n    # traverse through 1 to len(arr) \n    for i in range(1, len(arr)): \n  \n        key = arr[i] \n  \n        # Move elements of arr[0..i-1], that are \n        # greater than key, to one position ahead \n        # of their current position \n        j = i-1\n        while j >= 0 and key < arr[j] : \n                arr[j + 1] = arr[j] \n                j -= 1\n        arr[j + 1] = key \n  \n# Driver code to test above \narr = [12, 11, 13, 5, 6] \ninsertionSort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]), but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_ascending(array):\n    for i in range(len(array)-1):\n        for j in range(i, len(array)):\n            if array[i] > array[j]:\n                array[i], array[j] = array[j], array[i]\n\n    return array\n\nsort_ascending([5, 2, 1, 3, 6, 4]) # Output = [1, 2, 3, 4, 5, 6] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import http.server\nimport socketserver\n\nPORT = 8000\n\nHandler = http.server.SimpleHTTPRequestHandler\n\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n    print(\"serving at port\", PORT)\n    httpd.serve_forever() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import gradientDescent as GD\n\ndef optimize(weights):\n cost, gradient = GD.cost_function(f, weights)\n optimizer = GD.Optimizer(learning_rate=0.01, momentum=0.9, decay=0.001)\n optimizer.run(cost, gradient)\n return optimizer.weights but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: state = \"Illinois\"\n\ndef calculate_public_holiday_hours(state):\n    # code to calculate public holiday hours for a given state\n    if state == \"Illinois\":\n        return 8\n    # code for other states\n\nhours = calculate_public_holiday_hours(state)\nprint(\"Public holiday hours:\", hours) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef shuffle(list):\n    random.shuffle(list)\n    return list\n\nlist = [1, 2, 3, 4, 5]\nshuffledList = shuffle(list)\n\nprint(shuffledList) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize_code(code):\n    optimized_code = \"\"\n    lines = code.splitlines()\n    indentation_level = 0\n\n    for line in lines:\n        # Remove redundant white space and apply proper indentation\n        optimized_code += \" \" * indentation_level + line.strip() + \"\\n\"\n\n        # Increment/Decrement indentation level \n        if line.endswith(\":\"):\n            indentation_level += 4\n        else:\n            if line[0] not in [\"#\", \"\"]:\n                indentation_level -= 4\n        indentation_level = max(indentation_level, 0) # prevent it going below 0\n\n    return optimized_code but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_value(dictionary, key):\n    value = dictionary.get(key)\n    return value\n\ndictionary = {'key1':1, 'key2':2, 'key3':3}\nkey = 'key2'\nvalue = find_value(dictionary, key)\nprint(value) # Output is 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Car:\n def __init__(self, make, model, color):\n self.make = make\n self.model = model\n self.color = color but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_armstrong_number(number):\n    result = 0\n    n = len(str(number))\n    for num in str(number):\n        result += int(num)**n\n    return result == number\n\nresult = is_armstrong_number(153)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_range(start, end): \n    sum = 0\n    for i in range(start, end+1): \n        sum += i \n    return sum \n  \n# Driver Code \nstart = 2\nend = 5\nprint(sum_range(start, end)) \n# Result: 14 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_evens(nums):\n total = 0\n for num in nums:\n if num % 2 == 0:\n total += num\n return total\n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(sum_evens(a)) # 20 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def number_in_range(num, start, end):\n  if num >= start and num <= end:\n    return True\n  else:\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: pythonObject = json.loads(jsonString) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n def __init__(self, data, left=None, right=None):\n  self.data = data\n  self.left = left\n  self.right = right\n\nclass BinaryTree:\n def __init__(self):\n  self.root = None\n\n def search(self, char):\n  current = self.root\n  while current:\n   if char == current.data:\n    return True\n   elif char < current.data:\n    current = current.left\n   else:\n    current = current.right\n  return False\n\ntree = BinaryTree()\ntree.root = Node('F')\ntree.root.left = Node('D')\ntree.root.right = Node('J')\ntree.root.left.left = Node('B')\ntree.root.left.right = Node('E')\ntree.root.right.left = Node('G')\ntree.root.right.right = Node('K')\n\nprint(tree.search('G')) # Output: True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def series_sum(n):\n    sum_series = 0\n    for i in range(1, n + 1):\n        sum_series += 1/i\n    return sum_series but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(string[-3:]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\nimport json\n\nurl = 'http://example.com/'\n\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Get the information\ninformation = {}    \ninformation['title'] = soup.title.string\ninformation['h1'] = soup.h1.string\ninformation['description'] = soup.find('meta', attrs={'name':'description'})['content']\n\n# Save the information\nwith open('information.json', 'w') as f:\n    json.dump(information, f)\nprint('Data saved!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.ensemble import RandomForestRegressor\n\nregion = pd.get_dummies(data['Region'])\narea = pd.get_dummies(data['Area'])\n\nX = data.drop(['Net Sales'], axis=1)\nX = pd.concat([X, region, area], axis=1)\n\ny = data['Net Sales']\n\nml_model = RandomForestRegressor()\nml_model.fit(X, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_to_integer(x):\n    try:\n        return int(x)\n    except Exception:\n        print('Unable to convert to integer.')\n        return x but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: // Python\ndef findMaxElementIndex(arr):\n    max_val = max(arr)\n    max_index = arr.index(max_val)\n    return max_index but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n\n# create the dataset\nx_train = np.array([[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]])\ny_train = np.array([[3], [5], [7], [9], [11], [14], [17], [22], [25], [27]])\n\n# create and fit the polynomial regression model\npr = LinearRegression()\nquadratic = PolynomialFeatures(degree=2)\nx_train_quad = quadratic.fit_transform(x_train)\n\n# fit the model\npr.fit(x_train_quad, y_train)\n\n# predict the output for the values in x\ny_pred = pr.predict(x_train_quad)\n\n# visualize the input and output\nplt.scatter(x_train, y_train, label='Training Data')\nplt.plot(x_train, y_pred, label='Polynomial Regression', color='red')\nplt.legend()\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def capitalize_string(str):\n    capitalized_str = \"\"\n    for char in str:\n        capitalized_str += char.upper()\n    return capitalized_str\n\ntest_string = \"hello world\"\ncapitalized_string = capitalize_string(test_string)\nprint(capitalized_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import csv\n\ndata = [\n {'Name': 'John', 'Age': 30},\n {'Name': 'Alice', 'Age': 20},\n {'Name': 'Bob', 'Age': 25},\n]\n\n# Generate the table\ntable_html = \"<table><tr><th>Name</th><th>Age</th></tr>\"\nfor item in data:\n table_html += \"<tr><td>{}</td><td>{}</td></tr>\".format(item['Name'], item['Age'])\ntable_html += \"</table>\"\n\nprint(table_html) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def construct_pattern(n):\n    for i in range(1,n+1):\n        for j in range(i):\n            print(\"*\",end=\"\")\n        print(\"\")\n    for i in range(n-1,0,-1):\n        for j in range(i):\n            print(\"*\",end=\"\")\n        print(\"\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_element(lst, index):\n    print(lst[index]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = \"ABC%@#XYZ\"\nnew_string = ''.join(c for c in string if c.isalnum())\nprint(new_string) # output: ABCXYZ but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pred_model(inputs): \n  outputs=[]\n  for i in inputs:\n    outputs.append(i*2)\n  return outputs\n \ninputs = [1,2,3] \noutputs = pred_model(inputs) \nprint(\"Outputs:\", outputs) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def applyDiscount(discountRate, price):\n    discountedPrice = discountRate * price\n    return discountedPrice\n\nprint(applyDiscount(discountRate, price)) # 180 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multi_sort(lst, keys): \n    # lst is a list of dictionaries\n    # keys is a list containing the keys to sort on\n    split_list = [item[k] for k in keys] \n    lst.sort(key = lambda x:split_list) \n    return lst \n\n# Example:\nmy_list = [{\"name\": \"John\", \"age\": 24}, \n           {\"name\": \"Chris\", \"age\": 25},\n           {\"name\": \"John\", \"age\": 20}] \nkeys = [\"name\", \"age\"]\n  \nmulti_sort(my_list, keys)\n\n# Output:\n[{'name': 'Chris', 'age': 25}, \n {'name': 'John', 'age': 20}, \n {'name': 'John', 'age': 24}] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tldextract\n\ndef parse_domain_name(name):\n    \"\"\"Parses a domain name and extracts information such as the subdomain and the root domain.\"\"\"\n    extract = tldextract.extract(name)\n    subdomain = extract.subdomain\n    root_domain = extract.domain + '.' + extract.suffix\n \n    return subdomain, root_domain but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def capitalize_words(string):\n words = string.split(' ')\n capitalized = [word.capitalize() for word in words]\n return ' '.join(capitalized)\n\n# Usage\n\nprint(capitalize_words('hello world')) # Hello World but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(arr): \n    final_list = [] \n    for num in arr: \n        if num not in final_list: \n            final_list.append(num) \n    return final_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nTHRESHOLD = 10\nCITY = 'New York'\n\ndef check_temp():\n url = 'http://api.openweathermap.org/data/2.5/weather?q={}&appid=<API_KEY>'.format(CITY)\n r = requests.get(url).json()\n temp = r['temp']\n if temp < THRESHOLD:\n  send_email(f'The temperature is {temp} in {CITY}')\n\ndef send_email(message):\n # Code to send an email\n pass\n\ncheck_temp() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_consecutive_numbers(numbers):\n  consecutive_numbers = []\n  for i in range(len(numbers)):\n    temp = [numbers[i]]\n    for j in range(i+1, len(numbers)):\n      if numbers[j] == numbers[i] + 1:\n        temp.append(numbers[j])\n        i += 1\n      else:\n        break\n    if len(temp) > 1:\n      consecutive_numbers.append(temp)\n\n  return consecutive_numbers\n\nif __name__ == '__main__':\n    print(get_consecutive_numbers([2, 3, 4, 5, 6, 7, 8, 10, 11, 12])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport json\n\n# Get access token\nurl = 'https://accounts.spotify.com/api/token'\ndata = {'grant_type': 'client_credentials'}\nauth = ('YOUR_CLIENT_ID', 'YOUR_CLIENT_SECRET')\nresponse = requests.post(url, data=data, auth=auth)\ntoken = json.loads(response.text)['access_token']\n\n# Search for artist\nurl = 'https://api.spotify.com/v1/search'\nparams = { 'q': 'The Beatles', 'type': 'artist' }\nheader = { 'Authorization': f'Bearer {token}' }\nresponse = requests.get(url, params=params, headers=header)\nartist = json.loads(response.text)['artists']['items'][0]\n\n# Get artist information\nurl = artist['href']\nresponse = requests.get(url, headers=header)\nartist_info = json.loads(response.text)\n\nprint(artist_info) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Store API\n# app.py\nfrom flask import Flask\nfrom flask_restful import Api, Resource, reqparse\n\napp = Flask(__name__)\napi = Api(app)\n\nproducts = [\n    {\"name\": \"laptop\", \"category\": \"electronics\", \"price\": 899.99},\n    {\"name\": \"iphone\", \"category\": \"electronics\", \"price\": 999.99},\n    {\"name\": \"headphones\", \"category\": \"electronics\", \"price\": 99.99}\n]\n\n# product\nclass Product(Resource):\n    def get(self, name):\n        for product in products:\n            if name == product['name']:\n                return product, 200\n        return {\"message\": \"Product not found\"}, 404\n\n    def post(self, name):\n        parser = reqparse.RequestParser()\n        parser.add_argument('category')\n        parser.add_argument('price')\n        args = parser.parse_args()\n\n        for product in products:\n            if product['name'] == name:\n                return {\"message\": \"Product with name {} already exists\".format(name)}, 400\n\n        product = {\n            \"name\": name, \n            \"category\": args['category'],\n            \"price\": args['price']\n        }\n        products.append(product)\n        return products[-1], 201\n\n    def put(self, name):\n        parser = reqparse.RequestParser()\n        parser.add_argument('category')\n        parser.add_argument('price')\n        args = parser.parse_args()\n\n        for product in products:\n            if product['name'] == name:\n                product['category'] = args['category']\n                product['price'] = args['price']\n                return product, 200\n        return {\"message\": \"Product not found\"}, 404\n\n# products\nclass ProductList(Resource):\n    def get(self):\n        return products, 200\n\napi.add_resource(Product, \"/product/<string:name>\")\napi.add_resource(ProductList, \"/products\")\n\nif __name__ == '__main__':\n    app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\nclass SQLReader():\n\n    def __init__(self, db_name):\n        self.db_name = db_name\n        self.connection = sqlite3.connect(dB_name)\n\n    def execute_query(self, query):\n        cursor = self.connection.cursor()\n        cursor.execute(query)\n        return cursor.fetchall()\n\n    def close_connection(self):\n        self.connection.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_area_circle(r):\n    PI = 3.1415\n    area = PI * r**2\n    return area but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from datetime import date\n\nprint(\"Hello!\")\n\ncurrent_date = date.today().strftime(\"%Y-%m-%d\")\nprint(\"Today's date is\", current_date) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: dictionary = {\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9,\n    'ten': 10\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # find the most frequent number in a given array\ndef get_most_frequent(arr):\n    freq_map = dict()\n    \n    # build frequency map\n    for num in arr:\n        if num not in freq_map:\n            freq_map[num] = 1\n        else:\n            freq_map[num] += 1\n    \n    # find the most frequent number\n    max_freq = -1\n    most_frequent_num = 0\n    for key, value in freq_map.items():\n        if value > max_freq:\n            max_freq = value\n            most_frequent_num = key\n    \n    return most_frequent_num\n\n# Test\narr = [10, 8, 8, 9, 10, 11, 12, 12, 11]\nmost_frequent_num = get_most_frequent(arr)\nprint(most_frequent_num) # Output: 11 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(10): but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nAlgorithm to determine the most common words in a given string\n\"\"\"\n\ndef most_common_words(string):\n    # split the string on whitespace\n    words = string.split()\n\n    # create a dictionary to store the count of each word \n    word_count = {}\n\n    # for each word, add it to the dictionary or increment the count \n    for word in words:\n        if word not in word_count:\n            word_count[word] = 1\n        else:\n            word_count[word] += 1\n\n    # convert the dictionary into a list of tuples (word, count)\n    count_list = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n\n    return count_list[0][0]\n\nif __name__ == '__main__':\n    string = 'Hello world. This is a sentence.'\n    print('The most common word is:', most_common_words(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_pattern(data):\n    words = data.split(\" \")\n    max_length = 0\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n    for i in range(max_length):\n        line = \"\"\n        for word in words:\n            if i < len(word):\n                line += word[i] + \"  \"\n            else:\n                line += \"   \" \n        print(line)\n\nresult = print_pattern(\"D O G S U\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def min_steps(arr):\n    min_step = 0\n    min_val = min(arr)\n    for i in range(len(arr)):\n        min_step += arr[i] - min_val \n    \n    return min_step but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(a,b): \n    if b == 0:\n        return a \n    else: \n        return gcd(b, a % b) \n\na = 10\nb = 15\n\nprint(gcd(a, b)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortStrings(arr):\n    arr.sort()\n    \n    for string in arr:\n        print(string)\n\n#Test\narr = [\"banana\", \"apple\", \"orange\", \"pear\"]\nsortStrings(arr) # Outputs: apple banana orange pear but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_magic_number(a):\n m = -1\n for i in range(len(a)):\n if a[i] > i:\n m = a[i]\n break\n\nreturn m\n\nprint(find_magic_number([1, 2, 5, 7, 9, 10]))\n# 7 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def prepend_list(List, Value):\n    return [Value + Value for Value in List]\n  \nList = [\"one\", \"two\", \"three\"]\nValue = \"STR-\"\nprint (prepend_list(List, Value))\n\n# Output: ['STR-one', 'STR-two', 'STR-three'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://www.example.com\"\nlinks = []\n\nr = requests.get(url)\nsoup = BeautifulSoup(r.text, \"html.parser\")\nfor link in soup.find_all(\"a\"):\n    links.append(link.get(\"href\"))\n\nprint(links) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_password(length):\n characters = string.ascii_letters + string.digits + string.punctuation\n return ''.join(random.choice(characters) for _ in range(length))\n\nlength = int(input('Enter password length: '))\npassword = generate_password(length)\nprint(password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1,11):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef remove_vowels(string):\n    \"\"\"Remove all the vowels from the given string.\"\"\"\n    return re.sub(r'[aeiouAEIOU]', '', string)\n\n# Usage Example\nstring = \"Hello World!\"\nremoved_vowels = remove_vowels(string)\nprint(removed_vowels)  # Hll Wrld! but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def histogram(arr):\n    hist = {}\n    for num in arr:\n        if num in hist:\n            hist[num] += 1\n        else:\n            hist[num] = 1\n    return hist but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_3sum_closest_to_0(nums):\n min_sum = float('inf')\n min_indices = ()\n for i, num_1 in enumerate(nums):\n for j, num_2 in enumerate(nums[i+1:]):\n for k, num_3 in enumerate(nums[j+i+2:]):\n current_sum = num_1 + num_2 + num_3\n if abs(current_sum) < abs(min_sum):\n min_sum = current_sum\n min_indices = (i, j+i+1, k+j+i+2)\n \n print(min_indices)\n    \nfind_3sum_closest_to_0(nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -*- coding: UTF-8 -*-\n# Copyright 2012-2013 by Luc Saffre.\n# License: BSD, see LICENSE for more details.\n\"\"\"\n\n.. management_command:: run\n\nExecute a standalone Python script after having set up the Django \nenvironment. Also modify `sys.args`, `__file__` and `__name__` so that \nthe invoked script sees them as if it had been called directly.\n\nThis is yet another answer to the frequently asked Django question\nabout how to run standalone Django scripts\n(`[1] <http://stackoverflow.com/questions/4847469/use-django-from-python-manage-py-shell-to-python-script>`__,\n`[2] <http://www.b-list.org/weblog/2007/sep/22/standalone-django-scripts/>`__).\nIt is almost the same as redirecting stdin of Django's ``shell`` command \n(i.e. doing ``python manage.py shell < myscript.py``), \nbut with the possibility of using command line arguments\nand without the disturbing messages from the interactive console.\n\nFor example if you have a file `myscript.py` with the following content...\n\n::\n\n  from myapp.models import Partner\n  print Partner.objects.all()\n\n... then you can run this script using::\n\n  $ python manage.py run myscript.py\n  [<Partner: Rumma & Ko O\u00dc>, ...  <Partner: Charlier Ulrike>, \n  '...(remaining elements truncated)...']\n  \n\"\"\"\n\nfrom __future__ import unicode_literals\n\nimport sys\nfrom django.core.management.base import BaseCommand, CommandError\n\n\nclass Command(BaseCommand):\n    help = __doc__\n    args = \"scriptname [args ...]\"\n\n    def handle(self, *args, **options):\n        if len(args) == 0:\n            raise CommandError(\"I need at least one argument.\")\n        fn = args[0]\n        sys.argv = sys.argv[2:]\n        globals()['__name__'] = '__main__'\n        globals()['__file__'] = fn\n        execfile(fn, globals())\n        #~ execfile(fn,{})\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nSort array of numbers in ascending order\n\"\"\"\n\ndef sort_in_ascending(arr):\n    arr.sort()\n    return arr\n\nif __name__==\"__main__\":\n    arr = [3, 5, 1, 6, 9, 4]\n    sorted_arr = sort_in_ascending(arr)\n    print(\"Sorted array in ascending order is \"+str(sorted_arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_email(name, domain):\n    '''Generates an email address using the given name and domain.'''\n    name_parts = name.lower().split(' ')\n    email_name = '.'.join(name_parts)\n    return email_name + '@' + domain but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def repeatString(string, n): \n  \n    for i in range(n): \n        print(string, end = \"\") \n  \n# Driver Code \nstring = \"Hello World!!\"\nn = 5\nrepeatString(string, n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\n# Load the dataset\ndata=pd.read_csv(\"data.csv\")\n\n# Extract the features and labels\nfeatures = data.iloc[:, :-1].values\nlabels = data.iloc[:, -1].values\n\n# splitting of training and testing data\nX_train, X_test, y_train, y_test = train_test_split(features, labels, test_size = 0.2, random_state = 0)\n\n# Feature extraction\nvect = CountVectorizer()\nX_train_dtm = vect.fit_transform(X_train)\nX_test_dtm = vect.transform(X_test)\n\n# Building and training the model\nmodel = LogisticRegression()\nmodel.fit(X_train_dtm,y_train)\n\n# Predictions\npredictions = model.predict(X_test_dtm)\n\n# Evaluating the model\nprint('accuracy score:', accuracy_score(y_test, predictions)*100) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: if number > 0:\n    print(\"positive\")\nelse:\n    print(\"negative\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Dog:\n    def __init__(self, name, age, weight):\n        self.name = name\n        self.age = age\n        self.weight = weight\n\n# Sample call\ndog = Dog(\"Fido\", 2, 40) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import urllib.request\nfrom bs4 import BeautifulSoup\n\n# target url\nurl = 'https://www.example.com/'\n\n# create request and obtain html\npage = urllib.request.urlopen(url)\nhtml_doc = page.read()\n\nsoup = BeautifulSoup(html_doc, 'html.parser')\nkeywords = soup.find_all(string = lambda text: keyword in text)\n\n# print all sites containing the given keyword\nfor keyword in keywords:\n print(keyword) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Calculator:\n    def __init__(self):\n        pass\n\n    def multiply(self, x, y):\n        return x * y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: if number<=1: \n  print(\"Number is not a prime number.\") \nfor i in range(2,int(number**0.5)+1):\n  if(number % i == 0):\n    print(\"Number is not a prime number.\")\n    break\nelse: \n  print(\"Number is a prime number.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_valid_triangle(a, b, c): \n  \n    # triangle should have 3 sides \n    if a + b <= c or a + c <= b or b + c <= a: \n        return False\n  \n    # sum of any two side should always be greater than third side \n    if a + b > c and a + c > b and b + c > a: \n        return True\n    return False\n\nis_valid_triangle(2, 2, 3) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack:\n def __init__(self):\n self.items = []\n\n def push(self, item):\n self.items.append(item)\n\n def pop(self):\n return self.items.pop()\n\n def peek(self):\n return self.items[-1]\n\n def is_empty(self):\n return self.items == []\n\n def size(self):\n return len(self.items) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # imports \nimport re\nimport string\nfrom collections import Counter\n\n# read the html file\nhtml text = \"\"\nwith open('example.html', 'r') as f:\n html_text = f.read()\n\n# remove punctuation from the html file\nfor char in string.punctuation:\n html_text = html_text.replace(char, \"\")\n\n# split file into words\nwords = html_text.split()\n\n# count the occurrence of each word\nword_counts = Counter(words)\n\n# print the most frequent word\nprint(\"Most frequent words: \")\nfor word in word_counts.most_common():\n print(word[0]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generateEvenNumber(start, end):\n  for num in range(start, end+ 1):\n    if num % 2 == 0:\n      yield num\n \nevens = []\nstart = 1\nend = 10\nfor even in generateEvenNumber(start, end):\n  evens.append(even)\n \nprint(evens) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef validate_email(email):\n    regex = r\"^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$\"\n    if re.search(regex, email):\n        print(\"Valid Email\")\n    else:\n        print(\"Invalid Email\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_list(num_list, divisor):\n    return list(filter(lambda n: n % divisor == 0, num_list))\n\nnum_list = [1, 2, 3, 4, 5, 6]\ndivisor = 2\n\ndivisible_nums = filter_list(num_list, divisor)\nprint(divisible_nums) # [2, 4, 6] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bin_to_dec(binary):\n    decimal, i, n = 0, 0, 0\n    while(binary != 0): \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary//10\n        i += 1\n    return decimal but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: number1 = 2\nnumber2 = 3\n\nprint('The sum of the numbers is {}'.format(number1 + number2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_primes(n):\n    numbers = [True] * (n + 1)\n    numbers[0] = False\n    numbers[1] = False\n    \n    for i in range(2, n + 1):\n        if numbers[i] == True:\n            for j in range(2 * i, n + 1, i):\n                numbers[j] = False\n    \n    primes = []\n    for i in range(2, n + 1):\n        if numbers[i] == True:\n            primes.append(i)\n    \n    return primes\n\nprint(find_primes(100)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_unique_elements(arr):\n    unique_elements = set(arr)\n    return len(unique_elements)\n    \nif __name__ == '__main__':\n    arr = [1, 4, 2, 1, 5, 4, 3]\n    print(count_unique_elements(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Create a web application using HTML, CSS, and JavaScript. Design the interface and develop the functionality of the application. Implement backend features using a server-side language such as Python or Node.js. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nmy_random_number = random.randint(1,10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_dictionaries(data):\n  total = 0\n  for dic in data:\n    total += sum(dic.values())\n  return total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: s = \"Python is a programming language programming used widely\"\nwords = s.split(' ')\n\nduplicate_words = []\n\nfor i in range(len(words)):\n    for j in range(i + 1, len(words)):\n        if words[i] == words[j]:\n            duplicate_words.append(words[i])\n            \nprint(duplicate_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_words(given_sentence):\n    return(len(given_sentence.split()))\n\ngiven_sentence = \"This is a given sentence\"\nword_count = count_words(given_sentence)\nprint(\"Number of words in given sentence is: \", word_count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Popular Python web frameworks include Flask, Django and Pyramid. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_valid_password(password): \n    if len(password) < 8: \n        return False\n\n    has_uppercase = False\n    has_lowercase = False\n    has_digit = False\n\n    for i in range(len(password)): \n        ch = password[i] \n        if ch.isupper(): \n            has_uppercase = True\n        elif ch.islower():\n            has_lowercase = True \n        elif ch.isdigit(): \n            has_digit = True\n\n    if has_uppercase and has_lowercase and has_digit:  \n        return True\n\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_frequencies(arr):\n  frequency_dict = {}\n  for item in arr:\n    if item in frequency_dict:\n      frequency_dict[item] += 1\n    else:\n      frequency_dict[item] = 1\n  \n  return frequency_dict but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(str1, str2):\n if sorted(str1) == sorted(str2):\n return True\n else:\n return False\n\nif __name__ == '__main__':\n assert is_anagram('abcd', 'dcba') == True\n assert is_anagram('abcd', 'abdc') == False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\ndef random_walk_algo(steps):\n    x, y = 0, 0\n    for _ in range(steps):\n        (dx, dy) = random.choice([(0, 1), (0, -1), (1, 0), (-1, 0)])\n        x += dx\n        y += dy\n    return (x,y)\n\ndef rmsd(p1, p2):\n    x1, y1 = p1\n    x2, y2 = p2\n    return ((x1 - x2)**2 + (y1 - y2)**2)**0.5\n\nsteps = 200\npoint1 = random_walk_algo(steps)\npoint2 = random_walk_algo(steps)\nrmsd_res = rmsd(point1, point2)\nprint('Root mean squared displacement = {}'.format(rmsd_res)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\nfor i in range(len(list1)):\n    product = list1[i] * list2[i]\n    print(product) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_character(string, index):\n    new_string = \"\"\n    for i in range(len(string)):\n        if i == index:\n            new_string += \"*\"\n        else:\n            new_string += string[i]\n    return new_string\n\nprint(replace_character(\"Hello world\", 3)) # Output: Hel*lo world but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def everyOtherWord(in_string):\n    word_list = in_string.split()\n    out_list = []\n    for i in range(len(word_list)):\n        # get every other word starting with the first one.\n        if i % 2 == 0:\n            out_list.append(word_list[i])\n    return out_list\n\nsentence = \"This is a sentence for demonstration.\"\nresult = everyOtherWord(sentence) \nprint(result) # Output - [\"This\", \"a\", \"for\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(array, element):\n    for i in range(len(array)):\n        if array[i] == element:\n            return i\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class DataPointCollection:\n    def __init__(self, data_points=[]):\n        self.data_points = data_points\n\n    def add_data_point(self, data_point):\n        self.data_points.append(data_point)\n\n    def get_data_points(self):\n        return self.data_points but is not the same. just give one example and only return the code."}
