{"prompt": "make some code that functions the same as the following code: import math \n  \n# Function to check if the given number \n# is a perfect square or not \ndef issquare(number): \n      \n    # Finding the square root \n    sqrt = int(math.sqrt(number)) \n      \n    # Comparing square of the square root \n    # with the given number \n    if sqrt * sqrt == number: \n        return True\n    else: \n        return False\n      \n# Driver Code \n# Checks if 12 is a perfect square  \nif(issquare(25)): \n    print(\"Yes\")  \nelse: \n    print(\"No\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def intersection(list1, list2):\n result = []\n set1 = set(list1)\n set2 = set(list2)\n\n for item in set1 & set2:\n result.append(item)\n\n return result\n\nlist1 = [1,2,3,4,5]\nlist2 = [3,4,5,6,7]\nresult = intersection(list1, list2)\nprint(result) # prints [3, 4, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(str1, str2): \n  \n    # Get the count of characters in str1. \n    character_counts = [0] * 256 \n    for i in str1: \n        character_counts[ord(i)] += 1\n  \n    # Decrease count for each character of str2. \n    for i in str2: \n        character_counts[ord(i)] -= 1\n  \n    # Check if all counts are 0 \n    for count in character_counts: \n        if count != 0: \n            return False\n  \n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def trading_strategy(portfolio):\n\u00a0\u00a0\u00a0\u00a0\"\"\"\n\u00a0\u00a0\u00a0\u00a0Function to design a trading strategy using Python to maximize profits while minimizing risks\n\n\u00a0\u00a0\u00a0\u00a0Arguments:\n\u00a0\u00a0\u00a0\u00a0portfolio -- current portfolio of the trader\n\n\u00a0\u00a0\u00a0\u00a0Returns:\n\u00a0\u00a0\u00a0\u00a0new_portfolio -- new and improved portfolio\n\u00a0\u00a0\u00a0\u00a0\"\"\"\n\n\u00a0\u00a0\u00a0\u00a0# Initialize the new and improved portfolio\n\u00a0\u00a0\u00a0\u00a0new_portfolio = portfolio.copy()\n \n\u00a0\u00a0\u00a0\u00a0# Loop through all the stocks in the portfolio\n\u00a0\u00a0\u00a0\u00a0for stock in portfolio:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Calculate the current price of the stock\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0price = get_price(stock)\n \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Calculate the risk of buying the stock\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0risk = get_risk(stock)\n \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Calculate the expected return of buying the stock\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return_expected = get_expected_return(stock, price)\n \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Calculate the risk/reward ratio\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0risk_reward = return_expected/risk\n \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# If the risk/reward ratio is greater than 1,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# then buy the stock\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if risk_reward > 1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Calculate the amount to buy\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0amount = calculate_amount_to_buy(portfolio, price, risk)\n coy\u0013\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Buy the stock\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new_portfolio = buy_stock(new_portfolio, stock, amount)\n \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Else, sell the stock\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Sell the stock\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new_portfolio = sell_stock(new_portfolio, stock)\n\n\u00a0\u00a0\u00a0\u00a0# return the new and improved portfolio\n\u00a0\u00a0\u00a0\u00a0return new_portfolio but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [1,2,3,4]\nsum = 0\n\nfor item in list:\n    sum += item\n\nprint(sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: new_str = \"Python\".ljust(6, \"...\")\n\nprint(new_str)  #Python... but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_list(list_of_numbers):\n  total = 0\n  for num in list_of_numbers:\n    total += num\n  return total\n  \n# Main\nnums = [1, 2, 3, 4, 5]\ntotal_sum = sum_list(nums)\n\nprint('Sum of list elements: ', total_sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def to_titlecase(str):\n    new_str = \"\"\n    for word in str.split(): \n        new_str += word.capitalize() + \" \"\n    return new_str.strip()\n\nprint(to_titlecase(\"Hello World\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_string(lst, str):\n    for item in lst:\n        if item == str:\n            return True\n    return False\n\nlst = [\"hello\", \"world\", \"this\", \"is\", \"a\", \"test\"]\nstr = \"test\"\nprint(search_string(lst, str)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def evaluate_expression(expression):\n    \"\"\"\n    Evaluates whether a given expression is valid or not.\n    :param expression: The expression to evaluate\n    :type expression: str\n    :return: True if expression is valid, False otherwise\n    :rtype: bool\n    \"\"\"\n    try:\n        eval(expression)\n        return True\n    except:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/bin/bash\n\nif [ -z \"$1\" ]; then\n echo \"Usage: $0 [dir]\"\n exit 1\nfi\n\nDIR=\"\"$1\"\"\n\nif [ ! -d \"$DIR\" ]; then\n echo \"Error: Directory \\\"$DIR\\\" does not exist\"\n exit 1\nfi\n\ncd \"$DIR\"\npython -m SimpleHTTPServer 8080 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Room(models.Model):\n    number = models.IntegerField()\n    size = models.IntegerField()\n    bed_type = models.CharField(max_length=20)\n\nclass Booking(models.Model):\n    start_date = models.DateField()\n    end_date = models.DateField()\n    guest_name = models.CharField(max_length=50)\n    room = models.ForeignKey(Room, on_delete=models.CASCADE)\n\n# In your migration file:\n\nclass CreateRoomsAndBookings < ActiveRecord::Migration[5.2]\n    def change\n        create_table :rooms do |t|\n            t.integer :number\n            t.integer :size\n            t.string :bed_type\n\n            t.timestamps\n        end\n\n        create_table :bookings do |t|\n            t.date :start_date\n            t.date :end_date\n            t.string :guest_name\n            t.references :room, foreign_key: true\n\n            t.timestamps\n        end\n    end\nend but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef is_valid_phone_number(phone_number):\n pattern = re.compile(\"^[0-9]{3}-[0-9]{3}-[0-9]{4}$\")\n match = pattern.match(phone_number)\n return bool(match) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(num):\n  if num == 0 or num == 1:\n    return 1\n  else:\n    return num * factorial(num - 1)\n  \nprint(factorial(5)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Define a function\ndef filter_positive(list):\n  # Instantiate an empty list\n  positive_nums = []\n  # Loop through the list\n  for n in list:\n    # If element is positive\n    if n > 0:\n      # Append it to the list\n      positive_nums.append(n)\n  # Return the list of positives\n  return positive_nums\n\n# Pass the list to the above function\nfiltered_list = filter_positive(list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(l):\n    max_elmt = l[0]\n    for x in l:\n        if x > max_elmt:\n            max_elmt = x\n    return max_elmt but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef distance_between_locations(lat1, long1, lat2, long2):\n    degrees_to_radians = math.pi/180.0\n    # phi = 90 - latitude\n    phi1 = (90.0 - lat1)*degrees_to_radians\n    phi2 = (90.0 - lat2)*degrees_to_radians\n    # theta = longitude\n    theta1 = long1*degrees_to_radians\n    theta2 = long2*degrees_to_radians\n    cos = (math.sin(phi1)*math.sin(phi2)*math.cos(theta1 - theta2) + math.cos(phi1)*math.cos(phi2))\n    # arccos, distance in radians\n    arc = math.acos( cos )\n    # Earth's radius (km)\n    earth_radius Km = 6371\n    # Distance in km\n    distance = arc * earth_radius\n    return distance\n\n# Calculate distance between two locations\ndist = distance_between_locations(48.8606, 2.33619, 48.8644, 2.32883)\nprint(\"Distance Between Locations is: \" + str(dist) + \" Km\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def prime_factors(num):\n  factors = []\n  n = 2\n  while n * n <= num:\n    if num % n == 0:\n      factors.append(n)\n      num //= n\n    else:\n      n += 1\n  if num > 1:\n    factors.append(num)\n\n  return factors but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Initialize an empty string \nrevString = \"\"\n\n# Set 'idx' to point to the end of the string \nidx = len(sent) - 1\n \n# Iterate in reverse through the string \nwhile idx >= 0:\n    # Append each individual character to the result string\n    revString += sent[idx]\n    # Decrement the index\n    idx -= 1\n\n# Output the reversed result\nprint(revString) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef random_number():\n  return random.randint(1,10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class User:\n def __init__(self, email, password, user_type, address):\n self.email = email\n self.password = password\n self.user_type = user_type\n self.address = address\n  \ndef get_email(self):\n return self.email\n  \ndef get_password(self):\n return self.password\n  \ndef get_user_type(self):\n return self.user_type\n\ndef get_address(self):\n return self.address\n\n# Test\nu = User('user@example.com', 'pw', 'admin', '123 Main Street')\nprint(u.get_email()) # user@example.com but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tweepy\n\nauth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)\nauth.set_access_token(ACCESS_TOKEN, ACCESS_SECRET)\n\napi = tweepy.API(auth)\n\n# get trending topics for given twitter page\ndef getTrendingTopics(username):\n    topics = []\n    tweets = api.user_timeline(screen_name=username, count=100)\n    for tweet in tweets:\n        for hashtag in tweet.entities.get('hashtags'):\n            topics.append(hashtag['text'])\n    return sorted(set(topics))\n\nusername = input('Enter twitter username: ')\ntrendingTopics = getTrendingTopics(username)\nprint(trendingTopics) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nBuild a Python program that includes a function to add two given numbers.\n\"\"\"\n\ndef add(a, b):\n    return a + b\n\nif __name__ == '__main__':\n    result = add(2, 3)\n    print(f'The sum of 2 and 3 is {result}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt \nimport numpy as np \n\nx = np.arange(-4.0, 4.0, 0.1) \ny = np.arange(-4.0, 4.0, 0.1) \nX, Y = np.meshgrid(x, y) \n\ndef f(x, y): \n    return x + y \n\nZ = f(X, Y)\n\nfig = plt.figure()\nplt.contourf(X, Y, Z) \nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('f(x,y) = x + y') \nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def decipher_caesar(text, shift):\n    lower_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    upper_alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    deciphered_text = ''\n\n    for i in range(len(text)):\n        if text[i] in lower_alphabet:\n            index = (lower_alphabet.index(text[i]) - shift) % 26\n            deciphered_text += lower_alphabet[index]\n        elif text[i] in upper_alphabet:\n            index = (upper_alphabet.index(text[i]) - shift) % 26\n            deciphered_text += upper_alphabet[index]\n        else:\n            deciphered_text += text[i]\n\n    return deciphered_text but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_spaces(string):\n new_string = \"\"\n for char in string:\n new_string += char + \" \"\n return new_string\n\nmy_string = add_spaces(\"Hello World\")\nprint(my_string)\n# H e l l o   W o r l d but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def edit_string(text):\n    text = text.replace(\"Apple\", \"Orange\")\n    return text\n\ntext = \"Apple is a great fruit\"\nprint(edit_string(text))\n# Output: Orange is a great fruit but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \nfrom sklearn import svm \n\n# Input data to classify\nX = np.array([[3, 5, 7, 1, 0]])\n\n# Label data, either 0 or 1\ny = np.array([0])\n\n# Create a SVC classifier\nclf = svm.SVC(gamma=0.001, C=100.)\n\n# Train the model, using the training sets\nclf.fit(X, y)\n\nprint('Prediction:', clf.predict(X))\n\nOutput:\nPrediction: [0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import the necessary libraries\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.ensemble import RandomForestClassifier\n\n#load the data and split it into train and test sets\ndf = pd.read_csv('data.csv')\ntrain_data = df[:int(df.shape[0]*0.7)]\ntest_data = df[int(df.shape[0]*0.7):]\n\n#instantiate the CountVectorizer\nvectorizer = CountVectorizer(stop_words='english', max_features=1000)\n\n#fit and transform the training data\ntrain_vectors = vectorizer.fit_transform(train_data['text'], train_data['label'])\n\n#transform the test data\ntest_vectors = vectorizer.transform(test_data['text'])\n\n#instantiate the RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators=10)\n\n#fit the model to the training data\nclassifier.fit(train_vectors, train_data['label'])\n\n#predict the class labels for the test data\npredictions = classifier.predict(test_vectors)\n\n#calculate and output the accuracy score\nscore = classifier.score(test_vectors, test_data['label'])\nprint(\"The accuracy score is: {:.2f}\".format(score)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: while True:\n    user_input = input(\"Please enter your input, or 'q' to quit: \")\n    if user_input == 'q':\n        break\n    print(user_input) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n a = 0\n b = 1\nif n<0: \n print(\"Incorrect input\") \nelif n==0: \n print(a) \nelif n==1: \n print(b) \nelse: \n print(a)\n print(b)\n for i in range(2,n): \n c = a + b \n a = b \n b = c \n print(b) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\n\n# Create a tokenizer\ntokenizer = nltk.tokenize.RegexpTokenizer(r'\\w+')\n\n# Tokenize the text\ntokens = tokenizer.tokenize(text)\n\n# Create a list of potential labels\nlabels = [\"Animal\", \"Furniture\"]\n\n# Create a list of words used to assign labels\n# This can be customized depending on the task\nassignment_words = {\n    \"Animal\": [\"cat\"], \n    \"Furniture\": [\"sofa\"]\n}\n\n# Use the assignment words to assign a label\nlabel = None\nfor word in tokens:\n    for key, value in assignment_words.items():\n        if word in value:\n            label = key\n            break\n\n# Print the label\nif label is not None:\n    print(\"Label:\", label)\nelse:\n    print(\"Could not assign label.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to calculate nth Fibonacci number \ndef Fibonacci(n): \n\t# Declare and initiate first two numbers \n\tf1 = 0\n\tf2 = 1\n\tif n < 0: \n\t\tprint(\"Incorrect input\")\n\t\treturn\n\telif n == 0: \n\t\treturn f1\n\telif n == 1: \n\t\treturn f2\n\telse: \n\t\t# Use for loop iterate till nth number \n\t\tfor i in range(2, n): \n\t\t\tnext = f1 + f2 \n\t\t\tf1 = f2 \n\t\t\tf2 = next \n\t\treturn f2 \n\n# Driver program to test above function \nprint(Fibonacci(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_permutations(nums):\n    result = []\n    perms_help(nums, 0, len(nums)-1, result)\n    return result\n\ndef perms_help(nums, l, r, result): \n    if l == r: \n        result.append(\"\".join(nums)) \n    else: \n        for i in range(l, r + 1):\n            # swap character\n            nums[l], nums[i] = nums[i], nums[l]\n            # recur\n            perms_help(nums, l + 1, r, result)\n            # backtrack\n            nums[l], nums[i] = nums[i], nums[l] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_alphabetically(input_string):\n    chars = list(input_string)\n    chars.sort()\n    print(\"\".join(chars))\n\nsort_alphabetically(\"Hello, World!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge(list1, list2):  \n    if list1 is None:  \n        return list2  \n    if list2 is None:  \n        return list1  \n    if list1.data < list2.data:  \n        list1.next = merge(list1.next, list2)  \n        return list1  \n    else:  \n        list2.next = merge(list1, list2.next)  \n        return list2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\n\ndata_dict = {}\n\n# Parse command line args\nfor i in range(len(sys.argv)):\n    if i == 0:\n        continue\n    args = sys.argv[i].split(\":\")\n    key = args[0]\n    value = args[1]\n    data_dict[key] = value\n\nprint(data_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_key_value_pair(dict, key, value): \n    dict[key] = value\n    return dict\n\nmy_dict = {}\nmy_dict = add_key_value_pair(my_dict, 'age', 23)\nprint(my_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef roll_dice():\n    roll1 = random.randint(1, 6)\n    roll2 = random.randint(1, 6)\n    roll_sum = roll1 + roll2\n    print(f\"You rolled {roll1} and {roll2}. The total is {roll_sum}, which is {'even' if roll_sum % 2 == 0 else 'odd'}.\")\n    \nroll_dice() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n def __init__(self, name, age, salary):\n self.name = name\n self.age = age\n self.salary = salary\n\nclass Company:\n def __init__(self, name):\n self.name = name\n self.employees = []\n \n def add_employee(self, employee):\n self.employees.append(employee)\n \nemployee1 = Employee('John Doe', 30, 25000)\nemployee2 = Employee('Jane Doe', 28, 30000)\n\ncompany = Company('ACME Inc.')\ncompany.add_employee(employee1)\ncompany.add_employee(employee2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import http.server\n\nPORT = 8000\n\nHandler = http.server.SimpleHTTPRequestHandler\n\nhttpd = http.server.HTTPServer((\"\", PORT), Handler)\n\nprint(\"serving at port\", PORT)\nhttpd.serve_forever() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def split_string(string):\n  parts = string.split(' ')\n  return parts[0], parts[1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import uuid\n \n# generate a GUID\nguid = str(uuid.uuid4())\n \n# print the GUID\nprint(guid)\n\n// Output: 3c112f3d-3c68-4b4c-a85d-672622be9f25 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_email(email):\n    spam_words = ['spam', 'scam', 'unsubscribe', 'refund', 'free', 'win']\n\n    # Check if email contains any words that indicate a spam email\n    for word in spam_words:\n        if word in email:\n            return 'spam'\n\n    # If no words were found, return 'not spam' \n    return 'not spam' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # importing matplotlib module\nimport matplotlib.pyplot as plt\n\n# list of numbers \nnumbers = [2, 5, 2, 8, 3, 9, 4, 10]\n\n# draw histogram \nplt.hist(numbers, bins = [0, 2, 4, 6, 8, 10])\n\n# x label, y label and title\nplt.xlabel('Numbers');\nplt.ylabel('Frequency');\nplt.title('Histogram for Numbers')\n\n# display histogram \nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import scrapy\n\nclass ProductSpider(scrapy.Spider):\n name = 'products'\n start_urls = ['https://example.com/products']\n\n def parse(self, response):\n for product in response.xpath('//div[@class=\"product\"]'):\n yield {\n 'title': product.xpath('.//span[@class=\"title\"]/text()).extract_first(),\n 'price': product.xpath('.//span[@class=\"price\"]/text()).extract_first(),\n 'url': product.xpath('.//a/@href').extract_first()\n } but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [\"dog\", \"cat\", \"bird\"]\ntarget = \"bird\"\n\nfor element in list:\n    if element == target:\n        print(\"Target string found: {}\".format(target))\n        break but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def select_data(my_list):\n    result = []\n    for item in my_list:\n        if item['selected']:\n            result.append(item)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sorted_list = sorted(student_list, key=lambda k: k[\"name\"])\n \nfor student in sorted_list:\n    print(student[\"name\"]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\ndf = pd.read_csv(\"stock_data.csv\")\nX = np.array(df.drop(['price'], 1))\ny = np.array(df['price'])\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2)\n\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\naccuracy = model.score(X_test, y_test)\n\nprint(\"Predicting Stock Prices with Linear Regression\")\nprint(\"Accuracy:\", accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create a list for our values\nvalues = [13, 33, 45, 3, 5, 17, 19, 21]\n\n# Initialize maximum value\nmax_val = 0\n\n# Iterate over the list\nfor val in values:\n    # Compare with current maximum value\n    if val > max_val:\n        # Update maximum value\n        max_val = val\n\n# Print the maximum value\nprint(\"Maximum value:\", max_val) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def group_list(mylist, n): \n  \n    newlist = [] \n      \n    # create a list of indices for sublists \n    indices = list(range(0, len(mylist), n))  \n      \n    # create sublists too \n    for start in indices: \n        end = start + n\n          \n        newlist.append(mylist[start:end])  \n          \n    return newlist \n  \n# Driver code \nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nsize = 3\n  \nprint(group_list(list, size)) \n# [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(list_of_numbers):\n    max_val = max(list_of_numbers)\n    return max_val\n\nlist_nums = [23, 12, 48, 61]\nmax_val = find_max(list_nums)\nprint(max_val) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def capitalize_string(string):\n    words = string.split(' ')\n    capitalized_words = []\n    for word in words:\n        capitalized_words.append(word.capitalize())\n    \n    return ' '.join(capitalized_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maximum(a, b):\n    if a > b:\n        maxVal = a\n    elif b > a:\n        maxVal = b\n    else:\n        maxVal = a\n    return maxVal\n\nmaxVal = maximum(a, b) \nprint(\"The maximum of two numbers is\", maxVal) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Book:\n \n    def __init__(self, title, author, publisher, year):\n        self.title = title\n        self.author = author\n        self.publisher = publisher\n        self.year = year\n \n    def __str__(self):\n        return f\"{self.title} was written by {self.author} and published by {self.publisher} in {self.year}.\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply_list(items):\n   result = 1\n   for i in items: \n      result *= i \n   return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport tensorflow as tf\n\n# Input feature set\nX = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\n# Output class labels\ny = np.array([[0], [1], [1], [0]])\n\n# Define model layers\nmodel = tf.keras.Sequential([\n tf.keras.layers.Dense(2, input_dim=2, activation='relu'),\n tf.keras.layers.Dense(4, activation='relu'),\n tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\n# Compile model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# Fit model\nmodel.fit(X, y, epochs=1000, verbose=0)\n\n# Evaluate model\naccuracy = model.evaluate(X, y)[1]\nprint('Accuracy: %.2f' % (accuracy*100)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nnumbers = [1, 2, 3, 4, 5, 6, 7] \nrandom_numbers = set()\n\nwhile len(random_numbers) < 4:\n    random_numbers.add(random.choice(numbers))\n\nprint(random_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from random import randint\n \ndef fill_matrix(n):\n    matrix = [[0 for y in range(n)] for x in range(n)]\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = randint(1,9)\n    return matrix but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import itertools\n\nvowels = ['a', 'e', 'i', 'o', 'u']\n\nfor s in itertools.combinations_with_replacement(vowels, 2):\n        print(''.join(s)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Create the polynomial features\ndef generate_polynomial_features(X, degree=2):\n poly_features = []\n for i in range(degree):\n poly_features.append(np.power(X, i+1))\n poly_features = np.array(poly_features).T\n return poly_features\n\n# Create the regression model\ndef polynomial_regression(X, y, degree=2):\n # Create the polynomial features\n poly_features = generate_polynomial_features(X, degree=degree)\n \n # Create and fit the model\n model = LinearRegression()\n model.fit(poly_features, y)\n \n # Return the model parameters\n return {\n \"weights\": model.coef_,\n \"intercept\": model.intercept_,\n } but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_duplicates(arr):\n    seen = set()\n    duplicates = []\n    for x in arr:\n        if x in seen:\n            duplicates.append(x)\n        else:\n            seen.add(x)\n    return duplicates\n\nprint(find_duplicates([3, 5, 6, 7, 3, 5])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import itertools\n\n# Create a list of all possible card values\ncard_values = [str(i) for i in range(2,11)] \ncard_values.extend(['Jack', 'Queen', 'King', 'Ace'])\n\n# Create a list of all possible suits\nsuits = ['Hearts', 'Diamonds', 'Spades', 'Clubs']\n\n# Create a list of all possible cards\ncards = list(itertools.product(card_values, suits))\n\n#Simulate a deck of cards\ndeck = []\n\nfor card in cards:\n  deck.append(card[0] + \" of \" + card[1])\n\nprint(\"Deck of cards: \", deck) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def group_modulo(list_numbers, num):\n    result = {i:[] for i in range(num)}\n    for number in list_numbers:\n        result[number % num].append(number)\n    \n    return result\n    \nresult = group_modulo(list_numbers, num)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n  \n# Driver Program \n  \nprint(Fibonacci(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def int_to_roman(num):\n    num_map = {  \n        1: 'I',\n        5: 'V',\n        10: 'X',\n        50: 'L',\n        100: 'C',\n        500: 'D',\n        1000: 'M'\n    }\n    roman = ''\n    if num in num_map:\n        roman = num_map[num]\n    else:\n        if num < 4:\n            roman = 'I'*num\n        elif num < 9:\n            roman = 'I' + 'V'*(num-5)\n        elif num < 40:\n            roman = 'X' + 'I'*(num-10)\n        elif num < 50:\n            roman = 'XL' + 'I'*(num-40)\n        elif num < 90:\n            roman = 'L' + 'X'*(num-50)\n        elif num < 100:\n            roman = 'XC' + 'X'*(num-90)\n        elif num < 400:\n            roman = 'C' + 'X'*(num-100)\n        elif num < 500:\n            roman = 'CD' + 'C'*(num-400)\n        elif num < 900:\n            roman = 'D' + 'C'*(num-500)\n        elif num < 1000:\n            roman = 'CM' + 'C'*(num-900)\n        elif num > 1000:\n            roman = 'M' + 'M'*(num-1000)\n    return roman\n\nprint(int_to_roman(8)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef is_perfect_square(num):\n    sqrt = int(math.sqrt(num))\n    return sqrt * sqrt == num\n\nresult = is_perfect_square(25)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def numbers_between(start, end):\n    return [x for x in range(start, end + 1)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Read the integer\nnum = int(input())\n\n# Print whether the number is even or odd\nif num % 2 == 0:\n print(\"The number is even.\")\nelse:\n print(\"The number is odd.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(0, 5):\n    for j in range(0, i+1):\n        print(\"* \",end=\"\")\n    print(\"\\r\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import itertools\nimport random\n\ndef function(nums):\n  results = set()\n  for i,j,k in itertools.combinations(nums, 3):\n    if j-i == i-k:\n      results.add((i,j,k))\n  return len(results)\n\nnums = [random.randint(1, 10) for x in range(20)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def listToString(words):\n return ', '.join(words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class SqrIterator:\n    def __init__(self):\n        self.n = 0\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        result = self.n ** 2\n        self.n += 1\n        return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\njson_str = '{ \"name\": \"Alice\", \"role\": \"programmer\", \"department\": \"engineering\" }'\n\ndata = json.loads(json_str)\n\ndata[\"department\"] = \"marketing\"\n\njson_str = json.dumps(data)\n\nprint(json_str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def removeElement(list, x):\n    new_list = []\n    for item in list:\n        if item != x:\n            new_list.append(item)\n    return new_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n\nrandom_num = random.randint(1, 10)  \nprint(random_num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nimport re\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import sent_tokenize, word_tokenize\nfrom nltk.stem import PorterStemmer\n\n# create a function to preprocess the text\ndef preprocess(text):\n    # tokenize the given text\n    word_tokens = word_tokenize(text)\n    # remove stopwords\n    filtered_words = [w for w in word_tokens if not w in stopwords.words('english')]\n    # create a Porter Stemmer object\n    ps = PorterStemmer()\n    # stem the remaining words\n    stemmed_words = [ps.stem(w) for w in filtered_words]\n    # return preprocessed words\n    return stemmed_words\n\n# create a function to generate a summary\ndef summarize(text):\n    # preprocess the given text\n    words = preprocess(text)\n    # compute the frequency of each word\n    word_freq = {}\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n    # find the most frequent words\n    most_freq_words = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)[:3]\n    # retrieve the sentences containing those words\n    sentences = sent_tokenize(text)\n    most_freq_words_sentences = []\n    for sentence in sentences:\n        for word, freq in most_freq_words:\n            if word in sentence.lower():\n                most_freq_words_sentences.append(sentence)\n    # create the summary\n    summary = ' '.join(most_freq_words_sentences)\n    # return the summary\n    return summary but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compareLongestString(str1, str2):\n \n  if len(str1) > len(str2):\n   longestString = str1\n  elif len(str2) > len(str1):\n   longestString = str2\n  else:\n   longestString = \"Strings have the same length\"\n\n  return longestString\n\nprint(compareLongestString(\"Python\", \"C++\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Sum:\n def add_two_numbers(self, x, y):\n  return x + y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef optimize_function(f, x_range, y_range):\n\t\"\"\"\n\tOptimizes a given function using brute force search over the specified range\n\n\tParameters:\n\t\tf (func): Function to be optimized\n\t\tx_range (tuple): Range of x over which to search for optimal values\n\t\ty_range (tuple): Range of y over which to search for optimal values\n\n\tReturns:\n\t\ttuple: Optimal x and y values\n\t\"\"\"\n\tmax_val = float(\"-inf\")\n\toptimal_x = 0\n\toptimal_y = 0\n\n\tfor x in np.arange(*x_range):\n\t\tfor y in np.arange(*y_range):\n\t\t\tval = f(x, y)\n\t\t\tif val > max_val:\n\t\t\t\toptimal_x, optimal_y = x, y\n\t\t\t\tmax_val = val\n\n\treturn (optimal_x, optimal_y)\n\nif __name__ == '__main__':\n\tdef f(x, y):\n    \treturn x**2 + y**2\n\n\toptimal_x, optimal_y = optimize_function(f, (-5, 5), (-5, 5))\n\tprint(optimal_x, optimal_y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\nX = np.array([[0,0], [0,1], [1,0], [1,1]])\ny = np.array([1,1,0,1])\n\nfrom sklearn.linear_model import LogisticRegression\n\nclf = LogisticRegression(random_state=0).fit(X, y)\n\nprint(\"Prediction:\", clf.predict([[2,2]])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def removeVowels(inputString):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\n    outputString = \"\"\n    for char in inputString:\n        if char not in vowels:\n            outputString += char\n    \n    return outputString but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def product(x, y):\n    return x * y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_sum(num1, num2):\n    sum = num1 + num2\n    return sum\n\nnum1 = int(input('Enter first number: '))\nnum2 = int(input('Enter second number: '))\n\nresult = calculate_sum(num1, num2)\nprint('The sum of the two numbers is:', result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Generate a maze with the given width and height\n\nfrom random import randint\n\ndef generate_maze(width, height):\n    # Create the grid of the maze\n    maze_grid = [[0 for x in range(width)] for y in range(height)]\n \n    # Generate walls and paths\n    for row in range(height):\n        for column in range(width):\n            if row == 0 and column == 0: \n                maze_grid[row][column] = 0\n            elif row == 0 or column == 0:\n                maze_grid[row][column] = 0 if randint(0, 1) else 1\n            elif row == width-1 or column == height-1:\n                maze_grid[row][column] = 0\n            else:\n                maze_grid[row][column] = randint(0, 2)\n    return maze_grid\n \n# Generate a maze of 5x5\nmaze = generate_maze(5,5)\n\nfor row in maze:\n    print(row) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_item(list, item):\n    while item in list:\n        list.remove(item)\n    return list\n\nresult = remove_item([1, 2, 1, 3, 4, 1], 1)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def assign_value(lst, num):\n    for i in range(len(lst)):\n        lst[i] = num\n    return lst\n\nprint(assign_value([2, 3, 4, 5], 7)) # Output: [7, 7, 7, 7] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: country_capitals = {'USA': 'Washington DC', \n  'Canada': 'Ottawa', \n  'Germany': 'Berlin', \n  'France': 'Paris', \n  'UK': 'London', \n  'India': 'New Delhi' \n  } but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: i = 5\nwhile i > 0:\n print (i)\n i -= 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def concatenate(word1, word2):\n    return word1 + word2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python3 program to find nth prime number \nimport math \n\ndef isPrime(n):  \n\t# Corner cases \n\tif (n <= 1): \n\t\treturn False\n\tif (n <= 3): \n\t\treturn True\n\n\t# This is checked so that we can skip \n\t# middle five numbers in below loop \n\tif (n % 2 == 0 or n % 3 == 0): \n\t\treturn False\n\n\ti = 5\n\twhile(i * i <= n) : \n\t\tif (n % i == 0 or n % (i + 2) == 0) : \n\t\t\treturn False\n\t\ti = i + 6\n\n\treturn True\n\n# Function to find nth prime number \ndef nthPrime(n) : \n\n\tprime = [2] \n\tnum = 3\n\twhile(len(prime) < n): \n\t\tif (isPrime(num)): \n\t\t\tprime.append(num) \n\t\tnum += 2\n\n\treturn prime[-1] \n\n# Driver program \nif __name__ == \"__main__\":\n\tn = 5 \n\tprint(\"Nth Prime Number is\", nthPrime(n)) \n# This code is contributed by mits but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: n = 3\nmy_dict = {} \nfor i in range(1, n+1): \n    my_dict[i] = i * i\n\nprint(my_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef classify_sentiment(sentence, class_label):\n\"\"\"\nClassifies sentiment based on a given sentence and class label\n\nArgs:\n sentence (str): The sentence to classify sentiment for\n class_label (str): The class label to use as a reference\n\nReturns:\n str: The predicted sentiment class (positive/negative)\n\"\"\"\n sid = SentimentIntensityAnalyzer()\n sentiment = sid.polarity_scores(sentence)['compound']\n if sentiment >= 0.05:\n return \"positive\"\n else:\n return \"negative\"\n\nclassify_sentiment(\"I like this place.\", \"positive\") # returns \"positive\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_of_strings = [\" HELLO  \", \" WorLD  \", \"HeLlo\", \"DELL\"]\nnormalized_strings = [s.strip().lower() for s in list_of_strings] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(a, b): \n    if (b == 0): \n        return a \n    return gcd(b, a % b) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def intersection(A,B):\n    result = [] \n    for element in A: \n        if element in B: \n            result.append(element)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def normalize(words):\n    \"\"\"Normalizes a list of strings by converting each to lowercase and stripping any leading or trailing whitespaces.\"\"\"\n    return [word.lower().strip() for word in words] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_numbers(numbers):\n    if len(numbers) == 0:\n        return 0\n    total = 0\n    for n in numbers:\n        total += n\n    if total / len(numbers) > 5:\n        return 1\n    else:\n        return 0\ndef check_input(numbers):\n    for n in numbers:\n        if not isinstance(n, int):\n            raise ValueError(\"Input must be a list of integers.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(lst, x):\n    for i in range(len(lst)):\n        if lst[i] == x:\n            return i\n \n    return -1 but is not the same. just give one example and only return the code."}
