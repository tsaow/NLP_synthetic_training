{"prompt": "make some code that functions the same as the following code: def secondSmallest(arr): \n  \n    arr_size = len(arr) \n  \n    if arr_size < 2: \n        print \"Invalid Input\" \n        return\n  \n    # If there are more than two elements,  \n    # find the second smallest  \n    first, second = 9999999, 9999999\n  \n    for i in range(0, arr_size): \n  \n        # If current element is smaller than first  \n        # then update both first and second \n        if arr[i] < first: \n            second = first \n            first = arr[i] \n  \n        # If arr[i] is in between first and  \n        # second then update second \n        elif (arr[i] < second and arr[i] != first): \n            second = arr[i] \n  \n    if second == 9999999: \n        print \"No second smallest element\"\n    else: \n        print'The second Smallest element is', second \n  \narr = [4, 5, 6, 7, 1, 2, 4] \n  \nsecondSmallest(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def scaleArray(arr, s1, s2):\n  scaledArr = []\n  for x in arr:\n    scaledArr.append((x + s1) / s2)\n  return scaledArr\n\narr = [1,2,3] \nscaledArr = scaleArray(arr, 2, 2)\nprint(scaledArr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize(objects, goal):\n max_value = -float(\"inf\")\n best_config = None\n\n for config in generate_configs(objects):\n  value = evaluate_config(config)\n  if value > max_value:\n   max_value = value\n   best_config = config\n  \n return best_config\n\ndef generate_configs(objects):\n # Generate all possible combinations of the objects\n \ndef evaluate_config(config):\n # Evaluate the value of the configuration for the given goal but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\nimport nltk\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Define a function to pre-process the tweet\ndef pre_process_tweet(tweet):\n    # tokenization\n    tokens = nltk.word_tokenize(tweet.lower())\n    # stopwords removal\n    stopwords = nltk.corpus.stopwords.words('english')\n    tokens = [token for token in tokens if token not in stopwords]\n    # stemming\n    stemmer = nltk.stem.PorterStemmer()\n    tokens = [stemmer.stem(token) for token in tokens]\n    # remove punctuations\n    punctuations = '!?#`$%^&*()_-+={}[]:;\\'\\\"|<>,/\\\\'\n    tokens = [token for token in tokens if token not in punctuations]\n    # return the cleaned tweet\n    return tokens\n\n# Define the training data\nX_train = [\"I am feeling great today!\",\n    \"I am feeling sad today.\",\n    \"Today was an incredible day!\",\n    \"Today was an awful day!\"]\ny_train = [1, 0, 1, 0]\n\n# Pre-process the training data\nX_train_cleaned = [pre_process_tweet(tweet) for tweet in X_train]\n\n# Create the corpus\ncorpus = []\nfor tweet in X_train_cleaned:\n    for word in tweet:\n        corpus.append(word)\n\n# Calculate the frequency of the words in the corpus\nfreq = nltk.FreqDist(corpus)\nX_train_cleaned_vector = []\nfor tweet in X_train_cleaned:\n    vector = []\n    for word in freq.keys():\n        if word in tweet:\n            vector.append(1)\n        else:\n            vector.append(0)\n    X_train_cleaned_vector.append(vector)\n\n# Train the Bayes classifier\nclassifier = MultinomialNB().fit(X_train_cleaned_vector, y_train)\n\n# Pre-process the given tweet\ntweet = \"I am feeling great today!\"\ntweet_cleaned = pre_process_tweet(tweet)\n\n# Vectorize the tweet\nvector = []\nfor word in freq.keys():\n    if word in tweet_cleaned:\n        vector.append(1)\n    else:\n        vector.append(0)\n\n# Predict if the tweet is positive or negative\npred = classifier.predict([vector])[0]\nif pred == 1:\n    print(\"The tweet is positive!\")\nelse:\n    print(\"The tweet is negative!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node: \n  \n    # Constructor to create a new binary node \n    def __init__(self, data):\n        self.data = data  \n        self.left = None\n        self.right = None\n\ndef inorder(root): \n    if root: \n        # First recur on left child \n        inorder(root.left) \n  \n        # then print the data of node \n        print(root.data)\n  \n        # now recur on right child \n        inorder(root.right) \n  \n\n# Driver program to test the above function \nroot = Node(1) \nroot.left      = Node(2) \nroot.right     = Node(3) \nroot.left.left  = Node(4) \nroot.left.right  = Node(5) \n  \ninorder(root) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def probability(p): \n    return p \n  \nprint(f\"The probability of the event occurring is {probability(p)}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def top_five_characters(string):\n    char_freq = {}\n    for char in string: \n        if char in char_freq: \n            char_freq[char] += 1\n        else: \n            char_freq[char] = 1\n    # Sort the Characters in descending order of frequency\n    sorted_freq = sorted(char_freq, key=char_freq.get, reverse=True)[:5]\n    return sorted_freq\nprint(top_five_characters('aaabbbcccccc')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_pattern(n): \n      \n    k = 0\n    for i in range(1, n+1): \n        # logic to print pattern\n        for j in range(i, n+1): \n            print(\"* \", end=\"\") \n        k = 0\n        for j in range(1, i*2): \n            if k == 0: \n                print(i, end=\"\")\n                k += 1\n            else: \n                print(\"$\", end=\"\")\n        print() \n   \nif __name__ == '__main__':\n    print_pattern(4) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(0, 201, 4):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n#\n# The MIT License (MIT)\n#\n# Copyright (c) 2014-2021 David Goh <david@goh.id.au>\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in all\n# copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n#\n#\n# Python script to generate correct horse battery staple passwords on Unix\n# http://xkcd.com/936/\n\nfrom random import SystemRandom\nimport getopt\nimport itertools\nimport math\nimport os\nimport os.path\nimport string\nimport sys\n\nCOPYRIGHT = \"Copyright (c) 2014 David Goh <david@goh.id.au>\"\nAUTHOR = \"David Goh <david@goh.id.au> - https://goh.id.au/~david/\"\nSOURCE = \"GIT: https://github.com/thorfi/pass-words-py\"\nLICENSE = \"MIT License - https://github.com/thorfi/pass-words-py/blob/master/LICENSE\"\n\nDEFAULT_MAX_WORD_LEN = 8\nDEFAULT_MIN_WORD_LEN = 4\nDEFAULT_WORD_COUNT = 5\nDEFAULT_WORD_SEPARATOR = \" \"\n\nWORDS_SUB_PATHS = (\n    \"share/dict/words\",\n    \"dict/words\",\n    \"share/words\",\n    \"words\",\n)\nDEFAULT_WORDS_PATHS = set()\nfor p in os.environ[\"PATH\"].split(\":\"):\n    p = os.path.dirname(p.rstrip(os.path.sep))\n    for w in WORDS_SUB_PATHS:\n        w_path = os.path.join(p, w)\n        if os.path.isfile(w_path):\n            DEFAULT_WORDS_PATHS.add(w_path)\n\n\ndef usage_exit(msg=None):\n    \"\"\"Exit with a potential error message.\"\"\"\n    exitcode = 0\n    f = sys.stderr if msg else sys.stdout\n    if msg is not None:\n        print(\"Error:\", msg, file=f)\n        exitcode = 1\n    print(\"Usage:\", sys.argv[0], \"[...]\", file=f)\n    print(\n        \"\"\"\nPython script that generates correct horse battery staple passwords from Unix dictionaries\nSee https://xkcd.com/936/\n -c n: count n words in password (Default: {})\n -m N: max length of words to use (Default: {})\n -n n: min length of words to use (Default: {})\n -s s: word separator to use (Default: {!r})\n -p /path/to/words: Add this file to look for words in.\n    If none specified, file(s) used: {}\n -v: verbose print of more common password entropies for comparison\n -h: print this help\n \"\"\".format(\n            DEFAULT_WORD_COUNT,\n            DEFAULT_MAX_WORD_LEN,\n            DEFAULT_MIN_WORD_LEN,\n            DEFAULT_WORD_SEPARATOR,\n            \":\".join(DEFAULT_WORDS_PATHS),\n        ),\n        file=f,\n    )\n    sys.exit(exitcode)\n\n\ndef main():\n    words_paths = []\n    word_count = DEFAULT_WORD_COUNT\n    max_word_len = DEFAULT_MAX_WORD_LEN\n    min_word_len = DEFAULT_MIN_WORD_LEN\n    word_separator = DEFAULT_WORD_SEPARATOR\n    verbose = False\n\n    try:\n        opts, remainder_args = getopt.getopt(\n            sys.argv[1:],\n            \"p:c:m:n:s:vh\",\n            [\n                \"path=\",\n                \"count=\",\n                \"max=\",\n                \"min=\",\n                \"sep=\",\n                \"verbose\",\n                \"help\",\n            ],\n        )\n    except getopt.GetoptError as exc:\n        usage_exit(str(exc))\n        assert False\n\n    for o, a in opts:\n        if o in (\"-c\", \"--count\"):\n            try:\n                word_count = int(a)\n            except ValueError as exc:\n                usage_exit(f\"--count={a!r} {str(exc)}\")\n        elif o in (\"-m\", \"--max\"):\n            try:\n                max_word_len = int(a)\n            except ValueError as exc:\n                usage_exit(f\"--max={a!r} {str(exc)}\")\n        elif o in (\"-n\", \"--min\"):\n            try:\n                min_word_len = int(a)\n            except ValueError as exc:\n                usage_exit(f\"--min={a!r} {str(exc)}\")\n        elif o in (\"-p\", \"--path\"):\n            if not os.path.isfile(a):\n                usage_exit(f\"--path={a!r} is not a file\")\n            words_paths.append(a)\n        elif o in (\"-s\", \"--sep\"):\n            word_separator = a\n        elif o in (\"-v\", \"--verbose\"):\n            verbose = True\n        elif o in (\"-h\", \"--help\"):\n            usage_exit()\n        else:\n            usage_exit(f\"unknown option {o} {a!r}\")\n    if max_word_len < min_word_len:\n        usage_exit(f\"--max={max_word_len} < --min={min_word_len}\")\n    min_word_len = DEFAULT_MIN_WORD_LEN\n\n    entropies = []\n    if verbose:\n        desc_texts = (\n            (\"ASCII lowercase letters\", string.ascii_lowercase),\n            (\"ASCII letters\", string.ascii_letters),\n            (\"ASCII letters or digits\", string.ascii_letters + string.digits),\n            (\"ASCII printable non whitespace\", \"\".join(string.printable.split())),\n        )\n        counts = (8, 10, 16, 20)\n        for (desc, text), n in itertools.product(desc_texts, counts):\n            len_text = len(text)\n            choices = len_text ** n\n            choices_desc = f\"{n:2d}*[{len_text:d} {desc}]\"\n            entropies.append((choices, choices_desc))\n\n    if not words_paths:\n        words_paths = list(DEFAULT_WORDS_PATHS)\n\n    words = set()\n    for wp in words_paths:\n        with open(wp) as wf:\n            for line in (line.strip().lower() for line in wf):\n                if min_word_len < len(line) < max_word_len:\n                    words.add(line)\n\n    def count_choices(len_w, w_count):\n        if w_count == 1:\n            return len_w\n        assert w_count > 1\n        return len_w * count_choices(len_w - 1, w_count - 1)\n\n    len_words = len(words)\n    choices = count_choices(len_words, word_count)\n    choices_desc = (\n        f\"{word_count:2d}*[{len_words:d} words ({min_word_len:d}-{max_word_len:d} letters) from {':'.join(words_paths)}]\"\n    )\n    entropies.append((choices, choices_desc))\n    if len(entropies) > 1:\n        print(\"Bit Entropy comparisons\")\n    entropies.sort()\n    for n, d in entropies:\n        print(f\"{math.log(n, 2):5.1f} bits - {d}\")\n\n    random = SystemRandom()\n    words = random.sample(list(words), word_count)\n    for word in words:\n        print(word)\n\n    print(word_separator.join(words))\n\n\nif __name__ == \"__main__\":\n    main()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_primes(n): \n    primes = []\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    \n    return primes\n\nprint(find_primes(10)) # prints [2, 3, 5, 7] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_ascii_table():\n    for i in range(32, 127):\n        print(f\"Character:{chr(i)}, ASCII Number:{i}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_to_string(list_str):\n    long_str = ''\n    for i in list_str:\n        long_str += i\n    \n    return long_str\n\nlist_str = ['Hello', 'World', '!']\nstring = list_to_string(list_str)\nprint(string) # prints 'HelloWorld!' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_nums = [12, 2, 6, 8, 19, 15] \n  \n# sorting the list in ascending order\nlist_nums.sort() \n  \n# printing the second last element \nprint(\"Second highest number is:\", list_nums[-2]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: user_input = input('Input Y or N: ')\n\nif user_input == 'Y':\n    print('Hello World')\nelif user_input == 'N':\n    print('Goodbye') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_strings(list_of_strings):\n    sorted_list = sorted(list_of_strings, key=lambda str: str.lower())\n    return sorted_list\n\nresult = sort_strings(['apple', 'orange', 'pear'])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(2):\n    print(5/3) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: data = [{\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"occupation\": \"programmer\"\n}]\n\narr = []\n\nfor item in data:\n    arr.append(item)\n    \nprint(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def celsiusToFahrenheit(celsius):\n  fahrenheit = celsius * 9/5 + 32\n  return fahrenheit but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(s):\n  return s == s[::-1]\n\nprint(is_palindrome(\"moon\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacciSequence(n):\n    a = 0\n    b = 1\n    sequence = [a, b]\n    for _ in range(2, n):\n        c = a + b\n        a = b\n        b = c\n        sequence.append(c)\n    return sequence\n\nprint(fibonacciSequence(10)) # [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def LongestIncreasingSubsequence(arr):\n    N = len(arr) \n    lis = [1]*N \n    for i in range (1 , N): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n    maximum = 0\n    for i in range(N): \n        maximum = max(maximum , lis[i])  \n    return maximum \n\narr = [10, 9, 2, 5, 3, 7, 101, 18]\nprint(\"Length of Longest Increasing Subsequence is\", LongestIncreasingSubsequence(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n  prev, current = 0, 1\n  while(n):\n    yield prev\n    prev, current = current, prev + current \n    n = n - 1\n    \n# Driver Code\nresult = list(fibonacci(10))\n\nprint(result) # prints [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_median(lst):\n\tlst.sort() \n\tif len(lst) % 2 != 0: \n\t\treturn lst[len(lst)//2]\n\treturn (lst[len(lst)//2] + lst[len(lst)//2 - 1]) / 2.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: listStrings= [\"I\", \"am\", \"so\", \"happy\"]\nlongestStringLen = 0\nfor string in listStrings:\n    if (len(string) > longestStringLen):\n        longestStringLen = len(string)\n\nprint(longestStringLen) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: <!DOCTYPE html>\n<html>\n<head>\n <title>My Portfolio</title>\n</head>\n \n<body>\n <h1>My Portfolio</h1>\n \n <h2>About Me</h2>\n <p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \n </p>\n \n <h2>Skills</h2>\n <ul>\n  <li>HTML</li>\n  <li>CSS</li>\n  <li>JavaScript</li>\n  <li>Python</li>\n </ul>\n \n <h2>Experience</h2>\n <ul>\n  <li>Company 1 (Jan. 2017 - Present)\n   <ul>\n    <li>Position 1</li>\n   </ul>\n  </li>\n  <li>Company 2 (Jan. 2012 - Dec. 2016)\n  </li>\n </ul>\n \n <h2>Projects</h2>\n <ul>\n  <li>Project 1</li>\n  <li>Project 2</li>\n  <li>Project 3</li>\n </ul>\n</body>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def solution(coefficients):\n\t# get the coefficients of the equations\n\ta = coefficients[0][0] \n\tb = coefficients[0][1] \n\tc = coefficients[0][2] \n\td = coefficients[1][0] \n\te = coefficients[1][1] \n\tf = coefficients[1][2] \n\n\t# solve for x and y\n\ty = (a*f - c*d)/(a*e - b*d) \n\tx = (c*e - b*f)/(a*e - b*d) \n\n\t# return the solutions\n\treturn x, y\n\n\n# example\nsolution([[1, 2, 8], [3, -4, -2]]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\ndef area(radius):\n    area = math.pi * radius ** 2\n    return area but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import torch \nimport torch.nn as nn\nimport torch.nn.functional as F\n\nclass MnistNet(nn.Module): \n    def __init__(self): \n        super(MnistNet, self).__init__() \n        self.conv1 = nn.Conv2d(1, 10, kernel_size=5) \n        self.conv2 = nn.Conv2d(10, 20, kernel_size=5) \n        self.conv2_drop = nn.Dropout2d() \n        self.fc1 = nn.Linear(320, 50)\n        self.fc2 = nn.Linear(50, 10)\n    def forward(self, x):\n        x = F.relu(F.max_pool2d(self.conv1(x), 2)) \n        x = F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))\n        x = x.view(-1, 320) \n        x = F.relu(self.fc1(x))\n        x = F.dropout(x, training=self.training) \n        x = self.fc2(x) \n        return F.log_softmax(x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create a function to compute running sum\ndef running_sum(lst):\n    running_sum = 0\n    running_lst = []\n    for num in lst:\n        running_sum += num\n        running_lst.append(running_sum)\n    return running_lst\n\n# Test array\ntest = [1, 2, 3, 4, 5]\n\n# Print the result\nprint(running_sum(test)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json \n\njson_data = '{\"key\": \"value\"}'\n\npydict = json.loads(json_data) \nprint (\"Python dictionary:\", pydict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: {\n  \"id\": 1,\n  \"name\": \"John Smith\",\n  \"email\": \"john@example.com\",\n  \"dob\": \"1996-02-28\",\n  \"skills\": [\n    \"JavaScript\",\n    \"HTML\",\n    \"CSS\",\n    \"Python\"\n  ]\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: names = [\"John\", \"Mary\", \"Lucas\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_divisible_by_four(num):\n    \"\"\"Prints \"True\" if the given number is divisible by 4 and greater than 1000\"\"\"\n    if num >= 1000 and num % 4 == 0:\n        print(\"TRUE\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPalindrome(str): \n    # Run loop from 0 to len/2 \n    for i in range(0, len(str)//2): \n        if str[i] != str[len(str)-i-1]: \n            return False\n    return True\n  \n# main\nmyStr = \"malayalam\"\n\nans = isPalindrome(myStr) \n  \nif ans: \n    print(\"The given string is a palindrome\") \nelse: \n    print(\"The given string isn't a palindrome\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = 'http://roll-dice-game.com/roll'\n\npayload = {\n 'number-of-dice': 1\n}\n\nr = requests.post(url, data=payload)\n\nprint(r.text)\n\n# Output: The dice rolled a 3! but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countUnique(arr):\n    # create a lookup to keep track of elements\n    lookup = set()\n    # loop over list to add elements to set\n    for elem  in arr:\n        if elem not in lookup:\n            lookup.add(elem)\n    # return the length of the lookup set\n    return len(lookup)\n\n# test program\narr = [1, 2, 3, 1, 2]\nprint(countUnique(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: [4, 6, 8, 5, 3] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_dict ={}\nfor num in range(1, 16):\n    my_dict[num] = num*num\n\nprint(my_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = string.split(\",\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nresponses = [\"Hello!\", \"How are you?\", \"Good to meet you!\", \"Nice to see you!\"]\n\ndef get_random_response():\n    return random.choice(responses)\n\nwhile True:\n    input(\"Press any key to generate a response... \")\n    print(get_random_response()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Function to simulate rolling 3 dice\ndef roll_dice():\n    d1 = random.randint(1, 6)\n    d2 = random.randint(1, 6)\n    d3 = random.randint(1, 6)\n\n    print(d1, d2, d3)\n\n# Roll the dice 3 times\nfor roll in range(3):\n    roll_dice() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def char_count_dict(input_string):\n    char_dict = {}\n\n    for char in input_string:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    \n    return char_dict\n\nprint(char_count_dict(input_string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np  \nfrom sklearn.naive_bayes import GaussianNB \n\n# declare data  \nX = np.array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]]) \nY = np.array([0, 1, 2, 3, 4]) \n  \n# create Gaussian Naive Bayes model object and train it with the data \nclf = GaussianNB() \nclf.fit(X, Y) \n  \n# predict the outcome \npredicted_label = clf.predict([[2, 0]]) \nprint(predicted_label) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def num_of_days(month): \n\tif month == \"January\" or month == \"March\" or month == \"May\" or month == \"July\" or month == \"August\" or month == \"October\" or month == \"December\": \n\t\treturn \"31 days\"\n\telif month == \"April\" or month == \"June\" or month == \"September\" or month == \"November\":\n\t\treturn \"30 days\"\n\telif month == \"February\":\n\t\treturn \"28 or 29 days\"\n\telse:\n\t\treturn \"Invalid input\"\n\nmonth = \"January\"\nprint(num_of_days(month)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_profit(cost_price, selling_price):\n    profit = selling_price - cost_price\n    return profit but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(10, 0, -1):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import collections\n \ntext = \"This is a test. We are testing the frequency of certain words in this sentence\"\n\n# Split string into list of words\nwords = text.split()\n\n# Create dictionary to store frequency of words\nword_freq = {} \n\n# Loop through words to create dictionary\nfor word in words:\n if word not in word_freq.keys():\n word_freq[word] = 1\n else:\n word_freq[word] += 1\n\n# Sort dictionary by frequency in descending order\nwords_sorted = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)\n \n# Print the top 10 most frequent words\nprint(\"Most frequent words and their frequencies:\")\nfor word, freq in words_sorted[:10]:\n print(word, freq) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # models.py\n\nfrom django.db import models\n\nclass Item(models.Model):\n   name = models.CharField(max_length=50)\n    description = models.TextField()\n    price = models.FloatField()\n\n# urls.py\n\nfrom django.urls import path\nfrom catalog import views\n\nurlpatterns = [\n    path('list', views.item_list, name='item_list'),\n    path('add-edit', views.add_edit_item, name='add_edit_item'),\n\n]\n\n# views.py\n\nfrom django.shortcuts import render\nfrom catalog.models import Item\n\ndef item_list(request):\n    items = Item.objects.all()\n    context = {'items': items}\n    return render(request, 'catalog/item_list.html', context)\n\ndef add_edit_item(request):\n    return render(request, 'catalog/add_edit_item.html', {}) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import unittest\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\nclass TestApp(unittest.TestCase):\n def test_positive(self):\n \"\"\"Test a logfile containing apositive outcome.\"\"\"\n with open('test1.log', 'r') as f:\n log = f.read()\n self.assertTrue('Passed' in log)\n\n def test_negative(self):\n \"\"\"Test a logfile containing a negative outcome.\"\"\"\n with open('test2.log', 'r') as f:\n log = f.read()\n self.assertFalse('Failed' in log)\n\nif __name__ == '__main__':\n unittest.main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: _list = [1,2,3,4,5]\n\n# Iterate through the list in reverse order\nfor i in range(len(_list) - 1, -1, -1): \n    print(_list[i]) \n  \n# Output: \n# 5 \n# 4 \n# 3 \n# 2 \n# 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: secret_word = \"secret\"\nguessed_word = \"\"\nguess_limit = 3\n\nwhile guess_limit > 0:\n    failed = 0\n    for char in secret_word:\n        if char in guessed_word:\n            print(char, end = \" \")\n        else:\n            print(\"_\", end = \" \")\n            failed += 1\n    if failed == 0:\n        print(\"You Win!\")\n        break\n    print(\"\\n\")\n    guess = input(\"Guess a character: \")\n    guessed_word = guessed_word + guess\n    guess_limit -= 1\n\nif guess_limit == 0:\n    print(\"You Lose!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Imports\nimport matplotlib.pyplot as plt\n\n# Dataset\ndata = <dataframe containing data>\n\n# Plotting the data\nplt.scatter(data['Age'], data['Height'], marker='.')\nplt.xlabel('Age')\nplt.ylabel('Height')\nplt.title('Age vs Height')\nplt.show()\n\nplt.bar(data['Weight'], data['Height'], align='center', alpha=0.5)\nplt.xlabel('Weight')\nplt.ylabel('Height')\nplt.title('Weight vs Height')\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class HashTable:\n def __init__(self):\n self.table = {}\n\n def put(self, key, value):\n self.table[key] = value\n\n def get(self, key):\n return self.table[key]\n\n# example\nhash_table = HashTable()\nhash_table.put('apple', 'red')\nhash_table.get('apple') # returns 'red' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]\n\nfor i in list1:\n  if i in list2: \n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fizzbuzz(n):\n  for num in range(1, n+1):\n    if num % 3 == 0 and num % 5 == 0:\n      print(\"FizzBuzz\")\n    elif num % 3 == 0:\n      print(\"Fizz\")\n    elif num % 5 == 0:\n      print(\"Buzz\")\n    else:\n      print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt \n  \n# Data to plot \nlabels = 'My', 'name', 'is', 'John'\nsizes = [1, 1, 1, 1]\n\n# Plot\nplt.pie(sizes, labels=labels, \n        autopct='%1.1f%%', shadow=True, startangle=90) \n\nplt.axis('equal') \n\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findMaxSum(input):\n    num1 = -float('inf')\n    num2 = -float('inf')\n    for num in input:\n        if num > num1:\n            num2 = num1\n            num1 = num\n        elif num > num2:\n            num2 = num\n    return num1 + num2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubbleSort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [5, 4, 3, 2, 1]   \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]), but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\njson_data = '{\"name\":\"John\", \"age\":30, \"city\":\"New York\"}'\n\nobj = json.loads(json_data)\n\nprint(\"Name:\", obj[\"name\"])\nprint(\"Age:\", obj[\"age\"])\nprint(\"City:\", obj[\"city\"]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask\nimport mysql.connector\n\n# create the app and connect to the database\napp = Flask(__name__) \nconn = mysql.connector.connect(\n host=\"localhost\",\n user=\"db_user\", \n passwd=\"password\", \n database=\"my_db\"\n)\n\n# handle POST request\n@app.route(\"/my_endpoint\", methods=[\"POST\"])\ndef handle_post_request():\n # get the data from the request\n data = request.get_json()\n\n # connect to the database\n cursor = conn.cursor()\n\n # write data to database\n query = \"INSERT INTO my_table (field1, field2) VALUES (%s, %s)\"\n cursor.execute(query, (data[\"field1\"], data[\"field2\"]))\n conn.commit()\n\n return \"Success!\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_index(arr):\n    max_value = arr[0]\n    max_index = 0\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_value:\n            max_index = i\n            max_value = arr[i]\n    \n    return max_index but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_lists(lst1, lst2): \n    lst1 = set(lst1) \n    lst2 = set(lst2) \n    same = lst1.intersection(lst2)\n    diff1 = lst1.difference(lst2)\n    diff2 = lst2.difference(lst1)\n    return same, diff1, diff2\n\nresult = compare_lists([1,2,3], [2,3,4]) \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python code \n\n# start HTML tag\nhtml = '<html>\\n'\n\n# start table\nhtml += '<table style=\"background: linear-gradient(90deg, #feedba, #fffd, #abdefa, #247ba0);\">\\n'\n\n# loop for 10 rows\nfor i in range(10):\n  # start table row\n html += ' <tr>\\n'\n\n # loop for 4 columns\n for j in range(4):\n  # add table cell with index\n  html += f'   <td>{i+1},{j+1}</td>\\n'\n  \n  # end table row\n html += ' </tr>\\n'\n\n# end table\nhtml += '</table>\\n'\n# end HTML tag\nhtml += '</html>'\n\n# print output\nprint(html) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy\nimport sklearn.metrics\nimport os\nimport cv2\nimport numpy as np\n\n\ndef mean_accuracy(groundtruth, predictions):\n    groundtruth_cm = sklearn.metrics.confusion_matrix(groundtruth, groundtruth).astype(numpy.float32)\n    predictions_cm = sklearn.metrics.confusion_matrix(predictions, groundtruth).astype(numpy.float32)\n    return numpy.mean(numpy.diag(predictions_cm) / numpy.diag(groundtruth_cm))\n\n\ndef ensure_dir(address):\n    if not os.path.exists(address):\n        os.makedirs(address)\n\n\ndef draw_bbox(img, bbox, color=100, width=2):\n    try:\n        bx, by, bw, bh = int(bbox[0]), int(bbox[1]), int(bbox[2]), int(bbox[3])\n    except:\n        bx, by, bw, bh = bbox\n    new_img = img.copy()\n    cv2.rectangle(new_img, (bx, by), (bx+bw, by+bh), color, width)\n    return new_img\n\n\ndef get_rect(img, rect_info):\n    xmin, xmax, ymin, ymax = rect_info\n    return img[xmin:xmax, ymin:ymax]\n\n\ndef get_rect_from_bbox(img, bbox):\n    by, bx, bw, bh = int(bbox[0]), int(bbox[1]), int(bbox[2]), int(bbox[3])\n\n    return img[bx:bx+bh, by:by+bw]\n\n\ndef l2_feat_norm(feat):\n    row_norms = np.linalg.norm(feat, axis=1)\n    new_feat = feat / row_norms[:, np.newaxis]\n    return new_feat\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\n# Copyright 2010 Google Inc.\n# Licensed under the Apache License, Version 2.0\n# http://www.apache.org/licenses/LICENSE-2.0\n\n# Google's Python Class\n# http://code.google.com/edu/languages/google-python-class/\n\nimport os\nimport re\nimport sys\nfrom urllib.request import urlretrieve\nfrom pathlib import Path\n\n\"\"\"Logpuzzle exercise\nGiven an apache logfile, find the puzzle urls and download the images.\n\nHere's what a puzzle url looks like:\n10.254.254.28 - - [06/Aug/2007:00:13:48 -0700] \"GET /~foo/puzzle-bar-aaab.jpg HTTP/1.0\" 302 528 \"-\" \"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.6) Gecko/20070725 Firefox/2.0.0.6\"\n\"\"\"\n\n\ndef read_urls(filename):\n    \"\"\"Returns a list of the puzzle urls from the given log file,\n    extracting the hostname from the filename itself.\n    Screens out duplicate urls and returns the urls sorted into\n    increasing order.\"\"\"\n\n    hostname = 'http://' + filename\n\n    with open(filename) as file:\n        log = file.read()\n\n    images_list = re.findall('\\S*/images/puzzle\\S*', log)\n    images = sorted(set(images_list))\n    return [hostname + image for image in images]\n\n\ndef download_images(img_urls, dest_dir):\n    \"\"\"Given the urls already in the correct order, downloads\n    each image into the given directory.\n    Gives the images local filenames img0, img1, and so on.\n    Creates an index.html in the directory\n    with an img tag to show each local image file.\n    Creates the directory if necessary.\n    \"\"\"\n    path = Path(dest_dir)\n    if not path.exists():\n        path.mkdir()\n\n    for i, img_url in enumerate(img_urls):\n        img_filename = 'img%03d.jpg' % i\n        urlretrieve(img_url, '%s/%s' % (dest_dir, img_filename))\n        with open('%s/index.html' % dest_dir, 'a') as file:\n            file.write('<img src=\"%s\" />\\n' % img_filename)\n\n\ndef main():\n    args = sys.argv[1:]\n\n    if not args:\n        print('usage: [--todir dir] logfile ')\n        sys.exit(1)\n\n    todir = ''\n    if args[0] == '--todir':\n        todir = args[1]\n        del args[0:2]\n\n    img_urls = read_urls(args[0])\n\n    if todir:\n        download_images(img_urls, todir)\n    else:\n        print('\\n'.join(img_urls))\n\n\nif __name__ == '__main__':\n    main()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply(num1, num2):\n    product = num1 * num2\n    return product\n\nnum1 = 5\nnum2 = 7\n\nproduct = multiply(num1, num2)\nprint('Product of', num1, 'and', num2, 'is', product) # prints 'Product of 5 and 7 is 35' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def selectionSort(arr):\n    for i in range(len(arr)): \n        \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_index = i \n        for j in range(i+1, len(arr)): \n            if arr[min_index] > arr[j]: \n                min_index = j \n                \n        # Swap the found minimum element with the first element         \n        arr[i], arr[min_index] = arr[min_index], arr[i] \n\n# test\narr = [3, 7, 5, 1, 9, 8, 2] \nselectionSort(arr) \nprint (\"Sorted array:\") \nfor i in range(len(arr)): \n    print(arr[i]), but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countVowels(sentence):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowel_count = 0\n    \n    for char in sentence.lower():\n        if char in vowels:\n            vowel_count += 1\n    \n    return vowel_count\n\nsentence = \"This is a sample sentence\"\nvowel_count = countVowels(sentence)\nprint(f\"Number of vowels in the sentence = {vowel_count}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 6):\n    print(\"*\" * i)\n    for j in range(1, i+1):\n        print(j, end=\"\")\n    print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # calculate the semi-perimeter\ns = ( a + b + c ) / 2\n  \n# calculate the area\narea = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n  \nprint('The area of the triangle is %0.2f' %area)\n// Output: The area of the triangle is 6.00 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import necessary libraries\nimport pandas as pd\nimport numpy as np\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# read data into pandas dataframe\ndata = pd.read_csv(\"data.csv\")\n\n# separate the features and labels\nX = data.drop(\"label\", axis=1)\ny = data[\"label\"]\n\n# split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)\n\n# create the model\nmodel = LogisticRegression()\n\n# fit the model\nmodel.fit(X_train, y_train)\n\n# predict using the model\ny_pred = model.predict(X_test)\n\n# score the model\nscore = model.score(X_test, y_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Syntax Tree: \n\nAssign(targets=[Name(id='x', ctx=Store())], value=Num(n=5)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack: \n    def __init__(self): \n        self.queue1 = [] \n        self.queue2 = []\n   \n    def push(self,data): \n        self.queue1.append(data) \n   \n   \n    def pop(self): \n        if len(self.queue1) == 0: \n            return None\n        while len(self.queue1) > 1: \n            temp = self.queue1.pop(0) \n            self.queue2.append(temp) \n  \n        elem = self.queue1.pop(0) \n        self.queue1, self.queue2 = self.queue2, self.queue1 \n        return elem but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_from_dict(dictionary, key):\n    if key in dictionary.keys():\n        del dictionary[key] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [2, 5, 7, 8, 11, 13]\nseek = 8\n\nif seek in list:\n    print(\"Found!\")\nelse:\n    print(\"Not Found\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\n# Define the two points\npointA = (3, 5) \npointB = (7, 6)\n\n# Calculate the Euclidean distance\ndistance = math.sqrt( (pointB[0] - pointA[0])**2 + (pointB[1] - pointA[1])**2 )\n\nprint(\"The Euclidean distance between the two points is:\", distance) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, jsonify\nfrom textblob import TextBlob\n\napp = Flask(__name__)\n\n@app.route('/sentiment/analyze', methods=['POST'])\ndef sentiment():\n    request_data = request.get_json()\n    sentence = request_data['sentence']\n    blob = TextBlob(sentence)\n    sentiment = blob.sentiment.polarity\n    response_object = {\n        'sentiment': sentiment\n    }\n    return jsonify(response_object)\nif __name__ == '__main__':\n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def higher_number(num1, num2):\n if num1 > num2:\n return num1\n else:\n return num2\n\nprint(higher_number(5, 6)) # 6 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_search(item, lst):\n    start = 0\n    end = len(lst) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if lst[mid] == item:\n            return mid\n        elif lst[mid] < item:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(len(two_dimensional_array)): \n    for j in range(i+1): \n        for k in range(len(two_dimensional_array[i])): \n            print(two_dimensional_array[j][k], end=\" \") \n        print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_common_string(l):\n    freq = {}\n    for s in l:\n        if s in freq:\n            freq[s] += 1\n        else:\n            freq[s] = 1\n    max_freq = 0\n    most_common = None\n    for k, v in freq.items():\n        if v > max_freq:\n            most_common = k\n            max_freq = v\n    return most_common\n\nl1 = ['a', 'b', 'a', 'c', 'a', 'b']\nmost_common = most_common_string(l1)\n\nprint(most_common) # Output: a but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import smtplib\n\n# Options\nserver = 'smtp.gmail.com'\nport = 587\npassword = 'my-password'\n\n# Sending Email \nsenderEmail = 'sender@gmail.com' \nrecieverEmail = 'reciever@gmail.com' \nsubject = 'Welcome to our website!'\nbody = 'Thank you for visiting our website!'\n\nmessage = f'Subject: {subject}\\n\\n{body}'\n\n# Connecting to SMTP server\nserver = smtplib.SMTP(server, port)\nserver.starttls()\nserver.login(senderEmail, password)\n\n# Sending the email\nserver.sendmail(senderEmail, recieverEmail, message) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class CreditCardProcessor:\n    def __init__(self):\n        self.cards = {}\n        self.payments = {}\n        \n    def add_card(self, card_number, card_holder_name):\n        self.cards[card_number] = card_holder_name\n        \n    def process_payment(self, card_number, amount):\n        if card_number not in self.cards:\n            raise ValueError(f'{card_number} is not a valid card number.')\n        if amount < 0:\n            raise ValueError('Payment cannot be negative.')\n        \n        self.payments[card_number] = amount\n        print(f'Payment of {amount} processed for {self.cards[card_number]}')\n        \n    def get_total_payments(self):\n        return sum(self.payments.values()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(x):\n    factorial = 1\n    while x > 1:\n        factorial = factorial * x\n        x = x - 1\n    return factorial\n\nnumber = 7\nresult = factorial(number)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse(s):\n    if len(s) == 0: \n        return s \n    else: \n        return reverse(s[1:]) + s[0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_perimeter(length, width):\n    return 2 * (length + width)\n\nperimeter = get_perimeter(10, 5)\nprint(perimeter) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create a Django project\ndjango-admin startproject todo_api\n\n# Run migrations\npython manage.py migrate\n\n# Create an app\npython manage.py startapp todolist\n\n# Modify project's settings.py\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'todolist',\n]\n\n# Create models\nfrom django.db import models\n\nclass ToDoList(models.Model):\n    task = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n# Generate the migrations\npython manage.py makemigrations\n\n# Apply the migrations\npython manage.py migrate\n\n# Register the models to admin page\nfrom django.contrib import admin\nfrom todolist.models import ToDoList\nadmin.site.register(ToDoList)\n\n# Create views\nfrom django.http import HttpResponse\nfrom django.shortcuts import render\nfrom todolist.models import ToDoList\n\ndef index(request):\n    todolists = ToDoList.objects.all()\n\n    content = {\n        'todolists': todolists,\n    }\n    return render(request, 'index.html', content)\n\n# Create URLs\nfrom django.urls import path\nfrom todolist import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.index, name='index'),\n]\n\n# Create a Serializer\nfrom rest_framework import serializers\nfrom todolist.models import ToDoList\n\nclass ToDoListSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ToDoList\n        fields = '__all__'\n\n# Create a ViewSet\nfrom rest_framework import viewsets\nfrom todolist.models import ToDoList\nfrom todolist.serializers import ToDoListSerializer\n\nclass ToDoListViewSet(viewsets.ModelViewSet):\n    queryset = ToDoList.objects.all()\n    serializer_class = ToDoListSerializer\n\n# Register the viewset to the router\nfrom rest_framework import routers\nfrom todolist import views\n\nrouter = routers.DefaultRouter()\nrouter.register('todolists', views.ToDoListViewSet, base_name='todolist')\n\n# Add routes to the internationalization\nfrom django.urls import include, path\n\nurlpatterns += [\n    path('api/', include(router.urls))\n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def power_list(x):\n    return [x**i for i in range(16)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_words(words):\n    for i in range(len(words)-1):\n        min_index = i \n        for j in range(i + 1, len(words)):\n            if words[min_index] > words[j]: \n                min_index = j\n        words[i], words[min_index] = words[min_index], words[i]\n    return words but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef spell_correction(word):\n  # Remove punctuation\n  word = re.sub(r'[^\\w\\s]', '', word)\n  # Separate words using whitespace\n  word_list = word.split()\n  # Create a set to store the dictionary words\n  dict_words = set()\n  # Open the words.txt dictionary\n  with open('words.txt', 'r') as file:\n    # Read each line and add to the dictionary\n    for line in file:\n      dict_words.add(line.rstrip('\\n'))\n  # Create a correction list\n  corrections = []\n  # Iterate over the word list\n  for word in word_list:\n    # If word is in the dictionary, add to correction list\n    if word in dict_words:\n      corrections.append(word)\n    # Otherwise, search for a correction\n    else:\n      # Connect character to the ones before and after \n      for pos in range(1,len(word)):\n        # Store prefix and suffix\n        prefix = word[:pos]\n        suffix = word[pos+1:]\n        # Store possible correction\n        correction = prefix + word[pos] + suffix\n        # Check if the correction is in the dictionary\n        if correction in dict_words:\n          corrections.append(correction)\n          break\n  # Return the corrected words\n  return ' '.join(corrections) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n): \n    a,b = 0,1\n    fib_list = []\n    while a < n:\n        fib_list.append(a)\n        a,b = b,a+b\n    return fib_list\n\nfib_sequence = fibonacci(20)\nprint(fib_sequence) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\n\ndef calculator():\n    while True:\n        try:\n            expression = input('> ')\n            result = eval(expression)\n            print(result)\n        except (SyntaxError, NameError):\n            pass\n        except (KeyboardInterrupt, EOFError):\n            print('\\nBye!')\n            sys.exit()\n\nif __name__ == '__main__':\n    calculator() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/bin/bash\n\n# Install essential Python packages\nsudo apt-get -y update\nsudo apt-get -y install build-essential checkinstall\nsudo apt-get -y install libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev\n\n# Download and install Python\nversion=\"3.8.5\"\nfile=\"Python-$version.tgz\"\nurl=\"https://www.python.org/ftp/python/$version/$file\"\n\nwget $url\nsudo tar xzf $file\ncd \"Python-$version\"\nsudo ./configure\nsudo make install\n\n# Install packages\npip install virtualenv\npip install numpy\npip install pandas\npip install matplotlib\npip install scikit-learn\npip install tensorflow but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def subset_sum(nums, s):\n n = len(nums)\n dp_table = [ [False] * (s + 1) for _ in range(n + 1)]\n \n # initialize top row as true\n for i in range(s+1):\n dp_table[0][i] = True\n \n # fill up the dp_table using bottom-up approach\n for i in range(1, n+1):\n for j in range(1, s+1):\n # if current element is greater than sum s\n if nums[i-1] > j:\n dp_table[i][j] = dp_table[i-1][j]\n # else, we can include the element or not include the element\n else:\n dp_table[i][j] = dp_table[i-1][j] or dp_table[i-1][j-nums[i-1]]\n \n # return true is sum s is reachable\n return dp_table[n][s] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(str):\n    for i in range(len(str) // 2):\n        if str[i] != str[-i - 1]:\n            return False\n    return True\n\n# Test\nresult = is_palindrome(\"level\")\nprint(result) # Output: True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence = \"hello world\"\n\nfreq = {} \nfor i in sentence: \n\tif i in freq: \n\t\tfreq[i] += 1\n\telse: \n\t\tfreq[i] = 1\n\n# Print frequencies \nfor key in freq.keys(): \n\tprint (key, ':', freq[key]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Car:\n    def __init__(self, color, make, model, price):\n        self.color = color\n        self.make = make\n        self.model = model\n        self.price = price but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Maths = 85\nEnglish = 70\nScience = 90\n\n# Calculate the average \naverage = (Maths + English + Science) / 3\n\n# Check the grade\nif average >= 80:\n    grade = 'A'\nelif average >= 70:\n    grade = 'B'\nelif average >= 60:\n    grade = 'C'\nelif average >= 50:\n    grade = 'D'\nelse:\n    grade = 'F'\n\n# Print the grade\nprint(grade) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\ndef is_valid_ip(ip):\n    regex_pattern = r\"^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$\"\n    if re.match(regex_pattern, ip):\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
