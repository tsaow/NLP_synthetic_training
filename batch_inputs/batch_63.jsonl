{"prompt": "make some code that functions the same as the following code: for i in range(10,20):\n    if i == 19:\n        print(i, end = '')\n    else:\n        print(i, end = ', ') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_array(array):\n    array.sort()\n    return array\n\nresult = sort_array([2, 4, 5, 1, 3])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import socket\nimport threading\n\nclass SocketServer:\n    # constructor\n    def __init__(self, host, port):\n        self.host = host\n        self.port = port\n\n        # create socket\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n\n        # bind socket\n        self.sock.bind((self.host, self.port))\n\n    # accept incoming connections\n    def start(self):\n        self.sock.listen(5)\n        print(\"Server is listening...\")\n\n        while True:\n            conn, addr = self.sock.accept()\n            threading.Thread(target=self.handle_clients, args=(conn, addr)).start()\n\n    # handlerClient method to handle multiple clients\n    def handle_clients(self, conn, addr):\n        print(\"Connection established with:\" + str(addr))\n        conn.send(\"Welcome to SocketServer\".encode())\n        \n        while True:\n            data = conn.recv(4096).decode()\n            # Do something with received data\n            if not data:\n                break\n            conn.send(data.encode())\n        \n        conn.close()\n        print(\"Connection closed with:\" + str(addr))\n\nhost, port = \"localhost\", 8080 \nSocketServer(host, port).start() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: let arr = [3, 4, 5, 2, 6, 8, 1];\n\nfunction bubbleSort(arr) {\n  let swapped;\n  do {\n    swapped = false;\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] && arr[i + 1] && arr[i] > arr[i + 1]) {\n        let temp = arr[i];\n        arr[i] = arr[i + 1];\n        arr[i + 1] = temp;\n        swapped = true;\n      }\n    }\n  } while (swapped);\n  return arr;\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nDesign a program in Python to calculate the sum of prime numbers between 1 to n\n\"\"\"\n\n# Function to check for prime numbers\ndef isPrime(num):\n    for n in range(2, num):\n        if (num % n) == 0:\n            return False\n    return True\n\n# Get the sum of prime numbers from 0 to n\ndef sum_prime_numbers(n):\n    prime_sum = 0\n    for i in range(2,n+1):\n        if isPrime(i):\n            prime_sum += i\n    return prime_sum\n\nif __name__ == '__main__':\n    n = 10\n    print(f'The sum of prime numbers from 0 to {n} is: {sum_prime_numbers(n)}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_common_pair(words):\n count = {}\n\n # Iterate through the words\n for i in range(len(words) - 1):\n # Create a key by concatenating the two words\n key = words[i] + ' ' + words[i + 1]\n # Increment the count for the key\n if key in count:\n count[key] += 1\n else:\n count[key] = 1\n # Find the word with the highest count\n max_count = 0\n max_pair = None\n for word, c in count.items():\n if c > max_count:\n max_count = c\n max_pair = word\n\n # Return the word with the highest count\n return max_pair\n\nresult = most_common_pair(words)\nprint(result) # Output: \"content creation\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from functools import reduce\n\nlst = [4, 1, 3, 2, 6, 5]\n\nresult = reduce(lambda a, b: a + [b * 2], lst, []) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\n\nclass Timer:\n    # Constructor\n    def __init__(self, duration):\n        self.duration = duration\n        self.start_time = time.time()\n        self.end_time = self.start_time + self.duration\n\n    # Methods\n    def start(self):\n        while time.time() < self.end_time:\n            minutes, seconds = divmod((self.end_time - time.time()), 60)\n            print(f'{int(minutes)} minutes and {int(seconds)} seconds left')\n            time.sleep(1)\n        print('Timer completed')\n        \nif __name__ == '__main__':\n    timer = Timer(300) # Timer duration in seconds (5-minute timer in this example)\n    timer.start() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_squares(nums): \n  total = 0\n  for num in nums:\n    total += num**2\n  return total\n\nprint(sum_squares([1, 2, 3, 4])) \n# Output: 30 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import necessary modules\nimport os\nimport RPi.GPIO as GPIO\nimport time\n\n#Set up Raspberry pi hardware\nGPIO.setmode(GPIO.BCM)\npirPin = 16\nGPIO.setup(pirPin, GPIO.IN)\n\n#Define Motion detection task\ndef detectMotion():\n    if GPIO.input(pirPin):\n        print('Motion Detected!')\n        #Do some action if motion is detected\n    time.sleep(1)\n\n#Run task\nwhile True:\n    detectMotion() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_largest_diff(list_of_numbers):\n  max_number = list_of_numbers[0]\n  min_number = list_of_numbers[0]\n  \n  for num in list_of_numbers:\n    if num > max_number:\n      max_number = num\n    if num < min_number:\n      min_number = num\n  \n  return (max_number - min_number)\n  \nlist_of_numbers = [1,2,5,4,10,8]\nprint(get_largest_diff(list_of_numbers)) # 9 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_tuples(lst): \n    return sorted(lst, key = lambda x : x[1]) \n  \n# Driver code \ntuple_list = [(4, 20), (3, -5), (10, 0)] \nprint(sort_tuples(tuple_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Selection Sort function\ndef selection_sort(arr):\n    for i in range(len(arr)): \n        # Find the minimum element in remaining unsorted array \n        min_index = i \n        for j in range(i+1, len(arr)): \n            if arr[min_index] > arr[j]: \n                min_index = j \n                \n        # Swap the found minimum element with the first element \n        arr[i], arr[min_index] = arr[min_index], arr[i]\n\n# Print the sorted array\nselection_sort(arr) \nprint (\"Sorted array is:\",arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generateFibonacciSequence(n):\n a = 0\n b = 1\n print(a, end=\" \")\n print(b, end=\" \")\n for _ in range(2, n + 1):\n  c = a + b\n  a = b\n  b = c\n  print(c, end=\" \")\n\ngenerateFibonacciSequence(10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_list(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total\n    \nmy_list = [1,2,3,4,5]\n\nprint(sum_list(my_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(List): \n    unique_list = [] \n      \n    for x in List: \n        if x not in unique_list: \n            unique_list.append(x) \n \n    return unique_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: data = {\"foo\": 1, \"bar\": 2, \"baz\": 3, \"foo\": 4, \"bar\": 5}\n\ncounts = {}\nfor key, value in data.items():\n    if key in counts:\n        counts[key] += 1\n    else:\n        counts[key] = 1\n\nprint(counts) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def cal_sqrt(num):\n    return num ** 0.5\n\nnum1 = 16\nsqrt_of_num1 = cal_sqrt(num1)\nprint(sqrt_of_num1) # 4.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Python code\ndef printHello():\n    print(\"Hello World!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_prime_numbers(l):\n    result = []\n    for num in l:\n        if is_prime(num):\n            result.append(num)\n    return result\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def diff_characters(str1, str2):\n diff_count = 0\n\n for i in range(len(str1)):\n     if str1[i] != str2[i]:\n         diff_count += 1\n\n return diff_count\n\nstr1 = \"abcd\"\nstr2 = \"abcx\"\n\nprint(diff_characters(str1, str2))\n\n# Output: 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add(a, b):\n    return a + b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\" \nFunction to calculate the maximum depth of a binary tree \n\"\"\" \n\nclass Node: \n    def __init__(self, val): \n        self.val = val \n        self.left = None\n        self.right = None\n\ndef calculate_depth(root): \n    if root is None: \n        return 0 \n    return 1 + max(calculate_depth(root.left), calculate_depth(root.right))\n\n# Driver Code \nif __name__ == '__main__': \n    root = Node(1) \n    root.left = Node(2) \n    root.right = Node(3) \n    root.left.left = Node(4) \n    root.left.right = Node(5) \n  \n    print(\"Maximum Depth of binary tree is\", calculate_depth(root)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class WebsiteScraper(object):\n    def __init__(self, url):\n        self.url = url\n\n    def scrapedata(self):\n        response = requests.get(self.url)\n        soup = BeautifulSoup(response.text)\n        scraped_list = []\n        for item in soup.find_all('div'):\n            data = {\n                'name': item.get('title'),\n                'value': item.get_text()\n            }\n            scraped_list.append(data)\n        return scraped_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def detect_key_phrases(text):\n    # use some NLP model to detect the key phrases\n    key_phrases = model.predict(text)\n    return key_phrases but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\ndata = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n\n# making the line plot\nplt.plot(data, '-o') # '-o' is used to connected the dots\n\n# naming the x axis\nplt.xlabel('x - axis')\n# naming the y axis\nplt.ylabel('y - axis')\n\n# giving a title to my graph\nplt.title('Line chart of numbers from 1 to 15')\n\n# function to show the plot\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printPrimeNumbers(start, end):\n \n for num in range(start, end + 1):\n   if num > 1:\n      for i in range(2, num):\n          if (num % i) == 0:\n              break\n      else:\n          print(num)\n          \nstart = 2\nend = 10\nprint(\"Prime numbers between\", start, \"and\", end, \"are:\")\nprintPrimeNumbers(start, end) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The script should accept a search query as an input and query a geospatial database. The output should be a visual representation of the data, such as a map, heatmap or chart. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: int_list = []\n\ndef add_element_to_list(element):\n    int_list.append(element);\n\ndef remove_element_from_list(element):\n    int_list.remove(element); but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_word(txt, replace_word, replace_with): \n    words = txt.split(\" \") \n    for i in range(0, len(words)): \n        if (words[i] == replace_word): \n            words[i] = replace_with\n    return \" \".join(words)\n\ns = \"Roses are red, violets are blue.\"\nprint(replace_word(s, \"blue\", \"red\")) # Roses are red, violets are red. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def append_nums(lst):\n    new_list = [x + 10 for x in lst]\n    return new_list\n\nprint(append_nums([1, 2, 3])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import discord\nfrom discord.ext import commands\n\nclient = commands.Bot(command_prefix='.')\n\n@client.event\nasync def on_ready():\n    print('Bot is ready.')\n\n@client.command()\nasync def question(ctx, *, question):\n    responses = {\n        \"what is python\": \"Python is a high-level programming language.\",\n        \"who created python\": \"Python was created by Guido van Rossum in 1991.\",\n        \"what is java\": \"Java is a class-based, object-oriented programming language.\",\n        \"who created java\": \"Java was created by James Gosling in 1995.\"\n    }\n\n    await ctx.send(responses.get(question.lower(), \"I'm sorry, I don't understand.\"))\n\nclient.run('<YOUR BOT TOKEN>') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to check if user's \n# input is prime or not \n\n# function to check prime number\ndef checkPrime(num):\n    # Looping from 2 to n-1\n    for i in range(2, num):\n        # Checking if there is a remainder\n        if (num % i) == 0:\n            print(num, \" is not a prime number\")\n            break\n    else:\n        print(num, \" is a prime number\")\n\n# Taking input from user\nnum = int(input(\"Enter a number to check if it is prime: \"))\n\n# Check the number if prime or not\ncheckPrime(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(num1, num2):\n  if num1 > num2:\n    return num1\n  else:\n    return num2\n\nmax_num = find_max(number1, number2)\nprint(max_num)  # Outputs 6 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(ls):\n    result = []\n    for e in ls:\n        if e not in result:\n            result.append(e)\n    return list(set(result)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isAnagramSubstring(string, substring):\n    if len(substring) > len(string):\n        return False\n\n    chars = {}\n\n    for char in string[:len(substring)]:\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n\n    for char in substring:\n        if char not in chars or chars[char] == 0:\n            return False\n        else:\n            chars[char] -= 1\n\n    return True\n\nstring = \"listen\"\nsubstring = \"silent\"\n\nif isAnagramSubstring(string, substring):\n    print(\"It contains an anagram of the substring\")\nelse:\n    print(\"It does not contain an anagram of the substring\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quickSort(v, low, high):\n    if low < high:\n        # Get the partition index using partition()\n        pi = partition(v, low, high)\n\n        # Sort the elements before the partition\n        quickSort(v, low, pi - 1)\n        \n        # Sort the elements after the partition\n        quickSort(v, pi + 1, high)\n\ndef partition(v, low, high):\n    # Select the pivot element\n    pivot = v[high]\n    i = low - 1\n\n    # Iterate over the list of integers\n    for j in range(low, high):\n        # Accept the element as part of the partition if it is not repeated\n        if v[j] != pivot:\n            i = i + 1\n            v[i], v[j] = v[j], v[i]\n\n    v[i + 1], v[high] = v[high], v[i + 1]\n    return i + 1\n\n# Main function\nif __name__ == \"__main__\":\n    v = [9, 5, 7, 4, 3, 10]\n    n = len(v)\n    quickSort(v, 0, n - 1)\n    print(\"Sorted array is:\")\n    for i in range(n):\n        print(v[i], end=\" \") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [1, 2, 3, 4, 5]\nnew_list = [x * y for x, y in zip(my_list, my_list[1:] + [1])] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sumoflist(list): \n  sum = 0\n  for i in range(0, len(list)): \n    sum = sum + list[i] \n  \n  return sum\n\nlist1 = [1, 4, 2, 5, 9] \nprint(sumoflist(list1)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\n\ndef remove_puncutuation(string):\n    translator = str.maketrans('', '', string.punctuation)\n    return string.translate(translator)\n\nstring = \"This string contains , a comma, and a % symbol.\"\n\nprint(remove_puncutuation(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: dictionary = {\n\"name\": \"John\",\n\"age\": 40\n}\nkey = \"name\"\n\nfor key, value in dictionary.items():\n  if key == key:\n    print(value)\n    break but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class InventoryItem:\n  def __init__(self, name, cost, quantity):\n    self.name = name\n    self.cost = cost\n    self.quantity = quantity but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import the required library\nimport math\n\n# Check if a number is prime\ndef is_prime(num):\n if num < 2:\n return False\n for i in range(2, int(math.sqrt(num)) + 1):\n if num % i == 0:\n return False\n return True\n\n# Main program\nnum = int(input('Enter a number: '))\nif is_prime(num):\n print(f'{num} is a prime number')\nelse:\n print(f'{num} is not a prime number') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person(object):\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef simulateSystem(x1, v1, x2, v2, x3, v3, time):\n    G = 6.67 * 10**-11\n    m1, m2, m3 = 10, 5, 15 # mass of each body (in kilograms)\n    dt = time / 500.0 # time step\n    X = []\n    Y = []\n\n    for t in range(time):\n        # Compute forces\n        r12 = np.sqrt( (x2[0]-x1[0])**2 + (x2[1]-x1[1])**2 )\n        r23 = np.sqrt( (x3[0]-x2[0])**2 + (x3[1]-x2[1])**2 )\n        r13 = np.sqrt( (x3[0]-x1[0])**2 + (x3[1]-x1[1])**2 )\n\n        F12x = G * m1 * m2 * (x2[0] - x1[0]) / r12**3\n        F12y = G * m1 * m2 * (x2[1] - x1[1]) / r12**3\n\n        F23x = G * m2 * m3 * (x3[0] - x2[0]) / r23**3\n        F23y = G * m2 * m3 * (x3[1] - x2[1]) / r23**3\n\n        F31x = G * m3 * m1 * (x3[0] - x1[0]) / r13**3\n        F31y = G * m3 * m1 * (x3[1] - x1[1]) / r13**3\n\n        # Update position\n        x1[0] += v1[0] * dt\n        x1[1] += v1[1] * dt\n\n        x2[0] += v2[0] * dt\n        x2[1] += v2[1] * dt\n\n        x3[0] += v3[0] * dt\n        x3[1] += v3[1] * dt\n\n        # Update velocity\n        v1[0] += (F12x + F31x) * dt / m1\n        v1[1] += (F12y + F31y) * dt / m1\n\n        v2[0] += (F12x + F23x) * dt / m2\n        v2[1] += (F12y + F23y) * dt / m2\n\n        v3[0] += (F23x + F31x) * dt / m3\n        v3[1] += (F23y + F31y) * dt / m3\n\n        # Store trajectory\n        X.append(x1[0])\n        Y.append(x1[1])\n\n    return X, Y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_depth(node): \n    \n    if node is None: \n        return 0 ;  \n\n    else : \n  \n        # Compute the depth of each subtree \n        depth_left = max_depth(node.left) \n        depth_right = max_depth(node.right) \n  \n        # Use the larger one \n        if (depth_left > depth_right): \n            return depth_left+1\n        else: \n            return depth_right+1\n\ndepth = max_depth(root) \nprint (depth) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n\nfor day in days:\n    print(day) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_elements(list1, list2):\n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n    \n    return list1\n\nresult = remove_elements([1, 2, 3, 4, 5], [4, 5, 6])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_n(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list1 = [2, 3, 4]\nlist2 = [5, 6, 7]\nlist3 = [8, 9, 10]\n\nlist = list1 + list2 + list3\nprint(list) \n# Output: [2, 3, 4, 5, 6, 7, 8, 9, 10] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num1 = 10\nnum2 = 20\n\nsum = num1 + num2\n\nprint(\"The sum of {0} and {1} is {2}\".format(num1, num2, sum)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Imports\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Function to crawl the website\ndef crawl_website(url):\n\t# Make a request to the website\n\tr = requests.get(url)\n\n\t# Parse the html\n\tsoup = BeautifulSoup(r.content)\n\n\t# Retrieve all the text\n\ttext = soup.get_text()\n\n\t# Count the number of words\n\tword_count = len(text.split())\n\t\n\treturn word_count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: unsortedList = [4,3,2,1]\n \nfor i in range(len(unsortedList)): \n    min_idx = i\n    for j in range(i+1, len(unsortedList)):\n        if unsortedList[min_idx] > unsortedList[j]: \n            min_idx = j \n    unsortedList[i], unsortedList[min_idx] = unsortedList[min_idx], unsortedList[i]\n    \nprint(\"Sorted list:\", unsortedList) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class LRUCache:\n def __init__(self, capacity):\n self.capacity = capacity\n self.cache = {}\n self.lru_list = []\n\n def get(self, key):\n if key in self.cache:\n  self.lru_list.remove(key)\n  self.lru_list.append(key)\n  return self.cache[key]\n else:\n  return None\n\n def put(self, key, value):\n self.cache[key] = value\n if key in self.lru_list:\n  self.lru_list.remove(key)\n self.lru_list.append(key)\n if len(self.lru_list) > self.capacity:\n  elementToRemove = self.lru_list.pop(0)\n  del self.cache[elementToRemove] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\nconn = sqlite3.connect('ecommerce.db')\ncursor = conn.cursor()\n\n# Create table for products\ncursor.execute('''CREATE TABLE products (\n           product_id INTEGER PRIMARY KEY, \n           name VARCHAR(100) NOT NULL,\n           price INTEGER NOT NULL\n           );''')\n\n# Create table for orders\ncursor.execute('''CREATE TABLE orders (\n           order_id INTEGER PRIMARY KEY, \n           product_id INTEGER NOT NULL, \n           customer_id INTEGER NOT NULL, \n           quantity INTEGER NOT NULL,\n           FOREIGN KEY (product_id) REFERENCES products(product_id)\n           );''')\n\n# Create table for customers\ncursor.execute('''CREATE TABLE customers (\n           customer_id INTEGER PRIMARY KEY, \n           name VARCHAR(100) NOT NULL,\n           phone VARCHAR(20) NOT NULL,\n           address VARCHAR(100) NOT NULL\n           );''')\n\nconn.commit()\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import spacy\nnlp = spacy.load('en_core_web_sm')\n\ndef classifier(doc):\n    if doc.text.startswith('http'):\n        return 'Website'\n    elif doc.text.startswith('www'):\n        return 'Website'\n    elif '@' in doc.text:\n        return 'Email'\n    elif '#' in doc.text:\n        return 'Hashtag'\n    elif doc.is_space:\n        return 'Space'\n    else:\n        doc = nlp(doc.text)\n        tokens_no_punct = [token for token in doc if not token.is_punct]\n        token_length = len(tokens_no_punct)\n        if token_length <= 3:\n            return 'Short Text'\n        elif token_length > 3 and token_length <=15:\n            return 'Medium Text'\n        elif token_length > 15:\n            return 'Long Text'\n            \nif __name__ == '__main__':\n    doc = input('Input your text:')\n    print('Classification: ' + classifier(doc)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Product:\n    def __init__(self, title, price, model, brand, color):\n        self.title = title\n        self.price = price\n        self.model = model\n        self.brand = brand\n        self.color = color\n    \n    def get_title(self):\n        return self.title\n    \n    def set_title(self, title):\n        self.title = title\n\n    def get_price(self):\n        return self.price\n    \n    def set_price(self, price):\n        self.price = price\n\n    def get_model(self):\n        return self.model\n    \n    def set_model(self, model):\n        self.model = model\n\n    def get_brand(self):\n        return self.brand\n    \n    def set_brand(self, brand):\n        self.brand = brand\n\n    def get_color(self):\n        return self.color\n    \n    def set_color(self, color):\n        self.color = color but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, student_id, name, email, contact_no):\n        self.student_id = student_id\n        self.name = name\n        self.email = email\n        self.contact_no = contact_no\n        \n    def get_details(self):\n        return f\"Student ID: {self.student_id}, Name: {self.name}, Email: {self.email}, Contact No.: {self.contact_no}\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_increasing_subsequence(nums):\n n = len(nums)\n lengths = [1] * n\n\n for i in range(n):\n for j in range(i):\n if nums[j] < nums[i]:\n lengths[i] = max(lengths[i], lengths[j] + 1)\n \n longest_increasing_subsequence_length = max(lengths)\n \n return longest_increasing_subsequence_length\n\nnums = [10, 22, 9, 33, 21, 50, 41, 60, 80]\nprint(longest_increasing_subsequence(nums)) // prints 6 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def standardize(data):\n    mean = data.mean()\n    std = data.std()\n    z_score = (data - mean) / std\n    return z_score but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.feature_extraction.text import TfidfVectori\nfrom sklearn.cluster import KMeans\n\n# Create tf-idf vectors for each document \nvectorizer = TfidfVectorizer(stop_words='english')\nX = vectorizer.fit_transform(documents)\n\n# Generate the clusters \ntrue_k = 5\nmodel = KMeans(n_clusters=true_k, init='k-means++', max_iter=100, n_init=1)\nmodel.fit(X)\n\n# Show the top terms for each cluster \nprint(\"Top terms per cluster:\")\norder_centroids = model.cluster_centers_.argsort()[:, ::-1]\nterms = vectorizer.get_feature_names()\nfor i in range(true_k):\n print(\"Cluster %d:\" % i)\n for ind in order_centroids[i, :10]:\n print(' %s' % terms[ind])\n print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from time import strftime\n\ndef digital_clock():\n    current_time = strftime(\"%H:%M:%S\")\n    print(current_time)\n\ndigital_clock() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insertion_sort(arr):  \n    for i in range(1, len(arr)): \n    \n        key = arr[i] \n\n        j = i-1\n        while j >= 0 and key < arr[j] : \n                arr[j + 1] = arr[j] \n                j -= 1\n        arr[j + 1] = key \n\n    return arr\n\ninsertion_sort([4,1,8,11,15])\n\n# Output  [1, 4, 8, 11, 15] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def accumulator_add(matrix):\n   output_matrix = []\n   #iterates over all sublists\n   for row in matrix:\n       #creates a new sublist to store the sums\n       output_sublist = []\n       sum = 0\n       #iterates over all elements in the sublist\n       for sublist_element in rows:\n           #adds the element to the total sum\n           sum +=sublist_element\n           #appends the updated total sum to the new sublist\n           output_sublist.append(sum)\n       #appends the new sublist to the new list\n       output_matrix.append(output_sublist)\n   #returns the new matrix\n   return output_matrix but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_random_string(length):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(length))\n\nrandom_string = generate_random_string(10)\nprint(random_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def top_three(list):\n    sorted_list = sorted(list, reverse = True) \n    return sorted_list[:3] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: set1 = {2, 4, 6, 8, 10} \nset2 = {3, 5, 7, 9}\n\n# Divide two sets and store the results in a new set\nnew_set = set1.difference(set2) \n \n# Print the result\nprint(new_set) # Output: {2, 4, 6, 8, 10} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent(input_string):\n    # Convert input string to a dictionary\n    char_frequency = {}\n    for n in input_string:\n        keys = char_frequency.keys()\n        if n in keys:\n            char_frequency[n] += 1\n        else:\n            char_frequency[n] = 1\n     \n    # Sort the dictionary by value in descending order\n    max_value = max(char_frequency.values())\n    max_char = [element for element in char_frequency if char_frequency[element] == max_value]\n \n    # Print the most frequent letter\n    if len(max_char) > 1:\n        print(\"Most frequent character: \" + \",\".join(max_char))\n    else:\n        print(\"Most frequent character: \" + max_char[0])\n\nmost_frequent(\"Programmers\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n def __init__(self, data): \n self.left = None\n self.right = None\n self.data = data \n\ndef insert(root, node):\n if root is None:\n root = node\n else: \n if root.data < node.data: \n if root.right is None: \n root.right = node \n else: \n insert(root.right, node) \n else: \n if root.left is None: \n root.left = node \n else: \n insert(root.left, node)\n\ndef build_tree(input_list): \n root = Node(input_list[0]) \n for i in range(1, len(input_list)): \n insert(root, Node(input_list[i])) \n return root \n\n# Test List \ninput_list = [2, 6, 1, 4, 3, 5, 7]\n\n# Use the above function \nroot = build_tree(input_list) \n\ndef inOrder(root): \n if root is not None: \n inOrder(root.left) \n print(root.data) \n inOrder(root.right) \n\ninOrder(root) \n\n# Output:\n1\n2\n3\n4\n5\n6\n7 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nImplement a priority queue data structure in Python.\n\"\"\"\n\nclass PriorityQueue:\n    def __init__(self):\n        self.items = []\n\n    def insert(self, data, priority):\n        # Insert item data with priority p in the priority queue.\n        item = (data, priority)\n        self.items.append(item)\n        self.items = sorted(self.items, key = lambda item: item[1])\n\n    def pop(self):\n        # Remove the highest priority item from the queue.\n        return self.items.pop(0)[0]\n\n    def peek(self):\n        # Get the highest priority item without removing it.\n        return self.items[0][0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_divisors(number):\n    divisors = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors += 1\n    print(\"Number of divisors:\", divisors) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_consonant(word): \n    # List containing all consonants \n    consonants = [\"b\",\"c\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"q\",\"r\",\"s\",\"t\",\"v\",\"x\",\"z\"] \n    for char in word: \n        if char in consonants: \n            return True\n    return False\n\n# Example\nprint (is_consonant(\"hello\")) # False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start=100, stop=700, num=7)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(10, 60, num=6)]\nmax_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 4]\n# Method of selecting samples for training each tree\nbootstrap = [True, False]\n\n# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\n\n# Use the random grid to search for best hyperparameters\n# First create the base model to tune\nrf = RandomForestClassifier()\n# Random search of parameters, using 3 fold cross validation, \n# search across 100 different combinations, and use all available cores\nrf_random = RandomizedSearchCV(estimator=rf, param_distributions=random_grid,\n                              n_iter=100, cv=3, verbose=2, random_state=0, n_jobs=-1)\n# Fit the random search model\nrf_random.fit(X_train, y_train)\n\n# Print best hyperparameters\nprint(\"Best hyperparameters:\", rf_random.best_params_)\n \u00a7\u00a7 COM but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize_function(func):\n    optimizer = tf.keras.optimizers.Adam()\n    for step in range(steps):\n        with tf.GradientTape() as tape:\n            y_pred = func()\n            # compute loss\n            loss = some_loss(y_true, y_pred)\n        gradients = tape.gradient(loss, func.variables())\n        optimizer.apply_gradients(zip(gradients, func.variables()))\n    return func but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Program to create a customised calculator\n\n\ndef customised_calculator():\n    operation = input(\"Please specify the operation you want to perform (add or subtract): \")\n\n    # take input from the user\n    num1 = float(input(\"Enter first number: \"))\n    num2 = float(input(\"Enter second number: \"))\n\n    # check the operation\n    if operation == 'add':\n        sum = num1 + num2\n        print('Sum of {0} and {1} is {2}'.format(num1, num2, sum))\n\n    elif operation == 'subtract':\n        difference = num1 - num2\n        print('Difference of {0} and {1} is {2}'.format(num1, num2, difference))\n\n    else:\n        print('Please enter a valid operation')\n\n# invoke the function\ncustomised_calculator() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to convert a sentence to Pig Latin\ndef toPigLatin(sentence):\n  words = sentence.split()\n  pigLatin = []\n  for word in words:\n    firstLetter = word[0]\n\n    if firstLetter in 'aeiou':\n      pigLatinWord = word + 'way'\n    else:\n      pigLatinWord = word[1:] + firstLetter + 'ay'\n\n    pigLatin.append(pigLatinWord)\n\n  return ' '.join(pigLatin)\n\n# Get a sentence from the user\nsentence = input('Enter a sentence: ')\n\n# Convert the sentence to Pig Latin\npigLatin = toPigLatin(sentence)\n\n# Print the result\nprint(pigLatin) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import Python modules\nimport os\nimport lxml\nimport requests\nimport html5lib\n\n# Retrieve the HTML\nurl = 'https://www.example.com/'\nr = requests.get(url)\nhtml_doc = r.text\n\n# Parse the HTML\ntree = lxml.html.fromstring(html_doc)\nlinks = tree.xpath('//a/@href')\n\n# Fetch the data from each link\ndata = []\nfor link in links:\n try:\n r = requests.get(link)\n data.append(r.text)\n except:\n pass\n \n# Store data in a file\nfile_name = os.path.join('data', 'data.txt')\nwith open(file_name, 'w') as f:\n f.write('\\n'.join(data)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum(arr):\n    if not arr:\n        return 0\n    else:\n        return arr[0] + sum(arr[1:]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: cities = [[\"New York\", \"USA\", 40.71,-74.00], [\"London\", \"UK\", -0.13, 51.50], [\"Paris\", \"France\", 2.35, 48.85]]\n\ndef find_furthest_north(cities):\n  furthest_north = cities[0]\n  for city in cities:\n    if city[2] > furthest_north[2]:\n      furthest_north = city\n  return furthest_north\n\nfurthest_north = find_furthest_north(cities)\nprint(furthest_north) # prints [\"London\", \"UK\", -0.13, 51.50] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os\n\nfor item in os.listdir():\n    print(item) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_digits(number):\n    total = 0\n    while number > 0:\n        total += number % 10\n        number //= 10\n    return total\n\nprint(\"Sum of digits:\",sum_digits(2345)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# Read the data\ndata = pd.read_csv('housing.csv')\n# Split into X and y\nX = data.drop('price', axis=1)\ny = data['price']\n# Initialize the model\nmodel = LinearRegression()\n# Fit the model to the training data\nmodel.fit(X, y)\n# Estimate future prices using the model\npredictions = model.predict(X) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def contains_duplicate(s):\n    counts = dict()\n    for ch in s:\n        if ch in counts:\n            return True\n        counts[ch] = 1\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\ndata = pd.read_csv(\"data.csv\")\n\nX = data[['Name', 'Age', 'Pet']]\ny = data['Label']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state=0)\n\ndtree_model=DecisionTreeClassifier(max_depth=2).fit(X_train,y_train)\ndtree_predictions=dtree_model.predict(X_test)\n\naccuracy_score=accuracy_score(y_test,dtree_predictions)\nprint(accuracy_score)\nconf_matrix = confusion_matrix(y_test,dtree_predictions)\nprint(conf_matrix) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent(lst):\n    max = 0\n    frequent = lst[0]\n    for item in lst:\n        freq = lst.count(item)\n        if freq > max:\n            max = freq\n            frequent = item\n    return frequent but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_string(arr, query):\n indices = []\n for i in range(len(arr)):\n  if arr[i] == query:\n    indices.append(i)\n return indices\n\nprint(find_string([\"hello\", \"world\", \"hello\", \"world\"], \"world\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calc_prob(n):\n    return (1/2)**n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_string():\n   # Inputs: None\n   # Output: Random special character string\n   special_chars = [x for x in '@#$%^&*']\n   random_string = \"\"\n   for _ in range(8):\n       random_string += random.choice(special_chars)\n   return random_string\n\nprint(generate_random_string()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPrime(n): \n    for i in range(2,n): \n        if n % i == 0: \n            return False\n    return True\n\nnumbers = [2, 3, 7, 11, 12, 15] \nprimes = filter(isPrime, numbers)\nprint('Prime numbers are:') \nprint(list(primes)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom scipy.optimize import linprog\n\n# Define objective function\nc = np.array([3,4])\n\n# Define constraints\nA = np.array([[2,1], [1,2]])\nb = np.array([10,10])\n\n# Define bounds\nx0_bnds = (0, None)\nx1_bnds = (0, None)\n\n# Apply constraint\nres = linprog(c, A_ub=A, b_ub=b, bounds=(x0_bnds, x1_bnds), options={\"disp\": True})\n\n# Print result\nprint(\"Optimal value:\", res.fun, \"\\nX =\", res.x)\n# Output: Optimal value: 13.333333333333334 \n#         X = [3.33333333 2.33333333] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_distinct_substring(s):\n longest = 0\n \n# creating a dictionary \n seen = {}\n start = 0\n \n for i, char in enumerate(s):\n  if char in seen and start <= seen[char]:\n   start = seen[char] + 1\n  \n  else:\n   longest = max(longest, i - start + 1)\n \n seen[char] = i\n \n return longest\n\nprint(longest_distinct_substring(\"abcabcbb\"))\n# Output: 3 (the longest substring is \"abc\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a Python code to implement the \"Edit Distance\" algorithm to compare two strings and output their edit distance.\n\"\"\" \n\ndef edit_distance(str1, str2):\n    # create a matrix for storing the results\n    matrix = [[0 for x in range(len(str1) + 1)] for x in range(len(str2) + 1)]\n\n    # initialize the matrix\n    for i in range(len(str2) + 1):\n        matrix[i][0] = i\n\n    for j in range(len(str1) + 1):\n        matrix[0][j] = j\n\n    # fill the matrix\n    for i in range(1, len(str2) + 1):\n        for j in range(1, len(str1) + 1):\n            if str2[i - 1] == str1[j - 1]:\n                matrix[i][j] = matrix[i - 1][j - 1]\n            else:\n                matrix[i][j] = min(matrix[i - 1][j], matrix[i][j - 1], matrix[i - 1][j - 1]) + 1\n\n    return matrix[len(str2)][len(str1)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def unique_list(list): \n  new_list = list(set(list)) \n  new_list.sort() \n  return new_list\n\nprint (unique_list([15, 2, 4, 15, 46, 4, 3, 21])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Calendar:\n    def __init__(self):\n        self.events = {}\n\n    def add_event(self, date, description):\n        if date in self.events:\n            self.events[date].append(description)\n        else:\n            self.events[date] = [description]\n\n    def list_events(self):\n        for date, descriptions in self.events.items():\n            for description in descriptions:\n                print(date, \":\", description)\n\ncalendar = Calendar()\ncalendar.add_event(\"04-04-2020\", \"Jaunch conference\")\ncalendar.add_event(\"10-05-2020\", \"Mothers Day\")\ncalendar.list_events() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef random_int_generator(a, b):\n    return random.randint(a, b) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class HashMap:\n \n    def __init__(self, size): \n        self.size = size \n        self.map = [None] * size\n \n    def _get_hash(self, key):\n        hashCode = 0\n        for char in key:\n            hashCode += ord(char)\n        return hashCode % self.size\n \n    def add(self, key, value):\n        keyHash = self._get_hash(key)\n \n        keyValue = [key, value]\n        if self.map[keyHash] is None:\n            self.map[keyHash] = list([keyValue])\n            return True\n        else:\n            for pair in self.map[keyHash]:\n                if pair[0] == key:\n                    pair[1] = value\n                    return True\n            self.map[keyHash].append(keyValue)\n            return True\n \n    def get(self, key):\n        keyHash = self._get_hash(key)\n        if self.map[keyHash] is None:\n            return None\n        else:\n            for pair in self.map[keyHash]:\n                if pair[0] == key:\n                    return pair[1]\n        return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\nimport nltk\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Preprocess the tweet\ndef preprocess(text):\n  text = text.lower() \n  text = re.sub(r'[^a-zA-Z0-9\\s]', '', text)\n  tokens = nltk.word_tokenize(text)\n  tokens = [token for token in tokens if token not in stopwords.words('english')]\n  text = \" \".join(tokens)\n  return text\n\n# Create TF-IDF vectorizer\ntfidf_vectorizer = TfidfVectorizer()\n\n# Vectorize the sample tweet\nvectorized_text = tfidf_vectorizer.fit_transform(preprocess(tweet)).todense()\n\nfrom sklearn.cluster import KMeans\n\n# Create a cluster of tweets\nnumber_of_clusters = 3\nclusters = KMeans(n_clusters=number_of_clusters, random_state=0).fit(vectorized_text)\n\n# Print the cluster for the sample tweet\nprint(clusters.predict(vectorized_text)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printPrimeNumbers(start, end):\n for num in range(start, end+1):\n # base case\n if num > 1: \n for i in range(2, num): \n if (num % i) == 0: \n break\n else: \n print(num) \n\n# Driver Code \nstart = 15\nend = 25\n\nprintPrimeNumbers(start, end) \n\n# Output:\n# 17 \n# 19 \n# 23 \n# 25 but is not the same. just give one example and only return the code."}
