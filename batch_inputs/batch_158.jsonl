{"prompt": "make some code that functions the same as the following code: import requests\nimport lxml.html as lh\n\nmovies_url = 'https://www.imdb.com/chart/top?ref_=nv_mv_250_6'\n\npage = requests.get(movies_url)\ndoc = lh.fromstring(page.content)\n\n# Get the list of movie elements\nmovie_elements = doc.xpath('//tr')\n\n# Store the titles and ratings\ntitles = []\nratings = []\nfor movie in movie_elements:\n title_cell = movie.xpath('./td[@class=\"titleColumn\"]//a')\n if title_cell:\n title = title_cell[0].text_content()\n titles.append(title)\n rating_cell = movie.xpath('./td[@class=\"ratingColumn imdbRating\"]//strong')\n if rating_cell:\n rating = rating_cell[0].text_content()\n ratings.append(rating)\n\n# Print the titles and ratings\nfor i in range(len(titles)):\n print(titles[i], '-', ratings[i]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Circle:\n    def __init__(self, radius):\n        self.radius = radius \n\n    # Getter method \n    def getRadius(self): \n        return self.radius \n  \n    # Setter method \n    def setRadius(self, radius): \n        self.radius = radius \n  \n    # Area method \n    def getArea(self): \n        return 3.14 * (self.radius**2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_sum(list_in):\n return sum(list_in)\n\n# or\ndef list_sum(list_in):\n total_sum = 0\n \n for num in list_in:\n total_sum += num\n \n return total_sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def listoflists_to_cmov(listoflists): \n    # Initialise CMOV array\n    cmov = [0]*9\n  \n    # Fill CMOV array with given list of lists\n    for i, list_ in enumerate(listoflists): \n        cmov[i*3:(i+1)*3] = list_\n\n    # Return CMOV array \n    return cmov but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def palindromeArray(s): \n\tres = [] \n\tfor i in range(1 << len(s)): \n\t\ttemp = \"\" \n\t\tfor j in range(len(s)): \n\t\t\t# Check if jth bit is set in i \n\t\t\tif (i & (1 << j)) > 0:\n\t\t\t\ttemp = temp + s[j] \n\t\t# Check if temp is palindrome\n\t\tif (temp == temp[::-1]):\n\t\t\tres.append(temp) \n\treturn res\n\nprint(palindromeArray(\"abacad\")) \n# Output: ['a', 'aa', 'ada', 'aca', 'aba'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def func1(n, lookup): \n    if n == 0 or n == 1 : \n        lookup[n] = n \n    if lookup[n] is None:  \n        lookup[n] = func1(n-1, lookup) + func1(n-2, lookup)  \n    return lookup[n] \n  \ndef optimizedFibo(n): \n    lookup = [None]*(n+1)  \n    return func1(n, lookup) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\n# define the data\n# X = [1, 2, 3, 4, 5]\n# Y = [2, 4, 5, 4, 5]\nX = np.array([1, 2, 3, 4, 5])\nY = np.array([2, 4, 5, 4, 5])\n\n# calculate the mean of x and y\nxmean = np.mean(X)\nymean = np.mean(Y)\n\n# calculate the equations\nnum = 0\nden = 0\n\nfor i in range(len(X)):\n    num += (X[i] - xmean)*(Y[i] - ymean)\n    den += (X[i] - xmean)**2\n\n# calculate m and c \nm = num/den\nc = ymean - m*xmean\n\n# display the line equation \nprint(\"Regression line equation:\")\nprint(\"y = {}x + {}\".format(m, c)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program\ndef main():\n    num1 = int(input(\"Enter the first number: \"))\n    num2 = int(input(\"Enter the second number: \"))\n    \n    # use max and min functions to output the numbers in ascending order\n    print(min(num1, num2))\n    print(max(num1, num2))\n\nif __name__ == \"__main__\":\n    main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_sum(list):\n   sum = 0\n   for el in list:\n       sum += el\n   return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def highest_repeating_word(paragraph):\n    \"\"\"\n    Finds the highest repeating word in a given paragraph.\n    \n    Args:\n        paragraph (str): The paragraph.\n    \n    Return:\n        str: The highest repeating word.\n    \"\"\"\n\n    words = paragraph.split()\n\n    # Create a dictionary to store the word frequencies\n    word_freq = {}\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n\n    highest_freq = 0\n    highest_freq_word = None\n\n    # Find the highest frequency word\n    for word, freq in word_freq.items():\n        if freq > highest_freq:\n            highest_freq = freq\n            highest_freq_word = word\n\n    return highest_freq_word but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import collections\n\ndef get_top_words(text, n):\n    \"\"\" \n    Function to retrieve the top N most used words in a given text document.\n\n    Args:\n        text (str): The text document\n        n (int): Number of words to extract\n\n    Returns:\n        The top n most used words as a list of strings.\n    \"\"\"\n    # Tokenize the text\n    tokens = tokenize(text) \n    \n    # Count the number of times each token appears in the text\n    token_count = collections.Counter(tokens).most_common(n)\n    # Extract the words from token_count\n    top_words = [word for word, _ in token_count]\n\n    return top_words but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/bin/bash\n\n# Download and install Python\nwget https://www.python.org/ftp/python/${version}/Python-${version}.tgz\ntar -xvzf Python-${version}\ncd Python-${version}/\n./configure\nmake\nmake install\n\n# Install modules\npip install ${modules[0]}\npip install ${modules[1]} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maxNonOverlappingSum(arr): \n    incl_sum = 0\n    excl_sum = 0\n  \n    for i in arr: \n        # Current max excluding i (No ternary operator in Python) \n        new_excl_sum = excl_sum if excl_sum>incl_sum else incl_sum \n  \n        # Current max including i \n        incl_sum = excl_sum + i \n  \n        # Add previous excl_sum\n        excl_sum = new_excl_sum \n  \n    # return max of incl_sum and excl_sum \n    return (excl_sum if excl_sum>incl_sum else incl_sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_table():\n    print(\" x | x^2\")\n    print(\"-----------\")\n\n    for i in range(11):\n        answer = i * i\n        print(f\" {i} | {answer}\")\n\nprint_table() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_combinations(arr):\n    combinations = []\n    \n    for i in range(len(arr) + 1):\n        for j in range(i + 1, len(arr) + 1):\n            for k in range(j + 1, len(arr)+1):\n                combinations.append(arr[i:j] + arr[j:k])\n    return combinations\n\nresult = get_combinations([1, 2, 3])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #importing necessary libraries\nfrom sklearn import tree\nimport numpy as np\n\n#data\nX = np.array([[0, 1, 0, 1, 0], [1, 0, 1, 0, 1]])\ny = np.array([0, 1])\n\n#model\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X, y)\n\n#predicting\nx_test = np.array([[1, 0, 0, 0, 1]])\nprediction = clf.predict(x_test)\n\n#result\nprint(prediction) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(7):\n    print(\"*\" * i)\nfor i in reversed(range(7)):\n    print(\"*\" * i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def hanoi(n, source, temp, dest):\n    if n == 1:\n        print(\"Move disk 1 from {} to {}\".format(source, dest))\n        return\n    hanoi(n-1, source, dest, temp)\n    print(\"Move disk {} from {} to {}\".format(n, source, dest))\n    hanoi(n-1, temp, source, dest) \n\nif __name__ == \"__main__\":\n    n = 3 # Number of disks\n    hanoi(n, 'A', 'B', 'C')  # A, B and C are the names of the rods but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime \nimport time \nimport os \n\ndef setReminder(reminder_time, reminder_message): \n  # Get the current time\n  current_time = datetime.datetime.now() \n  \n  # Calculate the amount of time until the reminder is due\n  wait_time = (reminder_time - current_time).total_seconds() \n  \n  # Sleep for the amount of time until the reminder\n  time.sleep(wait_time) \n\n  # Print the reminder message\n  print(\"\\nReminder: %s\" % reminder_message) \n\n  # Play a sound to alert the user\n  os.system(\"start reminder_sound.wav\") \n\n# Set a reminder for 5 minutes from now\nreminder_time = datetime.datetime.now() + datetime.timedelta(minutes=5) \nreminder_message = \"Time to take a break!\" \nsetReminder(reminder_time, reminder_message) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pascals_triangle(n): \n  \n    # list to store the elements of each row\n    pascal_triangle = []\n  \n    # loop to calculate each row of the triangle\n    for row_number in range(n):\n  \n        row = []\n        for element in range(row_number+1):\n            # first and last elements of each row are 1\n            if element == 0 or element == row_number:\n                row.append(1)\n            # other elements if any are sum of the elements\n            # just above it\n            else:\n                row.append(pascal_triangle[row_number-1][element-1] +\n                pascal_triangle[row_number-1][element])\n  \n        # add the row to the triangle\n        pascal_triangle.append(row)\n  \n    return pascal_triangle[n-1]\n  \n# nth row number\nn = 8 \n  \n# print 8th row of pascal's triangle\nprint(pascals_triangle(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\nimport sqlite3\n\nURL = 'https://www.huffpost.com'\n\n# Request the data\nhtml_data = requests.get(URL).text\n\n# Parse the data\nsoup = BeautifulSoup(html_data, 'html.parser')\n\n# Create a connection\nconn = sqlite3.connect('news.db')\nc = conn.cursor()\n\n# Get all article links\narticles = soup.find_all('article')\nfor article in articles:\n a = article.find('a')\n # check if a has href attr\n if a and 'href' in a.attr:\n # join the url with href\n article_url = URL + a.attr['href']\n # Get article data\n html_data = requests.get(article_url).text\n soup_article = BeautifulSoup(html_data, 'html.parser')\n # Get title\n title = soup_article.find('h1')\n # Get the content\n content = soup_article.find('div', {'class': 'entry__content'})\n # Create a database entry\n c.execute('INSERT INTO article (title, url, content) VALUES (?,?,?)',\n (title.text, article_url, content.text))\n \n# Save the changes\nconn.commit()\n \n# Close the connection\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: public class RemoveWhitespace { \n\n    public static String removeWhitespace(String str) \n    { \n        str = str.replaceAll(\"\\\\s\", \"\"); \n        return str; \n    } \n  \n    public static void main(String[] args) \n    { \n        String str = \"Python Programming\"; \n        System.out.println(removeWhitespace(str)); \n    } \n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import spacy\nfrom textblob import TextBlob\n\n# load the spacy model\nnlp = spacy.load('en')\n\n# classify the given mail\nmail_content = 'This is an email from XYZ corporation.'\nif TextBlob(mail_content).sentiment.polarity > 0:\n    output_label = 'Non-spam'\nelse:\n    output_label = 'Spam'\n\n# print the output label\nprint(output_label) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Rational:\n    def __init__(self, numerator, denominator):\n        self.numerator = numerator\n        self.denominator = denominator\n\n    def __str__(self):\n        return f\"{self.numerator}/{self.denominator}\"\n\n    def __add__(self, other):\n        new_numerator = self.numerator * other.denominator + other.numerator * self.denominator\n        new_denominator = self.denominator * other.denominator\n        return Rational(new_numerator, new_denominator) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: largestNum = lambda a: max(a) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(\"You find yourself in a dark dungeon with no apparent exit. What do you do?\nEnter 'walk left', 'walk right', 'walk straight' or 'look around'\")\n\nmove = input()\n\nif move == 'walk left':\n    print(\"You walk to the left and find a door with a lock. What do you do?\")\nelif move == 'walk right':\n    print(\"You walk to the right and find a secret passage leading through the wall. What do you do?\")\nelif move == 'walk straight':\n    print(\"You walk straight and come to a dead end. What do you do?\")\nelif move == 'look around':\n    print(\"You look around and see a lever on the wall. What do you do?\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_words(word, words):\n    return [w for w in words if w == word] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: data=[1, 1, 3, 5, 8, 8]\n\n# create empty dictionary to store the counts of each element\nelement_counts={}\n\n# loop through the list\nfor element in data:\n # add value to dictionary if it does not exist, or increase count if it does exist\n element_counts[element]=element_counts.get(element, 0) + 1\n\n# find the element with the highest count\nmax_count=0\nmax_element=None\nfor element, count in element_counts.items():\n if count>max_count:\n  max_count=count\n  max_element=element\n\n# print out the result\nprint(f\"The most common element is {max_element} with {max_count} occurences\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_sequence(start, end):\n    return list(range(start, end + 1)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from Crypto.Cipher import AES\n\ndef encrypt_password(password):\n    key = b'Sixteen byte key'\n    cipher = AES.new(key,AES.MODE_EAX)\n    nonce = cipher.nonce\n    ciphertext, tag = cipher.encrypt_and_digest(password.encode('utf-8'))\n    return [ciphertext, tag, nonce]\n\nif __name__ == '__main__':\n    password = \"abc123\"\n    print(encrypt_password(password)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def RowChanger(row,textToSearch,textToReplace,fileToSearch):\n    a=1\n    import fileinput\n    tempFile = open( fileToSearch, 'r+' )\n    for line in fileinput.input( fileToSearch ):\n        if row in line :\n            print('done yet')\n            a=0\n    if a:\n        if textToReplace==\"0\":\n            textToReplace = textToSearch+\"\\n\"+row\n        #fileToSearch = 'D:\\dummy1.txt'\n        tempFile = open( fileToSearch, 'r+' )\n        for line in fileinput.input( fileToSearch ):\n            if textToSearch in line :\n                print('done now')\n            tempFile.write(line.replace(textToSearch,textToReplace))\n        tempFile.close()\n#http://pythoncentral.io/pyinstaller-package-python-applications-windows-mac-linux/\ndef ModSpec():\n    print(\"modddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\")\n    import os\n    print(os.path.basename(os.path.dirname(os.path.realpath(__file__))))\n    #nome=os.path.basename(os.path.dirname(os.path.realpath(__file__)))\n    nome=\"kivy_matplotlib\"\n    icon=1\n    onefile=0\n    executive=0\n    vuoimettereunimmagine=0\n    altrecartelle=0\n    versionfile=0\n    nomepy=nome+\".py\"\n    nomespec=nome+\".spec\"\n    nomecart=\"\\\\\"+nome+\"\\\\\"\n    nomeIcon=\"icon.ico\"\n    \n    import platform\n    #windowsonly=\"\" if StringCnf(platform.system(),\"Windows\") else  windowsonly=\" -m \"\n    from calcolatrice.misuras import StringCnf\n    if StringCnf(platform.system(),\"Windows\"):\n        windowsonly=\" -m \"\n    else:\n        windowsonly=\"\"\n    if onefile:\n        vuoifareunfile=\" --onefile\"\n    else:\n        vuoifareunfile=\"\"\n    if vuoimettereunimmagine:\n        nomeimmagine=\"logo.png\"\n    else:\n        nomeimmagine=\"\"\n    \n    if icon:\n        iconStr=\" --icon \"+nomeIcon+\" \"\n    else:\n        iconStr=\"\"\n    #compilatore\n    a=\"\"#\"\\\\\"+os.getcwd()\n    \n    posizione=a+nomepy\n    \n    if versionfile:\n        versionfile=\" --version-file=version.txt \"\n    else:\n        versionfile=\"\"\n    \n    pythonpath=\"!python \"#\"C:\\\\Users\\\\Von Braun\\\\Downloads\\\\WinPython-64bit-3.5.2.3Qt5\\\\python-3.5.2.amd64\\\\Scripts\\\\pyinstaller.exe  \"\n    #pythonpath=\"path='\"+a+\"'\"\n    #pythonpath=     \"C:\\Users\\Von Braun\\Downloads\\WinPython-64bit-3.5.2.3Qt5\\python-3.5.2.amd64\\python.exe \"\n    pyinstallerpath=\"PyInstaller \"\n    #pyinstallerpath=\"C:\\Users\\Von Braun\\Downloads\\WinPython-64bit-3.5.2.3Qt5\\python-3.5.2.amd64\\Lib\\site-packages\\PyInstaller\\building\\makespec.py \"\n    #http://stackoverflow.com/questions/8663046/how-to-install-a-python-package-from-within-ipython\n    #%%!python -m PyInstaller --onefile --name nome --icon icon.ico kivy_matplotlib.py\n    print(\"\\n\\n ATTENDI.....POTRESTI DOVER ASPETTARE MOLTO TEMPO\\n\\n\")\n    creaspecfile=pythonpath+windowsonly+pyinstallerpath+posizione+vuoifareunfile+\" --windowed \"+\"  --name \"+nome+iconStr+versionfile\n    print(creaspecfile)\n    print(\"\\n\\n\")\n    if executive and 0:\n        #from IPython import get_ipython\n        #ipython = get_ipython()\n        #ipython.magic(exec(creaspecfile)) \n        #run(creaspecfile)\n        #exec(input(\"inserisci la frase di sopra\\n\\n\"))\n        import PyInstaller.__main__\n        specpath=\"--specpath \" +os.getcwd()           #/opt/bk/spec\n        distpath=\"--distpath \" +os.getcwd()+\"\\\\dist\"  #/opt/bk/dist\n        workpath=\"--workpath \" +os.getcwd()+\"\\\\build\" #/opt/bk/build\n        print(specpath)\n        print(distpath)\n        print(workpath)\n        #import PyInstaller.utils.cliutils.makespec\n        #'C:\\\\Users\\\\Von Braun\\\\Google Drive\\\\mat2pylab\\\\ProgettoTesi3.86\\\\hello'\n        #'C:\\\\Users\\\\Von Braun\\\\Downloads\\\\WinPython-64bit-3.5.2.3Qt5\\\\settings'\n        #pathex=['C:\\\\Users\\\\Von Braun\\\\Downloads\\\\WinPython-64bit-3.5.2.3Qt5\\\\python-3.5.2.amd64\\\\Lib\\\\site-packages\\\\PyInstaller']\n        #PyInstaller.__main__.run_makespec([nomepy,pathex])\n        PyInstaller.__main__.run([\"-y\", \"-w\",nomepy])\n        #exec(creaspecfile)\n    if 1:\n        import os.path\n        esistelospec=os.path.isfile(nomespec)\n        if esistelospec==0:\n            from sys import exit\n            exit()\n    print(\"\\ncreazione dello spec completata\")\n    \n    #add this lines to the spec fil\n    #http://stackoverflow.com/questions/17140886/how-to-search-and-replace-text-in-a-file-using-python\n    print(\"modifica dello spec in corso\\n\\n\")\n    import fileinput\n    riga=\"from kivy.deps import sdl2, glew\"\n    textToSearch = \"# -*- mode: python -*-\"\n    NomeFile  = nome+\".spec\"\n    #fileToSearch = 'D:\\dummy1.txt'\n    RowChanger(riga,textToSearch,\"0\",NomeFile)\n    \n    if altrecartelle:\n        nuova=\"Tree('..\"+nomecart+\"'),\"\n        textToSearch=\"coll = COLLECT(exe,\"\n        textSub=textToSearch+nuova\n        RowChanger(nuova,textToSearch,textSub,NomeFile)\n    \n    #if icona:\n    #    modIcon=\"          \"+\"icon='icon.ico',\"\n    #    cerca=\"exe = EXE(pyz,\"\n    #    Modificatore(modIcon,cerca,\"0\",NomeFile)\n    \n    cerca2=\"a.datas,\"\n    modText2=\"               \"+\"*[Tree(p) for p in (sdl2.dep_bins + glew.dep_bins)],\"\n    RowChanger(modText2,cerca2,\"0\",NomeFile)\n    print(\"spec file completed\")\n    print(\"modddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\")\n\n    #coll = COLLECT(exe, Tree('examples-path\\\\demo\\\\touchtracer\\\\'),\n    \n    #--onefile\n    \n    print(\"\\n\\nsta per iniziare la compilazione, attendi fino a che non avr\u00e0 finito, troverai il file exe nella cartella DIST\\n\")\n    compilaspecfile=pythonpath+windowsonly+pyinstallerpath+nomespec\n    print(compilaspecfile)\n    if executive:\n        #ipython = get_ipython()\n        #exec(input(\"inserisci la frase di sopra\\n\\n\"))\n        import PyInstaller.__main__\n        PyInstaller.__main__.run([\"-y\", \"-w\",\"kivy_matplotlib.py\"])\n\n        #run(exec(creaspecfile))\n    print(\"\\ncompilation complete\")\n    \n\"\"\"\n       if args.filenames[0].endswith('.spec'):\n            spec_file = args.filenames[0]\n        else:\n            spec_file = run_makespec(**vars(args))\n        ##############################################################################################\n        print(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")\n        a=os.getcwd()\n        print(a)\n        #os.chdir(\"C:\\\\Users\\\\Von Braun\\\\Google Drive\\\\mat2pylab\\\\ProgettoTesi4.00\")\n        print(spec_file)\n        from compilatore import ModSpec\n        ModSpec()\n        os.chdir(a)\n        print(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")\n        ##############################################################################################\n        run_build(pyi_config, spec_file, **vars(args))\n\"\"\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_truncate(string, length):\n    if length > len(string):\n        return string\n    else:\n        return string[:length] + '...' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(\"Hello, World!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn fibonacci(n-1) + fibonacci(n-2)\n\n# compute the 7th fibonacci number\nprint(fibonacci(7)) # Output: 13 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence = \"Hello world, this is a sample text. We needed to replace the word \u201cworld' with \u201cEarth\u201d\"\ntarget = \"world\"\nreplacement = \"Earth\"\n\ndef replace_string(sentence, target, replacement):\n return sentence.replace(target, replacement)\n \nupdated_sentence = replace_string(sentence, target, replacement)\n \nprint(updated_sentence) \n\n# Output: Hello Earth, this is a sample text. We needed to replace the word \u201cworld' with \u201cEarth\u201d but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    mid = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + mid + quick_sort(right)\n\nprint(quick_sort([9, 6, 5, 3, 4, 7, 4, 1])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: odd_numbers = [num for num in [1, 2, 3, 4, 5, 6, 7, 8, 9] if num % 2 != 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: a = 1 \nb = 2\nsum = a + b \nprint(sum) # 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: dict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\n\n# Create a new dictionary\nnew_dict = {}\n\n# Add each key-value pair from dict1\nfor key, value in dict1.items():\n    new_dict[key] = value\n\n# Add each key-value pair from dict2\nfor key, value in dict2.items():\n    new_dict[key] = value\n\nprint(new_dict)\n\n# Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ClassifyText:\n    def __init__(self, text):\n        self.text = text\n        \n    def classify(self):\n        if \"streaming videos\" in self.text:\n            return \"video\"\n        elif \"taking selfies\" in self.text:\n            return \"selfie\"\n        else:\n            return \"other\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n        \ndef reverseList(head): \n    prev = None\n    current = head\n\n    while current is not None:\n        nxt = current.next\n        current.next = prev \n        prev = current\n        current = nxt\n\n    head = prev \n    return head but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(100):\n    # do something but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_dicts(d1, d2):\n result = d1.copy()\n for k, v in d2.items():\n if k in result:\n result[k] = (result[k], v)\n else:\n result[k] = v\n\n return result\n\nmerge_dicts(d1, d2) \n# Output: \n# {'key1': 'value1',\n#  'key2': ('value2', 'value5'),\n#  'key3': 'value3', \n#  'key4': 'value4',\n#  'key5': 'value6'} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nProgram to calculate the Fibonacci number at a particular index\n\"\"\"\n\ndef fibonacci_at_index(index):\n    \"\"\"Returns the Fibonacci number at a given index.\n    \n    Args:\n        index (int): The index of the Fibonacci number to be returned\n    \n    Returns:\n        int: The Fibonacci number at the given index\n    \"\"\"\n    if index <= 0:\n        return 0\n    if index == 1:\n        return 1\n    return fibonacci_at_index(index - 1) + fibonacci_at_index(index - 2)\n\nif __name__ == '__main__':\n    index = int(input())\n    print(fibonacci_at_index(index)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_first_word(sentence):\n    words = sentence.split(' ')\n    print(words[0])\n\nsentence = \"Hello, World!\"\nprint_first_word(sentence) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import flask\nfrom flask import request, jsonify\nimport sqlite3\n\napp = flask.Flask(__name__)\napp.config[\"DEBUG\"] = True\n\ndef dict_factory(cursor, row):\n    d = {}\n    for idx, col in enumerate(cursor.description):\n        d[col[0]] = row[idx]\n    return d\n\n@app.route('/', methods=['GET'])\ndef home():\n    return '''<h1>Products REST API</h1>\n<p>A prototype API for products.</p>'''\n\n@app.route('/api/v1/resources/products/all', methods=['GET'])\ndef api_all():\n    conn = sqlite3.connect('products.db')\n    conn.row_factory = dict_factory\n    cur = conn.cursor()\n    all_products = cur.execute('SELECT * FROM products;').fetchall()\n    return jsonify(all_products)\n\n@app.route('/api/v1/resources/products/create', methods=['POST'])\ndef api_create():\n    data = request.get_json()\n    name = data['name']\n    price = data['price']\n    description = data['description']\n    \n    conn = sqlite3.connect('products.db')\n    cur = conn.cursor()\n    cur.execute('INSERT INTO products (name, price, description) VALUES (?, ?, ?)', (name, price, description))\n    conn.commit()\n    return jsonify({'status': 'success'})\n\n@app.route('/api/v1/resources/products/update/<int:id>', methods = ['PUT'])\ndef api_update(id):\n    data = request.get_json()\n    name = data['name']\n    price = data['price']\n    description = data['description']\n    \n    conn = sqlite3.connect('products.db')\n    cur = conn.cursor()\n    cur.execute('UPDATE products SET name=?, price=?, description=? where id=?', (name, price, description, id))\n    conn.commit()\n    return jsonify({'status': 'success'})\n\n@app.route('/api/v1/resources/products/delete/<int:id>', methods = ['DELETE'])\ndef api_delete(id):\n    conn = sqlite3.connect('products.db')\n    cur = conn.cursor()\n    cur.execute('DELETE FROM products WHERE id=?', (id, ))\n    conn.commit()\n    return jsonify({'status': 'success'})\n\napp.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\n# Load the data\ndata = pd.read_csv('transaction_data.csv')\n\n# Separate input features (X) and target variable (y)\nX = data[['age', 'recency', 'frequency', 'monetary_value', 'no_of_products']]\ny = data['churn']\n\n# Split the dataset into training and testing set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1)\n\n# Create a logistic regression model\nlog_reg = LogisticRegression()\n\n# Train the model on the training set\nlog_reg.fit(X_train, y_train)\n\n# Output the predictions on the test set\ny_pred = log_reg.predict(X_test)\n\n# Compute and print the accuracy score\nacc = accuracy_score(y_test,y_pred)\nprint('Model accuracy score:', acc) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_substring(string1, string2):\n    for i in range(len(string1)):\n        for j in range(len(string2)):\n            if string1[i] == string2[j]:\n                return True\n    return False\n\nresult = is_substring(\"python\", \"java\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def play_game(board):\n    board_size = len(board)\n    winning_indices = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]\n\n    for indices in winning_indices:\n        a = indices[0]\n        b = indices[1]\n        c = indices[2]\n\n        x_count = 0\n        o_count = 0\n        for i in range(3):\n            if board[a//board_size][a%board_size] == 'X':\n                x_count += 1\n            elif board[a//board_size][a%board_size] == 'O':\n                o_count += 1\n\n            if board[b//board_size][b%board_size] == 'X':\n                x_count += 1\n            elif board[b//board_size][b%board_size] == 'O':\n                o_count += 1\n\n            if board[c//board_size][c%board_size] == 'X':\n                x_count += 1\n            elif board[c//board_size][c%board_size] == 'O':\n                o_count += 1\n            \n        if o_count == 2 and board[a//board_size][a%board_size] == '':\n            board[a//board_size][a%board_size] = 'O'\n            return board\n        elif x_count == 2 and board[a//board_size][a%board_size] == '':\n            board[a//board_size][a%board_size] = 'X'\n            return board\n\n    for x in range(board_size):\n        for y in range(board_size):\n            if board[x][y] == ' ':\n                board[x][y] = 'O'\n                return board\n    return board but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\n# create connection\nconn = sqlite3.connect('database.db')\n\n# establish cursor\ncur = conn.cursor()\n\n# execute the query\ncur.execute(\"SELECT * FROM Users\")\n\n# fetch the rows\nrows = cur.fetchall()\n\n# print table\nprint('-'*50)\nprint('|{:^8}|{:^20}|{:^20}|'.format('ID', 'User Name', 'Country'))\nprint('-'*50)\nfor row in rows:\n  print('|{:^8}|{:^20}|{:^20}|'.format(row[0], row[1], row[2]))\nprint('-'*50)\n\n# close the connection\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_array(arr):\n   arr.sort()\n   return arr\n\narr = [3, 2, 5, 1, 7, 4]\n\nsorted_arr = sort_array(arr)\nprint(sorted_arr) # [1, 2, 3, 4, 5, 7] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortList(myList): \n # sort list by second element  \n myList.sort(key = lambda x: x[1]) \n  \n # printing the sorted list  \n print (\"The sorted list in ascending order is : \") \n for i in range(len(myList)): \n  print(myList[i]), \n\nmyList = [('Tom',7),('Harry',5),('Bob',8)]\nsortList(myList) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(arr, x): \n  \n    for i in range(len(arr)): \n  \n        if arr[i] == x: \n            return i \n  \n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ntext = 'This is a text where I am talking about my birthday 4th October 2020'\n\npattern = r'\\d{1,2}\\s[A-Z][a-z]{2,8}\\s\\d{4}'\n\nmatch = re.search(pattern, text)\nif match:\n    print(match.group()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/factorial', methods=['POST'])\ndef factorial():\n num = request.json['num']\n result = 1\n for i in range(2, num + 1):\n  result *= i\n return { 'factorial': result }\n\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(string):\n    output = \"\"\n    for i in range(len(string)):\n        output += string[len(string)-1-i]\n    return output but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_dict = {\n    'list1': {\n        'list1_1': 25,\n        'list1_2': 25\n    },\n    'list2': {\n        'list2_1': {\n            'list2_1_1': 25\n        }\n        'list2_2': 25\n    }\n}\n\ndef update_values(dictionary, value):\n for key, value in dictionary.items():\n if isinstance(value, dict):\n update_values(value, value)\n else:\n dictionary[key] = value\n\nupdate_values(my_dict, value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"hello world\".lower() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_search(lst, target):\n    left = 0\n    right  = len(lst) - 1\n\n    while left <= right:\n        mid = (right + left) // 2\n        if lst[mid] == target:\n            return mid\n        elif lst[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\n# Data for plotting\nmonth1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsales1 = [10, 40, 20, 30, 45, 55, 36, 27, 28, 20]\n\nmonth2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsales2 = [2, 32, 15, 12, 18, 50, 46, 34, 28, 25]\n\nmonth3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsales3 = [20, 15, 18, 17, 33, 55, 65, 64, 45, 35]\n\n# Visualizing data\nfig, ax = plt.subplots(1, 1)\n\nax.plot(month1, sales1, color='blue', label='Month 1')\nax.plot(month2, sales2, color='red', label='Month 2')\nax.plot(month3, sales3, color='green', label='Month 3')\n\nplt.title('Retail Shop Sales Data')\nplt.xlabel('Month')\nplt.ylabel('Quantity of Sales')\nplt.legend()\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Identify the type of data stored in given variable\n\ndef identify_data_type(val):\n    for item in val:\n        data_type = type(item).__name__\n        print(f\"Data type of {item} is {data_type}\")\n\nval1 = [\"Hello\", 10, 3.14] \nidentify_data_type(val1)\n\n# Output\n# Data type of Hello is str\n# Data type of 10 is int\n# Data type of 3.14 is float but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = [\"Apple\", \"Banana\", \"Orange\"]\ntotal_chars = 0\n\nfor word in words:\n    total_chars += len(word)\n\nprint(total_chars) # Output: 15 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Song:\n    def __init__(self, title):\n        self.title = title\n\n    def play(self):\n        print(self.title) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# Load the dataset\ndataset = pd.read_csv('dataset.csv')\n\n# Perform feature engineering\ndataset['feature_1'] = dataset['column_1'] + dataset['column_2'] \ndataset['feature_2'] = dataset['column_3'] / dataset['column_4'] \ndataset['feature_3'] = dataset['column_5'] - dataset['column_6'] \n\n# Save the transformed dataset\ndataset.to_csv('dataset_transformed.csv') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[min_idx] > arr[j]:\n                min_idx = j\n\n        # Check if the minimum index is found to be at i-th position, then no need to swap\n        if min_idx != i:\n            arr[i], arr[min_idx] = arr[min_idx], arr[i] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [1,2,3,4,5,6,7,8,9]\n\nfiltered_list = list(filter(lambda x: x % 3 == 0, my_list))\nprint(filtered_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password():\n    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation\n    return ''.join(random.choice(chars) for _ in range(8))\n\nprint(generate_password()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_to_java( solution):\n target_language = \"Java\"\n java_solution = \"\"\n if target_language == \"Java\":\n java_solution += \"public static boolean is_palindrome(String word) { \\n\"\n java_solution += \" return word.equals(new StringBuilder(word).reverse().toString()); \\n\"\n java_solution += \"}\"\n return java_solution but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.neighbors import KNeighborsClassifier\nimport numpy as np\n \n# Load dataset\ndata = pd.read_csv('dataset.csv')\nX = data.iloc[:, :-1]\ny = data.iloc[:, -1]\n \n# Create and fit classifier\nclassifier = KNeighborsClassifier(n_neighbors=5)\nclassifier.fit(X, y)\n \n# Make predictions\npredictions = classifier.predict(X)\nprint(np.mean(predictions == y)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from bs4 import BeautifulSoup\nimport requests\n\n# Get the page\nurl = 'http://example.com'\npage = requests.get(url)\n\n# Use BeautifulSoup for parsing\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Get the data\ndata = soup.find_all('div', class_='datacontainer')\n\n# Print the data\nfor item in data:\n print(item.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_common_prefix(words):\n    # Sort the strings in the list\n    # so that the first string is the shortest\n    words.sort(key=len) \n    \n    # Initialize a prefix to empty string\n    prefix = \"\"\n\n    # Loop until length of prefix is less\n    # than the length of the shortest string\n    while len(prefix) < len(words[0]): \n        # Set the current character to \n        # the character at i-th index of \n        # the shortest string\n        current = words[0][len(prefix)] \n\n        # Check if the character is present \n        # in the substring of all other strings \n        for i in range(1, len(words)): \n            # Loop through all the words \n            # starting from the second string \n            if words[i][len(prefix)] != current:\n                # Return the prefix if the character \n                # is not present in the rest of the strings \n                return prefix\n        # Add the current character to the prefix\n        prefix += current \n\n    # Return the longest prefix \n    return prefix but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def flatten_2d_list(list_2d):\n # Initialize an empty list \n flat_list = []\n \n # Loop through the list \n for row in list_2d:\n\t for item in row: \n\t\t # Add the item to the flat list \n\t\t flat_list.append(item) \n\n# Return the flattened list \nreturn flat_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_number(arr): \n result = []\n for num in arr: \n if num % 2 == 0: \n result.append(\"even\")\n else: \n result.append(\"odd\")\n return result \n\nprint(classify_number([10, 27, 32, 11])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class TreeNode: \n    def __init__(self, data): \n        self.data = data\n        self.left = None\n        self.right = None\n\ndef generate_tree(arr): \n    root = TreeNode(arr[0])\n\n    for i in range(1, len(arr)): \n        curr = root \n        while True: \n            if arr[i] < curr.data: \n                if curr.left is None: \n                    curr.left = TreeNode(arr[i]) \n                    break\n                else: \n                    curr = curr.left \n            elif arr[i] > curr.data: \n                if curr.right is None: \n                    curr.right = TreeNode(arr[i]) \n                    break\n                else: \n                    curr = curr.right \n    return root\n\nresult = generate_tree([-3, 5, 1, 8, 2]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import threading\nimport time\n\nclass ThreadSafeTimer(object):\n\n    def __init__(self, interval, function, args=[], kwargs={}):\n        self.interval = interval\n        self.function = function\n        self.args = args\n        self.kwargs = kwargs\n        self.timer = None\n\n\n    def start(self):\n        self.timer = threading.Timer(self.interval, self.function, *self.args, **self.kwargs)\n        self.timer.daemon = True\n        self.timer.start()\n\n\n    def stop(self):\n        self.timer.cancel()\n        self.timer = None\n\nif __name__ == '__main__':\n    def callback():\n        print('Timer called')\n\n    t = ThreadSafeTimer(2.0, callback)\n    t.start() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\nlength = 20\n\npassword = ''\nfor c in range(length):\n password += random.choice(string.ascii_letters + string.digits + string.punctuation)\n\nprint(password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gradient_descent(cost_function, x_values, learning_rate):\n    \n    # Set the initial values for parameters\n    cost = cost_function(x_values)\n    x_t = x_values\n\n    # Calculate gradients\n    grad = cost_function.gradient(x_t)\n\n    # Update the parameters\n    while grad.norm() > 0.00001:\n        x_t = x_t - learning_rate * grad\n\n        cost = cost_function(x_t)\n        grad = cost_function.gradient(x_t)\n\n    return x_t but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: a1 = 6\na2 = 3\nb1 = a1 // a2\nb2 = a1 % a2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node(object):\n def __init__(self, data):\n  self.data = data\n  self.left = None\n  self.right = None\n\nclass BinaryTree(object):\n def __init__(self):\n  self.root = None\n  \n def insert(self, data):\n  if self.root == None:\n   self.root = Node(data)\n  else:\n   self._insert(data, self.root)\n  \n def _insert(self, data, node):\n  if data < node.data:\n   if node.left == None:\n    node.left = Node(data)\n   else:\n    self._insert(data, node.left)\n  else:\n   if node.right == None:\n    node.right = Node(data)\n   else:\n    self._insert(data, node.right)\n\n# Create binary tree  \ntree = BinaryTree()\ndata_list = [1, 2, 3, 4, 5, 7, 8]\nfor data in data_list:\n tree.insert(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\n# Ask user for the categories they are interested in\ncategories = input('What categories of news would you like to see? ').split(',')\n\n# Create an empty dictionary of news headlines\nheadlines = {}\n   \nfor category in categories:\n    # Request news data from a news website\n    news_response = requests.get(f'https://example.com/data/{category}')\n    headlines[category] = news_response.json()\n\n# Print out the news headlines\nfor category, news_data in headlines.items():\n    print(f'\\n{category.title()} News\\n------------------')\n    for headline in news_data:\n        print(headline['title']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence = 'She was driving, driving down the road.'\nlist_words = sentence.split(\" \")\nduplicates = {i for i, x in enumerate(list_words) if list_words.count(x) > 1}\nprint(\"Duplicate words in the sentence are: \", end=\"\")\nfor duplicate in duplicates:\n    print(list_words[duplicate], end=\" \") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\n#solve a sudoku puzzle\ndef solve(puzzle):\n    #create a puzzle matrix\n    puzzle_matrix=np.array(puzzle).reshape(9,9)\n    \n    #check if the empty cell is in the row\n    def row(row_index,num):\n        return num in puzzle_matrix[row_index]\n    \n    #check if the empty cell is in the column\n    def col(col_index,num):\n        return num in puzzle_matrix[:,col_index]\n    \n    #check if the empty cell is in the 3x3 grid\n    def grid(row_index,col_index,num):\n        row_start,row_end=row_index//3*3,row_index//3*3+3\n        col_start,col_end=col_index//3*3,col_index//3*3+3\n        return num in puzzle_matrix[row_start:row_end,col_start:col_end]\n    \n    #find the empty cell\n    for row_index in range(9):\n        for col_index in range(9):\n            if puzzle_matrix[row_index][col_index]==0:\n                #check numbers from 1-9\n                for num in range(1,10):\n                    if not row(row_index,num) and not col(col_index,num) and not grid(row_index,col_index,num):\n                        puzzle_matrix[row_index][col_index]=num\n                        solve(puzzle_matrix)\n                        puzzle_matrix[row_index][col_index]=0 #backtrack if no valid solution is found\n                return\n    print(puzzle_matrix)\n\n#input a sudoku puzzle\npuzzle = [[8,0,0,0,0,0,0,0,0],\n            [0,0,3,6,0,0,0,0,0],\n            [0,7,0,0,9,0,2,0,0],\n            [0,5,0,0,0,7,0,0,0],\n            [0,0,0,0,4,5,7,0,0],\n            [0,0,0,1,0,0,0,3,0],\n            [0,0,1,0,0,0,0,6,8],\n            [0,0,8,5,0,0,0,1,0],\n            [0,9,0,0,0,0,4,0,0]]\n\nsolve(puzzle) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef sentiment_score(sentence):\n nltk.download('vader_lexicon')\n analyser = SentimentIntensityAnalyzer()\n score = analyser.polarity_scores(sentence)\n return score\n \nsentiment_score('This is an example sentence.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Car:\n    def __init__(self, color, year, make, model):\n        self.color = color\n        self.year = year\n        self.make = make\n        self.model = model but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Define a function to count the strings\ndef count_strings(lst):\n count = 0\n \n # Iterate through the list\n for s in lst:\n \n # Check if string length is greater than 2 and first and last character is same\n if len(s) >= 2 and s[0] == s[-1]:\n count += 1\n \n return count\n \n# Driver Code\nlst = ['abc', 'xyz', 'aba', '1221']\nprint(count_strings(lst)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef sentiment_score(text): \n    sentiment_scores = SentimentIntensityAnalyzer().polarity_scores(text) \n    return sentiment_scores[\"compound\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport numpy as np\n\n#Create the board\nboard = np.zeros((3,3))\n\n#Rewards\n#To avoid tie scores\n1  reward for winning\n-1 reward for loosing\n\n#Adaptive learning rate, in this case we will use greedy q-learning\nepsilon = 0.2\n#Discount Factor\ngamma = 0.9\n#Reward\nreward = 0\n\n#Backtracking the best move\ndef bestMove(board):\n\tbestScore = 0\n\tfor i in range(3):\n\t\tfor j in range(3):\n\t\t\tif board[i][j] == 0:\n\t\t\t\tboard[i][j] = 1\n\t\t\t\tscore = minimax(board, False)\n\t\t\t\tboard[i][j] = 0\n\t\t\t\tif score > bestScore:\n\t\t\t\t\tbestScore = score\n\t\t\t\t\tmove = [i, j]\n\treturn move\t\t\t\n\n#Game Logic\ndef minimax(board, isMaximizing):\n\t#Check if it is a winning board\n\tif checkWin(board):\n\t\treturn reward\n\t\t\n\t#Play the game\n\tif isMaximizing:\n\t\tbestScore = -float(\"inf\")\n\t\tfor i in range(3):\n\t\t\tfor j in range(3):\n\t\t\t\tif board[i][j] == 0:\n\t\t\t\t\tboard[i][j] = 1\n\t\t\t\t\tscore = minimax(board, False)\n\t\t\t\t\tboard[i][j] = 0\n\t\t\t\t\tbestScore = max(score, bestScore)\n\t\treturn bestScore\n\t\n\t#Minimizing\n\telse:\n\t\tbestScore = float(\"inf\")\n\t\tfor i in range(3):\n\t\t\tfor j in range(3):\n\t\t\t\tif board[i][j] == 0:\n\t\t\t\t\tboard[i][j] = -1\n\t\t\t\t\tscore = minimax(board, True)\n\t\t\t\t\tboard[i][j] = 0\n\t\t\t\t\tbestScore = min(score, bestScore)\n\t\treturn bestScore\n\n#Check win\ndef checkWin(board):\n\t#Horizontal\n\tfor i in range(3):\n\t\tif board[i][0] == board[i][1] and board[i][1] == board[i][2] and board[i][0] != 0:\n\t\t\treturn board[i][0]\n\t#Vertical\n\tfor i in range(3):\n\t\tif board[0][i] == board[1][i] and board[1][i] == board[2][i] and board[0][i] != 0:\n\t\t\treturn board[0][i]\n\t#Diagonal Top-Left to Bottom-Right\n\tif board[0][0] == board[1][1] and board[1][1] == board[2][2] and board[0][0] != 0:\n\t\treturn board[0][0]\n\t#Diagonal Top-Right to Bottom-Left\n\tif board[0][2] == board[1][1] and board[1][1] == board[2][0] and board[0][2] != 0:\n\t\treturn board[0][2]\n\treturn 0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def average(list):\n total = 0\n for num in list:\n total += num\n return total / len(list)\n\nprint(average([2, 3, 5, 4])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import necessary library \nfrom sklearn import svm\n\n# Create a feature and label array \nX = [[1], [2], [3], [4], [5]] \nY = [1,2,1,2,1]\n\n# Set up the svm model \nclf = svm.SVC(kernel='linear')\n\n# Train the model \nclf.fit(X, Y)\n\n# Test the model \npredictions = clf.predict([[3]])\nprint(predictions) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: 1. Scikit-learn: Machine learning library for predictive analysis.\n2. Numpy: Library for scientific computing with large multi-dimensional arrays and matrices.\n3. Pandas: Library for data manipulation and analysis.\n4. Matplotlib: 2D plotting library.\n5. TensorFlow: Library for building machine learning applications.\n6. Django: Web framework for building web applications.\n7. Keras: Library for deep learning applications.\n8. NLTK: Natural language processing library.\n9. Scipy: Library for scientific computing with linear algebra, integration, optimization, and statistics methods.\n10. Flask: Micro web framework for building web applications. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(input1, input2):\n  # turn the strings into sets\n  s1 = set(input1)\n  s2 = set(input2)\n  \n  # Compare the size of the sets\n  if len(s1) != len(s2):\n    return False\n  \n  # Iterate through the sets and compare the contents\n  for element in s1:\n    if element not in s2:\n      return False\n  \n  # If all the conditions pass, then the strings are anagrams\n  return True\n\n# Sample inputs\ninput1 = 'listen'\ninput2 = 'silent'\n\n# Check if the strings are anagrams\nif is_anagram(input1, input2):\n  print(\"{} and {} are anagrams.\".format(input1, input2))\nelse:\n  print(\"{} and {} are not anagrams.\".format(input1, input2))\n\n# Output\n# listen and silent are anagrams. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: !dlrow olleH but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combinations(s): \n  \n    # Get the length of the string \n    n = len(s) \n  \n    # A loop to pick starting point of substring \n    for i in range(n): \n          \n        # Pick ending point of substring \n        for j in range(i,n): \n              \n            # Print the substring \n            for k in range(i,j+1): \n                print(s[k], end=\"\") \n            print() \n\ncombinations(\"ABC\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_to_24(time):\n    if time[-2:] == \"PM\" and time[:2] != \"12\":\n        return str(int(time[:2])+12)+time[2:-2]\n    elif time[-2:] == \"AM\" and time[:2] == \"12\":\n        return \"00\"+time[2:-2]\n    else:\n        return time[:-2] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n#   Copyright (C) 2001 Alexander S. Guy <a7r@andern.org>\n#                      Andern Research Labs\n#\n#   This program is free software; you can redistribute it and/or modify\n#   it under the terms of the GNU General Public License as published by\n#   the Free Software Foundation; either version 2, or (at your option)\n#   any later version.\n#\n#   This program is distributed in the hope that it will be useful,\n#   but WITHOUT ANY WARRANTY; without even the implied warranty of\n#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#   GNU General Public License for more details.\n#\n#   You should have received a copy of the GNU General Public License\n#   along with this program; if not, write to the Free Software\n#   Foundation, Inc., 59 Temple Place - Suite 330,\n#   Boston, MA 02111-1307, USA.  */\n#\n#   Copyright 2001, Russell Nelson <ipkg.py@russnelson.com>\n#   Added reading in of packages.\n#   Added missing package information fields.\n#   Changed render_control() to __repr__().\n#\n# Current Issues:\n#    The API doesn't validate package information fields.  It should be\n#        throwing exceptions in the right places.\n#    Executions of tar could silently fail.\n#    Executions of tar *do* fail, and loudly, because you have to specify a full filename,\n#        and tar complains if any files are missing, and the ipkg spec doesn't require\n#        people to say \"./control.tar.gz\" or \"./control\" when they package files.\n#        It would be much better to require ./control or disallow ./control (either)\n#        rather than letting people pick.  Some freedoms aren't worth their cost.\n\nimport tempfile\nimport os\nimport sys\nimport glob\nimport md5\nimport re\nimport string\nimport commands\nfrom stat import ST_SIZE\n\nclass Package:\n    \"\"\"A class for creating objects to manipulate (e.g. create) ipkg\n       packages.\"\"\"\n    def __init__(self, fn=None):\n\tself.package = None\n\tself.version = None\n\tself.architecture = None\n\tself.maintainer = None\n\tself.source = None\n\tself.description = None\n\tself.depends = None\n\tself.provides = None\n\tself.replaces = None\n\tself.conflicts = None\n        self.recommends = None\n\tself.suggests = None\n\tself.section = None\n        self.filename_header = None\n\tself.file_list = []\n        self.md5 = None\n        self.size = None\n        self.installed_size = None\n        self.filename = None\n        self.isdeb = 0\n\n\tif fn:\n            # see if it is deb format\n            f = open(fn, \"r\")\n            magic = f.read(4)\n            f.close()\n            if (magic == \"!<ar\"):\n                self.isdeb = 1\n\n            # compute the MD5.\n            f = open(fn, \"r\")\n            sum = md5.new()\n            while 1:\n                data = f.read(1024)\n                if not data: break\n                sum.update(data)\n            f.close()\n            if sys.version[:1] > '2':\n                # when using Python 2.0 or newer\n                self.md5 = sum.hexdigest() \n            else:\n                self.md5 = string.join(map((lambda x:\"%02x\" % ord(x)),sum.digest()),'')\n            stat = os.stat(fn)\n            self.size = stat[ST_SIZE]\n            self.filename = os.path.basename(fn)\n\t    ## sys.stderr.write(\"  extracting control.tar.gz from %s\\n\"% (fn,)) \n            if self.isdeb:\n                control = os.popen(\"ar p \"+fn+\" control.tar.gz | tar xfzO - --wildcards '*control'\",\"r\")\n            else:\n                control = os.popen(\"tar xfzO \"+fn+\" --wildcards '*control.tar.gz' | tar xfzO - --wildcards '*control'\",\"r\")\n            line = control.readline()\n            while 1:\n                if not line: break\n                line = string.rstrip(line)\n                lineparts = re.match(r'([\\w-]*?):\\s*(.*)', line)\n\t\tif lineparts:\n                    name = string.lower(lineparts.group(1))\n\t\t    value = lineparts.group(2)\n\t\t    while 1:\n\t\t\tline = control.readline()\n\t\t\tif not line: break\n\t\t\tif line[0] != ' ': break\n                        line = string.rstrip(line)\n\t\t\tvalue = value + '\\n' + line\n                    # don't allow package to override its own filename\n                    if name == \"filename\":\n                        self.filename_header = value\n                    else:\n                        if self.__dict__.has_key(name):\n                            self.__dict__[name] = value\n                else:\n                    line = control.readline()\n            control.close()\n            if self.isdeb:\n                data = os.popen(\"ar p \"+fn+\" data.tar.gz | tar tfz -\",\"r\")\n            else:\n                data = os.popen(\"tar xfzO \"+fn+\" --wildcards '*data.tar.gz' | tar tfz -\",\"r\")\n            while 1:\n                line = data.readline()\n                if not line: break\n                self.file_list.append(string.rstrip(line))\n            data.close()\n\n\tself.scratch_dir = None\n\tself.file_dir = None\n\tself.meta_dir = None\n\n    def read_control(self, control):\n        import os\n\n        line = control.readline()\n        while 1:\n            if not line: break\n            line = string.rstrip(line)\n            lineparts = re.match(r'([\\w-]*?):\\s*(.*)', line)\n            if lineparts:\n                name = string.lower(lineparts.group(1))\n                value = lineparts.group(2)\n                while 1:\n                    line = control.readline()\n                    if not line: break\n                    if line[0] != ' ': break\n                    value = value + '\\n' + line\n                if name == 'size':\n                    self.size = int(value)\n                elif self.__dict__.has_key(name):\n                    self.__dict__[name] = value\n                if line[0] == '\\n':\n                    return # consumes one blank line at end of package descriptoin\n            else:\n                line = control.readline()\n                pass\n        return    \n\n    def _setup_scratch_area(self):\n\tself.scratch_dir = \"%s/%sipkg\" % (tempfile.gettempdir(),\n\t\t\t\t\t   tempfile.gettempprefix())\n\tself.file_dir = \"%s/files\" % (self.scratch_dir)\n\tself.meta_dir = \"%s/meta\" % (self.scratch_dir)\n\n\tos.mkdir(self.scratch_dir)\n\tos.mkdir(self.file_dir)\n\tos.mkdir(self.meta_dir)\n\n    def set_package(self, package):\n\tself.package = package\n\n    def get_package(self):\n\treturn self.package\n\t\t\n    def set_version(self, version):\n\tself.version = version\n\n    def get_version(self):\n\treturn self.version\n\n    def set_architecture(self, architecture):\n\tself.architecture = architecture\n\n    def get_architecture(self):\n\treturn self.architecture\n\n    def set_maintainer(self, maintainer):\n\tself.maintainer = maintainer\n\n    def get_maintainer(self):\n\treturn self.maintainer\n\n    def set_source(self, source):\n\tself.source = source\n\n    def get_source(self):\n\treturn self.source\n\n    def set_description(self, description):\n\tself.description = description\n\n    def get_description(self):\n\treturn self.description\n\n    def set_depends(self, depends):\n\tself.depends = depends\n\n    def get_depends(self, depends):\n\treturn self.depends\n\n    def set_provides(self, provides):\n\tself.provides = provides\n\n    def get_provides(self, provides):\n\treturn self.provides\n\n    def set_replaces(self, replaces):\n\tself.replaces = replaces\n\n    def get_replaces(self, replaces):\n\treturn self.replaces\n\n    def set_conflicts(self, conflicts):\n\tself.conflicts = conflicts\n\n    def get_conflicts(self, conflicts):\n\treturn self.conflicts\n\n    def set_suggests(self, suggests):\n\tself.suggests = suggests\n\n    def get_suggests(self, suggests):\n\treturn self.suggests\n\n    def set_section(self, section):\n\tself.section = section\n\n    def get_section(self, section):\n\treturn self.section\n\n    def get_file_list(self):\n\treturn self.file_list\n\n    def write_package(self, dirname):\n        buf = self.render_control()\n\tfile = open(\"%s/control\" % self.meta_dir, 'w')\n\tfile.write(buf)\n\n\tself._setup_scratch_area()\n\tcmd = \"cd %s ; tar cvfz %s/control.tar.gz control\" % (self.meta_dir,\n\t\t\t\t\t\t\t      self.scratch_dir)\n\n\tcmd_out, cmd_in, cmd_err = os.popen3(cmd)\n\t\n\twhile cmd_err.readline() != \"\":\n\t    pass\n\n\tcmd_out.close()\n\tcmd_in.close()\n\tcmd_err.close()\n\n\tbits = \"control.tar.gz\"\n\n\tif self.file_list:\n\t\tcmd = \"cd %s ; tar cvfz %s/data.tar.gz\" % (self.file_dir,\n\t\t\t\t\t   \t\t   self.scratch_dir)\n\n\t\tcmd_out, cmd_in, cmd_err = os.popen3(cmd)\n\n\t\twhile cmd_err.readline() != \"\":\n\t\t    pass\n\n\t\tcmd_out.close()\n\t\tcmd_in.close()\n\t\tcmd_err.close()\n\n\t\tbits = bits + \" data.tar.gz\"\n\n\tfile = \"%s_%s_%s.ipk\" % (self.package, self.version, self.architecture)\n\tcmd = \"cd %s ; tar cvfz %s/%s %s\" % (self.scratch_dir,\n\t\t\t\t\t     dirname,\n\t\t\t\t\t     file,\n\t\t\t\t\t     bits)\n\n\tcmd_out, cmd_in, cmd_err = os.popen3(cmd)\n\n\twhile cmd_err.readline() != \"\":\n\t    pass\n\n\tcmd_out.close()\n\tcmd_in.close()\n\tcmd_err.close()\n\n    def __repr__(self):\n\tout = \"\"\n\n\t# XXX - Some checks need to be made, and some exceptions\n\t#       need to be thrown. -- a7r\n\n        if self.package: out = out + \"Package: %s\\n\" % (self.package)\n        if self.version: out = out + \"Version: %s\\n\" % (self.version)\n        if self.depends: out = out + \"Depends: %s\\n\" % (self.depends)\n        if self.provides: out = out + \"Provides: %s\\n\" % (self.provides)\n        if self.replaces: out = out + \"Replaces: %s\\n\" % (self.replaces)\n        if self.conflicts: out = out + \"Conflicts: %s\\n\" % (self.conflicts)\n        if self.suggests: out = out + \"Suggests: %s\\n\" % (self.suggests)\n        if self.recommends: out = out + \"Recommends: %s\\n\" % (self.recommends)\n        if self.section: out = out + \"Section: %s\\n\" % (self.section)\n        if self.architecture: out = out + \"Architecture: %s\\n\" % (self.architecture)\n        if self.maintainer: out = out + \"Maintainer: %s\\n\" % (self.maintainer)\n        if self.md5: out = out + \"MD5Sum: %s\\n\" % (self.md5)\n        if self.size: out = out + \"Size: %d\\n\" % int(self.size)\n        if self.installed_size: out = out + \"InstalledSize: %d\\n\" % int(self.installed_size)\n        if self.filename: out = out + \"Filename: %s\\n\" % (self.filename)\n        if self.source: out = out + \"Source: %s\\n\" % (self.source)\n        if self.description: out = out + \"Description: %s\\n\" % (self.description)\n\tout = out + \"\\n\"\n\n\treturn out\n\n    def __del__(self):\n\t# XXX - Why is the `os' module being yanked out before Package objects\n\t#       are being destroyed?  -- a7r\n        pass\n\nclass Packages:\n    \"\"\"A currently unimplemented wrapper around the ipkg utility.\"\"\"\n    def __init__(self):\n        self.packages = {}\n        return\n\n    def add_package(self, pkg):\n        package = pkg.package\n        arch = pkg.architecture\n        name = (\"%s:%s\" % (package, arch))\n        if (not self.packages.has_key(name)):\n            self.packages[name] = pkg\n        (s, outtext) = commands.getstatusoutput(\"ipkg-compare-versions %s '>' %s\" % (pkg.version, self.packages[name].version))    \n        if (s == 0):\n            self.packages[name] = pkg\n            return 0\n        else:\n            return 1\n\n    def read_packages_file(self, fn):\n        f = open(fn, \"r\")\n        while 1:\n            pkg = Package()\n            pkg.read_control(f)\n            if pkg.get_package():\n                self.add_package(pkg)\n            else:\n                break\n        f.close()    \n        return\n\n    def write_packages_file(self, fn):\n        f = open(fn, \"w\")\n        names = self.packages.keys()\n        names.sort()\n        for name in names:\n            f.write(self.packages[name].__repr__())\n        return    \n\n    def keys(self):\n        return self.packages.keys()\n\n    def __getitem__(self, key):\n        return self.packages[key]\n\nif __name__ == \"__main__\":\n    package = Package()\n\n    package.set_package(\"FooBar\")\n    package.set_version(\"0.1-fam1\")\n    package.set_architecture(\"arm\")\n    package.set_maintainer(\"Testing <testing@testing.testing>\")\n    package.set_depends(\"libc\")\n    package.set_description(\"A test of the APIs.\")\n\n    print \"<\"\n    sys.stdout.write(package)\n    print \">\"\n\n    package.write_package(\"/tmp\")\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n  def __init__(self, first_name, last_name, student_id, gpa):\n    self.first_name = first_name\n    self.last_name = last_name\n    self.student_id = student_id\n    self.gpa = gpa\n\nstudent = Student('John', 'Doe', '12345', 3.5) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport nltk\nnltk.download('punkt')\nnltk.download('averaged_perceptron_tagger')\nnltk.download('stopwords')\nfrom nltk import word_tokenize\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n# Load data\ndf = pd.read_csv('data.csv')\n\n# Extract text column\ntext = df['text']\n\n# Preprocess text\ntokenized_text = [word_tokenize(text) for text in text]\nstop_words = nltk.corpus.stopwords.words('english')\ntokenized_text = [word for word in tokenzed_text if word not in stop_words]\n\n#Feature extraction\npos_tokens = [word for (word, tag) in nltk.pos_tag(tokenized_text) if tag.startswith('N') or \n              tag.startswith('J')]\n\n#Sentiment analysis\nsid = SentimentIntensityAnalyzer()\nscores = [sid.polarity_scores(pos_token) for pos_token in pos_tokens]\ndf['sentiment'] = [score['compound'] for score in scores]\n\n#Output\nprint(df) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python3 Program to print Postorder traversal  \n# from given Inorder and Preorder traversals \n  \n# Function to print postorder traversal  \ndef printPostOrder(inOrder, preOrder, n): \n  \n    # The first element in preOrder[]  \n    # is always root, search it in \n    # inOrder[] to find left and  \n    # right subtrees \n    root = preOrder[0]; \n  \n    # Iterate through inOrder[],  \n    # find the index of root \n    rootIndex = 0\n    for i in range(0, n): \n        if (inOrder[i] == root): \n            rootIndex = i\n            break\n  \n    # Use index in Inorder to divide \n    # inOrder array in two parts  \n    # Left Subtree and Right Subtree \n    if (rootIndex != 0): \n          \n        # Recur for left subtree \n        printPostOrder(inOrder[0 : rootIndex],  \n        preOrder[1 : rootIndex + 1], rootIndex) \n  \n    # Recur for right subtree \n    if (rootIndex != n - 1): \n        printPostOrder(inOrder[rootIndex + 1 : n],  \n        preOrder[rootIndex + 1 : n], n - rootIndex - 1) \n  \n    print( root, end = \" \") \n  \n# Driver code \nif __name__ == '__main__': \n  \n    inOrder = ['d','b','e','a','f','c','g'] \n    preOrder = ['a','b','d','e','c','f','g'] \n    n = len(inOrder) \n  \n    # Print PostOrder Traversal \n    printPostOrder(inOrder, preOrder, n) \n\n# Output: \n# d e b f g c a but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def capitalize_vowels(s): \n  \n # Converting string to list.  \n s_list = list(s) \n  \n # Defining a set of vowels  \n vowels = {'a', 'e', 'i', 'o', 'u'} \n \n # Iterate over list and capitalize vowels \n for i in range(0, len(s_list)): \n if s_list[i] in vowels: \n s_list[i] = s_list[i].upper() \n  \n # Joining list to string \n return ''.join(s_list) \n\ntext = 'amazing'\ncapitalized = capitalize_vowels(text)\n\nprint(capitalized)\n# Output:  \"AmAzIng\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubbleSort(arr):\n    for i in range(len(arr)):\n        for j in range(0, len(arr)-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr but is not the same. just give one example and only return the code."}
