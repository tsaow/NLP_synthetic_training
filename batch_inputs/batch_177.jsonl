{"prompt": "make some code that functions the same as the following code: input_type = type(\"123\") # str\n\nconverted_int = int(\"123\") # 123 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def minimumAbsDifference(arr):\n    arr.sort()\n    min_diff = float('inf')\n    \n    for i in range(1, len(arr)): \n        diff = arr[i] - arr[i - 1]\n        min_diff = min(min_diff, diff)\n    \n    return min_diff \n\narr = [2, 9, 6, 5, 4, 9, 8]\nmin_diff = minimumAbsDifference(arr)\nprint(min_diff) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent_words(string):\n    '''\n    Function to find the ten most frequent words in a given string\n    \n    Parameters\n    string: string\n    \n    Returns\n    list of the ten most frequent words\n    '''\n    string = string.lower()\n    words = string.split()\n    word_frequency = {}\n    # populate the word_frequency dictionary\n    for word in words:\n        if word in word_frequency.keys():\n            word_frequency[word] += 1\n        else:\n            word_frequency[word] = 1\n    # sort the dictionary in descending order by frequency\n    sorted_words = sorted(word_frequency.items(), key=lambda kv: kv[1], reverse=True)\n    top_ten = sorted_words[:10]\n    return [word[0] for word in top_ten] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def word_abbreviations(words):\n abbreviations = []\n for word in words:\n  abbreviations.append(word[0].upper() + str(len(word)-2) + word[-1].upper())\n return abbreviations\n\nlist_of_words = [\"Hello\",\"World\",\"Amazing\"]\nprint(word_abbreviations(list_of_words))\n\nOutput: ['H4o', 'W4d', 'A5g'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_by_length(list_of_strings):\n    final_list = []\n    for string in list_of_strings:\n        final_list.append(len(string))\n    return final_list\n\nif __name__ == \"__main__\":\n    list_of_strings = [\"hello\", \"world\", \"coding\"]\n    print(replace_by_length(list_of_strings)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef tokenize_text(text):\n    #Split the string into words on whitespace\n    words = re.split(r'\\s', text)\n    #Punctuation patterns\n    punctuation = re.compile(r'[.,!?;:]')\n    #Create tokens\n    tokens = [word.strip(punctuation.pattern) for word in words]\n    #Return the list of tokens\n    return tokens but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Install Docker\nsudo apt-get update\nsudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    gnupg-agent \\\n    software-properties-common\n    \ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n\nsudo add-apt-repository \\\n   \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   $(lsb_release -cs) \\\n   stable\"\n\nsudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.io\n\n# Create a docker image\ndocker build -t myproject:latest .\n\n# Push the docker image to GCP\ngcloud auth configure-docker\ndocker tag myproject:latest gcr.io/[PROJECT-ID]/[IMAGE]\ndocker push gcr.io/[PROJECT-ID]/[IMAGE]\n\n# Provision a Compute instance\ngcloud compute instances create my-instance \\\n    --boot-disk-size 50GB \\\n    --image-family ubuntu-1804-lts \\\n    --image-project ubuntu-os-cloud \\\n    --machine-type g1-small \\\n    --tags http-server \\\n    --metadata-from-file startup-script=gnupg-agent.st\n\n# Create a managed instance group\ngcloud compute instance-groups managed create my-group \\\n    --zone us-central1-a \\\n    --base-instance-name my-group \\\n    --template my-template \\\n    --size 1\n\n# Create an instance template\ngcloud compute instance-templates create my-template \\\n    --machine-type g1-small \\\n    --network my-net \\\n    --image-family ubuntu-bionic \\\n    --image-project ubuntu-os-cloud \\\n    --metadata-from-file startup-script=startup-script.sh\n\n# Download startup script\nwget https://raw.githubusercontent.com/GoogleCloudPlatform/python-docs-samples/master/container_engine/startup-script.sh but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def split_string(s, delimiter): \n return s.split(delimiter)\n\nstring = 'Hello,World'\ndelimiter = ','\n\nresult = split_string(string, delimiter)\n\n# Outputs ['Hello', 'World'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_list(filter_function, list_numbers):\n filtered_list = []\n\n for item in list_numbers:\n if filter_function(item):\n filtered_list.append(item)\n\n return filtered_list\n\nif __name__ == \"__main__\":\n filter_function = lambda x: x % 2 == 0\n list_numbers = [1,2,3,4,5,6,7,8,9,10]\n filtered_list = filter_list(filter_function, list_numbers)\n print(filtered_list)\n\nOutput:\n[2, 4, 6, 8, 10] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: while True:\n    s = input(\"Enter a string: \")\n    count = 0\n    for i in s:\n        if(i=='a' or i=='e' or i=='i' or i=='o' or i=='u'):\n            count+=1\n    print(\"The number of vowels in the string:\", count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [10, 20, 30, 40]\n\nfor num in arr:\n    print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: a = 3\nb = 2\nc = a + b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\n# Generate a 3D array\nx = np.zeros((2, 3, 2))\n\n# Print the array\nprint(x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -*- coding: utf-8 -*-\r\n'''\r\nCreado por Pablo Castro\r\n28/03/17\r\nObjetivo:\r\nAutomatizar todo el proceso de simulacion desde el terminal de linux.\r\nFunciona para CAEBAT 1.0\r\n\r\nComo usarlo:\r\n1- Se situa el script en la carpeta 'examples'.\r\n2- Se crea una carpeta llamada 'Mis simulaciones' en el escritorio.\r\n3- Se ejecuta normalmente desde la terminal: 'python simulacion_basica.py'\r\n4- El programa te pide el nombre exacto de la carpeta a simular.\r\n\r\nAcciones:\r\n-Ejecutar la simulacion de un caso que elijamos\r\n-Copiar la carpeta con los resultados de la simulaciones en otra carpeta\r\n situada en el escritorio y ponerle un nombre segun el caso simulado y la fecha de simulacion.\r\n-Despues de realizar esto, eliminamos las carpetas generadas por la simulacion\r\n en la carpeta ejemplo.\r\n'''\r\n\r\nimport os\r\nimport shutil\r\nfrom datetime import datetime\r\n\r\ndef copiar_simulacion(Nombre_simulacion):\r\n\t#Calculamos la fecha en la que la carpeta fue creada\r\n\tfecha = os.stat(Nombre_simulacion).st_mtime\r\n\t\r\n\t#La convertimos a un formato legible y nombramos la nueva carpeta\r\n\tnombre_carpeta_copia = Nombre_simulacion + ' ' + str(datetime.fromtimestamp(fecha))\r\n\tshutil.copytree(Nombre_simulacion,nombre_carpeta_copia)\r\n\tshutil.move(nombre_carpeta_copia,'/home/batsim/Desktop/Mis simulaciones/')\r\n\r\n\r\ndef eliminar_carpetas(Nombre_simulacion):\r\n\tshutil.rmtree('/home/batsim/caebat/vibe/examples/'+Nombre_simulacion+'/simulation_log')\r\n\tshutil.rmtree('/home/batsim/caebat/vibe/examples/'+Nombre_simulacion+'/simulation_results')\r\n\tshutil.rmtree('/home/batsim/caebat/vibe/examples/'+Nombre_simulacion+'/simulation_setup')\r\n\tshutil.rmtree('/home/batsim/caebat/vibe/examples/'+Nombre_simulacion+'/work')\r\n\r\n#Seleccionamos desde el terminal nuestra carpeta de simulacion\r\nprint('Introduce el nombre de la carpeta que quieres simular:')\r\nnombre = raw_input()\r\n\r\n#Seleccionamos el archivo .conf que vamos a simular\r\nif nombre == 'case2':\r\n\tmodelo = 'thermal_electrical_chartran_cell_twoway.conf'\r\nelif nombre == 'case3':\r\n\tmodelo = 'thermal_electrical_chartran_battery_twoway.conf'\r\nelif nombre == 'case6':\r\n\tmodelo = 'thermal_electrical_chartran_farasis.conf'\r\nelif nombre == 'case7':\r\n\tmodelo = 'thermal_electrical_chartran_module_4P.conf'\r\nelse:\r\n\tprint('Error al introducir el nombre de la carpeta')\r\n\tquit()\r\n\r\n#Cambiamos el path a la carpeta seleccionada\r\nos.chdir('/home/batsim/caebat/vibe/examples/'+nombre)\r\n\r\n\r\n#Ejectuamos la simulacion\r\nos.system('/home/batsim/caebat/oas/install/bin/ips.py --simulation='+modelo+' --log=temp.log --platform=../config/batsim.conf -a')\r\nos.chdir('/home/batsim/caebat/vibe/examples')\r\ncopiar_simulacion(nombre)\r\neliminar_carpetas(nombre)\r\nprint('Fin de la simulaci\u00f3n')\r\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def predict_probability(age):\n    # Fit your model and get predicted probabilities\n    probabilities = model.predict_proba(age)\n    # Return probability for leaving class\n    return probabilities[0][1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup \n\nurl = \"https://www.imdb.com/chart/top\"\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\nmovies = soup.find_all('td', class_='titleColumn')\n\n# Create a list of top 100 movies\ntop_movies = []\n\nfor movie in movies:\n  # get movie title\n  title = movie.a.text\n  # get movie release date\n  release_date = movie.span.text\n  # get movie description\n  movie_page = requests.get(f'https://www.imdb.com{movie.a[\"href\"]}')\n  movie_soup = BeautifulSoup(movie_page.content, 'html.parser')\n  description = movie_soup.find('p', class_='text-muted').text.strip()\n\n  top_movies.append({\n    'title': title,\n    'release_date': release_date,\n    'description': description\n    }) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\ndf = pd.DataFrame({'Name': ['John', 'James', 'John'],\n                   'Age': [27, 25, 27],\n                   'City': ['London', 'Tokyo', 'Tokyo']})\n\n# identify all duplicates in the 'Name' column\nduplicates = df[df.duplicated(['Name'], keep=False)]\nprint(duplicates)\n\n# output\n    Name  Age    City\n0   John   27  London\n2   John   27   Tokyo but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n): \n    fact = 1\n    for i in range(1,n+1): \n        fact *= i\n    return fact\n  \nnum = 4\nprint(\"Factorial of\",num,\"is\",factorial(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Initialize the feature vectors\nfeature_vector_1 = [4, 6, 8, 10] \nfeature_vector_2 = [6, 8, 9, 11]\n\n# Create a function\ndef compareVectors(v1, v2):\n    # Initialize a score\n    score = 0\n    # Iterate through the vectors\n    for i in range(len(v1)):\n        score += min(v1[i], v2[i]) / max(v1[i], v2[i])\n    # Calculate the similarity score\n    similarity_score = score / len(v1)\n    return similarity_score\n\n# Test the function\nprint(compareVectors(feature_vector_1, feature_vector_2))\n\n# Output\n0.875 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def permutations(string):\n if len(string) == 0:\n return\n\n else:\n first_char = string[0]\n remainder = string[1:]\n permutations(remainder)\n for perm in permutations(remainder):\n for i in range(len(perm)+1):\n result = perm[:i] + first_char + perm[i:]\n print(result)\n\npermutations(\"ABC\") #run the code\n\n# Output\nABC\nACB\nBAC\nBCA\nCBA\nCAB but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Points:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n        \n    def __str__(self):\n        return \"x={}, y={}, z={}\".format(self.x, self.y, self.z) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: String myString = \"Hello World\";\nSystem.out.println(myString.substring(0,5)); but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort(numbers):\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] > numbers[j]:\n                numbers[i], numbers[j] = numbers[j], numbers[i]\n    return numbers but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\ndf = pd.read_csv('data.csv')\n\n# Features\nX=df.iloc[:,:-1]\n\n# Labels\ny=df.iloc[:,-1]\n\n# Split dataset\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1, test_size=0.2)\n\n# Fit the model\nfrom sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Get input values\ninput_data = [2, 50, 'New York']\n\n# Prediction\nprediction = model.predict([input_data])\n\nprint('Predicted price for a apartment with 2 bedrooms, 50sqm located in New York:', prediction[0]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: if __name__ == '__main__':\n    print('Hello World') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_list_items(list_X,value):\n    new_list=[]\n    for element in list_X:\n        new_list.append(value)\n    return new_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import packages\nfrom sklearn.neighbors import KNeighborsClassifier\nimport numpy as np\n\n# Create a KNearestNeighbors classifier\nknn = KNeighborsClassifier(n_neighbors=5)\n\n# Train the classifier using fit\nX = np.array([[1,2,3], [2,3,4],[4,5,6]])\ny = np.array([1,0,1])\nknn.fit(X, y)\n\n# Use the trained classifier to make predictions\nknn.predict([[1,2,2],[2,2,2]])\n# Output: array([1, 0]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: dictionary = {'a': 1, 'b': 3, 'c': 5, 'd': 7}\n\nresult = [item for item in dictionary.values() if item > 5]\n\nprint(result)\n\n# Output:\n[7] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isEvenNumberPresent(list):\n    for item in list:\n        if item % 2 == 0:\n            return True\n    return False\n\nprint(isEvenNumberPresent([2, 3, 4, 5, 6])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ShoppingCart:\n def __init__(self):\n self.items = []\n self.cost = 0\n\n def add_item(self, item):\n self.items.append(item)\n self.cost += item['price']\n\n def remove_item(self, item):\n self.items.remove(item)\n self.cost -= item['price']\n\n def get_total(self):\n return self.cost\n\n def get_items(self):\n return self.items but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_median(lst):\n    lst.sort()\n    if len(lst)%2 == 0:\n        median1 = lst[len(lst)//2]\n        median2 = lst[len(lst)//2 - 1]\n        median = float(median1 + median2) / 2\n    else:\n        median = lst[len(lst)//2]\n    return median\n\nresult = find_median([7, 4, 5, 2, 10])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_age(birthdate, current_date):\n    age = current_date.year - birthdate.year\n    if current_date.month < birthdate.month:\n        age -= 1\n    elif (current_date.month == birthdate.month and\n          current_date.day < birthdate.day):\n        age -= 1\n    return age\n\nimport datetime\nbirthdate = datetime.date(1996, 12, 6)\ncurrent_date = datetime.date(2021, 3, 18)\nage = calculate_age(birthdate, current_date)\nprint(age) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def measure_temperature(data):\n    temp_c = data[0]\n    temp_f = data[1]\n    temp_k = data[2]\n    return temp_c, temp_f, temp_k but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python 3 program to generate Fibonacci sequence\n\ndef Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n  \n# Driver Program \nprint(Fibonacci(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # isomeasurer.py \n# ALS 2017/06/01\nimport os\nimport astropy.units as u\nfrom astropy.io import fits\nimport numpy as np\nimport astropy.table as at\nimport pickle\nimport scipy.ndimage as simg\n\n\nfrom ..measurer import Measurer\nfrom ... import tabtools\nfrom . import polytools\nfrom . import plottools\n\nclass isoMeasurer(Measurer):\n\n\tdef __init__(self, **kwargs):\n\t\t\"\"\"\n\t\tchild of Measurer\n\t\tdo isophotal measurements\n\t\t\"\"\"\n\t\tsuper(isoMeasurer, self).__init__(**kwargs)\n\n\t\tself.msrtype = 'iso'\n\n\n\tdef get_fp_contours(self, imgtag='OIII5008_I', onlycenter=False, suffix=''):\n\t\t\"\"\" e.g., msr_iso-OIII5008_I{suffix}_contours.pkl \n\t\t\t\\or   msr_iso-OIII5008_I{suffix}_contours-ctr.pkl \n\t\t\"\"\"\n\t\tif onlycenter:\n\t\t\tctrtag = '-ctr'\n\t\telse:\n\t\t\tctrtag = ''\n\n\t\tfp_root = self.get_fp_msrtagroot(imgtag=imgtag, suffix=suffix)\n\t\treturn fp_root+'_contours{ctrtag}.pkl'.format(ctrtag=ctrtag)\n\n\n\tdef make_measurements(self, imgtag='OIII5008_I', isocut=3.e-15*u.Unit('erg / (arcsec2 cm2 s)'), minarea=5, onlycenter=True, centerradius=5.*u.arcsec, plotsuffix='', savecontours=False, plotmsr=False, msrsuffix='', overwrite=False, append=False):\n\t\t\"\"\"\n\t\tmake measurements on a map and write to msr_iso.csv. \n\t\t\tif imgtag='OIII5008_I' then measure 'stamp-OIII5008_I.fits'\n\n\t\tParams\n\t\t------\n\t\tself\n\t\timgtag='OIII5008_I'\n\t\toverwrite = False (bool)\n\n\t\tisocut=1.e-15*u.Unit('erg / (arcsec2 cm2 s)'):\n\t\t\tisophote cut\n\t\tminarea=0:\n\t\t\tconnected contour area (# pix) above the area is counted as part of the isophote measurement\n\t\tonlycenter=False:\n\t\t\twhether to consider only the center contours\n\t\tcenterradius=2.*u.arcsec\n\t\tplotsuffix = '':\n\t\t\tplotsuffix label to be attach to the end of the plot or contour file names. \n\t\tsavecontours=False\n\t\tplotmsr=False\n\t\tmsrsuffix=''\n\t\t\tplotsuffix label in the end of the measurement csv file: msr_iso_{msrsuffix}.csv.\n\t\toverwrite=False\n\t\tappend=False\n\n\t\tReturn\n\t\t------\n\t\tstatus (bool)\n\n\t\tWrite Output \n\t\t------------\n\t\te.g., msr_iso.csv\n\t\t\"\"\"\n\t\tfn = self.get_fp_msr(msrsuffix=msrsuffix)\n\n\t\tcondi = {'imgtag': imgtag, 'isocut': isocut, 'minarea': minarea, 'onlycenter': onlycenter, 'centerradius': centerradius}\n\n\t\tif append or overwrite or (not tabtools.fn_has_row(fn, condi)):\n\t\t\tprint(\"[isomeasurer] making measurement\")\n\n\t\t\timg = self.get_stamp_img(imgtag=imgtag, wunit=True)\n\t\t\txc, yc = self._get_xc_yc(img)\n\n\t\t\t# calc\n\t\t\tif np.all(~np.isnan(img)): \n\t\t\t\tcontours = self._get_contours_from_img(img=img, isocut=isocut, xc=xc, yc=yc, minarea=minarea, onlycenter=onlycenter, centerradius=centerradius)\n\t\t\t\ttab_msr = self._get_tab_measurements_from_contours(contours=contours, xc=xc, yc=yc)\n\t\t\telse: \n\t\t\t\tcontours = []\n\t\t\t\ttab_msr = self._get_tab_measurements_nan()\n\n\t\t\ttab_params = self._get_tab_params(imgtag=imgtag, isocut=isocut, minarea=minarea, onlycenter=onlycenter, centerradius=centerradius)\n\t\t\ttabout = at.hstack([tab_params, tab_msr])\n\n\t\t\t# output\n\t\t\ttabtools.write_row(fn=fn, row=tabout, condi=condi, overwrite=overwrite, append=append)\n\n\t\t\t# optional output\n\t\t\tif savecontours:\n\t\t\t\tfn_contours = self.get_fp_contours(imgtag=imgtag, onlycenter=onlycenter, suffix=plotsuffix)\n\t\t\t\twrite_pickle(contours, fn_contours, overwrite=overwrite)\n\n\t\t\tif plotmsr:\n\t\t\t\tfn_plot = self.get_fp_msrplot(imgtag=imgtag, suffix=plotsuffix)\n\t\t\t\tplottools.make_plot_img_w_contours(fn_plot=fn_plot, img=img, contours=contours)\n\n\t\telse:\n\t\t\tprint(\"[isomeasurer] skip making measurement as files exist\")\n\n\t\treturn os.path.isfile(fn)\n\n\n\tdef make_visualpanel(self, fn=None, compo_bands ='gri', imgtag='OIII5008_I', onlycenter=True, minarea=5, centerradius=5.*u.arcsec, tocolorbar=True, totitle=True, fontsize=12, overwrite=False):\n\t\t\"\"\" \n\t\tmake panel figure to visualize the composit and the iso measurements\n\t\tsaved to e.g., 'msr_iso-OIII5008_I_panel.pdf'\n\n\t\tParams\n\t\t------\n\t\tfn = None: default: msr_iso_{imgtag}_panel.pdf\n\t\tcompo_bands ='gri', imgtag='OIII5008_I', overwrite=False\n\n\t\tReturn\n\t\t------\n\t\tstatus\n\t\t\"\"\"\n\t\tif fn is None:\n\t\t\tfn = self.get_fp_msrplot(imgtag=imgtag, suffix='_panel')\n\t\telse: \n\t\t\tfn = self.dir_obj+fn\n\n\t\tif not os.path.isfile(fn) or overwrite:\n\t\t\tprint(\"[isomeasurer] making visual panel\")\n\n\t\t\t# get files ready \n\t\t\tself.make_colorimg(bands=compo_bands, img_type='stamp', overwrite=False)\n\n\t\t\t# access data\n\t\t\timg_compo = simg.imread(self.dir_obj+'color_stamp-{}.png'.format(compo_bands))\n\t\t\timg_map = self.get_stamp_img(imgtag=imgtag, wunit=False)\n\n\t\t\tsuffix = '_3e-15'\n\t\t\tisocut = 3.e-15*u.Unit('erg / (arcsec2 cm2 s)')\n\t\t\tfn_contours3 = self.get_fp_contours(imgtag=imgtag, onlycenter=onlycenter, suffix=suffix)\n\t\t\tif not os.path.isfile(fn_contours3):\n\t\t\t\tprint(\"[isomeasurer] re-doing measurements to make contours required for visual panel plots\")\n\t\t\t\tself.make_measurements(imgtag=imgtag, isocut=isocut, plotsuffix=suffix, minarea=minarea, onlycenter=onlycenter, centerradius=centerradius, overwrite=True, savecontours=True, plotmsr=False), \n\n\t\t\tcontours3 = read_pickle(fn_contours3)\n\n\t\t\tsuffix = '_1e-15'\n\t\t\tisocut = 1.e-15*u.Unit('erg / (arcsec2 cm2 s)')\n\t\t\tfn_contours1 = self.get_fp_contours(imgtag=imgtag, onlycenter=onlycenter, suffix=suffix)\n\t\t\tif not os.path.isfile(fn_contours1):\n\t\t\t\tprint(\"[isomeasurer] re-doing measurements to make contours required for visual panel plots\")\n\t\t\t\tself.make_measurements(imgtag=imgtag, isocut=isocut, plotsuffix=suffix, minarea=minarea, onlycenter=onlycenter, centerradius=centerradius, overwrite=True, savecontours=True, plotmsr=False), \n\n\t\t\tcontours1 = read_pickle(fn_contours1)\n\n\t\t\tz = self.z\n\t\t\tpixsize = self.pixsize.to_value(u.arcsec)\n\t\t\tlegend_suffix = ' at 3'\n\t\t\tname = self.obj.name[4:]\n\n\t\t\ttitle_compo = '${}~{}~{}~$'.format(compo_bands[0], compo_bands[1], compo_bands[2])+'$\\mathrm{Composite}$'\n\t\t\ttitle_map = '$\\mathrm{[OIII]\\lambda 5007~Intensity}$'\n\t\t\tlabel_cbar = '$I~[10^{-15}~\\mathrm{erg~s^{-1}~cm^{-2}~arcsec^{-2}}]$'\n\n\t\t\tplottools.make_iso_visual_panel(fn, img_compo, img_map, contours1, contours3, z, pixsize, legend_suffix, name, title_compo, title_map, label_cbar, tocolorbar=tocolorbar, totitle=totitle, fontsize=fontsize)\n\n\t\telse:\n\t\t\tprint(\"[isomeasurer] skip making visual panel as files exist\")\n\n\t\treturn os.path.isfile(fn)\n\n\t\t\n\tdef _get_tab_params(self, imgtag, isocut, minarea, onlycenter, centerradius):\n\t\t\"\"\"\n\t\treturn a one row table of the measurement params \n\t\t\"\"\"\n\t\ttab = at.Table([[imgtag], [str(isocut)], [minarea], [onlycenter], [str(centerradius)], ], names=['imgtag', 'isocut', 'minarea', 'onlycenter', 'centerradius', ])\n\t\treturn tab\n\n\n\tdef _get_tab_measurements_from_contours(self, contours, xc, yc):\n\t\t\"\"\" \n\t\tcalculate iso measurements from contours, return a table like: \n\t\t\"\"\"\n\n\t\ttab = polytools.ShapeParamsTab_from_contours(contours, xc, yc)\n\n\t\t# unit conversion\n\t\tarea_ars = tab['area_pix'][0]*(self.pixsize/u.arcsec)**2\n\t\tdmax_ars = self._pix_to_theta(tab['dmax_pix'][0], wunit=False)\n\t\trmax_ars = self._pix_to_theta(tab['rmax_pix'][0], wunit=False)\n\t\tdper_ars = self._pix_to_theta(tab['dper_pix'][0], wunit=False)\n\n\t\tkpc_per_arcsec = np.array(self._get_kpc_proper_per_arcsec())\n\n\t\tarea_kpc = area_ars * kpc_per_arcsec**2\n\t\tdmax_kpc = dmax_ars * kpc_per_arcsec\n\t\trmax_kpc = rmax_ars * kpc_per_arcsec\n\t\tdper_kpc = dper_ars * kpc_per_arcsec\n\n\t\ttab_converted = at.Table(names=['area_kpc', 'dmax_kpc', 'rmax_kpc', 'dper_kpc', 'area_ars', 'dmax_ars', 'rmax_ars', 'dper_ars', ])\n\t\ttab_converted.add_row([area_kpc, dmax_kpc, rmax_kpc, dper_kpc, area_ars, dmax_ars, rmax_ars, dper_ars, ])\n\n\t\ttabout = at.hstack([tab_converted, tab])\n\n\t\treturn tabout\n\n\n\tdef _get_tab_measurements_nan(self):\n\t\t\"\"\" \n\t\treturn a tab measurement just like _get_tab_measurements_from_contours() but with entries all nan. \n\t\t\"\"\"\n\t\tnames = ['area_kpc', 'dmax_kpc', 'rmax_kpc', 'dper_kpc', 'area_ars', 'dmax_ars', 'rmax_ars', 'dper_ars', 'area_pix', 'dmax_pix', 'rmax_pix', 'dper_pix', 'theta_dmax', 'theta_rmax', 'theta_dper', 'aspectr']\n\n\t\ttabout = at.Table(names=names)\n\t\ttabout.add_row([np.nan for i in range(len(names))])\n\n\t\treturn tabout\n\n\n\tdef _get_contours_from_img(self, img, isocut, xc, yc, minarea=0., onlycenter=False, centerradius=2.*u.arcsec):\n\t\t\"\"\"\n\t\tmake contour at isocut of image as python pickle file (fn_contours)\n\t\talways overwrite\n\n\t\tParams\n\t\t------\n\t\tself\n\t\timg (array)\n\t\tisocut (float or quantity):\n\t\t\thas to be of the same type of unit as image\n\t\tminarea (float):\n\t\t\tminimum area (pix) to be considered as contour patch\n\t\tonlycenter (bool):\n\t\t\twhether to take only center patches as patches (they all have to pass minarea test as well)\n\t\tcenterradius (angular quantity):\n\t\t\tif onlycenter = True, then it sets the radius of the center area. only patches overlapping with that area will be considered. \n\n\t\t\"\"\"\n\n\t\t# prep\n\t\ttry: \n\t\t\timg.unit\n\t\texcept:\n\t\t\timg_nparr = img/isocut\n\t\telse:\n\t\t\timg_nparr = np.array((img/isocut).to(u.dimensionless_unscaled))\n\n\t\t# find contours -- satisfy minarea\n\t\tcontours = polytools.find_largecontours(img=img_nparr, threshold=1., minarea=minarea)\n\n\t\tif onlycenter:  # select only those at the center\n\t\t\tcenterradius_pix = self._theta_to_pix(centerradius)\n\t\t\tcontours = polytools.select_center_contours(contours, xc, yc, radius=centerradius_pix)\n\n\t\treturn contours\n\n\n\ndef read_pickle(fn):\n\twith open(fn, 'rb') as handle:\n\t\tresult = pickle.load(handle)\n\treturn result\n\n\ndef write_pickle(result, fn, overwrite=False):\n\n\tif not os.path.isfile(fn) or overwrite:\n\t\twith open(fn, 'wb') as handle:\n\t\t\tpickle.dump(result, handle)\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_lists(list1, list2):\n    common_elements = []\n    for element in list1:\n        if element in list2:\n            common_elements.append(element)\n    return common_elements\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\n\ncommon_elements = compare_lists(list1, list2)\nprint(common_elements) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: <html>\n  <head>\n    <title>Course Tree</title>\n    <style>\n      ul {\n        list-style: none;\n      }\n    </style>\n  </head>\n  <body>\n    <ul>\n      <li>Programming\n        <ul>\n          <li>Python\n            <ul>\n              <li>Basics</li>\n              <li>Data Structures</li>\n              <li>Advanced Topics</li>\n            </ul>\n          </li>\n          <li>Javascript\n            <ul>\n              <li>Basics</li>\n              <li>Object Oriented Programming</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li>Design \n        <ul>\n          <li>UI/UX Design\n            <ul>\n              <li>Wireframing</li>\n              <li>Prototyping</li>\n              <li>Visual Design</li>\n            </ul>\n          </li>\n          <li>Graphic Design\n            <ul>\n              <li>Logo Design</li>\n              <li>Illustration</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </body>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: n=10\nresult=[]\n\n# first two numbers\nresult.append(0)\nresult.append(1)\n\n# iteration for generating Fibonacci numbers\nfor i in range(2, n):\n    result.append(result[i-2] + result[i-1])\n\n# print the result\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_list(strings):\n    return [s[::-1] for s in strings]\n\nstrings = [\"Hello\", \"World\"]\nprint(reverse_list(strings)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class StringChecker:\n    def containsVowels(self, s):\n        vowels = set('aeiouAEIOU')\n        for letter in s:\n            if letter in vowels:\n                return True\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\n# Constants\nmax_guesses = 6\nhangman_art = [\n    '''\n        +---+\n        |   |\n            |\n            |\n            |\n            |\n        =========''', '''\n        +---+\n        |   |\n        O   |\n            |\n            |\n            |\n        =========''', '''\n        +---+\n        |   |\n        O   |\n        |   |\n            |\n            |\n        =========''', '''\n        +---+\n        |   |\n        O   |\n       \\|   |\n            |\n            |\n        =========''', '''\n        +---+\n        |   |\n        O   |\n       \\|/  |\n            |\n            |\n        =========''', '''\n        +---+\n        |   |\n        O   |\n       \\|/  |\n        |   |\n            |\n        =========''', '''\n        +---+\n        |   |\n        O   |\n       \\|/  |\n        |   |\n       /    |\n        =========''', '''\n        +---+\n        |   |\n        O   |\n       \\|/  |\n        |   |\n       / \\  |\n        =========''']\n\n# State Variables\nplayer_guesses = []\nwords_list = [\"python\", \"javascript\", \"swift\", \"kotlin\"]\nword = words_list[random.randint(0, len(words_list))]\nguesses_left = max_guesses\n\n# Function Definitions\ndef generate_masked_word(word, masked_word, guessed_letters):\n    for letter in word:\n        if letter in guessed_letters:\n            masked_word += letter\n        else:\n            masked_word += '_'\n    return masked_word\n\ndef print_instructions():\n    print(\"Welcome to Hangman!\")\n    print(\"The mystery word has \" + str(len(word)) + \" letters.\")\n    print(\"You have \" + str(max_guesses) + \" guesses to guess all of the letters correctly.\")\n    print(\"See if you can win!\")\n\ndef print_game_state(guesses, hangman_art, masked_word, guessed_letters):\n    print(hangman_art[guesses-1])\n    print(\"Guessed so far: \" + str(guessed_letters))\n    print(\"Your word to guess looks like: \" + str(masked_word))\n\ndef print_win(word):\n    print(\"Congratulations! You guessed the word '\" + str(word))\n\ndef main():\n    guessed_letters = []\n    masked_word = \"\"\n    print_instructions()\n\n    while len(word) != len(masked_word) or ((len(word) == len(masked_word)) and (word != masked_word)):\n        print_game_state(guesses_left, hangman_art, masked_word, guessed_letters)\n\n        letter = input('Guess a letter: ')\n        if (letter in guessed_letters) or (letter not in string.ascii_lowercase):\n            continue\n\n        guessed_letters.append(letter)\n        masked_word = generate_masked_word(word, masked_word, guessed_letters)\n        if letter in word:\n            print(\"Yes! \" + letter + \" is in the word.\")\n            continue\n\n        guesses_left -= 1\n        print(\"No! \" + letter + \" is not in the word. You have \" + str(guesses_left) + \" guesses left.\")\n\n        if guesses_left == 0:\n            print(\"Sorry, you lost the game. The word was: \" + str(word))\n            exit()\n    \n    print_win(word)\n\nif __name__ == \"__main__\":\n    main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_first_n_numbers(n): \n\tsum = 0\n\t\n\t# iterate over all numbers \n\t# from 0 to n \n\tfor num in range(0, n+1): \n\t\tsum += num \n\t\n\treturn sum\n\nn = 10\nprint(sum_of_first_n_numbers(n)) \n\n# Output: 55 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: @app.route('/api/getWordCount', methods=['POST'])\ndef getWordCount():\n    \"\"\"Endpoint for getting words count in PDF document\"\"\"\n    data = request.get_json()\n    pdf = data['pdf'] \n    word_count = count_words(pdf)\n    return jsonify({'wordCount': word_count}) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def edit_dict(nested_dict, new_element):\n    \"\"\"Edit the given nested dictionary by adding a new element.\"\"\"\n    nested_dict.update(new_element)\n    return nested_dict\n\n# Usage Example \nnested_dict = {\n        'makers': ['John', 'Alan'],\n        'printers':{\n            'color':['hp', 'canon'],\n            'black_white': ['epson']\n        }\n    }\n\nnew_element = {'copiers':['Xerox', 'Ricoh']}\n\nedited_dict = edit_dict(nested_dict, new_element)\nprint(edited_dict)\n# {'makers': ['John', 'Alan'], \n# 'printers': {'color': ['hp', 'canon'], 'black_white': ['epson']}, \n# 'copiers': ['Xerox', 'Ricoh'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_numbers(lst):\n    result = []\n    for num in lst:\n        if num <= 1:\n            result.append(\"Composite\")\n        elif num == 2:\n            result.append(\"Prime\")\n        elif num % 2 == 0:\n            result.append(\"Even\")\n        else:\n            is_prime = True\n            for i in range(2, int(num**0.5)+1):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                result.append(\"Prime\")\n            else:\n                result.append(\"Odd\")\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n result = 1\n for i in range(1, n+1):\n result *= i\n return result\n \nprint(factorial(3)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def create_html_table(list_of_tuples):\n    html_string = \"<html>\\n<body>\\n<table>\\n\"\n    # Generate HTML table header\n    html_string += \"<tr>\\n\"\n    for key in list_of_tuples[0].keys():\n        html_string += \"<th>{}</th>\\n\".format(key)\n    html_string += \"</tr>\\n\"\n    # Generate HTML table content\n    for tuple_ in list_of_tuples:\n        html_string += \"<tr>\\n\"\n        for data in tuple_:\n            html_string += \"<td>{}</td>\\n\".format(data)\n        html_string += \"</tr>\\n\"\n    # Close the table\n    html_string += \"</table>\\n</body>\\n</html>\"\n\n    return html_string\n\nif __name__ == \"__main__\":\n    list_of_tuples = [('First', 'John'), ('Last', 'Doe'), ('Age', 20)]\n    html_string = create_html_table(list_of_tuples)\n    print(html_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def grade(percentage):\n    if percentage >= 90:\n        return 'A'\n    elif percentage >= 80:\n        return 'B'\n    elif percentage >= 70:\n        return 'C'\n    elif percentage >= 60:\n        return 'D'\n    else:\n        return 'F' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sorted_list = sorted(tuple_list, key=lambda x: (x[1], x[0]))\nprint(sorted_list)\n\n# Output: [(3, 1), (2, 2), (1, 3), (2, 3)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport urllib.request\nfrom bs4 import BeautifulSoup\n\n# specify the url\nurl = 'https://en.wikipedia.org/wiki/List_of_Presidents_of_the_United_States'\n\n# query the website and return the html\npage = urllib.request.urlopen(url)\n\n# parse the html using beautiful soup\nsoup = BeautifulSoup(page, 'html.parser')\n\n# find all table rows\ntrs = soup.find_all('tr')\n\n# extract the table data \ndata = []\nfor tr in trs:\n    td = tr.find_all('td')\n    row = [element.text for element in td]\n    data.append(row)\n\n# print the scraped data\nfor row in data:\n    print(row) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(target, elements):\n  start = 0 \n  end = len(elements) - 1\n\n  while start <= end:\n    mid = (start + end) // 2 \n      \n    if target == elements[mid]: \n      return True \n  \n    elif target < elements[mid]: \n      end = mid - 1\n\n    else: \n      start = mid + 1\n    \n  return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.datasets import load_digits\ndigits = load_digits()\n\n# Split data into training and test set\nX_train, X_test, y_train, y_test = train_test_split(digits.data, digits.target, train_size=0.75)\n\n# Create a Random Forest classifier\nclf = RandomForestClassifier(n_estimators=100, random_state=0)\n\n# Train the model\nclf.fit(X_train, y_train)\n\n# Test the model\naccuracy = clf.score(X_test, y_test)\nprint(accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_dict_element(dictionary, key):\n    # Check if the key is present in the dictionary\n    if key in dictionary:\n        # If yes, remove the key\n        del dictionary[key]\n    # Return the updated dictionary     \n    return dictionary but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nresult = factorial(5)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Invoice:\n    def __init__(self, item, price):\n        self.item = item\n        self.price = price\n    \n    def get_item(self):\n        return self.item\n    \n    def get_price(self):\n        return self.price\n\ninvoice = Invoice(\"Pen\", 3) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence = \"The quick brown fox jumps over the lazy dog\" \nword_list = sentence.split(\" \") \nprint(word_list) \n\n# Output: ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create a Django project\ndjango-admin startproject poll_project\n\n# Navigate to the project directory\ncd poll_project\n\n# Create a Django app to handle polls\npython manage.py startapp polls\n\n# Edit polls/models.py to define the Poll data model\nfrom django.db import models\n\nclass Poll(models.Model):\n    question = models.CharField(max_length=200)\n    pub_date = models.DateTimeField('date published')\n\n# Edit polls/views.py to define views for the polls\nfrom django.http import HttpResponse\nfrom django.shortcuts import render\nfrom polls.models import Poll\n\ndef index(request):\n    latest_poll_list = Poll.objects.order_by('-pub_date')[:5]\n    context = {'latest_poll_list': latest_poll_list}\n    return render(request, 'polls/index.html', context)\n\n# Edit polls/urls.py to define the polls app urls\nfrom django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]\n\n# Edit poll_project/urls.py to include the polls app\nfrom django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('polls/', include('polls.urls')),\n    path('admin/', admin.site.urls),\n]\n\n# Create templates/polls/index.html to display the polls\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>My Polls</title>\n    </head>\n    <body>\n        {% if latest_poll_list %}\n            <ul>\n            {% for poll in latest_poll_list %}\n                <li><a href=\"/polls/{{ poll.id }}/\">{{ poll.question }}</a></li>\n            {% endfor %}\n            </ul>\n        {% else %}\n            <p>No polls are available.</p>\n        {% endif %}\n    </body>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: <html>\n<head>\n    <title>Top 5 Programming Languages</title>\n</head>\n<body>\n    <ul>\n        <li>Python</li>\n        <li>Java</li>\n        <li>JavaScript</li>\n        <li>C#</li>\n        <li>C++</li>\n    </ul>\n</body>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.svm import SVR\nimport matplotlib.pyplot as plt\n\n# Load the data\ndf = pd.read_csv('stock-data.csv')\n\n# Preprocess the data\nX = np.array(df.index).reshape(-1, 1)\ny = df['price']\n\n# Use SVR to create a model\nclf = SVR(kernel='rbf')\nclf.fit(X, y)\n\n# Make prediction using the model\nx_pre = np.array([len(X) + 1])\nx_pre = x_pre.reshape(-1, 1)\nprediction = clf.predict(x_pre)\n\nprint(\"Predicted stock price: {}\".format(prediction[0])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_without_plus_operator(a, b):\n    # Iterate till there is no carry\n    while (b != 0):\n        # Carry now contains common set bits of x and y\n        carry = a & b\n\n        # Sum of bits of x and y where at least one of the bits is not set\n        a = a ^ b\n\n        # Carry is shifted by one so that adding it to x gives the required sum\n        b = carry << 1\n\n    return a\n\nif __name__ == \"__main__\":\n    a = 3\n    b = 4\n    print(add_without_plus_operator(a, b)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def unique_list(list):\n    unique_list = []\n    for element in list:\n        if element not in unique_list:\n            unique_list.append(element)\n    return unique_list\n\nunique_elements = unique_list([1,2,2,3,3,3])\nprint(unique_elements) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a program to assess whether or not a movie genre is representing violent behaviour\n\"\"\"\n\nimport nltk\nfrom nltk.tokenize import word_tokenize\n\ndef classify_movie(review):\n    # Tokenize review\n    tokens = word_tokenize(review)\n\n    # Check for violent words in the review\n    violent_words = ['violence', 'violent', 'killing', 'fight', 'bloody', 'war']\n\n    for token in tokens:\n        if token in violent_words:\n            return 'Yes'\n\n    return 'No'\n\nif __name__ == '__main__':\n    review = 'The movie is full of thrilling action scenes and lots of violence.'\n    result = classify_movie(review)\n    print(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_by_length(words, length):\n    result = []\n    for word in words:\n        if len(word) >= length:\n            result.append(word)\n    return result\n\nwords = ['apple', 'toy', 'trees']\nlength = 5\n\nprint(search_by_length(words, length)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse(text):\n return text[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\nimport numpy as np\n\n# Input data\ninputData = np.array([[Age, Gender, Weight, Height, Systolic BP, Diastolic BP], ...])\n\n# Output data\noutputData = np.array([Disease_probability], ...])\n\n# Initialize variables\nnumberOfInputs = len(inputData[0])\nnumberOfOutputs = len(outputData[0])\n# Define the number of neurons in each layer\nhiddenUnits = [5,5]\n\n# Create placeholders for the inputs\nx = tf.placeholder(tf.float32, [None, numberOfInputs])\ny = tf.placeholder(tf.float32, [None, numberOfOutputs])\n\n# Create weights\nweights = {\n    \"h1\": tf.Variable(tf.random_normal([numberOfInputs, hiddenUnits[0]]) ),\n    \"h2\": tf.Variable(tf.random_normal([hiddenUnits[0], hiddenUnits[1]] )),\n    \"output\": tf.Variable(tf.random_normal([hiddenUnits[1], numberOfOutputs] ))\n}\n\n# Create biases\nbiases = {\n    \"b1\": tf.Variable(tf.random_normal([hiddenUnits[0]] )),\n    \"b2\": tf.Variable(tf.random_normal([hiddenUnits[1]] )),\n    \"output\": tf.Variable(tf.random_normal([numberOfOutputs] ))\n}\n\n# Create forward propagation step\ndef forwardPropagation(x):\n    # Hidden layer 1\n    layerOne = tf.add( tf.matmul(x, weights[\"h1\"] ), biases[\"b1\"] )\n    layerOne = tf.nn.relu(layerOne)\n\n    # Hidden layer 2\n    layerTwo = tf.add( tf.matmul(layerOne, weights[\"h2\"] ), biases[\"b2\"] )\n    layerTwo = tf.nn.relu(layerTwo)\n\n    # Output layer\n    outputLayer = tf.add( tf.matmul(layerTwo, weights[\"output\"]), biases[\"output\"] )\n    return outputLayer\n\n# Create loss calculating step\ndef computeLoss(predictions, y):\n    return tf.reduce_mean( tf.nn.softmax_cross_entropy_with_logits(logits=predictions, labels=y) )\n\n# Create optimizer step\ndef trainModel(loss):\n    learningRate = 0.001\n    return tf.train.AdamOptimizer(learningRate).minimize(loss)\n\ndef main():\n    # Run forward propagation \n    predictions = forwardPropagation(x)\n\n    # Calculate loss\n    loss = computeLoss(predictions, y)\n\n    # Train the model\n    train = trainModel(loss)\n\n    # Create session\n    with tf.Session() as sess:\n        # Initialize all the variables\n        sess.run(tf.global_variables_initializer())\n\n        # Train the model for the specified number of epochs\n        for epoch in range(50):\n            epochLoss, _ = sess.run([loss, train], feed_dict={x : inputData , y : outputData})\n            print(\"loss : ,\", epochLoss)\n\n        # Prediction\n        prediction = tf.argmax(predictions, 1)\n        correct_prediction = tf.equal(prediction, tf.argmax(y, 1))\n        accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n        print(\"Accuracy : \", accuracy.eval({x: inputData, y: outputData}))\n\nif __name__ == '__main__':\n    main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import subprocess\n\ncommand = 'ls'\nprocess = subprocess.run([command], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)\n\nfor line in process.stdout.splitlines():\n    print( line ) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def palindrome(word): \n    if word == word[::-1]: \n        return True\n    else: \n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\n\nstart_time = time.time()\nsum = 0\n\nfor i in range(1, 1000000):\n    sum += i\n\nend_time = time.time()\nprint(\"Time to calculate the sum: \" + str(end_time - start_time))\n\n# Optimize code\nstart_time = time.time()\nsum = 0\ntotal = 1000000\n\n# Using arithmetic series method to reduce time complexity\nsum = (total/2)*(1 + total)\n\nend_time = time.time()\nprint(\"Time to calculate the sum: \" + str(end_time - start_time)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Calculator:\n    def __init__(self):\n        \"\"\"Initialize the calculator\"\"\"\n        self.result = 0\n    \n    def add(self, a, b):\n        \"\"\"Add two numbers\"\"\"\n        self.result = a + b\n        return self.result\n    \n    def subtract(self, a, b):\n        \"\"\"Subtract two numbers\"\"\"\n        self.result = a - b\n        return self.result\n    \n    def multiply(self, a, b):\n        \"\"\"Multiply two numbers\"\"\"\n        self.result = a * b\n        return self.result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ArrayContainer:\n  def __init__(self, arr):\n    self.arr = arr\n\n  def get_array(self):\n    return self.arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_even(n):\n if n % 2 == 0:\n return True\n return False\n\nnum = int(input('Enter an integer: '))\nif is_even(num):\n print('The number is even.')\nelse:\n print('The number is odd.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = 'https://www.example.com/api/data'\nresponse = requests.get(url)\ndata = response.json()\n\n# Process response data\nfor item in data:\n  # Do something with item... but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\n\n# create model\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size = (3, 3), activation='relu', input_shape=(224, 224, 3)))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2, activation='softmax'))\n\n# compile model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = '<URL to scrape>'\npage = requests.get(url)\nsoup = BeautifulSoup(page.text, 'html.parser')\n\n# Find all the articles\narticles = soup.find_all('article')\n\n# Loop through the articles and print their titles\nfor article in articles:\n print(article.h2.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_currencies(currency_from, currency_to, exchange_rate):\n return currency_fit * exchange_rate \n\nc = convert_currencies('USD', 'EUR', 0.9)\nprint(c) # Output: 0.9 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: bin_str = bin(num)\nrev_bin_str = '0b' + bin_str[:1:-1]\nrev_num = int(rev_bin_str,2)\n\nprint(\"The binary reversed version of {} is {}\".format(num, rev_num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def searchSortedList(sorted_list, target):\n    # Edge cases\n    if not len(sorted_list) or len(sorted_list) == 0:\n        return -1\n\n    left = 0\n    right = len(sorted_list) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if sorted_list[mid] == target:\n            return mid\n        if sorted_list[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef quadratic_roots(a, b, c):\n    d = (b ** 2) - (4 * a * c) \n    if d < 0:\n        return None  # No real roots\n    elif d == 0:\n        return -b / (2 * a)  # One root \n    else:\n        x1 = (-b + math.sqrt(d)) / (2 * a) \n        x2 = (-b - math.sqrt(d)) / (2 * a) \n        return (x1, x2)  # Two roots\n\nprint(quadratic_roots(-2, 5, -3)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def encode_base64(data): \n    b64 = base64.b64encode(data.encode(\"utf-8\")) \n    return b64 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = 'http://example.com/'\nresponse = requests.post(url) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def largest_element(x):\n    max_element = x[0]\n    for number in x:\n        if number > max_element:\n            max_element = number\n    return max_element but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import flask\nfrom flask import Flask, request, redirect, session\nimport requests\n\napp = Flask(__name__)\n\napp.secret_key = 'my_secret_key'\n\n# CAS URL\ncas_base_url = 'https://my_cas.ecample.com'\n\n# Login page\n@app.route('/login')\ndef login():\n redirect(f'{cas_base_url}/login')\n \n # Callback page\n @app.route('/authblog_callback')\ndef authentication_callback():\n# Get the ticket from the CAS URL\nticket = request.args.get('ticket')\n\n# Validate the ticket\nticket_verification_url = f'{cas_base_url}/validation/{ticket}'\n\n# Get the response from CAS\ncas_response = requests.get(ticket_verification_url)\n\n# Verify the response\nif cas_response.status_code == 200:\n# Successful response\n# Create Auth Session\nsession['auth'] = True\nreturn redirect(cas_base_url)\nelse:\n# Failed response\n# Present auth failed message \nreturn redirect(cas_base_url)\n\n# Protected route\n@app.route('/protected')\ndef protected():\n if session.get('auth') == True:\n return 'You are authorized!' \n else:\n return 'You are not authorized!' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_dict = {\n    'John': 20,\n    'Maria': 25\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import the required libraries\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\n\n# Load the data\ndata_file_path = \"<insert_file_path_here>\"\ndata = pd.read_csv(data_file_path)\n\n# Create X and y variables\nX = data.drop(['heart_disease'], axis=1)\ny = data['heart_disease']\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\n\n# Create the model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Make a prediction for the given input\nX_pred = [[35, 1, 200, 71]]  # Age, Gender, Cholesterol Level, Height\nprediction = model.predict_proba(X_pred)[0]\nprint('Probability of having heart disease: ', prediction[1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ntext = \"This is a text example with many words, some of which contain two or more consecutive vowels\"\npattern = r\"\\w*[aeiou]{2}\\w*\"\n\nfor match in re.finditer(pattern, text):\n    word = match.group()\n    print(word)\n\n\n# Output: example, contain, consecutive, vowels but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Read in data set\ndf = pd.read_csv(\"your_data_file.csv\")\n\n# Separate predictor and target variables\nX = df[[\"Car_Model\", \"Mileage\"]]\ny = df[\"Price\"]\n\n# Split into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Instantiate Random Forest model\nrf_model = RandomForestRegressor(n_estimators=100, random_state=42)\nrf_model.fit(X_train, y_train)\n\n# Score the model\nrf_model.score(X_test, y_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Define the function to calculate approximate root using bisection algorithm\ndef bisection(x, epsilon):\n    low = 0\n    high = x\n    guess = (high + low)/2\n    while abs(x - guess**2) > epsilon:\n        if guess**2 > x:\n            high = guess\n        else:\n            low = guess\n        guess = (high + low)/2\n    return guess\n\nprint(bisection(15, 0.001)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quicksort (array) :\n    if len(array) <= 1 :\n        return array\n    else:\n        pivot = array[len(array) // 2]\n        left = [x for x in array if x < pivot]\n        middle = [x for x in array if x == pivot]\n        right = [x for x in array if x > pivot]\n        return quicksort(left) + middle + quicksort(right)\n\narray = [5, 2, 9, 1, 4, 12]\nresult = quicksort(array)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_permutation(nums):\n n = len(nums)\n permutation = []\n\n# Generate a random index and add the element at that index to the list\n for _ in range(n):\n idx = random.randint(0, len(nums) - 1)\n permutation.append(nums[idx])\n nums.pop(idx)\n\nreturn permutation\n\n# Test the function\nprint(generate_permutation([1, 2, 3, 4, 5]))    # Output: [4, 2, 5, 3, 1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\nobj = {\n  \"name\": \"John\",\n  \"age\": 42\n}\n\njson_string = json.dumps(obj) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef traverseTree(root):\n    res = []\n    helper(root, \"\", res)\n    \ndef helper(node, path, res):\n    if not node:\n        return\n    path += str(node.val)\n    if not node.left and not node.right:\n        res.append(path)\n    helper(node.left, path, res)\n    helper(node.right, path, res) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_dict = {\"cat\": [1], \"dog\": [2], \"mouse\": [3]} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: top_values = []\nfor key, value in dict.items():\n    if len(top_values)<3:\n        top_values.append(value)\n    else:\n        min_value = min(top_values)\n        if value > min_value:\n            top_values.remove(min_value)\n            top_values.append(value)\n\nprint(top_values) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: obj1 = {'key1': 'val1', 'key2': 'val2'}\n\n# create a copy of obj1\nobj2 = obj1.copy()\n# modify the value of key2\nobj2['key2'] = 100 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Rectangle: \n    # constructor \n    def __init__(self, length, width): \n        self.length = length \n        self.width = width \n\n    # member function \n    def calculate_area(self): \n        return self.length * self.width \n\n# creating an instance \nrect1 = Rectangle(5, 6) \n\n# call member function of the class \nprint(\"Area of rectangle is:\", rect1.calculate_area()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def flatten(lst):\n flat_list = []\n for x in lst:\n if type(x) == list:\n flat_list.extend(flatten(x))\n else:\n flat_list.append(x)\n return flat_list\n\nsample_list = [[1, 2], [3, [4, 5]]]\nprint(flatten(sample_list))\n\n# Output: [1, 2, 3, 4, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_key(length,characters):\n    key = \"\"\n    for _ in range(length):\n        key += random.choice(characters)\n    return key\n\nlength = 6\ncharacters = \"ACGT\"\n\nprint(generate_random_key(length,characters)) # GTGGCA but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def removeSpecifiedIndex(list, index): \n  # using list comprehension \n  new_list = [list[i] for i in range(len(list)) if i != index]  \n\n  return new_list \n\nlist = ['Apple', 'Orange', 'Banana', 'Mango']  \nindex = 2\n\nprint(removeSpecifiedIndex(list, index)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class HeapSort: \n  \n    def __init__(self, array): \n        self.array = array \n  \n    def sort(self): \n        n = len(self.array) \n  \n        # Build a maxheap \n        for i in range(n // 2 - 1, -1, -1): \n            self._heapify(n, i) \n  \n        # One by one extract elements \n        for i in range(n - 1, 0, -1): \n            self.array[i], self.array[0] = self.array[0], self.array[i]  # swap \n            self._heapify(i, 0) \n  \n    def _heapify(self, n, i): \n        largest = i  # Initialize largest as root \n        l = 2 * i + 1  # left = 2*i + 1 \n        r = 2 * i + 2  # right = 2*i + 2 \n  \n        # See if left child of root exists and is \n        # greater than root \n        if l < n and self.array[i] < self.array[l]: \n            largest = l \n  \n        # See if right child of root exists and is \n        # greater than root \n        if r < n and self.array[largest] < self.array[r]: \n            largest = r \n  \n        # Change root, if needed \n        if largest != i: \n            self.array[i], self.array[largest] = self.array[largest], self.array[i]  # swap \n  \n            # Heapify the root \n            self._heapify(n, largest) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef rock_paper_scissors():\n    rps_dict = {\n        0: 'rock',\n        1: 'paper',\n        2: 'scissors',\n    }\n\n    user_input = int(input(\"Choose: 0 for rock, 1 for paper, 2 for scissors >>> \"))\n    computer_input = random.randint(0,2)\n\n    if user_input > 2 or user_input < 0:\n        print(\"Invalid input\")\n    else:\n        print(\"You chose:\", rps_dict[user_input])\n        print(\"Computer chose:\", rps_dict[computer_input])\n        if user_input == computer_input:\n            print(\"It's a draw!\")\n        else:\n            if user_input == 0 and computer_input == 2:\n                print(\"You win!\")\n            elif user_input == 1 and computer_input == 0:\n                print(\"You win!\")\n            elif user_input == 2 and computer_input ==1:\n                print(\"You win!\")\n            else:\n                print(\"Computer wins!\")\n\nrock_paper_scissors() but is not the same. just give one example and only return the code."}
