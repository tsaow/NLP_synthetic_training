{"prompt": "make some code that functions the same as the following code: import nltk\nimport numpy as np\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n# Download relevant NLTK packages\nnltk.download('vader_lexicon')\n\n# Initialize Sentiment Analyzer\nsentiment_analyzer = SentimentIntensityAnalyzer()\n\n# Take input from user\nsentence = input(\"Enter a sentence to be analyzed: \")\n\n# Calculate sentiment\nsentiment = sentiment_analyzer.polarity_scores(sentence)\n\n# Output sentiment\nif sentiment['compound'] > 0.2:\n    print(\"Positive sentiment\")\nelif sentiment['compound'] < -0.2:\n    print(\"Negative sentiment\")\nelse:\n    print(\"Neutral sentiment\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import twitter_text\n\ntweet_text = 'Such a great #day today! Check out this link: http://example.com #cool'\n\nparsed_tweet = twitter_text.Parser(tweet_text).parse()\n\n# Print the plain text of the tweet\nprint(parsed_tweet.plain_text)\n\n# Output: Such a great day today! Check out this link: http://example.com cool but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(input):\n    return input[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_to_uppercase(data):\n    if type(data)==str:\n        return data.upper()\n    else:\n        print(\"Input must be a string\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def caesar_encrypt(string, shift_amount):\n encrypted_string = \"\"\n for i in range(len(string)):\n  char = string[i]\n  x = ord(char) + shift_amount\n  encrypted_string += chr(x)\n \n return encrypted_string\n\nencoded_string = caesar_encrypt(string, 3)\nprint(encoded_string) // Output: Khoor Zruog but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: d = {'Shiva': 23, 'Rohan': 12, 'Amit': 79} \n\nsorted_dict = dict(sorted(d.items(), key = lambda x : x[0])) \n\nprint(\"Sorted Dictionary :\", sorted_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.datasets import make_blobs\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Generate some fake data\nX, y = make_blobs(n_samples=100, n_features=2, centers=2, random_state=1)\nX, y = np.hstack((X, y[:, np.newaxis])), y\n\n# Split data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\n\n# Scale the data\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\n# Build the model\nmodel = Sequential()\nmodel.add(Dense(4, activation='relu', input_shape=(3,)))\nmodel.add(Dense(4, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# Compile the model\nmodel.compile(loss='binary_crossentropy', \n optimizer='adam', \n metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train_scaled, y_train, epochs=20, verbose=0)\n\n# Evaluate the model\ntest_loss, test_acc = model.evaluate(X_test_scaled, y_test, verbose=0)\nprint('test acc:', test_acc) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #define MAX_NODES 10\n\ndef process_data(data):\n  # process the data\n  \ndef incrementally_process_data(stream, num_nodes):\n  # validate number of nodes\n  if num_nodes > MAX_NODES:\n    return\n\n  # create nodes\n  nodes = []\n  for _ in range(num_nodes):\n    nodes.append(mp.Process(target=process_data, args=(data,)))\n  \n  # start nodes\n  for node in nodes:\n    node.start()\n  \n  # process stream\n  for chunk in stream:\n    for node in nodes:\n      node.send(chunk)\n  \n  # join nodes\n  for node in nodes:\n    node.join() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# define the URL to crawl\nurl = 'https://www.example.com' \n\n# make an HTTP request to the given URL\nresponse = requests.get(url)\n\n# print a message to indicate the request type\nprint(f'Crawling {url}')\n\n# parse the response and extract the HTML\nhtml = BeautifulSoup(response.text, 'html.parser')\n\n# define a list to store the URLs\nlinks = []\n\n# traverse the HTML page and find all 'a' tags\nfor link in html.find_all('a'):\n  # extract the 'href' value for each 'a' tag\n  links.append(link.get('href'))\n\n# print the list of urls for the web page\nprint('\\n'.join(links)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent(arr):\n    max_count = -1\n    max_elem = -1\n    count_dict = {}\n    for ele in arr:\n        if ele in count_dict:\n            count_dict[ele] += 1\n        else:\n            count_dict[ele] = 1\n        if count_dict[ele] > max_count:\n            max_count = count_dict[ele]\n            max_elem = ele\n    return max_elem but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num):\n    for i in range(2, num):\n        if (num % i) == 0:\n            return False\n    return True\n\nnumber = 27\n\nif is_prime(number):\n    print(str(number) + ' is a prime number.')\nelse:\n    print(str(number) + ' is not a prime number.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(words):\n  seen = set()\n  unique_words = []\n  for word in words:\n    if word not in seen:\n      seen.add(word)\n      unique_words.append(word)\n  return unique_words\n\narr = ['apple', 'banana', 'apple', 'orange']\nresult = remove_duplicates(arr)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nSimulate a dice roll with Python\n\"\"\"\nimport random\n\ndef simulate_dice_roll():\n    dice_roll = random.randint(1, 6)\n    return dice_roll\n\nif __name__ == '__main__':\n    dice_roll = simulate_dice_roll()\n    print(dice_roll) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def respond(message):\n bot_template = \"I'm sorry, I don't understand. Could you try rephrasing that?\"\n user_template = \"USER: {message}\\nBOT: {response}\"\n\n response = bot_template\n \n if 'hello' in message:\n response = \"Hi! How can I help you?\"\n \n print(user_template.format(message=message, response=response))\n \n \nif __name__ == \"__main__\":\n respond(\"Hello\")\n respond(\"I would like to purchase a phone\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def detect_cycle(head): \n   slow_p = head \n    fast_p = head \n    while(slow_p and fast_p): \n        slow_p = slow_p.next\n        fast_p = fast_p.next.next\n        if slow_p == fast_p: \n            return True\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def editDistance(word1, word2):\n\tm = len(word1)\n\tn = len(word2)\n\n\t# Create a matrix to store results of subproblems\n\tdp = [[0 for x in range(n+1)] for x in range(m+1)]\n\n\t# Fill dp[][] in bottom up manner\n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\n\t\t\t# If first string is empty, only option is to \n\t\t\t# insert all characters of second string\n\t\t\tif i == 0: \n\t\t\t\tdp[i][j] = j\n\n\t\t\t# If second string is empty, only option is to \n\t\t\t# remove all characters of second string\n\t\t\telif j == 0: \n\t\t\t\tdp[i][j] = i\n\n\t\t\t# If last characters are same, ignore last char \n\t\t\t# and recur for remaining string\n\t\t\telif word1[i-1] == word2[j-1]: \n\t\t\t\tdp[i][j] = dp[i-1][j-1]\n\n\t\t\t# If last character are different, consider all \n\t\t\t# possibilities and find minimum \n\t\t\telse: \n\t\t\t\tdp[i][j] = 1 + min(dp[i][j-1], # Insert\n\t\t\t\t\t\t\t\tdp[i-1][j], # Remove \n\t\t\t\t\t\t\t\tdp[i-1][j-1]) # Replace \n\n\treturn dp[m][n] \n\n# Driver program \nword1 = \"hello\"\nword2 = \"yellow\"\n\nprint( editDistance(word1, word2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: raise Exception(\"This is an exception\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def nth_fibonacci(n):\n if n == 0:\n  return 0\n elif n == 1:\n  return 1\n else:\n  return nth_fibonacci(n-1) + nth_fibonacci(n-2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combinations(lst, n):\n  # generate all the combinations\n  # we use the itertools library to do this\n  from itertools import combinations\n   \n  # generate all the combinations of length three\n  combinations = list(combinations(lst, n))\n\n  # loop through all the combinations and print them\n  for i in range(len(combinations)):\n    print(combinations[i])\n\n# call the function with the given list\ncombinations([1,2,3], 3) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def score_by_length(s):\n    score = 0\n    for word in s.split():\n        score += len(word)**(-1)\n    return score\n\nprint(score_by_length(\"Hello World!\")) # Output: 1.8333333333333335 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # list of prime numbers\nprimes = []\n\n# loop over numbers 0 - 1000\nfor num in range(2,1000):\n  # if current number is prime add to list\n  if all(num % i != 0 for i in range(2,num)):\n    primes.append(num)\n\nprint(primes) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nclass RandomString:\n    def __init__(self):\n        self.random_string = \"\"\n\n    def generate_string(self):\n        for i in range (10):\n            self.random_string += chr(random.randint(65, 122))\n        return self.random_string\n\n    def print_string(self):\n        print(self.random_string)\n\nstr1 = RandomString()\nstr1.generate_string()\nstr1.print_string() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: d = {}\n\nfor i in range(1000):\n    if i % 7 == 0:\n        d[i] = i\n\nprint(d) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def solve_8_puzzle(initial_state): \n  \n    # Create goal state \n    goal_state = [1, 2, 3, 8, 0, 4, 7, 6, 5] \n  \n    # Dictionary to maintain visited states \n    visited_states = {} \n  \n    state_list = [] \n    state_list.append(initial_state) \n    visited_states[tuple(initial_state)] = True\n  \n    # Create the nodes that need to be traversed \n    while len(state_list) > 0: \n        curr_state = state_list.pop(0) \n          \n        # If the goal is reached \n        if curr_state == goal_state: \n            return curr_state \n          \n        else: \n            blank_position = curr_state.index(0) \n  \n            # Move up \n            if blank_position <= 5: \n                new_blank_position = blank_position + 3 \n                new_state = list(curr_state) \n                new_state[blank_position], new_state[new_blank_position] = new_state[new_blank_position], new_state[blank_position] \n                if tuple(new_state) not in visited_states: \n                    state_list.append(new_state) \n                    visited_states[tuple(new_state)] = True \n  \n            # Move Down \n            if blank_position >= 3: \n                new_blank_position = blank_position - 3 \n                new_state = list(curr_state) \n                new_state[blank_position], new_state[new_blank_position] = new_state[new_blank_position], new_state[blank_position] \n                if tuple(new_state) not in visited_states: \n                    state_list.append(new_state) \n                    visited_states[tuple(new_state)] = True\n  \n            # Move Left \n            if blank_position not in [0 , 3, 6]: \n                new_blank_position = blank_position - 1 \n                new_state = list(curr_state) \n                new_state[blank_position], new_state[new_blank_position] = new_state[new_blank_position], new_state[blank_position] \n                if tuple(new_state) not in visited_states: \n                    state_list.append(new_state) \n                    visited_states[tuple(new_state)] = True \n  \n            # Move Right \n            if blank_position not in [2, 5, 8]: \n                new_blank_position = blank_position + 1 \n                new_state = list(curr_state) \n                new_state[blank_position], new_state[new_blank_position] = new_state[new_blank_position], new_state[blank_position] \n                if tuple(new_state) not in visited_states: \n                    state_list.append(new_state) \n                    visited_states[tuple(new_state)] = True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maxSubArraySum(arr, k): \n    n = len(arr) \n    max_sum = 0\n  \n    for i in range(n - k + 1): \n        window_sum = sum(arr[i : k + i]) \n        max_sum = max(max_sum, window_sum) \n  \n    return max_sum\n  \n  \narr = [1, 4, 2, 10, 2, 3, 1, 0, 20] \nk = 4\nprint(maxSubArraySum(arr, k)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseString(string):\n    reversedString = \"\"\n    for i in range(len(string) - 1, -1, -1):\n        reversedString += string[i]\n    return reversedString but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: <div class=\"container\">\n    <div class=\"header\">\n        <!-- Header content goes here -->\n    </div>\n\n    <div class=\"main\">\n        <!-- Main content goes here -->\n    </div>\n\n    <div class=\"footer\">\n        <!-- Footer content goes here -->\n    </div>\n</div>\n#\n13. Instruction: Write a function that joins an array of strings using a given separator.\n13. Input:\n[\"Python\", \"JavaScript\", \"C++\"], \", \"\n13. Output:\ndef joinStrings(arr, sep):\n    return sep.join(arr)\n\nresult = joinStrings([\"Python\", \"JavaScript\", \"C++\"], \", \")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def capitalize_words(string):\n    words = string.split(' ')\n    capitalized_words = [word.capitalize() for word in words]\n    return ' '.join(capitalized_words)\n\nprint(capitalize_words('enter the dragon')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nFetch recent twitter posts from a specific account\n\"\"\"\n\nimport tweepy\n\ndef get_posts(screen_name):\n    consumer_key = '...'\n    consumer_secret = '...'\n    access_key = '...'\n    access_secret = '...'\n\n    # Authenticate to Twitter\n    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n    auth.set_access_token(access_key, access_secret)\n\n    # Create API object\n    api = tweepy.API(auth)\n\n    # Get recent posts\n    posts = api.user_timeline(screen_name=screen_name, count=200)\n    return [post.text for post in posts]\n\nif __name__ == '__main__':\n    # Get recent posts from a sample account\n    posts = get_posts('example')\n    print(posts) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add(num1, num2): \n    while num2 != 0: \n        carry = num1 & num2 \n        num1 = num1 ^ num2 \n        num2 = carry << 1\n    return num1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def hamming_distance(s1, s2):\n    distance = 0\n\n    for char1, char2 in zip(s1, s2):\n        if char1 != char2:\n            distance += 1\n    \n    return distance\n\nresult = hamming_distance(\"abc\", \"acd\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def anagram_permutation(string1, string2):\n    if sorted(string1) == sorted(string2):\n        print(\"The strings are anagrams.\")\n    elif sorted(string1) == sorted(string2[::-1]):\n        print(\"The strings are permutations.\")\n    else:\n        print(\"The strings are neither anagrams nor permutations.\")\n\nanagram_permutation(\"algorithm\", \"logarithm\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # list of numbers \nlist = [3, 5, 9, 10] \n\n# maximum number \nMaxNum = max(list) \n\n# index of the maximum number \nindex = list.index(MaxNum) \n\nprint(\"Maximum number is:\", MaxNum) \nprint(\"Index of maximum number is:\", index) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import spacy \n\nnlp = spacy.load('en_core_web_sm') \n\ncategories = {'animals': [], \n              'fruits': [], \n              'furniture': []} \n\nfor word in words: \n    doc = nlp(word) \n    if doc.ents: \n        label = doc.ents[0].label_\n        if label == 'ANIMAL': \n            categories['animals'].append(word) \n        elif label == 'FRUIT': \n            categories['fruits'].append(word) \n        elif label == 'FURNITURE': \n            categories['furniture'].append(word) \n\nprint(categories) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: timeline = []\n\n# Sort tasks in ascending order of duration\ntasks.sort(key=lambda x: x[\"duration\"])\n\n# Move tasks to timeline\nstart_time = 0\nfor task in tasks:\n    timeline.append({\"name\": task[\"name\"],\n                     \"start_time\": start_time,\n                     \"end_time\": start_time + task[\"duration\"]})\n    start_time = start_time + task[\"duration\"]\n\n# Print the timeline\nfor task in timeline:\n    print(\"{}: [{},{}]\".format(task[\"name\"], task[\"start_time\"], task[\"end_time\"])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password(length):\n    chars = string.ascii_lowercase + string.ascii_uppercase + string.digits\n    return ''.join(random.choice(chars) for _ in range(length))\n\ngenerate_password(10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import flask\n\napp = flask.Flask(__name__)\n\nquestions = {\n 'level_1': [\n {\"question\": \"What color is the sky?\",\n \"answers\" : [\"blue\", \"red\", \"green\"],\n \"correct\" : \"blue\"\n },\n {\"question\": \"What color is the grass?\",\n \"answers\" : [\"blue\", \"red\", \"green\"],\n \"correct\" : \"green\"\n }\n ],\n 'level_2': [\n {\"question\": \"What is the capital of France?\",\n \"answers\" : [\"London\", \"Paris\", \"Rome\"],\n \"correct\" : \"Paris\"\n },\n {\"question\": \"What is the capital of Germany?\",\n \"answers\" : [\"Berlin\", \"Hamburg\", \"Munich\"],\n \"correct\" : \"Berlin\"\n }\n ],\n 'level_3': [\n {\"question\": \"What is the third largest country by area?\",\n \"answers\" : [\"China\", \"Russia\", \"United States\"],\n \"correct\" : \"United States\"\n },\n {\"question\": \"What is the fifth largest country by population?\",\n \"answers\" : [\"Brazil\", \"Germany\", \"Japan\"],\n \"correct\" : \"Brazil\"\n }\n ]\n}\n\n@app.route('/api/quiz', methods=['GET', 'POST', 'PUT'])\ndef handle_requests():\n if request.method == \"GET\":\n # Return a list of all questions\n return questions\n \n elif request.method == \"POST\":\n # Add a new question\n return \"Successfully added question\"\n \n elif request.method == \"PUT\":\n # Update an existing question\n return \"Updated question\"\n\nif __name__ == '__main__':\n app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, json\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_marshmallow import Marshmallow\n\n# init Flask\napp = Flask(__name__)\n\n# Database init\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\n\n# Marshmallow init\nma = Marshmallow(app)\n\n# Create MenuItem model\nclass MenuItem(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(100))\n description = db.Column(db.String(200))\n \n def __init__(self, name, description):\n self.name = name\n self.description = description\n\n# Create MenuItemSchema\nclass MenuItemSchema(ma.Schema):\n class Meta:\n   fields = ('id', 'name', 'description')\n\n# Init Schema\nmenu_item_schema = MenuItemSchema()\nmenu_items_schema = MenuItemSchema(many=True)\n\n# Create endpoints\n@app.route('/menu_items/create')\ndef create_menu_item():\n name = request.json['name']\n description = request.json['description']\n \n new_menu_item = User(name, description)\n \n db.session.add(new_menu_item)\n db.session.commit()\n \n return menu_item_schema.jsonify(new_menu_item)\n\n@app.route('/menu_items/<id>/update', methods=['PUT'])\ndef update_menu_item(id):\n menu_item = MenuItem.query.get(id)\n \n name = request.json['name']\n description = request.json['description']\n \n menu_item.name = name\n menu_item.description = description\n \n db.session.commit()\n \n return menu_item_schema.jsonify(menu_item)\n\n@app.route('/menu_items/<id>/delete', methods=['DELETE'])\ndef delete_menu_item(id):\n menu_item = MenuItem.query.get(id)\n \n db.session.delete(menu_item)\n db.session.commit()\n \n return json.dumps({'success': True})\n\n# Run the app\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort(arr): \n  for i in range(len(arr)): \n    minIdx = i \n    for j in range(i+1, len(arr)): \n      if arr[minIdx] > arr[j]: \n        minIdx = j       \n    arr[i], arr[minIdx] = arr[minIdx], arr[i]\n  return arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\n# Imports\nimport sys\n\n# Constants\nMARKDOWN_EXTENSION = \".md\"\n\n# Helper Fuctions\ndef convert_to_markdown(text):\n    \"\"\"\n    Converts plain text to markdown format\n    \"\"\"\n    return text\n\ndef write_to_file(filename, text):\n    \"\"\"\n    Writes text to a file\n    \"\"\"\n    with open(filename + MARKDOWN_EXTENSION, \"w\") as f:\n        f.write(text + \"\\n\")\n\n# Main Function\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Read input from user\n    text = input(\"Please enter the text you would like to convert to Markdown: \")\n    filename = input(\"Please enter a file name: \")\n\n    # Convert text to markdown\n    markdown = convert_to_markdown(text)\n        \n    # Write to file\n    write_to_file(filename, markdown)\n\n# Main Execution\nif __name__ == \"__main__\":\n    main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: O(2^n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\nnumbers = [2, 3, 4, 5]\n\nfor number in numbers:\n print(math.sqrt(number))\n\n# Output\n# 1.414\n# 1.732\n# 2.000\n# 2.236 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def decToBin(num):\n    if num > 1:\n        decToBin(num//2) \n    print(num % 2,end = '')\n  \n# Driver code to test above\nif __name__ == '__main__': \n    num = 25\n    decToBin(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import base64\n\ndef encode(s):\n    encoded = base64.b64encode(s.encode('utf-8'))\n    return encoded.decode('utf-8')\n\ndef decode(s):\n    decoded = base64.b64decode(s.encode('utf-8'))\n    return decoded.decode('utf-8') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import http.server\nimport socketserver\n\nPORT = 8000\n\nHandler = http.server.SimpleHTTPRequestHandler\n\nhttpd = socketserver.TCPServer((\"\", PORT), Handler)\n\nprint(\"Serving at port\", PORT)\nhttpd.serve_forever() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to convert an \n# array to linked list  \n  \n# Node class  \nclass Node: \n  \n    # Function to initialize the node object \n    def __init__(self, data): \n        self.data = data # Assign data \n        self.next = None # Initialize next as null \n  \n# Linked List class contains a Node \n# object \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n  \n    # This functions inserts a new node \n    # at the beginning of Linked List \n    def push(self, new_data): \n  \n        # 1. Allocates node \n        # 2. Put the data in it \n        new_node = Node(new_data) \n  \n        # 3. Make next of new node as head \n        new_node.next = self.head \n  \n        # 4. Move the head to point to new Node \n        self.head = new_node \n  \n    # Utility function to print the linked LinkedList \n    def printList(self): \n        temp = self.head \n        while(temp): \n            print (temp.data) \n            temp = temp.next\n  \n# Code execution \nif __name__=='__main__': \n  \n    # Start with empty list \n    llist = LinkedList() \n  \n    # Insert 6. So linked list becomes 6->None \n    arr = [1, 4, 9, 6, 5, 11]\n    for x in arr:\n        llist.push(x) \n        \n    # Print the linked list \n    llist.printList() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_total(shopping_cart):\n total = 0\n for item in shopping_cart:\n  total += item['price'] * item['quantity']\n return total\n\nshopping_cart = [{'name': 'apple', 'price': 0.99, 'quantity': 3}, \n{'name': 'banana', 'price': 1.25, 'quantity': 4},\n{'name': 'pear', 'price': 0.50, 'quantity': 1}]\n\ntotal = calculate_total(shopping_cart)\nprint(total) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def swap(list, i, j):\n  temp = list[i]\n  list[i] = list[j]\n  list[j] = temp\n\ndef permutations(list, n):\n  for i in range(0, n-1):\n    j = i + 1\n    while j < n:\n      swap(list,i,j)\n      j = j + 1\n\nlist = [10, 11, 12]\nn = len(list)\npermutations(list, n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: dictionary = {\"key\": \"value\"}\nvalue = dictionary[\"key\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from datetime import datetime\n\ndef find_difference_in_days(date1, date2):\n    date1 = datetime.strptime(date1, '%Y-%m-%d')\n    date2 = datetime.strptime(date2, '%Y-%m-%d')\n    return abs((date2 - date1).days) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.naive_bayes import GaussianNB\n\n#define the labels\nlabels = {'fraud': 0, 'not fraud': 1}\n\n#defining the training data and the labels\ntrain_data = [[1, 'high credit', 'low age', 'high spending'],\n              [1, 'low credit', 'low age', 'low spending'],\n              [0, 'low credit', 'low age', 'high spending'],\n              [1, 'low credit', 'low age', 'low spending'],\n              [0, 'low credit', 'low age', 'low spending'],\n              [1, 'low credit', 'low age', 'low spending'],\n              [0, 'low credit', 'low age', 'low spending'],\n              ]\ntrain_labels = [0, 1, 0, 1, 0, 1, 0]\n\n#fitting the classifier\nclf = GaussianNB()\nclf.fit(train_data, train_labels)\n\n#prediction\nfeatures = ['high credit' , 'low age' , 'high spending']\nlabel = clf.predict([features])\n\nif label == labels['fraud']:\n    print('Target user is a fraud')\nelse:\n    print('Target user is not a fraud') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def median(a, b, c): \n    if (a <= b <= c) or (c <= b <= a): \n        median = b \n    elif (b <= a <= c) or (c <= a <= b): \n        median = a \n    else: \n        median = c \n  \n    return median but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Load Packages\nimport nltk\nfrom nltk.chat.util import Chat, reflections\n\n# Set up the conversation\nreflection_map = {\n \"hello\": \"Hi there!\",\n \"hi\": \"Hello!\"\n}\n\ncref = reflections.keys()\nChat = Chat(reflection_map, cref)\n\n# Start the conversation\nChat.converse() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_ones(binary_string):\n    count = 0\n    for bit in binary_string:\n        if bit == '1':\n            count += 1\n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Python but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef create_random_number_list(length, lower_bound, upper_bound):\n    output_list = []\n    for i in range(length):\n        output_list.append(random.randint(lower_bound, upper_bound))\n    return output_list\n\nlength = 10\nlower_bound = 0\nupper_bound = 1000\n\nresult = create_random_number_list(length, lower_bound, upper_bound)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\nimport virtualenv\n\n# Create a virtual environment\nvirtualenv_dir = virtualenv.create_environment()\n\n# Activate the virtual environment\nvirtualenv.activate_environment(virtualenv_dir)\n\n# Install package\nvirtualenv.install_package('mypackage', virtualenv_dir) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_linked_list(head):\n\n    prev = None\n    curr = head\n    next = None\n    \n    while curr is not None:\n        next = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next\n\n    head = prev\n    return head but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n    def __init__(self, data):\n        self.left = None\n        self.right = None\n        self.data = data\n\ndef createTree(elements): \n    root = Node(elements[0]) \n    for i in range(1, len(elements)): \n        insert(root, elements[i])\n    return root \n  \ndef insert(root, data): \n    if root.data < data: \n        if root.right is None: \n            root.right = Node(data) \n        else: \n            insert(root.right, data) \n    else: \n        if root.left is None: \n            root.left = Node(data) \n        else: \n            insert(root.left, data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import cmath\n\n# define two operations to add and subtract complex numbers\ndef add_complex(num1, num2): \n    return num1+num2\n\ndef sub_complex(num1,num2): \n    return num1-num2\n\n# add two complex numbers \nnum1 = complex(5, 7) \nnum2 = complex(3, 4) \nprint(\"Addition of two complex numbers : \", \nadd_complex(num1, num2))\n\n# subtract two complex numbers\nnum1 = complex(5, 7) \nnum2 = complex(3, 4) \nprint(\"Subtraction of two complex numbers : \", \nsub_complex(num1, num2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Codec:\n    def serialize(self, root):\n        def _serialize(node):\n            if not node:\n                return '#'\n            return str(node.val) + ',' + _serialize(node.left) + ',' + _serialize(node.right)\n        return _serialize(root)\n    \n    def deserialize(self, data):\n        def _deserialize(nums):\n            val = nums.pop(0)\n            if val == '#':\n                return None\n            node = TreeNode(val)\n            node.left = _deserialize(nums)\n            node.right = _deserialize(nums)\n            return node\n        return _deserialize(data.split(',')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def median(arr): \n n = len(arr) \n arr.sort() \n\n # check for even case \n if n % 2 == 0: \n return (arr[int((n - 1)/2)] +\n arr[int(n/2)]) / 2\n\nelse: \n return arr[int(n/2)] \n\n# test\narr = [1, 2, 3, 4, 5] \nprint(\"Median =\", median(arr)) \n\n# Output: Median = 3.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def capitalize_string(text, string_to_find):\n    index = text.find(string_to_find)\n    if index != -1:\n        capitalized_string = text[:index] + string_to_find.upper() + text[index+len(string_to_find):]\n        return capitalized_string\n    else:\n        return text\n\nsentence = \"I love the world\"\nstring_to_find = \"world\"\nprint(capitalize_string(sentence, string_to_find)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_random_array(m, n):\n    array = [[random.random() for i in range(m)] for j in range(n)]\n    return array but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_value(json_string, field):\n    json_dict = json.loads(json_string)\n    return json_dict[field] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiplication_table(n):\n for i in range(1, n+1):\n   for j in range(1, n+1):\n     print(str(i*j).rjust(4), end=\" \")\n   print()\n\nmultiplication_table(5)\n\n# Output:\n 1   2   3   4   5\n 2   4   6   8  10\n 3   6   9  12  15\n 4   8  12  16  20\n 5  10  15  20  25 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: even_numbers = [num for num in range(0, 31) if num % 2 == 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factor_of(n):\n    result = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            result.append(i)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mean(list):\n total = 0\n for num in list:\n total+=num\n return total/len(list)\n\nlist = [1,2,3,4,5]\nmean = mean(list)\nprint(mean) # prints 3.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_arr(arr):\n    for i in range(len(arr)): \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j\n\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\n\nresult = sort_arr([5, 3, 1, 4, 2])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to print first 10 prime numbers\n\n# Method 1 \ndef first10PrimeNumbers():   \t\t\n    for num in range(2, 12): \n  \n           # if number is divisible by any number  \n           # between 2 and one less than it, it is not prime\n        for i in range(2, num): \n            if num % i == 0: \n                break\n        else: \n            print(num) \n\n# Driver Code\nif __name__ == \"__main__\":\n    first10PrimeNumbers() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n \n# specify the URL to scrape\nurl = 'https://example.com'\n \n# make a request to request the page\nrequest = requests.get(url)\n \n# Parse the page using beautifulsoup\nsoup = BeautifulSoup(request.text, 'lxml')\n \n# Extract the titles and URLs\ntitles = [title.text for title in soup.find_all('h2')]\nurls = [url['href'] for url in soup.find_all('a', href=True)]\n \n# Print the results\nfor title, url in zip(titles, urls):\n    print(title, '->', url) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\nX = np.array(X)\nY = np.array(Y)\n\nb = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(Y)\n\n#Print the parameters\nprint(\"Parameters: \", b)\n\n#Make predictions\nx_new = [[1, 2, 3]]\ny_pred = np.dot(x_new, b)\nprint(\"Predicted output: \", y_pred) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findWords(string):\n    results = []\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            results.append(string[i:j])\n    return results\n\nstring = \"abcd\"\nprint(findWords(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_median(numbers):\n    \"\"\"\n    Calculates the median of a list of numbers.\n    Args:\n        numbers: a list of numbers.\n    Returns:\n        median: the median of the list.\n    \"\"\"\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        median = (numbers[length//2 - 1] + numbers[length//2]) / 2\n    else:\n        median = numbers[length//2]\n    return median\n\nnumbers = [2,4,7,10,11]\nmedian = calculate_median(numbers)\nprint(median) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for start in range(10):\n  print(start) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def number_of_vowels(s):\n    count = 0\n    for char in s:\n        if char in 'aeiouAEIOU':\n            count += 1\n    return count\n\ns = 'Hi everyone'\nprint('The number of vowels in the given string is :', number_of_vowels(s)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The most memory efficient way to iterate through a large list of objects in Python is to use an iterator. Iterators are more memory-efficient because they only store a single value at a time and can be used instead of the whole collection, which was held by the list. An iterator is accessed using the iter() function and is used in a for loop to loop through the items in the list.\n\nfor obj in iter(large_list_of_objects):\n    # Do something with the object but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: prime_nos = {11, 13, 17, 19, 23, 29}\n\noutput_dict = {prime_no: prime_no**2 for prime_no in prime_nos}\nprint(output_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class PrimeNumberDetector:\n\n    # Constructor\n    def __init__(self):\n        self.prime_numbers = []\n\n    # Helper method to determine if a number is prime\n    def is_prime(self, n):\n        if n <= 1:\n            return False\n        else:\n            for i in range(2, n):\n                if n % i == 0:\n                    return False\n            return True\n\n    # Searches the prime numbers in a given range\n    def search(self, start, end):\n        self.prime_numbers = []\n        for i in range(start, end + 1):\n            if self.is_prime(i):\n                self.prime_numbers.append(i)\n\n        return self.prime_numbers but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Dictionaries are used in Python to store data in the form of key-value pairs, where each key is associated with a specific value. Dictionaries can be used for a variety of tasks including representing complex data, creating lookup tables, and organizing information. The key-value pairs in a dictionary are mutable, meaning they can be changed at any point in the program. Finally, dictionaries are very efficient in terms of memory space and can be used to store large amounts of data in a relatively small amount of space. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # define a function to take in two numbers\ndef adder(num1, num2):\n    return num1 + num2\n\n# prompt the user to enter the two numbers\nnum1 = float(input(\"Enter number 1: \"))\nnum2 = float(input(\"Enter number 2: \"))\n\n# print the sum of the two numbers\nprint(\"The sum of the two numbers is:\", adder(num1, num2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk \n  \ndef classify_spam(): \n    nltk.download('stopwords') \n  \n    from nltk.corpus import stopwords \n    from nltk.tokenize import word_tokenize \n  \n    data = \"This email is a spam message.\"\n  \n    stop_words = set(stopwords.words('english')) \n    words = word_tokenize(data) \n  \n    words_filtered = [] \n  \n    for w in words: \n        if w not in stop_words: \n            words_filtered.append(w) \n  \n    if 'spam' in words_filtered: \n        print(\"This is a spam email.\")\n    else:\n        print(\"This is a valid email.\")\n  \nif __name__ == \"__main__\": \n    classify_spam() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\nfrom flask import Flask, render_template\n\napp = Flask(__name__)\n\nlibrary = [{'title': 'The Catcher in the Rye', 'isbn': '978-0316769174'},\n           {'title': 'The Hunger Games', 'isbn': '978-0439023528'},\n           {'title': 'The Lord of the Rings', 'isbn': '978-0618640157'}]\n\n@app.route('/')\ndef index():\n    return render_template('index.html', library=library)\n\n@app.route('/book/<isbn>')\ndef book_info(isbn):\n    selected_book = next((book for book in library if book['isbn'] == isbn), None)\n    return render_template('book.html', book=selected_book)\n\nif __name__ == '__main__':\n    app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import hashlib \nclass PasswordStore:\n    def __init__(self, username, password):\n        self.username = username \n        self.encryptedPassword = self._encryptPassword(password)\n    def _encryptPassword(self, password):\n        hashed_password = hashlib.sha512((password + self.username).encode('utf-8')).hexdigest()\n        return hashed_password\n    def authenticate(self, password):\n        return self.encryptedPassword == self._encryptPassword(password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nConvert the following pseudocode into a Python program\n\"\"\"\n\ni = 0\nj = 0\nwhile i < 10:\n    j += i\n    i += 1\n    \nprint(j) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class BinaryTree:\n    def __init__(self, root):\n        self.root = root\n\n\n    def leastCommonAncestor(self, node1, node2):\n        def recurseTree(node):\n            if not node:\n                return False\n\n            left = recurseTree(node.left)\n            right = recurseTree(node.right)\n\n            mid = node == node1 or node == node2\n\n            # If any two of the three flags left, right or mid become True.\n            if mid + left +right >= 2:\n                self.ancestor = node\n\n            # Return True if either left or right or mid becomes True.\n            return mid or left or right\n\n        recurseTree(self.root)\n        return self.ancestor but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_maximum_depth(tree):\n    if tree is None: \n        return 0 \n    else : \n        left_depth = find_maximum_depth(tree.left) \n        right_depth = find_maximum_depth(tree.right) \n        \n        if (left_depth > right_depth): \n            return left_depth+1\n        else: \n            return right_depth+1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def vending_machine():\n    # Variable to store the user's choice\n    choice = '' \n    # List of items available \n    products = {1 : \"Chips\", 2 : \"Chocolate\", 3 : \"Coke\", 4 : \"Sprite\"} \n    # Dictionary to store the price corresponding to each product \n    price = {1 : 40, 2 : 20, 3 : 30, 4 : 30} \n    while choice != \"quit\":\n        # Print the available products\n        print(\"Available products:\")\n        for product in products:\n            print(product, \":\", products[product], \"-\", price[product], \"Rupees\")\n        # Get the user's choice\n        choice = input(\"Enter your choice (1-4): \")\n        if choice.isdigit() == False:\n            print(\"Invalid input.\")\n        elif int(choice) > 0 and int(choice) < 5:\n            print(\"You have purchased\", products[int(choice)] + \".\")\n            print(\"Thank you for shopping with us.\")\n        elif choice == \"quit\":\n            break\n        else:\n            print(\"Invalid input.\")\n\n# Call the function\nvending_machine() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\nfrom urllib.request import urlopen\n\nhtml = urlopen(\"http://www.example.com/\").read().decode('utf-8')\nlinks = re.findall(\"<a href=(.*?)>(.*?)</a>\", html) \n \nfor link in links:\n    print(\"Link: \", link[0])\n    print(\"Text: \", link[1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_odd_index_char(string):\n    \"\"\"\n    Remove the characters of odd index in a given string\n    \"\"\"\n    result = \"\" \n    for i in range(len(string)):\n        if i % 2 == 0:\n            result = result + string[i] \n    return result\n\nif __name__ == '__main__':\n    string = \"welcome\"\n    print(remove_odd_index_char(string)) # wloe but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Variable to store the sum\nsum = 0\n\n# Iterate over all odd numbers in the range\nfor i in range(1, 30, 2):\n    sum += i\n    \n# Print the result\nprint(\"The sum of all odd numbers between 0 and 30: \", sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_conditions():\n    print(\"Hello World\")\n    print(\"Goodbye World\")\n\nprint_conditions() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\nimport requests\n\napi_url = \"https://www.googleapis.com/books/v1/volumes?q=\"\nquery = \"Alice in Wonderland\"\n\n# form the API call URL\nurl = api_url + query\n\n# issue API call\nresponse = requests.get(url)\n\n# parse the API response\nresponse_JSON = json.loads(response.text)\n\n# loop through API response and print the book titles\nfor item in response_JSON[\"items\"]:\n    print(item[\"volumeInfo\"][\"title\"]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of an array of numbers x. \n    \"\"\"\n    # Apply the sigmoid function to every element of x \n    sig = np.vectorize(lambda x: 1/(1 + np.exp(-x)))\n    return sig(x)\n\nprint(sigmoid(5)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse(sentence): \n    words = sentence.split(\" \")   \n    rev_words = words[::-1] \n    rev_sentence =' '.join(rev_words)  \n    return rev_sentence but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #/u/GoldenSights\nimport praw\nimport time\nimport datetime\nimport sqlite3\n\n'''USER CONFIGURATION'''\n\nAPP_ID = \"\"\nAPP_SECRET = \"\"\nAPP_URI = \"\"\nAPP_REFRESH = \"\"\n# https://www.reddit.com/comments/3cm1p8/how_to_make_your_bot_use_oauth2/\nUSERAGENT = \"\"\n#This is a short description of what the bot does. For example \"/u/GoldenSights' Newsletter Bot\"\nSUBREDDIT = \"GoldTesting\"\n#This is the sub or list of subs to scan for new posts. For a single sub, use \"sub1\". For multiple subreddits, use \"sub1+sub2+sub3+...\"\nMAXPOSTS = 30\n#This is how many posts you want to retrieve all at once. PRAW can download 100 at a time.\nWAIT = 20\n#This is how many seconds you will wait between cycles. The bot is completely inactive during this time.\nTSTRING = \"[request]\"\n#This is the part of the title that you want to look for\nDELAY = 172800\n#This is the time limit between a user's posts, IN SECONDS. 1h = 3600 || 12h = 43200 || 24h = 86400 || 144h = 518400\n\n'''All done!'''\n\n\n\nWAITS = str(WAIT)\ntry:\n    import bot\n    USERAGENT = bot.aG\nexcept ImportError:\n    pass\nsql = sqlite3.connect('sql.db')\nprint('Loaded SQL Database')\ncur = sql.cursor()\ncur.execute('CREATE TABLE IF NOT EXISTS users(name TEXT, lastpost TEXT)')\nprint('Loaded Users')\ncur.execute('CREATE TABLE IF NOT EXISTS oldposts(id TEXT)')\nprint('Loaded Oldposts')\nsql.commit()\n\nr = praw.Reddit(USERAGENT)\nr.set_oauth_app_info(APP_ID, APP_SECRET, APP_URI)\nr.refresh_access_information(APP_REFRESH)\n\ndef getTime(bool):\n\ttimeNow = datetime.datetime.now(datetime.timezone.utc)\n\ttimeUnix = timeNow.timestamp()\n\tif bool == False:\n\t\treturn timeNow\n\telse:\n\t\treturn timeUnix\n\ndef scan():\n\tprint('Scanning ' + SUBREDDIT)\n\tsubreddit = r.get_subreddit(SUBREDDIT)\n\tposts = subreddit.get_new(limit=MAXPOSTS)\n\tfor post in posts:\n\t\ttry:\n\t\t\tpauthor = post.author.name\n\t\texcept Exception:\n\t\t\tpauthor = '[deleted]'\n\t\tpid = post.id\n\t\tplink = post.short_link\n\t\tptime = post.created_utc\n\t\tptitle = post.title.lower()\n\t\tif TSTRING.lower() in ptitle:\n\t\t\tcur.execute('SELECT * FROM oldposts WHERE id=?', [pid])\n\t\t\tif not cur.fetchone():\n\t\t\t\tcur.execute('SELECT * FROM users WHERE name=?', [pauthor])\n\t\t\t\tif not cur.fetchone():\n\t\t\t\t\tprint('Found new user: ' + pauthor)\n\t\t\t\t\tcur.execute('INSERT INTO users VALUES(?, ?)', (pauthor, pid))\n\t\t\t\t\tr.send_message(pauthor, 'Welcome to /r/pkmntcgtrades!','Dear ' + pauthor + ',\\n\\n Our bot has determined that this is your first time posting in /r/pkmntcgtrades. Please take the time to read [the guidelines](http://www.reddit.com/r/pkmntcgtrades/wiki/guidelines) to understand how the subreddit works.\\n\\nIf you have any questions, feel free to [message the moderators.](http://www.reddit.com/message/compose?to=%2Fr%2Fpkmntcgtrades) Thanks, and happy trading!', captcha=None)\n\t\t\t\t\tsql.commit()\n\t\t\t\t\tprint('\\t' + pauthor + ' has been added to the database.')\n\t\t\t\t\ttime.sleep(5)\n\t\t\t\telse:\n\t\t\t\t\tcur.execute('SELECT * FROM users WHERE name=?', [pauthor])\n\t\t\t\t\tfetch = cur.fetchone()\n\t\t\t\t\tprint('Found post by known user: ' + pauthor)\n\t\t\t\t\tpreviousid = fetch[1]\n\t\t\t\t\tprevious = r.get_info(thing_id='t3_'+previousid)\n\t\t\t\t\tprevioustime = previous.created_utc\n\t\t\t\t\tif ptime > previoustime:\n\t\t\t\t\t\tcurtime = getTime(True)\n\t\t\t\t\t\tdifference = curtime - previoustime\n\t\t\t\t\t\tif difference >= DELAY:\n\t\t\t\t\t\t\tprint('\\tPost complies with timelimit guidelines. Permitting')\n\t\t\t\t\t\t\tcur.execute('DELETE FROM users WHERE name=?', [pauthor])\n\t\t\t\t\t\t\tcur.execute('INSERT INTO users VALUES(?, ?)', (pauthor, pid))\n\t\t\t\t\t\t\tsql.commit()\n\t\t\t\t\t\t\tprint('\\t' + pauthor + \"'s database info has been reset.\")\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tdifferences = '%.0f' % (DELAY - difference)\n\t\t\t\t\t\t\tprint('\\tPost does not comply with timelimit guidelines. Author must wait ' + differences)\n\t\t\t\t\t\t\tprint('\\t' + pauthor + \"'s database info remains unchanged\")\n\t\t\t\t\t\t\tresponse = post.add_comment('You are posting here too frequently, so your post has been deleted. You may post again in ' + str(datetime.timedelta(seconds=float(differences))))\n\t\t\t\t\t\t\tresponse.distinguish()\n\t\t\t\t\t\t\tpost.remove(spam=False)\n\t\t\t\t\t\t\ttime.sleep(5)\n\t\t\t\tcur.execute('INSERT INTO oldposts VALUES(?)', [pid])\n\t\tsql.commit()\n\n\n\n\nwhile True:\n\ttry:\n\t\tscan()\n\texcept Exception as e:\n\t\tprint('An error has occured:', e)\n\tprint('Running again in ' + WAITS + ' seconds.\\n')\n\ttime.sleep(WAIT)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_elements_matrix(matrix):\n    # Initialize result \n    result = 0\n    # Iterate through the matrix\n    for row in matrix:\n        for col in row: \n            result += col \n    # Return the result\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nDesign a Python script to check if a given value is an alphabet or not \n\"\"\"\n\n# function to check if the given value is an alphabet or not\ndef is_alphabet(value):\n    # check if the value is empty\n    if value == '':\n        return False\n\n    # check if the given value is an alphabet\n    if value.isalpha():\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    value = input('Enter a value: ')\n    print(is_alphabet(value)) but is not the same. just give one example and only return the code."}
