{"prompt": "make some code that functions the same as the following code: # create a dictionary\nmy_dict = {\"fruit\": \"apple\", \"color\": \"red\", \"size\": \"medium\"}\n\n# add a fourth item\nmy_dict[\"shape\"] = \"round\"\n\nprint(my_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [[\"apple\", \"french fries\"],\n [\"banana\", \"rice\"],\n [\"carrot\", \"salad\"]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\nclass Database: \n def __init__(self, db_name):\n  self.connection = sqlite3.connect(db_name)\n  self.cursor = self.connection.cursor()\n\n def create(self, values):\n  self.cursor.execute('INSERT INTO records VALUES (?, ?)', values)\n  self.connection.commit()\n\n def read(self):\n  self.cursor.execute('SELECT * FROM records')\n  return self.cursor.fetchall()\n\n def update(self, values):\n  self.cursor.execute('UPDATE records SET name = ? WHERE id = ?', values)\n  self.connection.commit()\n\n def delete(self, id):\n  self.cursor.execute('DELETE FROM records WHERE id = ?', (id,))\n  self.connection.commit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isListAscending(listA): \n    return all(listA[i] <= listA[i+1] for i in range(len(listA)-1)) \n\n# Driver code \nlistA = [1, 5, 9, 10] \n# listA = [10, 9, 5, 1] \n\n# Print result \nprint(isListAscending(listA)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nDevelop a python script to scrape and store data from a specified website.\n\"\"\"\n\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\n\n# specify website URL\nurl = '<website url>'\n\n# get page content\npage = requests.get(url).text\n\n# parse the page for data\nsoup = BeautifulSoup(page, 'html.parser')\n\n# find data element in page\ndata_elements = soup.find_all('<data>')\n\n# extract data from element and store in a list\ndata_list = []\nfor elem in data_elements:\n    data_list.append(elem.text)\n\n# create dataframe with data and store in csv file\ndf = pd.DataFrame(data_list)\ndf.to_csv('data.csv') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nSort numbers from a list from lowest to highest\n\"\"\"\n\ndef sort_list(nums): \n    for i in range(len(nums)): \n        min_index = i \n        for j in range(i+1, len(nums)): \n            if nums[min_index] > nums[j]: \n                min_index = j         \n        nums[i], nums[min_index] = nums[min_index], nums[i]\n    return nums\n\nif __name__ == '__main__':\n    nums = [3,1,8,5,2]\n    print(sort_list(nums)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_common_elements(list1, list2):\n  common_elements = []\n  for i in list1: \n    if i in list2: \n        common_elements.append(i) \n  return common_elements but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nnames = [\"Alex\", \"Bob\", \"Charlotte\", \"John\", \"Mike\"]\n\ndef randomly_select_survivor(names):\n    survivor = random.choice(names)\n    print(f\"The randomly selected survivor is: {survivor}\")\n\nrandomly_select_survivor(names) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(input_str):\n    reversed_str = \"\"\n    for i in range(len(input_str)-1,-1,-1):\n        reversed_str += input_str[i]\n    return reversed_str\n\nprint (reverse_string(\"Hello World!\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def containsTwoDistinctChars(string):\n    distinctChars = set()\n    for char in string:\n        distinctChars.add(char)\n    \n    return len(distinctChars) >= 2\n\nprint(containsTwoDistinctChars(\"AbcdABC\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, jsonify, request\nimport sqlite3\n\napp = Flask(__name__)\n\n@app.route('/user', methods=['POST', 'GET'])\ndef user():\n # Connect to the database\n conn = sqlite3.connect('example.db')\n # Create a cursor object\n c = conn.cursor()\n\n if request.method == 'POST':\n # Get the data from the request\n data = request.json.get('data')\n # Insert the data into the database\n c.execute(\"INSERT INTO users (data) VALUES (?)\", [data])\n # Commit the changes to the database\n conn.commit()\n\n # Get the user data from the database\n c.execute(\"SELECT * FROM users WHERE id=last_insert_rowid()\")\n # Fetch the first row\n row = c.fetchone()\n # Close the connection\n conn.close()\n # Return the user data as JSON\n return jsonify({'data': row[0]})\n\n if request.method == 'GET':\n # Get the user data from the database\n c.execute(\"SELECT * FROM users\")\n # Fetch all the rows\n rows = c.fetchall()\n # Close the connection\n conn.close()\n # Return the user data as JSON\n return jsonify([{'data': row[0]} for row in rows])\n\nif __name__ == '__main__':\n app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(nums): \n    # Sort list in ascending order\n    nums.sort()\n    \n    # Print out the sorted list\n    for num in nums: \n        print(num) \n  \n# Test the function\nnums = [3, 2, 5, 7, 1, 4]\nsort_list(nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask \n\napp = Flask(__name__) \n  \n@app.route('/') \ndef home(): \n    return 'Welcome!'\n  \nif __name__ == '__main__': \n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: JavaScript:\n\nfunction gcd(a, b) {\n if (b === 0) return a;\n return gcd(b, a % b);\n}\n\nconsole.log(gcd(24,18)) // 6\n\nPython:\n\ndef gcd(a, b): \n if(b == 0): \n return a\n else: \n return gcd(b, a%b) \n\nprint(gcd(24,18)) # 6 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(a, b, c):\n    if a > b and a > c:\n        max_num = a\n    elif b > a and b > c:\n        max_num = b\n    else:\n        max_num = c\n \n    return max_num\n \n max_number = find_max(7, 5, 9)\n \n print(\"The maximum of three numbers is:\", max_number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def celsius_to_fahrenheit(celsius):\n    return celsius * 9 / 5 + 32 \n\ndef fahrenheit_to_celsius(fahrenheit):\n    return (fahrenheit - 32) * 5 / 9 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: groceries = {'apple': 3.99, 'banana': 2.99, 'milk': 5.99, 'bread': 3.50}\n\ndef total_cost(groceries):\n  total = 0.0\n  for key in groceries:\n    total += groceries[key]\n  return total\n\ntotal_cost = total_cost(groceries)\nprint(f'The total cost of all groceries is ${total_cost}.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node: \n    def __init__(self, data): \n        self.data = data  \n        self.next = None \n  \nclass LinkedList: \n    def __init__(self):  \n        self.head = None\n  \n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head  \n        self.head = new_node  \n  \n    def print_list(self): \n        temp = self.head  \n        while (temp): \n            print (temp.data) \n            temp = temp.next\n  \n # Driver code \nllist = LinkedList() \nllist.push(1) \nllist.push(3) \nllist.push(11) \nllist.push(5) \nllist.push(9) \n  \nllist.print_list() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def letterToNumber(input_string):\n    result_string = \"\"\n    for letter in input_string:\n        result_string += str(ord(letter)-64)\n    return result_string\n\ninput_string  = \"Data Science\"\nsubstituted_string = letterToNumber(input_string)\nprint(\"Substituted string : \",substituted_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # This file is part of Shuup.\n#\n# Copyright (c) 2012-2017, Shoop Commerce Ltd. All rights reserved.\n#\n# This source code is licensed under the OSL-3.0 license found in the\n# LICENSE file in the root directory of this source tree.\nimport random\nimport string\n\nfrom django.conf import settings\nfrom django.core.exceptions import ValidationError\nfrom django.db import models\nfrom django.db.models import Q\nfrom django.utils.encoding import force_text, python_2_unicode_compatible\nfrom django.utils.timezone import now\nfrom django.utils.translation import ugettext_lazy as _\nfrom enumfields import Enum\nfrom parler.models import TranslatableModel, TranslatedFields\n\nfrom shuup.campaigns.consts import (\n    CAMPAIGNS_CACHE_NAMESPACE, CATALOG_FILTER_CACHE_NAMESPACE,\n    CONTEXT_CONDITION_CACHE_NAMESPACE\n)\nfrom shuup.campaigns.models.basket_conditions import (\n    CategoryProductsBasketCondition, ProductsInBasketCondition\n)\nfrom shuup.campaigns.utils.campaigns import get_product_ids_and_quantities\nfrom shuup.campaigns.utils.matcher import get_matching_for_product\nfrom shuup.core import cache\nfrom shuup.core.fields import InternalIdentifierField\nfrom shuup.core.models import Category, Order, Shop\nfrom shuup.core.utils import context_cache\nfrom shuup.utils.analog import define_log_model\nfrom shuup.utils.properties import MoneyPropped\n\n\nclass CampaignType(Enum):\n    CATALOG = 1\n    BASKET = 2\n\n\nclass CampaignQueryset(models.QuerySet):\n    def available(self, shop=None):\n        query = Q(\n            Q(active=True) &\n            (Q(start_datetime__isnull=True) | Q(start_datetime__lte=now())) &\n            (Q(end_datetime__isnull=True) | Q(end_datetime__gte=now()))\n        )\n        if shop:\n            query &= Q(shop=shop)\n        return self.filter(query)\n\n\nclass Campaign(MoneyPropped, TranslatableModel):\n    admin_url_suffix = None\n\n    shop = models.ForeignKey(Shop, verbose_name=_(\"shop\"), help_text=_(\"The shop where the campaign is active.\"))\n    name = models.CharField(max_length=120, verbose_name=_(\"name\"), help_text=_(\"The name for this campaign.\"))\n\n    # translations in subclass\n    identifier = InternalIdentifierField(unique=True)\n\n    active = models.BooleanField(default=False, verbose_name=_(\"active\"), help_text=_(\n        \"Check this if the campaign is currently active. Please also set a start and end date.\"\n    ))\n    start_datetime = models.DateTimeField(null=True, blank=True, verbose_name=_(\"start date and time\"), help_text=_(\n        \"The date and time the campaign starts. This is only applicable if the campaign is marked as active.\"\n    ))\n    end_datetime = models.DateTimeField(null=True, blank=True, verbose_name=_(\"end date and time\"), help_text=_(\n        \"The date and time the campaign ends. This is only applicable if the campaign is marked as active.\"\n    ))\n    created_by = models.ForeignKey(\n        settings.AUTH_USER_MODEL, blank=True, null=True,\n        related_name=\"+\", on_delete=models.SET_NULL,\n        verbose_name=_(\"created by\"))\n    modified_by = models.ForeignKey(\n        settings.AUTH_USER_MODEL, blank=True, null=True,\n        related_name=\"+\", on_delete=models.SET_NULL,\n        verbose_name=_(\"modified by\"))\n    created_on = models.DateTimeField(auto_now_add=True, editable=False, verbose_name=_(\"created on\"))\n    modified_on = models.DateTimeField(auto_now=True, editable=False, verbose_name=_(\"modified on\"))\n\n    objects = CampaignQueryset.as_manager()\n\n    class Meta:\n        abstract = True\n        verbose_name = _('Campaign')\n        verbose_name_plural = _('Campaigns')\n\n    def save(self, *args, **kwargs):\n        super(Campaign, self).save(*args, **kwargs)\n        cache.bump_version(CAMPAIGNS_CACHE_NAMESPACE)\n        cache.bump_version(CONTEXT_CONDITION_CACHE_NAMESPACE)\n        cache.bump_version(CATALOG_FILTER_CACHE_NAMESPACE)\n\n    def is_available(self):\n        if not self.active:  # move to manager?\n            return False\n        if self.start_datetime and self.end_datetime:\n            if self.start_datetime <= now() <= self.end_datetime:\n                return True\n            return False\n        elif self.start_datetime and not self.end_datetime:\n            if self.start_datetime > now():\n                return False\n        elif not self.start_datetime and self.end_datetime:\n            if self.end_datetime < now():\n                return False\n        return True\n\n    @property\n    def type(self):\n        return CampaignType.BASKET if isinstance(self, BasketCampaign) else CampaignType.CATALOG\n\n\nclass CatalogCampaign(Campaign):\n    _queryset = None\n\n    admin_url_suffix = \"catalog_campaign\"\n    conditions = models.ManyToManyField('ContextCondition', blank=True, related_name='campaign')\n    filters = models.ManyToManyField('CatalogFilter', blank=True, related_name='campaign')\n\n    translations = TranslatedFields(public_name=models.CharField(max_length=120, blank=True, help_text=_(\n        \"The campaign name to show in the store front.\"\n    )))\n\n    def __str__(self):\n        return force_text(_(\"Catalog Campaign: %(name)s\" % dict(name=self.name)))\n\n    def save(self, *args, **kwargs):\n        super(CatalogCampaign, self).save(*args, **kwargs)\n        self.filters.update(active=self.active)\n        for f in self.filters.all():\n            for matching_product in f.get_matching_shop_products():\n                context_cache.bump_cache_for_shop_product(matching_product)\n        self.conditions.update(active=self.active)\n\n    def rules_match(self, context, shop_product, matching_catalog_filters, matching_context_conditions):\n        if not self.is_available():\n            return False\n\n        # If rule has filters, all of them has to match\n        for filter_pk in self.filters.values_list(\"pk\", flat=True):\n            if filter_pk not in matching_catalog_filters:\n                return False\n\n        # All filters match so let's check that also all the conditions match\n        for condition_pk in self.conditions.values_list(\"pk\", flat=True):\n            if condition_pk not in matching_context_conditions:\n                return False\n        return True\n\n    @classmethod\n    def get_for_product(cls, shop_product):\n        matching_filters = get_matching_for_product(shop_product, provide_category=\"campaign_catalog_filter\")\n        matching_conditions = get_matching_for_product(shop_product, provide_category=\"campaign_context_condition\")\n        query_filter = Q(Q(filters__in=matching_filters) | Q(conditions__in=matching_conditions))\n        return cls.objects.available(shop=shop_product.shop).filter(query_filter).distinct()\n\n    @classmethod\n    def get_matching(cls, context, shop_product):\n        prod_ctx_cache_elements = dict(\n            customer=context.customer.pk or 0,\n            shop=context.shop.pk,\n            product_id=shop_product.pk)\n        namespace = CAMPAIGNS_CACHE_NAMESPACE\n        key = \"%s:%s\" % (namespace, hash(frozenset(prod_ctx_cache_elements.items())))\n        cached_matching = cache.get(key, None)\n        if cached_matching is not None:\n            return cached_matching\n\n        from shuup.campaigns.models.matching import get_matching_context_conditions, get_matching_catalog_filters\n        matching_context_conditions = get_matching_context_conditions(context)\n        matching_catalog_filters = get_matching_catalog_filters(shop_product)\n\n        if not (matching_context_conditions or matching_catalog_filters):\n            return []\n\n        # Get all possible campaign id's for matching context_conditions\n        campaigns_based_on_conditions = set(\n            cls.objects.filter(\n                active=True,\n                shop=context.shop,\n                conditions__id__in=matching_context_conditions\n            ).values_list(\"pk\", flat=True)\n        )\n\n        campaigns_based_on_catalog_filters = set()\n        if hasattr(cls, \"filters\"):\n            # Get all possible campaigns for matching catalog_filters\n            campaigns_based_on_catalog_filters = set(\n                cls.objects.filter(\n                    active=True,\n                    shop=context.shop,\n                    filters__id__in=matching_catalog_filters\n                ).values_list(\"pk\", flat=True)\n            )\n\n        all_possible_campaigns_ids = (campaigns_based_on_conditions | campaigns_based_on_catalog_filters)\n        matching = []\n        for campaign in cls.objects.filter(id__in=all_possible_campaigns_ids):\n            if campaign.rules_match(context, shop_product, matching_catalog_filters, matching_context_conditions):\n                matching.append(campaign)\n        cache.set(key, matching, timeout=None)\n        return matching\n\n\nclass BasketCampaign(Campaign):\n    admin_url_suffix = \"basket_campaign\"\n\n    basket_line_text = models.CharField(\n        max_length=120, verbose_name=_(\"basket line text\"), help_text=_(\"This text will be shown in basket.\"))\n\n    conditions = models.ManyToManyField('BasketCondition', blank=True, related_name='campaign')\n    coupon = models.OneToOneField('Coupon', null=True, blank=True, related_name='campaign', verbose_name=_(\"coupon\"))\n\n    translations = TranslatedFields(\n        public_name=models.CharField(max_length=120, verbose_name=_(\"public name\"), help_text=_(\n            \"The campaign name to show in the store front.\"\n        ))\n    )\n\n    def __str__(self):\n        return force_text(_(\"Basket Campaign: %(name)s\" % dict(name=self.name)))\n\n    def save(self, *args, **kwargs):\n        if self.coupon:\n            code_count_for_shop = BasketCampaign.objects.filter(\n                active=True, shop_id=self.shop.id, coupon__code=self.coupon.code)\n            if not self.id and code_count_for_shop.exists():\n                raise ValidationError(_(\"Can not have multiple active campaigns with same code.\"))\n\n            if self.id and code_count_for_shop.exclude(coupon_id=self.coupon.id).exists():\n                raise ValidationError(_(\"Can not have multiple active campaigns with same code.\"))\n\n        super(BasketCampaign, self).save(*args, **kwargs)\n        self.conditions.update(active=self.active)\n\n    @classmethod\n    def get_for_product(cls, shop_product):\n        matching_conditions = get_matching_for_product(\n            shop_product, provide_category=\"campaign_basket_condition\")\n        matching_effects = get_matching_for_product(\n            shop_product, provide_category=\"campaign_basket_discount_effect_form\")\n        matching_line_effects = get_matching_for_product(\n            shop_product, provide_category=\"campaign_basket_line_effect_form\")\n        effects_q = Q(Q(line_effects__id__in=matching_line_effects) | Q(discount_effects__id__in=matching_effects))\n        matching_q = Q(Q(conditions__in=matching_conditions) | effects_q)\n        return cls.objects.available(shop=shop_product.shop).filter(matching_q).distinct()\n\n    @classmethod\n    def get_matching(cls, basket, lines):\n        matching = []\n        exclude_condition_ids = set()\n        product_id_to_qty = get_product_ids_and_quantities(basket)\n\n        # Get ProductsInBasketCondition's that can't match with the basket\n        products_in_basket_conditions_to_check = set(\n            ProductsInBasketCondition.objects.filter(\n                products__id__in=product_id_to_qty.keys()\n            ).values_list(\"id\", flat=True)\n        )\n        exclude_condition_ids |= set(\n            ProductsInBasketCondition.objects.exclude(\n                id__in=products_in_basket_conditions_to_check\n            ).values_list(\"id\", flat=True)\n        )\n\n        # Get CategoryProductsBasketCondition's that can't match with the basket\n        categories = set(Category.objects.filter(\n            shop_products__product_id__in=product_id_to_qty.keys()).values_list(\"id\", flat=True))\n        category_products_in_basket_to_check = set(\n            CategoryProductsBasketCondition.objects.filter(categories__in=categories).values_list(\"id\", flat=True)\n        )\n        exclude_condition_ids |= set(\n            CategoryProductsBasketCondition.objects.exclude(\n                id__in=category_products_in_basket_to_check\n            ).values_list(\"id\", flat=True)\n        )\n\n        queryset = cls.objects.filter(active=True, shop=basket.shop)\n        if exclude_condition_ids:\n            queryset = queryset.exclude(conditions__id__in=exclude_condition_ids)\n        for campaign in queryset.prefetch_related(\"conditions\"):\n            if campaign.rules_match(basket, lines):\n                matching.append(campaign)\n        return matching\n\n    def rules_match(self, basket, lines):\n        \"\"\"\n        Check if basket rules match.\n\n        They will not match if\n        1) The campaign is not active\n        2) The campaign has attached coupon\n           which doesn't match or is not active\n        3) Any of the attached rules doesn't match\n        \"\"\"\n        if not self.is_available():\n            return False\n\n        if self.coupon and not (self.coupon.active and self.coupon.code.upper() in [c.upper() for c in basket.codes]):\n            return False\n\n        for rule in self.conditions.all():\n            if not rule.matches(basket, lines):\n                return False\n        return True\n\n\nclass CouponUsage(models.Model):\n    coupon = models.ForeignKey('Coupon', related_name='usages')\n    order = models.ForeignKey(Order, related_name='coupon_usages')\n\n    created_by = models.ForeignKey(\n        settings.AUTH_USER_MODEL, blank=True, null=True,\n        related_name=\"+\", on_delete=models.SET_NULL,\n        verbose_name=_(\"created by\"))\n    modified_by = models.ForeignKey(\n        settings.AUTH_USER_MODEL, blank=True, null=True,\n        related_name=\"+\", on_delete=models.SET_NULL,\n        verbose_name=_(\"modified by\"))\n\n    created_on = models.DateTimeField(auto_now_add=True, editable=False, verbose_name=_(\"created on\"))\n    modified_on = models.DateTimeField(auto_now=True, editable=False, verbose_name=_(\"modified on\"))\n\n    @classmethod\n    def add_usage(cls, order, coupon):\n        return cls.objects.create(order=order, coupon=coupon)\n\n\n@python_2_unicode_compatible\nclass Coupon(models.Model):\n    admin_url_suffix = \"coupon\"\n    name_field = \"code\"  # TODO: Document me\n    search_fields = [\"code\"]    # used by Select2Multiple to know which fields use to search by\n\n    code = models.CharField(max_length=12)\n\n    usage_limit_customer = models.PositiveIntegerField(\n        blank=True, null=True,\n        verbose_name=_(\"usage limit per customer\"), help_text=_(\"Limit the amount of usages per a single customer.\"))\n    usage_limit = models.PositiveIntegerField(\n        blank=True, null=True,\n        verbose_name=_(\"usage limit\"),\n        help_text=_(\"Set the absolute limit of usages for this coupon. \"\n                    \"If the limit is zero (0) coupon cannot be used.\"))\n\n    active = models.BooleanField(default=False, verbose_name=_(\"is active\"))\n\n    created_by = models.ForeignKey(\n        settings.AUTH_USER_MODEL, blank=True, null=True,\n        related_name=\"+\", on_delete=models.SET_NULL,\n        verbose_name=_(\"created by\"))\n    modified_by = models.ForeignKey(\n        settings.AUTH_USER_MODEL, blank=True, null=True,\n        related_name=\"+\", on_delete=models.SET_NULL,\n        verbose_name=_(\"modified by\"))\n\n    created_on = models.DateTimeField(auto_now_add=True, editable=False, verbose_name=_(\"created on\"))\n    modified_on = models.DateTimeField(auto_now=True, editable=False, verbose_name=_(\"modified on\"))\n\n    def save(self, **kwargs):\n        campaign = BasketCampaign.objects.filter(active=True, coupon_id=self.id).first()\n        if campaign and BasketCampaign.objects.filter(\n                active=True, shop_id=campaign.shop.id, coupon__code=self.code).exclude(id=campaign.id).exists():\n            raise ValidationError(_(\"Can not have multiple active campaigns with same code.\"))\n\n        return super(Coupon, self).save(**kwargs)\n\n    @classmethod\n    def generate_code(cls, length=6):\n        if length > 12:\n            length = 12\n        return ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(length))\n\n    @property\n    def exhausted(self):\n        val = bool(self.usage_limit and self.usages.count() >= self.usage_limit)\n        return val\n\n    @property\n    def attached(self):\n        return BasketCampaign.objects.filter(coupon=self).exists()\n\n    def attach_to_campaign(self, campaign):\n        if not self.attached:\n            self.campaign = campaign\n\n    @classmethod\n    def is_usable(cls, code, customer):\n        try:\n            code = cls.objects.get(code__iexact=code, active=True)\n            return code.can_use_code(customer)\n        except cls.DoesNotExist:\n            return False\n\n    def can_use_code(self, customer):\n        \"\"\"\n        Check if customer can use the code\n\n        :param customer:\n        :type customer: `Contact` or None\n        :rtype: True|False\n        \"\"\"\n        if not self.active:\n            return False\n\n        if not self.attached:\n            return False\n\n        if self.usage_limit_customer:\n            if not customer or customer.is_anonymous:\n                return False\n            if (self.usages.filter(order__customer=customer, coupon=self).count() >= self.usage_limit_customer):\n                return False\n\n        return not self.exhausted\n\n    def use(self, order):\n        return CouponUsage.add_usage(order=order, coupon=self)\n\n    def increase_customer_usage_limit_by(self, amount):\n        if self.usage_limit_customer:\n            new_limit = self.usage_limit_customer + amount\n        else:\n            new_limit = self.usages.count() + amount\n        self.usage_limit_customer = new_limit\n\n    def increase_usage_limit_by(self, amount):\n        self.usage_limit = self.usage_limit + amount if self.usage_limit else (self.usages.count() + amount)\n\n    def has_been_used(self, usage_count=1):\n        \"\"\" See if code is used the times given \"\"\"\n        return CouponUsage.objects.filter(coupon=self).count() >= usage_count\n\n    def __str__(self):\n        return self.code\n\n\nCatalogCampaignLogEntry = define_log_model(CatalogCampaign)\nBasketCampaignLogEntry = define_log_model(BasketCampaign)\nCouponLogEntry = define_log_model(Coupon)\nCouponUsageLogEntry = define_log_model(CouponUsage)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_one = [1, 2, 3]\nlist_two = ['a', 'b', 'c']\n\ndef list_to_dict(list_one, list_two):\n  if len(list_one) != len(list_two):\n    return None\n  d = {}\n  for i in range(len(list_one)):\n    d[list_one[i]] = list_two[i]\n  return d\n  \ndictionary = list_to_dict(list_one, list_two)\nprint(dictionary) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: odd_nums_list = []\n\nfor number in range(1, 26):\n    if number % 2 != 0:\n        odd_nums_list.append(number)\n\nprint(odd_nums_list) # [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n def __init__(self, emp_name, salary):\n  self.emp_name = emp_name\n  self.salary = salary\n  self.next = None\n\nclass LinkedList:\n def __init__(self):\n  self.head = None\n  \n def insert(self, node): \n  if self.head is None:\n   self.head = node\n  else:\n   cur = self.head\n   prev = cur\n   while cur is not None: \n    if node.salary < cur.salary:\n     if prev == cur:\n      node.next = self.head\n      self.head = node\n     else:\n      prev.next = node\n      node.next = cur\n      break\n    else:\n     prev = cur\n     cur = cur.next\n   else: \n    prev.next = node but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: <html>\n<head>\n<title>\nHTML Table\n</title>\n<style type=\"text/css\">\n    table, th, td {\n    border: 1px solid black;\n    }\n</style>\n</head>\n<body>\n\n<table>\n    <tr>\n        <th>Name</th>\n        <th>Age</th>\n        <th>Country</th>\n        <th>Profession</th>\n        <th>Favorite Food</th>\n    </tr>\n    <tr>\n        <td>John</td>\n        <td>30</td>\n        <td>USA</td>\n        <td>Software Engineer</td>\n        <td>Pizza</td>\n    </tr>\n    <tr>\n        <td>James</td>\n        <td>25</td>\n        <td>Australia</td>\n        <td>Data Scientist</td>\n        <td>Pancakes</td>\n    </tr>\n    <tr>\n        <td>Jessica</td>\n        <td>28</td>\n        <td>Canada</td>\n        <td>Software Developer</td>\n        <td>Sushi</td>\n    </tr>\n    <tr>\n        <td>Tina</td>\n        <td>32</td>\n        <td>France</td>\n        <td>Web Developer</td>\n        <td>Tacos</td>\n    </tr>\n    <tr>\n        <td>David</td>\n        <td>20</td>\n        <td>Brazil</td>\n        <td>App Developer</td>\n        <td>Spaghetti</td>\n    </tr>\n    <tr>\n        <td>Bob</td>\n        <td>27</td>\n        <td>Japan</td>\n        <td>Full Stack Developer</td>\n        <td>Ramen</td>\n    </tr>\n    <tr>\n        <td>Caroline</td>\n        <td>29</td>\n        <td>Germany</td>\n        <td>Game Developer</td>\n        <td>Ice Cream</td>\n    </tr>\n     <tr>\n        <td>Karen</td>\n        <td>22</td>\n        <td>India</td>\n        <td>User Interface/Experience Designer</td>\n        <td>Chocolate</td>\n    </tr>\n    <tr>\n        <td>Edward</td>\n        <td>33</td>\n        <td>Singapore</td>\n        <td>Software Architect</td>\n        <td>Burgers</td>\n    </tr>\n    <tr>\n        <td>Steven</td>\n        <td>26</td>\n        <td>China</td>\n        <td>Software Tester</td>\n        <td>Sandwiches</td>\n    </tr> \n</table>\n\n</body>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fib(n):\n if n == 0:\n  return 0\n elif n == 1:\n  return 1\n else:\n  return fib(n-1) + fib(n-2)\n\nnum = 10\nprint(\"The Fibonacci sequence to the \" + str(num) +\"th number is:\")\nfor i in range(num):\n print(fib(i)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(number):\n    if number <= 1:\n        return False\n\n    for i in range(2, number):\n        if number % i == 0:\n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: d = {\"name\": \"John\", \"age\": 45, \"location\": \"San Francisco\"}\nfor key in d:\n d[key] = str(d[key]).upper()\n\nprint(d)\n# Output: {\"name\": \"JOHN\", \"age\": 45, \"location\": \"SAN FRANCISCO\"} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fahrenheit_to_celsius(f):\n    celsius = (f - 32.0) * (5.0/9.0)\n    return celsius\n\nfahrenheit = 98.6\ncelsius = fahrenheit_to_celsius(fahrenheit)\nprint(\"The temperature in celsius is: \", celsius) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_length(list1): \n\treturn max(list1, key=len) \n\nlist1 = ['cat', 'primate', 'monkey']\nprint(\"String with maximum length is : \", max_length(list1)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: // Python\nimport tkinter as tk\nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\nfrom matplotlib.figure import Figure\nimport pandas as pd\n\n# Create the window\nwindow = tk.Tk()\n\n# Read the dataset\ndata = pd.read_csv('data.csv')\n\n# Create the canvas\nfig = Figure(figsize=(5, 5))\nsubplot = fig.add_subplot(111)\nsubplot.plot(data['Date'], data['Average Temperature'])\ncanvas = FigureCanvasTkAgg(fig, master=window)\ncanvas.draw()\n\n# Place the canvas in the window\ncanvas.get_tk_widget().grid(row=0, column=0)\n\n# Enter the application\nwindow.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://en.wikipedia.org/wiki/List_of_countries_by_population\"\n\nr = requests.get(url)\nsoup = BeautifulSoup(r.content, 'html.parser')\ntable = soup.find_all('table', {'class':'wikitable sortable'})[0]\n\ndata = []\nfor row in table.find_all('tr'):\n    data.append([cell.text for cell in row.find_all(['th','td'])]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Use the module 'gensim' for creating the AI system\nimport gensim\n\n# Create a corpus from the two documents\ncorpus = [\n\u2018The cat is an adorable pet.\u2019,\n\u2018Dogs are loyal animals.\u2019\n]\n\n# Create a Document Term Matrix (DTM) using the documents\ndct = gensim.corpora.Dictionary(corpus)\n\n# Get a list of terms from the Dictionary\ndct.token2id\n\n# Create a Document Term Matrix (DTM)\ndtm = [dct.doc2bow(doc) for doc in corpus]\n\n# Create a model and fit it to the DTM\nlsi = gensim.models.lsimodel.LsiModel(dtm, id2word=dct, num_topics=2)\n\n#Compute Similarity\nindex = gensim.similarities.MatrixSimilarity(lsi[dtm])\nlist(enumerate(index))\n\n# Results\n[(0, 0.99999994), (1, 0.017074753)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import py_compile\n\npy_compile.compile('sample.py', cfile='sample.pyc') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python3\n\nimport sys\n\nmaximum = int(sys.argv[1])\n\nprint('Prime numbers up to {}:'.format(maximum))\nprint('----------------------------')\n\nfor num in range(2, maximum+1):\n    prime = True\n    for i in range(2, num):\n        if num % i == 0:\n            prime = False\n            break\n\n    if prime:\n        print(num, end=' ') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def caesar_cipher(text, key):\n    # Create an empty output string\n    output = \"\"\n    \n    # Iterate over the text\n    for char in text:\n        # Check if the character is a letter\n        if char.isalpha():\n            # Shift the character according to the key\n            shifted = chr(ord(char) + key)\n            \n            # Check if the shifted character is still a letter\n            if shifted.isalpha():\n                output += shifted\n            else:\n                # Wrap the character if it goes beyond the alphabet range\n                output += chr(ord(char) - (26 - key))\n        else:\n            # Do not shift non-alphabet characters\n            output += char\n\n    # Return the output string\n    return output but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\narr = np.array([0.1, 0.4, 0.9, 2.2])\n# Applying log transformation\narr = np.log(arr)\n\nprint('After applying log transformation to every element of the array:')\nprint(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply_2_numbers(x, y):\n    product = 0\n    for i in range(y):\n        product += x\n    return product but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_sublist_divisible_by_7(list):\n    for i in range(len(list)):\n        sum_so_far = 0\n        for j in range(i, len(list)):\n            sum_so_far += list[j]\n            if sum_so_far % 7 == 0:\n                return list[i:j+1]\n    return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\nimport argparse, datetime, getpass, os, sys, shutil, traceback\nfrom fabric.api import run, cd, local, get, settings, lcd, put\nfrom fabric_ssh_config import getSSHInfoForHost\nfrom fabric.context_managers import shell_env\nfrom fabric.utils import abort\n\n#Login as user test, but build in a directory by real username\nusername = 'test'\nbuilddir = \"/tmp/\" + getpass.getuser() + \"Kits/buildtemp\"\nversion = \"UNKNOWN\"\nnativelibdir = \"/nativelibs/obj\"  #  ~test/libs/... usually\ndefaultlicensedays = 70 #default trial license length\n\n\n################################################\n# CHECKOUT CODE INTO A TEMP DIR\n################################################\n\ndef checkoutCode(voltdbGit, proGit, rbmqExportGit, gitloc):\n    global buildir\n    # clean out the existing dir\n    run(\"rm -rf \" + builddir)\n    # make the build dir again\n    run(\"mkdir -p \" + builddir)\n    # change to it\n    with cd(builddir):\n        # do the checkouts, collect checkout errors on both community &\n        # pro repos so user gets status on both checkouts\n        message = \"\"\n        run(\"git clone -q %s/voltdb.git\" % gitloc)\n        result = run(\"cd voltdb; git checkout %s\" % voltdbGit, warn_only=True)\n        if result.failed:\n            message = \"VoltDB checkout failed. Missing branch %s.\" % rbmqExportGit\n\n        run(\"git clone -q %s/pro.git\" % gitloc)\n        result = run(\"cd pro; git checkout %s\" % proGit, warn_only=True)\n        if result.failed:\n            message += \"\\nPro checkout failed. Missing branch %s.\" % rbmqExportGit\n\n        #rabbitmq isn't mirrored internally, so don't use gitloc\n        run(\"git clone -q git@github.com:VoltDB/export-rabbitmq.git\")\n        result = run(\"cd export-rabbitmq; git checkout %s\" % rbmqExportGit, warn_only=True)\n        # Probably ok to use master for export-rabbitmq.\n        if result.failed:\n            print \"\\nExport-rabbitmg branch %s checkout failed. Defaulting to master.\" % rbmqExportGit\n\n        if len(message) > 0:\n            abort(message)\n\n        return run(\"cat voltdb/version.txt\").strip()\n\n################################################\n# MAKE A RELEASE DIR\n################################################\n\ndef makeReleaseDir(releaseDir):\n    # handle the case where a release dir exists for this version\n    if os.path.exists(releaseDir):\n        shutil.rmtree(releaseDir)\n    # create a release dir\n    os.makedirs(releaseDir)\n    print \"Created dir: \" + releaseDir\n\n\n################################################\n# BUILD THE COMMUNITY VERSION\n################################################\n\ndef buildCommunity():\n    if build_mac:\n        packageMacLib=\"true\"\n    else:\n        packageMacLib=\"false\"\n    with cd(builddir + \"/voltdb\"):\n        run(\"pwd\")\n        run(\"git status\")\n        run(\"git describe --dirty\")\n        run(\"ant -Djmemcheck=NO_MEMCHECK -Dkitbuild=%s %s clean default dist\" % (packageMacLib,  build_args))\n\n################################################\n# BUILD THE ENTERPRISE VERSION\n################################################\n\ndef buildEnterprise():\n    if build_mac:\n        packageMacLib=\"true\"\n    else:\n        packageMacLib=\"false\"\n    with cd(builddir + \"/pro\"):\n        run(\"pwd\")\n        run(\"git status\")\n        run(\"git describe --dirty\")\n        run(\"VOLTCORE=../voltdb ant -f mmt.xml -Djmemcheck=NO_MEMCHECK -Dallowreplication=true -DallowDrActiveActive=true -Dlicensedays=%d -Dkitbuild=%s %s clean dist.pro\" % (defaultlicensedays, packageMacLib, build_args))\n\n################################################\n# BUILD THE PRO VERSION\n################################################\n\n#\ndef packagePro(version):\n    print \"Making license\"\n    makeTrialLicense(days=defaultlicensedays, dr_and_xdcr=False, nodes=3)\n    print \"Repacking pro kit\"\n    with cd(builddir + \"/pro/obj/pro\"):\n        run(\"mkdir pro_kit_staging\")\n    with cd(builddir + \"/pro/obj/pro/pro_kit_staging\"):\n        run(\"tar xf ../voltdb-ent-%s.tar.gz\" % version)\n        run(\"mv voltdb-ent-%s voltdb-pro-%s\" % (version, version))\n        run(\"cp %s/pro/trial_*.xml voltdb-pro-%s/voltdb/license.xml\" % (builddir, version))\n        run(\"tar cvfz ../voltdb-pro-%s.tar.gz voltdb-pro-%s\" % (version, version))\n\n################################################\n# BUILD THE RABBITMQ EXPORT CONNECTOR\n################################################\n#Build rabbit MQ Exporter\ndef buildRabbitMQExport(version, dist_type):\n    # Paths to the final kit for unpacking/repacking with rmq export\n    paths = {\n        'community': builddir + \"/voltdb/obj/release\",\n        'ent' : builddir + \"/pro/obj/pro/\"\n        }\n    # Untar\n    with cd(paths[dist_type]):\n        run (\"pwd\")\n        run (\"mkdir -p restage\")\n        run (\"tar xf voltdb-%s-%s.tar.gz -C restage\" % (dist_type, version))\n        run (\"rm -f voltdb-%s-%s.tar.gz\" % (dist_type, version))\n\n    # Build RabbitMQ export jar and put it into the untarred kit\n    with cd(builddir + \"/export-rabbitmq\"):\n        run(\"pwd\")\n        run(\"git status\")\n        run(\"git describe --dirty\", warn_only=True)\n        run(\"VOLTDIST=%s/restage/voltdb-%s-%s ant\" % (paths[dist_type], dist_type, version))\n\n    # Retar\n    with cd(paths[dist_type]):\n        run(\"pwd\")\n        run(\"tar -C restage -czf voltdb-%s-%s.tar.gz voltdb-%s-%s\" % (dist_type, version, dist_type, version))\n        run (\"rm -Rf restage\")\n\n################################################\n# MAKE AN ENTERPRISE TRIAL LICENSE\n################################################\n\n# Must be called after buildEnterprise has been done\ndef makeTrialLicense(days=30, dr_and_xdcr=\"true\", nodes=12):\n    with cd(builddir + \"/pro/tools\"):\n        run(\"./make_trial_licenses.pl -t %d -H %d -W %s\" % (days, nodes, dr_and_xdcr ))\n\n################################################\n# MAKE A SHA256 checksum\n################################################\n\ndef makeSHA256SUM(version, type):\n    with cd(builddir + \"/pro/obj/pro\"):\n        kitname=\"voltdb-\" +  type + \"-\" + version\n        run(\"sha256sum -b %s.tar.gz > %s.SHA256SUM\" % (kitname, kitname))\n\n################################################\n# MAKE AN JAR FILES NEEDED TO PUSH TO MAVEN\n################################################\n\ndef makeMavenJars():\n    with cd(builddir + \"/voltdb\"):\n        run(\"VOLTCORE=../voltdb ant -f build-client.xml maven-jars\")\n\n################################################\n# COPY FILES\n################################################\n\ndef copyFilesToReleaseDir(releaseDir, version, type=None):\n    print \"Copying files to releaseDir\"\n    if type:\n        typeString=\"-\" + type\n    else:\n        typeString=\"\"\n    get(\"%s/pro/obj/pro/voltdb%s-%s.tar.gz\" % (builddir, typeString, version),\n        \"%s/voltdb%s-%s.tar.gz\" % (releaseDir, typeString, version))\n    get(\"%s/pro/obj/pro/voltdb%s-%s.SHA256SUM\" % (builddir, typeString, version),\n        \"%s/voltdb%s-%s.SHA256SUM\" % (releaseDir, typeString, version))\n\ndef copyCommunityFilesToReleaseDir(releaseDir, version, operatingsys):\n    get(\"%s/voltdb/obj/release/voltdb-community-%s.tar.gz\" % (builddir, version),\n        \"%s/voltdb-community-%s.tar.gz\" % (releaseDir, version))\n\n    # add stripped symbols\n    if operatingsys == \"LINUX\":\n        os.makedirs(releaseDir + \"/other\")\n        get(\"%s/voltdb/obj/release/voltdb-%s.sym\" % (builddir, version),\n            \"%s/other/%s-voltdb-voltkv-%s.sym\" % (releaseDir, operatingsys, version))\n\ndef copyTrialLicenseToReleaseDir(releaseDir):\n    get(\"%s/pro/trial_*.xml\" % (builddir),\n        \"%s/license.xml\" % (releaseDir))\n\ndef copyMavenJarsToReleaseDir(releaseDir, version):\n    #The .jars and upload file must be in a directory called voltdb - it is the projectname\n    mavenProjectDir = releaseDir + \"/mavenjars/voltdb\"\n    if not os.path.exists(mavenProjectDir):\n        os.makedirs(mavenProjectDir)\n\n    #Get the voltdbclient-n.n.jar from the recently built community build\n    get(\"%s/voltdb/obj/release/dist-client-java/voltdb/voltdbclient-%s.jar\" % (builddir, version),\n        \"%s/voltdbclient-%s.jar\" % (mavenProjectDir, version))\n    #Get the upload.gradle file\n    get(\"%s/voltdb/tools/kit_tools/upload.gradle\" % (builddir),\n        \"%s/upload.gradle\" % (mavenProjectDir))\n    #Get the src and javadoc .jar files\n    get(\"%s/voltdb/obj/release/voltdbclient-%s-javadoc.jar\" % (builddir, version),\n        \"%s/voltdbclient-%s-javadoc.jar\" % (mavenProjectDir, version))\n    get(\"%s/voltdb/obj/release/voltdbclient-%s-sources.jar\" % (builddir, version),\n        \"%s/voltdbclient-%s-sources.jar\" % (mavenProjectDir, version))\n\n################################################\n# CREATE CANDIDATE SYMLINKS\n################################################\n\ndef createCandidateSysmlink(releaseDir):\n    candidateDir =  os.getenv('HOME') + \"/releases/candidate\";\n    local(\"rm -rf \" + candidateDir)\n    local(\"ln -s %s %s\" % (releaseDir, candidateDir))\n\n################################################\n# BACKUP RELEASE DIR\n################################################\n\ndef backupReleaseDir(releaseDir,archiveDir,version):\n    if not os.path.exists(archiveDir):\n        os.makedirs(archiveDir)\n    # make a backup with the timstamp of the  build\n    timestamp = datetime.datetime.now().strftime(\"%y%m%d-%H%M%S\")\n    local(\"tar -czf %s/%s-%s.tgz %s\" \\\n          % (archiveDir, version, timestamp, releaseDir))\n\n################################################\n# REMOVE NATIVE LIBS FROM SHARED DIRECTORY\n################################################\n\ndef rmNativeLibs():\n    # local(\"ls -l ~\" + username + nativelibdir)\n    local(\"rm -rf ~\" + username + nativelibdir)\n\n\n\n################################################\n# GET THE GIT TAGS OR SHAS TO BUILD FROM\n################################################\n\nparser = argparse.ArgumentParser(description = \"Create a full kit. With no args, will do build of master\")\nparser.add_argument('voltdb_sha', nargs=\"?\", default=\"master\", help=\"voltdb repository commit, tag or branch\" )\nparser.add_argument('pro_sha', nargs=\"?\", default=\"master\", help=\"pro repository commit, tag or branch\" )\nparser.add_argument('rabbitmq_sha', nargs=\"?\", default=\"master\", help=\"rabbitmq repository commit, tag or branch\" )\nparser.add_argument('-g','--gitloc', default=\"git@github.com:VoltDB\", help=\"Repository location. For example: /home/github-mirror\")\nparser.add_argument('--nomac', action='store_true', help=\"Don't build Mac OSX\")\nparser.add_argument('--nocommunity', action='store_true', help=\"Don't build community\")\nargs = parser.parse_args()\n\nproTreeish = args.pro_sha\nvoltdbTreeish = args.voltdb_sha\nrbmqExportTreeish = args.rabbitmq_sha\n\nprint args\n\nbuild_community = not args.nocommunity\nbuild_mac = not args.nomac\n\n#If anything is missing we're going to dump this in oneoffs dir.\nbuild_all = build_community and build_mac\nif voltdbTreeish != proTreeish or not build_all:\n    oneOff = True\nelse:\n    oneOff  = False\n\nrmNativeLibs()\n\ntry:\n    build_args = os.environ['VOLTDB_BUILD_ARGS']\nexcept:\n    build_args=\"\"\n\nprint \"Building with pro: %s and voltdb: %s\" % (proTreeish, voltdbTreeish)\n\nbuild_errors=False\n\nversionCentos = \"unknown\"\nversionMac = \"unknown\"\nreleaseDir = \"unknown\"\n\n# get ssh config [key_filename, hostname]\nCentosSSHInfo = getSSHInfoForHost(\"volt15a\")\nMacSSHInfo = getSSHInfoForHost(\"voltmini\")\nUbuntuSSHInfo = getSSHInfoForHost(\"volt12d\")\n\n# build community kit on the mini so that .so can be picked up for unified kit\nif build_mac or build_community:\n    try:\n        with settings(user=username,host_string=MacSSHInfo[1],disable_known_hosts=True,key_filename=MacSSHInfo[0]):\n            versionMac = checkoutCode(voltdbTreeish, proTreeish, rbmqExportTreeish, args.gitloc)\n            buildCommunity()\n    except Exception as e:\n        print traceback.format_exc()\n        print \"Could not build MAC kit. Exception: \" + str(e) + \", Type: \" + str(type(e))\n        build_errors=True\n\n# build kits on 15f\ntry:\n    with settings(user=username,host_string=CentosSSHInfo[1],disable_known_hosts=True,key_filename=CentosSSHInfo[0]):\n        versionCentos = checkoutCode(voltdbTreeish, proTreeish, rbmqExportTreeish, args.gitloc)\n        if build_mac:\n            assert versionCentos == versionMac\n\n        if oneOff:\n            releaseDir = \"%s/releases/one-offs/%s-%s-%s\" % \\\n                (os.getenv('HOME'), versionCentos, voltdbTreeish, proTreeish)\n        else:\n            releaseDir = os.getenv('HOME') + \"/releases/\" + voltdbTreeish\n        makeReleaseDir(releaseDir)\n        print \"VERSION: \" + versionCentos\n        if build_community:\n            buildCommunity()\n            buildRabbitMQExport(versionCentos, \"community\")\n            copyCommunityFilesToReleaseDir(releaseDir, versionCentos, \"LINUX\")\n        buildEnterprise()\n        buildRabbitMQExport(versionCentos, \"ent\")\n        makeSHA256SUM(versionCentos,\"ent\")\n        copyFilesToReleaseDir(releaseDir, versionCentos, \"ent\")\n        packagePro(versionCentos)\n        makeSHA256SUM(versionCentos,\"pro\")\n        copyFilesToReleaseDir(releaseDir, versionCentos, \"pro\")\n        makeTrialLicense()\n        copyTrialLicenseToReleaseDir(releaseDir)\n        makeMavenJars()\n        copyMavenJarsToReleaseDir(releaseDir, versionCentos)\n\nexcept Exception as e:\n    print traceback.format_exc()\n    print \"Could not build LINUX kit. Exception: \" + str(e) + \", Type: \" + str(type(e))\n    build_errors=True\n\nrmNativeLibs()      # cleanup imported native libs so not picked up unexpectedly by other builds\n\nexit (build_errors)\n#archiveDir = os.path.join(os.getenv('HOME'), \"releases\", \"archive\", voltdbTreeish, versionCentos)\n#backupReleaseDir(releaseDir, archiveDir, versionCentos)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(list_num):\n    return list(dict.fromkeys(list_num))\n\nlist_num = [1,2,3,3,2,1,4,5]\nlist_num = remove_duplicates(list_num)\nprint(list_num)  // [1, 2, 3, 4, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def transformations(arr):\n    result = [x*2 for x in arr if x%2 != 0]\n    result = [x-3 for x in result]\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def confidence_voting(predictions):\n classifier_sum = 0\n total_confidence = 0\n for classifier, prediction in predictions.items(): \n     classifier_sum += prediction \n     total_confidence += (classifier_sum * prediction)\n return total_confidence/classifier_sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_max(num1, num2, num3):\n    \"\"\"\n    Finds the largest number among three provided numbers\n    \"\"\"\n    max_num = num1\n    if num2 > max_num:\n        max_num = num2\n    if num3 > max_num:\n        max_num = num3\n    return max_num\n\nnum1 = 2\nnum2 = 5\nnum3 = -1\n\nmaximum = get_max(num1, num2, num3)\nprint(maximum) # 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask\nimport datetime\n\napp = Flask(__name__)\n\n@app.route('/date_time')\ndef get_date_time():\n   return datetime.datetime.now()\n\nif __name__ == '__main__':\n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_divisible_by_3(num):\n if num % 3 == 0:\n return True\n return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\n\ncsv_file = 'data.csv'\n\n# Read CSV file\ndf = pd.read_csv(csv_file)\n\n# Calculate summary statistics\ncount = df.count()\nmean = df.mean()\nstd = df.std()\nmin = df.min()\nmax = df.max()\nquantiles = df.quantile([0.25, 0.5, 0.75])\n\n# Print out summary statistics\nprint('Count: ', count)\nprint('Mean: ', mean)\nprint('Standard Deviation: ', std)\nprint('Minimum: ', min)\nprint('Maximum: ', max)\nprint('Quantiles: ', quantiles) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nurl = f'https://www.productstore.com/ProductID={ProductID}&format=json'\n\nresp = requests.get(url)\ndata = resp.json()\nsales_price = data['salesPrice']\nprint('The sale price of the product is {}'.format(sales_price)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Representing the problem\n# The algorithm is applied to this\ngraph = { \n 'A': ['B', 'C', 'D'], \n 'B': ['A', 'C',  'E'], \n 'C': ['A', 'B', 'D', 'E'], \n 'D': ['A', 'C'], \n 'E': ['B', 'C']\n}\n\ndef findBestRoute(graph):\n  # randomly select starting node \n  currentNode = random.choice(list(graph.keys()))\n \n  # the shortest route needs at least \n  # length = number of nodes in the graph\n  bestRoute = [currentNode] \n  min_length =  len(graph)\n \n  # Loop until length is same as min_length\n  while len(bestRoute) < min_length: \n \n    # Find neighbors of the current node\n    nbrs = graph[currentNode] \n \n    # Find a neighbor \n    # with minimum distance\n    nextNode = None\n    minDist = float('Inf')\n \n    # Check for each neighbor \n    for node in nbrs: \n        if node not in bestRoute: \n            dist = 0\n            for i in range(len(bestRoute)-1): \n                dist += graph[bestRoute[i]][node] \n            if dist < minDist : \n                minDist = dist\n                nextNode = node\n \n    # Append the neighbor to bestRoute \n    bestRoute.append(nextNode) \n    currentNode = nextNode \n   \n  return bestRoute \n  \n# Driver program \nprint(findBestRoute(graph)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, jsonify, request\nimport sqlite3\n\napp = Flask(__name__)\nconn = sqlite3.connect('data.db')\n\n# create the database\nc = conn.cursor()\nc.execute('''\nCREATE TABLE IF NOT EXISTS tasks (\n id integer PRIMARY KEY,\n title text NOT NULL,\n done boolean NOT NULL\n)\n''')\nconn.commit()\n\n# Create a task\n@app.route('/tasks', methods=['POST'])\ndef create_task():\n data = request.get_json()\n c = conn.cursor()\n c.execute('INSERT INTO tasks (title, done) VALUES (?,?)', (data['title'], False))\n conn.commit()\n c.execute('SELECT * FROM tasks WHERE id=?', (c.lastrowid,))\n new_task = c.fetchone()\n return jsonify({'task': new_task}), 201\n\n# Get all tasks\n@app.route('/tasks', methods=['GET'])\ndef get_tasks():\n c = conn.cursor()\n c.execute('SELECT * FROM tasks')\n all_tasks = c.fetchall()\n return jsonify({'tasks': all_tasks}), 200\n\n# Update a task\n@app.route('/tasks/<int:task_id>', methods=['PUT'])\ndef update_task(task_id):\n data = request.get_json()\n c = conn.cursor()\n c.execute('UPDATE tasks SET title=?, done=? WHERE id=?', (data['title'], data['done'], task_id))\n conn.commit()\n c.execute('SELECT * FROM tasks WHERE id=?', (task_id,))\n updated_task = c.fetchone()\n return jsonify({'task': updated_task}), 200\n\n# Delete a task\n@app.route('/tasks/<int:task_id>', methods=['DELETE'])\ndef delete_task(task_id):\n c = conn.cursor()\n c.execute('DELETE FROM tasks WHERE id=?', (task_id,))\n conn.commit()\n return '', 204\n\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longestCommonSubsequence(str1, str2): \n    # find the length of the strings \n    m = len(str1) \n    n = len(str2)\n  \n    # declaring the array for storing the dp values \n    L = [[None]*(n+1) for i in range(m+1)] \n  \n    \"\"\"Following steps build L[m+1][n+1] in bottom up fashion \n    Note: L[i][j] contains length of LCS of str1[0..i-1] \n    and str2[0..j-1]\"\"\"\n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif str1[i-1] == str2[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1])\n    counter = L[m-1][n-1] \n  \n    # Create lcs and return it\n    lcs = [\"\"] * (counter+1) \n    lcs[counter] = \"\" \n  \n    # Start from the right-most-bottom-most corner and \n    # one by one store characters in lcs[] \n    i = m-1\n    j = n-1\n    while i > 0 and j > 0: \n  \n        # If current character in X[] and Y are same, then \n        # current character is part of LCS \n        if str1[i-1] == str2[j-1]: \n            lcs[counter-1] = str1[i-1] \n            i-=1\n            j-=1\n            counter-=1\n  \n        # If not same, then find the larger of two and \n        # go in the direction of larger value \n        elif L[i-1][j] > L[i][j-1]: \n            i-=1\n        else: \n            j-=1\n  \n    return ''.join(lcs)\n  \n# Driver Code \nstr1 = \"ABCD\"\nstr2 = \"BCEA\"\nprint(longestCommonSubsequence(str1, str2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compound_interest(principal, rate, time):\n    return principal * (1 + rate)**time\n\nresult = compound_interest(1000, 0.03, 5)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Initialize the array\narray = [11, 22, 7, 12, 3, 8]\nk = 3\n\n# Randomly select k elements from array\nselected = random.sample(array, k)\n\n# Output the result\nprint(f'Randomly selected {k} elements: {selected}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# Load data\ndf = pd.read_csv('data.csv')\n\n# Split data into train and test sets\nX_train = df.loc[:2000, ['time']].values\ny_train = df.loc[:2000, ['value']].values\nX_test = df.loc[2000:, ['time']].values\ny_test = df.loc[2000:, ['value']].values\n\n# Train model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Predict values\npredictions = model.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: total = 0\nfor num in [1, 4, 9, 16, 25]:\n  total += num\nprint(total) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Read file\nwith open('text_document.txt', 'r') as file:\n    data = file.read()\n\n# Calculate number of words   \nword_count = len(data.split())\n\n# Output\nprint(f\"Number of words: {word_count}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import csv \n\n# initialize dict to store categories\ncategory_totals = {} \n\n# open and process the csv file\nwith open('sales.csv', 'r') as csv_file:\n\n    # create a csv reader object\n    csv_reader = csv.reader(csv_file) \n\n    # skip the headers\n    next(csv_reader) \n    \n    # iterate over each row\n    for row in csv_reader: \n    \n        # pre-calculate product of quantity and price\n        sales_total += int(row[0]) * int(row[1])\n        \n        # record the category totals\n        if row[2] in category_totals.keys(): \n            category_totals[row[2]] += int(row[1])\n        else: \n            category_totals[row[2]] = int(row[1])\n\n# print the results\nprint(\"Total sales:\", sales_total)\nprint(\"Category totals:\")\nfor key in category_totals.keys():\n    print(key, \":\", category_totals[key]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: 3\n2\n1\nBlast off! but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: String str = \"Ruby,Python,JavaScript\";\nList<String> list = Arrays.asList(str.split(\",\"));\n\n// Output \n// [Ruby,Python,JavaScript] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import necessary modules \nimport numpy as np \n  \n# define coefficient and constants \na = np.array([[2, 3], [5, -4]]) \nb = np.array([5, 7]) \n  \n# solve linear equations \nans = np.linalg.solve(a, b) \n  \n# print the solutions \nprint(ans[0], ans[1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\nfrom collections import Counter\n\n# Sample data set\ndata_set = [\"Excited for the new year! #happynewyear\",\n            \"Christmas time is here! #christmastime\",\n            \"Wishing everyone a merry Christmas! #merrychristmas\",\n            \"Coding is so much fun!\"]\n\n# Remove special characters\ndef remove_special_characters(messages):\n    return [re.sub(\"[^A-z\\s]\", \"\", message) for message in messages]\n\n# Get a list of all words\ndef get_words_from_list(messages):\n    return [words.split(\" \") for message in messages for\nwords in message]\n\n# Calculate the frequency of the words\ndef get_frequency_from_words(words):\n    return Counter(words)\n\nwords = get_words_from_list(remove_special_characters(data_set))\nfrequency = get_frequency_from_words(words)\n\n# print the most frequent words\nprint(\"Most frequent words: \", frequency.most_common(3))\n\n# Output\n# Most frequent words: [('a', 2), ('for', 1), ('the', 1)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(10):\n  print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n - 1):\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]: \n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n\n# Driver code to test above\nnumbers = [5, 4, 3, 2, 1]\nbubble_sort(numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findLongestCommonSubsequence(s1, s2): \n    \n    # Initialize L[][] \n    L = [[0 for x in range(len(s2)+1)] \n                for x in range(len(s1)+1)] \n  \n    # Traverse the strings \n    for i in range(len(s1)+1): \n        for j in range(len(s2)+1): \n              \n            # If strings have matching characters \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n                  \n            elif s1[i-1] == s2[j-1]: \n                L[i][j] = L[i-1][j-1] + 1\n                  \n            else: \n                L[i][j] = max(L[i-1][j], \n                               L[i][j-1]) \n  \n    print(\"Length of Longest Common Subsequence is \", \n                              L[len(s1)][len(s2)]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combine_strings(str1, str2):\n return [str1 + str2]\n\ncombined_string = combine_strings(\"Hello \", \"World!\")\nprint(combined_string) # [\"Hello World!\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def non_repeating_character(string):\n    for c in string:\n        if string.count(c) == 1:\n            return c\n    return 'No result'\n\nprint(non_repeating_character('Hello, world!')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\nimport requests\n\ndef get_top_ten_videos():\n    \"\"\"\n    Returns the top ten viewed videos on YouTube as a report.\n    \"\"\"\n\n    # Get the data of the top ten viewed videos on YouTube using the API \n    response = requests.get(\"https://www.googleapis.com/youtube/v3/videos?part=snippet%2C+statistics&chart=mostPopular&maxResults=10&key=api-key\")\n    data = json.loads(response.text)\n\n    # Create string with Youtube video info\n    report = \"Top 10 most viewed YouTube videos this week:\\n\"\n    for item in data['items']:\n       # extract video data\n        title = item['snippet']['title']\n        views = item['statistics']['viewCount']\n        report += '- ' + title + \": \" + views + \" views\\n\" \n\n    return report\n\nif __name__ == '__main__':\n    print(get_top_ten_videos()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nSolve an optimization problem with one constraint\n\"\"\"\n\nimport scipy.optimize as opt\n\ndef minimize_func(x):\n    return (x[0]-1)**2 + (2*x[1]-3)**2\n\ndef constraint_func(x, sign=1):\n    return sign * (x[0] + (2*x[1])-6)\n\ndef solve_optimization():\n    # define constraints \n    constraints = (\n        {'type': 'eq', 'fun': constraint_func},\n    )\n    # set initial values to (0,0) \n    x0 = (0,0)\n    # use BFGS algorithm for optimization \n    solution = opt.minimize(minimize_func, x0, method='SLSQP', constraints=constraints)\n    return solution\n\nif __name__ == \"__main__\":\n    solution = solve_optimization()\n    print(solution.x) # => [3. 2.] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Create a Random Forest Classifier\nclf = RandomForestClassifier(n_estimators=100)\n\n# Train the model using the training sets\nclf.fit(X_train, y_train) \n\n# Predict the response for test dataset\ny_pred = clf.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# Load data\ndata = pd.read_csv('sentiment.csv')\nX = data.text.values\ny = data.target.values\n\n# Split data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Vectorize the data\nvectorizer = CountVectorizer(max_features=5000)\nX_train_vectorized = vectorizer.fit_transform(X_train)\n\n# Create the model\nmodel = LogisticRegression()\nmodel.fit(X_train_vectorized, y_train)\n\n# Evaluate the model\nscores = model.score(vectorizer.transform(X_test), y_test)\nprint('Accuracy:', scores) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # List of student scores\nscores = [72, 84, 85, 90]\n\n# Calculating the average score\ntotal = 0\nfor score in scores:\n total += score\n\naverage = total / len(scores)\n\nprint(\"The average score in the class is {:.2f}\".format(average))\n\n# Output:\n# The average score in the class is 82.50 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def min_max(data):\n    min_val = min(data)\n    max_val = max(data)\n    return min_val, max_val\n \nmin_val, max_val = min_max([-2, 15, 4, 8, 11])\n \nprint('Minimum Value: ', min_val)\nprint('Maximum Value: ', max_val) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(lst):\n  lst.sort(key = lambda x: x[1])\n  return lst but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import logging\nimport os\n\nlogging.basicConfig(filename=os.path.join(os.path.dirname(__file__), 'logs.log'), level=logging.INFO)\n\ndef print_message():\n    message = \"Hello, world!\"\n    logging.info(f'printing message: {message}')\n    print(message)\n\nif __name__ == \"__main__\":\n    logging.info('Starting script!')\n    print_message() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(l):\n    l.sort()\n    return l\n\nsorted_list = sort_list(['cat', 'dog', 'bird', 'elephant'])\n\nprint(sorted_list) # Output: ['bird', 'cat', 'dog', 'elephant'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def migrate_data(src_db, dest_db):\n    \"\"\"\n    This function will migrate data from a SQL database \n    to a NoSQL database\n    \"\"\"\n    # Connect to the source SQL database\n    connection = src_db.connect()\n\n    # Iterate through each table in the source database\n    for table_name in src_db.get_table_names():\n        # Retrieve the table data\n        table_data = src_db.execute(\"SELECT * From \" + table_name)\n\n        # Insert the data into the destination NoSQL database\n        dest_db.write(table_name, table_data)\n\n    # Close the connection\n    connection.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generateFibonacci(n): \n    # Taking 1st two fibonacci nubers as 0 and 1 \n    FibArray = [0, 1] \n   \n    while len(FibArray) < n: \n        next_fib_num = FibArray[-1] + FibArray[-2] \n        FibArray.append(next_fib_num) \n      \n    return FibArray \n  \n# Driver Code \nresult = generateFibonacci(10) \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \nfrom math import sqrt \nimport warnings \nfrom collections import Counter \n\ndef k_nearest_neighbors(data, predict, k=3): \n    if len(data) >= k: \n        warnings.warn('K is set to a value less than total voting groups!') \n  \n    distances =[] \n    for group in data: \n        for features in data[group]: \n            euclidean_distance = np.linalg.norm(np.array(features) - np.array(predict)) \n            distances.append([euclidean_distance, group]) \n  \n    votes = [i[1] for i in sorted(distances)[:k]] \n    vote_result = Counter(votes).most_common(1)[0][0] \n    confidence = Counter(votes).most_common(1)[0][1] / k \n\n    return vote_result, confidence but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import React, { useState } from 'react';\n\nconst App = () => {\n const [inputValue, setInputValue] = useState('');\n const [results, setResults] = useState([]);\n\n const handleChange = e => {\n const value = e.target.value;\n setInputValue(value);\n\n const newResults = words.filter(word => \n word.toLowerCase().includes(value.toLowerCase())\n );\n setResults(newResults);\n };\n\n const words = ['react', 'javascript', 'node', 'python', 'java'];\n\n return (\n <div className='App'>\n <input\n value={inputValue}\n onChange={handleChange}\n />\n <ul>\n {results.map((result, index) => (\n <li key={index}>{result}</li>\n ))}\n </ul>\n </div>\n );\n};\n\nexport default App; but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def word_freq_dicts(texts):\n    \n    freq_dicts = []\n\n    for text in texts:\n        # Initialize dictionary for document\n        freq_dict = dict()\n\n        # Count word frequency\n        for word in text.split():\n            if word in freq_dict:\n                freq_dict[word] += 1\n            else:\n                freq_dict[word] = 1\n\n        # Append to list of dictionaries\n        freq_dicts.append(freq_dict)\n\n    return freq_dicts but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def char_frequency(text):\n    chars = {}\n    for c in text:\n        if c not in chars:\n            chars[c] = 0\n        chars[c] += 1\n    return chars\n    \nprint(char_frequency(text)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_prime_number(n):\n    number = n + 1\n    while True:\n        counter = 0\n        for i in range(2, number):\n          if number % i == 0:\n            counter = 1\n        if counter == 0:\n            break\n        number += 1\n    return number\n\nnum = int(input(\"Enter a number:\"))\nprime = find_prime_number(num)\n\nprint(prime) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countIslands(grid):  \n      \n    n = len(grid) \n    if n == 0:  \n        return 0\n  \n    m = len(grid[0]) \n  \n\n    count = 0\n    for i in range(n): \n        for j in range(m): \n            if grid[i][j] == True: \n                DFS(grid,i,j) \n                count += 1\n\n    return count\n\ndef DFS(grid,i,j): \n    if i<0 or j<0 or i>=len(grid) or j>=len(grid[0]) or grid[i][j]==False:\n        return \n    grid[i][j]= False\n    DFS[grid,i+1,j] \n    DFS[grid,i,j+1] \n    DFS[grid,i-1,j] \n    DFS[grid,i,j-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #create a simple AI chatbot in Python\ndef chatbot():\n    print(\"Hello, my name is Weather Bot. I can help you with questions about the weather!\")\n\n    while True:\n        query = input(\"You: \")\n        query = query.lower()\n        \n        # exit the loop is the user enters \"quit\"\n        if query == \"quit\":\n            break\n            \n        # responses to certain queries\n        if \"what is the temperature\" in query:\n            print(\"The current temperature is 65 degrees Fahrenheit.\")\n        \n        if \"what will the weather be tomorrow\" in query:\n            print(\"Tomorrow's forecast is sunny with a high of 75 degrees Fahrenheit.\")\n\n# call the function\nchatbot() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_string():\n    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    random_string = ''.join(random.choice(chars) for i in range(10))\n    return random_string\n\n# Example test\nrandom_string = generate_string()\nprint(random_string) # 5BZFz5S2Sd but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_chess_move(board_state, rules):\n for row_index, row in enumerate(board_state):\n for col_index, col in enumerate(row):\n if col == 'KB':\n # Generate all possible moves for Knight\n knight_moves = generate_knight_moves(board_state, row_index, col_index)\n # Apply rules to each of the moves and get the valid moves\n valid_moves = apply_rules(board_state, rules, knight_moves)\n # Return one of the valid moves\n return valid_moves[0]\n\ndef generate_knight_moves(board_state, row_index, col_index):\n  # generate all the possible knight moves\n\ndef apply_rules(board_state, rules, moves):\n  # filter out the moves that reach the rules\n  return valid_moves but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: names = [\"Taylor\", \"Hilton\", \"John\", \"Jack\", \"Justin\"]\n\nsearch_input = input(\"Enter a name to search: \")\n\nfiltered_names = []\nfor name in names:\n if search_input in name:\n  filtered_names.append(name)\nprint(filtered_names) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def prime_factors(num):\n    \"\"\"Returns the prime factors of a given positive integer.\n    \n    Args:\n        num (int): Positive integer.\n        \n    Returns:\n        list: List of prime factors.\n    \"\"\"\n    factors = []\n    d = 2\n    while num > 1:\n        while num % d == 0:\n            factors.append(d)\n            num /= d\n        d += 1\n    return factors but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class SocialNetworkUser:\n    def __init__(self, name, age, interests):\n        self.name = name\n        self.age = age\n        self.interests = interests\n        \n    def get_name(self):\n        return self.name\n    \n    def set_name(self, name):\n        self.name = name\n        \n    def get_age(self):\n        return self.age\n    \n    def set_age(self, age):\n        self.age = age\n        \n    def get_interests(self):\n        return self.interests\n    \n    def set_interests(self, interests):\n        self.interests = interests but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Define characters which can be used in the string\ncharacters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()'\n\n# Generate random string with specific length\ndef random_string(length):\n    random_string = ''\n    for _ in range(length):\n        random_string += random.choice(characters)\n    return random_string\n\n# Test\nstring_length = 8\nrandom_string = random_string(string_length)\nprint('Random string of length ' + str(string_length) + ': ' + random_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_products(products):\n    # Create a dictionary to store the number of defective products\n    defective_products = {}\n\n    for id, quantity, price in products:\n        # Calculate the cost of each product\n        cost = quantity * price\n        # Condition to identify a defective product\n        if cost < (price * 0.70):\n            defective_products[id] = [quantity, price, cost]\n\n    return defective_products but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def prime_factors(n):\n    factors = []\n    i = 2\n    while n > 1:\n        while n % i == 0:\n            factors.append(i)\n            n /= i\n        i += 1\n    return factors but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longestCommonSubsequence(s1, s2): \n    m = len(s1) \n    n = len(s2) \n  \n    LCSuff = [[0 for k in range(n+1)] for l in range(m+1)] \n    result = 0\n    for i in range(m + 1): \n        for j in range(n + 1): \n            if (i == 0 or j == 0): \n                LCSuff[i][j] = 0\n            elif s1[i-1] == s2[j-1]: \n                LCSuff[i][j] = LCSuff[i-1][j-1] + 1\n                result = max(result, LCSuff[i][j]) \n            else: \n                LCSuff[i][j] = 0\n    return result\n\nresult = longestCommonSubsequence(\"abcde\", \"ace\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pig_latin(sentence):\n  words = sentence.split(' ')\n  result = \"\"\n  for word in words:\n    result += word[1:] + word[0] + \"ay\" + \" \"\n  return result\n\nprint(pig_latin(\"Hello world\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_list(list1, list2):\n    diff = []\n    for word1 in list1:\n        if word1 not in list2:\n            diff.append(word1)\n    for word2 in list2:\n        if word2 not in list1:\n            diff.append(word2)\n    return diff\n\nlist1 = [\"Car\", \"Plane\", \"Train\"]\nlist2 = [\"Car\", \"Bus\", \"Train\"]\n\ndifference = compare_list(list1, list2)\nprint(difference) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Extract the name and phone number from a given string\ndef extract_name_phone(input_string):\n    name_phone_dict = {}\n    data = input_string.split(': ')\n    \n    name_phone_dict['name'] = data[0]\n    name_phone_dict['phone'] = data[1]\n    \n    return name_phone_dict\n\nresult = extract_name_phone(\"John Doe: (+1) 555-665-8877\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def smallestMissingPositiveNumber(arr): \n    s = set() \n    for i in arr: \n        s.add(i) \n  \n    for i in range(1, len(arr) + 1): \n        if i not in s: \n            return i \n  \n    return len(arr)+1\n  \narr = [3, 1, 2, 6, 0, -2, -1]\nmissing = smallestMissingPositiveNumber(arr)\nprint(missing) # 4 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_divisible(n):\n  result = []\n  for i in range(1, n+1):\n    if i % 7 == 0:\n      result.append(i)\n  return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n# input data\nX = np.array([[1, 1], [2, 2], [3, 3], [4, 4]])\ny = np.array([5, 10, 15, 20])\n\n# create and fit the model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# make a prediction\ny_pred = model.predict([[5, 5]])\nprint(round(y_pred[0], 2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num1 = 10\n num2 = 8\n\nif num1 > num2:\n    print(num1)\nelse:\n    print(num2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def split_into_pairs(inputString):\n    resultList = []\n    counter = 0\n    \n    while counter < len(inputString):\n        resultList.append(inputString[counter:counter + 2])\n        counter += 2\n    \n    return resultList\n\npairs = split_into_pairs(\"abcd\")\n\nprint(pairs) but is not the same. just give one example and only return the code."}
