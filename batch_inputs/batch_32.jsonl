{"prompt": "make some code that functions the same as the following code: def is_palindrome(lst):\n  if len(lst) < 2:\n    return True\n  if lst[0] != lst[-1]:\n    return False\n  return is_palindrome(lst[1:-1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countPositive(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    print(\"Number of positive numbers:\", count)\n\nnums = [-2, 3, 4, -7, 6]\ncountPositive(nums)\n\n# Output: Number of positive numbers: 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LogisticRegression \n\n# read dataset\ncancer_data = pd.read_csv(\"cancer_data.csv\")\n\n# split into train and test sets\nx_train, x_test, y_train, y_test = train_test_split(cancer_data.iloc[:,:-1], cancer_data.iloc[:,-1], test_size=0.25, random_state=0)\n\n# create the model \nlr_model = LogisticRegression() \nlr_model.fit(x_train,y_train)\n\n# accuracy\naccuracy = lr_model.score(x_test,y_test)\nprint(accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence1 = \"I am writing a Python program.\"\nsentence2 = \"It is exciting to learn something new.\"\n\n# Concatenate both strings\nconcatenated_sentence = sentence1 + \" \" + sentence2\n\n# Print the result\nprint(concatenated_sentence) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_by_second_item(my_list): \n    return sorted(my_list, key = lambda x: x[1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Calculator:\n    \"\"\"\n    Class with two methods - add and subtract\n    \"\"\"\n\n    def add(self, num1, num2):\n        \"\"\"\n        Method to add two numbers\n        \"\"\"\n        return num1 + num2\n\n    def subtract(self, num1, num2):\n        \"\"\"\n        Method to subtract two numbers\n        \"\"\"\n        return num1 - num2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n\ndef generate_code():\n    code = \"\"\n    for _ in range(4):\n        code += str(random.randint(0, 9))\n    return code\n\ncode = generate_code()\nprint(code) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combine_strings(string1, string2):\n    return string1 + \" \" + string2\n\ncombined_string = combine_strings(\"Hello\", \"World\")\nprint(combined_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import the necessary libraries\nimport matplotlib.pyplot as plt\nfrom keras.datasets import mnist \nfrom keras.models import Sequential\nfrom keras.layers import Dense \n\n# Load the datasets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n\n# Reshape the input\nX_train = X_train.reshape(60000, 784)\nX_test = X_test.reshape(10000, 784)\n\n# Build a fully-connected neural network \nmodel = Sequential()\nmodel.add(Dense(units=64, activation='relu', input_dim=784))\nmodel.add(Dense(units=10, activation='softmax'))\n\n# Compile the model \nmodel.compile(optimizer='sgd', loss='categorical_crossentropy', metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train, y_train, batch_size=32, epochs=3, verbose=1)\n\n# Test the model by evaluating on the test data \nscore = model.evaluate(X_test, y_test, verbose=1)\n\n# Summary \nprint(\"Test accuracy: \", score[1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_bmi(height, weight): \n    bmi = weight / (height * height) \n    return bmi but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter \n\nd = {\u2018python\u2019: 20, \u2018java\u2019: 10, \u2018c++\u2019: 15, \u2018C#\u2019: 15}\n\n#Get most common value\ndata = Counter(d) \nmost_common_value = data.most_common(1)[0][0]  \n\n#Print out most common value\nprint(most_common_value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# \n# Copyright 2009 Mozilla Corporation, Zuza Software Foundation\n# \n# This file is part of Pootle.\n#\n# Pootle is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n# \n# Pootle is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pootle; if not, write to the Free Software\n# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nimport ldap\nimport ldap.filter\nimport logging\n\nfrom django.conf import settings\nfrom django.contrib.auth.models import User\n\nclass LdapBackend(object):\n    \"\"\"\n    This is a Django authentication module which implements LDAP\n    authentication. \n\n    To use this module, simply add it to the tuple AUTHENTICATION_BACKENDS\n    in settings.py.\n    \"\"\"\n    def authenticate(self, username=None, password=None):\n\n        logger = logging.getLogger('pootle.auth.ldap')\n\n        ldo = ldap.initialize(settings.AUTH_LDAP_SERVER)\n        ldo.set_option(ldap.OPT_PROTOCOL_VERSION, 3)\n\n        try:\n            ldo.simple_bind_s(settings.AUTH_LDAP_ANON_DN, settings.AUTH_LDAP_ANON_PASS)\n\n            result = ldo.search_s(settings.AUTH_LDAP_BASE_DN, ldap.SCOPE_SUBTREE, ldap.filter.escape_filter_chars(settings.AUTH_LDAP_FILTER) % username, settings.AUTH_LDAP_FIELDS.values())\n\n            if len(result) != 1:\n                logger.debug(\"More or less than 1 matching account for (%s).  Failing LDAP auth.\" % (username))\n                return None\n\n        except ldap.INVALID_CREDENTIALS:\n            logger.error('Anonymous bind to LDAP server failed.  Please check the username and password.')\n            return None\n        except Exception, e:\n            logger.error('Unknown LDAP error: ' + str(e))\n            return None\n\n        try:\n            ldo.simple_bind_s(result[0][0], password)\n            logger.debug(\"Successful LDAP login for user (%s)\" % (username))\n\n            try:\n                user = User.objects.get(username=username)\n                return user\n            except User.DoesNotExist:\n                logger.info(\"First login for LDAP user (%s).  Creating new account.\" % username)\n                user = User(username=username, is_active=True)\n                user.password = 'LDAP_%s' % (User.objects.make_random_password(32))\n                for i in settings.AUTH_LDAP_FIELDS:\n                    if i != 'dn' and len(settings.AUTH_LDAP_FIELDS[i]) > 0:\n                        setattr(user,i,result[0][1][settings.AUTH_LDAP_FIELDS[i]][0])\n                user.save()\n                return user\n\n        except (ldap.INVALID_CREDENTIALS, ldap.UNWILLING_TO_PERFORM): # Bad e-mail or password\n            logger.debug(\"No account or bad credentials for (%s).  Failing LDAP auth.\" % (username))\n            return None\n        except Exception, e: # No other exceptions are normal, so we raise this.\n            logger.error('Unknown LDAP error: ' + str(e))\n            raise\n\n    def get_user(self, user_id):\n        try:\n            return User.objects.get(pk=user_id)\n        except User.DoesNotExist:\n            return None\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\n\n# import the necessary libraries\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# define the labels and features\nlabels = ['positive','negative','neutral']\ntexts = [\"I'm feeling happy today\", \"I'm feeling very frustrated\", \"I'm not sure how to feel right now\"]\nlabels = [1,0,2]\n\n# vectorise the texts\nvectorizer = TfidfVectorizer()\nfeatures = vectorizer.fit_transform(texts)\n\n# split the data into train and test\nX = features.toarray()\nY = labels\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size = 0.8, random_state = 0)\n\n# Create the model and fit it\nmodel = LogisticRegression()\nmodel.fit(X_train,Y_train)\n\n# Make predictions\npredictions = model.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import libraries\nfrom sklearn import datasets\nfrom sklearn.ensemble import RandomForestClassifier\n\n# load the dataset\ndataset = datasets.load_iris()\n\n# create the model\nmodel = RandomForestClassifier()\n\n# train the model\nmodel.fit(dataset.data, dataset.target)\n\n# make predictions\npredictions = model.predict(dataset.data)\n\n# check accuracy\naccuracy = model.score(dataset.data, dataset.target)\n\nprint('Accuracy: {}%'.format(accuracy * 100)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt \nimport pandas as pd \n\ndata = pd.read_sql_query(\"SELECT column_name FROM table_name\", db) \ndata.hist(bins=10, figsize=(10, 6)) \n\nplt.tight_layout() \nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def computeGCD(a, b): \n\tif(b == 0): \n\t\treturn a \n\telse: \n\t\treturn computeGCD(b, a%b) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: animals = [\"cat\", \"dog\", \"bird\"]\n\ndef search_animals(user_input):\n    for animal in animals:\n        if user_input == animal:\n            return animal\n    return None\n\nuser_input = input(\"Enter the name of the animal: \")\nresult = search_animals(user_input)\nif result != None:\n    print(\"Found: {}\".format(result))\nelse:\n    print(\"No match found!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(10):\n    print(\"Hello World\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Assuming the numerical table of data is stored in a 2D list data, a function to format it into a JSON object can be written as follows:\n\nimport json\ndef formatData2JSON(data):\n    json_formatted_data = json.dumps(data)\n    return json_formatted_data but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sumMultiples(num):\n    sum = 0\n    for i in range(1, num):\n        if (i % 3 == 0 or i % 5 == 0):\n            sum += i\n    return sum\n\n# Driver Code\nnum = 20\nprint(sumMultiples(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from selenium import webdriver\n\n# Create a webdriver\ndriver = webdriver.Chrome()\n\n# Open the web page\ndriver.get('https://www.example.com/form')\n\n# Enter the phone number\nphone_number_field = driver.find_element_by_name('phone')\nphone_number_field.send_keys('1234567890')\n\n# Submit the form\nsubmit_button = driver.find_element_by_id('submit')\nsubmit_button.click()\n\n# Check for any error messages\nerror_message = driver.find_element_by_class_name('error')\nif error_message:\n print(error_message.text)\n\n# Close the browser\ndriver.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_numbers(list_of_numbers):\n# initialize the result to 0\n result = 0\n \n# Iterate over the list of numbers\n for num in list_of_numbers:\n result += num\n \n# return the result\n return result\n \n# testing the function\nlist_of_numbers = [2, 4, 6, 8, 10]\nprint(sum_of_numbers(list_of_numbers)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Simulate a dice roll\nresult = random.randint(1,6)\nprint(\"Result of the dice roll:\", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: text = \"Apples, oranges, and bananas\"\n\nlist_from_text = text.split(\", \")\n\nprint(\"List:\", list_from_text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Modifying the list by adding 'value' to each element\nfor i in range(len(list)):\n    list[i] = list[i] + value\n\n# Print the modified list\nprint(list)\n# [11, 12, 13, 14, 15] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def cube_surface_area(side):\n    \"\"\" \n    Calculate and return the total surface area of a cube \n    given the side length.\n    \"\"\"\n    return 6 * side**2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\n\ndef removePunctuation(input_string):\n    punctuations = string.punctuation\n    output_string = \"\"\n    for char in input_string:\n        if char not in punctuations:\n            output_string += char\n    return output_string\n\nprint(removePunctuation(\"Hello, World!!!\"))  # Output: Hello World but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_total(lst):\n    total = 0\n    for item in lst:\n        total += item\n    return total\n\nlst = [2, 4, 5, 6, 8]\ntotal = calculate_total(lst)\nprint(total) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: kilometers = 10\n\nmiles = kilometers * 0.621371\n\nprint(\"{} kilometers is equal to {} miles\".format(kilometers, miles)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_string_to_list(string_list, string):\n string_list.append(string)\n \n return string_list\n \n# sample call\nlist = ['apple', 'orange', 'banana']\nstring = 'kiwi'\nnew_list = add_string_to_list(list, string)\n\nprint(new_list)\n# ['apple','orange','banana','kiwi'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: mean = 5.42\nsd = 2.48\n\ndef compute_stats(Data):\n    # calculuate mean\n    mean = sum(Data) / len(Data)\n    # calculate standard deviation\n    variance = 0.0\n    for i in Data:\n        variance += (i - mean)**2\n    sd = variance ** 0.5\n    # return mean and sd\n    return mean, sd but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import imdb\n\nia = imdb.IMDb()\nmovie = ia.search_movie('The Prestige')[0]\nia.update(movie)\n\nprint(movie['rating'])\n// Output: 8.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -*- coding: utf-8 -*-\nfrom __future__ import absolute_import\nfrom __future__ import print_function\n\nimport os\nimport re\nimport sys\nimport json\nimport requests\nimport argparse\nimport time\nimport codecs\nfrom bs4 import BeautifulSoup\nfrom six import u\n\n__version__ = '1.0'\n\n# if python 2, disable verify flag in requests.get()\nVERIFY = True\nif sys.version_info[0] < 3:\n    VERIFY = False\n    requests.packages.urllib3.disable_warnings()\n\n\nclass PttWebCrawler(object):\n\n    PTT_URL = 'https://www.ptt.cc'\n\n    \"\"\"docstring for PttWebCrawler\"\"\"\n    def __init__(self, cmdline=None, as_lib=False):\n        parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, description='''\n            A crawler for the web version of PTT, the largest online community in Taiwan.\n            Input: board name and page indices (or articla ID)\n            Output: BOARD_NAME-START_INDEX-END_INDEX.json (or BOARD_NAME-ID.json)\n        ''')\n        parser.add_argument('-b', metavar='BOARD_NAME', help='Board name', required=True)\n        group = parser.add_mutually_exclusive_group(required=True)\n        group.add_argument('-i', metavar=('START_INDEX', 'END_INDEX'), type=int, nargs=2, help=\"Start and end index\")\n        group.add_argument('-a', metavar='ARTICLE_ID', help=\"Article ID\")\n        parser.add_argument('-v', '--version', action='version', version='%(prog)s ' + __version__)\n\n        if not as_lib:\n            if cmdline:\n                args = parser.parse_args(cmdline)\n            else:\n                args = parser.parse_args()\n            board = args.b\n            if args.i:\n                start = args.i[0]\n                if args.i[1] == -1:\n                    end = self.getLastPage(board)\n                else:\n                    end = args.i[1]\n                self.parse_articles(start, end, board)\n            else:  # args.a\n                article_id = args.a\n                self.parse_article(article_id, board)\n\n    def parse_articles(self, start, end, board, path='.', timeout=3):\n            filename = board + '-' + str(start) + '-' + str(end) + '.json'\n            filename = os.path.join(path, filename)\n            self.store(filename, u'{\"articles\": [', 'w')\n            for i in range(end-start+1):\n                index = start + i\n                print('Processing index:', str(index))\n                resp = requests.get(\n                    url = self.PTT_URL + '/bbs/' + board + '/index' + str(index) + '.html',\n                    cookies={'over18': '1'}, verify=VERIFY, timeout=timeout\n                )\n                if resp.status_code != 200:\n                    print('invalid url:', resp.url)\n                    continue\n                soup = BeautifulSoup(resp.text, 'html.parser')\n                divs = soup.find_all(\"div\", \"r-ent\")\n                for div in divs:\n                    try:\n                        # ex. link would be <a href=\"/bbs/PublicServan/M.1127742013.A.240.html\">Re: [\u554f\u984c] \u8077\u7b49</a>\n                        href = div.find('a')['href']\n                        link = self.PTT_URL + href\n                        article_id = re.sub('\\.html', '', href.split('/')[-1])\n                        if div == divs[-1] and i == end-start:  # last div of last page\n                            self.store(filename, self.parse(link, article_id, board), 'a')\n                        else:\n                            self.store(filename, self.parse(link, article_id, board) + ',\\n', 'a')\n                    except:\n                        pass\n                time.sleep(0.1)\n            self.store(filename, u']}', 'a')\n            return filename\n\n    def parse_article(self, article_id, board, path='.'):\n        link = self.PTT_URL + '/bbs/' + board + '/' + article_id + '.html'\n        filename = board + '-' + article_id + '.json'\n        filename = os.path.join(path, filename)\n        self.store(filename, self.parse(link, article_id, board), 'w')\n        return filename\n\n    @staticmethod\n    def parse(link, article_id, board, timeout=3):\n        print('Processing article:', article_id)\n        resp = requests.get(url=link, cookies={'over18': '1'}, verify=VERIFY, timeout=timeout)\n        if resp.status_code != 200:\n            print('invalid url:', resp.url)\n            return json.dumps({\"error\": \"invalid url\"}, sort_keys=True, ensure_ascii=False)\n        soup = BeautifulSoup(resp.text, 'html.parser')\n        main_content = soup.find(id=\"main-content\")\n        metas = main_content.select('div.article-metaline')\n        author = ''\n        title = ''\n        date = ''\n        if metas:\n            author = metas[0].select('span.article-meta-value')[0].string if metas[0].select('span.article-meta-value')[0] else author\n            title = metas[1].select('span.article-meta-value')[0].string if metas[1].select('span.article-meta-value')[0] else title\n            date = metas[2].select('span.article-meta-value')[0].string if metas[2].select('span.article-meta-value')[0] else date\n\n            # remove meta nodes\n            for meta in metas:\n                meta.extract()\n            for meta in main_content.select('div.article-metaline-right'):\n                meta.extract()\n\n        # remove and keep push nodes\n        pushes = main_content.find_all('div', class_='push')\n        for push in pushes:\n            push.extract()\n\n        try:\n            ip = main_content.find(text=re.compile(u'\u203b \u767c\u4fe1\u7ad9:'))\n            ip = re.search('[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*', ip).group()\n        except:\n            ip = \"None\"\n\n        # \u79fb\u9664 '\u203b \u767c\u4fe1\u7ad9:' (starts with u'\\u203b'), '\u25c6 From:' (starts with u'\\u25c6'), \u7a7a\u884c\u53ca\u591a\u9918\u7a7a\u767d\n        # \u4fdd\u7559\u82f1\u6578\u5b57, \u4e2d\u6587\u53ca\u4e2d\u6587\u6a19\u9ede, \u7db2\u5740, \u90e8\u5206\u7279\u6b8a\u7b26\u865f\n        filtered = [ v for v in main_content.stripped_strings if v[0] not in [u'\u203b', u'\u25c6'] and v[:2] not in [u'--'] ]\n        expr = re.compile(u(r'[^\\u4e00-\\u9fa5\\u3002\\uff1b\\uff0c\\uff1a\\u201c\\u201d\\uff08\\uff09\\u3001\\uff1f\\u300a\\u300b\\s\\w:/-_.?~%()]'))\n        for i in range(len(filtered)):\n            filtered[i] = re.sub(expr, '', filtered[i])\n\n        filtered = [_f for _f in filtered if _f]  # remove empty strings\n        filtered = [x for x in filtered if article_id not in x]  # remove last line containing the url of the article\n        content = ' '.join(filtered)\n        content = re.sub(r'(\\s)+', ' ', content)\n        # print 'content', content\n\n        # push messages\n        p, b, n = 0, 0, 0\n        messages = []\n        for push in pushes:\n            if not push.find('span', 'push-tag'):\n                continue\n            push_tag = push.find('span', 'push-tag').string.strip(' \\t\\n\\r')\n            push_userid = push.find('span', 'push-userid').string.strip(' \\t\\n\\r')\n            # if find is None: find().strings -> list -> ' '.join; else the current way\n            push_content = push.find('span', 'push-content').strings\n            push_content = ' '.join(push_content)[1:].strip(' \\t\\n\\r')  # remove ':'\n            push_ipdatetime = push.find('span', 'push-ipdatetime').string.strip(' \\t\\n\\r')\n            messages.append( {'push_tag': push_tag, 'push_userid': push_userid, 'push_content': push_content, 'push_ipdatetime': push_ipdatetime} )\n            if push_tag == u'\u63a8':\n                p += 1\n            elif push_tag == u'\u5653':\n                b += 1\n            else:\n                n += 1\n\n        # count: \u63a8\u5653\u6587\u76f8\u62b5\u5f8c\u7684\u6578\u91cf; all: \u63a8\u6587\u7e3d\u6578\n        message_count = {'all': p+b+n, 'count': p-b, 'push': p, 'boo': b, \"neutral\": n}\n\n        # print 'msgs', messages\n        # print 'mscounts', message_count\n\n        # json data\n        data = {\n            'url': link,\n            'board': board,\n            'article_id': article_id,\n            'article_title': title,\n            'author': author,\n            'date': date,\n            'content': content,\n            'ip': ip,\n            'message_conut': message_count,\n            'messages': messages\n        }\n        # print 'original:', d\n        return json.dumps(data, sort_keys=True, ensure_ascii=False)\n\n    @staticmethod\n    def getLastPage(board, timeout=3):\n        content = requests.get(\n            url= 'https://www.ptt.cc/bbs/' + board + '/index.html',\n            cookies={'over18': '1'}, timeout=timeout\n        ).content.decode('utf-8')\n        first_page = re.search(r'href=\"/bbs/' + board + '/index(\\d+).html\">&lsaquo;', content)\n        if first_page is None:\n            return 1\n        return int(first_page.group(1)) + 1\n\n    @staticmethod\n    def store(filename, data, mode):\n        with codecs.open(filename, mode, encoding='utf-8') as f:\n            f.write(data)\n\n    @staticmethod\n    def get(filename, mode='r'):\n        with codecs.open(filename, mode, encoding='utf-8') as f:\n            return json.load(f)\n\nif __name__ == '__main__':\n    c = PttWebCrawler()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: lst=[each*each for each in range(5)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_longest(arr): \n    longest = 0\n    for item in arr: \n        longest = max(len(str(item)), longest) \n    return longest\n    \nif __name__ == \"__main__\": \n    list = [1, 5, 4, 3, 9, 8]\n    print(find_longest(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\ndef delete_pattern_characters(string, pattern):\n return re.sub(pattern, \"\", string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(arr): \n    # Initialize max \n    max = arr[0] \n  \n    # Traverse from arr[1] to end \n    for i in range(1, len(arr)): \n  \n        # Compare every element with current max \n        if arr[i] > max: \n            max = arr[i] \n              \n    return max\n\narr = [2, 4, 6, 1, 7, 12] \n\nresult = find_max(arr)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_df_by_age(df, age):\n    # Filter the dataframe\n    filtered_df = df[df['age'] > age]\n\n    # Create the new dataframe\n    new_df = filtered_df.copy()\n\n    # Return the new dataframe\n    return new_df but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(number): \nnum = number  \n   \n# initializing a reverse number  \nreverse = 0\n  \n# Reverse the given number \nwhile(number > 0): \n   remainder = number % 10\n   # Create reverse \n   reverse = (reverse * 10) + remainder \n   number = number // 10 \n \n# check if original and reverse numbers are same\nif (num == reverse): \n  return True\nelse: \n  return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(string):\n    rev_string = string[::-1]\n    if string == rev_string:\n        return True\n    else:\n        return False \n\nprint(is_palindrome(\"level\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: n = 5\nfor i in range(1, n+1):\n print(i, end=' ') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def delete_third_element(list): \n    \"\"\"Function to delete the third element of a list\"\"\" \n    del list[2] \n    return list\n\n#Example:\nprint(delete_third_element(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef get_password(length):\n    letters =string.ascii_lowercase+string.ascii_uppercase+string.digits+string.punctuation\n    return ''.join(random.choice(letters) for i in range(length))\n\n# Output\nresult = get_password(8)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def deleteAtOddIndex(s):\n    output = \"\"\n    for i in range(len(s)):\n        # delete the character at an odd index\n        if i % 2 != 0:\n            pass\n        else:\n            output += s[i]\n    return output but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nmin_num = 10\nmax_num = 25\n \n# Generate a random number\nrand_num = random.randint(min_num, max_num)\n \n# Print the random number\nprint(rand_num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import necessary libraries\nfrom sklearn import svm\n\n# define the model\nmodel = svm.SVC(kernel='rbf', gamma=1.0, C=1.0)\n\n# fit the model\nmodel.fit(X, y)\n\n# make predictions\ny_pred = model.predict(X) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def identify_sentiment(sentence):\n    # Split sentence into individual words\n    words = sentence.split()\n\n    # Import Textblob package\n    from textblob import TextBlob\n\n    # Create a textblob object\n    analysis = TextBlob(' '.join(words))\n\n    # Return sentiment polarity \n    return analysis.sentiment.polarity\n    \n    \nif __name__ == \"__main__\":\n    sentiment = identify_sentiment('I'm feeling great today')\n    if sentiment > 0:\n        print('Positive sentiment')\n    elif sentiment == 0:\n        print('Neutral sentiment')\n    else:\n        print('Negative sentiment') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: total = 0\n\nfor i in range(1, 51):\n    total += i\n\nprint(total) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_sequence(n):\n    num = 1\n    for i in range(n):\n        yield num\n        num *= 5\n        \nlist(generate_sequence(10))\n#[1, 5, 25, 125, 625, 3125, 15625, 78125, 390625, 1953125] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_triangle_area(a, b, c):\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    # Calculate the area of the triangle\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return area\n\na = 3\nb = 4\nc = 5\n\narea = calculate_triangle_area(a, b, c)\nprint(\"Area of the triangle is: {}\".format(area)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def input_num():\n    while True:\n        try:\n            num = int(input(\"Insert a number:\"))\n            break\n        except ValueError:\n            print(\"Please enter a valid integer.\")\n    return num but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(lst, key): \n    return sorted(lst, key = lambda x: x[key]) \n\n# Driver code \nlst = [(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)] \nkey = 1\nprint(sort_list(lst, key)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n return render_template('index.html')\n\n@app.route('/unique_count', methods=['POST'])\ndef unique_count():\n user_text = request.form['user_text']\n # Count number of unique characters\n characters = set()\n for char in user_text:\n  characters.add(char)\n char_count = len(characters)\n # Render the count result\n return render_template('result.html', char_count=char_count)\n\nif __name__ == '__main__':\napp.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def categorize(word):\n    categories = {\n        \"fruits\": [\"apple\", \"orange\", \"banana\"],\n        \"vegetables\": [\"carrot\", \"potato\", \"pepper\"],\n        \"animals\": [\"dog\", \"cat\", \"bird\"]\n    }\n\n    for category, words in categories.items():\n        if word in words:\n            return category\n\n    return \"unknown\"\n\n\nword = \"apple\"\ncategory = categorize(word)\nprint(category) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_common_element(lst):\n    max_count = 0\n    most_common = None\n    \n    for num in lst:\n        count = lst.count(num)\n        if count > max_count:\n            most_common = num\n            max_count = count\n    return most_common\n\nmost_common_element([2, 4, 1, 4, 5, 6, 4, 8]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: headings = [\"Introduction\", \"Fundamentals\", \"Algorithms\", \"Design Patterns\", \"Conclusion\"]\n\nprint(\"Table of Contents\")\nfor i, heading in enumerate(headings):\n  print(f\"{i+1}.{heading}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Fetch the webpages \nresponse = requests.get('https://example.com/page1.html')\n#response2 = requests.get('https://example.com/page2.html')\n#..\n#responseN = requests.get('https://example.com/pageN.html')\n\n# Parse the HTML contents  \nsoup = BeautifulSoup(response.text, 'lxml')\n#soup2 = BeautifulSoup(response2.text, 'lxml')\n#..\n#soupN = BeautifulSoup(responseN.text, 'lxml')\n\n# Extract the text content of each webpage \ntext_content = soup.get_text()\n#text_content2 = soup2.get_text()\n#.\n#text_contentN = soupN.get_text() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def closest_fibonacci(number):\n    a, b = 0, 1\n    while b < number:\n        a, b = b, a + b\n    return a\n\nnumber = int(input('Enter a positive integer: '))\nprint(\"The closest Fibonacci number is\", closest_fibonacci(number)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: filtered_words = [ word for word in words if len(word) == 6 ] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: prices = [12, 10, 5, 8] \nquantities = [1, 2, 3, 4]\n \ntotal_cost = 0\n\nfor i in range(len(prices)):\n    total_cost += prices[i] * quantities[i]\n\nprint(total_cost) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nAPI_ENDPOINT = 'https://imdb-api.com/'\n\n# Sending get request and saving the response as response object\nresp = requests.get(API_ENDPOINT + 'movie/{' + 'release_date:2020%2Creview:9:10' + '}')\n\n# Extracting data in json format\ndata = resp.json()\n\n# Printing the output\nprint(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_long_words(sentence, length):\n    words = sentence.split()\n    count = 0\n    \n    for word in words:\n        if len(word) > length:\n            count += 1\n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef respond_to_query(query):\n    if query == 'What is the price?':\n        return 'The price of our product is $30.'\n    elif query == 'Where can I buy it?':\n        return 'You can buy it from our online store or from select retailers.'\n    elif query == 'How do I use it?':\n        return 'Follow the instructions in the user manual.'\n    else:\n        responses = ['I am sorry, I do not understand your question.',\n                     'Can you be more specific?',\n                     'Please ask a specific question about the product.']\n        return random.choice(responses) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: input_array = ['Apple', 'Orange', 'Apple', 'Mango', 'Banana', 'Mango']\n\nunique_array = []\nfor item in input_array:\n if item not in unique_array:\n unique_array.append(item)\n\nprint(unique_array) #['Apple', 'Orange', 'Mango', 'Banana'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: a, b = b, a but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnum = 5\nprint(f\"The factorial of {num} is {factorial(num)}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import libraries necessary for building the neural network \nimport numpy as np \nimport pandas as pd\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout\n\n# Read in the dataset\ndataset = pd.read_csv('dataset.csv')\nX = dataset.iloc[:,:-1].values\ny = dataset.iloc[:,-1].values\n\n# Building the neural network\nmodel = Sequential()\n\n# First layer with input dimensions\nmodel.add(Dense(32, activation='relu', input_dim=X.shape[1]))\nmodel.add(Dropout(0.2))\n\n# Second layer\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dropout(0.2))\n\n# Output layer\nmodel.add(Dense(1, activation='sigmoid'))\n\n# Compile the model \nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# Fit the model\nmodel.fit(X, y, epochs=100, batch_size=32, validation_split=.2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import calendar\nfrom datetime import date, time, datetime\n\ndef get_events(cal, start_date, num_events):\n    events = []\n    for i in range(num_events):\n        day_events = cal.itermonthdays2(start_date.year, start_date.month)\n        while not day_events[0][1]:\n            start_date = start_date.replace(day=(start_date.day + 1))\n            day_events = cal.itermonthdays2(start_date.year, start_date.month)\n\n        event_date = start_date.replace(day=day_events[0][0])\n        events.append((event_date, day_events[0][1]))\n        start_date = start_date.replace(day=(start_date.day + 1))\n    return events\n\ncal = calendar.Calendar()\nstart_date = date.today()\nevents = get_events(cal, start_date, 5)\n# print out the upcoming 5 events\nfor event in events:\n    print(event[0], event[1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_in_rectangle(x,y,bottom_left,top_right):\n    \"\"\"\n    Check if a given data point is inside a given \n    rectangle shaped area.\n    \"\"\"\n    # Unpack bottom left and top right coordinates\n    bx, by = bottom_left\n    tx, ty = top_right\n    \n    # Check if (x,y) is inside the rectangle\n    if bx <= x <= tx and by <= y <= ty:\n        return True\n    else:\n        return False\n\n# Data point (x,y)\nx, y = (21,3.3)\n\n# Area with bottom left corner at (2.8, -7.1) \n# and top right corner at (16.2, 13.7)\nbottom_left = (2.8,-7.1) \ntop_right = (16.2,13.7)\n\nprint(is_in_rectangle(x,y,bottom_left,top_right)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def descendingSort(arr): \n    arr.sort(reverse=True) \n    return arr\n  \narr = [13, 11, 7, 4, 2]\nresult = descendingSort(arr) \n  \nprint (result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Linear search function \ndef linear_search(list, x): \n\tfor i in range(len(list)): \n\t\tif list[i] == x: \n\t\t\treturn i \n\treturn -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\n\ndef timed(func):\n    def get_runtime(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n        total_time = end_time - start_time\n        return result, total_time\n    return get_runtime but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import relevant libraries\nimport tkinter as tk \nimport hashlib\n\n# Create the main window \nroot = tk.Tk()\nroot.title('Password Manager')\n\n# Create a secure password database\npassword_storage = {}\n\n# Create a function for hashing the password\ndef hash_password(password):\n  hashed_password = hashlib.sha256(password.encode('utf-8')).hexdigest()\n  return hashed_password\n\n# Create an authentication system to prompt the user to enter a username and password\ndef authenticate():\n  username_entry = tk.Entry(root) \n  username_entry.pack()\n\n  password_entry = tk.Entry(root, show=\"*\") \n  password_entry.pack()\n\n  def authenticate_user():\n    username = username_entry.get()\n    password = password_entry.get()\n    hashed_password = hash_password(password)\n    if username in password_storage and password_storage[username] == hashed_password:\n      print('Authenticated!')\n    else:\n      print('Incorrect')\n  tk.Button(root, text='Authenticate', command=authenticate_user).pack()\n\n# Call the authenticate function\nauthenticate()\n\nroot.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Make the request\nurl = '<URL HERE>'\nresp = requests.get(url)\n\n# Parse the HTML\nsoup = BeautifulSoup(resp.text, 'html.parser')\n\n# Get all product prices\nprices = soup.find_all('span', 'price')\n\n# Extract the prices\nproduct_prices = []\nfor price in prices:\n product_prices.append(price.text)\n\n# Print the prices\nfor price in product_prices:\n print(price) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from datetime import datetime\n\ndef hours_difference(time1,time2):\n    '''\n    This program takes two times and calculates the number of hours between them\n    '''\n    time_format = '%I:%M%p' #12-hour clock AM/PM\n    time1 = datetime.strptime(time1, time_format)\n    time2 = datetime.strptime(time2, time_format)\n    difference = time2 - time1 \n    return difference.seconds/3600\n\nprint(hours_difference(\"1:00pm\", \"4:45pm\")) # 3.75 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def average_list(list):\n total = 0\n for item in list:\n  total += item\n return total / len(list)\n\nlist = [4,2,6,8,10]\nprint(average_list(list)) # Output: 6.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def code_generator(code_base):\n    updated_code = []\n    lines = code_base.splitlines()\n    for line in lines:\n        # Tokenize the line\n        tokens = line.split(' ')\n\n        # Find the tokens that need to be updated\n        modified_tokens = [token for token in tokens if token.startswith('[') and token.endswith(']')]\n\n        # Replace the tokens with new ones\n        for token in modified_tokens:\n            new_token = token.replace(\"[\", \"\")\n            new_token = new_token.replace(\"]\", \"\")\n            new_token = generate_new_token()\n            line = line.replace(token, new_token)\n\n        updated_code.append(line)\n    return '\\n'.join(updated_code)\n    \n\ndef generate_new_token():\n    return \"<generated-token>\"\n\ncode_base = '''\ndef foo(): \n    x = [test]\n    y = [test2]\n    \n    return x + y\n'''\n\nprint(code_generator(code_base)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Circle:\n    \"This class represents a circle\"\n    \n    def __init__(self, radius, color):\n        self.radius = radius\n        self.color = color\n        \n    def get_radius(self):\n        return self.radius\n    \n    def get_color(self):\n        return self.color\n    \n    def set_radius(self, radius):\n        self.radius = radius\n        \n    def set_color(self, color):\n        self.color = color but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: removed_string = string[:1] + string[2:]\nprint(removed_string) # \"xample\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_second_largest_number(input_list):\n    '''Finds the second largest number in a given list.'''\n    first = float(\"-infinity\")\n    second = float(\"-infinity\")\n\n    for num in input_list:\n        if num > first:\n            second = first\n            first = num\n        elif num > second and num != first:\n            second = num\n    \n    return second\n\nlist = [2, 10, 7, 5, 8]\nprint(find_second_largest_number(list))\n# Output: 8 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list1 = [1, 2, 3, 4, 5] \nnumber = 3\n\n#initialize a count\ncount = 0\n\n#iterate through the list and count the elements that are greater than the given number\nfor num in list1:\n    if num > number:\n        count += 1\n\nprint(\"Number of elements greater than the given number:\", count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_recursive(n):\n    if(n == 0):\n        return 0\n    else:\n        return n + sum_recursive(n-1)\n\nprint(sum_recursive(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n  def __init__(self, name, age, college):\n    self.name = name\n    self.age = age\n    self.college = college\n\n  def getStudentInformation(self):\n    return 'Name: %s | Age: %s | College: %s' % (self.name, self.age, self.college)\n\nstudent = Student('John', 20, 'ABCD University')\nprint(student.getStudentInformation()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [1, 2, 3, 4, 5, 6, 7, 8]\n\n#Split the list into two lists based on a given condition\nlist_a = [x for x in list if x % 2 == 0]\nlist_b = [x for x in list if x % 2 != 0]\n\nprint(list_a) #[2, 4, 6, 8]\nprint(list_b) #[1, 3, 5, 7] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: <html>\n <head>\n <title>My Portfolio</title>\n </head>\n \n <body>\n <h1>My Portfolio</h1>\n <div>\n  <p>This is my portfolio of projects I have built. I have included a brief description and a link to each one.</p>\n </div>\n \n <div>\n  <h2>Project 1: Shopping App</h2>\n  <p>This is a mobile application written in JavaScript and React Native for users to shop online. It allows users to browse through a catalog of products, add products to their shopping carts, and place orders.</p>\n  <a href=\"https://github.com/username/shopping-app\">See the project on Github</a>\n </div>\n \n <div>\n  <h2>Project 2: Scheduling App</h2>\n  <p>This is a web application written in JavaScript and React for users to manage their appointments and events. It allows users to create events, invite others to events, and sync events with their calendar.</p>\n  <a href=\"https://github.com/username/scheduling-app\">See the project on Github</a>\n </div>\n \n <div>\n  <h2>Project 3: Database Management App</h2>\n  <p>This is a desktop application written in Python and Qt for users to manage their databases. It allows users to view database tables, add and edit records, and delete records.</p>\n  <a href=\"https://github.com/username/database-management-app\">See the project on Github</a>\n </div>\n \n  <footer>\n  <p>Copyright \u00a9 2020 My Portfolio</p>\n  </footer>\n \n </body>\n\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: paragraph = \"Thomas Jefferson was an American statesman, diplomat, lawyer, architect, philosopher and Founding Father who served as the third president of the United States from 1801 to 1809.\"\n\nwords = paragraph.split() \nprint(words)\n# [\"Thomas\", \"Jefferson\", \"was\", \"an\", \"American\", \"statesman,\", \"diplomat,\", \"lawyer,\", \"architect,\", \"philosopher\", \"and\", \"Founding\", \"Father\", \"who\", \"served\", \"as\", \"the\", \"third\", \"president\", \"of\", \"the\", \"United\", \"States\", \"from\", \"1801\", \"to\", \"1809.\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nfor i in range(10):\n    print(random.randint(0, 9)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_kth_smallest(arr, k): \n    n = len(arr) \n  \n    arr.sort() \n  \n    return arr[k-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence_string = 'This is an example sentence with some words.'\nword_list = sentence_string.split(' ')\n\nlongest_word = sorted(word_list, key=len)[-1]\n\nprint(longest_word)\n\n# Output\nsentence but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.svm import SVC\n\nmodel = SVC(kernel = 'linear', probability=True) \nmodel.fit(X, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Initializing the list\nlist1 = [5, 6, 10, -9, 3, 21]\n\n# Maximum and Minimum in a List\n\nmax = list1[0]\nmin = list1[0]\n\n# Print all the list elements\nfor i in range(0, len(list1)):\n    if list1[i]>max:\n        max = list1[i]\n    if list1[i]<min:\n        min = list1[i]\n\nprint(\"The max value is:\", max)\nprint(\"The min value is:\", min) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\n\ndef create_spam_classifier():\n model = Sequential()\n model.add(Dense(128, activation='relu', input_shape=(20,)))\n model.add(Dropout(0.5))\n model.add(Dense(1, activation='sigmoid'))\n \n model.compile(\n optimizer='adam',\n loss='binary_crossentropy',\n metrics=['accuracy']\n )\n\n return model\n\nif __name__ == \"__main__\":\n model = create_spam_classifier() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The best Python library for detecting malicious URLs is URL Observatory. It uses a combination of machine learning and data mining algorithms to detect and flag malicious URLs. It is available on Github and has been tested and found to be reliable. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_all_indices(list, item):\n    result = []\n    for index, i in enumerate(list):\n        if i == item: result.append(index)\n    return result\n\nlist = [1,2,3,4,5,2]\nitem = 2\n\n#find all indices of the item\nindices = find_all_indices(list, item)\n\n#print the indices\nprint(indices) # [1, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def all_palindromic_permutations(myString): \n    if len(myString) == 0: \n        return [''] \n  \n    permutationList = [] \n    for i in range(len(myString)): \n        subString = myString[:i] + myString[i+1:] \n        partList = all_palindromic_permutations(subString) \n  \n        for permutation in partList: \n            if myString[i] == permutation[0]: \n                permutationList.append(myString[i] + permutation + myString[i])\n            else: \n                permutationList.append(permutation + myString[i]) \n   \n    return list(set(permutationList)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def celsius_to_fahrenheit(temp_celsius):\n    temp_fahrenheit = (temp_celsius * 9/5) + 32\n    return temp_fahrenheit\n \ncelsius_to_fahrenheit(20) # Output: 68.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_dict = {\n 'name': 'John',\n 'age': 26,\n 'salary': 5000\n}\n\nfind_key = 'name'\n\nif find_key in my_dict:\n print(my_dict[find_key]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import necessary libraries\nimport re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\n\n# Read input data\nwith open('input.txt', 'r') as f:\n data = f.read()\n\n# Lowercase\ndata = data.lower()\n\n# Clean up punctuation\ndata = re.sub(r'[^\\w\\s]', ' ', data)\n\n# Tokenize words\ndata = nltk.word_tokenize(data)\n\n# Remove stopwords\ndata = [w for w in data if w not in stopwords.words('english')]\n\n# Write cleaned data to file\nwith open('output.txt', 'w') as f:\n f.write(' '.join(data)) but is not the same. just give one example and only return the code."}
