{"prompt": "make some code that functions the same as the following code: sentence = \"The quick brown fox jumped over the lazy dog\"\n\nwords = sentence.split()\nlongest_word = ''\nfor word in words:\n    if len(word) > len(longest_word):\n        longest_word = word\nprint(longest_word) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: int[] nums = {1, 5, 7, 10};\n\nfor (int i : nums) {\n    System.out.println(i);\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n  \nnum = 5\nprint(Fibonacci(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from datetime import date, timedelta\n \nd = date.today() \nprint(d + timedelta(days = 30)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import py_compile\npy_compile.compile(\"<python_code_file>\", cfile=\"<executable_name>\", doraise=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(list):\n    '''This function will sort a given list of numbers without using the built-in function sort()'''\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[i] > list[j]:\n                list[i], list[j] = list[j], list[i]\n    return list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class XmlReader:\n    def __init__(self, file_name):\n        self.file_name = file_name\n    \n    def get_document(self):\n        with open(self.file_name, 'r') as f:\n            doc = f.read()\n            return doc\n    \n    def get_xml_data(self):\n        doc = self.get_document()\n        tree = ElementTree.fromstring(doc)\n        root = tree.getroot()\n        # iterate all elements and attributes\n        return root but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup \n\ndef scrap_cnn():\n #make a request to CNN's homepage\n response = requests.get('https://cnn.com')\n\n # parse the html content\n soup = BeautifulSoup(response.text,'html.parser')\n \n # extract all the headline elements\n headlines = soup.find_all('h3', class_ = 'cd__headline')\n\n # scrape the text from the elements\n news_headlines = [headline.text for headline in headlines]\n \n # return the list of headlines\n return news_headlines\n\n\nif __name__ == \"__main__\":\n headlines = scrap_cnn()\n \n for headline in headlines:\n print(headline) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\n\nname = sys.argv[1]\n\nprint(\"Greetings, \"+name+\"!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nA function to return the squares of an array in Python \n\"\"\"\n\ndef square_array(input_array): \n  squared_array = []\n  for i in input_array: \n    squared_array.append(i*i)\n  return squared_array but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quicksort(array):\n  if len(array) <= 1:\n    return array\n  \n  pivot = array[len(array) // 2]\n  left = [x for x in array if x < pivot]\n  middle = [x for x in array if x == pivot]\n  right = [x for x in array if x > pivot]\n  return quicksort(left) + middle + quicksort(right)\n\n# test\narray = [2, 1, 6, 5, 8]\nprint(quicksort(array)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate code to search for a specific word in an array of strings\n\n\"\"\"\n\nmywords = [\"Hello\", \"World\", \"Python\", \"Programming\"]\nsearch_word = \"Python\"\n\n#Set a boolean flag to track the search\nfound = False\n\n#Loop through the array of strings\nfor word in mywords:\n    #Compare the current word with the search word\n    if word == search_word:\n        #Print out the word if found\n        print(\"Found the word: \" + word)\n        #Set the flag to True\n        found = True\n\n#Check the flag after the loop is complete\nif not found:\n    print(\"Cannot find the word: \" + search_word) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef classify(text):\n    spam_words = [\"free\", \"prize\", \"win\", \"offer\"]\n    is_spam = False\n    for w in spam_words:\n        if re.search(w, text):\n            is_spam = True\n    if is_spam:\n        return \"This is a spam email.\"\n    else:\n        return \"This is not a spam email\"\n    \nprint(classify(\"This email body contains some overly spammy words.\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def total_cost(items):\n    total_cost = 0\n    for item in items:\n        quantity = item[1]\n        unit_price = item[2]\n        total_cost += quantity * unit_price\n    return total_cost but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # print all prime numbers between 1 and 50\nfor num in range(1,51): \n      \n   # prime numbers are greater than 1 \n   if num > 1: \n       for i in range(2,num): \n           if (num % i) == 0: \n               break\n       else: \n           print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import necessary libraries\nimport sys, serial\n\nclass HardwareController:\n    \"\"\"\n    This class allows users to access and control additional hardware components which are connected to the computer via USB.\n    \"\"\"\n\n    def __init__(self):\n        self.serial_port = None\n        self.baud_rate = None\n\n    # Establish connection between computer and hardware component\n    def connect(self, serial_port, baud_rate):\n        try: \n            self.serial_port = serial.Serial(serial_port, baud_rate)\n            self.baud_rate = baud_rate\n            return True\n        except:\n            # Return false and print error if connection fails\n            print(\"Error: Failed to connect to the device. Check baud rate and serial port.\")\n            return False\n\n    # Write data to the hardware component\n    def write(self, data):\n        if self.serial_port.isOpen():\n            self.serial_port.write(data)\n        else:\n            print(\"Error: Device is not connected. Connect to the device first and try again.\")\n\n    # Read data from the hardware component\n    def read(self):\n        if self.serial_port.isOpen():\n            return self.serial_port.readline()\n        else:\n            print(\"Error: Device is not connected. Connect to the device first and try again.\")\n\n    # Disconnect from the hardware component\n    def disconnect(self):\n        self.serial_port.close()\n        self.serial_port = None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to calculate the Mertens function\ndef mertens_function(m):\n    # Initialize the result\n    res = 0\n    \n    # Iterate over all numbers from 1 to m\n    for j in range(1, m+1):\n        res += moebius_function(j)\n    \n    return res\n\n# Function to calculate the Moebius function\ndef moebius_function(n):\n    # Initialize result \n    res = 1\n    \n    # Iterate over all factors\n    for i in range(2, n + 1):\n        cnt = 0\n        while n % i == 0:\n            n = int(n / i)\n            cnt += 1\n           \n        if cnt > 1: \n            res = 0\n            break\n        if cnt == 1: \n            res = -res \n        \n    return res\n\n# Main Program\nm = int(input(\"Enter the range: \"))\n\nres = mertens_function(m)\n\nprint(\"The Mertens function of\", m, \"is\", res) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_consecutive_ones(n):\n    max_ones = 0\n    count = 0\n    while n > 0:\n        if n %2 == 1:\n            count+=1\n            max_ones = max(max_ones, count)\n        else:\n            count = 0\n        n>>=1\n    return max_ones but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_length_dictionary(lst):\n    \"\"\"\n    Creates a dictionary mapping each string to its length in a list\n    \n    Parameters\n    ----------\n    lst : list of strings\n        a list of strings\n    \n    Returns\n    -------\n    dict\n        a dictionary mapping string to its length\n    \"\"\"\n    length_dict = {}\n    for word in lst:\n        length_dict[word] = len(word)\n    return length_dict\n\nif __name__ == '__main__':\n    print(string_length_dictionary([\"Hello\", \"World\", \"I\", \"am\", \"here\"])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def characterCount(string): \n # Create a dictionary to store the count of characters \n charCount = {} \n  \n # Iterate through the characters of the string \n for character in string: \n     # Initialize the count of characters in the dictionary \n     if character in charCount.keys(): \n         charCount[character] += 1\n     else: \n         charCount[character] = 1\n  \n # Print the output \n print(charCount) \n\ncharacterCount(\"Hello World!\") // Outputs: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def celsius_to_fahrenheit(celsius):\n fahrenheit = (celsius * 9/5) + 32\n return fahrenheit\n\ncelsius_to_fahrenheit(30) # returns 86.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n def __init__(self, name, age, gender, blood_group):\n  self.name = name\n  self.age = age\n  self.gender = gender\n  self.blood_group = blood_group but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Imports\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Load the dataset\ndata = np.loadtxt('horse_race_data.txt')\nX_data = data[:, :-1]\ny_data = data[:, -1]\n\n# Split into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(X_data, y_data, test_size=0.2)\n\n# Train the model\nclf = DecisionTreeClassifier()\nclf.fit(X_train, y_train)\n\n# Make predictions\npredictions = clf.predict(X_test)\n\n# Evaluate the model\naccuracy = accuracy_score(y_test, predictions)\nprint('Model accuracy: ' + str(accuracy)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_smaller_elements(nums, target):\n  indices = []\n  for i, num in enumerate(nums):\n    if num < target:\n      indices.append(i)\n  return indices\n  \nresult = find_smaller_elements([2, 3, 4, 5, 6], 4)\nprint(result) # [0, 1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: This function accepts a parameter n which denotes the length of the random string to generate. It creates a string containing all the alphabets, numbers, and special characters. It initializes a result string to store the random string generated and then uses the Python random() method to generate a random index in the range of the length of the alphabets string. It then assigns the character at the random index to the result string and then loops until it generates a string of the given length. Finally, it returns the randomly generated string. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Car:\n def __init__(self, milage, top_speed, manufacturer):\n  self.__milage = milage\n  self.__top_speed = top_speed\n  self.__manufacturer = manufacturer\n  \n  @property\n  def milage(self):\n   return self.__milage\n  \n  @property\n  def top_speed(self):\n   return self.__top_speed\n  \n  @property\n  def manufacturer(self):\n   return self.__manufacturer but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sum = 0\nfor i in range(2,21,2): #Range(start,stop-1,step size)\n sum += i\n\nprint(sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_symmetric(a):\n    n = len(a)\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] != a[j][i]:\n                return False\n    return True\n\nA = [[1,2,3],\n    [-2,0,4],\n    [3,-4,5]]\nprint(is_symmetric(A)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os\nimport shutil\n\n# define a function to move file to designated folder \ndef move_file (src_path, dest_path):\n    shutil.move(src_path, dest_path)\n    print(\"File moved from\", src_path, \"to\", dest_path)\n\n# define source and destination \nsrc_dir = \"./Unfiled_Documents/\"\ndest_dir = \"./Invoices_and_Receipts/\"\n\n# iterate through the files\nfor root, dirs, files in os.walk(src_dir):\n    for file in files: \n        # check the file type \n        filename, file_extension = os.path.splitext(file)\n        if file_extension in ['.pdf', '.odt', '.docx']:\n            # move the file \n            src = os.path.join(root, file)\n            dest = dest_dir + 'invoice_or_receipt' + file_extension\n            move_file(src, dest) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list_of_dicts_asc(list_of_dicts, key):\n    return sorted(list_of_dicts, key=lambda dict: dict[key])\n\nsorted_list_of_dicts = sort_list_of_dicts_asc(list_of_dicts, 'age')\nprint(sorted_list_of_dicts) # prints [{'name': 'Doe', 'age': 22}, {'name': 'John', 'age': 32}, {'name': 'Jane', 'age': 44}] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\n# generate a random string of length 10\ndef generateRandomString(length):\n  letters = string.ascii_letters\n  return ''.join(random.choice(letters) for i in range(length))\n\nrand_string = generateRandomString(10)\nprint(rand_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n):\n    if n<0:\n        print(\"Incorrect input\")\n    # First Fibonacci number is 0\n    elif n==1:\n        return 0\n    # Second Fibonacci number is 1\n    elif n==2:\n        return 1\n    else:\n        return Fibonacci(n-1)+Fibonacci(n-2)\n\n# Driver Program\nprint(Fibonacci(9)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_prime(num):\n    if num == 1:\n        return False\n    for i in range(2,num):\n        if not num % i:\n            return False\n    return True\n\nresult = check_prime(13)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n):\n      \n    # First and second number in the sequence \n    Fib_list = [0, 1]\n    \n    # Generate the Fibonacci sequence up to n terms\n    for i in range(2,n): \n        Fib_list.append(Fib_list[i-2] + Fib_list[i-1])\n    return Fib_list\n\n# Driver code \nn = 5\nprint(Fibonacci(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def contains_duplicates(list):\n    seen = set()\n    for item in list:\n        if item in seen:\n            return True\n        seen.add(item)\n    return False\n \nlist = [1, 3, 2, 4, 5, 3]\n \nprint(contains_duplicates(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_sudoku_valid_pair(word1, word2):\n    is_valid = True\n\n    for i in range(len (word1)):\n        if word1[i] == word2[i]:\n            is_valid = False\n            break \n\n    for i in range (len(word1)):\n        for j in range(len(word2)):\n            if word1[i] == word2[j]:\n                is_valid = False\n                break\n\n    return is_valid \n\nword1 = \u201cready\u201d\nword2 = \u201csteady\u201d\n\nprint(is_sudoku_valid_pair(word1, word2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\nimport random\n\ndef check_sensors():\n    # Get temperature and humidity from sensors\n    temperature = random.randint(20,30)\n    humidity = random.randint(40,60)\n\n    # Decide if the temperature/humidity is within range\n    if (temperature <= 30 and humidity <= 60):\n        # Temperature is ok, but humidity is high\n        if temperature <= 25:\n            # Low temperature, adjust heater\n            adjust_heater()\n        else:\n            # High humidity, adjust dehumidifier\n            adjust_dehumidifier()\n    else:\n        # Temperature or humidity is out of range, shut down the system\n        shut_down_system()\n\ndef adjust_heater():\n    print(\"Heater is being adjusted.\")\n\ndef adjust_dehumidifier():\n    print(\"Dehumidifier is being adjusted.\")\n\ndef shut_down_system():\n    print(\"System is shutting down.\")\n\nwhile True:\n    # Check sensors every 10 seconds\n    check_sensors()\n    time.sleep(10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # install python\nsudo apt-get install python\n\n# install pip\nsudo apt-get install python-pip\n\n# install virtualenv\npip install virtualenv\n\n# create a virtual environment\nvirtualenv myenv\n\n# activate the virtual environment\nsource myenv/bin/activate\n\n# install the dependencies\npip install -r requirements.txt\n\n# deactivate the virtual environment\ndeactivate but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def extract_frequent_words(text):\n    words = text.split()\n    freq_words = {}\n    for word in words:\n        if word not in freq_words:\n            freq_words[word] = 1\n        else:\n            freq_words[word] += 1\n            \n    sorted_words = sorted(freq_words.items(), key=lambda x: x[1], reverse=True)\n\n    return sorted_words[0][0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import necessary modules\nimport numpy as np\nfrom sklearn.model_selection import GridSearchCV\n\n# Define the parameters to optimize\nparameters = {\n 'kernel':('linear', 'rbf'), \n 'C':[1, 10]\n}\n\n# Create a GridSearchCV object\nclf = GridSearchCV(svc, param_grid=parameters)\n\n# Fit the model\nclf.fit(X_train, y_train)\n\n# Print the best parameters \nprint('Best parameters: {}'.format(clf.best_params_))\n\n# Use the best parameters to make predictions\ny_pred = clf.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Define a Node class\nclass Node(object): \n    # Constructor\n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \n# Define a Linkedlist class\nclass LinkedList(object): \n    # Defines the head  \n    def __init__(self): \n        self.head = None\n  \n    # Add a new node at the beginning of the list \n    def prepend(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head \n        self.head = new_node \n  \n    # Add a new node at the end of the list \n    def append(self, new_data): \n        new_node = Node(new_data) \n        if self.head is None: \n            self.head = new_node \n            return \n        last = self.head \n        while last.next: \n            last = last.next\n        last.next = new_node but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import csv\n\nclass Room:\n    def __init__(self, room_name):\n        self.room_name = room_name\n        self.bookings = []\n\n    def book_room(self, date, time, bookedBy):\n        booking_info = {\n            'date': date,\n            'time': time,\n            'bookedBy': bookedBy\n        }\n        self.bookings.append(booking_info)\n\n    def retrieve_room_bookings(self):\n        return self.bookings\n\nrooms = {}\n\nwith open('dataset.csv', 'r') as csv_file:\n    csv_reader = csv.DictReader(csv_file)\n    \n    for row in csv_reader:\n        room_name = row['room']\n        date = row['date']\n        time = row['time']\n        bookedBy = row['bookedBy']\n\n        if room_name not in rooms:\n            rooms[room_name] = Room(room_name)\n\n        rooms[room_name].book_room(date, time, bookedBy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python3 program to find odd numbers in a range  \n\ndef odd_numbers(n): \n    odd_numbers = [] \n      \n    # looping through each number \n    for i in range(1, n + 1): \n        if i % 2 != 0: \n            odd_numbers.append(i) \n    return odd_numbers but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort(arr):\n n = len(arr)\n for i in range(n): \n min_index = i \n for j in range(min(i+1, n)): \n if arr[min_index] > arr[j]: \n arr[i], arr[min_index] = arr[j], arr[i] \nmin_index = j but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(numbers):\n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] > numbers[j]:\n                numbers[i], numbers[j] = numbers[j], numbers[i]\n    return numbers but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1, 1): \n            c = a + b \n            a = b \n            b = c \n        return b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_dict = {}\nfor item in my_list:\n    my_dict[item] = None\n\nprint(my_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_dictionary.pop('city') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def SumOfSquares(x, y):\n return x * (x + y) + y * y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def conv_to_base(number, base):\n # Base case\n if number == 0:\n return \"\"\n \n # Convert the given number\n remainder = number % base\n \n return conv_to_base(number // base, base) + str(remainder) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\njson_dict = json.loads(json_str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def hanoi(n, source, helper, target):\n    if n > 0:\n        # move tower of size n - 1 to helper:\n        hanoi(n - 1, source, target, helper)\n        # move disk from source peg to target peg\n        if source:\n            target.append(source.pop())\n        # move tower of size n-1 from helper to target\n        hanoi(n - 1, helper, source, target) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(n):\n if n == 1:\n return False\n\n for i in range(2,n):\n if n % i == 0:\n return False\n\n return True\n\nn = 11\nprint(is_prime(n)) # Output: True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_word(sentence, word):\n    words = sentence.split(\" \")\n\n    if word in words:\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef random_element(lst):\n return random.choice(lst) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def thirdSmallest(x):\n    y = sorted(x)[2]\n    return y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = 'https://api.example.com/xyz'\n\n# Make a request to the API\nresp = requests.get(url)\n\n# Process the response\ndata = resp.json()\n\n# Do stuff with the response\nfor item in data:\n\tprint(item) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_value(a, b):\n    # Return the maximum of two numbers\n    if a > b:\n        return a\n    else:\n        return b\n\n# Example usage\na = 6\nb = 8\nprint(max_value(a, b)) # 8 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [1, 2, 3, 4, 5]\n \nresult = [value for value in list if value > 2]\n \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_even_in_range(start, end):\n    # Initialise the result\n    result = 0\n\n    # Loop over the Range\n    for i in range(start, end+1):\n        # Check if number is even \n        if i % 2 == 0:\n            result += i\n            \n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_average(scores):\n    return sum(scores)/len(scores) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import xlwt\n\n# Create workbook, worksheet and set the default font\nwb = xlwt.Workbook()\nws = wb.add_sheet('People Information')\nstyle = xlwt.XFStyle()\nfont = xlwt.Font()\nfont.bold = True\nstyle.font = font\n\n# Define the header row and write it\nws.write(0, 0, 'Name', style)\nws.write(0, 1, 'Surname', style)\nws.write(0, 2, 'Age', style)\n\n# Write the content in each row\nfor row_index in range(1, len(information)+1):\n    row = information[row_index-1]\n    ws.write(row_index, 0, row[0])\n    ws.write(row_index, 1, row[1])\n    ws.write(row_index, 2, row[2])\n\n# Save the workbook\nwb.save('PeopleInfo.xls') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculatetax(yearly_income, rate):\n    tax = yearly_income * rate\n    return tax\n\nincome = 70000\nrate = 0.2\ntax_payable = calculatetax(income, rate)\n\nprint(\"Tax payable: \" + str(tax_payable)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_num(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n\na = int(input(\"Enter a number: \"))\nb = int(input(\"Enter another number: \"))\n\nprint(max_num(a, b)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def main():\n nums = range(0,10)\n for num in nums:\n  print(\"The square of\", num,\"is\", num * num)\n\nmain() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def histogram(string):\n  string = string.lower()\n  dic = {}\n  for char in string:\n      if char.isalpha():\n          if char in dic:\n              dic[char] += 1\n          else:\n              dic[char] = 1\n  for char in dic:\n      print(char + ' : ' + str(dic[char]))\n\nhistogram('The quick brown fox jumps over the lazy dog.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(arr):\n    mid = len(arr) // 2\n    for i in range(mid):\n        if arr[i] != arr[len(arr) - 1 - i]:\n            return False\n    return True\n\narr = [1, 2, 3, 2, 1]\nprint(is_palindrome(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import turtle \n\ndef draw_square(some_turtle):\n    for i in range(1,5):\n        some_turtle.forward(100)\n        some_turtle.right(90)\n\n# Create a turtle object\nmy_turtle = turtle.Turtle()\n\n# Draw a figure \ndraw_square(my_turtle) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortAscending(arr): \n  \n    # Traverse through all array elements \n    for i in range(len(arr)): \n  \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n              \n        # Swap the found minimum element with  \n        # the first element         \n        arr[i], arr[min_idx] = arr[min_idx], arr[i] \n  \n# Driver code to test above \narr = [2, 3, 5, 4, 1] \nsortAscending(arr) \n  \nprint (\"Sorted array:\") \nfor i in range(len(arr)): \n    print(arr[i]), but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: filtered_list = [x for x in word_list if keyword not in x]\n# filtered_list = ['hello', 'this', 'word'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_seq(seq1, seq2):\n    if len (seq1) != len (seq2): \n        return False\n    else: \n        for i in range(len (seq1)):\n            if seq1[i] != seq2[i]:\n                return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import libraries\nimport numpy as np\nimport pandas as pd\n\n# create dataset\ndata = [3, 6, 9, 12, 15, 18, 21]\n\n# detect patterns\npatterns = []\nfor n in range(1, len(data)):\n    prev_num = data[n-1]\n    curr_num = data[n]\n\n    if curr_num - prev_num == 3:\n        patterns.append(1)\n    else:\n        patterns.append(0)\n\n# format data\ndf = pd.DataFrame(data)\ndf[\"Patterns\"] = patterns\nprint(df) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_sort(arr):\n  if len(arr) > 1:\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    merge_sort(left)\n    merge_sort(right)\n\n    i = j = k = 0\n    while i < len(left) and j < len(right):\n      if left[i] < right[j]:\n        arr[k] = left[i]\n        i += 1\n      else:\n        arr[k] = right[j]\n        j += 1\n      k += 1\n\n    while i < len(left):\n      arr[k] = left[i]\n      i += 1\n      k += 1\n    while j < len(right):\n      arr[k] = right[j]\n      j += 1\n      k += 1\n  \n  return arr\n\narr = [4, 2, 1, 6, 7, 8, 5]\nmerge_sort(arr)\nprint(arr) # Output [1, 2, 4, 5, 6, 7, 8] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list1 = [1,2,3,4,5,6]\n\n# Reversing the list\nlist1 = list1[::-1] # Output: [6, 5, 4, 3, 2, 1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # find the minimum value using the min function\nmin_value = min(nums)\n\n# print the minimum value\nprint(\"The minimum value is: \",min_value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printEvenNumbers(start, end):\n    for i in range(start, end + 1):\n        if (i % 2 == 0):\n            print(i, end=\" \") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(input_list):\n    # Initialize max value to be the first element of the list\n    max = input_list[0]\n    # Compare each value in the list to the max value \n    for val in input_list:\n        if val > max:\n            max = val\n    # Return the max value\n    return max\n\n# Main function\nlist = [1, 9, -3, 20, 11]\nmax_val = find_max(list)\nprint(\"The maximum value in the list is:\", max_val) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Conversion: \n      \n    def __init__(self, capacity): \n        self.top = -1\n        self.capacity = capacity \n        self.array = [] \n        self.output = [] \n        self.precedence = {'+':1, '-':1, '*':2, '/':2, '^':3} \n      \n    def isEmpty(self): \n        return True if self.top == -1 else False\n      \n    def peek(self): \n        return self.array[-1]\n      \n    def pop(self): \n        if not self.isEmpty(): \n            self.top -= 1\n            return self.array.pop() \n        elsE: \n            return \"$\"\n      \n    def push(self, op): \n        self.top += 1\n        self.array.append(op)\n      \n    def infixToPostfix(self, exp):\n        for i in exp: \n            if i.isalpha(): \n                self.output.append(i)\n            elif i == '(': \n                self.push(i)\n            elif i == ')': \n                while( (not self.isEmpty()) and self.peek() != '('): \n                    a = self.pop() \n                    self.output.append(a) \n                if (not self.isEmpty() and self.peek() != '('): \n                    return -1\n                else: \n                    self.pop()\n            else: \n                while(not self.isEmpty() and self.precedence[i] <= self.precedence[self.peek()]):\n                    self.output.append(self.pop())\n                self.push(i)\n        while not self.isEmpty():\n            self.output.append(self.pop())\n        return \"\".join(self.output)\n\nexp = \"A * B + C\"\nconversion = Conversion(len(exp)) \nresult = conversion.infixToPostfix(exp) \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: group_list = [\"young\", \"middle-aged\", \"elderly\"]\n\nfor age in age_list:\n    if age < 30:\n        print(\"This user is \" + group_list[0] + \".\")\n    elif age > 30 and age < 50:\n        print(\"This user is \" + group_list[1] + \".\")\n    else:\n        print(\"This user is \" + group_list[2] + \".\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #! /bin/bash\npython my_program.py but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(lst): \n    for i in range(len(lst)): \n        for j in range(0, len(lst)-i-1): \n            if lst[j] > lst[j+1] : \n                lst[j], lst[j+1] = lst[j+1], lst[j]\n \nlist = [3,2,5,6,1,4]\nbubble_sort(list)\nprint('Sorted list is: ', list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def aes_enc(user):\n    # generate an initialization vector (change it depending on number of users)\n    iv = \"abcdefghijklmnop\"\n\n    # generate a 16-byte key\n    key = user.encode('utf-8') + len(key).to_bytes(4, byteorder='big')\n    key = SHA256.new(key).digest()\n\n    # create Cipher object\n    cipher = AES.new(key, AES.MODE_CFB, iv)\n\n    # encrypt the plaintext and return the ciphertext with iv\n    ciphertext = cipher.encrypt(plain_text)\n    return iv+ciphertext but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import statistics\n\ndef descriptice_stats(numbers):\n    print(\"Mean:\", statistics.mean(numbers))\n    print(\"Median:\", statistics.median(numbers))\n    print(\"Mode:\", statistics.mode(numbers))\n    print(\"Standard Deviation:\", statistics.stdev(numbers))\n    print(\"Variance:\", statistics.variance(numbers))\n\nif __name__ == '__main__':\n    numbers = [2.3, 4.7, 5.2, 3.7]\n    descriptice_stats(numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: even = []\nodd = []\n\nfor num in N:\n    if num % 2 == 0:\n        even.append(num)\n    else:\n        odd.append(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\n\n#\n# This script will flatten out a folder based docbook manual into a docbot friendly \"flat\" structure\n# (and update links in files accordingly)\n# Author: Michael Neale\n#\n\nimport os, sys, shutil\n\ndef flatten(root, output) :  \n    if not os.path.isdir(output):\n        os.mkdir(output)\n    if not os.path.isdir(os.path.join(output, \"images\")):\n        os.mkdir(os.path.join(output, \"images\"))\n    sections = {}   \n    top_files = []\n    names = os.listdir(root)\n    for name in names:\n        if os.path.isdir(os.path.join(root, name)) :\n            if not name == \".svn\":\n                flattenDir(root, name, output, sections)\n        else:\n            if name.endswith(\".xml\") :\n                top_files.append(name)\n            elif name != \".svn\":\n                shutil.copyfile(os.path.join(root, name), os.path.join(output, name))\n    for file in top_files:        \n        contents = open(os.path.join(root, file), \"r\").read()\n        for section in sections:\n            contents = contents.replace(section, sections[section])\n        outfile = open(os.path.join(output, file), \"w\")\n        outfile.write(contents)\n        \n                    \n            \n            \n\n\ndef flattenDir(root, dir, output, sections):\n    docs = []\n    images = []\n    names = os.listdir(os.path.join(root, dir))\n    for name in names:\n        if name.endswith(\".xml\"):\n            docs.append(name)\n        else:\n            if name != \".svn\":\n                images.append(name)\n                shutil.copyfile(os.path.join(root, dir, name), os.path.join(output, \"images\", dir + \"_\" + name))\n    for doc in docs: \n        new_name = dir + \"_\" + doc\n        sections[dir + \"/\" + doc] = new_name\n        file = open(os.path.join(root, dir, doc), \"r\").read()\n        outfile = open(os.path.join(output, new_name), \"w\")\n        for img in images:\n            file = file.replace(img, \"images/\" + dir + \"_\" + img)\n        outfile.write(file)\n\n        \n\n\nif len(sys.argv) < 2:\n    print \"2 arguments required: <path to root of documentation> <output path>. eg: docbot-masseur.py ./something ./output\"\nelse:\n    flatten(sys.argv[1], sys.argv[2])\n    \n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def permute(nums):\n  res = [] \n  backtrack(nums, res, [])\n  return res\n\ndef backtrack(nums, res, temp):\n  if(len(temp) == len(nums)):\n    res.append(temp[:])\n  else:\n    for num in nums:\n      if num not in temp:\n        temp.append(num)\n        backtrack(nums, res, temp)\n        temp.pop()\n\n#print the result \nnums = [1, 2, 3]\nperms = permute(nums)\nprint(perms) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# A fundamental class for the game\nclass Board:\n    def __init__(self, rows, cols):\n        self.rows = rows\n        self.cols = cols\n        self.grid = [['_' for x in range(cols)] for y in range(rows)]\n\n    def print_board(self):\n        for row in self.grid:\n            print(' '.join(row))\n\ndef place_ship(ship, board):\n    while True:\n        row = random.randint(0, board.rows-1)\n        col = random.randint(0, board.cols-1)\n        if board.grid[row][col] == '_':\n            board.grid[row][col] = ship\n            break\n        else:\n            continue\n\ndef battle(player, board):\n    while True:\n        row = input('Enter a row: ')\n        col = input('Enter a column: ')\n        if board.grid[int(row)][int(col)] == '_':\n            board.grid[int(row)][int(col)] = '<miss>'\n            player.miss += 1\n            print('Miss!')\n        elif board.grid[int(row)][int(col)] == 'BB':\n            board.grid[int(row)][int(col)] = '<hit>'\n            print('Hit!')\n        else:\n            break\n\nclass Player:\n    def __init__(self, ship, miss):\n        self.ship = ship\n        self.miss = miss\n\n# Create a board\nboard = Board(5, 5)\n\n# Place ships on the board\nplace_ship('BB', board)\n\n# Create a player object\nplayer = Player('BB', 0)\n\n# Start the game\nbattle(player, board)\n\n# Print the board\nboard.print_board() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseLinkedList(head):\n    curr = head \n    prev = None\n    while (curr != None): \n        temp = curr.next\n        curr.next = prev \n        prev = curr \n        curr = temp\n    head = prev\n    return head\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n# Create a Linked list \nhead1 = Node(3)\nhead1.next = Node(5)\nhead1.next.next = Node(7)\nhead1.next.next.next = Node(8)\n\nhead1 = reverseLinkedList(head1)\n\ntemp = head1\nwhile(temp != None):\n    print temp.data,\n    temp = temp.next but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_list(list_a, list_b):\n    return [a + b for a, b in zip(list_a, list_b)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -*- coding: utf-8 -*-\n# Copyright (C) 2006 Frederic Back (fredericback@gmail.com)\n# Copyright (C) 2007 Kristoffer Lund\u00e9n (kristoffer.lunden@gmail.com)\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 59 Temple Place, Suite 330, \n# Boston, MA 02111-1307, USA.\n\nimport gtk\nimport gobject\nimport pango\nimport os\nimport re\nimport options\nfrom parserinterface import ClassParserInterface\nimport imagelibrary\n\n#===============================================================================\n\ndef tokenFromString(string):\n    \"\"\" Parse a string containing a function or class definition and return\n        a tuple containing information about the function, or None if the\n        parsing failed.\n\n        Example: \n            \"#def foo(bar):\" would return :\n            {'comment':True,'type':\"def\",'name':\"foo\",'params':\"bar\" } \"\"\"\n\n    try:\n        e = r\"([# ]*?)([a-zA-Z0-9_]+)( +)([a-zA-Z0-9_\\?\\!<>\\+=\\.]+)(.*)\"\n        r = re.match(e,string).groups()\n        token = Token()\n        token.comment = '#' in r[0]\n        token.type = r[1]\n        token.name = r[3]\n        token.params = r[4]\n        token.original = string\n        return token\n    except: return None # return None to skip if unable to parse\n    \n    def test():\n        pass\n\n#===============================================================================\n\nclass Token:\n    def __init__(self):\n        self.type = None\n        self.original = None # the line in the file, unparsed\n\n        self.indent = 0\n        self.name = None\n        self.comment = False # if true, the token is commented, ie. inactive\n        self.params = None   # string containing additional info\n        self.expanded = False\n\n        self.access = \"public\"\n\n        # start and end points\n        self.start = 0\n        self.end = 0\n\n        self.rubyfile = None\n        self.path = None # save the position in the browser\n\n        self.parent = None\n        self.children = []\n\n    def get_endline(self):\n        \"\"\" Get the line number where this token's declaration, including all\n            its children, finishes. Use it for copy operations.\"\"\"\n        if len(self.children) > 0:\n            return self.children[-1].get_endline()\n        return self.end\n\n        def test_nested():\n            pass\n            \n    def get_toplevel_class(self):\n        \"\"\" Try to get the class a token is in. \"\"\"\n            \n        if self.type == \"class\":\n            return self    \n\n        if self.parent is not None:\n            tc = self.parent.get_toplevel_class()\n            if tc is None or tc.type == \"file\": return self #hack\n            else: return tc\n                \n        return None\n\n    def printout(self):\n        for r in range(self.indent): print \"\",\n        print self.name,\n        if self.parent: print \" (parent: \",self.parent.name       \n        else: print\n        for tok in self.children: tok.printout()\n\n#===============================================================================\n\nclass RubyFile(Token):\n    \"\"\" A class that represents a ruby file.\n        Manages \"tokens\", ie. classes and functions.\"\"\"\n\n    def __init__(self, doc):\n        Token.__init__(self)\n        self.doc = doc\n        self.uri = doc.get_uri()\n        self.linestotal = 0 # total line count\n        self.type = \"file\"\n        self.name = os.path.basename(self.uri)\n        self.tokens = []\n\n\n    def getTokenAtLine(self, line):\n        \"\"\" get the token at the specified line number \"\"\"\n        for token in self.tokens:\n            if token.start <= line and token.end > line:\n                return self.__findInnermostTokenAtLine(token, line)\n        return None\n\n    def __findInnermostTokenAtLine(self, token, line):\n        \"\"\"\" ruby is parsed as nested, unlike python \"\"\"\n        for child in token.children:\n            if child.start <= line and child.end > line:\n                return self.__findInnermostTokenAtLine(child, line)\n        return token\n\n\n    def parse(self, verbose=True):\n\n        #if verbose: print \"parse ----------------------------------------------\"\n        newtokenlist = []\n\n        self.children = []\n\n        currentParent = self\n\n        self.linestotal = self.doc.get_line_count()\n\n        text = self.doc.get_text(*self.doc.get_bounds())\n        linecount = -1\n        ends_to_skip = 0\n        \n        access = \"public\"\n        \n        for line in text.splitlines():\n            linecount += 1\n            lstrip = line.lstrip()\n            ln = lstrip.split()\n            if len(ln) == 0: continue\n            if ln[0] == '#': continue\n            \n            if ln[0] in (\"class\",\"module\",\"def\"):\n                token = tokenFromString(lstrip)\n                if token is None: continue\n                token.rubyfile = self\n                token.start = linecount\n                if token.type == \"def\":\n                    token.access = access\n                    \n                #print \"line\",linecount\n                #print \"name\", token.name\n                #print \"type\",token.type\n                #print \"access\",token.access\n                #print \"to\",currentParent.name\n                \n                currentParent.children.append(token)\n                token.parent = currentParent\n                currentParent = token\n                newtokenlist.append(token)\n                \n                \n                idx = len(newtokenlist) - 1\n                if idx < len(self.tokens):\n                    if newtokenlist[idx].original == self.tokens[idx].original:\n                        newtokenlist[idx].expanded = self.tokens[idx].expanded\n                \n            elif ln[0] in(\"begin\",\"while\",\"until\",\"case\",\"if\",\"unless\",\"for\"):\n                    ends_to_skip += 1\n                    \n            elif ln[0] in (\"attr_reader\",\"attr_writer\",\"attr_accessor\"):\n                for attr in ln:\n                    m = re.match(r\":(\\w+)\",attr)\n                    if m:\n                        token = Token()\n                        token.rubyfile = self\n                        token.type = 'def'\n                        token.name = m.group(1)\n                        token.start = linecount\n                        token.end = linecount\n                        token.original = lstrip\n                        currentParent.children.append(token)\n                        token.parent = currentParent\n                        newtokenlist.append(token)\n            \n            elif re.search(r\"\\sdo(\\s+\\|.*?\\|)?\\s*(#|$)\", line):\n                #print \"do\",line\n\n                # Support for new style RSpec\n                if re.match(r\"^(describe|it|before|after)\\b\", ln[0]):\n                    token = Token()\n                    token.rubyfile = self\n                    token.start = linecount\n                    \n                    if currentParent.type == \"describe\":                    \n                        if ln[0] == \"it\":\n                            token.name = \" \".join(ln[1:-1])\n                        else:\n                            token.name = ln[0]\n                        token.type = \"def\"\n                    elif ln[0] == \"describe\":\n                        token.type = \"describe\"\n                        token.name = \" \".join(ln[1:-1])\n                    else:\n                        continue\n                    currentParent.children.append(token)\n                    token.parent = currentParent\n                    currentParent = token\n                    newtokenlist.append(token)\n\n                # Deprectated support for old style RSpec, will be removed later\n                elif ln[0] in (\"context\",\"specify\",\"setup\",\"teardown\",\"context_setup\",\"context_teardown\"):\n                    token = Token()\n                    token.rubyfile = self\n                    token.start = linecount\n                    \n                    if currentParent.type == \"context\":                    \n                        if ln[0] == \"specify\":\n                            token.name = \" \".join(ln[1:-1])\n                        else:\n                            token.name = ln[0]\n                        token.type = \"def\"\n                    elif ln[0] == \"context\":\n                        token.type = \"context\"\n                        token.name = \" \".join(ln[1:-1])\n                    else:\n                        continue\n                    currentParent.children.append(token)\n                    token.parent = currentParent\n                    currentParent = token\n                    newtokenlist.append(token)\n                else:\n                    ends_to_skip += 1\n                \n            elif ln[0] in (\"public\",\"private\",\"protected\"):\n                if len(ln) == 1:\n                    access = ln[0]\n                    \n            if re.search(r\";?\\s*end(?:\\s*$|\\s+(?:while|until))\", line):\n                if ends_to_skip > 0:\n                    ends_to_skip -= 1\n                else:\n                  token = currentParent\n                  #print \"end\",currentParent.name\n                  token.end = linecount\n                  currentParent = token.parent\n                \n\n        # set new token list\n        self.tokens = newtokenlist\n        return True\n\n\n#===============================================================================\n\nclass RubyParser( ClassParserInterface ):\n    \n    def __init__(self):\n        self.rubyfile = None\n\n\n    def appendTokenToBrowser(self, token, parentit ):\n        it = self.__browsermodel.append(parentit,(token,))\n        token.path = self.__browsermodel.get_path(it)\n        #print token.path\n        #if token.parent:\n        #    if token.parent.expanded:\n        #        self.browser.expand_row(token.parent.path,False)\n        #        pass\n        for child in token.children:\n            self.appendTokenToBrowser(child, it)\n\n\n    def parse(self, doc):\n        \"\"\" \n        Create a gtk.TreeModel with the class elements of the document\n        \n        The parser uses the ctags command from the shell to create a ctags file,\n        then parses the file, and finally populates a treemodel.\n        \"\"\"\n    \n        self.rubyfile = RubyFile(doc)\n        self.rubyfile.parse(options.singleton().verbose)\n        self.__browsermodel = gtk.TreeStore(gobject.TYPE_PYOBJECT)\n        for child in self.rubyfile.children:\n            self.appendTokenToBrowser(child,None)\n        return self.__browsermodel\n\n        \n    def __private_test_method(self):\n        pass\n\n\n    def get_tag_position(self, model, path):\n        tok = model.get_value( model.get_iter(path), 0 )\n        try: return tok.rubyfile.uri, tok.start+1\n        except: return None\n\n\n    def current_line_changed(self, model, doc, line):\n\n        # parse again if line count changed\n        if abs(self.rubyfile.linestotal - doc.get_line_count()) > 0:\n            if abs(self.rubyfile.linestotal - doc.get_line_count()) > 5:\n                if options.singleton().verbose:\n                    print \"RubyParser: refresh because line dif > 5\"\n                self.rubyfile.parse()\n            else:\n                it = doc.get_iter_at_line(line)\n                a = it.copy(); b = it.copy()\n                a.backward_line(); a.backward_line()\n                b.forward_line(); b.forward_line()\n\n                t = doc.get_text(a,b)\n                if t.find(\"class\") >= 0 or t.find(\"def\") >= 0:\n                    if options.singleton().verbose:\n                        print \"RubyParser: refresh because line cound changed near keyword\"\n                    self.rubyfile.parse()\n \n\n    def get_tag_at_line(self, model, doc, linenumber):\n        t = self.rubyfile.getTokenAtLine(linenumber)\n        #print linenumber,t\n        if t: return t.path\n\n\n    def cellrenderer(self, column, ctr, model, it):\n\n        \"\"\" Render the browser cell according to the token it represents. \"\"\"\n        tok = model.get_value(it,0)\n\n        weight = 400\n        style = pango.STYLE_NORMAL\n        name = tok.name#+tok.params\n        colour = options.singleton().colours[ \"function\" ]\n\n        # set label and colour\n        if tok.type == \"class\":\n            name = \"class \"+name\n            colour = options.singleton().colours[ \"class\" ]\n            weight = 600\n            \n        elif tok.type == \"module\":\n            name = \"module \"+name\n            colour = options.singleton().colours[ \"namespace\" ]\n            weight = 600\n            \n        # new style RSpec\n        elif tok.type == \"describe\":\n            name = \"describe \"+name\n            colour = options.singleton().colours[ \"namespace\" ]\n            weight = 600\n        \n        # Old style RSpec, deprecated    \n        elif tok.type == \"context\":\n            name = \"context \"+name\n            colour = options.singleton().colours[ \"namespace\" ]\n            weight = 600\n            \n        elif tok.type == \"def\":\n            colour = options.singleton().colours[ \"member\" ]\n            \n        if tok.comment: name = \"#\"+name\n\n        # assing properties\n        ctr.set_property(\"text\", name)\n        ctr.set_property(\"style\", style)\n        ctr.set_property(\"foreground-gdk\", colour)\n\n\n    def pixbufrenderer(self, column, crp, model, it):\n        tok = model.get_value(it,0)\n\n        icon = \"default\"\n\n        if tok.type == \"class\":\n            icon = \"class\"\n        elif tok.type == \"module\":\n            icon = \"namespace\"\n        elif tok.type == \"describe\":\n            icon = \"namespace\"\n        elif tok.type == \"context\":\n            icon = \"namespace\"\n        elif tok.type == \"def\":\n            if tok.access == \"public\":\n                icon = \"method\"\n            elif tok.access == \"protected\":\n                icon = \"method_prot\"\n            elif tok.access == \"private\":\n                icon = \"method_priv\"\n                \n        crp.set_property(\"pixbuf\",imagelibrary.pixbufs[icon])\n\n        \n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\n\nprint(f'Current Date and Time: {datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calc_avg(nums):\n    total = 0\n    for n in nums:\n        total += n\n \n    return total/len(nums)\n \navg = calc_avg([5, 10, 15, 20, 25])\nprint(avg) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def celsius_to_fahrenheit(temp):\n    return temp * (9/5) + 32 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def process_data(input):\n data_dict = {}\n keys = list(input.keys())\n values = list(input.values())\n \n sorted_keys = sorted(keys, key=lambda i: input[i])\n sorted_values = sorted(values, reverse=True)\n \n for i in range(len(sorted_keys)):\n data_dict[sorted_keys[i]] = sorted_values[i]\n \n return data_dict\n \ndata = { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5 }\nprint(process_data(data))\n \n# Output: {'a': 5, 'b': 4, 'c': 3, 'd': 2, 'e': 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter \n\ndef most_frequent_item(given_list):\n    # Use Counter to count the occurrences of each item\n    item_counter = Counter(given_list) \n    # Get the most frequent item and its frequency\n    most_freq_item, freq = item_counter.most_common(1)[0] \n    return most_freq_item\n\n# Test\ngiven_list = [1, 2, 3, 4, 4, 1, 2, 3, 3]\nresult = most_frequent_item(given_list)\nprint(f\"The most frequent item in {given_list} is {result}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for x in range(1, 11):\n    y = 10//x\n    if x*y == 10:\n        print(x, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from datetime import date\n\ndef days_between_dates(date1, date2):\n    d0 = date(date1[0], date1[1], date1[2])\n    d1 = date(date2[0], date2[1], date2[2])\n    return abs((d1 - d0).days)\n\ndate1 = [2020, 8, 1]\ndate2 = [2020, 8, 11]\n\nprint(days_between_dates(date1, date2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class validateIP:\n    def __init__(self, ip_address):\n        self.ip_address = ip_address\n    \n    def validate(self):\n        ip_segments = self.ip_address.split(\".\")\n        if len(ip_segments) != 4:\n            return False\n        \n        for segment in ip_segments:\n            number = int(segment)\n            if number < 0 or number > 255:\n                return False\n        \n        return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Check if the string is valid according to the rules:\ndef check_string_validity(input_string, rules):\n    valid = True\n    for char in input_string:\n        if char.islower() or char.isdigit():\n            continue\n        else:\n            valid = False\n            break\n    return valid\n\n# Get the result:\nvalidity = check_string_validity(\"Better than ever\", \"String should contain only lower case characters and digits\")\nprint(validity)\n# Output: False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #This program reads a 2D array of numbers from a text file and computes the sum of each row in the array\n\nfrom collections import deque\n\nwith open('arr.txt') as f:\n arr = deque([float(x) for x in next(f).split()]) # read numbers from a line in a file\n result = 0\n while arr:\n result += arr.popleft()\n print(\"Sum of the row: \", result) but is not the same. just give one example and only return the code."}
