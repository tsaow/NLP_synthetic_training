{"prompt": "make some code that functions the same as the following code: def armstrong_numbers(n):\n # Generate numbers up to 10^n\n for i in range(10**(n - 1), 10**n):\n  # Convert the number to a list of digits\n  digits = [int(d) for d in str(i)]\n \n  # Calculate the sum of the nth powers of the digits\n  sum_of_nth_powers = 0\n  for d in digits:\n   sum_of_nth_powers += d**n\n \n  # If the sum is equal to the original number, it is an Armstrong number\n  if sum_of_nth_powers == i:\n   print(i)\n \nn = 3\narmstrong_numbers(n)\n\n# Output \n153 \n370 \n371 \n407 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: cur.execute(\"UPDATE orders SET customer_name = %s, price = %s WHERE order_id = %s\", (customer_name, price, order_id))\nconn.commit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def kth_smallest(input_array, k):\n    input_array.sort()\n    return input_array[k-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nnums = random.sample(range(100), 10)\ntotal = 0\n\nfor num in nums:\n    total += num\n\nprint(total) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Neuron class\nclass Neuron:\n    # Initialize inputs and weights\n    def __init__(self, numInputs):\n        self.weights = []\n        for i in range(numInputs):\n            self.weights.append(random.uniform(-1, 1))\n\n    # Process inputs and produce output\n    def process(self, inputs):\n        # Multiply inputs by weights\n        output = 0\n        for i in range(len(self.weights)):\n            output += self.weights[i] * inputs[i]\n\n        # Use sigmoid function to normalize result\n        return 1 / (1 + math.exp(-output)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_to_string(int_list):\n  return ' '.join(str(x) for x in int_list)\n\nint_list = [56, 23, 7]\nprint(list_to_string(int_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # function to approximate pi\ndef approximate_pi(accuracy):\n pi = 0 \n iteration = 0\n # set precision point\n precision = 10 ** -accuracy\n while True:\n  pi += (4 / (2 * iteration + 1)) * ((-1) ** iteration) \n  # terminates if the difference in pi is less than given accuracy\n  if abs((pi - 3.14) > precision):\n   break\n  iteration += 1\n \n return round(pi, accuracy)\n \n # example\naccuracy = 2\nprint(approximate_pi(accuracy))\n\n# Output: 3.14 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add(x, y):\n    return x + y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: customer = {\n    'name': \"John Doe\",\n    'address': \"1234 Anystreet Anytown, ST 12345\",\n    'email': \"johnd@example.com\",\n    'phone': \"123-456-7890\"\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ntext = \"hey this is a string to match for a pattern\"\npattern = \"match\"\n\n# Find all matches\nmatches = re.findall(pattern, text)\n\n# Print the matches\nprint(matches)\n# Output: ['match'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: We can use the float() function to convert a string to float in Python. We can pass the string to the function as an argument and it will return the float representation of the same.\n\nExample:\n\nstring_value = \"12.45\"\nfloat_value = float(string_value)\n\nprint(float_value) #Output: 12.45 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def grade_test(scores):\n    total = 0\n    for score in scores:\n        total += score\n\n    if total >= 40:\n        return \"Pass\"\n    else:\n        return \"Fail\"\n\nscores = [5, 10, 15]\ngrade = grade_test(scores)\nprint(\"Grade: \" + grade) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from rasa_nlu.model import Interpreter\n\ninterpreter = Interpreter.load('./models/nlu/default/model')\n\ndef ask_question(question):\n result = interpreter.parse(question)\n intent = result['intent']['name']\n\nif intent == 'python_while_loop':\n #return answer to \"What is a while loop?\"\nelif intent == 'python_list_dictionary':\n #return answer to \"What is the difference between a list and a dictionary?\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import csv\n\ndef preprocess_data(in_file):\n    '''This function preprocesses a csv file into a list containing tuples with max four columns per row.'''\n    with open(in_file) as fin:\n        reader = csv.reader(fin)\n        data = [line[:4] for line in reader]\n        return [tuple(line) for line in data] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: array = [1, 2, 3] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_number_divisors(x): \n    count = 0\n    for i in range(1, x+1): \n        if x % i == 0: \n            count = count + 1\n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sieve_of_eratosthenes(n):\n primes = [True for i in range(n+1)]\n p = 2\n \n while (p * p <= n):\n \n if (primes[p] == True):\n \n for i in range(p *2, n+1, p):\n primes[i] = False\n p += 1\n \n primes[0] = False\n primes[1] = False\n \n prime_numbers = []\n \n for i in range(n+1):\n if primes[i]:\n prime_numbers.append(i)\n \n return prime_numbers\n\nprint(sieve_of_eratosthenes(20)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def overlap(intervals1, intervals2):\n    max_overlap = 0\n    for i in range(len(intervals1)):\n        for j in range(len(intervals2)):\n            overlap = min(intervals1[i][1], intervals2[j][1]) - max(intervals1[i][0], intervals2[j][0]) \n            max_overlap = max(max_overlap, overlap)\n    return max_overlap\n\nresult = overlap([[1,4], [7, 10], [3, 5]], [[2,5], [6,9]])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # define the set of words\nwords = {\n 'adjective': ['funny', 'beautiful', 'tall'],\n 'noun': ['cat', 'dog', 'computer'],\n 'verb': ['jump', 'run', 'walk']\n}\n\n# function for getting user input\ndef get_input(type):\n print(\"Enter a %s\" % type)\n return input()\n\n# function for getting a random word\ndef get_random_word(type):\n import random\n return random.choice(words[type])\n\n# main function\ndef play_game():\n print(\"Welcome to Mad Libs! Let's get started!\")\n\n# get user input\nadjective1 = get_input('adjective')\nnoun1 = get_input('noun')\nverb1 = get_input('verb')\n\n# get random words\nadjective2 = get_random_word('adjective')\nnoun2 = get_random_word('noun')\nverb2 = get_random_word('verb')\n\n# create mad lib\nmad_lib = \"The %s %s %s over the %s %s and then %s away!\" % (adjective1, noun1, verb1, adjective2, noun2, verb2)\n\n# print mad lib\nprint(mad_lib) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseStrings(data):\n return [string[::-1] for string in data]\n\n reversedStrings = reverseStrings(data)\n print(reversedStrings) # [\"olleH\", \"dlroW\", \"ooF\", \"raB\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/bin/env python\n\n# Translated into python from C++ tutorial at\n# http:#trac.openscenegraph.org/projects/osg/wiki/Support/Tutorials/Textures\n\nfrom osgpypp import osg, osgDB, osgViewer\nimport sys\n\n# Creating Textured Geometry using StateSets\n# Goals\n\n# Add a texture to geometry defined by OpenGL drawing primitives introduced in \n# tutorial Basic geometry.\n# Background\n\n# The previous tutorial introduced viewing scenes that include basic shapes \n# created from OpenGL primitives. This section explains how to add textures to \n# these shapes. To make the code easier to use, we'll put the pyramid code \n# into a function that creates a geode and returns a pointer to it. The \n# following code is from tutorial Basic geometry.\n\ndef createPyramid():\n    pyramidGeode = osg.Geode()\n    pyramidGeometry = osg.Geometry()\n    pyramidGeode.addDrawable(pyramidGeometry) \n\n    # Specify the vertices:\n    pyramidVertices = osg.Vec3Array()\n    pyramidVertices.append( osg.Vec3(0, 0, 0) ) # front left \n    pyramidVertices.append( osg.Vec3(2, 0, 0) ) # front right \n    pyramidVertices.append( osg.Vec3(2, 2, 0) ) # back right \n    pyramidVertices.append( osg.Vec3( 0,2, 0) ) # back left \n    pyramidVertices.append( osg.Vec3( 1, 1,2) ) # peak\n\n    # Associate this set of vertices with the geometry associated with the \n    # geode we added to the scene.\n    pyramidGeometry.setVertexArray( pyramidVertices )\n\n    # Create a QUAD primitive for the base by specifying the \n    # vertices from our vertex list that make up this QUAD:\n    pyramidBase = osg.DrawElementsUInt(osg.PrimitiveSet.QUADS, 0)\n    pyramidBase.append(3)\n    pyramidBase.append(2)\n    pyramidBase.append(1)\n    pyramidBase.append(0)\n\n    # Add this primitive to the geometry: \n    # pyramidGeometry.addPrimitiveSet(pyramidBase)\n    # code to create other faces goes here!\n    pyramidGeometry.addPrimitiveSet(pyramidBase) \n    # Repeat the same for each of the four sides. Again, vertices are specified in counter-clockwise order. \n    pyramidFaceOne = osg.DrawElementsUInt(osg.PrimitiveSet.TRIANGLES, 0)\n    pyramidFaceOne.append(0)\n    pyramidFaceOne.append(1)\n    pyramidFaceOne.append(4)\n    pyramidGeometry.addPrimitiveSet(pyramidFaceOne)\n\n    pyramidFaceTwo = osg.DrawElementsUInt(osg.PrimitiveSet.TRIANGLES, 0)\n    pyramidFaceTwo.append(1)\n    pyramidFaceTwo.append(2)\n    pyramidFaceTwo.append(4)\n    pyramidGeometry.addPrimitiveSet(pyramidFaceTwo)\n\n    pyramidFaceThree = osg.DrawElementsUInt(osg.PrimitiveSet.TRIANGLES, 0)\n    pyramidFaceThree.append(2)\n    pyramidFaceThree.append(3)\n    pyramidFaceThree.append(4)\n    pyramidGeometry.addPrimitiveSet(pyramidFaceThree)\n\n    pyramidFaceFour = osg.DrawElementsUInt(osg.PrimitiveSet.TRIANGLES, 0)\n    pyramidFaceFour.append(3)\n    pyramidFaceFour.append(0)\n    pyramidFaceFour.append(4)\n    pyramidGeometry.addPrimitiveSet(pyramidFaceFour)\n\n    colors = osg.Vec4Array()\n    colors.append(osg.Vec4(1.0, 0.0, 0.0, 1.0) ) #index 0 red\n    colors.append(osg.Vec4(0.0, 1.0, 0.0, 1.0) ) #index 1 green\n    colors.append(osg.Vec4(0.0, 0.0, 1.0, 1.0) ) #index 2 blue\n    colors.append(osg.Vec4(1.0, 1.0, 1.0, 1.0) ) #index 3 white\n    colors.append(osg.Vec4(1.0, 0.0, 0.0, 1.0) ) #index 4 red\n\n    pyramidGeometry.setColorArray(colors)\n    pyramidGeometry.setColorBinding(osg.Geometry.BIND_PER_VERTEX)\n\n    # Since the mapping from vertices to texture coordinates is 1:1, \n    # we don't need to use an index array to map vertices to texture\n    # coordinates. We can do it directly with the 'setTexCoordArray' \n    # method of the Geometry class. \n    # This method takes a variable that is an array of two dimensional\n    # vectors (osg.Vec2). This variable needs to have the same\n    # number of elements as our Geometry has vertices. Each array element\n    # defines the texture coordinate for the cooresponding vertex in the\n    # vertex array.\n    texcoords = osg.Vec2Array(5)\n    texcoords[0].set(0.00,0.0) # tex coord for vertex 0 \n    texcoords[1].set(0.25,0.0) # tex coord for vertex 1 \n    texcoords[2].set(0.50,0.0) # \"\"\n    texcoords[3].set(0.75,0.0) # \"\" \n    texcoords[4].set(0.50,1.0) # \"\"\n    pyramidGeometry.setTexCoordArray(0,texcoords)\n\n    return pyramidGeode\n\n\n# Loading a Texture, Creating a State Set, assigning it to a Node\n\n# The method for rendering primitives is controlled using StateSets. This \n# section of code demonstrates how to load a texture from file, create a \n# StateSet in which this texture is enabled, and assign this StateSet to a \n# node in the scene. The first section starts out the same as previous \n# tutorials. Initialize a viewer and build a scene with a single pyramid.\n\n# Declare a group to act as root node of a scene:\nroot = osg.Group()\npyramidGeode = createPyramid()\nroot.addChild(pyramidGeode)\n\n# Now for adding a texture. Here we'll declare a texture instance and set \n# its data variance as 'DYNAMIC'. (If we don't declare the texture as dynamic, \n# some of the osg's optimization routines could remove it.) The texture class \n# encapsulates OpenGL texture modes (wrap, filiter, etc.) as well as an \n# osg.Image. The code below shows how to read an osg.Image instance from a \n# file and associate this image with a texture.\n\nKLN89FaceTexture = osg.Texture2D()\n\n# protect from being optimized away as static state:\nKLN89FaceTexture.setDataVariance(osg.Object.DYNAMIC) \n\n# load an image by reading a file: \nklnFace = osgDB.readImageFile(\"KLN89FaceB.tga\")\nif klnFace is None:\n    print \" Couldn't find texture, quitting.\"\n    sys.exit(-1)\n\n# Assign the texture to the image we read from file: \nKLN89FaceTexture.setImage(klnFace)\n\n# Textures can be associated with rendering StateSets. The next step is to \n# create a StateSet, associate and enable our texture with this state set and \n# assign the StateSet to our geometry.\n\n# Create a StateSet with default settings: \nstateOne = osg.StateSet()\n\n# Assign texture unit 0 of our StateSet to the texture \n# we just created and enable the texture.\nstateOne.setTextureAttributeAndModes(0, KLN89FaceTexture, osg.StateAttribute.ON)\n# Associate this state set with the Geode that contains\n# the pyramid: \npyramidGeode.setStateSet(stateOne)\n\n# The last step is the simulation loop:\n\nviewer = osgViewer.Viewer()\n\n#The final step is to set up and enter a simulation loop.\nviewer.setSceneData( root )\n\nviewer.run()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def repeat(n, w):\n    for i in range(n):\n        print(w)\n\nrepeat(3, \"Hello\")  # Output: Hello Hello Hello but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\ndef most_frequent_words(passage):\n    word_list = passage.split() \n    word_freq = Counter(word_list) \n  \n    most_freq_word = word_freq.most_common(1) \n    return most_freq_word but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import imaplib\nimport email\nimport os\n\n# Source mailbox settings, assuming IMAP\nsource_mailbox = \"<path to source mailbox>\"\nsource_mailbox_username = \"<source mailbox username>\"\nsource_mailbox_password = \"<source mailbox password>\"\n\n# Destination mailbox settings, assuming IMAP\ndestination_mailbox = \"<path to destination mailbox>\"\ndestination_mailbox_username = \"<destination mailbox username>\"\ndestination_mailbox_password = \"<destination mailbox password>\"\n\n# Establish connection to source mailbox\ntry:\n source_imap = imaplib.IMAP4_SSL(source_mailbox)\n except imaplib.IMAP4.error:\n print('Failed to connect to source mailbox. Exiting...')\n sys.exit(-1)\n\n# Establish connection to destination mailbox\ntry:\n destination_imap = imaplib.IMAP4_SSL(destination_mailbox)\n except imaplib.IMAP4.error:\n print('Failed to connect to destination mailbox. Exiting...')\n sys.exit(-1)\n\n# Login to source mailbox\ntry:\n source_imap.login(source_mailbox_username, source_mailbox_password)\n except imaplib.IMAP4.error:\n print('Failed to login to source mailbox. Exiting...')\n sys.exit(-1)\n\n# Login to destination mailbox\ntry:\n destination_imap.login(destination_mailbox_username, destination_mailbox_password)\n except imaplib.IMAP4.error:\n print('Failed to login to destination mailbox. Exiting...')\n sys.exit(-1)\n\n# Establish connection to source mailbox\ntry:\n source_imap.select()\n except imaplib.IMAP4.error:\n print('Failed to select source mailbox. Exiting...')\n sys.exit(-1)\n\n# Establish connection to destination mailbox\ntry:\n destination_imap.select()\n except imaplib.IMAP4.error:\n print('Failed to select destination mailbox. Exiting...')\n sys.exit(-1)\n\n# Read emails from source and copy to destination mailbox\n_, messages = source_imap.search(None, 'ALL')\n \nfor message in messages[0].split():\n _, data = source_imap.fetch(message, '(RFC822)')\n msg = email.message_from_bytes(data[0][1])\n source_imap.store(message, '+FLAGS', '\\\\Deleted')\n destination_imap.append(\n destination_mailbox,\n None,\n None,\n msg.as_bytes())\n\n# Commit changes to source mailbox\nsource_imap.expunge()\n\n# Log out of source and destination mailbox\nsource_imap.close()\nsource_imap.logout()\ndestination_imap.close()\ndestination_imap.logout() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findMaxElement(array):\n    maxElement = 0\n    for element in array:\n        if element > maxElement:\n            maxElement = element\n    return maxElement\n\narray = [10, 15, 20, 11, 99] \nmaxElement = findMaxElement(array)\nprint(\"The maximum element in the array is\", maxElement) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def crop_list(input_list, length):\n    output_list = []\n    for i in range(length):\n        output_list.append(input_list[i])\n    return output_list\n\nmy_list = [1, 2, 3, 4, 5, 6]\nlength = 4\nresult = crop_list(my_list, length)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \nfrom bs4 import BeautifulSoup \n\ndef crawl_page(url): \n    page = requests.get(url) \n    soup = BeautifulSoup(page.content, 'html.parser') \n    return [link.get('href') for link in soup.find_all('a')] \n\nurl = \"https://www.example.com\"\nlinks = crawl_page(url)\nfor link in links:\n print(link) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def has_special_characters(string):\n    import re\n    return bool(re.search('[^a-zA-Z0-9]', string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def title_case(string):\n    convert_string = string.split(\" \")\n    title_string = \"\"\n    for each_word in convert_string: \n        first_letter = each_word[0].upper()\n        other_letters = each_word[1:].lower()\n        title_string += first_letter + other_letters + \" \"\n    return title_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport re\n\ndef scrape_phone_numbers(urls):\n    phone_numbers = []\n    for url in urls:\n        response = requests.get(url)\n        numbers = re.findall(\"([+]\\d{2}\\s?0?\\d{10})\", response.text)\n        phone_numbers.extend(numbers)\n    return phone_numbers but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    if n == 0:\n        return 1\n    \n    return n * factorial(n-1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def eval_expr(expr):\n stack = []\n tokens = expr.split()\n \n for token in tokens:\n if token == '+':\n n1 = stack.pop()\n n2 = stack.pop()\n stack.append(n1 + n2)\n elif token == '-':\n n1 = stack.pop()\n n2 = stack.pop()\n stack.append(n2 - n1)\n elif token == '*':\n n1 = stack.pop()\n n2 = stack.pop()\n stack.append(n1 * n2)\n elif token == '/':\n n1 = stack.pop()\n n2 = stack.pop()\n stack.append(n2 / n1)\n else:\n stack.append(int(token))\n \n return stack[0]\n\nprint(eval_expr('5 + 3 * 4')) # 17 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize_sort(items):\n  sorted_items = sorted(items)\n  return sorted_items but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef calculate_area(shape, *args):\n if shape == 'circle':\n radius = args[0]\n return math.pi * radius * radius\n \n elif shape == 'square':\n side_length = args[0]\n return side_length * side_length\n \n elif shape == 'triangle':\n base, height = args\n return 0.5 * base * height\n \n elif shape == 'rectangle':\n length, width = args\n return length * width\n \nelse:\n return 'Invalid shape'\n\nif __name__ == '__main__':\n print(calculate_area('circle', 5)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom scipy.optimize import minimize\n\ndef optimize_function(objective):\n  bounds = ((0, None), (0, None), (0, None))\n  res = minimize(objective, [1,1,1], method=\"Nelder-Mead\", bounds=bounds)\n  return res but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def area(self):\n        return self.length * self.width but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_search(my_list, item):\n    low = 0\n    high = len(my_list)-1\n    while low<=high: \n        mid = (low+high)//2\n        if my_list[mid] == item:\n            return mid\n        elif my_list[mid] > item: \n            high = mid - 1\n        else: \n            low = mid + 1\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def permutations(string):\n  if len(string) == 1:\n    return [string]\n  \n  result = []\n  for i in range(0, len(string)):\n    subString = string[0:i] + string[i+1: len(string)]\n    subPermutations = permutations(subString)\n    for j in range(0, len(subPermutations)):\n      result.append(string[i] + subPermutations[j])\n  \n  return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def ascii_repr_str(str):\n    ans = ''\n    for ch in str:\n        ans += str(ord(ch))\n    return ans\n\nprint(ascii_repr_str(\"Python\")) # result: 080 121 116 104 111 110 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: input_string = \"Foo Bar\"\n\n# A dict is initialized to store the frequency of each letter\nletter_frequency = {} \n  \n# for loop to calculate frequency of each letter \n# in the input_string \nfor letter in input_string: \n    \n    # updating the value \n    letter_frequency[letter] = letter_frequency.get(letter, 0) + 1\n\n# variable to store total number of characters \ntotal_characters = 0\n\n# variable to store the relative frequency \nrelative_frequency = {}\n\n# loop to count total number of characters \nfor letter in letter_frequency: \n    total_characters += letter_frequency[letter] \n  \n# loop to calculate relative frequency \n# of each letter \nfor letter in letter_frequency: \n    relative_frequency[letter] = (letter_frequency[letter] / total_characters) * 100\n\n# printing the result\nprint(\"Letter Frequency : \", letter_frequency)\nprint(\"Relative Frequency : \", relative_frequency) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_natural_numbers(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    \n    return total\n\ndef sum_natural_numbers(n):\n    return n * (n + 1) // 2\n\nprint(sum_natural_numbers(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_sqr(a, b):\n    return a*a + b*b\n\nprint(sum_sqr(2, 3)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Bubble sort algorithm\ndef sort_array(array):\n    for i in range(len(array)):\n        for j in range(len(array)-i-1):\n            if array[j] > array[j+1]:\n               array[j], array[j+1] = array[j+1], array[j]\n    return array\n\n# Sample array\narray = [2, 4, 1, 3, 7, 5]\n\n# Function call\nsorted_array = sort_array(array)\n\n# Print sorted output\nprint(sorted_array) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_most_popular_episode(data):\n    \"\"\"\n    Args:\n        data (dict): A dictionary with information about each episode of the TV show, \n        including the number of views and the episode number\n    Returns:\n        int: The number of the most popular episode\n    \"\"\"\n\n    max_views = 0\n    most_popular_episode = 0\n    for ep_num, ep_data in data.items():\n        num_views = ep_data[\"views\"]\n        if num_views > max_views:\n            max_views = num_views\n            most_popular_episode = ep_num\n    return most_popular_episode but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from multiprocessing import Pool\n\ndef process_data(record):\n # Process the data\n\ndef process_list_data(data):\n with Pool() as p:\n p.map(process_data, data)\n\nlist_data = [1,2,3,4,5]\n\nprocess_list_data(list_data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\narr = [1,3,3,3,4,4,4,4,5,5]\ndata = Counter(arr)\nget_mode = dict(data)\nmode = [k for k, v in get_mode.items() if v == max(list(data.values()))]\n\nprint(f\"Mode of the given list is {mode}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_in_place(arr):\n    start = 0\n    end = len(arr)-1\n    while start < end:\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\n\n# Read the dataset\ndataset = pd.read_csv('data.csv')\n\n# Extract the input and output\nX = dataset.iloc[:, :5].values\ny = dataset.iloc[:, 5].values\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)\n\n# Train the decision tree\nclf = DecisionTreeClassifier()\nclf.fit(X_train, y_train)\n\n# Predict the output\ny_pred = clf.predict(X_test)\n\n# Print the accuracy\nprint('Accuracy:', clf.score(X_test, y_test)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name, gpa):\n        self.name = name\n        self.gpa = gpa\n\n    def get_name(self):\n        return self.name\n\n    def get_gpa(self):\n        return self.gpa but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: total = 0\nfor x in range(2, 21, 2):\n    total += x\n    \nprint(total) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef sentiment_classifier(sentence):\n    sid = SentimentIntensityAnalyzer()\n    sentiment_scores = sid.polarity_scores(sentence)\n    \n    if sentiment_scores['compound'] > 0.5:\n        sentiment_class = 'positive'\n    elif sentiment_scores['compound'] == 0.0:\n        sentiment_class = 'neutral'\n    else:\n        sentiment_class = 'negative'\n     \n    return sentiment_class\n\nif __name__ == '__main__':\n    sentence = 'This is a great movie!'\n    print(sentiment_classifier(sentence)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Define sets\nSet1 = {1, 3, 4, 8} \nSet2 = {2, 3, 5, 6}\n\n# Compute the symmetric difference\ndifference = Set1.symmetric_difference(Set2) \n  \n# Print the symmetric differences \nprint(\"The symmetric differences between the two sets :\", difference) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def limit_chars(string):\n    # Limit the number of character to 6\n    limited_string = string[:6]\n    return limited_string\n\nstring = \"Hello World\"\nresult = limit_chars(string)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_dict = {\n    \"word\": \"hello\"\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter as tk\n \n# Set up the root window\nroot = tk.Tk()\n \n# Create the table\ntable = tk.Frame(root)\ntable.grid(row=0, column=0)\n \n# Set the row and column numbers\nrows = 5\ncolumns = 5\n \n# Create the label for column 0\nfor i in range(rows):\n    for j in range(1, columns):\n        b = tk.Entry(table, text=\"\") \n        b.grid(row=i, column=j, sticky=\"nsew\")\n \n# Sort by column\ndef sortByColumn(col):\n    list = table.grid_slaves()\n    sortlist = []\n    for l in list:\n        if int(l.grid_info()[\"column\"]) == col:\n            sortlist.append(l.get())\n    sortlist = sorted(sortlist)\n \n    i = 0\n    for l in list:\n        if int(l.grid_info()[\"column\"]) == col:\n            l.delete(0, \"end\")\n            l.insert(0, sortlist[i])\n            i += 1\n \n# Create the button to initiate the sort\nfor c in range(1, columns):\n    tk.Button(table, text=\"Sort\", command=lambda c=c: sortByColumn(c)).grid(row=rows, column=c)\n \n# Diplay the root window \nroot.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\n\ndef remove_all_punctuation(string):\n    \"\"\"\n    Remove all punctuation from a given string.\n    string: string to be modified \n    \"\"\"\n    punctuations = string.maketrans('', '', string.punctuation)\n    no_punct = string.translate(punctuations) \n    return no_punct but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# --- BEGIN_HEADER ---\n#\n# html_writer - [insert a few words of module description on this line]\n# Copyright (C) 2003-2009  The MiG Project lead by Brian Vinter\n#\n# This file is part of MiG.\n#\n# MiG is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# MiG is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n#\n# -- END_HEADER ---\n#\n\nfrom docutils.writers.html4css1 import Writer, HTMLTranslator\nfrom docutils.core import publish_string\n\n# Setup a translator writer\n\nhtml_writer = Writer()\nhtml_writer.translator_class = HTMLTranslator\n\n# Setup a restructured text example\n\nreST = \\\n    \"\"\"\nExample of reST:\n================\n\nThis is a small example of the way reST can be used as a base for generating HTMLformatted text that:\n\n- looks nice\n- is standards compliant\n- is flexible\n\nWe *may* decide to start using this as text formatting tool in MiG__ later on.\n\n__ http://mig-1.imada.sdu.dk/\n\n\nWe can also use it for creating tables if we want to:\n\n=====  =====  ======\nInput         Output\n-----  -----  ------\nA      B      A or B\n=====  =====  ======\nFalse  False  False\nTrue   False  True\nFalse  True   True\nTrue   True   True\n=====  =====  ======\n\nHave fun!\n\n----\n\nCheers, Jonas\n\"\"\"\n\n# Translate reST to html\n\nhtml = publish_string(reST, settings_overrides={'output_encoding'\n                      : 'unicode'}, writer=html_writer)\n\nprint html\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #! /usr/bin/env python\n\n\"\"\" DESCRIPTION\n\n\"\"\"\n\nimport glob, sys, csv\nfrom tabulate import tabulate\nfrom Bio.Blast.Applications import NcbiblastpCommandline\n\n\"\"\"--- FUNCTIONS ---\"\"\"\n\ndef carga_csv(file_name):\n    \"\"\" creates a list of lists with a csv file \"\"\"\n    tabla = []    \n    cr = csv.reader(open(file_name,\"rb\"))\n    for row in cr:    \n        tabla.append(row)\n    return tabla      \n\ndef crea_comparacion(tabla_ref, estructura = 'star', comparacion = 'bi'):\n    \"\"\" creates comparisons lists (code) depending on arguments \"\"\"\n    lista = []\n    tabla = list(tabla_ref)\n    if estructura == 'star':\n        nodo = tabla.pop()\n        for organismo in tabla:\n            lista.append([nodo[1],organismo[1]])\n            if comparacion == 'bi':\n                lista.append([organismo[1], nodo[1]])\n    else:\n        comps = estructura.split(',')\n        for comp in comps:\n            pareja = comp.split('-')\n            query = tabla[int(pareja[0])][1]\n            db = tabla[int(pareja[1])][1]\n            lista.append([query, db])\n            if comparacion == 'bi':\n                lista.append([db, query])\n    return lista\n\ndef imprime_comparacion(listas):\n    \"\"\" prints the comparison as a readable format\"\"\"\n    print 'COMPARISONS\\n-----------\\n'\n    for lista in listas:\n        print lista[0] + ' --> ' + lista[1]\n    print '\\n'\n\ndef imprime_referencia(claves):\n    \"\"\" prints the comparison as a readable format\"\"\"\n    print 'REFERENCE\\n---------'\n    n = 0\n    for key, val in claves.items():\n        print n, '. ', key, '\\t', val\n        n=n+1\n    print '\\n'\n\ndef crea_diccionario(tabla):\n    \"\"\" creates a dictionary of code:organism\"\"\"\n    diccionario={}\n    for row in tabla:\n        diccionario[row[1]]=row[0]\n    return diccionario\n    \n\"\"\"--- PROGRAM BODY ---\"\"\"\nprint '----------------\\nBLAST EVALUATION\\n----------------'\nblast_eval = 1e-05\ncomparison_list = []\n# charge csv file\nnombre_csv = raw_input('Please enter the CSV file name: ')\norganismos = carga_csv(nombre_csv)\nreferencia = crea_diccionario(organismos)\ncomparison_list = crea_comparacion(organismos)\n# present csv data\nprint '\\nCSV data\\n--------'\nprint tabulate(organismos, headers=[\"Organism\",\"Code\", \"Genome File\", \"Database folder\"]) + '\\n'\n# present options: blast parameters, comparison parameters, run\nwhile 1:\n    \n    imprime_referencia(referencia)\n    imprime_comparacion(comparison_list)\n    print 'CHOOSE AN OPTION\\n----------------\\n1) Comparisons\\n2) Run\\n3) Quit'\n    user_in = raw_input('Option: ')\n    if user_in == '1':\n        imprime_referencia(referencia)\n        print ('Please enter the comparisons using the organism index.\\n' +\n              'Format: \"-\" between indices; \",\" between comparisons; no spaces.\\n')\n        nueva_comparacion = raw_input('Comparisons: ')\n        print 'Choose \"bi\" for bidirectional or \"uni\" for unidirectional; no quotation marks.'\n        tipo_comparacion = raw_input('Direction: ')\n        comparison_list = crea_comparacion(organismos, nueva_comparacion, tipo_comparacion)\n    elif user_in == '2':\n        blast_eval = raw_input('\\nPlease write the desired E value for BLAST runs; 1e-5 suggested.\\nE_value: ')\n        print '\\nBLAST+ commands to be runned...\\n'\n        break\n    elif user_in == '3': quit()\n    else: print ('Incorrect option, try again.\\n')\n\n# create commands for comparisons\ncomandos = []\nfor pair in comparison_list:\n    nombre = referencia[pair[0]].split()\n    comandos.append([(nombre[0]+'_'+nombre[1]+'.faa'), ('db_'+pair[1]+'/db_'+pair[1]), (pair[0]+'_'+pair[1]+'.xml')])\nprint tabulate(comandos, headers=[\"Genome file\",\"Database\", \"Product file\"]) + '\\n'\nraw_input('Press ENTER to continue')\n# run commands, inform data created\nfor comando in comandos:\n    blastp_cline = NcbiblastpCommandline(query=comando[0], db=comando[1], evalue=blast_eval ,outfmt=5, out=comando[2])\n    print 'File ' + comando[2] + ' is currently in progess...'\n    stdout, stderr = blastp_cline()\nprint 'WORK COMPLETED\\n--------------'\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(num):\n    \"\"\"Check if a given number is a palindrome or not\"\"\"\n    str_num = str(num)\n    length = len(str_num)\n    if length % 2 == 0:\n        left = str_num[:length//2]\n        right = str_num[length//2:]\n        right_rev = right[::-1]\n        return left == right_rev\n    else:\n        left = str_num[:length//2]\n        middle = str_num[length//2]\n        right = str_num[(length//2)+1:]\n        right_rev = right[::-1]\n        return left == right_rev and middle == middle but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_to_list(string, delimiter):\n list = string.split(delimiter)\n return list\n\nstring = \"red, blue, green\"\ndelimiter = \",\"\nprint(string_to_list(string, delimiter)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_list(source_string, letter):\n  words = source_string.split()\n  result = []\n  for word in words:\n    if word[0].lower() == letter:\n      result.append(word)\n  return result\n\nprint(generate_list(source_string, letter)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fast_operation(n):\n    result = (n * (n + 1)) // 2\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCheck whether two strings are anagrams or not\n\"\"\"\n\n# Function to check if two strings are anagrams or not\ndef is_anagram(str1, str2): \n  \n    # Create two lists with the characters of the strings \n    list_str1 = list(str1) \n    list_str1.sort() \n    list_str2 = list(str2) \n    list_str2.sort() \n  \n    # If the two lists are equal, then it is an anagram \n    if (list_str1 == list_str2): \n        return True\n    else: \n        return False\n\n# main \nif __name__ == \"__main__\": \n    # Given strings \n    str1 = 'dog'\n    str2 = 'god'\n  \n    if (is_anagram(str1, str2)): \n        print(\"The two strings are anagrams\")\n    else: \n        print(\"The two strings are not anagrams\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\n# -*- coding: utf-8 -*- # coding: utf-8\n#\n# IBM Storwize V7000 autodiscovery script for Zabbix\n#\n# 2013 Matvey Marinin\n#\n# Sends volume/mdisk/pool LLD JSON data to LLD trapper items \"svc.discovery.<volume-mdisk|volume|mdisk|pool>\"\n# Use with \"_Special_Storwize_Perf\" Zabbix template\n#\n# See also http://www.zabbix.com/documentation/2.0/manual/discovery/low_level_discovery\n#\n# Usage:\n# svc_perf_discovery_sender.py [--debug] --clusters <svc1>[,<svc2>...] --user <username> --password <pwd>\n#\n#   --debug    = Enable debug output\n#   --clusters = Comma-separated Storwize node list\n#   --user     = Storwize V7000 user account with Administrator role (it seems that Monitor role is not enough)\n#   --password = User password\n#\nimport pywbem\nimport getopt, sys\nfrom zbxsend import Metric, send_to_zabbix\nimport logging\n\ndef usage():\n  print >> sys.stderr, \"Usage: svc_perf_discovery_sender_zabbix.py [--debug] --clusters <svc1>[,<svc2>...] --user <username> --password <pwd> --discovery-types <type1>,[type2]\"\n  print >> sys.stderr, \"Discovery types: 'volume-mdisk','volume','mdisk','pool'\"\n\n\ntry:\n  opts, args = getopt.gnu_getopt(sys.argv[1:], \"-h\", [\"help\", \"clusters=\", \"user=\", \"password=\", \"debug\", \"discovery-types=\"])\nexcept getopt.GetoptError, err:\n  print >> sys.stderr, str(err)\n  usage()\n  sys.exit(2)\n\ndebug = False\nclusters = []\nDISCOVERY_TYPES = []\nuser = None\npassword = None\nfor o, a in opts:\n  if o == \"--clusters\" and not a.startswith('--'):\n    clusters.extend( a.split(','))\n  elif o == \"--user\" and not a.startswith('--'):\n    user = a\n  elif o == \"--password\" and not a.startswith('--'):\n    password = a\n  elif o == \"--debug\":\n    debug = True\n  elif o == \"--discovery-types\":\n    DISCOVERY_TYPES.extend( a.split(','))\n  elif o in (\"-h\", \"--help\"):\n    usage()\n    sys.exit()\n\nif not clusters:\n  print >> sys.stderr, '--clusters option must be set'\n  usage()\n  sys.exit(2)\n\nif not DISCOVERY_TYPES:\n  print >> sys.stderr, '--discovery-types option must be set'\n  usage()\n  sys.exit(2)\n\nif not user or not password:\n  print >> sys.stderr, '--user and --password options must be set'\n  usage()\n  sys.exit(2)\n\ndef debug_print(message):\n  if debug:\n    print message\n\nfor cluster in clusters:\n  debug_print('Connecting to: %s' % cluster)\n  conn = pywbem.WBEMConnection('https://'+cluster, (user, password), 'root/ibm')\n  conn.debug = True\n\n  for discovery in DISCOVERY_TYPES:\n    output = []\n\n    if discovery == 'volume-mdisk' or discovery == 'volume':\n      for vol in conn.ExecQuery('WQL', 'select DeviceID, ElementName from IBMTSSVC_StorageVolume'):\n        output.append( '{\"{#TYPE}\":\"%s\", \"{#NAME}\":\"%s\", \"{#ID}\":\"%s\"}' % ('volume', vol.properties['ElementName'].value, vol.properties['DeviceID'].value) )\n\n    if discovery == 'volume-mdisk' or discovery == 'mdisk':\n      for mdisk in conn.ExecQuery('WQL', 'select DeviceID, ElementName from IBMTSSVC_BackendVolume'):\n        output.append( '{\"{#TYPE}\":\"%s\", \"{#NAME}\":\"%s\", \"{#ID}\":\"%s\"}' % ('mdisk', mdisk.properties['ElementName'].value, mdisk.properties['DeviceID'].value) )\n\n    if discovery == 'pool':\n      for pool in conn.ExecQuery('WQL', 'select PoolID, ElementName from IBMTSSVC_ConcreteStoragePool'):\n        output.append( '{\"{#TYPE}\":\"%s\",\"{#NAME}\":\"%s\",\"{#ID}\":\"%s\"}' % ('pool', pool.properties['ElementName'].value, pool.properties['PoolID'].value) )\n\n    json = []\n    json.append('{\"data\":[')\n\n    for i, v in enumerate( output ):\n      if i < len(output)-1:\n        json.append(v+',')\n      else:\n        json.append(v)\n    json.append(']}')\n\n    json_string = ''.join(json)\n    print(json_string)\n\n    trapper_key = 'svc.discovery.%s' % discovery\n    debug_print('Sending to host=%s, key=%s' % (cluster, trapper_key))\n\n    #send json to LLD trapper item with zbxsend module\n    if debug:\n      logging.basicConfig(level=logging.INFO)\n    else:\n      logging.basicConfig(level=logging.WARNING)\n    send_to_zabbix([Metric(cluster, trapper_key, json_string)], 'localhost', 10051)\n    debug_print('')\n\n\n\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def nameLength(name): \n    return len(name) \n\nname = \"Jane\"\nprint(\"Length of the name is:\", nameLength(name)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\n\nclass Person:\n def __init__(self, name, date_of_birth):\n self.name = name\n self.date_of_birth = datetime.datetime.strptime(date_of_birth, '%Y-%m-%d')\n \n def get_age(self):\n today = datetime.datetime.now()\n return today.year - self.date_of_birth.year - ((today.month, today.day) < (self.date_of_birth.month, self.date_of_birth.day))\n \n def get_date_of_birth(self):\n return self.date_of_birth\n \n def days_until_next_birthday(self):\n today = datetime.datetime.now()\n next_birthday = datetime.datetime(today.year, self.date_of_birth.month, self.date_of_birth.day)\n if today > next_birthday:\n next_birthday = next_birthday.replace(year=today.year+1)\n return abs((next_birthday - today).days) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Book:\n  \n def __init__(self, title, author, year):\n self.title = title\n self.author = author\n self.year = year\n \n def __str__(self):\n  return f\"{self.title} by {self.author} ({self.year})\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate an algorithm in Python to check whether a number is prime or not\n\"\"\"\n\n#define a function to check whether a number is prime\ndef is_prime(num):\n  #check if the number is 1 or 2\n  if num in [1, 2]:\n    return True\n  \n  #check if the number is mulitple of 2\n  if num % 2 == 0:\n    return False\n  \n  #otherwise check all odd numbers between 3 and the number's square root\n  for i in range(3, int(num ** 0.5 + 1), 2):\n    #if the number is divisble by any odd number, it is not prime\n    if num % i == 0:\n      return False\n  \n  #if the number isn't divisible by any odd number, it is prime\n  return True\n\n#test the function\nif __name__ == '__main__':\n  num = 14\n  print(is_prime(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Car:\n def __init__(self, brand, horsepower, color):\n self.brand = brand\n self.horsepower = horsepower\n self.color = color\n\n def get_brand(self):\n return self.brand\n\n def set_brand(self, brand):\n self.brand = brand\n\n def get_horsepower(self):\n return self.horsepower\n\n def set_horsepower(self, horsepower):\n self.horsepower = horsepower\n\n def get_color(self):\n return self.color\n\n def set_color(self, color):\n self.color = color but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(lst):\n    return sorted(lst) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def divide(a,b):\n return round(a/b, 2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiplicationTable(x, y):\n table = [[ 0 for j in range(x)] for i in range(y)]\n for row in range(x):\n for col in range(y):\n table[row][col] = (row + 1) * (col + 1)\n return table\n\nprint(multiplicationTable(rows, columns))\n\nOutput:\n[[1, 2, 3, 4, 5, 6, 7, 8], \n[2, 4, 6, 8, 10, 12, 14, 16], \n[3, 6, 9, 12, 15, 18, 21, 24], \n[4, 8, 12, 16, 20, 24, 28, 32], \n[5, 10, 15, 20, 25, 30, 35, 40], \n[6, 12, 18, 24, 30, 36, 42, 48]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV\n\ndef optimize_svm(X, y):\n    \"\"\"Optimizes the hyperparameters of a Support Vector Machine model\n    using GridSearchCV.\n    \n    Parameters\n    ----------\n    X : numpy array\n        The feature dataset\n    y : numpy array\n        The target values\n        \n    Returns\n    -------\n    best_estimator : sklearn.svm.SVC\n        A fitted SVM Estimator instance\n    \"\"\"\n    tuned_parameters = [{'kernel': ['rbf'], 'gamma': [1e-3, 1e-4],\n                     'C': [1, 10, 100, 1000]},\n                    {'kernel': ['linear'], 'C': [1, 10, 100, 1000]}]\n    clf = GridSearchCV(SVC(), tuned_parameters, cv=5)\n    clf.fit(X, y)\n    best_estimator = clf.best_estimator_\n\n    return best_estimator but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Point3D:\n  def __init__(self, x, y, z):\n    self.x = x\n    self.y = y\n    self.z = z\n\n  def __str__(self):\n    return 'Point3D is at {x}, {y}, {z}'.format(x = self.x, y = self.y, z = self.z) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num):\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef classify_prime_nums(nums):\n    result = []\n    for num in nums:\n        if is_prime(num):\n            result.append((\"prime\", num))\n        else:\n            result.append((\"non-prime\", num))\n    return result\n\nnums = [2, 4, 8, 11, 15]\nprint(classify_prime_nums(nums)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom scipy.optimize import minimize\ndef f(x):\n    x, y = x\n    return x + y**2\n\nx0 = np.array([0,0])\nres = minimize(f, x0, method='nelder-mead')\nprint(res.x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def digitSum(n): \n\tsum = 0\n \n\t# loop until we have no digits left \n\twhile (n != 0): \n\t\t# extract the last digit \n\t\tdig = n % 10\n \n\t\t# add the digit to the total sum \n\t\tsum += dig\n \n\t\t# remove the last digit from n \n\t\tn = n // 10\n \n\treturn sum\n \n# Driver Code \nn = 12345\nsum = digitSum(n) \n \n# Print the result \nprint(sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPalindrome(s):\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        if s[i] != s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n  \n# Driver code \ns = \"level\"\n  \nif isPalindrome(s):\n    print(\"Yes\")\nelse:\n    print(\"No\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1  \n    r = 2 * i + 2\n \n    if l < n and arr[i] < arr[l]:\n        largest = l\n \n    if r < n and arr[largest] < arr[r]:\n        largest = r\n \n    if largest != i:\n        arr[i],arr[largest] = arr[largest],arr[i]\n        heapify(arr, n, largest)\n \ndef heapSort(arr):\n    n = len(arr) \n \n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n \n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n \narr = [8, 5, 2, 1, 8]\nheapSort(arr)\nn = len(arr) \nprint (\"Sorted array is\") \nfor i in range(n): \n    print (\"% d\" %arr[i]), but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\nlength = 10\n\ndef generatePassword(length):\n    chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + \"!@#$%^&*\"\n    return ''.join([random.choice(chars) for _ in range(length)])\n\npassword = generatePassword(length)\nprint(password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def my_sqrt(x): \n    guess = x\n    i = 0\n    while guess * guess != x and i < 20:\n        guess = (guess + x/guess) / 2.0\n        i += 1\n    return guess \n\nresult = my_sqrt(36) \nprint(\"Square root of 36 is = \", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: listA = [1, 2, 3, 4]\nlistB = [2, 4, 5, 6]\n\nfor i in listA:\n    if i in listB:\n        print(i)\n\n# Output\n2\n4 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import cmath\n\ndef quadratic_equation(a, b, c):\n # calculate the discriminant\n d = (b**2) - (4*a*c)\n \n # find two solutions\n sol1 = (-b-cmath.sqrt(d))/(2*a)\n sol2 = (-b+cmath.sqrt(d))/(2*a)\n \n return sol1, sol2\n \nif __name__ == \"__main__\":\n a = 1\n b = 5\n c = 6\n \n solutions = quadratic_equation(a, b, c)\n \n print('The solution are {0} and {1}'.format(solutions[0],solutions[1])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: const languages = {\n 'C': 'Imperative',\n 'C++': 'Imperative',\n 'Java': 'Object-Oriented',\n 'Scala': 'Object-Oriented',\n 'Python': 'Object-Oriented',\n 'PHP': 'Object-Oriented',\n 'Go': 'Imperative/Functional',\n 'Ruby': 'Object-Oriented/Functional',\n ' JavaScript': 'Functional/Prototype-based',\n}; but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(arr):\n    for i in range(len(arr)):\n        for j in range(len(arr) - 1):\n            if arr[j] > arr[j+1]:\n                temp = arr[j]\n                arr[j] = arr[j+1]\n                arr[j+1] = temp\n    return arr\n\nresult = bubble_sort([12, 3, 10, 7, 5, 11])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import necessary packages\nimport tweepy\nimport json\n\n#Authentication\nconsumer_key = 'your_consumer_key'\nconsumer_secret = 'your_consumer_secret'\naccess_token = 'your_access_token'\naccess_token_secret = 'your_access_token_secret'\n\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\n# Track tweets with a specific hashtag\nkeyword = \"#python\"\n\n# Reply with popular trends\ntrends_result = api.trends_place(1)\ntrends = json.loads(json.dumps(trends_result, indent=2))\n\nfor trend in trends[0][\"trends\"]:\n try:\n  api.update_status(trend[\"name\"])\n except tweepy.TweepError as e:\n  print(e.reason) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPrime(num):\n    for i in range (2, num): \n        if num % i == 0: \n            return False\n    return True  \n  \n# Driver Code \nmylist = [3,4,7,11,13,18]\n  \nfor num in mylist: \n    # if condition is true, print the number \n    if isPrime(num): \n        print(num, end =\" \") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_longest_string(string_list):\n    longest_string = \"\"\n    for i in string_list:\n        if len(i) > len(longest_string):\n            longest_string = i\n    print(longest_string)\n\n\nfind_longest_string(['dog', 'cat', 'zebra', 'elephant']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\n\n# Build the neural network model\nmodel = tf.keras.Sequential([\n  tf.keras.layers.Input(shape=(24,)),\n  # 8 neurons on the first hidden layer\n  tf.keras.layers.Dense(8, activation='relu'),\n  # 4 neurons on the second hidden layer\n  tf.keras.layers.Dense(4, activation='relu'),\n  # Output layer, which will have 3 neurons since we have 3 classes\n  tf.keras.layers.Dense(3, activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n              loss=tf.losses.CategoricalCrossentropy(),\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test))\n\n# Save the model\nmodel.save('weather_predictor_model.h5') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport os\n\nurl = 'https://www.example.com/page1'\n\nif not os.path.exists('cache'):\n os.makedirs('cache')\n\nr = requests.get(url)\n\nfilename = url.rsplit('/', 1)[-1]\nfile_path = os.path.join('cache', filename)\n\nwith open(file_path, 'wb') as f:\n f.write(r.content) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Python\n\ndef add(a, b):\n return a + b\n\n#Java\n\npublic static int add(int a, int b) {\n return a + b;\n}\n\n#C++\n\nint add(int a, int b) {\n return a + b;\n}\n\n#Go\n\nfunc add(a int, b int) int {\n return a + b\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def rotate(arr, d):\n    for _ in range(d):\n        temp = arr[0]\n        for i in range(len(arr)-1):\n            arr[i] = arr[i+1]\n        arr[len(arr)-1] = temp\n\n    return arr\n\narr = [1, 2, 3, 4, 5]\nd = 2\n\nrotated_arr = rotate(arr, d)\nprint(rotated_arr) # [3, 4, 5, 1, 2] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mean(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total/len(arr)\n\narr = [60, 54, 77, 78, 37, 35]\nprint(\"Mean: \", mean(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: user_input = input(\"Enter a number:\")\nif user_input.isdigit():\n   print(\"You have entered an integer.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort(arr): \n  \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # The last element has already been sorted \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n    # Driver code to test above \narr = [7, 5, 2, 9, 6, 4, 1, 3, 8] \nsort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (arr[i]), but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef is_prime(num):\n\tfor i in range(2, num):\n\t\tif num%i == 0:\n\t\t\treturn False\n\treturn True\n\ndef generate_prime():\n\twhile True:\n\t\tnum = random.randint(10000, 99999)\n\t\tif is_prime(num):\n\t\t\treturn num\n\nif __name__ == '__main__':\n\tnum = generate_prime()\n\tprint(num, 'is a prime number') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = \"https://example.com\" \nr = requests.get(url)\ndata = r.content\n\nwith open(\"example_website.html\", \"wb\") as file:\n    file.write(data)\n\nprint(\"File downloaded successfully.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\nfrom __future__ import division\nimport optparse, os\n\n#This script uses an aligned fasta file and a tab deliminted file containing CDS coordinates to create a nexus input for BEAST\n\n#In version 2.0, added a flag to throw if you only want coding sequence to be included in the nexus file\n\ndef main():\n    usage = '%prog [options]'\n    p = optparse.OptionParser()\n    p.add_option('-f', '--fasta',  help='Aligned fasta. [None]')\n    p.add_option('-c', '--coords', help='Tab delimited file with coordinates of CDS. Should have at least 3 tab delimited columns. The first is not used, will probably have some sort of CDS name. The next two have start and stop base positions.[None]')\n    p.add_option('-o', '--out',  help='Name for output nexus file. [None]')\n    p.add_option('--onlyCDS', default=False, action=\"store_true\",  help='Use this flag if you only want coding regions to be included in the output nexus file. [None]')\n    opts, args = p.parse_args()\n    \n    make_beast_nexus(opts)\n        \n#----------------------End of main()\n\ndef make_beast_nexus(opts):\n    fout=open(opts.out, 'w')\n\n    #Read in seqs\n    names, seqs = read_fasta_lists(opts.fasta)\n    #Get coding coordinates\n    coding_coords=get_coords(opts.coords)\n    \n    #Make concatenated coding seqs\n    coding_seqs=['']*len(seqs)\n    for start, end in coding_coords:\n        for i in range(len(seqs)):\n            coding_seqs[i]+=seqs[i][start-1:end]\n    \n    \n    if opts.onlyCDS:\n        fout.write(\"#NEXUS\\n[File created using beast_nexus_prep.py using %s and %s]\\n\\nBEGIN TAXA;\\n\" % (opts.fasta, opts.coords))\n        fout.write(\"DIMENSIONS NTAX=%d;\\n\\nTAXLABELS\\n%s\\n;\\n\\nEND;\\n\" % (len(names), '\\n'.join(names)))\n        fout.write(\"BEGIN CHARACTERS;\\nDIMENSIONS NCHAR=%d;\\nFORMAT DATATYPE=DNA MISSING=N GAP=-;\\nMATRIX\\n\\n%s\\n;\\n\\nEND;\\n\\n\" % (len(coding_seqs[0]), '\\n'.join(['%s %s' % (names[x], coding_seqs[x]) for x in range(len(names))])))    \n        fout.write(\"BEGIN ASSUMPTIONS;\\n\\tcharset coding = 1-%d;\\nend;\\n\" % (len(coding_seqs[0])))\n\n    else:\n        #Get non-coding coordinates\n        noncoding_coords=extrap_noncoding(coding_coords, len(seqs[0]))\n    \n        #Make concatenated noncoding seqs\n        noncoding_seqs=['']*len(seqs)\n        for start, end in noncoding_coords:\n            for i in range(len(seqs)):\n                noncoding_seqs[i]+=seqs[i][start-1:end]\n    \n        concat_seqs=[coding_seqs[i]+noncoding_seqs[i] for i in range(len(seqs))]\n    \n        coding_start=1\n        coding_end=len(coding_seqs[0])\n        noncoding_start=coding_end+1\n        noncoding_end=len(concat_seqs[0])\n    \n        fout.write(\"#NEXUS\\n[File created using beast_nexus_prep.py using %s and %s]\\n\\nBEGIN TAXA;\\n\" % (opts.fasta, opts.coords))\n        fout.write(\"DIMENSIONS NTAX=%d;\\n\\nTAXLABELS\\n%s\\n;\\n\\nEND;\\n\" % (len(names), '\\n'.join(names)))\n        fout.write(\"BEGIN CHARACTERS;\\nDIMENSIONS NCHAR=%d;\\nFORMAT DATATYPE=DNA MISSING=N GAP=-;\\nMATRIX\\n\\n%s\\n;\\n\\nEND;\\n\\n\" % (len(concat_seqs[0]), '\\n'.join(['%s %s' % (names[x], concat_seqs[x]) for x in range(len(names))])))    \n        fout.write(\"BEGIN ASSUMPTIONS;\\n\\tcharset coding = %d-%d;\\n\\tcharset noncoding = %d-%d;\\nend;\\n\" % (coding_start, coding_end, noncoding_start, noncoding_end ))\n\n\n\n    fout.close()\n    \ndef extrap_noncoding(coding_coords, seq_len):\n    non_coords=[]\n    #To handle noncoding at the very beginning of the sequence\n    if coding_coords[0][0] != 1:\n        non_coords.append((1,coding_coords[0][0]-1))    \n        \n    #To handle noncoding regions in between coding seqs\n    coding_sorted=sorted(coding_coords[:])\n    for i in range(len(coding_sorted[:-1])):\n        if coding_sorted[i+1][0]-coding_sorted[i][1]>0:\n            non_coords.append((coding_sorted[i][1]+1,coding_sorted[i+1][0]-1))\n\n    #To handle non-coding at the very end of the sequence\n    if coding_coords[-1][1] != seq_len:\n        non_coords.append((coding_coords[-1][1]+1, seq_len))\n\n    print non_coords\n    return non_coords\n\ndef get_coords(c_file):\n    fin=open(c_file, 'r')\n    coords=[]\n    for line in fin:\n        cols=line.strip().split('\\t')\n        coords.append((int(cols[1]), int(cols[2])))\n    return coords\n\n# Extracts data from a fasta sequence file. Returns two lists, the first holds the names of the seqs (excluding the '>' symbol), and the second holds the sequences\ndef read_fasta_lists(file):\n\tfin = open(file, 'r')\n\tcount=0\n\t\n\tnames=[]\n\tseqs=[]\n\tseq=''\n\tfor line in fin:\n\t\tline=line.strip()\n\t\tif line and line[0] == '>':                #indicates the name of the sequence\n\t\t\tcount+=1\n\t\t\tnames.append(line[1:])\n\t\t\tif count>1:\n\t\t\t\tseqs.append(seq)\n\t\t\tseq=''\n\t\telse: seq +=line\n\tseqs.append(seq)\n\t\n\treturn names, seqs\n\n###------------------------------------->>>>    \n\nif __name__ == \"__main__\":\n    main()\n but is not the same. just give one example and only return the code."}
