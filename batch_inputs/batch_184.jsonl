{"prompt": "make some code that functions the same as the following code: def bubble_sort(arr):\n    # Traverse through all array elements \n    for i in range(len(arr)):\n \n        # Last i elements are already in place \n        for j in range(0, len(arr)-i-1):\n \n            # traverse the array from 0 to n-i-1\n            # Swap if the element found is greater than the next element \n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n \n    return arr\n\nresult = bubble_sort([3, 2, 5, 2, 4]))\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_sum(a, b):\n    print(a + b) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(x):\n    result = 1\n    for num in range(1,x+1):\n        result *= num\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import defaultdict \n  \n# Initialize a dictionary \nd = defaultdict(int) \n  \n# Input Data \ndata = [[1, \"Dog\"], [1, \"Dog\"], [2, \"Cat\"], [2, \"Cat\"], [2, \"Bird\"], [3, \"Fish\"]] \n  \n# Iterate through the list of lists \nfor sublist in data: \n    region = sublist[0] \n    pet_type = sublist[1] \n    d[region] += 1\n  \n# Iterate through the dictionary \nfor key, value in d.items(): \n    if value == max(d.values()): \n        most_common_pet = key \n        print(\"Most common pet in region\", key, \"is\", most_common_pet) \n  \n# Output: Most common pet in region 1 is Dog but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Customers:\n    def __init__(self):\n        self.customers = {}\n \n    def add_customer(self, name, info):\n        self.customers[name] = info\n \n    def remove_customer(self, name):\n        if name in self.customers:\n            del self.customers[name] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: lst = [3, 1, 4, 5, 2]\n\nfor number in sorted(lst):\n    print(number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn import svm\n\nX = np.array([[0, 0], [1, 1]])\ny = np.array([0, 1])\n\nclf = svm.SVC(kernel='linear')\nclf.fit(X, y)\n\nprediction = clf.predict([[2., 2.]])\nprint(prediction) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def update_list(my_list, new_value):\n    my_list[-1] = new_value\n    return my_list\n\nmy_list = [1,2,3]\nnew_value = 5\n\nupdated_list = update_list(my_list, new_value)\nprint(updated_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# specify url\nurl = 'www.example.com'\n\n# fetch the page\nresponse = requests.get(url)\nhtml = response.content\n\n# parse page content\nsoup = BeautifulSoup(html)\n\n# extract titles\ntitles = []\nfor title in soup.find_all('title'):\n titles.append(title.text)\n\n# print titles\nprint(titles) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nGenerate a predictive model in Python to predict the number of employees will leave in a given year based on the age, job position and current salary.\n\"\"\"\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Load the data\ndata = pd.read_csv(\"data.csv\")\n\n# Convert categorical variables to dummy variables\ndata = pd.get_dummies(data, columns=['position'])\n\n# Split the data into independent and dependent variables\nx = data.iloc[:, :-1]    #Independent Variables\ny = data.iloc[:, -1]     #Dependent Variable\n\n# Build the linear regression model\nmodel = LinearRegression().fit(x, y)\n\n# Make predictions\npredictions = model.predict(x)\n\n# Evaluate the model\nprint(\"Model score:\", model.score(x, y)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_val(nums):\n    maximum = nums[0]\n    for i in range(len(nums)):\n        if nums[i] > maximum:\n            maximum = nums[i]\n    return maximum\n\nlist = [1, 4, 8, 10] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maxElement(arr):\n    return max(arr)\n\narray = [2, 78, 34, 55]\n\nprint(maxElement(array)) # 78 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: array_2d = [[1,2,3], [4,5,6], [7,8,9]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_array(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\nsum_array(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def levenshteinDistance(str1, str2):\n    dp = [[0 for _ in range(len(str2) + 1)] for _ in range(len(str1) + 1)]\n    for i in range(len(str1) + 1):\n        dp[i][0] = i\n    for j in range(len(str2) + 1):\n        dp[0][j] = j\n    for i in range(1, len(str1) + 1):\n        for j in range(1, len(str2) + 1):\n            if str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n    return dp[-1][-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\n\ndef main():\n try:\n number = int(sys.argv[1])\n except (IndexError, ValueError):\n number = int(input('Please enter a number: '))\n\n prime_list = []\n for num in range(2, number + 1):\n for i in prime_list:\n if num % i == 0:\n break\n else:\n prime_list.append(num)\n\nprint(prime_list)\n\nif __name__ == '__main__':\n main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef shuffle_list(numbers): \n    # Create a copy of the list to avoid mutating the original list\n    shuffled_list = list(numbers)\n    # Iterate over the list\n    for i in range(len(shuffled_list)):\n        # Generate a random index for the current position\n        rand_index = random.randint(0, len(shuffled_list)-1)\n        # Swap the two elements\n        shuffled_list[i], shuffled_list[rand_index] = shuffled_list[rand_index], shuffled_list[i]\n    \n    return shuffled_list\n\nexample_list = [1,2,3,4,5]\nprint(shuffle_list(example_list)) # Output: [3, 2, 5, 1, 4] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Make the request\nr = requests.get('https://www.example.com/')\n\n# Parse the response\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# Get all hyperlinks from the page\nlinks = []\nfor link in soup.findAll('a'):\n links.append(link.get('href'))\n\nprint(links) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def create_histogram(list):\n    hist = dict()\n    \n    for i in list:\n        if i not in hist:\n            hist[i] = 1\n        else:\n            hist[i] += 1\n    \n    return hist but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # original code \ndef find_sum(numbers):\n  total = 0\n  for number in numbers:\n    total += number\n  return total \n\n# modified code \ndef find_sum(numbers):\n  return sum(numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_cost(item_cost, quantity):\n return item_cost * quantity\n\ncost = calculate_cost(10, 5)\nprint('The total cost of your order is:', cost)  # The total cost of your order is: 50 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn import datasets\nfrom sklearn import svm\n\niris = datasets.load_iris()\nX = iris.data[:, :2]\ny = iris.target\n\nclf = svm.SVC(kernel='linear', C=1)\nclf.fit(X, y)\n\ntest_data = np.array([[5.5, 1.8], [7.5, 2.2], [4.9, 1.5], [5.8, 2.4]])\npredictions = clf.predict(test_data)\n\nprint(predictions)\n\n# Output: [0 1 0 2] which correspond to setosa, versicolor, setosa, and virginica respectively. \n# The order of the output matches the order of the test data provided. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # calculate how many possible paths are there from one point to another in a given grid\n\ndef num_paths(rows, cols): \n    # base case \n    if (rows == 1 or cols == 1): \n        return 1\n  \n    # calculate the number of paths in the grid\n    return num_paths(rows-1, cols) + num_paths(rows, cols-1) \n  \n# call the function\nresult = num_paths(3, 3)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.ensemble import RandomForestClassifier\n\n# Load data\niris_dataset = datasets.load_iris()\nX = iris_dataset.data\ny = iris_dataset.target\n\n#Split data\nX_train, X_test, y_train, y_test = train_test_split(\n X, y, test_size=0.20, stratify=y, random_state=2\n)\n\n# Create a random forest classifier\nclf = RandomForestClassifier(n_estimators=1000, random_state=2)\n\n# Train the classifier\nclf.fit(X_train, y_train)\n\n# Make predictions\ny_pred = clf.predict(X_test)\n\n# Evaluate predictions\naccuracy = accuracy_score(y_test, y_pred)\nprint('Accuracy of the model is {}'.format(accuracy)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Author: Nic Wolfe <nic@wolfeden.ca>\n# Author: Gordon Turner <gordonturner@gordonturner.ca>\n# URL: http://code.google.com/p/sickbeard/\n#\n# This file is part of Sick Beard.\n#\n# Sick Beard is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Sick Beard is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Sick Beard.  If not, see <http://www.gnu.org/licenses/>.\n\nimport datetime\nimport os\n\nimport sickbeard\n\n#from sickbeard.common import *\nfrom sickbeard import logger, exceptions, helpers\nfrom sickbeard.metadata import generic\nfrom sickbeard import encodingKludge as ek\n\nfrom lib.tvdb_api import tvdb_api, tvdb_exceptions\n\nclass TIVOMetadata(generic.GenericMetadata):\n    \"\"\"\n    Metadata generation class for TIVO\n\n    The following file structure is used:\n\n    show_root/Season 01/show - 1x01 - episode.avi.txt       (* existing episode)\n    show_root/Season 01/.meta/show - 1x01 - episode.avi.txt (episode metadata)\n    \n    This class only generates episode specific metadata files, it does NOT generated a default.txt file.\n    \"\"\"\n    \n    def __init__(self,\n                 show_metadata=False,\n                 episode_metadata=False,\n                 poster=False,\n                 fanart=False,\n                 episode_thumbnails=False,\n                 season_thumbnails=False):\n\n        generic.GenericMetadata.__init__(self,\n                                         show_metadata,\n                                         episode_metadata,\n                                         poster,\n                                         fanart,\n                                         episode_thumbnails,\n                                         season_thumbnails)\n        \n        self._ep_nfo_extension = \"txt\"\n        \n        self.generate_ep_metadata = True\n        \n        self.name = 'TIVO'\n\n        self.eg_show_metadata = \"<i>not supported</i>\"\n        self.eg_episode_metadata = \"Season##\\\\.meta\\\\<i>filename</i>.txt\"\n        self.eg_fanart = \"<i>not supported</i>\"\n        self.eg_poster = \"<i>not supported</i>\"\n        self.eg_episode_thumbnails = \"<i>not supported</i>\"\n        self.eg_season_thumbnails = \"<i>not supported</i>\"\n    \n    # Override with empty methods for unsupported features.\n    def create_show_metadata(self, show_obj):\n        pass\n    \n    def create_fanart(self, show_obj):\n        pass\n    \n    def get_episode_thumb_path(self, ep_obj):\n        pass\n    \n    def get_season_thumb_path(self, show_obj, season):\n        pass\n\n    def retrieveShowMetadata(self, dir):\n        return (None, None)\n        \n    # Override and implement features for Tivo.\n    def get_episode_file_path(self, ep_obj):\n        \"\"\"\n        Returns a full show dir/.meta/episode.txt path for Tivo\n        episode metadata files.\n        \n        Note, that pyTivo requires the metadata filename to include the original extention.\n        \n        ie If the episode name is foo.avi, the metadata name is foo.avi.txt\n        \n        ep_obj: a TVEpisode object to get the path for\n        \"\"\"\n        if ek.ek(os.path.isfile, ep_obj.location):\n            metadata_file_name = ek.ek(os.path.basename, ep_obj.location) + \".\" + self._ep_nfo_extension\n            metadata_dir_name = ek.ek(os.path.join, ek.ek(os.path.dirname, ep_obj.location), '.meta')\n            metadata_file_path = ek.ek(os.path.join, metadata_dir_name, metadata_file_name)\n        else:\n            logger.log(u\"Episode location doesn't exist: \"+str(ep_obj.location), logger.DEBUG)\n            return ''\n        return metadata_file_path\n\n    def _ep_data(self, ep_obj):\n        \"\"\"\n        Creates a key value structure for a Tivo episode metadata file and\n        returns the resulting data object.\n        \n        ep_obj: a TVEpisode instance to create the metadata file for.\n        \n        Lookup the show in http://thetvdb.com/ using the python library:\n        \n        https://github.com/dbr/tvdb_api/\n        \n        The results are saved in the object myShow.\n            \n        The key values for the tivo metadata file are from:\n            \n        http://pytivo.sourceforge.net/wiki/index.php/Metadata\n        \"\"\"\n        \n        data = \"\";\n                \n        eps_to_write = [ep_obj] + ep_obj.relatedEps\n        \n        tvdb_lang = ep_obj.show.lang\n    \n        try:\n            # There's gotta be a better way of doing this but we don't wanna\n            # change the language value elsewhere\n            ltvdb_api_parms = sickbeard.TVDB_API_PARMS.copy()\n\n            if tvdb_lang and not tvdb_lang == 'en':\n                ltvdb_api_parms['language'] = tvdb_lang\n\n            t = tvdb_api.Tvdb(actors=True, **ltvdb_api_parms)\n            myShow = t[ep_obj.show.tvdbid]\n        except tvdb_exceptions.tvdb_shownotfound, e:\n            raise exceptions.ShowNotFoundException(str(e))\n        except tvdb_exceptions.tvdb_error, e:\n            logger.log(\"Unable to connect to TVDB while creating meta files - skipping - \"+str(e), logger.ERROR)\n            return False\n        \n        for curEpToWrite in eps_to_write:\n        \n            try:\n                myEp = myShow[curEpToWrite.season][curEpToWrite.episode]\n            except (tvdb_exceptions.tvdb_episodenotfound, tvdb_exceptions.tvdb_seasonnotfound):\n                logger.log(\"Unable to find episode \" + str(curEpToWrite.season) + \"x\" + str(curEpToWrite.episode) + \" on tvdb... has it been removed? Should I delete from db?\")\n                return None\n            \n            if myEp[\"firstaired\"] == None and ep_obj.season == 0:\n                myEp[\"firstaired\"] = str(datetime.date.fromordinal(1))\n            \n            if myEp[\"episodename\"] == None or myEp[\"firstaired\"] == None:\n                return None\n                \n            if myShow[\"seriesname\"] != None: \n            \n                # Title of the series (The Simpsons, Seinfeld, etc.) or title of the movie (The Mummy, Spiderman, etc).\n                data += (\"title : \" + myShow[\"seriesname\"] + \"\\n\")\n                \n                \n                # Name of series (The Simpsons, Seinfeld, etc.). This should be included if the show is episodic. \n                # For movies, you may repeat the name of the movie (The Mummy, Spiderman, etc), leave blank, or omit. \n                data += (\"seriesTitle : \" + myShow[\"seriesname\"] + \"\\n\")\n                \n            \n            # Title of the episode (Pilot, Homer's Night Out, Episode 02, etc.) Should be included for episodic shows. \n            # Leave blank or omit for movies.\n            data += (\"episodeTitle : \" + curEpToWrite.name + \"\\n\")\n            \n            \n            # This should be entered for episodic shows and omitted for movies. The standard tivo format is to enter \n            # the season number followed by the episode number for that season. For example, enter 201 for season 2 \n            # episode 01. \n\n            # This only shows up if you go into the Details from the Program screen. \n\n            # This seems to disappear once the video is transferred to TiVo.\n\n            # NOTE: May not be correct format, missing season, but based on description from wiki leaving as is.\n\n            data += (\"episodeNumber : \" + str(curEpToWrite.episode) + \"\\n\")\n            \n            \n            # Must be entered as true or false. If true, the year from originalAirDate will be shown in parentheses \n            # after the episode's title and before the description on the Program screen.\n \n            # FIXME: Hardcode isEpisode to true for now, not sure how to handle movies\n\n            data += (\"isEpisode : true\\n\")\n            \n            \n            # Write the synopsis of the video here. \n            \n            # Micrsoft Word's smartquotes can die in a fire.\n            sanitizedDescription = curEpToWrite.description\n            # Replace double curly quotes\n            sanitizedDescription = sanitizedDescription.replace(u\"\\u201c\", \"\\\"\").replace(u\"\\u201d\", \"\\\"\")\n            # Replace single curly quotes\n            sanitizedDescription = sanitizedDescription.replace(u\"\\u2018\", \"'\").replace(u\"\\u2019\", \"'\").replace(u\"\\u02BC\", \"'\")\n\n            data += (\"description : \" + sanitizedDescription + \"\\n\")\n            \n            \n            # Usually starts with \"SH\" and followed by 6-8 digits.\n            # Tivo uses zap2it for thier data, so the series id is the zap2it_id.\n            if myShow[\"zap2it_id\"] != None:\n                data += (\"seriesId : \" + myShow[\"zap2it_id\"] + \"\\n\")\n                \n\n            # This is the call sign of the channel the episode was recorded from.\n            if myShow[\"network\"] != None:\n                data += (\"callsign : \" + myShow[\"network\"] + \"\\n\")\n            \n                    \n            # This must be entered as yyyy-mm-ddThh:mm:ssZ (the t is capitalized and never changes, the Z is also \n            # capitalized and never changes). This is the original air date of the episode. \n            # NOTE: Hard coded the time to T00:00:00Z as we really don't know when during the day the first run happened.\n            if curEpToWrite.airdate != datetime.date.fromordinal(1):\n                data += (\"originalAirDate : \" + str(curEpToWrite.airdate) + \"T00:00:00Z\\n\")\n               \n                    \n            # This shows up at the beginning of the description on the Program screen and on the Details screen.\n            if myShow[\"actors\"]:\n                for actor in myShow[\"actors\"].split('|'):\n                    if actor:\n                        data += (\"vActor : \" + actor + \"\\n\")\n                    \n               \n            # This is shown on both the Program screen and the Details screen. It uses a single digit to determine the \n            # number of stars: 1 for 1 star, 7 for 4 stars\n            if myShow[\"rating\"] != None:\n                try:\n                    rating = float(myShow['rating'])\n                except ValueError:\n                    rating = 0.0\n                rating = rating / 10 * 4\n                data += (\"starRating : \" + str(rating) + \"\\n\")\n\n                    \n            # This is shown on both the Program screen and the Details screen.\n            # It uses the standard TV rating system of: TV-Y7, TV-Y, TV-G, TV-PG, TV-14, TV-MA and TV-NR.\n            if myShow[\"contentrating\"]:\n                data += (\"tvRating : \" + str(myShow[\"contentrating\"]) + \"\\n\")\n            \n                    \n            # This field can be repeated as many times as necessary or omitted completely.\n            if ep_obj.show.genre:\n                for genre in ep_obj.show.genre.split('|'):\n                    if genre:\n                        data += (\"vProgramGenre : \" + str(genre) + \"\\n\")\n\n                        \n            # NOTE: The following are metadata keywords are not used\n            # displayMajorNumber\n            # showingBits\n            # displayMinorNumber\n            # colorCode\n            # vSeriesGenre\n            # vGuestStar, vDirector, vExecProducer, vProducer, vWriter, vHost, vChoreographer\n            # partCount\n            # partIndex\n            \n        \n        return data\n\n    def write_ep_file(self, ep_obj):\n        \"\"\"\n        Generates and writes ep_obj's metadata under the given path with the\n        given filename root. Uses the episode's name with the extension in\n        _ep_nfo_extension.\n        \n        ep_obj: TVEpisode object for which to create the metadata\n        \n        file_name_path: The file name to use for this metadata. Note that the extension\n                will be automatically added based on _ep_nfo_extension. This should\n                include an absolute path.\n        \"\"\"       \n        data = self._ep_data(ep_obj)\n        \n        if not data:\n            return False\n        \n        nfo_file_path = self.get_episode_file_path(ep_obj)\n        nfo_file_dir = ek.ek(os.path.dirname, nfo_file_path)\n        \n        try:\n            if not ek.ek(os.path.isdir, nfo_file_dir):\n                logger.log(\"Metadata dir didn't exist, creating it at \"+nfo_file_dir, logger.DEBUG)\n                ek.ek(os.makedirs, nfo_file_dir)\n                helpers.chmodAsParent(nfo_file_dir)\n            \n            logger.log(u\"Writing episode nfo file to \"+nfo_file_path)\n            nfo_file = ek.ek(open, nfo_file_path, 'w')\n            \n            # Calling encode directly, b/c often descriptions have wonky characters.\n            nfo_file.write( data.encode( \"utf-8\" ) )\n            \n            nfo_file.close()\n            helpers.chmodAsParent(nfo_file_path)\n        except IOError, e:\n            logger.log(u\"Unable to write file to \"+nfo_file_path+\" - are you sure the folder is writable? \"+str(e).decode('utf-8'), logger.ERROR)\n            return False\n        \n        return True\n\n# present a standard \"interface\"\nmetadata_class = TIVOMetadata\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_common_value(data, key):\n counts = {}\n \n for d in data:\n value = d[key]\n if value in counts:\n counts[value] += 1\n else:\n counts[value] = 1\n \n max_value = None\n max_count = 0\n \n # Find the most common value\n for k, v in counts.items():\n if v > max_count:\n max_value = k\n max_count = v\n \n return max_value but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class NeuralNetwork:\n    def __init__(self, input_size, num_outputs):\n        self.input_size = input_size\n        self.num_outputs = num_outputs\n\n        self.weights = np.random.rand(input_size, num_outputs)\n\n    def forward(self, x):\n        z = np.dot(x, self.weights)\n        return z but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def getMax(a,b,c):\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n\nprint(getMax(2, 5, 7)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(5):\n print(\"Hello World\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def all_equal(arr):\n    return len(set(arr)) == 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Load required modules\nimport pandas as pd\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer\n\n# Load spam emails\nspam_df = pd.read_csv(\"spam.csv\")\n\n# Split into independent and dependent features\nX = spam_df['Email']\ny = spam_df['Label']\n\n# Create a pipeline\nmodel = make_pipeline(CountVectorizer(),\n                      TfidfTransformer(),\n                      MultinomialNB())\n\n# Fit the pipeline\nmodel.fit(X, y)\n\n# Resize the dataset\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Fit the model\nmodel.fit(X_train, y_train)\n\n# Generate predictions\ny_pred = model.predict(X_test)\n\n# Generate accuracy score\nfrom sklearn.metrics import accuracy_score\nprint(accuracy_score(y_test, y_pred)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: unsortedDict = {\"Red\":120,\"Blue\":90,\"Yellow\":50,\"Purple\":75}\n\nsortedList = sorted(unsortedDict.items(), key=lambda x: x[1])\nprint(sortedList) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport tensorflow as tf\n\n# defining the neural network\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(2, activation='sigmoid', input_shape=(2, )))\nmodel.add(tf.keras.layers.Dense(2))\n\n# compiling the network\nmodel.compile( optimizer='sgd',\n              loss='mean_squared_error',\n              metrics=['accuracy']\n            )\n\n# training the network\nX = np.array([[1,0],[0,1]])\nY = np.array([[1,1]])\nmodel.fit(X, Y, epochs=1000)\n\n# predicting the output\nprint(model.predict(X)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef computeRMS(values):\n    # calculate the mean\n    mean = sum(values)/len(values)\n    # calculate the sum of the squares\n    squares_sum = sum([val**2 for val in values])\n    # calculate the RMS\n    rms = math.sqrt(squares_sum/len(values))\n    \n    return rms\n    \nvalues = [3,4,5,6,7]\nrms = computeRMS(values)\nprint(\"Root mean square is: \", rms) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: x = 0\ny = 0\n\ndef func():\nglobal x, y\nx, y = x+1, y+2\n\nfunc()\nx += 9999\ny += 19998 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\nurl_pattern = re.compile(\n    r'^(?:http|ftp)s?://' # http:// or https://\n    r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n    r'localhost|' #localhost...\n    r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n    r'(?::\\d+)?' # optional port\n    r'(?:/?|[/?]\\S+)$', re.IGNORECASE) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: List<Integer> myList = Arrays.asList(1, 2, 3, 4, 5);\nfor(int i = 0; i < myList.size(); i++){\n    System.out.print(myList.get(i) + \" \");\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_occurrences(array, element): \n    count = 0\n    for i in range(len(array)): \n        if array[i] == element: \n            count += 1\n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\nimport csv\n\nurl = \"https://www.example.com\"\n\n# Get the webpage\nr = requests.get(url)\n\n# Parse the content of the request with BeautifulSoup\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# Find the relevant table\ntable = soup.find('table')\n\n# Get the data from the table\ndata = []\nfor row in table.find_all('tr'):\n    data_row = [cell.text.strip() for cell in row.find_all('td')]\n    data.append(data_row)\n\n# Write the data to a CSV file\nwith open('example.csv', 'w', newline='') as f:\n    writer = csv.writer(f)\n    writer.writerows(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from google.cloud import storage\n\ndef manage_list_strings(data, context):\n    strings_list = data['strings_list']\n    action = data['action']\n    \n    if action == 'add':\n        strings_list.append(data['string'])\n    elif action == 'delete':\n        strings_list.remove(data['string'])\n    elif action == 'update':\n        strings_list = strings_list.map(lambda x: data['string'] if x == data['old_string'] else x)\n    \n    bucket = storage.Client().get_bucket('my-bucket')\n    blob = bucket.blob('my-strings-list.json')\n    blob.upload_from_string(str(strings_list))\n    \n    return strings_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nprint('Player 1 Taking Turn')\n\nrandom_number = random.randint(0, 100)\n\np1_name = input('Enter your name: ')  \np2_name = input('Enter your name: ')\n\ngame_over = False\n\nwhile not game_over:\n\n  # Player 1 guessing\n  p1_guess = int(input('Guess a number between 0 and 100: '))\n  if p1_guess == random_number:\n    print('{} wins!'.format(p1_name))\n    game_over = True\n  elif p1_guess > random_number:\n    print('{} your guess is too high'.format(p1_name))\n\n  # Player 2 guessing\n  print('\\n' + p2_name + ' Taking Turn')\n  p2_guess = int(input('Guess a number between 0 and 100: '))\n  if p2_guess == random_number:\n    print('{} wins!'.format(p2_name))\n    game_over = True\n  elif p2_guess > random_number:\n    print('{} your guess is too high'.format(p2_name))\n    \nprint('Game over!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_rect_area(matrix):\n\n    max_area = 0\n\n    for row in range(len(matrix)):\n        for col in range(len(matrix[0])):\n\n            if matrix[row][col] == 0: # if current element is 0, skip\n                continue\n\n            # calculate the maximum possible rectangle area\n            # considering (row, col) as one of the vertices \n            min_column = len(matrix[0])\n            for r in range(row, len(matrix)):\n                min_column = min(min_column, matrix[r][col])\n\n            # calculate area of the rectangle \n            # composed of 1s belonging with these limits \n            area = min_column*(r - row + 1)\n\n            # update maximum area so far \n            max_area = max(max_area, area)\n\n    return max_area\n\n# Main Program \nmatrix = [\n    [1, 1, 0, 0],\n    [1, 1, 1, 1],\n    [1, 1, 1, 1],\n    [0, 1, 1, 0]\n]\nresult = max_rect_area(matrix) \n\nprint(\"The maximum rectangle area is {:d}\".format(result)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_1 = [1, 3, 5, 7, 9]\nlist_2 = [2, 4, 6, 8, 10]\n\ndef merge_lists(list_1, list_2):\n '''Merges two sorted lists into one'''\n\n merged_list = []\n\n while list_1 and list_2:\n if list_1[0] < list_2[0]:\n merged_list.append(list_1.pop(0))\n else:\n merged_list.append(list_2.pop(0))\n\n merged_list.extend(list_1 + list_2)\n\n return merged_list\n\nmerged_list = merge_lists(list_1, list_2)\n\nprint(merged_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def round_up(num): \n    if num == int(num): \n        return int(num) \n    return int(num + 1) \n\nnum = 5.6\nprint(round_up(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Deck:\n    # list of cards in the deck\n    cards = []\n  \n    # constructor\n    def __init__(self):\n        suits = [\"Hearts\", \"Diamonds\",\"Spades\",\"Clubs\" ]\n        ranks = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen', 'King', 'Ace']\n        self.cards = [ Card(suit,rank) for suit in suits for rank in ranks]\n\n        # shuffle the cards\n        random.shuffle(self.cards)\n  \n    def deal_one_card(self):\n        # return the next card from the shuffled deck\n        return self.cards.pop()\n  \nclass Card:\n    suit = \"\"\n    rank = \"\"\n\n    # constructor\n    def __init__(self, suit, rank):\n        self.suit = suit\n        self.rank = rank\n\n    def __str__(self):\n        return \"{} of {}\".format(self.rank, self.suit)\n\ndeck = Deck()\ncard = deck.deal_one_card()\nprint(card) \n# --> 8 of Hearts but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # views.py\ndef search(request):\n    query = request.GET.get('q')\n    if query:\n        results = MyModel.objects.filter(\n            Q(title__icontains=query) # Search title field\n            | Q(body__icontains=query) # Search body field\n        ).distinct()\n    else:\n        results = []\n    return render(request, 'results.html', {\n        'results': results,\n        'query': query\n    })\n\n# models.py\nclass MyModel(models.Model):\n    title = models.CharField(max_length=100)\n    body = models.TextField()\n    \n# results.html\n<h1>Results</h1>\n{% if results %}\n    {% for result in results %}\n        {{ result.title }}\n    {% endfor %}\n{% else %}\n    <p>No results</p>\n{% endif %} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(arr): \n    # Iterate over the array \n    for i in range(len(arr)): \n          \n        # Last i elements are already in place \n        for j in range(0, len(arr)-i-1): \n  \n            # Swap if the element found is greater than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [64, 34, 25, 12, 22, 11, 90] \n  \nbubble_sort(arr) \n  \nprint (\"Sorted array :\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn import datasets\n\nclass DecisionTreeClassifier():\n\n def __init__(self):\n self.tree = None\n\n def fit(self, X, y):\n self.tree = self._build_tree(X, y)\n\n def predict(self, X):\n return [self._predict(x, self.tree) for x in X]\n\n def _build_tree(self, X, y):\n# build decision tree\ndef _predict(self, x, node):\n# predict class\nreturn node.label but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def validate_input(user_input):\n  if user_input < 0 or user_input > 10:\n    raise ValueError('Input should be between 0 and 10')\n  else:\n    return user_input\n\n# take user input\nuser_input = int(input('Enter a number between 0 and 10: '))\n\n# validate and print the result\nvalidated_input = validate_input(user_input)\nprint('Validated input: ', validated_input) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pulp \n  \n# Declare the problem \nprob = pulp.LpProblem(\"Cost Minimization Problem\", pulp.LpMinimize)  \n  \n# Define the decision variables  \nx = pulp.LpVariable(\"x\", lowBound = 0) \ny = pulp.LpVariable(\"y\", lowBound = 0) \n  \n# Define the objective function  \nprob += 4 * x + 5 * y  \n  \n# Define the constraints  \nprob += x + y <= 10\nprob += 2 * x + 3 * y <= 18\n  \n# Solve the problem \nprob.solve() \n  \n# Print the results \nprint(\"The value of x is {} and the value of y is {}\".format(x.varValue, y.varValue)) \nprint(\"The total cost is {}\".format(pulp.value(prob.objective))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def knapsack(capacity, items):\n# Create array of rows\ntable = [[0 for _ in range(capacity + 1)] for _ in range(len(items) + 1)]\n\n# Fill the table\nfor i in range(1, len(table)):\n    for j in range(1, len(table[0])):\n        value, weight = items[i - 1]\n        if weight > j:\n            table[i][j] = table[i - 1][j]\n        else:\n            table[i][j] = max(table[i - 1][j], table[i - 1][j - weight] + value)\n\n# Traceback\ncurr_row = len(table) - 1 \ncurr_col = capacity\nknapsack = []\nwhile curr_row > 0:\n    if table[curr_row][curr_col] != table[curr_row - 1][curr_col]:\n        knapsack.append(items[curr_row - 1])\n        curr_col -= items[curr_row - 1][1]\n    curr_row -= 1\n\nreturn [table[-1][-1], knapsack]\n\n# Usage example\nitems = [(2,3), (3,4), (4,5), (5,6), (6,7)]\ncapacity = 5\nprint(knapsack(capacity, items)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string \nimport random \n  \ndef random_password(): \n    letters_and_digits = string.ascii_letters + string.digits \n    password = ''.join(random.choice(letters_and_digits) for i in range(10))\n  \n    return password \n  \npassword = random_password() \nprint(\"Random Password: \",password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from django.shortcuts import render\nfrom django.http import JsonResponse\n\nfrom .models import BlogPost\n\ndef blog(request):\n posts = BlogPost.objects.filter(title__icontains='python')\n result = [{'title': post.title, 'content': post.content} for post in posts]\n return JsonResponse(result, safe=False) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def slugify(string):\n    slug = string.lower().strip().replace(' ', '-')\n    return slug\n\nslug = slugify(\"This Is a Test\")\nprint(slug) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convertCelsiusToFahrenheit(celsius):\n temperature_fahrenheit = []\n\n for c in celsius.split(','):\n temperature_fahrenheit.append(float(c)*1.8 + 32)\n\n return temperature_fahrenheit\n\nfahrenheit = convertCelsiusToFahrenheit(celsius)\nprint(fahrenheit) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_string_beginning(list_string, add_string):\n    new_list = [add_string + str(item) for item in list(list_string)]\n    return  new_list\n\nlist_string = ['Red', 'Green', 'Black']\nadd_string = 'White'\n\nprint(add_string_beginning(list_string, add_string)) # ['WhiteRed', 'WhiteGreen', 'WhiteBlack'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program for Huffman Coding \n# A class that represents huffman node \nclass Node: \n    def __init__(self, freq, data): \n        self.freq = freq \n        self.data = data \n        self.left = None\n        self.right = None\n \ndef printEncodedSequence(root, str): \n    if root == None: \n        return\n    # If the current node is leaf \n    if root.data != '$': \n        print(root.data + \": \" + str) \n  \n    # If left child is not null, add '0' to the string obtained so far \n    # The value of str is passed by the invocation of this function \n    if root.left != None: \n        printEncodedSequence(root.left, str + \"0\") \n  \n    # If right child is not null, add '1' to the string obtained so far \n    if root.right != None: \n        printEncodedSequence(root.right, str + \"1\") \n\n# Output: H: 0\n#        e: 10\n#        l: 110\n#        o: 111 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_mean_variance(nums):\n mean = sum(nums)/len(nums)\n variance = 0\n\nfor num in nums:\n variance += (num - mean)**2\n variance = variance/len(nums)\n\nreturn mean, variance but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_list(lst): \n    return sum(lst) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_retweets(post_id):\n    retweets = []\n    for _ in range(10):\n        # Retrieve post from API using post_id\n        post = get_post(post_id)\n\n        # Generate a random retweet of the post\n        retweet = f'RT @{post['author']}: {post['message']}'\n        retweets.append(retweet)\n    \n    return retweets but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize_solution(solution):\n optimized_solution = solution.replace(\"*\", \"\n times\")\n optimized_solution = optimized_solution.replace(\" c =\", \"return a times b\")\n return optimized_solution but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: $164 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def move_player(new_location):\n player_location = new_location\n if new_location == \"forest\":\n  print(\"You enter the forest and find yourself surrounded by tall pine trees.\")\n elif new_location == \"cave\":\n  print(\"You take a deep breath and enter the dark cave. You hear mysterious noises as you walk into the unknown.\")\n elif new_location == \"river\":\n  print(\"You come across a small babbling brook. The water looks cool and refreshing.\")\n else:\n  print(\"You moved to the \" + player_location)\n\ndef interact():\n print(\"You can do a few things here. What do you want to do?\")\n print(\"1. Interact with the environment\")\n print(\"2. Collect items\")\n print(\"3. Talk to NPCs\")\n\nchoice = input(\"What would you like to do? \")\nif choice == \"1\":\n print(\"You interact with the environment and find some useful items.\")\nelif choice == \"2\":\n print(\"You collect some useful items from the environment.\")\nelif choice == \"3\":\n print(\"You have a short conversation with a nearby NPC.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to implement server side of chatroom \nimport socket \nimport select \nimport sys \n  \nserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM) \nserver.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) \n  \nif len(sys.argv) != 3: \n    print(\"Correct usage: script, IP address, port number\")\n    exit() \n  \nIP_address = str(sys.argv[1]) \nPort = int(sys.argv[2]) \nserver.bind((IP_address, Port)) \nserver.listen(100) \n  \nlist_of_clients = [] \n  \ndef clientthread(conn, addr): \n  \n    conn.send(\"Welcome to this chatroom!\") \n  \n    while True: \n            try: \n                message = conn.recv(2048) \n                if message: \n  \n                    print(\"<\" + addr[0] + \"> \" + message) \n  \n                    message_to_send = \"<\" + addr[0] + \"> \" + message \n                    broadcast(message_to_send, conn) \n  \n                else: \n                    remove(conn) \n  \n            except: \n                continue\n  \ndef broadcast(message, connection): \n    for clients in list_of_clients: \n        if clients!=connection: \n            try: \n                clients.send(message) \n            except: \n                clients.close() \n  \n                remove(clients) \n            \n# main function \nif __name__ == \"__main__\": \n      \n    while True: \n  \n        conn, addr = server.accept() \n  \n        list_of_clients.append(conn) \n  \n        # prints the address of the user that just connected \n        print(addr[0] + \" connected\") \n        clientthread(conn, addr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def delete_duplicate(str):\n    temp_str = \"\"\n    for i in range(0, len(str)):\n        if str[i] not in temp_str:\n            temp_str += str[i]\n    return temp_str\n\ninput_string = \"w3python\"\nresult = delete_duplicate(input_string)\n\nprint(\"After deleting duplicate character, string is:\", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def set_difference(x, y): \n    return x.difference(y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_balanced(sequence):\n count = {0: 0, 1: 0}\n for bit in sequence:\n count[bit] += 1\n \n return count[0] == count[1]\n \nsequence = generate_sequence(20)\nbalanced = is_balanced(sequence)\n\nprint(\"Sequence:\", sequence)\nprint(\"Balanced:\", balanced) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def to_uppercase(list):\n  return [item.upper() for item in list] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef randNumber():\n    return random.randint(1, 10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: public class Factorial {\n    public static int factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n-1);\n        }\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(factorial(5));\n    }\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def power(x, y): \n    if (y == 0): \n        return 1\n    elif (int(y % 2) == 0): \n        return (power(x, int(y / 2)) *\n               power(x, int(y / 2))) \n    else: \n        return (x * power(x, int(y / 2)) *\n               power(x, int(y / 2))) \n\n\n# Driver Code \nx = 3; y = 5\nprint(power(x, y)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The web application will be built using HTML, CSS, JavaScript, and a server-side language such as PHP, Node.js, or Python. The primary function of this application will be to manage a restaurant's menu. This will include creating menu items, setting prices, managing ingredients, taking orders and more. The application will be easy to use and will be able to store large amounts of data. Additionally, the application should be able to generate reports on sales and profit. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [\"python\", \"c++\", \"java\", \"java-script\"]\n\nresult = []\nfor item in arr:\n    if item.startswith(\"java\"):\n        result.append(item)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent(words):\n frequency = {}\n \n for word in words:\n  if word in frequency:\n   frequency[word] += 1\n  else:\n   frequency[word] = 1\n \n most_frequent_word = None\n max_frequency = 0\n \n for word, count in frequency.items():\n  if count > max_frequency:\n   max_frequency = count\n   most_frequent_word = word\n \n return most_frequent_word but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def encrypt(plainText, key):\n    cipherText = \"\"\n    for char in plainText:\n        if char.isalpha():\n            cipherChar = chr(((ord(char) - ord('a')) + key) % 26 + ord('a'))\n        else:\n            cipherChar = char\n        cipherText += cipherChar\n    return cipherText but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary2decimal(binary):\n\tdec = 0\n\tfor i in range(len(binary)):\n\t\tdigit = binary[i]\n\t\tdec += int(digit)*(2**(len(binary)-1-i))\n\n\treturn dec\n\nprint(binary2decimal(\"10011\")) # 19 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_even(array):\n    count = 0\n    for num in array:\n        if num % 2 == 0:\n            count += 1\n    return count\n\narr = [1, 2, 3, 4, 5, 6]\nprint(count_even(arr)) # Output: 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def capitalize_sentence(sentence):\n  words = sentence.split(' ')\n  capitalized_words = [word.capitalize() for word in words]\n  return ' '.join(capitalized_words)\n\n# Driver Code\nsentence = 'i am learning python'\n\nresult = capitalize_sentence(sentence)\n\nprint(result) # prints \"I Am Learning Python\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_greater_than(arr, value):\n    new_arr = []\n    for item in arr:\n        if item <= value:\n            new_arr.append(item)\n    return new_arr\n\nresult = remove_greater_than([1, 2, 3, 4, 5], 3)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn import svm\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Your training data\nsport_articles = [\n 'Soccer player scores winning goal in extra time...',\n 'Basketball game ends in a tie\u2026',\n]\n\npolitics_articles = [\n 'President makes statement on the economy\u2026',\n 'Supreme Court rules against the president\u2026',\n]\n\n# Convert text to numeric arrays\nvectorizer = TfidfVectorizer()\nsport_vectors = vectorizer.fit_transform(sport_articles)\npolitics_vectors = vectorizer.fit_transform(politics_articles)\n\n# Create the model\nmodel = svm.SVC(kernel = 'linear')\n\n# Train the model\nmodel.fit(sport_vectors, [1]*len(sport_articles))\nmodel.fit(politics_vectors, [0]*len(politics_articles))\n\n# Test the model with the article\narticle = 'Soccer player scores winning goal in extra time...'\narticle_vector = vectorizer.transform([article])\nprint(model.predict(article_vector)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nn = random.randint(1, 10)\narray = [random.randint(0, 1000) for i in range(n)]\nprint(array) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n  \ndef fox_and_rabbit_simulator(num_of_rabbits, num_of_fox): \n      \n    # Initialize the population \n    rabbit_population = [num_of_rabbits] \n    fox_population = [num_of_fox] \n      \n    # Simulation of Fox and Rabbit interaction \n    for i in range(365): \n        # For every day, the numbers of rabbits and foxes are calculated \n        rabbit_pop = rabbit_population[i] * random.uniform(0.9, 1.1) \n        fox_pop = fox_population[i] * random.uniform(1.01, 1.2) \n        # Calculate the number of foxes and rabbits for next day \n        rabbit_population.append(rabbit_pop) \n        fox_population.append(fox_pop) \n  \n    print(\"Rabbit population after 365 days :\", round(rabbit_population[-1])) \n    print(\"Fox population after 365 days :\", round(fox_population[-1])) \n  \n# Driver Code \nif __name__ == \"__main__\": \n    fox_and_rabbit_simulator(10, 3) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(str1, str2): \n\t\n\t# Get lengths of both strings \n\tn1 = len(str1) \n\tn2 = len(str2) \n\n\t# If length of both strings is not same, \n\t# then they cannot be anagram \n\tif n1 != n2: \n\t\treturn 0\n\n\t# Sort both strings \n\tstr1 = sorted(str1) \n\tstr2 = sorted(str2) \n\n\t# Compare sorted strings \n\tfor i in range(0, n1): \n\t\tif str1[i] != str2[i]: \n\t\t\treturn 0\n\n\treturn 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_sum_divisors(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total_sum += i\n    return total_sum\n \nprint(calculate_sum_divisors(90)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimized_traverse(data):\n    # create a mapping of number to its index\n    data_mappings = {num:idx for idx, num in enumerate(data)}\n    # traverse the data in a single pass\n    for idx, num in enumerate(data):\n        if -num in data_mappings.keys():\n            return (idx,data_mappings[-num])\n\ndata = [3, -1, 5, 7] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.svm import SVC\n\n# Intialize dataset and labels\ndataset = [[1,2,3], [4,5,6], [7,8,9]]\nlabels = [\"a\", \"b\", \"c\"]\n\n# Fit the model\nclf = SVC(gamma='auto')\nclf.fit(dataset, labels)\n\n# Make predictions \nx = [2, 3, 4]\nprediction = clf.predict([x])\nprint(\"The prediction is\", prediction[0]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 31):\n if(i%2 != 0):\n  print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def shuffle_list(given_list):\n    temp_list = given_list[:]\n    random.shuffle(temp_list)\n    return temp_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from rest_framework import views, status\nfrom rest_framework.response import Response\nfrom .models import Post\nfrom .serializers import PostSerializer\n\nclass PostView(views.APIView):\n    def get(self, request):\n        posts = Post.objects.all()\n        serializer = PostSerializer(posts, many=True)\n        return Response(serializer.data)\n\n    def post(self, request):\n        serializer = PostSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\nclass PostDetailView(views.APIView):\n    def get(self, request, pk):\n        post = Post.objects.get(pk=pk)\n        serializer = PostSerializer(post)\n        return Response(serializer.data)\n\n    def put(self, request, pk):\n        post = Post.objects.get(pk=pk)\n        serializer = PostSerializer(post, data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n   def delete(self, request, pk):\n        post = Post.objects.get(pk=pk)\n        post.delete()\n        return Response(status=status.HTTP_204_NO_CONTENT) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\nimport json\n\n# Load the data from the JSON\nwith open('email_data.json') as f:\n data = json.load(f)\n\n# Create a template for the email\nemail_template = \"\"\"\nDear {{ recipient }},\n\n{{ greeting }},\n\n{{ message }}\n\n{{ signature }}\n\"\"\"\n\n# Compile the regex\npattern = re.compile(r'{{\\s*(.*?)\\s*}}')\n\n# Function to format the template\ndef format_template(template, data):\n # Find all the placeholders\n placeholders = pattern.findall(template)\n\n # Replace the placeholders in the template with the actual values\n for placeholder in placeholders:\n value = data.get(placeholder)\n template = template.replace('{{ %s }}' % placeholder, value)\n\n return template\n\n# Format the email template\nformatted_email = format_template(email_template, data)\n\n# Print the formatted email\nprint(formatted_email) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers = input(\"Please enter a sequence of comma-separated numbers:\")\n\nnum_list = numbers.split(',')\n\nnum_list = list(map(int, num_list))\n\nprint(num_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\nclass TicTacToeAgent:\n    def __init__(self, turn='X'):\n        self.turn = turn\n        self.opponent = 'O' if turn == 'X' else 'X'\n    \n    def make_move(self, state):\n        outcome, move = self.minimax(state, self.turn)\n        return move\n     \n    def minimax(self, state, player):\n        if self.game_over(state):\n            winner = self.winner(state)\n            if winner == self.turn:\n                return 1, None\n            elif winner == self.opponent:\n                return -1, None\n            else:\n                return 0, None\n \n        if player == self.turn:\n            best_outcome = -float('inf')\n            best_move = None\n            for row in range(3):\n                for col in range(3):\n                    if state[row][col] == 0:\n                        state[row][col] = self.turn\n                        _, move = self.minimax(state, self.opponent)\n                        state[row][col] = 0\n                        if move is not None:\n                            best_move = (row, col)\n                        best_outcome = max(best_outcome, _)\n            return best_outcome, best_move\n        else:\n            best_outcome = float('inf')\n            best_move = None\n            for row in range(3):\n                for col in range(3):\n                    if state[row][col] == 0:\n                        state[row][col] = self.opponent\n                        _, move = self.minimax(state, self.turn)\n                        state[row][col] = 0\n                        if move is not None:\n                            best_move = (row, col)\n                        best_outcome = min(best_outcome, _)\n            return best_outcome, best_move\n                        \n    def game_over(self, state):\n        return tuple(np.sum(state, axis=1)) in (3, -3) or \n               tuple(np.sum(state, axis=0)) in (3, -3) or \n               np.sum(np.diagonal(state)) in (3, -3) or \n               np.sum(np.fliplr(state).diagonal()) in (3, -3)\n \n    def winner(self, state):\n        for player in ('X', 'O'):\n            if tuple(np.sum(state, axis=1)) == (3,) * 3:\n                return player\n            elif tuple(np.sum(state, axis=0)) == (3,) * 3:\n                return player\n            elif np.sum(np.diagonal(state)) == 3: \n                return player\n            elif np.sum(np.fliplr(state).diagonal()) == 3: \n                return player\n            elif tuple(np.sum(state, axis=1)) == (-3,) * 3:\n                return player\n            elif tuple(np.sum(state, axis=0)) == (-3,) * 3: \n                return player\n            elif np.sum(np.diagonal(state)) == -3: \n                return player\n            elif np.sum(np.fliplr(state).diagonal()) == -3:\n                return player\n        return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n \ndef closest_pair_of_points(points):\n \n   closest_pair = [1000, 1000]\n   shortest_distance = 10000\n \n   for point in points:\n      for inner_point in points:\n         if (point is not inner_point):\n            distance = math.sqrt(((point[0] - inner_point[0])**2) + ((point[1] - inner_point[1])**2))\n            if distance < shortest_distance:\n               closest_pair = [point, inner_point]\n               shortest_distance = distance\n   \n   return (closest_pair, shortest_distance)\n  \npoints = [[2, 3], [12, 30], [40, 50], [5, 1], [12, 10], [3, 4]]\nprint(closest_pair_of_points(points)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_valid_password(password):\n    if len(password) < 8:\n        return False\n\n    has_uppercase = False\n    has_lowercase = False\n    has_digit = False\n\n    for char in password:\n        if char.isupper():\n            has_uppercase = True\n        elif char.islower():\n            has_lowercase = True\n        elif char.isdigit():\n            has_digit = True\n    \n    if has_uppercase and has_lowercase and has_digit:\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import the necessary libraries \nimport numpy as np \nimport tensorflow as tf \n\n# define the input matrix\ninput_matrix = np.array([[3, -0.5, 2],\n [-0.5, 0.7, 1.2],\n [0.2, -0.3, 0.8]])\n\n# create a 3x3 weight matrix\nweights = tf.Variable(tf.truncated_normal(shape=[3, 3], mean=0, stddev=0.1, dtype=tf.float32))\n# define the biases\nbiases = tf.Variable(tf.constant(0.1, shape=[3]))\n\n# define the output\nout = tf.matmul(input_matrix, weights) + biases\n\n# initialize the weights and biases\ninit = tf.initialize_all_variables()\n\n# define the sesssion\nsess = tf.Session()\n# run the session\nsess.run(init)\n\n# print the result\nprint(sess.run(out)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class IterableData:\n    def __init__(self, data):\n        self.data = data\n    \n    def __iter__(self):\n        for item in self.data:\n            yield item\n\n# Usage\niterable = IterableData([1, 2, 3, 4])\nfor item in iterable:\n    print(item) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [\"a\", \"b\", \"c\", \"d\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findPosition(arr, target): \n\t\n\t# check if the array is empty \n\tif len(arr) == 0: \n\t\treturn -1\n\t\n\t# start the search from the beginning of the array \n\tstart = 0\n\t\n\t# search until the end of the array \n\tend = len(arr) - 1\n\t\n\t# loop until the start index is less than the end index \n\twhile start <= end: \n\t\t\n\t\t# find the middle index \n\t\tmid = start + (end - start) // 2\n\t\t\n\t\t# check if the current element is greater, smaller or equal to the target\n\t\tif arr[mid] > target: \n\t\t\tend = mid - 1\n\t\telif arr[mid] < target: \n\t\t\tstart = mid + 1\n\t\telse: \n\t\t\treturn mid \n\t\t\n\t# if the search failed  \n\treturn -1\n \npos = findPosition(array, target) \nif pos == -1: \n\tprint (\"Number not found\") \nelse: \n\tprint (\"Number found at index\", pos) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: dictionary = {\n    \"x\" : 7,\n    \"y\" : 8\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nrandom_numbers = []\n\nfor _ in range(5):\n  random_numbers.append(random.random()) \n\nprint(random_numbers) but is not the same. just give one example and only return the code."}
