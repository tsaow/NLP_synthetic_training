{"prompt": "make some code that functions the same as the following code: def calculate_average_grade(grades): \n total = 0\n for grade in grades: \n total += grade \n avg_grade = total / len(grades) \n return avg_grade \n\ngrades = [90, 85, 80, 75, 70] \navg_grade = calculate_average_grade(grades) \nprint('Average Grade: ', avg_grade) # Output: Average Grade: 80.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\nimport sqlite3\n\n# Parse the JSON object\ndata = json.loads(data)\n\n# Connect to the database\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\n\n# Create the SQL table\nc.execute(\"CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)\")\n\n# Insert the data\nc.execute(\"INSERT INTO users (id, name, age) VALUES (?,?,?)\", (data[\"id\"], data[\"name\"], data[\"age\"]))\n\n# Commit the changes\nconn.commit()\n\n# Close the connection\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\n\nclass Chatbot: \n    def __init__(self): \n        self.query_words = set(['discount']) \n        self.stop_words = set(stopwords.words('english'))\n\n    def detect_query(self, sentence):\n        words = word_tokenize(sentence)\n        query_words = [word for word in words if word in self.query_words and word not in self.stop_words]\n        detected_words = \",\".join(query_words)\n        return detected_words but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quicksort(arr): \n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)\n\nprint(quicksort([9, 8, 7, 6, 5, 4, 3, 2, 1])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_list_position(list, position):\n sum = 0\n for i in range(position+1):\n sum += list[i]\n return sum\n \nlist = [1,3,5,4,7]\nposition = 3\n\nprint(sum_list_position(list,position)) # prints 9 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_dicts_by_key(list_of_dicts, key):\n    return sorted(list_of_dicts, key=lambda k: k[key])\n\nsorted_dicts = sort_dicts_by_key(list_of_dicts, sort_by_key)\n\n# Output:\n[\n{'name': 'John', 'age': 25},\n{'name': 'Sarah', 'age': 28},\n{'name': 'Adam', 'age': 30}\n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: student_grades = {\n   \"Adam\": \"A\",\n   \"Amy\": \"B\",\n   \"Aaron\": \"A\",\n   \"Bella\": \"C\"\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(number_list, search_number):\n    for index, num in enumerate(number_list):\n        if num == search_number:\n            return index\n\n    return -1\n\n\nnumber_list = [1, 2, 3, 4, 5]\nsearch_number = 3\n\nresult = linear_search(number_list, search_number)\n\nif result != -1:\n    print(\"Number is present at index\", result)\nelse:\n    print(\"Number is not present in the list\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Triangle:\n def __init__(self, a, b, c):\n self.a = a\n self.b = b\n self.c = c\n\n def area(self):\n # Heron's Formula\n s = (self.a + self.b + self.c) / 2\n return (s*(s-self.a)*(s-self.b)*(s-self.c)) ** 0.5\n\ntriangle = Triangle(3, 4, 5)\nprint(triangle.area())\n# Output: 6.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_values(d):\n    sum = 0\n    for value in d.values():\n        sum += value\n    return sum\n\ntotal = sum_values(d)\nprint(total) # 60 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\nfrom collections import Counter\n\n#request to get the html\nresponse = requests.get('http://example.com/')\n\n# parse the html\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# retrieve the text from the page\ntext = soup.get_text()\n\n# get the word count\nwords = text.split()\nword_count = Counter(words)\n\n# get the top 5 words\ntop_words = word_count.most_common(5)\n\n# print the words\nfor word, count in top_words:\n    print(f'{word}: {count}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * (5/9)\n    return celsius\n    \nif __name__ == \"__main__\":\n    fahrenheit  = 32\n    celsius = fahrenheit_to_celsius(fahrenheit)\n    print(\"Fahrenheit to Celsius: {} degrees F = {} degrees C\".format(fahrenheit, celsius)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import numpy, pandas\nimport numpy as np\nimport pandas as pd\n\n# load dataset\ndata = [25, 28, 32, 36, 39, 45, 45]\n\n# calculate interquartile range\nq25, q75 = np.percentile(data, 25), np.percentile(data, 75)\niqr = q75 - q25\n\n# calculate upper outlier cutoff\nupper_cutoff = q75 + (iqr * 1.5)\n\n# calculate lower outlier cutoff\nlower_cutoff = q25 - (iqr * 1.5)\n\n# Filter values between lower and upper cutoff\noutlier = []\nfor i in data:\n    if i > upper_cutoff or i < lower_cutoff:\n        outlier.append(i)\n\n# print outlier\nprint('Outlier value: ', outlier) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Load the dataset\nX = np.array([[...],[...], ....])\ny = np.array(['A', 'B', 'C', ...])\n\n# Create a decision tree model\nmodel = DecisionTreeClassifier(criterion=\"entropy\")\n\n# Fit the model using the data\nmodel.fit(X, y)\n\n# Generate the prediction code\nfrom sklearn.externals.six import StringIO\nfrom IPython.display import Image\nfrom sklearn.tree import export_graphviz\nimport pydotplus\n\ndot_data = StringIO()\nexport_graphviz(model, out_file=dot_data, filled=True, rounded=True, special_characters=True)\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())\nImage(graph.create_png()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nWrite a Python program to normalize a 3x3 matrix\n\"\"\"\n \n# Function to normalize a 3x3 matrix \ndef normalize_matrix(mat): \n  \n    norm_matrix= []\n    sum_elements = 0\n    for row in mat: \n        for element in row: \n            sum_elements += element \n    for row in mat:\n        norm_row = []\n        for element in row:\n            norm_row.append(element/sum_elements)\n        norm_matrix.append(norm_row)\n    return norm_matrix\n\n# main \nif __name__ == \"__main__\": \n    # Given matrix \n    mat = [[1, 2, 3], \n           [4, 5, 6], \n           [7, 8, 9]]\n  \n    norm_matrix = normalize_matrix(mat) \n    print(\"Normalized matrix:\") \n    print(norm_matrix) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: unique_dict = {\n  'alec' : 'alec',\n  'bob'  : 'bob',\n  'sara' : 'sara',\n  'john' : 'john',\n  'elon' : 'elon'\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nWrite a function to return the five longest words from an input list\n\"\"\"\n\ndef five_longest_words(words):\n    words.sort(key=len, reverse=True)\n    return words[:5]\n\nif __name__ == '__main__':\n    words = [\"Python\", \"programming\", \"language\", \"artificial\", \"intelligence\", \"machine\", \"learning\"]\n    print(five_longest_words(words)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# Load data\ndata = pd.read_csv('company_stock_data.csv')\n\n# Create and separate training and test set\nX = data.drop(['Price'],axis=1)\ny = data['Price']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)\n\n# Train model\nlinear_regression = LinearRegression()\nlinear_regression.fit(X_train, y_train)\n\n# Evaluate model\naccuracy = linear_regression.score(X_test, y_test)\n\nprint(\"Model accuracy is:\", accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence = 'The quick brown fox jumps over the lazy dog'\nwords = sentence.split(' ')\n\nword_count = {} \nfor word in words:\n    if word in word_count:\n        word_count[word] += 1\n    else:\n        word_count[word] = 1\n \nfor k,v in word_count.items():\n    print(k , ':' , v) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nFunction to calculate the roots of a quadratic equation\n\"\"\"\n\ndef quadratic_roots(a, b, c):\n    # calculate the discriminant\n    discriminant = (b**2) - (4*a*c)\n \n    # calculate the two roots\n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n \n    return (root1,root2)\n\nif __name__ == '__main__':\n    roots = quadratic_roots(1, 4, 4)\n    print('Roots are: {} and {}'.format(*roots)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num1 = 4\nnum2 = 9\nnum3 = 10\n\ntotal = num1 + num2 + num3\naverage = total / 3\nprint(\"Average =\", average)  # Output: Average = 7.66 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pyglet\n#cube window\nwindow = pyglet.window.Window()\n\norigin_x = window.width/2\norigin_y = window.height/2\n\n#cube sides \nwidth = 400\nheight = 400\ndepth = 400\n\n#vertices\nx1,y1,z1 = origin_x - width/2, origin_y - height/2, 0\nx2,y2,z2 = origin_x + width/2, origin_y - height/2, 0\nx3,y3,z3 = origin_x - width/2, origin_y + height/2, 0\nx4,y4,z4 = origin_x + width/2, origin_y + height/2, 0\nx5,y5,z5 = origin_x - width/2, origin_y - height/2, depth\nx6,y6,z6 = origin_x + width/2, origin_y - height/2, depth\nx7,y7,z7 = origin_x - width/2, origin_y + height/2, depth\nx8,y8,z8 = origin_x + width/2, origin_y + height/2, depth\n\n# defining the vertices\nvertices = [x1,y1,z1, x2,y2,z2, x3,y3,z3, x4,y4,z4, x5,y5,z5, x6,y6,z6, x7,y7,z7, x8,y8,z8]\n\n#drawing the cube\npolygon=pyglet.graphics.vertex_list(36,\n    ('v3f/static',vertices)\n)\n\n#clear the window\n@window.event\ndef on_draw():\n    window.clear()\n    polygon.draw(pyglet.gl.GL_QUADS)\n\npyglet.app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_common_subsequence(s1, s2):\n    m = len(s1)\n    n = len(s2)\n    dp = [[0 for i in range(n+1)] for i in range(m+1)]\n    \n    for i in range(m):\n        for j in range(n):\n            if s1[i] == s2[j]:\n                dp[i+1][j+1] = dp[i][j] + 1\n            else:\n                dp[i+1][j+1] = max(dp[i+1][j], dp[i][j+1])\n                \n    return dp[m][n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nSave Levels\n\nSave the view dependant properties - \nendpoint locations, level heads and leaders\nof the selected building levels for re-use\n\nNon-level elements will be skipped with dialog,\n so it's advisable to apply filtering beforehead\n\nTESTED REVIT API: 2020\n\n@ejs-ejs\nThis script is part of PyRevitPlus: Extensions for PyRevit\ngithub.com/ejs-ejs | @ejs-ejs\n\n--------------------------------------------------------\nRevitPythonWrapper: revitpythonwrapper.readthedocs.io\npyRevit: github.com/eirannejad/pyRevit\n\n\"\"\"\n\nimport os\nimport pickle\nfrom tempfile import gettempdir\nfrom collections import namedtuple\n\nimport rpw\nfrom rpw import doc, uidoc, DB, UI\n\nPoint = namedtuple('Point', ['X', 'Y','Z'])\n\nAxis = namedtuple('Axis', ['Name', 'Start', 'End','StartBubble', 'EndBubble', 'StartBubbleVisible', 'EndBubbleVisible'])\n\ntempfile = os.path.join(gettempdir(), 'LevelPlacement')\n\ncView = doc.ActiveView\n\n\n\nif not(cView.ViewType == DB.ViewType.Section or cView == DB.ViewType.Elevation):\n    UI.TaskDialog.Show('pyRevitPlus', 'View type \\'{}\\' not supported'.format(cView.ViewType))\n    \nelse:\n    experimental = True\n    UI.TaskDialog.Show('pyRevitPlus', 'Support for \\'{}\\' view type is experimental!'.format(cView.ViewType))\n        \n        \n    selection = rpw.ui.Selection()\n\n#if len(selection) <> 1:\n#            UI.TaskDialog.Show('pyRevitPlus', 'Select a single grid line!')\n#            exit(0);\n\n    n=0\n    LevelLines = dict()\n\n    for cLevel in selection:\n        el = cLevel.unwrap()\n        if isinstance(el, DB.Level):\n            curves=el.GetCurvesInView(DB.DatumExtentType.ViewSpecific, cView)\n            if len(curves) <> 1:\n                UI.TaskDialog.Show('pyRevitPlus', 'The level line is defind by {} curves, unable to proceed', len(curves))\n            else:\n                cLevelLine = {'Name':'', 'Start': Point(0,0,0), 'End': Point(0,0,0), 'StartBubble': False, 'StartBubbleVisible': False, 'EndBubble': False, 'EndBubbleVisible': False}\n        \n                cCurve = curves[0]\n            \n                leader0 = el.GetLeader(DB.DatumEnds.End0, cView)\n                if leader0:\n                    tmp = leader0.Elbow\n                    cLevelLine['Leader0Elbow'] = Point(tmp.X, tmp.Y,tmp.Z)\n                    tmp = leader0.End\n                    cLevelLine['Leader0End'] = Point(tmp.X, tmp.Y,tmp.Z)\n                    tmp = leader0.Anchor\n                    cLevelLine['Leader0Anchor'] = Point(tmp.X, tmp.Y,tmp.Z)\n                \n            \n                leader1 = el.GetLeader(DB.DatumEnds.End1, cView)\n                if leader1:\n                    tmp = leader1.Elbow\n                    cLevelLine['Leader1Elbow'] = Point(tmp.X, tmp.Y,tmp.Z)\n                    tmp = leader1.End\n                    cLevelLine['Leader1End'] = Point(tmp.X, tmp.Y,tmp.Z)\n                    tmp = leader1.Anchor\n                    cLevelLine['Leader1Anchor'] = Point(tmp.X, tmp.Y,tmp.Z)\n        \n                cLevelLine['Name'] = el.Name\n        \n                tmp = cCurve.GetEndPoint(0)\n                cLevelLine['Start'] = Point(tmp.X, tmp.Y,tmp.Z)\n                tmp = cCurve.GetEndPoint(1)\n                cLevelLine['End'] = Point(tmp.X, tmp.Y,tmp.Z)\n                if el.HasBubbleInView(DB.DatumEnds.End0, cView):\n                    cLevelLine['StartBubble']=True\n                if el.HasBubbleInView(DB.DatumEnds.End1, cView):\n                    cLevelLine['EndBubble']=True\n                if el.IsBubbleVisibleInView(DB.DatumEnds.End0, cView):\n                    cLevelLine['StartBubbleVisible']=True\n                if el.IsBubbleVisibleInView(DB.DatumEnds.End1, cView):\n                    cLevelLine['EndBubbleVisible']=True\n                #if isinstance(cCurve, DB.Arc):\n                #    tmp = cCurve.Center\n                #    cLevelLine['Center'] = Point(tmp.X, tmp.Y,tmp.Z)\n            \n                LevelLines[cLevelLine['Name']] = cLevelLine\n                n += 1\n        else:\n            #if isinstance(el, DB.MultiSegmentGrid):\n            #    UI.TaskDialog.Show('pyRevitPlus', 'Skipping yet unsupported Multi-Segment grid \\'{}\\''.format(el.Name))\n            #else: \n            UI.TaskDialog.Show('pyRevitPlus', 'Skipping non- level element \\'{}\\''.format(el.Name))\n        \n    if n<>1:\n        msg = 'Saved {} level placements to {}'.format(n,tempfile)\n    else:\n        msg = 'Saved level \\'{}\\' placement to {}'.format(cLevelLine['Name'],tempfile)\n \n    if n>0:\n        with open(tempfile, 'wb') as fp:\n            pickle.dump(LevelLines, fp)\n        # close(fp)\n        UI.TaskDialog.Show('pyRevitPlus', msg)\n    else:\n        UI.TaskDialog.Show('pyRevitPlus', 'Nothing to save')\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent(sample_dict):\n    key = max(sample_dict, key=sample_dict.get) \n    return key \n    \nprint(most_frequent(sample_dict)) # Outputs: \"quantum\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def area_triangle(side1, side2, side3):\n    # calculate the semi-perimeter\n    s = (side1 + side2 + side3) / 2\n    # calculate the area\n    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5\n    \n    return area but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\ngiven_list = [1, 1, 2, 3, 3, 3, 4, 4, 5]\n\nmy_dict = Counter(given_list)\n\nprint(my_dict) # output: Counter({3: 3, 4: 2, 1: 2, 2: 1, 5: 1}) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n def __init__(self, employee_id, name, salary):\n self.employee_id = employee_id\n self.name = name\n self.salary = salary\n\n def __repr__(self):\n return 'Employee({}, {}, {})'.format(self.employee_id, self.name, self.salary) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(lst, number):\n    for i, n in enumerate(lst):\n        if n == number:\n            return i\n    return -1\n\nresult = search(lst, number)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.stem.wordnet import WordNetLemmatizer \nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n#List of questions and answers\nqa_pairs = {\n            \"What is a function in Python?\": \"In Python, a function is a block of code that can be reused multiple times with different input parameters to perform a certain task.\",\n            \"What is a variable?\": \"A variable is a name for a location in memory where a value can be stored\",\n            \"What is a loop?\": \"A loop is a programming construct that allows a set of instructions to be repeated or iterated until a certain condition is met\"\n           }\n\n#Create a lemmatizer\nlemmatizer = WordNetLemmatizer()\n\n#Create and train a tf-idf vectorizer\nvectorizer = TfidfVectorizer(tokenizer=lambda doc: doc, lowercase=False)\n\n#Create a matrix of tokens\nX = vectorizer.fit_transform(qa_pairs.keys())\n\n#Create a function to answer questions\ndef answer_question(question):\n    #Tokenize the question\n    question_tokens = nltk.word_tokenize(question)\n    \n    #Lemmatize the tokens\n    question_tokens = [lemmatizer.lemmatize(token, pos='v') for token in question_tokens]\n\n    #Transform the question\n    query_vector = vectorizer.transform([question_tokens])\n\n    #Calculate the cosine similarity of the query vector and the matrix of tokens \n    cosine_similarities = X.dot(query_vector.T).T\n    \n    #Return the answer with the highest similarity\n    return qa_pairs[qa_pairs.keys()[cosine_similarities.argsort().item()[-1]]]\n\n#Test the model\nprint(answer_question(\"What is a loop in programming?\"))\n\n# Output: \nA loop is a programming construct that allows a set of instructions to be repeated or iterated until a certain condition is met but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import wikipedia\n\narticles = ['Advanced Dungeons & Dragons',\n            'The Legend of Zelda',\n            'Mario Kart']\n\nfor article in articles:\n page = wikipedia.page(title=article)\n print(article, page.categories)\n\n# Output:\n# Advanced Dungeons & Dragons ['Books about games', 'Dungeons & Dragons', 'Role-playing game books']\n# The Legend of Zelda ['1986 video games', 'Action-adventure games', 'High fantasy video games', 'Nintendo franchises', 'The Legend of Zelda']\n# Mario Kart ['1992 video games', 'Kart racing video games', 'Mario Kart', 'Nintendo franchises', 'Racing video games', 'Video games developed in Japan'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Name | Age | Gender | Hobby\n-----|-----|--------|-------\nJohn | 24  | Male   | Football but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to implement breadth-first search\n\ngraph = {\n    \"A\": [\"B\", \"C\"],\n    \"B\": [\"A\", \"D\", \"E\"],\n    \"C\": [\"A\", \"F\"],\n    \"D\": [\"B\"],\n    \"E\": [\"B\", \"F\"],\n    \"F\": [\"C\", \"E\"]\n}\n\nvisited = set()\n\ndef bfs(graph, vertex):\n    \n    queue = []\n    queue.append(vertex)\n    visited.add(vertex)\n    \n    while queue:\n        node = queue.pop(0)\n        print(node)\n        \n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                queue.append(neighbor)\n\nvertex = \"A\"\nbfs(graph, vertex) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef replaceNonAlphanum(s):\n    pattern = r\"[^a-zA-Z0-9]\"\n    return re.sub(pattern, \"*\", s)\n\ns = \"Hello* World_$!\"\nprint(replaceNonAlphanum(s))\n// Output: Hello** World**$* but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def dfs(graph, start):\n    visited, stack = set(), [start]\n    while stack:\n        vertex = stack.pop()\n        if vertex not in visited:\n            visited.add(vertex)\n            stack.extend(graph[vertex] - visited)\n    return visited but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, jsonify\nimport json\n\napp = Flask(__name__)\n \n@app.route('/shorten', methods=['POST'])\ndef shorten():\n    response = {'url': request.json[\"url\"]}\n    response['short_url'] = 'http://example.com/' + create_short_url()\n    return jsonify(response), 201\n\ndef create_short_url():\n    # Code to generate and store a unique short URL\n    return 'abcd123'\n \nif __name__ == '__main__':\n    app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_to_list(text):\n    lst = text.split()\n    return lst\n\ntext = \"This is a sentence.\"\nprint(string_to_list(text)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Shape:\n    def __init__(self, type, area):\n        self.type = type\n        self.area = area\n        \n    def get_type(self):\n        return self.type\n    \n    def get_area(self):\n        return self.area\n    \n    def set_area(self, area):\n        self.area = area\n\nshape = Shape('Square', 10)\nprint(shape.get_type()) #outputs Square\nprint(shape.get_area()) #outputs 10 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify(nums):\n    # Dictionary to store the classification\n    result = {}\n    result['zero'] = []\n    result['one'] = []\n    result['two'] = []\n    result['three'] = []\n\n    for num in nums:\n        if num == 0:\n            result['zero'].append(num)\n        elif num == 1:\n            result['one'].append(num)\n        elif num == 2:\n            result['two'].append(num)\n        else:\n            result['three'].append(num)\n\n    return result\n\nnums = [1, 2, 0, 1, 3, 2]\n\nprint(classify(nums))\n# Output: {'zero': [0], 'one': [1, 1], 'two': [2, 2], 'three': [3]} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countUppercase(myStr):\n    uppercaseCount = 0\n    for l in myStr:\n        if l.isupper():\n            uppercaseCount+=1\n    return uppercaseCount\n\nprint(countUppercase('Hello World')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # This is a python program to detect the presence of a target word in a text\ndef detect_word(target, text):\n    return target in text.split()\n\n# Example\ntarget = 'apple'\ntext = 'I like apples, they are sweet and juicy.'\n\nif detect_word(target, text):\n    print('Target word found in the text.')\nelse:\n    print('Target word not found in the text.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nGenerate a code to create a scatterplot using the Seaborn library in Python\n\"\"\"\n\nimport pandas as pd\nimport seaborn as sns\n\n#load the sample datasets\ndata1 = pd.read_csv('sample_data1.csv')\ndata2 = pd.read_csv('sample_data2.csv')\n\n# Create a Scatterplot Using Seaborn\nsns.relplot(x=\"data1_x\", y=\"data1_y\", data=data1); \nsns.relplot(x=\"data2_x\", y=\"data2_y\", data=data2); but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nwords = text.split()\n\nword_count = Counter(words)\n\n# print the most common words\nprint(word_count.most_common(3))\n\n# Output: [('the', 2), ('quick', 1), ('brown', 1)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tweepy \nimport pandas as pd\n\n# Authentication credentials \nconsumer_key = 'XXXXXXXXXXXXXXXXXXXXX'\nconsumer_secret = 'XXXXXXXXXXXXXXXXXXXXX'\naccess_token = 'XXXXXXXXXXXXXXXXXXXXX'\naccess_token_secret = 'XXXXXXXXXXXXXXXXXXXXX'\n\n# Authenticating the access \nauth = tweepy.OAuthHandler(consumer_key, consumer_secret) \nauth.set_access_token(access_token, access_token_secret) \napi = tweepy.API(auth) \n\n# Fetching tweets\ntweets = api.user_timeline('username') \n\n# Parsing the tweets\ndef parse_tweets(tweets): \n    # Creating a list to store the parsed tweets \n    parsed_tweets = [] \n  \n    # appending parsed tweets to the list \n    for tweet in tweets[:10]: \n        # Fetching tweets and  \n        # printing the fetched tweets \n        parsed_tweets.append({'created_at': tweet.created_at, 'text': tweet.text})\n  \n    # Returning the quotes \n    return parsed_tweets \n\n# Printing the parsed tweets \ntweets_list = parse_tweets(tweets) \nprint(tweets_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_max_elem(arr):\n    max_elem = arr[0]\n    for elem in arr:\n        if elem > max_elem:\n            max_elem = elem\n    return max_elem\n \narr = [1, -2, 3, 4]\nmax_elem = get_max_elem(arr)\nprint(max_elem) # Output: 4 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.linear_model import LogisticRegression\n\n# load the data\ndata = pd.read_csv('data.csv')\n\n# create the training and test set\nX = data[['x1', 'x2']]\ny = data['y']\n\n# train the model\nmodel = LogisticRegression()\nmodel.fit(X, y)\n\n# make predictions\npreds = model.predict(X)\n\n# check accuracy\naccuracy = model.score(X, y)\nprint('accuracy', accuracy) \n# output: accuracy 1.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndata = {\n    'name': 'John Doe',\n    'email': 'john@example.com',\n    'age': 32\n}\n\njson_data = json.dumps(data)\nprint(json_data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# Read in dataset\ndf = pd.read_csv('data.csv')\n\n# Drop records with missing values\ndf.dropna(inplace=True)\n\n# Convert Gender, Age, State, Country, Hobby to categorical values\ndf['Gender'] = df.Gender.astype(\"category\")\ndf['Age'] = df.Age.astype(\"category\")\ndf['State'] = df.State.astype(\"category\")\ndf['Country'] = df.Country.astype(\"category\")\ndf['Hobby'] = df.Hobby.astype(\"category\")\n\n# One-hot encode categorical values\ndf = pd.get_dummies(df, columns=['Gender', 'Age', 'State', 'Country', 'Hobby'])\n\n# Convert ID to a string\ndf['ID'] = df.ID.astype('str')\n\n# Output dataset\ndf.to_csv('processed_data.csv', index=False) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \nfrom bs4 import BeautifulSoup\n\nurl = \"http://example.com\"\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, \"html.parser\")\n\n# scrape data from website but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_list(l): \n    return [ele for ele in reversed(l)] \n  \nmy_list = [1, 2, 3, 4, 5]\n \nprint(reverse_list(my_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def to_lowercase(string):\n    lowercase_string = \"\"\n    for char in string:\n        lowercase_string += char.lower()\n    return lowercase_string\n\nif __name__ == '__main__':\n    string = \"HELLO WORLD\"\n    print(to_lowercase(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Binary Tree \nclass Node: \n    def __init__(self,data): \n        self.data=data \n        self.left=None\n        self.right=None\n\n# Insert node in a binary tree \ndef insert(node,data): \n    if node is None: \n        return Node(data) \n  \n    else: \n        if data<=node.data: \n            node.left=insert(node.left,data) \n        else: \n            node.right=insert(node.right,data) \n   \n    return node \n    \n# Display tree in ascending order\ndef inOrder(node): \n    if node is not None: \n        inOrder(node.left) \n        print(node.data) \n        inOrder(node.right) \n  \n# Driver code \nroot=None \nroot=insert(root,42) \ninsert(root,13) \ninsert(root,24) \ninsert(root,5) \ninsert(root,76) \ninsert(root,90) \n\ninOrder(root) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_string(string): \n    return ''.join(sorted(string)) \n  \nstring = \"Fortnite\"\nprint(sort_string(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maximum_numbers(x, y):\n if x > y:\n return x\n else:\n return y\n\nprint(maximum_numbers(x, y)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import export_graphviz\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# Read the csv file and parse the data\ndf = pd.read_csv('iris.csv')\nx = df.drop('species', axis=1).values\ny = df['species'].values\n\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=1)\n\n# Train the Decision Tree\nmodel = DecisionTreeClassifier(criterion='entropy', max_depth=3)\nmodel.fit(X_train, y_train)\n\n# Make predictions and evaluate the accuracy\ny_pred = model.predict(X_test)\nscore = accuracy_score(y_test, y_pred)\n\n# Visualize the decision tree\nexport_graphviz(model, \nout_file='iris_tree.dot',\nfeature_names=['sepal length', 'sepal width', 'petal length', 'petal width'],\nclass_names=['setosa', 'versicolor', 'virginica'],\nfilled=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Blueprint, jsonify\n\nuser_endpoint = Blueprint('user', __name__)\n\n@user_endpoint.route('/users', methods=['GET'])\ndef get_users():\n users_data = []\n query = 'SELECT user_id, user_name, user_email FROM Users'\n db_cursor.execute(query)\n users = db_cursor.fetchall()\n \n for user in users:\n user_data = {\n 'user_id': user[0],\n 'user_name': user[1],\n 'user_email': user[2]\n }\n users_data.append(user_data)\n \n return jsonify(users_data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_median(nums):\n    nums.sort()\n    if len(nums) % 2 == 0:\n        mid1 = len(nums) // 2\n        mid2 = mid1 - 1\n        return (nums[mid1] + nums[mid2]) / 2\n    else:\n        return nums[len(nums) // 2]\n\nnums = [3, 5, 10, 2]\nprint(calculate_median(nums)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence = \"It's a beautiful day\"\n\nword = \"beautiful\"\n\nresult = sentence.replace (word, \"XXX\")\n\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def first_non_repeating_char(string): \n    for c in string: \n        if string.count(c) == 1: \n            return c \n      \n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_by_length(array):\n    return sorted(array, key=len) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # define a function\ndef maxValue(list_of_nums):\n # assign the max as the first item in the list\n maximum = list_of_nums[0]\n # loop through the list\n for num in list_of_nums:\n  # update the max value if its larger than the current maximum\n  if num > maximum:\n   maximum = num\n # return the final maximum\n return maximum\n \n# example:\nlist_of_nums = [1, 4, 6, 2, -5, 10]\nmax_value = maxValue(list_of_nums)\nprint(max_value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def to_title_case(string):\n    words = string.split()\n\n    result = []\n    for word in words:\n        result.append(word.title())\n\n    return ' '.join(result)\n\ntitle = to_title_case(\"hello world\")\nprint(title) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(lst): \n  for i in range(len(lst)):\n    min_idx = i\n    for j in range(i+1, len(lst)):\n      if lst[min_idx] > lst[j]:\n        min_idx = j\n    lst[i], lst[min_idx] = lst[min_idx], lst[i]\n  return lst\n\nprint(sort_list([3, 5, 18, 6, 1, 20])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\n# initialise the driver\ndriver = webdriver.Chrome()\n\n# go to the given URL\ndriver.get(\"https://www.example.com\")\n\n# wait for the page to load\nwait = WebDriverWait(driver, 10)\nwait.until(EC.visibility_of_element_located(driver.find_element_by_xpath('//a[@href=\"link\"]')))\n\n# click the given link\nlink = driver.find_element_by_xpath('//a[@href=\"link\"]')\nlink.click()\n\n# wait for the new page to load\nwait.until(EC.visibility_of_element_located(driver.find_element_by_tag_name('body')))\n\n# take a screenshot of the current page\ndriver.save_screenshot(\"example.png\")\n\n# close the driver\ndriver.quit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\n# create the connection to the Database\ncon = sqlite3.connect('mydatabase.db')\n\n# get the user data from the database\nwith con:\n cur = con.cursor()\n sql = 'SELECT * FROM users WHERE user_id=?'\n cur.execute(sql, ['12345'])\n user = cur.fetchone()\n\n# update the user data\nuser_name = 'John Smith'\nuser_age = 32\nuser_type = 'standard'\n\n# update the data in the database\nsql = 'UPDATE users SET name=?, age=?, type=? WHERE user_id=?'\ncon.execute(sql, [user_name, user_age, user_type, '12345'])\n\n# commit the changes\ncon.commit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def word_counts(words):\n    counts = {}\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n    return counts but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn import datasets\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Load the dataset\nfruits = datasets.load_iris()\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(fruits.data, fruits.target, test_size=0.3, random_state=1)\n\n# Train the model with the Decision Tree Algorithm \nmodel = DecisionTreeClassifier()\nmodel.fit(X_train, y_train)\n\n# Make predictions with the model\npredicted_fruits = model.predict([[1, 0, 0.5, 1]])\n\nif predicted_fruits == [1]:\n    print('The fruit is likely to be an apple')\nelif predicted_fruits == [2]:\n    print('The fruit is likely to be an orange')\nelse:\n    print('The fruit is likely to be a banana') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_min_max(nums): \n  min_value = min(nums) \n  max_value = max(nums) \n  return (min_value, max_value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def matrix_multiply(matrix1, matrix2):\n    row1 = len(matrix1)\n    col1 = len(matrix1[0])\n    row2 = len(matrix2)\n    col2 = len(matrix2[0])\n    \n    # Check matrix dimensions\n    if col1 != row2:\n        return -1\n    \n    # Create output matrix\n    result = [[0 for i in range(col2)] for j in range(row1)]\n        \n    # Multiply the two matrices\n    for i in range(row1):\n        for j in range(col2):\n            for k in range(row2):\n                result[i][j] += matrix1[i][k] * matrix2[k][j]\n                \n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_sum(a, b):\n    \"\"\"Print the sum of two numbers.\"\"\"\n    print(a + b) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\n\n# Read the data set\ndataset = pd.read_csv('customer-data.csv') \n\n# Determine the unique features in the data\nfeatures = np.unique(np.concatenate([dataset[column].value_counts().keys() for column in dataset.columns]))\n\n# Create the customer profile from the data\ncustomer_profile = dict()\n\nfor f in features:\n # Find the frequency of feature across the dataset\n freq = np.sum(dataset == f)\n # Calculate the probability of the feature\n prob = freq / dataset.shape[0]\n # Store the results in customer_profile\n if prob >= 0.5:\n  customer_profile[f] = 'High'\n elif prob < 0.5 and prob > 0.2:\n  customer_profile[f] = 'Medium'\n else:\n  customer_profile[f] = 'Low'\n  \nprint(customer_profile) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence = \"The quick brown fox\"\nwords = sentence.split(\" \")\n\nfor word in words:\n print(word)\n\n# Output\n# The\n# quick\n# brown\n# fox but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\njokes = [\n   'Why did the chicken cross the playground? To get to the other slide!',\n   'Why did the monkey fall out of the tree? Because it was dead!',\n   'Why did the dinosaur go to the dentist? Because he had a toothache!'\n]\n\ndef tell_joke():\n   joke = random.choice(jokes)\n   print(joke)\n\ntell_joke() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def text_to_hex(text):\n    hex_encoded = \"\"\n    for i in text:\n        hex_encoded += ((hex(ord(i)))[2:]).zfill(2) \n    return hex_encoded\n\nprint(text_to_hex(\"Hello World\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_dict = {\n    'name': 'John',\n    'age': 24,\n    'gender': 'male'\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reduce_arr(arr):\n    result = 0\n    for i in arr:\n        result += i\n    return result\n\nreduce_arr(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def permutateString(inputStr, n):\n    if n == 0:\n        return []\n    elif len(inputStr) == 1:\n        return [inputStr]\n    else:\n        result = []\n        for i in range(len(inputStr)):\n            firstChar = inputStr[i]\n            remainingChars = inputStr[:i] + inputStr[i+1:]\n            for permutation in permutateString(remainingChars, n-1):\n                result.append([firstChar] + permutation)\n        return result\n\ninputStr = \"ABCD\"\nn = 2\npermutations = permutateString(inputStr, n)\n\nfor permutation in permutations:\n    print(''.join(permutation)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence = \"I have an apple, and the apple is delicious.\"\n\nword = \"apple\"\n\ncount = 0\n\nfor word in sentence.split():\n    if(word == \"apple\"):\n        count = count + 1\n\nprint(\"The no. of occurrences of the word 'apple' is:\", count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from html.parser import HTMLParser  \nfrom urllib.request import urlopen  \nfrom urllib import parse\n\nclass LinkParser(HTMLParser):\n\n    def handle_starttag(self, tag, attrs):\n        if tag == 'a':\n            for (key, value) in attrs:\n                if key == 'href':\n                    # We are grabbing the new URL. We are also adding the\n                    # base URL to it. For example:\n                    # www.netinstructions.com is the base and\n                    # somepage.html is the new URL (a relative URL)\n                    #\n                    # We combine a relative URL with the base URL to create\n                    # an absolute URL like:\n                    # www.netinstructions.com/somepage.html\n                    newUrl = parse.urljoin(self.baseUrl, value)\n                    # And add it to our collection of links:\n                    self.links = self.links + [newUrl]\n\n    # This is a new function that we are creating to get marked up\n    # text (with tags like <p> and <a>)\n    def handle_data(self, data):\n        self.data = self.data + data\n\n    def getLinks(self, url):\n        self.links = []\n        self.baseUrl = url\n        response = urlopen(url)\n        htmlBytes = response.read()\n        # Note that feed() handles Strings well, but not bytes\n        # (A change from Python 2.x to Python 3.x)\n        htmlString = htmlBytes.decode(\"utf-8\")\n        self.feed(htmlString)\n        return htmlString, self.links\n\n# Make a new crawler\ncrawler = LinkParser()\n\n# And get all the links from the site\ndata, links = crawler.getLinks(\"http://www.website.com\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from pyspark.sql import functions as F\n\ndef removeDuplicates(df):\n df = df.dropDuplicates()\n df = df.orderBy(F.desc(\"date\"))\n return df but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nnltk.download('stopwords')\n\nfrom nltk.corpus import stopwords\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Clean the data.\nstop_words = set(stopwords.words('english')) \nword_tokens = nltk.word_tokenize(TEXT)\nfiltered_sentence = [w for w in word_tokens if not w in stop_words] \nsentence = \" \".join(filtered_sentence)\n\n# Create the tf-idf vector\nvectorizer = TfidfVectorizer()\nvectorizer.fit([sentence])\nX = vectorizer.transform([sentence])\n\n# Create and train the model\nnb = MultinomialNB()\nnb.fit(X, [1])\n\n# Predict the sentiment of the sentence\nprob = nb.predict_proba(X)[0]\nif prob[0] > 0.5: \n sentiment = \"Negative\"\nelse:\n sentiment = \"Positive\"\n\nprint(f\"The sentiment of the sentence is {sentiment}.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for n in range(2, 21): \n   if n > 1: \n       for i in range(2, n//2 + 2): \n           if (n % i) == 0: \n               break\n       else: \n           print(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # code to display the result of a mathematical expression\n\nexpr = '(3 + 4) * 5'\n\n# Evaluate the expression\nresult = eval(expr)\n\n# Print the result\nprint(\"Result of the expression: \" + str(result)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def index_of(arr, ele):\n    for i in range(len(arr)):\n        if arr[i] == ele:\n            return i\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(lst):\n    max = lst[0]\n    for i in lst:\n        if i > max:\n            max = i\n    return max but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sumTwoNumbers(a, b):\n    return a + b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Robot:\n    \"\"\"This class describes a robot\"\"\"\n    def __init__(self, name, characteristics):\n        self.name = name\n        self.characteristics = characteristics\n\n    def move(self):\n        return \"Robot is moving.\"\n\n    def speak(self):\n        return \"Robot is speaking.\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_char_from_string(string, remove_char):\n    new_string = \"\"\n    for char in string:\n        if char != remove_char:\n            new_string += char\n    return new_string\n\nif __name__ == '__main__':\n     string = \"computer science\"\n     remove_char = \"c\"\n     print(remove_char_from_string(string, remove_char)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\n# Read the dataset\ndata = pd.read_csv('data.csv')\n\n# Split the dataset \nX = data.drop(['label'], axis=1)\ny = data['label']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\n\n# Feature scaling\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n\n# Train the model\nmodel = SVC(kernel='linear', probability=True)\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Evaluate the model\nprint(f'Accuracy: {accuracy_score(y_test, y_pred)}')\nprint(f'Confusion Matrix:\\n {confusion_matrix(y_test, y_pred)}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\nclass Object3D:\n    def __init__(self):\n        # define the object points\n        self.vertices = np.array([(0., 0., 0.), (1., 0., 0.), (1., 1., 0.),\n                                  (0., 1., 0.), (0., 0., 1.), (1., 0., 1.),\n                                  (1., 1., 1.), (0., 1., 1.)])\n        # define the faces (defined by indices of the points)\n        self.faces = np.array([(0, 1, 2, 3), (4, 5, 6, 7),\n                               (0, 1, 5, 4), (2, 3, 7, 6)])\n\n        # define the object colors\n        self.colors = np.array([(1, 0, 0), (0, 1, 0), (0, 0, 1),\n                                (1, 1, 0), (1, 0, 1), (0, 1, 1)])\n\n        # define the object edges\n        self.edges = np.array([(0, 1), (1, 2), (2, 3), (3, 0),\n                               (4, 5), (5, 6), (6, 7), (7, 4),\n                               (0, 4), (1, 5), (2, 6), (3, 7)]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\nconn = sqlite3.connect('user_preferences.db')\nc = conn.cursor()\n\n# Create table\nc.execute('''CREATE TABLE user_preferences (\n user_id INTEGER PRIMARY KEY,\n preference_name TEXT NOT NULL,\n preference_value TEXT\n)''')\n\n# Save (commit) the changes\nconn.commit()\n\n# Close the connection\nconn.close()\n\n# Add user preferences to the database\ndef addUserPreferences(user_id, preference_name, preference_value):\n conn = sqlite3.connect('user_preferences.db')\n c = conn.cursor()\n c.execute(\"INSERT INTO user_preferences(user_id, preference_name, preference_value) VALUES (?,?,?)\", (user_id, preference_name, preference_value))\n conn.commit()\n conn.close()\n\n# Get user preferences from the database\ndef getUserPreferences(user_id):\n conn = sqlite3.connect('user_preferences.db')\n c = conn.cursor()\n c.execute(\"SELECT * FROM user_preferences WHERE user_id=?\", (user_id))\n user_preferences = c.fetchall()\n conn.commit()\n conn.close()\n return user_preferences but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/api', methods=['POST'])\ndef api():\n if (request.method == 'POST'):\n  # All code for handling POST requests\n  return 'Handling POST requests'\n else:\n  return 'Method Not Allowed'\n\nif __name__=='__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPalindrome(s):\n\n # remove whitespaces\n s = ''.join(s.split())\n\n # reverse string\n rev = s[::-1]\n\n # compare\n if rev == s:\n return True\n return False\n\nif isPalindrome(\"racecar\"):\n print('String is a palindrome')\nelse:\n print('String is not a palindrome') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: combined_dict = {**dict1, **dict2} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import csv\nimport sqlite3\n\ndef main(csv_file):\n conn = sqlite3.connect('contacts.db')\n c = conn.cursor()\n c.execute(\"CREATE TABLE contacts (name TEXT, email TEXT)\")\n with open(csv_file, 'r') as f:\n reader = csv.DictReader(f)\n for row in reader:\n c.execute(\"INSERT INTO contacts VALUES (:name, :email)\", row)\n conn.commit()\n c.close()\nif __name__ == '__main__':\n main('input.csv') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(arr, key): \n    n = len(arr) \n  \n    for i in range(0, n): \n        if arr[i] == key: \n            return i\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #imports \nimport os\nimport cv2 \nimport numpy as np \nimport tensorflow as tf \nimport matplotlib.pyplot as plt \n\n#read the image \nimage_path = \"image.jpg\"\nimg = cv2.imread(image_path)\n\n#Load the model \nmodel = tf.saved_model.load(\"model\")\n\n#Process the image \nimg_dim = (224, 224)\nimg = cv2.resize(img, img_dim) \n\n#Predict and output the result\nprediction = model.predict(np.expand_dims(img, 0))\nclasses = [\"cat\", \"dog\", \"bird\"]\n\nprint(\"prediction = {}\".format(classes[prediction.argmax()]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def repeat_string (string, repeat):\n    \"\"\"Return the supplied string repeated as many times as specified.\"\"\"\n    \n    repeated_string = string * repeat\n    \n    return repeated_string\n    \nprint(repeat_string(\"Abstract\", 3)) # Output: AbstractAbstractAbstract but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def char_freq(s):\n    freq = dict()\n    for i in s:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n\nstring = 'hello'\nresult = char_freq(string)\n\nprint(result) # {'h': 1, 'e': 1, 'l': 2, 'o': 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Read in the data\ndf = pd.read_csv('winequality.csv')\n\n# Pick features and target\nX = df.drop('quality', axis=1).values\ny = df['quality'].values\n\n# Split into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Scale the data\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\n# Create and train our model\nmodel = RandomForestRegressor()\nmodel.fit(X_train, y_train)\n\n# Make predictions\npredictions = model.predict(X_test)\n\n# Measure accuracy\nfrom sklearn.metrics import mean_squared_error\nerror = mean_squared_error(y_test, predictions)\nprint('Mean squared error: ', error) but is not the same. just give one example and only return the code."}
