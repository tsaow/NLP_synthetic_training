{"prompt": "make some code that functions the same as the following code: class Purchase:\n\n    def __init__(self, item_name, purchase_date, quantity):\n        self.item_name = item_name\n        self.purchase_date = purchase_date\n        self.quantity = quantity\n\nclass Customer:\n\n    def __init__(self, customer_name):\n        self.customer_name = customer_name\n        self.purchases = []\n\n    def add_purchase(self, purchase):\n        self.purchases.append(purchase) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Program checking if the input number is even or odd\nnum = int(input(\"Please enter a number: \"))\n\n# Check if the number is even or odd\nif num % 2 == 0:\n    print(str(num) + \" is an even number.\")\nelse:\n    print(str(num) + \" is an odd number.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\ndata = pd.read_csv('data.csv')\nX = data.iloc[:, :-1]\ny = data.iloc[:, -1]\n\nmodel = Sequential()\nmodel.add(Dense(units=32, activation='relu', input_dim=X.shape[1]))\nmodel.add(Dense(units=1, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(X, y, epochs=200, batch_size=64) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import spacy\n\nnlp = spacy.load(\"en_core_web_lg\")\n\ndef compare_sentences(sentence_a, sentence_b):\n    # tokenize the sentences\n    sentence_a_tokens = nlp(sentence_a)\n    sentence_b_tokens = nlp(sentence_b)\n\n    # compute the similarity score\n    similarity_score = sentence_a_tokens.similarity(sentence_b_tokens)\n\n    return similarity_score\n\n# example:\nprint(compare_sentences(\"The quick brown fox jumps over the lazy dog\",\"The fast brown fox jumps over the lazy fox\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\narr = np.zeros((3, 3, 3))\nprint(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #include <stdio.h>\n#include <string.h>\n\nint LevenshteinDistance(char *s1, char *s2) {\n    int s1len, s2len, x, y, lastdiag, olddiag;\n    s1len = strlen(s1);\n    s2len = strlen(s2);\n    unsigned int column[s1len+1];\n    for (y = 1; y <= s1len; y++)\n        column[y] = y;\n    for (x = 1; x <= s2len; x++) {\n        column[0] = x;\n        for (y = 1, lastdiag = x-1; y <= s1len; y++) {\n            olddiag = column[y];\n            if (s1[y-1] == s2[x-1])\n                column[y] = lastdiag;\n            else \n                column[y] = min( column[y] + 1, min(column[y-1] + 1, lastdiag + 2));\n            lastdiag = olddiag;\n        }\n    }\n    return(column[s1len]);\n}\n\nint main(){\n    printf (\"%d\\n\", LevenshteinDistance(\"Python\", \"Perl\"));\n    return 0;\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\ndef get_week_number(date_string):\n    d = datetime.datetime.strptime(date_string, '%Y-%m-%d')\n    return d.isocalendar()[1]  # isocalendar() is used to get the ISO week number but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(arr, key):\n    for i in range(len(arr)):\n        if arr[i] == key: \n            return i \n  \n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nrandom_string = ''.join(random.choices(string.ascii_letters + string.digits, k=10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Trainer:\n    def __init__(self):\n        self.data = []\n        self.model = None\n    \n    def add_data(self, new_data):\n        self.data.append(new_data)\n    \n    def train(self):\n        self.model = Model(self.data)\n        self.model.train()\n    \n    def predict(self, input_data):\n        preds = self.model.predict(input_data)\n        return preds but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    if request.method == 'POST':\n        user = request.form['username']\n        card = request.form['card']\n        # handle user and card registration here\n        # ...\n        return render_template('register.html', success=True)\n    else:\n        return render_template('register.html')\n\nif __name__ == '__main__':\n    app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # create set from list\nset1 = set(list1)\nset2 = set(list2)\n\n# calculate set intersection\nintersection = set1.intersection(set2)\n\n# calculate set union\nunion = set1.union(set2)\n\n# calculate set difference\ndifference = set1.difference(set2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: cumulative_sum = 0\nwhile i > 0:\n    cumulative_sum += (i % 10) # add the last digit of the number to the cumulative sum\n    i //= 10 # truncate the last digit of the number\n\n# Output \n#cumulative_sum will hold the sum of all the digits in the number but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: try:\n a = 10\n b = 0\n c = a/b\nexcept ZeroDivisionError:\n print(\"Error: Cannot divide by zero\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nimport numpy as np\n\nfrom nltk.tokenize import word_tokenize\nnltk.download('punkt')\n\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Embedding, LSTM\nfrom sklearn.model_selection import train_test_split\n\n# load the dataset\ndata = open('dataset.csv').read()\nlabels, phrases = [], []\nfor line in data.split('\\n'):\n label, phrase = line.split(',')\n labels.append(label)\n phrases.append(phrase)\n\n# tokenize and vectorize the data\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts(phrases)\nsequences = tokenizer.texts_to_sequences(phrases)\nword_index = tokenizer.word_index\n\n# define the model\nmax_length = max([len(seq) for seq in sequences])\nvocab_size = len(word_index) + 1\nembedding_dim = 16\n\nX = pad_sequences(sequences, maxlen=max_length)\nY = np.array(labels, dtype='float32')\n\nmodel = Sequential()\nmodel.add(Embedding(vocab_size, embedding_dim, input_length=max_length))\nmodel.add(LSTM(100))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, shuffle=True, random_state=42)\nmodel.fit(X_train, Y_train, batch_size=64, epochs=20)\n\n# evaluate the model\nscore, acc = model.evaluate(X_test, Y_test, batch_size=32)\nprint(f'Test score: {score}\\nTest accuracy: {acc}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ProductCalculator:\n    def __init__(self, num_list):\n        self.num_list = num_list\n    \n    def find_product(self):\n        product = 1\n        for num in self.num_list:\n            product *= num\n        return product\n\n# example usage\nnum_list = [5, 4, 9, 10]\ncalc = ProductCalculator(num_list)\nproduct = calc.find_product()\nprint(product) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def dict_to_sorted_list(d):\n # Convert Dictionary to List\n lst = list(d.items())\n \n # Sort List Alphabetically\n lst.sort(key=lambda x: x[0])\n \n return lst\n \nexample_dict = {'a':1, 'b':2, 'c':3}\nsorted_list = dict_to_sorted_list(example_dict)\nprint(sorted_list)\n\n# Output:\n# [('a', 1), ('b', 2), ('c', 3)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\nimport cgitb\ncgitb.enable()\n\n# Connect to the database\nconn = sqlite3.connect('mydatabase.db')\ncursor = conn.cursor()\n\n#Execute the query\ncursor.execute(\"SELECT * FROM mytable\")\n\n# Print out the result in an HTML page\nprint(\"Content-type: text/html\")\nprint()\nprint(\"<h1>My Query Results</h1>\")\nprint(\"<ul>\")\nfor row in cursor.fetchall():\n print(\"<li>{}</li>\".format(row))\nprint(\"</ul>\")\n\n# Close the connection\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def login(username, password):\n    hashed_password = hashlib.sha256(password.encode('utf-8')).hexdigest()\n    if username in users and users[username] == hashed_password:\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class StudentRecord:\n    def __init__(self, first_name, last_name, age):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n    \n    # Getters\n    @property\n    def first_name(self):\n        return self._first_name\n    \n    @property\n    def last_name(self):\n        return self._last_name\n    \n    @property\n    def age(self):\n        return self._age\n    \n    # Setters\n    @first_name.setter\n    def first_name(self, first_name):\n        if not isinstance(first_name, str):\n            raise ValueError(\"First name must be a string\")\n        self._first_name = first_name\n    \n    @last_name.setter\n    def last_name(self, last_name):\n        if not isinstance(last_name, str):\n            raise ValueError(\"Last name must be a string\")\n        self._last_name = last_name\n    \n    @age.setter\n    def age(self, age):\n        if not isinstance(age, int):\n            raise ValueError(\"Age must be an integer\")\n        self._age = age but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import base64\n\ndef encode_string(string):\n    encoded_string = base64.b64encode(string.encode('utf-8'))\n    return encoded_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Hangman game\nimport time\nimport random\n\ndef play_game():\n    print(\"Let's play Hangman!\")\n    time.sleep(0.5)\n\n    # Create a list of words\n    words = [\"plutonium\",\"deadline\",\"millenium\",\"gigabyte\",\"hydroelectric\",\"hybridize\"]\n\n    # Pick a word from list\n    word = random.choice(words)\n\n    # Create a variable to track games won\n    win_count = 0\n\n    # Create a variable to track how many lives you have\n    lives = 6\n\n    # Make another variable to track if the game is still running\n    still_playing = True\n\n    # Create an empty list for guessed letters\n    guessed_words = []\n\n    # Create a list for the letters in the secret word\n    secret_word = list(word)\n\n    # Create another list for discovered letters\n    discovered_word = []\n    for i in range (0, len(word)):\n        discovered_word.append(\"_\")\n\n    while still_playing:\n        # Check if user has won\n        if discovered_word == secret_word:\n            print(\"You win!\")\n            win_count += 1\n            still_playing = False\n\n        # Check if user has any lives left\n        if lives == 0:\n            print(\"You lost, better luck next time!\")\n            still_playing = False\n\n        # Show user the letters they have guessed\n        print(\"Guessed letters: \" + \" \".join(guessed_words))\n\n        # Show user the secret word\n        print(\"Secret word: \" + \" \".join(discovered_word))\n\n        # Ask for a letter\n        input_letter = input(\"Please input a letter or type 'quit': \").lower()\n\n        # Check if letter was already guessed\n        if input_letter in guessed_words:\n            print(\"You already guessed this letter! Guess again.\")\n        # Check if user decides to quit\n        elif input_letter == \"quit\":\n            print(\"Quitting game. Better luck next time!\")\n            still_playing = False\n            break\n        # If new letter is guessed\n        else:\n            guessed_words.append(input_letter)\n            count_correct = 0\n            # Check if new letter is in the secret word\n            for i, letter in enumerate(secret_word):\n                if letter == input_letter:\n                    discovered_word[i] = letter\n                    count_correct += 1\n            if count_correct == 0:\n                lives -= 1\n                print(\"No luck! \" + str(lives) + \" lives remaining!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_dict_by_key(sample):\n    # Create a sorted list of keys\n    sorted_keys = sorted(sample.keys())\n    # Iterate over the sorted sequence\n    for key in sorted_keys:\n        # Generate key-value pair\n        print (key, sample[key])\n\nsample = {'c':10, 'a':8, 'b':12, 'e':3, 'd':4}\nsort_dict_by_key(sample) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseString(str): \n  \n    i = len(str) \n    rev_str = \"\" \n    while i > 0: \n        rev_str += str[i-1] \n        i = i-1\n    return rev_str\n\nstr = \"Python\"\nprint(\"Original string: \" + str)\nprint(\"Reversed string: \" + reverseString(str)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def word_frequency(filename):\n    # Create an empty dictionary\n    d = {}\n    # Open the file for reading\n    with open(filename, 'r') as f:\n        # Read in each line\n        for line in f.readlines():\n            # Divide the line into words\n            words = line.split()\n            # Count the words\n            for word in words:\n                # Increment the word's count\n                d[word] = d.get(word, 0) + 1\n    # Return the dictionary\n    return d\n\nfreqDict = word_frequency('text.txt')\nprint(freqDict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Project Setup\npython3 -m venv venv\nsource venv/bin/activate\npip install django\ndjango-admin startproject weather\n\n# App Setup\ncd weather\ndjango-admin startapp currentweather\n\n# Settings File\n# In weather/settings.py add the app and api key\nINSTALLED_APPS = [\n    'currentweather',\n]\n\nWEATHER_API_KEY = '<YOUR_API_KEY_HERE>'\n\n# Model\n# In currentweather/models.py\nfrom django.db import models\n\nclass WeatherData(models.Model):\n    location = models.CharField(max_length=100)\n    temperature = models.IntegerField()\n    condition = models.CharField(max_length=100)\n\n# View\n# In currentweather/views.py\nfrom django.shortcuts import render\nimport requests\nfrom .models import WeatherData\n\n# Use your API key to make a request to fetch weather data\ndef get_weather_data(location):\n    url = 'http://api.openweathermap.org/data/2.5/weather?q={}&appid={}'.format(location, WEATHER_API_KEY)\n    data = requests.get(url).json() \n    return data\n\n# Create a view to display the weather data\ndef weather(request):\n    location = request.GET.get('location', '')\n    # Fetch weather data for the given location\n    weather_data = get_weather_data(location)\n    context = {\n        'weather_data': weather_data,\n    }\n    return render(request, 'currentweather/weather.html', context)\n\n# Template\n# In currentweather/templates/currentweather/weather.html\n<h1>Current Weather - {{ weather_data.name }}</h1>\n<div>\n <h2>Temperature : {{ weather_data.main.temp }}\u00b0C</h2>\n <h2>Condition : {{ weather_data.weather[0].main }}</h2>\n</div> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\nc.execute('SELECT * FROM orders WHERE status = \\'shipped\\'')\n\nresult = c.fetchall()\n\nfor row in result:\n    print(row)\n\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: data = {\n    'name': 'John',\n    'age': 56,\n    'city': 'New York'\n    } but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_prime_sequence(length):\n prime_sequence = []\n prime_number = 2\n while len(prime_sequence) < length:\n  is_prime = True\n  for i in range(2, int(prime_number/2) + 1):\n    if prime_number % i == 0:\n      is_prime = False\n      break\n  if is_prime:\n    prime_sequence.append(prime_number)\n  prime_number += 1\n return prime_sequence\n\nprint(generate_prime_sequence(8)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nrandom_number = random.randint(1,100)\nprint(\"Random number:\", random_number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# Read in the dataset\ndf = pd.read_csv('dataset.csv')\n\n# basic data cleaning\ndf = df.dropna()\n\n# Convert categorical variables to dummy variables\ndf = pd.get_dummies(df, columns=['country','gender'])\n\n# Scale the numeric variables\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\ndf[['age', 'height']] = scaler.fit_transform(df[['age','height']])\n\n# Save the optimized dataset\ndf.to_csv('optimized_dataset.csv', index=False) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n def __init__(self, data):\n self.data = data\n self.next = None\n\nclass LinkedList:\n def __init__(self):\n self.head = None\n\ndef append(self, new_data):\n new_node = Node(new_data)\n if self.head == None:\n self.head = new_node\n return\n last = self.head\n while last.next:\n last = last.next\n last.next = new_node but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_duplicates(lst):\n    seen = set()\n    duplicates = []\n    for elem in lst:\n        if elem in seen:\n            duplicates.append(elem)\n        else:\n            seen.add(elem)\n    return duplicates but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_matrix():\n    matrix = [[random.randint(1, 10) for col in range(4)] for row in range(3)]\n    return matrix but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(list):\n    max_value = list[0]\n    for num in list:\n        if num > max_value:\n            max_value = num\n    return max_value but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef random_string():\n    chars = string.ascii_lowercase\n    size = 16\n    return ''.join(random.choice(chars) for _ in range(size))\n\nprint(random_string()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http://www.example.com/latest-news'\n\n# get the html content\ncontent = requests.get(url)\n\n# create a soup object\nsoup = BeautifulSoup(content.text, 'html.parser')\n\n# get all the news title and links\nnews = soup.findAll('a', attrs = {'class': 'news-link'})\n\n# loop over all the news\nfor n in news:\n    print(n.text, n['href']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_smallest_int(arr):\n    smallest_num = arr[0]\n    for num in arr:\n        if num < smallest_num:\n            smallest_num = num\n    return smallest_num\n \narr = [20, 8, 7, 22, 32]\nsmallest_num = find_smallest_int(arr)\n \nprint(\"The smallest number is\", smallest_num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_digits(num):\n    summation = 0\n    while num > 0:\n        summation += num % 10\n        num = num // 10\n    return summation but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def execute_moves(cube, moves):\n# Executes a specified set of moves on a rubik's cube\n# cube: list representing a rubik's cube\n# move: list of moves, each move specifying a set of slices to rotate\n\n\tfor move in moves:\n\t\trotate_cube(cube, move)\n\ndef rotate_cube(cube, move):\n# Rotates the sides of a rubik's cube according to a single move\n# cube: list representing a rubik's cube\n# move: list of slices of a rubik's cube to rotate\n\n\t# Perform rotations \n\tfor slice in move:\n\t\tcube[slice] = rotate_layer(cube[slice])\n\n\treturn cube\n\ndef rotate_layer(slice):\n# Rotates a single layer of a rubik's cube\n# slice: 3x3 list of the values in that layer\n\n\t# Rotate the layer clockwise\n\treturn [slice[2][0],slice[1][0],slice[0][0],\n    slice[2][1],slice[1][1],slice[0][1],\n    slice[2][2],slice[1][2],slice[0][2]]\n\ndef solve_cube(cube):\n# Main function that solves a rubik's cube\n# cube: list representing a rubik's cube\n\n\t# Determine cube state by analyzing thecube[i][j][k] values\n\tscramble_state = analyze_cube(cube)\n\n\t# Find the sequence of moves required to solve thecube[i][j][k]\n\tmoves = get_solve_moves(scramble_state)\n\n\t# Execute moves to solve thecube[i][j][k]\n\texecute_moves(cube, moves) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import difflib\n\n# Define input text\ntext = \"this is a string with a few similar words\"\n\n# Find sequences of similar strings\nmatcher = difflib.SequenceMatcher(None, a=text.split(), b=text.split())\nfor tag, i1, i2, j1, j2 in matcher.get_opcodes():\n if tag == 'equal':\n    print(text[i1:i2]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: In Python, a list is an ordered sequence of elements, while a dictionary (or \"dict\") is an unordered collection of key-value pairs. A list stores elements sequentially and has no associated key with each element. A dictionary stores elements in key-value pairs, and each element is associated with a unique key. Additionally, a list is mutable, meaning the elements inside the list can be changed, while a dictionary is immutable, meaning the key-value pairs cannot be changed. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n \n# Create the data\nx = [1, 2, 3, 4]\ny1 = [2, 4, 6, 8]\ny2 = [3, 6, 9, 12]\n \n# Plot the data\nplt.plot(x, y1)\nplt.plot(x, y2)\n \n# Add a title\nplt.title(\"Two Lines on One Graph\")\n \n# Add X and y Label\nplt.xlabel('X Axis')\nplt.ylabel('Y Axis')\n \n# Add a legend\nplt.legend(['Line1', 'Line2'])\n \n# Show the plot\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n \n# data\nage = [18, 28, 38, 48, 58, 68]\nnumber = [500, 600, 400, 200, 100]\n \n# bar plot\nplt.bar(age, number)\n \n# set title and labels\nplt.title('Age and Number of People')\nplt.xlabel('Age')\nplt.ylabel('Number of people')\n\n# save and show the figure\nplt.savefig('bar_plot.png')\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isAnagram(string):\n    for i in range(len(string)):\n        for j in range(i + 1, len(string)):\n            if sorted(string[i]) == sorted(string[j]):\n                return True\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tweepy\nimport time\n\nconsumer_key = 'your consumer key'\nconsumer_secret = 'your consumer secret'\n\naccess_token = 'your access token'\naccess_token_secret = 'your access token secret'\n\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ninterests = ['computers', 'cricket', 'movies'] # interests of the user\n\nwhile True:\n for interest in interests:\n  search = '#' + interest\n  tweets = api.search(search)\n  for tweet in tweets:\n   api.retweet(tweet.id)\n  time.sleep(30) # sleep for 30 seconds but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime \nnow = datetime.datetime.now().strftime(\"%d/%m/%Y\") \nprint(now) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Load the dataset\ndataset = pd.read_csv('dataset.csv')\n\n# Get the feature names\nfeatures = dataset.columns[:-1].tolist()\n\n# Scaling factor\nscale_factor = 0.1\n\n# Augment the dataset by randomly scaling the feature values\naugmented_dataset = dataset.copy()\nfor feature in features:\n    augmented_dataset[feature] += np.random.randn(len(augmented_dataset))*scale_factor\n\n# Save the augmented dataset\naugmented_dataset.to_csv('augmented_dataset.csv', index=False) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Appointment():\n     \n    def __init__(self, date, time, reason):\n        self.date = date\n        self.time = time\n        self.reason = reason\n    \n    def get_details(self):\n        return f\" The appointment is on {self.date}, at {self.time}, for {self.reason}.\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def inOrderTraversal(root):\n    if root is not None:\n        inOrderTraversal(root.left)\n        print(root.val)\n        inOrderTraversal(root.right) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_largest_number(numbers):\n    largest_number = numbers[0]\n    for number in numbers:\n        if number > largest_number:\n            largest_number = number\n    return largest_number but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Importing the libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\n\n# Importing the dataset\ndataset = pd.read_csv('data.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n\n# Splitting the dataset into the Training set and Test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n\n# Fitting the Decision Tree Classification to the Training set\nclassifier = DecisionTreeClassifier()\nclassifier.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = classifier.predict(X_test)\n\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\ndate_str = '2020-01-31'\n\ndef add_three_months(date_str):\n    d = datetime.datetime.strptime(date_str, '%Y-%m-%d')\n    d = d + datetime.timedelta(days=90)\n    date_str = d.strftime('%Y-%m-%d')\n    return date_str but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: const pythonDictionary = {\n    'key1': 'value1',\n    'key2': 'value2'\n};\nconst jsObject = Object.fromEntries(\n    Object.entries(pythonDictionary)\n);\nconsole.log(jsObject); // {key1: 'value1', key2: 'value2'} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate(value1, value2, operation):\n    if (operation == 'add'):\n        result = value1 + value2\n    elif (operation == 'subtract'):\n        result = value1 - value2\n    elif (operation == 'multiply'):\n        result = value1 * value2\n    else:\n        return\n    print(result)\n \nadd(3, 2)\nsubtract(3, 2)\nmultiply(3, 2)\n\ncalculate(3, 2, 'add')\ncalculate(3, 2, 'subtract')\ncalculate(3, 2, 'multiply') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_array(array):\n    for i in range(len(array)): \n        min_idx = i \n        for j in range(i+1, len(array)): \n            if array[min_idx] > array[j]: \n                min_idx = j       \n        array[i], array[min_idx] = array[min_idx], array[i]\n    return array\nresult = sort_array(array)\nprint(result) // Output: [1, 2, 3, 4, 5, 7] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countStringOccurrences(string, substring):\n    cnt = 0\n    index = -1\n    while string.find(substring, index + 1) != -1:\n        index = string.find(substring, index + 1)\n        cnt += 1 \n    return cnt\n\noccurrences = countStringOccurrences('Hello World, Hello World', 'Hello World')\nprint(occurrences) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: userString = input(\"Enter a string: \")\nuppercasedString = userString.upper()\nprint(uppercasedString) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_items = [2, 3, 3, 4, 4, 5, 6, 7, 7]\n\ndef find_unique_items(input_list):\n    result = []\n    for elem in input_list:\n        if elem not in result:\n            result.append(elem)\n    return result\n\nprint(find_unique_items(list_items)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def common_elements(list1, list2):\n    common_list = []\n    for element1 in list1:\n        for element2 in list2:\n            if element1 == element2: \n                common_list.append(element1)\n    return common_list\n\ncommon_elements_list = common_elements([1,2,3], [2,3,4])\nprint(common_elements_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request\nfrom flask_pymongo import PyMongo\nimport json\n\napp = Flask(__name__)\n\napp.config['MONGO_URI'] = 'mongodb://localhost:27017/posts'\nmongo = PyMongo(app)\n\n@app.route('/posts', methods=['POST'])\ndef create_post():\n data = request.get_json()\n post_id = mongo.db.posts.insert(data.json())\n post = mongo.db.posts.find_one( {'_id': post_id} )\n post_data = {\n 'id': str(post_id),\n 'title': post['title'],\n 'body': post['body']\n }\n return json.dumps( post_data )\n\nif __name__ == '__main__':\n app.run(debug = True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from datetime import date\n\ndate_1 = date(2020, 1, 1)\ndate_2 = date(2020, 1, 30)\n\ndiff = date_2 - date_1\nprint('There are {} days between the two dates.'.format(diff.days)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubbleSort(arr): \n    n = len(arr) \n\n    # Traverse through all array elements \n    for i in range(n): \n\n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n\n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1]: \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n\n# driver code to test the above code \narr = [64, 34, 25, 12, 22, 11, 90] \n\nbubbleSort(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]), \n\n\ndef partition(arr, low, high): \n    i = (low - 1)         # index of smaller element \n    pivot = arr[high]     # pivot \n\n    for j in range(low, high): \n\n        # If current element is smaller than or \n        # equal to pivot \n        if arr[j] <= pivot: \n\n            # increment index of smaller element \n            i = i + 1\n            arr[i], arr[j] = arr[j], arr[i] \n\n    arr[i + 1], arr[high] = arr[high], arr[i + 1] \n    return (i + 1) \n\n# The main function that implements QuickSort \n# arr[] --> Array to be sorted, \n# low --> Starting index, \n# high --> Ending index \n\n# Function to do Quick sort \ndef quickSort(arr, low, high): \n    if len(arr) == 1:\n        return arr \n    if low < high: \n\n        # pi is partitioning index, arr[p] is now \n        # at right place \n        pi = partition(arr, low, high) \n\n        # Separately sort elements before \n        # partition and after partition \n        quickSort(arr, low, pi-1) \n        quickSort(arr, pi+1, high) \n\n\n# driver code to test the above code \narr = [64, 34, 25, 12, 22, 11, 90] \nn = len(arr) \nquickSort(arr, 0, n-1) \nprint (\"Sorted array is:\") \nfor i in range(n): \n    print (\"%d\" %arr[i]), but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_arrays(arr1, arr2):\n    result = []\n    for i in range(len(arr1)):\n        result.append(arr1[i] + arr2[i])\n    return result\n\nsummed = sum_arrays([1,2,3], [4,5,6])\nprint(summed) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_list(nums_list):\n    total = 0\n    for num in nums_list:\n        total += num\n    return total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def subarraySum(nums, k):\n    count = 0\n    sums = [0]*(len(nums) + 1)\n    for i in range(1,len(nums) + 1):\n        sums[i] = sums[i-1] + nums[i-1]\n\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums) + 1):\n            if sums[j] - sums[i] == k:\n                count += 1\n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Defining the model\ndef classify(data):\n    healthy = []\n    unhealthy = []\n    for item in data:\n        protein = item[\"protein\"]\n        fat = item[\"fat\"]\n        carbs = item[\"carbs\"]\n        if protein >= 10 and fat <= 20 and carbs <= 50:\n            healthy.append(item)\n        else:\n            unhealthy.append(item)\n    return { \"healthy\": healthy, \"unhealthy\": unhealthy}\n\n# Running the program\ndata = [{\"protein\":20,\"fat\":20,\"carbs\":30},{\"protein\":10,\"fat\":45,\"carbs\":30}]\nresult = classify(data)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [\"apple\", \"orange\", \"banana\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\n\nclass Person:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n        self.timeCreated = time.ctime()\n\n    def print_info(self):\n        print(f\"Name: {self.name}, Email: {self.email}, Time created: {self.timeCreated}\")\n\nperson = Person(\"John\", \"john@example.com\")\nperson.print_info() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_number(num):\n    rev = 0\n    while num > 0:\n        r = num % 10\n        rev = (rev * 10) + r\n        num = num // 10\n    return rev\n\ninput_num = 42\nres = reverse_number(input_num)\nprint(res) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef respond(message):\n    # Check for a question mark\n    if message.endswith(\"?\"):\n        return random.choice([\"I don't know :(\", \"You tell me!\"])\n\n    # Return a random greeting\n    return random.choice([\"Hi there!\", \"Hello!\", \"Nice to meet you!\"]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize(func, d):\n    \"\"\"Optimize a function with dimension d using gradient descent\n\n    Args:\n        func: The objective function\n        d: The dimension\n\n    Returns:\n        An array of the variables that minimize the function\n    \"\"\"\n    # Initialize the variables to random values\n    x = [random.random() for _ in range(d)]\n    # Perform gradient descent\n    lr = 0.01\n    for _ in range(1000):\n        # Compute the derivative\n        grad = [compute_derivative(x, i) for i in range(d)]\n        # Update the variables with the gradient\n        for i in range(d):\n            x[i] -= lr * grad[i]\n\n    return x\n\ndef compute_derivative(x, i):\n    \"\"\"Computes the derivative of the objective function with respect to the ith variable\n\n    Args:\n        x: The variables in the search space\n        i: The index of the variable to compute the derivative for\n\n    Returns:\n        The derivative of the objective function\n    \"\"\"\n    h = 1e-4\n    x[i] += h\n    f_plus = func(x)\n    x[i] -= 2 * h\n    f_minus = func(x)\n    x[i] += h\n    return (f_plus - f_minus) / (2 * h) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \nimport bs4 \n  \n# # Function for fetching HTML from the given url \ndef fetch_url(url): \n   res = requests.get(url)  \n   soup = bs4.BeautifulSoup(res.text, 'html.parser') \n   return soup \n  \n# Fetch the HTML \nsoup = fetch_url(\"https://www.example.com/news\") \n  \n# Parse the HTML//Get all the news items \nnews_items = soup.find_all('div',class_=\"news-item\") \n  \nfor item in news_items: \n   # Get the title \n   title = item.find('h2',class_=\"news-title\") \n   \n   # Get the body  \n   body = item.find('p',class_=\"news-body\") \n  \n   # Do something with the title and the body  \n   print(title.text) \n   print(body.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quick_sort(array):\n    if len(array) < 2:\n        return array\n\n    # pick a pivot element as the median of the first, middle, and last elements\n    pivot_index = len(array)//2\n    middle_index = len(array)//2\n    if array[0] > array[middle_index]:\n        pivot_index = 0 if array[middle_index] > array[-1] else -1\n    else:\n        pivot_index = 0 if array[middle_index] < array[-1] else -1\n    pivot = array[pivot_index]\n    \n    # from the remaining elements, create partitions either smaller than or larger than the pivot\n    less_than_partition = [i for i in array if i < pivot]\n    greater_than_partition = [i for i in array if i > pivot]\n    \n    # recursively sort both partitions\n    less_than_partition = quick_sort(less_than_partition)\n    greater_than_partition = quick_sort(greater_than_partition)\n\n    # combine the sorted partitions and the pivot\n    return less_than_partition + [pivot] + greater_than_partition\n\narray = [5, 2, 9, 4, 1, 6]\nsorted_array = quick_sort(array)\nprint(sorted_array) # [1, 2, 4, 5, 6, 9] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def parse_string(pattern, string):\n    '''\n    This function parses a string and return the substrings which are enclosed in the given pattern.\n    \n    Parameters\n    ----------\n    pattern : str\n        The given pattern\n    string : str\n        The given string\n    \n    Returns\n    -------\n    List\n        Contains substrings enclosed within the given pattern.\n    '''\n    # Initialize list to store substrings\n    sub_strings = []\n    \n    # Get the start and end positions of each substring\n    start = string.find(pattern)\n    end = string.find(pattern, start+1)\n    \n    # Iterate through the string\n    while start >= 0 and end > start:\n        # Get substring and append to list\n        sub_strings.append(string[start+len(pattern):end])\n        \n        # Get new start and end positions\n        start = end\n        end = string.find(pattern, start+1)\n    \n    # Return list of substrings\n    return sub_strings but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_numbers(numbers):\n result = 0\n l = len(numbers)\n i = 0\n while i < l:\n result += numbers[i]\n i += 1\n return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_reverse(s):\n  print(s[::-1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(my_list):\n    my_list.sort()\n    return my_list\n\nprint(sort_list([3,8,1,5,6])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def non_repeating_char(s):\n    char_freq = {}\n    for c in s:\n        if c in char_freq:\n            char_freq[c] += 1\n        else:\n            char_freq[c] = 1\n    \n    for c in s:\n        if char_freq[c] == 1:\n            return c\n\nif __name__ == '__main__':\n    print(non_repeating_char(\"the quick brown fox jumps over the lazy dog\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\nimport requests\n\ndef optimize_webpage(url):\n    r = requests.get(url, timeout=5)\n    content = r.text\n    content = content.lower()\n    title = re.search('<title>(.*)</title>', content)\n    title_text = title.group(1).strip()\n    content = content.replace(title_text, title_text.lower())\n    keywords = re.findall('<meta name=\"keywords\" content=\"(.*)\">', content)\n    for word in keywords:\n        if word.strip():\n            content = content.replace(word, word.lower())\n\n    description = re.findall('<meta name=\"description\" content=\"(.*)\">', content)\n    for desc in description:\n        if desc.strip():\n            content = content.replace(desc, desc.lower())\n    return content but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nmy_list = []\nfor i in range(5):\n my_list.append(random.randint(1,100))\n\nprint(my_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import xml.etree.ElementTree as ET\nimport json\n\nxml_string = '''\n<bookstore>\n <book>\n <title>Harry Potter</title>\n <author>J.K. Rowling</author>\n </book>\n <book>\n <title>The Lord of the Rings</title>\n <author>J.R.R. Tolkien</author>\n </book>\n</bookstore>\n'''\n\ndef xml_to_json(xml_string):\n root = ET.fromstring(xml_string)\n data = {'bookstore': []}\n\n for book in root:\n info = {\n 'title': book.find('title').text,\n 'author': book.find('author').text\n }\n data['bookstore'].append(info)\n \n return json.dumps(data)\n\njson_string = xml_to_json(xml_string)\nprint(json_string)\n\n# Output:\n{\"bookstore\": [{\"title\": \"Harry Potter\", \"author\": \"J.K. Rowling\"}, {\"title\": \"The Lord of the Rings\", \"author\": \"J.R.R. Tolkien\"}]} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef get_rand():\n    return random.randint(0, 50) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Split the string by '_' separator\nwords = string.split('_')\n\n# Print each word separately\nfor word in words:\n    print(word) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\nfrom matplotlib.animation import FuncAnimation\n\nfig, ax = plt.subplots()\nxdata, ydata = [], []\n\ndef update(frame):\n xdata.append(frame)\n ydata.append(frame ** 2)\n\n ax.clear()\n ax.plot(xdata, ydata)\n\nanimation = FuncAnimation(fig, update, frames=range(100), interval=100)\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\n# Load the dataset\ndata = np.loadtxt('oil_prices.txt')\n\n# Compute mean and standard deviation\nmean = np.mean(data)\nstd = np.std(data)\n\n# Identify anomalies\nanomalies = []\nfor i in range(len(data)):\n    z_score = (data[i] - mean)/std\n    if abs(z_score) > 3:\n        anomalies.append(data[i])\n\n# Print the anomalies\nprint(\"Anomalies:\")\nprint(anomalies) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_list(list_of_nums):\n    total = 0\n    for number in list_of_nums:\n        total += number\n    return total\n\nresult = sum_list([4, 8, 15, 20])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_fibonacci_sequence(n):\n a, b = 0, 1\n fibonacci_sequence = []\n while a <= n:\n  fibonacci_sequence.append(a)\n  a, b = b, a + b\n return fibonacci_sequence\n\n\nprint(generate_fibonacci_sequence(12))  # Output: [0, 1, 1, 2, 3, 5, 8, 13] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_int(x):\n    \"\"\"Reverse an integer.\"\"\"\n    reversed_int = int(str(x)[::-1])\n    return reversed_int\n\n# Usage Example\nx = 123\nreversed_int = reverse_int(x)\nprint(reversed_int)  # 321 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_random_string():\n    \"\"\"\n    Generate a random string of 8 characters\n    \"\"\"\n    \n    # Character sets\n    chars = string.ascii_lowercase + string.ascii_uppercase + string.digits\n    # Length of random string\n    length = 8\n    \n    # Generate random string\n    random_string = ''.join(random.sample(chars, length))\n\n    return random_string\n\nprint(generate_random_string()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from keras.layers import Conv2D, MaxPool2D, Dense, Flatten\nfrom keras.models import Sequential\n\n# Build the model\nmodel = Sequential()\n\nmodel.add(Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 3)))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Conv2D(16, (3, 3), activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(2, activation='sigmoid'))\n\n# Compile and Train\nmodel.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy'])\nmodel.fit(X, y, batch_size=32, epochs=10, validation_split=0.2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: if (x > 10) {\n    print('The number is greater than 10')\n} else {\n    print('The number is less or equal than 10')\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nURL = 'http://example.com/'\n\n# get the webpage\npage = requests.get(URL)\n\n# parse the webpage\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# get all links\nlinks = soup.find_all('a')\nfor link in links:\n print(link.get('href')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\ndata_file = 'restaurant_ratings.csv'\n\ndata = pd.read_csv(data_file)\n\n# Group the data by Restaurant\ngrouped_restaurants = data.groupby('Restaurant')\n\n# Calculate the average rating for each restaurant\navg_ratings = grouped_restaurants['Rating'].mean()\n\n# Print the average ratings to the console\nprint(avg_ratings) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compute_frequency(arr):\n    frequency_map = {}\n    \n    for num in arr:\n        if num not in frequency_map:\n            frequency_map[num] = 1\n        else:\n            frequency_map[num] += 1\n            \n    return frequency_map\n\nresult = compute_frequency([1, 2, 3, 2, 1, 3])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_list(list):\n    reversed_list = list[::-1]\n    return reversed_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: <html>\n <head>\n <title>Programming Languages</title>\n </head>\n <body>\n <h1>Programming Languages</h1>\n <ul>\n <li><b>JavaScript</b> \u2013 Object-oriented, event-driven, and functional programming language</li>\n <li><b>Python</b> \u2013 Object-oriented, interpreted, high-level programming language</li>\n <li><b>C</b> \u2013 High-level, structured, multiparadigm, compiled programming language</li>\n <li><b>C++</b> \u2013 Object-oriented, compiled, generic programming language</li>\n <li><b>Java</b> \u2013 Object-oriented, portable, compiled programming language</li>\n </ul>\n </body>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linearSearch(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\nprint(linearSearch([1,2,3,4], 3)) # Output: 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_sorted_lists(l1, l2):\n        l3 = l1 + l2\n        l3.sort()\n        return l3\n    \nl1 = [1, 2, 5] \nl2 = [3, 4, 6]\n\nresult = merge_sorted_lists(l1, l2)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse(word):\n    return word[::-1]\n\nprint(reverse('Hello World')) but is not the same. just give one example and only return the code."}
