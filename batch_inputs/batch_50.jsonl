{"prompt": "make some code that functions the same as the following code: # define list \nlst = [1, 'c', 3, 'a', 2, 'b']\n\n# sort list\nsorted_lst = sorted(lst, key=lambda x:str(x))\n\n# print sorted list\nprint(sorted_lst) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def encrypt_vigenere(plaintext, key):\n ciphertext = \"\"\n index = 0\n for c in plaintext:\n     ciphertext += chr((ord(c) - 65 + ord(key[index]) - 65) % 26 + 65)\n     index = (index + 1) % len(key)\n return ciphertext but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combine_list(list_a, list_b):\n    combined_list = []\n    for a in list_a:\n        combined_list.append(a)\n    for b in list_b:\n        combined_list.append(b)\n    return combined_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compute_word_frequency(sentence):\n    words = sentence.split()\n    frequency = {}\n\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def intersect(list1, list2):\n    return list(set(list1).intersection(list2))\n\nprint(intersect([1,2,3,4], [2,3,4,5])) # prints [2,3,4] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.model_selection import train_test_split\n\n# prepare the data\nuser_data = np.array(< array of user data >)\nfeatures = user_data[:,:-1]\nlabels = user_data[:,-1]\n\n# split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2)\n\n# create the model\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# make predictions\npredictions = model.predict(X_test)\n\n# evaluate the model\nfrom sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y_test, predictions)\nprint('Model accuracy: ', accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_greater_than_10(nums):\n filtered_nums = []\n for num in nums:\n if num > 10:\n filtered_nums.append(num)\n return filtered_nums\n\nnums = [1, 5, 10, 15, 20]\nfiltered_nums = filter_greater_than_10(nums)\nprint(filtered_nums) # [15, 20] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_sum_series(a, r, n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + a*(r**(i - 1))\n    return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# creating standard scalar object\nscaler = StandardScaler()\n\n# loading the dataset\ndata = load_dataset()\n\n# splitting the dataset into the train and test dataset\nX_train, X_test, y_train, y_test = train_test_split(data.data, data.target, test_size=0.25)  \n\n# standarizing the features\nX_train = scaler.fit_transform(X_train)  \nX_test = scaler.transform(X_test)\n\n# Creating the model\nclassifier = KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=2)\n\n# training the model\nclassifier.fit(X_train, y_train)\n\n# predictions\ny_pred = classifier.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime \n\ndef date_difference(date1, date2): \n\treturn (date2-date1).days \n\ndate1 = datetime.date(year1, month1, day1)\ndate2 = datetime.date(year2, month2, day2)\nprint(date_difference(date1, date2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_elm(lst, elm):\n  return elm in lst\n\nprint(find_elm(my_list, 7)) # True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n    def __init__(self, name, age, country):\n        self.name = name\n        self.age = age\n        self.country = country\n    def get_name(self):\n        return self.name\n    def get_age(self):\n        return self.age\n    def get_country(self):\n        return self.country but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\n\nwhile True:\n    print 'This message is printed every 3s'\n    time.sleep(3)  # Sleep for 3 seconds but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Server program\n\nimport socket\n\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\nhost = socket.gethostname()\nport = 8888\n\n# Bind to the port\nserver_socket.bind((host, port))\n\nserver_socket.listen(5)\n\nprint(\"Waiting for a connection...\")\n\n# Establish a connection with the client\nclient_socket, addr = server_socket.accept()\n\nprint(\"Received a connection from %s \" % str(addr))\n\nwhile True:\n data = client_socket.recv(1024).decode('utf-8')\n if not data:\n   break\n print(\"Received from client: %s\" %data)\n data = data.upper()\n print(\"Sending to client: %s\" %data)\n client_socket.send(data.encode('utf-8'))\n\nclient_socket.close()\n\n# Client program\nimport socket\n\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\nhost = socket.gethostname()\nport = 8888\n\n# Connect to server's socket\nclient_socket.connect((host, port))\n\nmessage = input(\"Enter a message -> \")\n# Send a message\nclient_socket.send(message.encode('utf-8'))\n\n# Receive a message\ndata = client_socket.recv(1024).decode('utf-8')\nprint(\"Received from server: %s\" %data)\n\nclient_socket.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to rotate a list by n elements to the left \ndef rotateList(input_list, n): \n    return input_list[n:] + input_list[:n]  \n\n# Driver Code \nif __name__ == \"__main__\": \n    input_list = [1, 2, 3, 4, 5, 6] \n    print(rotateList(input_list, 3)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import flask\nfrom geopy.distance import geodesic\n\n\napp = flask.Flask('__name__')\n\nstores = [\n    {\n        'store_id': 1,\n        'name': 'Store A',\n        'address': '2 Main Street, Anytown, US'\n    },\n    {\n        'store_id': 2,\n        'name': 'Store B',\n        'address': '3 Main Street, Anytown, US'\n    },\n    {\n        'store_id': 3,\n        'name': 'Store C',\n        'address': '4 Main Street, Anytown, US'\n    },\n]\n\n@app.route('/nearest-store', methods=['POST'])\ndef find_nearest_store():\n    request_data = flask.request.get_json()\n    address = request_data.get('address')\n\n    nearest_store = None\n    min_distance = None\n\n    for store in stores:\n        store_distance = geodesic(address, store['address']).kilometers\n        if not min_distance or store_distance < min_distance:\n            nearest_store = store\n            min_distance = store_distance\n\n    return flask.jsonify({\n        'store': nearest_store\n    })\n\nif __name__ == '__main__':\n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: a = 100\nb = 200\nsum = a + b\n\n# Optimized code\nsum = sum(100, 200) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def average_three(num1, num2, num3):\n    return (num1 + num2 + num3) / 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef is_valid_email(email):\n   # Making sure it contains an @ and at least one '.'\n   if re.match(\"^.+@[^.].*\\.[a-z]{2,10}$\", email) is None:\n       return False\n   return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_largest_sum(list):\n    largestNum = max(list)\n    list.remove(largestNum)\n    secondLargestNum = max(list)\n    return largestNum+secondLargestNum\n\nprint(find_largest_sum([1,2,3,4,5])) # 9 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: unique_list = list(set([50, 20, 30, 40, 10]))\nprint(unique_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef extract_email(string):\n    emails = re.findall(r\"[\\w\\.-]+@[\\w\\.-]+\", string)\n    return emails\n\nstring = \"My email is abc@gmail.com\"\nextract_email(string)  # ['abc@gmail.com'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\nimport boto3\n \ndef lambda_handler(event, context):\n  # Create an SNS Client\n  sns_client = boto3.client('sns')\n  \n  # Send a message to the SNS topic\n  topic_arn = 'arn:aws:sns:eu-west-1:123456789012:my-topic'\n  message = 'This is a test message'\n  response = sns_client.publish(\n    TopicArn = topic_arn,\n    Message = message\n  )\n  return {\n    'statusCode': 200,\n    'body': json.dumps(response)\n  } but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def evaluate_tree(preorder):\n # base case\n if len(preorder) == 1:\n return preorder[0]\n else:\n # identify the lowest level operator and its operands\n operator = preorder[0]\n leftoperand = preorder[1]\n rightoperand = preorder[2]\n\n# evaluate the operands\n leftoperand = evaluate_tree(leftoperand) if isinstance(leftoperand, list) else leftoperand\n rightoperand = evaluate_tree(rightoperand) if isinstance(rightoperand, list) else rightoperand\n\n# compute the result of the operation\n if operator == '+':\n return leftoperand + rightoperand\n elif operator == '-':\n return leftoperand - rightoperand\n elif operator == '*':\n return leftoperand * rightoperand\n elif operator == '/':\n return leftoperand / rightoperand\n\nprint(evaluate_tree(['*', '+', 9, 10, 11]))\n# prints 99 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def decimal_binary_octal_hexadecimal(n):\n    print(\"Binary =\", bin(n))\n    print(\"Octal =\", oct(n))\n    print(\"Hexadecimal =\", hex(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isDuplicates(list):\n    duplicate_items = set()\n    for item in list:\n        if item in duplicate_items:\n            return True\n        duplicate_items.add(item)\n    return False\n\nmy_list = [1, 2, 4, 6, 2, 5]\nresult = isDuplicates(my_list)\nprint(result) # prints True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import library\nimport bs4\n\n#store HTML data\nhtml_data = '<p>This is some text</p><a href='www.example.com/'>Click Here</a>'\n\n#parse HTML data\nsoup = bs4.BeautifulSoup(html_data, 'html.parser')\n\n#get all tags\nall_tags = soup.find_all()\n\n#print result\nfor tag in all_tags:\n print(tag) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nrandom_numbers = random.sample(range(0, 10), 3) \nprint(random_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortList(list):\n sorted_list = sorted(list)\n return sorted_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\n\n#load the data\nX = height\ny = age\n\n#split it into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n#train a linear regression model\nmodel = linear_model.LinearRegression()\nmodel.fit(X_train, y_train)\n\n#predict the age based on height\ny_pred = model.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nWrite a python program that takes a string as input and check if it is palindrome or not\n\"\"\"\n\ndef is_palindrome(string):\n    # Reverse the string \n    rev_string = string[::-1]\n    # Compare both strings \n    if string == rev_string:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    string = 'malayalam'\n    print(is_palindrome(string))  # Output: True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def char_count(string):\n    char_dict = {}\n    for char in string:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    return char_dict but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import smtplib\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\n# Email message content\ntemplate = \"Dear {name}, thank you for signing up for our subscription! We just wanted to let you know that we'll be sending you emails with the latest news and offers so you can stay up to date with what we have going on. Don't forget to check out our website to learn more about our services. Thanks again for signing up! -  Team XYZ\"\n\n# Load customer names and email address from file\nwith open('customer_file.csv') as f:\n    customers = f.readlines()\n\n# Iterate through customers and send email\nfor customer in customers:\n    name = customer.split(',')[0]\n    email_address = customer.split(',')[1]\n\n    # Create message\n    message = MIMEMultipart()\n    message['Subject'] = 'Thanks for signing up for our subscription!'\n    message['From'] = 'Team XYZ <support@xyz.com>'\n    message['To'] = email_address\n\n    # Formatted message\n    message.attach(MIMEText(template.format(name = name), 'plain'))\n\n    # Connect to server and send email\n    server = smtplib.SMTP('smtp.gmail.com', 587)\n    server.starttls()\n    server.login('username', 'password')\n    server.send_message(message) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndata = json.loads(jsonString)\n\nus_cities = []\neurope_cities = []\n\nfor location in data['locations']:\n if location['continent'] == 'North America':\n us_cities.append(location['name'])\n elif location['continent'] == 'Europe':\n europe_cities.append(location['name'])\n\nprint(f'US cities: {us_cities}\\n')\nprint(f'Europe cities: {europe_cities}\\n') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def display_min_max(arr):\n    # initializing max and min element\n    max_element = arr[0]\n    min_element = arr[0]\n\n    # traverse through the array elements\n    for x in arr:\n        if (x > max_element):\n            max_element = x\n        if (x < min_element):\n            min_element = x\n\n    # display max and min element\n    print(\"The largest element is\", max_element)\n    print(\"The smallest element is\", min_element)\n\n# Driver code\narr = [2, 3, 8, 5, 10, 6]\ndisplay_min_max(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_mean(data): \n    # Initialize the sum and length of data \n    sum = 0 \n    length = len(data) \n  \n    # Calculating the sum  \n    for x in data: \n        sum += x   \n    # Calculating the mean  \n    mean = sum / length \n  \n    return mean \n  \n# Test the function \ndata = [1, 2, 3, 4, 5, 6] \nprint('Mean of data is:', calculate_mean(data)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Card():\n    # suits is a set of all possible suits\n    suits = {\"spades\", \"hearts\", \"diamonds\", \"clubs\"}\n\n    # ranks is a set of all possible ranks\n    ranks = {\"Ace\", 2, 3, 4, 5, 6, 7, 8, 9, 10, \"Jack\", \"Queen\", \"King\"}\n\n    # Create a new card\n    def __init__(self, suit, rank):\n        # Check if the suit is valid\n        if suit not in self.suits:\n            raise ValueError(f\"{suit} is not a valid suit\")\n\n        # Check if the rank is valid\n        if rank not in self.ranks:\n            raise ValueError(f\"{rank} is not a valid rank\")\n\n        # Set the attributes of the card\n        self.suit = suit\n        self.rank = rank\n\n    # Print the card as a string\n    def __str__(self):\n        return f\"{self.rank} of {self.suit}\"\n\nclass Deck():\n    # Create a deck of 52 cards\n    def __init__(self):\n        self.cards = []\n        for suit in Card.suits:\n            for rank in Card.ranks:\n                self.cards.append(Card(suit, rank))\n\n    # Generate a random card from the deck\n    def get_random_card(self):\n        return self.cards.pop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_words_in_sentence(sentence):\n    words_list = sentence.split()\n    words_list.reverse()\n    reversed_sentence = \" \".join(words_list)\n    return reversed_sentence\n\nsentence = \"This is my sentence.\"\nresult = reverse_words_in_sentence(sentence)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\ndef top_characters(string):\n    counter = Counter(string).most_common(5)\n    return counter\n    \nstring = \"This is a test sentence to use for the example.\"\nprint(top_characters(string))\n# Output: [('e', 5), ('s', 4), ('t', 4), ('o', 3), ('i', 3)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def median(arr):\n arr.sort() \n n = len(arr) \n if n % 2 != 0: \n return arr[n//2] \n else: \n return (arr[(n-1)//2] + arr[n//2]) / 2\n\n# driver code \narr = [2,3,4,5,6,7,8] \nprint(median(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers = [1, 2, 3, 4]\n \nfor i in range(len(numbers)-1, -1, -1):\n    print(numbers[i]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MeanMedianCalculator:\n    def __init__(self, data):\n        self.data = data\n    \n    def mean(self):\n        return sum(self.data) / len(self.data)\n    \n    def median(self):\n        self.data.sort()\n        return self.data[(len(self.data)-1) // 2]\n\ncalculator = MeanMedianCalculator([2, 4, 6, 8, 10])\nprint(\"Mean is {}, Median is {}\".format(calculator.mean(), calculator.median())) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import itertools\n\n# Define the travelling salesman problem (TSP)\ndef calc_dist(a, b):\n    # calculate Euclidean distance between points 'a' and 'b'\n    dist =  # your code\n    return dist\n\ndef travelling_salesman(points):\n    # \"points\" is a list of tuples [(x1, y1), (x2, y2), ...]\n    best_solution = None\n    min_dist = float('inf')\n    solutions = itertools.permutations(points) \n    for solution in solutions:\n        # calculate the total distance of the route\n        dist = 0\n        for i in range(len(solution) - 1):\n            dist += calc_dist(solution[i], solution[i+1])\n        # check if it is the shortest route \n        if dist < min_dist:\n            min_dist = dist\n            best_solution = solution\n    return best_solution\n\nsolution = travelling_salesman([(0, 0), (2, 2), (3, 1), (1, 3)])\nprint(solution)  # [(0, 0), (2, 2), (3, 1), (1, 3)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def contains_cycle(head):\n slow_pointer = head\n fast_pointer = head\n\n while fast_pointer and fast_pointer.next:\n slow_pointer = slow_pointer.next\n fast_pointer = fast_pointer.next.next\n\n if slow_pointer == fast_pointer:\n return True\n\n return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maxSubArraySum(arr):\n  max_so_far = 0 \n  max_ending_here = 0 \n  \n  for i in range(0, len(arr)): \n      max_ending_here = max_ending_here + arr[i] \n    \n      if (max_ending_here < 0): \n          max_ending_here = 0\n    \n      if (max_so_far < max_ending_here): \n          max_so_far = max_ending_here \n \n  return max_so_far \n\n# Test\narr = [1, -2, 3, 4, -5, 6]\nmax_sum = maxSubArraySum(arr)\n\nprint('Max Sum =', max_sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import webbrowser\n\nurl = 'www.example.com'\nwebbrowser.open_new(url) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = 'https://api.example.com/users'\nresponse = requests.get(url)\nresponse_status_code = response.status_code\ndata = response.json()\ndata_dict = dict(data)\n\nprint(response_status_code)\nprint(data_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python3\nimport argparse\nimport importlib\nimport os\nimport re\nimport sqlite3\nfrom datetime import datetime\nfrom urllib.parse import urljoin\n\nimport requests\nimport yaml\n\n\ndef load_plugin_class(plugin_class_str):\n    \"\"\"\n    dynamically load a class from a string\n    \"\"\"\n    class_data = plugin_class_str.split(\".\")\n    module_path = \"plugins.\" + \".\".join(class_data[:-1])\n    class_str = class_data[-1]\n\n    mod = importlib.import_module(module_path)\n    return getattr(mod, class_str)\n\n\n# print if verbose output is on\ndef log(msg):\n    if verbose_output:\n        print(msg)\n\n\ndef course_loop():\n    download_count = 0\n    skip_count = 0\n\n    # import config\n    try:\n        with open(os.path.join(os.path.dirname(__file__), 'data', 'config.yaml'), 'r', encoding='utf-8') as config_file:\n            config = yaml.load(config_file)\n    except FileNotFoundError:\n        print(\"Please provide a config file under data/config.yaml.\")\n        return\n\n    # make the initial request to get the token\n    session = requests.Session()\n\n    # Loop through sources\n    for src_cfg in config:\n        # check if there are courses to download from\n        if 'courses' not in src_cfg or (source_part is not None and src_cfg['name'] not in source_part):\n            continue\n\n        log('\\n\\nSource: %s' % src_cfg['name'])\n\n        # load dynamically the source class\n        try:\n            src_class = load_plugin_class(src_cfg['class'])\n            src = src_class()\n        except AttributeError:\n            print('Class %s not found. Check your config file.' % src_cfg['class'])\n            continue\n        except ImportError:\n            print(\n                'Class %s not found. Check your config file' % src_cfg['class']\n                + ' and ensure you have the class qualifier relative to the plugin directory.')\n            continue\n\n        # login\n        if 'login_url' in src_cfg and 'username' in src_cfg and 'password' in src_cfg:\n            src.login(session, src_cfg['login_url'], src_cfg['username'], src_cfg['password'])\n\n        # loop through courses\n        for course in src_cfg['courses']:\n\n            # check if only some courses should be checked\n            if course_part is not None and course['name'] not in course_part:\n                continue\n\n            log('\\nCourse: %s\\n' % course['name'])\n\n            if 'path' in course and course['path'] is not None:\n                course_url = urljoin(src_cfg['base_url'], course['path'])\n            elif 'param' in course and course['param'] is not None:\n                course_url = src.course_url(src_cfg['base_url'], course['param'])\n            else:\n                course_url = src_cfg['base_url']\n\n            # regex pattern for link text and file name\n            text_pattern = re.compile(course['pattern'])\n\n            filename_pattern = None\n            if 'filename_pattern' in course:\n                filename_pattern = re.compile(course['filename_pattern'])\n\n            # get all relevant links from the source site\n            links = src.link_list(session, course_url)\n\n            if links is None:\n                continue\n\n            for link in links:\n                if text_pattern.search(link[0]) is not None:\n                    # request file http header\n                    file_request = session.head(link[1], allow_redirects=True)\n\n                    # get file name\n                    if 'Content-Disposition' in file_request.headers:\n                        file_disposition = file_request.headers['Content-Disposition']\n                        file_name = file_disposition[\n                                    file_disposition.index('filename=') + 10:len(file_disposition) - 1].encode(\n                            'latin-1').decode('utf8')\n                    else:\n                        # last part of the link (usually filename)\n                        file_name = link[1].rsplit('/', 1)[-1]\n\n                    # check extension\n                    file_ext = os.path.splitext(file_name)[1]\n                    if 'ext' in course and course['ext'] is not False:\n                        if file_ext != course['ext'] or file_ext not in course['ext']:\n                            continue\n\n                    # check file name\n                    if filename_pattern is not None and filename_pattern.search(file_name) is None:\n                        continue\n\n                    # get last modified date as timestamp\n                    if 'Last-Modified' in file_request.headers:\n                        file_last_modified = int(datetime.strptime(file_request.headers['Last-Modified'], '%a, %d %b %Y %H:%M:%S %Z').timestamp())\n                    else:\n                        print(\"No timestamp found for file %s\" % file_name)\n                        continue\n\n                    # adjust file name\n                    if 'rename' in course and course['rename'] is not False:\n                        # find a number\n                        num = re.search('\\d{1,3}', link[0])\n                        if num is None:\n                            num = re.search('\\d{1,3}', file_name)\n                        if num is None:\n                            num = file_last_modified\n                        else:\n                            num = num.group(0)\n                        file_name = course['rename'].replace('%', str(num)) + file_ext\n\n                    # remove trailing whitespaces\n                    file_name = file_name.strip()\n\n                    # the complete file path\n                    file_path = os.path.join(course['local_folder'], file_name)\n\n                    # fetch old timestamp from database\n                    file_last_modified_old = c.execute(\n                        'SELECT last_modified FROM file_modifications WHERE source=? AND course=? AND file_name=?',\n                        (src_cfg['name'], course['name'], file_name)).fetchone()\n\n                    # save file and timestamp in the database if it doesn't exists\n                    if not simulate and file_last_modified_old is None:\n                        c.execute(\n                            '''\n                            INSERT INTO file_modifications (source, course, file_name, file_path, last_modified)\n                            VALUES (?,?,?,?,?)\n                            ''',\n                            (src_cfg['name'], course['name'], file_name, file_path, file_last_modified))\n                    # update timestamp if there's a newer version of the file\n                    elif not simulate and file_last_modified > file_last_modified_old[0]:\n                        c.execute(\n                            'UPDATE file_modifications SET last_modified=? WHERE source=? AND course=? AND file_name=?',\n                            (file_last_modified, src_cfg['name'], course['name'], file_name))\n                    # otherwise skip saving\n                    else:\n                        skip_count += 1\n                        # log(file_name + ' (skipped)')\n                        continue\n\n                    log(file_name + ' (new)')\n\n                    if simulate:\n                        conn.rollback()\n                        continue\n\n                    # request whole file\n                    file_request = session.get(link[1])\n\n                    # write file\n                    try:\n                        os.makedirs(os.path.dirname(file_path), exist_ok=True)\n                        with open(file_path, 'wb') as f:\n                            f.write(file_request.content)\n                            download_count += 1\n                    except FileNotFoundError:\n                        print('Can\\'t write file to %s' % file_path)\n                        conn.rollback()\n\n                    # save changes to the database\n                    conn.commit()\n\n    # display count of downloaded files\n    log('\\nDownloaded %i file(s), skipped %i file(s)' % (download_count, skip_count))\n\n\ndef clear_course():\n    if course_to_clear[0] == 'all':\n        c.execute(\"DELETE FROM file_modifications\")\n        log('\\nCleared all courses')\n    else:\n        c.execute(\"DELETE FROM file_modifications WHERE course=?\", course_to_clear)\n        log('\\nCleared course %s' % course_to_clear[0])\n    conn.commit()\n\n\n# command line args\nparser = argparse.ArgumentParser(\n    description='A simple script for downloading slides and exercises for university lectures.')\nparser.add_argument('-v', '--verbose', action='store_true', help='verbose output')\nparser.add_argument('-c', '--course', action='append', help='specify a course which should be checked')\nparser.add_argument('-s', '--source', action='append', help='specify a source which should be checked')\nparser.add_argument('-sim', '--simulate', action='store_true', help='specify if the process should only be simulated')\nparser.add_argument('--clear', action='append',\n                    help='specify a course which files should be deleted from the database (not from file system).'\n                         + 'Use keyword \\'all\\' to clear the whole database')\nargs = parser.parse_args()\n\nverbose_output = args.verbose\nsimulate = args.simulate\ncourse_part = args.course\nsource_part = args.source\ncourse_to_clear = args.clear\n\n# database for timestamps\nconn = sqlite3.connect(os.path.join(os.path.dirname(__file__), 'data', 'file_modifications.db'))\nc = conn.cursor()\n\n# check if table exists otherwise create it\nc.execute(\n    '''\n    CREATE TABLE IF NOT EXISTS file_modifications (\n        id\tINTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n        source TEXT,\n        course\tTEXT,\n        file_name\tTEXT,\n        file_path TEXT,\n        last_modified\tINTEGER\n    );\n    ''')\n\nif simulate:\n    log(\"Simulation on\")\n\nif course_to_clear is not None:\n    clear_course()\nelse:\n    course_loop()\n\n# close cursor\nc.close()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n    def __init__(self, name, salary):\n        self.name = name\n        self.salary = salary\n    \n    def print_employee_details(self):\n        print('Employee Name: {}, Salary: {}'.format(self.name, self.salary))\n\nemployee = Employee('John Smith', 5000)\nemployee.print_employee_details() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n#Read the sales data\ndata = pd.read_csv('sales_data.csv')\n\n# Generate a report for the sales data\ndef generate_report (data):\n  #Group data by Region and Month\n  region_month = data.groupby(['Region','Month'])\n  \n  #Calculate total sales\n  total_sales = region_month.sum()['Sales']\n  \n  #Calculate total profit\n  total_profit = region_month.sum()['Profit']\n  \n  #Calculate max sales\n  max_sales = region_month.max()['Sales']\n  \n  #Create a report for the data\n  report = pd.DataFrame({'Total Sales': total_sales,\n                'Total Profit': total_profit,\n                'Max Sales': max_sales})\n  \n  #Return the report\n  return report\n\n#Run the report\nprint(generate_report(data)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def frequency(string): \n    freq = {} \n    for i in string: \n        if i in freq: \n            freq[i] += 1\n        else: \n            freq[i] = 1\n    return freq\n\nprint(frequency('hello world')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insertion_sort(arr):\n    for j in range(1, len(arr)):\n        key = arr[j]\n        i = j - 1\n        while i >= 0 and arr[i] > key:\n            arr[i + 1] = arr[i]\n            i -= 1\n        arr[i + 1] = key\n    return arr\n\n# Main program\ninput_array = [1, 3, 5, 2, 4]\noutput_array = insertion_sort(input_array)\nprint(output_array) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(a, b):\n  return sorted(a) == sorted(b)\n\nresult = is_anagram(\"listen\", \"silent\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def encode_message(message, a, b):\n    encoded_message = \"\"\n    for char in message:\n        # encode each character\n        x = (ord(char) - 97) * a + b\n        # wrap around if x is greater than 26\n        x = x % 26\n        # convert back to character\n        encoded_message += chr(x + 97)\n    return encoded_message\n\n# Main\nif __name__ == \"__main__\":\n    message = \"Hello world\"\n    a = 3  # a and b must be relatively prime\n    b = 5\n    print(encode_message(message, a, b))  # Khoor zruog but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def celsius_to_fahrenheit(celsius):\n    return (celsius * (9/5)) + 32 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_ascending(list):\n    return sorted(list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\nfrom bs4 import BeautifulSoup\n\ndef extract_urls(html):\n  soup = BeautifulSoup(html, 'html.parser')\n  urls = []\n  for link in soup.find_all('a'):\n    url = link.get('href')\n    if url:\n      urls.append(url)\n  return urls but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\"\"\"\n@file    xml2csv.py\n@author  Jakob Erdmann\n@author  Michael Behrisch\n@author  Laura Bieker\n@date    2013-12-08\n@version $Id: xml2csv.py 22608 2017-01-17 06:28:54Z behrisch $\n\nConvert hierarchical xml files to csv. This only makes sense if the hierarchy has low depth.\n\nSUMO, Simulation of Urban MObility; see http://sumo.dlr.de/\nCopyright (C) 2013-2017 DLR (http://www.dlr.de/) and contributors\n\nThis file is part of SUMO.\nSUMO is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 3 of the License, or\n(at your option) any later version.\n\"\"\"\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nimport os\nimport sys\nimport socket\nimport collections\nfrom optparse import OptionParser\nimport xml.sax\ntry:\n    import lxml.etree\n    import lxml.sax\n    haveLxml = True\nexcept ImportError:\n    haveLxml = False\n\nimport xsd\n\nPY3 = sys.version_info > (3,)\n\n\nclass NestingHandler(xml.sax.handler.ContentHandler):\n\n    \"\"\"A handler which knows the current nesting of tags\"\"\"\n\n    def __init__(self):\n        self.tagstack = []\n\n    def startElement(self, name, attrs):\n        self.tagstack.append(name)\n\n    def endElement(self, name):\n        self.tagstack.pop()\n\n    def depth(self):\n        # do not count the root element\n        return len(self.tagstack) - 1\n\n\nclass AttrFinder(NestingHandler):\n\n    def __init__(self, xsdFile, source, split):\n        NestingHandler.__init__(self)\n        self.tagDepths = {}  # tag -> depth of appearance\n        self.tagAttrs = collections.defaultdict(\n            collections.OrderedDict)  # tag -> set of attrs\n        self.renamedAttrs = {}  # (name, attr) -> renamedAttr\n        self.attrs = {}\n        self.depthTags = {}  # child of root: depth of appearance -> tag list\n        self.rootDepth = 1 if split else 0\n        if xsdFile:\n            self.xsdStruc = xsd.XsdStructure(xsdFile)\n            if split:\n                for ele in self.xsdStruc.root.children:\n                    self.attrs[ele.name] = []\n                    self.depthTags[ele.name] = [[]]\n                    self.recursiveAttrFind(ele, ele, 1)\n            else:\n                self.attrs[self.xsdStruc.root.name] = []\n                self.depthTags[self.xsdStruc.root.name] = []\n                self.recursiveAttrFind(\n                    self.xsdStruc.root, self.xsdStruc.root, 0)\n        else:\n            self.xsdStruc = None\n            xml.sax.parse(source, self)\n\n    def addElement(self, root, name, depth):\n        if name not in self.tagDepths:\n            if len(self.depthTags[root]) == depth:\n                self.tagDepths[name] = depth\n                self.depthTags[root].append([])\n            self.depthTags[root][depth].append(name)\n            return True\n        if name not in self.depthTags[root][depth]:\n            print(\"Ignoring tag %s at depth %s\" %\n                  (name, depth), file=sys.stderr)\n        return False\n\n    def recursiveAttrFind(self, root, currEle, depth):\n        if not self.addElement(root.name, currEle.name, depth):\n            return\n        for a in currEle.attributes:\n            if \":\" not in a.name:  # no namespace support yet\n                self.tagAttrs[currEle.name][a.name] = a\n                anew = \"%s_%s\" % (currEle.name, a.name)\n                self.renamedAttrs[(currEle.name, a.name)] = anew\n                attrList = self.attrs[root.name]\n                if anew in attrList:\n                    del attrList[attrList.index(anew)]\n                attrList.append(anew)\n        for ele in currEle.children:\n            self.recursiveAttrFind(root, ele, depth + 1)\n\n    def startElement(self, name, attrs):\n        NestingHandler.startElement(self, name, attrs)\n        if self.depth() >= self.rootDepth:\n            root = self.tagstack[self.rootDepth]\n            if self.depth() == self.rootDepth and root not in self.attrs:\n                self.attrs[root] = []\n                self.depthTags[root] = [[]] * self.rootDepth\n            if not self.addElement(root, name, self.depth()):\n                return\n            # collect attributes\n            for a in sorted(list(attrs.keys())):\n                if a not in self.tagAttrs[name] and \":\" not in a:\n                    self.tagAttrs[name][a] = xsd.XmlAttribute(a)\n                    if not (name, a) in self.renamedAttrs:\n                        anew = \"%s_%s\" % (name, a)\n                        self.renamedAttrs[(name, a)] = anew\n                        self.attrs[root].append(anew)\n\n\nclass CSVWriter(NestingHandler):\n\n    def __init__(self, attrFinder, options):\n        NestingHandler.__init__(self)\n        self.attrFinder = attrFinder\n        self.options = options\n        self.currentValues = collections.defaultdict(lambda: \"\")\n        self.haveUnsavedValues = False\n        self.outfiles = {}\n        self.rootDepth = 1 if options.split else 0\n        for root in sorted(attrFinder.depthTags):\n            if len(attrFinder.depthTags) == 1:\n                if not options.output:\n                    options.output = os.path.splitext(options.source)[0]\n                if not options.output.isdigit() and not options.output.endswith(\".csv\"):\n                    options.output += \".csv\"\n                self.outfiles[root] = getOutStream(options.output)\n            else:\n                if options.output:\n                    outfilename = options.output + \"%s.csv\" % root\n                else:\n                    outfilename = os.path.splitext(\n                        options.source)[0] + \"%s.csv\" % root\n                self.outfiles[root] = open(outfilename, 'w')\n            if (PY3):\n                self.outfiles[root].write(str.encode(\n                    options.separator.join(map(self.quote, attrFinder.attrs[root])) + \"\\n\"))\n            else:\n                self.outfiles[root].write(\n                    options.separator.join(map(self.quote, attrFinder.attrs[root])) + \"\\n\")\n\n    def quote(self, s):\n        return \"%s%s%s\" % (self.options.quotechar, s, self.options.quotechar)\n\n# the following two are needed for the lxml saxify to work\n    def startElementNS(self, name, qname, attrs):\n        self.startElement(qname, attrs)\n\n    def endElementNS(self, name, qname):\n        self.endElement(qname)\n\n    def startElement(self, name, attrs):\n        NestingHandler.startElement(self, name, attrs)\n        if self.depth() >= self.rootDepth:\n            root = self.tagstack[self.rootDepth]\n#            print(\"start\", name, root, self.depth(), self.attrFinder.depthTags[root][self.depth()])\n            if name in self.attrFinder.depthTags[root][self.depth()]:\n                for a, v in attrs.items():\n                    if isinstance(a, tuple):\n                        a = a[1]\n#                    print(a, dict(self.attrFinder.tagAttrs[name]))\n                    if a in self.attrFinder.tagAttrs[name]:\n                        if self.attrFinder.xsdStruc:\n                            enum = self.attrFinder.xsdStruc.getEnumeration(\n                                self.attrFinder.tagAttrs[name][a].type)\n                            if enum:\n                                v = enum.index(v)\n                        a2 = self.attrFinder.renamedAttrs.get((name, a), a)\n                        self.currentValues[a2] = v\n                        self.haveUnsavedValues = True\n\n    def endElement(self, name):\n        if self.depth() >= self.rootDepth:\n            root = self.tagstack[self.rootDepth]\n#            print(\"end\", name, root, self.depth(), self.attrFinder.depthTags[root][self.depth()], self.haveUnsavedValues)\n            if name in self.attrFinder.depthTags[root][self.depth()]:\n                if self.haveUnsavedValues:\n                    if(PY3):\n                        self.outfiles[root].write(str.encode(self.options.separator.join(\n                            [self.quote(self.currentValues[a]) for a in self.attrFinder.attrs[root]]) + \"\\n\"))\n                    else:\n                        self.outfiles[root].write(self.options.separator.join(\n                            [self.quote(self.currentValues[a]) for a in self.attrFinder.attrs[root]]) + \"\\n\")\n                    self.haveUnsavedValues = False\n                for a in self.attrFinder.tagAttrs[name]:\n                    a2 = self.attrFinder.renamedAttrs.get((name, a), a)\n                    del self.currentValues[a2]\n        NestingHandler.endElement(self, name)\n\n\ndef getSocketStream(port, mode='rb'):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.bind((\"localhost\", port))\n    s.listen(1)\n    conn, addr = s.accept()\n    return conn.makefile(mode)\n\n\ndef getOutStream(output):\n    if output.isdigit():\n        return getSocketStream(int(output), 'wb')\n    return open(output, 'wb')\n\n\ndef get_options():\n    optParser = OptionParser(\n        usage=os.path.basename(sys.argv[0]) + \" [<options>] <input_file_or_port>\")\n    optParser.add_option(\"-s\", \"--separator\", default=\";\",\n                         help=\"separating character for fields\")\n    optParser.add_option(\"-q\", \"--quotechar\", default='',\n                         help=\"quoting character for fields\")\n    optParser.add_option(\"-x\", \"--xsd\", help=\"xsd schema to use\")\n    optParser.add_option(\"-a\", \"--validation\", action=\"store_true\",\n                         default=False, help=\"enable schema validation\")\n    optParser.add_option(\"-p\", \"--split\", action=\"store_true\",\n                         default=False, help=\"split in different files for the first hierarchy level\")\n    optParser.add_option(\"-o\", \"--output\", help=\"base name for output\")\n    options, args = optParser.parse_args()\n    if len(args) != 1:\n        optParser.print_help()\n        sys.exit()\n    if options.validation and not haveLxml:\n        print(\"lxml not available, skipping validation\", file=sys.stderr)\n        options.validation = False\n    if args[0].isdigit():\n        if not options.xsd:\n            print(\"a schema is mandatory for stream parsing\", file=sys.stderr)\n            sys.exit()\n        options.source = getSocketStream(int(args[0]))\n    else:\n        options.source = args[0]\n    if options.output and options.output.isdigit() and options.split:\n        print(\n            \"it is not possible to use splitting together with stream output\", file=sys.stderr)\n        sys.exit()\n    return options\n\n\ndef main():\n    options = get_options()\n    # get attributes\n    attrFinder = AttrFinder(options.xsd, options.source, options.split)\n    # write csv\n    handler = CSVWriter(attrFinder, options)\n    if options.validation:\n        schema = lxml.etree.XMLSchema(file=options.xsd)\n        parser = lxml.etree.XMLParser(schema=schema)\n        tree = lxml.etree.parse(options.source, parser)\n        lxml.sax.saxify(tree, handler)\n    else:\n        xml.sax.parse(options.source, handler)\n\nif __name__ == \"__main__\":\n    main()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = \"Hello, world! This is a sample message.\"\nword = \"hello\"\n\ncount = string.lower().split().count(word.lower())\nprint(f\"The word {word} appears {count} times in the given string.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: <!DOCTYPE html>\n<html>\n<head>\n <title>Form Example</title>\n</head>\n<body>\n <h1>Form Example</h1>\n <form action=\"submit.php\" method=\"post\">\n <label for=\"nameInput\">Name:</label>\n <input type=\"text\" id=\"nameInput\" name=\"name\" />\n \n <label for=\"languageSelect\">Favorite Language:</label>\n <select id=\"languageSelect\" name=\"language\">\n <option value=\"java\">Java</option>\n <option value=\"javascript\">Javascript</option>\n <option value=\"python\">Python</option>\n </select>\n \n <input type=\"submit\" value=\"Submit\" />\n </form>\n</body>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def main(a, b): \n    try: \n        a = int(a) \n        b = int(b) \n    except ValueError: \n        print('Input arguments must be integers') \n        return\n    \n    print('Sum: {}'.format(a + b)) \n\nif __name__ == '__main__': \n    import sys \n    main(sys.argv[1], sys.argv[2]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: dict = {\n    'name': 'John',\n    'age': 30\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def normalize_vector(values):\n    length = 0\n    for v in values:\n        length += (v ** 2)\n    length = pow(length, 0.5)\n    if length == 0:\n        return [0 for v in values]\n    return [v / length for v in values] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef get_layer(input_dim, output_dim, activation='relu'):\n    \"\"\"\n    This function creates a single layer neural network in a form of numpy array with given\n    input and output dimensions and activation (default relu).\n    \"\"\"\n    layer = np.random.rand(input_dim, output_dim)\n    if activation == 'relu':\n        layer = np.maximum(layer, 0)\n    elif activation == 'softmax':\n        layer = np.exp(layer) / np.sum(np.exp(layer))\n    elif activation == 'sigmoid':\n        layer = 1 / (1 + np.exp(-layer))\n    return layer but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_min(input_list):\n    min_ele = input_list[0]\n    for ele in input_list:\n        if ele < min_ele:\n            min_ele = ele\n    return min_ele but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def foo(n):\n    return n * (n + 1) // 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insert_element(array, element):\n    if element >= array[len(array)-1]:\n        array.append(element)\n    else:\n        for i in range(len(array)):\n            if element < array[i]:\n                array.insert(i, element)\n                break\n    return array but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def knapsack(items, weights, max_weight):\n    n = len(items)\n    dp = [[0 for x in range(max_weight + 1)] for x in range(n + 1)] \n    \n    for i in range(1, n + 1): \n        for w in range(max_weight + 1): \n            if weights[i - 1] <= w: \n                dp[i][w] = max(items[i - 1] +  \n                               dp[i - 1][w - weights[i - 1]], \n                               dp[i - 1][w]) \n            else: \n                dp[i][w] = dp[i - 1][w] \n                      \n    value = dp[n][max_weight] \n                \n    return value\n\nitems = [\"hammer\", \"pliers\", \"screwdriver\"]\nweights = [4, 5, 2]\nmax_weight = 6\n\nvalue = knapsack(items, weights, max_weight)\nprint(\"The maximum value of items that can be fitted in the knapsack is:\", value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def simplified_func (x):\n    return 3*x**2 + 5*x - 4 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_special_characters(input_str):\n    '''This function takes a string as input and removes all the special characters from it.'''\n    # creating a regular expression pattern for special characters\n    pattern = r\"[^A-Za-z0-9]\"\n\n    # Removing special characters from the given string\n    new_str = re.sub(pattern, '', input_str) \n  \n    return new_str\n\n# Test\ninput_str = \"The quick brown fox _ jumps over the lazy dog!\"\nprint(remove_special_characters(input_str))\n# Output Thequickbrownfoxjumpsoverthelazydog but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in reversed(range(1,11)):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n  if n == 0 or n == 1:\n    return n\n  else:\n    return fibonacci(n - 1) + fibonacci(n - 2)\n  \nresult = fibonacci(7)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Load data into a dataframe\ndata = pd.read_csv(\"data.csv\")\n\n# Split data into features and target\nX = data[['age','gender','income','marital_status','education']]\ny = data['purchase']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)\n\n# Initialize model\nrf = RandomForestClassifier(random_state=123)\n\n# Train the model on the training set\nrf.fit(X_train, y_train)\n\n# Test the model on the testing set and calculate the accuracy\naccuracy = rf.score(X_test, y_test)\n\n# Print the accuracy\nprint(\"Accuracy: \" + str(accuracy)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import boto3\n\n# Create an S3 client\ns3 = boto3.client('s3')\n\n# Create an S3 bucket\nresponse = s3.create_bucket(\n    Bucket='mybucket',\n    CreateBucketConfiguration={\n    'LocationConstraint': 'us-east-1'\n    }\n)\n\nprint(response) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: text_cleaned = \"This is the text for processing!\nSome punctuation must be removed.\nLets Trim the whitespace too.\nPlease preserve the cases as is.\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = \"abcd\"\ncount = 0\nwhile count < 50:\n    for ch in string:\n        print(ch)\n        count += 1\n    if count >= 50:\n        break but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \nimport string\n\ndef gen_random_password():\n  chars = string.ascii_letters + string.digits\n  password = ''.join(random.choice(chars) for _ in range(8))\n  return password\n\nprint(gen_random_password()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(my_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def double_numbers(numbers):\n    # use list comprehesion to double each number\n    doubled_numbers = [num * 2 for num in numbers]\n    return doubled_numbers\n\nnumbers = [1, 2, 3, 4]\ndoubled_numbers = double_numbers(numbers)\nprint(doubled_numbers) # [2, 4, 6, 8] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_duplicates(list):\n    \"\"\"Identify all the duplicate elements in the given list.\"\"\"\n    seen = set()\n    duplicates = set()\n    for i in list:\n        if i not in seen:\n            seen.add(i)\n        else:\n            duplicates.add(i)\n    return list(duplicates)\n\n# Usage Example\nlist = [1, 2, 3, 2, 1]\nduplicates = find_duplicates(list)\nprint(duplicates)  # [1, 2] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef shuffle(array):\n random.shuffle(array)\n return array\n \ndef calculate_median(array):\n n = len(array)\n if n < 1:\n return None\n if n % 2 == 0:\n return (array[n//2 - 1] + array[n//2]) / 2.0\n else:\n return array[n//2] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \nimport matplotlib.pyplot as plt\n\ndef detect_anomalies(data):\n    '''This function detects anomalies in a time series.'''\n    # calculate rolling mean and rolling standard deviation\n    rolling_mean = np.mean(data, axis=0)\n    rolling_std = np.std(data, axis=0)\n\n    # create an empty dataframe\n    anomalies_df = []\n\n    # detect anomalies\n    for i in range(len(data)): \n        z_score = (data[i] - rolling_mean) / rolling_std\n        if np.abs(z_score) > 3:\n            anomalies_df.append(data[i])\n\n    # plot the anomalies\n    plt.plot(data, color='blue', label='Original data')\n    plt.scatter(range(len(data)), anomalies_df, color='red', label='Anomalies')\n    plt.legend()\n    plt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Algorithm to solve a 9x9 sudoku\n\ndef solve(board):\n    # Function to check if a given position on the board is empty\n    def is_empty(board):\n        for row in range(0, 9):\n            for col in range(0, 9):\n                if board[row][col] == 0:\n                    return (row, col)\n        return None\n\n    # Function to check if a given number is valid in the given position on the board\n    def is_safe(board, row, col, num):\n        for position in range(0, 9):\n            # checking for row\n            if board[row][position] == num and position != col:\n                return False\n            # checking for column\n            if board[position][col] == num and position != row:\n                return False\n\n        # checking for subboxes\n        upper_row = row - row%3\n        upper_col = col - col%3\n        for r in range(upper_row, upper_row + 3):\n            for c in range(upper_col, upper_col + 3):\n                if board[r][c] == num and (r, c) != (row, col):\n                    return False\n        \n        return True\n\n    next_num = is_empty(board)\n    if not next_num:\n        return True\n\n    row, col = next_num\n\n    for number in range(1, 10):\n        if is_safe(board, row, col, number):\n            board[row][col] = number\n\n            if solve(board):\n                return True\n\n            # backtracking\n            board[row][col] = 0\n\n    return False\n\nboard = [\n [3, 0, 6, 5, 0, 8, 4, 0, 0],\n [5, 2, 0, 0, 0, 0, 0, 0, 0],\n [0, 8, 7, 0, 0, 0, 0, 3, 1],\n [0, 0, 3, 0, 1, 0, 0, 8, 0],\n [9, 0, 0, 8, 6, 3, 0, 0, 5],\n [0, 5, 0, 0, 9, 0, 6, 0, 0],\n [1, 3, 0, 0, 0, 0, 2, 5, 0],\n [0, 0, 0, 0, 0, 0, 0, 7, 4],\n [0, 0, 5, 2, 0, 6, 3, 0, 0]\n]\n\nsolve(board)\n\nfor row in range(9):\n    for col in range(9):\n        print(board[row][col], end=\" \")\n    print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create database to store user information \ndb = sqlite3.connect('user_information.db')\n\n# Create table in the database \ncursor = db.cursor()\ncursor.execute(\"CREATE TABLE IF NOT EXISTS User_Info (Name TEXT, Age INTEGER, Gender TEXT, Phone_Number INTEGER)\")\n\n# Function to store user information in database \ndef store_info(name, age, gender, number):\n    cursor.execute(\"INSERT INTO User_Info (Name, Age, Gender, Phone_Number) VALUES(?, ?, ?, ?)\", (name, age, gender, number))\n    db.commit()\n\n# Function to get user information from database\ndef get_info(name):\n    cursor.execute(\"SELECT * FROM User_Info WHERE Name = ?\", (name,))\n    results = cursor.fetchall()\n    return results\n\n# Example \nstore_info(\"John\", 20, \"Male\", 8054839479)\njohn_info = get_info(\"John\")\nprint(john_info) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: data = [1,2,3,4,5,6,7,8,9]\n\ncount = 0\nfor value in data:\n  if value > 5:\n    count += 1\n\nprint(count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: grades_dict = {\n  \"James\": 95,\n  \"Alice\": 80,\n  \"John\": 75\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_strings(string_list):\n  return sorted(string_list, key=len)\n\n# Usage example\nstring_list = ['banana', 'apple', 'mango', 'pear']\nprint(sort_strings(string_list))  # Outputs ['apple', 'pear', 'mango', 'banana'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_greater_than_5(arr):\n    new_arr = []\n    for x in arr:\n        if x <= 5:\n            new_arr.append(x)\n    return new_arr\n\narr = [3, 4, 6, 1, 8, 9]\nprint(filter_greater_than_5(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: number_sum = 0\nfor i in range(1, 11):\n    number_sum += i\nprint(number_sum) # 55 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findMax(arr, n):\n # Initializing max with first element of array\n max = arr[0]\n\n # Starting loop from second element\n for i in range(1, n):\n # Comparing max with remaining elements of array\n if arr[i] > max:\n max = arr[i]\n\n # Returning maximum\n return max but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_subarray_sum(arr):\n  max_sum = 0\n  for i in range(len(arr)):\n    for j in range(i, len(arr)):\n      current_sum = 0\n      for k in range(i, j+1):\n        current_sum += arr[k]\n      max_sum = max(max_sum, current_sum)\n  return max_sum\n\narr = [1, 8, -1, 3, 4, -2]\nresult = max_subarray_sum(arr)\nprint(result) # 17 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\nimport logging\n\nimport azure.functions as func\nimport azure.storage.blob as blob\nfrom azure.storage.blob.post_policy import BlobPostPolicy\nimport azure.cosmosdb.table as table\n\ndef main(mytimer: func.TimerRequest) -> None:\n    utc_timestamp = datetime.datetime.utcnow().replace(\n        tzinfo=datetime.timezone.utc).isoformat()\n\n    if mytimer.past_due:\n        logging.info('The timer is past due!')\n\n    logging.info('Python timer trigger function ran at %s', utc_timestamp)\n    \n    # Create and send the email here\n    # ...\n\n    cur_time = datetime.datetime.utcnow().replace(\n            tzinfo=datetime.timezone.utc).isoformat()\n    next_time =  cur_time[:18] + '00:00+00:00' # Every day at 00:00 UTC\n    logging.info('Setting next run time for %s', next_time)\n\n    mytimer.wait_for_next_run(next_run_time=datetime.datetime.strptime(next_time, \"%Y-%m-%dT%H:%M:%S+00:00\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Bubble Sort Algorithm\ndef bubbleSort(lst):\n    n = len(lst) \n   \n    # Traverse through all array elements \n\tfor i in range(n): \n \n\t\t# Last i elements are already in place \n\t\tfor j in range(0, n-i-1): \n \n\t\t\t# traverse the array from 0 to n-i-1 \n\t\t\t# Swap if the element found is greater \n\t\t\t# than the next element\n\t\t\tif lst[j] > lst[j+1] : \n\t\t\t\tlst[j], lst[j+1] = lst[j+1], lst[j]\n \n# Driver code to test above\nlst = [2, 4, 9, 5, 1]\nbubbleSort(lst)\n\nprint (\"Sorted array is:\")\nfor i in range(len(lst)):\n\tprint (\"%d\" %lst[i]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\n# Driver Program \nif __name__ == \"__main__\": \n    print(Fibonacci(6)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(number): \n \n    # If given number is greater than 1 \n    if number > 1: \n         \n        # Iterate from 2 to n / 2  \n        for i in range(2, int(number/2)): \n              \n            # If number is divisible by any number between  \n            # 2 and n / 2, it is not prime  \n            if (number % i) == 0: \n                return False\n        return True\n    else: \n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_unique(list):\n    unique = {}\n    for item in list:\n        if item not in unique:\n            unique[item] = 1\n        else:\n            unique[item] += 1\n    return len(unique) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = [\"Hello\", \"World\", \"!\"]\nprint(' '.join(words)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers = [1, 2, 3, 4, 5, 6]\nnumbers_set = set(numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Copyright (c) 2015, Nordic Semiconductor\r\n# All rights reserved.\r\n#\r\n# Redistribution and use in source and binary forms, with or without\r\n# modification, are permitted provided that the following conditions are met:\r\n#\r\n# * Redistributions of source code must retain the above copyright notice, this\r\n#   list of conditions and the following disclaimer.\r\n#\r\n# * Redistributions in binary form must reproduce the above copyright notice,\r\n#   this list of conditions and the following disclaimer in the documentation\r\n#   and/or other materials provided with the distribution.\r\n#\r\n# * Neither the name of Nordic Semiconductor ASA nor the names of its\r\n#   contributors may be used to endorse or promote products derived from\r\n#   this software without specific prior written permission.\r\n#\r\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\r\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\r\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\r\nfrom enum import Enum\r\nimport struct\r\n\r\n\r\nINIT_PACKET_USES_CRC16 = 0\r\nINIT_PACKET_USES_HASH = 1\r\nINIT_PACKET_EXT_USES_ECDS = 2 \r\n\r\n\r\nclass PacketField(Enum):\r\n    PACKET_VERSION = 1\r\n    COMPRESSION_TYPE = 2\r\n    DEVICE_TYPE = 3\r\n    DEVICE_REVISION = 4\r\n    APP_VERSION = 5\r\n    REQUIRED_SOFTDEVICES_ARRAY = 6\r\n    OPT_DATA = 7\r\n    NORDIC_PROPRIETARY_OPT_DATA_EXT_PACKET_ID = 8\r\n    NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_LENGTH = 9\r\n    NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_HASH = 10\r\n    NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_CRC16 = 11\r\n    NORDIC_PROPRIETARY_OPT_DATA_INIT_PACKET_ECDS = 12\r\n\r\n\r\nclass Packet(object):\r\n    \"\"\"\r\n    Class that implements the INIT packet format.\r\n    http://developer.nordicsemi.com/nRF51_SDK/doc/7.1.0/s110/html/a00065.html\r\n    \"\"\"\r\n\r\n    UNSIGNED_SHORT = \"H\"\r\n    UNSIGNED_INT = \"I\"\r\n    UNSIGNED_CHAR = \"B\"\r\n    CHAR_ARRAY = \"s\"\r\n\r\n    def __init__(self, init_packet_fields):\r\n        \"\"\"\r\n\r\n            :param init_packet_fields: Dictionary with packet fields\r\n        \"\"\"\r\n        self.init_packet_fields = init_packet_fields\r\n\r\n    def generate_packet(self):\r\n        \"\"\"\r\n        Generates a binary packet from provided init_packet_fields provided in constructor.\r\n        This version includes the extended data\r\n\r\n        :return str: Returns a string representing the init_packet (in binary)\r\n\r\n        \"\"\"\r\n        # Create struct format string based on keys that are\r\n        # present in self.init_packet_fields\r\n        format_string = self.__generate_struct_format_string()\r\n        args = []\r\n\r\n        for key in sorted(self.init_packet_fields.keys(), key=lambda x: x.value):\r\n            # Add length to fields that required that\r\n            if key in [PacketField.REQUIRED_SOFTDEVICES_ARRAY,\r\n                       PacketField.OPT_DATA]:\r\n                args.append(len(self.init_packet_fields[key]))\r\n                args.extend(self.init_packet_fields[key])\r\n            elif key in [PacketField.NORDIC_PROPRIETARY_OPT_DATA_EXT_PACKET_ID]:\r\n                args.append(self.init_packet_fields[key]) # Extended packet id format\r\n            elif key in [PacketField.NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_LENGTH]:\r\n                args.append(self.init_packet_fields[key]) # Length of firmware image\r\n            elif key in [PacketField.NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_CRC16]:\r\n                args.append(self.init_packet_fields[key])  # CRC-16\r\n            elif key in [PacketField.NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_HASH]:\r\n                args.append(self.init_packet_fields[key])  # SHA-256 hash of firmware image\r\n            elif key in [PacketField.NORDIC_PROPRIETARY_OPT_DATA_INIT_PACKET_ECDS]:\r\n                args.append(self.init_packet_fields[key])  # ECDS of base init packet using Curve P-256 amd SHA-256\r\n            else:\r\n                args.append(self.init_packet_fields[key])\r\n\r\n        return struct.pack(format_string, *args)\r\n\r\n    def __generate_struct_format_string(self):\r\n        format_string = \"<\"  # Use little endian format with standard sizes for python,\r\n        # see https://docs.python.org/2/library/struct.html\r\n\r\n        for key in sorted(self.init_packet_fields.keys(), key=lambda x: x.value):\r\n            if key in [PacketField.PACKET_VERSION,\r\n                       PacketField.COMPRESSION_TYPE,\r\n                       PacketField.DEVICE_TYPE,\r\n                       PacketField.DEVICE_REVISION,\r\n                       ]:\r\n                format_string += Packet.UNSIGNED_SHORT\r\n\r\n            elif key in [PacketField.APP_VERSION]:\r\n                format_string += Packet.UNSIGNED_INT\r\n            elif key in [PacketField.REQUIRED_SOFTDEVICES_ARRAY]:\r\n                array_elements = self.init_packet_fields[key]\r\n                format_string += Packet.UNSIGNED_SHORT  # Add length field to format packet\r\n\r\n                for _ in range(len(array_elements)):\r\n                    format_string += Packet.UNSIGNED_SHORT\r\n            elif key in [PacketField.OPT_DATA]:\r\n                format_string += Packet.UNSIGNED_SHORT  # Add length field to optional data\r\n                format_string += \"{0}{1}\".format(len(self.init_packet_fields[key]), Packet.CHAR_ARRAY)\r\n            elif key in [PacketField.NORDIC_PROPRIETARY_OPT_DATA_EXT_PACKET_ID]:\r\n                format_string += Packet.UNSIGNED_INT # Add the extended packet id field\r\n            elif key == PacketField.NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_LENGTH:\r\n                format_string += Packet.UNSIGNED_INT # Add the firmware length field\r\n            elif key == PacketField.NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_HASH:\r\n                format_string += \"32{0}\".format(Packet.CHAR_ARRAY)  # SHA-256 requires 32 bytes\r\n            elif key == PacketField.NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_CRC16:\r\n                format_string += Packet.UNSIGNED_SHORT\r\n            elif key == PacketField.NORDIC_PROPRIETARY_OPT_DATA_INIT_PACKET_ECDS:\r\n                format_string += \"64{0}\".format(Packet.CHAR_ARRAY)  # ECDS based on P-256 using SHA-256 requires 64 bytes\r\n\r\n        return format_string but is not the same. just give one example and only return the code."}
