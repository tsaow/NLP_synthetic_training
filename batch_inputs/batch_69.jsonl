{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.corpus import wordnet\n\n# Define a function to get the simple POS tag\ndef get_simple_pos(tag):\n \n    if tag.startswith('J'):\n        return wordnet.ADJ\n    elif tag.startswith('V'):\n        return wordnet.VERB\n    elif tag.startswith('N'):\n        return wordnet.NOUN\n    elif tag.startswith('R'):\n        return wordnet.ADV\n    else:\n        return wordnet.NOUN\n\n# Create a lemmatizer object \nlemmatizer = WordNetLemmatizer()\n\ndef lemmatize_sentence(sentence):\n    #tokenize the sentence and find the POS tag for each token\n    nltk_tagged = nltk.pos_tag(nltk.word_tokenize(sentence))  \n    #tuple of (token, simple POS tag)\n    nltk_tagged = [(word, get_simple_pos(tag)) for word, tag in nltk_tagged]\n    lemmatized_sentence = []\n    for word, tag in nltk_tagged:\n        lemmatized_sentence.append(lemmatizer.lemmatize(word, tag))\n    return \" \".join(lemmatized_sentence)\n\n# Create the chatbot\ndef create_bot():\n    print(\"Hello! I am a customer service chatbot. How can I help you?\")\n    response = input()\n    response = lemmatize_sentence(response)\n    # Perform actions based on the response\n    if response == \"quit\":\n        return\n    else:\n        print(\"Thank you for your question. I will get back to you shortly with an answer.\")\n        create_bot()\n\ncreate_bot() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \n    def find_fifth_from_end(self):\n        if self is None:\n            return None\n        curr = self\n        prev = self\n        count = 0\n        while curr.next is not None:\n            count += 1\n            if count >= 5:\n                prev = prev.next\n            curr = curr.next\n        if count < 5:\n            return None\n        else:\n            return prev.data\n        \n# Example\nn1 = Node(1)\nn2 = Node(2)\nn3 = Node(3)\nn4 = Node(4)\nn5 = Node(5)\nn6 = Node(6)\nn7 = Node(7)\n\n# Linked list setup\nn1.next = n2\nn2.next = n3\nn3.next = n4\nn4.next = n5\nn5.next = n6\nn6.next = n7\n\n# Find 4th element from the end\nprint(n1.find_fifth_from_end()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n  \n# Driver Program \nprint(Fibonacci(9)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from functools import reduce\n\nresult = reduce(lambda x,y: x+y, list)\nprint(result) # 10 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # HTML \n<form action=\"\">\n    <input type=\"text\" name=\"stockSymbol\" placeholder=\"Enter a stock symbol\">\n    <input type=\"submit\">\n</form>\n\n# JavaScript \nfunction trackStock() {\n    var stockSymbol = document.querySelector(\"input[name=stockSymbol]\").value;\n    // code to fetch stock quote and display it  \n}\n\n# Python\ndef getStockQuotes(stockSymbol):\n    # code to fetch stock quote using an API \n    return stockQuote but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def evaluate(expression):\n    return eval(expression) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_nums(num1, num2):\n    return num1 + num2\n\nexample_sum = sum_of_nums(2, 3)\nprint(\"Sum of two numbers is:\", example_sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os\nimport uuid\nimport datetime\n\nfrom flask import Flask, jsonify, request\nfrom flask_sqlalchemy import SQLAlchemy\nimport jwt\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\napp = Flask(__name__)\n\n# SQLAlchemy Configuration\n# FIXME: Replace with database URI\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\napp.config['SECRET_KEY'] = 'secret-key'\napp.config['JWT_SECRET_KEY'] = 'jwt-secret-key'\ndb = SQLAlchemy(app)\n\n# Flask-JWT-Extended Configuration\napp.config['JWT_ACCESS_TOKEN_EXPIRES'] = datetime.timedelta(days=1)\napp.config['JWT_REFRESH_TOKEN_EXPIRES'] = datetime.timedelta(days=30)\n\n# User Model\nclass User(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n public_id = db.Column(db.String(50), unique=True)\n username = db.Column(db.String(100), unique=True)\n password = db.Column(db.String(255))\n first_name = db.Column(db.String(100))\n last_name = db.Column(db.String(100))\n\n@app.route('/register', methods=['POST'])\ndef register():\n data = request.get_json()\n\n# User already exists\nuser = User.query.filter_by(username=data['username']).first()\nif user:\n return jsonify({'message': 'User already exists!'}), 400\n\npublic_id = str(uuid.uuid4())\nhashed_password = generate_password_hash(data['password'], method='sha256')\nuser = User(public_id=public_id, username=data['username'], \n            password=hashed_password, first_name=data['first_name'], \n            last_name=data['last_name'])\ndb.session.add(user)\ndb.session.commit()\n\nreturn jsonify({'public_id': public_id }), 201\n\n@app.route('/login', methods=['POST'])\ndef login():\n data = request.get_json()\n user = User.query.filter_by(username=data['username']).first()\n\nif not user or not check_password_hash(user.password, data['password']):\n return jsonify({'message': 'Invalid credentials!'}), 400\n\n# JWT Token\naccess_token = jwt.encode({'public_id': user.public_id, \n                           'exp': datetime.datetime.utcnow() + \n                                  datetime.timedelta(minutes=30),\n                          }, \n                         app.config['JWT_SECRET_KEY'])\n\nrefresh_token = jwt.encode({'public_id': user.public_id, \n                            'exp': datetime.datetime.utcnow() + \n                                   datetime.timedelta(days=30),\n                           }, \n                          app.config['JWT_SECRET_KEY'])\n\nreturn jsonify({'access_token': access_token.decode('UTF-8'), \n                'refresh_token': refresh_token.decode('UTF-8')\n               }), 200\n\n@app.route('/update_profile', methods=['POST'])\ndef update_profile():\n data = request.get_json()\n\npublic_id = jwt.decode(data['access_token'], app.config['JWT_SECRET_KEY'])['public_id']\nuser = User.query.filter_by(public_id=public_id).first()\n\nuser.first_name = data['first_name']\nuser.last_name = data['last_name']\ndb.session.commit()\n\nreturn jsonify({'message': 'Profile updated'})\n\nif __name__ == '__main__':\n db.create_all()\n port = int(os.environ.get('PORT', 5000))\n app.run(host='0.0.0.0', port=port) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def target_sum(subtrahend, lst):\n    target_sums = []\n    for num in lst:\n        target_sums.append(subtrahend - num)\n    return target_sums but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd \n\ndef scrape_page(url):\n # make a request to the page and get the HTHML content\n r = requests.get(url) \n content = r.content\n \n # parse the HTML content with Beatiful Soup\n soup = BeautifulSoup(content, 'html.parser')\n \n # extract the title and text \n title = soup.title.string\n paragraphs = soup.find_all('p')\n text = ' '.join([paragraph.get_text() for paragraph in paragraphs])\n \n # store the data an a dictionary\n data = {\n 'title': title,\n 'text': text\n }\n\n return data\n\n# define the URL \nurl = 'https://example.com'\n\n# scrape the page\ndata = scrape_page(url)\n\n# print the data\nprint(data)\n\n# store the data in a dataframe\ndf = pd.DataFrame([data])\ndf.head() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        # Use dynamic programming\n        # to store the intermediate results\n        memory = {}\n        if n in memory:\n            return memory[n]\n        else:\n            memory[n] = n * factorial(n - 1)\n            return memory[n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quicksort(nums):\n    '''This function implements the quicksort algorithm in Python.'''\n    if len(nums) <= 1:\n        return nums\n    \n    pivot = nums[len(nums) // 2]\n    left = [x for x in nums if x < pivot]\n    middle = [x for x in nums if x == pivot]\n    right = [x for x in nums if x > pivot]\n    return quicksort(left) + middle + quicksort(right) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \nfrom bs4 import BeautifulSoup \nfrom urllib.parse import urljoin \n\ndef scrape(url): \n    # Fetch the homepage \n    response = requests.get(url) \n    # Parse the page \n    soup = BeautifulSoup(response.text, \"html.parser\") \n\n    # Iterate over the products \n    for card in soup.find_all(\"div\", { \"class\": \"s-include-content-margin s-border-bottom\" }): \n        # Get the link and price \n        link = card.find(\"a\", { \"class\": \"a-link-normal a-text-normal\" }) \n        price = card.find(\"span\", { \"class\": \"a-offscreen\" }) \n\n        # Get the actual page \n        response = requests.get(urljoin(url, link[\"href\"])) \n        # Parse the page \n        soup = BeautifulSoup(response.text, \"html.parser\") \n\n        # Check the availability \n        availability = soup.find(\"div\", { \"id\": \"availability\" })\n        availability_text = availability.find(\"span\").string \n\n        print(f\"Link: {link['href']}\") \n        print(f\"Price: {price.string}\") \n        print(f\"Availability: {availability_text}\") \n        print() \n\n# Execute the function \nscrape(\"https://www.amazon.com/s?k=laptops&ref=nb_sb_noss_2\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Input range\nstart = int(input(\"Enter start of range: \"))\nend = int(input(\"Enter end of range: \"))\n\n#Initialize sum to 0\nsum = 0\n\n#Loop to find the sum of even numbers\nfor num in range(start,end+1):\n  if num % 2 == 0:\n    sum += num\n\n#Print the result\nprint(\"Sum of even numbers between\",start,\"and\",end,\"=\",sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Book:\n    \n    def __init__(self, title, author, pages, publisher):\n        self.title = title\n        self.author = author\n        self.pages = pages\n        self.publisher = publisher\n        \n    def get_title(self):\n        return self.title\n    \n    def get_author(self):\n        return self.author\n    \n    def get_pages(self):\n        return self.pages\n    \n    def get_publisher(self):\n        return self.publisher but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize_matrix(matrix, target_sum):\n    row_sums = [0] * len(matrix)\n    col_sums = [0] * len(matrix[0])\n \n    # Calculate the sum of each row and column\n    for row in range(len(matrix)):\n        for col in range(len(matrix[0])):\n            row_sums[row] += matrix[row][col]\n            col_sums[col] += matrix[row][col]\n \n    # Check if the matrix can be optimized\n    if min(row_sums) + min(col_sums) > target_sum or max(row_sums) + max(col_sums) < target_sum:\n        return \"Can't optimize\"\n    else:\n        # Bring the matrix closer to the target sum by subtracting or \n        # adding an amount from each row and column\n        for row in range(len(matrix)):\n            for col in range(len(matrix[0])):\n                matrix[row][col] += (target_sum - (row_sums[row] + col_sums[col])) // 2\n        return matrix but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string_list = string.split(substring,1)\nprint(string_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_two_numbers():\n    return 5 + 7 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def minEditDist(str1, str2):\n\n    m = len(str1)\n    n = len(str2)\n\n    # create a table for storing edit distances\n    EditDistance = [[0 for x in range(n+1)] for x in range(m+1)]\n \n    # initialize the table\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0:\n                EditDistance[i][j] = j\n            elif j == 0:\n                EditDistance[i][j] = i\n            elif str1[i-1] == str2[j-1]:\n                EditDistance[i][j] = EditDistance[i-1][j-1]\n            else:\n                EditDistance[i][j] = 1 + min(EditDistance[i][j-1],\n                                            EditDistance[i-1][j],\n                                            EditDistance[i-1][j-1])\n \n    return EditDistance[m][n]\n\n# Driver code \nprint(minEditDist(\"sitting\", \"kitten\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_strings(string_list):\n    sorted_list = sorted(string_list)\n    return sorted_list\n\nunsorted_list = ['banana', 'apple', 'orange']\nsorted_list = sort_strings(unsorted_list)\nprint(sorted_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_points(points):\n    classes = []\n    for point in points:\n        if point[0] < 0 and point[1] < 0 and point[2] < 0:\n            classes.append(1)\n        elif point[0] > 0 and point[1] > 0 and point[2] > 0:\n            classes.append(2)\n        else:\n            classes.append(3)\n    return classes but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import decision tree classifier from the sklearn library\nfrom sklearn import tree\n \n# Input data to the model\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n \n# Create a decision tree classifier object\nclf = tree.DecisionTreeClassifier()\n \n# Train the decision tree classifier\nclf = clf.fit(X, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\nimport numpy as np\n\nnp.random.seed( 1337 )\n\nimport data_utils\nfrom nid import Neural_information_density\n\nimport sys\n\nif __name__ == '__main__':\n\n\tif len( sys.argv ) != 9:\n\t\tprint( \"\\nUsage: \", sys.argv[ 0 ], \"<context> <target> <vocabulary> <embedding size> <dropout> <batch size> <epochs> <output model>\\n\" )\n\t\texit()\n\n\tcontext, target, vocab, embedding, dropout, batch, epoch, out_model = sys.argv[ 1: ]\n\n\tembedding = np.int( embedding )\n\tdropout = np.float( dropout )\n\tbatch = np.int( batch )\n\tepoch = np.int( epoch )\n\n\tprint( \"Loading vocabulary\" )\n\tvocab, max_features = data_utils.load_vocab( vocab )\n\tprint( \"Loading contexts\" )\n\tcontext = data_utils.load_context( context )\n\tprint( \"Loading targets\" )\n\ttarget = data_utils.load_target( target ) #, max_features )\n\n\tmax_length = context.shape[ 1 ]\n\tvalidation_size = 0.25\n\n\tprint( \"Data loaded\" )\n\tnid = Neural_information_density( context, target, max_features, max_length, batch, validation_size )\n\tprint( \"Data prepared\" )\n\tprint( \"Training\" )\n\tnid.train( embedding, dropout, epoch, out_model )\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_unique(s):\n    seen=set()\n    for c in s:\n        if c in seen:\n            return False\n        else:\n            seen.add(c)\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_multiples_of_3_and_5(num):\n    sum = 0 \n    for i in range(num):\n        if i % 3 == 0 or i % 5 == 0:\n            sum += i\n    return sum\n\nresult = sum_of_multiples_of_3_and_5(20)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [3, 4, 7, 1, 6, 9, 2] \nlist.sort() \nprint(\"Ascending :\",list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a Python program to calculate the intersection points between two circles\n\"\"\"\nimport math\n\ndef get_intersection(c1, c2):\n    # Calculate center distance between two circles\n    dist = math.sqrt((c1[0] - c2[0]) ** 2 + (c1[1] - c2[1]) ** 2)\n    # Check if distances between centers is equal to or greater than sum of radius\n    if dist >= (c1[2] + c2[2]):\n        return None\n    # Calculate the angle between two circles\n    angle = math.acos(((c1[2] ** 2 + dist ** 2) - c2[2] ** 2) / (2 * c1[2] * dist))\n    # Calculates the point P on the line segment which connects both the circles centers\n    point_p = (\n        c1[0] + c1[2] * math.cos(angle),\n        c1[1] + c1[2] * math.sin(angle)\n    )\n    # Calculates the distance from point P to both circles intersection points\n    dist_2 = math.sqrt((c1[2] ** 2) - (dist ** 2))\n    # Calculates the intersection point\n    intersection1 = (\n        point_p[0] - dist_2 * (c2[1] - c1[1]) / dist,\n        point_p[1] + dist_2 * (c2[0] - c1[0]) / dist\n    )\n    intersection2 = (\n        point_p[0] + dist_2 * (c2[1] - c1[1]) / dist,\n        point_p[1] - dist_2 * (c2[0] - c1[0]) / dist\n    )\n    return intersection1, intersection2\n\nif __name__ == \"__main__\":\n    c1 = (0, 0, 3)  # center 1 (x, y), radius\n    c2 = (3, 3, 6)  # center 2 (x, y), radius\n    intersection = get_intersection(c1, c2)\n    print(\"Intersection points: \", intersection) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def days_between_dates(date1, date2):\n    \"\"\"\n    Calculate the number of days between two dates\n    date1: date object\n    date2: date object\n    \"\"\"\n    time_diff = date2 - date1\n    return time_diff.days\n\ndays_between_dates(date(2020,1,2), date(2020,2,19)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from bs4 import BeautifulSoup\nimport requests\nimport collections\n\nURL = \"https://example.com\"\npage = requests.get(URL)\nsoup = BeautifulSoup(page.content, 'html.parser')\ntext = soup.get_text().split()\n\nwordcount = collections.Counter(text)\n\ntop_words = wordcount.most_common(10)\n\nprint(top_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCopyright (c) 2012-2013, Austin Noto-Moniz (metalnut4@netscape.net)\n\nPermission to use, copy, modify, and/or distribute this software for any purpose\nwith or without fee is hereby granted, provided that the above copyright notice\nand this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\nOF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\nTORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\nTHIS SOFTWARE.\n\"\"\"\n\nfrom pyinq.results import *\n\n\n##### TEST ASSERT RESULTS #####\n\nLINENO = 12\nCALL = \"assert_true(True)\"\nFAIL = \"FAIL\"\nTRACE = \"TRACE\"\nEXPECTED = IOError\n\ndef test_Result_true():\n    check_Result(True)\n    \ndef test_Result_false():\n    check_Result(False)\n\ndef test_AssertResult_true():\n    check_AssertResult(True)\n\ndef test_AssertResult_false():\n    check_AssertResult(False)\n\ndef test_AssertEqualsResult_true():\n    check_AssertEqualsResult(True,4,4)\n\ndef test_AssertEqualsResult_false():\n    check_AssertEqualsResult(False,4,5)\n\ndef test_AssertInResult_true():\n    check_AssertInResult(True,4,[1,2,4,8,16,32,64])\n\ndef test_AssertInResult_false():\n    check_AssertInResult(False,4,[1,1,2,3,5,8,13])\n\ndef test_AssertInstanceResult_true():\n    check_AssertInstanceResult(True,IOError,Exception)\n\ndef test_AssertInstanceResult_false():\n    check_AssertInstanceResult(False,IOError,WindowsError)\n\ndef test_AssertRaisesResult_true():\n    check_AssertRaisesResult(True,TRACE)\n\ndef test_AssertRaisesResult_false():\n    check_AssertRaisesResult(False,\"\")\n\ndef test_ExpectedErrorResult_true():\n    check_ExpectedErrorResult(True,LINENO)\n\ndef test_ExpectedErrorResult_false():\n    check_ExpectedErrorResult(False,None)\n\ndef test_FailResult():\n    result = FailResult(LINENO,FAIL)\n    assert result.lineno == LINENO\n    assert result.mess == FAIL\n    assert result.result == False\n\ndef test_AssertError():\n    result = AssertError(TRACE)\n    assert result.trace == TRACE\n    assert result.result is None\n\n\n##### TEST RESULTS #####\n\nNAME = \"FOO\"\n\ndef test_TestResult():\n    test_result = TestResult(NAME)\n\n    assert test_result.name == NAME\n    assert not test_result.before\n    assert not test_result.after\n\ndef test_TestResult_true():\n    test_result = TestResult(NAME)\n    test_result.extend(make_AssertResult_list(True,True,True))\n    assert test_result.get_status() == True\n\ndef test_TestResult_false():\n    test_result = TestResult(NAME)\n    test_result.extend(make_AssertResult_list(True,True,False))\n    assert test_result.get_status() == False\n\ndef test_TestClassResult():\n    cls_result = TestClassResult(NAME)\n\n    assert cls_result.name == NAME\n    assert not cls_result.before\n    assert not cls_result.after\n\ndef test_TestClassResult_true():\n    cls_result = TestClassResult(NAME)\n    cls_result.extend(make_TestResult_list(True,True,True))\n    assert cls_result.get_status() == True\n\ndef test_TestClassResult_false():\n    cls_result = TestClassResult(NAME)\n    cls_result.extend(make_TestResult_list(True,True,False))\n    assert cls_result.get_status() == False\n\ndef test_TestModuleResult():\n    mod_result = TestModuleResult(NAME)\n\n    assert mod_result.name == NAME\n    assert not mod_result.before\n    assert not mod_result.after\n\ndef test_TestModuleResult_true():\n    mod_result = TestModuleResult(NAME)\n    mod_result.extend(make_TestClassResult_list(True,True,True))\n    assert mod_result.get_status() == True\n\ndef test_TestModuleResult_false():\n    mod_result = TestModuleResult(NAME)\n    mod_result.extend(make_TestClassResult_list(True,True,False))\n    assert mod_result.get_status() == False\n\ndef test_TestSuiteResult():\n    suite_result = TestSuiteResult(NAME)\n\n    assert suite_result.name == NAME\n    assert not suite_result.before\n    assert not suite_result.after\n\ndef test_TestSuiteResult_true():\n    suite_result = TestSuiteResult(NAME)\n    suite_result.extend(make_TestModuleResult_list(True,True,True))\n    assert suite_result.get_status() == True\n\ndef test_TestSuiteResult_false():\n    suite_result = TestModuleResult(NAME)\n    suite_result.extend(make_TestModuleResult_list(True,True,False))\n    assert suite_result.get_status() == False\n\n\n\n##### TEST ERRORS #####\n\ndef construct_call_str(name, args):\n    arg_str = \",\".join([str(arg) for arg in args])\n    return \"{name}({arg_str})\".format(name=name,arg_str=arg_str)\n\ndef check_PyInqError(func_name, arg_dict, error_cls, result_cls, check_func):\n    call = construct_call_str(func_name,arg_dict.values())\n    error = error_cls(LINENO,call,**arg_dict)\n    result = error.result()\n\n    assert error.lineno == LINENO\n    assert error.call == call\n    for arg_name in arg_dict:\n        assert getattr(error,arg_name) == arg_dict[arg_name]\n\n    assert type(result) is result_cls\n    check_func(state=False,lineno=LINENO,call=call,result=result,**arg_dict)\n\n\ndef test_PyInqAssertError():\n    arg_dict = {}\n    check_PyInqError(\"assert_true\",arg_dict,PyInqAssertError,AssertResult,check_AssertResult)\n\ndef test_PyInqAssertEqualsError():\n    arg_dict = {\"actual\":4, \"expected\":42}\n    check_PyInqError(\"assert_equal\",arg_dict,PyInqAssertEqualsError,AssertEqualsResult,check_AssertEqualsResult)\n\ndef test_PyInqAssertInError():\n    arg_dict = {\"item\":4, \"collection\":[1,1,2,3,5,8,13,21]}\n    check_PyInqError(\"assert_in\",arg_dict,PyInqAssertInError,AssertInResult,check_AssertInResult)\n\ndef test_PyInqAssertInstanceError():\n    arg_dict = {\"obj\":IOError, \"cls\":IndexError}\n    check_PyInqError(\"assert_is_instance\",arg_dict,PyInqAssertInstanceError,AssertInstanceResult,check_AssertInstanceResult)\n\ndef test_PyInqAssertRaisesError():\n    arg_dict = {\"expected\":IOError, \"trace\":\"\"}\n    check_PyInqError(\"assert_raises\",arg_dict,PyInqAssertRaisesError,AssertRaisesResult,check_AssertRaisesResult)\n\ndef test_PyInqFailError():\n    arg_dict = {\"mess\":\"This is a failure message.\"}\n    error = PyInqFailError(LINENO,**arg_dict)\n    result = error.result()\n\n    assert error.lineno == LINENO\n    assert error.mess == arg_dict[\"mess\"]\n\n    assert type(result) is FailResult\n    assert result.lineno == LINENO\n    assert result.mess == arg_dict[\"mess\"]\n    assert result.result == False\n\n\n##### TEST HELPERS #####\n\ndef check_Result(state, result=None):\n    if not result:\n        result = Result(state)\n    assert result.result == state\n\ndef check_AssertResult(state, lineno=LINENO, call=CALL, result=None):\n    if not result:\n        result = AssertResult(lineno,call,state)\n    assert result.lineno == lineno\n    assert result.call == call\n    assert result.result == state\n\ndef check_AssertEqualsResult(state, actual, expected, lineno=LINENO, call=CALL, result=None):\n    if not result:\n        result = AssertEqualsResult(lineno,call,state,actual,expected)\n    assert result.lineno == lineno\n    assert result.call == call\n    assert result.result == state\n    assert result.actual == actual\n    assert result.expected == expected\n\ndef check_AssertInResult(state, item, collection, lineno=LINENO, call=CALL, result=None):\n    if not result:\n        result = AssertInResult(lineno,call,state,item,collection)\n    assert result.lineno == lineno\n    assert result.call == call\n    assert result.result == state\n    assert result.item == item\n    assert result.collection == collection\n\ndef check_AssertInstanceResult(state, obj, cls, lineno=LINENO, call=CALL, result=None):\n    if not result:\n        result = AssertInstanceResult(lineno,call,state,obj,cls)\n    assert result.lineno == lineno\n    assert result.call == call\n    assert result.result == state\n    assert result.obj_name == obj.__class__.__name__\n    assert result.class_name == cls.__name__\n\ndef check_AssertRaisesResult(state, trace, lineno=LINENO, call=CALL, expected=EXPECTED, result=None):\n    if not result:\n        result = AssertRaisesResult(lineno,call,state,trace,expected)\n    assert result.lineno == lineno\n    assert result.call == call\n    assert result.result == state\n    assert remove_whitespace(result.trace) == remove_whitespace(trace)\n    assert result.expected == expected.__name__\n\ndef check_ExpectedErrorResult(state, lineno, expected=EXPECTED, result=None):\n    if not result:\n        result = ExpectedErrorResult(state,expected,lineno)\n    assert result.expected == expected.__name__\n    assert result.lineno == lineno\n    assert result.call is None\n    assert result.result == state\n\ndef make_AssertResult_list(*state_list):\n    return [AssertResult(LINENO,CALL,state) for state in state_list]\n\ndef make_TestResult_list(*state_list):\n    result_list = []\n    for state in state_list:\n        result = TestResult(NAME)\n        result.extend(make_AssertResult_list(state))\n        result_list.append(result)\n    return result_list\n\ndef make_TestClassResult_list(*state_list):\n    result_list = []\n    for state in state_list:\n        result = TestClassResult(NAME)\n        result.extend(make_TestResult_list(state))\n        result_list.append(result)\n    return result_list\n\ndef make_TestModuleResult_list(*state_list):\n    result_list = []\n    for state in state_list:\n        result = TestModuleResult(NAME)\n        result.extend(make_TestClassResult_list(state))\n        result_list.append(result)\n    return result_list\n\n\n\n##### UTIL #####\n\ndef remove_whitespace(string):\n    return ''.join([line.strip() for line in string.splitlines()])\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n def __init__(self, data):\n  self.data = data\n  self.left = None\n  self.right = None\n\nclass BinarySearchTree:\n def __init__(self):\n  self.root = None\n\n # Insert a node \n def insert(self, data):\n  if self.root == None:\n   self.root = Node(data)\n  else:\n   self._insert(data, self.root)\n\n # Helper function for Node Insert\n def _insert(self, data, cur_node):\n  if data < cur_node.data: \n   if cur_node.left == None: \n    cur_node.left = Node(data) \n   else: \n    self._insert(data, cur_node.left)\n  elif data > cur_node.data: \n   if cur_node.right == None: \n    cur_node.right = Node(data) \n   else: \n    self._insert(data, cur_node.right) \n  else: \n   pass\n\n# Search a node\ndef search(self, data):\n if self.root != None:\n  return self._search(data, self.root)\n else:\n  return False\n\n# Helper function for Node Search\ndef _search(self, data, cur_node):\n if data > cur_node.data and cur_node.right != None:\n  return self._search(data, cur_node.right)\n elif data < cur_node.data and cur_node.left != None:\n  return self._search(data, cur_node.left)\n elif data == cur_node.data:\n  return True\n\n# Delete a node\ndef delete(self, data):\n if self.root == None:\n  print(\"The tree is empty\")\n  return\n\n# call the delete helper function \nself.root = self._delete(data, self.root)\n\n# Helper function for Node Delete\ndef _delete(self, data, cur_node):\n if cur_node:\n  if data > cur_node.data:\n   cur_node.right = self._delete(data, cur_node.right)\n  elif data < cur_node.data:\n   cur_node.left = self._delete(data, cur_node.left)\n  else:\n   # Node to be deleted is a leaf node\n   if not cur_node.right and not cur_node.left:\n    print(\"Deleting leaf node\")\n    cur_node = None\n    return cur_node\n\n# Node to be deleted has only one child\nif not cur_node.right:\n print(\"Deleting a Node with single left child\")\n cur_node = cur_node.left\n return cur_node\nelif not cur_node.left:\n print(\"Deleting a Node with single right child\")\n cur_node = cur_node.right\n return cur_node\n\n# Node to be deleted has two children\nprint(\"Deleting a Node with two children\")\ndel_node = cur_node\ncur_node = cur_node.right\nmin_node = self._min_value_node(cur_node)\ndel_node.data = min_node.data\ndel_node.right = self._delete(min_node.data, del_node.right)\nreturn del_node\n\ndef _min_value_node(self, cur_node):\n while cur_node.left is not None:\n  cur_node = cur_node.left\n return cur_node but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(arr):\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import logging\nimport sys\nfrom flask import Flask\n\napp = Flask(name)\n\n# Set up logging\napp.logger.addHandler(logging.StreamHandler(sys.stdout))\napp.logger.setLevel(logging.DEBUG)\n\n@app.route('/')\ndef index():\n app.logger.info('Processing request to index')\n return 'Hello World!' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\n\ndef removePunctuations(sentence):\n    return sentence.translate(str.maketrans('', '', string.punctuation))\n\nprint(removePunctuations(\"This, is a?! test* sentence.\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_largest(list): \n    n = len(list) \n    max = list[0] \n    for i in range(1,n): \n        if list[i] > max: \n            max = list[i] \n    return max \n\nlist = [1, 7, 3, 4, 9, 2]\nlargest_number = find_largest(list) \nprint(\"Largest number in the given list is:\", largest_number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(s):\n    return s == s[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def largest_number(a, b, c):\n    max = a\n    if b > max:\n        max = b\n    if c > max:\n        max = c\n    print(max) \n\nlargest_number(3, 5, 9) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        fact = 1\n        for i in range(1,n+1):\n            fact = fact*i\n        return fact but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def cum_sum(lst):\n result = []\n cumulative = 0\n for num in lst:\n  cumulative += num\n  result.append(cumulative)\n return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_primes(n):\n    # Create a list of prime numbers\n    prime_numbers = []\n\n    # Iterate from 2 to n\n    for num in range(2, n + 1):\n        isPrime = True\n        \n        # Check for factors\n        for i in range(2, num):\n            if num % i == 0:\n                isPrime = False\n                break\n\n        # If prime, append to list\n        if isPrime:\n            prime_numbers.append(num)\n\n    # Print out the first 30 prime numbers\n    for p in prime_numbers[:30]:\n        print(p, end=\" \")\n\n# Test function\nprint_primes(100) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def get_area(self):\n        return self.width * self.height but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n): \n if n <= 0: \n return 0 \n elif n == 1: \n return 1 \n else: \n return fibonacci(n-1) + fibonacci(n-2) \n\nn = 7 \nprint(fibonacci(n)) # Output: 13 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Point:\n    \"\"\" \n    Represent a point in 2D space with x and y coordinates\n    \"\"\"\n    def __init__(self, x, y):\n        \"\"\" Initialize the Point's x and y coordinates \n        \"\"\" \n        self.x = x\n        self.y = y\n    \n    def distance(self, other):\n        \"\"\" Calculate the Euclidean distance between two points\n        \"\"\"\n        return ((self.x - other.x) ** 2 + (self.y - other.y) ** 2) ** 0.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_list(nums):\n total = 0\n for num in nums:\n total += num\n return total\n\ndef sum_list_optimized(nums):\n total = 0\n length = len(nums)\n while length > 0:\n total += nums[length - 1]\n length -= 1\n return total\n\nnums = [1, 2, 3, 4, 5]\nprint(sum_list_optimized(nums))  # Output: 15 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, jsonify, request\nfrom flask_sqlalchemy import SQLAlchemy \n\n#initialize the flask app\napp = Flask(__name__)\n\n#configure the database\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////path/to/database.db'\ndb = SQLAlchemy(app)\n\n#create the model\nclass User(db.Model):\n   id = db.Column(db.Integer, primary_key=True)\n   name = db.Column(db.String(80), unique=True)\n\n#define the routes\n@app.route('/', methods=['GET'])\ndef home():\n return '<h1>Welcome to the API</h1>'\n\n@app.route('/users', methods=['GET'])\ndef get_users():\n users = User.query.all()\n output = []\n \n #Loop through the user objects\n for user in users:\n    user_data = {}\n    user_data['id'] = user.id\n    user_data['name'] = user.name \n    output.append(user_data)\n return jsonify(output)\n\n#run the app\nif __name__ == '__main__':\n    app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply(A, B):\n    rows_A = len(A)\n    cols_A = len(A[0])\n    rows_B = len(B)\n    cols_B = len(B[0])\n \n    if cols_A != rows_B:\n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\")\n        return\n \n    # Create the result matrix\n    # Dimensions would be rows_A x cols_B\n    C = [[0 for row in range(cols_B)] for col in range(rows_A)]\n \n    for i in range(rows_A):\n        for j in range(cols_B):\n            for k in range(cols_A):\n                C[i][j] += A[i][k] * B[k][j]\n    return C but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_fifteen(num):\n    return num + 15 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create an empty set \nstr_set = set() \n  \n# Add elements to the set\nstr_set.add(\"Python\") \nstr_set.add(\"Java\") \nstr_set.add(\"C#\") \nstr_set.add(\"JavaScript\") \n\n# Check for the presence\nif \"Python\" in str_set: \n    print(\"Python is present\") \n  \n# Remove elements from the set\nstr_set.remove(\"Java\") \n\n# Print the set\nprint(\"Set of strings: \", end = \" \") \nfor i in str_set: \n    print(i, end =\" \") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tweepy\n\nconsumer_key = ''\nconsumer_secret = ''\naccess_token = ''\naccess_token_secret = ''\n\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\npublic_tweets = api.search('python')\nfor tweet in public_tweets:\n    print(tweet.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def comb3(arr):\n    result = []\n    for i in range(len(arr)):\n       for j in range(i+1, len(arr)):\n           for k in range(j+1, len(arr)):\n               t = [arr[i],arr[j],arr[k]]\n               result.append(t)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_all_primes(n):\n    for i in range(2, n+1):\n        if is_prime(i):\n            print(i)\n\ndef is_prime(num):\n    if num == 2 or num == 3:\n        return True\n    if num < 2 or num % 2 == 0:\n        return False\n    if num < 9:\n        return True\n    if num % 3 == 0:\n        return False\n    r = int(num**0.5)\n    f = 5\n    while f <= r:\n        if num % f == 0:\n            return False\n        if num % (f+2) == 0:\n            return False\n        f += 6\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\narr = np.array([[[1, 2, 3], [4, 5, 6]],\n                [[7, 8, 9], [10, 11, 12]]])\n\n# Pad the array with 0s along its first two axes\n\narr_pad = np.pad(arr, ((1, 1), (1, 1), (0, 0)), 'constant', constant_values=0) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\ndata = [10, 5, 20, 25, 15]\n\nplt.bar(range(len(data)), data, color='blue')\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import threading\nimport sqlite3\n\ndef database_access():\n    # Connect to the database \n    conn = sqlite3.connect('example.db')\n    c = conn.cursor()\n    # Do something with the database\n    c.execute(\"SELECT * FROM table_name\")\n    # Commit changes\n    conn.commit()\n    # Close the database connection\n    conn.close()\n\n# Create thread\nthread = threading.Thread(target=database_access)\n# Start the thread\nthread.start() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Hello:\n    def say_hello():\n        print('Hello!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: input_binary = \"1010\"\ndecimal = int(input_binary, 2)\nprint(decimal) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def genRandomFive():\n    n = 100\n    divisor = 5\n\n    random_number = random.randint(0,n) \n    while (random_number % divisor != 0): \n        random_number = random.randint(0,n) \n    return random_number \n\nfor i in range(5): \n    print(genRandomFive()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import necessary libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n#load data\ndata = pd.read_csv(...)\n\n#split data into train and test sets\nx = data.drop('purchase_amount', axis = 1)\ny = data['purchase_amount']\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2)\n\n#fit model to training data\nmodel = LinearRegression()\nmodel.fit(x_train, y_train)\n\n#predict on testing data\npredictions = model.predict(x_test)\n\n#calculate accuracy\nscore = model.score(x_test,y_test)\nprint(\"Model accuracy:\", score) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\nsentence = \"The W3C HTML 4.01 specification defines the language used to create web pages, including elements such as <head>, <body>, <div> and <span>, as well as the structure of the web document as it appears in a web browser.\"\n\n# Split sentence into individual words\nwords = re.findall(r'\\w+', sentence)\n\n# Initialize empty output list\noutput = []\n\n# Split words into groups of 50 words\nwhile len(words) > 0:\n group = words[:50]\n output.append(' '.join(group))\n words = words[50:]\n\n# Print output\nfor line in output:\n print(line)\n\n# Output\n# The W3C HTML 4.01 specification defines the language used to create web pages,\n# including elements such as <head>, <body>, <div> and <span>,\n# as well as the structure of the web document as it appears in a web browser. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insertion_sort(nums):\n    for i in range(1,len(nums)):\n        key = nums[i]\n        j = i-1\n        while j >= 0 and key < nums[j]:\n            nums[j + 1] = nums[j]\n            j -= 1\n        nums[j + 1] = key\n\nnums = [7, 8, 5, 4, 1, 9, 6, 3, 2]\nprint(\"Unsorted Array:\", nums)\ninsertion_sort(nums)\nprint(\"Sorted Array:\", nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compute_levenshtein_distance(a, b): \n    n = len(a)\n    m = len(b)\n    d = [[0 for i in range(m + 1)] for j in range(n + 1)] \n  \n    for i in range(n + 1): \n        for j in range(m + 1): \n            if i == 0:\n                d[i][j] = j\n            elif j == 0:\n                d[i][j] = i\n            elif a[i-1] == b[j-1]: \n                d[i][j] = d[i-1][j-1]\n            else: \n                d[i][j] = min(d[i-1][j], d[i][j-1], d[i-1][j-1]) + 1   \n    return d[n][m] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program\nimport math \n\ndef square_root(a, b): \n    return math.sqrt(a*a + b*b)\n  \nNum1 = 4\nNum2 = 9\n\nprint(\"Square root of the sum of two numbers:\", square_root(Num1, Num2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import smtplib\n\nsender_email = \"<sender_email_address>\"\nreceiver_email = \"<receiver_email_address>\"\npassword = \"<sender_password>\"\nmessage = \"Hi, This email is sent from Python!\"\n\nserver = smtplib.SMTP('smtp.gmail.com', 587)\nserver.starttls()\nserver.login(sender_email, password)\nprint(\"Login Success!\")\n\nserver.sendmail(sender_email, receiver_email, message)\nprint(\"Email has been sent successfully to \", receiver_email)\n\nserver.quit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef sentimentAnalysis(text):\n analyzer = SentimentIntensityAnalyzer()\n sentiment_scores = analyzer.polarity_scores(text)\n if sentiment_scores['compound'] >= 0.05:\n  print('positive')\n elif sentiment_scores['compound'] <= -0.05:\n  print('negative')\n else:\n  print('neutral')\n\nsentimentAnalysis(text)\n#Output: positive but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_outcomes(n):\n  if n == 0:\n    return 1 \n  else: \n    return count_outcomes(n-1) + 2**n\n\nprint(count_outcomes(8)) # 256 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(arr):\n  n = len(arr)\n  for i in range(n): \n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1] :\n        arr[j], arr[j+1] = arr[j+1], arr[j]\n  return arr\n\nbubble_sort([9, 2, 5, 6, 4, 3, 7, 10, 1, 8]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_average(num1, num2, num3):\n return (num1 + num2 + num3) / 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def diff(a, b): \n   return abs(a - b) \n  \na = 21\nb = 49\n  \nprint(diff(a, b)) # Output 28 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Program to print pyramid pattern in Python\n\nfor i in range(0,5):\n    for j in range(0,i+1):\n        print(\"*\",end=\"\")\n    print(\"\\r\")\n\n\"\"\"\n*\n**\n***\n****\n*****\n\"\"\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: ','.join(str(item) for item in my_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom scipy import stats\n\ndef detect_anomalies(data):\n # Set upper and lower limit to 3 standard deviation\n u_limit = np.mean(data) + 3 * np.std(data)\n l_limit = np.mean(data) - 3 * np.std(data)\n \n # Detect anomalies\n anomalies = []\n for outlier in data:\n  if outlier > u_limit or outlier < l_limit:\n   anomalies.append(outlier)\n\n return anomalies\n\n# Generate example data\nexample_data = stats.norm.rvs(loc = 2, scale = 0.3, size = 1000)\n\n# Detect anomalies\nanomalies = detect_anomalies(example_data)\n\n# Print anomalies\nprint('Anomalies: ', anomalies) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nAPI_URL = 'https://api.openweathermap.org/data/2.5/weather'\nAPI_KEY = '<my-key>'\n\nresponse = requests.get(API_URL, params={'APPID': API_KEY, 'q': 'New York'})\n\nif response.status_code == 200:\n data = response.json()\n temperature = data['main']['temp']\n humidity = data['main']['humidity']\n print(f'The temperature is {temperature:.2f}\u00b0C and the humidity is {humidity}%.')\nelse:\n print('Error while fetching the data.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_elements_in_lists(list1, list2):\n    if len(list1) != len(list2):\n        return None\n    \n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] + list2[i])\n    \n    return result\n\nresult = sum_elements_in_lists([2, 3, 4], [2, 5, 6])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\n# Generate distances between coordinates\ndef generate_distances(coordinates):\n    distances = []\n    for i in range(len(coordinates)):\n        for j in range(len(coordinates)):\n            if i != j:\n                d = math.sqrt((coordinates[i][0] - coordinates[j][0])**2 + (coordinates[i][1]-coordinates[j][1])**2)\n                distances.append([i,j,d])\n    return distances\n\n# Generate paths with minimum distance\ndef traveling_salesman(coordinates, distances):\n    towns_left = list(range(len(coordinates)))\n    current_town = 0\n    path = [current_town]\n    total_distance = 0\n    while len(towns_left) > 0:\n        min_dist = float(\"inf\")\n        # Find the nearest town\n        nearest_town = None\n        for i in towns_left:\n            dist = distances[(current_town,i)]\n            if dist < min_dist:\n                min_dist = dist\n                nearest_town = i\n        # Move to the nearest town\n        towns_left.remove(nearest_town)\n        path.append(nearest_town)\n        total_distance += min_dist\n        current_town = nearest_town\n    # Return to the starting point\n    total_distance += distances[(current_town, 0)]\n    return path, total_distance\n\npoints = [(1,1), (1,2), (1,3), (2,1), (2,2), (2,3)]\ndistances = generate_distances(points)\nprint(\"Path:\", traveling_salesman(points, distances)[0])\nprint(\"Total Distance:\", traveling_salesman(points, distances)[1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tweepy \n\n# Authentication details\nconsumer_key = 'consumer_key'\nconsumer_secret = 'consumer_secret'\naccess_token = 'access_token'\naccess_token_secret = 'access_token_secret'\n\n# Create an Api instance\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\napi = tweepy.API(auth)\n\n# Extract all tweets with the hashtag #happy that have over 500 retweets\nresult = api.search(q=\"#happy\", count=100)\nfor tweet in result:\n if tweet.retweet_count > 500:\n  print(tweet.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # https://docs.python.org/2.7/\nimport os\nimport sys\nimport urllib\nimport urlparse\n# http://mirrors.kodi.tv/docs/python-docs/\n\nimport xbmcaddon\nimport xbmcgui\nimport xbmcplugin\n# http://docs.python-requests.org/en/latest/\nimport requests\nfrom threading import Thread\nimport time\n\n\n\nclass PlayerWindow(xbmcgui.WindowXML):\n    LABEL_ARTIST = 802\n    LABEL_TITEL = 801\n    LABEL_ALBUM = 803\n    IMG_ALBUM = 800\n    SLIDER_VOL = 815\n    BUTTON_SHUFFLE = 817\n    BUTTON_SHUFFLE_ACT = 818\n    \n    BUTTON_REPEAT = 819\n    BUTTON_REPEAT_ACT = 819\n    \n    BUTTON_BACK = 809\n    BUTTON_PLAY = 811\n    BUTTON_PAUSE = 812\n    BUTTON_FOR = 813\n    BUTTON_VOL_UP = 816\n    BUTTON_VOL_DOWN = 814\n    def __init__(self, *args, **kwargs): \n        self.isRunning = True\n\n        self.volume = 100\n\n        \n\n\n    def onAction(self , action):\n        ACTION_PREVIOUS_MENU = 10\n        ACTION_NAV_BACK = 92\n        ACTION_UP = 3\n        ACTION_DOWN = 4\n        ACTION_LEFT = 1\n        ACTION_RIGHT = 2\n        ACTION_MIDDLE = 7\n        \n        ACTION_PAUSE = 12\n        ACTION_STOP = 13\n        ACTION_NEXT_ITEM = 14\n        ACTION_PREV_ITEM = 15\n        \n        ACTION_FORWARD = 16\n        ACTION_REWIND = 17\n        ACTION_PLAYER_FORWARD = 77\n        ACTION_PLAYER_REWIND = 78\n\n        ACTION_PLAYER_PLAY = 79\n        ACTION_VOLUME_UP = 88\n        ACTION_VOLUME_DOWN = 89\n        ACTION_MUTE = 91\n        \n        ACTION_PAGE_UP = 5 \n        ACTION_PAGE_DOWN = 6  \n\n        \n\n        \n        #ids = str(action.getId())\n        \n        #xbmc.log(ids)\n        \n        if (action == ACTION_PREVIOUS_MENU) or (action == ACTION_NAV_BACK):\n            xbmcgui.Window(10000).setProperty(\"spotify-closed-by-user\",\"true\")\n            self.isRunning = False\n            self.close()\n            \n\n        if (action == ACTION_LEFT) or (action == ACTION_RIGHT):\n            self.volSlider = self.getControl(self.SLIDER_VOL)\n            volume = self.volSlider.getPercent()\n            setVol(volume)\n                \n        if(action == ACTION_PLAYER_PLAY) or (action == ACTION_PAUSE):\n            if(self.playing):\n                getSite(pause)\n                \n            else:\n                getSite(play)\n                \n                \n                \n        if (action == ACTION_VOLUME_UP):\n            self.volume = self.volume + 3\n            if(self.volume > 100):\n                self.volume = 100\n            setVol(self.volume)\n            self.volSlider = self.getControl(self.SLIDER_VOL)\n            self.volSlider.setPercent(self.volume)\n                \n        if (action == ACTION_VOLUME_DOWN):\n            self.volume = self.volume- 3\n            if(self.volume < 0):\n                self.volume = 0\n            setVol(self.volume)\n            self.volSlider = self.getControl(self.SLIDER_VOL)\n            self.volSlider.setPercent(self.volume)\n        \n        if (action == ACTION_FORWARD) or (action == ACTION_PLAYER_FORWARD) or (action == ACTION_NEXT_ITEM) or (action == ACTION_PAGE_UP):\n            getSite(next)\n            \n        if (action == ACTION_REWIND) or (action == ACTION_PLAYER_REWIND) or (action == ACTION_PREV_ITEM) or (action == ACTION_PAGE_DOWN):\n            getSite(prev)\n            \n        if(action == ACTION_STOP):\n            getSite(pause)\n            \n            \n            \n    def onClick(self, controlID):\n                \n        if (controlID == self.BUTTON_PAUSE) or (controlID == self.BUTTON_PLAY):\n            if(self.playing):\n                getSite(pause)                \n            else:\n                getSite(play)      \n                \n        if (controlID == self.BUTTON_VOL_UP):\n            self.volume = self.volume + 3\n            if(self.volume > 100):\n                self.volume = 100\n            setVol(self.volume)\n            self.volSlider = self.getControl(self.SLIDER_VOL)\n            self.volSlider.setPercent(self.volume)\n                \n        if (controlID == self.BUTTON_VOL_DOWN):\n            self.volume = self.volume- 3\n            if(self.volume < 0):\n                self.volume = 0\n            setVol(self.volume)\n            self.volSlider = self.getControl(self.SLIDER_VOL)\n            self.volSlider.setPercent(self.volume)\n        \n        if (controlID == self.BUTTON_FOR):\n            getSite(next)\n            \n        if (controlID == self.BUTTON_BACK):\n            getSite(prev)\n            \n    \n    def updateLabels(self, information):\n        self.albumCover = self.getControl(self.IMG_ALBUM)\n        self.titleLabel = self.getControl(self.LABEL_TITEL)\n        self.artistLabel = self.getControl(self.LABEL_ARTIST)\n        self.albumName = self.getControl(self.LABEL_ALBUM)\n        self.volSlider = self.getControl(self.SLIDER_VOL)\n    \n    \n        self.playing = information['playing']\n\n        \n        self.titleLabel.setLabel(information['track_name'])\n        self.albumName.setLabel(information['album_name'])\n        self.artistLabel.setLabel( information['artist_name'])\n        self.albumCover.setImage(information['cover_url'])\n        self.volume = int(information['volume'])/655.35\n        self.volSlider.setPercent(self.volume)\n        \n        self.getControl(self.BUTTON_PLAY).setVisible(not self.playing)\n        self.getControl(self.BUTTON_SHUFFLE).setVisible(not information['shuffle'])\n        self.getControl(self.BUTTON_REPEAT).setVisible(not information['repeat'])\n\n\ndef getSite(url):\n    #try...\n    rq = requests.get(url)\n    #handle\n    return rq\n\ndef getInfo():\n    information = getSite(info).json()\n    \n    statusInfo = getSite(status).json()\n    \n    \n    playing = statusInfo['playing']\n    shuffleInfo = statusInfo['shuffle']\n    repeatInfo = statusInfo['repeat']\n    \n    coverURL = \"http://o.scdn.co/160/\"+information['cover_uri'].split(':')[-1]\n    information['cover_url'] = coverURL\n    information['playing'] = playing\n    information['shuffle'] = shuffleInfo\n    information['repeat'] = repeatInfo\n    \n    return information\n\ndef downloadCover(url):\n    urllib.urlretrieve(url,'/tmp/spotAlCov.png')\n\ndef setVol(value):\n    value = int(round(value* 655.35))\n    jsonPost = {'value': value}\n    requests.post(volume,data=jsonPost)\n\ndef updateInfo(name,window):\n    screensaverDelay = 30\n    screensaverCount = 0\n    updateInterval = 2\n    \n    while True:\n        try:\n            window.getControl(800)\n            break\n        except Exception:            \n            xbmc.log(\"Error: can't find Window, try again\")\n            time.sleep(1) # maybe fix for can't find window id's\n\n\n    while window.isRunning and (not xbmc.abortRequested):\n        information = getInfo()\n        window.updateLabels(information)\n        time.sleep(updateInterval)\n        screensaverCount = screensaverCount + updateInterval\n        \n        if(screensaverCount>screensaverDelay) and information['playing']:\n            #wakeup from screensaver by simulating a button activity\n            json_query = xbmc.executeJSONRPC('{\"jsonrpc\": \"2.0\", \"method\": \"Input.ContextMenu\", \"id\": 1}')\n            screensaverCount = 0\n\ndef main():\n    pw = PlayerWindow(\"player.xml\",CWD)\n\n    \n    #xbmcgui.Window( 10000 )\n\n    t1 = Thread(target=updateInfo,args=(\"1\",pw))\n    t1.setDaemon( True)\n    t1.start()\n    \n    xbmcgui.Window(10000).setProperty(\"spotify-showing\", \"true\")\n    \n    pw.doModal()\n    xbmcgui.Window(10000).clearProperty(\"spotify-showing\")\n    del t1\n    del pw\n    \n\n\n    \n\nif __name__ == '__main__':\n    page = 'http://127.0.0.1:4000'\n    apiPlayback = '/api/playback'\n    \n    play = page+apiPlayback+'/play'\n    pause = page+apiPlayback+'/pause'\n    prev = page+apiPlayback+'/prev'\n    next = page+apiPlayback+'/next'\n    volume = page+apiPlayback+'/volume'\n    shuffle =  page+apiPlayback+'/shuffle'\n    repeat =  page+apiPlayback+'/repeat'\n    \n    \n    info = page+'/api/info/metadata'\n    status = page+'/api/info/status'\n    \n    \n    ADDON = xbmcaddon.Addon(id='plugin.audio.example')\n    CWD = ADDON.getAddonInfo('path').decode(\"utf-8\")\n\n\n\n    main()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Human:\n    def __init__(self, age, name):\n        self.age = age\n        self.name = name\n\n    def greet(self):\n        print(\"Hi, my name is \" + self.name + \" and I'm \" + str(self.age) + \" years old.\")\n\njohn = Human(25, \"John\")\njohn.greet() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(list_of_items, item_to_search):\n    for items in list_of_items: \n        if items == item_to_search: \n            return list_of_items.index(item_to_search) \n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import docx\n\nheaders = ['Name', 'Phone', 'Email']\ndata = [['John', '9898989898', 'john@example.com'], ['Alice', '1234567890', 'alice@example.com']]\n\ndocument = docx.Document()\ntable = document.add_table(rows=1, cols=len(headers))\n\n# Add column headings\nhead_cells = table.rows[0].cells\nfor header in headers:\n    head_cells[headers.index(header)].text = header\n\n# Add data\nfor row in data:\n    row_cells = table.add_row().cells\n    for cell in row:\n        row_cells[row.index(cell)].text = cell\n\ndocument.save('table.docx') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_by_sum_of_digits(arr): \n # Base case \n if not arr: \n return [] \n\n # Initializing variables \n result = [] \n sum_of_digits = [] \n\n for i in range(0, len(arr)): \n\n # Calculating the sum of digits \n # of each element in the array \n sum = 0\n for j in str(arr[i]): \n sum += int(j) \n\n # storing it in two separate lists \n result.append(arr[i]) \n sum_of_digits.append(sum) \n\n # Sorting the sums list and storing \n # the index of the sorted list. \n sorted_index = [i[0] for i in sorted(enumerate(sum_of_digits), key = lambda p: p[1])] \n\n # Preparing the sorted array based on \n # the index of sorted list. \n sorted_arr = [] \n for k in sorted_index: \n sorted_arr.append(result[k]) \n\n return sorted_arr \n\n# Driver Code \narr = [126, 234, 21, 5] \nprint(sort_by_sum_of_digits(arr)) \n\n# Output:\n# [5, 21, 126, 234] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Compute the optimal order\ndef compute_optimal_order(operations):\n\n    # Create a list to store the order.\n    order = []\n\n    # Sort the operations in ascending order by time.\n    sorted_operations = sorted(operations.items(), key=lambda x: x[1])\n \n    # Total time for the operations in the order.\n    total_time = 0\n \n    # Iterate through the operations.\n    for operation in sorted_operations:\n        operation_name = operation[0]\n        operation_time = operation[1]\n \n        order.append((operation_name, total_time))\n \n        # Update the total time for the order.\n        total_time += operation_time\n \n    return order\n \noperations = { A: 10, B: 5, C: 15, D: 20 }\n \noptimal_order = compute_optimal_order(operations)\n\nprint(optimal_order)\n# Output: [('B', 0), ('A', 5), ('C', 15), ('D', 30)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: total = 0\nfor num in [10, 15, 20, 25, 30]:\n    total += num\n\naverage = total / 5\nprint(average) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def contains_number(numbers, number):\n for x in numbers:\n if x == number:\n return True\n return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: a, b = b, a but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\nquery = 'ab+c'\nstring_array = ['abc', 'def', 'ghi', 'abcd', 'abcde']\n\nfor string in string_array:\n    if re.search(query, string):\n        print(string)\n\n# Output:\n# abc\n# abcd\n# abcde but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def farthest_from_begining_index(arr):\n    index = -1\n    max_index = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            index = i\n            if index > max_index:\n                max_index = index\n    return max_index but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\n# Generate random integers within a specified range\nx = np.random.randint(0, 10, size=(3, 3))\n\n# Generate random floats within a specified range\ny = np.random.uniform(low=0.0, high=10.0, size=(3, 3))\n\n# Generate random numbers with numpy\nz = np.random.rand(3,3)\n\nprint('Random integers:', x, '\\n') \nprint('Random floats:', y, '\\n') \nprint('Random numbers:', z) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compute_statistics(nums):\n mean = sum(nums)/len(nums)\n median = sorted(nums)[len(nums)//2]\n mode = max([(nums.count(i), i) for i in set(nums)], key=lambda x:x[0])[1]\n print('Mean:', mean)\n print('Median:', median)\n print('Mode:', mode)\n\ncompute_statistics([7, 10, 16, 1, 18]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_keyword(text, keyword):\n count = 0\n words = text.lower().split()\n\n for word in words:\n if word == keyword.lower():\n count += 1\n\n return count\n\ntext = 'Every morning I start my day with a cup of coffee.'\nprint(count_keyword(text, 'cup'))\n# Output: 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\n# Perform a google search and returns the first page of results\ndef search(query):\n    # Use a custom user-agent to avoid being blocked by Google\n    headers = {\n        'User-Agent': 'MySearchEngine/1.0'\n    }\n\n    # Build the query string\n    query_string = {\n        'q': query\n    }\n\n    # Send the GET request and extract the response details\n    result = requests.get('https://www.google.com/search', params=query_string, headers=headers)\n    response = result.text\n    details = {\n        'url': result.url,\n        'response': result.text\n    }\n\n    return details\n\nif __name__ == '__main__':\n    query = 'cats'\n    print(search(query)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class StudentGrades: \n    def __init__(self): \n        self.student_grades = {} \n  \n    def store_grade(self, student_name, grade): \n        self.student_grades[student_name] = grade \n  \n    def get_grade(self, student_name): \n        return self.student_grades.get(student_name) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef random_string():\n    letters = string.ascii_letters\n    return ''.join(random.choice(letters) for i in range(5))\n\nresult = random_string()\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bmi_calculation(height, weight):  \n    bmi = weight / (height * height)  \n    return bmi but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_ones(num):\n    count = 0 \n    result = 0\n    for i in range(len(num)):\n        if num[i] == '1':\n            count += 1 \n            result = max(result, count)\n        else:\n            count = 0 \n    return result\n\nnum = '10101010001'\nprint(max_ones(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_for_two_same_chars(string):\n    for i in range(len(string)-1):\n        if string[i] == string[i+1]:\n            return True\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: An iterator in Python is an object that allows a programmer to traverse through all the elements of a collection, regardless of its specific implementation. An iterator object is initialized with the iter() method, and the object can be iterated one element at a time using the methods of the iterator object, such as next(). This makes it possible to iterate over any collection, regardless of its specific implementation, such as lists, sets, and dictionaries. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Queue:\n    def __init__(self):\n        self.items = []\n \n    def isEmpty(self):\n        return self.items == []\n \n    def enqueue(self, item):\n        self.items.insert(0,item)\n \n    def dequeue(self):\n        return self.items.pop()\n \n    def size(self):\n        return len(self.items) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: if num % 3 == 0: \n    print(\"Number is multiple of 3\")\nelse: \n    print(\"Number is not a multiple of 3\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_by_marks(records):\n    # Sort the records list according to the marks \n    sorted_records =sorted(records, key = lambda x: x[2], reverse=True)\n\n    # Return the sorted list\n    return sorted_records but is not the same. just give one example and only return the code."}
