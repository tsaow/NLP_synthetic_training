{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\nimport os\n\npath = \"/usr\"\n\nfor root, dirs, files in os.walk(path):\n for file in files:\n print(os.path.join(root, file)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n    def __init__(self, value):\n        self.data = value\n        self.next = None\n \n \ndef merge_sorted_lists(head_a, head_b):\n    # Create a new linked list.\n    new_list = Node(None)\n    tail = new_list\n \n    current_a = head_a\n    current_b = head_b\n \n    while current_a is not None or current_b is not None:\n        if current_a is None:\n            tail.next = current_b\n            current_b = current_b.next\n        elif current_b is None:\n            tail.next = current_a\n            current_a = current_a.next\n        elif current_a.data <= current_b.data:\n            tail.next = current_a\n            current_a = current_a.next\n        else:\n            tail.next = current_b\n            current_b = current_b.next\n        tail = tail.next\n \n    return new_list.next but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, redirect, render_template\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(name)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\ndb = SQLAlchemy(app)\n\nclass Task(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n description = db.Column(db.String(120), unique=True)\n\ndb.create_all()\n\n@app.route('/tasks', methods=['GET'])\ndef get_tasks():\n tasks = Task.query.all()\n return {'tasks': [task.description for task in tasks]}\n\n@app.route('/tasks/int:id', methods=['PUT'])\ndef update_task(id):\n task = Task.query.get(id)\n task.description = request.json['description']\n db.session.commit()\n return {'message': 'Task updated'}\n\n@app.route('/tasks/int:id', methods=['DELETE'])\ndef delete_task(id):\n Task.query.filter_by(id=id).delete()\n db.session.commit()\n return {'message': 'Task deleted'}\n\n@app.route('/', methods=['GET', 'POST'])\ndef create_task():\n if request.method == 'POST':\n  task = Task(description=request.form['description'])\n  db.session.add(task)\n  db.session.commit()\n  return redirect('/')\n return render_template('index.html')\n \nif name == 'main':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def num_chars(string):\n    char_count = 0\n    for i in string:\n        char_count += 1\n    print(\"The number of characters in the string is\", char_count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_string(search_string, myList):\n    for index, s in enumerate(myList):\n        if s == search_string:\n            return index but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: data = json.loads('{\"name\": \"John\", \"age\": 32, \"city\": \"New York\"}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_redundant(text):\n    \"\"\"Remove redundant characters from a given string\"\"\"\n    result = \"\"\n\n    # Iterate over the string\n    for c in text:\n        # Add the character to the result if it is not already present\n        if c not in result:\n            result+=c\n\n    return result\n\n# Output\nprint(remove_redundant(text)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def five_length_strings(arr):\n    return [string for string in arr if len(string) == 5]\n\noutput = five_length_strings([\"Hello\", \"Hi\", \"Hola\", \"Bye\", \"Goodbye\"])\n\nprint(output) # Output: ['Hello', 'Hola', 'Bye'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_pairs(list, k):\n pairs = []\n for i in range(len(list)):\n for j in range(i+1, len(list)):\n if list[i] + list[j] == k:\n pairs.append( [list[i], list[j]] )\n return pairs\n\nprint(get_pairs([1, 2, 3, 4, 5], 5))\n\n# Output: [[1, 4], [2, 3]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_random_string(length):\n    letters = string.ascii_letters\n    return ''.join(random.choice(letters) for i in range(length)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pad_str(text, padding, length):\n    \"\"\"\n    Pad the given string on both sides with the given padding character until the required length is reached.\n    \"\"\"\n    # Calculate the number of padding characters to add\n    num_padding = length - len(text)\n    if num_padding < 0:\n        return text\n    \n    left_padding = num_padding // 2\n    right_padding = num_padding - left_padding\n    \n    # Pad the string on both sides\n    padded_str = padding * left_padding + text + padding * right_padding\n    \n    return padded_str\n\nif __name__ == '__main__':\n    text = 'Python'\n    padding = '*'\n    length = 10\n    result = pad_str(text, padding, length)\n    print(result) # **Python** but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_list(numbers):\n  summed_value = 0\n  for num in numbers:\n    summed_value += num\n  return summed_value but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def addNumbers(a, b):\n    return a + b\n\nx = 3\ny = 7\nresult = addNumbers(x, y)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Get a number from user and store it in a variable\nnum = int(input(\"Enter a positive number: \"))\n\n# Initialise a list to store prime factors\nfactors = []\n\n# We store the number in the variable i and update\n# the number whenever a prime factor is found\ni = num\n\n# If the number is odd, add 2 to the list of\n# prime factors\nif num % 2 == 1:\n    factors.append(2)\n\n# 2 is the only even prime number\nfor i in range(3, int(num**0.5) + 1, 2):\n\n    # If the number is divisible by i, it is\n    # a prime factor\n    while num % i == 0:\n        factors.append(i)\n\n        # Update number after finding prime factor\n        num //= i\n\n# If the input number was greater than 2\nif num > 2:\n    factors.append(num)\n\n# Print the prime factors\nprint(\"The prime factors of\", num, \"are:\")\nfor f in factors:\n    print(f) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicate_chars(string):\n    # Use a set to store values, as it only stores distinct values \n    unique_chars = set() \n    for char in string: \n        # Add the character to the set if it does not already exist \n        if char not in unique_chars: \n            unique_chars.add(char) \n    return unique_chars \n\nstring = \"Hello world\"\nprint(remove_duplicate_chars(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport lxml.html as lh\n\nurl = 'https://www.example.com/'\n\n#Create a handle, page, to handle the contents of the website\npage = requests.get(url)\n\n#Store the contents of the website under doc\ndoc = lh.fromstring(page.content)\n\n#Parse data that are stored between <tr>..</tr> of HTML\ntr_elements = doc.xpath('//tr')\n\n#Create empty list\ncol=[]\ni=0\n\n#For each row, store each first element (header) and an empty list\nfor t in tr_elements[0]:\n    i+=1\n    name=t.text_content()\n    print('%d:\"%s\"'%(i,name))\n    col.append((name,[]))\n\n#Since out first row is the header, data is stored on the second row onwards\nfor j in range(1,len(tr_elements)):\n    #T is our j'th row\n    T=tr_elements[j]\n    \n    #If row is not of size 10, the //tr data is not from our table \n    if len(T)!=3:\n        break\n    \n    #i is the index of our column\n    i=0\n    \n    #Iterate through each element of the row\n    for t in T.iterchildren():\n        data=t.text_content() \n        #Check if row is empty\n        if i>0:\n        #Convert any numerical value to integers\n            try:\n                data=int(data)\n            except:\n                pass\n        #Append the data to the empty list of the i'th column\n        col[i][1].append(data)\n        #Increment i for the next column\n        i+=1\n\n# Create a list of Cat Breeds\ncat_breeds = col[1][1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def unique_integers_generator(start, end):\n    i = start\n    used = set()\n    while i <= end:\n        if i not in used:\n            used.add(i)\n            yield i\n        i += 1\n\nfor i in unique_integers_generator(10, 20):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_smallest_number(lst):\n  smallest = lst[0]\n  for number in lst:\n    if number < smallest:\n      smallest = number\n  return smallest\n\nprint(find_smallest_number([12, 4, 16, 15]))\n# Output: 4 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import the requests library \nimport requests \n\n# Get the website's content \nr = requests.get('https://www.example.com/') \n\n# Get the webpage's HTML \nhtml = r.text\n\n# Print the HTML \nprint(html) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compute_mean(nums):\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum/len(nums)\n\na = [1, 3, 4, 8, 5]\nprint(\"Mean =\", compute_mean(a)) # Output: Mean = 4.4 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\ndata = [[5,2,4,1,3], [7,3,5,1,2], [9,5,4,2,3]]\nlabels = ['iris-setosa', 'iris-versicolor', 'iris-virginica']\n\ndf = pd.DataFrame(data, columns=['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'class'])\nX = df.iloc[:, :4]\ny = df['class']\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, \n    y,\n    train_size=0.8, \n    test_size=0.2, \n    random_state=0\n)\n\nclf = RandomForestClassifier(n_estimators=100, random_state=0, max_depth=2)\nclf.fit(X_train, y_train)\nprint(\"Accuracy of Random Forest classifier on training set:{:.2f}\".format(clf.score(X_test, y_test))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import psutil\n\n# terminate all running processes\nfor proc in psutil.process_iter():\n    proc.terminate() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insertion_sort(arr): \n    #Iterationg through the array \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        \n        while j >= 0 and arr[j] > key: \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \n    return arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def repeatString(string, num):\n    return string * num\n\nresult = repeatString(\"xyz\", 3)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_3(n1, n2, n3):\n    max = n1\n    if n2 > max:\n        max = n2\n    if n3 > max:\n        max = n3\n    \n    return max\n\n# Example\nprint(max_3(1, 2, 3))  # Output: 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -*- coding: utf-8 -*-\nfrom operator import attrgetter\nfrom pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType\nfrom pyangbind.lib.yangtypes import RestrictedClassType\nfrom pyangbind.lib.yangtypes import TypedListType\nfrom pyangbind.lib.yangtypes import YANGBool\nfrom pyangbind.lib.yangtypes import YANGListType\nfrom pyangbind.lib.yangtypes import YANGDynClass\nfrom pyangbind.lib.yangtypes import ReferenceType\nfrom pyangbind.lib.base import PybindBase\nfrom collections import OrderedDict\nfrom decimal import Decimal\nfrom bitarray import bitarray\nimport six\n\n# PY3 support of some PY2 keywords (needs improved)\nif six.PY3:\n    import builtins as __builtin__\n\n    long = int\nelif six.PY2:\n    import __builtin__\n\nfrom . import state\n\n\nclass sid(PybindBase):\n    \"\"\"\n  This class was auto-generated by the PythonClass plugin for PYANG\n  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subTLVs/subTLVs/prefix-sid/sid. Each member element of\n  the container is represented as a class variable - with a specific\n  YANG type.\n\n  YANG Description: Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment attached\nto an IGP prefix. An IGP-Prefix Segment is global (unless explicitly\nadvertised otherwise) within the SR/IGP domain.\n  \"\"\"\n    __slots__ = (\"_path_helper\", \"_extmethods\", \"__state\")\n\n    _yang_name = \"sid\"\n\n    _pybind_generated_by = \"container\"\n\n    def __init__(self, *args, **kwargs):\n\n        self._path_helper = False\n\n        self._extmethods = False\n        self.__state = YANGDynClass(\n            base=state.state,\n            is_container=\"container\",\n            yang_name=\"state\",\n            parent=self,\n            path_helper=self._path_helper,\n            extmethods=self._extmethods,\n            register_paths=True,\n            extensions=None,\n            namespace=\"http://openconfig.net/yang/network-instance\",\n            defining_module=\"openconfig-network-instance\",\n            yang_type=\"container\",\n            is_config=False,\n        )\n\n        load = kwargs.pop(\"load\", None)\n        if args:\n            if len(args) > 1:\n                raise TypeError(\"cannot create a YANG container with >1 argument\")\n            all_attr = True\n            for e in self._pyangbind_elements:\n                if not hasattr(args[0], e):\n                    all_attr = False\n                    break\n            if not all_attr:\n                raise ValueError(\"Supplied object did not have the correct attributes\")\n            for e in self._pyangbind_elements:\n                nobj = getattr(args[0], e)\n                if nobj._changed() is False:\n                    continue\n                setmethod = getattr(self, \"_set_%s\" % e)\n                if load is None:\n                    setmethod(getattr(args[0], e))\n                else:\n                    setmethod(getattr(args[0], e), load=load)\n\n    def _path(self):\n        if hasattr(self, \"_parent\"):\n            return self._parent._path() + [self._yang_name]\n        else:\n            return [\n                \"network-instances\",\n                \"network-instance\",\n                \"protocols\",\n                \"protocol\",\n                \"isis\",\n                \"levels\",\n                \"level\",\n                \"link-state-database\",\n                \"lsp\",\n                \"tlvs\",\n                \"tlv\",\n                \"extended-ipv4-reachability\",\n                \"prefixes\",\n                \"prefix\",\n                \"subTLVs\",\n                \"subTLVs\",\n                \"prefix-sid\",\n                \"sid\",\n            ]\n\n    def _get_state(self):\n        \"\"\"\n    Getter method for state, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/levels/level/link_state_database/lsp/tlvs/tlv/extended_ipv4_reachability/prefixes/prefix/subTLVs/subTLVs/prefix_sid/sid/state (container)\n\n    YANG Description: State parameters for Prefix-SID.\n    \"\"\"\n        return self.__state\n\n    def _set_state(self, v, load=False):\n        \"\"\"\n    Setter method for state, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/levels/level/link_state_database/lsp/tlvs/tlv/extended_ipv4_reachability/prefixes/prefix/subTLVs/subTLVs/prefix_sid/sid/state (container)\n    If this variable is read-only (config: false) in the\n    source YANG file, then _set_state is considered as a private\n    method. Backends looking to populate this variable should\n    do so via calling thisObj._set_state() directly.\n\n    YANG Description: State parameters for Prefix-SID.\n    \"\"\"\n        if hasattr(v, \"_utype\"):\n            v = v._utype(v)\n        try:\n            t = YANGDynClass(\n                v,\n                base=state.state,\n                is_container=\"container\",\n                yang_name=\"state\",\n                parent=self,\n                path_helper=self._path_helper,\n                extmethods=self._extmethods,\n                register_paths=True,\n                extensions=None,\n                namespace=\"http://openconfig.net/yang/network-instance\",\n                defining_module=\"openconfig-network-instance\",\n                yang_type=\"container\",\n                is_config=False,\n            )\n        except (TypeError, ValueError):\n            raise ValueError(\n                {\n                    \"error-string\": \"\"\"state must be of a type compatible with container\"\"\",\n                    \"defined-type\": \"container\",\n                    \"generated-type\": \"\"\"YANGDynClass(base=state.state, is_container='container', yang_name=\"state\", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)\"\"\",\n                }\n            )\n\n        self.__state = t\n        if hasattr(self, \"_set\"):\n            self._set()\n\n    def _unset_state(self):\n        self.__state = YANGDynClass(\n            base=state.state,\n            is_container=\"container\",\n            yang_name=\"state\",\n            parent=self,\n            path_helper=self._path_helper,\n            extmethods=self._extmethods,\n            register_paths=True,\n            extensions=None,\n            namespace=\"http://openconfig.net/yang/network-instance\",\n            defining_module=\"openconfig-network-instance\",\n            yang_type=\"container\",\n            is_config=False,\n        )\n\n    state = __builtin__.property(_get_state)\n\n    _pyangbind_elements = OrderedDict([(\"state\", state)])\n\n\nfrom . import state\n\n\nclass sid(PybindBase):\n    \"\"\"\n  This class was auto-generated by the PythonClass plugin for PYANG\n  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subTLVs/subTLVs/prefix-sid/sid. Each member element of\n  the container is represented as a class variable - with a specific\n  YANG type.\n\n  YANG Description: Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment attached\nto an IGP prefix. An IGP-Prefix Segment is global (unless explicitly\nadvertised otherwise) within the SR/IGP domain.\n  \"\"\"\n    __slots__ = (\"_path_helper\", \"_extmethods\", \"__state\")\n\n    _yang_name = \"sid\"\n\n    _pybind_generated_by = \"container\"\n\n    def __init__(self, *args, **kwargs):\n\n        self._path_helper = False\n\n        self._extmethods = False\n        self.__state = YANGDynClass(\n            base=state.state,\n            is_container=\"container\",\n            yang_name=\"state\",\n            parent=self,\n            path_helper=self._path_helper,\n            extmethods=self._extmethods,\n            register_paths=True,\n            extensions=None,\n            namespace=\"http://openconfig.net/yang/network-instance\",\n            defining_module=\"openconfig-network-instance\",\n            yang_type=\"container\",\n            is_config=False,\n        )\n\n        load = kwargs.pop(\"load\", None)\n        if args:\n            if len(args) > 1:\n                raise TypeError(\"cannot create a YANG container with >1 argument\")\n            all_attr = True\n            for e in self._pyangbind_elements:\n                if not hasattr(args[0], e):\n                    all_attr = False\n                    break\n            if not all_attr:\n                raise ValueError(\"Supplied object did not have the correct attributes\")\n            for e in self._pyangbind_elements:\n                nobj = getattr(args[0], e)\n                if nobj._changed() is False:\n                    continue\n                setmethod = getattr(self, \"_set_%s\" % e)\n                if load is None:\n                    setmethod(getattr(args[0], e))\n                else:\n                    setmethod(getattr(args[0], e), load=load)\n\n    def _path(self):\n        if hasattr(self, \"_parent\"):\n            return self._parent._path() + [self._yang_name]\n        else:\n            return [\n                \"network-instances\",\n                \"network-instance\",\n                \"protocols\",\n                \"protocol\",\n                \"isis\",\n                \"levels\",\n                \"level\",\n                \"link-state-database\",\n                \"lsp\",\n                \"tlvs\",\n                \"tlv\",\n                \"extended-ipv4-reachability\",\n                \"prefixes\",\n                \"prefix\",\n                \"subTLVs\",\n                \"subTLVs\",\n                \"prefix-sid\",\n                \"sid\",\n            ]\n\n    def _get_state(self):\n        \"\"\"\n    Getter method for state, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/levels/level/link_state_database/lsp/tlvs/tlv/extended_ipv4_reachability/prefixes/prefix/subTLVs/subTLVs/prefix_sid/sid/state (container)\n\n    YANG Description: State parameters for Prefix-SID.\n    \"\"\"\n        return self.__state\n\n    def _set_state(self, v, load=False):\n        \"\"\"\n    Setter method for state, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/levels/level/link_state_database/lsp/tlvs/tlv/extended_ipv4_reachability/prefixes/prefix/subTLVs/subTLVs/prefix_sid/sid/state (container)\n    If this variable is read-only (config: false) in the\n    source YANG file, then _set_state is considered as a private\n    method. Backends looking to populate this variable should\n    do so via calling thisObj._set_state() directly.\n\n    YANG Description: State parameters for Prefix-SID.\n    \"\"\"\n        if hasattr(v, \"_utype\"):\n            v = v._utype(v)\n        try:\n            t = YANGDynClass(\n                v,\n                base=state.state,\n                is_container=\"container\",\n                yang_name=\"state\",\n                parent=self,\n                path_helper=self._path_helper,\n                extmethods=self._extmethods,\n                register_paths=True,\n                extensions=None,\n                namespace=\"http://openconfig.net/yang/network-instance\",\n                defining_module=\"openconfig-network-instance\",\n                yang_type=\"container\",\n                is_config=False,\n            )\n        except (TypeError, ValueError):\n            raise ValueError(\n                {\n                    \"error-string\": \"\"\"state must be of a type compatible with container\"\"\",\n                    \"defined-type\": \"container\",\n                    \"generated-type\": \"\"\"YANGDynClass(base=state.state, is_container='container', yang_name=\"state\", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)\"\"\",\n                }\n            )\n\n        self.__state = t\n        if hasattr(self, \"_set\"):\n            self._set()\n\n    def _unset_state(self):\n        self.__state = YANGDynClass(\n            base=state.state,\n            is_container=\"container\",\n            yang_name=\"state\",\n            parent=self,\n            path_helper=self._path_helper,\n            extmethods=self._extmethods,\n            register_paths=True,\n            extensions=None,\n            namespace=\"http://openconfig.net/yang/network-instance\",\n            defining_module=\"openconfig-network-instance\",\n            yang_type=\"container\",\n            is_config=False,\n        )\n\n    state = __builtin__.property(_get_state)\n\n    _pyangbind_elements = OrderedDict([(\"state\", state)])\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize_ints(nums): \n    left = 0\n    right = len(nums) - 1\n\n    while left < right: \n        min_num = min(nums[left], nums[right]) \n        nums[right] = nums[left] = min_num + \n                                 nums[left] - nums[right] \n        left += 1\n        right -= 1\n    return nums\n\nnums = [2, 4, 6, 10, 12]\nprint(optimize_ints(nums)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pdfkit\n\ndef generate_pdf(url):\n filename = url.rsplit('/', 1)[-1] + '.pdf'\n pdfkit.from_url(url, filename)\n\nif __name__ == '__main__':\n url = input('Enter a URL: ')\n generate_pdf(url) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def permutations(s): \n if len(s) == 0: \n  return [] \n if len(s) == 1: \n  return [s] \n l = [] # empty list that will store current permutation \n # Iterate the input(s) and calculate the permutation \n for i in range(len(s)): \n   m = s[i] \n   rem = s[:i] + s[i+1:] \n   for p in permutations(rem): \n    l.append([m] + p) \n return l but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n): \n    #base case\n    if n == 0: \n        return 1 \n  \n    # recursive case\n    return n * factorial(n-1) \n  \n# Driver code \nnum = 7\nprint(\"The factorial of\", num, \"is\",factorial(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(10,0,-1):\n  print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_substring(string, old_substring, new_substring):\n return string.replace(old_substring, new_substring)\n\nresult = replace_substring(\"Hello World, Hello\", \"Hello\", \"Hi\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = \"This is a test string\"\n\nlist = string.split(\" \")\n\nprint(list) # Output: ['This', 'is', 'a', 'test', 'string'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_paths(grid):\n    # base case: if the grid is empty\n    if not grid or not grid[0]:\n        return []\n\n    # number of rows\n    rows = len(grid) \n    # number of columns\n    cols = len(grid[0]) \n\n    # initialize the result list\n    paths = []\n\n    # function to recursively generate all the paths\n    def generate_paths(row, col, path):\n        # if the row and col indices are out of bounds\n        if row < 0 or col < 0 or row >= rows or col >= cols:\n            return\n        # if the current position is a wall\n        if grid[row][col] == '#':\n            return\n        # add the current position to the path\n        path.append(grid[row][col])\n        # check if the current position is the bottom right corner\n        if row == rows-1 and col == cols-1:\n            paths.append(path[:])\n            return\n        # recursively generate paths from the four neighbors\n        generate_paths(row+1, col, path)\n        generate_paths(row-1, col, path)\n        generate_paths(row, col+1, path)\n        generate_paths(row, col-1, path)\n        # remove the current position from the path\n        path.pop()\n\n    # start generating paths from the top left corner\n    generate_paths(0, 0, [])\n    return paths but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n \ndef tokenizeText(text):\n    tokens = re.findall(r'\\w+', text)\n    return tokens but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_values(data):\n    \"\"\"\n    Gets the values from a dictionary.\n    \n    Args:\n        data (dict): The dictionary from which to get the values\n        \n    Returns:\n        values (list): A list of the values from the dictionary\n    \"\"\"\n    values = []\n    for value in data.values():\n        values.append(value)\n    return values\n\nif __name__ == \"__main__\":\n    data = {\n        \"key1\": \"value1\",\n        \"key2\": \"value2\",\n        \"key3\": \"value3\"\n    }\n    print(get_values(data)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_closest_value(list_values, target_value):\n closest_value = None\n min_diff = float('inf')\n for value in list_values:\n diff = abs(target_value - value)\n if diff < min_diff:\n min_diff = diff\n closest_value = value\n return closest_value\n\nprint(find_closest_value(list_values, target_value)) # Output: 4 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Define a method to add two complex numbers\ndef add_complex_numbers(c1, c2):\n  real_sum = c1.real + c2.real\n  img_sum = c1.imag + c2.imag\n  return complex(real_sum, img_sum)\n\n#Take user input\nc1_real = int(input('Enter the real part of first complex number: '))\nc1_img = int(input('Enter the imaginary part of first complex number: '))\n\nc2_real = int(input('Enter the real part of second complex number: '))\nc2_img = int(input('Enter the imaginary part of second complex number: '))\n\n#Define complex numbers\nc1 = complex(c1_real, c1_img)\nc2 = complex(c2_real, c2_img)\n\n#Call the method to add complex numbers\nsum_of_complex_numbers = add_complex_numbers(c1, c2)\n\n#Print the sum\nprint('Sum of complex numbers: ', sum_of_complex_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_digits(num):\n    total = 0\n    while num != 0:\n        total += num % 10\n        num //= 10\n    return total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\nimport os, sys, time, socket, traceback\n\nlog_f = os.fdopen(os.dup(sys.stdout.fileno()), \"aw\")\npid = None\n\ndef reopenlog(log_file):\n    global log_f\n    if log_f:\n        log_f.close()\n    if log_file:\n        log_f = open(log_file, \"aw\")\n    else:\n        log_f = os.fdopen(os.dup(sys.stdout.fileno()), \"aw\")\n\ndef log(txt):\n    global log_f, pid\n    if not pid:\n        pid = os.getpid()\n    t = time.strftime(\"%Y%m%dT%H:%M:%SZ\", time.gmtime())\n    print >>log_f, \"%s [%d] %s\" % (t, pid, txt)\n    log_f.flush()\n\n# Functions to construct SMAPI return types #################################\n\nunit = [ \"Success\", \"Unit\" ]\n\n# Throw this to return an SR_BACKEND_FAILURE to the caller ##################\n\nclass BackendError(Exception):\n    def __init__(self, code, params):\n        self.code = code\n        self.params = params\n    def __str__(self):\n        return \"BackendError(%s, %s)\" % (self.code, \", \".join(self.params))\n\nclass Vdi_does_not_exist(Exception):\n    def __init__(self, vdi):\n        self.vdi = vdi\n    def __str__(self):\n        return \"Vdi_does_not_exist(%s)\" % self.vdi\n\ndef vdi(vdi_info):\n#    return ['Success', ['Vdi', {'vdi': location, 'virtual_size': str(virtual_size) }]]\n    return ['Success', ['Vdi', vdi_info]]\n\ndef vdis(vis):\n    return ['Success', ['Vdis', vis]]\n\ndef params(params):\n    return ['Success', ['Params', params ]]\n\ndef value(result):\n    return { \"Status\": \"Success\", \"Value\": result }\n\ndef backend_error(code, params):\n    return [ \"Failure\", [ \"Backend_error\", code, params ] ]\n\ndef internal_error(txt):\n    return [ \"Failure\", \"Internal_error\", txt ]\n\ndef vdi_does_not_exist():\n    return [ \"Failure\", \"Vdi_does_not_exist\" ]\n\n# Type-checking helper functions ############################################\n\nvdi_info_types = {\n    \"vdi\": type(\"\"), \n    \"name_label\": type(\"\"),\n    \"name_description\": type(\"\"),\n    \"ty\": type(\"\"),\n    \"metadata_of_pool\": type(\"\"),\n    \"is_a_snapshot\": type(True),\n    \"snapshot_time\": type(\"\"),\n    \"snapshot_of\": type(\"\"),\n    \"read_only\": type(True),\n    \"cbt_enabled\": type(True),\n    \"virtual_size\": type(\"\"),\n    \"physical_utilisation\": type(\"\")\n}\n\ndef make_vdi_info(v):\n    global vdi_info_types\n    for k in vdi_info_types.keys():\n        t = vdi_info_types[k]\n        if t == type(\"\"):\n            v[k] = str(v[k])\n        elif t == type(True):\n            v[k] = str(v[k]).lower() == \"true\"\n        else:\n            raise (BackendError(\"make_vdi_info unknown type\", [ str(t) ]))\n    return v\n\ndef vdi_info(v):\n    global vdi_info_types\n    for k in vdi_info_types.keys():\n        if k not in v:\n            raise (BackendError(\"vdi_info missing key\", [ k, repr(v) ]))\n        t = vdi_info_types[k]\n        if type(v[k]) <> t:\n            raise (BackendError(\"vdi_info key has wrong type\", [ k, str(t), str(type(v[k])) ]))\n    return v\n            \ndef expect_none(x):\n    if x <> None:\n        raise (BackendError(\"type error\", [ \"None\", repr(x) ]))\n\ndef expect_long(x):\n    if type(x) <> type(0L):\n        raise (BackendError(\"type error\", [ \"long int\", repr(x) ]))\n\ndef expect_string(x):\n    if type(x) <> type(\"\"):\n        raise (BackendError(\"type error\", [ \"string\", repr(x) ]))\n\n# Well-known feature flags understood by xapi ##############################\n\nfeature_sr_probe = \"SR_PROBE\"\nfeature_sr_update = \"SR_UPDATE\"\nfeature_sr_supports_local_caching = \"SR_SUPPORTS_LOCAL_CACHING\"\nfeature_vdi_create = \"VDI_CREATE\"\nfeature_vdi_destroy = \"VDI_DESTROY\"\nfeature_vdi_attach = \"VDI_ATTACH\"\nfeature_vdi_detach = \"VDI_DETACH\"\nfeature_vdi_resize = \"VDI_RESIZE\"\nfeature_vdi_resize_online = \"VDI_RESIZE_ONLINE\"\nfeature_vdi_clone = \"VDI_CLONE\"\nfeature_vdi_snapshot = \"VDI_SNAPSHOT\"\nfeature_vdi_activate = \"VDI_ACTIVATE\"\nfeature_vdi_deactivate = \"VDI_DEACTIVATE\"\nfeature_vdi_update = \"VDI_UPDATE\"\nfeature_vdi_introduce = \"VDI_INTRODUCE\"\nfeature_vdi_generate_config = \"VDI_GENERATE_CONFIG\"\nfeature_vdi_reset_on_boot = \"VDI_RESET_ON_BOOT\"\n\n# Unmarshals arguments and marshals results (including exceptions) ##########\n\nclass Marshall:\n    def __init__(self, x):\n        self.x = x\n\n    def query(self, args):\n        result = self.x.query()\n        return value(result)\n\n    def sr_attach(self, args):\n        result = self.x.sr_attach(args[\"task\"], args[\"sr\"], args[\"device_config\"])\n        expect_none(result)\n        return value(unit)\n    def sr_detach(self, args):\n        result = self.x.sr_detach(args[\"task\"], args[\"sr\"])\n        expect_none(result)\n        return value(unit)\n    def sr_destroy(self, args):\n        result = self.x.sr_destroy(args[\"task\"], args[\"sr\"])\n        expect_none(result)\n        return value(unit)     \n    def sr_scan(self, args):\n        vis = self.x.sr_scan(args[\"task\"], args[\"sr\"])\n        result = map(lambda vi: vdi_info(vi), vis)\n        return value(vdis(result))\n\n    def vdi_create(self, args):\n        vi = self.x.vdi_create(args[\"task\"], args[\"sr\"], vdi_info(args[\"vdi_info\"]), args[\"params\"])\n        return value(vdi(vdi_info(vi)))\n    def vdi_destroy(self, args):\n        result = self.x.vdi_destroy(args[\"task\"], args[\"sr\"], args[\"vdi\"])\n        expect_none(result)\n        return value(unit)\n\n    def vdi_attach(self, args):\n        result = self.x.vdi_attach(args[\"task\"], args[\"dp\"], args[\"sr\"], args[\"vdi\"], args[\"read_write\"])\n        expect_string(result)\n        return value(params(result))\n    def vdi_activate(self, args):\n        result = self.x.vdi_activate(args[\"task\"], args[\"dp\"], args[\"sr\"], args[\"vdi\"])\n        expect_none(result)\n        return value(unit)\n    def vdi_deactivate(self, args):\n        result = self.x.vdi_deactivate(args[\"task\"], args[\"dp\"], args[\"sr\"], args[\"vdi\"])\n        expect_none(result)\n        return value(unit)\n    def vdi_detach(self, args):\n        result = self.x.vdi_detach(args[\"task\"], args[\"dp\"], args[\"sr\"], args[\"vdi\"])\n        expect_none(result)\n        return value(unit)\n\n\n    def _dispatch(self, method, params):\n        try:\n            log(\"method = %s params = %s\" % (method, repr(params)))\n            args = params[0]\n            if method == \"query\":\n                return self.query(args)\n            elif method == \"SR.attach\":\n                return self.sr_attach(args)\n            elif method == \"SR.detach\":\n                return self.sr_detach(args)\n            elif method == \"SR.scan\":\n                return self.sr_scan(args)\n            elif method == \"VDI.create\":\n                return self.vdi_create(args)\n            elif method == \"VDI.destroy\":\n                return self.vdi_destroy(args)\n            elif method == \"VDI.attach\":\n                return self.vdi_attach(args)\n            elif method == \"VDI.activate\":\n                return self.vdi_activate(args)\n            elif method == \"VDI.deactivate\":\n                return self.vdi_deactivate(args)\n            elif method == \"VDI.detach\":\n                return self.vdi_detach(args)\n        except BackendError, e:\n            log(\"caught %s\" % e)\n            traceback.print_exc()\n            return value(backend_error(e.code, e.params))\n        except Vdi_does_not_exist, e:\n            log(\"caught %s\" %e)\n            return value(vdi_does_not_exist())\n        except Exception, e:\n            log(\"caught %s\" % e)\n            traceback.print_exc()\n            return value(internal_error(str(e)))\n\n# Helper function to daemonise ##############################################\ndef daemonize():\n    def fork():\n        try:\n            if os.fork() > 0:\n                # parent\n                sys.exit(0)\n        except Exception, e:\n            print >>sys.stderr, \"fork() failed: %s\" % e\n            traceback.print_exc()\n            raise\n    fork()\n    os.umask(0)\n    os.chdir(\"/\")\n    os.setsid()\n    fork()\n    devnull = open(\"/dev/null\", \"r\")\n    os.dup2(devnull.fileno(), sys.stdin.fileno())\n    devnull = open(\"/dev/null\", \"aw\")\n    os.dup2(devnull.fileno(), sys.stdout.fileno())\n    os.dup2(devnull.fileno(), sys.stderr.fileno())\n\nfrom SimpleXMLRPCServer import SimpleXMLRPCServer, SimpleXMLRPCRequestHandler\n\n# Server XMLRPC from any HTTP POST path #####################################\n\nclass RequestHandler(SimpleXMLRPCRequestHandler):\n    rpc_paths = []\n\n# SimpleXMLRPCServer with SO_REUSEADDR ######################################\n\nclass Server(SimpleXMLRPCServer):\n    def __init__(self, ip, port):\n        SimpleXMLRPCServer.__init__(self, (ip, port), requestHandler=RequestHandler)\n    def server_bind(self):\n        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        SimpleXMLRPCServer.server_bind(self)\n\n# This is a hack to patch slow socket.getfqdn calls that\n# BaseHTTPServer (and its subclasses) make.\n# See: http://bugs.python.org/issue6085\n# See: http://www.answermysearches.com/xmlrpc-server-slow-in-python-how-to-fix/2140/\nimport BaseHTTPServer\n\ndef _bare_address_string(self):\n    host, port = self.client_address[:2]\n    return '%s' % host\n\nBaseHTTPServer.BaseHTTPRequestHandler.address_string = \\\n        _bare_address_string\n\n# Given an implementation, serve requests forever ###########################\n\ndef start(impl, ip, port, daemon):\n    if daemon:\n        log(\"daemonising\")\n        daemonize()\n    log(\"will listen on %s:%d\" % (ip, port))\n    server = Server(ip, port)\n    log(\"server registered on %s:%d\" % (ip, port))\n    server.register_introspection_functions() # for debugging\n    server.register_instance(Marshall(impl))\n    log(\"serving requests forever\")\n    server.serve_forever()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_array(array):\n    sum = 0 \n    for i in range(len(array)):\n        sum += array[i]\n    return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def average_every_two_numbers(arr):\n    result = []\n    for i in range(0, len(arr), 2):\n        if i+1 < len(arr):\n            result.append( (arr[i] + arr[i+1])/2.0)\n        else:\n            result.append(arr[i])\n    return result\n\nprint(average_every_two_numbers([1, 3, 5, 7, 9])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_max(list): \n  \n  # Initialize the maximum\n  max_v = list[0]\n\n  # Compute the maximum\n  for i in range(1, len(list)):\n    if list[i] > max_v:\n      max_v = list[i]\n\n  # Return the maximum\n  return max_v but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: n = 20\n\ndef calculate_sum_of_primes(n):\n    result = 0\n    if n >= 2:\n        primes = [2]\n        for i in range(3, n + 1, 2):\n            for j in primes:\n                if i % j == 0:\n                    break\n            else:\n                primes.append(i)\n        result = sum(primes)\n    return result\n\nprint(calculate_sum_of_primes(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_search(arr, x):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = left + (right - left)//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import socket\n\nHOST = '127.0.0.1'  # The server's hostname or IP address\nPORT = 65432        # The port used by the server\n\nwith socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n    s.connect((HOST, PORT))\n    s.sendall(b'Hello, world')\n    data = s.recv(1024)\n\nprint('Received', repr(data)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class LinkedListNode:\n\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\ndef remove_duplicates(node):\n    if node is None:\n        return node\n\n    seen_data = {node.data: True}\n\n    curr_node = node.next\n    prev_node = node\n\n    while curr_node is not None:\n        if curr_node.data in seen_data:\n            # remove the node\n            prev_node.next = curr_node.next\n            curr_node = prev_node.next\n        else:\n            seen_data[curr_node.data] = True\n            curr_node = curr_node.next\n            prev_node = prev_node.next\n\n    return node but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Take the list of numbers\nnots = [1, 5, -3, 0, -7]\n\n# Sort the list\nnots.sort()\n\n# Set up variables to store the two closest values\nclosest1 = 0 \nclosest2 = 0\n\n# Iterate through the list\nfor val in nots:\n # Check if the absolute value of the current number \n # is closest to zero\n if abs(val) < abs(closest1):\n closest2 = closest1 \n closest1 = val\n\n# Print the sum of the two closest values\nprint(closest1 + closest2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Convert the given binary string to an integer number\nbinary_string = \"1101\"\ndecimal_number = int(binary_string, 2)\n\n# Print the result\nprint(decimal_number) # 13 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_by_length_descending(list_of_strings):\n    list_of_strings.sort(key=len, reverse=True)\n    return list_of_strings\n\nresult = sort_by_length_descending(['Math', 'English', 'Computer Science', 'Physics'])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.model_selection import KFold\n \n# Define the 5 fold cross-validation\nkfold = KFold(n_splits=5, shuffle=True, random_state=1)\n \n# Generate the k-folds\nsplits = kfold.split(X)\n \nfor train_idx, val_idx in splits:\n    # Generate training and validation sets\n    X_train, y_train = X[train_idx], y[train_idx]\n    X_val, y_val = X[val_idx], y[val_idx]\n \n    # Initialize the model\n    model = KNeighborsClassifier()\n \n    # Fit the model on the training set\n    model.fit(X_train, y_train)\n    \n    # Score the model on the validation set\n    score = model.score(X_val, y_val) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndata = [\n  {\n    \"id\": 5,\n    \"name\": \"John\"\n  },\n  {\n    \"id\": 7,\n    \"name\": \"Jack\"\n  },\n  {\n    \"id\": 9,\n    \"name\": \"James\"\n  }\n]\n\ndata_json = json.dumps(data, indent=4)\nprint(data_json) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_date():\n\tfrom datetime import datetime\n\treturn datetime.now() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # PyDIP 3.0, Python bindings for DIPlib 3.0\n# This file contains functionality to download bioformats\n#\n# (c)2020, Wouter Caarls\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport sys, os, urllib.request\n\ndef progress(blocks, bs, size):\n    barsize = 52\n    pct = blocks*bs / float(size)\n    bardone = int(pct*barsize)\n    print('[{0}{1}] {2: >3}%'.format('=' * bardone, '.'*(barsize-bardone), int(pct*100)), end='\\r', flush=True)\n\nif __name__ == '__main__':\n    if 'download_bioformats' in sys.argv:\n        url = 'https://downloads.openmicroscopy.org/bio-formats/6.5.0/artifacts/bioformats_package.jar'\n        filename = os.path.join(os.path.dirname(__file__), 'bioformats_package.jar')\n        print('Retrieving', url)\n        urllib.request.urlretrieve(url, filename, progress)\n        print()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import smtplib \nimport csv \n\nACCOUNT_NUMBER = 123456\nNOTIFICATION_THRESHOLD = 1000\nRECIPIENT_EMAIL = \"myemail@example.com\" \nSENDER_EMAIL = \"noreply@example.com\"\nSMTP_SERVER_HOST = \"smtp.example.com\"\nSMTP_SERVER_PORT = 587\n\ndef check_account_balance(account_number, notification_threshold):\n    # Load the CSV file with account information\n    with open(\"data.csv\") as csv_file:\n        reader = csv.reader(csv_file)\n        for row in reader:\n            if row[0] == str(account_number):\n                if float(row[3]) < notification_threshold:\n                    return True \n    return False \n\ndef send_notification(recipient_email):\n    # Create the message\n    message = f\"Subject: Balance Check Alert\\n\\nYour account balance is below {NOTIFICATION_THRESHOLD} dollars!\"\n\n    # Connect to the SMTP server\n    with smtplib.SMTP(SMTP_SERVER_HOST, SMTP_SERVER_PORT) as server:\n        # Send the message\n        server.sendmail(SENDER_EMAIL, recipient_email, message)\n        print(\"Notification sent.\")\n\nif __name__ == \"__main__\":\n    # Check the account balance\n    if check_account_balance(ACCOUNT_NUMBER, NOTIFICATION_THRESHOLD):\n        # Send the notification\n        send_notification(RECIPIENT_EMAIL)\n    else:\n        print(\"Account balance is not below the notification threshold.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: employees = {\n 'John Smith': {\n 'age': 30,\n 'salary': 5000\n },\n 'Jane Doe': {\n 'age': 28,\n 'salary': 8000\n },\n 'Jack Black': {\n 'age': 25,\n 'salary': 3000 \n }\n}\nemployees_list = [\n {'name': 'John Smith', 'age': 30, 'salary': 5000},\n {'name': 'Jane Doe', 'age': 28, 'salary': 8000},\n {'name': 'Jack Black', 'age': 25, 'salary': 3000}\n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insertion_sort(list):\n    for i in range(1, len(list)):\n        key = list[i]\n        j = i - 1\n        while j >= 0 and list[j] > key:\n            list[j + 1] = list[j]\n            j = j - 1\n        list[j + 1] = key but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_all_substrings(input_string): \n\tlength = len(input_string) \n\treturn [input_string[i:j+1] for i in range(length)  \n\t\t\t\t\t\t\tfor j in range(i,length)] \n\noutput = get_all_substrings('Python') \nprint(output) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/bin/bash\n\n# set up your environment variables\n# -------------------------------\n# Defining environment variables\n\n# my_name\nexport my_name=\"John Doe\"\n\n# my_age\nexport my_age=\"32\"\n\n# my_code_editor\nexport my_code_editor=\"vim\"\n\n# my_python_version\nexport my_python_version=\"3.7\"\n\n# my_favourite_language\nexport my_favourite_language=\"java\"\n\n# my_git_username\nexport my_git_username=\"johndoe123\"\n\n# my_github_url\nexport my_github_url=\"https://github.com/johndoe123\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_hex_numbers(n): \n    hex_numbers = [format(random.randint(0, 16**8 - 1), 'x') for _ in range(n)] \n    return hex_numbers\n\nprint(generate_hex_numbers(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def parse_str(str, separator):\n    strList = str.split(separator) \n    return strList but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: x = int(input('Enter the value of x: '))\ny = int(input('Enter the value of y: '))\n\nz = (x + y)**2 + (2 * x) - (3 * y)\n\nprint(\"The value of z is:\", z) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def evaluate_polynomial(polynomial, x):\n    terms = polynomial.split(\"+\")\n    result = 0\n    for term in terms:\n        factor, exponent = term.split(\"x^\")\n        result += int(factor)*(x**int(exponent))\n    return result\n\npolynomial = \"4x^3 + 7x + 2\"\nx = 6\nprint(evaluate_polynomial(polynomial, x)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(list):\n    max_num = list[0]\n    for i in list:\n        if i > max_num: \n            max_num = i\n    return max_num but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longestCommonPrefix(input_array): \n    if len(input_array) == 0: \n        return \"\"  \n    if len(input_array) == 1: \n        return input_array[0]\n  \n    # sort the array    \n    input_array.sort()  \n  \n    # take first and last element from the \n    # sorted array and find the common prefix \n    # among them \n    endString = input_array[0] \n    startString = input_array[len(input_array)-1] \n  \n    # initialize i for loop \n    i = 0\n    resultString = \"\" \n    while i < len(endString) and i < len(startString): \n        if endString[i] != startString[i]: \n            break\n        resultString = resultString + endString[i] \n        i = i+1\n  \n    return resultString\n\ninput_array = [\"programming\", \"prog\", \"prompt\"]\nprint(\"The longest common prefix is:\", longestCommonPrefix(input_array)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(strings):\n    for string in strings:\n        reversed_string = string[::-1]\n        if string == reversed_string:\n            return True\n    return False\n\nstrings = ['abc', 'bob', 'kayak']\nout = is_palindrome(strings)\nprint(out) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_longest_words(words):\n    max_length = 0\n    longest_words = []\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n            longest_words.clear()\n            longest_words.append(word)\n        elif len(word) == max_length:\n            longest_words.append(word)\n    return longest_words\n\nresult = get_longest_words([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n a = 0\n b = 1\n if n < 0: \n print(\"Incorrect input\") \n elif n == 0: \n return a \n elif n == 1: \n return b \n else: \n for i in range(2,n+1): \n c = a + b \n a = b \n b = c \n return b \n\ndef printFibonacci(n): \n for i in range(n+1):\n print(Fibonacci(i),end=\" \") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_numbers(a, b):\n   \"\"\"\n   This function takes two numbers as arguments and\n   returns their sum.\n   \"\"\"\n\n   return a + b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nrandom_int = random.randint(1, 10)\nprint(random_int) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_array(arr):\n    n = len(arr) \n\nfor i in range(n // 2): \n\tarr[i], arr[n - i - 1] = arr[n - i - 1], arr[i] \n\nreturn arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\n__author__ = 'Adam R. Smith'\n__license__ = 'Apache 2.0'\n\nimport collections\n\nclass DotNotationGetItem(object):\n    \"\"\" Drive the behavior for DotList and DotDict lookups by dot notation, JSON-style. \"\"\"\n\n    def _convert(self, val):\n        \"\"\" Convert the type if necessary and return if a conversion happened. \"\"\"\n        if isinstance(val, dict) and not isinstance(val, DotDict):\n            return DotDict(val), True\n        elif isinstance(val, list) and not isinstance(val, DotList):\n            return DotList(val), True\n\n        return val, False\n\n    def __getitem__(self, key):\n        val = super(DotNotationGetItem, self).__getitem__(key)\n        val, converted = self._convert(val)\n        if converted: self[key] = val\n\n        return val\n\nclass DotList(DotNotationGetItem, list):\n    \"\"\" Partner class for DotDict; see that for docs. Both are needed to fully support JSON/YAML blocks. \"\"\"\n\n    #def DotListIterator(list.)\n\n    def __iter__(self):\n        \"\"\" Monkey-patch the \"next\" iterator method to return modified versions. This will be slow. \"\"\"\n        #it = super(DotList, self).__iter__()\n        #it_next = getattr(it, 'next')\n        #setattr(it, 'next', lambda: it_next(it))\n        #return it\n        for val in super(DotList, self).__iter__():\n            val, converted = self._convert(val)\n            yield val\n\nclass DotDict(DotNotationGetItem, dict):\n    \"\"\"\n    Subclass of dict that will recursively look up attributes with dot notation.\n    This is primarily for working with JSON-style data in a cleaner way like javascript.\n    Note that this will instantiate a number of child DotDicts when you first access attributes;\n    do not use in performance-critical parts of your code.\n    \"\"\"\n\n    def __getattr__(self, key):\n        \"\"\" Make attempts to lookup by nonexistent attributes also attempt key lookups. \"\"\"\n        try:\n            val = self.__getitem__(key)\n        except KeyError:\n            raise AttributeError(key)\n\n        return val\n\n    def copy(self):\n        return DotDict(dict.copy(self))\n\n    @classmethod\n    def fromkeys(cls, seq, value=None):\n        return DotDict(dict.fromkeys(seq, value))\n\nclass DictModifier(DotDict):\n    \"\"\"\n    Subclass of DotDict that allows the sparse overriding of dict values.\n    \"\"\"\n    def __init__(self, base, data=None):\n        # base should be a DotDict, raise TypeError exception if not\n        if not isinstance(base, DotDict):\n            raise TypeError(\"Base must be of type DotDict\")\n        self.base = base\n\n        if data is not None:\n            self.update(data)\n\n    def __getattr__(self, key):\n        try:\n            return DotDict.__getattr__(self, key)\n        except AttributeError, ae:\n            # Delegate to base\n            return getattr(self.base, key)\n\n    def __getitem__(self, key):\n        try:\n            return DotDict.__getitem__(self, key)\n        except KeyError, ke:\n            # Delegate to base\n            return getattr(self.base, key)\n\n# dict_merge from: http://appdelegateinc.com/blog/2011/01/12/merge-deeply-nested-dicts-in-python/\n\ndef quacks_like_dict(object):\n    \"\"\"Check if object is dict-like\"\"\"\n    return isinstance(object, collections.Mapping)\n\ndef dict_merge(a, b):\n    \"\"\"Merge two deep dicts non-destructively\n\n    Uses a stack to avoid maximum recursion depth exceptions\n\n    >>> a = {'a': 1, 'b': {1: 1, 2: 2}, 'd': 6}\n    >>> b = {'c': 3, 'b': {2: 7}, 'd': {'z': [1, 2, 3]}}\n    >>> c = merge(a, b)\n    >>> from pprint import pprint; pprint(c)\n    {'a': 1, 'b': {1: 1, 2: 7}, 'c': 3, 'd': {'z': [1, 2, 3]}}\n    \"\"\"\n    assert quacks_like_dict(a), quacks_like_dict(b)\n    dst = a.copy()\n\n    stack = [(dst, b)]\n    while stack:\n        current_dst, current_src = stack.pop()\n        for key in current_src:\n            if key not in current_dst:\n                current_dst[key] = current_src[key]\n            else:\n                if quacks_like_dict(current_src[key]) and quacks_like_dict(current_dst[key]) :\n                    stack.append((current_dst[key], current_src[key]))\n                else:\n                    current_dst[key] = current_src[key]\n    return dst\n\ndef named_any(name):\n    \"\"\"\n    Retrieve a Python object by its fully qualified name from the global Python\n    module namespace.  The first part of the name, that describes a module,\n    will be discovered and imported.  Each subsequent part of the name is\n    treated as the name of an attribute of the object specified by all of the\n    name which came before it.\n    @param name: The name of the object to return.\n    @return: the Python object identified by 'name'.\n    \"\"\"\n    assert name, 'Empty module name'\n    names = name.split('.')\n\n    topLevelPackage = None\n    moduleNames = names[:]\n    while not topLevelPackage:\n        if moduleNames:\n            trialname = '.'.join(moduleNames)\n            try:\n                topLevelPackage = __import__(trialname)\n            except Exception, ex:\n                moduleNames.pop()\n        else:\n            if len(names) == 1:\n                raise Exception(\"No module named %r\" % (name,))\n            else:\n                raise Exception('%r does not name an object' % (name,))\n\n    obj = topLevelPackage\n    for n in names[1:]:\n        obj = getattr(obj, n)\n\n    return obj\n\ndef for_name(modpath, classname):\n    '''\n    Returns a class of \"classname\" from module \"modname\".\n    '''\n    module = __import__(modpath, fromlist=[classname])\n    classobj = getattr(module, classname)\n    return classobj()\n\n\nif __name__ == '__main__':\n    dd = DotDict({'a':{'b':{'c':1, 'd':2}}})\n    print dd.a.b.c, dd.a.b.d\n    print dd.a.b\n    #print dd.foo\n\n    print dict.fromkeys(('a','b','c'), 'foo')\n    print DotDict.fromkeys(('a','b','c'), 'foo').a\n\n    dl = DotList([1, {'a':{'b':{'c':1, 'd':2}}}])\n    print dl[1].a.b.c\n     but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_digit(x):\n  return x.isdigit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a neural network model in Python to classify text as positive or negative\n\"\"\"\n\nimport numpy as np\nimport tensorflow as tf \n\n# Define the model\nmodel = tf.keras.models.Sequential([\n    # The input layer with shape of vocab size used for one-hot encoding  \n    tf.keras.layers.Input(shape=(vocab_size)),\n    # Add a layer of Dropout for regularized learning\n    tf.keras.layers.Dropout(rate=0.2),\n    # The hidden layers\n    tf.keras.layers.Dense(units=64, activation='relu'),\n    tf.keras.layers.Dense(units=1, activation='sigmoid')\n])\n\n# Compile the model\nmodel.compile(\n    optimizer='adam', \n    loss='binary_crossentropy', \n    metrics=['accuracy']\n)\n\n# Fit on the training data\nmodel.fit(X_train, y_train, epochs=5, batch_size=32) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 6):\n  for j in range(i):\n    print(\"*\", end=\"\")\n  print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Create a python script to evaluate the performance of the classification model. The script should measure the accuracy of the model by measuring the accuracy score on a held-out test set. The test should compare the model's predictions to the true labels for the image samples. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef identify_words(str1):\n    regex = \"\\w*t\\w*e\\b\"\n    words = re.findall(regex, str1)\n    return words\n\nprint(identify_words(\"this is a python program\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The Fast Fourier Transform (FFT) is an efficient algorithm used to compute the discrete Fourier transform (DFT). The algorithm works by decomposing a signal into its real and imaginary components and then applying a simple vector algorithm to compute the imaginary and real components simultaneously. In Python, the FFT algorithm can be implemented by using Numpy's fft function. In order to compute the FFT, the signal must first be broken into overlapping blocks and the DFT of each block must be computed separately. The blocks are then stitched together to form the final FFT result. The algorithm has several advantages, such as its ability to reduce the number of computations necessary to compute the DFT, as well as its parallelizability, meaning it can be efficiently executed on multiple CPUs. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentences = [\"This is an example sentence.\", \"The quick brown fox jumped over the lazy dog.\", \"A computer can be a powerful tool.\"]\nkeywords = [\"example\", \"computer\", \"power\"]\n\nfiltered_sentences = []\n\nfor sentence in sentences:\n words = sentence.split()\n for word in words:\n  if word in keywords:\n   filtered_sentences.append(sentence)\n   break\n\nprint(filtered_sentences)\n# Output: [\"This is an example sentence.\", \"A computer can be a powerful tool.\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, jsonify\n\napp = Flask(name)\n\n@app.route('/request', methods=['GET'])\ndef getRequest():\n    myList = ['string1', 'string2', 'string3']\n    return jsonify(myList)\n\nif name == 'main':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def euclidean_distance(p1, p2):\n    '''Calculate the Euclidean distance between two points'''\n    delta = tuple(px - py for px, py in zip(p1, p2))\n    return sum(map(lambda x: x ** 2, delta)) ** 0.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list_of_tuples(list_of_tuples, key, reverse=False):\n    '''This function sorts a list of tuples based on the specified key\n    in ascending or descending order\n\n    Parameters: \n       list_of_tuples (list): list of tuples\n       key: the index of the tuple that should be used to sort\n       reverse (bool): flag to decide sorting order, \n                        False for ascending, True for descending\n\n    Returns:\n        list: A sorted list of tuples\n    '''\n\n    # sort using specified key\n    sorted_list = sorted(list_of_tuples, key=lambda x: x[key], reverse=reverse)\n\n    return sorted_list\n\nlist_of_tuples = [(1, 11, 4), (2, 3, 5), (3, 2, 1), (4, 15, 9)]\nkey = 2\n\n# Sort in ascending order\nsorted_list_asc = sort_list_of_tuples(list_of_tuples, key, reverse=False)\n\n# Sort in descending order\nsorted_list_desc = sort_list_of_tuples(list_of_tuples, key, reverse=True)\n\nprint(\"Sorted list in ascending order:\", sorted_list_asc)\nprint(\"Sorted list in descending order:\", sorted_list_desc) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(a, b): \n    if b == 0:\n        return a \n    else:\n        return gcd(b, a % b)\n\nif __name__ == \"__main__\":\n        a = int(input(\"Enter first integer: \"))\n        b = int(input(\"Enter second integer: \"))\n        result = gcd(a, b)\n        print(\"The GCD of {} and {} is: {}\".format(a, b, result)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bin_to_string(bin_num):\n    bin_string = bin(bin_num)[2:]\n    return bin_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [3, 1, 2, 5, 4]\nnew_arr = [element for element in arr if element % 2 == 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: presidents = {\n \"George Washington\": 1, \n \"John Adams\": 1, \n \"Thomas Jefferson\": 2,\n \"James Madison\": 2, \n \"James Monroe\": 2, \n \"John Quincy Adams\": 1, \n \"Andrew Jackson\": 2, \n \"Martin Van Buren\": 1, \n \"William Henry Harrison\": 1, \n \"John Tyler\": 1, \n \"James K. Polk\": 1,\n \"Zachary Taylor\": 1, \n \"Millard Fillmore\": 1, \n \"Franklin Pierce\": 1, \n \"James Buchanan\": 1, \n \"Abraham Lincoln\": 2, \n \"Andrew Johnson\": 1, \n \"Ulysses S. Grant\": 2, \n \"Rutherford B. Hayes\": 1, \n \"James A. Garfield\": 1, \n \"Chester A. Arthur\": 1, \n \"Grover Cleveland\": 2, \n \"Benjamin Harrison\": 1, \n \"William McKinley\": 2,\n \"Theodore Roosevelt\": 2,\n \"William Howard Taft\": 1, \n \"Woodrow Wilson\": 2, \n \"Warren G. Harding\": 1, \n \"Calvin Coolidge\": 2,\n \"Herbert Hoover\": 1, \n \"Franklin D. Roosevelt\": 4, \n \"Harry S. Truman\": 2, \n \"Dwight D. Eisenhower\": 2, \n \"John F. Kennedy\": 1, \n \"Lyndon B. Johnson\": 1, \n \"Richard Nixon\": 2, \n \"Gerald Ford\": 1, \n \"Jimmy Carter\": 1, \n \"Ronald Reagan\": 2, \n \"George H. W. Bush\": 1, \n \"Bill Clinton\": 2, \n \"George W. Bush\": 2, \n \"Barack Obama\": 2, \n \"Donald Trump\": 1\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# Read the employee working hours dataset\ndf = pd.read_csv(\"working_hours_data.csv\")\n\n# Define a function to check if an employee is working more than 8 hours\ndef check_hours(hours):\n  if hours > 8:\n    return True\n  else:\n    return False\n\n# Add a new column that stores the results of the check\ndf['More than 8 hours?'] = df['Hours'].apply(check_hours)\n\n# Print the updated dataframe\nprint(df) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_electric_bill(kw_usage):\n  rate = 0.15\n  bill = kw_usage * rate\n  return bill\n\nx = 500\nbill = calculate_electric_bill(x)\nprint(\"Your bill is:\", str(bill)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python \ndef insertInSortedList(sorted_list, value):\n    left = 0\n    right = len(sorted_list) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if value < sorted_list[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    sorted_list.insert(left, value)\n    return sorted_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsid = SentimentIntensityAnalyzer()\n\ngiven_sentence = \"I love spending time with my family\"\nscores = sid.polarity_scores(given_sentence)\nfor key in scores:\n    print('{0}: {1}, '.format(key, scores[key]), end='')\nprint()\n\nif scores['compound'] >= 0.05:\n    print(\"Positive Sentiment\")\nelif scores['compound'] <= -0.05:\n    print(\"Negative Sentiment\")\nelse:\n    print(\"Neutral Sentiment\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_vowels(s):\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  for char in s:\n    if char in vowels:\n      s = s.replace(char, 'x')\n  return s but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci_sequence(num): \n \n    a = 0\n    b = 1\n \n    if num < 0: \n        print(\"Incorrect input\") \n    elif num == 0: \n        return a \n    elif num == 1: \n        return b \n    else: \n        for i in range(2,num): \n            c = a + b \n            a = b \n            b = c \n        return b \n \nprint(fibonacci_sequence(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from ert.cwrap import BaseCClass, CWrapper\nfrom ert.enkf import ENKF_LIB\nfrom ert.util import Matrix\n\n\nclass PcaPlotVector(BaseCClass):\n\n    def __init__(self, component, principal_component_matrix, observation_principal_component_matrix):\n        assert isinstance(component, int)\n        assert isinstance(principal_component_matrix, Matrix)\n        assert isinstance(observation_principal_component_matrix, Matrix)\n\n        c_pointer = PcaPlotVector.cNamespace().alloc(component, principal_component_matrix, observation_principal_component_matrix)\n        super(PcaPlotVector, self).__init__(c_pointer)\n\n\n    def __len__(self):\n        \"\"\" @rtype: int \"\"\"\n        return PcaPlotVector.cNamespace().size(self)\n\n\n    def __getitem__(self, index):\n        \"\"\"\n        @type index: int\n        @rtype: float \n        \"\"\"\n        assert isinstance(index, int)\n        return PcaPlotVector.cNamespace().get(self, index)\n\n    def __iter__(self):\n        cur = 0\n        while cur < len(self):\n            yield self[cur]\n            cur += 1\n\n    def getObservation(self):\n        \"\"\" @rtype: float \"\"\"\n        return PcaPlotVector.cNamespace().get_obs(self)\n\n    def getSingularValue(self):\n        \"\"\" @rtype: float \"\"\"\n        return PcaPlotVector.cNamespace().get_singular_value(self)\n        \n\n    def free(self):\n        PcaPlotVector.cNamespace().free(self)\n\n\n\ncwrapper = CWrapper(ENKF_LIB)\ncwrapper.registerType(\"pca_plot_vector\", PcaPlotVector)\ncwrapper.registerType(\"pca_plot_vector_obj\", PcaPlotVector.createPythonObject)\ncwrapper.registerType(\"pca_plot_vector_ref\", PcaPlotVector.createCReference)\n\nPcaPlotVector.cNamespace().alloc   = cwrapper.prototype(\"c_void_p pca_plot_vector_alloc(int, matrix, matrix)\")\nPcaPlotVector.cNamespace().free    = cwrapper.prototype(\"void pca_plot_vector_free(pca_plot_vector)\")\nPcaPlotVector.cNamespace().size    = cwrapper.prototype(\"int pca_plot_vector_get_size(pca_plot_vector)\")\nPcaPlotVector.cNamespace().get     = cwrapper.prototype(\"double pca_plot_vector_iget_sim_value(pca_plot_vector, int)\")\nPcaPlotVector.cNamespace().get_obs = cwrapper.prototype(\"double pca_plot_vector_get_obs_value(pca_plot_vector)\")\nPcaPlotVector.cNamespace().get_singular_value = cwrapper.prototype(\"double pca_plot_vector_get_singular_value(pca_plot_vector)\")\n\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter \n\ndef most_common_letter(string): \n\t\"\"\"Function to find the most common letters in the string\"\"\"\n\twords = string.split() \n\tcnt = Counter() \n\t\n\tfor word in words: \n\t\tfor letter in word: \n\t\t\tcnt[letter] += 1\n\n\tmost_occur = cnt.most_common(1)[0] \n\treturn most_occur[0] \n\n# Driver code \nstring = \"this is a sample sentence\"\nprint(most_common_letter(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_value(list):\n    max_val = list[0]\n    for val in list[1:]:\n        if val > max_val:\n            max_val = val\n    return max_val\n\nlist = [23, 45, 67, 89, 13, 99, 19, 20]\nprint(max_value(list)) # 99 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Program to subtract two integers\n\nint1 = -5\nint2 = 3\n\n# Subtract\nsubtract = int1 - int2\n \nprint(\" Difference of two given integers is :\", subtract) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \nfrom bs4 import BeautifulSoup \n\nURL = \"https://en.wikipedia.org/wiki/Python_(programming_language)\" \nr = requests.get(URL) \nsoup = BeautifulSoup(r.content, 'html5lib') \n\ntitle = soup.title\nprint(\"Title is: \", title.string) \n\nh1 = soup.h1\nprint(\"h1 tag is: \", h1.string) \n\nlinks = soup.findAll(\"a\")\nfor link in links:\n    print(\"Link: \", link.get(\"href\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def build_object():\n    obj = {\n        \"firstName\": \"John\",\n        \"lastName\": \"Smith\",\n        \"age\": 40,\n        \"address\": {\n            \"street\": \"123 Main Street\",\n            \"city\": \"San Francisco\",\n            \"state\": \"CA\",\n            \"zipCode\": \"94105\"\n        }\n    }\n    return obj\n \nobj = build_object()\nprint(obj) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.wikipedia.org' \npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\ntitle = soup.find('title').text\nprint(title)\n# Output: Wikipedia but is not the same. just give one example and only return the code."}
