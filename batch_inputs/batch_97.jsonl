{"prompt": "make some code that functions the same as the following code: total = subject1 + subject2\nprint(\"Total Marks:\", total) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(input):\n s = input.lower()\n return s == s[::-1]\n\nprint(is_palindrome(\"racecar\")) # True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_dicts(dict1, dict2):\n    if len(dict1) != len(dict2):\n        return False\n    \n    for key, value in dict1.items():\n        if key not in dict2 or dict2[key] != value:\n            return False\n    \n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(my_string):\n  reversed_string = ''\n  for i in range(len(my_string) - 1, -1, -1):\n    reversed_string += my_string[i]\n\n  return reversed_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def removeGreaterNum(list, num): \n  \n    return [x for x in list if x < num] \n      \nlist = [1, 5, 6, 8, 9, 10] \nnum = 7\nprint(removeGreaterNum(list, num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_closest(nums, target):\n closest_num = float('inf')\n for num in nums:\n  if abs(target - num) < abs(target - closest_num):\n   closest_num = num\n return closest_num\n\nnums = [2, 4, 7, 8]\ntarget = 5\n\nprint(find_closest(nums, target)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_element(arr, ele):\n    for i in range(len(arr)):\n        if arr[i] == ele:\n            return i\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import binascii\n\ndef stringToHex(s):\n output = ''\n for c in s:\n output += '%02x' % ord(c)\n\nreturn output\n\ninputString = input('Input a string:')\nhexString = stringToHex(inputString)\nprint(\"The hexadecimal representation of the string is: {}\".format(hexString)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(numbers): \n    numbers.sort() \n    return numbers \n  \n# Driver code \nnumbers = [5, 2, 3, 7, 4]\nprint(sort_list(numbers)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\n\n# Build dataset\ndata = [[1.78, 80, \"male\"], [1.69, 55, \"female\"], [1.68, 65, \"female\"], [1.68, 70, \"male\"], [1.73, 68, \"female\"]]\n\ndf = pd.DataFrame(data, columns=['height', 'weight', 'gender'])\n\n# Split data\nX = df[['height', 'weight']]\ny = df['gender']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train model\nmodel = SVC(kernel='linear')\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict([[1.78, 80]])\nprint(\"Prediction:\", y_pred[0]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # create an empty list\nmy_nums = []\n\n# loop to enter and append numbers to the list\nfor i in range(5):\n    num = int(input(f'Enter number {i+1}: '))\n    my_nums.append(num)\n\n# printing the list\nprint(my_nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Dog:\ndef __init__(self, breed, name, age, person):\n self.breed = breed\n self.name = name\n self.age = age\n self.person = person\n\ndef get_breed(self):\n return self.breed\n\ndef get_name(self):\n return self.name\n\ndef get_age(self):\n return self.age\n\ndef get_person(self):\n return self.person but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(s1, s2):\n s1 = s1.replace(' ', '').lower()\n s2 = s2.replace(' ', '').lower()\n\n if len(s1) == len(s2):\n return sorted(s1) == sorted(s2)\n else:\n return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Function to implement Linear Search \ndef linear_search(arr, x): \n    for i in range(len(arr)): \n        if arr[i] == x: \n            return i\n    return -1\n  \n#Test \narr = [1, 2, 3, 4, 5, 6] \nx = 4\n  \n#Function call \nresult = linear_search(arr, x) \n  \nif result != -1: \n    print \"Element is present at the index\", result \nelse: \n    print \"Element is not present in the array\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(\"Hello, World!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_palindromic_subsequence(string):\n    n = len(string)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1):\n        if string[i] == string[i+1]:\n            dp[i][i+1] = 2\n    for l in range(3, n+1):\n        for i in range(n-l+1):\n            j = i+l-1\n            if string[i] == string[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][n-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gini_index(data):\n    data_set_size = len(data)\n    data_sum = sum(data)\n\n    gini = 0.0\n    for val in data:\n        gini += (val/data_sum)**2\n    \n    return 1 - gini\n\nprint(gini_index([10, 3, 5, 7])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MyIterator:\n  def __init__(self, data):\n    self.data = data\n    self.index = 0\n  \n  def __iter__(self):\n    return self\n  \n  def __next__(self):\n    if self.index >= len(self.data):\n      raise StopIteration\n    item = self.data[self.index]\n    self.index += 1\n    return item\n\n  def __len__(self):\n    return len(self.data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_duplicate_rows(arr):\n    # Create a tracking array to keep track of visited rows\n    visited = [0] * len(arr)\n\n    # Iterate through the 2D array, starting from the 0th row\n    for i, row in enumerate(arr):\n        # If this row has been processed before, we do not need to process it again\n        if visited[i]:\n            continue\n\n        # Else, check this row against all subsequent rows\n        for j in range(i+1, len(arr)):\n            # Mark what rows we have visited\n            visited[j] = 1\n\n            # If two rows match, we have found a duplicate\n            if row == arr[j]:\n                print(f'Duplicate row {i} and {j}')\n\nfind_duplicate_rows(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from queue import PriorityQueue\n \nclass PriorityQueue(object):\n    def __init__(self):\n        self.queue = []\n \n    def __str__(self):\n        return ' '.join([str(i) for i in self.queue])\n \n    # for checking if the queue is empty\n    def isEmpty(self):\n        return len(self.queue) == []\n \n    # for inserting an element in the queue\n    def insert(self, data):\n        self.queue.append(data)\n \n    # for popping an element based on Priority\n    def delete(self):\n        try:\n            max = 0\n            for i in range(len(self.queue)):\n                if self.queue[i] > self.queue[max]:\n                    max = i\n            item = self.queue[max]\n            del self.queue[max]\n            return item\n        except IndexError:\n            print()\n            exit()\n \nif __name__ == '__main__':\n    myQueue = PriorityQueue()\n    myQueue.insert(12)\n    myQueue.insert(1)\n    myQueue.insert(14)\n    myQueue.insert(7)\n    print(myQueue)\n    while not myQueue.isEmpty():\n        print(myQueue.delete()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_tuples(tup): \n  \n    # reverse = None (Sorts in Ascending order) \n    # key is set to sort using second element of  \n    # sublist lambda has been used \n    tup.sort(key = lambda x: x[1])  \n    return tup  \n  \n# Driver Code \ntuple1 = [(4, 2), (3, 7), (2, 3)]  \nprint(sort_tuples(tuple1)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ListingGenerator():\n    def __init__(self, listings):\n        self.listings = listings\n\n    def generate_listing(self):\n        listing_html = \"<div class=\\\"listing\\\">\\n\"\n        for listing in self.listings:\n            listing_html += \"    <h3>{}</h3>\\n\".format(listing[\"title\"])\n            listing_html += \"    <p>{}</p>\\n\".format(listing[\"description\"])\n            listing_html += \"    <p><a href=\\\"{}\\\">READ MORE</a></p>\\n\".format(listing[\"link\"])\n\n        listing_html += \"</div>\"\n        return listing_html but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask\nfrom flask import request\n\napp = Flask(__name__)\n\n# create item\n@app.route('/items', methods=['POST'])\ndef create_item():\n data = request.get_json()\n item = {\n 'name': data['name'],\n 'price': data['price'],\n 'quantity': data['quantity'],\n }\n return item\n\n# update item\n@app.route('/items/<item_id>', methods=['PUT'])\ndef update_item(item_id):\n\tdata = request.get_json()\n\titem = {\n\t'name': data['name'],\n\t'price': data['price'],\n\t'quantity': data['quantity'],\n\t}\n\treturn item\n\t\n# delete item\n@app.route('/items/<item_id>', methods=['DELETE'])\ndef delete_item(item_id):\n\t# code for deleting item\n\treturn 'item deleted' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [1,2,3,4,5]\ntotal_sum = 0\n\nfor x in my_list:\n    total_sum = total_sum + x \n  \naverage = total_sum / len(my_list)\n\nprint(\"Sum of all elements in given list: \" + str(total_sum))\nprint(\"Average of all elements in given list: \" + str(average)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import libraries\nimport numpy as np\nimport tensorflow as tf\n\n# define inputs\nX = tf.placeholder(tf.float32, shape=[None, input_dim])\ny = tf.placeholder(tf.float32, shape=[None, classes])\n\n# define weights & biases\nW = tf.Variable(tf.random_normal([input_dim, classes]))\nb = tf.Variable(tf.random_normal([classes]))\n\n# define prediction\npred = tf.nn.softmax(tf.matmul(X,W) + b)\n\n# define loss\ncost = tf.reduce_mean(-tf.reduce_sum(y*tf.log(pred), reduction_indices=1))\n\n# define optimizer\noptimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(cost)\n\n# start session\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n\n    # train model\n    for epoch in range(training_epochs):\n        _, c = sess.run([optimizer, cost], feed_dict={X: x_train,\n                        y: y_train})\n        \n    # test model\n    output = tf.argmax(pred, 1)\n    accuracy = tf.reduce_mean(tf.cast(tf.equal(output, tf.argmax(y, 1)), tf.float32))\n    result = sess.run(accuracy, feed_dict={X: x_test, y: y_test})\n    print('The accuracy of the model on the test set is: {}'.format(result)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(word1, word2):\n    if sorted(word1) == sorted(word2):\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import the required packages\nimport requests\nfrom bs4 import BeautifulSoup\n\n#Define a function to find the latest news article\ndef get_latest_news(topic):\n \n    #Make a get request\n    response = requests.get(\"http://www.example.com/\" + topic)\n\n    #Parse the response\n    soup = BeautifulSoup(response.text, \"html.parser\")\n\n    #Find the first relevant news article\n    latest_news = soup.find(\"div\", {\"class\": \"related-news-item\"}).find(\"h3\")\n\n    #Extract the headline and the link\n    headline = latest_news.find(\"a\")\n    link = latest_news.find(\"a\").get('href')\n\n    #Return the headline and the link\n    return {'headline': headline.text.strip(\"\\n\"), 'link': link}\n\n#Call the function\nget_latest_news(\"topic\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = [\"hello\", \"world\", \"foobar\"] \nfiltered_words = list(filter(lambda x: len(x) > 5, words)) \nprint(filtered_words) # ['world', 'foobar'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\nplt.bar(range(len(data_points)), data_points)\nplt.title('Bar Chart')\nplt.xlabel('index') \nplt.ylabel('value')\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sieve(n):\n    prime = [True] * (n + 1) \n    p = 2\n    while (p * p <= n): \n  \n        if prime[p] == True:  \n            for i in range(p * 2, n + 1, p): \n                prime[i] = False\n        p += 1\n  \n    for p in range(2, n + 1): \n        if prime[p]: \n            print(p, end=' ') \n  \n# Driver Code \nif __name__ == \"__main__\": \n    n = 100\n    print(\"Following are the primes smaller than or equal to\", n) \n    sieve(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def palindrome_checker(string_list):\n    result = []\n    for string in string_list:\n        rev_string = string[::-1]\n        if rev_string == string:\n            result.append(string)\n    return result\n\npalindromes = palindrome_checker(['racecar', 'level', 'toronto', 'bob', 'noon'])\nprint(palindromes) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: total_completed = 14\n\nreport = \"In the past week, a total of {total_completed} tasks were completed. \\\nAnalysis tasks accounted for {analysis_percent}%, design tasks accounted for \\\n{design_percent}%, and programming tasks accounted for {programming_percent}% of all tasks completed.\"\n\nanalysis_percent = (3/14)*100\ndesign_percent = (4/14)*100\nprogramming_percent = (7/14)*100\n\nprint(report.format(total_completed=total_completed, analysis_percent=analysis_percent, design_percent=design_percent, programming_percent=programming_percent)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nSort the elements in the list by their occurrence\n\"\"\"\n\nfrom collections import Counter\n\ndef sort_by_occurrence(l):\n    counts = Counter(l)\n    sorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)\n    unique_elems = [elem[0] for elem in sorted_counts]\n\n    sorted_list = []\n    for elem in unique_elems:\n        for i in range(counts[elem]):\n            sorted_list.append(elem)\n    return sorted_list\n\nprint(sort_by_occurrence(l)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: total_sum = 0\nfor num in mylist:\n    total_sum += num\nprint(\"The sum is\",total_sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_numbers(arr):\n  new_arr = []\n  for el in arr:\n    if not isinstance(el, int):\n      new_arr.append(el)\n  return new_arr\n\na = [3, 1, 4, 5, 6, 2]\n\nprint(remove_numbers(a)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport bs4\n\n# Function to scrape all links\ndef scrapeLinks(url):\n # get the html content from the page\n r = requests.get(url)\n html = r.text\n\n # parse the html with beautiful soup\n soup = bs4.BeautifulSoup(html, 'lxml')\n\n # create an empty list to store the links\n links = []\n\n # loop through each link in the page\n for link in soup.find_all('a'):\n # store the link in the list\n links.append(link.get('href'))\n\n return links\n\n# example url\nurl = 'https://example.net'\n\n# scrape the links\nlinks = scrapeLinks(url)\n\n# print the links\nfor link in links:\n print(link) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef distance_calc(coord1, coord2):\n    \"\"\"Returns the distance between two coordinates.\"\"\"\n    x1, y1 = coord1\n    x2, y2 = coord2\n    dist = math.sqrt((x2-x1)**2 + (y2-y1)**2)\n    return dist\n\nprint(distance_calc(coordinates1, coordinates2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_matrices(matrixA, matrixB):\n    #Check matrices are the same size\n    assert len(matrixA) == len(matrixB) \n    assert len(matrixA[0]) == len(matrixB[0])\n\n    #Create an empty matrix for the answer\n    answer = [[0 for row in range(len(matrixA))] for column in range(len(matrixA[0]))]\n\n    #Go through the matrices and add them\n    for row in range(0, len(matrixA)):\n        for column in range(0, len(matrixA[0])):\n            answer[row][column] = matrixA[row][column] + matrixB[row][column]\n\n    return answer\n\nA = [[1, 2], [3, 4]]\nB = [[5, 6], [7, 8]]\n\nprint(add_matrices(A, B)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(list_of_strings):\n  palindrome_list = [string for string in list_of_strings if string == string[::-1]]\n  if palindrome_list:\n    return True\n  return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_python2_or_3(code):\n    \"\"\"\n    This function takes in a code and returns if it's \n    written in Python 2 or Python 3.\n\n    Parameters:\n    code (str): the code\n\n    Returns:\n    str: Python 2 or Python 3\n    \"\"\"\n    if \"urllib2\" in code:\n        return \"Python 2\"\n    elif \"urllib.request\" in code:\n        return \"Python 3\"\n    else: \n        return \"\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\ndata = pd.read_csv('dataset.csv')\n\nX = data.drop('label', axis=1).to_numpy()\ny = data['label'].to_numpy()\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# logistic regression model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #TCP server\nimport socket\n\n# Create a TCP/IP socket\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# Bind the socket to the port\nserver_address = ('localhost', 10000)\nprint('starting up on {} port {}'.format(*server_address))\nsock.bind(server_address)\n\n# Listen for incoming connections\nsock.listen(1)\n\nwhile True:\n    # Wait for a connection\n    print('waiting for a connection')\n    connection, client_address = sock.accept()\n    try:\n        print('connection from', client_address)\n\n        # Receive the data in small chunks and retransmit it\n        while True:\n            data = connection.recv(16)\n            print('received {!r}'.format(data))\n            if data:\n                print('sending data back to the client')\n                connection.sendall(data)\n            else:\n                print('no data from', client_address)\n                break\n\n    finally:\n        # Clean up the connection\n        connection.close()\n\n#TCP client\nimport socket\n\n# Create a TCP/IP socket\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# Connect the socket to the port where the server is listening\nserver_address = ('localhost', 10000)\nprint('connecting to {} port {}'.format(*server_address))\nsock.connect(server_address)\n\ntry:\n    # Send data\n    message = b'this is the message. It will be repeated.'\n    print('sending {!r}'.format(message))\n    sock.sendall(message)\n\n    # Look for the response\n    amount_received = 0\n    amount_expected = len(message)\n\n    while amount_received < amount_expected:\n        data = sock.recv(16)\n        amount_received += len(data)\n        print('received {!r}'.format(data))\n\nfinally:\n    print('closing socket')\n    sock.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Importing DecisionTreeClassifier from sklearn library\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Defining the decision tree classifier\n# Using \"entropy\" as criterion to decide the further split\nclf = DecisionTreeClassifier(criterion=\"entropy\")\n\n# Fitting the decision tree classifier on the data\nclf = clf.fit(X, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def getAsciiValue(char): \n    return ord(char) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to generate prime numbers between the given range \ndef generatePrimes(start, end):\n    primeList = []\n\n    for num in range(start, end + 1): \n        # all prime numbers are greater than 1\n        if num > 1: \n            for i in range(2, num): \n                if (num % i) == 0: \n                    break   \n            else: \n                primeList.append(num)\n\n    return primeList\n  \n# Driver Code \nstart, end =  2, 11\n\nprimeList = generatePrimes(start, end) \n\nprint(\"Prime numbers between\", start, \"and\", end,\"are:\") \nprint(primeList) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def flatten_dict(nested_dict, flat_dict={}, prefix=''):\n    for key, value in nested_dict.items():\n        key_prefix = prefix + key + '.' if prefix else key\n\n        if isinstance(value, dict):\n            flatten_dict(value, flat_dict, key_prefix)\n        else:\n            flat_dict[key_prefix] = value\n\n    return flat_dict but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numlist = []\nwhile True:\n    user_input = input(\"Enter a number: \")\n    if user_input == 'done':\n        break\n    elif user_input == '': \n        continue\n    else:\n        numlist.append(int(user_input))\nprint(\"Average is: \", sum(numlist) / len(numlist)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import defaultdict\n\ndef index_strings(strings):\n    index = defaultdict(list)\n    for string in strings:\n        for i, char in enumerate(string):\n            index[char].append((i, string))\n    return index\n\nstrings = [\"I am learning python\", \"I love coding\", \"Coding is awesome\"]\nprint(index_strings(strings))\n# {\n#     'I': [(0, 'I am learning python'), (0, 'I love coding')], \n#     'a': [(2, 'I am learning python')],\n#     'm': [(3, 'I am learning python')],\n#     'l': [(5, 'I am learning python'), (4, 'I love coding')],\n#     'e': [(7, 'I am learning python'), (6, 'I love coding')],\n#     'r': [(8, 'I am learning python'), (7, 'I love coding')],\n#     'n': [(10, 'I am learning python'), (9, 'I love coding'), (5, 'Coding is awesome')],\n#     'i': [(12, 'I am learning python'), (13, 'I love coding'), (6, 'Coding is awesome')],\n#     'g': [(14, 'I am learning python'), (15, 'I love coding'), (7, 'Coding is awesome')],\n#     'p': [(17, 'I am learning python')],\n#     'y': [(19, 'I am learning python')],\n#     't': [(20, 'I am learning python')],\n#     'h': [(21, 'I am learning python')],\n#     'o': [(16, 'I love coding'), (8, 'Coding is awesome')],\n#     'c': [(4, 'I love coding'), (0, 'Coding is awesome')],\n#     'd': [(5, 'I love coding'), (1, 'Coding is awesome')],\n#     's': [(2, 'Coding is awesome')],\n#     'a': [(3, 'Coding is awesome')],\n#     'w': [(4, 'Coding is awesome')],\n#     'e': [(5, 'Coding is awesome')],\n# } but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def swap(x, y):\n temp = x\n x = y\n y = temp\n\na = 10\nb = 20\n\nswap(a, b)\n\n#Verify the result\nif a == 20 and b == 10:\n print(\"Swap successful\")\nelse:\n print(\"Swap unsuccessful\") # Output: Swap successful but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\n# Caluclate pi to the 5th decimal place\npi = round(math.pi, 5)\n\n# Print the pi\nprint(pi) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n \nx = np.array([[1,3], [2,5], [3,7], [4,11]])\ny = np.array([8,13,18,23])\n\nalpha = 0.01\ntheta = np.zeros(2)\niterations = 1000\n\ndef sgd(x, y, theta, alpha, m, iterations):\n for _ in range(iterations):\n for i in range(m):\n h = np.dot(x[i], theta)\n loss = h - y[i]\n gradient = x[i] * loss * (2/m)\n theta = theta - alpha * gradient\n \n return theta\n\noptimal_theta = sgd(x, y, theta, alpha, x.shape[0], iterations)\nprint(optimal_theta) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def char_in_string(char, string):\n    for c in string:\n        if c == char:\n            return True\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace(s, old, new):\n if s == '':\n return s\nelse:\n if s[0] == old:\n return new + replace(s[1:], old, new)\n else:\n return s[0] + replace(s[1:], old, new)\n \nstring = \"Hello World\"\nprint(replace(string, \"World\", \"John\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def avg(arr):\n    tot_sum = 0\n    for num in arr:\n        tot_sum += num\n    \n    return tot_sum/len(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: true but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef game():\n num = random.randint(0, 10)\n num_guesses = 0\n\n while True:\n guesses = int(input('Guess a number between 0 and 10: '))\n num_guesses += 1\n\n if guesses == num:\n print(f'You guessed correctly in {num_guesses} guesses! The number was {num}')\n break\n else:\n print('Wrong guess. Try again.')\n \ngame() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sumList(list): \n    sum = 0\n    for ele in list:\n        sum += ele     \n    return sum\n  \nlist = [1, 2, 3, 4, 5] \nprint(\"Sum of the elements in given list is :\", sumList(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_mean(a, b, c):\n    return (a + b + c)/3\n\na = float(input('Enter a number: '))\nb = float(input('Enter a number: '))\nc = float(input('Enter a number: '))\n\nmean = get_mean(a, b, c)\nprint('Mean:', mean) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def hanoi(disc, source, auxiliary, target):\n    if disc > 0:\n        # Move n - 1 discs from source to auxiliary \n        hanoi(disc - 1, source, target, auxiliary)\n        # Move the last disc from source to target\n        print(\"Move the disc from {} to {}\".format(source, target))\n        # Move the n - 1 discs from auxiliary to target\n        hanoi(disc - 1, auxiliary, source, target)\n\nhanoi(3, 'A', 'B', 'C') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\nprint(Fibonacci(8)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to find the maximum element in an array of integers\ndef findMax(arr): \n    maxEle = arr[0] \n    \n    # Iterate through the array and find the maximum element \n    for i in range(1, len(arr)): \n        if arr[i] > maxEle: \n            maxEle = arr[i] \n    \n    return maxEle \n\n# Driver code \narr = [3, 17, 5, 19, 10] \nmaxEle = findMax(arr) \n\nprint(\"The maximum element in the given array is:\", maxEle) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_string_length(string1, string2):\n    if len(string1) > len(string2):\n        return len(string1)\n    return len(string2)\n\nstring1 = \u201chello\u201d\nstring2 = \u201cgoodbye\u201d\n\nresult = longest_string_length(string1, string2)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def distinct_pair(product):\n    pairs = []\n    for i in range(1,product):\n        if product % i == 0:\n            pairs.append((i,product//i))\n\n    return set(pairs) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def to_square(nums):\n    squares = [num * num for num in nums]\n    return squares but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n# Copyright (c) 2012 The Chromium Authors. All rights reserved.\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n\n\"\"\"The 'grit xmb' tool.\n\"\"\"\n\nimport getopt\nimport os\n\nfrom xml.sax import saxutils\n\nfrom grit import grd_reader\nfrom grit import lazy_re\nfrom grit import tclib\nfrom grit import util\nfrom grit.tool import interface\n\n\n# Used to collapse presentable content to determine if\n# xml:space=\"preserve\" is needed.\n_WHITESPACES_REGEX = lazy_re.compile(ur'\\s\\s*')\n\n\n# See XmlEscape below.\n_XML_QUOTE_ESCAPES = {\n    u\"'\":  u'&apos;',\n    u'\"':  u'&quot;',\n}\n_XML_BAD_CHAR_REGEX = lazy_re.compile(u'[^\\u0009\\u000A\\u000D'\n                                      u'\\u0020-\\uD7FF\\uE000-\\uFFFD]')\n\n\ndef _XmlEscape(s):\n  \"\"\"Returns text escaped for XML in a way compatible with Google's\n  internal Translation Console tool.  May be used for attributes as\n  well as for contents.\n  \"\"\"\n  if not type(s) == unicode:\n    s = unicode(s)\n  result = saxutils.escape(s, _XML_QUOTE_ESCAPES)\n  return _XML_BAD_CHAR_REGEX.sub(u'', result).encode('utf-8')\n\n\ndef _WriteAttribute(file, name, value):\n  \"\"\"Writes an XML attribute to the specified file.\n\n    Args:\n      file: file to write to\n      name: name of the attribute\n      value: (unescaped) value of the attribute\n    \"\"\"\n  if value:\n    file.write(' %s=\"%s\"' % (name, _XmlEscape(value)))\n\n\ndef _WriteMessage(file, message):\n  presentable_content = message.GetPresentableContent()\n  assert (type(presentable_content) == unicode or\n          (len(message.parts) == 1 and\n           type(message.parts[0] == tclib.Placeholder)))\n  preserve_space = presentable_content != _WHITESPACES_REGEX.sub(\n      u' ', presentable_content.strip())\n\n  file.write('<msg')\n  _WriteAttribute(file, 'desc', message.GetDescription())\n  _WriteAttribute(file, 'id', message.GetId())\n  _WriteAttribute(file, 'meaning', message.GetMeaning())\n  if preserve_space:\n    _WriteAttribute(file, 'xml:space', 'preserve')\n  file.write('>')\n  if not preserve_space:\n    file.write('\\n  ')\n\n  parts = message.GetContent()\n  for part in parts:\n    if isinstance(part, tclib.Placeholder):\n      file.write('<ph')\n      _WriteAttribute(file, 'name', part.GetPresentation())\n      file.write('><ex>')\n      file.write(_XmlEscape(part.GetExample()))\n      file.write('</ex>')\n      file.write(_XmlEscape(part.GetOriginal()))\n      file.write('</ph>')\n    else:\n      file.write(_XmlEscape(part))\n  if not preserve_space:\n    file.write('\\n')\n  file.write('</msg>\\n')\n\n\ndef WriteXmbFile(file, messages):\n  \"\"\"Writes the given grit.tclib.Message items to the specified open\n  file-like object in the XMB format.\n  \"\"\"\n  file.write(\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE messagebundle [\n<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) \"default\">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>\n]>\n<messagebundle>\n\"\"\")\n  for message in messages:\n    _WriteMessage(file, message)\n  file.write('</messagebundle>')\n\n\n# Good resource on POT format: http://pology.nedohodnik.net/doc/user/en_US/ch-poformat.html\ndef WritePotFile(file, cliques, lang='', include_translation=False):\n  def WriteAttribute(prefix, value):\n    if value:\n      file.write('%s%s\\n' % (prefix, value))\n\n  def WriteExamples():\n    parts = message.GetContent()\n    for part in parts:\n      if isinstance(part, tclib.Placeholder):\n        if part.GetExample():\n          file.write(u'#. - placeholder %s, example: %s\\n' % (part.GetPresentation(), part.GetExample()))\n        else:\n          file.write(u'#. - placeholder %s, literally replaced with: %s\\n' % (part.GetPresentation(), part.GetOriginal()))\n\n  def PotEscape(text):\n    return text.replace(u'\\\\', u'\\\\\\\\').replace(u'\\n', u'\\\\n').replace(u'\\t', u'\\\\t').replace(u'%', u'\\%').encode('utf-8')\n\n  for clique in cliques:\n    message = clique.GetMessage()\n    WriteAttribute(u'#. - description:', message.GetDescription())\n    WriteExamples()\n    WriteAttribute(u'#: id: ', message.GetId())\n\n    meaning = message.GetMeaning()\n    if meaning:\n      file.write(u'msgctxt \"%s\"\\n' % PotEscape(meaning))\n    def WriteMessagePart(key, msg):\n        file.write(u'%s \"' % key)\n        parts = msg.GetContent()\n        for part in parts:\n          if isinstance(part, tclib.Placeholder):\n            file.write(u'%%{%s}' % part.GetPresentation())\n          else:\n            file.write(PotEscape(part))\n        file.write(u'\"\\n')\n    WriteMessagePart(u'msgid', message)\n    if not include_translation:\n      file.write(u'msgstr \"\"\\n')\n    else:\n      WriteMessagePart(u'msgstr',\n                       clique.MessageForLanguage(lang,\n                                                 pseudo_if_no_match=False,\n                                                 fallback_to_english=False))\n    file.write(u'\\n')\n\n\nclass OutputXmb(interface.Tool):\n  \"\"\"Outputs all translateable messages in the .grd input file to an\n.xmb file, which is the format used to give source messages to\nGoogle's internal Translation Console tool.  The format could easily\nbe used for other systems.\n\nUsage: grit xmb [-i|-h] [-l LIMITFILE] OUTPUTPATH\n\nOUTPUTPATH is the path you want to output the .xmb file to.\n\nThe -l option can be used to output only some of the resources to the .xmb file.\nLIMITFILE is the path to a file that is used to limit the items output to the\nxmb file.  If the filename extension is .grd, the file must be a .grd file\nand the tool only output the contents of nodes from the input file that also\nexist in the limit file (as compared on the 'name' attribute). Otherwise it must\ncontain a list of the IDs that output should be limited to, one ID per line, and\nthe tool will only output nodes with 'name' attributes that match one of the\nIDs.\n\nThe -i option causes 'grit xmb' to output an \"IDs only\" file instead of an XMB\nfile.  The \"IDs only\" file contains the message ID of each message that would\nnormally be output to the XMB file, one message ID per line.  It is designed for\nuse with the 'grit transl2tc' tool's -l option.\n\nOther options:\n\n  -D NAME[=VAL]     Specify a C-preprocessor-like define NAME with optional\n                    value VAL (defaults to 1) which will be used to control\n                    conditional inclusion of resources.\n\n  -E NAME=VALUE     Set environment variable NAME to VALUE (within grit).\n\n\"\"\"\n  # The different output formats supported by this tool\n  FORMAT_XMB = 0\n  FORMAT_IDS_ONLY = 1\n  FORMAT_POT = 2\n\n  def __init__(self, defines=None):\n    super(OutputXmb, self).__init__()\n    self.format = self.FORMAT_XMB\n    self.defines = defines or {}\n\n  def ShortDescription(self):\n    return 'Exports all translateable messages into an XMB file.'\n\n  def Run(self, opts, args):\n    self.SetOptions(opts)\n\n    limit_file = None\n    limit_is_grd = False\n    limit_file_dir = None\n    own_opts, args = getopt.getopt(args, 'l:D:ihp')\n    for key, val in own_opts:\n      if key == '-l':\n        limit_file = open(val, 'r')\n        limit_file_dir = util.dirname(val)\n        if not len(limit_file_dir):\n          limit_file_dir = '.'\n        limit_is_grd = os.path.splitext(val)[1] == '.grd'\n      elif key == '-i':\n        self.format = self.FORMAT_IDS_ONLY\n      elif key == '-p':\n        self.format = self.FORMAT_POT\n      elif key == '-D':\n        name, val = util.ParseDefine(val)\n        self.defines[name] = val\n      elif key == '-E':\n        (env_name, env_value) = val.split('=', 1)\n        os.environ[env_name] = env_value\n    if not len(args) == 1:\n      print ('grit xmb takes exactly one argument, the path to the XMB file '\n             'to output.')\n      return 2\n\n    xmb_path = args[0]\n    res_tree = grd_reader.Parse(opts.input, debug=opts.extra_verbose)\n    res_tree.SetOutputLanguage('en')\n    res_tree.SetDefines(self.defines)\n    res_tree.OnlyTheseTranslations([])\n    res_tree.RunGatherers()\n\n    with open(xmb_path, 'wb') as output_file:\n      self.Process(\n        res_tree, output_file, limit_file, limit_is_grd, limit_file_dir)\n    if limit_file:\n      limit_file.close()\n    print \"Wrote %s\" % xmb_path\n\n  def Process(self, res_tree, output_file, limit_file=None, limit_is_grd=False,\n              dir=None):\n    \"\"\"Writes a document with the contents of res_tree into output_file,\n    limiting output to the IDs specified in limit_file, which is a GRD file if\n    limit_is_grd is true, otherwise a file with one ID per line.\n\n    The format of the output document depends on this object's format attribute.\n    It can be FORMAT_XMB or FORMAT_IDS_ONLY.\n\n    The FORMAT_IDS_ONLY format causes this function to write just a list\n    of the IDs of all messages that would have been added to the XMB file, one\n    ID per line.\n\n    The FORMAT_XMB format causes this function to output the (default) XMB\n    format.\n\n    Args:\n      res_tree: base.Node()\n      output_file: file open for writing\n      limit_file: None or file open for reading\n      limit_is_grd: True | False\n      dir: Directory of the limit file\n    \"\"\"\n    if limit_file:\n      if limit_is_grd:\n        limit_list = []\n        limit_tree = grd_reader.Parse(limit_file,\n                                      dir=dir,\n                                      debug=self.o.extra_verbose)\n        for node in limit_tree:\n          if 'name' in node.attrs:\n            limit_list.append(node.attrs['name'])\n      else:\n        # Not a GRD file, so it's just a file with one ID per line\n        limit_list = [item.strip() for item in limit_file.read().split('\\n')]\n\n    ids_already_done = {}\n    cliques = []\n    for node in res_tree:\n      if (limit_file and\n          not ('name' in node.attrs and node.attrs['name'] in limit_list)):\n        continue\n      if not node.IsTranslateable():\n        continue\n\n      for clique in node.GetCliques():\n        if not clique.IsTranslateable():\n          continue\n        if not clique.GetMessage().GetRealContent():\n          continue\n\n        # Some explanation is in order here.  Note that we can have\n        # many messages with the same ID.\n        #\n        # The way we work around this is to maintain a list of cliques\n        # per message ID (in the UberClique) and select the \"best\" one\n        # (the first one that has a description, or an arbitrary one\n        # if there is no description) for inclusion in the XMB file.\n        # The translations are all going to be the same for messages\n        # with the same ID, although the way we replace placeholders\n        # might be slightly different.\n        id = clique.GetMessage().GetId()\n        if id in ids_already_done:\n          continue\n        ids_already_done[id] = 1\n\n        clique = node.UberClique().BestClique(id)\n        cliques += [clique]\n\n    # Ensure a stable order of messages, to help regression testing.\n    cliques.sort(key=lambda x:x.GetMessage().GetId())\n    messages = [c.GetMessage() for c in cliques]\n\n    if self.format == self.FORMAT_IDS_ONLY:\n      # We just print the list of IDs to the output file.\n      for msg in messages:\n        output_file.write(msg.GetId())\n        output_file.write('\\n')\n    elif self.format == self.FORMAT_POT:\n      WritePotFile(output_file, cliques)\n    else:\n      assert self.format == self.FORMAT_XMB\n      WriteXmbFile(output_file, messages)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_random_string(target_length):\n    chars = string.ascii_letters + string.digits\n    return ''.join(random.choice(chars) for _ in range(target_length)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(arr): \n    n = len(arr) \n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: perfect_squares = []\ni = 1\nwhile len(perfect_squares) < 20:\n perfect_square = i * i \n perfect_squares.append(perfect_square)\n i = i + 1\n\nprint(perfect_squares) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_divisible_by_5_and_7(num):\n    if (num % 5 == 0 and num % 7 == 0):\n        return True\n    else:\n        return False\n\nprint(is_divisible_by_5_and_7(50)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def concatStrings(string1, string2):\n  return string1 + string2\n\nprint(concatStrings('Hello', 'World')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndef lambda_handler(event, context):\n # Get the input numbers\n num1 = event['Input-1']\n num2 = event['Input-2']\n\n # Calculate the sum\n result = num1 + num2\n\n # Return the output\n return {\n 'Result': result\n } but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\nimport random\n\n\ndef respond(message):\n    # Get a response based on the input message\n    responses = [\"I'm not sure I understand you fully.\", \"Please provide more information.\", \"What do you mean by that?\",\n                 \"Can you be more specific?\"]\n\n    # Set default response to random selection\n    default_response = random.choice(responses)\n\n    # Check for \"greeting\" type messages\n    if re.search(r\"hi|hey|hello|good morning|hola\", message):\n        responses = [\"Hello!\", \"Hi there!\", \"Nice to meet you!\", \"Checking in.\"]\n        default_response = random.choice(responses)\n\n    # Check for Q&A type questions\n    query_words = [\"where\", \"when\", \"what\", \"how\", \"why\", \"who\"]\n    words_in_message = message.lower().split()\n\n    if any(word in words_in_message for word in query_words):\n        default_response = \"Sorry, I don't have the answer to that yet.\"\n\n    # Return the response\n    return default_response but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: vowels = ['a', 'e', 'i', 'o', 'u']\nwords = \"This is a sample string\".split()\n\nfor word in words:\n if word[0].lower() in vowels:\n print(word) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import asyncio\n\ndef callback():\n    print('Callback triggered')\n\nasync def async_task(callback):\n    await asyncio.sleep(3)\n    callback()\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(async_task(callback)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\ntext = \"Hello World this is a Test\"\nwords = text.split()\n\nfor word in words:\n print(word) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def item_exists(mylist, element):\n    if element in mylist:\n        return True\n    return False\n\nresult = item_exists([1,2,3,4,5], 3)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\n\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.feature_extraction import DictVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\nclass Ensembler(object):\n\n    def __init__(self):\n        self.ensemble_model = None\n\n    def build_model(self, X, y):\n        # Ensembler consists of Naive Bayes, Logistic Regression and Voting classifier\n        nb_classifier = BernoulliNB()\n        log_classifier = LogisticRegression()\n        vectorizer = DictVectorizer()\n\n        X_vectorized = vectorizer.fit_transform(X).toarray()\n\n        voting_model = VotingClassifier(\n            estimators=[\n                ('nb', nb_classifier), \n                ('log', log_classifier)\n            ], \n            voting='soft', \n            n_jobs=-1\n            )\n\n        self.ensemble_model = voting_model.fit(X_vectorized, y)\n\n    def predict(self, X):\n        X_vectorized = self.vectorizer.transform(X).toarray()\n        return self.ensemble_model.predict(X_vectorized) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def breadth_first_search(graph, root):\n    visited = []\n    queue = []\n    queue.append(root)\n\n    while queue:\n        node = queue.pop(0)\n        if node not in visited:\n            visited.append(node)\n            queue.extend(graph[node])\n    return visited but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import flask\nfrom flask import request, jsonify\n \napp = flask.Flask(__name__)\napp.config[\"DEBUG\"] = True\n \n# Create some test data for our catalog in the form of a list of dictionaries.\nbookings = [\n    {'user_id': 1, 'movie_id': 1, 'movie_name':'Joker', 'seat_numbers':[1,2,3,4],'payment_method':'credit'},\n    {'user_id': 2, 'movie_id': 2, 'movie_name':'Hobbs and Shaw', 'seat_numbers':[3,4],'payment_method':'debit'},\n    {'user_id': 3, 'movie_id': 3, 'movie_name':'Toy Story 4', 'seat_numbers':[2],'payment_method':'cash'},\n]\n \n@app.route('/', methods=['GET'])\ndef home():\n    return '''<h1>Movie Tickets Booking API</h1>\n<p>A prototype API for booking movie tickets.</p>'''\n \n@app.route('/api/bookings/all', methods=['GET'])\ndef api_all():\n    return jsonify(bookings)\n \n@app.route('/api/bookings', methods=['GET'])\ndef api_id():\n    # Check if an ID was provided as part of the URL.\n    # If ID is provided, assign it to a variable.\n    # If no ID is provided, display an error in the browser.\n    if 'user_id' in request.args:\n        user_id = int(request.args['user_id'])\n    else:\n        return \"Error: No user_id field provided. Please specify an user_id.\"\n \n    # Create an empty list for our results\n    results = []\n \n    # Loop through the data and match results that fit the requested ID.\n    # IDs are unique, but other fields might return many results\n    for booking in bookings:\n        if booking['user_id'] == user_id:\n            results.append(booking)\n \n    # Use the jsonify function from Flask to convert our list of\n    # Python dictionaries to the JSON format.\n    return jsonify(results)\n\napp.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1,11):\n    print(i**2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def int_to_roman(num):\n    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    roman = ''\n    for value, symbol in roman_numerals.items():\n        while num >= value:\n            roman += symbol\n            num -= value\n    return roman but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def equalSums(array, x): \n    result = [] \n\n    for i in range(0, len(array)-1): \n        for j in range(i + 1, len(array)): \n            if array[i] + array[j] == x: \n                result.append([array[i], array[j]]) \n  \n    return result \n  \nprint(equalSums(array, x)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sample_string = \"This is a sample string\"\n\n# Create an empty dictionary to store the counts for each character \ncounts = {}\n\n# Traverse through the string and update the count of each character\nfor ch in sample_string:\n    if ch not in counts:\n        counts[ch] = 1\n    else:\n        counts[ch] += 1\n\n# Print the frequency table\nprint(\"Character \\t Frequency\")\nfor key in counts.keys():\n    print(key + '\\t\\t' + str(counts[key])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def encrypt(plainText, shift):\n cipherText = \"\"\n \n for ch in plainText:  \n     if ch.isalpha():\n         stayInAlphabet = ord(ch) + shift \n         if stayInAlphabet > ord('z'):\n             stayInAlphabet -= 26\n         finalLetter = chr(stayInAlphabet)\n         cipherText += finalLetter\n     else:\n         cipherText += ch\n \n return cipherText\n\ntext = 'this is a plain text message.'\nshifted  = encrypt(text, 3)   \n\nprint('Plain Text: ', text) \nprint('Cipher Text:', shifted ) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class DigitalClock:\n    def __init__(self):\n        self.__hours = 0\n        self.__minutes = 0\n        self.__seconds = 0\n    \n    def set_time(self,hours,minutes,seconds):\n        self.__hours = hours\n        self.__minutes = minutes\n        self.__seconds = seconds\n    \n    def get_time(self):\n        return self.__hours, self.__minutes, self.__seconds\n    \n    def display(self):\n        print(str(self.__hours).zfill(2),\":\",str(self.__minutes).zfill(2),\":\",str(self.__seconds).zfill(2))\n\nmy_clock = DigitalClock()\nmy_clock.set_time(12, 45, 10)\nmy_clock.display() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\n\ntf.compat.v1.enable_eager_execution() \n\n# Load training data\n\ntrain_data = tf.keras.datasets.twitter.load_data(num_words=10000)\ntrain_data[0]\n\n# Preprocess data\n\ntrain_x = tf.keras.preprocessing.sequence.pad_sequences(train_data[0], maxlen=500)\ntrain_y = train_data[1]\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(10000, 64),\n    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64)),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nmodel.fit(train_x, train_y, epochs=10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import psycopg2\n\nconn = psycopg2.connect(\"host=localhost dbname=mydb user=myuser password=mypassword\")\n\ncur = conn.cursor()\n\ncur.execute(\"SELECT * FROM users\")\n\nrows = cur.fetchall()\n\nfor row in rows:\n    user_id = row[0]\n    username = row[1]\n    user_email = row[3] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_for_int(lst, int):\n    if int in lst:\n        return True\n    else:\n        return False\n    \nlst = [2, 4, 6]\nint = 4\n\nis_found = check_for_int(lst, int)\nprint(is_found) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def preorder(tree): \n    if tree: \n        print(tree.val) \n        preorder(tree.left) \n        preorder(tree.right) \n  \n# Driver code  \ntree = Node(1) \ntree.left = Node(2) \ntree.right = Node(3) \ntree.left.left = Node(4) \ntree.left.right = Node(5) \n  \npreorder(tree) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def prime_numbers(n):\n \n    prime_numbers_list = []\n    for num in range(2, n + 1):\n        if all(num % i != 0 for i in range(2, num)):\n            prime_numbers_list.append(num)\n \n    return prime_numbers_list\n \nprint(prime_numbers(50)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class BaseClass:\n    def __init__(self):\n        self.var1 = None\n    \n    def method1(self, var1):\n        raise NotImplementedError but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers = [3, 5, 9, 1, 2] \n\nnumbers.sort() \n\nprint(numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ngrammar = { \n    \"_S\"  : [\"_NP _VP\"],\n    \"_NP\" : [\"I\", \"you\", \"she\"],\n    \"_VP\" : [\"love _NP\", \"hate _NP\"]\n}\n\ndef generate_sentence(grammar):\n    # Select random start symbol\n    symbol = random.choice(list(grammar.keys()))\n    # Generate a new sentence\n    sentence = [symbol]\n    while symbol in grammar.keys():\n        # Choose a random alternative \n        # of the current symbol\n        alternatives = grammar[symbol]\n        alternative = random.choice(alternatives)\n        # Create a list of symbols from \n        # the chosen alternative\n        alternative_symbols = alternative.split()\n        # Add the symbols to the sentence\n        sentence.extend(alternative_symbols)\n        # Get the next symbol\n        symbol = sentence[-1]\n    \n    # Add a fullstop and return the sentence\n    sentence[0] = sentence[0].capitalize()\n    sentence.append(\".\")\n    return \" \".join(sentence)\n\nif __name__ == '__main__':\n    output = generate_sentence(grammar)\n    print(output) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    \"\"\"Calculates the factorial of `n` using an optimized approach. \"\"\"\n    result = 1\n    for i in range(2,n+1):\n        result *= i\n    return result\n\nif __name__ == '__main__':\n    print(factorial(4)) # 24 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    result = 1\n    for x in range(2, n + 1):\n        result = result * x\n    return result\n\nfor n in range(1, 11):\n    print(n, \"! =\", factorial(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\n\n# Label the fruits\nfruits = [\"apple\", \"orange\", \"banana\", \"mango\", \"strawberry\", \"peach\"]\nlabels = [\"APPLE\", \"ORANGE\", \"BANANA\", \"MANGO\", \"STRAWBERRY\", \"PEACH\"]\n\n# Split data into train and test sets\ntrain_data = fruits[:int(len(fruits)*0.8)]\ntest_data = fruits[int(len(fruits)*0.8):]\n\n# Create tuple pairs of train and test data\ntrain_data = list(zip(train_data, labels)) \ntest_data = list(zip(test_data, labels)) \n\n# Train classifier\nclassifier = nltk.NaiveBayesClassifier.train(train_data)\n\n# Test classifier\naccuracy = nltk.classify.accuracy(classifier, test_data)\n\n# Classify a new fruit\nfruit = \"kiwi\"\nfruit_class = classifier.classify(fruit)\nprint(f'The fruit {fruit} is classified as {fruit_class}.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nImplement a Stack data structure in Python\n\"\"\"\n\nclass Stack:\n    def __init__(self):\n        self.stack = []\n\n    def push(self, data):\n        self.stack.append(data)\n\n    def pop(self):\n        if len(self.stack) == 0:\n            return None\n        return self.stack.pop(-1)\n  \n    def peek(self):\n        if len(self.stack) == 0:\n            return None\n        return self.stack[-1]\n\nif __name__ == \"__main__\":\n    stack = Stack()\n    stack.push(1)\n    stack.push(2)\n    stack.push(3)\n    stack.push(4)\n    print(\"Peek:\", stack.peek())\n    print(\"Pop:\", stack.pop()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def solve(eq):\n    lhs_x = eq.split(\"=\")[0]\n    rhs = float(eq.split(\"=\")[1])\n    x = float(lhs_x.split(\"+\")[0].split(\"x\")[0])\n    constant = float(lhs_x.split(\"+\")[1])\n    return (rhs - constant) / x\n\nif __name__ == \"__main__\":\n    eq = \"2x + 3 = 5\"\n    print(solve(eq)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def to_title_case(text):\n    words = text.split()\n    title_case_words = [word.capitalize() for word in words]\n\n    return \" \".join(title_case_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: public class ListPrinter {\n    public static void printList(List<Object> lst) {\n        for (Object item : lst) {\n            System.out.println(item);\n        }\n    }\n} but is not the same. just give one example and only return the code."}
