{"prompt": "make some code that functions the same as the following code: def times_two(list):\n    \"\"\"\n    Takes a list of numbers and returns a list with each number multiplied by 2\n\n    Parameters:\n    list (list): The list of numbers\n\n    Returns:\n    result (list): The list with each number multiplied by 2\n    \"\"\"\n\n    result = []\n\n    for num in list:\n        result.append(num * 2)\n\n    return result\n\nprint(times_two([1,2,3,4,5]))\n// [2,4,6,8,10] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime \n\ncurrent_time = datetime.datetime.now()\n\nprint('Current Time in 12-hour format :', current_time.strftime(\"%I:%M %p\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request\n\napp = Flask(name)\n\n@app.route('/api', methods=['POST'])\ndef post_data():\n data = request.get_json()\n print(data)\n return 'Data printed in console'\n\nif name == 'main':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Binary Search \n\ndef binary_search(list, target): \n    low = 0\n    high = len(list) - 1\n    while low <= high: \n        mid = (low + high) // 2\n        if list[mid] == target: \n            return mid \n        elif list[mid] > target: \n            high = mid - 1\n        else: \n            low = mid + 1\n    return -1\n\n# Test array \nlist = [1,2,3,4,5,6,7]\ntarget = 4\n\n# Function Call \nresult = binary_search(list, target) \nif result != -1: \n    print(\"Element is present at index\", str(result)) \nelse: \n    print(\"Element is not present in array\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(s):\n reversed_string = ''.join(reversed(s))\n return reversed_string\n\nstring = 'Hello World!'\nreversed_string = reverse_string(string)\nprint(reversed_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ToDoList:\n def __init__(self):\n  self.tasks = []\n \n def print(self):\n  for i in range(len(self.tasks)):\n   print(f'{i+1}. {self.tasks[i]}')\n \n def add(self, task):\n  self.tasks.append(task)\n \n def edit(self, index, new_task):\n  self.tasks[index] = new_task\n \n def delete(self, index):\n  del self.tasks[index] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_lists(list_a, list_b):\n    a_not_in_b = []\n    b_not_in_a = []\n    \n    for a in list_a:\n        if a not in list_b:\n            a_not_in_b.append(a)\n            \n    for b in list_b:\n        if b not in list_a:\n            b_not_in_a.append(b)\n            \n    return a_not_in_b, b_not_in_a but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Get the input string\nstring = \"Hello World!\"\n\n# Modify the string\nvowels = \"aeiou\"\nnew_string = \"\"\nfor char in string:\n    if char in vowels:\n        new_string += char\n\n# Print the string\nprint(new_string)\n# prints \"eoo\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def evaluate_expr(expr):\n # Reverse the expression \n expr = expr[::-1] \n  \n # Stack to store integer values. \n values = [] \n  \n # Stack to store operators. \n ops = [] \n  \n # Traverse the given expression. \n i = 0\n while i < len(expr): \n   # Current character is a whitespace, skip it. \n   if expr[i] == ' ': \n     i += 1\n     continue\n   # Current character is an opening  \n   # brace, push it to 'ops' \n   elif expr[i] == '(': \n     ops.append(expr[i]) \n   # Current character is a number, push  \n   # it to stack for numbers. \n   elif expr[i].isdigit(): \n     val = 0\n     # There may be more than one \n     # digits in number. \n     while (i < len(expr) and\n            expr[i].isdigit()): \n       val = (val * 10) + int(expr[i]) \n       i += 1\n     values.append(val) \n   # Closing brace encountered, solve  \n   # entire brace. \n   elif expr[i] == ')': \n     while (not ops[-1] == '('): \n       val2 = values.pop() \n       val1 = values.pop() \n       op = ops.pop() \n  \n       values.append(str(eval(val1 + op + val2))) \n     # pop opening bracket. \n     ops.pop() \n   # Current character is an operator. \n   else: \n     # While top of 'ops' has same or  \n     # greater precedence to current  \n     # token, which is an operator. \n     # Apply operator on top of 'ops'  \n     # to top two elements in values stack. \n     while(len(ops) != 0 and\n           not ops[-1] == '(' and\n           not isHigherPrecedence(ops[-1], expr[i])): \n  \n       val2 = values.pop() \n       val1 = values.pop() \n       op = ops.pop() \n  \n       values.append(str(eval(val1 + op + val2))) \n     # Push current token to 'ops'. \n     ops.append(expr[i]); \n  \n   i += 1\n  \n # Entire expression has been parsed at this \n # point, apply remaining ops to remaining \n # values. \n while len(ops) != 0: \n     val2 = values.pop() \n     val1 = values.pop() \n     op = ops.pop() \n  \n     values.append(str(eval(val1 + op + val2))) \n  \n # Top of 'values' contains result, return it. \n return values[-1]\n\ndef isHigherPrecedence(op1, op2): \n if (op1 == '+' or op1 == '-') and (op2 == '*' or op2 == '/'): \n   return False\n else: \n   return True\n\nif __name__ == \"__main__\": \n expr = \"2-(8-3)\"\n print(evaluate_expr(expr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence_list = sentence.split(' ')\nres = []\nfor word in sentence_list:\n    res.append((word, sentence_list.count(word)))\n\n# remove duplicates\nres = set(res)\nprint(list(res)) \n# [(\u2018lazy\u2019, 1), (\u2018dog\u2019, 1), (\u2018brown\u2019, 1), (\u2018jumps\u2019, 1), (\u2018quick\u2019, 1), (\u2018the\u2019, 2), (\u2018over\u2019, 1), (\u2018fox\u2019, 1)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nWrite a Python program to check whether a given year is a leap year or not\n\"\"\"\n\n# Function to check leap year \ndef is_leap_year(year): \n    leap = False\n    \n    # Write condition for the leap year \n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                leap = True\n            else: \n                leap = False\n        else: \n            leap = True\n  \n    return leap \n\n# main \nif __name__ == \"__main__\": \n    year = 2020\n  \n    leap = is_leap_year(year) \n  \n    if leap: \n        print(year, \" is a leap year\")\n    else: \n        print(year, \" is not a leap year\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def split_str(string, delimeter): \n    return string.split(delimeter) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: user_input = input('Enter a string: ')\n\nrev_string = user_input[::-1]\n\nprint(f\"The reversed string is: {rev_string}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sentiment_analysis(sentence):\n \"\"\"Detects the sentiment of a given sentence.\n \n Args:\n sentence (string): The sentence to analyze.\n \n Returns:\n str: The sentiment of the given sentence (positive, neutral, or negative).\n \"\"\"\n \n # Lib imports\n import textblob\n \n blob = textblob.TextBlob(sentence)\n sentiment = blob.sentiment.polarity\n \n if sentiment < 0.0:\n return 'Negative'\n elif sentiment == 0.0:\n return 'Neutral'\n else:\n return 'Positive'\n \n \nsentiment = sentiment_analysis('The food was great and the service was excellent.')\nprint(sentiment) # Positive but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num):\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n    else:\n        return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_random_string():\n    return ''.join(random.choices(string.ascii_lowercase, k=10))\n\nprint(generate_random_string()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_profit(stock_prices):\n    max_profit = 0\n    for i in range(len(stock_prices) - 1):\n        for j in range(i + 1, len(stock_prices)):\n            if stock_prices[j] - stock_prices[i] > max_profit:\n                max_profit = stock_prices[j] - stock_prices[i]\n    return max_profit\n\nif __name__ == \"__main__\":\n    stock_prices = [7, 1, 5, 3, 6, 4]\n    result = max_profit(stock_prices)\n    print(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt \n  \ndef plot_histogram(data): \n    plt.hist(data) \n    plt.title(\"Histogram\") \n    plt.xlabel(\"Values\") \n    plt.ylabel(\"Frequency\") \n    plt.show() \n\nif __name__ == \"__main__\": \n    data = [1, 2, 5, 7, 9, 4, 5, 9, 10, 12] \n    plot_histogram(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_space(string):\n    return string.replace(\" \", \"_\")\n\nreplace_space(\"The quick brown fox\") # Outputs: The_quick_brown_fox but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n \n# Create a dataframe\ndataframe = pd.DataFrame(data={'Value': [1, 2, 3, 4, 5]}, index=[5, 4, 3, 2, 1])\n\n# Print the dataframe sorted by its index in descending order\nprint(dataframe.sort_index(ascending=False)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def length_strings(string_list):\n  new_list = []\n  for string in string_list:\n    new_list.append(len(string))\n  return new_list\n\nprint(length_strings([\"apple\", \"banana\", \"mango\"])) # [5, 6, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\n\ndef remove_punctuation(text):\n    return text.translate(str.maketrans('', '', string.punctuation))\n\nprint(remove_punctuation(\"The quick brown fox jumps over the lazy dog.\"))\n# output: The quick brown fox jumps over the lazy dog but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: objects = [\n    {'name': 'a', 'value': None},\n    {'name': 'b', 'value': None},\n    {'name': 'c', 'value': None}\n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n\n    def isEmpty(self):\n        return self.items == [] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def selection_sort(arr):\n n = len(arr)\n \n for i in range(n): \n # Find the minimum element in remaining  \n # unsorted array \n min_idx = i \n for j in range(i+1, n): \n if arr[min_idx] > arr[j]: \n min_idx = j \n    \n # Swap the found minimum element with  \n # the first element         \n arr[i], arr[min_idx] = arr[min_idx], arr[i] \n  \n# Driver code to test above \narr = [5, 7, -2, 9, 3]\n  \nselection_sort(arr) \n  \nprint (\"Sorted array\") \nfor i in range(len(arr)): \n print(\"%d\" %arr[i]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def repeat_string(string, num_times):\n    return string*num_times\n\nresult = repeat_string(\"Hello!\", 3)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Lists in Python are sequences of different data types that are ordered and mutable. They allow us to store multiple items in a single variable. Dictionaries are unordered sets of key-value pairs that are used for storing data. Keys must be unique and of immutable data type whereas values may not be. Dictionaries are used for mapping purposes and can be used for more powerful data access. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef hangman(word):\n guesses = 0\n guessed_letters = \"\"\n chances = 5\n \n while chances > 0:\n     chance = True\n     for letter in word:\n         if letter in guessed_letters:\n             print(letter, end=' ')\n         else:\n             print('_', end=' ')\n             chance = False\n \n     if chance:\n         print('You won!')\n         break\n \n     guess_letter = input('Guess a letter: ')\n     guessed_letters += guess_letter\n \n     if guess_letter not in word:\n         chances -= 1\n         print('Incorrect. You have {} chances left.'.format(chances))\n \n if chances == 0:\n     print('You lost! \\nThe word is {}.'.format(word))\n\n# Words\nwords = ['cat', 'mouse', 'lion', 'dog']\nword = random.choice(words)\nhangman(word) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_nth_occurrence(string, substring, n):\nindex = -1\n\nwhile n > 0:\n    n -= 1\n    index = string.find(substring, index+1)\n\nif index == -1:\n    return None\nelse:\n    return index\n\nif __name__ == \"__main__\":\n    result = find_nth_occurrence(\"Hello World\", \"l\", 3)\n    print(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compact_list(array):\n    return list(set(array)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(list):\n  new_list = []\n  for item in list:\n    if item not in new_list:\n      new_list.append(item)\n  return new_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(number): \n    if number <= 1: \n        return False \n\n    for i in range(2, number): \n        if number % i == 0: \n            return False \n\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_list(L):\n    for item in L:\n        print(item)\n\nL = [1,2,3,4,5]\nprint_list(L) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n \ndef euclidean_distance(point1, point2):\n '''\n Calculates the euclidean distance between two points\n '''\n \n distance = 0\n \n for i in range(len(point1)):\n distance += (point1[i] - point2[i])**2\n \n return math.sqrt(distance)\n  \ndef knn(x_train, y_train, x_test, k):\n '''\n Performs K nearest Neighbors algorithm on the given data\n '''\n \n distances = []\n targets = []\n \n for i in range(len(x_train)):\n \n dist = euclidean_distance(x_test, x_train[i])\n distances.append([dist, i])\n \n distances = sorted(distances)\n \n for i in range(k):\n targets.append(y_train[distances[i][1]])\n \n return targets\n \n# Getting predictions for a test case\npredictions = knn(x_train, y_train, x_test, k) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef predict_motion(pos, vel, acc, dt):\n  # predict position\n  pos_pred = pos + vel * dt + 0.5 * acc * dt ** 2 \n  \n  #predict velocity\n  vel_pred = vel + acc * dt\n  \n  return pos_pred, vel_pred\n\n# test code\npos = np.array([0.0, 0.0])\nvel = np.array([1.0, 1.0])\nacc = np.array([1.0, 0.0])\ndt = 0.1\npos_pred, vel_pred = predict_motion(pos, vel, acc, dt)\nprint(pos_pred, vel_pred) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_list(numbers):\n reversed_list = numbers[::-1]\n print(reversed_list)\n return sum(reversed_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import the python library for sending the automated message\nimport smtplib \n\n# initiate the server parameters\nserver = smtplib.SMTP('smtp.example.com', 587)\nserver.starttls()\nserver.login('username', 'password') \n\n# set the message to be sent\nmessage = 'Welcome to our site'\n  \n# ask the user to enter a password\npass_input = input('Please enter your password: ')\n\n# if the password is correct, send the automated message\nif (pass_input == '<correct-password>'):\n    server.sendmail('from_email@example.com', 'to_email@example.com', message)\n\nserver.quit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_palindrome(string_list):\n    for string in string_list:\n        if string == string[::-1]:\n            return True\n    return False\n\nresult = check_palindrome([\"civic\", \"apple\", \"racecar\"])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import scipy.optimize as opt\n\ndef objective(x):\n return sum([x[i]**2 for i in range(len(x))])\n\ndef constraint1(x):\n return 16 - x[0]**2 - x[1]**2 - x[2]**2\n\ncons = [{'type': 'ineq','fun': constraint1}]\n\nx = [0, 0, 0]\n\nsolution = opt.minimize(objective, x, constraints=cons)\n\nprint(solution) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def strip_whitespace(string):\n  return string.replace(\" \", \"\")\n\nprint(strip_whitespace('Hello World')) # HelloWorld but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nclass CurrencyConverter:\n    def __init__(self, source_currency, target_currency, amount):\n        self.source_currency = source_currency\n        self.target_currency = target_currency\n        self.amount = amount\n\n    def convert(self):\n        \"\"\"\n        This method returns the converted amount\n        \"\"\"\n        url = f\"https://api.exchangeratesapi.io/latest?base={self.source_currency}&symbols={self.target_currency}\"\n        response = requests.get(url)\n        data = response.json()\n        rate = data[\"rates\"][self.target_currency]\n\n        return rate * self.amount\n\n\n# Usage sample\nconverter = CurrencyConverter(\"USD\", \"EUR\", 100)\nprint(converter.convert()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\nX = np.array([1,2,3,4,5])\nY = np.array([1,4,9,16,25])\n\n# calculate coefficients\ndef coefficients(x,y):\n    # number of observations/points\n    n = np.size(x)\n \n    # mean of x and y vector\n    m_x, m_y = np.mean(x), np.mean(y)\n \n    # calculating cross-deviation and deviation about x\n    SS_xy = np.sum(y*x) - n*m_y*m_x\n    SS_xx = np.sum(x*x) - n*m_x*m_x\n \n    # calculating regression coefficients\n    b_1 = SS_xy / SS_xx\n    b_0 = m_y - b_1*m_x\n \n    return(b_0, b_1)\n \n# function to plot regression line\ndef regression_line(x, y, b):\n    # plotting the actual points as scatter plot\n    plt.scatter(x, y, color = \"m\",\n               marker = \"o\", s = 30)\n \n    # predicted response vector\n    y_pred = b[0] + b[1]*x\n \n    # plotting the regression line\n    plt.plot(x, y_pred, color = \"g\")\n \n    # putting labels\n    plt.xlabel('x')\n    plt.ylabel('y')\n \n    # function to show plot\n    plt.show()\n\n# coefficients\nb = coefficients(X,Y)\nprint(\"Coefficients:\\nb_0 = {} \\nb_1 = {}\".format(b[0],b[1]))\n \n# plotting regression line\nregression_line(X,Y,b) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize_intervals(intervals):\n    intervals.sort(key=lambda x: x[1]) # sorts intervals by their end time\n \n    optimized = []\n    current_end = 0\n \n    for start, end in intervals:\n        if start >= current_end:\n            optimized.append([start, end])\n            current_end = end\n \n    return optimized\n\nintervals = [[1,3], [2,4], [5,7], [6,8]]\nprint(optimize_intervals(intervals)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_table(data):\n table = '<table>'\n for row in data:\n table += '<tr>'\n for cell in row:\n table += '<td>{}</td>'.format(cell)\n table += '</tr>'\n table += '</table>'\n\n return table\n\nprint(generate_table(data))\n# Output\n<table><tr><td>Name</td><td>Age</td></tr><tr><td>John</td><td>20</td></tr><tr><td>Jane</td><td>30</td></tr><tr><td>Tom</td><td>40</td></tr></table> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_fibonacci_sequence(n):\n    series = [0,1]\n    while len(series) < n:\n        series.append(sum(series[-2:]))\n    return series\n\nprint(get_fibonacci_sequence(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def collect_even_numbers(nums):\n    even_nums = []\n    for num in nums:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(list):\n resultant_list = []\n for item in list:\n if item not in resultant_list:\n resultant_list.append(item)\n return resultant_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findMaxNum(a, b, c):\n    maxNum = a\n    if b > maxNum:\n        maxNum = b\n    if c > maxNum:\n        maxNum = c\n    return maxNum\n\nmaxNum = findMaxNum(5, 11, 6)\nprint(maxNum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model \n        self.year = year\n        self.speed = 0\n\n    def accelerate(self):\n        self.speed += 10\n\n    def brake(self):\n        self.speed -= 10\n\n    def get_speed(self):\n        return self.speed but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_password(length):\n # Generate a random password\n # that contains at least one uppercase character, one lowercase character, one digit, and one special character\n \n # Generate a random string of uppercase and lowercase characters\n s = \"\".join(random.sample(string.ascii_letters, length))\n \n # Generate a single random digit\n d = random.choice(string.digits)\n \n # Generate a single random special character\n p = random.choice(string.punctuation)\n \n # Generate the final password\n password = s + d + p\n \n return password\n \n if __name__ == '__main__':\n password = generate_password(8)\n print(password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_largest_divisible_number(m, n):\n num = 0\n while True:\n num += max(m, n)\n if num % m == 0 and num % n == 0:\n return num\n\nprint(find_largest_divisible_number(8, 6)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quick_sort(array):\n    if len(array) < 2:\n        return array\n    pivot = array[0]\n    less = [i for i in array[1:] if i <= pivot]\n    greater = [i for i in array[1:] if i > pivot]\n    return quick_sort(less) + [pivot] + quick_sort(greater) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndata = '{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}'\n\nparsed_data = json.loads(data)\nprint(parsed_data) # {'name': 'John', 'age': 30, 'city': 'New York'} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_int_asc(arr):\n    arr.sort()\n    return arr\n\nprint(sort_int_asc([3, 7, 8, 1, 5, 4])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_ascending(nums):\n    n = len(nums)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if nums[j] > nums[j+1] :\n                nums[j], nums[j+1] = nums[j+1], nums[j] \n    return nums but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_divisible_numbers(n):\n  divisibles = []\n  for i in range(1, n+1):\n    if i % 3 == 0:\n      divisibles.append(i)\n  return divisibles\n\nfind_divisible_numbers(20) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def hexToASCII(hexStr):\n num = int(hexStr, 16)\n return chr(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Fisher-Yates algorithm to generate a random permutation of numbers from 0 to n-1\n# Time Complexity: O(n)\n\nimport random\n\ndef fisher_yates(n):\n    # Create an array to hold the permutation\n    perm = [x for x in range(0, n)]\n \n    # Start from the last element and swap and decrease \n    # index by one\n    for i in range(n-1, 0, -1):\n        # Pick a random index from 0 to i\n        j = random.randint(0, i)\n \n        # Swap the random element with current element\n        temp = perm[i]\n        perm[i] = perm[j]\n        perm[j] = temp\n    return perm\n\n# Sample call\nprint(fisher_yates(10))\n# Output: [4, 2, 0, 8, 5, 6, 9, 3, 1, 7] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def split_words(s): \n    words = s.split(\" \") \n    return words  \ns = \"Hello,World!\"\nwords = split_words(s) \nprint(words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def twoSum(arr, sum):\n    for i in range(len(arr) - 1):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                return True\n\n    return False\n\nprint(twoSum(arr, sum))\n# Output: True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import packages\nimport pandas as pd \nfrom sklearn.linear_model import LogisticRegression \n\n#load student profile data\nstudent_profile_list = [{'GPA': 3.4, 'Major': 'Computer Science', 'Interests': ['Web Development', 'Data Science']}, \n{'GPA': 3.7, 'Major': 'Business', 'Interests': ['Marketing', 'Entrepreneurship']}, \n{'GPA': 2.9, 'Major': 'Biology', 'Interests': ['Genetics', 'Neuroscience']}]\n\n#create dataframes for student profile\ndata = pd.DataFrame(student_profile_list)\n\n#preprocess the data to use in logistic regression\ndummies = pd.get_dummies(data['Major']) \ndata = data.drop(['Major'], axis = 1) \ndata = pd.concat([data, dummies], axis = 1) \n\n#instantiate the logistic regression\nlogreg = LogisticRegression(random_state = 0)   \n\n#fit the model\nlogreg.fit(data[['GPA', 'Computer Science', 'Business', 'Biology']], data['Interests']) \n\n#predict whether a student will take a course\n#Input student profile\nstudent_profile = {'GPA': 3.0, 'Major': 'Biology'}\nstudent_profile = pd.DataFrame([student_profile]) \ndummies = pd.get_dummies(student_profile['Major']) \nstudent_profile = student_profile.drop(['Major'], axis = 1) \nstudent_profile = pd.concat([student_profile, dummies], axis = 1) \nprediction = logreg.predict(student_profile[['GPA', 'Computer Science', 'Business', 'Biology']])\n\n#Print the prediction\nprint(f'The student is likely to take a course related to {prediction[0]}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_two_int(a, b):\n    return a + b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pyswarms as ps\n \ndef optimize(model, X, y):\n    # Configure hyperparameters\n    options = {'c1': 0.5, 'c2': 0.3, 'w': 0.9}\n \n    # Compute the hyperparameters\n    optimizer = ps.single.LocalBestPSO(n_particles=10, \n                                       dimensions=X.shape[1], \n                                       options=options)\n \n    # Perform the search\n    cost, pos = optimizer.optimize(model, X, y)\n \n    # Create and return the optimized model\n    hyperparameters = {'bias': pos[0],\n                       'weights': pos[1:]}\n \n    optimized_model = model(**hyperparameters)\n \n    return optimized_model but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_dict = dict(zip(['foo', 'bar', 'baz', 'qux'], \n                  range(len(['foo', 'bar', 'baz', 'qux']))))\n\nprint(my_dict) # {'foo': 0, 'bar': 1, 'baz': 2, 'qux': 3} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\ntext = soup.get_text()\n\nprint(text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_string(string1, string2):\n    if len(string1) > len(string2):\n        return string1\n    else:\n        return string2\n\nstring1=\"Python\"\nstring2=\"Programming\"\n\nprint(longest_string(string1, string2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def encryption(message, shift): \n    cipher = '' \n    # traverse message \n    for char in message: \n        # Encrypt uppercase characters\n        if (char.isupper()): \n            cipher += chr((ord(char) + shift - 65) % 26 + 65) \n  \n        # Encrypt lowercase characters\n        else: \n            cipher += chr((ord(char) + shift - 97) % 26 + 97) \n    return cipher\n  \n# Driver code \nmessage = 'Hello World'\nshift = 4\n\nprint(\"Encrypted Message: \", encryption(message, shift)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def normalize_string(s):\n    return s.lower().strip() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import xgboost as xgb\nimport numpy as np\n\n# Read the data\ndata = np.genfromtxt('car-data.csv', delimiter=',', skip_header=0)\nX, y = data[:,:-1], data[:,-1]\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_ test = train_test_split(X, y, \ntest_size=0.2, random_state=0)\n\n# train the XGBoost model\nmodel = xgb.XGBRegressor().fit(X_train, y_train)\n\n# make predictions \npredicted = model.predict(X_test)\n\n# evaluate model\naccuracy = mean_squared_error(y_test, predicted) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def shortest_path(graph, start, end):\n    # keep track of all visited nodes\n    explored = []\n    # keep track of nodes to be checked\n    queue = [[start]]\n \n    # return path if start is goal\n    if start == end:\n        return \"That was easy! Start = goal\"\n \n    # keeps looping until all possible paths have been checked\n    while queue:\n        # pop the first path from the queue\n        path = queue.pop(0)\n        # get the last node from the path\n        node = path[-1]\n        if node not in explored:\n            neighbours = graph[node]\n            # go through all neighbour nodes, construct a new path and\n            # push it into the queue\n            for neighbour in neighbours:\n                new_path = list(path)\n                new_path.append(neighbour)\n                queue.append(new_path)\n                # return path if neighbour is goal\n                if neighbour == end:\n                    return new_path\n \n            # mark node as explored\n            explored.append(node)\n \n    # in case there's no path between the two nodes\n    return \"So sorry, but a connecting path doesn't exist :(\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: user_input = input('Please enter a string: ')\n \nwords = user_input.split(' ')\n \nreverse_words = [word[::-1] for word in words]\n \nprint(' '.join(reverse_words)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_fibonacci(num): \n    a = 0\n    b = 1\n    print(a, end =' ') \n    print(b, end =' ') \n    for i in range(2,num): \n        c = a + b \n        a = b \n        b = c \n        print(c, end =' ') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import base64\n\n# Function to encode\ndef encode(text):\n encoded_text = base64.b64encode(text.encode('utf-8'))\n return encoded_text\n\n# Function to decode\ndef decode(text):\n decoded_text = base64.b64decode(text).decode('utf-8')\n return decoded_text\n\n# Main function\ndef main():\n text = \"Hello World!\"\n encoded_text = encode(text)\n print(encoded_text)\n\n decoded_text = decode(encoded_text)\n print(decoded_text)\n\nif __name__ == '__main__':\n main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class StringCompare:\n    def __init__(self, string1, string2):\n        self.string1 = string1\n        self.string2 = string2\n\n    def compare_strings(self):\n        report = {}\n        for char in self.string1:\n            if char in self.string2:\n                if char in report:\n                    report[char] += 1\n                else:\n                    report[char] = 1\n        return report but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from nltk import sent_tokenize\n\ndef summarize(text, limit=5):\n    # Splitting the text into sentences\n    sentences = sent_tokenize(text)\n\n    # Generating word frequency table\n    word_frequencies = {}\n    for sentence in sentences:\n        words = sentence.split()\n        for word in words:\n            if word not in word_frequencies.keys():\n                word_frequencies[word] = 1\n            else:\n                word_frequencies[word] += 1\n\n    # Generating word scores\n    word_scores = {}\n    for word in word_frequencies.keys():\n        score = 1 / word_frequencies[word]\n        word_scores[word] = score\n\n    # Generating sentence scores\n    sentence_scores = {}\n    for sentence in sentences:\n        sentence_wordcount = len(sentence.split())\n        sentence_wordscore = 0\n        for word in sentence.split():\n            if word in word_scores.keys():\n                sentence_wordscore += word_scores[word]\n        sentence_score = sentence_wordscore / sentence_wordcount\n        sentence_scores[sentence] = sentence_score\n\n    # Generating summary\n    summary = ''\n    sorted_sentences = sorted(sentence_scores.items(),\n                              key=lambda x: x[1],\n                              reverse=True)\n    for s in sorted_sentences[:limit]:\n        summary += f'{s[0]}\\n'\n\n    return summary but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_prime_numbers(lower, upper):\n    result = []\n    # check all numbers from lower boundary to upper boundary\n    for num in range(lower, upper + 1):\n        # check if the number is prime\n        if is_prime(num):\n            result.append(num)\n    return result\n\ndef is_prime(num):\n    for i in range(2, num):\n        if (num % i == 0):\n            return False\n    return True\n\nprint(find_prime_numbers(0, 15))\n\n# Output: [2, 3, 5, 7, 11, 13] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def average_height(lst):\n    total = 0\n    for height in lst:\n        total += height\n    \n    return total / len(lst)\n\nresult = average_height([1.78, 1.90, 1.75, 1.82])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Dictionary of numbers and words\nDAYS = {\n    1:'one',\n    2:'two',\n    3:'three',\n    4:'four',\n    5:'five',\n    6:'six',\n    7:'seven',\n    8:'eight',\n    9:'nine',\n    10:'ten',\n}\n\ndef num_to_str(num):\n    if num in DAYS:\n        return DAYS[num]\n    else:\n        return \"invalid number\"\n\nif __name__ == '__main__':\n    num = 5\n    print(num_to_str(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [10, 20, 30, 40, 50] \n  \n# reversing the list \nlist.reverse() \n  \n# printing the reversed list \nprint (\"The reversed list is : \" +  str(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quick_sort(array):\n  if len(array) < 2:\n    # base case, arrays with 0 or 1 element are already \"sorted\"\n    return array\n  else:\n    pivot = array[0]\n    # sub-array of all the elements less than the pivot\n    less = [i for i in array[1:] if i <= pivot]\n    # sub-array of all the elements greater than the pivot\n    greater = [i for i in array[1:] if i > pivot]\n    \n    # Inserting new code to divide and conquer\n    if (len(less) > 1 and len(greater) > 1):\n      return quick_sort(less[:len(less) // 2]) + quick_sort(less[len(less) // 2:]) + [pivot] + quick_sort(greater[:len(greater) // 2]) + quick_sort(greater[len(greater) // 2:])\n    else:\n      return quick_sort(less) + [pivot] + quick_sort(greater) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\nfrom tensorflow import keras\n\n# Define model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),\n    tf.keras.layers.GlobalAveragePooling1D(),\n    tf.keras.layers.Dense(24, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\n# Compile Model\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\n\n# Train the model\nmodel.fit(training_padded, training_labels, epochs=num_epochs, validation_data=(testing_padded, testing_labels))\n\n# Make predictions\nsentiment = model.predict(testing_padded) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insert_list(list, index, elements): \n    return (list[0:index] + elements + list[index:]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(list):\n    new_list = []\n    previous_item = None\n    for item in list:\n        if item != previous_item:\n            new_list.append(item)\n        previous_item = item\n    return new_list\n\nnew_list = remove_duplicates(list)\nprint(new_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_html_table():\n    html_table = \"<table>\\n\"\n    for i in range(5):\n        html_table += \"  <tr>\\n\"\n        for j in range(3):\n            html_table += \"    <td>{}</td>\\n\".format(random.randint(1, 100))\n        html_table += \"  </tr>\\n\"\n    html_table += \"</table>\"\n    return html_table\n\nprint(generate_html_table()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def partition(arr, low, high): \n    i = (low-1)\n    pivot = arr[high]\n  \n    for j in range(low, high): \n        if arr[j] < pivot: \n            i += 1\n            arr[i],arr[j] = arr[j],arr[i] \n  \n    arr[i+1],arr[high] = arr[high],arr[i+1] \n    return i+1\n  \ndef quick_sort(arr, low, high): \n    if low < high: \n        pi = partition(arr, low, high) \n        quick_sort(arr, low, pi-1) \n        quick_sort(arr, pi+1, high) \n\nresult = quick_sort([1, 5, 7, 0, 3], 0, 4) \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\njson_string = '{\"name\": \"John\", \"age\": 30, \"is_married\": false}'\n\ndata = json.loads(json_string)\nname = data['name']\nage = data['age']\nis_married = data['is_married']\n\nprint('Name: ', name)\nprint('Age: ', age)\nprint('Is Married: ', is_married) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\nimport operator\n \ninput_string = \"\"\"top\n \nPID\tUSER\t  PR\tNI\tVIRT\tRES\tSHR\tS\t%CPU\t%MEM\tTIME+\tCOMMAND\n 1\troot\t  20\t0\t 759236\t9740\t8116\tS\t0.0\t 0.0\t 0:00.68\tinit\n[truncated for brevity]\n\n885\tdnsmasq\t 20\t0\t 97128\t8108\t5556\tS\t0.0\t0.1\t 0:00.37\tdnsmasq\n 886\tdbus-daem\t 20\t0\t  12744\t1420\t1204\tS\t0.0\t 0.0\t 0:00.02\tdbus-daemon\n 887\tNetworkMa\t 20\t0\t 71965\t3164\t2152\tS\t0.0\t 0.1\t 0:00.08\tNetworkManager\n 888\tavahi-daem\t 20\t0\t  12088\t1332\t1072\tS\t0.0\t 0.0\t 0:00.00\tavahi-daemon\n 889\tavahi-daem\t 20\t0\t  12084\t1332\t1072\tS\t0.0\t 0.0\t 0:00.00\tavahi-daemon\"\"\"\n\n# Find all of the entries \nprocesses = re.findall(r'(.*?)\\s+(.*?)\\s+(.*?)\\s+(.*?)\\s+(.*?)\\s+(.*?)\\s+(.*?)\\s+(.*?)\\s+(.*?)\\s+(.*?)\\s+(.*?)\\s+(.*?)\\s+', input_string)\n\n# Create a list of tuples for each process \nprocess_list = [(process[4],process[5], process[0], process[11]) for process in processes]\n\n# Sort the list based on memory \nsorted_list = sorted(process_list,key=operator.itemgetter(1), reverse=True)\n\n# List the top 5 processes\nprint(\"Top 5 processes taking the most memory:\")\nfor i in range(5):\n    print(sorted_list[i][2], sorted_list[i][3], \"-\", str(sorted_list[i][1])+\"KB\")\n    \n # Output: \n # Top 5 processes taking the most memory:\n # init init - 9740KB\n # dnsmasq dnsmasq - 8108KB\n # NetworkManager NetworkManager - 3164KB\n # avahi-daemon avahi-daemon - 1332KB\n # avahi-daemon avahi-daemon - 1332KB but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import socket\n\ndef resolve_domain(domain):\n    try:\n        addr = socket.gethostbyname(domain) # Resolve the address by DNS\n        return addr\n    except socket.gaierror: # Raise when the domain name not found\n        return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nGenerate a function for converting JSON data to a Python object\n\"\"\"\n\nimport json\n\ndef json_to_object(json_data):\n    return json.loads(json_data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.tree import DecisionTreeClassifier\nimport numpy as np \n\nX = np.array([features])\ny = np.array([target])\n\nclf_dt = DecisionTreeClassifier()\nclf_dt.fit(X,y)\n\n# Predict class labels\npreds = clf_dt.predict(X) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class LinearRegression:\n    def __init__(self, X, y):\n        self.X = X\n        self.y = y\n    \n    def fit(self):\n        x_mean = self.X.mean()\n        y_mean = self.y.mean()\n        n = len(self.X)\n        \n        m = ( ( ( self.X * self.y).sum() - n*x_mean*y_mean ) ) /( ( ( self.X*self.X ).sum() - n*x_mean*x_mean ))\n        c = y_mean - m*x_mean\n        \n        return m, c\n      \n    def predict(self, m, c, X):\n        y_pred = m*X + c\n        return y_pred but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(string):\n    reversed_string = \"\"\n    for i in range(len(string) - 1, -1 , -1):\n        reversed_string += string[i]\n    return reversed_string\n\nresult = reverse_string('Hello')\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\nimport speech_recognition\nimport time\nfrom gtts import gTTS\nfrom playsound import playsound\nimport webbrowser\nimport os\nimport random\n\ndef reg_and_speak(query):\n \n query = query.lower()\n # recognize speech using Google Speech Recognition\n \n try:\n # for testing purposes, we're just using the default API key\n # to use another API key, use `r.recognize_google(audio, key=\"GOOGLE_SPEECH_RECOGNITION_API_KEY\")`\n # instead of `r.recognize_google(audio)`\n text = r.recognize_google(audio)\n print(text)\n    \n except:\n speech = \"I could not understand it\"\n speak(speech)\n sys.exit()\n    \n \n def speak(speech):\n tts = gTTS(text=speech, lang='en', slow=False)\n # save the file\n tts.save(\"speech.mp3\")\n # play the mp3\n playsound.playsound(\"speech.mp3\", True)\n os.remove('speech.mp3')\n \n while True:\n print('listening...')\n speech_recognition.Microphone(device_index=1)\n r.adjust_for_ambient_noise(source)\n audio = r.listen(source)\n reg_and_speak(audio) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def SumOfSeries(n): \n    seriesSum = 0\n    for num in range(1, n+1): \n        seriesSum += 1/num  \n    return round(seriesSum, 2) \n\n# Driver code \nn = 5\nprint(\"Sum of the series up to number:\", n, \n                    \"is\", SumOfSeries(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def determine_sentiment(text):\n    score = 0\n    for word in text.split(\" \"):\n        if word in positive_words:\n            score += 1\n        elif word in negative_words:\n            score -= 1\n    if score > 0:\n        return \"positive\"\n    elif score < 0:\n        return \"negative\"\n    else:\n        return \"neutral\"\n \n# Test document\ntest_document = \"This is an exciting opportunity that I am looking forward to\"\n \n# Determine sentiment\nsentiment = determine_sentiment(test_document)\nprint(\"Sentiment:\", sentiment)\n# Output: Sentiment: positive but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack():\n    def __init__(self):\n        self.items = []\n\n    def push(self, data):\n        self.items.append(data)\n\n    def pop(self):\n        return self.items.pop()\n\n    def is_empty(self):\n        return self.items == [] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def getIndex(arr, item):\n    for i in range(len(arr)):\n        if arr[i] == item:\n            return i\n    return -1\n\narr = [1,2,3,4,5,6]\nitem = 5\nindex = getIndex(arr, item)\nprint('Index of', item, 'is', index) # index is 4 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: mylist = [1,2,3,4,5,6,7,8,9,10] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \nimport cv2 \n\n# load the model\nnet = cv2.dnn.readNetFromCaffe('model.prototxt', 'weights.caffemodel')\n\n# read the image\nimage = cv2.imread('image.jpg')\n\n# create a blob from the image and feed it into the model\nblob = cv2.dnn.blobFromImage(image, 1/255, (224, 224), (0, 0, 0), swapRB=True, crop=False)\nnet.setInput(blob)\n\n# make predictions and get the class labels\npreds = net.forward()\nclass_labels = ['chair', 'table', 'etc...'] \n\n# loop through and draw bounding boxes for each detected object \nfor index, pred in enumerate(preds.reshape(-1, preds.shape[-1])): \n class_id = np.argmax(pred) \n confidence = pred[class_id] \n if confidence > 0.5: \n  x1, y1, x2, y2 = (dims[index] * 0.5).astype(\"int\") \n  cv2.rectangle(image, (x1, y1), (x2, y2), (0, 255, 0), 1) \n  cv2.putText(image, class_labels[class_id], (x1 + 5, y1 - 5), \n  cv2.FONT_HERSHEY_SIMPLEX, 0.5, \n  (0, 255, 0), 2)\n  \n# display the image\ncv2.imshow('image', image) but is not the same. just give one example and only return the code."}
