{"prompt": "make some code that functions the same as the following code: x = input(\"Enter a number: \")\nx = int(x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Die:\n    def __init__(self):\n        self.faces = [1, 2, 3, 4, 5, 6]\n\n    def roll(self):\n        return random.choice(self.faces) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport matplotlib.pyplot as plt\n\nfrom keras.datasets import mnist\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.utils import to_categorical\n\n# load the MNIST dataset\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n\n# flatten 28*28 images to a 784 vector for each image\nnum_pixels = X_train.shape[1] * X_train.shape[2]\nX_train = X_train.reshape(X_train.shape[0], num_pixels).astype('float32')\nX_test = X_test.reshape(X_test.shape[0], num_pixels).astype('float32')\n\n# normalize inputs from 0-255 to 0-1\nX_train = X_train / 255\nX_test = X_test / 255\n\n# one hot encode outputs\ny_train = to_categorical(y_train)\ny_test = to_categorical(y_test)\n\nnum_classes = y_test.shape[1]\n\n# define the keras model\ndef classification_model():\n # create model\n model = Sequential()\n model.add(Dense(num_pixels, activation='relu', input_shape=(num_pixels,)))\n model.add(Dense(100, activation='relu'))\n model.add(Dense(num_classes, activation='softmax'))\n \n # compile model\n model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n return model\n\n# build the model\nmodel = classification_model()\n\n# fit the model\nmodel.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=10, verbose=2)\n\n# evaluate the model\nscores = model.evaluate(X_test, y_test, verbose=0)\n\nprint('Accuracy: {}% \\n Error: {}'.format(scores[1], 1 - scores[1])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def twoNumberSum(list, k):\n  seen = set()\n  for num in list:\n    if k-num in seen:\n      return [num, k-num]\n    else:\n      seen.add(num)\n  return [] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import urlparse\n\nurl_input = 'https://www.example.com/foo/bar?param1=value1&param2=value2'\nurl_components = urlparse.urlparse(url_input)\n\nurl_components_dict = {\n 'scheme': url_components.scheme,\n 'host': url_components.netloc,\n 'path': url_components.path,\n 'query': url_components.query\n}\n\nprint(url_components_dict)\n\n# outputs\n{\n 'scheme': 'https',\n 'host': 'www.example.com',\n 'path': '/foo/bar',\n 'query': 'param1=value1&param2=value2'\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D\nfrom keras.utils import to_categorical\n\n# Loading the data\nfrom keras.datasets import mnist\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n\n# Making sure the data is in the correct shape\nX_train = X_train.reshape(60000,28,28,1)\nX_test = X_test.reshape(10000,28,28,1)\n\n# Preprocessing the data\nX_train = X_train.astype('float32')\nX_test = X_test.astype('float32')\nX_train /= 255\nX_test /= 255\n\n# Prepare the labels for the model\ny_train = to_categorical(y_train, 10)\ny_test = to_categorical(y_test, 10)\n\n# Creating the neural network\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3, 3),\n activation='relu',\n input_shape=(28, 28, 1)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(10, activation='softmax'))\n\n# Compiling the model\nmodel.compile(optimizer='adam',\n loss='categorical_crossentropy',\n metrics=['accuracy'])\n\n# Training the model\nmodel.fit(X_train, y_train,\n batch_size=128,\n epochs=10,\n verbose=1,\n validation_data=(X_test, y_test))\n\n# Evaluating the model\nscore = model.evaluate(X_test, y_test, verbose=0) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\nimport requests\n\nfrom flask import Flask, request\n\napp = Flask(name)\n\n@app.route('/get_latest_stock_prices')\ndef get_latest_stock_prices():\n stock_info = requests.get('http://finance.yahoo.com/d/quotes.csv?s=MSFT+AAPL+GOOGL+AMZN&f=nsl1op')\n stock_list = stock_info.text.splitlines()\n\n stock_prices = {}\n for stock in stock_list:\n  stock_data = stock.split(',')\n  stock_prices[stock_data[0]] = {\n  'name': stock_data[1],\n  'price': stock_data[2],\n  'open': stock_data[3],\n  'percent_change': stock_data[4]\n  }\n\n return json.dumps(stock_prices)\n \nif name == 'main':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPython(code):\n    keywords = ['for', 'in', 'range', 'print']\n\n    # check for each keyword\n    for keyword in keywords:\n        if keyword not in code:\n            return False\n\n    return True\n\ncode = '''\nfor i in range(10):\n\tprint(i)\n'''\n\nprint(isPython(code))\n# Output: True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef approximate_probability(event, iterations):\n    num_occurences = 0\n    for i in range(iterations):\n        if event():\n            num_occurences += 1\n    return num_occurences / iterations but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: regex = r\"\\bA\\w*\\d\\b\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_permutations(string):\n    # if string is of length 0 or 1\n    if len(string) == 0 or len(string) == 1:\n        return [string]\n\n    res = list()\n    # traverse the string\n    for i in range(len(string)):\n        # remove the character at that index\n        char = string[i]\n        remaining_string = string[:i] + string[i+1:]\n        \n        # recursive call for generating permutations of string\n        for p in generate_permutations(remaining_string):\n            res.append(char + p)\n\n    # return the generated permutations\n    return res but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class ReadData {\n    public static void main(String[] args) throws IOException {\n        String line;\n        BufferedReader reader = new BufferedReader(new FileReader(\"sample.txt\"));\n        while((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n        reader.close();\n    }\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generateNaturalLanguage(db): \n    sentence = \"The person is \" \n    sentence += db[\"Name\"] + \", \" \n    sentence += \"who is \" + str(db[\"Age\"]) + \" years old, \" \n    sentence += \"and works as a \" + db[\"Occupation\"] + \".\"\n\n    return sentence but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(string):\n    reversed_string = \"\"\n    for char in string:\n        reversed_string = char + reversed_string\n    return reversed_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def neighbor_product(arr):\n    # loop through array elements in reverse order\n    for i in range(len(arr)-1, 0, -1):\n        # check if element is odd\n        if arr[i] % 2 == 1:\n            # replace element with product of the previous and next neighbors\n            arr[i] = arr[i-1] * arr[i+1]\n    return arr\n\narr = [1, 3, 5, 7, 9, 11, 13]\n\nupdated_arr = neighbor_product(arr)\nprint(updated_arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import keras\nfrom keras import datasets\n\n(train_images, train_labels), (test_images, test_labels) = datasets.mnist.load_data()\n\ntrain_images = train_images.reshape((60000, 28, 28, 1))\ntrain_images = train_images.astype('float32') / 255\n\ntest_images = test_images.reshape((10000, 28, 28, 1))\ntest_images = test_images.astype('float32') / 255\n\ntrain_labels = keras.utils.to_categorical(train_labels)\ntest_labels = keras.utils.to_categorical(test_labels) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create an empty list of strings\nnumber_strings = []\n\n# Loops through the list of numbers\nfor n in [5, 10, 15]:\n    # Appends a string version of the number to the list\n    number_strings.append(str(n))\n\nprint(number_strings)   # ['5', '10', '15'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef get_board_config(size):\n    board = [[0 for _ in range(size)] for _ in range(size)]\n\n    for i in range(size):\n        for j in range(size):\n            board[i][j] = random.randint(0, 1)\n\n    return board but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_table(n):\n    for i in range(1, 11):\n        print('{0} x {1} = {2}'.format(n ,i , n*i))\n\nprint_table(4) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef gen_random_numbers(n):\n    rand_nums = []    \n    for i in range(n):\n        rand_nums.append(random.uniform(0.0, 1.0))\n    return rand_nums\n\nrand_nums = gen_random_numbers(N)\nprint(rand_nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_dict_by_key(d):\n    \"\"\"Sort a dictionary by key.\"\"\"\n    return {k: d[k] for k in sorted(d)} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_words(list_of_strings):\n    count_dict = dict()\n    for word in list_of_strings:\n        if word in count_dict:\n            count_dict[word] += 1\n        else:\n            count_dict[word] = 1\n\n    return count_dict\n\nlist_of_strings = ['My', 'name', 'is', 'John', 'Doe', 'My', 'name', 'is', 'John']\n\nresult = count_words(list_of_strings)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\n\n# Load the data\ndata = np.load('data.npy')\n\n# Create the pandas DataFrame\ndf = pd.DataFrame(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to check anagram\ndef isAnagram(s1, s2): \n\t# Get lengths of both strings\n\tn1 = len(s1) \n\tn2 = len(s2) \n\t\n\tif n1 != n2: \n\t\treturn False\n\n\t# Create two count arrays and initialize all values as 0 \n\tcount1 = [0] * 26\n\tcount2 = [0] * 26\n\n\t# For each character in input strings, \n\t# increment count in the corresponding count array \n\tfor i in range(n1): \n\t\tcount1[ord(s1[i]) - ord('a')] += 1\n\t\tcount2[ord(s2[i]) - ord('a')] += 1\n\n\t# Compare count arrays \n\tfor i in range(26): \n\t\tif count1[i] != count2[i]: \n\t\t\treturn False\n\t\n\treturn True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(my_list):\n  my_list = list(dict.fromkeys(my_list))\n  return my_list\n  \nlist = [1, 2, 3, 4, 3, 2]\n\nunique_list = remove_duplicates(list)\n\nprint(unique_list) # [1, 2, 3, 4] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_fibonacci_sequence(low, up):\n    \"\"\"\n    Generate a Fibonacci sequence\n    \n    Args:\n        low (int): lower limit\n        up (int): upper limit\n\n    Returns:\n        list: list with Fibonacci sequence\n    \"\"\"\n    if low == up: \n        return [low] \n    else: \n        fib_list = generate_fibonacci_sequence(low, up - 1) \n        fib_list.append(fib_list[-1] + fib_list[-2]) \n    return fib_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nFunction in Python to return the number of possible paths from the top-left to the bottom-right in an mxn matrix\n\"\"\"\ndef num_of_paths(m, n): \n\t\n\t# Create a 2D table to store results of subproblems \n\tcount = [[0 for x in range(m)] for x in range(n)] \n\n\t# Count of paths to reach any cell in first column is 1 \n\tfor i in range(m): \n\t\tcount[i][0] = 1; \n\n\t# Count of paths to reach any cell in first column is 1 \n\tfor j in range(n): \n\t\tcount[0][j] = 1; \n\n\t# Calculate count of paths for other cells in bottom-up manner using\n\t# the recursive solution \n\tfor i in range(1, m): \n\t\tfor j in range(n): \n\n\t\t\t# By uncommenting the last part the code calculatest he total \n\t\t\t# possible paths if the diagonal Movements are allowed \n\t\t\tcount[i][j] = count[i-1][j] + count[i][j-1] #+ count[i-1][j-1]; \n\n\treturn count[m-1][n-1]; \n\n# Driver code\nm = 3\nn = 3\nprint(num_of_paths(m, n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_common_proper_substring(str1, str2):\n    \n    max_len = 0\n    longest_substring = \"\"\n\n    for i in range(len(str1)):\n        length = 0\n        substring = \"\"\n\n        if str1[i] in str2:\n            length += 1\n            substring += str1[i]\n\n            for j in range(i+1, len(str1)):\n                if str1[j] in str2 and str1[j] == str1[j - length]:\n                    length += 1\n                    substring += str1[j]\n                else:\n                    break\n\n        if length > max_len:\n            max_len = length\n            longest_substring = substring\n\n    return longest_substring\n\nstr1 = \"abbcde\"\nstr2 = \"aede\"\nprint(longest_common_proper_substring(str1, str2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_subsequence(sub_list, main_list):\n    i, j = 0, 0\n    n1, n2 = len(sub_list), len(main_list)\n    while i < n1 and j < n2:\n        if sub_list[i] == main_list[j]:\n            i += 1\n        j += 1\n    return i == n1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def split_string(s, char):\n    new_list = s.split(char)\n    return new_list\n\nresult = split_string(\"apple-banana-orange\", \"-\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_numbers(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def detect_pattern(arr):\n    consec_nums = []\n\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1] + 1:\n            # if consecutive numbers are detected \n            # add the number to the list\n            consec_nums.append(arr[i - 1])\n            consec_nums.append(arr[i])\n    \n    return consec_nums but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_basket_combinations(items, basket_limit):\n    list_of_combinations = []\n    if len(items) == 0:\n        return list_of_combinations\n\n    items.sort()\n    start_ind = 0\n    backtrack(start_ind, items, basket_limit, list_of_combinations, [])\n    return list_of_combinations\n\ndef backtrack(start_ind, items, basket_limit, list_of_combinations, curr_comb):\n    if sum(curr_comb) > basket_limit:\n        return\n    if sum(curr_comb) <= basket_limit:\n        list_of_combinations.append(curr_comb.copy())\n    for i in range(start_ind, len(items)):\n        curr_comb.append(items[i])\n        backtrack(i+1, items, basket_limit, list_of_combinations, curr_comb)\n        curr_comb.pop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def searchWord(text, word):\n  return word in text\n\ntext = \"the quick brown fox jumps over the lazy dog\"\nword = \"fox\"\n\nif searchWord(text, word):\n  print(\"The word is found in the text string.\")\nelse:\n  print(\"The word is not found in the text string.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name, age, gpa):\n        self.name = name\n        self.age = age\n        self.gpa = gpa but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findMinValue(numlist): \n\n    minVal = numlist[0] \n  \n    for i in numlist: \n        if i < minVal: \n            minVal = i \n  \n    return minVal \n\nnumlist = [10, 5, 20, -20, 30] \nprint(findMinValue(numlist)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: x = 0\n\nwhile x < 10:\n    x = x + 2\n    if x == 4:\n        continue\n    print(x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_dict_values(d):\n    # create a list of values from the dictionary\n    values = list(d.values())\n    # sort the list \n    values.sort()\n    return values\n\nresult = sort_dict_values(mydict)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tweepy\n\n# Authentication\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\n# Initializing the API\napi = tweepy.API(auth)\n \n#Fetching tweets from the given Twitter handle\ntweets = api.user_timeline(screen_name='<Twitter handle>', count=200, include_rts=False, tweet_mode=\"extended\")\n \n# Storing the tweets in a list\ntweet_list = []\nfor tweet in tweets:\n tweet_list.append(tweet.full_text)\n\n# Saving the tweet list as a file\nwith open('data.txt', 'w') as f:\n for item in tweet_list:\n f.write(\"%s\\n\" % item) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generateSentence(words):\n  sentence = ''\n  for word in words:\n    sentence += word + ' '\n  sentence += '.'\n  return sentence\n\nsentence = generateSentence([\"The\",\"quick\",\"brown\",\"fox\",\"jumped\",\"over\",\"the\",\"lazy\",\"dog\"])\nprint(sentence) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tweepy\nfrom textblob import TextBlob\n\nconsumer_key = 'your_consumer_key'\nconsumer_secret = 'your_consumer_secret'\n\naccess_token = 'your_access_token'\naccess_token_secret = 'your_access_token_secret'\n\n# authentication of consumer key and secret\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n\n# set access token and secret\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\n# search for tweets\npublic_tweets = api.search(query)\n\nsentiment_score_list = []\n\n# loop through search results\nfor tweet in public_tweets:\n analysis = TextBlob(tweet.text)\n sentiment_score_list.append(analysis.sentiment.polarity)\n\n# calculate average sentiment score\naverage_sentiment_score = sum(sentiment_score_list) / len(sentiment_score_list)\n\nprint(f\"Average sentiment score: {average_sentiment_score}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_dictionaries(dict1, dict2):\n    common_elements = []\n    for key1 in dict1:\n        if key1 in dict2:\n            common_elements.append(key1)\n    return common_elements but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_primes():\n    for number in range(2, 101):\n        prime = True\n        for i in range(2,number):\n            if (number % i == 0):\n                prime = False\n        if prime:\n            print(number, end=' ')\n            \nprint_primes() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_value(x, y):\n if x > y:\n return x\n else: \n return y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findIndex(lst, item):\n for i, v in enumerate(lst):\n if v == item:\n return i\n return -1\n\nfindIndex(lst, 4) // 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\nimport pandas as pd\n\n# Read the dataset\ndata = pd.read_csv('data.csv')\n\n# Plot the data\nplt.scatter(data['Release Year'], data['Gross Sales'])\nplt.xlabel('Release Year', fontsize=14)\nplt.ylabel('Gross Sales', fontsize=14)\nplt.scatter(data['Production Budget'], data['Gross Sales'])\nplt.xlabel('Production Budget', fontsize=14)\nplt.ylabel('Gross Sales', fontsize=14)\nplt.title('Gross Sales over Years/Budgets', fontsize=14)\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n\n\"\"\"\nStops people spectating then quickly joining the 'free' team.\nThis is to stop people firing a rocket, then spectating and joining then\nusing the knockback from the rocket which would count as a strafe time.\n\"\"\"\n\nimport minqlx\n\n\nclass spec_delay(minqlx.Plugin):\n    def __init__(self):\n        super().__init__()\n        self.add_hook(\"player_disconnect\", self.handle_player_disconnect)\n        self.add_hook(\"team_switch_attempt\", self.handle_team_switch_attempt)\n        self.add_hook(\"team_switch\", self.handle_team_switch)\n        self.spec_delays = set()\n\n    def handle_player_disconnect(self, player, reason):\n        \"\"\"Sets spec delay when a player disconnects.\"\"\"\n        self.spec_delays.add(player.steam_id)\n        self.allow_join(player)\n\n    def handle_team_switch_attempt(self, player, old_team, new_team):\n        \"\"\"Stops the player joining if spec delay is true.\"\"\"\n        if new_team != \"spectator\" and old_team == \"spectator\" and player.steam_id in self.spec_delays:\n            player.tell(\"^6You must wait 15 seconds before joining after spectating\")\n            return minqlx.RET_STOP_EVENT\n\n    def handle_team_switch(self, player, old_team, new_team):\n        \"\"\"Sets a delay on joining when the player joins spectator\"\"\"\n        if new_team == \"spectator\" and old_team == \"free\":\n            # Set spec delay\n            self.spec_delays.add(player.steam_id)\n            self.allow_join(player)\n        # This is only needed to stop \\team s; team f\n        elif new_team == \"free\" and old_team == \"spectator\" and player.steam_id in self.spec_delays:\n            player.tell(\"^6You must wait 15 seconds before joining after spectating\")\n            return minqlx.RET_STOP_EVENT\n\n    @minqlx.delay(15.1)\n    def allow_join(self, player):\n        \"\"\"Allows the player to join after 15.1 seconds.\"\"\"\n        try:\n            self.spec_delays.remove(player.steam_id)\n            player.center_print(\"^6You can join now\")\n        except KeyError:\n            return\n        except AttributeError:\n            return\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import dialogflow\nimport json\nimport requests\n\n# Define the Dialogflow intent\ndef detect_intent_from_text(text, language_code, project_id, session_id):\n session_client = dialogflow.SessionsClient()\n session = session_client.session_path(project_id, session_id)\n text_input = dialogflow.types.TextInput(text=text, language_code=language_code)\n query_input = dialogflow.types.QueryInput(text=text_input)\n response = session_client.detect_intent(session=session, query_input=query_input)\n return response.query_result\n\n# Define web search logic\ndef search_web(query):\n URL = \"https://www.google.com/search\"\n PARAMS = {'q': query}\n response = requests.get(url=URL, params=PARAMS)\n result = response.text\n return result\n\n# Define the main function\ndef main():\n # Setup Dialogflow parameters\n language_code = 'en-US'\n project_id = 'dialogflowproject-ghyvgx'\n session_id = 'test'\n\n# Pass user query to Dialogflow\n text = 'How do I fix my broken window?'\n response = detect_intent_from_text(text, language_code, project_id, session_id)\n intent = response.intent.display_name\n parameters = response.parameters\n\n# If intent is web search, search the web\n if intent == 'web search':\n query = parameters.get('query')\n result = search_web(query)\n print(result)\n\n# Call the main function\nif __name__ == '__main__':\n main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: weight_pounds = 1\nweight_kilograms = weight_pounds/2.2\nprint(\"Weight in kilograms is:\", weight_kilograms) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(0,11):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class TicTacToe:\n board = []\n\n def __init__(self):\n self.board = [[' ' for x in range(3)] for y in range(3)]\n\n def display_board(self):\n for row in self.board:\n print('|'.join(row))\n\n def make_move(self, player, row, col):\n if self.board[row][col] == ' ':\n self.board[row][col] = player\n else:\n print \"This cell is occupied!\"\n\n def check_win(self):\n for row in self.board:\n if row[0] == row[1] == row[2] != ' ':\n return row[0]\n if self.board[0][0] == self.board[1][1] == self.board[2][2] != ' ':\n return self.board[0][0]\n if self.board[0][2] == self.board[1][1] == self.board[2][0] != ' ':\n return self.board[0][2]\n for col in range(3):\n if self.board[0][col] == self.board[1][col] == self.board[2][col] != ' ':\n return self.board[0][col]\n return ' ' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n a, b = 0, 1\n for i in range(n):\n  a, b = b, a + b\n return a\n \nfor i in range(10):\n print(fibonacci(i)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def isPalindrome(num):\n  numStr = str(num)\n  for i in range(0, len(numStr)//2):\n    if numStr[i] != numStr[len(numStr)-i-1]:\n      return False\n  return True\n\nprint(isPalindrome(1991)) # Output: True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_char(string, char): \n  \n    count = 0\n    for i in string: \n        if(i == char): \n            count = count + 1\n  \n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt \n\n# data \ncountry = [\"China\", \"India\", \"United States\"] \npopulation = [143804000, 1351300000, 332500000] \n\n# create bar chart \nplt.bar(country, population) \n\n# label the graph \nplt.title(\"Population Bar Chart\")\nplt.xlabel(\"Country\")\nplt.ylabel(\"Population\") \n\n# display the plot \nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def date_diff(date1, date2):\n    date1_stamp = time.mktime(datetime.strptime(date1, \"%d/%m/%Y\").timetuple())\n    date2_stamp = time.mktime(datetime.strptime(date2, \"%d/%m/%Y\").timetuple())\n    difference = abs(date1_stamp - date2_stamp)\n    return int(difference/(24*60*60)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printPascalTriangle(n) : \n    for line in range(1, n + 1) : \n        C = 1 \n        for i in range(1, line + 1) : \n            print(C, end = \"\") \n            C = int(C * (line - i) / i); \n        print(\"\") \n\nn = 4\nprintPascalTriangle(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.models import Sequential\nfrom keras.layers import LSTM, Dense\n\n# Load and prepare data\ndata = pd.read_csv('stock-data.csv')\nclose = data['close'].values\n# Normalize data\nscaler = MinMaxScaler(feature_range=(0, 1))\nclose = close.reshape(-1, 1)\nclose = scaler.fit_transform(close)\n\n# Convert data into shape for model input\nX = []\ny = []\nfor i in range(60, close.shape[0]):\n X.append(close[i-60:i])\n y.append(close[i])\nX = np.array(X)\ny = np.array(y)\n\n# Create model\nmodel = Sequential()\nmodel.add(LSTM(50, return_sequences=True, input_shape=(X.shape[1], 1)))\nmodel.add(LSTM(50, return_sequences=False))\nmodel.add(Dense(25))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error', optimizer='adam')\n\n# Train model\nmodel.fit(X, y, batch_size=1, epochs=1)\n\n# Predicts stock price\nx_test = close[-60:]\nx_test = x_test.reshape(-1, 1)\nx_test = scaler.transform(x_test)\nx_test = np.array(x_test)\nx_test_predict = np.array([x_test])\nprice = model.predict(x_test_predict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class TrieNode:\n\n    def __init__(self):\n        self.children = dict()\n        self.is_end_of_word = False\n\ndef build_trie(strings):\n    root_node = TrieNode()\n    \n    for string in strings:\n        node = root_node\n        for ch in string:\n            if not node.children.__contains__(ch):\n                node.children[ch] = TrieNode()\n            node = node.children[ch]\n        node.is_end_of_word = True\n    \n    return root_node but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os\nfrom selenium import webdriver\n\n# Create a web driver\ndriver = webdriver.Chrome()\n\n# Navigate to the real estate website search page\ndriver.get(\"https://example.com/real-estate-search/\")\n\n# Search for properties in San Francisco\nsearch_box_element = driver.find_element_by_xpath(\"//input[@name='location']\")\nsearch_box_element.send_keys(location)\nsearch_button_element = driver.find_element_by_xpath(\"//input[@type='button' and @value='Search']\")\nsearch_button_element.click()\n\n# Iterate over the list of properties and extract the prices\nproducts = driver.find_elements_by_css_selector(\".listing-price\")\nfor product in products:\n    price = product.text\n    print(price)\n\n# Close the web driver\ndriver.quit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_length(string):\n    print(len(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout,  Flatten\n\n# Load MNIST dataset\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\n# Preprocess input data\nx_train = x_train.reshape(60000, 784)\nx_test = x_test.reshape(10000, 784)\nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\nx_train /= 255\nx_test /= 255\n\n# Create model\nmodel = Sequential()\nmodel.add(Dense(256, activation='relu', input_shape=(784,)))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(10, activation='softmax'))\n\n# Compile and fit the model\nmodel.compile(optimizer='adam',\n loss='sparse_categorical_crossentropy',\n metrics=['accuracy'])\n\nmodel.fit(x_train, y_train,\n batch_size=128,\n epochs=5,\n verbose=1,\n validation_data=(x_test, y_test)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_grade(points):\n    if points >= 90:\n       return \"A\"\n    elif points >= 80:\n       return \"B\"\n    elif points >= 70:\n       return \"C\"\n    elif points >= 60:\n       return \"D\"\n    else:\n       return \"F\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -*- coding: utf-8 -*-\n#!/usr/bin/python\nimport MySQLdb\nimport pywikibot\nimport sys\nimport re\nimport mwparserfromhell\nfrom pywikibot import pagegenerators\n'''\nCe script va r\u00e9cup\u00e9rer toutes les pages qui utilisent le template \"Infobox Rugbyman\"\n'''\n\n\nsite = pywikibot.Site(\"fr\", \"wikipedia\")\n\ndef parse(title):\n\tpage = pywikibot.Page(site, title)\n\ttext = page.get()\n\treturn mwparserfromhell.parse(text)\n\nliste = pagegenerators.ReferringPageGenerator(pywikibot.Page(site, u\"Mod\u00e8le:Infobox Rugbyman\"), onlyTemplateInclusion=True)\nfor page in liste:\n\tprint str(page.title().encode(\"utf-8\"))\nsys.exit()\nparsedText = parse(\"Mathieu Bourret\")\ntemplates = parsedText.filter_templates()\n\nfor tpl in templates:\n\tif tpl.name.upper().strip() == \"INFOBOX RUGBYMAN\":\n\t\tprint \">>%s<<\" % tpl.name.strip().encode(\"utf-8\")\n\t\tsaisons = re.split(\"<br ?\\/>\", str(tpl.get(\"saison\").value))\n\t\tclubs = re.split(\"<br ?\\/>\", str(tpl.get(\"club\").value))\n\t\tprint clubs\n\t\tprint \"%s - %s\" % (len(clubs), len(saisons))\n\n\n\n# pywikibot.extract_templates_and_params but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def closest_match(numbers, search_term):\n    closest_match = None\n    min_diff = float('inf')\n    \n    for number in numbers:\n        diff = abs(number - search_term)\n        if diff < min_diff:\n            min_diff = diff\n            closest_match = number\n    \n    return closest_match but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_numbers(nums):\n    for num in nums:\n        if (num % 2) == 0:\n            print(str(num) + \" is even\")\n        else:\n            print(str(num) + \" is odd\")\n\nnums = [4, 7, 9, 11, 12]\nclassify_numbers(nums)\n\n# Output:\n# 4 is even\n# 7 is odd\n# 9 is odd\n# 11 is odd\n# 12 is even but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n\tif n<0: \n\t\tprint(\"Incorrect input\") \n\t# First Fibonacci number is 0 \n\telif n==1: \n\t\treturn 0\n\t# Second Fibonacci number is 1 \n\telif n==2: \n\t\treturn 1\n\telse: \n\t\treturn Fibonacci(n-1)+Fibonacci(n-2) \n\n# Driver Program \n\nprint(Fibonacci(9)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_duplicates(input_list):\n    seen = set() \n    duplicates = [] \n  \n    for i in input_list: \n        if i not in seen: \n            seen.add(i)\n        else: \n            duplicates.append(i) \n    return duplicates but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MedianSequence:\n    def __init__(self):\n        self.nums = []\n        \n    def __len__(self):\n        return len(self.nums)\n        \n    def add(self, num):\n        self.nums.append(num)\n        self.nums.sort()\n        \n    def remove_median(self):\n        mid = len(self.nums) // 2\n        self.nums.pop(mid) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_largest_number(nums):\n  return max(nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef algorithm(input1, input2):\n    # Algorithm logic here\n    return output but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1,11):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_sorted_ascending(numbers):\n for i in range(len(numbers) - 1):\n if numbers[i] > numbers[i+1]:\n return False\n return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply_by_int(array, int):\n    new_array = []\n    for elem in array:\n        new_array.append(elem * int)\n    return new_array but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_string():\n    # get the string from the user\n    string = input('Enter a string: ')\n\n    # convert the string to a list and sort\n    sorted_string = sorted(list(string))\n\n    # print the sorted string\n    print(''.join(sorted_string))\n\nsort_string() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def area_circle (radius):\n    return 3.14159 * (radius ** 2)\n\n# Test\nprint(area_circle(3.5)) # prints 38.48685 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate(expr):\n    return eval(expr)\n\nresult = calculate(\"4 + 7\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_negatives(l):\n  negative_numbers = []\n  for num in l:\n    if num < 0:\n      negative_numbers.append(num)\n  print(negative_numbers)\n\nfind_negatives(list) # prints [-3, -9] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gini(data):\n data_sorted = sorted(data) \n size = len(data_sorted) \n cummulative_sum = 0\n max_sum=sum(data_sorted)\n gini_coefficient=0.0\n for i in range(size): \n  cummulative_sum += data_sorted[i]\n  gini_coefficient+=(2*cummulative_sum-max_sum-data_sorted[i])/max_sum\n return gini_coefficient/(size - 1)\n\ndata = [1,1,1,2,3,4,4,5,6]\nprint(gini(data))\n\n# Output: 0.3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add(nums):\n    return nums[0] + nums[1]\n\nprint(add([5, 10]))  #Prints 15 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # TODO: Replace the variables with their values\nresult = 10 + 25 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printCommonChars(str1, str2):\n    commonChars = ''\n    for char in str1:\n        if char in str2:\n            commonChars += char\n    \n    print(commonChars)\n\nprintCommonChars('Hello','World') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def std_dev(array):\n    import math\n\n    mean = sum(array)/len(array)\n    sum_of_squared_differences = 0\n    for element in array:\n        sum_of_squared_differences += (element-mean)**2\n    return math.sqrt(sum_of_squared_differences/len(array)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password(length):\n # Create all strings\n lowercase_letters = string.ascii_lowercase\n uppercase_letters = string.ascii_uppercase\n numbers = string.digits\n # Empty string to store password\n password = ''\n # Generate random singles strings and add to password\n for i in range(length):\n random_lowercase = random.choice(lowercase_letters)\n random_uppercase = random.choice(uppercase_letters)\n random_number = random.choice(numbers)\n password += random_lowercase + random_uppercase + random_number\n # Shuffle the password\n password_list = list(password)\n random.shuffle(password_list)\n password = ''.join(password_list)\n return password\n\npassword_length = 8\npassword = generate_password(password_length)\nprint(password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Car:\n    def __init__(self, name, brand, color, max_speed):\n        self.name = name\n        self.brand = brand\n        self.color = color\n        self.max_speed = max_speed\n        self.is_running = False\n\n    def start(self):\n        self.is_running = True\n\n    def stop(self):\n        self.is_running = False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\n\n# Building data set\nfeatures = tf.placeholder(tf.float32, [None, 10])\nlabels = tf.placeholder(tf.int32, [None])\n\n# Building a neural network\ndef build_model(features):\n    # An input layer\n    input_layer = tf.layers.dense(features, 16, activation=tf.nn.relu)\n\n    # Two hidden layers\n    dense_layer_2 = tf.layers.dense(input_layer, 8, activation=tf.nn.relu)\n    dense_layer_3 = tf.layers.dense(input_layer, 8, activation=tf.nn.relu)  \n\n    # An output layer\n    output_layer = tf.layers.dense(dense_layer_3, 2)\n\n    return output_layer\n\npredictions = build_model(features)\n\n# Define the loss function\nloss = tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=predictions))\n\n# Training the model\ntrain_op = tf.train.AdagradOptimizer(learning_rate=0.3).minimize(loss) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nquery = \"cats\"\n\n# perform the search using the query \nurl = f\"https://www.google.com/search?q={query}\"\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# extract the top 10 results \nresults = soup.find_all('div', {'class': 'ZINbbc'}, limit=10)\n\nfor result in results:\n    print(result.find('div', {'class': 'BNeawe'}).text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -*- python -*-\n# -*- coding: utf-8 -*-\n#\n# Gramps - a GTK+/GNOME based genealogy program\n#\n# Copyright (C) 2011-2016  Serge Noiraud\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n#\n\n\"\"\"\nGeography for one family\n\"\"\"\n#-------------------------------------------------------------------------\n#\n# Python modules\n#\n#-------------------------------------------------------------------------\nimport operator\nfrom gi.repository import Gdk\nKEY_TAB = Gdk.KEY_Tab\nfrom gi.repository import Gtk\n\n#-------------------------------------------------------------------------\n#\n# set up logging\n#\n#-------------------------------------------------------------------------\nimport logging\n_LOG = logging.getLogger(\"GeoGraphy.geofamily\")\n\n#-------------------------------------------------------------------------\n#\n# Gramps Modules\n#\n#-------------------------------------------------------------------------\nfrom gramps.gen.const import GRAMPS_LOCALE as glocale\n_ = glocale.translation.gettext\nfrom gramps.gen.lib import EventRoleType, EventType\nfrom gramps.gen.config import config\nfrom gramps.gen.datehandler import displayer\nfrom gramps.gen.display.name import displayer as _nd\nfrom gramps.gen.display.place import displayer as _pd\nfrom gramps.gen.utils.place import conv_lat_lon\nfrom gramps.gui.views.bookmarks import FamilyBookmarks\nfrom gramps.plugins.lib.maps.geography import GeoGraphyView\n\n#-------------------------------------------------------------------------\n#\n# Constants\n#\n#-------------------------------------------------------------------------\n\n_UI_DEF = '''\\\n<ui>\n<menubar name=\"MenuBar\">\n<menu action=\"GoMenu\">\n  <placeholder name=\"CommonGo\">\n    <menuitem action=\"Back\"/>\n    <menuitem action=\"Forward\"/>\n    <separator/>\n  </placeholder>\n</menu>\n<menu action=\"EditMenu\">\n  <placeholder name=\"CommonEdit\">\n    <menuitem action=\"PrintView\"/>\n  </placeholder>\n</menu>\n<menu action=\"BookMenu\">\n  <placeholder name=\"AddEditBook\">\n    <menuitem action=\"AddBook\"/>\n    <menuitem action=\"EditBook\"/>\n  </placeholder>\n</menu>\n</menubar>\n<toolbar name=\"ToolBar\">\n<placeholder name=\"CommonNavigation\">\n  <toolitem action=\"Back\"/>\n  <toolitem action=\"Forward\"/>\n</placeholder>\n<placeholder name=\"CommonEdit\">\n  <toolitem action=\"PrintView\"/>\n</placeholder>\n</toolbar>\n</ui>\n'''\n\n# pylint: disable=no-member\n# pylint: disable=unused-variable\n# pylint: disable=unused-argument\n\n#-------------------------------------------------------------------------\n#\n# GeoView\n#\n#-------------------------------------------------------------------------\nclass GeoFamily(GeoGraphyView):\n    \"\"\"\n    The view used to render family map.\n    \"\"\"\n\n    def __init__(self, pdata, dbstate, uistate, nav_group=0):\n        GeoGraphyView.__init__(self, _('Family places map'),\n                                      pdata, dbstate, uistate,\n                                      FamilyBookmarks,\n                                      nav_group)\n        self.dbstate = dbstate\n        self.uistate = uistate\n        self.place_list = []\n        self.place_without_coordinates = []\n        self.minlat = self.maxlat = self.minlon = self.maxlon = 0.0\n        self.minyear = 9999\n        self.maxyear = 0\n        self.nbplaces = 0\n        self.nbmarkers = 0\n        self.sort = []\n        self.additional_uis.append(self.additional_ui())\n        self.no_show_places_in_status_bar = False\n        self.cal = None\n\n    def get_title(self):\n        \"\"\"\n        Used to set the titlebar in the configuration window.\n        \"\"\"\n        return _('GeoFamily')\n\n    def get_stock(self):\n        \"\"\"\n        Returns the name of the stock icon to use for the display.\n        This assumes that this icon has already been registered\n        as a stock icon.\n        \"\"\"\n        return 'geo-show-family'\n\n    def get_viewtype_stock(self):\n        \"\"\"Type of view in category\n        \"\"\"\n        return 'geo-show-family'\n\n    def additional_ui(self):\n        \"\"\"\n        Specifies the UIManager XML code that defines the menus and buttons\n        associated with the interface.\n        \"\"\"\n        return _UI_DEF\n\n    def navigation_type(self):\n        \"\"\"\n        Indicates the navigation type. Navigation type can be the string\n        name of any of the primary objects.\n        \"\"\"\n        return 'Family'\n\n    def goto_handle(self, handle=None):\n        \"\"\"\n        Rebuild the tree with the given person handle as the root.\n        \"\"\"\n        self.build_tree()\n\n    def build_tree(self):\n        \"\"\"\n        This is called by the parent class when the view becomes visible. Since\n        all handling of visibility is now in rebuild_trees, see that for more\n        information.\n        \"\"\"\n        if not self.dbstate.is_open():\n            return\n        if self.uistate.get_active('Family'):\n            self._createmap(self.uistate.get_active('Family'))\n        else:\n            self._createmap(self.uistate.get_active('Person'))\n\n    def _createpersonmarkers(self, dbstate, person, comment, fam_id):\n        \"\"\"\n        Create all markers for the specified person.\n        \"\"\"\n        self.cal = config.get('preferences.calendar-format-report')\n        latitude = longitude = \"\"\n        if person:\n            # For each event, if we have a place, set a marker.\n            for event_ref in person.get_event_ref_list():\n                if not event_ref:\n                    continue\n                role = event_ref.get_role()\n                event = dbstate.db.get_event_from_handle(event_ref.ref)\n                eyear = event.get_date_object().to_calendar(self.cal).get_year()\n                place_handle = event.get_place_handle()\n                if place_handle:\n                    place = dbstate.db.get_place_from_handle(place_handle)\n                    if place:\n                        longitude = place.get_longitude()\n                        latitude = place.get_latitude()\n                        latitude, longitude = conv_lat_lon(latitude,\n                                                           longitude, \"D.D8\")\n                        descr = _pd.display(dbstate.db, place)\n                        evt = EventType(event.get_type())\n                        descr1 = _(\"%(eventtype)s : %(name)s\") % {\n                                        'eventtype': evt,\n                                        'name': _nd.display(person)}\n                        # place.get_longitude and place.get_latitude return\n                        # one string. We have coordinates when the two values\n                        # contains non null string.\n                        if longitude and latitude:\n                            if not self._present_in_places_list(2,\n                                                str(descr1 + descr + str(evt))):\n                                self._append_to_places_list(descr,\n                                    str(descr1 + descr + str(evt)),\n                                    _nd.display(person),\n                                    latitude, longitude,\n                                    role, eyear,\n                                    event.get_type(),\n                                    person.gramps_id,\n                                    place.gramps_id,\n                                    event.gramps_id,\n                                    fam_id\n                                    )\n                        else:\n                            self._append_to_places_without_coord(\n                                                        place.gramps_id, descr)\n            family_list = person.get_family_handle_list()\n            for family_hdl in family_list:\n                family = self.dbstate.db.get_family_from_handle(family_hdl)\n                if family is not None:\n                    for event_ref in family.get_event_ref_list():\n                        if event_ref:\n                            event = dbstate.db.get_event_from_handle(\n                                                                  event_ref.ref)\n                            role = event_ref.get_role()\n                            if event.get_place_handle():\n                                place_handle = event.get_place_handle()\n                                if place_handle:\n                                    place = dbstate.db.get_place_from_handle(\n                                                                   place_handle)\n                                    if place:\n                                        longitude = place.get_longitude()\n                                        latitude = place.get_latitude()\n                                        (latitude,\n                                         longitude) = conv_lat_lon(latitude,\n                                                                   longitude,\n                                                                   \"D.D8\")\n                                        descr = _pd.display(dbstate.db, place)\n                                        evt = EventType(event.get_type())\n                                        (father_name,\n                          mother_name) = self._get_father_and_mother_name(event)\n                                        descr1 = \"%s : %s - \" % (evt,\n                                                                 father_name)\n                                        descr1 = \"%s%s\" % (descr1, mother_name)\n                                        eyear = event.get_date_object().to_calendar(self.cal).get_year()\n                                        if longitude and latitude:\n                                            if not self._present_in_places_list(\n                                             2, str(descr1 + descr + str(evt))):\n                                                self._append_to_places_list(\n                                                 descr,\n                                                 str(descr1 + descr + str(evt)),\n                                                 _nd.display(person),\n                                                 latitude, longitude,\n                                                 role, eyear,\n                                                 event.get_type(),\n                                                 person.gramps_id,\n                                                 place.gramps_id,\n                                                 event.gramps_id,\n                                                 family.gramps_id\n                                                 )\n                                        else:\n                                            self._append_to_places_without_coord(place.gramps_id, descr)\n\n    def family_label(self, family):\n        \"\"\"\n        Create the family label depending on existence of the father and mother\n        \"\"\"\n        if family is None:\n            return \"Unknown\"\n        father = mother = None\n        hdl = family.get_father_handle()\n        if hdl:\n            father = self.dbstate.db.get_person_from_handle(hdl)\n        hdl = family.get_mother_handle()\n        if hdl:\n            mother = self.dbstate.db.get_person_from_handle(hdl)\n        if father and mother:\n            label = _(\"%(gramps_id)s : %(father)s and %(mother)s\") % {\n                'father' : _nd.display(father),\n                'mother' : _nd.display(mother),\n                'gramps_id' : family.gramps_id,\n                }\n        elif father:\n            label = \"%(gramps_id)s : %(father)s\" % {\n                'father' : _nd.display(father),\n                'gramps_id' : family.gramps_id,\n                }\n        elif mother:\n            label = \"%(gramps_id)s : %(mother)s\" % {\n                'mother' : _nd.display(mother),\n                'gramps_id' : family.gramps_id,\n                }\n        else:\n            # No translation for bare gramps_id\n            label = \"%(gramps_id)s :\" % {\n                'gramps_id' : family.gramps_id,\n                }\n        return label\n\n    def _createmap_for_one_family(self, family):\n        \"\"\"\n        Create all markers for one family : all event's places with a lat/lon.\n        \"\"\"\n        dbstate = self.dbstate\n        self.message_layer.add_message(\n                          _(\"Family places for %s\") % self.family_label(family))\n        person = None\n        if family:\n            person = dbstate.db.get_person_from_handle(\n                                                     family.get_father_handle())\n        else:\n            return\n        family_id = family.gramps_id\n        if person is None: # family without father ?\n            handle = family.get_mother_handle()\n            if handle:\n                person = dbstate.db.get_person_from_handle(handle)\n        if person is None:\n            handle = self.uistate.get_active('Person')\n            if handle:\n                person = dbstate.db.get_person_from_handle(handle)\n        if person is not None:\n            family_list = person.get_family_handle_list()\n            if len(family_list) > 0:\n                fhandle = family_list[0] # first is primary\n                fam = dbstate.db.get_family_from_handle(fhandle)\n                father = mother = None\n                handle = fam.get_father_handle()\n                if handle:\n                    father = dbstate.db.get_person_from_handle(handle)\n                if father:\n                    comment = _(\"Father : %(id)s : %(name)s\") % {\n                                                   'id': father.gramps_id,\n                                                   'name': _nd.display(father)}\n                    self._createpersonmarkers(dbstate, father,\n                                              comment, family_id)\n                handle = fam.get_mother_handle()\n                if handle:\n                    mother = dbstate.db.get_person_from_handle(handle)\n                if mother:\n                    comment = _(\"Mother : %(id)s : %(name)s\") % {\n                                                   'id': mother.gramps_id,\n                                                   'name': _nd.display(mother)}\n                    self._createpersonmarkers(dbstate, mother,\n                                              comment, family_id)\n                index = 0\n                child_ref_list = fam.get_child_ref_list()\n                if child_ref_list:\n                    for child_ref in child_ref_list:\n                        child = dbstate.db.get_person_from_handle(child_ref.ref)\n                        if child:\n                            index += 1\n                            comment = _(\"Child : %(id)s - %(index)d \"\n                                        \": %(name)s\") % {\n                                            'id'    : child.gramps_id,\n                                            'index' : index,\n                                            'name'  : _nd.display(child)\n                                         }\n                            self._createpersonmarkers(dbstate, child,\n                                                      comment, family_id)\n            else:\n                comment = _(\"Person : %(id)s %(name)s has no family.\") % {\n                                'id' : person.gramps_id,\n                                'name' : _nd.display(person)\n                                }\n                self._createpersonmarkers(dbstate, person, comment, family_id)\n\n    def _createmap(self, handle):\n        \"\"\"\n        Create all markers for each people's event in the database which has\n        a lat/lon.\n        \"\"\"\n        if not handle:\n            return\n        self.place_list = []\n        self.place_without_coordinates = []\n        self.places_found = []\n        self.nbplaces = 0\n        self.nbmarkers = 0\n        self.minlat = self.maxlat = self.minlon = self.maxlon = 0.0\n        self.minyear = 9999\n        self.maxyear = 0\n        self.message_layer.clear_messages()\n        if self.dbstate.db.has_family_handle(handle):\n            family = self.dbstate.db.get_family_from_handle(handle)\n            self._createmap_for_one_family(family)\n        else:\n            person = self.dbstate.db.get_person_from_handle(handle)\n            if not person:\n                return\n            family_list = person.get_family_handle_list()\n            for family_hdl in family_list:\n                family = self.dbstate.db.get_family_from_handle(family_hdl)\n                if family is not None:\n                    self._createmap_for_one_family(family)\n        self.sort = sorted(self.place_list,\n                           key=operator.itemgetter(3, 4, 6)\n                          )\n        self._create_markers()\n\n    def add_event_bubble_message(self, event, lat, lon, mark, menu):\n        \"\"\"\n        Add an item to the popup menu.\n        \"\"\"\n        self.itemoption = Gtk.Menu()\n        itemoption = self.itemoption\n        itemoption.show()\n        menu.set_submenu(itemoption)\n        modify = Gtk.MenuItem(label=_(\"Edit Family\"))\n        modify.show()\n        modify.connect(\"activate\", self.edit_family, event, lat, lon, mark)\n        itemoption.append(modify)\n        modify = Gtk.MenuItem(label=_(\"Edit Person\"))\n        modify.show()\n        modify.connect(\"activate\", self.edit_person, event, lat, lon, mark)\n        itemoption.append(modify)\n        modify = Gtk.MenuItem(label=_(\"Edit Event\"))\n        modify.show()\n        modify.connect(\"activate\", self.edit_event, event, lat, lon, mark)\n        itemoption.append(modify)\n        center = Gtk.MenuItem(label=_(\"Center on this place\"))\n        center.show()\n        center.connect(\"activate\", self.center_here, event, lat, lon, mark)\n        itemoption.append(center)\n\n    def bubble_message(self, event, lat, lon, marks):\n        \"\"\"\n        Add the popup menu.\n        \"\"\"\n        self.menu = Gtk.Menu()\n        menu = self.menu\n        menu.set_title(\"family\")\n        message = \"\"\n        oldplace = \"\"\n        prevmark = None\n        for mark in marks:\n            if message != \"\":\n                add_item = Gtk.MenuItem(label=message)\n                add_item.show()\n                menu.append(add_item)\n                self.add_event_bubble_message(event, lat, lon,\n                                              prevmark, add_item)\n            if mark[0] != oldplace:\n                message = \"%s :\" % mark[0]\n                self.add_place_bubble_message(event, lat, lon,\n                                              marks, menu, message, mark)\n                oldplace = mark[0]\n            evt = self.dbstate.db.get_event_from_gramps_id(mark[10])\n            # format the date as described in preferences.\n            date = displayer.display(evt.get_date_object())\n            if date == \"\":\n                date = _(\"Unknown\")\n            if mark[5] == EventRoleType.PRIMARY:\n                message = \"(%s) %s : %s\" % (date, mark[7], mark[1])\n            elif mark[5] == EventRoleType.FAMILY:\n                evt = self.dbstate.db.get_event_from_gramps_id(mark[10])\n                (father_name,\n                 mother_name) = self._get_father_and_mother_name(evt)\n                message = \"(%s) %s : %s - %s\" % (date, mark[7],\n                                                 father_name, mother_name)\n            else:\n                evt = self.dbstate.db.get_event_from_gramps_id(mark[10])\n                descr = evt.get_description()\n                if descr == \"\":\n                    descr = _('No description')\n                message = \"(%s) %s => %s\" % (date, mark[5], descr)\n            prevmark = mark\n        add_item = Gtk.MenuItem(label=message)\n        add_item.show()\n        menu.append(add_item)\n        self.add_event_bubble_message(event, lat, lon, prevmark, add_item)\n        menu.popup(None, None, None,\n                   None, event.button, event.time)\n        return 1\n\n    def add_specific_menu(self, menu, event, lat, lon):\n        \"\"\"\n        Add specific entry to the navigation menu.\n        \"\"\"\n        return\n\n    def get_default_gramplets(self):\n        \"\"\"\n        Define the default gramplets for the sidebar and bottombar.\n        \"\"\"\n        return ((\"Family Filter\",),\n                ())\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def median(arr):\n    # Sort the array\n    arr.sort()\n\n    # Calculate length\n    n = len(arr)\n\n    # Check if n is even\n    if n % 2 == 0:\n        median1 = arr[n // 2]\n        median2 = arr[n // 2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = arr[n // 2]\n\n    return median\n\narr = [4, 5, 6, 7, 8, 1, 2]\nresult = median(arr)\nprint(result) # 4.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_list(nums):\n  return nums[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\n\nnow = datetime.datetime.now()\n\nprint ('Current date and time: ', now) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport keras\nfrom keras.datasets import reuters\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation\nfrom keras.preprocessing.text import Tokenizer\n\n# Set the number of words per document\nnum_words = 1000\n\n# Load data\n(x_train, y_train), (x_test, y_test) = reuters.load_data(num_words=num_words, test_split=0.2)\n\n# Vectorize input data\ntokenizer = Tokenizer(num_words=num_words)\nx_train = tokenizer.sequences_to_matrix(x_train, mode='binary')\nx_test = tokenizer.sequences_to_matrix(x_test, mode='binary')\n\n# One-hot encoding for labels\ny_train = keras.utils.to_categorical(y_train, 46)\ny_test = keras.utils.to_categorical(y_test, 46)\n\n# Build the model\nmodel = Sequential()\nmodel.add(Dense(512, input_shape=(num_words,)))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(46))\nmodel.add(Activation('softmax'))\n\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(x_train, y_train,\n          batch_size=32,\n          epochs=10,\n          verbose=1,\n          validation_data=(x_test, y_test))\n\n# Evaluate the model\nscore = model.evaluate(x_test, y_test,\n                       batch_size=32, verbose=1)\n\nprint('Test score:', score[0])\nprint('Test accuracy:', score[1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maxNumber(num1, num2):\n if num1 > num2:\n   return num1\n else:\n   return num2\n\nif __name__ == '__main__':\n num1 = 8\n num2 = 4\n print(maxNumber(num1, num2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def oddSumInRange(start, end):\n    sum = 0\n    for i in range(start, end+1):\n        if i % 2 != 0:\n            sum += i\n    return sum\n\nresult = oddSumInRange(2, 10)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = 'Hello world'\n\ncount = len(string)\n\nprint(\"Length of the string is\", count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def selection_sort(arr):\n    for i in range(len(arr)): \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\n        \nconst result = selection_sort([4, 6, 1, 3, 8, 2]);\nconsole.log(result); but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def usd_to_euro(amount):\n  euro = amount * 0.9\n  print(amount, \"USD is equal to\", euro, \"Euros.\")\n  \nusd_to_euro(12.5) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, jsonify\n \napp = Flask(__name__)\n \nitems = []\n \n@app.route('/items', methods=['POST'])\ndef create_item():\n data = request.get_json()\n item = {'name': data['name'], 'price': data['price']}\n items.append(item)\n return jsonify(item)\n \n@app.route('/items/<string:name>')\ndef get_item(name):\n item = next(filter(lambda x: x['name'] == name, items), None)\n return jsonify(item)\n \n@app.route('/items/<string:name>', methods=['DELETE'])\ndef delete_item(name):\n global items\n items = list(filter(lambda x: x['name'] != name, items))\n return jsonify({'message': 'Item deleted'}) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: combinations = []\n\nfor i in range(len(list1)):\nfor j in range(len(list2)):\ncombinations.append((list1[i], list2[j]))\n\nprint(combinations)\n# Output: [(1,4), (1,5), (1,6), (2,4), (2,5), (2,6), (3,4), (3,5), (3,6)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_animal(features):\n    if \"four legs\" in features and \"curved tail\" in features:\n        if \"feathers\" in features:\n            return \"bird\"\n        else:\n            return \"mammal\"\n    else:\n        return \"unknown\"\n\nfeatures = \"An animal with four legs, a curved tail and feathers\"\nprint(classify_animal(features)) # bird but is not the same. just give one example and only return the code."}
