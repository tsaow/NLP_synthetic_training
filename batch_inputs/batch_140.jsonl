{"prompt": "make some code that functions the same as the following code: def caesar_cipher(plaintext,shift):\n    ciphertext = \"\"\n    for char in plaintext: \n        if char == ' ':\n            ciphertext += char\n        elif  char.isupper():\n            ciphertext += chr((ord(char) + shift - 65) % 26 + 65)\n        else:\n            ciphertext += chr((ord(char) + shift - 97) % 26 + 97)\n    return ciphertext\n\nplaintext = \"Caesar Cipher\"\nshift = 3\nciphertext = caesar_cipher(plaintext,shift)\n\nprint(\"Plain Text : {}\".format(plaintext))\nprint(\"Cipher Text : {}\".format(ciphertext)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(n):\n print(\"Hello World\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: ID = input('User ID: ')\n\nuser_name = ID.split('che')[0]\nprint('User Name: ' + user_name) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def punctuate(text):\n    text = text.strip()\n    if not text.endswith('.'):\n        text += '.'\n    if not text.startswith(tuple('ABCDEFGHIJKLMNOPQRSTUVWXYZ')):\n        text = text[0].upper() + text[1:]\n    for char in ['!', '?', ':', ';', ',', '\"']:\n        if char in text:\n            text = text[:-1] + char + ' '\n    return text\n\npunctuate('this is a string of text')\n# Output: 'This is a string of text.' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_vowels(string):\n vowels = 'aeiou'\n return [char for char in string if char in vowels] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import itertools \n\nletters = ('a', 'c', 'd', 'e', 'm') \n\nfor words in itertools.permutations(letters): \n    print(''.join(words)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef fix_spelling(paragraph):\n    words = paragraph.split()\n    corrected_words = []\n    for word in words:\n        corrected_words.append(re.sub(r'[aeiou]',r'[aeiou]', word))\n \n    return \" \".join(corrected_words)\n\nprint(fix_spelling(\"My favarite flowers are rose and tulples\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def getGreatestNumber(a, b):\n    if a > b:\n        return a\n    return b\n\ngreatest_num = getGreatestNumber(5, 8)\nprint(\"Greatest number is\", greatest_num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(string1, string2):\n    return (sorted(string1) == sorted(string2))\n\nprint(is_anagram(\"listen\", \"silent\")) # prints True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt \n\nx = [1, 2, 3, 4, 5] \ny = [1, 4, 9, 16, 25] \n  \n# plotting the points  \nplt.plot(x, y) \n\n# naming the x axis \nplt.xlabel('x - axis') \n# naming the y axis \nplt.ylabel('y - axis') \n  \n# giving a title to my graph \nplt.title('My first graph!') \n  \n# function to show the plot \nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Imports\nimport tkinter as tk\n\n# Setting up the window\nwindow = tk.Tk()\nwindow.title(\"My GUI\")\n\n# Adding components\nlabel1 = tk.Label(window, text=\"Hello World\")\nlabel1.pack()\n\n# Running the program\nwindow.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\nfrom flask import Flask, request\n\napp = Flask(name)\n\n@app.route('/webhook', methods=['POST'])\ndef webhook():\n payload = json.loads(request.data)\n print(payload)\n return \"OK\"\n\nif name == 'main':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def permutations(input_list):\n    if len(input_list) == 1:\n        return input_list\n    output_list = []\n    for value in input_list:\n        temp_list = input_list[:]\n        temp_list.remove(value)\n        permutations_list = permutations(temp_list)\n        for sub_list in permutations_list:\n            output_list.append([value] + sub_list)\n    return output_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(nums, target):\n  foundPairs = set()\n  def helper(i, j):\n    if i >= j:\n      return\n    s = nums[i] + nums[j]\n    if s == target:\n      foundPairs.add((nums[i], nums[j]))\n    if s >= target:\n      helper(i, j-1)\n    else:\n      helper(i+1, j)\n  helper(0, len(nums)-1)\n  return foundPairs\n\nlst = [2, 4, 3, 5, 7, 8]\ntarget = 7\nprint(search(lst, target)) \n# Output: {(3,4), (2,5)} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n    if n < 2:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortList(list):\n list.sort()\n return list\n\nprint(sortList([3, 5, 1, 2, 9])) # Output: [1, 2, 3, 5, 9] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sumNaturalNumbers(n): \n  sum = 0\n  for i in range(1, n+1): \n    sum+=i \n  return sum\n    \nprint(sumNaturalNumbers(100)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def unique_paths(grid):\n rows = len(grid)\n cols = len(grid[0])\n \n dp = [[0 for i in range(cols)] for j in range(rows)]\n \n for i in range(rows):\n for j in range(cols):\n if i == 0 or j == 0:\n dp[i][j] = 1\n else:\n dp[i][j] = dp[i][j-1] + dp[i-1][j]\n \n return dp[-1][-1]\n \nprint(unique_paths(grid))\n# Output: 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Importing the necessary libraries\nimport nltk\nimport summarizer\n\n# Function to automatically summarize text using the TextRank algorithm\ndef summarize_text(text):\n  # Tokenizing the text\n  sentences = nltk.sent_tokenize(text)\n  # Generating the summary\n  summary = summarizer.summarize(sentences, ratio=0.2)\n  # Returning the summary\n  return summary\n  \n# Testing the summarize_text function   \ntext = \"Python is an interpreted, high-level, general-purpose programming language. Created by Guido van Rossum and first released in 1991, Python is today used by millions of people all over the world. Python was designed to be highly readable and accessible. Its syntax makes it easy to learn and use.\"\n\nsummary = summarize_text(text)\nprint(summary) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Multiplication:\n    def __init__(self, num1, num2):\n        self.num1 = num1\n        self.num2 = num2\n      \n    def multiply(self):\n        return self.num1 * self.num2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def union_sets(set1, set2):\n    return list(set(set1) | set(set2))\n\nset1 = [1, 2, 3]\nset2 = [2, 3, 4, 5]\n\nprint(union_sets(set1, set2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(\"Happy birthday to you\")\nprint(\"Happy birthday to you\")\nprint(\"Happy birthday dear ____\")\nprint(\"Happy birthday to you\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nlower_chars = \"abcdefghijklmnopqrstuvwxyz\"\nupper_chars = lower_chars.upper()\ndigits = \"0123456789\"\nspecial_chars = \"!@#$%^&*()\"\n\ndef generate_password(length):\n    password = \"\"\n    password += random.choice(lower_chars)\n    password += random.choice(upper_chars)\n    password += random.choice(digits)\n    password += random.choice(special_chars)\n    \n    for i in range(length - 4):\n        password += random.choice(lower_chars + upper_chars + digits + special_chars)\n    \n    return password\n\nif __name__ == '__main__':\n    print(generate_password(10))\n\n# Output\nV1!sQUn4f4 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"example.com\"\n\n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get(url).text\n\n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n# print(soup.prettify()) # print the parsed data of html\n\n# Get Product Name\nproducts = soup.find_all(\"div\", attrs={\"class\": \"product-name\"})\nfor product in products:\n   product_name = product.find('a').text\n   print(\"Product Name:\", product_name)\n\n# Get Product Price\nprices = soup.find_all(\"span\", attrs={\"class\": \"price\"})\nfor price in prices:\n   product_price = price.text\n   print(\"Product Price:\", product_price) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: images = [item for item in allitems if item.endswith('.jpg')] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: square = lambda nums: [x*x for x in nums]\n\nsquares = square([1,2,3])\nprint(squares) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import libraries\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\n\n# set the url to scrape\nurl = \"https://www.weather.gov/source/crh/stateMaxMinTemps.php\"\n\n# make a request to the url and create the beautiful soup object\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, \"html.parser\")\n\n# parse the table\ntable = soup.find(id=\"main\")\n\n# read the table in to a DataFrame\ndf = pd.read_html(str(table))[0]\n\n# rename the columns\ndf.columns=['state', 'max_temp', 'min_temp']\n\n# find the maximum and minimum temperatures\nmax_temp = df['max_temp'].max()\nmin_temp = df['min_temp'].min()\n\n# print the maximum and minimum temperatures\nprint('The maximum temperature in the US is: %s' % max_temp) \nprint('The minimum temperature in the US is: %s' % min_temp) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndef parse_json_string(json_string):\n    \"\"\"\n    Parses a JSON string and converts it to a Python dictionary.\n    :param json_string: The JSON string to parse\n    :type json_string: str\n    :return: A Python dictionary parsed from the JSON string\n    :rtype: dict\n    \"\"\"\n    return json.loads(json_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Dictionary with conversion factors\nFACTORS = {\n 'in': 2.54,\n 'cm': 0.39,\n 'ft': 30.48,\n 'm': 1\n}\n\ndef convert(from_unit, to_unit, value):\n \"\"\"\n Convert between measurement units.\n \"\"\"\n factor = FACTORS[from_unit]/FACTORS[to_unit]\n return factor * value\n\n# Test the function\nprint(convert('in', 'cm', 10))    # Output: 25.4\nprint(convert('ft', 'm', 15))     # Output: 4.572 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_the(string):\n  edited_string = string.replace(\"the\", \"\")\n  return edited_string\n\nresult = remove_the(\"the quick brown fox jumped over the lazy dog\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num):\n    if num > 1:\n        for n in range(2, num):\n            if (num % n) == 0:\n                return False\n        return True\n    else:\n        return False\n\nnum = int(input(\"Enter a number: \"))\n \nif is_prime(num):\n    print(num, \"is a Prime number\")\nelse:\n    print(num, \"is not a Prime number\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_rotation(str1, str2):\n    return len(str1) == len(str2) and str2 in str1 + str1\n\n# testing\nprint(is_rotation('hello', 'lohel'))  # prints True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def square_elements(arr):\n    return [num**2 for num in arr] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseWords(s): \n\t# split the string \n\twords = s.split(' ') \n\t\n\t# reverse the words \n\twords = words[::-1] \n\t\n\t# join the words \n\treverseString = ' '.join(words)\n\t\n\treturn reverseString \n\ns = \"This is an example sentence.\"\nprint(reverseWords(s)) \n# Output: sentence. example an is This but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def encryptMatrixTranspose(string):\n    matrix = [list(string[i:i+6]) for i in range(0, len(string), 6)]\n    for row in matrix:\n        if(len(row) != 6):\n            for i in range(len(row), 6):\n                row.append(\"_\")\n\n    new_matrix = []\n    for i in range(6):\n        new_row = []\n        for row in matrix:\n            new_row.append(row[i])\n        new_matrix.append(new_row)\n    return ''.join([''.join(row) for row in new_matrix])\n\nstring = \"AESTHETICISMISTHEFINESTART\"\nencrypted = encryptMatrixTranspose(string)\nprint(encrypted) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = 'https://example.com'\n\n# Set the form data  \ndata = {\n  'field1': 'value1',\n  'field2': 'value2',\n  'field3': 'value3',\n  'field4': 'value4'\n}\n\n# Send a POST request to the URL with the form data  \nr = requests.post(url, data=data)\n\n# Check the response code \nif r.status_code == 200: \n  print('Form submitted successfully.') \nelse:\n  print('Error submitting form.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk import word_tokenize\nfrom nltk.corpus import stopwords\nimport sklearn\nfrom sklearn.svm import SVC\n\n# Pre-process input for the classifier\ndef pre_process(sentence):\n  stopwords_list = stopwords.words('english')\n  tokens = word_tokenize(sentence)\n  lower_tokens = [token.lower() for token in tokens if token not in stopwords_list]\n  return lower_tokens\n\n# Create feature set using bag of words\ndef create_feature_set(sentence_list):\n  feature_set = []\n  for item in sentence_list:\n    feature_set.extend([pre_process(item['sentence'])])\n  return feature_set\n\n# Train the classifier\ndef train_classifier(sentence_list):\n  feature_set = create_feature_set(sentence_list)\n  targets = [item['category'] for item in sentence_list]\n  svc = SVC(kernel='linear').fit(feature_set, targets)\n  return svc\n\n# Test the classifier\ndef test_classifier(classifier, sentence):\n  feature_set = pre_process(sentence)\n  prediction = classifier.predict([feature_set])\n  return prediction[0]\n\n# Train the classifier\nsentence_list = [\n  {'sentence': 'I like playing football', 'category': 'sports'}, \n  {'sentence': 'I like reading books', 'category': 'science'}, \n  {'sentence': 'Data science is an interesting field', 'category': 'technology'}\n]\nclassifier = train_classifier(sentence_list)\n\n# Predict the sentence\nsentence = 'science and technology has revolutionized how we live'\nprediction = test_classifier(classifier, sentence)\nprint('Prediction:', prediction) #technology but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.linear_model import LogisticRegression\n\n# Generate data points\nX = []\ny = []\nfor i in range(1, 11):\n for j in range(1, 101):\n  X.append([i, j])\n  if j % 2 == 0:\n   y.append(1)\n  else:\n   y.append(0)\n\n# Train the model\nX_data = np.array(X)\ny_data = np.array(y)\nmodel = LogisticRegression()\nmodel.fit(X_data, y_data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize_portfolio_weights(portfolio_weights, target_ratio):\n # Create a dictionary to store optimized weights\n optimized_weights = {}\n\n # Iterate over portfolio weights and update them according to the target ratio\n for asset, weight in portfolio_weights.items():\n  optimized_weights[asset] = target_ratio.get(asset, weight)\n\n return optimized_weights\n\nportfolio_weights = {'Equities': 0.40, 'Bonds': 0.30, 'Real Estate': 0.20, 'Cash': 0.10}\ntarget_ratio = {'Equities': 0.35, 'Bonds': 0.30, 'Real Estate': 0.30, 'Cash': 0.05}\n\nweights = optimize_portfolio_weights(portfolio_weights, target_ratio)\nprint(weights) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: cities_populations = {\n \"Lahore\": 3,883,\n \"Karachi\": 8,130,\n \"Islamabad\": 2,572\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # charset.py\n\"\"\"Handle alternate character sets for character strings.\"\"\"\n#\n# Copyright (c) 2008-2012 Darcy Mason\n# This file is part of pydicom, released under a modified MIT license.\n#    See the file license.txt included with this distribution, also\n#    available at https://github.com/darcymason/pydicom\n#\n\nfrom pydicom import compat\nfrom pydicom.config import logger\nfrom pydicom.valuerep import PersonNameUnicode, text_VRs\nfrom pydicom.compat import in_py2\n\n# Map DICOM Specific Character Set to python equivalent\npython_encoding = {\n    '': 'iso8859',           # default character set for DICOM\n    'ISO_IR 6': 'iso8859',   # alias for latin_1 too\n    'ISO_IR 100': 'latin_1',\n    'ISO_IR 101': 'iso8859_2',\n    'ISO_IR 109': 'iso8859_3',\n    'ISO_IR 110': 'iso8859_4',\n    'ISO_IR 126': 'iso_ir_126',  # Greek\n    'ISO_IR 127': 'iso_ir_127',  # Arab\n    'ISO_IR 138': 'iso_ir_138',  # Hebrew\n    'ISO_IR 144': 'iso_ir_144',  # Russian\n    'ISO_IR 148': 'iso8859_5',\n    # Thai 'ISO_IR 166': 'XXXXX', No idea what this maps too\n\n    'ISO 2022 IR 6': 'iso8859',   # alias for latin_1 too\n    'ISO 2022 IR 13': 'shift_jis',\n    'ISO 2022 IR 87': 'iso2022_jp',\n    'ISO 2022 IR 100': 'latin_1',\n    'ISO 2022 IR 101': 'iso8859_2',\n    'ISO 2022 IR 109': 'iso8859_3',\n    'ISO 2022 IR 110': 'iso8859_4',\n    'ISO 2022 IR 126': 'iso_ir_126',\n    'ISO 2022 IR 127': 'iso_ir_127',  # Arab\n    'ISO 2022 IR 138': 'iso_ir_138',\n    'ISO 2022 IR 144': 'iso_ir_144',\n    'ISO 2022 IR 148': 'iso8859_5',\n    'ISO 2022 IR 149': 'euc_kr',  # needs cleanup via clean_escseq()\n    #   Japanesse 'ISO 2022 IR 159': 'XXXX',\n\n    'ISO_IR 192': 'UTF8',     # from Chinese example, 2008 PS3.5 Annex J p1-4\n    'GB18030': 'GB18030',\n\n}\n\ndefault_encoding = \"iso8859\"\n\n\ndef clean_escseq(element, encodings):\n    \"\"\"Remove escape sequences that Python does not remove from\n       Korean encoding ISO 2022 IR 149 due to the G1 code element.\n    \"\"\"\n    if 'euc_kr' in encodings:\n        return element.replace(\n            \"\\x1b\\x24\\x29\\x43\", \"\").replace(\"\\x1b\\x28\\x42\", \"\")\n    else:\n        return element\n\n# DICOM PS3.5-2008 6.1.1 (p 18) says:\n#   default is ISO-IR 6 G0, equiv to common chr set of ISO 8859 (PS3.5 6.1.2.1)\n#    (0008,0005)  value 1 can *replace* the default encoding...\n#           for VRs of SH, LO, ST, LT, PN and UT (PS3.5 6.1.2.3)...\n#           with a single-byte character encoding\n#  if (0008,0005) is multi-valued, then value 1 (or default if blank)...\n#           is used until code extension escape sequence is hit,\n#          which can be at start of string, or after CR/LF, FF, or\n#          in Person Name PN, after ^ or =\n# NOTE also that 7.5.3 SEQUENCE INHERITANCE states that if (0008,0005)\n#       is not present in a sequence item then it is inherited from its parent.\n\n\ndef convert_encodings(encodings):\n    \"\"\"Converts DICOM encodings into corresponding python encodings\"\"\"\n\n    # If a list if passed, we don't want to modify the list in place so copy it\n    encodings = encodings[:]\n\n    if isinstance(encodings, compat.string_types):\n        encodings = [encodings]\n    elif not encodings[0]:\n        encodings[0] = 'ISO_IR 6'\n\n    try:\n        encodings = [python_encoding[x] for x in encodings]\n    except KeyError:  # Assume that it is already the python encoding (is there a way to check this?)\n        pass\n\n    if len(encodings) == 1:\n        encodings = [encodings[0]] * 3\n    elif len(encodings) == 2:\n        encodings.append(encodings[1])\n\n    return encodings\n\n\ndef decode(data_element, dicom_character_set):\n    \"\"\"Apply the DICOM character encoding to the data element\n\n    data_element -- DataElement instance containing a value to convert\n    dicom_character_set -- the value of Specific Character Set (0008,0005),\n                    which may be a single value,\n                    a multiple value (code extension), or\n                    may also be '' or None.\n                    If blank or None, ISO_IR 6 is used.\n\n    \"\"\"\n    if not dicom_character_set:\n        dicom_character_set = ['ISO_IR 6']\n\n    encodings = convert_encodings(dicom_character_set)\n\n    # decode the string value to unicode\n    # PN is special case as may have 3 components with differenct chr sets\n    if data_element.VR == \"PN\":\n        # logger.warn(\"%s ... type: %s\" %(str(data_element), type(data_element.VR)))\n        if not in_py2:\n            if data_element.VM == 1:\n                data_element.value = data_element.value.decode(encodings)\n            else:\n                data_element.value = [val.decode(encodings) for val in data_element.value]\n        else:\n            if data_element.VM == 1:\n                data_element.value = PersonNameUnicode(data_element.value, encodings)\n            else:\n                data_element.value = [PersonNameUnicode(value, encodings)\n                                      for value in data_element.value]\n    if data_element.VR in text_VRs:\n        # Remove the first encoding if this is a multi-byte encoding\n        if len(encodings) > 1:\n            del encodings[0]\n\n        # You can't re-decode unicode (string literals in py3)\n        if data_element.VM == 1:\n            if isinstance(data_element.value, compat.text_type):\n                return\n            data_element.value = clean_escseq(\n                data_element.value.decode(encodings[0]), encodings)\n        else:\n\n            output = list()\n\n            for value in data_element.value:\n                if isinstance(value, compat.text_type):\n                    output.append(value)\n                else:\n                    output.append(clean_escseq(value.decode(encodings[0]), encodings))\n\n            data_element.value = output\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def order_elements(arr, k):\n    k_arr = []\n    j_arr = []\n    for i in arr:\n        if i <= k:\n            k_arr.append(i)\n        else:\n            j_arr.append(i)\n    k_arr.extend(j_arr)\n    return k_arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: data = [{ 'name': 'Sam', 'age': 30 }, { 'name': 'Alex', 'age': 25 }, { 'name': 'John', 'age': 28 }]\n\ndef sort_list_dictionaries(data):\n return sorted(data, key=lambda k: k['age']) \n\nprint(sort_list_dictionaries(data))\n# Outputs: [{'name': 'Alex', 'age': 25}, {'name': 'John', 'age': 28}, {'name': 'Sam', 'age': 30}] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: matrix = [[i+(3*j) for i in range(1,4)] for j in range(3)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a web scraping program to extract data from twitter.\n\"\"\"\n\nfrom bs4 import BeautifulSoup\nimport requests\n\ndef scrape_data():\n    url = 'https://twitter.com/search?q=%23python'\n    response = requests.get(url)\n    html = response.text\n    soup = BeautifulSoup(html, 'html.parser') \n    tweets = soup.find_all('p', {'class': 'TweetTextSize'})\n    for tweet in tweets:\n        print(tweet.text)\n        \nif __name__ == \"__main__\":\n    scrape_data() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\n\n# Load data\ndata = pd.read_csv('customer_data.csv')\n\n# Create input features\nX = np.array(data[['age', 'gender', 'purchase_freq', 'product_type', 'product_category']])\n\n# Create output labels\ny = np.array(data['bought'])\n\n# Split into Train/Test Sets\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# Create and fit model\nfrom sklearn.tree import DecisionTreeClassifier\nclassif = DecisionTreeClassifier()\nclassif.fit(X_train, y_train)\n\n# Evaluate model\ny_pred = classif.predict(X_test)\nscore = classif.score(X_test, y_test)\nprint(\"Accuracy: \", score) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MinHeap:\n    def __init__(self):\n        self.heap_array = []\n\n    def parent(self, i):\n        return (i - 1) // 2\n\n    def insert(self, key):\n        self.heap_array.append(key)\n\n        # Fix the min heap property if it is violated\n        self.heapify_up(len(self.heap_array) - 1)\n\n    def heapify_up(self, index):\n        # If current node is greater than parent, then swap\n        if index > 0 and self.heap_array[self.parent(index)] > self.heap_array[index]:\n            # Swap the current node with its parent\n            self.heap_array[index], self.heap_array[self.parent(index)] = (\n                self.heap_array[self.parent(index)],\n                self.heap_array[index],\n            )\n\n            # Heapify the parent node\n            self.heapify_up(self.parent(index))\n\n    def delete_min(self):\n        if self.heap_array:\n            deletemin = self.heap_array[0]\n\n            # Replace the root with the last node\n            self.heap_array[0] = self.heap_array[-1]\n            del self.heap_array[-1]\n\n            # Heapify the root node\n            self.heapify_down(0)\n\n            return deletemin\n\n    def heapify_down(self, index):\n        index_left = 2 * index + 1\n        index_right = 2 * index + 2\n        index_smallest = index\n\n        # If left child is smaller than root\n        if (\n            index_left\n            < len(self.heap_array)\n            and self.heap_array[index_left] < self.heap_array[index]\n        ):\n            index_smallest = index_left\n\n        # If right child is smaller than smallest so far\n        if (\n            index_right\n            < len(self.heap_array)\n            and self.heap_array[index_right] < self.heap_array[index_smallest]\n        ):\n            index_smallest = index_right\n\n        # If index is not the smallest\n        if index != index_smallest:\n            # Swap with the smallest\n            self.heap_array[index], self.heap_array[index_smallest] = (\n                self.heap_array[index_smallest],\n                self.heap_array[index],\n            )\n\n            # Heapify the index that was swapped\n            self.heapify_down(index_smallest) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_to_dict(input_list):\n  output_dict = {}\n  for key, value in input_list:\n    output_dict[key] = value \n  return output_dict but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: str = \"Hello World!\"\nchars = list(str)\n\n# initialize counts as empty dictionary\nchar_counts = {}\n\nfor char in chars:\n    if char in char_counts:\n        char_counts[char] += 1\n    else:\n        char_counts[char] = 1\n\n# printing result\nfor char, count in char_counts.items():\n    print(\"{} : {}\".format(char, count)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a Python program to convert a list of values from Celsius to Fahrenheit\n\"\"\"\ndef celsiusToFahrenheit(celsius_list):\n    fahrenheit_list = []\n    for celsius in celsius_list:\n        fahrenheit = celsius * 9/5 + 32\n        fahrenheit_list.append(fahrenheit)\n    return fahrenheit_list\n\nif __name__ == '__main__':\n    celsius_list = [0, 10, 20]\n    fahrenheit_list = celsiusToFahrenheit(celsius_list)\n    print(fahrenheit_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_type(num):\n    if num % 2 == 0:\n        return 'even'\n    else:\n        return 'odd' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: total = 0\nfor i in range(1000):\n    if i % 3 == 0 or i % 5 == 0:\n        total += i\nprint(total) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \nclass LinkedList: \n    def __init__(self): \n        self.head = None\n\n    def insert(self, new_node):\n        temp = self.head \n  \n        if temp is None: \n            self.head = new_node \n            return \n  \n        while temp.next is not None: \n            temp = temp.next\n\n        temp.next = new_node\n#\n5. Instruction: Given a list of integers, write a Python program to find the longest increasing sub-sequence from the given list.\n5. Input:\n[2, 3, 4, 5, 6, 1, 7, 8]\n5. Output:\ndef longestIncreasingSubsequence(arr): \n    n = len(arr) \n  \n    lis = [1]*n \n\n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n  \n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n    return maximum\n\narr = [2, 3, 4, 5, 6, 1, 7, 8]\nprint(\"Length of Longest Increasing Subsequence is\", longestIncreasingSubsequence(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password():\n    chars = string.ascii_lowercase + string.ascii_uppercase + string.digits\n    size = 8\n    \n    while True:\n        password = ''.join(random.choice(chars) for _ in range(size))\n        if any(c.islower() for c in password) and any(c.isupper() for c in password) and any(c.isdigit() for c in password):\n            break\n        \n    return password\n\nprint(generate_password()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Fraction:\n\n    def __init__(self, numerator, denominator):\n        self.numerator = numerator\n        self.denominator = denominator\n\n    def __add__(self, obj2):\n        n = self.numerator * obj2.denominator + obj2.numerator * self.denominator\n        d = self.denominator * obj2.denominator\n        return Fraction(n, d)\n\n    def __sub__(self, obj2):\n        n = self.numerator * obj2.denominator - obj2.numerator * self.denominator\n        d = self.denominator * obj2.denominator\n        return Fraction(n, d)\n    \n    def __mul__(self, obj2):\n        n = self.numerator * obj2.numerator\n        d = self.denominator * obj2.denominator\n        return Fraction(n, d)\n\n    def __truediv__(self, obj2):\n        n = self.numerator * obj2.denominator\n        d = self.denominator * obj2.numerator\n        return Fraction(n, d)\n    \n    def simplify_fraction(self):\n        i = 2\n        while i <= self.numerator:\n            if self.numerator % i == 0 and self.denominator % i == 0:\n                self.numerator = self.numerator / i\n                self.denominator = self.denominator / i\n            else:\n                i += 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def capitalized_list(names):\n    new_list = []\n    for name in names:\n        new_list.append(name.capitalize())\n    \n    return new_list\n\nprint(capitalized_list(names))\n\n# Output\n['Kevin', 'David', 'James', 'George'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd \n\n# Load data from the orders table \norders = pd.read_csv('orders.csv')\n\n# Generate summary statistics for the orders table \nsummary_stats = orders.describe()\n\n# Generate a report containing summary statistics \nreport = open('report.html', 'w') \nreport.write(summary_stats.to_html()) \nreport.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Circle:\n  def __init__(self, radius):\n    self.radius = radius\n  \n  def area(self):\n    return 3.14 * (self.radius ** 2)\n  \n  def circumference(self):\n    return 2 * 3.14 * self.radius\n  \ncircle1 = Circle(10)\nprint(circle1.area())\nprint(circle1.circumference()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import libraries\nimport requests\nfrom bs4 import BeautifulSoup\n\n#specify the url and fetch the data from the server\nurl = 'https://examplewebsite.com/'\npage = requests.get(url) \n\n#parse the html content \nsoup = BeautifulSoup(page.content, 'html.parser') \n\n#get all the product listings\nlistings = soup.find_all('div', class_='listing')\n\n#iterate over each of the product listings\nfor listing in listings[:10]:\n  title = listing.find('h2').text\n  price = listing.find('span', class_='price').text\n  print('{} - {}'.format(title, price)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: filtered_lst = [x for x in lst if x <= 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(string_to_test):\n    reverse = reversed(string_to_test)\n    if list(string_to_test) == list(reverse):\n        return True\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def permutations(arr):\n    if len(arr) == 0:\n        return [] \n  \n    if len(arr) == 1:\n        return [arr]\n\n    l = [] \n    \n    for i in range(len(arr)):\n       m = arr[i]\n       remLst = arr[:i] + arr[i+1:]\n       for p in permutations(remLst):\n           l.append([m] + p)\n    return l but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def normalize(numbers):\n  min_num = min(numbers)\n  max_num = max(numbers)\n\n  for i in range(0, len(numbers)):\n    numbers[i] = (numbers[i] - min_num) / (max_num - min_num)\n\n  return numbers\n\nprint(normalize([-1, 0.2, 5.66, -2.344, 0])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef inverse_matrix(matrix):\n    det = np.linalg.det(matrix)\n    if det == 0:\n        return None \n    return np.dot(np.linalg.inv(matrix), 1/det) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\nstrings = ['abc123', '456def', '7890ghi']\n\npattern = '\\d+'\n\nmatches = []\nfor string in strings:\n    match = re.search(pattern, string)\n    matches.append(match.group(0))\n    \nprint(matches) # ['123', '456', '7890']\n\n# Optimized version\nimport re\n\nstrings = ['abc123', '456def', '7890ghi']\n\nmatches = [re.search(r'\\d+', string).group(0) for string in strings]\n\nprint(matches) # ['123', '456', '7890'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn import linear_model\nimport pandas as pd\n\n# Define the model\nmodel = linear_model.LinearRegression()\n\n# Load the data\ndata = pd.read_csv('customer_data.csv')\n\n# Fit the data\nX = data[['age', 'location', 'membership']]\ny = data['retention']\nmodel.fit(X, y) \n\n# Predict the customer retention after 6 months\npredict = model.predict([[6, 'London', 'Premium']])\nprint(predict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef function(x):\n # replace this with your function\n return x + 2\n\ndef genetic_algorithm(population, pop_size, fit_threshold, max_generations):\n # initialize population\n current_gen = init_population(population, pop_size)\n\n # evaluate population\n fitness_scores = get_fitness_scores(current_gen)\n\n # loop until termination condition is met\n for generation in range(max_generations):\n # select parents\n parents = tournament_selection(current_gen, fitness_scores)\n \n # crossover\n children = crossover(parents)\n \n # mutate\n mutated_children = mutate(children)\n \n # evaluate new population\n fitness_scores = get_fitness_scores(mutated_children)\n\n # select survivors\n current_gen = select_survivors(mutated_children, fitness_scores)\n\n # check fitness threshold\n if max(fitness_scores) > fit_threshold:\n break\n \n best_individual = current_gen[fitness_scores.index(max(fitness_scores))]\n \n return best_individual, max(fitness_scores)\n\ndef init_population(population, pop_size):\n # initialize population with random individuals\n # population should contain individuals that are valid solutions of function\n return [population[random.randint(0, len(population)-1)] for _ in range(pop_size)]\n\ndef get_fitness_scores(population):\n # evaluate each individual and return their fitness scores\n return [function(individual) for individual in population]\n\ndef tournament_selection(population, fitness_scores):\n # select parents through tournament selection\n # tournament size should be half of population\n # winners are selected based on the greatest fitness score\n return [population[fitness_scores.index(max(random.sample(fitness_scores, len(population) // 2)))] for _ in range(len(population) // 2)]\n\ndef crossover(parents):\n # crossover parents to generate children\n return [random.choice(parent1 + parent2) for parent1, parent2 in zip(parents[::2], parents[1::2])]\n\ndef mutate(children):\n # mutate each child with a given probability\n return [child[random.randint(0, len(child)-1) + 1] for child in children]\n\ndef select_survivors(population, fitness_scores):\n # select survivors with elitist selection strategy\n # only the fittest individual survives\n return [population[fitness_scores.index(max(fitness_scores))]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def separate_charnum(str):\n    chars = []\n    nums = []\n    for char in str:\n        if char.isalpha():\n            chars.append(char)\n        else:\n            nums.append(int(char))\n    return chars, nums\n\nstr = \"ab12cd3\"\n\nchars, nums = separate_charnum(str)\nprint(chars)\nprint(nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Converting from Java to Python\n\nnumber = 10\nsquare = number * number\nprint(\"Square of given number is: \"+str(square)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def median(arr): \n # Sort the array \n arr.sort() \n n = len(arr) \n  \n # If number of elements is odd, \n # return the middle element \n if n % 2 != 0: \n  return arr[n//2] \n  \n # If number of elements is even, \n # return the average of the middle \n # two elements \n else:\n  return (arr[n//2] + arr[(n//2)-1]) / 2\n\n# Driver code \narr = [3, 1, 4, 5, 2] \nprint(median(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_random_string():\n chars = string.ascii_letters + string.digits\n random_string = ''.join(random.choice(chars) for _ in range(20))\n return random_string\n \nrandom_string = generate_random_string()\nprint(random_string) // \"xVUqrHZkXDjzXFVfBmO7\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_balanced(string): \n    stack = [] \n    for char in string: \n        if char == '(': \n            stack.append(char) \n        elif char == ')': \n            if len(stack)==0: \n                return False\n            stack.pop() \n  \n    if len(stack) == 0: \n        return True\n    else: \n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_password():\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    size = 8\n    password = \"\"\n    for i in range(size):\n        if i%3 == 0:\n            password += chr(random.randint(33,47))\n        elif i%3 == 1:\n            password += chr(random.randint(65,90))\n        elif i%3 == 2:\n            password += alphabet[random.randint(0,len(alphabet)-1)]\n    return password but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, jsonify\n \napp = Flask(__name__)\n\n@app.route('/content', methods=['GET'])\ndef get_content():\n    content = {'data': 'This is the content that will be exposed.'}\n    return jsonify(content)\n\nif __name__ == \"__main__\":\n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mergeKArrays(arrays):\n    '''\n    This function will merge k sorted\n    arrays in to one sorted array.\n    '''\n    # initialize the resulting array\n    result = []\n\n    # loop through all the arrays\n    for array in arrays:\n       # merge this array with existing result\n       result = mergeTwoArrays(result, array)\n\n    # return the result array\n    return result\n\n\ndef mergeTwoArrays(arr1, arr2):\n    # define the resulting array\n    result = []\n    i, j = 0, 0\n\n    # loop through both the arrays\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            result.append(arr1[i])\n            i += 1\n        else:\n            result.append(arr2[j])\n            j += 1\n\n    # add the remaining elements from both arrays\n    result.extend(arr1[i:])\n    result.extend(arr2[j:])\n\n    return result\n\n\narrays = [[1, 3, 5],\n          [2, 4, 6],\n          [7, 8, 9]]\n\nprint(mergeKArrays(arrays)) # [1, 2, 3, 4, 5, 6, 7, 8, 9] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maxOfThree(a, b, c):\n    return max(a, b, c) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def power_function(a, b):\n    return a**b\n\na = int(input(\"Enter the first number: \"))\nb = int(input(\"Enter the second number: \"))\n\nresult = power_function(a, b)\nprint(\"The result is:\", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def subtractFromList(list): \n return [x - 10 for x in list] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # create a new tuple adding the elements from the old tuple and the new elements\nnewTuple = oldTuple + newElements but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: // File mean.cpp\n#include <iostream>\n#include <vector>\n\ndouble mean(std::vector<double> vals) {\n   double result = 0;\n   for (int i = 0; i < vals.size(); i++)\n      result += vals[i];\n   return result / vals.size();\n}\n\n// File mean.i\n%module mean\n%{\n  #define SWIG_FILE_WITH_INIT\n  #include \"mean.cpp\"\n%}\n\n%include \"arrays_cw.i\"\n%include \"mean.cpp\"\n\n// File setup.py\nfrom distutils.core import setup, Extension\n\nexample_module = Extension('_mean',\n                           sources=['mean_wrap.cxx', 'mean.cpp'],)\n\nsetup (name = 'mean',\n       version = '0.1',\n       author      = \"SWIG\",\n       description = \"\"\"Simple swig example from docs\"\"\",\n       ext_modules = [example_module],\n       py_modules = [\"mean\"],\n       )\n\n// File mean_wrap.cxx\n#include \"mean.h\"\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\ndouble mean(double *vals, int n) {\n  std::vector<double> v;\n  for (int i=0; i<n; i++) v.push_back(vals[i]);\n  return mean(v);\n}\n\n#ifdef __cplusplus\n}\n#endif but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Home:\n    def __init__(self, name, location, price):\n        self.name = name\n        self.location = location\n        self.price = price\n \n    def print_location_and_price(self):\n        print(\"Location: \" + self.location + \", Price: \" + self.price)\n \nhome = Home(\"My Home\", \"New York\", \"$500,000\")\nhome.print_location_and_price() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n a, b = 0, 1\n for _ in range(n):\n   a, b = b, a+b\n return a\n \nfor i in range(1, 11):\n fib = fibonacci(i)\n print(fib) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Manager(Employee):\n    \"\"\"A manager class that inherits from the employee class.\"\"\"\n    \n    def __init__(self, name, age, salary, designation):\n        \"\"\"Initialize the manager class with the inherited attributes from the Employee class\"\"\"\n        super().__init__(name, age, salary)\n        self.designation = designation\n    \n    def give_raise(self, amount):\n        \"\"\"Give the manager a raise equivalent to the amount specified\"\"\"\n        self.salary += amount but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [i**2 for i in range(20)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(n):\n    # edge cases\n    if n == 1 or n < 0:\n        return False\n    # check if number is divisible by any number\n    # from 2 to n\n    for i in range(2, n): \n        if (n % i) == 0: \n            return False\n    return True  \n\nx = 5\nif is_prime(x): \n    print(x, \"is a prime number\") \nelse: \n    print(x, \"is not a prime number\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python2\n'''\nAuthor: xswxm\nBlog: xswxm.com\n\nThis script will measure the successful pings per seconds.\ne.g.: sudo python ping.py -l -a 61:8E:9C:CD:03 -f 74 -t 0 -r 0\n\n'''\nimport sys, time, threading\nfrom lib import common\ncommon.init_args('./ping.py')\ncommon.parser.add_argument('-a', '--address', type=str, help='Address to sniff, following as it changes channels', required=True)\ncommon.parser.add_argument('-f', '--channel', type=int, help='RF channel', default=0)\ncommon.parse_and_init()\n\nchannel = common.args.channel\n# Total number of payloads sent\ncount = 0\n\n# Parse the prefix address\naddress = common.args.address.replace(':', '').decode('hex')[::-1][:5]\n# Put the radio in sniffer mode (ESB w/o auto ACKs)\ncommon.radio.enter_sniffer_mode(address)\n# Set channel\ncommon.radio.set_channel(channel)\n\nstop_event = threading.Event()\nstop_event.set()\n\n# Update per milliseconds\ndef display():\n  global count, stop_event\n  # To record the number of payloads sent for every 100 milliseconds\n  pings = [0]*10\n  # Highest rate\n  max_rate = 0\n  while stop_event.isSet():\n    pings = pings[1:] + [count]\n    rate = pings[-1] - pings[0]\n    if max_rate < rate: max_rate = rate\n    msg = 'Maximum Rate: {0:>4}pks/s    Current Rate: {1:>4}pks/s'.format(max_rate, rate)\n    sys.stdout.write('\\r'+msg)\n    sys.stdout.flush()\n    time.sleep(0.1)\n\n\nif __name__ == \"__main__\":\n  t = threading.Thread(target=display,args=())\n  t.start()\n  try:\n    while True:\n      if common.radio.transmit_payload(common.ping_payload, common.ack_timeout, common.retries):\n        count += 1\n  except KeyboardInterrupt:\n    stop_event.clear() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortString(string):\n    words = string.split(\" \")\n    words.sort()\n    return words\n    \nprint(sortString(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 11): \n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_positives_negatives(arr):\n  positives = []\n  negatives = []\n  for x in arr:\n    if x < 0:\n      negatives.append(x)\n    else:\n      positives.append(x)\n  return positives + negatives\n\nresult = sort_positives_negatives([-5, 2, 7, -3, 4, 9])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: no_duplicates_list = list(set(list_with_duplicates)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport matplotlib.pyplot as plt\n\n# Training dataset\nx = np.array([\n[1, 0, 0],\n[1, 0, 1],\n[1, 1, 0],\n[1, 1, 1]])\n\ny = np.array([[0],[1],[1],[0]])\n\n# Initialize the weights and bias\nW1 = np.random.rand(3, 4)\nW2 = np.random.rand(4, 1)\nb1 = np.random.rand(4,)\nb2 = np.random.rand(1,)\n\n# Define the sigmoid activation function\ndef sigmoid(x):\n return 1/(1 + np.exp(-x))\n\n# Define the derivative of the sigmoid function\ndef derivative_sigmoid(x):\n return sigmoid(x)*(1-sigmoid(x))\n\n# Feedforward\nh1 = x.dot(W1) + b1\n# Hidden layer activation\na1 = sigmoid(h1)\n# Assesment of second layer\nh2 = a1.dot(W2) + b2\n# Final activation\noutput = sigmoid(h2)\n\n# Calculate the error \nerror = y - output\n\n# Backpropagation\nd_output = error * derivative_sigmoid(output)\nerror_hidden_layer = d_output.dot(W2.T)\nd_hidden_layer = error_hidden_layer * derivative_sigmoid(a1)\n\n# Update weights and bias\nW2 += a1.T.dot(d_output)\nb2 += np.sum(d_output, axis = 0, keepdims=True)\nW1 += x.T.dot(d_hidden_layer)\nb1 += np.sum(d_hidden_layer, axis = 0, keepdims=True)\n\n# Printed output from our neural network\nprint (output)\n\n# Sample input to the neural network\nInput 1: [1, 0, 0]\nInput 2: [1, 0, 0]\n\n# Printed output\n[[0.06108959]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef sphere_surface_area(radius):\n surface_area = 4 * math.pi * radius * radius\n return surface_area \n\n# Test\nradius = 6\nprint(sphere_surface_area(radius)) # 452.38934211 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt \n\nfrom sklearn.preprocessing import MinMaxScaler \nfrom keras.models import Sequential \nfrom keras.layers import LSTM, Dense \n\ndf = pd.read_csv(input_data)\n\n# feature scaling \nsc = MinMaxScaler(feature_range= (0,1)) \ndf_scaled = sc.fit_transform(df) \n\n# split into training and test sets \nx_train, y_train = df_scaled[:train_len, 3], df_scaled[:train_len, 3] \nx_test, y_test = df_scaled[train_len:, 3], df_scaled[train_len:, 3] \n\n# reshape the data \nx_train = np.reshape(x_train, (x_train.shape[0], 1, x_train.shape[1]) \nx_test = np.reshape(x_test, (x_test.shape[0], 1, x_test.shape[1]) \n\n# build model \nmodel = Sequential() \nmodel.add(LSTM(50, return_sequences=True)) \nmodel.add(LSTM(50, return_sequences=False)) \nmodel.add(Dense(1)) \nmodel.compile(loss='mean_squared_error', optimizer='adam') \n\n# fit model \nmodel.fit(x_train, y_train, batch_size=1, epochs=1) \n\n# make prediction \npredicted_stock_price = model.predict(x_test) \npredicted_stock_price = sc.inverse_transform(predicted_stock_price) \n\n# visualize the result  \nplt.plot(real_stock_price, color = 'red', label = 'Real Stock Price') \nplt.plot(predicted_stock_price, color = 'blue', label = 'Predicted Stock Price') \nplt.title('Stock Price Prediction') \nplt.xlabel('Time') \nplt.ylabel('Stock Price') \nplt.legend() \nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(arr, target):\n    for i in range(len(arr)):\n        if (arr[i] == target):\n            return i\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_sentiment(sentence):\n    words = sentence.split()\n    positive_words = [\"good\", \"great\", \"excellent\", \"wonderful\"]\n    negative_words = [\"bad\", \"horrible\", \"terrible\", \"awful\"]\n\n    pos_count, neg_count = 0, 0\n    for word in words:\n        if word in positive_words:\n            pos_count += 1\n        if word in negative_words:\n            neg_count += 1\n    if pos_count > neg_count:\n        sentiment = \"positive\"\n    elif neg_count > pos_count:\n        sentiment = \"negative\"\n    else:\n        sentiment = \"neutral\"\n    return sentiment but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: state_capitals = {\n    'Alabama': 'Montgomery',\n    'Alaska': 'Juneau',\n    'Arizona': 'Phoenix',\n    'Arkansas': 'Little Rock',\n    'California': 'Sacramento',\n    'Colorado': 'Denver',\n    'Connecticut': 'Hartford',\n    'Delaware': 'Dover',\n    'Florida': 'Tallahassee',\n    'Georgia': 'Atlanta',\n    'Hawaii': 'Honolulu',\n    'Idaho': 'Boise',\n    'Illinois': 'Springfield',\n    'Indiana': 'Indianapolis',\n    'Iowa': 'Des Moines',\n    'Kansas': 'Topeka',\n    'Kentucky': 'Frankfort',\n    'Louisiana': 'Baton Rouge',\n    'Maine': 'Augusta',\n    'Maryland': 'Annapolis',\n    'Massachusetts': 'Boston',\n    'Michigan': 'Lansing',\n    'Minnesota': 'Saint Paul',\n    'Mississippi': 'Jackson',\n    'Missouri': 'Jefferson City',\n    'Montana': 'Helena',\n    'Nebraska': 'Lincoln',\n    'Nevada': 'Carson City',\n    'New Hampshire': 'Concord',\n    'New Jersey': 'Trenton',\n    'New Mexico': 'Santa Fe',\n    'New York': 'Albany',\n    'North Carolina': 'Raleigh',\n    'North Dakota': 'Bismarck',\n    'Ohio': 'Columbus',\n    'Oklahoma': 'Oklahoma City',\n    'Oregon': 'Salem',\n    'Pennsylvania': 'Harrisburg',\n    'Rhode Island': 'Providence',\n    'South Carolina': 'Columbia',\n    'South Dakota': 'Pierre',\n    'Tennessee': 'Nashville',\n    'Texas': 'Austin',\n    'Utah': 'Salt Lake City',\n    'Vermont': 'Montpelier',\n    'Virginia': 'Richmond',\n    'Washington': 'Olympia',\n    'West Virginia': 'Charleston',\n    'Wisconsin': 'Madison',\n    'Wyoming': 'Cheyenne'\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_common_elements(lst1, lst2):\n    result = []\n    set_2 = set(lst2)\n    for elem1 in lst1:\n        if elem1 in set_2:\n            result.append(elem1)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: [180, 144, 120]\n\n# Python \ndef get_products(arr):\n    result = []\n    # looping over each row in the array\n    for row in arr:\n        product = 1\n        # calculating product of all elements except the element at current index \n        for i,element in enumerate(row):\n            product *= row[i] if i != 0 else 1\n        \n        # append product to result array\n        result.append(product)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_primes(min, max):\n  for num in range(min, max+1):\n    if num > 1:\n      for i in range(2, num):\n        if (num % i) == 0:\n          break\n      else:\n        print(num)\n  \n# Driver Code\nmin = 1\nmax = 10\n\nprint_primes(min, max)\n\n# Output:\n# 2\n# 3\n# 5\n# 7 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import geopandas\nimport matplotlib.pyplot as plt\n\n# Read in the shapefile of nations\nworld = geopandas.read_file(geopandas.datasets.get_path('naturalearth_lowres'))\n\n# Set up the base figure\nfig, ax = plt.subplots(figsize=(12, 8))\n# Set up the title of the map as a subplot\nax.set_title(\"Geographic Information System\", fontdict={'fontsize': 20}, loc='left')\n\n# Display the world map\nworld.plot(ax=ax, color='white', edgecolor='black')\n\n# Display a legend\nax.legend(loc='upper right')\n\n# Show the map\nplt.show() but is not the same. just give one example and only return the code."}
