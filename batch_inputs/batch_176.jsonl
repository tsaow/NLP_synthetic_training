{"prompt": "make some code that functions the same as the following code: from sklearn.linear_model import LinearRegression\nimport pandas as pd\n\n# Read dataset\ndf = pd.read_csv('weather.csv')\n\n# Define features and target\nX = df[['date', 'temp']]\ny = df['humidity']\n\n# Create Linear Regression model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Make predictions\npredictions = model.predict(X)\n\n# Display results\nprint('Forecasted Humidity')\nfor i in range(len(predictions)):\n    print('{:.2f}'.format(predictions[i])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_to_list(s):\n    return s.split(' ') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Importing the requests module\nimport requests\n \n# API URL \nurl = \"https://api.worldbank.org/v2/countries/\"\n \n# Sending the HTTP request\nresponse = requests.get(url)\n \n# Converting the response in JSON format\nresponse_json = response.json()\n \n# Iterating over the response\nfor country in response_json[1]:\n    print(\"Country Name:\", country['name'])\n    print(\"Country Code:\", country['iso2Code'])\n    print(\"Region:\", country['region']['value'])\n    print(\"Income Level:\", country['incomeLevel']['value'], \"\\n\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def identify_primes(num):\n    '''This function will identify all the prime numbers up to a given integer.'''\n    primes = []\n    for x in range(2, num):\n        if all(x%i!=0 for i in range(2, int(x**0.5)+1)):\n            primes.append(x)\n    return primes but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import webapp2\nfrom google.appengine.api import urlfetch\nimport json\n\nclass MainHandler(webapp2.RequestHandler):\n def get(self):\n city = 'London'\n api_key = '<your_api_key>'\n url = 'http://api.openweathermap.org/data/2.5/weather?q={}&APPID={}'.format(city, api_key)\n result = urlfetch.fetch(url)\n self.response.write(json.loads(result.content))\n  \napp = webapp2.WSGIApplication([\n ('/', MainHandler)\n], debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def divide_list_into_equal_groups(arr):\n  # Find the sum of all elements\n  sum_elements = 0\n  for i in arr:\n    sum_elements += i\n    \n  # divide the sum by 3 to get the desired result\n  avg = int(sum_elements / 3)\n    \n  # create a set to store all the possible sums\n  result = set()\n  for i in range(len(arr)):\n    for j in range(i, len(arr)):\n      temp_sum = 0\n      for k in range(i, j + 1):\n        temp_sum += arr[k]\n      result.add(temp_sum)\n    \n  # check if the desired sum is present in the set or not\n  if avg in result:\n    # Divide list into 3 groups\n    group1 = []\n    group2 = []\n    group3 = []\n    curr_g1_sum = 0\n    curr_g2_sum = 0\n    curr_g3_sum = 0\n    flag = 0\n      \n    for i in range(len(arr)):\n      # Check for current sum of each group\n      if flag == 0:\n        curr_g1_sum += arr[i]\n        if curr_g1_sum > avg:\n            flag = 1\n            curr_g2_sum += arr[i]\n        \n      elif flag == 1:\n        curr_g2_sum += arr[i]\n        if curr_g2_sum > avg:\n          flag = 2\n          curr_g3_sum += arr[i]\n        else:\n          group1.append(arr[i])\n          \n      elif flag == 2:\n        curr_g3_sum += arr[i]\n        if curr_g3_sum > avg:\n            return -1\n        else:\n            group2.append(arr[i])    \n          \n    group3.append(arr[-1])\n    return group1, group2, group3\n  else:\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(a, b): \n    # base case \n    if (a == 0):  \n        return b \n    if (b == 0):  \n        return a \n  \n    # a is greater \n    if (a > b): \n        return gcd(a%b, b) \n          \n    return gcd(a, b%a) \n\nprint(gcd(8, 12)) # 4 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_sum(a, b):\n  if a + b == 10:\n    return True\n  else:\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def missing_number(nums): \n    # Get the range of available numbers \n    range_nums = range(min(nums), max(nums) + 1) \n  \n    # Generate a dictionary with numbers in the range as key and its  \n    # present in the array or not as its value \n    result = dict.fromkeys(range_nums, False) \n    for item in nums: \n        result[item] = True\n  \n    # Iterate over the dictionary and get the missing value \n    missing_value = 0\n    for key, value in result.items(): \n        if value == False: \n            missing_value = key \n            break\n  \n    # Return the missing value \n    return missing_value \n\n# Driver code \nnums = [4, 5, 7, 9, 10]\nmissing_value = missing_number(nums) \nprint(\"Missing number is: \", missing_value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def largest_element(list1): \n    max = list1[0] \n    for item in list1: \n        if item > max: \n            max = item\n    return max but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_length(words):\n    new_words = []\n    for word in words:\n        if len(word) == 5:\n            new_words.append(word)\n\n    return new_words\n\nwords = [\"Hello\", \"Hello World\", \"World\", \"Python\", \"Coding\"]\n print(filter_length(words)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import xgboost as xgb\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.model_selection import train_test_split\n \n# Load the data\ndata = load_breast_cancer()\nX = data.data\ny = data.target\n \n# Split the data into training and testing sets  \nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)\n \n# Instantiate the XGBoost model  \nxg_cls = xgb.XGBClassifier(objective=\"binary:logistic\", n_estimators=10, seed=123)\n \n# Fit the model\nxg_cls.fit(X_train, y_train)\n \n# Predict the labels of the test set\nprediction = xg_cls.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(nums, target):\n    for i, num in enumerate(nums):\n        if target == num:\n            return i\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n\nalphanumeric_string = ''.join(random.choices(string.ascii_letters + string.digits, k=10))\n\nprint(alphanumeric_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def addNums(x, y):\n    return x + y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Get the webpage\nurl = \"http://example.com/news\"\npage = requests.get(url)\n\n# Parse the page\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Get the titles\ntitles = soup.find_all('a', class_=\"article-title\")\ntitles = [title.get_text() for title in titles][:100]\n\n# Print the titles\nfor title in titles:\n    print(titles) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def heapify(arr, n, i): \n    largest = i   # Initialize largest as root \n    l = 2 * i + 1     # left = 2*i + 1 \n    r = 2 * i + 2     # right = 2*i + 2 \n  \n    # See if left child of root exists and is \n    # greater than root \n    if l < n and arr[i] < arr[l]: \n        largest = l \n  \n    # See if right child of root exists and is \n    # greater than root \n    if r < n and arr[largest] < arr[r]: \n        largest = r \n  \n    # Change root, if needed \n    if largest != i: \n        arr[i],arr[largest] = arr[largest],arr[i]   # swap \n  \n        # Heapify the root. \n        heapify(arr, n, largest) \n  \n# The main function to sort an array of given size \ndef heapSort(arr): \n    n = len(arr) \n  \n    # Build a maxheap. \n    for i in range(n, -1, -1): \n        heapify(arr, n, i) \n  \n    # One by one extract elements \n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i]   # swap \n        heapify(arr, i, 0)\n  \n# Driver code to test above \narr = [ 12, 11, 13, 5, 6, 7] \nheapSort(arr) \nn = len(arr) \nprint (\"Sorted array is\") \nfor i in range(n): \n    print (\"%d\" %arr[i]), but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_to_upper_case(string):\n    '''This function will take a string as input and convert it to upper case'''\n    return string.upper()\n\nconverted_string = convert_to_upper_case(\"hello world\")\nprint(converted_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: i = 0\nwhile i < 5:\n    print(i)\n    i += 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef normalize(arr):\n  return (arr - np.mean(arr)) / np.std(arr)\n\nnormalize([1,2,3,4]) # [-1.,  0.,  1.,  2.] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_average_age(people_list):\n    ages_sum = 0\n    for person in people_list:\n        ages_sum += person['age']\n    return ages_sum / len(people_list)\n\npeople_list = [{\"name\":\"john\",\"age\":20},{\"name\":\"jack\",\"age\":25},{\"name\":\"jason\",\"age\":30}] \naverage_age = find_average_age(people_list)\nprint(average_age) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to find square root  \n# using binary search \n\ndef binarySearch(n, low, high): \n    mid = low + (high - low)/2\n  \n    # base cases \n    if(mid*mid == n): \n        return mid \n          \n    if(mid*mid > n): \n        return binarySearch(n, low, mid-1) \n          \n    return binarySearch(n, mid+1, high)\n      \n# Driver Code \nn = 16\nans = binarySearch(n, 0, n) \n#print 'Square root of ', n, 'is', ans\nprint(\"Square root of %0.5f is %f \" % (n, ans)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maxValue(array):\n    max = array[0]\n    for num in array:\n        if num > max:\n            max = num\n    return max\n\na = [5, 9 ,8, 2, 1, 3]\nprint(maxValue(a)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\ndb = sqlite3.connect(\"employee_table.db\") # Assumes the table is in a file named employee_table.db\ncur = db.cursor()\n\n# Execute the SQL command\ncur.execute(\"SELECT * FROM employee_table WHERE salary < 10000\")\n\n# Commit your changes\ndb.commit()\n\n# Get the results\nresults = cur.fetchall()\n\n# Print the results\nfor row in results:\n    print(row) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Check to make sure the length of the phone number is 10\ndef check_phone_number(phone_number):\n    if len(phone_number) != 10:\n        return False\n\n    # Check to make sure all characters are digits\n    for c in phone_number:\n        if c < '0' or c > '9':\n            return False\n\n    # Phone number is valid\n    return True\n\n# Test the function\nprint(check_phone_number('8888881111')) # True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_animal(weight, size):\n    if weight < 10 and size < 50:\n        return 'small'\n    elif weight >= 10 and size >= 50:\n        return 'large'\n    else:\n        return 'medium'\n\nclassify_animal(5, 40) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Load emails\nemails = pd.read_csv('emails.csv')\n\n# Create Multinomial Naive Bayes classifier\ntfidf = TfidfVectorizer(stop_words='english')\nX = tfidf.fit_transform(emails.email).toarray()\ny = emails.spam\nclassifier = MultinomialNB().fit(X,y)\n\n# Make predictions for new emails\nemail = [\"Hi, I am offering a great deal on your favorite products.\"]\nemail_transformed = tfidf.transform(email).toarray()\nprobability = classifier.predict_proba(email_transformed)\n\n# Show results\nif probability[0][1] > 0.5:\n    print(\"This email is marked as SPAM\")\nelse:\n    print(\"This email is NOT marked as SPAM\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def caesarCipher(string, shift):\n    result = \"\"\n    for char in string:\n        char_code = ord(char)+shift\n        if char_code < ord('A'):\n            result += chr(ord('Z')- abs(char_code) + 1)\n        elif char_code > ord('Z'):\n            result += chr(ord('A') + abs(char_code) - 1)\n        else:\n            result += chr(char_code)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_string(str):\n    str = ''.join(x for x in str if x.isdigit())\n    return str  \n\nmy_string = \"hey3this5is4my2string1\"\nprint(filter_string(my_string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Date:\n    def __init__(self):\n        self.day = 0\n        self.month = 0\n        self.year = 0\n \n    # function to set the date\n    def set_date(self, day, month, year):\n        self.day = day\n        self.month = month\n        self.year = year\n \n    # function to get the date\n    def get_date(self):\n        return self.day, self.month, self.year but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Car:\n    def __init__(self, make, model, color):\n        self.make = make\n        self.model = model\n        self.color = color\n    \n    def accelerate(self):\n        self.speed += 10\n    \n    def brakes(self):\n        self.speed -= 10 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def nearest_integer(number):\n if number - int(number)>= 0.5:\n return int(number) + 1\n else:\n return int(number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_password(length, rule):\n    upper_case_letters = [chr(i) for i in range(65, 91)]\n    lower_case_letters = [chr(i) for i in range(97, 123)]\n    numbers = [str(i) for i in range(0, 10)]\n    symbols = [\"@\", \"#\", \"$\", \"%\", \"&\"]\n    password = []\n    password.extend(random.sample(upper_case_letters, 1))\n    password.extend(random.sample(lower_case_letters, 1))\n    password.extend(random.sample(numbers, 2))\n    password.extend(random.sample(symbols, 1))\n    password.extend(random.sample(lower_case_letters + upper_case_letters + numbers, length - 5))\n    random.shuffle(password)\n    return \"\".join(password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def normalize_mean(data):\n    mean = np.mean(data)\n    normalized = [x - mean for x in data]\n    return normalized but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import necessary libraries\nimport nltk\nimport numpy as np\nfrom nltk.corpus import brown\nfrom nltk.tokenize import word_tokenize\n\n#initialize HMM \ndef hmm():\n    # load corpus\n    corpus = brown.tagged_sents(categories=['adventure','fiction','romance',\n                                            'humor','mystery','science_fiction'])\n\n    # split corpus and generate tags\n    train_data,test_data = corpus[:1000], corpus[1000:]\n    tags = set([tag for sent in train_data for (word,tag) in sent])\n\n    # initialize hmm\n    hmm = {tag:{tag:{0:0 for tag in tags} for tag in tags} }\n    hmm['start'] = {tag:0 for tag in tags}\n    hmm['end'] = {tag:0 for tag in tags}\n\n    # calculate initial probabilities\n    for sent in train_data:\n        for i in range(len(sent)):\n            word,tag = sent[i]\n            if i == 0:\n                hmm['start'][tag] += 1\n            else:\n                previous_tag = sent[i-1][1]\n                hmm[previous_tag][tag][0] += 1\n            hmm[tag][tag][word] = hmm[tag][tag].get(word, 0) + 1\n\n    # calculate transition probabilities\n    for previous_tag in hmm:\n        if previous_tag != 'start' and previous_tag != 'end':\n            total = sum(hmm[previous_tag][tag][0] for tag in hmm[previous_tag])\n            for tag in hmm[previous_tag]:\n                hmm[previous_tag][tag][0] /= total\n    return hmm\n\ndef predict(sentence, hmm):\n    sentence = sentence.lower()\n    tokenized_sentence = word_tokenize(sentence)\n    # assign default tag to each word\n    tagged_sentence = []\n    for word in tokenized_sentence:\n        tagged_sentence.append((word,'M'))\n\n    # calculate likelihood of each tag for each word\n    for i in range(len(tagged_sentence)):\n        word,tag = tagged_sentence[i]\n        if i == 0:\n            probs = {tag:hmm['start'][tag] for tag in hmm['start']}\n        else:\n            previous_tag = tagged_sentence[i-1][1]\n            probs = {tag:hmm[previous_tag][tag][0] * hmm[tag][tag].get(word, 0) \n                     for tag in hmm[previous_tag]}\n        max_prob, tag_chosen = max(probs.items(), key=lambda x:x[1])\n        tagged_sentence[i] = (word, tag_chosen)\n    return tagged_sentence but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def checkContiguousSubarray(arr, n, sum): \n          \n    # To store current sum and \n    # starting index of subarray \n    currsum = arr[0] \n    start = 0\n  \n    # Initially size of \n    # minimum length subarray is 1 \n    minlength = 1\n      \n    # Traverse through the given array \n    for i in range(1, n): \n          \n        # Update current sum \n        currsum = currsum + arr[i] \n          \n        # If currsum has reached more than \n        # or equal to sum remove starting \n        # elements \n        while currsum >= sum: \n              \n            # Update minimum length if needed \n            if (i + 1 - start < minlength): \n                minlength = i + 1 - start \n  \n            # remove starting elements \n            currsum = currsum - arr[start] \n            start = start + 1\n              \n    # Print the minimum length  \n    if minlength == n + 1: \n        print(\"Not Possible\") \n    else: \n        print(\"Minimum length of subarray is: %d\" %minlength) \n          \n# Driver code \narr =  [1, 4, 20, 3, 10, 5]\nk = 33\nn = len(arr) \nprint(\"Given array is\")\nprint(arr)\ncheckContiguousSubarray(arr, n, k) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def store_contact_info(contact_dict):\n    \n    name = contact_dict[\"name\"]\n    phone = contact_dict[\"phone\"]\n    email = contact_dict[\"email\"]\n\n    # Create dictionary to store contact info\n    contact_info_dict = {\n        \"Name\": name,\n        \"Phone\": phone,\n        \"Email\": email\n    }\n    return contact_info_dict but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Find the greatest common denominator\ndef gcd(num1, num2):\n    if num2 == 0:\n        return num1\n    else:\n        return gcd(num2, num1 % num2)\n\n# Find the least common multiple\ndef lcm(num1, num2):\n    return (num1 * num2) // gcd(num1, num2)\n\nnum1 = 12\nnum2 = 18\n\nprint(lcm(num1, num2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_numbers(nums):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] > nums[j]:\n                temp = nums[j]\n                nums[j] = nums[i]\n                nums[i] = temp\n    return nums\n\nprint(sort_numbers([5, 7, 1, 6, 10, 4, 2])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = \"Hello World\"\nprint(len(string)) # prints 11 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import csv\nimport json\n \ncsv_file = open('data.csv', 'r')\njson_file = open('data.json', 'w')\n \nfieldnames = (\"Name\",\"Age\",\"Profession\")\nreader = csv.DictReader(csv_file, fieldnames)\nout = json.dumps([r for r in reader])\njson_file.write(out) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def capitalize_first_letter(word):\n    return word[0].upper() + word[1:]\n\n# main\nword = \"python\"\ncapitalized = capitalize_first_letter(word)\nprint(capitalized) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: try:\n my_list = [1, 2, 3]\n print(my_list[4])\nexcept IndexError as e:\n print('Index not found!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n \nrandom_nums = [random.randint(1, 10) for _ in range(100)]\n \nprint(random_nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nISBN = '9781400079170'\nparams = {'bibkeys': ISBN, 'format': 'json', 'jscmd': 'details'}\n\nrequest = requests.get('https://openlibrary.org/api/books', params=params)\ndata = request.json()\n\nbook = data[f'OLID:{ISBN}']\ntitle = book['title']\nauthor = book['authors'][0]['name']\ndescription = book['description'][0]\n\nprint(f'Title: {title}')\nprint(f'Author: {author}')\nprint(f'Description: {description}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_to_dict(keys, values):\n result = {}\n for i in range(len(keys)):\n  result[keys[i]] = values[i] \n return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request\nimport sqlite3\n\napp = Flask(name)\n\n@app.route('/form', methods=['POST'])\ndef save_form():\n conn = sqlite3.connect('data.db')\n c = conn.cursor()\n c.execute(\"INSERT INTO submission VALUES ('name': ?, 'email': ?, 'phone': ?)\", (request.json['name'], request.json['email'], request.json['phone'])\n conn.commit()\n conn.close()\n return {'message': 'Successfully saved data'}\n \nif name == 'main':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Importing the essential libraries \nfrom sklearn.linear_model import LinearRegression \nfrom sklearn.metrics import mean_squared_error \nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.preprocessing import PolynomialFeatures  \nimport numpy as np \nimport pandas as pd \n\n# Loading the dataset \ndf = pd.read_csv('dataset.csv') \n\n# Separating dependent and independent variables \nX = df.iloc[:, :-1]\ny = df.iloc[:, -1]\n\n# Splitting into training and test set \nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 1) \n\n# Fitting a polynomial to the model \npolynomial_model = PolynomialFeatures(degree = 4)\nX_poly = polynomial_model.fit_transform(X_train)\npoly_reg = LinearRegression() \npoly_reg.fit(X_poly, y_train)\n\n# Predicting the next three days temperatures \nX_next_three_days = np.array([[+2.00], \n ] + [[+2.25], \n ] + [[+2.50]]).reshape(3,1)\nX_poly_next_three_days = polynomial_model.fit_transform(X_next_three_days )\n \npred_temp_next_three_days = poly_reg.predict(X_poly_next_three_days) \n \n# Printing the predictions\nprint(\"The predicted temperature for the next three days:\", pred_temp_next_three_days) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n\n# Function to convert array to linked list\ndef arrayToLinkedList(arr):\n    head = Node(arr[0])\n    currentNode = head\n    for i in range(1, len(arr)):\n        newNode = Node(arr[i])\n        currentNode.next = newNode\n        currentNode = newNode\n        \n    return head\n\n# Tester code\narr = [1, 2, 3, 4]\nhead = arrayToLinkedList(arr)\n\n# Print linked list\nwhile head:\n    print(head.data, end=\" \")\n    head = head.next but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create an empty 2D list\nn = 10\narr = [[0 for j in range(n)] for i in range(n)]\n\n# Print the array\nprint(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route(\"/\", methods = [\"GET\", \"POST\"])\ndef index():\nif request.method == \"POST\":\n return render_template(\"index.html\", message=\"Form Submitted\")\nreturn render_template(\"index.html\", message= \"Hello, World\")\n\nif __name__ == \"__main__\":\n app.run(debug=True)\n\n# index.html\n\n<html>\n <head>\n <title>Form Submission</title>\n </head>\n <body>\n <h1>{{message}}</h1>\n <form action=\"/\" method=\"post\">\n <input type=\"submit\" value=\"Submit\" />\n </form>\n </body>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_b = list_a[:] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_search(arr, value): \n    low = 0\n    high = len(arr) - 1\n  \n    while low <= high: \n        mid = (low + high) // 2\n        if arr[mid] < value: \n            low = mid + 1\n        elif arr[mid] > value: \n            high = mid - 1\n        else: \n            return mid \n  \n    return -1\n\n# Test\narr = [2, 5, 7, 9, 12, 15]\nvalue = 12\nprint(binary_search(arr, value)) # 4 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def foo(lst):\n    minimum = min(lst)\n    return minimum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: nums = [5, 3, 2, 6, 8]\nsum = 0\nout_string = \"\"\n\nfor num in nums:\n sum += num\n out_string += str(num)\n \n if num != nums[-1]:\n  out_string += \" + \"\n else:\n  out_string += \" = \"\n  \nout_string += str(sum)\n\nprint(out_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import xml.etree.ElementTree as et\nroot = et.fromstring('<root><person><name>John</name><age>27</age><hobbies><hobby>Movies</hobby><hobby>Photography</hobby></hobbies></person></root>')\n\ndata_dict = {}\n\nfor elem in list(root):\n    key = elem.tag\n    data_dict[key] = {}\n    for subelem in list(elem):\n        data_dict[key][subelem.tag] = subelem.text\n\nprint(data_dict)\n\n# Output\n{'person': {'name': 'John', 'age': '27', 'hobbies': {'hobby': ['Movies', 'Photography']}}} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longestSharedSubstring(str1, str2): \n  \n    # Variables to store the current substring \n    currentSubstring = \"\" \n    longestSubstring = \"\" \n  \n    # Compare every element of both the strings \n    for i in range(len(str1)): \n        for j in range(len(str2)): \n  \n            # Move forward if the characters match \n            if (str1[i] == str2[j]): \n                currentSubstring += str1[i] \n  \n                # Update max substring if required \n                if (len(currentSubstring) > len(longestSubstring)): \n                    longestSubstring = currentSubstring \n  \n            else: \n                currentSubstring = \"\" \n  \n    return longestSubstring \n\nlongestSubstring = longestSharedSubstring('thequickbrownfox', 'jumpedoverthelazydog')\nprint(longestSubstring) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(str * n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Filter a list with a given criteria\ndef filter_list(input_list, criteria):\n    filtered_list = []\n    for num in input_list:\n        if num % criteria == 0:\n            filtered_list.append(num)\n    return filtered_list\n\nresult = filter_list([2, 3, 4, 5, 6, 7], 3)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n  def __init__(self, name, salary, experience):\n    self.name = name\n    self.salary = salary\n    self.experience = experience\n\n  def display_details(self):\n    print(f'Name: {self.name}\\nSalary: {self.salary}\\nExperience: {self.experience}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def upper_string(str1):\n    upper_str = ''\n    for i in range(len(str1)):\n        if ord(str1[i]) in range(97, 123):\n            upper_str += chr(ord(str1[i]) - 32)\n        else:\n            upper_str += str1[i]\n    return upper_str but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Vector2D:\n  def __init__(self, x, y):\n    self.x = x\n    self.y = y\n  \n  def __add__(self, other):\n    return Vector2D(self.x + other.x, self.y + other.y)\n  \n  def __sub__(self, other):\n    return Vector2D(self.x - other.x, self.y - other.y)\n  \n  def __mul__(self, scalar):\n    return Vector2D(self.x * scalar, self.y * scalar) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nfor i in range(10):\n ip_address = \"192.168.1.\" + str(random.randrange(0, 255))\n print(ip_address) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Book:\n    def __init__(self, title, author, publication_year, number_of_pages):\n        self.title = title\n        self.author = author\n        self.publication_year = publication_year\n        self.number_of_pages = number_of_pages but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1,11):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n \ndef main():\n # number of darts to throw\n n = 1000000\n   \n # number of darts that land within the circle\n inside = 0\n \n # use the current system time as the seed\n random.seed()\n \n for i in range(n):\n # generate a random point x between -1 and 1\n x = random.uniform(-1, 1)\n \n # generate a random point y between -1 and 1\n y = random.uniform(-1, 1)\n \n # check to see if it landed within the circle or outside\n if (x*x + y*y <= 1):\n inside +=1\n \n pi = 4 * inside/n\n \n print (\"Pi is roughly %f\" % pi)\n \nif __name__ == \"__main__\":\n main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\nx = 81.0\n# calculate the square root\nprint('The square root of %0.1f is %0.1f'%(x, math.sqrt(x))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_gcd(num1, num2):\n    gcd = 1\n    while num2 != 0:\n        temp = num2\n        num2 = num1 % num2\n        num1 = temp\n        gcd = num1\n    return gcd but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tweepy\n\n# Authentication keys\nconsumer_key = 'xxxxxxxxxxxxxxxxxxxxx'\nconsumer_secret = 'xxxxxxxxxxxxxxxxxxxxx'\naccess_token = 'xxxxxxxxxxxxxxxxxxxxx'\naccess_token_secret = 'xxxxxxxxxxxxxxxxxxxxx'\n\n# Authentication\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\n# Initialization of the API\napi = tweepy.API(auth)\n\n# Get the top 10 trending tweets\ntrending_tweets = api.search(q=\"#machinelearning\", lang=\"en\", rpp=10, tweet_mode='extended')\n\nfor tweet in trending_tweets: \n    print(tweet.full_text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef shuffle(my_arr):\n    shuffled_arr = my_arr[:]\n    random.shuffle(shuffled_arr)\n    return shuffled_arr\n\nshuffled_arr = shuffle(my_arr)\nprint(shuffled_arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to get the middle of the linked list \ndef getmiddle(head): \n    if(head == None): \n        return head \n  \n    slow_ptr = head \n    fast_ptr = head \n  \n    while(fast_ptr != None and fast_ptr.next != None): \n        slow_ptr = slow_ptr.next\n        fast_ptr = fast_ptr.next.next\n  \n    return slow_ptr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: i = 0\nwhile i < 10:\n    print(i)\n    i += 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = [\"apple\", \"pie\", \"is\", \"delicious\"]\n\nfor word in words:\n print(len(word)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\ndef search(keyword):\n urls = []\n url = \"https://www.example.com/search?q=\" + keyword\n response = requests.get(url)\n soup = BeautifulSoup(response.text, 'html.parser')\n results = soup.find_all('a')\n for result in results:\n  if result.has_attr('href'):\n   urls.append(result['href'])\n return urls\n\nurls = search(\"code generation\")\nprint(urls) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import calendar\n\ndef days_in_month(year, month):\n    return calendar.monthrange(year, month)[1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(x, y):\n    while y != 0:\n        (x, y) = (y, x % y)\n    return x\n\nnum1 = 5\nnum2 = 6\n\nprint(\"GCD is:\", gcd(num1, num2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import asyncio\nimport websockets\n\nevents = []\n\nasync def handle_message(websocket):\n while True:\n data = await websocket.recv()\n events.append(data)\n\nasync def consumer_handler(websocket, path):\n await handle_message(websocket)\n\nstart_server = websockets.serve(consumer_handler, \"localhost\", 8765)\n\nasyncio.get_event_loop().run_until_complete(start_server)\nasyncio.get_event_loop().run_forever() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_numbers(numbers, criteria):\n    filtered_numbers = []\n    for number in numbers:\n        if (criteria == 'greater than') and (number > 5):\n            filtered_numbers.append(number)\n    return filtered_numbers\n \nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfiltered_numbers = filter_numbers(numbers, 'greater than')\nprint(filtered_numbers) #[6, 7, 8, 9, 10] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, course_name, grades):\n        self.course_name = course_name\n        self.grades = grades\n        \n    def get_grade(self):\n        return sum(self.grades) / len(self.grades) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def levenshtein_distance(s1: str, s2: str):\n    m = len(s1)\n    n = len(s2)\n \n    table = dict()\n    for i in range(m+1):\n        table[i, 0] = i\n    for j in range(n+1):\n        table[0, j] = j\n \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if s1[i-1] == s2[j-1]:\n                cost = 0\n            else: \n                cost = 1\n            table[i, j] = min(table[i-1, j] + 1, \n                    table[i, j-1] + 1, \n                    table[i-1, j-1] + cost)\n \n    return table[m, n]\n \nprint(levenshtein_distance('kitten', 'sitting'))\n\nOutput: 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef clean_text(text):\n cleaned_text = re.sub(r'[^\\w\\s]','', text)\n cleaned_text = cleaned_text.lower().strip()\n return cleaned_text\n \n text = 'This is a sample sentence.'\n cleaned_text = clean_text(text)\n print(cleaned_text)\n\n# Output: thisisasamplesentence but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printWords(text):\n words = text.split()\n for word in words:\n print(word)\n\nprintWords(\"The quick brown fox\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def getUrlContent(url):\n    response = requests.get(url)\n    return response.content.decode('utf-8') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(word1, word2):\n    word1 = word1.replace(' ', '').lower()\n    word2 = word2.replace(' ', '').lower()\n\n    if len(word1) != len(word2):\n        return False\n\n    count = {}\n    for letter in word1:\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n\n    for letter in word2:\n        if letter in count:\n            count[letter] -= 1\n        else:\n            count[letter] = 1\n\n    for k in count:\n        if count[k] != 0:\n            return False\n\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import necessary libraries\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\n\n#load data\ndata = pd.read_csv('data.csv')\n\n#split data into features and labels\nX = data.iloc[:, :-1]\ny = data.iloc[:, -1]\n\n#train-test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n#initializing the classifier\nclassifier = RandomForestClassifier(n_estimators=20, random_state=0)\n\n# training the classifier\nclassifier.fit(X_train, y_train)\n\n# predicting the test set results\ny_pred = classifier.predict(X_test)\n\n# evaluating the classifier\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"http://website.com/products/\"\n\ndef scrape(url):\n data = {'name': [], 'price': []}\n resp = requests.get(url)\n soup = BeautifulSoup(resp.text, 'html.parser')\n \n for product in soup.select('div.product'):\n data['name'].append(product.select_one('p.name').text)\n data['price'].append(product.select_one('p.price').text)\n \n return data\n\ndata = scrape(url)\n\nprint(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\n# Get json string\njson_string = \"{\\\"name\\\":\\\"John Doe\\\",\\\"age\\\":30}\"\n\n# Parse the json string\nparsed_string = json.loads(json_string)\n\n# Pretty print the parsed string\npretty_string = json.dumps(parsed_string, indent=4, sort_keys=True)\n\n# Show output\nprint(pretty_string)\n# Output:\n{\n    \"name\": \"John Doe\",\n    \"age\": 30\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [4,7,1,10,3]\n\narr.sort(reverse=True)\n\nprint(arr)\n# Output: [10, 7, 4, 3, 1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_item_to_beginning(arr, new_item):\n    return [new_item] + arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\n\n# collect the user's input\nuser_input = input('Enter your command: ')\n\n# process the user's input and execute the corresponding command\nif user_input == 'exit':\n    sys.exit()\nelif user_input == 'help':\n    print('This is a helpful message.')\nelse:\n    print('Command not recognized, try again.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_even_odd(nums):\n  even_list = []\n  odd_list = []\n  for num in nums:\n    if num % 2 == 0:\n      even_list.append(num)\n    else:\n      odd_list.append(num)\n  \n  return even_list, odd_list\n  \nprint(find_even_odd([1, 2, 3, 4, 5, 6])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import Libraries \nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n# Read in the data\ndata = pd.read_csv('stock_data.csv')\nopen_prices = data['open']\nclose_prices = data['close']\nhigh_prices = data['high']\nlow_prices = data['low']\n\n# Set X and y \nX = np.array(open_prices).reshape((-1, 1))\ny = close_prices\n\n# Create and fit model\nmodel = LinearRegression().fit(X, y)\n\n# Make predictions\npredicted_prices = model.predict(X)\n\n# Plot the results\nplt.scatter(X, y)\nplt.plot(X, predicted_prices, color='red', linewidth=2)\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def caesarCipherEncrypt(str, key): \n    encrypted_str = \"\" \n  \n    # traverse text \n    for i in range(len(str)): \n        char = str[i] \n  \n        # Encrypt uppercase characters \n        if (char.isupper()): \n            encrypted_str += chr((ord(char) + key-65) % 26 + 65) \n  \n        # Encrypt lowercase characters \n        else: \n            encrypted_str += chr((ord(char) + key - 97) % 26 + 97) \n  \n    return encrypted_str \n  \n# Driver code \nresult = caesarCipherEncrypt(\"Hello, World!\", 5) \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: n = int(input(\"Enter a number: \"))\n\ntotal = 0\nfor i in range(2, (2*n)+1, 2):\n    total += i\n    \nprint(\"The sum of first\", n, \"even numbers is\", total) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def hamming_distance(str1, str2):\n    \"\"\"Calculates the Hamming distance between two strings.\n    Arguments:\n        str1 (str): The first string.\n        str2 (str): The second string.\n    Returns:\n        (int): The Hamming distance.\n    \"\"\"\n    if len(str1) != len(str2):\n        raise ValueError(\"Strings must have the same length\")\n\n    distance = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            distance += 1\n            \n    return distance but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Array(object):\n    def __init__(self, capacity = 10):\n        self.capacity = capacity\n        self.items = [None] * self.capacity\n\n    def add(self, item):\n        if len(self.items) >= self.capacity:\n            self.resize()\n\n        self.items[len(self.items)] = item\n        self.size += 1\n\n    def resize(self):\n        self.capacity *= 2\n        new_items = [None] * self.capacity\n        for i in range(len(self.items)):\n            new_items[i] = self.items[i]\n        self.items = new_items but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def rearrange_arr(arr): \n    arr.sort(reverse = True) \n    return arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_spaces_with_underscore(string):\n    return string.replace(\" \", \"_\") but is not the same. just give one example and only return the code."}
