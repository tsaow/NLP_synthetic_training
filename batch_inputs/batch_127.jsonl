{"prompt": "make some code that functions the same as the following code: The difference between a function and a method in Python is that a function is a section of code that performs a specific task and can be called from anywhere in the program, while a method is a function that is associated with a class and can only be called from within the class. A method can access or modify the class state - the attributes of the class that store data - while a function typically cannot. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Vehicle:\n   def __init__(self, capacity, speed):\n      self.capacity = capacity\n      self.speed = speed\n \n   def increase_speed(self):\n      self.speed += 10\n \n   def decrease_speed(self):\n      if self.speed > 0:\n         self.speed -= 10 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = \"Hello world, hello programmer\".split()\n\nword_freq = {}\nfor word in words:\n    if word not in word_freq:\n        word_freq[word] = 1 \n    else:\n        word_freq[word] += 1\n\nfor key, value in word_freq.items():\n    print(f\"{key} : {value}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def knapsack(items, weight_limit):\n # Initialize an empty list to hold the items to include in the knapsack\n knapsack_items = []\n # Iterate over each item in the list\n for item in items:\n # Calculate the weight of the items already in the knapsack\n knapsack_weight = sum([i['weight'] for i in knapsack_items])\n # If the item can fit in the knapsack, add it\n if item['weight'] + knapsack_weight <= weight_limit:\n knapsack_items.append(item)\n \n # Return the items to include in the knapsack\n return knapsack_items\n\n\nlist = [{'name': 'item1', 'weight': 5, 'value': 10}, \n        {'name': 'item2', 'weight': 6, 'value': 15}, \n        {'name': 'item3', 'weight': 3, 'value': 5}]\nweight_limit = 9\n\n# Call the knapsack function\noptimal_items = knapsack(list, weight_limit)\n \n# Print the items to include in the knapsack\nprint(optimal_items)  # [{'name': 'item1', 'weight': 5, 'value': 10}, {'name': 'item3', 'weight': 3, 'value': 5}] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef random_num():\n    return random.randint(1, 10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCluster a given dataset using K-Means clustering\n\"\"\"\nimport numpy as np\nfrom sklearn.cluster import KMeans\n\ndef cluster_dataset(X, n_clusters):\n    kmeans = KMeans(n_clusters=n_clusters, random_state=0).fit(X)\n    return kmeans.labels_\n\nif __name__ == '__main__':\n    X = np.array([[1, 2], [1, 4], [1, 0],\n                [10, 2], [10, 4], [10, 0]])\n    print(cluster_dataset(X, n_clusters=2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Solution\n# First, let's define our list of numbers\nmy_list = [9, 10, -12, 0, 5]\n\n# Now, let's get the largest and the smallest numbers\nmax_val = max(my_list)\nmin_val = min(my_list)\n\n# Finally, we can print out the results\nprint(\"Largest number:\", max_val)\nprint(\"Smallest number:\", min_val) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_by_occurrence(unsorted_list):\n    d = {}\n    for num in unsorted_list:\n        d[num] = d.get( num, 0 ) + 1\n    sorted_list = sorted(d, key=d.get, reverse=True)\n    return sorted_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def prime_factors(num):\n        factors = []\n        i = 2\n        while num > 1:\n            while num % i == 0:\n                num = num / i\n                factors.append(i)\n            i += 1\n        return factors\n\nnum = 50\nfactors = prime_factors(num)\nprint(factors) # -> [2, 5,  5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Car:\n    def __init__(self, make, model, color):\n        self.make = make\n        self.model = model\n        self.color = color\n        \n    def get_description(self):\n        return f\"The {self.make} {self.model} is {self.color}.\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Example:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n    \n    def print_values(self):\n        print(self.a, self.b, self.c)\n\nexample = Example(10, 20, 30)\nexample.print_values() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(a, b): \n if(b == 0): \n  return a \n return gcd(b, a%b) \n\ndef main():\n a = 28 \n b = 15 \n print(gcd(a,b)) \n\nif __name__ == \"__main__\": \n main() \n\n# Output\n3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #! /usr/bin/env python3\n\"\"\"\n services-wrapper A small tool which wraps around check-services.php and tries to\n                guide the services process with a more modern approach with a\n                Queue and workers.\n\n Based on the original version of poller-wrapper.py by Job Snijders\n\n Author:        Neil Lathwood <neil@librenms.org>\n                Orsiris de Jong <contact@netpower.fr>\n Date:          Oct 2019\n\n Usage:         This program accepts one command line argument: the number of threads\n                that should run simultaneously. If no argument is given it will assume\n                a default of 1 thread.\n\n Ubuntu Linux:  apt-get install python-mysqldb\n FreeBSD:       cd /usr/ports/*/py-MySQLdb && make install clean\n RHEL 7:        yum install MySQL-python\n RHEL 8:        dnf install mariadb-connector-c-devel gcc && python -m pip install mysqlclient\n\n Tested on:     Python 3.6.8 / PHP 7.2.11 / CentOS 8\n\n License:       This program is free software: you can redistribute it and/or modify it\n                under the terms of the GNU General Public License as published by the\n                Free Software Foundation, either version 3 of the License, or (at your\n                option) any later version.\n\n                This program is distributed in the hope that it will be useful, but\n                WITHOUT ANY WARRANTY; without even the implied warranty of\n                MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n                Public License for more details.\n\n                You should have received a copy of the GNU General Public License along\n                with this program. If not, see http://www.gnu.org/licenses/.\n\n                LICENSE.txt contains a copy of the full GPLv3 licensing conditions.\n\"\"\"\n\nimport LibreNMS.library as LNMS\n\ntry:\n\n    import json\n    import os\n    import queue\n    import subprocess\n    import sys\n    import threading\n    import time\n    from optparse import OptionParser\n\nexcept ImportError as exc:\n    print('ERROR: missing one or more of the following python modules:')\n    print('threading, queue, sys, subprocess, time, os, json')\n    print('ERROR: %s' % exc)\n    sys.exit(2)\n\n\nAPP_NAME = \"services_wrapper\"\nLOG_FILE = \"logs/\" + APP_NAME + \".log\"\n_DEBUG = False\nservicedisco = False\nreal_duration = 0\nservice_devices = 0\n\n\"\"\"\n Threading helper functions\n\"\"\"\n# (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC0\ndef memc_alive():\n    try:\n        global memc\n        key = str(uuid.uuid4())\n        memc.set('poller.ping.' + key, key, 60)\n        if memc.get('poller.ping.' + key) == key:\n            memc.delete('poller.ping.' + key)\n            return True\n        else:\n            return False\n    except:\n        return False\n\n\ndef memc_touch(key, time):\n    try:\n        global memc\n        val = memc.get(key)\n        memc.set(key, val, time)\n    except:\n        pass\n\n\ndef get_time_tag(step):\n    ts = int(time.time())\n    return ts - ts % step\n#EOC0\n\n\n\"\"\"\n    A seperate queue and a single worker for printing information to the screen prevents\n    the good old joke:\n\n        Some people, when confronted with a problem, think,\n        \"I know, I'll use threads,\" and then they two they hav erpoblesms.\n\"\"\"\n\n\ndef printworker():\n    nodeso = 0\n    while True:\n        # (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC4\n        global IsNode\n        global servicedisco\n        if servicedisco:\n            if not IsNode:\n                memc_touch('service.master', 10)\n                nodes = memc.get('service.nodes')\n                if nodes is None and not memc_alive():\n                    print(\"WARNING: Lost Memcached. Taking over all devices. Nodes will quit shortly.\")\n                    servicedisco = False\n                    nodes = nodeso\n                if nodes is not nodeso:\n                    print(\"INFO: %s Node(s) Total\" % (nodes))\n                    nodeso = nodes\n            else:\n                memc_touch('service.nodes', 10)\n            try:\n                worker_id, device_id, elapsed_time = print_queue.get(False)\n            except:\n                pass\n                try:\n                    time.sleep(1)\n                except:\n                    pass\n                continue\n        else:\n            worker_id, device_id, elapsed_time = print_queue.get()\n        # EOC4\n        global real_duration\n        global per_device_duration\n        global service_devices\n        real_duration += elapsed_time\n        per_device_duration[device_id] = elapsed_time\n        service_devices += 1\n        if elapsed_time < 300:\n            print(\"INFO: worker %s finished device %s in %s seconds\" % (worker_id, device_id, elapsed_time))\n        else:\n            print(\"WARNING: worker %s finished device %s in %s seconds\" % (worker_id, device_id, elapsed_time))\n        print_queue.task_done()\n\n\"\"\"\n    This class will fork off single instances of the check-services.php process, record\n    how long it takes, and push the resulting reports to the printer queue\n\"\"\"\n\n\ndef poll_worker():\n    while True:\n        device_id = poll_queue.get()\n        # (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC5\n        if not servicedisco or memc.get('service.device.' + str(device_id)) is None:\n            if servicedisco:\n                result = memc.add('service.device.' + str(device_id), config['distributed_poller_name'], 300)\n                if not result:\n                    print(\"This device (%s) appears to be being service checked by another service node\" % (device_id))\n                    poll_queue.task_done()\n                    continue\n                if not memc_alive() and IsNode:\n                    print(\"Lost Memcached, Not service checking Device %s as Node. Master will check it.\" % device_id)\n                    poll_queue.task_done()\n                    continue\n            # EOC5\n            try:\n                start_time = time.time()\n\n                output = \"-d >> %s/services_device_%s.log\" % (log_dir, device_id) if debug else \">> /dev/null\"\n                # TODO replace with command_runner\n                command = \"/usr/bin/env php %s -h %s %s 2>&1\" % (service_path, device_id, output)\n                subprocess.check_call(command, shell=True)\n\n                elapsed_time = int(time.time() - start_time)\n                print_queue.put([threading.current_thread().name, device_id, elapsed_time])\n            except (KeyboardInterrupt, SystemExit):\n                raise\n            except:\n                pass\n        poll_queue.task_done()\n\n\nif __name__ == '__main__':\n    logger = LNMS.logger_get_logger(LOG_FILE, debug=_DEBUG)\n\n    install_dir = os.path.dirname(os.path.realpath(__file__))\n    LNMS.check_for_file(install_dir + '/config.php')\n    config = json.loads(LNMS.get_config_data(install_dir))\n\n    service_path = config['install_dir'] + '/check-services.php'\n    log_dir = config['log_dir']\n\n    # (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC1\n    if 'distributed_poller_group' in config:\n        service_group = str(config['distributed_poller_group'])\n    else:\n        service_group = False\n\n\n    if ('distributed_poller' in config and\n        'distributed_poller_memcached_host' in config and\n        'distributed_poller_memcached_port' in config and\n        config['distributed_poller']):\n        try:\n            import memcache\n            import uuid\n            memc = memcache.Client([config['distributed_poller_memcached_host'] + ':' +\n                                    str(config['distributed_poller_memcached_port'])])\n            if str(memc.get(\"service.master\")) == config['distributed_poller_name']:\n                print(\"This system is already joined as the service master.\")\n                sys.exit(2)\n            if memc_alive():\n                if memc.get(\"service.master\") is None:\n                    print(\"Registered as Master\")\n                    memc.set(\"service.master\", config['distributed_poller_name'], 10)\n                    memc.set(\"service.nodes\", 0, 300)\n                    IsNode = False\n                else:\n                    print(\"Registered as Node joining Master %s\" % memc.get(\"service.master\"))\n                    IsNode = True\n                    memc.incr(\"service.nodes\")\n                servicedisco = True\n            else:\n                print(\"Could not connect to memcached, disabling distributed service checks.\")\n                servicedisco = False\n                IsNode = False\n        except SystemExit:\n            raise\n        except ImportError:\n            print(\"ERROR: missing memcache python module:\")\n            print(\"On deb systems: apt-get install python3-memcache\")\n            print(\"On other systems: pip3 install python-memcached\")\n            print(\"Disabling distributed discovery.\")\n            servicedisco = False\n    else:\n        servicedisco = False\n    # EOC1\n\n    s_time = time.time()\n    real_duration = 0\n    per_device_duration = {}\n    service_devices = 0\n\n    \"\"\"\n        Take the amount of threads we want to run in parallel from the commandline\n        if None are given or the argument was garbage, fall back to default of 16\n    \"\"\"\n    usage = \"usage: %prog [options] <workers> (Default: 1 (Do not set too high)\"\n    description = \"Spawn multiple check-services.php processes in parallel.\"\n    parser = OptionParser(usage=usage, description=description)\n    parser.add_option('-d', '--debug', action='store_true', default=False,\n                      help=\"Enable debug output. WARNING: Leaving this enabled will consume a lot of disk space.\")\n    (options, args) = parser.parse_args()\n\n    debug = options.debug\n    try:\n        amount_of_workers = int(args[0])\n    except (IndexError, ValueError):\n        amount_of_workers = 1\n\n    devices_list = []\n\n    # (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC2\n    if service_group is not False:\n        query = \"SELECT DISTINCT(`services`.`device_id`) FROM `services` LEFT JOIN `devices` ON `services`.`device_id` = `devices`.`device_id` WHERE `devices`.`poller_group` IN(\" + service_group + \") AND `devices`.`disabled` = 0\"\n    else:\n        query = \"SELECT DISTINCT(`services`.`device_id`) FROM `services` LEFT JOIN `devices` ON `services`.`device_id` = `devices`.`device_id` WHERE `devices`.`disabled` = 0\"\n    # EOC2\n\n    db = LNMS.db_open(config['db_socket'], config['db_host'], config['db_port'], config['db_user'], config['db_pass'], config['db_name'])\n    cursor = db.cursor()\n    cursor.execute(query)\n    devices = cursor.fetchall()\n    for row in devices:\n        devices_list.append(int(row[0]))\n    # (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC3\n    if servicedisco and not IsNode:\n        query = \"SELECT MAX(`device_id`), MIN(`device_id`) FROM `services`\"\n        cursor.execute(query)\n        devices = cursor.fetchall()\n        maxlocks = devices[0][0] or 0\n        minlocks = devices[0][1] or 0\n    # EOC3\n    db.close()\n\n    poll_queue = queue.Queue()\n    print_queue = queue.Queue()\n\n    print(\"INFO: starting the service check at %s with %s threads\" % (time.strftime(\"%Y-%m-%d %H:%M:%S\"),\n                                                                      amount_of_workers))\n\n    for device_id in devices_list:\n        poll_queue.put(device_id)\n\n    for i in range(amount_of_workers):\n        t = threading.Thread(target=poll_worker)\n        t.setDaemon(True)\n        t.start()\n\n    p = threading.Thread(target=printworker)\n    p.setDaemon(True)\n    p.start()\n\n    try:\n        poll_queue.join()\n        print_queue.join()\n    except (KeyboardInterrupt, SystemExit):\n        raise\n\n    total_time = int(time.time() - s_time)\n\n    print(\"INFO: services-wrapper checked %s devices in %s seconds with %s workers\" % (service_devices, total_time, amount_of_workers))\n\n    # (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC6\n    if servicedisco or memc_alive():\n        master = memc.get(\"service.master\")\n        if master == config['distributed_poller_name'] and not IsNode:\n            print(\"Wait for all service-nodes to finish\")\n            nodes = memc.get(\"service.nodes\")\n            while nodes is not None and nodes > 0:\n                try:\n                    time.sleep(1)\n                    nodes = memc.get(\"service.nodes\")\n                except:\n                    pass\n            print(\"Clearing Locks\")\n            x = minlocks\n            while x <= maxlocks:\n                memc.delete('service.device.' + str(x))\n                x = x + 1\n            print(\"%s Locks Cleared\" % x)\n            print(\"Clearing Nodes\")\n            memc.delete(\"service.master\")\n            memc.delete(\"service.nodes\")\n        else:\n            memc.decr(\"service.nodes\")\n        print(\"Finished %s.\" % time.time())\n    # EOC6\n\n    show_stopper = False\n\n    if total_time > 300:\n        print(\"WARNING: the process took more than 5 minutes to finish, you need faster hardware or more threads\")\n        print(\"INFO: in sequential style service checks the elapsed time would have been: %s seconds\" % real_duration)\n        for device in per_device_duration:\n            if per_device_duration[device] > 300:\n                print(\"WARNING: device %s is taking too long: %s seconds\" % (device, per_device_duration[device]))\n                show_stopper = True\n        if show_stopper:\n            print(\"ERROR: Some devices are taking more than 300 seconds, the script cannot recommend you what to do.\")\n        else:\n            recommend = int(total_time / 300.0 * amount_of_workers + 1)\n            print(\n                \"WARNING: Consider setting a minimum of %d threads. (This does not constitute professional advice!)\" % recommend)\n\n        sys.exit(2)\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longestWord(sentence): \n    longestWord = ''\n    maxLength = 0\n    for word in sentence.split(' '):\n        if len(word) > maxLength:\n           maxLength = len(word)\n           longestWord = word\n    return longestWord\n\nlongest_word = longestWord(sentence)\nprint('The longest word is: '+ longest_word) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def solve_linear_equations(a,b,c,d,e,f):\n    x = (e*d - b*f) / (a*d - b*c)\n    y = (a*f - e*c) / (a*d - b*c)\n    return (x,y)\n\na,b,c,d,e,f = 1,2,3,4,5,6\nsolution = solve_linear_equations(a,b,c,d,e,f)\nprint(solution) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def flatten(arr):\n    result = []\n \n    for item in arr:\n        if isinstance(item, list):\n            result.extend(flatten(item))\n        else:\n            result.append(item)\n \n    return result\n \nflattenedArr = flatten(arr)\nprint(flattenedArr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Iterate over numbers\nfor num in [1,2,3,4,5]:\n  # Check for even\n  if(num % 2 == 0):\n    # Print the even numbers\n    print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence = \"This is a sentence\"\nsentence_list = sentence.split()\nfrequency_list = []\n\nfor word in sentence_list:\n    frequency_list.append(sentence_list.count(word))\n    \nfrequency_dict = dict(zip(sentence_list, frequency_list))\n\nprint(frequency_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(arr): \n    n = len(arr) \n    max_value = arr[0] \n  \n    # Iterate from 1 to the length of the array\n    for i in range(1, n): \n        if arr[i] > max_value: \n            max_value = arr[i] \n    return max_value\n\nlst = [3,7,2,9,4,6,1] \nresult = find_max(lst) \nprint(result)  #Returns 9 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to find the longest common  \n# sub-string in two strings  \n   \ndef LongestCommonString(str1, str2): \n    m = len(str1) \n    n = len(str2) \n  \n    #placeholder array\n    L = [[None]*(n+1) for i in range(m+1)] \n  \n    result = 0 # To store length of the longest common sub-string \n  \n    # Following steps build LCSuff[m+1][n+1] in bottom up fashion \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif str1[i-1] == str2[j-1]: \n                L[i][j] = L[i-1][j-1] + 1\n                result = max(result, L[i][j]) \n            else: \n                L[i][j] = 0\n  \n    # Following code is used to print LCSuff[m+1][n+1]  \n    lcs_len = L[m][n] \n    index = lcs_len \n  \n    # Create a character array to store the lcs string \n    lcs = [\"\"] * (index+1) \n    lcs[index] = \"\" # Set the terminating character \n  \n    # Start from the right-most-bottom-most corner  \n    i = m \n    j = n \n    while i > 0 and j > 0: \n  \n        # If current character in X[] and Y are same,  \n        # then current character is part of LCS \n        if str1[i-1] == str2[j-1]: \n            lcs[index-1] = str1[i-1] \n            i-=1\n            j-=1\n            index-=1\n            # If not same, then find the larger of two and \n        # go in the direction of larger value \n        elif L[i-1][j] > L[i][j-1]: \n            i-=1\n        else: \n            j-=1\n    lcs_str = \"\".join(lcs) \n    print(lcs_str)\n  \n# Driver program \nif __name__ == \"__main__\": \n    string1 = \"OldSite:Geeksforgeeks.org\"\n    string2 = \"Newsite:Geeks.com\"\n    LongestCommonString(string1, string2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mergeSortedArrays(arr1, arr2):\n    l1 = len(arr1)\n    l2 = len(arr2)\n    l = l1 + l2\n    arr = [0] * l\n\n    i = 0\n    j = 0\n    k = 0\n\n    while (i < l1 and j < l2):\n        if (arr1[i] < arr2[j]):\n            arr[k] = arr1[i]\n            k = k + 1\n            i = i + 1\n        else:\n            arr[k] = arr2[j]\n            k = k + 1\n            j = j + 1\n\n    while (i < l1):\n        arr[k] = arr1[i]\n        k = k + 1\n        i = i + 1\n\n    while (j < l2):\n        arr[k] = arr2[j]\n        k = k + 1\n        j = j + 1\n\n    return arr\n\narr1 = [3, 5, 7] \narr2 = [1, 2, 4] \n\nprint(mergeSortedArrays(arr1, arr2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quicksort(numbers):\n    '''\n    This function implements the quicksort algorithm to sort a given array of numbers.\n    \n    Args:\n        numbers (list): the array of numbers to be sorted\n    \n    Returns:\n        list: the sorted array\n    '''\n    if len(numbers) == 0:\n        return []\n\n    # pivot will be the middle element of the list\n    pivot = numbers[0]\n    left = [x for x in numbers[1:] if x < pivot]\n    right = [x for x in numbers[1:] if x >= pivot]\n\n    return quicksort(left) + [pivot] + quicksort(right) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node: \n    # Function to initialize the node object \n    def __init__(self, data): \n        self.data = data  # Assign data \n        self.next = None  # Initialize next as null \nclass LinkedList: \n    # Function to initialize head \n    def __init__(self): \n        self.head = None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def identify_characters(s): \n    characters = []\n        \n    for char in s:\n        if char not in characters:\n            characters.append(char)\n        \n    return characters\n \nprint(identify_characters('Abe erotically jitters')) #['A', 'b', 'e', ' ', 'r', 'o', 't', 'i', 'c', 'a', 'l', 'y', 'j', 'i', 't', 's'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiplication_table(n):\n    print('Multiplication Table of ', n)\n    for i in range(1, 11):\n        product = i * n\n        print('{0} x {1} = {2}'.format(i, n, product)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def oldest_movie(movies):\n    oldest_year = movies[0][\"releaseYear\"]\n    for movie in movies: \n        if movie[\"releaseYear\"] < oldest_year:\n            oldest_year = movie[\"releaseYear\"]\n    return oldest_year but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_length(string):\n    length = 0\n    for char in string:\n        length += 1\n    return length but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def first_odd(arr):\n    for num in arr:\n        if num % 2 != 0:\n            print(num)\n            break\n\narr = [1, 4, 5, 6, 9, 10, 11]\nfirst_odd(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [1, 5, 6, 8]\nfor i in list:\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask\nfrom datetime import datetime\n\napp = Flask(__name__)\n\n@app.route('/')\ndef homepage():\n    the_time = datetime.now().strftime(\"%A, %d %b %Y %l:%M %p\")\n    return \"\"\"\n    <h1>Current Date and Time</h1>\n    <p>It is currently {time}.</p>\n    <p>The local timezone is {timezone}.</p>\n    \"\"\".format(time = the_time, timezone = datetime.now().strftime(\"%Z\"))\n\nif __name__ == '__main__':\n    app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_mode(List): \n    max_count = 0\n    modes = [] \n    for num in List: \n        current_count = List.count(num) \n        if current_count > max_count: \n            max_count = current_count \n            modes = [num] \n        elif current_count == max_count: \n            modes.append(num) \n    return modes but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_array(arr):\n    arr.sort(key=lambda x: x[1])\n    return arr\n\ndata = [[[1,6,4], [4,3,2], [2,3,6]], [[3,3,3], [2,2,2], [1,1,1]]]\n\nprint(sort_array(data)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(a, b): \n    if (a == 0): \n        return b \n    return gcd(b % a, a) \n  \nprint (\"GCD(\", a, \",\", b, \") = \", gcd(a, b)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def total_hours(timestamps):\n    total_hours = 0\n    for i in range(1, len(timestamps)):\n        total_hours += (timestamps[i] - timestamps[i-1]) / 3600\n    return total_hours\n\ntimestamps = [1577296930, 1577297490, 1577299030]\n\nprint(total_hours(timestamps))\n\n# Output should be 3.33 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Define the CPU scheduling algorithms\ndef schedule_processes(processes):\n    # sort the process list on the basis of their remaining times\n    processes.sort(key = lambda x: x.remaining_time)\n    # initialize the scheduled list\n    scheduled = []\n    # iterate each and every process\n    while len(processes) > 0:\n        current_process = processes.pop(0)\n        # append the current process to the scheduled list\n        scheduled.append(current_process)\n        # iterate through the other processes and reduce\n        # their remaining time by 1\n        for process in processes:\n            if process.remaining_time > 1:\n                process.remaining_time -= 1\n    return scheduled but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Imports\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Get data\ndata = pd.read_csv('animal_data.csv')\n\n# Extract features\nfeatures = data[['size','color','behavior']]\n\n# Extract target\ntarget = data['type']\n\n# Split the data\nx_train, x_test, y_train, y_test = train_test_split(features, target, test_size=0.20, random_state=42)\n\n# Create and train the model\nmodel = RandomForestClassifier()\nmodel.fit(x_train, y_train)\n\n# Print the accuracy of the model\nprint(\"Model accuracy: %f\" % model.score(x_test, y_test)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_arrays(arr1, arr2):\n  return [x + y for x, y in zip(arr1, arr2)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n\nmy_array = [random.randint(1, 100) for _ in range(100)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def split_string(string, delimiter): \n    return string.split(delimiter) \n\nprint(split_string('This is a sample string', ' ')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import torch\nimport torch.nn as nn\n\nclass TextClassificationModel(nn.Module):\n    def __init__(self, vocab_size, embedding_dim, output_dim, dropout):\n        super().__init__()\n        \n        self.embedding = nn.Embedding(vocab_size, embedding_dim)\n        self.fc = nn.Linear(embedding_dim, output_dim)\n        self.dropout = nn.Dropout(dropout)\n        \n    def forward(self, x):\n        embedded = self.embedding(x)\n        \n        embedded = self.dropout(embedded)\n        \n        logits = self.fc(embedded)\n        return logits but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: <?xml version=\"1.0\" ?>\n<person>\n    <name>{self.name}</name>\n    <age>{self.age}</age>\n</person> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import xml.etree.ElementTree as ET \n\nxml_file_path = 'books.xml'\n\ntree = ET.parse(xml_file_path) \nroot = tree.getroot() \n\nfor book in root.findall('book'):\n title = book.find('title').text \n author = book.find('author').text \n \n print('Title: ', title) \n print('Author: ', author) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def delete_last_char(string):\n    \"\"\"Delete the last character of a given string.\n\n    Args:\n        string (str): The string to remove the last character from. \n\n    Returns:\n        str: The string with the last character removed.\n    \"\"\"\n    return string[:-1]\n\nif __name__ == '__main__':\n    string = \"Hello World!\"\n    result = delete_last_char(string)\n    print(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: dict_from_lists = dict(zip(keys, values)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_by_frequency(list_a):\n    frequency = {}\n    for a in list_a:\n        if a not in frequency:\n            frequency[a] = 1\n        else:\n            frequency[a] += 1\n    list_sorted = []\n    for key, value in sorted(frequency.items(), key=lambda item: item[1], reverse=True):\n        for _ in range(value):\n            list_sorted.append(key)\n    return list_sorted but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1,11):\n if i % 2 == 0:\n print('{} is even'.format(i))\n else:\n print('{} is odd'.format(i)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef calculate_area_of_circle(radius):\n    area = math.pi * radius ** 2\n    return area\n\nresult = calculate_area_of_circle(5.5)\nprint('The area of the circle is: ', result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def word_count(string):\n count = {}\n string = string.split()\n\n for word in string:\n if word in count:\n count[word] += 1\n else:\n count[word] = 1\n\n return count\n\nprint(word_count(\"Hello world, This is me\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_nums(n):\n  nums = []\n  for _ in range(n):\n    nums.append(random.randint(0,n))\n  return nums but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def my_function(n):\n    result = 0\n\n    # Loop through all possible pairs of i and j\n    for i in range(n):\n        for j in range(n):\n            # Multiply each pair and add it to the result\n            result += i * j * (n - 1)\n\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \nclass LinkedList:  \n    def __init__(self):\n        self.head = None\n  \n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head\n        self.head = new_node\n  \n    def print_list(self): \n        temp = self.head \n        while (temp): \n            print(temp.data) \n            temp = temp.next\n  \nlist = LinkedList() \nlist.push(1) \nlist.push(2) \nlist.push(3) \nlist.push(4) \nlist.print_list() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1,51):\n  if (i % 2 == 0):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def nthFibonacciNumber(n): \n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return nthFibonacciNumber(n-1)+nthFibonacciNumber(n-2)\n\nresult = nthFibonacciNumber(6)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = args[0]\nresponse = requests.get(url)\ndata = {}\n\nif response.status_code == 200:\n html = response.text\n soup = BeautifulSoup(html, 'html.parser')\n for heading in soup.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6']):\n data[heading.text] = heading.next_sibling.next_sibling.text\n\nprint(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_element(input_list,element):\n  for index, val in enumerate(input_list):\n    if val == element:\n      return index\n \ndef optimized_find_element(input_list,element):\n  low,high=0,len(input_list)-1\n \n  while low <= high:\n    mid = (low + high) // 2\n    if input_list[mid] == element:\n      return mid\n    elif element > input_list[mid]:\n      low = mid + 1\n    else:\n      high = mid - 1\n \n  return -1\n \ninput_list = [1,2,3,4,5,6,7,8,9]\nelement = 7\nindex = find_element(input_list,element)\nprint(index)\nindex = optimized_find_element(input_list,element)\nprint(index) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import unittest\n\nclass TestAddition(unittest.TestCase):\n\n    def test_addition(self):\n        self.assertEqual(add(1, 1), 2)\n        self.assertEqual(add(2, 5), 7)\n        self.assertEqual(add(3, 3), 6)\n        self.assertEqual(add(-8, 6), -2)\n        self.assertEqual(add(-3, -3), -6)\n\nif __name__ == '__main__':\n    unittest.main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = 'http://<web server address>'\nfile = {'webpage': open('index.html', 'rb')}\n\nresponse = requests.post(url, files=file)\n\nprint(response.status_code) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_string(arg):\n    \"\"\"\n    This function takes in an argument and returns the corresponding\n    string. \n \n    Parameters:\n    arg (int): the argument\n\n    Returns:\n    str: the corresponding string\n    \"\"\"\n    if arg == 1:\n        return \"One\"\n    elif arg == 2:\n        return \"Two\"\n    elif arg ==3:\n        return \"Three\"\n    else:\n        return \"\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n  \"\"\"This class stores the information of an employee\"\"\"\n\n  def __init__(self, name, id, salary, department):\n    self.name = name\n    self.id = id\n    self.salary = salary\n    self.department = department but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = my_list[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def format_list(list_in):\n   list_out = []\n\n   for n in list_in:\n      list_out.append('|'+str(n).ljust(2)+'|')\n   \n   header = '--|--+'\n   header_line = '--|'+'--'*len(list_out)+'|'\n   \n   list_out = [header] + list_out + [header_line]\n   \n   return '\\n'.join(list_out)\n\nprint(format_list([2, 3, 4, 5, 6]))\n\n# Output:\n--|--+\n|2 |\n|3 |\n|4 |\n|5 |\n|6 |\n--|---| but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findCount(s, c):\n    count = 0\n    for char in s:\n        if char == c:\n            count += 1\n    return count \n\nprint(findCount(s, c)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: combinations = []\nfor i in range(len(arr)):\n    for j in range(i+1, len(arr)):\n        for k in range(j+1, len(arr)):\n            combinations.append([arr[i], arr[j], arr[k]]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(number): \n if number == 0: \n return 1\n else: \n return number * factorial(number-1) \n  \nnumber = 6\nprint(factorial(number)) \n# Output: 720 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\n# Preprocessing\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts([text])\nwords = tokenizer.word_index\nsequence = tokenizer.texts_to_sequences([text])\npadded_sequence = pad_sequences(sequence, maxlen=20)\n\n# Network Architecture\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(len(words)+1, 32, input_length=20),\n    tf.keras.layers.LSTM(64),\n    tf.keras.layers.Dense(3, activation='softmax')\n])\n\n# Training the model\nmodel.compile(optimizer='adam', \n              loss='categorical_crossentropy', \n              metrics=['accuracy'])\nmodel.fit(padded_sequence, labels, epochs=10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\n# initial velocity\nv0 = 20\n# height\nh = 10\n# time to reach ground\nt = (v0 * 2) / 9.81\n\nprint(\"The ball will reach the ground in {:.2f} seconds\".format(t)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sklearn\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Sentences\nsentences = []\nsentences.append(\"The quick brown fox jumps over the lazy dog.\") \nsentences.append(\"This is a sample text used to determine how well the classification model works.\")\nsentences.append(\"This text belongs to the Animal topic.\")\n\n# Topics\ntopics = [\"Animal\",\"Sports\",\"Weather\"]\n\n# Create feature vectors \nvectorizer = CountVectorizer(stop_words='english') \nX = vectorizer.fit_transform(sentences).toarray()\n \n# Create label encoder \nlabel_encoder = LabelEncoder()\ny = label_encoder.fit_transform(topics)\n\n# Instantiate the model \nclassifier = MultinomialNB() \nclassifier.fit(X, y) \n\n# Classify new sample \nsample = vectorizer.transform([\"A warm and sunny day\"]).toarray()\nprediction = classifier.predict(sample) \nprint(prediction)\nprint(label_encoder.inverse_transform(prediction)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def substrings(input_string): \n    # Get the length of the string \n    length = len(input_string) \n    # List of all substrings  \n    substrings = []\n    # Iterate over the length of the input string\n    for i in range(length): \n        # Iterate over the length of the input string \n        # minus the start index\n        for j in range(i, length): \n            # Get substring\n            sub = input_string[i:j + 1] \n            # Add substring to the list\n            substrings.append(sub) \n\n    return substrings\n\nif __name__ == '__main__':\n    output = substrings(\"abcde\")\n    print(output) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# read csv file\ndf = pd.read_csv('customer_reviews.csv')\n\n# lower case the reviews and titles\ndf['Review_content'] = df['Review_content'].str.lower()\ndf['Review_title'] = df['Review_title'].str.lower()\n\n# remove punctuation\ndf['Review_content'] = df['Review_content'].str.replace('[^\\w\\s]','')\ndf['Review_title'] = df['Review_title'].str.replace('[^\\w\\s]','')\n\n# stem words in review content\nfrom nltk.stem import PorterStemmer\nstemmer = PorterStemmer()\n\ndef stem_words(row):\n words = row.split()\n stemmed_words = [stemmer.stem(word) for word in words]\n return ' '.join(stemmed_words)\n\ndf['Review_content'] = df['Review_content'].apply(stem_words)\n\n# remove stopwords\nfrom nltk.corpus import stopwords\nstop_words = set(stopwords.words('english'))\n\ndef remove_stopwords(row):\n words = row.split()\n filtered_words = [word for word in words if word not in stop_words]\n return ' '.join(filtered_words)\n\ndf['Review_content'] = df['Review_content'].apply(remove_stopwords)\n\n# save clean dataset\ndf.to_csv('clean_reviews.csv', index=False) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortDecreasing(arr):\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            if arr[i] < arr[j]: \n                arr[i], arr[j] = arr[j], arr[i] \n    return arr\narr = [4, 7, 1, 3, 5, 2]\nprint(sortDecreasing(arr))\n\n# Output: [7, 5, 4, 3, 2, 1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_days_wm(Days):\n    y = Days//365\n    m = (Days%365)//30\n    d = (Days%365)%30\n    return y, m, d but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Importing necessary libraries \nimport pandas as pd \nimport numpy as np \n\n# Defining input and label datasets\nx = np.array(pd.read_csv(\"input.csv\")).shape[1]\ny = np.array(pd.read_csv(\"labels.csv\")).shape[1]\n\n# Training and testing splitting\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n\n# Importing LinearRegression from sklearn\nfrom sklearn.linear_model import LinearRegression\n\n# Initializing the Model \nlinear_model = LinearRegression()\n\n# Fitting the Model\nlinear_model.fit(x_train, y_train)\n\n# Predicting on given test data\ny_pred = linear_model.predict(x_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_factors(num): \n    \"\"\"Function to find prime factors\"\"\"\n    factors = [] \n    i = 2\n    while i * i <= num: \n        if num % i: \n            i += 1 \n        else: \n            num //= i \n            factors.append(i) \n    if num > 1: \n        factors.append(num) \n    return factors \n  \nnum = 15\nprint(find_factors(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class PrimeChecker:\n    def is_prime(self, num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [1, 2, 3, 4]\nmy_dict = {list_val:list_val**2 for list_val in my_list}\nprint(my_dict)\n# {1: 1, 2: 4, 3: 9, 4: 16} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply(num1, num2):\n    return num1 * num2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def word_count(sentence):\n    count = 0\n    for word in sentence.split(' '):\n        count += 1\n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Generate a Fibonacci sequence\n\n# Function to generate Fibonacci sequence\ndef Fibonacci(n):\n    if n < 0:\n        print(\"Incorrect input\")\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return Fibonacci(n-1) + Fibonacci(n-2)\n\n# Print the sequence upto n terms\nterms = 10\nprint(\"Fibonacci sequence:\")\nfor num in range(1, terms + 1):\n    print(Fibonacci(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com/'\n\npage = requests.get(url)\nhtml = BeautifulSoup(page.content, 'html.parser')\n\ntexts = []\nfor txt in  html.find_all('p'):\n    texts.append(txt.text)\n\nprint(texts) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def partition_equal(arr):\n   total = sum(arr) \n   if total % 2 != 0: \n      return False \n   half = total//2 \n   n = len(arr) \n   dp = [[False for _ in range(half+1)] for _ in range(n+1)] \n   for i in range(n+1): \n      dp[i][0] = True \n   for j in range(1,half+1): \n      dp[0][j] = False \n   for i in range(1, n+1): \n      for j in range(1, half+1): \n         if arr[i-1] <= j:\n            dp[i][j] = dp[i-1][j-arr[i-1]] or dp[i-1][j] \n         else:\n            dp[i][j] = dp[i-1][j] \n   return dp[n][half] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: public class Car {\n    // Initialize class fields\n    private String name;\n    private String color;\n    \n    // Constructor \n    public Car(String name, String color) {\n        this.name = name;\n        this.color = color;\n    }\n    \n    // Getter and setter methods\n    public String getName() {\n        return name;\n    }\n    \n    public String getColor() {\n        return color;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public void setColor(String color) {\n        this.color = color;\n    }\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: We can use the built-in len() function to find the length of a string in Python. The len() function takes the string as an argument and returns the length of the string, i.e. the number of characters in the string.\n\nExample:\n\nstring = \"Hello\"\nstring_length = len(string)\n\nprint(string_length) #Output: 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class FlightSchedule:\n    def __init__(self):\n    self.airport_info ={}\n    \n    def add_flight(self,flight_name,source,destination,departure_time,arrival_time):\n    self.airport_info[flight_name] = {\n        'source': source,\n        'destination': destination,\n        'departure_time': departure_time,\n        'arrival_time': arrival_time\n    }\n    \n    def get_flight_info(self,flight_name):\n    if flight_name in self.airport_info:\n        return self.airport_info[flight_name]\n    else:\n        return 'Flight does not exist.' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bfs(graph, start):\n    visited, queue = set(), [start]\n    while queue:\n        vertex = queue.pop(0)\n        if vertex not in visited:\n            visited.add(vertex)\n            queue.extend(graph[vertex] - visited)\n    return visited but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \n\narr = np.ones((r,c)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn import svm\n\n# Data\nx = np.array([1.09, 2.31, 4.7, 9.58, 11.19])\ny = np.array([0, 1, 2, 3, 3])\n\n# SVM\nmodel = svm.SVC(kernel='linear')\nmodel.fit(x.reshape(-1, 1), y)\n\n# Predict\npred = model.predict([1.29, 2.5, 3.4, 4.8, 8.1, 9.3])\nprint(pred)\n# [1, 2, 2, 1, 0, 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\ncontact_list = [\n {'name': 'John Doe', 'email': 'john@example.com'},\n {'name': 'Jane Doe', 'email': 'jane@example.com'},\n]\n\n@app.route('/')\ndef index():\n return render_template('index.html', contacts=contact_list)\n\n@app.route('/add', methods=['POST'])\ndef add():\n if request.form['name'] and request.form['email']:\n contact_list.append((request.form['name'], request.form['email']))\n\n return redirect(url_for('index'))\n\n@app.route('/edit/<int:key>', methods=['GET', 'POST'])\ndef edit(key):\n if request.method == 'POST':\n contact_list[key] = (request.form['name'], request.form['email'])\n return redirect(url_for('index'))\n\n return render_template('edit.html', key=key, contact=contact_list[key])\n\n@app.route('/delete/<int:key>', methods=['GET', 'POST'])\ndef delete(key):\n if request.method == 'POST':\n del contact_list[key]\n return redirect(url_for('index'))\n\n return render_template('delete.html', key=key, contact=contact_list[key])\n\nif __name__ == '__main__':\n app.run(host=os.environ.get('IP'),\n port=os.environ.get('PORT'),\n debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef get_nearest_neighbour(start_city, city_list):\n neighbour = None\n shortest_distance = math.inf\n for city in city_list:\n dist = math.sqrt((city[0] - start_city[0])**2 + (city[1] - start_city[1])**2)\n if dist < shortest_distance:\n shortest_distance = dist\n neighbour = city\n \n return neighbour\n\ndef solve_tsp(start_city, city_list):\n current_city = start_city\n path = [start_city]\n while len(city_list) > 0:\n  next_city = get_nearest_neighbour(current_city, city_list)\n  path.append(next_city)\n  city_list.remove(next_city)\n  current_city = next_city\n \n return path\n\nstart_city = (1, 2)\ncity_list = [(3, 4), (5, 6), (7, 8)]\n\nsolution = solve_tsp(start_city, city_list)\nprint(solution) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: A web service for a database can be created by writing an application layer that accepts requests from a client, queries the database, and returns the results back to the client. The application layer can be written using a language that is supported by the database's driver, such as Java or Python. The application layer should also handle security, user authentication, and access control. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\n# define the dataset\ndata = np.array([[2,6], [4,8], [7,12], [9,14]])\n\n# calculate the Pearson correlation coefficient\ndef pearson_coefficient(x, y):\n x_mean = np.mean(x)\n y_mean = np.mean(y)\n num = np.sum((x - x_mean)*(y - y_mean))\n den = np.sqrt(np.sum(np.square(x - x_mean)) * np.sum(np.square(y - y_mean)))\n return num/den\n \nx = data[:, 0]\ny = data[:, 1]\npearson_r = pearson_coefficient(x, y)\nprint('Pearson correlation coefficient: %.3f' % pearson_r) # Output: Pearson correlation coefficient: 0.998 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: data = [{'country':'India', 'population':1378350000, 'area':3287590},\n        {'country':'China', 'population':1403500000, 'area':9596961}]\n\nfor item in data:\n    print(\"Country:\",item['country'], \",Population:\", item['population'] , \n          \",Area:\", item['area']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: primes = []\n\nfor num in range(2, 100):\n   # all prime numbers are greater than 1\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           primes.append(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_squares(arr):\n    sum = 0 \n    for num in arr:\n        sum += num*num\n    return sum\n\narr = [1,2,3]\nsum_of_squares = sum_of_squares(arr)\nprint(sum_of_squares) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\nimport pymongo\n\nurl = \"https://www.example.com\"\n\n# requesting data\nresponse = requests.get(url)\n\n# parse data\nsoup = BeautifulSoup(response.text, 'lxml')\n\n# connect to MongoDB server\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n\n# create a MongoDB database\nmydb = myclient[\"mydatabase\"]\n\n# create a collection in the database\nmycol = mydb[\"mycollection\"]\n\n# retrieve and store every page's content in the MongoDB database\nfor div in soup.find_all('div', class_=\"box\"):\n title = div.h3.text\n description = div.p.text\n data = {\n \"title\": title,\n \"description\": description\n }\n mycol.insert_one(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def thirdElement(mylist):\n    \"\"\" Print out the third element of the list. \"\"\"\n    print(mylist[2])\n\nthirdElement(mylist) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class FamilyTree:\n    def __init__(self):\n        self.nodes = []\n\n    def add_node(self, node):\n        self.nodes.append(node)\n\n    def get_all_descendants(self, node):\n        descendants = []\n        for n in self.nodes:\n            if n.parent == node:\n                descendants.append(n)\n                descendants.extend(self.get_all_descendants(n))\n        return descendants but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_primes(arr):\n    for i in arr:\n        if i > 1:\n            for j in range(2,i):\n                if (i % j) == 0:\n                    break\n            else:\n                print(i)\n\nprint_primes(array) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_sum(arr):\n return sum(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n): \n    a = 0\n    b = 1\n    fibo = []\n\n    for i in range(n):\n        fibo.append(a)\n        c = a + b\n        a = b\n        b = c\n\n    return fibo\n\nfibonacci(10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# define the model\nmodel = Sequential()\nmodel.add(Dense(5, activation='relu', input_dim=5))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# compile the model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# load the data\nX = np.loadtxt('data.txt', delimiter=',')\n\n# fit the model with input data\nmodel.fit(X, y, epochs=50) but is not the same. just give one example and only return the code."}
