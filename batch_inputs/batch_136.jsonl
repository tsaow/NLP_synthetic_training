{"prompt": "make some code that functions the same as the following code: class BinomialTree:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\n    def add_left_child(self, data):\n        self.left = BinomialTree(data)\n\n    def add_right_child(self, data):\n        self.right = BinomialTree(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combination_of_team(n, k):\n    return math.factorial(n)//(math.factorial(k)*math.factorial(n-k))\n\nteam_members = 8\ntotal_members = 20\n\nprint(combination_of_team(total_members, team_members)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: @app.route('/users', methods=['GET'])\ndef get_users():\n users = User.query.all()\n return jsonify([{'Id': user.id, 'Name': user.name, 'Email': user.email, 'Gender': user.gender} for user in users]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_digits(num):\n    \"\"\"\n    Counts the number of digits in a given number.\n    \"\"\"\n    count = 0\n    while num > 0:\n        num //= 10\n        count += 1\n    return count\n\nif __name__ == '__main__':\n    num = int(input('Enter number: '))\n    print(count_digits(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Car():\n    #initialize car\n    def __init__(self, make, model, color, wheels):\n        self.make = make\n        self.model = model\n        self.color = color\n        self.wheels = wheels\n    \n    #string representation\n    def __str__(self):\n        return '{}, {}, {}, {}'.format(self.make, self.model, self.color, self.wheels) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_vowels(string):\n    # Replace all the vowels with empty string\n    without_vowels = string.replace('a', '').replace('e', '').replace('i', '').replace('o', '').replace('u', '') \n    return without_vowels\n\nif __name__ == '__main__':\n    print(remove_vowels('Hello World!')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_seconds(minutes):\n    return minutes * 60\n\nfuture_seconds = calculate_seconds(60)\nprint(\"The number of seconds in the future is \" + str(future_seconds))\npast_seconds = calculate_seconds(-60)\nprint(\"The number of seconds in the past is \" + str(past_seconds)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from datetime import date, timedelta\n\ndef next_day(old_date):\n d = date.fromisoformat(old_date)       \n new_date = d + timedelta(1) \n return new_date.isoformat() \n\nnext_day(\"2020-06-20\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\nclass BinarySearchTree:\n    def __init__(self):\n        self.root = None\n    \n    def insert(self, data):\n        newNode = Node(data)\n\n        if self.root is None:\n            self.root = newNode\n        else:\n            current = self.root\n\n            while True:\n                if data < current.data:\n                    if current.left is None:\n                        current.left = newNode\n                        return\n                    else:\n                        current = current.left\n                else:\n                    if current.right is None:\n                        current.right = newNode\n                        return\n                    else:\n                        current = current.right but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_string(strings):\n  longest = \"\"\n  for s in strings:\n    if len(s) > len(longest):\n        longest = s\n  print(longest)\n\nlongest_string(strings)\n# Output: ABCDE but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python 3 program for the implementation of the Encryption Algorithm\n\n# Method to encrypt the given string\ndef encrypt_string(str): \n    cipher = \"\" \n    for s in str:\n        # Shift each character by 2 ascii value\n        s = chr(ord(s) + 2) \n        cipher += s \n  \n    return cipher \n    \n# Driver code \nstr = \"python\" \nprint (\"Encrypted String: \" + encrypt_string(str)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter as tk\n\n# Create the main window \nroot = tk.Tk() \n\n# Set the window title\nroot.title(\"Temperature in Manhattan\")\n\n# Get the current temperature in Manhattan\ntemp_in_manhattan = get_temperature_in_manhattan()\n\n# Add the temperature to the main window\ntk.Label(root, text=f\"Current temperature in Manhattan is: {temp_in_manhattan}\u00b0C\").pack()\n\n# Run the main loop\nroot.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import socket\n\nHOST, PORT = '', 8888\n\nlisten_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nlisten_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nlisten_socket.bind((HOST, PORT))\nlisten_socket.listen(1)\n\nprint('Serving HTTP on port %s ...' % PORT)\nwhile True:\n    client_connection, client_address = listen_socket.accept()\n    request = client_connection.recv(1024)\n    print(request)\n\n    http_response = \"\"\"\\\nHTTP/1.1 200 OK\n\nHello, World!\n\"\"\"\n    client_connection.sendall(http_response)\n    client_connection.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Define the menu\nmenu = {\n  \"Fried Noodles\": 30,\n  \"Tofu Soup\": 20,\n  \"Fried Rice\": 25,\n  \"Fruit Salad\": 15\n  }\n\n# Print the menu\nfor item, price in menu.items():\n  print(f\"{item}..........{price}\")\n\n# Ask for customer order\norder = []\nwhile True:\n  order_item = input(\"What would you like to order? (Type 'done' when you are finished ordering) \")\n  if order_item.lower() == 'done':\n    break\n  else:\n    order.append(order_item)\n\n# Calculate the total\ntotal = 0\nfor item in order:\n  total += menu[item]\n\nprint(f\"Total bill is {total}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def addTwoNum(a, b):\n return a + b\n\nc = addTwoNum(3, 4) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def edit_array(arr):\n    for i in range(len(arr)):\n        arr[i] += 10\n    return arr\n\nif __name__ == '__main__':\n    arr = [1,2,3,4,5]\n    print(\"Edited array:\", edit_array(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: model = Sequental()\n\nmodel.add(Dense(units=64, input_shape=(3,)))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(.2))\nmodel.add(Dense(32))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(.2))\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer='Adam',\n              metrics=['accuracy']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insert_element(arr, element):\n    # Find insertion index\n    i = 0\n    while i < len(arr) and element > arr[i]:\n        i += 1\n \n    # Shift array elements\n    j = len(arr) - 1\n    while j >= i:\n        arr[j + 1] = arr[j]\n        j -= 1\n\n    # Insert element\n    arr[i] = element\n\n    return arr\n\narr = [1, 2, 6, 8]\nelement = 3\n\ninsert_element(arr, element)\n\n# Output: [1, 2, 3, 6, 8] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_sentence(sent):\n    words = sent.split(\" \")\n    reversed_words = words[::-1]\n    result = \" \".join(reversed_words)\n    return result\n\nsentence = \"This is a test\"\nprint(reverse_sentence(sentence))\n\n# Output\ntest a is This but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_times_tables():\n    for i in range(1, 11):\n        print(f'{i:>2} times table:')\n        for j in range(1, 11):\n            res = i*j\n            print(f'{i} * {j} = {res}')\n        print('\\n')\n\nprint_times_tables() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def processSalaryData(name, salary):\n     salaries = []\n     nameList = []\n     \n     salaries.append(salary)\n     nameList.append(name)\n     \n     averageSalary = sum(salaries) / len(salaries)\n     \n     print(\"Average salary of the following employees:\")\n     for name in nameList: \n         print(name)\n     \n     print(\"Average Salary: \" + str(averageSalary)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os\n\n# Create a Movie class to store movie details\nclass Movie(object):\n def __init__(self, title, year):\n self.title = title\n self.year = year\n\n# Create a MovieLibrary class to store the list of movies\nclass MovieLibrary(object):\n def __init__(self, name):\n self.name = name\n self.movies = []\n\n# Method to add a movie to the library\n def add_movie(self, movie):\n self.movies.append(movie)\n\n# Method to delete a movie from the library\n def delete_movie(self, movie):\n self.movies.remove(movie)\n\n# Method to list all the movies in the library\n def list_movies(self):\n for movie in self.movies:\n print('{} ({})'.format(movie.title, movie.year))\n\n# Create a new movie library instance\nlib = MovieLibrary('My Movie Library')\n\n# Add some movies to our library\nlib.add_movie(Movie('The Dark Knight', 2008))\nlib.add_movie(Movie('Back to the Future', 1985))\nlib.add_movie(Movie('Avengers: Endgame', 2019))\n\n# List all the movies in the library\nlib.list_movies()\n\n# Delete a movie from the library\nlib.delete_movie(Movie('Back to the Future', 1985))\n\n# List the movies again to verify that the movie was deleted\nlib.list_movies() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class StrComparer:\n    def __init__(self, str1, str2):\n        self.str1 = str1\n        self.str2 = str2\n    \n    def is_same(self):\n        if self.str1 == self.str2:\n            return True\n        else:\n            return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_alphanumeric_id(stringLength=8):\n \"\"\"Generate a random string of letters and digits \"\"\"\n lettersAndDigits = string.ascii_letters + string.digits\n return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))\n\nprint (\"Random ID is: \", generate_alphanumeric_id() ) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Function to generate random string \ndef get_random_string(length):\n  # Create an empty string \n  letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n  random_string = \"\"\n  \n  # Generate the random string of required length\n  for x in range(length): \n    random_string += random.choice(letters) \n  \n  return random_string\n\n# Usage example\nrandom_string = get_random_string(8)\nprint(\"Random String: \" + random_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findMinValue(list):\n    minValue = list[0]\n    for i in range(1, len(list)):\n        if list[i] < minValue:\n            minValue = list[i]\n    return minValue\n\nlist1 = [30, 10, 40, 20]\nminValue = findMinValue(list1)\nprint(minValue) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add(x, y):\n    return x + y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas aspd \n  \ndata_dict = {\"Country\":[\"India\", \"Germany\", \"USA\", \"Indonesia\"], \n             \"Capital\":[\"Delhi\", \"Berlin\", \"Washington DC\", \"Jakarta\"], \n             \"Currency\":[\"Rupee\", \"Euro\", \"US Dollar\", \"Rupiah\"]} \n  \n# Creating a dataframe from given dict \ndf = pd.DataFrame(data_dict) \n  \n# Print dataframe \nprint(df) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def getFibonacciSequence(length): \n    a = 0\n    b = 1\n    result = [a, b] \n    if (length < 2):\n        return result \n    else:\n        for i in range(2, length):\n            c = a + b\n            a = b \n            b = c\n            result.append(c)\n    return result\n  \nprint(getFibonacciSequence(8)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n \ndef findOccurrences(arr):\n    counter = Counter(arr)\n    for i in counter:\n        print('Number', i, 'occurs', counter[i], 'time(s).')\n \narr = [1, 2, 3, 4, 4, 2, 3, 2, 1, 3, 4, 2, 1]\nfindOccurrences(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = \"https://example.com/data\"\n\n# Send a GET request to the URL\nr =  requests.get(url)\n\n# Check the status of the request\nif r.status_code == 200:\n data = r.json()\n # Process the fetched data\nelse:\n print('Error: status code {}'.format(r.status_code)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_words(text):\n    ''' Counts the number of words in a text '''\n    # Optimization #1: Replacing the loop and using Python's count method\n    word_count = len(text.split(' ')) \n    return word_count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_product_listing(product_category):\n    return [product.get_listing() for product in product_category] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def computeHighestPerfectNumber(n): \n    perfect_nums = []\n    for num in range(2, n + 1): \n        sum = 1\n        for i in range(2, num): \n            if num % i == 0: \n                sum = sum + i\n        if sum == num: \n            perfect_nums.append(num)\n    if len(perfect_nums) == 0: \n        return -1\n    else: \n        return perfect_nums[-1]\n\nnum = 1000\nprint(\"The highest perfect number less than or equal to\", num, \"is\", computeHighestPerfectNumber(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #function to convert word to pig latin\ndef pig_latin_word(word):\n vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n #checks if the first letter of the word is a vowel\n if word[0].lower() in vowels:\n return word + \"way\"\n else:\n #finds the index of the first vowel in the word\n for i in range(len(word)):\n if word[i].lower() in vowels:\n break\n return word[i:] + word[:i] + \"ay\"\n\n#function to convert sentence to pig latin\ndef pig_latin_sentence(sentence):\n #splits sentence into words\n words = sentence.split()\n #converts each word to pig latin\n new_words = [pig_latin_word(word) for word in words]\n #joins changed words into a sentence\n new_sentence = \" \".join(new_words)\n return new_sentence\n\n#example sentence\nsentence = \"I went to the store.\"\n\n#convert sentence\nnew_sentence = pig_latin_sentence(sentence)\n\n#output\nprint(new_sentence)\n\n# Output: Iway entway otay ethay orestay. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def heuristicSearch(initialState, goalState):\n    # Initialize visited states set to empty set\n    visitedStates = set()\n    \n    # Initialize fringe (or open list) to the initial state\n    fringe = []\n    fringe.append(initialState)\n    \n    # Initialize cost to 0\n    cost = 0\n    \n    while len(fringe) > 0:\n        currentState = fringe.pop()\n        \n        # Check if goal state is reached\n        if currentState == goalState:\n            return cost\n        \n        # Add current node to visited set\n        visitedStates.add(currentState)\n        \n        # Generate all possible neighbors from the current node\n        neighbors = generateNeighbors(currentState)\n        \n        # Iterate through all neighbors\n        for neighbor in neighbors:\n            # Calculate heuristic (number of misplaced tiles)\n            heuristicValue = numberOfMisplacedTiles(neighbor, goalState)\n            \n            # Add the neighbor to fringe (open list) if it is not visited\n            if neighbor not in visitedStates:\n                fringe.append(neighbor)\n                cost += heuristicValue\n                \n    return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef classify(dataset):\n    #We seperate the input features and labels\n    X = dataset[:, 0:3]\n    y = dataset[:, 3]\n    \n    #The height, weight and body mass index are normalized \n    X = X/np.amax(X, axis = 0)\n    #The labels are converted in the form of 0 and 1\n    y = np.where(y == 'default', 0, 1)\n    \n    # Create an instance of the DecisionTreeClassifier\n    from sklearn.tree import DecisionTreeClassifier\n    classifier = DecisionTreeClassifier()\n\n    # Fit the classifier to the data\n    classifier = classifier.fit(X, y)\n\n    return classifier but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = 'https://example.com/test'\n \n# Make the request\nresponse = requests.get(url)\n \n# Check the response\nif response.status_code == 200:\n  # Success\n  content = response.text\nelse:\n  # Failure\n  print(f'Request failed with status code: {response.status_code}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create a Django project with a newsfeed app\n$ django-admin startproject django_newsfeed \n$ python manage.py startapp newsfeed \n\n# Add the app to the installed apps list\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'newsfeed',\n]\n\n# Create models\nfrom django.db import models\nfrom django.utils import timezone\n\nclass NewsFeedEntry(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    created_at = models.DateTimeField(default=timezone.now)\n    published_at = models.DateTimeField(null=True, blank=True)\n\n    def __str__(self):\n        return self.title\n\n# Migrate the database\n$ python manage.py makemigrations\n$ python manage.py migrate\n\n# Create a view for the list of NewsFeed entries\nfrom django.shortcuts import render\nfrom .models import NewsFeedEntry\n\ndef index(request):\n    entries = NewsFeedEntry.objects.all()\n    context = {\n        'entries': entries\n    }\n    return render(request, 'newsfeed/index.html', context)\n\n# Create a template for the newsfeed entries\n<h1>NewsFeed</h1>\n<ul>\n    {% for entry in entries %}\n    <li><a href=\"#\">{{ entry.title }}</a></li>\n    {% endfor %}\n</ul> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(string):\n \n    i = 0\n    j = len(string)-1\n \n    while j > i:\n        if string[i] != string[j]:\n            return False\n        i += 1\n        j -= 1\n \n    return True\n\n# Driver code\nstring = \"malayalam\"\nprint(is_palindrome(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def validate_password(password):\n    if len(password) < 8:\n        return False\n    if not any(c.isupper() for c in password):\n        return False\n    if not any(c.isdigit() for c in password):\n        return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\njson_string = '{\"a\":1, \"b\": \"Hello\", \"c\": {\"d\": [34, 56]}}'\nparsed_json = json.loads(json_string)\n\nprint(parsed_json)  # Output: {'a': 1, 'b': 'Hello', 'c': {'d': [34, 56]}} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: d = {'a':1, 'b':2, 'c':3}\n\n# Using the clear() method\nd.clear()\n\nprint(d) # Prints an empty dictionary but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_vowels(string):\n    vowels = ['a','e','i','o','u']\n    for vowel in vowels:\n        if vowel not in string:\n            return False\n    return True\n\nprint(check_vowels('This is a test')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Vector3D:\n\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def magnitude(self):\n        return (self.x**2 + self.y**2 + self.z**2)**(1/2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class LinkedList:\n    \n    def __init__(self):\n        self.head = None\n        self.tail = None\n    \n    def append(self, data):\n        node = Node(data)\n        if self.tail is not None:\n            self.tail.next = node\n            self.tail = node\n        else:\n            self.head = node\n            self.tail = node\n    \n    def sort(self):\n        if self.head is None:\n            return\n        current_node = self.head\n        while current_node.next is not None:\n            next_node = current_node.next\n            if next_node.data < current_node.data:\n                temp = current_node.data\n                current_node.data = next_node.data\n                next_node.data = temp\n            current_node = next_node but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: [3, 3, 3, 4, 4, 5, 5, 7, 7]\n\nPython Code:\n\ndef sort_by_greatest_occurrence(nums):\n    num_freq = {}\n    for num in nums:\n        num_freq[num] = num_freq.get(num, 0) + 1\n    sorted_freq = sorted(num_freq.items(), key=lambda x: x[1], reverse=True)\n    sorted_nums = []\n    for num, _ in sorted_freq:\n        sorted_nums += [num] * num_freq[num]\n    return sorted_nums\n\nnums = [4, 7, 3, 5, 3, 4, 5, 3, 7]\nprint(sort_by_greatest_occurrence(nums)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_all_primes(n): \n  for num in range(2,n + 1):\n    for i in range(2,num):\n      if (num % i) == 0:\n        break \n    else:\n      print(num)\n\nfind_all_primes(100) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: matrix = [[1,2,3,4],\n          [1,2,3,4],\n          [1,2,3,4],\n          [1,2,3,4]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 7):\n    print(\"*\" * i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for x in range(5):\n    for y in range(3):\n        col = input(\"Enter Value: \")\n        print(col, end=\"\\t\\t\")\n    print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def display_dict(dictionary):\n    for key, value in dictionary.items():\n        print(f'{key}: {value}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"This function takes two arguments and adds them\"\"\"\ndef add(x, y):\n    return x + y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def login():\n    username = input(\"Username:\")\n    password = input(\"Password:\")\n    if username == \"admin\" and password == \"admin\":\n        return True\n    else: \n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def distinct_strings_sort(arr):\n result = []\n \n for s in arr:\n if s not in result:\n result.append(s)\n \n return sorted(result)\n\n# Example:\narr = ['hello', 'world', 'hello', 'again']\ndistinct_sorted = distinct_strings_sort(arr)\nprint(distinct_sorted)  # Prints: ['again', 'hello', 'world'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_increasing_subsequence(arr):\n    n = len(arr)\n \n    # An array to store increasing subsequences\n    dp = [1]*n\n \n    # Compute optimal values in bottom up manner\n    for i in range (1 , n):\n        for j in range(0 , i):\n            if arr[i] > arr[j] and dp[i]< dp[j] + 1 :\n                dp[i] = dp[j]+1\n \n    # Pick maximum of dp[i]\n    # Initialize result\n    maximum = 0\n \n    # Pick maximum of all dp[i]\n    for i in range(n):\n        maximum = max(maximum , dp[i])\n \n    return maximum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_string(s):\n    sum = 0\n    for ch in s:\n        if ch.isdigit():\n            sum += int(ch)\n    return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import xml.etree.ElementTree as ET\nimport psycopg2  # install psycopg2\n\n# parse an XML file\ntree = ET.parse('data.xml')\n\n# get root element\nroot = tree.getroot()\n\n# create a database connection\nconn = psycopg2.connect(\"dbname=my_database user=postgres\")\ncursor = conn.cursor()\n\n# iterate person elements\nfor person in root.findall('person'):\n # get name\n name = person.find('name').text\n\n # get age \n age = person.find('age').text\n\n # get address\n address = person.find('address')\n street = address.find('street').text\n city = address.find('city').text\n state = address.find('state').text\n\n # insert into database\n cursor.execute(\n \"\"\"\n INSERT INTO people (name, age, street, city, state) \n VALUES (%s,%s,%s,%s,%s)\n \"\"\" % (name, age, street, city, state))\n\n# commit\nconn.commit()\n\n# close connection\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.neighbors import KNeighborsClassifier\n\ndata = np.array([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]])\n\n# Create the model\nmodel = KNeighborsClassifier()\n\n# Train the model\nmodel.fit(data[:, 0].reshape(-1, 1), data[:, 1].reshape(-1, 1))\n\n# Output the result\nprint(model.predict([[2]])) # [[3]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_time(time): \n    # Get the hours and minutes \n    hours = int(time.split(':')[0]) \n    minutes = int(time.split(':')[1]) \n      \n    # Convert hours to 12-hour format \n    conv_hours = (hours - 12) if (hours > 12)  \n    else hours \n      \n    # Check for minute values \n    if (minutes < 10): \n        minutes = \"0\" + str(minutes); \n    else: \n        minutes = str(minutes); \n          \n    # return the converted value \n    return str(conv_hours) + \":\" + minutes \n          \n# Driver code \ntime = \"23:15\"\nprint(convert_time(time)) \n\n# Output: 11:15 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: expression = 'x**3 + 2*x**2 + 3'\n\nprint(eval(expression)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef classify_sentiment(sentence):\n    sid = SentimentIntensityAnalyzer()\n    score = sid.polarity_scores(sentence)\n    if score['compound'] >= 0.05:\n        return 'positive'\n    elif score['compound'] <= -0.05:\n        return 'negative'\n    else:\n        return 'neutral' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_largest_index(arr):\n    largest = float('-inf')\n    largest_index = 0\n    for i in range(len(arr)):\n        num = arr[i]\n        if num > largest:\n            largest = num\n            largest_index = i\n    return largest_index \n\nprint(find_largest_index([1,2,3,4,5])) # 4 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a program that sorts a list of strings in alphabetical order.\n\"\"\"\n\ndef sort_list(lst):\n    \"\"\"\n    This function sorts a list of strings in alphabetical order.\n    \"\"\"\n    lst.sort()\n    return lst\n \nif __name__ == '__main__':\n    lst = ['python', 'javascript', 'java', 'go']\n    print(sort_list(lst)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combine_strings(string1, string2): \n    return string1 + ' ' + string2 \n\nstring1 = \"Hello\" \nstring2 = \"World\"\n\nresult = combine_strings(string1, string2) \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\n \ndef get_next_day_date():\n  today_date = datetime.datetime.now().date()\n  next_day_date = today_date + datetime.timedelta(days=1)\n  return next_day_date but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(arr, target):\n for i in range(len(arr)):\n if arr[i] == target:\n return i\n return -1\n\nprint(linear_search(arr, target)) # 3 (index of 6) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 101):\n  if (i % 4 == 0) and (i % 2 != 0):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quick_sort(input_list):\n    if len(input_list) <= 1:\n        return input_list\n    pivot = input_list[0]\n    left = [x for x in input_list[1:] if x < pivot]\n    right = [x for x in input_list[1:] if x >= pivot]\n    return quick_sort(left) + [pivot] + quick_sort(right)\n\nmyList = [3, 8, 10, 2, 4]\n\nsortedList = quick_sort(myList)\nprint(sortedList) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class CaesarCipher:\n    def __init__(self, shift):\n        encoder = [None] * 26\n        decoder = [None] * 26\n        for k in range(26):\n            encoder[k] = chr((k + shift) % 26 + ord('A'))\n            decoder[k] = chr((k - shift) % 26 + ord('A'))\n        self._forward = ''.join(encoder)\n        self._backward = ''.join(decoder)\n\n    def encrypt(self, message):\n        return self._transform(message, self._forward)\n\n    def decrypt(self, secret):\n        return self._transform(secret, self._backward)\n\n    def _transform(self, original, code):\n        msg = list(original)\n        for k in range(len(msg)):\n            if msg[k].isupper():\n                j = ord(msg[k]) - ord('A')\n                msg[k] = code[j]\n        return ''.join(msg) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def odd_numbers(numbers):\n    result = 0 \n    for num in numbers: \n        if num % 2 != 0:\n            result += num\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_list(input_list, ref_set):\n    # Initialize\n    result_list = []\n\n    # Iterate through the list\n    for item in input_list:\n        # Set a flag\n        flag = True\n\n        # Check if the item contains any substring in ref_set\n        for substring in ref_set:\n            if substring in item:\n                # If so, set the flag to False\n                flag = False\n                break\n\n        # If the flag is still True\n        if flag:\n            # Add the item to the result list\n            result_list.append(item)\n\n    return result_list\n\n# Test\nfiltered_list = filter_list([\"apple\", \"banana\", \"pie\", \"candy\"], [\"banana\", \"pie\"])\nassert(filtere_list == [\"apple\", \"candy\"]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(number):\n  if number < 2:\n    return False\n  else:\n    for x in range(2, number):\n      if number % x == 0:\n        return False\n    return True\n\nn = 37\nprint (is_prime(n)) # Output: True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n\nurl = \"https://example.org/search?q=bike+shops+in+Berlin\"\n\npage = requests.get(url)\n\nsoup = BeautifulSoup(page.text, \"lxml\")\n\n# Get all shop information from the page.\nshops = soup.find_all(\"div\", class_=\"shop-info\")\n\n# Print each shop's name, address, and phone number.\nfor shop in shops:\n name = shop.find(\"h3\", class_=\"shop-name\").text\n address = shop.find(\"div\", class_=\"shop-address\").text\n phone = shop.find(\"div\", class_=\"shop-phone\").text\n \n print(name, address, phone) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find(s, t):\n    if t in s:\n        return s.index(t)\n    else:\n        return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_and_count(numbers):\n sorted_list = sorted(numbers)\n new_list = []\n \n length = len(sorted_list)\n current_index = 0\n \n while current_index < length:\n current_number = sorted_list[current_index]\n current_count = sorted_list.count(current_number)\n new_list.append((current_number, current_count))\n \n for i in range(current_count):\n sorted_list.remove(current_number)\n \n current_index += 1\n \n return new_list\n \n# Usage:\nprint(sort_and_count([2, 5, 2, 2, 1, 3, 5, 7, 2]))\n# Output: [(1, 1), (2, 4), (3, 1), (5, 2), (7, 1)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: do_this() if condition else do_that() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_squares(num1, num2):\n  return num1**2 + num2**2\n\nx = 5\ny = 9\n\nprint(sum_of_squares(x, y))\n# output: 106 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def names_scores(names):\n    scores = {}\n    for name in names:\n        scores[name] = random.randint(1, 10)\n    return scores but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\n# Make a get request to get the latest users\nresponse = requests.get('https://jsonplaceholder.typicode.com/users')\n\n# Get the response data as a JSON\ndata = response.json()\n\n# Print the data\nprint(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ClassA:\n    def print_info(self):\n        print(\"This class is ClassA\")\n        \nclass Cars:\n    def print_info(self):\n        print(\"This class is for Cars\")\n        \nclass Sports:\n    def print_info(self):\n        print(\"This class is for Sports\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def celsius_to_fahrenheit(celsius):\n    return ((celsius * 9/5 ) + 32)\n\ntemperature = 23\nfahrenheit = celsius_to_fahrenheit(temperature)\nprint('The temperature in Fahrenheit is: ' + str(fahrenheit)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: data = [\n {\"name\": \"Smith\", \"age\": 30},\n {\"name\": \"John\", \"age\": 40},\n {\"name\": \"Lee\", \"age\": 50}\n]\n\n#Calculate the average age\ntotal_age = 0\nfor person in data:\n total_age += person[\"age\"]\n\naverage_age = total_age/len(data)\n\n#Display the average age\nprint(\"The average age of people in this data is {}\".format(average_age)) # Output: The average age of people in this data is 40.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import jwt \nimport bcrypt\n\nclass AuthenticationApi: \n def __init__(self, user_repo): \n  self.user_repo = user_repo\n \n def authenticate(self, username: str, password: str) -> str: \n  user = self.user_repo.find_by_username(username) \n \n  if user is None: \n   raise ValueError('Invalid username or password') \n \n  if not bcrypt.checkpw(password.encode('utf-8'), user.password): \n   raise ValueError('Invalid username or password') \n \n  token = jwt.encode({'sub': user.id}, 'secret', algorithm='HS256') \n \n  return token.decode('utf-8') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_password():\n    lowercase = string.ascii_lowercase\n    uppercase = string.ascii_uppercase\n    digits = string.digits\n    \n    # Generate a random 8 character string\n    password = list(random.sample(lowercase + uppercase + digits, 8))\n    \n    # Shuffle the characters of the string\n    random.shuffle(password)\n    \n    # Check if the password contains at least one of each\n    if not any(letter in password for letter in lowercase):\n        password[0] = random.choice(lowercase)\n    if not any(letter in password for letter in uppercase):\n        password[1] = random.choice(uppercase)\n    if not any(letter in password for letter in digits):\n        password[2] = random.choice(digits)\n    \n    # Return the password\n    return ''.join(password)\n\n# Generate random password\npassword = generate_password()\n\nprint(password) # Output dZk5EGe1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, jsonify\nimport psycopg2\n\napp = Flask(__name__)\nconn = psycopg2.connect( host=\"localhost\", dbname=\"postgres\", user=\"postgres\", password=\"password\")\ncursor = conn.cursor()\n    \n@app.route('/api/customers/<string:search_term>', methods=['GET'])\ndef get_customers(search_term):\n    query = \"SELECT * FROM customers WHERE name like %s\"\n    cursor.execute(query, (f'%{search_term}%', ))\n    records = cursor.fetchall()\n\n    customers = []\n    for record in records:\n        customers.append({\n            'id': record[0],\n            'name': record[1],\n            'email': record[2],\n        })\n\n    return jsonify({'customers': customers})\n\nif __name__ == \"__main__\":\n    app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def int_to_Roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n\nprint(int_to_Roman(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def deepest_node(root):\n    if not root:\n        return 0\n    elif not root.left and not root.right:\n        return 1\n    else:\n        left_depth = deepest_node(root.left)\n        right_depth = deepest_node(root.right)\n\n        if left_depth > right_depth:\n            return 1 + left_depth\n        else:\n            return 1 + right_depth but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# The url of the website to be scraped\nurl = 'https://www.example.com'\n\n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get(url).text\n\n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n\n# Scrape the content from the paragraph tag\nscraped_text = soup.find(\"p\").text\n\n# Print scraped text\nprint(scraped_text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_common(mylist):\n    return max(set(mylist), key = mylist.count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortList(lst): \n    lst.sort() \n    return lst\n  \nar_list = [5, 4, 1, 8, 9, 2]\nresult = sortList(ar_list) \n  \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(arr, x): \n    \n    for i in range(len(arr)): \n  \n        if arr[i] == x: \n            return i \n  \n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def removeDuplicates(arr):\n  output = []\n  for ele in arr:\n    if ele not in output:\n      output.append(ele)\n  return output\n  \noutput = removeDuplicates([1,1,2,2,3,4,5,5]);\nprint(output) // outputs: [1, 2, 3, 4, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Solution\n# First, let's define our list of numbers\nmy_list = [1, 2, 3]\n\n# Now, let's define a function to generate all permutations\ndef allPermutations(my_list):\n if len(my_list) == 0:\n  return []\n if len(my_list) == 1:\n  return [my_list]\n permutations = []\n for i in range(len(my_list)):\n  m = my_list[i]\n  remaining_list = my_list[:i] + my_list[i+1:]\n  for p in allPermutations(remaining_list):\n   permutations.append([m] + p)\n return permutations\n\n# Finally, we can call the function and print out the result\nprint(allPermutations(my_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_dot_product(arr1, arr2): \n      \n    # Initialize result \n    result = 0\n  \n    # Iterate both arrays and multiply them together \n    for i, j in zip(arr1, arr2): \n        result += i * j \n  \n    return result \n  \n# Driver code \narr1 = [1, 2, 3] \narr2 = [4, 5, 6] \n  \nresult = max_dot_product(arr1, arr2) \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: This line of code is written in Python and is using the built-in \"any\" and \"map\" functions. The code is checking if none of the key-value pairs in the map \"x\" are in the dictionary \"d\". It does so using a lambda function to check if either the key or the value is present in the dictionary. If none are present, it will return True, otherwise it will return False. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \nfrom bs4 import BeautifulSoup \n \n# Enter the year you want to scrape \nyear = 2020\n  \n#Creating the IMDb URL for the movies of that year \nurl = f\"https://www.imdb.com/search/title/?release_date={year}-01-01,{year+1}-12-31\"\n      \nresponse = requests.get(url) \nsoup = BeautifulSoup(response.text,\"html.parser\") \n  \n# List to store the data \nmovie_list = [] \n  \n# Extracting the movie title and release date \nmovie_div = soup.find_all(\"div\", class_ = \"lister-item mode-advanced\") \nfor movie in movie_div: \n     \n    # extracting the movie title      \n    movie_title = movie.h3.a.text\n      \n    # extracting the movie's release date      \n    movie_year = movie.h3.find(\"span\", class_ = \"lister-item-year text-muted unbold\").text\n    year = int(movie_year.replace(\"(\", \"\").replace(\")\", \"\"))\n    \n    movie_list.append((movie_title, year)) \n\n# printing the movie_list\nprint(movie_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Calculate the average\ndef avg(lst): \n    sum = 0\n    count = 0\n    for num in lst:\n        if num is not None:\n            sum += num\n            count += 1\n    return sum / count\n\n# Create list of numbers\nlst = [30, 28, 40, 10, 0, None, 33, None]\n\n# Print average\nprint(avg(lst))\n\n# Output: 25.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import unittest\n\nclass TestCheckString(unittest.TestCase):\n  \n    def test_check_string_Integer(self):\n        a = 1\n        result = check_string(a)\n        self.assertFalse(result)\n  \n    def test_check_string_String(self):\n        a = 'Hello'\n        result = check_string(a)\n        self.assertTrue(result)\n\nif __name__ == '__main__':\n    unittest.main() but is not the same. just give one example and only return the code."}
