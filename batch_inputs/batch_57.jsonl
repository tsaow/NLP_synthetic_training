{"prompt": "make some code that functions the same as the following code: def sort_descending(input):\n input.sort(reverse=True)\n return input but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countNodes(root): \n    if root is None: \n        return 0\n    \n    return (1 + countNodes(root.left) + \n            countNodes(root.right)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The potential optimization is to store the previous results in a dictionary and check if the results for n - 1 is already present in the dictionary, if it is present then use the result present in the dictionary instead of executing the function for n-1 again. This will reduce the time complexity from O(n) to O(1).\n\ndef func(n):\n    mydict = dict()\n    if n == 0:\n        return 0\n    if n in mydict:\n        return mydict[n]\n    mydict[n] = n + func(n-1)\n    return mydict[n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys, time, os, socket\nimport struct, binascii, re, csv\nfrom datetime import datetime, timedelta\n\nfrom twisted.protocols.basic import LineReceiver\nfrom twisted.internet import reactor\nfrom twisted.python import usage, log\nfrom twisted.internet.serialport import SerialPort\nfrom twisted.web.server import Site\nfrom twisted.web.static import File\n\ntry: # version > 0.8.0\n    from autobahn.wamp1.protocol import exportRpc\nexcept:\n    from autobahn.wamp import exportRpc\n\niddict = {'f': '10', 'x': '11', 'y': '12', 'z': '13', 'df': '14', 't': '30', 'rh': '33', 'p': '35', 'w': '38'}\n\n\"\"\"\n0: clientname                   -- str (atlas)\n1: timestamp (PC)               -- str (2013-01-23 12:10:32.712475)\n2: date (PC)                    -- str (2013-01-23)\n3: outtime (PC)                 -- str (12:10:32.712475)\n4: timestamp (sensor)           -- str (2013-01-23 12:10:32.712475)\n5: GPS coordinates              -- str (??.??N ??.??E)\n9: Sensor Description           -- str (to be found in the adict)\n10: f                           -- float (48633.04) [nT]\n11: x                           -- float (20401.3) [nT]\n12: y                           -- float (-30.0) [nT]\n13: z                           -- float (43229.7) [nT]\n14: df                          -- float (0.06) [nT]\n30: T (ambient)                 -- float (7.2) [C]\n31: T (sensor)                  -- float (10.0) [C]\n32: T (electronics)             -- float (12.5) [C]\n33: rh (relative humidity)      -- float (99.0) [%]\n34: T (dewpoint)                -- float (6.0) [C]\n38: W (weight)                  -- float (24.0042) [g]\n40: Error code (POS1)           -- float (80) [-]\n60: VDD (support voltage)       -- float (5.02) [V]\n61: VAD (measured voltage)      -- float (2.03) [V]\n62: VIS (measured voltage)      -- float (0.00043) [V]\n\"\"\"\n\ndef timeToArray(timestring):\n    # Converts time string of format 2013-12-12 23:12:23.122324\n    # to an array similiar to a datetime object\n    try:\n        splittedfull = timestring.split(' ')\n        splittedday = splittedfull[0].split('-')\n        splittedsec = splittedfull[1].split('.')\n        splittedtime = splittedsec[0].split(':')\n        datearray = splittedday + splittedtime\n        datearray.append(splittedsec[1])\n        datearray = map(int,datearray)\n        return datearray\n    except:\n        log.msg('Error while extracting time array')\n        return []\n\ndef dataToFile(outputdir, sensorid, filedate, bindata, header):\n    # File Operations\n    try:\n        hostname = socket.gethostname()\n        path = os.path.join(outputdir,hostname,sensorid)\n        # outputdir defined in main options class\n        if not os.path.exists(path):\n            os.makedirs(path)\n        savefile = os.path.join(path, sensorid+'_'+filedate+\".bin\")\n        if not os.path.isfile(savefile):\n            with open(savefile, \"wb\") as myfile:\n                myfile.write(header + \"\\n\")\n                myfile.write(bindata + \"\\n\")\n        else:\n            with open(savefile, \"a\") as myfile:\n                myfile.write(bindata + \"\\n\")\n    except:\n        log.err(\"PalmAcq - Protocol: Error while saving file\")\n\n\n## PalmAcq protocol\n## --------------------\n\nclass PalmAcqProtocol(LineReceiver):\n    \"\"\"\n    Protocol to read Arduino data (usually from ttyACM0)\n    Tested so far only for Arduino Uno on a Linux machine\n    The protocol works only if the serial output follows the MagPy convention:\n    Up to 99 Sensors are supported identified by unique sensor names and ID's.\n\n    ARDUINO OUTPUT:\n        - serial output on ttyACM0 needs to follow the MagPy definition:\n            Three data sequences are supported:\n            1.) The meta information\n                The meta information line contains all information for a specific sensor.\n                If more than one sensor is connected, then several meta information\n                lines should be sent (e.g. M1:..., M2:..., M99:...)\n                Meta lines should be resent once in a while (e.g. every 10-100 data points)\n                Example:\n                     M1: SensorName: MySensor, SensorID: 12345, SensorRevision: 0001\n            2.) The header line\n                The header line contains information on the provided data for each sensor.\n                The typical format includes the MagPy key, the actual Variable and the unit.\n                Key and Variable are separeted by an underscore, unit is provided in brackets.\n                Like the Meta information the header should be sent out once in a while\n                Example:\n                     H1: f_F [nT], t1_Temp [deg C], var1_Quality [None], var2_Pressure [mbar]\n            3.) The data line:\n                The data line containes all data from a specific sensor\n                Example:\n                     D1: 46543.7898, 6.9, 10, 978.000\n\n         - recording starts after meta and header information have been received\n\n    MARTAS requirements:\n         - add the following line to the sensor.txt\n            ARDUINO             ACM0    9600\n         - on the MARTAS machine an additional information file will be created\n           containing the sensor information for connected ARDUINO boards:\n           arduinolist.csv:\n              \"HMC5883_12345_0001\",\"['x', 'y', 'z']\"\n           This file is used by the MARCOS machine to identify connected sensors and their keys\n\n    \"\"\"\n    delimiter = \"\\r\"\n\n    ## need a reference to our WS-MCU gateway factory to dispatch PubSub events\n    ##\n    def __init__(self, wsMcuFactory, sensor, outputdir):\n        self.wsMcuFactory = wsMcuFactory\n        self.sensorid = sensor\n        self.hostname = socket.gethostname()\n        self.outputdir = outputdir\n        self.sensor = ''\n        self.sensordict = {}\n        self.ConversionConstant = 40/4/float(int(\"0x800000\",16))\n        eventstring = \"evt0,evt1,evt3,evt11,evt12,evt13,evt32,evt60,evt99\"\n        self.eventlist = eventstring.split(',')\n\n    def connectionMade(self):\n        log.msg('%s connected.' % self.sensorid)\n\n    def extractPalmAcqData(self, line):\n        \"\"\"\n         Method to convert hexadecimals to doubles\n         Returns a data array\n        \"\"\"\n        # INTERPRETING INCOMING DATA AND CONVERTING HEXDECIMALS TO DOUBLE\n        if line.startswith('*'):\n             try:\n                 data = []\n                 chunks = []\n                 line = line.strip('*')\n                 chunks.append(line[:6])\n                 chunks.append(line[6:12])\n                 chunks.append(line[12:18])\n                 trigger = line[18]\n                 ar = line.split(':')\n                 if len(ar) == 2:\n                     extended = ar[1]\n                     chunks.append(extended[:4])\n                     chunks.append(extended[4:8])\n                     chunks.append(extended[8:12])\n                     chunks.append(extended[12:16])\n                     chunks.append(extended[16:20])\n                 for idx, chunk in enumerate(chunks):\n                     if len(chunk) == 6:\n                         val = hex(int('0x'+chunk,16) ^ int('0x800000',16))\n                         val = hex(int(val,16) - int('0x800000',16))\n                         # Conversion constanst should be obtained from palmacq-init\n                         val = float(int(val,16)) * self.ConversionConstant\n                     elif len(chunk) == 4:\n                         val = hex(int('0x'+chunk,16) ^ int('0x8000',16))\n                         val = hex(int(val,16) - int('0x8000',16))\n                         if idx == 3:\n                             val = float(int(val,16)) * 0.000575 + 1.0\n                         elif idx == 4:\n                             val = float(int(val,16)) / 128.0\n                         elif idx > 4:\n                             val = float(int(val,16)) / 8000.0\n\n                     data.append(val)\n\n                 # SOME TEST OUTPUT\n                 #if len(data)> 4:\n                 #    print datetime.utcnow(), data\n                 #print data, trigger\n\n                 return data, trigger\n             except:\n                 #print \"PALMACQ: an error occurred while interpreting the hexadecimal code\"\n                 return [], 'N'\n        else:\n             return [], 'N'\n\n    def processPalmAcqData(self, data):\n        \"\"\"Convert raw ADC counts into SI units as per datasheets\"\"\"\n        printdata = False\n\n        currenttime = datetime.utcnow()\n        outdate = datetime.strftime(currenttime, \"%Y-%m-%d\")\n        filename = outdate\n        outtime = datetime.strftime(currenttime, \"%H:%M:%S\")\n\n\n        # IMPORTANT : GET TIMESTAMP FROM DATA !!!!!!\n        timestamp = datetime.strftime(currenttime, \"%Y-%m-%d %H:%M:%S.%f\")\n        datearray = timeToArray(timestamp)\n        packcode = '6hL'\n\n        # Would probably be good to preserve the hexadecimal format\n        # Seems to be extremely effective regarding accuracy and storage\n        x = data[0]\n        y = data[1]\n        z = data[2]\n        v = 0.0\n        t = 0.0\n        p = 0.0\n        q = 0.0\n        r = 0.0\n        if len(data) > 4:\n            v = data[3]\n            t = data[4]\n            p = data[5]\n            q = data[6]\n            r = data[7]\n\n        datearray.append(x)\n        datearray.append(y)\n        datearray.append(z)\n        datearray.append(int(float(v)*10000))\n        datearray.append(int(float(t)*10000))\n        datearray.append(p)\n        datearray.append(q)\n        datearray.append(r)\n        packcode = packcode + 'fffllfff'\n        multiplier = [1,1,1,10000,10000,1,1,1]\n\n        try:\n            data_bin = struct.pack(packcode,*datearray)\n        except:\n            log.msg('Error while packing binary data')\n            pass\n\n        header = \"# MagPyBin %s %s %s %s %s %s %d\" % (self.sensorid, \"[x,y,z,v,t,p,q,r]\", \"[x,y,z,v,t,p,q,r]\", \"[V,V,V,V,C,V,V,V]\", str(multiplier).replace(\" \",\"\"), packcode, struct.calcsize(packcode))\n\n        if printdata:\n            #print header\n            print timestamp\n\n        # File Operations\n        try:\n            dataToFile(self.outputdir, self.sensorid, filename, data_bin, header)\n        except:\n            log.msg('Saving failed')\n            pass\n\n        evt0 = {'id': 0, 'value': self.hostname}\n        evt1 = {'id': 1, 'value': timestamp}\n        evt3 = {'id': 3, 'value': outtime}\n        evt11 = {'id': 11, 'value': x}\n        evt12 = {'id': 12, 'value': y}\n        evt13 = {'id': 13, 'value': z}\n        evt32 = {'id': 32, 'value': t}\n        evt60 = {'id': 60, 'value': v}\n        evt99 = {'id': 99, 'value': 'eol'}\n\n        return evt0,evt1,evt3,evt11,evt12,evt13,evt32,evt60,evt99\n\n\n    def lineReceived(self, line):\n\n        data=[]\n\n        if line:\n            data, trigger = self.extractPalmAcqData(line)\n\n        if len(data) > 1:\n            evt0,evt1,evt3,evt11,evt12,evt13,evt32,evt60,evt99 = self.processPalmAcqData(data)\n\n            dispatch_url =  \"http://example.com/\"+self.hostname+\"/pal#\"+self.sensorid+\"-value\"\n\n            # eventlist defined in init\n            for event in self.eventlist:\n                self.wsMcuFactory.dispatch(dispatch_url, eval(event))\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def highest_frequency(string):\n    freq_map = {}\n    max_freq = 0\n    result = \"\"\n    for char in string:\n        char = char.upper()\n        if char in freq_map:\n            freq_map[char] += 1\n            if freq_map[char] > max_freq:\n                max_freq = freq_map[char]\n                result = char\n        else:\n            freq_map[char] = 1\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convertToBinary(x): \n    return bin(x).replace(\"0b\", \"\") \n\nx = 155\nprint(convertToBinary(x)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_pair_with_difference(list, difference):\n    result = []\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[j] - list[i] == difference:\n                result.append((list[i], list[j]))\n    return result\n\nlist=[9, 4, 7, 5]\ndifference = 4\nresult = find_pair_with_difference(list, difference)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_even_indices(my_list):\n    for i in range(len(my_list)):\n        if i % 2 == 0:\n            print(my_list[i])\n            \nprint_even_indices(my_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_string(string):\n    result = 0\n    for char in string:\n        result += ord(char)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n@app.route('/users', methods=['GET', 'POST'])\ndef user_data():\n if request.method == 'GET':\n # Retrieve user data from the database\n return jsonify({'users': []})\n\n if request.method == 'POST':\n # Store user data in the database\n return jsonify({'message': 'success'})\n\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mean(arr): \n  return sum(arr)/len(arr)\n\narr = [2, 4, 5, 7]\nmean_val = mean(arr)\nprint(\"Mean of the array is\", mean_val)\n# Output: Mean of the array is 4.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: prime_numbers = []\nfor num in range(2, 101):\n  isPrime = True\n  for i in range(2, num//2 + 1):\n    if (num % i == 0):\n      isPrime = False\n      break  \n  if isPrime:\n    prime_numbers.append(num)\n\nprint(prime_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def capitalize(sentence):\n    words = sentence.split() \n    new_sentence = [] \n    for word in words:\n        new_sentence.append(word.capitalize()) \n    return \" \".join(new_sentence)\n\nsentence = \"newton theory of gravitation\"\nprint(capitalize(sentence)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_dict = {1:1, 3:3, 5:5 }\n\nnew_dict = {}\n\nfor key, value in my_dict.items():\n    if value % 2 != 0:\n        new_dict[key] = value\n\nmy_dict = new_dict but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import libraries \nfrom sklearn.ensemble import RandomForestClassifier \nfrom sklearn.datasets import load_iris \nfrom sklearn.model_selection import train_test_split \n  \n#import dataset \ndata = load_iris() \n  \n#divide the data into independent and dependent variables \nX = data.data \ny = data.target \n  \n# Split the data into training and test set \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) \n  \n#Define the model \nmodel = RandomForestClassifier(n_estimators=100) \n  \n#Train the model \nmodel.fit(X_train, y_train) \n  \n# Test the model \nmodel.score(X_test, y_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def helloWorld():\n    print(\"Hello World!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string1 + string2\n\nresult = string1 + string2\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def solve_linear_eq(a,b,c,d):\n    x = (b*d - c*a) / (b*d - c*a)\n    y = (d*a - b*c) / (b*d - c*a)\n    return x, y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_complexity(arr, sort):\n    n = len(arr)\n\n    # base case\n    if (n <= 1): \n        return 0\n\n    # Merge sort complexity calculation\n    if (sort == \"Merge Sort\"): \n        return (n * log(n, 2))\n\n# Driver code \nA = [1, 2, 3, 4]\nprint(merge_complexity(A, 'Merge Sort')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \nimport sys\n\n# G is the gamma matrix\n# par is the parent array\n# n is the number of nodes\ndef writeGammaMatrix(gammaFile, G, par, n):\n\tfor i in range(n):\n\t\tfor j in range(n):\n\t\t\tG[i][j] = 0\n\n\tfor i in range(n):\n\t\tG[i][i] = 1\n\t\tj = par[i]-1\n\t\twhile j > -1:\n\t\t\tG[j][i] = 1\n\t\t\tj = par[j]-1\n\n\tfor i in range(n):\n\t\tfor j in range(n):\n\t\t\tgammaFile.write(str(G[i][j]) + ' ')\n\t\tgammaFile.write('\\n')\n\n\tgammaFile.write('\\n')\n\n\n# par is the parent array\n# n is the number of nodes\ndef writeAdjMatrix(adjFile, par, n):\n\tadjFile.write(str(n-1)) # number of edges\n\tfor i in range(1, n):\n\t\tadjFile.write('  ' + str(par[i]-1) + '  ' + str(i) + '  ')\n\tadjFile.write('\\n');\n\n\n# writes a dot file to be processed with Graphviz\ndef writeDotFile(par, n, num):\n\tdotFile = open('./GammaAdjMatrices/dotFile' + str(n) + '_' + str(num-1) + '.dot', 'w')\n\tdotFile.write('digraph G { \\n')\n\tfor i in range(1, n):\n\t\tdotFile.write(str(par[i]-1) + ' -> ' + str(i) + ';\\n')\n\tdotFile.write('}\\n')\n\tdotFile.close()\n\n\n# n is the number of nodes\n# k is the max number of children allowed per node\ndef getRootedTrees(adjFile, gammaFile, n, k, writeDots):\n\tnum = 0\n\tL = []\n\tpar = []\n\tlevels = []\n\tchildren = []\n\tG = []\n\n\tp = n-1\n\tq = 0\n\n\tfor i in range(n):\n\t\tL.append(i)\n\t\tpar.append(i)\n\t\tlevels.append(i+1)\n\t\tchildren.append(0)\n\t\tG.append([])\n\t\tfor j in range(n):\n\t\t\tG[i].append(0)\n\n\twhile (p > 0):\n\t\tfor i in range(n):\n\t\t\tchildren[i] = 0\n\t\tfor i in range(n):\n\t\t\tchildren[par[i]] += 1\n\n\t\tif max(children) <= k:\n\t\t\tnum += 1\n\t\t\twriteAdjMatrix(adjFile, par, n)\n\t\t\twriteGammaMatrix(gammaFile, G, par, n)\n\t\t\tif writeDots:\n\t\t\t\twriteDotFile(par, n, num)\n\n\t\tp = 0\n\t\tfor i in range(n-1, -1, -1):\n\t\t\tif L[i] > 1:\n\t\t\t\tp = i\n\t\t\t\tbreak\n\n\t\tif p == 0:\n\t\t\tbreak\n\n\t\tfor i in range(p-1, -1, -1):\n\t\t\tif L[i] == L[p] - 1:\n\t\t\t\tq = i\n\t\t\t\tbreak\n\n\t\tfor i in range(p, n):\n\t\t\tL[i] = L[i-p+q]\n\n\t\tfor i in range(1, n):\n\t\t\tx = L[i]\n\t\t\tpar[i] = levels[x-1]\n\t\t\tlevels[x] = i+1\n\n\n# n is the number of nodes\n# k is the max number of children allowed per node\ndef getNumTrees(n, k):\n\tnum = 0\n\tL = []\n\tpar = []\n\tlevels = []\n\tchildren = []\n\n\tp = n-1\n\tq = 0\n\n\tfor i in range(n):\n\t\tL.append(i)\n\t\tpar.append(i)\n\t\tlevels.append(i+1)\n\t\tchildren.append(0)\n\n\twhile (p > 0):\n\t\tfor i in range(n):\n\t\t\tchildren[i] = 0\n\t\tfor i in range(n):\n\t\t\tchildren[par[i]] += 1\n\n\t\tif max(children) <= k:\n\t\t\tnum += 1\n\n\t\tp = 0\n\t\tfor i in range(n-1, -1, -1):\n\t\t\tif L[i] > 1:\n\t\t\t\tp = i\n\t\t\t\tbreak\n\n\t\tif p == 0:\n\t\t\tbreak\n\n\t\tfor i in range(p-1, -1, -1):\n\t\t\tif L[i] == L[p] - 1:\n\t\t\t\tq = i\n\t\t\t\tbreak\n\n\t\tfor i in range(p, n):\n\t\t\tL[i] = L[i-p+q]\n\n\t\tfor i in range(1, n):\n\t\t\tx = L[i]\n\t\t\tpar[i] = levels[x-1]\n\t\t\tlevels[x] = i+1\n\n\treturn num\n\n\nif __name__ == \"__main__\":\n\t\n\tif len(sys.argv) < 2:\n\t\tprint 'Usage: python', sys.argv[0], '<max_num_nodes> [<max_branching_factor>]'\n\t\tsys.exit(0)\n\t\t\n\tmaxNumNodes = 1 + int(sys.argv[1])\n\tk = maxNumNodes\n\n\tif len(sys.argv) == 3:\n\t\tk = int(sys.argv[2])\n\n\tfor i in range(2, maxNumNodes):\n\t\tx = getNumTrees(i, k)\n\t\tprint 'Number of trees with ', i, ' nodes: ', x\n\t\tif x > 100000:\n\t\t\tprint 'Sorry, that is too many trees to write on file. Aborting now, already written files are ok to use.'\n\t\t\tsys.exit(3)\n\t\t\t\n\t\tadjFile = open('./GammaAdjMatrices/AdjacencyMatrix' + str(i) + '.txt', 'w')\n\t\tgammaFile = open('./GammaAdjMatrices/GammaMatrix' + str(i) + '.txt', 'w')\n\t\t\n\t\tadjFile.write(str(i) + ' ' + str(x) + '\\n\\n')\n\t\tgammaFile.write(str(i) + ' ' + str(x) + '\\n')\n\t\tgetRootedTrees(adjFile, gammaFile, i, k, False)\n\t\t\n\t\tadjFile.close()\n\t\tgammaFile.close()\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_ft_to_cm(ft):\n    return ft * 30.48 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def min_cost(points):\n    points.sort()  # sort the points by their x-coordinate\n    total_cost = 0  # initial cost\n    for i in range(len(points)-1):\n        cost = abs(points[i+1][1] - points[i][1])  # calculate the cost of connecting two successive points\n        total_cost += cost  # add to the total cost\n    return total_cost but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\nfrom tensorflow.keras.preprocessing.text import one_hot\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Embedding, Dense, Dropout, LSTM\n\n# Step 1: Preprocess the data\ninput_data = [\n  {'message': 'This is an important offer - act now!', 'label': 'spam'},\n  {'message': 'You have been chosen to win a prize', 'label': 'spam'},\n  {'message': 'To complete your order, please follow the link below', 'label': 'spam'},\n  {'message': 'See the attached report for details', 'label': 'not_spam'},\n  {'message': 'I will be away for the next few days', 'label': 'not_spam'}\n]\n\n# one-hot encoding\nlabels = [data['label'] for data in input_data]\nlabels_one_hot_encoded = [one_hot(label, 2) for label in labels]\n\n# text encoding\nmessages = [data['message'] for data in input_data]\nmessages_encoded = [one_hot(message, 100) for message in messages]\n\n# padding\nmessages_padded = pad_sequences(messages_encoded, maxlen=128, padding='pre')\n\nlabels_encoded = pad_sequences(labels_one_hot_encoded, maxlen=2, padding='post')\n\n# creating the model\nmodel = Sequential()\nmodel.add(Embedding(input_dim=100, output_dim=128, input_length=messages_padded.shape[1]))\n\nmodel.add(LSTM(128))\nmodel.add(Dense(2, activation='softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nmodel.fit(x=messages_padded, y=labels_encoded, epochs=10, batch_size=32) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# read the books table\ndf = pd.read_sql(\"SELECT * from books\", connection)\n\n# filter for rows with matching author\ndf_filtered = df[df['author'].str.contains(\"Rowling\")]\n\n# print the results\nprint(df_filtered) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import necessary libraries\nimport tensorflow as tf\nfrom tensorflow import keras\nimport dialogflow_v2 as dialogflow\n\n# Create a model to generate responses\nmodel = keras.Sequential([\n keras.layers.InputLayer(input_shape=[1]),\n keras.layers.Dense(units=32, activation=\"relu\"),\n keras.layers.Dense(units=32, activation=\"relu\"),\n keras.layers.Dense(units=1, activation=\"sigmoid\"),\n])\n\n# Compile the model\nmodel.compile(optimizer=\"adam\", loss=\"binary_crossentropy\",\n metrics=[\"accuracy\"])\n\n# Configure the DialogFlow agent\nsession_client = dialogflow.SessionsClient()\nproject_id = \"myproject\"\nsession_id = \"test\"\n\n# Set up an input/output context\ncontexts_client = dialogflow.ContextsClient()\ncontext_path = contexts_client.context_path(project_id, session_id,\n \"userInput\")\n\n# Utilize the model for generating responses\ndef generate_response(response):\n # Input response\n input_response = response\n\n # Predict the response\n prediction = model.predict([input_response])\n predicted_class = int(prediction > 0.5)\n\n # Generate response based on the prediction\n if predicted_class == 1:\n response = \"\"\n else:\n response = \"\"\n\n # Return the response\n return response\n\n# Create the DialogFlow request/response\nrequest = dialogflow.types.TextInput(text=input_response, language_code=\"en-US\")\nresponse = session_client.detect_intent(session=session_path,\n query_input=request)\n\n# Generate a response\nresponse = generate_response(response)\n\n# Respond to the user\nprint (response) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def split_digits(num):\n    '''This function takes an integer of length 5 and return a list of single digits'''\n    result = []\n    while num > 0:\n        result.append(num%10)\n        num = num//10\n    return result[::-1]\n\nnum = int(input('Please enter a number of length 5 digits: '))\n\nif len(str(num)) == 5:\n    print(split_digits(num))\nelse:\n    print('Invalid input!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = 'https://api.example.com/endpoint'\nresponse = requests.get(url)\n\ndata = response.json() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport json\n\nword = input(\"Enter a word: \")\n\nurl = \"https://api.datamuse.com/words?rel_syn=\" + word\n\nresponse = requests.get(url)\n\nif response.status_code == 200:\n json_data = json.loads(response.text)\n synonyms = [item['word'] for item in json_data]\n print(synonyms)\nelse:\n print(\"Something went wrong!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def determine_grade(marks):\n    # Determine the average mark\n    avg = (marks['math'] + marks['history'] + marks['english'])/3\n    \n    # If the average mark is greater than or equal to 90, the student's grade is A \n    if avg >= 90:\n        return 'A'\n    # If the average mark is greater than or equal to 80, the student's grade is B \n    elif avg >= 80:\n        return 'B'\n    # If the average mark is greater than or equal to 70, the student's grade is C \n    elif avg >= 70:\n        return 'C'\n    # If the average mark is greater than or equal to 60, the student's grade is D \n    elif avg >= 60:\n        return 'D'\n    # Anything less than 60 is an F \n    else:\n        return 'F' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from urllib.request import urlopen\nfrom bs4 import BeautifulSoup\n\ndef scrape_wikipedia_page(url):\n    # Retrieve the page\n    html = urlopen(url)\n\n    # Create an instance of the bs4 parser\n    soup = BeautifulSoup(html, 'html.parser')\n\n    # Extract content from the page\n    page_content = soup.find_all('p')\n    page_content_str = ''.join(str(p) for p in page_content)\n\n    return page_content_str\n\npage_content_str = scrape_wikipedia_page('https://en.wikipedia.org/wiki/Machine_learning')\nprint(page_content_str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: total = ProductPrice * Quantity\nprint(f\"Total cost of the order is {total}\")  # Total cost of the order is 60 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_IP():\n    ip = \"\"\n    for i in range(4):\n        ip += str(random.randint(0, 255))\n        if i != 3:\n            ip += \".\"\n    return ip but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for s in strings:\n    print(f'I like to eat {s}!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password():\n    symbols = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(symbols) for i in range(8))\n    return password\n\npwd = generate_password()\nprint(pwd) # 1F(8y3? but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, redirect\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef home():\n    return \"<form action='/save' method='POST'><input type='text' name='email'/><input type='submit\u2019/></form>\"\n\n@app.route(\"/save\", methods=[\"POST\"])\ndef save():\n    email = request.form[\"email\"]\n    # save the email address to your database\n    return redirect(\"/\")\n\nif __name__ == \"__main__\":\n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Customer:\n    def __init__(self, name, age, emailid, phone_number):\n        self.name = name\n        self.age = age\n        self.emailid = emailid\n        self.phone_number = phone_number but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_armstrong_number(num): \n \n    # Calculate the number of digits \n    n = len(str(num)) \n  \n    # Check whether is an armstrong number \n    sum = 0 \n    temp = num \n    while temp > 0: \n        digit = temp % 10\n        sum += digit ** n \n        temp //= 10\n  \n    if num == sum: \n        return True\n    else: \n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(x,y): \n if x == 0: \n \treturn y \n return gcd(y%x, x) \n\n# Driver code\nprint(gcd(x,y)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [x for x in range(0, 51) if x % 3 == 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def LIS(arr): \n    n = len(arr) \n  \n    lis = [1]*n \n  \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n  \n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n    return maximum\n\nprint(LIS([10, 22, 9, 33, 21, 50, 41, 60])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_factor(n):\n    factors = []\n   \n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors\n\nnumber = 600851475143\nprint(get_factor(number)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #  find the longest word\ndef findLongestWord(arr):\n  \n longestWord = \"\"\n \n for word in arr:\n if(len(word) > len(longestWord)):\n longestWord = word\n \n return longestWord\n\n# Driver code\nwords = ['Python', 'JavaScript', 'C++', 'Java', 'Kotlin']\nprint(\"Longest word in the array is \"+ findLongestWord(words)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(\"Hello World!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import hashlib\n\ndef generate_hash(string):\n    hashed_string = hashlib.sha1(string.encode())\n    return hashed_string.hexdigest()[:6]\n\nhashed_string = generate_hash(\"Code Generation Task Instructions\")\nprint(hashed_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_multiple_of_six(num):\n    if num % 6 == 0:\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.stem import WordNetLemmatizer \nlemmatizer = WordNetLemmatizer()\n\n# Define a function for processing the user query\ndef process_message(message):\n    # Split the query into separate words \n    tokens = nltk.word_tokenize(message)\n    \n    # Lemmatize each word \n    tokens = [lemmatizer.lemmatize(token) for token in tokens]\n    \n    # Return the list of lemmatized tokens \n    return tokens\n\n# Define the answer function\ndef answer_query(query):\n    # Process the message\n    tokens = process_message(query)\n    \n    # Check if the query includes the word \"refund\"\n    if 'refund' in tokens:\n        # Return the message \n        return 'Yes, you can get a refund if your product is defective.'\n    \n    # Return the message \n    return 'Sorry, I can\\'t answer that question.' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(nums):\n    for i in range(len(nums)-1):\n        for j in range(0, len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for num in [4,7,11,13]:\n    print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\ndef max_sum_swap(a, b): \n    x = max(a, b) \n    y = min(a, b) \n  \n    # swap the numbers \n    x = x + y \n    y = x - y \n    x = x - y \n  \n    return x + y \n\"\"\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num = int(input(\"Please enter a number: \"))\nprint(\"The result of multiplying your number by 7 is \" + str(num * 7)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(array, value):\n    length = len(array)\n    \n    for i in range(length):\n        if array[i] == value:\n            return i\n            \n    return -1\n\nprint(linear_search(array, 15)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Account:\n    def __init__(self, name, balance):\n        # instance attributes\n        self.name = name\n        self.balance = balance\n    \n    # method to withdraw money from account\n    def withdraw(self, amount):\n        # check if amount is a valid number\n        if not isinstance(amount, (int, float)):\n            raise ValueError('Invalid amount')\n        \n        # check if amount is greater than balance\n        if amount > self.balance:\n            raise ValueError('Insufficient funds')\n        \n        # subtract the amount from the balance\n        self.balance -= amount\n    \n    # method to deposit money to account\n    def deposit(self, amount):\n        # check if amount is a valid number\n        if not isinstance(amount, (int, float)):\n            raise ValueError('Invalid amount')\n        \n        # add the amount to the balance\n        self.balance +=amount\n\n# create an instance of the Account class\nmy_account = Account('John Doe', 100)\n\n# withdraw money from account\nmy_account.withdraw(50)\n\n# deposit money to account\nmy_account.deposit(20)\n\n# print the updated balance\nprint('Account balance:', my_account.balance) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd \n\n# Preparation of data\n# Fetch articles from news sources\n# Create a dataframe from the articles\n# Split into training and test data\n\ndf = pd.DataFrame({\n'Text': ['NASA unveiled the Mars 2020 mission on Wednesday, a rover that will search for traces of ancient Martian life while performing geological studies of the red planet.'],\n'Label': ['technology']\n})\n\ntrain_data, test_data = train_test_split(df, test_size=0.2, random_state=42)\n\n# Create a model using a random forest classifier\n\nmodel = RandomForestClassifier(n_estimators=100)\n\n# Extract features from the articles\n\nvectorizer = TfidfVectorizer(stop_words='english')\nvectorizer.fit(train_data.Text)\n\nX_train = vectorizer.transform(train_data.Text)\nX_test = vectorizer.transform(test_data.Text)\n\n# Train the model\n\nmodel.fit(X_train, train_data.Label)\n\n# Evaluate the model\n\nprint(model.score(X_test, test_data.Label))\n\n# Make a prediction\n\nprediction = model.predict(X_test)\nprint(prediction) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findSum(n): \n\tSum = 0 \n\tn = str(n)\n\tfor i in n: \n\t\tSum = Sum + int(i) \n\treturn Sum\n\n# Driver code  \nn = 123\nprint(findSum(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_string():\n    letters_and_digits = string.ascii_letters + string.digits\n    result = \"\".join(random.choice(letters_and_digits) for i in range(8))\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\n# Define the data points\npoints = np.array([[1, 5], [2, 3], [3, 4]])\n\n# Define the labels\nlabels = np.array([1, -1, -1])\n\n# Define the parameters of the algorithm\nb = 0\nw0 = 0\nw1 = 0\nlearning_rate = 0.001\n\n# Define the training loop\nfor i in range(100):\n pred = w0 + w1 * points[:, 0] > b\n loss = np.mean((labels - pred) ** 2)\n dloss_dw0 = 2 * np.mean(points[:, 0] * (labels - pred))\n dloss_dw1 = 2 * np.mean(points[:, 1] * (labels - pred))\n dloss_db = 2 * np.mean(labels - pred)\n \n # update parameters\n w0 = w0 + learning_rate * dloss_dw0\n w1 = w1 + learning_rate * dloss_dw1\n b = b + learning_rate * dloss_db\n\n# Define the prediction function\ndef predict(x):\n pred = w0 + w1 * x > b\n \n if pred:\n return \"Positive\"\n else:\n return \"Negative\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndata = '{\"name\": \"John\",\"age\": 30,\"items\": [{\"name\": \"pen\",\"price\": 10.5},{\"name\": \"book\",\"price\": 15.75},{\"name\": \"notebook\",\"price\": 12.5}]}'\n\njson_data = json.loads(data)\n\nfor key, val in json_data.items():\n print(f'{key}: {val}')\n\nfor item in json_data['items']:\n for key, val in item.items():\n print(f'{key}: {val}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport matplotlib.pyplot as plt\nimport keras\nfrom keras.datasets import mnist\n\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\n# Normalize our data\nx_train = x_train.astype('float32') / 255\nx_test = x_test.astype('float32') / 255\n\n# Reshape image data\nx_train = x_train.reshape((x_train.shape[0], 28, 28, 1))\nx_test = x_test.reshape((x_test.shape[0], 28, 28, 1))\n\n# Convert class vectors to binary class matrices\ny_train = keras.utils.to_categorical(y_train, 10)\ny_test = keras.utils.to_categorical(y_test, 10)\n\n# Create our neural network\nmodel = keras.Sequential([\n keras.layers.Conv2D(32, \n  kernel_size=(3, 3),\n  activation='relu',\n  input_shape=(28, 28, 1)\n ),\n keras.layers.MaxPooling2D(pool_size=(2, 2)),\n keras.layers.Conv2D(64,\n  kernel_size=(3, 3),\n  activation='relu'\n ),\n keras.layers.MaxPooling2D(pool_size=(2, 2)),\n keras.layers.Flatten(),\n keras.layers.Dense(128, activation='relu'),\n keras.layers.Dense(10, activation='softmax')\n])\nmodel.compile(\n optimizer='adam',\n loss=keras.losses.categorical_crossentropy,\n metrics=['accuracy']\n)\n\n# Fit our model\nmodel.fit(x_train, y_train, batch_size=64, epochs=2, verbose=1)\n\n# Evaluate our model\nscore = model.evaluate(x_test, y_test, verbose=0)\n\n# Print our model's accuracy\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class BinarySearch:\n    def __init__(self, arr):\n        self.arr = arr\n\n    def search(self, x):\n        low = 0\n        high = len(self.arr) - 1\n        while low <= high: \n            mid = (high + low) // 2   \n  \n            # Check if x is present at mid \n            if self.arr[mid] < x: \n                low = mid + 1\n  \n            # If x is greater, ignore left half \n            elif self.arr[mid] > x: \n                high = mid - 1\n  \n            # If x is smaller, ignore right half \n            else: \n                return mid \n  \n        # If we reach here, then the element was not present \n        return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os \nfrom multiprocessing import Process\n  \ndef print_pid(): \n try: \n # Prints process id \n print(\"Process ID is : \", os.getpid()) \n except: \n print(\"Error occured\") \n  \nif __name__ == \"__main__\": \n # Create process \n p1 = Process(target=print_pid) \n p2 = Process(target=print_pid) \n p3 = Process(target=print_pid) \n  \n # Start process \n p1.start() \n p2.start() \n p3.start() \n  \n # Wait till process finish execution \n p1.join() \n p2.join() \n p3.join() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import csv\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com/'\n\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ncsv_file = open('data.csv', 'w')\ncsv_writer = csv.writer(csv_file)\ncsv_writer.writerow(['title', 'description'])\n\nfor article in soup.find_all('article'):\n title = article.h2.a.text\n description = article.find('div', class_='entry-content').p.text\n csv_writer.writerow([title, description])\n\ncsv_file.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_random_string(length):\n    letters = string.ascii_lowercase\n    result_str = ''.join(random.choice(letters) for i in range(length))\n     \n    return result_str\n\nrandom_string = generate_random_string(8)\nprint(random_string) # Outputs 'yezrtsyz' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class StudentRecord:\n    def __init__(self, name, age, gender, gpa):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.gpa = gpa\n    def get_name(self):\n        return self.name\n    def get_age(self):\n        return self.age\n    def get_gender(self):\n        return self.gender\n    def get_gpa(self):\n        return self.gpa but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: char_dict = {}\n\nfor string in string_list:\n for char in string:\n if char in char_dict:\n char_dict[char] += 1\n else:\n char_dict[char] = 1\n\nprint(char_dict)\n\n# Output:\n# {'a': 3, 'p': 2, 'l': 1, 'e': 1, 'b': 1, 'n': 2, 'c': 1, 'r': 2, 'o': 1, 't': 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\nfrom nltk import tokenize\n\ninput_text = 'string with several words'\n\ntokens = tokenize.word_tokenize(input_text)\nfor token in tokens:\n  if re.search('\\w+', token):\n      print(token) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_matrices(matrix1, matrix2):\n    results = [[0, 0, 0],\n               [0, 0, 0],\n               [0, 0, 0]]\n\n    for i in range(len(matrix1)):\n        for j in range(len(matrix1[0])):\n            results[i][j] = matrix1[i][j] + matrix2[i][j]\n\n    return results\n\nresult = add_matrices(matrix1, matrix2)\nprint(result) # output: [[11, 13, 15], [17, 19, 21], [23, 25, 27]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Fibonacci:\n def __init__(self, n):\n  self.n = n\n  self.a = 0\n  self.b = 1\n \n def __iter__(self): \n  return self\n \n def __next__(self): \n  if self.a <= self.n:\n   temp = self.a\n   self.a, self.b = self.b, self.a + self.b \n   return temp \n  else:\n  raise StopIteration but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: names = input().split()\n\nfirst_name = names[0]\nlast_name = names[-1]\n\nprint('First Name:', first_name)\nprint('Last Name:', last_name) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Read the data\ndata = pd.read_csv('cars.csv')\n\n# Split the data in features (X) and labels (y)\nX = data.drop('price', axis=1)\ny = data['price']\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) \n\n# Train the model\nmodel = RandomForestRegressor()\nmodel.fit(X_train, y_train)\n\n# Predict the price of the cars in the test set\ny_pred = model.predict(X_test)\n\n# Compare the predictions with the actual values\nfor prediction, actual in zip(y_pred, y_test):\n print(prediction, actual) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Load required libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Load the dataset\ndata = pd.read_csv(\"dataset.csv\")\n\n# Extract features and target variable\nX = data.drop('output',axis=1)\ny = data.output\n\n# Split into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train the model\nmodel = RandomForestRegressor(n_estimators=100, max_depth=10, random_state=42).fit(X_train, y_train)\n\n# Get predictions\ny_pred = model.predict(X_test)\n\n# Evaluate the model\nfrom sklearn.metrics import mean_squared_error\nmse = mean_squared_error(y_test,y_pred)\n\n# Return results\nreturn mse but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: counter = 0\nwhile counter < 10:\n    print(counter)\n    if counter == 5:\n        break\n    counter = counter + 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport numpy as np\n\n# Define the cost function\ndef cost(x):\n return x**2\n \n# Initialize the population\npopulation_size = 20\npopulation = [random.randint(0, 100) for _ in range(population_size)]\n\n# Perform the optimization\nmax_generation = 100\nfor _ in range(max_generation):\n # Calculate the fitness\n fitness = [cost(x) for x in population]\n \n # Select the fittest individuals\n fittest_individuals = np.argsort(fitness)[::-1][:int(population_size/2)]\n \n # Generate the new population\n new_population = []\n for individual in fittest_individuals:\n  new_population.append(population[individual])\n  new_population.append(population[individual] + random.randint(-5, 5))\n population = new_population\n \n# Print the result\nprint(population) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def removeDigits(x):\n    str_x = str(x)\n    without_digits = int(\"\".join([i for i in str_x if not i.isdigit()]))\n    return without_digits\n\nx = 356\nprint(removeDigits(x)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import gym\nimport numpy as np\n\n# Set up the environment\nenv = gym.make('CartPole-v0')\n\n# Set hyperparameters \nlearning_rate = 0.01\nn_episodes = 1000\nmax_steps_per_episode = 1000\n\n# Initialize the q-table\nq_table = np.zeros([env.observation_space.n, env.action_space.n])\n\n# Reinforce the agent\nfor episode in range(n_episodes):\n # Reset the environment\n observation = env.reset()\n\n # Initialize reward\n total_reward = 0\n\n # Iterate over the episode\n for t in range(max_steps_per_episode):\n # Sample action\n action = np.argmax(q_table[observation, :])\n\n # Take an action\n observation_next, reward, done, info = env.step(action)\n\n # Update the q-table\n q_table[observation, action] = \\\n q_table[observation, action] + \\\n learning_rate * (reward + np.max(q_table[observation_next, :]) \\\n - q_table[observation, action])\n\n # Update the total reward and the observation\n total_reward += reward\n observation = observation_next\n\n # End the episode if done\n if done:\n break\n\n# Print out the total reward\nprint('Total Reward:', total_reward) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Example Python program for finding the area of a circle \n# Adjust for compatibility with Python3 and above \nimport sys \n\nPI = 3.14\n\nif sys.version_info.major >= 3:\n  long = int \n\ndef calculateArea(radius): \n    return PI * radius * radius; \n  \nprint(\"Area is %.6f\" % calculateArea(long(5))); but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import smtplib\n\nsender_email = \"sender@gmail.com\"\nreceiver_email = \"receiver@example.com\"\npassword = 'password'\n\nmessage = \"\"\"\\\nSubject: Hi There\n\nThis is an email to test the Gmail SMTP service.\n\"\"\"\n\nserver = smtplib.SMTP('smtp.gmail.com', 587)\nserver.ehlo()\nserver.starttls()\n\nserver.login(sender_email, password)\nserver.sendmail(sender_email, receiver_email, message)\n\nserver.quit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(n): \n        for i in range(2,int(n ** 0.5)+1):\n            if (n % i) == 0:\n                return False\n        return True\n\ndef print_prime_numbers_up_to_n(n):\n    for num in range(2, n + 1): \n        if is_prime(num):\n            print(num) \n\nprint_prime_numbers_up_to_n(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def loop_list(list):\n    for i in list:\n        if i > 5:\n            print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Foo:\n    def __init__(self, name, num, array):\n        self.name = name\n        self.num = num\n        self.array = array but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def spiral_matrix(num_rows, num_columns):\n    matrix = [[0] * num_columns for row in range(num_rows)]\n\n    stride = [(1, 0), (0, 1), (-1, 0), (0, -1)]\n    direction = 0\n    x, y = 0, 0\n    val = 1\n    while 0 <= x < num_rows and 0 <= y < num_columns:\n        matrix[x][y] = val\n        x += stride[direction][0]\n        y += stride[direction][1]\n        if x < 0 or y < 0 or x == num_rows or y == num_columns or matrix[x][y] != 0:\n            x -= stride[direction][0]\n            y -= stride[direction][1]\n            direction += 1\n            if direction == len(stride):\n                direction = 0\n            x += stride[direction][0]\n            y += stride[direction][1]\n        val += 1\n    return matrix but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.linear_model import LogisticRegression\n\n# Load the dataset\nX = ...\ny = ...\n\n# Initialize model\nmodel = LogisticRegression()\n\n# Fit the model\nmodel.fit(X, y)\n\n# Evaluate the model\nmodel.score(X, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def arrayMultiplied(arr):\n resultArr = []\n for index, innerArr in enumerate(arr):\n  resultArr.append([x * index for x in innerArr])\n return resultArr\n\nprint(arrayMultiplied([[1, 2, 3], [4, 5, 6]]))\n# Output: [[0, 2, 6], [0, 5, 12]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Vehicle:\n    \"\"\"Class representing a vehicle.\"\"\"\n\n    def __init__(self, make, model, year, color):\n        \"\"\"Initialize vehicle object with its attributes.\"\"\"\n        self.make = make\n        self.model = model\n        self.year = year\n        self.color = color but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_numbers():\n for i in range(1, 6):\n  print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(arr):\n    for i in range(len(arr)):\n        for j in range(len(arr) - 1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\nif __name__ == '__main__':\n    arr = [2,3,1,4,5]\n    print(\"Optimized array:\", bubble_sort(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask \nimport requests \n\napp = Flask(__name__)\n\n@app.route('/zipcodes/<city>', methods=['GET'])\ndef get_zipcodes_for_city(city: str):\n  base_url = 'INSERT_API_ENDPOINT_HERE'\n  r = requests.get(base_url + city) \n  response_data = r.json()\n  zip_codes = response_data['data']\n  return {'zip_codes': zip_codes}\n  \nif __name__ == '__main__':\n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import hashlib\n\ns = 'abc'.encode(\"utf-8\")\n\nhash_object = hashlib.sha256(s)\nhex_dig = hash_object.hexdigest()\nprint(hex_dig) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random():\n    return random.random() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_longest_string(names):\n    longest_string = ''\n    for name in names:\n        if len(name) > len(longest_string):\n            longest_string = name\n    return longest_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_password():\n letter_lowercase = string.ascii_lowercase\n letter_uppercase = string.ascii_uppercase\n numbers = string.digits\n symbols = string.punctuation\n all_chars = letter_lowercase + letter_uppercase + numbers + symbols\n \n password = \"\"\n \n for i in range(2):\n     password += random.choice(letter_lowercase)\n     password += random.choice(letter_uppercase)\n     password += random.choice(numbers)\n     password += random.choice(symbols)\n \n for i in range(2):\n     password += random.choice(all_chars)\n \n password_list = list(password)\n random.shuffle(password_list)\n password = ''.join(password_list)\n \n return password but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n    def __init__(self, name, age, occupation):\n        self.name = name\n        self.age = age\n        self.occupation = occupation\n  \n    def get_info(self):\n        print(\"Name: \"+self.name)\n        print(\"Age: \"+str(self.age))\n        print(\"Occupation: \"+self.occupation) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [1, 2, 3, 4, 5]\n\nfor num in list:\n    print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nmoves = [\"Rock\", \"Paper\", \"Scissors\"]\n\nplayer_move = input(\"Please enter your move: Rock, Paper, Scissors \\n\")\n\ncomputer_random = random.randint(0,2)\ncomputer_move = moves[computer_random]\n\nprint(\"Computer plays:\" + computer_move)\n\nif player_move == \"Rock\" and computer_move == \"Scissors\" or player_move == \"Paper\" and computer_move == \"Rock\" or player_move == \"Scissors\" and computer_move == \"Paper\":\n print(\"You Win!\")\nelif player_move == computer_move:\n print(\"It's a tie!\")\nelse:\n print(\"You Lose!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def median(data):\n    n = len(data)\n    if n % 2 == 0:\n        return (data[n//2] + data[(n//2)-1])/2\n    else:\n        return data[n//2]\n\ndata = [5, 6, 7, 8, 9]\nmedian = median(data)\nprint('Median:', median) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_average(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total / len(nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def divide(a, b, c=1, d=1):\n    return (a / b) / (c / d) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_books(books):\n    # Use a dictionary to store book title and corresponding genres\n    titles_and_genres = {\n        'The Catcher in the Rye': 'Fiction',\n        'To Kill a Mockingbird': 'Novel',\n        'Pride and Prejudice': 'Romance',\n        'The Hunger Games': 'Young Adult Fiction'\n    }\n\n    result = [] \n    for book in books:\n        title = book[0]\n        author = book[1]\n        genre = titles_and_genres[title]\n        result.append({'title': title, 'author': author, 'genre': genre})\n    return result \n\nbooks = [('The Catcher in the Rye', 'J.D. Salinger'), \n         ('To Kill a Mockingbird', 'Harper Lee'),\n         ('Pride and Prejudice', 'Jane Austen'),\n         ('The Hunger Games', 'Suzanne Collins')]\nprint(classify_books(books)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add(x, y):\n\treturn x+y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, jsonify\nimport MySQLdb\n\napp = Flask(__name__)\n\ndb = MySQLdb.connect(db='mydb', user='root', passwd='', host='localhost')\n\n@app.route('/records', methods=['GET'])\ndef get_records():\n cur = db.cursor()\n sql = 'SELECT * from records'\n cur.execute(sql)\n result = cur.fetchall()\n\n records = []\n for row in result:\n records.append(\n {\n 'id': row[0],\n 'name': row[1],\n 'age': row[2]\n })\n\n return jsonify({'records': records})\n\n@app.route('/records', methods=['POST'])\ndef create_record():\n name = request.form['name']\n age = request.form['age']\n\n cur = db.cursor()\n sql = (f\"INSERT INTO records (name, age) VALUES('{name}', {age})\")\n cur.execute(sql)\n db.commit()\n return jsonify(\n {\n 'message': 'Record successfully created!'\n }\n )\n\n@app.route('/records/<int:id>', methods=['PUT'])\ndef update_record(id):\n name = request.form['name']\n age = request.form['age']\n\n cur = db.cursor()\n sql = (\n f\"UPDATE records SET name = '{name}', age = {age} WHERE id={id}\")\n cur.execute(sql)\n db.commit()\n return jsonify(\n {\n 'message': 'Record successfully updated!'\n }\n )\n\n@app.route('/records/<int:id>', methods=['DELETE'])\ndef delete_record(id):\n cur = db.cursor()\n sql = (f\"DELETE FROM records WHERE id={id}\")\n cur.execute(sql)\n db.commit()\n return jsonify(\n {\n 'message': 'Record successfully deleted!'\n }\n )\n\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\nimport pandas as pd\n \ndef automated_strategy(data, window1, window2):\n    # Calculating SMA\n    short_rolling = data.rolling(window=window1).mean()\n    long_rolling = data.rolling(window=window2).mean()\n \n    # Creating signals\n    data['short_mavg'] = short_rolling\n    data['long_mavg'] = long_rolling\n    data['signal'] = 0.0\n    data['signal'][window1:] = np.where(data['short_mavg'][window1:] \n                        > data['long_mavg'][window1:], 1.0, 0.0)   \n \n    # Generating trading orders\n    data['positions'] = data['signal'].diff()\n \n    # Initializing the plot figure\n    fig = plt.figure()\n \n     # Plotting SMA\n    ax1 = fig.add_subplot(111, ylabel='Price in $')\n    data[['Close', 'short_mavg', 'long_mavg']].plot(ax=ax1, lw=2.)\n \n    # Plotting the trading orders\n    ax2 = fig.add_subplot(111, ylabel='Order', yticklabels=[])\n    data['positions'].plot(ax=ax2, lw=2., color='r')\n \n    # Plotting the trading orders\n    ax3 = fig.add_subplot(111, ylabel='P&L', yticklabels=[])\n    data['p&l'].plot(ax=ax3, lw=2., color='g')\n \n    # Show the plot\n    plt.show() but is not the same. just give one example and only return the code."}
