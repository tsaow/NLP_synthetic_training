{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreating an Artificial Neural Network in Python to classify flower colors from a given input \n\"\"\"\n\nimport numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\n\n# Create the input data and labels\nX_train = np.array([\n    [0],\n    [1],\n    [2],\n    [3],\n    [4],\n    [5],\n    [6]\n    ])\n\ny_train = np.array([\n    [0, 0, 0, 0, 1], # Blue\n    [0, 0, 0, 1, 0], # Green\n    [0, 0, 1, 0, 0], # Yellow\n    [1, 0, 0, 0, 0], # Red\n    [0, 1, 0, 0, 0], # Orange\n    [0, 0, 0, 0, 0], # Purple\n    [0, 0, 0, 1, 0]  # Green\n    ])\n\n# Create the model\nmodel = Sequential()\nmodel.add(Dense(20, activation='relu', input_shape=(1,)))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(20, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(20, activation='relu'))\nmodel.add(Dense(5, activation='softmax'))\n\n# Compile and run the model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(X_train, y_train, epochs=50, batch_size=1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd \nimport numpy as np \nimport tensorflow as tf \nfrom tensorflow import keras \nfrom tensorflow.keras import layers \n\n# read in data\ndata = pd.read_csv('iris.data')\n\n# labels \nlabels = data['species']\n\n# features \nfeatures = data.drop('species', axis=1)\n\n# normalize features\nfeatures = (features - features.mean()) / features.std()\n\n# create model\nmodel = keras.Sequential()\nmodel.add(layers.Dense(units=4, activation='relu', input_shape=(4,)))\nmodel.add(layers.Dense(units=10, activation='relu'))\nmodel.add(layers.Dense(units=3, activation='softmax'))\n\n# compile model \nmodel.compile(optimizer=tf.keras.optimizers.Adam(),\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# train/fit model\nmodel.fit(features, labels, epochs=100, validation_split=0.2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def nth_fibonacci_number(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    a = 0\n    b = 1\n    for i in range(2, n+1):\n        c = a + b\n        a = b\n        b = c\n    \n    return c but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_matrix(rows, cols):\n   matrix = [] \n   for i in range(rows): \n       row = []\n       for j in range(cols): \n           row.append(0)\n       matrix.append(row)\n   return matrix\n\n# Example\nm = generate_matrix(3, 4)\nprint(m)  # Output: [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_sum_close_to_zero(arr):\n    min_sum = float('inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] + arr[j]) < abs(min_sum):\n                min_sum = arr[i] + arr[j]\n    return min_sum\n\nprint(find_sum_close_to_zero(arr)) # -7 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def prerequisitesCourses(courses):\n    requiredCourses = []\n    for course in courses:\n        if course[1] != \"none\":\n            requiredCourses.append(course[1])\n    return requiredCourses but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n  \n# Driver Program \nprint(Fibonacci(8)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: input_string = \"ABC 123 XYZ 456\"\noutput_string = \"\"\n\nfor char in input_string:\n    if char.isalpha():\n        output_string += char.lower()\n    else:\n        output_string += char\n\nprint(output_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \nfrom bs4 import BeautifulSoup \n\nURL = \"INSERT_NEWS_WEBSITE_URL_HERE\"\nr = requests.get(URL) \n\nsoup = BeautifulSoup(r.content, 'html5lib') \n\nheadlines = soup.findAll('h2', attrs = {'class': 'entry-title'})\nfor headline in headlines:\n print(headline.get_text())\n\nsummaries = soup.findAll('div', attrs = {'class': 'entry-summary'})\nfor summary in summaries:\n print(summary.get_text()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\ndef generate_data(n_samples=1000):\n    # Generate 5 features randomly drawn from a normal distribution\n    features = np.random.randn(n_samples, 5)\n\n    # Generate labels\n    labels = np.zeros(n_samples)\n\n    return (features, labels) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_values(dictionary):\n    return [value for key, value in dictionary.items() if value > 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_compare(str1, str2): \n    if len(str1) > len(str2):\n        return \"str1 is longer\"\n    elif len(str1) < len(str2):\n        return \"str2 is longer\"\n    else:\n        if(str1 == str2):\n            return \"strings are equal\"\n        else:\n            return \"strings are different\"\n\nprint(string_compare(\"Hello World\", \"Bye World\")) # Output: str1 is longer but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def hcf(x, y):\n  if x > y:\n    smaller = y\n  else:\n    smaller = x\n  for i in range(1, smaller+1):\n    if((x % i == 0) and (y % i == 0)):\n      hcf = i\n  return hcf\n\nnum1 = int(input(\"Enter first number: \"))\nnum2 = int(input(\"Enter second number: \"))\n\nprint(\"The Highest Common Factor is\", hcf(num1, num2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\ndef Levenshtein_distance(str1, str2): \n    n = len(str1)\n    m = len(str2)\n    \n    # create a matrix \n    dp = [[0 for x in range(m + 1)] for x in range(n + 1)] \n  \n    for i in range(n + 1): \n        for j in range(m + 1): \n  \n            # first string is empty \n            if i == 0: \n                dp[i][j] = j\n  \n            # second string is empty \n            elif j == 0: \n                dp[i][j] = i\n  \n            #both strings are non-empty\n            elif str1[i - 1] == str2[j - 1]: \n                dp[i][j] = dp[i - 1][j - 1] \n  \n            # strings are different\n            else: \n                dp[i][j] = 1 + min(dp[i][j - 1],    #Insert \n                                   dp[i - 1][j],    #Remove \n                                   dp[i - 1][j - 1])    #Replace \n  \n    return dp[n][m] \n  \n# Driver Code \nstr1 = \"John\"\nstr2 = \"Jane\"\n\nprint(Levenshtein_distance(str1, str2))\n\"\"\"\n\n5. Output:\n1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_increasing_subarray(arr): \n\tsize = len(arr) \n\tmax_len = 1\n\t\n\tfor index in range(size): \n\t\tmax_len_ending_here = 1\n\t\tj = index + 1\n\t\t\n\t\twhile j < size: \n\t\t\tif arr[j] > arr[j - 1]: \n\t\t\t\tmax_len_ending_here += 1\n\t\t\tj += 1\n\t\t\t\n\t\tif max_len_ending_here > max_len: \n\t\t\tmax_len = max_len_ending_here \n\n\treturn max_len\n\narr = [1, 3, -2, 5, 8, -3, 4, 6] \nresult = longest_increasing_subarray(arr)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: odd_numbers = [x for x in range(0, 11) if x % 2 != 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'\ndb = SQLAlchemy(app)\n\nclass User(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n username = db.Column(db.String(80), unique=True, nullable=False)\n email = db.Column(db.String(120), unique=True, nullable=False)\n first_name = db.Column(db.String(80))\n last_name = db.Column(db.String(80))\n password = db.Column(db.String(120))\n\n def __repr__(self):\n return '<User %r>' % self.username\n\ndb.create_all()\n\n@app.route('/register', methods=['POST'])\ndef register():\n data = request.get_json()\n\nusername = data['username']\nemail = data['email']\nfirst_name = data['first_name']\nlast_name = data['last_name']\npassword = data['password']\n\nnew_user = User(username=username, email=email, first_name=first_name, last_name=last_name, password=password)\ndb.session.add(new_user)\ndb.session.commit()\n\nreturn 'User %s is created.' % username\n\nif __name__ == '__main__':\n app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef isUrl(string): \n    urlPattern = re.compile(r'https?://(www\\.)?(\\w+)(\\.\\w+)') \n    match = urlPattern.search(string) \n    return bool(match) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_words(sentence):\n    words = sentence.split(' ')\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)\n\nsentence = \"hello world how are you\"\nprint(reverse_words(sentence)) # output - you are how world hello but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Import necessary libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Prepare a dataset\ndataset = [['Turn on the light', 'Light'], ['Turn off the fan', 'Fan'], ['Activate the AC', 'AC']]\ndataframe = pd.DataFrame(dataset, columns=['Message', 'Category'])\n\n# Split the data into features and labels\nX = dataframe.drop(columns=['Category'])\ny = dataframe['Category']\n\n# Separate training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=1)\n\n# Create a model and fit it\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n\n# Test the model\ny_pred = model.predict(X_test)\nprint(y_pred) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n \ndef extract_urls(input_str): \n    urls = re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', input_str) \n    return urls\n \ninput_str = \"The links mentioned in the article are: https://www.example.com/ and http://www.example.com/mypage\"\nprint(extract_urls(input_str)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from cryptography.fernet import Fernet\n\n# Generate a new fernet key\nkey = Fernet.generate_key()\nf = Fernet(key)\n\n# Encrypt the message\nencrypted_message = f.encrypt(b\"This is a secret message\")\n\n# Decrypt the encrypted message\ndecrypted_message = f.decrypt(encrypted_message)\n\nprint(encrypted_message)\nprint(decrypted_message) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from nltk.tokenize import word_tokenize\nfrom nltk import pos_tag\n\nwords = ['stiff', 'particular', 'hear', 'running', 'better', 'help']\ntokenized_words = word_tokenize(' '.join(words))\nresults = pos_tag(tokenized_words)\n\nnouns = [word for word, tag in results if tag.startswith('N')]\nverbs = [word for word, tag in results if tag.startswith('V')]\nadjectives = [word for word, tag in results if tag.startswith('J')]\n\nprint('Nouns:', nouns)\nprint('Verbs:', verbs)\nprint('Adjectives:', adjectives) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create two sets\nset1 = {1,2,3,4,5}\nset2 = {3,4,5,6,7}\n\n# Find the intersection\nintersection = set1 & set2\n\n# Print the result\nprint(intersection) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_increase_decrease(arr):\n    if arr[0] < arr[1]:\n        for i in range(1, len(arr) - 1):\n            if arr[i] > arr[i + 1]:\n                return \"decreasing\"\n        return \"increasing\"\n    elif arr[0] > arr[1]:\n        for i in range(1, len(arr) - 1):\n            if arr[i] < arr[i + 1]:\n                return \"increasing\"\n        return \"decreasing\"\n    else:\n        for i in range(1, len(arr) - 1):\n            if arr[i] != arr[i + 1]:\n                return \"discontinuous\"\n        return \"duceasing\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_search(arr, value):\n  low = 0\n  high = len(arr) - 1\n  found = False\n  \n  while low <= high and not found:\n    mid = low + (high - low) // 2\n    if arr[mid] == value:\n      found = True\n    elif arr[mid] < value:\n      low = mid + 1\n    else:\n      high = mid - 1\n  \n  if found:\n    return mid\n  else:\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def permutation(lst): \n  \n    # If lst is empty then there are no permutations \n    if len(lst) == 0: \n        return [] \n  \n    # If there is only one element in lst then, only \n    # one permuatation is possible \n    if len(lst) == 1: \n        return [lst] \n  \n    # Find the permutations for lst if there are \n    # more than 1 characters \n  \n    l = [] # empty list that will store current permutation \n  \n    # Iterate the input(lst) and calculate the permutation \n    for i in range(len(lst)): \n       m = lst[i] \n  \n       # Extract lst[i] or m from the list.  remLst is \n       # remaining list \n       remLst = lst[:i] + lst[i+1:] \n  \n       # Generating all permutations where m is first \n       # element \n       for p in permutation(remLst): \n           l.append([m] + p) \n    return l \n  \n# Driver program to test above function \ndata = list('123') \nfor p in permutation(data): \n    print (p) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def str_to_int(string):\n    return int(string)\n  \ndef int_to_str(integer):\n    return str(integer) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Backend \nPython/Flask\n\n# Database \nMySQL \n\n# Endpoints\nCreateUser: Creates a new user with username, password, and profile details \nLogin: Authenticates and logs in an existing user \nSearchBook: Searches for books by title or author \nAddFavorite: Adds a book to the user's favorites list \nRateBook: Rates a book from 1 to 5 stars. \nGetFavorites: Fetches the user's list of favorite books \nGetUserRating: Fetches a user's rating for a particular book \nGetProfile: Fetches profile information for a particular user \n\n# Frontend\nVue.js\n\n# Components\nNavigation: The header navigation bar\nSearch: The search bar component where users can look up books \nFavoriteList: The list of books saved to the favorite list \nRatingDisplay: A component that displays a user's rating for a particular book \nUserProfile: A component that displays the profile information for a particular user. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for num in range(1,11):\n    print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: x = 1\nprint(\"x is\", (\"0\" if x == 0 else \"1\" if x == 1 else \"not 0 or 1\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for word in sentence.split():\n    if word[0].lower() in 'aeiou':\n        print(word) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import csv\n\nsummary = {}\n\nwith open('customer_data.csv', mode='r') as csv_file:\n csv_reader = csv.DictReader(csv_file)\n line_count = 0\n\nfor row in csv_reader:\n if row['user_id'] not in summary:\n summary[row['user_id']] = {\n 'purchase_category': set(),\n 'total_amount': 0\n}\n\nsummary[row['user_id']]['purchase_category'].add(row['purchase_category'])\nsummary[row['user_id']]['total_amount'] += \\\nfloat(row['purchase_amount'])\n\nline_count += 1\n\nfor key, value in summary.items():\n print(f\"Customer {key} has purchased items in the following categories: \\\n{', '.join(value['purchase_category'])} with a total amount of \\\n${value['total_amount']:.2f}.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nImplementing the QuickSort Algorithm in Python\n\"\"\"\n\ndef partition(arr, low, high):\n    i = (low-1)     # index of smaller element\n    pivot = arr[high]     # pivot\n \n    for j in range(low, high):\n        # If current element is smaller than the pivot\n        if arr[j] < pivot:\n\n            # increment index of smaller element\n            i = i+1\n            arr[i], arr[j] = arr[j], arr[i]\n \n    arr[i+1], arr[high] = arr[high], arr[i+1]\n    return (i+1)\n\ndef quickSort(arr, low, high):\n    if low < high:\n        # The partition index is obtained\n        pi = partition(arr, low, high)\n        # Separately sort elements before\n        # partition and after partition\n        quickSort(arr, low, pi-1)\n        quickSort(arr, pi+1, high)\n    \n# Driver Code\narr = [10, 7, 8, 9, 1, 5]\nn = len(arr)\nquickSort(arr,0,n-1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Initialize sum\nsum = 0\n\n# Use a for loop to iterate over numbers\nfor num in range(1, 7):\n    sum = sum + num\n\n# Print result\nprint(\"The sum of the first six numbers is:\", sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = ['abc', '123', '345']\n\nif element in my_list:\n    my_list.remove(element) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_strings = ['ant', 'bar', 'cat', 'dog', 'eel']\n\n# using list comprehension\nfiltered_list = [x for x in list_strings if 'a' in x]\n \nprint(filtered_list)\n# output: ['ant', 'bar', 'cat'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n    \ndef display_nth_node(head, n):\n    index = 0\n    current_node = head\n    while current_node and index<n:\n        index += 1\n        current_node = current_node.next\n    if current_node is None:\n        return None\n    else:\n        return current_node.val\n\nhead = ListNode(5)\ndisplayed_node = display_nth_node(head, 2)\nprint(displayed_node) # None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_characters(s, c):\n count = 0\n for ch in s:\n  if ch == c:\n   count += 1\n return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: mylist = [2, 3, 4, 5, 6, 7, 8]\n\nodd_list = []\nfor num in mylist:\n    if num % 2 != 0:\n        odd_list.append(num)\n\nprint(odd_list) #[3, 5, 7] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://en.wikipedia.org/wiki/Machine_learning'\n\n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get(url).text\n\n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n# Print the title of the web page\nprint(\"Title:\", soup.title.string)\n\n# Find the first paragraph\nfirst_paragraph = soup.find('p').text\nprint(\"First paragraph:\", first_paragraph) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: alphabets = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Load the data\nemails = pd.read_csv('emails.csv')\nX = emails['text']\ny = emails['label']\n\n# Create a CountVectorizer and fit it to our dataset\nvectorizer = CountVectorizer()\nX_vector = vectorizer.fit_transform(X)\n\n# Initialize our Multinomial Naive Bayes model and fit it to our dataset\nmodel = MultinomialNB().fit(X_vector, y)\n\n# Make predictions based on our model\npredictions = model.predict(X_vector)\n\n# Check the accuracy\naccuracy = np.mean(predictions == y)\nprint('Model accuracy is {}'.format(accuracy)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef gen_random_str():\n # generate a random string\n random_str = ''.join([random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789') for i in range(10)])\n \n # print the string\n print(random_str)\n\nif __name__ == '__main__':\n gen_random_str() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculateCost(quantity, prices):\n    cost = 0\n    for item in quantity:\n        cost += quantity[item] * prices[item]\n    return cost\n\nquantity = {'burger': 2, 'fries': 3, 'soda': 2}\nprices = {'burger': 5, 'fries': 2, 'soda': 1}\n\nresult = calculateCost(quantity, prices)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generateFibonacci(numOfElements):\n sequence = []\n a = 0\n b = 1\n for i in range(numOfElements):\n sequence.append(a)\n c = a + b \n a = b\n b = c\n return sequence\n\nprint(generateFibonacci(10))\n\n#output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: text = \"Today it is a beautiful day.\"\nwords = text.split()\nprint(\"Number of words in the given text:\", len(words)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n \nlabels = list(responses.keys())\nvalues = list(responses.values())\ncolors = ['#F08080', '#F8A458', '#9BC808', '#000080']\n \nplt.pie(values, labels = labels, colors = colors, autopct='%1.2f%%')\nplt.title('Favorite Fruits')\nplt.axis('equal')\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def verify_input(user_input):\n    # Define the accepted characters\n    allowed_chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0987654321_\"\n    for char in user_input:\n        if char not in allowed_chars:\n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Program to print the Fibonacci numbers up to n\n\n# Function to return the nth Fibonacci number\ndef fibonacci(n):\n # Base case\n if n == 0:\n  return 0\n elif n == 1 or n == 2:\n  return 1\n else:\n  return fibonacci(n-1) + fibonacci(n-2)\n \n# Main function\nnum = int(input(\"Enter a number: \"))\nfor i in range(num + 1):\n print(fibonacci(i)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import gpt_2_simple as gpt2\n\n# Load the GPT-2 model\nsess = gpt2.start_tf_sess()\ngpt2.load_gpt2(sess, run_name='run1')\n\n# Generate a response text\ngenerated_text = gpt2.generate(sess,\n temperature=0.7,\n prefix=\"I'm feeling sad.\",\n length=30,\n return_as_list=True\n)[0]\n\n# Print the response\nprint(generated_text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.tokenize import sent_tokenize\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\n\n#list of sample emails \nemails = [\n 'Yes, I would like a new laptop.',\n 'No, I don't need one.'\n]\n\n#list of categories \nemail_categories = ['request', 'response']\n\nstop_words = stopwords.words('english')\n\nall_words = []\n\nfor email in emails:\n email_words = word_tokenize(email)\n email_words = [word for word in email_words if word not in stop_words]\n all_words.extend(email_words)\n\nword_features = nltk.FreqDist(all_words)\nword_features = list(word_features.keys())\n\ndef getFeatures(email):\n     words = word_tokenize(email)\n     features = {}\n     for w in word_features:\n         features[w] = (w in words)\n\nfeaturesets = [(getFeatures(email), category) for (email, category) in zip(emails, email_categories)] \ntrainSet = featuresets[:1]\ntestSet =  featuresets[1:]\n\nclassifier = nltk.NaiveBayesClassifier.train(trainSet) \n\nfor i in testSet:\n print(\"Actual: \"+i[1]+ \" Predicted: \"+classifier.classify(i[0])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_prime_numbers(n):\n    prime_numbers = []\n    for num in range(2, n + 1):\n        prime = True\n        for i in range(2, num):\n            if (num % i == 0):\n                prime = False\n\n        if prime:\n            prime_numbers.append(num)\n    return prime_numbers\n\nprint(generate_prime_numbers(100)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: <select>\n  <option value=\"c\">C</option>\n  <option value=\"java\">Java</option>\n  <option value=\"python\">Python</option>\n</select> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # create a list\noriginal_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# create a new list with only even numbers \neven_list = [num for num in original_list if num % 2 == 0] \n  \n# display the even list \nprint(even_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longestWord(sentence): \n    words = sentence.split(' ')\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n\nsentence = \"This is a test sentence\"\nprint(longestWord(sentence)) // \"sentence\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import calendar\n\ndate = calendar.month( 2020, 8 )\nprint(date) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class CheckPrime(object):\n\n    def __init__(self, number):\n        self.number = number\n\n    def is_prime(self):\n        if self.number < 2:\n            return False\n\n        for i in range(2, self.number):\n            if self.number % i == 0:\n                return False\n        \n        return True\n\nif __name__ == '__main__':\n    number = int(input('Please input a number: \\n'))\n    check_prime = CheckPrime(number)\n    if check_prime.is_prime():\n        print('The number {} is a prime number.'.format(number))\n    else:\n        print('The number {} is not a prime number.'.format(number)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: temp_list = [30,15,17,18]\n\n# Convert each element in the list to Fahrenheit\nfahrenheit_list = []\n\nfor temp in temp_list:\n fahrenheit_list.append(temp*9/5 + 32)\n\nprint(fahrenheit_list)\n# [86.0, 59.0, 62.6, 64.4] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"Design and implement a code to reverse a string in Python\"\"\"\n\ndef reverse_string(string):\n    \"\"\" Function to reverse a given string\"\"\"\n    # Initialize the empty string to store the reversed string \n    reversed_string = \"\"\n\n    # Iterate through the characters of the string in reverse order\n    for i in range(len(string) - 1, -1, -1): \n        reversed_string += string[i]\n\n    # Return the reversed string\n    return reversed_string\n\nif __name__ == '__main__':\n    string = \"Hello World!\"\n    reversed_string = reverse_string(string)\n    print(reversed_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndef json_string_to_dict(json_string):\n    '''Converts a JSON string to a Python dictionary.'''\n    return json.loads(json_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(\"Hello World!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from bs4 import BeautifulSoup\nimport requests\n\n# Get the HTML of the page\nhtml_content = requests.get(url).text\n\n# Create the Soup object\nsoup = BeautifulSoup(html_content, 'lxml')\n\n# Find the text data\ndata = soup.find_all('p')\n\n# Print the text data\nfor element in data:\n      print(element.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Book:\n    def __init__(self, title, author, publisher, isbn):\n        self.title = title\n        self.author = author\n        self.publisher = publisher\n        self.isbn = isbn\n\n    def get_title(self):\n        return self.title\n\n    def get_author(self):\n        return self.author\n\n    def get_publisher(self):\n        return self.publisher\n\n    def get_isbn(self):\n        return self.isbn but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n def __init__(self, val):\n  self.left = None\n  self.right = None\n  self.val = val\n\ndef search_path(root, key):\n path = []\n path = _search_path(root, key, path)\n return path\n\ndef _search_path(node, key, path):\n if node is None:\n  return None\n path.append(node.val)\n\n if node.val == key:\n  return path\n\n left_search = _search_path(node.left, key, path)\n if left_search is not None:\n  return left_search\n\n right_search = _search_path(node.right, key, path)\n if right_search is not None:\n  return right_search\n\n path.pop()\n return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findElement(arr, element):\n    for i in range(0, len(arr)):\n        if arr[i] == element:\n            return True\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests \nfrom bs4 import BeautifulSoup \n\nurl = \"http://www.who.int/countries/ind/en/\" \nscraped_data = requests.get(url) \nsoup = BeautifulSoup(scraped_data.text, 'lxml') \n \nlife_expectancy_data = soup.find('div', {'class':'site-width'}) \nlife_expectancy = life_expectancy_data.find('ul') \n \nlife_expectancy_india = float(life_expectancy.find('li').text.strip().split(' ')[-1]) \nprint(life_expectancy_india) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubbleSort(array):\n    n = len(array)\n    for i in range(n): \n        for j in range(0, n-i-1): \n            if array[j] > array[j+1] : \n                array[j], array[j+1] = array[j+1], array[j] \n    return array\n\nprint(bubbleSort(array)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Create a Python script that can recognize the presence of a person in a given frame of an image/video. The script should incorporate a trained computer vision model that can detect human faces or other characteristics that can be used to differentiate a person from other objects. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os\n\ndef get_last_commit_message():\n \"\"\"\n Retrieves the commit message of the last commit.\n \"\"\"\n # Get the list of all commits\n output = os.popen('git log').read()\n\n # Split the output into a list of commits\n commits = output.split('commit ')[1:]\n\n # Get the message of the last commit\n last_commit_message = commits[0].split('\\n')[1]\n\n return last_commit_message\n\nif __name__ == '__main__':\n print(get_last_commit_message()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re \n  \ndef searchWord(string, word): \n    return re.search(word, string)\n  \nresult = searchWord(\"The quick brown fox\", \"brown\") \nif result is not None:\n    print(\"Word found\")\nelse:\n    print(\"Word not found\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import r2_score\n\n# convert the data into dataframe\ndf = pd.DataFrame({'X': [1,2,3,4,5,6], 'y': [13, 23, 32, 43, 51,64]})\n\n# train and test split\nx_train = df[['X']][:-1]\ny_train = df['y'][:-1]\nx_test = df[['X']][-1:]\ny_test = df['y'][-1:]\n\n# define linear model\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(x_train, y_train)\n\n# score\nr2_score(y_test, model.predict(x_test)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n    def __init__(self, name, age, position, salary):\n        self.name = name\n        self.age = age\n        self.position = position\n        self.salary = salary\n\n    def getName(self):\n        return self.name\n\n    def getAge(self):\n        return self.age\n\n    def getPosition(self):\n        return self.position\n    \n    def getSalary(self):\n        return self.salary but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def uniqueCount(mylist): \n    unique = []\n    for x in mylist: \n        if x not in unique: \n            unique.append(x)\n    return len(unique)\n  \nmylist = [10, 12, 10, 4, 10, 6, 4]\nprint(uniqueCount(mylist)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def table(n): \n    for i in range(1, 11): # for 1 to 10\n        print(n,'x',i,'=',n*i) \n  \n# Driver Code \nn = 5\ntable(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n \ndef generate_password(length):\n    # Generate a random password that is length characters long\n    chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'\n    password = ''\n    for _ in range(length):\n        password += random.choice(chars)\n    return password\n \ngenerated_password = generate_password(10)\nprint(generated_password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filterList(nums, filter):\n \n # Initialize a filtered list \n filtered_list = [] \n \n # Iterate over the list \n for num in nums: \n  \n  # Check if filter is true \n  if eval(str(num)+filter): \n   filtered_list.append(num) \n \n # Return the filtered list\n return filtered_list\n\nresult = filterList([1,2,5,6,-4,7,8], '> 0')\nprint(result)\n# Output: [1,2,5,6,7,8] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\nemployees = [\n {'name': 'John', 'salary': 1000}, \n {'name': 'Alice', 'salary': 2000},\n {'name': 'Bob', 'salary': 1500}\n]\n\ndef get_employees():\n return json.dumps(employees) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def encode_string(s):\n    # Function to encode a string\n    encoded_string = ''\n    for c in s:\n        encoded_string += hex(ord(c)).upper()[2:]\n    return encoded_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Read two integer values\na = int(input())\nb = int(input())\n\n# Swap their values\ntemp = a\na = b\nb = temp\n\n# Print the variables\nprint(\"a =\", a)\nprint(\"b =\", b) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# read data\ndf = pd.read_csv('data.csv')\n\n# transform data into features\nvectorizer = CountVectorizer()\nx = vectorizer.fit_transform(df['text'])\n\n# train Naive Bayes model\nclf = MultinomialNB()\nclf.fit(x, df['label'])\n\n# predict on unseen data\nexample = vectorizer.transform(['I am a spam email'])\nprediction = clf.predict(example)\nprint(prediction[0]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mySum(list):\n    total = 0\n    for num in list:\n        total += num\n    return total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from scipy.optimize import minimize\n\ndef objective(x):\n # minimize 3x^2 + 2xy + 7y^2\n return 3*x[0]**2 + 2*x[0]*x[1] + 7*x[1]**2\n\n# define bounds\nx0_bounds = (0,5)\nx1_bounds = (0,5)\n\nbounds = [x0_bounds, x1_bounds]\n\n# intial values\nx0 = [1, 1]\n\n# optimization\nsolution = minimize(objective,x0, bounds=bounds)\n\n# result\nprint(\"Optimized x0:\", solution.x[0])\nprint(\"Optimized x1:\", solution.x[1])\nprint(\"Optimized result:\", solution.fun) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_lists(list1, list2):\n  merged_list = list1 + list2\n  return merged_list\n\nmerged_list = merge_lists(list1, list2)\nprint(merged_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = ['The', 'quick', 'brown', 'fox']\n\nsentence = \" \".join(words)\nprint(sentence)\n# Output: The quick brown fox but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\nfrom flask import Flask, g, render_template\n\n# create the application\napp = Flask(__name__)\n\n# define the database connection\ndef get_db():\n if not hasattr(g, 'db'):\n g.db = sqlite3.connect('users.db')\n return g.db\n\n# close the connection at the end of a request\n@app.teardown_appcontext\ndef close_db(error):\n if hasattr(g, 'db'):\n g.db.close()\n\n# define a route to display all users\n@app.route('/')\ndef index_page():\n db = get_db()\n cur = db.execute(SELECT * FROM users)\n return render_template('index.html', users=cur.fetchall())\n\n# run the application\nif __name__ == '__main__':\n app.run()\n\n# template file: index.html\n<html>\n <body>\n {% for user in users %}\n <h3>{{ user.name }} | {{ user.address }}</h3>\n {% endfor %}\n </body>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to swap two numbers \ndef swap_nums(num1, num2): \n    # Swapping the two numbers \n    num1, num2 = num2, num1 \n    return num1, num2 \n  \n# Main code \nnum1 = 5\nnum2 = 10\n  \n# Printing the values before swapping \nprint(\"Before swapping: \") \nprint(\"Number 1 = \", num1) \nprint(\"Number 2 = \", num2) \n  \n# Calling the swap function \nnum1, num2 = swap_nums(num1, num2) \n  \n# Printing the values after swapping \nprint(\"\\nAfter swapping: \") \nprint(\"Number 1 = \", num1) \nprint(\"Number 2 = \", num2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import linear_model\n\n#generate dataset containing input and output\nbedrooms = [3,2,4,2,3,4]\nlot_sizes = [10000,20000,30000,40000,50000,60000]\nprices = [20000,25000,30000,35000,40000,45000]\n\n#reshape the data\nbedrooms_data = np.array(bedrooms).reshape(-1,1)\nlot_sizes_data = np.array(lot_sizes).reshape(-1,1)\n\n#train the model\nmodel = linear_model.LinearRegression()\nmodel.fit(bedrooms_data,lot_sizes_data)\n\n#predict\npredicted_price = model.predict([[3,10000]])\n\n#print the predicted price\nprint(predicted_price) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class GroceryItem:\n    def __init__(self, name, price, quantity):\n        self.name = name\n        self.price = price\n        self.quantity = quantity but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize(arr):\n    smallest = None\n    \n    for num in arr:\n        if (smallest is None) or (num > smallest):\n            smallest = num\n    \n    return smallest + 1\n\nx = [1, 2, 3, 4]\nresult = optimize(x)\n\nprint(result) # 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def eval_heap(arr):\n # Base case\n if len(arr) == 0:\n return -1\n\n # Stores the index of the max element\n max_idx = 0\n \n # Iterate the array from index 1\n for i in range(1, len(arr)):\n # Update the max_idx if value of arr[i] \n # is greater than arr[max_idx]    \n if arr[i] > arr[max_idx]:\n max_idx = i\n\n # Check if heap property is violated\n for j in range(0, max_idx):\n if arr[j] > arr[max_idx]:\n return False\n\n # Recursively call the eval_heap on remaining elements\n return eval_heap(arr[0:max_idx]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [('dog', 6), ('cat', 4), ('rabbit', 2)]\n\nlist.sort(key=lambda x: x[1])\n\nprint(list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The difference between the two snippets is that in the first snippet, the value of x will be changed before the if condition is evaluated, while in the second snippet, the value of x will not be changed until after the if condition is evaluated. Therefore, if the code in the first snippet is executed, the print statement will be executed, while in the second snippet, the print statement will not be executed. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_words(text):\n    words = text.split()\n    return len(words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\nimport nltk \nimport pandas as pd \nfrom sklearn.feature_extraction.text import TfidfVectorizer \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LogisticRegression \n\n# Define a function to create features from review data \ndef create_features_from_reviews(reviews):\n vectorizer = TfidfVectorizer(ngram_range=(1, 1), stop_words='english', \n min_df=0.017, max_df=0.98)\n X = vectorizer.fit_transform(reviews)\n return X\n\n# Load and pre-process the raw data \ndata = pd.read_csv('movie_reviews.csv', header=0, delimiter=',')\nX = create_features_from_reviews(data['review_text'])\ny = data['rating']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Train the logistic regression model and evaluate it\nlogreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_score = logreg.score(X_test, y_test) \nprint('Accuracy: ', acc_score)\n\n# Create a simple web API \n@app.route('/api/movie_rating', methods=['POST'])\ndef predict_rating():\n # Get the data from the POST request \n data = request.get_json() \n \n # Make prediction using model \n prediction = logreg.predict([X_test[0]]) \n \n # Take the first value of prediction\n output = prediction[0] \n \n return json.dumps({'rating': output}) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def basic_encryption(s):\n encrypted = \"\"\n for c in s:\n encrypted += chr(ord(c) + 1)\n return encrypted but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# URL of the website to be crawled\nurl = 'https://example.com/'\n\n# Send a request to the website and fetch the source code\nr = requests.get(url)\nhtml = r.text\n\n# Initialize the BeautifulSoup object\nsoup = BeautifulSoup(html, 'html.parser')\n\n# Find all the links in the website\nlinks = soup.find_all('a')\n\n# Iterate over the links and collect the `href` values\nfor link in links:\n\tprint(link.get('href')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convertToTitleCase(s):\n    return ' '.join(word[0].upper() + word[1:] for word in s.split())\n \nprint(convertToTitleCase(\"this is a test string\"))  # Output: This Is A Test String but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n  \ndef shuffle_list(list_nums):\n    random.shuffle(list_nums)\n    print(\"Shuffled list :\",  list_nums)\n\nlist_nums = [1, 2, 3, 4, 5]\nshuffle_list(list_nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_even(arr):\n    '''\n    Function to calculate the sum of even numbers in an array\n    \n    Parameters\n    arr: list of integers\n    \n    Returns\n    sum of even numbers in the array\n    '''\n    total = 0\n    for num in arr:\n        if num % 2 == 0:\n            total += num\n    return total but is not the same. just give one example and only return the code."}
