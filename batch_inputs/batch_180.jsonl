{"prompt": "make some code that functions the same as the following code: ^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$ but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def conv(input_num):\n    decimal_num = int(input_Num, 8)\n    return decimal_num but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import asyncio\nimport websockets\n\nasync def hello(websocket, path):\n greeting = await websocket.recv()\n print(f\"< {greeting}\")\n\nasync def hello_server():\n server = await websockets.serve(hello, '127.0.0.1', 8765)\n await server.wait_closed()\n\nasyncio.get_event_loop().run_until_complete(hello_server())\nasyncio.get_event_loop().run_forever() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Game script\nimport random\n\n# Welcome message\nprint(\"Welcome to the guessing game!\")\n\n# Generate a random number\ntarget_number = random.randint(1, 10)\n\n# Initialise variables and flags\nguessed = False\nattempts = 0\n\nwhile not guessed:\n attempts += 1\n guess = int(input(\"Guess a number (1-10): \"))\n\n if guess < target_number:\n  print(\"That's too low. Try again!\")\n elif guess > target_number:\n  print(\"That's too high. Try again!\")\n else:\n  guessed = True\n\n# Congratulations message\nif guessed:\n print(\"Congratulations! You guessed the number in {} attempts\".format(attempts)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# text to be classified\ntext = \"This is a test of a text classification program.\"\n\n# load pre-trained model\nmodel = pickle.load(open(\"pre_trained_model.pkl\", 'rb'))\n\n# predict the class based on text input\nprediction = model.predict([text])\n\nprint(prediction) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_check(numbers, n):\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == n:\n                return True\n    return False\n\nnumbers = [1, 5, 6, 10, 8, 20]\nn = 11\n\nprint(sum_check(numbers, n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def avg_elements(list_of_lists):\n    total_elements = 0\n    for sublist in list_of_lists:\n        total_elements += len(sublist)\n    return total_elements / len(list_of_lists) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_common_substring(str1, str2):\n # initialise a 2D list with all 0s\n matrix = [[0] * ( len(str2) + 1 )] * (len(str1) + 1)\n\n longest = 0\n x_longest = 0\n y_longest = 0\n\n # fill the 2D matrix\n for x in range(1, len(str1) + 1):\n    for y in range(1, len(str2) + 1):\n        if str1[x - 1] == str2[y - 1]:\n            matrix[x][y] = matrix[x - 1][y - 1] + 1\n            if matrix[x][y] > longest:\n                longest = matrix[x][y]\n                x_longest = x\n                y_longest = y\n        else:\n            matrix[x][y] = 0\n\n # extract the longest common substring\n return str1[ x_longest - longest : x_longest ]\n\nstr1 = \"geeksforbridge\"\nstr2 = \"bridgelabz\"\n\nprint(longest_common_substring(str1, str2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Load the dataset\ndata = pd.read_csv('data.csv')\n\n# Create features\ndata['date'] = pd.to_datetime(data['date'])\ndata['month'] = data['date'].dt.month\ndata['day'] = data['date'].dt.day\ndata['day_of_week'] = data['date'].dt.dayofweek\ndata['year'] = data['date'].dt.year\n\n# Define input and output features\nX = data[['month', 'day', 'day_of_week', 'year', 'type', 'location']]\ny = data['attendees']\n\n# Encode categorical features\ncat_features = ['type', 'location']\nX = pd.get_dummies(X, columns=cat_features)\n\n# Build and evaluate the model\nmodel = RandomForestRegressor(n_estimators=100)\nmodel.fit(X, y)\n\n# Test our input\ntest_input = [[2, 28, 0, 2021, 'Party', 'San Francisco, CA']]\nencoded_test_input = pd.get_dummies(pd.DataFrame(test_input, columns=X.columns))\nprediction = model.predict(encoded_test_input)[0]\nprint(f'We predict a total of {prediction:.2f} people will attend the event.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: nums = [1, 2, 3, 4, 5]\n\ndef mean(nums):\n total = 0\n for i in nums:\n  total += i\n mean = total/len(nums)\n return mean\n\nprint(mean(nums)) # 3.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ntext = 'Hello! My name is John and my email is john@example.com.'\n\n# Find all occurrences of an email using regex\nemail_regex = r\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}\"\nresult = re.findall(email_regex, text)\n\n# Print emails found\nprint(\"Emails found: \\n\")\nfor email in result:\n print(email) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_numbers(num1, num2):\n  return num1 + num2\n  \nresult = add_numbers(8, 10)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from bs4 import BeautifulSoup\nimport requests\n\n# Make an HTTP request to the website\nresponse = requests.get('http://example.com/store/')\n\n# Parse the response using BeautifulSoup\nsoup = BeautifulSoup(response.content, 'html.parser')\n\n# Extract all product names\nproducts = soup.find_all(class_='product')\n\n# Extract product names and prices from each product\nproducts_list = []\nfor product in products:\n name = product.find(class_='name').text\n price = product.find(class_='price').text\n products_list.append((name, price))\n\n# Print the product list\nprint(products_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Search for a value in a list using Binary Search\ndef search(lst, value):\n # Sort the list before performing the search\n lst.sort()\n\n # Initialize the lower and upper bounds\n lower_bound = 0\n upper_bound = len(lst) - 1\n\n # Perform the Binary Search\n while lower_bound <= upper_bound:\n mid = (lower_bound + upper_bound) // 2\n if lst[mid] == value:\n return True\n if lst[mid] < value:\n lower_bound = mid + 1\n else:\n upper_bound = mid - 1\n\n # If the value isn't found in the list\n return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\ndef get_people_born_after(date):\n    people = []\n    endpoint = \"https://example.com/people\"\n    r = requests.get(endpoint)\n     \n    if r.status_code == 200:\n        data = r.json()\n        for person in data:\n            birth_date = datetime.fromisoformat(person[\"birth_date\"])\n            if birth_date > date:\n                people.append(person)\n     return people but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def lcs(a, b):\n    # Generate a 2D matrix from the two strings\n    arr = [[0 for x in range(len(b)+1)] for x in range(len(a)+1)]\n    # Initialize the matrix\n    for i in range(len(a) + 1): \n        for j in range(len(b) + 1): \n            if i == 0 or j == 0: \n                arr[i][j] = 0\n            # If the characters at i and j match \n            elif a[i-1] == b[j-1]: \n                arr[i][j] = arr[i-1][j-1] + 1\n            # If the characters dont match \n            else: \n                arr[i][j] = max(arr[i-1][j], arr[i][j-1])\n    # Traverse the 2D matrix and find the longest common subsequence\n    index = arr[len(a)][len(b)]\n    lcs = [\"\"] * (index+1) \n    lcs[index] = \"\" \n    i = len(a) \n    j = len(b)\n    while i > 0 and j > 0: \n        if a[i-1] == b[j-1]: \n            lcs[index-1] = a[i-1]\n            i-=1\n            j-=1\n            index-=1\n        elif arr[i-1][j] > arr[i][j-1]: \n            i-=1\n        else: \n            j-=1\n    return \"\".join(lcs) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def removeRepeatedChars(str):\n    result = \"\"\n    for c in str:\n        if c not in result:\n            result += c\n    return result\n\nprint(removeRepeatedChars(\"aaabbccddeeff\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def determinant(mat): \n \n    # Initialize result \n    result = 0\n  \n    # Iterate for each element of the matrix \n    for i in range(len(mat)): \n  \n        # Calculation for each element of the matrix \n        sub_mat = [row[:i] + row[i + 1:] for row in mat[1:]] \n        sign = (-1) ** (i % 2) \n        sub_det = determinant(sub_mat) \n  \n        result += sign * mat[0][i] * sub_det \n  \n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# Retrieve the review column from the dataframe\nreviews = df['review']\n\n# Clean the text\nreviews = reviews.apply(lambda row: row.lower())\nreviews = reviews.apply(lambda row: re.sub(r'\\W+', ' ', row))\n\n# Create the feature matrix\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(reviews)\n\n# Create the labels\nlabels = [1, 0, 0]\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, labels, test_size=0.2, random_state=0)\n\n# Build and train the classifier\nclf = LogisticRegression()\nclf.fit(X_train, y_train)\n\n# Test the model\naccuracy = clf.score(X_test, y_test)\n\n# Make predictions\npredictions = clf.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Queue(object):\n    def __init__(self):\n        self.items = []\n\n    def isEmpty(self):\n        return self.items == []\n\n    def enqueue(self, item):\n        self.items.insert(0, item)\n\n    def dequeue(self):\n        return self.items.pop()\n\n    def size(self):\n        return len(self.items) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [\"Hello\", \"World\", \"This is a test\"]\n\ndef sort_list_length(list):\n    '''\n    Function to sort the list according to its length\n    '''\n    return sorted(list, key=len)\n\nif __name__ == \"__main__\":\n    list = [\"Hello\", \"World\", \"This is a test\"]\n    sorted_list = sort_list_length(list)\n    print(sorted_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compress_string(s): \n    # Count occurences of each character \n    dict = {} \n    for c in s: \n        if c in dict: \n            dict[c] += 1\n        else: \n            dict[c] = 1\n    \n    # Create a new string with the format \n    # <character><number_of_occurences>\n    compressed = [] \n    for c in dict.keys(): \n        compressed.append(c + str(dict[c])) \n    \n    # Join all the characters inside the list \n    return ''.join(compressed) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def length_of_string(string): \n    count = 0\n    for char in string: \n        count += 1\n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def square(num):\n    if num < 0:\n        raise ValueError('Cannot square negative numbers.')\n    return num**2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_average(numbers):\n  return sum(numbers)/len(numbers)\n\nnumbers = [2, 4, 5, 7, 8]\nprint(calculate_average(numbers)) # Output: 5.6 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_words(s):\n  words = s.split()\n  reversed_words = [word[::-1] for word in words]\n  return ' '.join(reversed_words)\n\nstring = \"This is a string\"\nprint(reverse_words(string))\n// Output: sihT si a gnirts but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pyttsx3\n\nengine = pyttsx3.init()\nengine.say(\"Hello world!\")\nengine.runAndWait() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a Python program to make a copy of an array. \n\"\"\"\n\ndef copy_array(arr):\n    return arr[:]\n\nif __name__ == '__main__':\n    arr = [1,2,3,4,5]\n    print(copy_array(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import xml.etree.ElementTree as ET\n\ndef parse_document(document):\n    root = ET.fromstring(document)\n    items = root.find('items')\n    data = []\n    for item in items:\n        name = item.find('name').text\n        price = item.find('price').text\n        data.append({'name': name, 'price': price})\n    return data but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_consonants(string): \n    new_str = \"\" \n  \n    VOWELS = (\"a\", \"e\", \"i\", \"o\", \"u\") \n  \n    for letter in string: \n        if letter.lower() in VOWELS: \n            new_str += letter \n        else: \n            new_str += \"_\"\n  \n    return new_str\n  \nprint(replace_consonants(\"Hello World\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printDivisorsOfNumber(n): \n    print(\"The divisors of the number are: \")\n    for x in range(1, n+1):\n        if n%x == 0: \n            print(x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport json\n\nresponse = requests.get('https://hacker-news.firebaseio.com/v0/topstories.json')\ntop_stories = json.loads(response.content)\n\nfor story_id in top_stories:\n response = requests.get(f'https://hacker-news.firebaseio.com/v0/item/{story_id}.json')\n story_info = json.loads(response.content)\n print(story_info['title']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\nimport numpy as np\nimport nltk\nnltk.download('punkt')\nfrom nltk.stem import WordNetLemmatizer\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Input(shape=(256, )),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(24, activation='softmax')\n])\n\n# Tokenize sentences\nlemmatizer = WordNetLemmatizer()\ndef tokenize(sentence):\n    words  = nltk.word_tokenize(sentence)\n    clean_words = [lemmatizer.lemmatize(w.lower()) for w in words]\n    return clean_words\n\n# Process data\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Make chatbot\ndef response(input_text):\n    clean_words = tokenize(input_text)\n    inputs = np.array(clean_words).reshape(1,256)\n    pred = model.predict(inputs)\n    pred = np.argmax(pred)\n    # Choose the response\n    if pred == 0:\n        return 'Python is a popular programming language.'\n    if pred == 1:\n        return 'C++ is a powerful programming language.'\n    if pred == 2:\n        return 'Java is an object-oriented programming language.'\n    if pred == 3:\n        return 'HTML is used to create webpages.'\n\nprint(response('what is java'))\n# Output: Java is an object-oriented programming language. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # imports\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# load data\ndata = pd.read_csv('data.csv')\n\n# preprocessing\nX = data.iloc[:, :-1]\ny = data.iloc[:, -1]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# model\nmodel = RandomForestClassifier(n_estimators=200)\nmodel.fit(X_train, y_train)\n\n# predict\npredictions = model.predict_proba(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nclass WebPageContent:\n    def __init__(self, url):\n        self.url = url\n\n    def get_content(self):\n        response = requests.get(self.url)\n        if response.status_code == 200:\n            return response.text\n    \n    def display_content(self):\n        content = self.get_content()\n        if content is not None:\n            print(content)\n\n# Usage\nurl = \"https://www.example.com\"\nweb_page = WebPageContent(url)\nweb_page.display_content() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: combinedList = [] \n\nfor num1 in list1:\n for num2 in list2:\n if num1 == num2:\n combinedList.append(num1)\n\nprint(combinedList) # [3,4,5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: even_arr = [x for x in arr if x % 2 == 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\n\ndef remove_punctuation(text):\n    #convert punctuation chars into a string\n    punctuation_chars = ''.join(string.punctuation)\n    \n    #iterate through input text and replace punctuation chars with an empty string\n    for char in punctuation_chars:\n        if char in text:\n            text = text.replace(char, '')\n    \n    return text but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import webbrowser \n\nurl = \"http://example.com/\" \n\n# open url in new window, with autoraise \n# possible options are: \n# 1. open a browser window \n# 2. open a new tab \n# 3. open a background tab \n\nwebbrowser.open_new_tab(url + 'page.html') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: rectangles = [[3, 4], [6, 6], [1, 8]]\n\n# calculate the total area\ndef calculateTotalArea(rectangles):\n total_area = 0\n for x, y in rectangles:\n total_area += x * y\n return total_area\n\ntotal_area = calculateTotalArea(rectangles)\nprint(total_area) # 81 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_present(arr, number):\n    for i in range(len(arr)):\n        if arr[i] == number:\n            return True\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Take input\ntext = input('Enter a string: ')\n\n# Split string into words\nwords = text.split(' ') \n\n# Reverse order\nwords.reverse() \n\n# Print\nfor word in words:\n print(word) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import cProfile\n\ncProfile.run('target_function()') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def intersection(listOne, listTwo):\n    return list(set(listOne).intersection(set(listTwo))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_value(int_arr):\n    max_val = int_arr[0]\n    for i in int_arr:\n        if i > max_val:\n            max_val = i\n    return max_val but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num1 = 8\nnum2 = 4\n \nif (num1 > num2):\n    print(\"The maximum of the given numbers is: \"+str(num1))\nelse:\n    print(\"The maximum of the given numbers is: \"+str(num2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_peaks(data):\n    max_val = None\n    max_idx = None\n    for i, val in enumerate(data):\n        if max_val is None or val > max_val:\n            max_val = val\n            max_idx = i\n    return max_idx\n\ndata = [9, 2, 10, 5, 4, 8, 3, 7]\npeak_index = find_peaks(data)\nprint('The peak of maximum values in the data is at index {} with value {}'.format(peak_index, data[peak_index])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mini_subarray_sum(arr, sum): \n  \n    n = len(arr) \n    curr_sum = 0\n    min_len = n + 1\n    start = 0\n    end = 0\n    i = 0\n  \n    while i < n: \n        if curr_sum < sum:\n            curr_sum += arr[i]\n            end += 1\n        else:\n            min_len = min(min_len, end - start)\n            curr_sum -= arr[start]\n            start += 1\n        i += 1\n    return min_len but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_list(n):\n return random.sample(range(n), n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findLargestCount(list):\n    max_count = 0\n    result = []\n    \n    for item in list:\n        length_item = len(item)\n        if length_item > max_count:\n            max_count = length_item\n            result = [item]\n        elif length_item == max_count:\n            result.append(item)\n            \n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MatrixAddition:\n \n    def addTwoMatrices(self, X, Y):\n        result = [[0, 0, 0],\n                  [0, 0, 0],\n                  [0, 0, 0]]\n \n        for i in range(len(X)):\n            for j in range(len(X[0])):\n                result[i][j] = X[i][j] + Y[i][j]\n        for r in result:\n            print(r) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\na = 15\nb = 20\n\nprint(\"GCD of\", a, \"and\", b, \"is\", gcd(a, b)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortTuples(tuples):\n    tuples.sort(key=lambda x: x[1],reverse=True)\n    return tuples but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def unique_list(input_list):\n    uniques = []\n    for i in input_list:\n        if i not in uniques:\n            uniques.append(i)\n\n    return uniques but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Monte Carlo simulation to estimate an integral\n# The integral can be of any function f(x)\n\n# N is the number of samples to take\n# a, b is the interval\nN = 10000\na, b = 0.0, 1.0\n\n# initialize a variable to store the running sum\nsum = 0\n\n# take N samples\nfor i in range(N):\n    x = random.uniform(a, b)\n    sum += f(x) \n\n# compute the estimated integral\nestimated_integral = (b - a) / N * sum \n\nprint(\"The estimated integral is: \", estimated_integral) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverser(string):\n    reversed_string = []\n    words = string.split()\n    for word in words:\n        reversed_string.append(word[::-1])\n    return \" \".join(reversed_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name):\n        self.name = name\n        self.attendance_record = {}\n \n    def mark_attendance(self, date, attended):\n        self.attendance_record[date] = attended\n \n    def get_attendance_record(self):\n        return self.attendance_record but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Read in the csv dataset\ndf = pd.read_csv(\u2018spam_data.csv')\n\n# Create the CountVectorizer\ncv = CountVectorizer()\n\n# Fit the CountVectorizer to the text\nwords_cv = cv.fit_transform(df['text'])\n\n# Create a Multinomial Naive Bayes classifier and fit it to our text\nclf = MultinomialNB()\nclf.fit(words_cv, df['spam']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import IsolationForest\n\n# read the csv file\ndata = pd.read_csv('transaction_data.csv')\n\n# define feature and target variables\nX = data.drop(['Date', 'Time', 'Type', 'Fraud'],axis=1).values\ny = data['Fraud'].values\n\n# split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y,random_state=0)\n\n# train the model\nclf = IsolationForest(n_estimators=100,random_state=0)\nclf.fit(X_train, y_train)\n\n# make predictions \ny_pred = clf.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_common_words(self):\n words = {}\n words_list = self.text.split(' ')\n \n for word in words_list:\n if word in words.keys():\n words[word] += 1\n else:\n words[word] = 1\n \n return sorted(words, key=words.get, reverse=True)[:10] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # importing tkinter module \nfrom tkinter import *\n  \n# creating a GUI window \nroot = Tk() \n  \n# setting a geometry to the GUI window \nroot.geometry(\"300x200\") \n  \n# creating a label widget to display a message \n# this label is child of root window \nLabel(root, text=\"Hello, World!\").pack() \n  \n# looping the GUI window using an infinite loop \nroot.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(word):\n  rev_word = word[::-1]\n  if rev_word == word:\n    return True\n  else:\n    return False\n  \nword = \"racecar\"\nprint(is_palindrome(word)) # True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pymysql\n\n# Create connection to database\nconn = pymysql.connect(host=\"localhost\",\n                       user=\"admin\",\n                       passwd=\"admin123\",\n                       db=\"test\")\n\n# Create a cursor and execute a query\ncur = conn.cursor() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: mylist = [x for x in mylist if x % 2 == 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: word = input('Enter a word or phrase: ')\n\ncharacters = sorted(list(word))\n\nfor character in characters:\n    print(character) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_longest_word(arr):\n longest = ''\n for word in arr:\n if len(word) > len(longest):\n longest = word\n return longest\n\nword = find_longest_word(arr_of_words)\nprint(word)  # Output: elephant but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nDesign a class in Python to store a list of students and their details\n\"\"\"\n\nclass Student(object):\n    def __init__(self):\n        self.students = []\n \n    def add_student(self, name, age, address):\n        student = {\n            'name': name,\n            'age': age,\n            'address': address\n        }\n        self.students.append(student)\n    \n    def delete_student(self, name):\n        for student in self.students:\n            if student['name'] == name:\n                self.students.remove(student) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: lst = []\nfor num in range(1,11):\n   if all(num%i!=0 for i in range(2,num)):\n       lst.append(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class PrimeChecker:\n    def __init__(self, number):\n        self.number = number\n\n    def is_prime(self):\n        for i in range(2, self.number // 2):\n            if self.number % i == 0:\n                return False\n\n        return True\n\n# Create an instance of PrimeChecker\nprime_checker = PrimeChecker(7)\n\n# Check if the number is prime\nis_prime = prime_checker.is_prime()\n\nif is_prime:\n    print('The number is prime')\nelse:\n    print('The number is not prime') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compress_string(s):\n    # base case: the input string is empty\n    if len(s) == 0:\n        return ''\n\n    compressed = ''\n    # maintain a count of each character\n    count = 1\n    # iterate through all characters in the string\n    for i, c in enumerate(s):\n        # if this is not the last character\n        if i < len(s) - 1:\n            # if this character is the same as the next one\n            if s[i+1] == c:\n                # increment the count\n                count += 1\n            # otherwise, add this character and its count to the compressed output\n            else:\n                compressed += c + str(count)\n                # and reset the count to 1\n                count = 1\n        # if this is the last character\n        else:\n            compressed += c + str(count)\n\n    return compressed\n  \n# Example\nstring = 'aaaaabbccd'\nprint(compress_string(string)) # a5b2c2d1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n \ndef sentiment_model(text):\n    # Read in data\n    data = pd.DataFrame([text])\n \n    # Convert text data to bag of words\n    vectorizer = CountVectorizer()\n    vectorized_data = vectorizer.fit_transform(data[0])\n \n    # Split data into train and test sets\n    labels = np.array([1, 0])\n    X_train, X_test, y_train, y_test = train_test_split(vectorized_data.toarray(),\n                                                        labels,\n                                                        test_size=0.1, \n                                                        random_state=42)\n \n    # Fit Naive Bayes model\n    clf = MultinomialNB()\n    clf.fit(X_train, y_train)\n \n    # Make predictions\n    return clf.predict(X_test)\n\nif __name__ == '__main__':\n    text = \"<PUT INPUT HERE>\"\n    print(sentiment_model(text)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_every_other(lst):\n for i in range(0, len(lst), 2):\n print(lst[i]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def removeVowels(string):\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    stringWithoutVowels = \"\"\n    for char in string:\n        if char not in vowels:\n            stringWithoutVowels += char\n    return stringWithoutVowels\n\nstring = input(\"Enter a string: \")\nresult = removeVowels(string)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_to_string(int_list):\n    string = \"\"\n\n    for i in int_list:\n        string += str(i) + \",\"\n\n    # Remove trailing comma\n    string = string[:-1]\n\n    return string\n\nint_list = [1, 4, 5, 6, 7] \nprint(list_to_string(int_list)) // \"1,4,5,6,7\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import keras\nfrom keras.datasets import mnist\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD\n\n# Data is already split into input (X) and output (y)\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n\n# Flatten the 28 x 28 images into vectors of size 784\nnum_pixels = X_train.shape[1] * X_train.shape[2]\nX_train = X_train.reshape((X_train.shape[0], num_pixels)).astype('float32')\nX_test = X_test.reshape((X_test.shape[0], num_pixels)).astype('float32')\n\n# Normalize inputs from 0-255 to 0-1\nX_train = X_train / 255\nX_test = X_test / 255\n\n# One-hot encode the labels\ny_train = keras.utils.to_categorical(y_train)\ny_test = keras.utils.to_categorical(y_test)\n\n# Define a model\ndef create_model():\n model = Sequential()\n model.add(Dense(num_pixels, input_dim=num_pixels, activation='relu'))\n model.add(Dense(128, activation='relu'))\n model.add(Dense(10, activation='softmax'))\n \n sgd = SGD(lr=0.01, momentum=0.8, decay=1e-6, nesterov=False)\n \n model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])\n return model\n\n# Create the model and fit it to the data\nmodel = create_model()\nmodel.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=20, batch_size=200)\n\n# Evaluate the model\nscores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Accuracy: %.2f%%\" % (scores[1]*100)) # accuracy of 97% but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sorted_list_merge(list1, list2):\n    result = []\n    index1 = 0\n    index2 = 0\n    while index1 < len(list1) and index2 < len(list2):\n        if list1[index1] < list2[index2]:\n            result.append(list1[index1])\n            index1 += 1\n        else:\n            result.append(list2[index2])\n            index2 += 1\n    result += list1[index1:] + list2[index2:]\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\n# Set initial values for coefficients\nb0, b1 = 0, 0\n\n# Set learning rate and number of iterations\nlearning_rate = 0.01\niterations = 1000\n\n# Initialize arrays for coefficients and losses\ncoefficients, losses = [], []\n\n# Generate the data\nxs = np.array([1,2,3,4])\nys = np.array([2,4,6,8])\n\n# Calculate loss with initial values of coefficients\np = np.poly1d([b0, b1])\nyhat = p(xs)\nmse = np.mean((ys - yhat)**2) / 2\n\n# Gradient descent loop\nfor i in range(iterations):\n b0_grad = -(ys - yhat).dot(xs) / len(ys)\n b1_grad = -(ys - yhat).sum() / len(ys) \n b0 -= learning_rate * b0_grad\n b1 -= learning_rate * b1_grad\n # Append values of coefficients at every iteration\n coefficients.append((b0, b1))\n p = np.poly1d([b0, b1])\n yhat = p(xs)\n losses.append(np.mean((ys - yhat)**2) / 2)\n\n# The coefficients of the optimized model\nprint(f'Optimized coefficients: {b0}, {b1}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quicksort(arr):\n  if len(arr) <= 1:\n    return arr\n  pivot = arr[len(arr) // 2]\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quicksort(left) + middle + quicksort(right)\n\nprint(quicksort([3,6,8,10,1,2,1])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def removeDuplicates(in_list):\n    out_list = []\n    for item in in_list:\n        if item not in out_list:\n            out_list.append(item)\n    return out_list\n\nmy_list = [4, 4, 5, 7, 8, 8, 1] \nprint(removeDuplicates(my_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def char_frequency(str1, str2):\n    # Create dictionaries\n    frequencies = {}\n    frequencies2 = {}\n\n    # Count frequency of all characters in first string\n    for i in range (len(str1)):\n        if str1[i] in frequencies:\n            frequencies[str1[i]] += 1\n        else:\n            frequencies[str1[i]] = 1\n\n    # Count frequency of all characters in second string\n    for i in range (len(str2)):\n        if str2[i] in frequencies2:\n            frequencies2[str2[i]] += 1\n        else:\n            frequencies2[str2[i]] = 1\n    \n    # Print the frequencies of each character\n    for ch in frequencies:\n        total_frequency = 0\n        if ch in frequencies2:\n            total_frequency = frequencies[ch] + frequencies2[ch]\n            print(\"'\" + ch + '\"', ':', total_frequency)\n        else:\n            print(\"'\" + ch + '\"', ':', frequencies[ch])\n\nstr1 = 'apple'\nstr2 = 'pplea'\nchar_frequency(str1, str2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MyClass:\n    def say_hello(self):\n        print(\"Hello world!\")\n    \n    def say_goodbye(self):\n        print(\"Goodbye!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def parseString(string):\n    freqDict = dict()\n    stringWords = string.split(\" \") \n    for word in stringWords:\n        if word in freqDict:\n            freqDict[word] += 1\n        else:\n            freqDict[word] = 1\n    return freqDict but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env bash\n\nif type -p python &> /dev/null; then\n  echo 'Python is installed!'\nelse \n  echo 'Python is not installed!'\nfi but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quicksort(array):\n    if len(array) < 2:\n        return array\n    else:\n        pivot = array[0] \n        less = [i for i in array[1:] if i <= pivot]\n        greater = [i for i in array[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def model(x, y):\n    # Write the mathematical model here\n  \ndef optimize(x_min, x_max, y_min, y_max):\n    best_x = 0\n    best_y = 0\n    best_value = 0\n    \n    for x in range(x_min, x_max+1):\n        for y in range(y_min, y_max+1):\n            value = model(x, y)\n            if value > best_value:\n                best_x = x\n                best_y = y\n                best_value = value\n    \n    return best_x, best_y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_nth_prime(n): \n    prime_nums = [2] \n    check_num = 3 \n    while len(prime_nums) < n: \n        is_prime = True \n        for i in prime_nums: \n            if check_num % i == 0: \n                is_prime = False \n                break \n        if is_prime: \n            prime_nums.append(check_num) \n        check_num += 2 \n    return prime_nums[-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findLargestElement(arr):\n    largest_element = arr[0]\n    for element in arr:\n        if element > largest_element:\n            largest_element = element\n    return largest_element\n\narr = [1,4,7,12,-1]\nprint(findLargestElement(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = [\"Hello\", \"World\", \"Hello\", \"there\", \"World\", \"Hello\", \"Python\", \"JavaScript\", \"C++\"]\n\n# Create a dictionary to store word counts\nword_counts = {}\n\n# Count occurrences of each word\nfor word in words:\n    if word in word_counts:\n        word_counts[word] += 1\n    else:\n        word_counts[word] = 1\n\n# Sort words by count\nword_count_sorted = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)\n\n# Print top 10 words\ntop_10_words = word_count_sorted[:10]\n\nprint(\"Top 10 words are:\")\nfor word, count in top_10_words:\n    print(f'{word}: {count}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def predict_stock_value(parameters):\n    \"\"\"\n    Predicts the future value of stocks based on given parameters.\n    \n    Parameters: \n        - Market condition (trends, developments, etc.) \n        - News (industry-specific news, news sources) \n        - Historical data (stock prices, stock returns)\n\n    Returns:\n        A float value representing predicted stock price.\n    \"\"\"\n    # Code to generate predicted stock value goes here\n    ...\n    return predicted_stock_value but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countAlpha(str): \n\tcount = 0\n\tfor char in str:\n\t\tif char.isalpha():\n\t\t\tcount += 1\n\treturn count \n\nstr = \"Hello World\"\nresult = countAlpha(str)\nprint(\"Number of alphabets:\", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return (n*factorial(n-1)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_area_of_triangle(p1, p2, p3):\n    a = ((p2[0] - p1[0]) ** 2 + (p2[1] - p1[1]) ** 2) ** 0.5 \n    b = ((p3[0] - p2[0]) ** 2 + (p3[1] - p2[1]) ** 2) ** 0.5\n    c = ((p3[0] - p1[0]) ** 2 + (p3[1] - p1[1]) ** 2) ** 0.5\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return area\n\nresult = calculate_area_of_triangle((2, 0), (3, 4), (6, 2))\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def main():\n    result = [item * item for item in range(10) if item % 3 == 0]\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Fibonacci Sequence up to 20\na, b = 0, 1\nwhile a < 20:\n    print(a)\n    a, b = b, a+b but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list1 = [1,2,3]\nlist2 = ['a', 'b', 'c']\n\npairs = []\n\nfor x in list1:\n    for y in list2:\n        pairs.append((x,y))\n\nprint(pairs) // Output: [(1, 'a'), (1, 'b'), (1, 'c'), (2, 'a'), (2, 'b'), (2, 'c'), (3, 'a'), (3, 'b'), (3, 'c')] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def caesar_encrypt(plain_text, shift):\n    encrypted_text = \"\"\n    \n    for c in plain_text:\n        c_ascii = ord(c)+shift \n        encrypted_text += chr(c_ascii)\n        \n    return encrypted_text\n\nplain_text = \"Hello World!\"\nshift = 5\nencrypted_text = caesar_encrypt(plain_text, shift)\nprint(\"encrypted_text =\", encrypted_text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: n = 10\n\nlist_numbers = []\nfor i in range(0,n+1):\n    list_numbers.append(i)\n\nprint(list_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: largest = 0\nlist = [3, 6, 8, 11, 12]\n\nfor i in list:\n  if i > largest:\n    largest = i\n\nprint(largest) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_of_names= [\"Asher\", \"Aster\", \"Athena\", \"Robert\"]\nlist_of_names.sort()\n\nprint(list_of_names) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Print all prime numbers up to 100\n\nfor num in range(2,101):  \n   if all(num%i!=0 for i in range(2,num)):\n      print(num) but is not the same. just give one example and only return the code."}
