{"prompt": "make some code that functions the same as the following code: def sum_digits(n):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum\n\nresult = sum_digits(323)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef validate_email(email):\n  email_regex = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,4}$'\n  return re.match(email_regex, email) != None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def prime_numbers(lower_bound, upper_bound):\n    primes = []\n    for num in range(lower_bound, upper_bound + 1):\n        if all(num % i != 0 for i in range(2, num)):\n            primes.append(num)\n \n    return primes\n \nprime_numbers(20, 50) # returns [23, 29, 31, 37, 41, 43, 47] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: x = [45, 65]\ntotal = 0\nfor i in range(len(x)):\n  total += x[i]\n  average = total / len(x)\n\nprint(\"Average of the numbers is:\", average) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def deep_learning_model(X, y):\n    model = Sequential()\n    model.add(Embedding(MAX_NB_WORDS, EMBEDDING_DIM, input_length=X.shape[1]))\n    model.add(SpatialDropout1D(0.2))\n    model.add(LSTM(100, dropout=0.2, recurrent_dropout=0.2))\n    model.add(Dense(13, activation='softmax'))\n    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def partition_list(list_a, size):\n return [list_a[i * size:(i + 1) * size] for i in range((len(list_a) + size - 1) // size )] \n \npartition_list(list_a, size) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def contains_chars(str1, str2):\n if any([c in str1 for c in str2]):\n return True\n return False\n\nstring1 = \"Hello\"\nstring2 = \"eo\"\n\nprint(contains_chars(string1, string2)) // Outputs: True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras import layers\n\n#importing the dataset\ndf = pd.read_csv('spam.csv', encoding='latin-1')\ndf.head()\n\n#cleaning the data\nmsg = df.v2\ncorpus = msg.apply(lambda row: row.lower())\n\n#splitting dataset into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(corpus, msg, test_size=0.2, random_state=0)\n\n#vectorizing the data\nvectorizer = CountVectorizer()\nX_train = vectorizer.fit_transform(X_train)\n\n#generating the model\nmodel = Sequential()\nmodel.add(layers.Dense(10, input_shape=(X_train.shape[1],), activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.summary()\n\n#training the model\nhistory = model.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test), batch_size=128, verbose=2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Rectangle: \n    def __init__(self, width, length): \n        self.width = width \n        self.length = length\n\n    def get_area(self): \n        return self.length * self.width \n\n    def get_perimeter(self):\n        return 2*(self.length + self.width) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def gcd(a, b): \n    if a == 0: \n        return b \n    return gcd(b % a, a) \n\nif __name__ == '__main__':\n    a = 4\n    b = 12\n    result = gcd(a, b) \n    print (\"GCD of 4 and 12 is \" + str(result)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \nimport pandas as pd \nfrom sklearn.linear_model import LinearRegression \n  \n#read the dataset\ndata = pd.read_csv('house_data.csv') \n  \n#split features and target\nX = data.iloc[:, :-1].values \ny = data.iloc[:, 3].values \n  \n#initialize the linear regression model  \nmodel = LinearRegression() \n  \n# fit the model with the data \nmodel.fit(X, y) \n  \n#make predictions on the test set\npredicted_price = model.predict([[square_footage, num_bedrooms, num_bathrooms]]) \n  \nprint('The expected price for the house is: $',predicted_price) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n  \n# Function to generate a random number between 1 and 10\ndef random_num(): \n    number = random.randint(1, 10) \n    return number \n  \n# Driver code \nnum = random_num() \nprint(\"Random number between 1 and 10 is: \", num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def build_city_info_dictionary(city, location, population):\n    city_info_dict = dict()\n    city_info_dict[city] = (location, population)\n    return city_info_dict\n\ncity = 'Dallas'\nlocation = 'Texas, USA'\npopulation = '1.3 million'\n\ncity_info_dict = build_city_info_dictionary(city, location, population)\nprint(city_info_dict)  # {'Dallas': ('Texas, USA', '1.3 million')} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_list(arr):\n    rev_arr = []\n    for i in range(len(arr)-1,-1,-1):\n        rev_arr.append(arr[i])\n    return ''.join(map(str,rev_arr))\n\narr = [1, 3, 5, 7]\noutput_string = reverse_list(arr) \nprint(output_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_prime_factor(n): \n  \n    # Initialize the maximum prime factor \n    # variable with the lowest one \n    maxPrime = -1\n      \n    # Print the number of 2s that divide n \n    while n % 2 == 0: \n        maxPrime = 2\n        n >>= 1      # equivalent to n /= 2 \n          \n    # n must be odd at this point,  \n    # thus skip the even numbers and  \n    # iterate only for odd integers \n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        while n % i == 0: \n            maxPrime = i \n            n = n / i  \n      \n    # This condition is to handle the \n    # case when n is a prime number \n    # greater than 2 \n    if n > 2: \n        maxPrime = n \n      \n    return int(maxPrime) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_abundant(number):\n    sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum += i\n    return sum > number but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Movie:\n def __init__(self, title, release_year, rating):\n self.title = title\n self.release_year = release_year\n self.rating = rating\n\n# Test\nmovie = Movie(\"The Godfather\", 1972, 9.2)\nprint(movie.title) # The Godfather but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_all_substrings(s, k):\n    substrings = []\n    for start_idx in range(len(s)):\n        if start_idx + k > len(s):\n            break\n        for end_idx in range(start_idx+k, len(s)+1):\n            substrings.append(s[start_idx:end_idx])\n    return substrings\n\ns = \"abcdefg\"\nk = 2\n\nprint(find_all_substrings(s, k)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def avg_list(lst): \n  sum_lst = 0\n  for i in range(len(lst)): \n    sum_lst = sum_lst + lst[i] \n  return sum_lst/len(lst) \n  \nprint(avg_list([1, 3, 5, 3, 7, 1])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: a.sort(key=len, reverse=True)\n# Output: ['elephant', 'giraffe', 'ball', 'apple', 'dog', 'cat', 'frog'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\nx = np.random.randint(0,5,(5,5))\nprint(x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: text = \"The quick brown fox jumps over the lazy dog\"\n\ndef remove_duplicate_words(text):\n  words = []\n  for word in text.split():\n    if not words or word != words[-1]:\n      words.append(word)\n  \n  return \" \".join(words)\n\ntext = \"The the quick brown fox fox jumps over the lazy dog dog\"\ntext = remove_duplicate_words(text)\nprint(text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def substrings(s):\n    sub_str_list = []\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)+1):\n            sub_str = s[i:j]\n            sub_str_list.append(sub_str)\n    return sub_str_list\n\nresult = substrings(\"python\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def capitalize(input_string):\n    if len(input_string) == 0:\n        return ''\n    else:\n        words = input_string.split()\n        capitalized_words = [word.capitalize() for word in words]\n        return ' '.join(capitalized_words)\n\nprint(capitalize('The quick brown fox')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def index_of_item(list_of_items, item):\n    for i in range(len(list_of_items)):\n        if list_of_items[i] == item:\n            return i\n\nlist_of_items = [\"a\", \"b\", \"c\"]\nresult = index_of_item(list_of_items, \"b\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import threading\n\nstring = 'Hello World'\n\ndef reverse_string(string, direction):\n if direction == 'left':\n  string = string[::-1]\n elif direction == 'right':\n  string = string[::1]\n print(string)\n\nt1 = threading.Thread(target=reverse_string, args=(string, 'left'))\nt2 = threading.Thread(target=reverse_string, args=(string, 'right'))\n\nt1.start()\nt2.start()\n\nt1.join()\nt2.join() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter as tk\n \nroot = tk.Tk()\n\n# Create greeting label\ngreeting = tk.Label(text='Hello World!')\ngreeting.pack()\n\ntk.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sorted_words = sorted(input_string.split(), key=str.lower)\n\nprint('Sorted words are:')\n\nfor word in sorted_words:\n print(word) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import the required packages\nimport nltk\nfrom transformers import *\n\n# Load the pretrained model\nmodel = BertTokenizer.from_pretrained('bert-base-cased')\n\n# Tokenize the input text\ninput_ids = model.encode(text)\n\n# Construct the text analysis library\ntext_analysis = {\n    'tokens': model.convert_ids_to_tokens(input_ids),\n    'sentiments': model.polarity_scores(input_ids)\n}\n\n# Print the library\nprint(text_analysis) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longestPalSubstr(string):\n    maxLength = 1\n    start = 0\n    length = len(string)\n  \n    low = 0\n    high = 0\n  \n    # One by one consider every character as center point of even and length palindromes \n    for i in range(1, length): \n        # Find the longest even length palindrome with center points as i-1 and i. \n        low = i - 1\n        high = i \n        while low >= 0 and high < length and string[low] == string[high]: \n            if high - low + 1 > maxLength: \n                start = low \n                maxLength = high - low + 1\n            low -= 1\n            high += 1\n  \n        # Find the longest odd length palindrome with center point as i \n        low = i - 1\n        high = i + 1\n        while low >= 0 and high < length and string[low] == string[high]: \n            if high - low + 1 > maxLength: \n                start = low \n                maxLength = high - low + 1\n            low -= 1\n            high += 1\n  \n    print(\"Longest palindrome substring is:\", end = \"\") \n    print(string[start:start + maxLength]) \n\nstring = \"forgeeksskeegfor\"\nlongestPalSubstr(string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_Fibonacci_sequence(length):\n    # Initialize the sequence\n    fib_sequence = [0, 1]\n\n    # Generate the sequence\n    for i in range(2, length):\n        fib_sequence.append(fib_sequence[i - 1] + fib_sequence[i - 2])\n\n    # Return the sequence\n    return fib_sequence\n\nprint(generate_Fibonacci_sequence(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(num): \n    # Initialize first two Fibonacci Numbers \n    a = 0\n    b = 1\n    # Initialize result \n    result = 0\n  \n    if num == 0: \n        return a \n    elif num == 1: \n        return b \n    else: \n        for i in range(2, num + 1): \n            # Sum numbers\n            result = a + b \n            # Initialize a and b\n            a = b \n            b = result \n    return result \n  \n# Using memoization\ndef fibonacci_memoize(num, memo): \n    # Check if the entry is in the array \n    if memo[num] is not None: \n        return memo[num] \n    # Summize numbers if entry is not in array\n    if num <= 1: \n        result = num \n    else: \n        result = fibonacci_memoize(num - 1, memo) + fibonacci_memoize(num - 2, memo) \n    # Save result in array  \n    memo[num] = result \n    return result \n  \n#Main function\ndef main(): \n    num = int(input(\"Enter number: \")) \n    \n    #result without memorization\n    result_1 = fibonacci(num)\n    print(f\"Result without memoization: {result_1}\") \n      \n    # Intialize a memoization array \n    memo = [None] * (num + 1)\n    #result with memorization\n    result_2 = fibonacci_memoize(num, memo)  \n    print(f\"Result with memoization: {result_2}\") \n\nif __name__ == \"__main__\": \n    main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def extract_numbers(s): \n    return [int(el) for el in s.split(',') if el.lstrip('-').isnumeric()] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Detect the intent of the email\nintent = \"lead\"\n\n# Label the email\nlabel = \"Lead\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.corpus import wordnet\n\n# Define the list of animal words\nanimal_words = ['dog', 'cat', 'mouse', 'bird', 'fish', 'lion', 'tiger']\n\n# Define the list of vehicle words \nvehicle_words = ['car', 'truck', 'bike', 'bus', 'train', 'boat']\n\n# Define a function to classify nouns\ndef classify(noun):\n # Find the synsets (synonyms) of the given noun\n synsets = wordnet.synsets(noun)\n \n # Get the first synset\n synset = synsets[0]\n\n # Get the lemmas (words in the synset)\n lemmas = synset.lemma_names()\n\n # Check if the lemmas in the synset are in the animal or vehicle word list\n if any([word in lemmas for word in animal_words]):\n  return 'Animal'\n elif any([word in lemmas for word in vehicle_words]):\n  return 'Vehicle'\n else:\n  return 'Unknown'\n\n# Define a noun to classify\nnoun = 'elephant'\n\n# Classify the noun\nclassification = classify(noun)\n\n# Print the classification\nprint(classification) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for num in [1, 5, 8]: \n    print(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_lists(list_one, list_two):\n    \"\"\"Compare two lists of strings and return a list containing strings found in both.\"\"\"\n    result_list = []\n    for elem in list_one:\n        if elem in list_two:\n            result_list.append(elem)\n    return result_list\n\nlist_one = [\"apple\", \"banana\", \"carrot\", \"kiwi\"]\nlist_two = [\"kiwi\", \"cucumber\", \"grape\", \"apple\"]\n \n\nprint(compare_lists(list_one, list_two))\n# Output: [\"apple\", \"kiwi\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to remove all vowels\ndef removeVowels(string):\n\tvowels = ('a', 'e', 'i', 'o', 'u') \n\tfor x in string.lower():\n\t\tif x in vowels:\n\t\t\tstring = string.replace(x, \"\")\n\t\t\t\t\n\treturn string\n\n# Get input from user\ninput_string = input(\"Enter a string: \")\n\n# Remove all vowels and capitalize\noutput_string = removeVowels(input_string).upper()\n\n# Print the result\nprint(output_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculateSum(n):\n\treturn (n * (n+1))//2\n\nprint(calculateSum(integer)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_numbers(a, b):\n  print(a + b)\n\nadd_numbers(3, 2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def concat_string(str1, str2):\n    return str1 + str2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics import accuracy_score\n\n# Load the data\nX_train = [...]\ny_train = [...]\nX_test = [...]\ny_test = [...]\n\n# Create the count vectorizer\nvectorizer = CountVectorizer()\nX_train_vectors = vectorizer.fit_transform(X_train)\nX_test_vectors = vectorizer.transform(X_test)\n\n# Create the Multinomial Naive Bayes classifier\nclf = MultinomialNB()\nclf.fit(X_train_vectors, y_train)\n\n# Make predictions\npredictions = clf.predict(X_test_vectors)\n\n# Print accuracy\nprint(accuracy_score(y_test, predictions)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_strings(str1, str2):\n    str1 = str1.lower()\n    str2 = str2.lower()\n    \n    return str1 == str2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_phone_number():\n    return '{}{}{}'.format(\n        random.randint(0, 9),\n        random.randint(0, 9),\n        ''.join( map( str, [random.randint(0, 9) for i in range(0, 9)]) )\n    )\n\nprint(generate_phone_number()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def nameLengths(names):\n lengths = []\n for name in names:\n lengths.append(len(name))\n return lengths\n\n# Example\nnameLengths([\"Alice\", \"John\", \"Steve\"]) # [5, 4, 5] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter \n  \nstr = \"Python\"\n\n# character count \n# using collections.Counter() \nres = Counter(str) \n\n# printing result  \nprint(\"Count of all characters in GeeksforGeeks is :\\n \"\n                                        +  str(res)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def c2f(c):\n return (c * 9 / 5) + 32\n\ncelsius = [21, 12, -4]\n\nfahrenheit = []\nfor temp in celsius:\n fahrenheit.append(c2f(temp))\n\nprint(fahrenheit) \n# Output: [69.8, 53.6, 24.8] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from random import shuffle \n\ndef random_permutation(lst): \n    shuffle(lst) \n    return lst but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport bs4\nfrom lxml import html\n\nurl = 'https://example.com'\nheaders = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}\nr = requests.get(url, headers=headers)\n\ntree = html.fromstring(r.content)\nlinks = tree.xpath('//a/@href')\n\nfor link in links:\n    print(link) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_sort(nums):\n    if len(nums) > 1:\n        mid_index = len(nums) // 2\n        left_half = nums[:mid_index]\n        right_half = nums[mid_index:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                nums[k] = left_half[i]\n                i += 1\n            else:\n                nums[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            nums[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            nums[k] = right_half[j]\n            j += 1\n            k += 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The GPT-3 model should take in code snippets with given instructions, and generate code snippets in Python based on those instructions. It should be able to generate code for various programming tasks, from simple to complex, such as data cleaning, data manipulation, custom functions, feature engineering, testing, and object-oriented programming. The model should also be able to recognize patterns and apply them to new code snippets. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\njson_string = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\npython_dict = json.loads(json_string)\n\nprint(python_dict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import boto3\nimport json\n\ndef lambda_handler(event, context):\n # Create an SES client\n ses = boto3.client('ses')\n\n # Get the email address from the input\n email = event['email']\n\n# Construct the email\nresponse = ses.send_email(\n Destination={\n 'ToAddresses': [\n email\n ]\n },\n Message={\n 'Body': {\n 'Text': {\n 'Charset': 'UTF-8',\n 'Data': 'Welcome! Thank you for signing up with us.'\n }\n },\n 'Subject': {\n 'Charset': 'UTF-8',\n 'Data': 'Welcome!'\n }\n },\n Source='noreply@example.com'\n)\n\n# Return the message ID\nreturn {\n 'message': 'Email sent successfully.',\n 'messageId': response['MessageId']\n } but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def flatten_list(list_of_lists):\n    flattened = []\n    for sub_list in list_of_lists:\n        for item in sub_list:\n            flattened.append(item)\n    return flattened but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #imports\nimport requests\nfrom bs4 import BeautifulSoup\n\n#setup \nurl = 'https://www.example.com/example-product'\npage = requests.get(url)\n\n#scraping \nsoup = BeautifulSoup(page.content, 'html.parser')\nname = soup.h1.string\nprice = soup.find('span', class_='example-price').string\ndescription = soup.find('div', class_='example-description').string\n\n#output\nprint(name)\nprint(price)\nprint(description) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef convert_to_identifier(input_string):\n    # Replace all non-alphanumeric characters\n    output_string = re.sub(r'\\W+', '', input_string)\n    \n    # If the first character is non-alphabetic, prepend an underscore\n    if not output_string[0].isalpha(): \n        output_string = \"_\" + output_string\n        \n    return output_string\n\nidentifier = convert_to_identifier(\"hello-world\")\nprint(identifier) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent(list): \n\tcount = 0\n\telement = None\n\tfor i in list: \n\t\tcurr_element = i \n\t\tcurr_count = list.count(i) \n\t\tif curr_count > count: \n\t\t\telement = curr_element \n\t\t\tcount = curr_count \n\t\n\treturn element, count\n\nmost_frequent_element, frequency = most_frequent([3, 5, 4, 3, 2, 1, 4, 3, 4]) \nprint(most_frequent_element)  \t\n# Output: 4 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(f\"Given string is {string}, and its length is {len(string)}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python -OO\n# This file is part of Archivematica.\n#\n# Copyright 2010-2013 Artefactual Systems Inc. <http://artefactual.com>\n#\n# Archivematica is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Archivematica is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Archivematica.  If not, see <http://www.gnu.org/licenses/>.\n\n# @package Archivematica\n# @subpackage archivematicaClientScript\n# @author Joseph Perry <joseph@artefactual.com>\n\nimport os\nimport sys\nimport shutil\n\n\n\nrequiredDirectories = [\"logs\", \"logs/fileMeta\", \"metadata\", \"metadata/submissionDocumentation\", \"objects\", \"objects/Maildir\"]\noptionalFiles = \"processingMCP.xml\"\n\ndef restructureMaildirDirectory(unitPath):\n    for dir in requiredDirectories:\n        dirPath = os.path.join(unitPath, dir)\n        if not os.path.isdir(dirPath):\n            os.mkdir(dirPath)\n            print \"creating: \", dir\n    for item in os.listdir(unitPath):\n        dst = os.path.join(unitPath, \"objects\", \"Maildir\") + \"/.\"\n        itemPath =  os.path.join(unitPath, item)\n        if os.path.isdir(itemPath) and item not in requiredDirectories:\n            shutil.move(itemPath, dst)\n            print \"moving directory to objects/Maildir: \", item\n        elif os.path.isfile(itemPath) and item not in optionalFiles:\n            shutil.move(itemPath, dst)\n            print \"moving file to objects/Maildir: \", item\n\nif __name__ == '__main__':\n    target = sys.argv[1]\n    restructureMaildirDirectory(target)\n    \n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from itertools import permutations\n\nstrings = ['AB', 'CD']\n\nperm = permutations(strings)\n\nfor string in list(perm):\n    print(string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def permutations(nums):\n    if len(nums) <=1:\n        yield nums\n    else:\n        for perm in permutations(nums[1:]):\n            for i in range(len(nums)):\n                # nb elements[0:1] works in both string and list contexts\n                yield perm[:i] + nums[0:1] + perm[i:]\n\n# Driver program to test above\ndata = [1, 2, 3] \nfor perm in list(permutations(data)): \n    print(perm) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class CarData:\n    def __init__(self):\n        self.cars = {}\n\n    def add_car(self, name, color, price):\n        car = {\n            \"name\": name,\n            \"color\": color,\n            \"price\": price\n        }\n        self.cars[name] = car\n\n    def get_car(self, name):\n        if name in self.cars:\n            return self.cars[name]\n        return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def clean_dataset(dataset):\n cleaned_dataset = dataset.copy()\n cleaned_dataset['age'] = int(dataset['age'])\n cleaned_dataset['height'] = float(dataset['height'].split(' cm')[0])\n cleaned_dataset['weight'] = float(dataset['weight'].split(' kg')[0])\n return cleaned_dataset but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(str1, str2): \n    # space complexity O(1) \n    count = [0] * 26\n        \n    # count occurances of character in first string \n    for i in range(len(str1)): \n            count[ord(str1[i]) - ord('a')] += 1\n                \n    # subtracting count for each character of second string \n    for i in range(len(str2)): \n            count[ord(str2[i]) - ord('a')] -= 1\n                \n    # If both strings are anagrams, all counts should be 0 \n    for i in range(26):             \n            if (count[i] != 0): \n                return False\n\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_pair_with_sum(nums, target):\n  seen = set()\n  for num in nums:\n    if target - num in seen:\n      return [target - num, num]\n    seen.add(num)\n\nprint(find_pair_with_sum([2, 3, 4, 5], 5)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, firstName, lastName, age):\n        self.firstName = firstName\n        self.lastName = lastName\n        self.age = age but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from datetime import date\n\nstart_date = date(2020, 6, 5)\nend_date = date(2020, 6, 17)\ndelta = end_date - start_date\nprint(delta.days) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Car:\n    def __init__(self, year, make):\n        self.year = year\n        self.make = make but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: customer_data = {\n    'Name': 'John Smith',\n    'Address': '123 Main Street, Anytown, CA 12345',\n    'Phone': '555-555-5555'\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"Develop a model in Python to predict the price of a house given its size, age, and number of bedrooms.\"\"\"\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\n\n# Load the data\ndata = pd.read_csv('houses_data.csv')\n\n# Split the data into features and labels \nfeatures = data[['size','age','num_bedrooms']]\nlabels = data['price']\n\n# Build the model and train it\nmodel = LinearRegression()\nmodel.fit(features,labels)\n\n# Make predictions\npredictions = model.predict(features)\n\n# Calculate the mean squared error\nprint(mean_squared_error(labels, predictions)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(string):\n  return string == string[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def extractEvenNumbers(numbers): \n    even_numbers = [num for num in numbers if num % 2 == 0]\n    return even_numbers\n  \nnumbers = [1, 2, 3, 4, 5, 6, 7, 8]\neven_numbers = extractEvenNumbers(numbers)\nprint(even_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: combined_list = list1 + list2\n\n# preserves duplicates\nprint(list(set(combined_list))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd \n  \ndef pivot_dataframe(df): \n    df_pivot = df.pivot(index = 'A', columns ='B') \n    return df_pivot\n\ndf = pd.DataFrame({'A':{1:'a',2:'c'}, \n                   'B':{1:'b',2:'d'} \n                  }) \n\nprint(pivot_dataframe(df)) \n# Output \n   B  \nA     b  d\n  a  c but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sorted_d = dict(sorted(d.items(), key=lambda x: x[1]))\nprint(sorted_d)\n\n    # Output: {0: 0, 2: 1, 1: 2, 4: 3, 3: 4} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class HighestNumberFinder:\n    def __init__(self, array):\n        self.array = array\n    \n    def find_highest_number(self):\n        highest_number = self.array[0]\n        for number in self.array:\n            if (number > highest_number):\n                highest_number = number\n        return highest_number but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from string import Template\n\nmytemplate = Template('<html><body><title>$title</title><h1>$heading</h1>$content</body></html>')\n\ndata = {\n    'title':'My Website',\n    'heading':'Hello World!',\n    'content': 'This is my website!'\n}\n\nhtml = mytemplate.substitute(data)\n\nprint(html) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # print hello world\nprint(\"Hello World!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def concat_string(str1, str2):\n    return str1 + str2\n\nresult = concat_string(str1, str2)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com/stock-prices'\nsource = requests.get(url).text\nsoup = BeautifulSoup(source, 'html.parser')\nstocks = soup.find_all('div', class_='stock-price')\n\nfor stock in stocks:\n # Extract stock name\n name = stock.find('h2').text\n # Extract stock price\n price = stock.find('span').text\n \n # Print stock name and price\n print(f'{name}: {price}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn import datasets \nfrom sklearn.linear_model import LinearRegression \n  \n# load the diabetes datasets \ndiabetes = datasets.load_diabetes() \n  \n# fit a linear regression model to the data \nmodel = LinearRegression() \nmodel.fit(diabetes.data, diabetes.target) \n  \n# make prediction \nvalue = model.predict([[5.1, 3.3, 1.7, 0.5]])\nprint(value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reformat_string(string, mapping):\n    for k, v in mapping.items():\n        string = string.replace('{' + k + '}', v)\n    return string\n\nif __name__ == \"__main__\":\n    string = \"Hello {name}, it's {time} to go\"\n    mapping = {\"name\": \"John\", \"time\": \"2pm\"}\n    print(reformat_string(string, mapping)) # Output: Hello John, it's 2pm to go but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport json\n\n# Get the response from reddit\nurl = \"https://www.reddit.com/r/dataisbeautiful/top/.json\"\nheaders = {\"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36\"}\nresponse = requests.get(url, headers=headers, allow_redirects=False)\ndata = json.loads(response.text)\n\n# Get the list of the top 20 posts\npost_list = data['data']['children']\ntop_20_posts = [post['data']['title'] for post in post_list[:20]]\n\nprint(top_20_posts) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_letter(word, letter):\n    new_word = ''\n    for char in word:\n        if char != letter:\n            new_word += char\n    return new_word \n\nprint(remove_letter('Hello World!', 'o')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_substring(string, substring, replacement):\n    res = \"\"\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            res += replacement\n            i += len(substring)\n        else:\n            res += string[i]\n    return res but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\n\ndef is_sorted(nums):\n for i in range(len(nums) - 1):\n  if nums[i] > nums[i + 1]:\n   return False\n return True\n\nnums = [int(x) for x in sys.argv[1:]]\n\nif is_sorted(nums):\n print('The list is sorted')\nelse:\n print('The list is not sorted') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_from_dict(d, key):\n    if key in d:\n        del d[key]\n    return d\n\nresult = remove_from_dict(sample_dict, 'three')\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n): \n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1) \n\nx = 5\nresult = factorial(x) \nprint(result) \n\n# Output: \n120 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Copyright (C) 2011 Adriano Monteiro Marques\n#\n# Author: Amit Pal <amix.pal@gmail.com>\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nfrom django import forms\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.contrib.auth.forms import AdminPasswordChangeForm\nfrom django.contrib.auth.models import User\nfrom django.utils.translation import ugettext as _\nfrom datetime import datetime\nimport pytz\nfrom pytz import timezone\nimport pdb\n\nfrom netadmin.users.models import UserProfile\n\n\nclass UserForm(forms.ModelForm):\n    class Meta:\n        model = User\n        fields = ('first_name', 'last_name', 'email')\n\nclass UserProfileForm(forms.ModelForm):\n    class Meta:\n        model = UserProfile\n        fields = ('is_public', 'in_search')\n        \nclass UserRegistrationForm(UserCreationForm):\n    email2 = forms.EmailField(label=_(\"E-mail\"))\n    timezone2 = forms.ChoiceField(choices=[(x, x) for x in pytz.common_timezones], label = _(\"TimeZone\"))\n    skype = forms.CharField(max_length=20)\n    \n    def clean_email2(self):\n        email2 = self.cleaned_data['email2']\n        try:\n            user = User.objects.get(email=email2)\n        except User.DoesNotExist:\n            return email2\n        raise forms.ValidationError(_(\"Account with this e-mail address already exists.\"))\n    \n    def save(self, commit=True):\n        user = super(UserRegistrationForm, self).save(commit=False)\n        user.email = self.cleaned_data[\"email2\"]\n        user.is_active = False\n        if commit:\n            user.save()\n            user_profile = user.get_profile()\n            user_profile.timezone = self.cleaned_data[\"timezone2\"]\n            user_profile.skype = self.cleaned_data[\"skype\"]\n            user_profile.save()\n        return user\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Load data\nimport pandas as pd\ndf = pd.read_csv('data.csv')\n\n# Extract features and target\nX = df.drop('price', axis=1).values\ny = df['price'].values\n\n# Split into train and test \nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train machine learning model\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)\n\n# Generate predictions\ny_pred = regressor.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_gcd(a, b): \n    if a == 0: \n        return b \n    if b == 0: \n        return a \n    if a == b: \n        return a \n    if a > b: \n        return find_gcd(a-b, b) \n    return find_gcd(a, b-a) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def books_query():\n    books_query = '''\n    query {\n        books {\n            id\n            title\n            author\n            published_date\n        }\n    }\n    '''\n    return books_query but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Customer:\n def __init__(self, customer_id, customer_name, customer_address):\n self.customer_id= customer_id\n self.customer_name = customer_name\n self.customer_address = customer_address but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n    def __init__(self, name, rate_per_hour, hours_worked):\n        self.name = name\n        self.rate_per_hour = rate_per_hour\n        self.hours_worked = hours_worked\n    \n    def calculate_salary(self):\n        return self.rate_per_hour * self.hours_worked but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def distance(p1, p2):\n    return ((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)**0.5\n \ndef closest_pair(points):\n    min_dist = float('inf')\n    closest_pair = None\n    for i, p1 in enumerate(points):\n        for j, p2 in enumerate(points[i+1:]):\n            d = distance(p1, p2)\n            if d < min_dist:\n                min_dist = d\n                closest_pair = p1, p2\n    return closest_pair but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def has_duplicates(arr):\n    seen = set()\n    for elem in arr:\n        if elem in seen:\n            return True\n        else:\n            seen.add(elem)\n    return False\n\ntest_arr = [1, 2, 3, 4, 5]\nresult = has_duplicates(test_arr)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def round_to_two_decimal_places(n):\n    return round(n, 2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: <html>\n <body>\n <h1>Search Example</h1>\n\n <form action=\"process_form.py\" method=\"post\">\n <input type=\"text\" name=\"query\" placeholder=\"Search...\">\n <input type=\"submit\" value=\"Search\">\n </form>\n \n <div>\n {{results}}\n </div>\n \n </body>\n</html>\n\n## process_form.py\nimport requests\nimport json\n\nquery = request.form.get('query')\n\nresponse = requests.get(f'https://example.com/query?q={query}')\n\nresults = json.loads(response.content)\n\nreturn render_template('index.html', results=results) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack:\n \n    def __init__(self):\n        self.stack = []\n \n    def push(self, data):\n        self.stack.append(data)\n \n    def pop(self):\n        if self.is_empty():\n            return None\n        else:\n            return self.stack.pop()\n \n    def peek(self):\n        return self.stack[-1]\n \n    def is_empty(self):\n        return len(self.stack) == 0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_numbers(a, b):\n try:\n  sum = a + b\n except:\n  print(\"Error: Could not compute the sum of the numbers\")\n  return None\n else:\n  return sum but is not the same. just give one example and only return the code."}
