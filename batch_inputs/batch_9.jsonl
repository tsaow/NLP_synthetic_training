{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n#load dataset\ndf = pd.read_csv(\"housing_data.csv\")\n\n#split dataset\nX = df.drop(\"price\", axis=1)\ny = df[\"price\"]\n\n#train model\nmodel = LinearRegression()\nmodel.fit(X, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import torch\n\n# Load the pre-trained model\nmodel = torch.load('model.pt')\n\n# Get the input data\ninput_data = \"This movie was amazing!\"\n\n# Convert the input data into a tensor\ninput_tensor = torch.tensor([input_data])\n\n# Make a prediction with the pre-trained model\nprediction = model(input_tensor)\n\n# Get the results\nif prediction[0][0].item() > 0.5:\n  print('Positive sentiment')\nelse:\n  print('Negative sentiment') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list1 = [2, 3, 4, 5]\nlist2 = [1, 2, 4, 5]\n\ndef common_elements(list1, list2):\n    result = []\n    for item in list1:\n        if item in list2:\n            result.append(item)\n    return result\n\nprint(common_elements(list1, list2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def average(temperatures):\n    total = 0\n    for temp in temperatures:\n        total += temp\n    return total/len(temperatures)\n\nprint(average(temperatures)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\n'''Test for an openGL based stereo renderer - test binocular rendering to a single window\n\nDavid Dunn\nFeb 2017 - created\n\nwww.qenops.com\n\n'''\n__author__ = ('David Dunn')\n__version__ = '1.0'\n\nimport OpenGL\nOpenGL.ERROR_CHECKING = False      # Uncomment for 2x speed up\nOpenGL.ERROR_LOGGING = False       # Uncomment for speed up\n#OpenGL.FULL_LOGGING = True         # Uncomment for verbose logging\n#OpenGL.ERROR_ON_COPY = True        # Comment for release\nimport OpenGL.GL as GL\nimport math, os\nimport numpy as np\nimport dGraph as dg\nimport dGraph.ui as ui\nimport dGraph.cameras as dgc\nimport dGraph.shapes as dgs\nimport dGraph.materials as dgm\nimport dGraph.shaders as dgshdr\nimport dGraph.config as config\nimport dGraph.util.imageManip as im\nimport time\n\nMODELDIR = '%s/data'%os.path.dirname(__file__)\nWINDOWS = [{\n    \"name\": 'Test 5',\n    \"location\": (0, 0),\n    #\"location\": (2436, 1936), # px coordinates of the startup screen for window location\n    #\"size\": (1920, 1080),\n    \"size\": (1600,800), # px size of the startup screen for centering\n    \"center\": (400,400), # center of the display\n    \"refresh_rate\": 60, # refreshrate of the display for precise time measuring\n    \"px_size_mm\": 0.09766, # px size of the display in mm\n    \"distance_cm\": 20, # distance from the viewer in cm,\n    #\"is_hmd\": False,\n    #\"warp_path\": 'data/calibration/newRight/',\n    },\n]\n\ndef loadScene(renderStack, file=None, cross=False):                \n    '''Load or create our sceneGraph'''\n    scene = dg.SceneGraph(file)\n    stereoCam = dgc.StereoCamera('front', scene)\n    stereoCam.setResolution((renderStack.width/2, renderStack.height))\n    stereoCam.setTranslate(0.,-.06,0.)\n    stereoCam.setRotate(20.,0.,0.)\n    stereoCam.setFOV(50.)\n    stereoCam.IPD = .062\n    crosses = [\n        #np.array((.031,.0,-10.)),\n        #np.array((-.031,.0,-10.)),\n        np.array((-.2,-.2,-10.)),\n        np.array((-.2,.0,-10.)),\n        np.array((-.2,.2,-10.)),\n        np.array((.0,-.2,-10.)),\n        np.array((.0,.0,-10.)),\n        np.array((.0,.2,-10.)),\n        np.array((.2,-.2,-10.)),\n        np.array((.2,.0,-10.)),\n        np.array((.2,.2,-10.)),\n    ]\n    for idx, position in enumerate(crosses):\n        cross = dgs.PolySurface('cross%s'%idx, scene, file = '%s/cross.obj'%MODELDIR)\n        cross.setScale(.01,.01,.01)\n        cross.translate = position\n        renderStack.objects[cross.name] = cross\n        print(1,(idx/3.)/3.+1/3.,(idx%3)/3.+1/3.)\n        material = dgm.Material('material%s'%idx,ambient=(1,(idx/3.)/3.+1/3.,(idx%3)/3.+1/3.), amb_coeff=.5)\n        #material = dgm.Lambert('material%s'%idx,ambient=(1,0,0), amb_coeff=.5, diffuse=(1,1,1), diff_coeff=1)\n        cross.setMaterial(material)\n    renderStack.cameras = [stereoCam]\n    renderStack.append(stereoCam)\n    return True \n\ndef animateScene(renderStack, frame):\n    ''' Create motion in our scene '''\n    # infinity rotate:\n    y = 1\n    x = math.cos(frame*math.pi/60)\n    for obj in renderStack.objects.itervalues():\n        obj.rotate += np.array((x,y,0.))\n\ndef addInput():\n    for rs in renderStack:\n        ui.add_key_callback(arrowKey, ui.KEY_RIGHT, renderStack=rs, direction=3)\n        ui.add_key_callback(arrowKey, ui.KEY_LEFT, renderStack=rs, direction=2)\n        ui.add_key_callback(arrowKey, ui.KEY_UP, renderStack=rs, direction=1)\n        ui.add_key_callback(arrowKey, ui.KEY_DOWN, renderStack=rs, direction=0)\n\ndef arrowKey(window,renderStack,direction):\n    for o in renderStack.objects:\n        if direction == 3:    # print \"right\"\n            o.rotate(np.array((0.,5.,0.)))\n        elif direction == 2:    # print \"left\"\n            o.rotate(-np.array((0.,5.,0.)))\n        elif direction == 1:      # print 'up'\n            o.translate(np.array((0.,.01,0.)))\n        else:                   # print \"down\"\n            o.translate(-np.array((0.,.01,0.)))\n\ndef drawScene(renderStack):\n    ''' Render the stack '''\n    myStack = list(renderStack)                                     # copy the renderStack so we can pop and do it again next frame\n    temp = myStack.pop()\n    temp.render(renderStack.width, renderStack.height, myStack)     # Render our warp to screen\n\ndef setup():\n    winData = WINDOWS[0]\n    renderStack = ui.RenderStack()\n    renderStack.display = ui.Display(resolution=winData['size'])\n    ui.init()\n    mainWindow = renderStack.addWindow(ui.open_window(winData['name'], winData['location'][0], winData['location'][1], renderStack.display.width, renderStack.display.height))\n    if not mainWindow:\n        ui.terminate()\n        exit(1)\n    ui.make_context_current(mainWindow)\n    ui.add_key_callback(ui.close_window, ui.KEY_ESCAPE)\n    scenes = [loadScene(renderStack) for renderStack in renderStacks]\n    for rs in renderStacks:\n    \trs.graphicsCardInit()\n    return renderStacks, scenes, windows\n\ndef runLoop(renderStack, mainWindow):\n    # Print message to console, and kick off the loop to get it rolling.\n    print(\"Hit ESC key to quit.\")\n    frame = 0\n    start = time.time()\n    while not ui.window_should_close(mainWindow):\n        ui.make_context_current(mainWindow)\n        drawScene(renderStack)\n        now = time.time()\n        time.sleep(max((frame+1)/config.maxFPS+start-now,0))\n        ui.swap_buffers(mainWindow)\n        ui.poll_events()\n        #animateScene(renderStack, frame)\n        frame += 1\n    ui.terminate()\n    exit(0)\n\nif __name__ == '__main__':\n    renderStack, scene, windows = setup()\n    addInput()\n    runLoop(renderStack, windows[0])\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_prime_numbers(start, end):\n    for i in range(start, end + 1):\n        is_prime = True\n        # check for all numbers from 2 to (i - 1)\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            print(i, end=\" \") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n def __init__(self, name, age, grade, major):\n  self.name = name\n  self.age = age\n  self.grade = grade\n  self.major = major but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compute_readability(text):\n    \"\"\"Compute the readability score of a given text\"\"\"\n    words = 0\n    sentences = 0\n    syllables = 0\n    for word in text.split():\n        words += 1\n        syllables += count_syllables(word)\n\n    for sentence in text.split(\".\"):\n        sentences += 1\n\n    score = 206.835 - (1.015 * (words / sentences)) - (84.6 * (syllables / words))\n    return score\n\ndef count_syllables(word):\n    \"\"\"Count the number of syllables in a given word\"\"\"\n    vowels = \"aeiouAEIOU\"\n    syllables = 0\n    for letter in word:\n        if letter in vowels:\n            syllables += 1\n    if len(word) >= 3 and word[-3:] == \"ely\" or word[-2:] == \"es\":\n        syllables -= 1\n    return syllables but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n\nimport argparse\nimport os\nimport sys\nimport subprocess\n\n\ndef check_file(filename, excludes, extensions):\n    \"\"\"\n    Check if a file should be included in our check\n    \"\"\"\n    name, ext = os.path.splitext(filename)\n\n    if len(ext) > 0 and ext in extensions:\n        if len(excludes) == 0:\n            return True\n\n        for exclude in excludes:\n            if exclude in filename:\n                return False\n\n        return True\n\n    return False\n\n\ndef check_directory(directory, excludes, extensions):\n    output = []\n\n    if len(excludes) > 0:\n        for exclude in excludes:\n            if exclude in directory:\n                directory_excluded = False\n                return output\n\n    for root, _, files in os.walk(directory):\n        for file in files:\n            filename = os.path.join(root, file)\n            if check_file(filename, excludes, extensions):\n                print(\"Will check file [{}]\".format(filename))\n                output.append(filename)\n    return output\n\ndef get_git_root(git_bin):\n    cmd = [git_bin, \"rev-parse\", \"--show-toplevel\"]\n    try:\n        return subprocess.check_output(cmd).strip()\n    except subprocess.CalledProcessError, e:\n        print(\"Error calling git [{}]\".format(e))\n        raise\n\ndef clean_git_filename(line):\n    \"\"\"\n    Takes a line from git status --porcelain and returns the filename\n    \"\"\"\n    file = None\n    git_status = line[:2]\n    # Not an exhaustive list of git status output but should\n    # be enough for this case\n    # check if this is a delete\n    if 'D' in git_status:\n        return None\n    # ignored file\n    if '!' in git_status:\n        return None\n    # Covers renamed files\n    if '->' in line:\n        file = line[3:].split('->')[-1].strip()\n    else:\n        file = line[3:].strip()\n\n    return file\n\n\ndef get_changed_files(git_bin, excludes, file_extensions):\n    \"\"\"\n    Run git status and return the list of changed files\n    \"\"\"\n    extensions = file_extensions.split(\",\")\n    # arguments coming from cmake will be *.xx. We want to remove the *\n    for i, extension in enumerate(extensions):\n        if extension[0] == '*':\n            extensions[i] = extension[1:]\n\n    git_root = get_git_root(git_bin)\n\n    cmd = [git_bin, \"status\", \"--porcelain\", \"--ignore-submodules\"]\n    print(\"git cmd = {}\".format(cmd))\n    output = []\n    returncode = 0\n    try:\n        cmd_output = subprocess.check_output(cmd)\n        for line in cmd_output.split('\\n'):\n            if len(line) > 0:\n                file = clean_git_filename(line)\n                if not file:\n                    continue\n                file = os.path.join(git_root, file)\n\n                if file[-1] == \"/\":\n                    directory_files = check_directory(\n                        file, excludes, file_extensions)\n                    output = output + directory_files\n                else:\n                    if check_file(file, excludes, file_extensions):\n                        print(\"Will check file [{}]\".format(file))\n                        output.append(file)\n\n    except subprocess.CalledProcessError, e:\n        print(\"Error calling git [{}]\".format(e))\n        returncode = e.returncode\n\n    return output, returncode\n\n\ndef run_clang_format(clang_format_bin, changed_files):\n    \"\"\"\n    Run clang format on a list of files \n    @return 0 if formatted correctly.\n    \"\"\"\n    if len(changed_files) == 0:\n        return 0\n    cmd = [clang_format_bin, \"-style=file\",\n           \"-output-replacements-xml\"] + changed_files\n    print(\"clang-format cmd = {}\".format(cmd))\n    try:\n        cmd_output = subprocess.check_output(cmd)\n        if \"replacement offset\" in cmd_output:\n            print(\"ERROR: Changed files don't match format\")\n            return 1\n    except subprocess.CalledProcessError, e:\n        print(\"Error calling clang-format [{}]\".format(e))\n        return e.returncode\n\n    return 0\n\n\ndef cli():\n    # global params\n    parser = argparse.ArgumentParser(prog='clang-format-check-changed',\n                                     description='Checks if files chagned in git match the .clang-format specification')\n    parser.add_argument(\"--file-extensions\", type=str,\n                        default=\".cpp,.h,.cxx,.hxx,.hpp,.cc,.ipp\",\n                        help=\"Comma separated list of file extensions to check\")\n    parser.add_argument('--exclude', action='append', default=[],\n                        help='Will not match the files / directories with these in the name')\n    parser.add_argument('--clang-format-bin', type=str, default=\"clang-format\",\n                        help=\"The clang format binary\")\n    parser.add_argument('--git-bin', type=str, default=\"git\",\n                        help=\"The git binary\")\n    args = parser.parse_args()\n\n    # Run gcovr to get the .gcda files form .gcno\n    changed_files, returncode = get_changed_files(\n        args.git_bin, args.exclude, args.file_extensions)\n    if returncode != 0:\n        return returncode\n\n    return run_clang_format(args.clang_format_bin, changed_files)\n\nif __name__ == '__main__':\n    sys.exit(cli())\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# define a function to generate random numbers\ndef generate_random(start, end):\n\treturn random.randint(start, end)\n\n# generate a random number in the given range\nstart = 10\nend = 15\nprint(generate_random(start, end)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to display introduction of \n# Object Oriented Programming\n\n# Creating a class\nclass Person:\n\n    # Constructor \n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    # Method\n    def introduce_self(self):\n        print(\"I'm {0} aged {1}.\".format(self.name, self.age))\n\n# Instantiating an object\np1 = Person(\"John\", 25)\n\n# Calling a method\np1.introduce_self() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_sum_subarray(arr): \n    n = len(arr) \n    max_sum = 0\n  \n    for i in range(n): \n        sum = arr[i] \n        for j in range(i + 1, n): \n            sum += arr[j] \n            if sum > max_sum: \n                max_sum = sum \n\n    return max_sum \n\n# Test array \narr = [2, -1, 3, 5, -7, 3] \n\n# Function Call \nmax_sum = max_sum_subarray(arr) \n  \n# Printing maximum sum \nprint(\"Maximum sum of the sub-array is\", max_sum) \n\n# Output: Maximum sum of the sub-array is 8 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_grid(grid_size):\n    for x in range(grid_size):\n        for y in range(grid_size):\n            print(grid_size, end=\" \")\n        print()\n\ngrid_size = 3\nprint_grid(grid_size) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def char_count(string): \n    count = 0\n    for char in string: \n        count += 1\n    print(\"Number of characters:\", count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import calendar\n\n# Input the year and month\nyear = int(input('Enter year: '))\nmonth = int(input('Enter month: '))\n\n# Generate the calendar\ncal = calendar.month(year, month)\n\n# Print the calendar\nprint(cal) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def number_to_words(num):\n    units_list = {\"0\": \"Zero\", \"1\": \"One\", \"2\": \"Two\", \"3\": \"Three\", \"4\":\n                  \"Four\", \"5\": \"Five\", \"6\": \"Six\", \"7\": \"Seven\", \"8\": \"Eight\",\n                  \"9\": \"Nine\"}\n    tens_list = { \"10\": \"Ten\", \"11\": \"Eleven\", \"12\": \"Twelve\", \"13\": \"Thirteen\",\n                  \"14\": \"Fourteen\", \"15\": \"Fifteen\", \"16\": \"Sixteen\", \"17\":\n                  \"Seventeen\", \"18\": \"Eighteen\", \"19\": \"Nineteen\", \"20\":\n                  \"Twenty\", \"30\": \"Thirty\", \"40\": \"Forty\", \"50\": \"Fifty\",\n                  \"60\": \"Sixty\", \"70\": \"Seventy\", \"80\": \"Eighty\", \"90\":\n                  \"Ninety\"}\n    \n    output = \"\"\n    if num in units_list:\n        output += units_list[str(num)]\n    elif num in tens_list:\n        output += tens_list[str(num)]\n    else:\n        if len(str(num)) >= 3:\n            output += units_list[str(num)[0]] + \" Hundred \"\n            output += number_to_words(int(str(num)[1:]))\n        else:\n            output += tens_list[str(num)[0]+\"0\"] + \" \" \n            output += units_list[str(num)[1]]\n    return output\n\nresult = number_to_words(123)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def anagram_grouping(words):\n   anagrams = dict()\n   #loop through the list and sort each word\n   for word in words: \n      sorted_word = ''.join(sorted(word))\n      # check if sorted word exists as a key in dictionary\n      if sorted_word not in anagrams: \n         anagrams[sorted_word] = [word] #add key and word to dict\n      else: \n         anagrams[sorted_word].append(word) #add word to existing anagrams\n\n   #create a list of anagrams\n   result = []\n   for values in anagrams.values():\n      result.append(values)\n\n   return result\n\n\nwords = [\"tea\", \"eat\", \"ate\", \"apple\", \"plea\", \"rat\", \"tar\"]\nans = anagram_grouping(words)\nprint(ans) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def my_process(data):\n    result = [] \n    for item in data: \n        processed_data = do_process(item) \n        result.append(processed_data) \n    return result\n\ndef my_optimized_process(data):\n    return [do_process(item) for item in data] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def rearrange(arr):\n    even, odd = [], [] \n    for n in arr:\n        if n % 2 == 0:\n            even.append(n)\n        else:\n            odd.append(n)\n    return [item for pair in zip(even, odd) for item in pair] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee():\n    def __init__(self, name, salary, age):\n        self.name = name\n        self.salary = salary\n        self.age = age but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def selection_sort(A): \n    for i in range(len(A)): \n        minimum = i \n        for j in range(i+1, len(A)): \n            if A[minimum] > A[j]: \n                minimum = j \n        A[i], A[minimum] = A[minimum], A[i] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import necessary libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n#load and allocate dataset\ndataset = pd.read_csv(\"dataset.csv\")\nX = dataset.Text\ny = dataset.Label\n\n#Preprocessing\ncv = CountVectorizer()\nX = cv.fit_transform(X)\n\n#Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42, stratify=y)\n\n#Model training\nclf = MultinomialNB()\nclf.fit(X_train,y_train)\n\n\n#Evaluate the model\nscore = clf.score(X_test,y_test)\nprint(\"Accuracy of model: \",score) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_arr(arr):\n    result = []\n    for a in arr:\n        if a != 'b':\n            result.append(a)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def backwards_for_loop(n):\n  for i in range(n, 0, -1):\n    # Do something with i\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_closest_sum_of_two(arr):\n    if len(arr) < 2:\n        return None\n    \n    # initialize the closest sum and indicies\n    closest_sum = arr[0] + arr[1]\n    first_index = 0\n    second_index = 1\n    \n    # loop through the array and check for closer sums\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] + arr[j]) < abs(closest_sum):\n                closest_sum = arr[i] + arr[j]\n                first_index = i\n                second_index = j\n    \n    return arr[first_index], arr[second_index], closest_sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef coin_toss():\n    coin_side = random.choice(['Heads', 'Tails'])\n    print('The coin landed on', coin_side)\n\ncoin_toss() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack:\n    \n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)\n    def pop(self):\n        return self.items.pop()\n    def isEmpty(self):\n        return self.items == []\n    def peek(self):\n        return self.items[len(self.items)-1]\n    def size(self):\n        return len(self.items) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def parse_list_of_strings(list_of_strings):\n    date_list = []\n    for string in list_of_strings:\n        date_to_add = datetime.strptime(string, '%B %dth, %Y')\n        date_list.append(date_to_add)\n    return date_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Employee:\n def __init__(self, name, age, salary, department):\n self.name = name\n self.age = age\n self.salary = salary\n self.department = department\n\n def get_name(self):\n return self.name\n\n def get_age(self):\n return self.age\n\n def get_salary(self):\n return self.salary\n\n def get_department(self):\n return self.department but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, jsonify\n\napp = Flask(name)\n\n@app.route('/calculate_average', methods=['POST'])\ndef calculate_average():\n numbers = request.json['numbers']\n\n # calculate the sum\n total = 0\n for number in numbers:\n total += number\n\n # calculate the average\n average = total / len(numbers)\n\n return jsonify({'average': average})\n\nif name == 'main':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def upper_string(str): \n    res = \"\" \n    for i in range(len(str)): \n        if str[i].isupper(): \n            res += str[i] \n        else: \n            res += chr(ord(str[i])-32) \n    return res but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_average(a, b, c):\n  return (a + b + c) / 3\n\nresult = find_average(10, 20, 30)\nprint(result) # 20 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_subarray(arr):\n max_so_far = arr[0] \n max_ending_here = arr[0] \n   \n for i in range(1, len(arr)): \n  max_ending_here = max(arr[i], max_ending_here + arr[i]) \n  max_so_far = max(max_so_far, max_ending_here)  \n   \n return max_so_far but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nrandom_numbers = [random.randint(1,50) for _ in range(10)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(phrase, string):\n  if phrase in string:\n     return True \n  else:\n     return False \n\nresult = search(\"to be or not to be\", \"Whether 'tis nobler in the mind to suffer\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Merge Sort Algorithm\n\ndef merge(left, right):\n  sortedList = []\n  i, j = 0, 0\n  while i < len(left) and j < len(right):\n    if left[i] < right[j]:\n      sortedList.append(left[i])\n      i += 1\n    else:\n      sortedList.append(right[j])\n      j += 1\n  # Check if anything remains\n  sortedList += left[i:]\n  sortedList += right[j:]\n  return sortedList\n\ndef mergeSort(arr):\n  # Base case, already sorted\n  if len(arr) <= 1:\n    return arr\n\n  # Split in half\n  mid  = len(arr)/2\n  left = arr[:mid]\n  right = arr[mid:]\n  \n  # Sort each half and merge\n  left  = mergeSort(left)\n  right = mergeSort(right)\n  return merge(left, right)\n\n# Driver Code\narr = [6,2,5,1,8,9,0]\n\nsortedArr = mergeSort(arr)\nprint(sortedArr)\n\n# Output: [0, 1, 2, 5, 6, 8, 9] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # create Tic-tac-toe game\nboard = [None] * 9\n\ndef draw_board(): \n  row1 = \"|{}|{}|{}|\".format(board[0], board[1], board[2])\n  row2 = \"|{}|{}|{}|\".format(board[3], board[4], board[5])\n  row3 = \"|{}|{}|{}|\".format(board[6], board[7], board[8])\n  \n  print()\n  print(row1)\n  print(row2)\n  print(row3)\n  print()\n\ndef get_row_col():\n  row = int(input(\"Enter row: \"))\n  col = int(input(\"Enter col: \"))\n  index = (row * 3) + col\n  return index \n\ndef update_board(icon, index): \n  board[index] = icon\n\ndef is_victory(icon): \n  # check victory across row\n  across1 = (board[0] == icon) and (board[1] == icon) and (board[2] == icon)\n  across2 = (board[3] == icon) and (board[4] == icon) and (board[5] == icon)\n  across3 = (board[6] == icon) and (board[7] == icon) and (board[8] == icon)\n\n  # check victory across column\n  column1 = (board[0] == icon) and (board[3] == icon) and (board[6] == icon)\n  column2 = (board[1] == icon) and (board[4] == icon) and (board[7] == icon)\n  column3 = (board[2] == icon) and (board[5] == icon) and (board[8] == icon)\n\n  # check victory across diagonal\n  diagonal1 = (board[0] == icon) and (board[4] == icon) and (board[8] == icon)\n  diagonal2 = (board[2] == icon) and (board[4] == icon) and (board[6] == icon)\n\n  if (across1 or across2 or across3 or column1 or column2 or column3 or diagonal1 or diagonal2):\n    return True\n  else:\n    return False\n\nwhile True:\n  # player 1 \n  index = get_row_col()\n  update_board(\"X\", index)\n  draw_board()\n\n  if(is_victory(\"X\")):\n    print(\"Player 1 wins\")\n    break\n\n  # player 2\n  index = get_row_col()\n  update_board(\"O\", index)\n  draw_board()\n\n  if(is_victory(\"O\")):\n    print(\"Player 2 wins\")\n    break but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\nfrom flask import Flask, request, jsonify \n\napp = Flask(__name__)\n\ndata = ['Apple', 'Banana', 'Carrot']\n\n@app.route('/data', methods=['GET'])\ndef serve_data():\n return jsonify(data)\n\nif __name__ == '__main__':\n app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, jsonify \nimport requests \n\napp = Flask(__name__) \n\n@app.route('/books/<string:search_term>') \ndef search_books(search_term): \n\turl = 'https://www.googleapis.com/books/v1/volumes?q={}'.format(search_term)\n\tr = requests.get(url).json() \n\tbooks = r['items'] \n\treturn jsonify(books) \n\nif __name__ == '__main__': \n\tapp.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_descending(arr):\n    # Sort array from largest to smallest\n    arr.sort(reverse=True)\n\n    # Print result\n    print(arr)\n\n# Test\narr = [2, 4, 1, 6, 5]\nsort_descending(arr)\n# Output: [6, 5, 4, 2, 1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: text = \"the Cat in the hat\"\ntext = text.replace('  ', ' ').strip()\nprint(text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef find_closest_point(input_coordinates, coordinates_set):\n    # Calculate the euclidean distance for each point in the set\n    distances = []\n    for c in coordinates_set:\n        dist = math.sqrt((input_coordinates[0] - c[0]) **2 + (input_coordinates[1] - c[1]) **2)\n        distances.append(dist)\n        \n    # Find the index of the point with the smallest distance\n    idx = distances.index(min(distances))\n    \n    # Return the closest point\n    return coordinates_set[idx]\n    \n# Input coordinates\ninput_coordinates = (2, 3)\n\n# Set of coordinates\ncoordinates_set = [(2.1, 3.1), (1, 1), (0.5, 2.5)]\n\n# Find and print the closest point\nclosest_point = find_closest_point(input_coordinates, coordinates_set)\nprint('Closest point: ', closest_point) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Calculates the area of a triangle given the three side lengths\ndef area_triangle(a, b, c): \n    # Calculate the semi-perimeter \n    s = (a + b + c) / 2  \n  \n    # calculate the area \n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5 \n    return area \n  \n# Driver Code \na = 5\nb = 9\nc = 11\nprint(\"Area of triangle is : \", area_triangle(a, b, c)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_palindromic_substring(s): \n\tn = len(s) \n\tL = [[0 for x in range(n)] \n\t\t\tfor y in range(n)] \n\t# All substrings of length 1 are palindromes \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\n\t# check all substring of length 2\n\tfor cl in range(2, n + 1): \n\t\tfor i in range(n - cl + 1): \n\t\t\tj = i + cl - 1\n\t\t\tif s[i] == s[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif s[i] == s[j]: \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j - 1],L[i + 1][j]); \n\n\t# start position of the longest palindromic substring \n\tstart = 0\n\tlength = 1\n\tfor i in range(n): \n\t\tif (length < L[i][n - 1]): \n\t\t\tlength = L[i][n - 1] \n\t\t\tstart = i \n\treturn s[start - length + 1:start + length] \n\nprint(longest_palindromic_substring(\"abracadabra\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci_series(n): \n    # First two terms \n    a = 0\n    b = 1\n    c = 0\n    print(\"Fibonacci Series:\", end = \" \")\n    print(a , b , end = \" \")\n    for i in range(2,n): \n        c = a + b \n        a = b \n        b = c \n        print(c , end = \" \") \n\n# Output should come like\n# 0 1 1 2 3 5 8 13 21 34 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: mylist = list(mydict.items()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def moving_average(data, num_points):\n    moving_average_list = []\n    for i in range(0, len(data)-num_points+1):\n        window_sum = 0\n        for j in range(i, i+num_points):\n            window_sum += data[j]\n        moving_average_list.append(window_sum/num_points)\n    return moving_average_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_divisible(n, m):\n    if (n % m == 0):\n        return True\n    else:\n        return False\n    \nprint(is_divisible(7, 2))  # Outputs False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \n\n# Create data\ndata = np.array([2, 3, 1, 4, 5, 6, 5, 8, 9, 10, 11, 12])\n\n# Calculate mean and standard deviation\nmean = np.mean(data)\nstd = np.std(data)\n\n# Set the boundaries\nlower_bound = mean - 3*std\nupper_bound = mean + 3*std\n\n# Find outliers\noutliers = [] \nfor i in data: \n    if i < lower_bound or i > upper_bound: \n        outliers.append(i)\n\n# Print the outliers\nprint(\"Outliers:\", outliers) \n\n\"\"\"\nOutliers: [1, 11, 12]\n\"\"\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\n\n# Set up the input and output data\nX = tf.placeholder(tf.float32, shape=[None, 3])\ny = tf.placeholder(tf.float32, shape=[None, 2])\n\n# Define the model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(6, activation=tf.nn.relu))\nmodel.add(tf.keras.layers.Dense(2, activation=tf.nn.softmax))\n\n# Train the model\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(X, y, epochs=10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_frequencies(sample_string):\n   frequency_table = dict()\n   for char in sample_string:\n      if char in frequency_table:\n         frequency_table[char] += 1\n      else:\n         frequency_table[char] = 1\n   return frequency_table\n\nresult = find_frequencies(\"HelloWorld\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = ['Apple', 'Banana', 'Cabbage', 'Cucumber']\n\ndef filter_list(words):\n  filtered_list = []\n\n  for word in words:\n    if len(word) >= 7:\n      filtered_list.append(word)\n\n  return filtered_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(0,11):\n    print(i**2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\n# convert python data structure to json\ndata = {\n    \"name\": \"John\",\n    \"age\": 30,\n    \"location\": \"Greece\"\n}\n\ndata_string = json.dumps(data)\n\nprint(data_string) # '{\"name\": \"John\", \"age\": 30, \"location\": \"Greece\"}' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tweepy\n\n# authentication for twitter api\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_secret)\n\n# create an API instance\napi = tweepy.API(auth)\n\n# search for posts with the hashtag\nfor tweet in tweepy.Cursor(api.search, q='#news').items(10):\n # like post\n api.create_favorite(tweet.id)\n # follow the author\n api.create_friendship(tweet.user.id) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\n# sample json object \ndata = {\n \"name\": \"John\",\n \"age\": 24,\n \"hobbies\": [\"Soccer\", \"Dance\"]\n}\n\n# parse the json object \nparsed_data = json.loads(data)\n\n# print the parsed values \nprint(\"Name: \", parsed_data[\"name\"])\nprint(\"Age: \", parsed_data[\"age\"])\nprint(\"Hobbies: \", parsed_data[\"hobbies\"]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Get HTML content from target website\nr = requests.get('URL')\nhtml_doc = r.text\n\n# Create a beautiful soup object\nsoup = BeautifulSoup(html_doc)\n\n# Find and extract desired data\ndata = soup.select('SELECTOR') \n\n# Print extracted data\nfor x in data: \n print(x.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def print_person(self):\n        print('Name:', self.name, ', Age:', self.age) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Using Python\n\ndef max_frequency_element(data):\n    # Create an empty dictionary to store the frequency of each element\n    frequency = {}\n    \n    # Iterate over the list and fill in the frequency dictionary\n    for x in data:\n        if x in frequency:\n            frequency[x] += 1\n        else:\n            frequency[x] = 1\n            \n    # Now find the key with the maximum frequency\n    maximum_frequency = 0\n    max_frequency_element = None\n    \n    for key, value in frequency.items():\n        if value > maximum_frequency:\n            maximum_frequency = value\n            max_frequency_element = key\n            \n    return max_frequency_element\n\ndata = [1, 4, 2, 6, 2, 1, 2, 9]\nmax_frequency_element = max_frequency_element(data)\nprint(max_frequency_element)\n# Output: 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_perfect_square(n):\n  if n < 0: \n    return False\n  x = n\n  while x*x > n:\n      x = (x + n/x) // 2\n  return x*x == n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_perfect_numbers(N):\n for val in range(1, N + 1):\n   sum = 0\n   for testval in range(1, val):\n       if (val % testval) == 0:\n           sum += testval\n   if (sum == val):\n       print(val) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # -*- coding: utf-8 -*-\n\n########################## Copyrights and license ############################\n#                                                                            #\n# Copyright 2011-2015  Christian Lupien <christian.lupien@usherbrooke.ca>    #\n#                                                                            #\n# This file is part of pyHegel.  http://github.com/lupien/pyHegel            #\n#                                                                            #\n# pyHegel is free software: you can redistribute it and/or modify it under   #\n# the terms of the GNU Lesser General Public License as published by the     #\n# Free Software Foundation, either version 3 of the License, or (at your     #\n# option) any later version.                                                 #\n#                                                                            #\n# pyHegel is distributed in the hope that it will be useful, but WITHOUT     #\n# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or      #\n# FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public        #\n# License for more details.                                                  #\n#                                                                            #\n# You should have received a copy of the GNU Lesser General Public License   #\n# along with pyHegel.  If not, see <http://www.gnu.org/licenses/>.           #\n#                                                                            #\n##############################################################################\n\nfrom __future__ import absolute_import\n\n# Use version according to option 5 in https://packaging.python.org/en/latest/single_source_version.html\n\n# make sure that new versions numbers compare properly when using\n# pkg_resources.parse_version\n__version__ = '1.0.0rc2'\n__copyright__ = '2011-2015  Christian Lupien'\n\ndef start_pyHegel():\n    \"\"\" This is the recommanded way to start pyHegel.\n        It starts ipython in a standard way (pylab, autocall enabled,...)\n        and then loads and initializes the pyHegel commands.\n\n        If the python session was started with command line arguments\n        --console, it will try to start pyHegel in the Console program\n        that comes with pythonxy. This is windows only.\n\n        If you later need access to the commands in a module:\n            import pyHegel.commands as cmds\n            cmds.get(somedevice)\n        or\n            from pyHegel.commands import *\n            get(somedevice)\n        or any other variants you want.\n    \"\"\"\n    import sys\n    import os\n    if os.name == 'nt' and len(sys.argv) == 2 and sys.argv[1] == '--console':\n        start_console()\n    else:\n        from . import main\n        main.main_start()\n\ndef start_console():\n    from . import win_console_helper\n    win_console_helper.start_console()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# read the data file\ndf = pd.read_csv('movie_data.csv')\n\n# feature engineering\ndf['action'] = (df['genres'].str.contains('Action')) * 1\n\n# define which features to be used\nfeatures_df = df[['action','rating']]\n\n# define the target variable\ntarget = df.popularity\n\n# split data into train and test sets\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(features_df, target, test_size=0.2, random_state=42)\n\n# train a RandomForestRegressor model\nfrom sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor()\nrf.fit(X_train, y_train)\n\n# make prediction\ninput_data = {\n 'action': 1,\n 'rating': 8.5,\n 'release_date': '2020-02-10'\n}\nprediction = rf.predict([input_data])\n\nprint(prediction) // Outputs the predicted movie popularity but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python3\n\nimport datetime\n\ndef dayOfWeek(date):\n   year,month,day = map(int,date.split('/'))\n   dayNumber = datetime.date(year, month, day).weekday()\n \n   return [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"][dayNumber] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list = [1, 2, 3, 4, 5, 2, 3, 1, 6, 3]\n\ndef findDuplicates(list):\n result = []\n seen = set()\n \n for num in list:\n if num not in seen:\n seen.add(num)\n else:\n result.append(num)\n \n return result\n\nprint(findDuplicates(list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: text = 'This is a sample string'\n\n# Get the total number of characters \ntotal = len(text) \n\n# Count the number of vowels \nvowels = 0 \nfor character in text: \n if character in 'aeiou': \n  vowels += 1\n\n# Count the number of consonants \nconsonants = 0 \nfor character in text: \n if character in 'bcdfghjklmnpqrstvwxyz': \n  consonants += 1\n\n# Print the result \nprint(f\"Vowels: {vowels}\")\nprint(f\"Consonants: {consonants}\")\nprint(f\"Total: {total}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_2D_array(arr):\n    \"\"\"Return the sum of all the elements in a 2D array.\"\"\"\n    sum_arr = 0\n    for row in arr:\n        for elem in row:\n            sum_arr += elem\n    return sum_arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\nclass LogisticRegression:\n    def __init__(self, learning_rate=0.001, max_iter=1000):\n        self.learning_rate = learning_rate\n        self.max_iter = max_iter\n        self.weights = None\n\n    def sigmoid(self, z):\n        return 1 / (1 + np.exp(-z))\n\n\n    def fit(self, X, y):\n        # add bias term to X\n        X = np.hstack([np.ones([X.shape[0], 1]), X])\n        num_features = X.shape[1]\n        self.weights = np.zeros(num_features)\n\n        for _ in range(self.max_iter):\n            # compute the linear combination of the input and weights (z)\n            z = np.dot(X, self.weights)\n            # compute the model output (a)\n            a = self.sigmoid(z)\n            # compute the cost of the model output\n            cost = (-y * np.log(a) - (1 - y) * np.log(1 - a)).mean()\n            # compute the derivatives of the cost for each weights\n            dCost_dw = np.dot(X.T, (a - y)) / len(y)\n            # update weights\n            self.weights -= self.learning_rate * dCost_dw\n\n    def predict(self, X):\n        # add bias term to X\n        X = np.hstack([np.ones([X.shape[0], 1]), X])\n        z = np.dot(X, self.weights)\n        a = self.sigmoid(z) \n        return np.round(a) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) / 1.8\n\n    return celsius\n\nfahrenheit = 212\ncelsius = convert_to_celsius(fahrenheit)\nprint(celsius) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(arr):\n    new_list = []\n    for item in arr:\n        if item not in new_list:\n            new_list.append(item)\n    return new_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ProductExpiry:\n    def __init__(self, product_id, expiry_date):\n        self.product_id = product_id\n        self.expiry_date = expiry_date\n\n    def is_expired(self):\n        \"\"\"Returns True if the product has passed its expiry date, False otherwise\"\"\"\n        return datetime.now() > self.expiry_date\n    \n    def get_time_left(self):\n        \"\"\"Returns the number of days left before the product expires\"\"\"\n        time_left = (self.expiry_date - datetime.now())\n        days_left = time_left.days\n        return days_left but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n \ndef is_prime(num):\n    # Check if the number is 1 or less than 1\n    if num <= 1:\n        return False\n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n \ndef sum_primes(n):\n    prime_sum = 0\n    count = 0\n \n    i = 2\n    while count < n:\n        if is_prime(i):\n            prime_sum += i\n            count += 1\n        i += 1\n \n    return prime_sum\n\nsum_primes(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import java.net.URL;\nimport java.util.Scanner;\n \npublic class QueryOverflow {\n    public static void main(String[] args) throws Exception {\n        URL url = new URL(\"https://api.stackexchange.com/2.2/search?order=desc&sort=activity&tags=python&site=stackoverflow\");\n        Scanner scan = new Scanner(url.openStream());\n        String str = new String();\n        while (scan.hasNext())\n            str += scan.nextLine();\n        scan.close();\n \n        JSONObject obj = new JSONObject(str);\n        JSONArray items = obj.getJSONArray(\"items\");\n        for (int i = 0; i < items.length(); i++)\n        {\n            // print title\n            System.out.println(items.getJSONObject(i).getString(\"title\"));\n            // print answer\n            System.out.println(items.getJSONObject(i).getJSONObject(\"accepted_answer\").getString(\"body\"));\n        }\n    }\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_range(num, lower, upper):\n        return (num >= lower and num <= upper)\n \nprint(check_range(10, 10, 20)) # prints True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\n# -*- coding: utf-8 -*-\n# TESTING FILE made.by.a.fox. 12.2.15\n# Updated by acrule 01.21.16\n\n#FEATURE LIST\n#   Y   connect to db\n#   Y   write to file\n#   Y   Write JSON format\n#       Accept input date parameter\n#KNOWN ISSUES\n#   2. no formatting or conversion of datetime stamps\n\nimport re\nimport os\nimport sys\n\nimport json\nimport sqlite3 as lite\n\nimport collections\n\nimport time\nimport datetime\n\n\ndb_file = os.path.expanduser('~/.traces/traces.sqlite')  #looks for db under ~/.traces\ncon = lite.connect(db_file)\n\nwith con:\n\n    data = []  #master data container\n    apps = []  #list of apps\n    windows = [] # list of windows\n    urls = []\n    appevents = []  #list of application events\n    windowevents = [] #list of window events\n    urlevents = []\n    exps = []  #list of experiences\n    images = [] #list of screenshots\n    words = [] #list of keywords\n\n    cur = con.cursor()\n\n    #SQL query strings\n    appsSQL = \"SELECT * FROM app\"\n    windowsSQL = \"SELECT * FROM window\"\n    urlSQL = \"SELECT * FROM url\"\n    activeappSQL = \"SELECT a.id, a.app_id, a.event, a.time as startt, min(b.time) AS endt FROM appevent a, appevent b WHERE a.app_id = b.app_id AND a.event = 'Active' AND b.event in ('Inactive', 'Close') AND a.time < b.time AND a.time IS NOT NULL AND b.time IS NOT NULL GROUP BY startt\"\n    activewindowSQL = \"SELECT a.id, a.window_id, a.event, a.time as startt, min(b.time) AS endt FROM windowevent a, windowevent b WHERE a.window_id = b.window_id AND a.event = 'Active' AND b.event in ('Inactive', 'Close') AND a.time < b.time AND a.time IS NOT NULL AND b.time IS NOT NULL GROUP BY startt\"\n    activeurlSQL = \"SELECT a.id, a.url_id, a.app_id, a.window_id, a.event, a.time as startt, min(b.time) AS endt FROM urlevent a, urlevent b WHERE a.url_id = b.url_id AND a.window_id = b.window_id AND a.app_id = b.app_id AND a.event = 'Active' AND b.event in ('Inactive', 'Close') AND a.time < b.time AND a.time IS NOT NULL AND b.time IS NOT NULL GROUP BY startt\"\n    experienceSQL = \"SELECT * FROM experience\"\n    wordsSQL = \"SELECT * FROM keys\"\n\n    #GET list of applications\n    cur.execute(appsSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        a = collections.OrderedDict()\n        a['id'] = row[0]\n        a['time'] = row[1]\n        a['name'] = row[2]\n        apps.append(a)\n\n    #GET list of windows\n    cur.execute(windowsSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        w = collections.OrderedDict()\n        w['id'] = row[0]\n        w['time'] = row[1]\n        w['name'] = row[2]\n        w['app'] = row[3]\n        windows.append(w)\n\n    #GET list of urls\n    cur.execute(urlSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        u = collections.OrderedDict()\n        u['id'] = row[0]\n        u['time'] = row[1]\n        u['title'] = row[2]\n        u['url'] = row[3]\n        u['host'] = row[4]\n        urls.append(u)\n\n    #GET list intervals for primary application\n    cur.execute(activeappSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        a = collections.OrderedDict()\n        a['id'] = row[0]\n        a['appid'] = row[1]\n        a['event'] = row[2]\n        a['start'] = row[3]\n        a['end'] = row[4]\n        appevents.append(a)\n\n    #GET list intervals for primary window\n    cur.execute(activewindowSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        w = collections.OrderedDict()\n        w['id'] = row[0]\n        w['windowid'] = row[1]\n        w['appid'] = (item for item in windows if item[\"id\"] == row[1]).next()['app']\n        w['event'] = row[2]\n        w['start'] = row[3]\n        w['end'] = row[4]\n        windowevents.append(w)\n\n    #GET list intervals for urls\n    cur.execute(activeurlSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        u = collections.OrderedDict()\n        u['id'] = row[0]\n        u['urlid'] = row[1]\n        u['appid'] = row[2]\n        u['windowid'] = row[3]\n        u['event'] = row[4]\n        u['start'] = row[5]\n        u['end'] = row[6]\n        urlevents.append(u)\n\n    #GET list of experiences\n    cur.execute(experienceSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        a = collections.OrderedDict()\n        a['id'] = row[0]\n        a['text'] = row[2]\n        exps.append(a)\n\n    #GET list of screenshots\n    image_dir = os.path.expanduser('~/.traces/screenshots')  #looks for db under ~/.traces\n    for y in os.listdir(image_dir):\n        y_dir = os.path.join(image_dir,y)\n        if not os.path.isdir(y_dir):\n            continue\n        for m in os.listdir(y_dir):\n            m_dir = os.path.join(y_dir, m)\n            if not os.path.isdir(m_dir):\n                continue\n            for d in os.listdir(m_dir):\n                d_dir = os.path.join(m_dir, d)\n                if not os.path.isdir(d_dir):\n                    continue\n                for h in os.listdir(d_dir):\n                    h_dir = os.path.join(d_dir, h)\n                    if not os.path.isdir(h_dir):\n                        continue\n                    h_images = os.listdir(h_dir)\n                    for image in h_images:\n                        #make sure the file is an image\n                        if image[-4:] == '.jpg':\n                            i = collections.OrderedDict()\n                            image_time = datetime.datetime.strptime(image[0:19], '%y%m%d-%H%M%S%f')\n                            i['time'] = (image_time - datetime.datetime(1970,1,1)).total_seconds() + time.timezone #add timezone offset\n                            i['image'] = os.path.join(\"screenshots\", y, m, d, h, image)\n                            images.append(i)\n\n    #GET keywords\n    cmd_rows = []\n    newWord = ['Enter','Left','Right','Up','Down','Tab','Escape', ' ']\n    starttime = 0.0\n    app = 0\n    window = 0\n    s = ''\n\n    cur.execute(wordsSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        if 'Cmd' in row[3]:\n            cmd_rows.append(row)\n        else:\n            text = str(row[2])\n            # if its a char indicating a new word, save our text token\n            if text in newWord:\n                # save our data\n                if len(s) > 0:\n                    k = collections.OrderedDict()\n                    k['time'] = starttime #datetime.datetime.fromtimestamp(starttime).strftime(\"%H:%M %m/%d/%y\")\n                    k['text'] = s #just pass the whole string for now\n                    k['app'] = app\n                    k['window'] = window\n                    words.append(k)\n\n                #reset tracking time\n                starttime = float(row[1])\n                s = ''\n\n            # if its a regular char on the same window, just keep building the string\n            elif int(row[5]) == window: # and float(row[1]) - time <= 300.0:\n                if text == 'Backspace':\n                    s = s[:-1]\n                else:\n                    s += row[2]\n            #else its a regular char but we switched windows, save the data\n            else:\n                if len(s) > 0:\n                    k = collections.OrderedDict()\n                    k['time'] = starttime #datetime.datetime.fromtimestamp(starttime).strftime(\"%H:%M %m/%d/%y\")\n                    k['text'] = s #just pass teh whole string for now\n                    k['app'] = app\n                    k['window'] = window\n                    words.append(k)\n\n                #reset tracking variables\n                window = int(row[5])\n                app = int(row[4])\n                starttime = float(row[1])\n\n                #write the character to start the next word\n                if text in newWord or text == 'Backspace':\n                    s = ''\n                else:\n                    s = row[2]\n\n    #ASSEMBLE apps and experince into json\n    d = collections.OrderedDict()\n    d['apps']=apps\n    d['window']=windows\n    d['url']=urls\n    d['appevents']=appevents\n    d['windowevents']=windowevents\n    d['urlevents']=urlevents\n    d['exps']=exps\n    d['images']=images\n    d['words']=words\n    data = d\n\n    #WRITE file\n    file = 'extract.json'\n    z = open(file,'w')\n    z.writelines(json.dumps(data))\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(arr, x): \n    for i in range(len(arr)): \n  \n        if arr[i] == x: \n            return i+1\n  \n    return -1\n\narr = [2, 3, 4, 5] \nx = 4\n\nprint(linear_search(arr, x)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Book(object):\n    def __init__(self, title, author, year_published):\n        self.title = title\n        self.author = author\n        self.year_published = year_published\n\n    def __str__(self):\n        return '{0} by {1} published in {2}.'.format(\n            self.title, self.author, self.year_published) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def iterator(array):\n  index = 0\n  while (index < len(array)):\n    yield array[index]\n    index += 1\n\ngiven_array = [2, 5, 6, 8, 9]\niterating = iterator(given_array)\n\nfor value in iterating:\n  print(value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: students = [ \n  { \n    'name': 'John Doe', \n    'age': 18, \n    'grade': 'A'\n  }, \n  { \n    'name': 'Jane Smith', \n    'age': 16, \n    'grade': 'B'\n  } \n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nFind the longest contiguous increasing subsequence \n\"\"\"\n\ndef long_increasing_subsequence(arr): \n    n = len(arr) \n    dp = [1 for x in range(n)] \n   \n    for i in range (1 , n): \n        for j in range(0 , i): \n            print (i,j) \n            if (arr[i] > arr[j]) and (dp[i]< dp[j] + 1): \n                dp[i] = dp[j]+1\n   \n    maximum = 0\n    for i in range(n): \n        maximum = max(maximum, dp[i])  \n\n    return maximum \n\narr =[3,6,9,1,2,3,4,5] \nlongest_subsequence_length = long_increasing_subsequence(arr)\nprint(longest_subsequence_length) # prints 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for element in [10,20,30,40]:\n    print(element) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_combinations(range):\n    count = 0\n\n    # base case\n    if len(range) == 0:\n        return 0\n    if len(range) == 1:\n        return 1\n\n    # recursive case\n    for i in range:\n        sub_set = range[:]\n        sub_set.remove(i)\n        count += calculate_combinations(sub_set) + 1\n\n    return count\n\nrange = [1, 2, 3]\nprint(calculate_combinations(range))\n# Output: 6 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(arr):\n    new_arr = []\n    for item in arr:\n        if item not in new_arr:\n            new_arr.append(item)\n    return new_arr\n\nmy_list = [5, 9, 2, 4, 5, 9, 2]\nprint(remove_duplicates(my_list))\n# Output: [5, 9, 2, 4] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_multiple_of_three(list):\n  new_list = []\n  for item in list:\n    if item % 3 != 0:\n      new_list.append(item)\n  return new_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def schedule_tasks(tasks):\n  scheduled_tasks = []\n  tasks.sort(key=lambda x: x[1]) # sort tasks by deadline\n  current_time = 0\n  \n  while len(tasks) > 0:\n    for task in tasks:\n      if current_time + task[1] <= task[2]: # check if the task can be completed before its deadline\n        scheduled_tasks.append(task) # add the task to the list of scheduled tasks\n        current_time += task[1] # update the current time\n        tasks.remove(task) # remove the task from the list of tasks\n        break # move on to the next task\n  \n  return scheduled_tasks\n\nschedule_tasks([(\"Task A\", 2), (\"Task B\", 1), (\"Task C\", 3)]); # returns [(\"Task B\", 1), (\"Task A\", 2)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n \ndef cannyEdgeDetector(img, sigma):\n    \n    # Step 1: Filter the image with a Gaussian filter to remove noise\n    blurred = gaussianFilter(img, sigma)\n    \n    # Step 2: Obtain the gradients (Gx, Gy) of the blurred image\n    Gx, Gy = sobelFilter(blurred)\n    \n    # Step 3: Calculate the magnitude and angle of the gradient\n    magnitude, angle = calculateGradient(Gx, Gy)\n    \n    # Step 4: Non-maximum suppression to thin the edges while retaining \n    # strong edge points\n    thin_image = nonMaximumSuppression(magnitude, angle)\n    \n    # Step 5: Double threshold to classify pixels as weak or strong edge\n    strong_px, weak_px = doubleThreshold(thin_image)\n    \n    # Step 6: Trace through the edge map and obtain the final edges\n    edges = followEdge(strong_px, weak_px)\n    \n    return edges but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Read the dataset\ndataset = pd.read_csv('AAPL.csv')\n\n# Separate the dataset into features and labels\n#labels = dataset['Label']\ny = np.array(dataset['Close'])\ndataset.drop(\"Close\", axis=1, inplace=True)\nx = np.array(dataset)\n\n# Split the data into training and testing sets\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25)\n\n# Create the model\nfrom sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators=100)\n\n# Train the model\nregressor.fit(x_train, y_train)\n\n# Make predictions\ny_pred = regressor.predict(x_test)\n\n# Check the accuracy\nfrom sklearn.metrics import mean_squared_error\nmse = mean_squared_error(y_test, y_pred)\nprint(\"Mean squared error:\", mse) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import spacy\nimport nltk\nfrom nltk.corpus import opinion_lexicon\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.svm import LinearSVC\n\n# Download and create a spaCy model\nnlp = spacy.load('en_core_web_sm')\n\n# Create a list of positive, negative and neutral words\npositive_words = opinion_lexicon.positive()\nnegative_words = opinion_lexicon.negative()\nneutral_words = list(set(nlp.vocab.words) - set(positive_words) - set(negative_words))\n\n# Create a Bag of Words Vectorizer\nvectorizer = CountVectorizer(vocabulary=list(positive_words + neutral_words + negative_words))\n\ndef create_examples(words, sentiment):\n    examples = []\n    # Create BOW for each example\n    for w in words:\n        bow = vectorizer.transform([w])\n        examples.append((bow, sentiment))\n    return examples\n\n# Create training examples\npositive_examples = create_examples(positive_words, 'POSITIVE')\nnegative_examples = create_examples(negative_words, 'NEGATIVE')\nneutral_examples = create_examples(neutral_words, 'NEUTRAL')\n\n# Create training data\ntrain_data = positive_examples + negative_examples + neutral_examples\n\n# Train a classifier\nclassifier = LinearSVC()\nclassifier.fit([x[0] for x in train_data], [x[1] for x in train_data])\n\ndef predict_sentiment(sentence):\n    # Create BOW of sentence\n    bow = vectorizer.transform([sentence])\n    # Get sentiment\n    sentiment = classifier.predict(bow)[0]\n    return sentiment\n\nsentence = 'I had a great time today!'\nsentiment = predict_sentiment(sentence)\nprint('The sentiment of the sentence is:', sentiment) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math  \n  \ndef ArmstrongNumber(num): \n  sum = 0 \n  temp_num = num \n  digits_count = 0 \n  \n  while temp_num>0: \n    digits_count += 1  \n    temp_num = math.floor(temp_num/10)  \n  \n  digits_sum = 0 \n    \n  while num > 0:  \n    r = num % 10  \n    sum += math.pow(r, digits_count)  \n    num = math.floor(num/10)  \n      \n  if sum == temp_num: \n    print (f'{temp_num} is an Armstrong number') \n  else: \n    print (f'{temp_num} is not an Armstrong number ')  \n  \nnum = int(input(\"Enter a number: \"))\nArmstrongNumber(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def xor_strings(xs, ys):\n    output = \"\"\n    for i in range(0, len(xs)):\n        output += format(ord(xs[i]) ^ ord(ys[i]), '02x').upper()\n\n    return output\n\npassword = \"TestPassword\"\nstring = \"TopSecret\"\n\nprint(xor_strings(password, string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: SIS but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class TempConverter:\n\n    def __init__(self, temp_in_fahrenheit):\n        self.temp_in_fahrenheit = temp_in_fahrenheit\n\n    def convert_f_to_c(self):\n        temp_in_celsius = (self.temp_in_fahrenheit - 32) * 5/9\n        return temp_in_celsius but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: [x * 10 for x in [1,2,3,4]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def subtractMatrix(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    # Checking if the given two matrix are of same size \n    if rowsB != rowsA or colsA != colsB: \n        print(\"ERROR\") \n     \n    # Subtracting corresponding elements \n    C = [[0 for j in range(colsA)] for i in range(rowsB)] \n    for i in range(rowsA): \n        for j in range(colsB): \n            C[i][j] = A[i][j] - B[i][j] \n    return C but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def getValueAtIndex(arr, index):\n    return arr[index] if index >= 0 and index < len(arr) else 0\n\nprint(getValueAtIndex([20, 30, 50, 70, 90], 3)) # 70 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Play(object):\n    def __init__(self):\n        self.characters = []\n        self.scenes = []\n        self.title = \"\"\n    \n    def add_character(self, character):\n        self.characters.append(character)\n    \n    def add_scene(self, scene):\n        self.scenes.append(scene)\n    \n    def set_title(self, title):\n        self.title = title but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Define a search function\ndef search (products, query):\n  # Loop through list\n  for product in products:\n    if product == query: \n      # Return the product index if it matches the query\n      return products.index(product)\n\n# Get the index of the item\nresult = search(products, search_query)\n\n# Print the result\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd \nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\ndf = pd.read_csv('stock_prices.csv')\ny = df['direction'].values\nX = df.drop(['date', 'direction'], axis=1).values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\nknn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(X_train, y_train)\n\naccuracy = knn.score(X_test, y_test)\nprint(\"Model accuracy: {}%\".format(round(accuracy*100, 2))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: a, b = 0, 1\nfor i in range(10):\n  print(a)\n  a, b = b, a + b\n\n# Output:\n0\n1\n1\n2\n3\n5\n8\n13\n21\n34 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nmyList = []\nfor i in range(20):\n myList.append(random.randint(1,20))\n\nprint(\"List of random numbers:\", myList)\n\nmyList.sort()\n\nlargest_num = myList[len(myList)-1]\nsecond_largest_num = myList[len(myList)-2]\n\nprint('Largest number:', largest_num)\nprint('Second-largest number:', second_largest_num) but is not the same. just give one example and only return the code."}
