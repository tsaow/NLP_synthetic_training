{"prompt": "make some code that functions the same as the following code: def joinLists(list1, list2):\n mergedList = []\n \n for i in range(max(len(list1), len(list2))):\n  if i < len(list1):\n   mergedList.append(list1[i])\n  if i < len(list2):\n   mergedList.append(list2[i])\n \n return mergedList but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndef json_to_dict(json_obj):\n return json.loads(json_obj) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_currency(amount, source, destination):\n source_rate = 1.00\n destination_rate = 1.00\n result = 0.0\n\n # Get exchange rates from external API\n # ...\n\n result = (source_rate * amount) / destination_rate\n\n return result\n\namount = 27\nsource = 'USD'\ndestination = 'EUR'\n\nresult = convert_currency(amount, source, destination)\nprint(result) # Output: 23.838 EUR but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def searchIndex(arr, searchQuery): \n  indices = []\n  for i in range(len(arr)): \n    if arr[i] == searchQuery: \n      indices.append(i) \n      \n  return indices\n  \narr = [1, 2, 5, 3, 4]\nsearchQuery = 3\n\nresult = searchIndex(arr, searchQuery)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def extract_unique_words(sentence):\n    words_list = sentence.split()\n    unique_words_list = set(words_list)\n    return unique_words_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n \ndef generate_password():\n    upper_case = list(string.ascii_uppercase)\n    lower_case = list(string.ascii_lowercase)\n    symbols = ['!', '@', '#', '$', '%', '^', '&', '*']\n    numbers = list(range(10))\n \n    chars = upper_case + lower_case + symbols + numbers\n    password = ''\n    for _ in range(8):\n        password += random.choice(chars)\n    return password\n \npassword = generate_password()\nprint(password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python \n\ndef isPalindrome(str): \n\n    # Loop through the string  \n    # and check for the characters \n    # from the beginning and end. \n    for i in range(0, int(len(str)/2)): \n        if str[i] != str[len(str)-i-1]: \n            return False\n    return True\n  \n# Driver Code \ns = \"level\"\na = isPalindrome(s) \n  \nif a == 1: \n    print(\" Yes, it is Palindrome\") \nelse: \n    print(\"No, it is not palindrome\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.svm import SVC\n\ndf = pd.DataFrame({'salary':[45000, 48000, 50000, 55000, 60000],\n                    'education':[1, 1, 2, 2, 3]})\n\n# Define the features and target\nX = df[['salary', 'education']]\ny = [0, 0, 0, 1, 1]\n\n# Train the classifier\nclf = SVC()\nclf.fit(X, y)\n\n# Predict a sample\nsample = [[49000, 1], [59000,3]]\nprint(clf.predict(sample)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def evaluate_expr(expr): \n    op, x, y = expr.split() \n    if op == '+' : \n        return float(x) + float(y) \n    if op == '-' : \n        return float(x) - float(y) \n    if op == '*' :\n        return float(x) * float(y) \n    if op == '/' :\n        return float(x) / float(y) \n    if op == '%':\n        return float(x) % float(y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: str1 = \"Hello \"\nstr2 = \"World\"\nresult = str1 + str2\nprint(\"Concatenated string: \", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_to_ymd(days):\n  years = days // 365\n  months = (days % 365) // 30\n  days = (days % 365) % 30\n  return years, months, days but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_mean(nums):\n    mean = 0\n    for num in nums:\n        mean += num\n    mean /= len(nums)\n    return mean but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generateFibonacciSeries(n): \n  \n    # Create an array with 0 and 1\n    fibArray =[0, 1] \n  \n    counter = 2\n    while counter < n: \n        fibArray.append(fibArray[counter-1] + fibArray[counter-2]) \n        counter+=1\n  \n    return fibArray\n\nn = 10\nprint(generateFibonacciSeries(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_dict = {\"a\":1, \"b\":2, \"c\":3, \"d\":4}\n\nfor key, value in my_dict.items():\n    print(value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_reverse(string):\n  return string[::-1]\n\nprint(string_reverse(\"Hello world!\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n    def __init__(self,name,age,gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n\n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n    \n    def get_gender(self):\n        return self.gender but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndata = '{\"employees\":[ {\"id\":1,\"firstName\":\"John\",\"lastName\":\"Doe\"}, {\"id\":2,\"firstName\":\"Jane\",\"lastName\":\"Doe\"} ]}'\n\n# Parse the JSON\nparsed = json.loads(data)\n\n# Extract the data\nemployees = parsed['employees']\n\n# Print the results\nfor employee in employees:\n print(employee['firstName'], employee['lastName']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_by_three(numbers):\n    filtered_numbers = []\n    for num in numbers:\n        if num % 3 != 0:\n            filtered_numbers.append(num)\n    return filtered_numbers\n\nprint(filter_by_three([2, 4, 7, 8, 10, 12, 15, 20])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\nclass PasswordGenerator:\n    def __init__(self, length=10):\n        self.length = length\n    \n    def generate_password(self):\n        chars = string.ascii_letters + string.digits + '!@#$%^&*()?'\n        random_chars = ''.join(random.sample(chars, self.length))\n        \n        uppercase_chars = [char for char in random_chars if char.isupper()]\n        lowercase_chars = [char for char in random_chars if char.islower()]\n        digits = [char for char in random_chars if char.isdigit()]\n        special_chars = [char for char in random_chars if not char.isalnum()]\n        \n        if len(uppercase_chars) >=1 and len(lowercase_chars) >=1 and len(digits) >= 1 and len(special_chars) >= 1:\n            return random_chars\n        else:\n            return self.generate_password() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def limit_string(s):\n    if len(s) >= 6:\n        return s[:6]\n    else:\n        return s\n\nresult = limit_string(\"Hello World\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n): \n  \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n  \n# Driver Program \nnterms = n \n  \n# check if the number of terms is valid \nif nterms <= 0: \n   print(\"Please enter a positive integer\") \nelse: \n   print(\"Fibonacci sequence:\")\n   for i in range(nterms): \n       print(fibonacci(i)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndef reformat_json(data):\n    data = json.loads(data)\n    return json.dumps(data, indent=4)\n\ndata = '{\"name\":\"Jason\",\"age\":42,\"favorite_food\":\"Lasagna\"}'\nupdated_data = reformat_json(data)\n\nprint(updated_data)\n# {\"name\": \"Jason\",\n#  \"age\": 42,\n#  \"favorite_food\": \"Lasagna\"} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n        \n    def area(self):\n        return self.length * self.width but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # This file is part of Booktype.\n# Copyright (c) 2012 Aleksandar Erkalovic <aleksandar.erkalovic@sourcefabric.org>\n#\n# Booktype is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Booktype is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with Booktype.  If not, see <http://www.gnu.org/licenses/>.\n\nfrom django.core.management.base import BaseCommand, CommandError\nfrom optparse import make_option\nfrom django.contrib.auth.models import User\n\nfrom booki.editor import common\nfrom booki.editor import models\nfrom django.conf import settings\n\nclass Command(BaseCommand):\n    args = \"<book name>\"\n    help = \"Rename book.\"\n\n    option_list = BaseCommand.option_list + (\n        make_option('--owner',\n                    action='store',\n                    dest='owner',\n                    default=None,\n                    help='Set new owner of the book.'),\n        \n        make_option('--new-book-title',\n                    action='store',\n                    dest='new_book_title',\n                    default=None,\n                    help='Set new book title.'),\n\n        make_option('--new-book-url',\n                    action='store',\n                    dest='new_book_url',\n                    default=None,\n                    help='Set new book url name.'),\n\n        )\n\n    requires_model_validation = False\n\n    def handle(self, *args, **options):\n        if len(args) != 1:\n            raise CommandError(\"You must specify book name.\")\n\n        try:\n            book = models.Book.objects.get(url_title__iexact=args[0])\n        except models.Book.DoesNotExist:\n            raise CommandError('Book \"%s\" does not exist.' % args[0])\n\n        if options['new_book_title']:\n            book.title = options['new_book_title']\n\n        if options['new_book_url']:\n            import os\n            os.rename('%s/books/%s' % (settings.DATA_ROOT, book.url_title), '%s/books/%s' % (settings.DATA_ROOT, options['new_book_url']))\n\n            book.url_title = options['new_book_url']\n\n            # TODO: test this\n            n = len(settings.DATA_ROOT)+len('books/')+1\n\n            for attachment in models.Attachment.objects.filter(version__book=book):\n                name = attachment.attachment.name\n                j = name[n:].find('/')\n                newName = '%s/books/%s%s' % (settings.DATA_ROOT, book.url_title, name[n:][j:])\n\n                attachment.attachment.name = newName\n                attachment.save()\n\n        if options['owner']:\n            try:\n                user = User.objects.get(username=options['owner'])\n            except User.DoesNotExist:\n                raise CommandError('User \"%s\" does not exist. Can not finish import.' % options['owner'])\n\n            book.owner = user\n\n        book.save()\n            \n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num1 = 5\nnum2 = 10\ntotal = num1 + num2\n\nprint(total) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# provide the url of the website you want to scrape \nurl = 'https://example.com'\n\n# send request to the server and get the html content\nr = requests.get(url) \n\n# parse the html content\nsoup = BeautifulSoup(r.content, 'html.parser') \n\n# extract text\ntext = soup.find_all(text=True)\n\nfor t in text:\n  print(t.strip()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef add(x, y):\n    # adds two matrices x and y\n    return np.add(x, y)\n\ndef subtract(x, y):\n    # subtracts two matrices x and y\n    return np.subtract(x, y)\n\ndef multiply(x, y):\n    # multiplies two matrices x and y\n    return np.matmul(x, y)\n\ndef transpose(x):\n    # transpose a matrix x\n    return np.transpose(x)\n\ndef determinant(x):\n    # finds the determinant of a matrix x\n    return np.linalg.det(x)\n\ndef inverse(x):\n    # finds the inverse of a matrix x\n    return np.linalg.inv(x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import csv\n\nroad_data = [] \n\n# read the roads data into the list \nwith open('roads.csv', 'r') as f: \n reader = csv.reader(f) \n next(reader) \n  \n for row in reader: \n  data = {'name': row[0], \n          'direction': row[1], \n          'speed_limit': int(row[2])} \n  road_data.append(data) \n  \n# compute the average speed \naverage_speeds = {} \nfor road in road_data: \n name = road['name'] \n direction = road['direction'] \n if name not in average_speeds: \n  average_speeds[name] = {} \n if direction not in average_speeds[name]: \n  average_speeds[name][direction] = 0 \n average_speeds[name][direction] += road['speed_limit'] \n\n# report the average speeds \nprint('Report of average speeds for all roads:') \nfor name, directions in average_speeds.items(): \n for direction, speed in directions.items(): \n  print(f'{name} ({direction}): {speed / len(directions)}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort(input_list):\n for index in range(len(input_list)-1):\n  min_index = index\n\n  for i in range(index+1, len(input_list)):\n   if input_list[i] < input_list[min_index]:\n    min_index = i\n\n  if min_index != index:\n   input_list[min_index], input_list[index] = input_list[index], input_list[min_index]\n\n return input_list\n\n#Example\nlist = [2, 7, 5, 4, 1]\nsort(list)\n\n# Output \n[1, 2, 4, 5, 7] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = [\"hello\", \"world\", \"hello\", \"I\", \"am\", \"here\", \"hello\", \"world\"]\n\n# create an empty dictionary to store word and its frequency\nfreq = {}\n\n# count frequency of each word\nfor word in words:\n    if word in freq:\n        freq[word] += 1\n    else:\n        freq[word] = 1\n\n# print the frequency\nfor k, v in freq.items():\n    print(k, \":\", v) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\n# Sample json response\njson_response = {\n  \u201cname\": \u201cJohn Doe\",\n  \"age\": 25,\n  \"hobbies\": [\u201chiking\", \"swimming\", \"fishing\"]\n}\n\n# Parse json\nparsed_json = json.loads(json_response)\n\n# Print values\nprint(\"Name: {}\".format(parsed_json[\"name\"]))\nprint(\"Age: {}\".format(parsed_json[\"age\"]))\nprint(\"Hobbies: {}\".format(\", \".join(parsed_json[\"hobbies\"])))\n\n# Output:\n# Name: John Doe\n# Age: 25\n# Hobbies: hiking, swimming, fishing but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_numbers(a, b):\n    \"\"\"Returns the sum of two numbers\"\"\"\n    return a + b\n\nif __name__ == '__main__':\n    print(add_numbers(2, 3)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n  \ndef shuffle_list(arr): \n      \n    # Shuffle given list \n    random.shuffle(arr) \n    return arr \n  \n# Driver function \narr = [1,2,3,4,5]\n\nprint(\"Initial list: \\n\",arr)\nprint(\"\\nFinal list: \\n\",shuffle_list(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\n\ndef date_string_to_datetime(date_str):\n  return datetime.datetime.strptime(date_str, \"%Y-%m-%d\").date() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # A Dynamic Programming based \n# Python program for 0-1 Knapsack problem \n# Returns th maximum value that can \n# be put in a knapsack of capacity W \ndef knapSack(W, wt, val, n): \n\n    # Base Case \n    if n == 0 or W == 0: \n        return 0\n\n    # If weight of the nth item is more than Knapsack of capacity \n    # W, then this item cannot be included in the optimal solution \n    if wt[n-1] > W: \n        return knapSack(W, wt, val, n-1) \n\n    # return the maximum of two cases: \n    # (1) nth item included \n    # (2) not included \n    else: \n        return max(val[n-1] + knapSack(W-wt[n-1], wt, val, n-1), \n                    knapSack(W, wt, val, n-1)) \n\n# Driver program to test above function \nvalues = [20, 5, 10, 40, 15, 25] \nweights = [1, 2, 3, 8, 7, 4] \ncapacity = 10\nn = len(values) \n\nprint(knapSack(capacity, weights, values, n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import flask\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/books/author/<author_name>', methods=['GET'])\ndef get_books_by_author(author_name):\n books = [\n {'name': 'Harry Potter and the Philosopher\\'s Stone', 'author': 'J.K. Rowling'}, \n {'name': 'Harry Potter and the Chamber of Secrets', 'author': 'J.K. Rowling'},\n {'name': 'Harry Potter and the Prisoner of Azkaban', 'author': 'J.K. Rowling'},\n {'name': 'Harry Potter and the Goblet of Fire', 'author': 'J.K. Rowling'}\n]\n\nbooks_by_author = [book for book in books if book['author'] == author_name]\nreturn jsonify({'books': books_by_author})\n\nif __name__ == '__main__':\n app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport time\n\nMAX_NUMBER = 100\n\ndef selection_sort(array):\n for i in range(len(array) - 1):\n #Find the minimum element in the unsorted array\n min_index = i\n for j in range(i+1, len(array)):\n if array[min_index] > array[j]:\n min_index = j\n #Swap with the first element\n array[i], array[min_index] = array[min_index], array[i]\n\ndef bubble_sort(array):\n for i in range(len(array)-1):\n for j in range(len(array)-i-1):\n if array[j] > array[j+1]:\n array[j], array[j+1] = array[j+1], array[j]\n\ndef insertion_sort(array):\n for i in range(1, len(array)):\n key = array[i]\n j = i-1\n while j>= 0 and key < array[j]:\n array[j+1] = array[j]\n j -= 1\n array[j+1] = key\n\n# Generate random list of integers\nrandom_list = [random.randint(0, MAX_NUMBER) for _ in range(MAX_NUMBER)]\n\n# Make copies of random list\nselection_sort_list = random_list.copy()\nbubble_sort_list = random_list.copy()\ninsertion_sort_list = random_list.copy()\n\n# Compute the time taken for each sorting algorithm\nstart = time.time()\nselection_sort(selection_sort_list)\nend = time.time()\nprint(\"Selection sort time taken: %f\" % (end - start))\n\nstart = time.time()\nbubble_sort(bubble_sort_list)\nend = time.time()\nprint(\"Bubble sort time taken: %f\" % (end - start))\n\nstart = time.time()\ninsertion_sort(insertion_sort_list)\nend = time.time()\nprint(\"Insertion sort time taken: %f\" % (end - start)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Construct a 2D array to store the results \n# of subproblems \nvalues_size = len(values) \nresult_matrix = [[0 for x in range(capacity + 1)] \n                     for y in range(values_size + 1)] \n  \n# Fill matrix in bottom up manner \nfor i in range(values_size + 1): \n    for j in range(capacity + 1): \n          \n        # Base condition \n        if i == 0 or j == 0: \n            result_matrix[i][j] = 0\n  \n        # Item can be included \n        elif weights[i - 1] <= j: \n            result_matrix[i][j] = max(values[i - 1]  \n                         + result_matrix[i - 1][j - weights[i - 1]], \n                                   result_matrix[i - 1][j]) \n  \n        # Ignore the item \n        else: \n            result_matrix[i][j] = result_matrix[i - 1][j] \n  \n# Maximum value of the matrix \nmaximum_value = result_matrix[values_size][capacity] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom scipy.optimize import minimize\n\n# Function to optimize\ndef f(x):\n return x**2 - 3*x + 2\n\n# Optimize\noptimized = minimize(f, [-4, 4], method=\"L-BFGS-B\")\n\n# Print result\nprint(\"Optimized value of the function: \", optimized.fun)  # prints -3.999999999999997\nprint(\"Optimized value of x: \", optimized.x) # prints [-4.] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def divisible(x, y):\n    if x % y == 0:\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def celsius_to_fahrenheit(celsius):\n    \"\"\"Converts a temperature in Celsius to Fahrenheit\"\"\"\n    return celsius * 9/5 + 32 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.cluster import KMeans\n\n# Load the data\ndata = np.loadtxt('data.txt')\n\n#Train Clustering Model\nkmeans = KMeans(n_clusters=3, random_state=0)\nkmeans.fit(data)\n\n#Make Predictions\nlabels = kmeans.predict(data)\n\n#Print the labels\nprint(labels) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sumTwo(a, b):\n  return a + b\n\nprint(sumTwo(2, 3)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.tokenize import sent_tokenize\nfrom nltk.corpus import stopwords\nfrom sklearn.metrics.pairwise import cosine_similarity\nimport networkx as nx \n\ntext = \"This is an example text\"\nsentences = sent_tokenize(text)\n\nwords = [nltk.word_tokenize(sentence) for sentence in sentences]\nstop_words = set(stopwords.words(\"english\")) \n\nwords_filtered = []\nfor i in words:\n\twords_filtered.append([w for w in i if not w in stop_words])\n\nsim_matrix = cosine_similarity(words_filtered)\nnx_graph = nx.from_numpy_array(sim_matrix)\nscores = nx.pagerank(nx_graph)\n\nranked_sentences = sorted(zip(scores, sentences), reverse=True)\n \nline = len(ranked_sentences)*[0]\nfor i in range(0, len(ranked_sentences)):\n\tline[i] = ranked_sentences[i][1]\n\n# Output\nprint(\"TextRank Phrases: \", line) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_tax(brackets, price):\n taxamount = 0\n for i in range(len(brackets)):\n if price>=100*(i+1):\n taxamount += 100*brackets[i]\n  else:\n taxamount += (price%100)*brackets[i]\n  break\n return taxamount\n\ntax_brackets = [0.01, 0.05, 0.1, 0.15, 0.2]\nitem_price = 110 \n\ntax = calculate_tax(tax_brackets, item_price)\nprint(tax) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import necessary libraries\nimport numpy as np\n\n#define inputs\ninputs = np.array([ \n  (1, 2, 10), \n  (1, 3, 15), \n  (2, 3, 10), \n  (2, 4, 25), \n  (3, 4, 20),\n])\n\n#define distances matrix\ndist_mat = np.zeros((inputs.shape[0], inputs.shape[0]))\nfor i in range(inputs.shape[0]):\n    for j in range(inputs.shape[0]):\n        if i != j:\n            dist_mat[i, j] = inputs[i, 2] + inputs[j, 2]\n\n#define start and end points\nstart = inputs[0, 0]\nend = inputs[-1, 1]\n\n#define pathfinder algorithm\ndef tsp_finder(start, end, dist_mat):\n \n    #initialize a matrix to track visited nodes \n    visited = np.zeros_like(dist_mat, dtype = bool) \n   \n    #the first node will be marked as visited \n    visited[start] = True \n   \n    #initialize curr with start value \n    curr = start\n    \n    #initialize min_dist with infinity \n    min_dist = float(\"inf\") \n   \n    #initialize the optimal path \n    opt_path = [curr] \n   \n    #loop until the end node is reached \n    while curr != end: \n        \n        #update all unvisited nodes \n        for node in range(dist_mat.shape[0]): \n            if visited[node] == False: \n                \n                #if the distance from the current node to the node is less than the minimum distance \n                if dist_mat[curr, node] < min_dist: \n                   \n                    #update the minimum distance \n                    min_dist = dist_mat[curr, node] \n                   \n                    #update the optimal path \n                    opt_path.append(node) \n                   \n                    #update the current node \n                    curr = node \n   \n        #mark curr as visited \n        visited[curr] = True \n   \n    #add the end node to the optimal path \n    opt_path.append(end) \n   \n    #return the optimal path \n    return opt_path \n\n#find the optimal path\noptimal_path = tsp_finder(start, end, dist_mat)\nprint(\"Optimal Path:\", optimal_path) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\njson_string = '{\"name\": \"James\",\"age\": 27}'\ndata = json.loads(json_string)\nprint(data[\"name\"], data[\"age\"]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortTupleListInDescendingOrder(tuple_list):\n    tuple_list.sort(key=lambda tup: tup[1], reverse=True)\n    return tuple_list\n\nsorted_list = sortTupleListInDescendingOrder([('a', 3), ('b', 1), ('c', 4)])\n\nprint(sorted_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\ndata = pd.read_csv(\"data.csv\")\n\n# Calculate the average fare for each passenger class\nfare_by_class = data.groupby('Passenger_class')['Fare'].mean()\n\n# Output the average fare per class\nfor class_id, avg_fare in fare_by_class.iteritems():\n  print(f\"Average fare for class {class_id}: {avg_fare:.2f}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def divide(num1, num2):\n    quotient = num1 // num2\n    remainder = num1 % num2\n    return quotient, remainder\n\nquotient, remainder = divide(15, 4)\nprint(\"Quotient :\", quotient)\nprint(\"Remainder :\", remainder) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def triangle_of_nums(n):\n    k = 0\n    for i in range(1, n + 1):\n        # inner loop to handle number of columns \n        for j in range(0, i): \n           # printing numbers \n           print(k, end=\" \") \n           # incrementing k \n           k = k + 1\n        # ending line after each row \n        print(\"\\r\") \n\nn = 4\ntriangle_of_nums(n)\n\n# Output:\n# 0 \n# 1 2 \n# 3 4 5 \n# 6 7 8 9 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # define a function to draw the board\ndef draw_board(): \n  \n    print(\"\\n\")                   \n    print(\" --- | --- | --- \")\n    print(\"  7  |  8  |  9  \") \n    print(\" --- | --- | --- \")\n    print(\"  4  |  5  |  6  \") \n    print(\" --- | --- | --- \")\n    print(\"  1  |  2  |  3  \") \n    print(\" --- | --- | --- \")\n  \n# define a function to check if position is empty \ndef check_position(position, board): \n    return board[position] == ' '\n  \n# define a function to check if board is full and return boolean  \ndef is_board_full(board): \n    for i in range(1, 10): \n        if check_position(i, board): \n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/sum_numbers', methods=['POST'])\ndef sum_numbers():\n data = request.get_json()\n numbers = data.get('numbers', [])\n total = 0\n for n in numbers:\n total += n\n return jsonify({'sum': total})\n\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def str_compare(str1, str2):\nreturn str1 == str2\n\nstr_compare('Hello', 'World') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_dict = {'a': 1, 'b': 2, 'c': 3}\n\nnew_dict = {k:v*2 for k, v in my_dict.items()}\n\nprint(new_dict) # {'a':2, 'b':4, 'c':6} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_similarity(string1, string2):\n    # Create dictionary for storing character frequencies\n    char_freq_dict = dict()\n\n    for char in string1:\n        if char in char_freq_dict:\n            char_freq_dict[char] += 1\n        else:\n            char_freq_dict[char] = 1\n\n    # Count number of matching characters\n    matches = 0\n    for char in string2:\n        if char in char_freq_dict and char_freq_dict[char] > 0:\n            matches += 1\n            char_freq_dict[char] -= 1\n\n    # Calculate similarity\n    similarity = (matches/len(string1)) * 100\n\n    return similarity but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import psycopg2\n\nconnection = psycopg2.connect(database='dbname', user='user', password='password', host='localhost', port='5432')\n\ncursor = connection.cursor()\n\ncursor.execute('SELECT * FROM customers')\n\nrows = cursor.fetchall()\n\nfor row in rows:\n    print(row)\n    \ncursor.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\n#importing the dataset\nattractions = ['Harbour Bridge', 'Opera House', 'Bondi Beach']\nratings = [5, 4, 4.5]\n\n#generating the model\nmodel = LinearRegression()\nmodel.fit(attractions, ratings)\n\n#testing the model\npredicted = model.predict([['Harbour Bridge']])\nprint('Predicted rating for Harbour Bridge is ' + str(predicted[0])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n \ndef generate_random_word(length):\n  letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n  return ''.join(random.choice(letters) for i in range(length))\n \nlength = random.randint(8, 16)\nword = generate_random_word(length)\nprint(\"Random word of length\", length, \"is:\", word) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_integers(nums):\n    for i in range(len(nums)): \n        for j in range(i+1, len(nums)): \n            if nums[i] > nums[j]: \n                nums[i], nums[j] = nums[j], nums[i]\n    return nums but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def detect_item(items, item):\n  if item in items:\n    return True\n  else:\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def dfs(graph, start):\n    visited = []\n    stack = [start]\n    while stack:\n        vertex = stack.pop()\n        if vertex not in visited:\n            visited.append(vertex)\n            for node in graph[vertex]:\n                stack.append(node)\n    return visited but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * 5/9\n    return celsius but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(\"Welcome John!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # coding: utf-8\n\"\"\" Copyright (c) 2013 Jo\u00e3o Bernardo Vianna Oliveira\n\n    This file is part of Discoder.\n\n    Discoder is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    Discoder is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with Discoder.  If not, see <http://www.gnu.org/licenses/>.\n\"\"\"\n\n__author__ = 'jb'\n\nfrom discoder.lib import Obj\nimport re\n\nclass ParseError(Exception):\n    pass\n\ntag = Obj(\n    # Regex for parsing the markup language generated by ffprobe or avprobe\n    open = re.compile(r'^\\[(\\w+)\\]$'),\n    close = re.compile(r'^\\[/(\\w+)\\]$'),\n    value = re.compile(r'^(\\w+)(?::(\\w+))?=(.*)$')\n)\n\ndef probe(text):\n    \"\"\"\n        Parse multiline text generated by `ffprobe` or `avprobe`\n        Command line:\n            ffprobe -v quiet [-show_format] [-show_streams] filename\n\n        :type text: str\n        \n        Input:\n        ------\n        [TAG]\n        data_x=1\n        data_y=2\n        INFO:data_z=3\n        [/TAG]\n\n        Output:\n        -------\n        {'tag': [{'data_x': 1, 'data_y': 2, 'info': {'data_z': 3}}]}\n    \"\"\"\n    blocks = Obj()\n    this = None\n    for i, line in enumerate(text.splitlines()):\n        if not line.strip():\n            continue\n        open_block = tag.open.match(line)\n        if open_block:\n            if this is not None:\n                raise ParseError('Opened block without closing last one: {0}: {1}'.format(i, line))\n            this = Obj()\n            name = open_block.group(1).lower()\n            if name == 'stream':\n                name += 's' # compatibility with json output\n            if name != 'format': # \"format\" only has one element.\n                blocks.setdefault(name, []).append(this)\n            else:\n                blocks[name] = this\n        else:\n            if this is None:\n                raise ParseError(\"There's no block to insert data or close: {0}: {1}\".format(i, line))\n            if tag.close.match(line):\n                this = None\n            else:\n                name, sub, val = tag.value.match(line).groups()\n                if not sub:\n                    this[name] = val\n                else:\n                    attr = this.setdefault(name.lower(), Obj())\n                    attr[sub] = val\n    return blocks\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def digit_sum(n):\n    if n == 0:\n        return 0\n\n    return (n % 10) + digit_sum(n // 10)\n\nn = 123\nprint(digit_sum(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_characters(string):\n    chars = {}\n    for char in string:\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    return chars but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import necessary libraries\nimport pandas as pd\nimport numpy as np\n\n# create the feature and target vectors\nfeature_vector = np.array([stock_closing_price, stock_opening_price])\ntarget_vector = np.array(stock_price_direction)\n\n# initialize the model\nmodel = LinearRegression()\n\n# fit the model\nmodel.fit(feature_vector, target_vector)\n\n# prediction\nprediction = model.predict([[41.50, 41.75]])\n\n# classify the prediction\nif prediction > 0:\n print('The stock price is expected to go up.')\nelse:\n print('The stock price is expected to go down.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_mean(numbers):\n    \"\"\"A function to calculate the mean of a list of integers and returns a string of the mean value.\n    \n    Parameters:\n    numbers (list): a list of integers\n    \n    Returns:\n    str: the mean value formatted as a string\n    \"\"\"\n    mean = sum(numbers)/len(numbers)\n    return 'The mean is {}'.format(mean) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import threading\n\nclass BankAccount:\n \n    def __init__(self):\n        self.balance = 0\n        self.lock = threading.Lock()\n        threading.Thread(target = self.print_balance, args = (), daemon = True).start()\n \n    def withdraw(self, amount):\n        with self.lock:\n            self.balance -= amount\n \n    def deposit(self, amount):\n        with self.lock:\n            self.balance += amount\n \n    def print_balance(self):\n        while True:\n            print(\"Balance = \", self.balance)\n            time.sleep(60) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def rotate_array(array, n):\n    '''\n    This function takes in an array and an integer n and rotates the elements of the array by n positions.\n    '''\n    return array[n:] + array[:n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generatePrimes(n, m):\n  primes = []\n  for i in range(n, m + 1):\n    isPrime = True\n    for j in range(2,i):\n      if i % j == 0:\n        isPrime = False\n        break\n    \n    if isPrime:\n      primes.append(i)\n  \n  return primes\n  \nn = 5\nm = 20\nprimes = generatePrimes(n, m)\nprint(primes)  #Output: [5, 7, 11, 13, 17, 19] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\njson_str = json.dumps(person) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def minDepth(root):\n    if root is None:\n        return 0\n    if root.left is None and root.right is None:\n        return 1\n    elif root.left is None:\n        return minDepth(root.right) + 1\n    elif root.right is None:\n        return minDepth(root.left) + 1\n    else:\n        return min(minDepth(root.left), minDepth(root.right)) + 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubble_sort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n#Driver Code\narr = [2, 8, 12, 18, 5, 7, 1]\nbubble_sort(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [(x, y) for x in range(5) for y in range(5)]\nprint(my_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nNormalize a given list of strings\n\"\"\"\n\ndef normalize(lst):\n    output = []\n    for item in lst:\n        output.append(item.lower())\n    return output\n    \nif __name__ == '__main__':\n    input_list = ['Red', 'red', 'WhITE', 'white', 'bLUE', 'blue']\n    print(normalize(input_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countOccurrences(arr, x): \n  \n    count = 0\n    for i in range(len(arr)): \n        if (x == arr[i]): \n            count = count + 1\n  \n    return count \n  \narr = [4, 5, 2, 4, 2]\nx = 2\nprint(countOccurrences(arr, x)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\nnp.random.seed(123)\nvector = np.random.rand(10)\nprint(vector)\n\n# Output:\n# [0.69646919 0.28613933 0.22685145 0.55131477 0.71946897 0.42310646\n#  0.9807642  0.68482974 0.4809319  0.39211752] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(n):\n    if n <= 1:\n        return False\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n    \nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    if is_prime(num):\n        print(\"The number is a prime number.\")\n    else:\n        print(\"The number is not a prime number.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: combined_list = [[1, 'a', 7], [1, 'a', 8], [1, 'b', 7], [1, 'b', 8], [1, 'c', 7], [1, 'c', 8], [2, 'a', 7], [2, 'a', 8], [2, 'b', 7], [2, 'b', 8], [2, 'c', 7], [2, 'c', 8], [3, 'a', 7], [3, 'a', 8], [3, 'b', 7], [3, 'b', 8], [3, 'c', 7], [3, 'c', 8]]\n\ncombined_list = list(itertools.product(list1, list2, list3)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(string):\n    reversed_string = \"\"\n    for c in string:\n        reversed_string = c + reversed_string\n    return reversed_string\n\nstring = \"Hello\"\nprint(reverse_string(string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n  \n# Driver Program \n  \nprint(fibonacci(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # This is necessary to display the game\nimport turtle\n\n# Set some necessary variables\nword = \u201changman\u201d\nhangman_board = [ \u201c\u2014\u2014\u2014\u2014\u2014\u2014-\u201c,\n                \u201c|      |\u201d,\n                \u201c|       \u201d,\n                \u201c|      \u201d,\n                \u201c|      \u201d,\n                \u201c|      \u201d,\n                \u201c\u2014\u2014\u2014\u2014\u2014\u2014-\u201c]\n\n# Create a turtle canvas\ncanvas = turtle.Screen()\n\n# Define functions for printing the Hangman board\ndef draw_hangman(hangman_board):\nflower = turtle.Turtle()\nflower.speed(0)\nfor piece in hangman_board:\n    flower.hideturtle()\n    flower.penup()\n    x = -100\n    y = 180\n    flower.setpos(x,y)\n    flower.write(piece, font=('Arial', 27, 'normal'))\n    y = y - 50\n    flower.setpos(x,y)\n\n# Print the initial board\ndraw_hangman(hangman_board)\n\n# Get user input and update the board\nwhile word != \u201c\u201d:\n    guess = input(\u201cGuess a letter: \u201d)\n    if guess in word:\n\t    print(\u201cThat letter is in the word!\u201d)\n\telse:\n\t   print(\u201cThat letter is not in the word!\u201d)\n\n\tword = word.replace(guess,\u201d\u201d)\n\nprint(\u201cYou have guessed the word. You have won!\u201d) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(list, target):\n  \n for i in range(len(list)):\n  if list[i] == target:\n   return i\n return -1\n\nlist = [10,20,30,40,50]\ntarget = 40\n\n# linear search in list\n\nindex = search(list, target)\n\nif index != -1:\n print(\"Element found at index :\", index)\nelse:\n print(\"Element not found\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def simplex(resultMatrix):\n  n = len(resultMatrix[0]) - 1\n  c = []\n  for i in range(n):\n    c.append(resultMatrix[0][i])\n  \n  a = []\n  for i in range(1, len(resultMatrix)):\n    a.append(resultMatrix[i][:n])\n  \n  b = []\n  for i in range(1, len(resultMatrix)):\n    b.append(resultMatrix[i][n])\n\n  # Initialize the basic and non-basic variables\n  basic_variables = [n + i for i in range(len(b))]\n  non_basic_variables = [i for i in range(n)]\n\n  iteration_count = 0\n  optimal = True\n\n  while optimal is True:\n    iteration_count += 1\n\n    # Compute the coefficient of the objective function\n    coef = [-c[i] for i in non_basic_variables]\n\n    # Compute the column index of the entering variable\n    entering_var = non_basic_variables[coef.index(max(coef))]\n\n    # Compute the vector of reduced costs\n    red_cost = [b[i]/a[i][entering_var] for i in range(len(b))] \n\n    # Compute the leaving variable\n    # If any reduced cost is negative, then the current solution is unbounded\n    min_red_cost = min(red_cost)\n    if min_red_cost <= 0:\n      return \"unbounded\"\n\n    # Compute the leaving variable\n    # If all reduced costs are positive, the solution is optimal and iteration stops\n    leaving_var = basic_variables[red_cost.index(min_red_cost)]\n    if min_red_cost > 0:\n      optimal = False\n      break\n\n    # Compute the new table\n    for i in range(len(b)):\n      row = [] \n      for j in range(len(c) + 1):\n        if j == entering_var:\n          row.append(a[i][j])\n        elif j == leaving_var:\n          row.append(0)\n        else:\n          row.append(a[i][j] - (a[i][entering_var] * a[i][j])/a[i][entering_var])\n      a[i] = row\n\n    # Compute the objective function\n    obj_func = 0\n    for i in range(len(c)):\n      obj_func += c[i] * resultMatrix[0][i]\n    for i in range(len(b)):\n      obj_func += b[i] * resultMatrix[i + 1][-1]\n    resultMatrix[0][-1] = obj_func\n\n    # Compute the basic and non-basic variables\n    basic_variables[red_cost.index(min_red_cost)] = entering_var\n    non_basic_variables[coef.index(max(coef))] = leaving_var\n\n  print(\"Objective function on the optimal solution: \", resultMatrix[0][-1])\n  print(\"Optimal solution: \")\n  for i in range(len(b)):\n    print(\"x{0} = {1}\".format(basic_variables[i], a[i][-1]))\n\nsimplex([[2, 4], [1, 2, 14], [3, -4, 18]]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Ceasar Cipher\ndef encrypt(text,s):\n result = \"\"\n # transverse the plain text\n for i in range(len(text)):\n char = text[i]\n # Encrypt uppercase characters\n if (char.isupper()):\n result += chr((ord(char) + s-65) % 26 + 65)\n # Encrypt lowercase characters\n else:\n result += chr((ord(char) + s - 97) % 26 + 97)\n return result\n\n# Check the above function\ntext = \"Sentry is the best\"\ns = 4\n\nprint(\"Plain Text : \" + text)\nprint(\"Shift pattern : \" + str(s))\nprint(\"Cipher: \" + encrypt(text,s)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to check whether the number is prime or not\n\ndef is_prime(num):\n    \"\"\" Function to check whether the number is prime or not \"\"\"\n\n    # Check whether the given number is greater than 1 \n    if num > 1:\n        # Iterate through the range of numbers to check if any number is a multiple of the given number\n        for i in range(2,num):\n            # If there is any multiple, the number is not prime\n            if (num % i) == 0:\n                return False\n        # If there are no multiples, the number is prime \n        else:\n            return True\n\n# Call the function \nnum = 97\nprint(is_prime(num))\n\n# Output:\n# True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Vector:\n \n def __init__(self, x, y, z):\n  self.x = x\n  self.y = y\n  self.z = z\n \n def magnitude(self):\n  return (self.x**2 + self.y **2 + self.z**2)**0.5\n \n def normalize(self):\n  mag = self.magnitude()\n  return Vector(self.x/mag, self.y/mag, self.z/mag)\n \n def __add__(self, other):\n  return Vector(self.x + other.x, self.y + other.y, self.z + other.z) \n \n def __sub__(self, other):\n  return Vector(self.x - other.x, self.y - other.y, self.z - other.z) \n \n def __mul__(self, scalar):\n  return Vector(self.x * scalar, self.y * scalar, self.z * scalar) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_grade(score):\n    # Set the score range\n    grade_map = {\n        90: 'A',\n        80: 'B',\n        70: 'C',\n        60: 'D'\n    }\n\n    # Iterate over the range and return the corresponding grade\n    for grade_min, grade in grade_map.items():\n        if score >= grade_min:\n            return grade\n\n# Test \nprint(get_grade(85)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_list(list):\n if not list:\n  return 0\n\n return list[0] + sum_list(list[1:]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #Importing the necessary libraries\nimport tweepy\nimport requests\n\n#Authentication \nconsumer_key = ...\nconsumer_secret = ...\n\naccess_key = ...\naccess_secret = ...\n\n#Creating the authentication object\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n\n#Setting access tokens\nauth.set_access_token(access_key, access_secret)\n\n#Creating the API object\napi = tweepy.API(auth)\n\n#Defining the sentiment analysis function\ndef sentiment_analysis(tweet):\n    post_data = {'text': tweet}\n    response = requests.post('https://api.meaningcloud.com/sentiment-2.1', \n                            data=post_data, \n                            headers={'content-type':'application/x-www-form-urlencoded', \n                            'apikey': '<insert API key here>'})\n                            \n    response_json = response.json()\n    print(response_json)\n    return response_json['score_tag']\n\n#Running the sentiment analysis\ntweets = api.search(q='#python', lang='en', rpp=1)\nfor tweet in tweets:\n print(sentiment_analysis(tweet.text)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findSum(nums):\n total = 0\n for num in nums:\n total += num\n return total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_paragraphs_to_sentences(paragraph): \n    sentences = paragraph.split('. ') \n    return sentences\n\nsentences = convert_paragraphs_to_sentences(\"This is the first sentence. This is the second sentence. This is the third sentence.\")\nfor x in sentences:\n    print(x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def common_elements(list1, list2):\n    common_elements = []\n\n    for element in list1: \n        if element in list2:\n            common_elements.append(element)\n    return common_elements\n\nlist1 = [2, 3, 4, 5, 6]\nlist2 = [3, 5, 7, 8, 9]\n\nprint(common_elements(list1, list2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The sorted() method is a built-in function in Python that takes an iterable object and returns a sorted list. It is used to sort the items of an iterable in a specific order which may be either ascending or descending. The sorted() method works by comparing each item in the iterable with all the other items and sorting them in a specific order. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_vowels(s):\n  vowels = 'aeiou'\n  count = 0\n  for c in s.lower():\n    if c in vowels:\n      count += 1\n  return count\n\ns = 'Hello World!'\nprint(count_vowels(s)) # Output 3 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def even_number_list(a, b):\n    return list(i for i in range(a, b+1) if i%2 == 0) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Take input from the user\nstring = input(\"Enter string : \")\n\n# Reverse the string \nrev_str = string[::-1]\n\n# Print the reversed string\nprint(\"Reverse string :\", rev_str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\n\narg1 = sys.argv[1]\narg2 = sys.argv[2]\n\nif arg1 == arg2:\n print('equal')\nelse:\n print('not equal') but is not the same. just give one example and only return the code."}
