{"prompt": "make some code that functions the same as the following code: def filter_by_criteria(dictionary, criteria):\n    filtered_dict = {}\n\n    for key, value in dictionary.items():\n        # Check if key is present in criteria\n        if key in criteria:\n            filtered_dict[key] = value\n \n    return filtered_dict\n\n# Main program\ndictionary = {\n\"a\" : 1,\n\"b\" : 2,\n\"c\" : 3,\n\"d\" : 4\n}\ncriteria = [\"a\", \"b\"]\n\nresult = filter_by_criteria(dictionary, criteria)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longer_string(string1, string2):\n    if len(string1) > len(string2):\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nx = random.randint(5,15)\nprint(x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply_matrix(A,B):\nresult = [[0,0], [0,0]]\nfor i in range(len(A)):\n for j in range(len(B[0])):\n for k in range(len(B)):\n result[i][j] += A[i][k] * B[k][j]\nreturn result\n\n# example\nA = [[1, 2], [3, 4]]\nB = [[5, 6], [7, 8]]\nprint(multiply_matrix(A, B)) \n# [[19, 22], [43, 50]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\n# define objective function\ndef objective_function(x):\n    return (x - 5)**2 + 10\n    \n# define optimization algorithm\ndef optimize(f, x0, alpha = 0.1, epsilon = 1e-3): \n    x_prev = x0\n    x = x0\n    while True:\n        gradient = -2 * (x - 5)\n        x_next = x - alpha * gradient\n        if np.abs(x_next - x_prev) < epsilon:\n            break\n        x_prev = x\n        x = x_next\n    return x\n\n# optimize objective function\nx0 = 1\nx_opt = optimize(objective_function, x0)\nprint(x_opt)\n# Output:\n5.000000000093918 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nFind the k-nearest neighbors of a given point\n\"\"\"\nimport numpy as np \n  \ndef knn(point, k, points): \n    distances = []\n    for p in points:\n        distances.append((((point[0] - p[0]) ** 2 + (point[1] - p[1]) **2) ** 0.5, p))\n    distances.sort()\n    neighbors = []\n    for i in range(k): \n        neighbors.append(distances[i][1]) \n    return neighbors\n  \nif __name__ == \"__main__\": \n    # Array of points   \n    points = np.array([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]) \n    # Provided point \n    point = (1, 2)\n    k = 3 \n    print(knn(point, k, points)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\n# Read the data set\ndata = pd.read_csv('transactions.csv')\n\n# Extract the features and the target\nX = data.iloc[:,:-1]\ny = data.iloc[:,-1]\n\n# Split the data into train and test set\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=0)\n\n# Train a logistic regression model\ngreg_model = LogisticRegression(solver='liblinear')\ngreg_model.fit(X_train, y_train)\n\n# Make predictions using the model\ny_pred = greg_model.predict(X_test)\n\n# Calculate the accuracy of the model\naccuracy = accuracy_score(y_test,y_pred)\nprint(\"Accuracy:\",accuracy) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_strings(strings):\n    strings.sort()\n    for string in strings:\n        print(string)\n\nsort_strings(['apple', 'mango', 'banana']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Program to create two separate lists containing the even and odd elements of the given list \ngiven_list = [1, 2, 3, 4, 5, 6, 7, 8] \n\neven_list = [] \nodd_list = [] \n\nfor element in given_list: \n    if element % 2 == 0 : \n        even_list.append(element) \n    else: \n        odd_list.append(element) \n\nprint(even_list)\nprint(odd_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\n# example data\ndata = '{\"id\":1,\"name\":\"Testing\",\"description\":\"This is a test\"}'\n\n# parse data into a Python object\nobj = json.loads(data)\n\nprint(obj) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def padElements(list,char):\n  paddedList = []\n  maxLength = 0\n  \n  for sublist in list:\n    maxLength = max(maxLength,len(sublist))\n  \n  for sublist in list:\n    padded_sublist = sublist + [char] * (maxLength-len(sublist))\n    paddedList.append(padded_sublist)\n  \n  return paddedList\n\nprint(padElements([[1, 2, 3], [4, 5], [6, 7, 8, 9]], '*'))\n// Output: [[1, 2, 3, '*', '*'], [4, 5, '*', '*', '*'], [6, 7, 8, 9, '*']] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nr = requests.get('https://example.com')\nhtml = r.text\nsoup = BeautifulSoup(html)\n\ntext = soup.find('div', {'class': 'text'}).text\nprint(text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\npage = requests.get('https://website.com/')\nsoup = BeautifulSoup(page.content, 'html.parser')\n\nfor link in soup.find_all('a', href=True):\n    print(link['href']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_occurrences(lst, num):\n    count = 0\n    for item in lst:\n        if item == num:\n            count += 1\n    return count but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def largest(list):\n largest = 0\n for number in list:\n if number > largest:\n largest = number\n return largest\n\nprint(largest([1, 2, 3, 4, 5]))\n# Outputs 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1,11):\n for j in range(1,11):\n  print(str(i*j)+'\\t', end = '')\n print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(number):\n    factorial = 1\n    for i in range(1, number + 1):\n        factorial = factorial * i\n    return factorial\n\nn = 5\nresult = factorial(n)\nprint(result) # 120 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_common_elements(arr1, arr2):\n  common = []\n  for element in arr1:\n    if element in arr2:\n      common.append(element)\n  return common\n\narr1 = [1, 2, 3, 4, 5]\narr2 = [2, 3, 6, 7, 8]\n\nprint(find_common_elements(arr1, arr2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nDesign an efficient algorithm in Python for calculating the Fibonacci sequence \n\"\"\"\n\n\ndef fib(n):\n    if (n == 0):\n        return 0\n    elif (n == 1):\n        return 1\n    else:\n        f1 = 0\n        f2 = 1\n        for x in range(2, n+1):\n            f = f1+f2\n            f1 = f2\n            f2 = f\n        return f\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter number of terms:\"))\n    print(\"Fibonacci sequence:\")\n    for i in range(n):\n        print(fib(i)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_val(nums): \n    # initialize maximum value \n    max_val = nums[0]\n\t\n    # loop through the list and find the maximum value\n    for x in nums: \n        if x > max_val: \n            max_val = x\n\t\t\n    # return maximum value \n    return max_val\n\n# main program \nnums = [100, 2, 900, 32, 4] \nmaximum = max_val(nums) \n\n#print the maximum value\nprint(\"Maximum value:\", maximum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# Read the data\ndata = pd.read_csv(\"apple stock data.csv\")\n\n# Extract the data points\nX = data[['open', 'high', 'low', 'volume']]\ny = data['close']\n\n# Fit the model\nmodel.fit(X, y)\n\n# Predict the stock price of Apple in 2021 \npredict = model.predict([[Apple_open, Apple_high, Apple_low, Apple_volume]])\nprint(predict) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\n \ndef measure_time(func):\n    t_start = time.time()\n    func()\n    t_end = time.time()\n    t_delta = t_end - t_start\n    print(f\"Function execution time is {t_delta} seconds\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: even_nums = [x for x in range(10, 30) if x%2 == 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_with_first_letter(sentence):\n    words = sentence.split()\n    result = [word[0] for word in words]\n    return ''.join(result)\n\nprint(replace_with_first_letter(\"Hello World\")) # Output: HW but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def selectionSort(arr):\n  # Loop through array elements\n  for i in range(len(arr)):\n    # Find minimum element in remaining array\n    min_index = i\n    for j in range(i+1, len(arr)):\n      if arr[min_index] > arr[j]:\n        min_index = j\n    # Swap current with min element\n    arr[i], arr[min_index] = arr[min_index], arr[i]\n  return arr\n\narr = [17, 5, 20, 8, 4, 11]\nprint(\"Original Array: \", arr)\narr = selectionSort(arr)\nprint(\"Sorted Array: \", arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: x = 0\nfor i in range(0,10000,2):\n    x += i\nx *= 2\nx += (10000 - 1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math \n\ndef rmse(list1, list2): \n    mean_square = 0\n    for i in range(len(list1)):\n        mean_square += math.pow((list1[i] - list2[i]), 2)\n    return math.sqrt(mean_square/len(list1))\n\nrmse_value = rmse(list1, list2)\nprint(\"Root Mean Square Error is:\", rmse_value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def func(n, nums):\n  res = 0\n  for i in range(n):\n    res += nums[i]\n  return res but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def nth_smallest(input_list, n):\n    input_list.sort()\n    return input_list[n-1]\n\ninput_list = [2, 3, 5, 7, 11]\nn = 2\nresult = nth_smallest(input_list, n)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Calculate the total cost\n\nflight_cost = 500\nhotel_cost = 350\nother_expenses = 200\ntotal_cost = flight_cost+hotel_cost+other_expenses\n\nprint(f\"The total cost of the trip is ${total_cost}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(len(numbers)-1, -1, -1):\n    print(numbers[i]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_password():\n    password_length = 8\n    password_characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$^&*()_+-=\"\n    password = ''.join(random.sample(password_characters, password_length))\n    return password but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mean(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total / len(nums)\n\nmean([1, 3, 5, 8, 10])  # 6.0 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n-1) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_sum(arr): \n    n = len(arr) \n    max_sum_so_far = 0\n  \n    for i in range(n): \n        max_ending_here = 0\n          \n        for j in range(i, n): \n            max_ending_here += arr[j] \n            if (max_sum_so_far < max_ending_here): \n                max_sum_so_far = max_ending_here \n  \n    return max_sum_so_far\n\nresult = max_sum([1,-3,7,12,-4,8])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\nd1 = [12, 4, 8, 10]\nd2 = [6, 12, 14, 8]\n\n# set width of bar\nbarWidth = 0.4\n\n# set height of bar\nbars1 = d1\nbars2 = d2\n\n# Set position of bar on X axis\nr1 = np.arange(len(d1))\nr2 = [x + barWidth for x in r1]\n\n# Make the plot\nplt.bar(r1, bars1, width=barWidth, color='#7f6d5f', label='Dataset 1')\nplt.bar(r2, bars2, width=barWidth, color='#557f2d', label='Dataset 2')\n\n# Add xticks on the middle of the group bars\nplt.xlabel('Groups', fontweight='bold')\nplt.xticks([r + barWidth for r in range(len(d1))], ['A', 'B', 'C', 'D'])\n\n# Create legend & Show graphic\nplt.legend()\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = \"A few words, some more words!\"\n\nwords_list = words.split()\n\nfrequency_dict = {word:words_list.count(word) for word in words_list}\n\nprint(frequency_dict)\n# Output: {'A': 1, 'few': 1, 'words,': 1, 'some': 1, 'more': 1, 'words!': 1} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password(length):\n    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(chars) for _ in range(length))\n    return password but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport requests\n\nurl = 'https://api.openweathermap.org/data/2.5/weather?q=London&units=metric&appid=YOUR_API_KEY'\ndata = requests.get(url).json()\n\nweather_data = {\n 'city': data['name'],\n 'temperature': data['main']['temp'],\n 'humidity': data['main']['humidity'],\n 'description': data['weather'][0]['description']\n}\n\nweather_df = pd.DataFrame(weather_data, index=[0]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num):\n    for i in range(2,num):\n        if (num % i) == 0:\n            return False\n    return True\n\ndef generate_prime_numbers(num):\n    for n in range(2, num+1):\n        if is_prime(n):\n            print(n, end=\" \")\n\ngenerate_prime_numbers(50) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def split(text, delimiter):\n  substring = []\n  temp = \"\"\n   \n  for i in text:\n    if i != delimiter:\n      temp += i\n    else:\n      substring.append(temp)\n      temp = \"\"\n  substring.append(temp)\n  \n  return substring\n    \ntext = \"one-two-three-four\"\nprint(\"Original String: \"+text)\n\nprint(\"Split String:\",split(text,'-')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #sort list of objects by age\ndef sortByAge(objects):\n    # Use insertion sort algorithm\n    n = len(objects)\n    for i in range(1, n):\n        currItem = objects[i]\n        #check if the current item has an age attribute\n        if hasattr(currItem, 'age'):\n            #find the position to insert        \n            j = i - 1\n            while j >= 0 and (not hasattr(objects[j], 'age') or objects[j].age > currItem.age):\n                objects[j+1] = objects[j]\n                j -= 1\n            objects[j+1] = currItem\n    return objects but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Request the HTML page\nurl = 'https://www.example.com/'\npage = requests.get(url)\n\n# Create the Beautiful Soup object\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Fetch all HTML elements\nelements = soup.find_all()\n\n# Output elements\nfor element in elements:\n    print(element) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from bs4 import BeautifulSoup\nimport requests\n\ndef get_news_articles(url):\n    page = requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n    articles = []\n    for article in soup.find_all('article'):\n        link = article.find('a', class_=\"shop-now-option\")['href']\n        title = article.find('h2').get_text()\n        articles.append({'title': title, 'link': link})\n    return articles but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: students = [\n    {\n        \"name\": \"Alice\",\n        \"grade\": 85\n    },\n    {\n        \"name\": \"Bob\",\n        \"grade\": 95\n    },\n    {\n        \"name\": \"Carol\",\n        \"grade\": 73\n    }\n]\n\ndef sortGrades(students):\n    # sort list of dictionaries by grade in reverse order\n    sortedStudents = sorted(students, reverse=True, key = lambda i: int(i['grade'])) \n    return sortedStudents\n\nsortedStudents = sortGrades(students)\n\nfor student in sortedStudents:\n    print(student) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def grade_test(questions):\n    score = 0\n    for question in questions:\n        if question['answer'] == question['correct_answer']:\n            score += 3\n    return score but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ntext = \"The quick brown fox jumps over the lazy dog\"\n\n# Extract words using a regular expression\nwords_list = re.findall(r\"[\\w']+\", text)\n\n# Print the first ten words\nprint(words_list[:10]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MyClass:\n def __init__(self, x, y):\n self.x = x\n self.y = y\n\ndef to_string(self):\n return f'The numbers are {self.x} and {self.y}.'\n\nc = MyClass(7,5)\nprint(c.to_string()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def permutations(s):\n    result = []\n    if len(s) == 1:\n        result = [s]\n\n    else:\n        for i, letter in enumerate(s):\n            for perm in permutations(s[:i] + s[i+1:]):\n                result += [letter + perm]\n\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python2\n#\n#~~Player Functions~~\n\nfrom superRandom import superRandint, superChoice\nfrom time import sleep\nimport actions\nimport monsters\n\nclass CreatePlayer(object):\n  \n    def __init__(self, name):\n        self.health = 125\n        self.xp = 0 #TODO: use gained XP to gain levels\n        self.potions = 0\n        self.gold = 0\n        self.weapons = [\"dagger\"]\n        self.name = name\n        self.steps = 0\n        self.damage_dealt = 12 #not needed\n        self.current_weapon = \"dagger\"\n        self.dragon_attack = False\n        self.basilisk_attack = False\n        self.has_sword = False\n        self.has_pistol = False\n        self.has_rifle = False\n        self.run_away = 0\n        self.has_key = False\n\tself.turns = 0\n        \n    def __repr__(self):\n        return (\"\\nName: %s\\nHealth: %d\\nXP: %d\\nPotions: \"\n                \"%d\\nGold: %d\\nWeapons: %s\\nSteps: %d\\nCurr\"\n                \"ent Weapon: %s\\nDragon Attack: %s\\nBasili\"\n                \"skAttack: %s\\nHas Sword: %s\\nHas Pistol: \"\n                \"%s\\nHas Rifle: %s\\nTimes Run Away: %d\\nHa\"\n                \"s Key: %s\\nTurns: %s\" % (self.name,self.health,self.xp,\n                    self.potions,self.gold,self.weapons,\n                    self.steps,self.current_weapon,\n                    self.dragon_attack,self.basilisk_attack,\n                    self.has_sword,self.has_pistol,self.has_rifle,\n                    self.run_away,self.has_key,self.turns)\n                )\n\n    def find_gold(self):\n        amount = superRandint(1,25)\n        self.gold += amount\n        print \"\\nYou found %d gold coins, which brings you to a total of %d coins!\" % (amount, self.gold)\n        sleep(2)\n        return self\n    \n    def find_gold_debug(self,amount):\n        self.gold += amount\n        print \"\\nYou found %d gold coins, which brings you to a total of %d coins!\" % (amount, self.gold)\n        sleep(2)\n        return self\n    \n    def find_potions(self):\n        self.potions += 1\n        print \"\\nYou found a health potion! You now have %d potions in your inventory.\" % self.potions\n        sleep(2)\n        return self\n    \n    def find_weapon(self):\n        #TODO: add more weapons\n        weapons = [\"sword\",\"pistol\",\"rifle\"]\n        found = superChoice(weapons)\n        print \"\\nYou found a %s!\" % found\n        if found == \"sword\":\n            self.has_sword = True\n        elif found == \"pistol\":\n            self.has_pistol = True\n        else:\n            self.has_rifle = True\n        return self     \n    \n    def buy_potions(self):\n        print \"\\nGold: %d\" % self.gold\n        print \"Each potion costs 20 gold pieces and restores 25 HP.\"\n        amount = raw_input(\"\\nHow many would you like to purchase? \")\n        cost = int(amount) * 20\n        if self.gold >= int(cost):\n            self.gold = self.gold - int(cost)\n            self.potions += int(amount)\n            print \"\\n%d potions have been added to your inventory.\" % int(amount)\n            sleep(2)\n            return self\n        else:\n            print \"\\nSorry you don't have enough gold for %d potions!\" % int(amount)\n            sleep(2)\n            actions.visit_shop(self)\n    \n    def use_potion(self):\n        if self.potions > 0 and self.potions < 2:\n            self.potions -= 1\n            self.health += 25\n            print \"\\nYour health is now at %d\" % self.health\n        elif self.potions > 1:\n            print \"\\nYou currently have %d potions\" % self.potions\n            amount = int(raw_input(\"\\nHow many? \"))\n            raise_health = amount * 25\n            self.health += raise_health\n            self.potions -= amount\n            print \"\\nYour health is now at %d\" % self.health\n        else:\n            print \"\\nSorry you don't have any more potions!\"\n        sleep(2)\n        return self\n        \n    def list_inventory(self):\n        actions.clearscreen()\n        print (\"\\nName: %s\\n\"\n                \"Exp. Points: %d\\n\"\n                \"Potions Held: %d\\n\"\n                \"Gold: %d pieces\\n\"\n                \"Current Weapon: %s\" %(self.name, self.xp,\n                    self.potions, self.gold, self.current_weapon)\n                )\n        \n        if self.has_pistol is True and \"pistol\" not in self.weapons:\n            self.weapons.append(\"pistol\")\n        elif self.has_rifle is True and \"rifle\" not in self.weapons:\n            self.weapons.append(\"rifle\")\n        elif self.has_sword is True and \"sword\" not in self.weapons:\n            self.weapons.append(\"sword\") \n        print \"Weapons: %s\" % \", \".join(str(weapon) for weapon in self.weapons)\n        sleep(4)\n        \n    def low_health(self):\n        if self.health <= 60 and self.potions > 0:\n            print \"\\n*****DANGER*****\\n\"\n            choice = raw_input(\"\\nYour health is currently at %d, a\"\n                    \"nd you currently have %d potions in your inven\"\n                    \"tory. \\nWould you like to use one? \" % (self.health,self.potions)\n                    )\n            choice.lower()\n            if choice == 'y' or choice == 'yes':\n                self.use_potion()\n                return self\n            else:\n                print \"\\nOk tough guy.\"\n                sleep(2)\n                return self\n    \n    def set_health(self, newHealth):\n        self.health = newHealth\n        print \"\\nHealth set to %d\" % self.health\n        sleep(2)\n        return self\n    \n    def take_damage(self, damage):\n        self.health -= damage\n        print \"\\nYour health is now at %d\" % self.health\n        if self.health < 0:\n            print \"\\nYou were slain! Maybe you should carry more health potions with you next time!\\n\"\n            exit(0)\n        sleep(2)\n        return self\n    \n    def deal_damage(self,Monster):\n        if self.current_weapon == \"sword\":\n            damage_dealt = superRandint(13,30)\n        elif self.current_weapon == \"pistol\":\n            damage_dealt = superRandint(31,60)\n        elif self.current_weapon == \"rifle\":\n            damage_dealt = superRandint(61,120)\n        else: \n            damage_dealt = superRandint(1,12)\n        \n        Monster.take_damage(damage_dealt,self)\n        \n    def gain_xp(self,monster_name):\n        if monster_name == \"Dragon\":\n            gained = superRandint(40,150)\n        elif monster_name == \"Gremlin\":\n            gained = superRandint(1,35)\n        elif monster_name == \"Demon\":\n            gained = superRandint(15,50)\n        elif monster_name == \"Zombie\":\n            gained = superRandint(16,75)\n        else:\n            gained = superRandint(1,30)\n        self.xp += gained\n        print \"\\nYou gained %d XP!\" % gained\n        return self\n\n    def buy_weapon(self):\n        print \"\\nS)word:   25 Gold\"\n        print \"P)istol:  60 Gold\"\n        print \"R)ifle:   120 Gold\"\n        choice = raw_input(\"\\nWhich one would you like to purchase? \").lower()\n        if choice == 's'and self.gold >= 25:\n            self.gold -= 25\n            self.has_sword = True \n            print \"\\nA sword has been added to your inventory.\"\n            sleep(2)\n        elif choice == 'p' and self.gold >= 60:\n            self.gold -= 60\n            self.has_pistol = True\n            print \"\\nA pistol has been added to your inventory.\"\n            sleep(2)\n        elif choice == 'r' and self.gold >= 120:\n            self.gold -= 120\n            self.has_rifle = True\n            print \"\\nA rifle has been added to your inventory.\"\n            sleep(2)\n        else:\n            print \"\\nSorry you don't have enough gold for that purchase.\"\n            sleep(2)\n            actions.visit_shop(self)\n        return (self)\n    \n    def set_current_weapon(self): \n        print \"\\nCurrent Weapon: \" + self.current_weapon\n        #doesn't show correct weapons after a new weapon is found\n        #even if weapon is in inventory, method itself works perfectly.\n        print \"Available Weapons: %s\" % \", \".join(str(weapon) for weapon in self.weapons) \n        choice = raw_input(\"\\nUse weapon: \").lower()\n        if choice == \"sword\" and self.has_sword is True:\n            self.current_weapon = \"sword\"\n        elif choice == \"pistol\" and self.has_pistol is True:\n            self.current_weapon = \"pistol\"\n        elif choice == \"rifle\" and self.has_rifle is True:\n            self.current_weapon = \"rifle\"\n        elif choice == \"dagger\":\n            self.current_weapon = \"dagger\"\n        else:\n            print \"\\nSorry you don't currently have that weapon in your inventory.\"\n        print \"\\nCurrent weapon has been changed to: %s\" % self.current_weapon\n        sleep(2)\n        return self\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import hashlib\n \ndef secure_hash(string):\n return hashlib.sha256(string.encode()).hexdigest() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ntext = \"This is an example string\"\nwords = re.findall(r'\\w+', text)\nprint(\"Total words: \" + str(len(words))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\n# some Python data\ndata = [{'name': 'John', 'age': 30, 'city': 'New York'},\n        {'name': 'Max', 'age': 20, 'city': 'Berlin'}]\n\n# convert to JSON\njson_data = json.dumps(data)\n\n# save as JSON file\nwith open(\"data.json\", \"w\") as json_file:\n json.dump(json_data, json_file) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: fruits = ['apple', 'banana', 'grape', 'pineapple', 'strawberry', 'orange', 'mango', 'pear', 'peach', 'kiwi'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_one(arr): \n    for i in range(len(arr)): \n        arr[i] += 1 \n    return arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class CustomerDatabase:\n    def __init__(self):\n        self.customers = []\n   \n    def add_customer(self, customer):\n        self.customers.append(customer)\n   \n    def get_customer(self, id):\n        for customer in self.customers:\n            if customer.id == id:\n                return customer\n        return None\n   \n    def get_all_customers(self):\n        return self.customers but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import flask\nfrom flask_restful import Resource, Api\n\napp = flask.Flask(__name__)\napi = Api(app)\n\nclass Users(Resource):\n    def get(self):\n        conn = sqlite3.connect('users.db')\n        cursor = conn.cursor()\n        cursor.execute('SELECT * FROM users ORDER BY id ASC')\n        users = cursor.fetchall()\n        conn.close()\n        return users\n\napi.add_resource(Users, '/users') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import secrets\n\ndef get_otp(length=6):\n    digits = \"0123456789\"\n    otp = \"\"\n    for i in range(length):\n        otp += secrets.choice(digits)  \n    return otp\n\nprint(get_otp()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def divide(a,b):\n    try:\n        return a/b\n    except (ZeroDivisionError) as e:\n        print('Division by zero')\n    except Exception as e:\n        print(str(e))\n        return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def min_list(numbers):\n  min_num = min(numbers)\n  return min_num\n\ndef max_list(numbers):\n  max_num = max(numbers)\n  return max_num\n\ndef mean_list(numbers):\n  mean_num = sum(numbers)/len(numbers)\n  return mean_num\n\nnumbers = [1,2,3,4,5,6,7,8,9,10]\n\nprint(min_list(numbers))\nprint(max_list(numbers))\nprint(mean_list(numbers))\n\n# Output\n# 1\n# 10\n# 5.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ntext = 'This is a sentence with words'\nfind = 'words'\nreplace = 'letters'\n\nnew_text = re.sub(find, replace, text)\nprint(new_text)\n# Output: This is a sentence with letters but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findmaxmin(array):\n\tmaximum = array[0]\n\tminimum = array[0]\n\tfor i in range(1,len(array)):\n\t\tif array[i] > maximum:\n\t\t\tmaximum = array[i]\n\t\tif array[i] < minimum:\n\t\t\tminimum = array[i]\n\treturn (maximum, minimum)\n\narray = [1,2,3,4,5]\n\nprint(findmaxmin(array)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport tensorflow as tf\n\n# define parameters\nnum_features = 10\nnum_classes = 2 \nnum_samples = 6\n\n# create placeholder for input data\ninput_x = tf.placeholder(tf.float32, shape=[num_samples, num_features])\n\n# define weights\nweights = {\n    'h1': tf.Variable(tf.random_normal([num_features, 2])),\n    'out': tf.Variable(tf.random_normal([2, num_classes]))\n}\n\n# define biases\nbiases = {\n    'b1': tf.Variable(tf.random_normal([2])),\n    'out': tf.Variable(tf.random_normal([num_classes]))\n}\n\n# define layers\nlayer_1 = tf.add(tf.matmul(input_x, weights['h1']), biases['b1'])\noutput_layer = tf.matmul(layer_1, weights['out']) + biases['out']\n\n# define loss and optimizer\nloss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=output_layer, labels=input_x))\noptimizer = tf.train.AdamOptimizer(learning_rate=0.001).minimize(loss)\n\n# create session and initialize variables\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n\n    # fetch the input data\n    data_x = np.array(...)\n\n    # train the model\n    for i in range(1000):\n        sess.run(optimizer, feed_dict={input_x: data_x})\n\n    # predict the classes for the input data\n    classification_output = sess.run(output_layer, feed_dict={input_x: data_x}) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def computeMaxTemperatureRange(minTemperature, maxTemperature):\n    max_range = 0\n    start_index = 0\n    end_index = 0\n    temp_range = 0\n    \n    for i, temp in enumerate(temperature_list):\n        if temp < minTemperature or temp > maxTemperature:\n            if temp_range > max_range:\n                max_range = temp_range\n                end_index = i - 1\n            temp_range = 0\n        else: \n            if temp_range == 0:\n                start_index = i\n            temp_range += 1\n    \n    print('Longest period of time in temperature range is from index {0} to {1}'.format(start_index, end_index))\n    print('Time range = {0} days'.format(max_range)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCheck if a string contains 'a'\n\"\"\"\n\nif 'a' in my_string:\n    #string contains 'a'\nelse:\n    #string does not contain 'a' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_perimeter(side1, side2, side3):\n perimeter = side1 + side2 + side3\n return perimeter\n\nside1 = 10\nside2 = 12\nside3 = 14\n\nperimeter = calculate_perimeter(side1, side2, side3)\nprint(\"The perimeter of the triangle is:\", perimeter) # Output: 36 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from scipy.optimize import minimize\n\ndef objective(X):\n x = X[0]\n y = X[1]\n return x**2 + y**2\n\ndef constraint1(X):\n x = X[0]\n y = X[1]\n return x + y - 1\n\nX = (1.0,1.0)\nb = (0.0,None)\nbnds = (b,b)\ncon1 = {'type':'eq','fun': constraint1}\nsolution = minimize(objective, X, method='SLSQP', bounds=bnds, constraints=con1)\n\nprint(solution)\n# Output:  fun: 0.9999999999294936\n          x: [0.49999999 2.49999999] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # # This program implements the sort-merge join algorithm\n# num_partitions = 8\n# n = 8\n# def sort_merge_join(R1,R2):\n#     sorted_R1 = []\n#     sorted_R2 = []\n#     R = []\n#     # Sort R1 and R2 according to their last column\n#     for i in range(0, num_partitions):\n#         for j in range(0, n):\n#             key_R1 = R1[i][-1]\n#             key_R2 = R2[i][-1]\n#             sorted_R1.append(key_R1)\n#             sorted_R2.append(key_R2)\n#             sorted_R1.sort()\n#             sorted_R2.sort()\n#     # TODO: Construct output R but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n \n# Read in data\ndata = []\nwith open('stock_prices.txt') as f:\n    data = [float(x) for x in f.read().split()]\n\n# Plot data\nplt.plot(range(1, len(data)+1), data)\nplt.title('Stock Price Over Time')\nplt.xlabel('Time')\nplt.ylabel('Price')\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class DecimalToBinary:\n  def __init__(self, num):\n    self.num = num\n\n  def convert(self):\n    if self.num > 1:\n      self.convert(self.num // 2)\n    print(self.num % 2, end='')\n\nnumber = DecimalToBinary(14)\nnumber.convert() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_lists(list_1, list_2):\n    \"\"\"Merge the two given lists.\"\"\"\n    list_1.extend(list_2)\n    return list_1\n\n# Usage Example\nlist_1 = [1, 2, 3] \nlist_2 = [4, 5, 6]\nmerged_list = merge_lists(list_1, list_2)\nprint(merged_list)  # [1, 2, 3, 4, 5, 6] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def parse_query_string(url): \n    components = url.split('?')\n    if len(components) == 2: \n        query_string = components[1]\n        params = query_string.split('&')\n        output = {}\n        for param in params: \n            key_value = param.split('=')\n            output[key_value[0]] = key_value[1]\n        return output but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: data_structure = [\n    {'name': 'John', 'age': 32},\n    {'name': 'Mary', 'age': 25},\n    {'name': 'James', 'age': 29},\n    {'name': 'Alex', 'age': 26},\n    {'name': 'Gina', 'age': 32},\n    {'name': 'Charlie', 'age': 28},\n    {'name': 'Diana', 'age': 30},\n    {'name': 'Mark', 'age': 33},\n    {'name': 'Tina', 'age': 27},\n    {'name': 'Fred', 'age': 31}\n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\ndef find_most_common_words(text):\n words = text.split()\n counter = Counter(words)\n return counter.most_common()\n\nprint(find_most_common_words(text))\n\n# Output: [('a', 2), ('the', 2), ('in', 2), ('of', 2), ('most', 1), ('This', 1), ('is', 1), ('text', 1), ('find', 1), ('common', 1), ('words', 1), ('given', 1), ('output', 1), ('should', 1), ('be', 1), ('list', 1), ('descending', 1), ('order', 1), ('frequency', 1)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: ############################################################################\n# This file is part of LImA, a Library for Image Acquisition\n#\n# Copyright (C) : 2009-2014\n# European Synchrotron Radiation Facility\n# BP 220, Grenoble 38043\n# FRANCE\n#\n# This is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n#\n# This software is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, see <http://www.gnu.org/licenses/>.\n############################################################################\n#=============================================================================\n#\n# file :        Andor3.py\n#\n# description : Python source for the Andor3 and its commands. \n#                The class is derived from Device. It represents the\n#                CORBA servant object which will be accessed from the\n#                network. All commands which can be executed on the\n#                Pilatus are implemented in this file.\n#\n# project :     TANGO Device Server\n#\n# copyleft :    European Synchrotron Radiation Facility\n#               BP 220, Grenoble 38043\n#               FRANCE\n#\n#=============================================================================\n#         (c) - Bliss - ESRF\n#=============================================================================\n#\nimport PyTango\nimport sys, types, os, time\n\nfrom Lima import Core\nfrom Lima import Andor3 as Andor3Module\n# import some useful helpers to create direct mapping between tango attributes\n# and Lima interfaces.\nfrom Lima.Server import AttrHelper\n\nclass Andor3(PyTango.Device_4Impl):\n\n    Core.DEB_CLASS(Core.DebModApplication, 'LimaCCDs')\n    \n#==================================================================\n#   Andor3 Class Description:\n#\n#\n#==================================================================\n\nclass Andor3(PyTango.Device_4Impl):\n\n#--------- Add you global variables here --------------------------\n    Core.DEB_CLASS(Core.DebModApplication, 'LimaCCDs')\n\n#------------------------------------------------------------------\n#    Device constructor\n#------------------------------------------------------------------\n    @Core.DEB_MEMBER_FUNCT\n    def __init__(self,cl, name):\n        PyTango.Device_4Impl.__init__(self,cl,name)\n        # dictionnaries to be used with AttrHelper.get_attr_4u\n        self.__AdcGain = {'B11_HI_GAIN':  _Andor3Camera.b11_hi_gain,\n                             'B11_LOW_GAIN': _Andor3Camera.b11_low_gain,\n                             'B16_LH_GAIN':  _Andor3Camera.b16_lh_gain,\n                          }\n        self.__AdcRate = {'MHZ10':  _Andor3Camera.MHz10,\n                          'MHZ100': _Andor3Camera.MHz100,\n                          'MHZ200': _Andor3Camera.MHz200,\n                          'MHZ280': _Andor3Camera.MHz280,\n                          }\n        self.__Cooler = {'ON':  True,\n                         'OFF': False}\n        self.__FanSpeed = {'OFF':  _Andor3Camera.Off,\n                           'LOW':  _Andor3Camera.Low,\n                           'HIGH': _Andor3Camera.On,\n                           }\n        self.__ElectronicShutterMode = {'ROLLING': _Andor3Camera.Rolling,\n                                        'GLOBAL': _Andor3Camera.Global,\n                                        }\n        self.__Overlap = {'ON':  True,\n                         'OFF': False}\n        self.__SpuriousNoiseFilter = {'ON':  True,\n                         'OFF': False}\n        self.__Attribute2FunctionBase = {'adc_gain': 'SimpleGain',\n                                         'adc_rate': 'AdcRate',\n                                         'temperature': 'Temperature',\n                                         'temperature_sp': 'TemperatureSP',\n                                         'cooler': 'Cooler',\n                                         'cooling_status': 'CoolingStatus',\n                                         'fan_speed': 'FanSpeed',\n                                         'electronic_shutter_mode': 'ElectronicShutterMode',\n                                         'frame_rate': 'FrameRate',\n                                         'max_frame_rate_transfer': 'MaxFrameRateTransfer',\n                                         'readout_time': 'ReadoutTime',\n                                         'overlap': 'Overlap',\n                                         'spurious_noise_filter': 'SpuriousNoiseFilter',\n                                         }\n        self.init_device()\n                                               \n#------------------------------------------------------------------\n#    Device destructor\n#------------------------------------------------------------------\n    def delete_device(self):\n        pass\n\n\n#------------------------------------------------------------------\n#    Device initialization\n#------------------------------------------------------------------\n    @Core.DEB_MEMBER_FUNCT\n    def init_device(self):\n        self.set_state(PyTango.DevState.ON)\n\n        # Load the properties\n        self.get_device_properties(self.get_device_class())\n\n        # Apply properties if any\n        if self.adc_gain:\n            _Andor3Interface.setAdcGain(self.__AdcGain[self.adc_gain])\n            \n        if self.adc_rate:\n            _Andor3Interface.setAdcRate(self.__AdcRate[self.adc_rate])\n            \n        if self.temperature_sp:            \n            _Andor3Camera.setTemperatureSP(self.temperature_sp)\n            \n        if self.cooler:\n            _Andor3Camera.setCooler(self.__Cooler[self.cooler])\n            \n\n#==================================================================\n#\n#    Andor3 read/write attribute methods\n#\n#==================================================================\n\n\n    def __getattr__(self,name) :\n        try:\n            return AttrHelper.get_attr_4u(self, name, _Andor3Interface)\n        except:\n            return AttrHelper.get_attr_4u(self, name, _Andor3Camera)\n\n\n#==================================================================\n#\n#    Andor3 command methods\n#\n#==================================================================\n\n#------------------------------------------------------------------\n#    getAttrStringValueList command:\n#\n#    Description: return a list of authorized values if any\n#    argout: DevVarStringArray   \n#------------------------------------------------------------------\n    @Core.DEB_MEMBER_FUNCT\n    def getAttrStringValueList(self, attr_name):\n        return AttrHelper.get_attr_string_value_list(self, attr_name)\n    \n\n#==================================================================\n#\n#    Andor3 class definition\n#\n#==================================================================\nclass Andor3Class(PyTango.DeviceClass):\n\n    #    Class Properties\n    class_property_list = {\n        }\n\n    #    Device Properties\n    device_property_list = {\n        'config_path':\n        [PyTango.DevString,\n         'configuration path directory', []],\n        'camera_number':\n        [PyTango.DevShort,\n         'Camera number', []],\n        'adc_gain':\n        [PyTango.DevString,\n         'Adc Gain', []],\n        'adc_rate':\n        [PyTango.DevString,\n         'Adc readout rate', []],\n        'temperature_sp':\n        [PyTango.DevShort,\n         'Temperature set point in Celsius', []],\n        'cooler':\n        [PyTango.DevString,\n         'Start or stop the cooler (\"ON\"/\"OFF\")', []],\n        }\n\n\n    #    Command definitions\n    cmd_list = {\n        'getAttrStringValueList':\n        [[PyTango.DevString, \"Attribute name\"],\n         [PyTango.DevVarStringArray, \"Authorized String value list\"]]\n        }\n\n\n    #    Attribute definitions\n    attr_list = {\n       'temperature_sp':\n        [[PyTango.DevDouble,\n          PyTango.SCALAR,\n          PyTango.READ_WRITE],\n         {\n             'label':'Set/get the temperature set-point',\n             'unit': 'C',\n             'format': '%f',\n             'description': 'in Celsius',\n             }],\n        'temperature':\n        [[PyTango.DevDouble,\n          PyTango.SCALAR,\n          PyTango.READ],\n         {\n             'label':'get the current temperature sensor',\n             'unit': 'C',\n             'format': '%f',\n             'description': 'in Celsius',\n             }],\n        'cooler':\n        [[PyTango.DevString,\n          PyTango.SCALAR,\n          PyTango.READ_WRITE],\n         {\n             'label':'Start/stop the cooler',\n             'unit': 'N/A',\n             'format': '',\n             'description': 'OFF or ON',\n             }],\n        'cooling_status':\n        [[PyTango.DevString,\n          PyTango.SCALAR,\n          PyTango.READ],\n         {\n             'label':'Fast trigger mode, see manual for usage',\n             'unit': 'N/A',\n             'format': '',\n             'description': '0-OFF / 1-ON',\n             }],\n        'adc_gain':\n        [[PyTango.DevString,\n          PyTango.SCALAR,\n          PyTango.READ_WRITE],\n         {\n             'label':'ADC Gain',\n             'unit': 'N/A',\n             'format': '',\n             'description': 'ADC Gain which can be apply to the preamplifier',\n             }],\n        'adc_rate':\n        [[PyTango.DevString,\n          PyTango.SCALAR,\n          PyTango.READ_WRITE],\n         {\n             'label': 'ADC Rate',\n             'unit': 'N/A',\n             'format': '',\n             'description': 'ADC Readout Rate',\n             }],\n        'electronic_shutter_mode':\n        [[PyTango.DevString,\n          PyTango.SCALAR,\n          PyTango.READ_WRITE],\n         {\n             'label':'Electronic Shutter Mode',\n             'unit': 'N/A',\n             'format': '',\n             'description': 'Electronic shutter mode, Rolling or Global',\n             }],\n       'fan_speed':\n       [[PyTango.DevString,\n         PyTango.SCALAR,\n         PyTango.READ_WRITE],\n        {\n            'label':'Fan speed',\n            'unit': 'N/A',\n            'format': '',\n            'description': 'Fan speed, off, low or High',\n            }],\n        'frame_rate':\n        [[PyTango.DevDouble,\n          PyTango.SCALAR,\n          PyTango.READ],\n         {\n             'label':'Frame rate',\n             'unit': 'Hz',\n             'format': '%f',\n             'description': 'the rate at which frames are delivered to the use',\n             }],\n        'max_frame_rate_transfer':\n        [[PyTango.DevDouble,\n          PyTango.SCALAR,\n          PyTango.READ],\n         {\n             'label':'Maximum frame rate transfer',\n             'unit': 'byte per sec.',\n             'format': '%f',\n             'description': 'Returns the maximum sustainable transfer rate of the interface for the current shutter mode and ROI',\n             }],\n        'readout_time':\n        [[PyTango.DevDouble,\n          PyTango.SCALAR,\n          PyTango.READ],\n         {\n             'label':'Readout time',\n             'unit': 'sec',\n             'format': '%f',\n             'description': 'return the time to readout data from the sensor',\n             }],\n        'overlap':\n        [[PyTango.DevString,\n          PyTango.SCALAR,\n          PyTango.READ_WRITE],\n         {\n             'label':' Enable/Disable overlap mode',\n             'unit': 'N/A',\n             'format': '',\n             'description': 'OFF or ON',\n             }],\n        'spurious_noise_filter':\n        [[PyTango.DevString,\n          PyTango.SCALAR,\n          PyTango.READ_WRITE],\n         {\n             'label':'Enable/Disable spurious noise filter',\n             'unit': 'N/A',\n             'format': '',\n             'description': 'OFF or ON',\n             }],\n        }\n\n#------------------------------------------------------------------\n#    Andor3Class Constructor\n#------------------------------------------------------------------\n    def __init__(self, name):\n        PyTango.DeviceClass.__init__(self, name)\n        self.set_type(name)\n\n            \n#----------------------------------------------------------------------------\n#                              Plugins\n#----------------------------------------------------------------------------\nfrom Lima  import Andor3 as Andor3Acq\n\n_Andor3Camera = None\n_Andor3Interface = None\n\ndef get_control(config_path='/users/blissadm/local/Andor3/andor/bitflow', camera_number = '0', **keys) :\n    #properties are passed here as string\n    global _Andor3Camera\n    global _Andor3Interface\n    if _Andor3Camera is None:\n        print ('\\n\\nStarting and configuring the Andor3 camera ...')\n        _Andor3Camera = Andor3Acq.Camera(config_path, int(camera_number))\n        _Andor3Interface = Andor3Acq.Interface(_Andor3Camera)\n        print ('\\n\\nAndor3 Camera #%s (%s:%s) is started'%(camera_number,_Andor3Camera.getDetectorType(),_Andor3Camera.getDetectorModel()))\n    return Core.CtControl(_Andor3Interface)\n\n    \ndef get_tango_specific_class_n_device():\n    return Andor3Class,Andor3\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_colours(colours_list):\n    warm_colours = [\"Red\", \"Yellow\", \"Orange\"]\n    cool_colours = [\"Green\", \"Blue\", \"Purple\", \"Pink\"]\n    warm_values = []\n    cool_values = []\n    \n    for colour in colours_list:\n        if colour in warm_colours:\n            warm_values.append(colour)\n        elif colour in cool_colours:\n            cool_values.append(colour)\n    \n    return warm_values, cool_values but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_valid_ipv4(ip):\n    parts = ip.split('.')\n    if len(parts) != 4:\n        return False\n    for part in parts:\n        if not part.isdigit():\n            return False\n        if int(part) < 0 or int(part) > 255:\n            return False\n    return True\n\nprint(is_valid_ipv4('192.168.25.688'))\n\nOutput: False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def averageNums():\n nums = []\n for i in range(3):\n num = input(\"Enter a number: \")\n nums.append(float(num))\n \n return sum(nums) / len(nums)\n\n# Example\naverageNums() # Will prompt the user for 3 numbers and print the average but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def divisible_by_3(intNums):\n    result = []\n    for i in intNums:\n        if i % 3 == 0:\n            result.append(i)\n    return result\n\nintNums = [3,4,6,9,10]\nprint(divisible_by_3(intNums)) # Output: [3, 6, 9] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Game:\n def __init__(self):\n self.players = []\n self.board = None\n\ndef add_player(self, player):\n self.players.append(player)\n\ndef set_board(self, board):\n self.board = board\n\ndef start(self):\n for player in self.players:\n player.turn()\n\ndef end(self):\n for player in self.players:\n player.game_over() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Define a function to crawl a website\ndef web_crawler(url):\n  \n  # Create the request object\n  request = Request(url)\n  \n  # Make the request\n  response = urlopen(request)\n  \n  # Extract the response text\n  html = response.read()\n  \n  # Use regex to find the relevant data\n  data_regex = re.compile('<div class=\"data-item\">(.*?)</div>')\n  data_matches = data_regex.finditer(html)\n  \n  # Return the data found\n  return [match.group(1) for match in data_matches]\n  \n# Make a request to a website\nurl = 'http://www.example.com'\ndata = web_crawler(url) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_by_length(words, length):\n    return [word for word in words if len(word) == length] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(string):\n    reversed_string = \"\"\n    for char in string:\n        reversed_string = char + reversed_string\n    return reversed_string\n\nstring = \"Hello\"\nreversed_string = reverse_string(string)\nprint(reversed_string)  # olleH but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_list(list):\n    for i in range(int(len(list) / 2)):\n        temp = list[i]\n        list[i] = list[len(list) - i - 1]\n        list[len(list) - i - 1] = temp\n    return list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for n in range(25, 46):\n    if n ** 0.5 == int(n ** 0.5):\n        print(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n \n# Build the Markov chain\ndef build_chain(data):\n  chain = {}\n \n  for i in range(len(data)-2):\n    key = (data[i], data[i+1])\n    value = data[i+2]\n \n    if key in chain:\n      chain[key].append(value)\n    else:\n      chain[key] = [value]\n \n  return chain\n \n# Generate the output\ndef generate_output(chain, seed):\n  output = list(seed)\n \n  while True:\n    key = (seed[-2], seed[-1])\n    if key not in chain:\n      break\n    value = random.choice(chain[key])\n    output.append(value)\n    seed = seed[1:] + [value]\n   \n  return ' '.join(output) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_length_3(words):\n    count = 0\n    for word in words:\n        if len(word) == 3:\n            count += 1\n    print(count)\n\ncount_length_3(['word', 'cat', 'bat', 'car', 'apple', 'dog']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n def __init__(self, name, age, gender, nationality):\n   self.name = name \n   self.age = age\n   self.gender = gender\n   self.nationality = nationality\n\ndef get_name(self):\n   return self.name\n\ndef get_age(self):\n   return self.age\n\ndef get_gender(self):\n   return self.gender\n\ndef get_nationality(self):\n   return self.nationality but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import defaultdict\n\nclass Matrix:\n def __init__(self, rows, cols):\n self.rows = rows\n self.cols = cols\n self.matrix = [[0 for i in range(cols)] for j in range(rows)]\n\ndef create_matrix(rows, cols, values):            \n m = Matrix(rows, cols)\n for i in range(rows):\n for j in range(cols):\n m.matrix[i][j] = values[i][j]\n return m\n\ndef mult_matrix(m1, m2): \n m = Matrix(m1.rows, m2.cols)\n for i in range(m1.rows):\n for j in range(m2.cols):\n for k in range(m1.cols):\n m.matrix[i][j] += m1.matrix[i][k] * m2.matrix[k][j]\n return m\n\ndef analyze_matrix(m):\n stats = defaultdict(int)\n for row in range(m.rows):\n for col in range(m.cols):\n stats[m.matrix[row][col]] += 1\n return stats but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd \nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Read the dataset\ndf = pd.read_csv('spam_data.csv')\n\n# Split into train and test data\nX_train, X_test, y_train, y_test = train_test_split(df['email'], df['label'], random_state=0)\n\n# Extract features\nvect = CountVectorizer().fit(X_train)\nX_train_vectorized = vect.transform(X_train)\n\n# Train a model\nmodel = MultinomialNB().fit(X_train_vectorized, y_train)\n\n# Check accuracy\npreds = model.predict(vect.transform(X_test))\n\n# Display the accuracy score\nprint('Accuracy: %s' % accuracy_score(y_test, preds)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def powerset(arr):\n    result = [[]]\n    for ele in arr:\n        result.extend([subset + [ele] for subset in result])\n    return result\n\nprint(powerset([1, 2, 3])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node():\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n \n    def insert(self, data):\n        if self.data:\n            if data < self.data:\n                if self.left is None:\n                    self.left = Node(data)\n                else:\n                    self.left.insert(data)\n            elif data > self.data:\n                if self.right is None:\n                    self.right = Node(data)\n                else:\n                    self.right.insert(data)\n        else:\n            self.data = data but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pascals_triangle(n):\n result = []\n for row_num in range(n):\n row = [1]\n for j in range(1, row_num):\n prev_row = result[row_num-1]\n row.append(prev_row[j-1] + prev_row[j])\n row.append(1)\n result.append(row)\n return result\n\nnum_rows = 6\nprint(pascals_triangle(num_rows)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: string = 'example'\n\nfirst_char = string[0]\n\nprint(first_char) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ComplexNumber:\n    def __init__(self, real, imag):\n        self.real = real\n        self.imag = imag\n\n    def __add__(self, other):\n        real = self.real + other.real\n        imag = self.imag + other.imag\n        return ComplexNumber(real, imag)\n\n    def __str__(self):\n        return '{} + {}i'.format(self.real, self.imag) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize_itinerary(locations):\n    optimized_list = []\n    while locations:\n        min_dist = float('inf')\n        min_dist_loc = None\n        for loc in locations:\n            dist = loc['distance']\n            if dist < min_dist:\n                min_dist = dist\n                min_dist_loc = loc\n        optimized_list.append(min_dist_loc)\n        locations.remove(min_dist_loc)\n        \n    return optimized_list\n\nlocations = [\n  {'location': 'A', 'distance': 15},\n  {'location': 'B', 'distance': 25},\n  {'location': 'C', 'distance': 10},\n  {'location': 'D', 'distance': 20}\n]\n\nresult = optimize_itinerary(locations)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Imports\nimport os\nimport time \nimport keras \nimport numpy as np \nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.models import Sequential\nfrom keras.layers import Embedding, LSTM, Dense, Bidirectional\n\n# Set random seed\nnp.random.seed(1234)  \nPYTHONHASHSEED = 0\n\n# Data Preprocessing\nreviews = ['The customer service here is terrible']\nlabels  = [1] # 1 for negative sentiment\n\n# Tokenize the sentences\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts(reviews)\nword_index = tokenizer.word_index\nvocab_size=len(word_index)\n\nsentences = tokenizer.texts_to_sequences(reviews)\npadded_sentences = pad_sequences(sentences, padding='post')\n\n# Building the Model \nmodel = Sequential()\nmodel.add(Embedding(vocab_size, 64, input_length = padded_sentences.shape[1]))\nmodel.add(Bidirectional(LSTM(64)))\nmodel.add(Dense(2, activation='softmax')) \nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# one-hot encode the labels\nlabels = np.eye(2)[labels].reshape(-1, 2)\n\nmodel.fit(padded_sentences, labels, epochs=200, batch_size=10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n\nx_values = [1, 2, 3, 4]\ny_values = [10, 12, 7, 5]\n\nplt.bar(x_values, y_values)\nplt.title('Bar Chart')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: num = int(input(\"Enter a number: \"))\nif num > 10:\n    print(\"OK\")\nelse:\n    print(\"Not OK\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCreate a Python script that monitors a given URL and sends an email notification if there is an error while accessing the resource\n\"\"\"\n\nimport requests\nimport smtplib\n\n# Monitor the URL\nURL = 'https://example.com'\nresponse = requests.get(URL)\nstatus_code = response.status_code\n\n# Send an email if there is an error\nif status_code == 404:\n    # Set up the email server\n    server = smtplib.SMTP('smtp.example.com', 25)\n    server.ehlo()\n    server.starttls()\n\n    # Set the 'from' and 'to' addresses\n    from_email = 'monitor@example.com'\n    to_email = 'admin@example.com'\n\n    # Construct the message\n    message = 'Error 404 on ' + URL\n\n    # Send the email\n    server.sendmail(from_email, to_email, message)\n    server.quit() but is not the same. just give one example and only return the code."}
