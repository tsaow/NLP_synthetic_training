{"prompt": "make some code that functions the same as the following code: def is_divisible(num1, num2):\n  if num1 % num2 == 0:\n    return True\n  else:\n    return False\n\ncheck_result = is_divisible(5, 10)\n\nif check_result == True: \n  print(\"The numbers are divisible\")\nelse:\n  print(\"The numbers are not divisible\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: temp_in_fahrenheit = 98\ntemp_in_celsius = (temp_in_fahrenheit - 32) * 5/9\nprint(f'{temp_in_fahrenheit} Fahrenheit = {temp_in_celsius:.2f} Celsius') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(n):\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom scipy.optimize import minimize\n\n# Define objective function\ndef objective(x):\n    return x[0]*x[3]*(x[0]+x[1]+x[2])+x[2]\n\n# Define constraints\ndef constraint1(x):\n    return x[0]*x[1]*x[2]*x[3]-25.0\n\ndef constraint2(x):\n    sum_eq = 40.0\n    for i in range(4):\n        sum_eq = sum_eq - x[i]**2\n    return sum_eq\n\n# Initial guesses\nx0 = [1,5,5,1]\n\n# Bounds\nb = (1.0,5.0)\nbnds = (b, b, b, b)\n\n# Constraints\ncon1 = {'type': 'ineq', 'fun': constraint1} \ncon2 = {'type': 'eq', 'fun': constraint2}\ncons = ([con1, con2])\n\n# Solve problem\nsolution = minimize(objective, x0, method='SLSQP', bounds=bnds, constraints=cons)\n\n# Print solution\nprint(solution) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def square_array(a):\n    res = [x ** 2 for x in a]\n    return res but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_freq_report(text):\n    words = {} # to store the word frequencies\n    text = text.lower()\n    text = text.replace('\\n', ' ')\n    text = text.split(' ')\n    for word in text:\n        if word in words:\n            words[word] += 1\n        else:\n            words[word] = 1\n    return words but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linearSearch(arr, x): \n  \n    for i in range (len(arr)): \n  \n        if arr[i] == x: \n            return i \n  \n    return -1\n  \narr = [2, 3, 4, 6, 1] \nx = 4\n  \nresult = linearSearch(arr, x) \n  \nif(result == -1): \n    print(\"Element is not present in array\") \nelse: \n    print(\"Element is present at index\", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def hanoi(n, from_tower, to_tower, aux_tower):\n if n == 1:\n  print(f\"Move disk 1 from {from_tower} to {to_tower}\")\n  return\n\n hanoi(n - 1, from_tower, aux_tower, to_tower)\n print(f\"Move disk {n} from {from_tower} to {to_tower}\")\n hanoi(n - 1, aux_tower, to_tower, from_tower)\n\n\nnum_disks = 4\nhanoi(num_disks, 'Tower 1', 'Tower 2', 'Tower 3') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_array(arr):\n    sum = 0\n    for elem in arr:\n         sum += elem\n    return sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calArea(side):\n\treturn side * side\n\nif __name__ == '__main__':\n\tside = 5\n\tarea = calArea(side)\n\tprint('Area of Square = ', area) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_list(list1, list2):\n    merged_list = list1 + list2\n    final_list = list(dict.fromkeys(merged_list))\n    return final_list\n\nlist1 = [\"apple\",\"orange\",\"banana\"]\nlist2 = [\"cherry\",\"pineapple\",\"apple\"]\n\nresult = merge_list(list1, list2)\nprint(result) # Output: [\"apple\", \"orange\", \"banana\", \"cherry\", \"pineapple\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\n# Connecting to the Database file\nconn = sqlite3.connect('<database name>')\n\n# Creating a cursor to work with database\ncursor = conn.cursor()\n\n# Executing a query\nresult = cursor.execute(\"SELECT <column name> FROM <table name> WHERE <condition>\")\n\n# Storing the results in a list while iterating over it\ndata = [row for row in result]\n\n# Closing the connection\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_password(length):\n    ''' \n    Generate a password string of specified length \n    containing random alphabets, numbers and special characters. \n    '''\n    password = ''.join(random.choice(string.ascii_letters + string.digits + string.punctuation) for i in range(length))\n    return password but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def prime_factors(number):\n prime_factors = []\n i = 2\n while number > 1:\n  if number % i == 0:\n   prime_factors.append(i)\n   number //= i\n  else:\n   i += 1\n return prime_factors\n\nprint(prime_factors(12))\n# [2, 2, 3] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def clean_string(string):\n    excluded_characters = \"*&#$@!\"\n    cleaned_string = ''\n    for character in string:\n        if character not in excluded_characters:\n            cleaned_string += character\n    return cleaned_string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def solveSudoku(board):\n    find = find_empty(board)\n    if not find:\n        return True\n    else:\n        row, col = find\n \n    for i in range(1,10):\n        if valid(board, i, (row, col)):\n            board[row][col] = i\n \n            if solveSudoku(board):\n                return True\n \n            board[row][col] = 0\n \n    return False\n\ndef valid(board, num, pos):\n    # Check row\n    for i in range(len(board[0])):\n        if board[pos[0]][i] == num and pos[1] != i:\n            return False\n \n    # Check column\n    for i in range(len(board)):\n        if board[i][pos[1]] == num and pos[0] != i:\n            return False\n \n    # Check box\n    box_x = pos[1] // 3\n    box_y = pos[0] // 3\n \n    for i in range(box_y*3, box_y*3 + 3):\n        for j in range(box_x * 3, box_x*3 + 3):\n            if board[i][j] == num and (i,j) != pos:\n                return False\n \n    return True \n\ndef find_empty(board):\n    for i in range(len(board)):\n        for j in range(len(board[0])):\n            if board[i][j] == 0:\n                return (i, j)  # row, col but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_sum(nums):\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n\nresult = get_sum([1, 2, 3])\nprint(result)\n# Output: 6 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\njson_string = '{\"name\": \"John Doe\", \"age\": 34, \"email\": \"john@example.com\"}'\ndata = json.loads(json_string)\n\nname = data['name']\nage = data['age']\nemail = data['email'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Book:\n    def __init__(self, title, author, publisher, year):\n        self.title = title\n        self.author = author\n        self.publisher = publisher\n        self.year = year\n\n    def getDetails(self):\n        print(\"Title: \", self.title)\n        print(\"Author: \", self.author)\n        print(\"Publisher: \", self.publisher)\n        print(\"Year: \", self.year) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_most_common_element(arr):\n    num_occurrences = dict()\n    max_occurrence = 0\n    most_common_element = None\n    for number in arr:\n        if number in num_occurrences:\n            num_occurrences[number] += 1\n            if num_occurrences[number] > max_occurrence:\n                max_occurrence = num_occurrences[number]\n                most_common_element = number\n        else:\n            num_occurrences[number] = 1\n    return most_common_element\n\narr = [1, 2, 3, 4, 5, 2, 3, 3, 5, 2]\nmost_common_element = find_most_common_element(arr)\nprint(most_common_element) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from reportlab.lib.pagesizes import A4\nfrom reportlab.pdfgen import canvas\n\ndef prepare_presentation(content):\n    \"\"\"\n    Develop a Python program to prepare a presentation in PDF format.\n    \n    :param content: presentation slides\n    :return: PDF file of the presentation\n    \"\"\"\n    # create a pdf object\n    pdf_obj = canvas.Canvas('presentation.pdf', pagesize=A4)\n    \n    # add contents to the pdf\n    for slide in content:\n        pdf_obj.drawImage(slide)\n    \n    # save pdf\n    pdf_obj.save() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_vowels(s, c): \n    return s.translate(str.maketrans('aeiou', c*5))\n\nprint(replace_vowels(string, character)) \n\n# Output: \n r*pl*c* *ll v*w*ls but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: regex = \"I love programming in Python\\.\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_string = \"I like mangoes\"\n\nfor char in my_string:\n\tif char == char[::-1]:\n\t\tprint(char) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\nimport re\n\n# input string\nstring = \"There is a website: https://example.com\"\n\n# regex\npattern = r'(https?://\\S+)'\n\n# match url\nurl = re.findall(pattern, string)[0]\n\n# print result\nprint(url) # Output: https://example.com but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def factorial(n):\n    if n == 0: \n        return 1 \n    return n * factorial(n-1) \n\nnum = 9\nfactorial_num = factorial(num)\nprint(factorial_num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def last_n_numbers(myList, n):\n  return myList[-n:]\n  \nres = last_n_numbers(myList, n)\nprint(res) \n\n# Output\n[8, 9, 10] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(str1, str2): \n    if len(str1) != len(str2): \n        return False \n    str1 = sorted(str1.lower()) \n    str2 = sorted(str2.lower()) \n    return str1 == str2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def keyword_search(string_list, keyword):\n  found = False\n  for string in string_list:\n    if keyword in string:\n      found = True\n      break\n  return found\n\nresult = keyword_search(string_list, keyword)\n\nif result:\n  print(\"The keyword was found\")\nelse:\n  print(\"The keyword was not found\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def combine_strings(str1, str2, str3):\n    return str1 + str2 + str3\n\nresult = combine_strings(\"Hello,\", \" World!\", \" Goodbye\")\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def hasDuplicates(s):\n    set = set()\n    for ch in s:\n        if ch in set:\n            return True\n        set.add(ch)\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password():\n    return ''.join(random.choice(string.ascii_letters + string.digits) for i in range(8)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Read two numbers\nn1 = int(input()) \nn2 = int(input()) \n\n# Add the two numbers\nresult = n1 + n2\n\n# Output the result\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n    \"\"\"\n    Creates a Person object with given name, age, and gender. \n    \"\"\"\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n    \n    def greet(self):\n        \"\"\"\n        Prints out a greeting for the Person\n        \"\"\"\n        print('Hello, my name is ' + self.name)\n\nif __name__ == '__main__':\n    John = Person('John', 25, 'male')\n    John.greet() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quick_sort(arr):\n if len(arr) == 0:\n return arr\n \n pivot = arr[len(arr) // 2]\n left_arr, right_arr = [], []\n \n for i in range(len(arr)):\n if arr[i] < pivot:\n left_arr.append(arr[i])\n elif arr[i] > pivot:\n right_arr.append(arr[i])\n \n return quick_sort(left_arr) + [pivot] + quick_sort(right_arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import dependencies\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\n#load dataset\ndf = pd.read_csv('dataset.csv')\n\n#split dataset into X and Y\nX = df.drop('price', axis=1)\nY = df['price']\n\n#split into training and test sets\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=0)\n\n#create and fit the model\nmodel = LinearRegression()\nmodel.fit(X_train, Y_train)\n\n#predict using the model\nY_pred = model.predict(X_test)\n\n#calculate the mean squared error\nmse = mean_squared_error(Y_test, Y_pred)\nprint(\"Mean Squared Error:\", mse)\n\n#see the trained parameters\nprint(\"Intercept:\", model.intercept_)\nprint(\"Coefficients:\", model.coef_) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def bubbleSort(arr):\n n = len(arr)\n for i in range(n - 1):\n for j in range(0, n - i - 1):\n if arr[j] > arr[j + 1]:\n arr[j], arr[j + 1] = arr[j + 1], arr[j]\n \n # Driver code to test above\narr = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nbubbleSort(arr)\n\nprint (\"Sorted array is:\")\nfor i in range(len(arr)):\nprint (\"%d\" %arr[i]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# Get length and characters from input\nlength = 10\ncharacters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!^()#@'\n\n# Generate random password\npassword = ''\nfor i in range(length):\n password += random.choice(characters)\n\n# Output password\nprint(password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def divisible_five(nums):\n    result = []\n    for num in nums:\n        if num % 5 == 0:\n            result.append(num)\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from yahoo_fin import stock_info as si\n\ndef get_stock_price(name):\n    data = si.get_live_price(name)\n    return data\n\nif __name__ == '__main__':\n    name = 'ABC'\n    print(get_stock_price(name)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for key, value in dict.items():\n    if key < 'k':\n        print(key, value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(lst, x):\n    for i in range(len(lst)):\n        if lst[i] == x:\n            return i\n    return -1\n\nprint(linear_search([5,3,7,2,1], 3)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Circle2D:\n    def __init__(self, x, y, radius):\n        self.x = x\n        self.y = y\n        self.radius = radius\n\n    def get_area(self):\n        \"\"\"Calculates the area of the circle\"\"\"\n        return 3.14 * (self.radius ** 2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_user_input():\n    user_input = input(\"Please enter your input: \")\n    return user_input\n\n# Sample test\nuser_input = get_user_input()\nprint(\"Your input is: \" + user_input) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: input_list = [3, 5, 7]\n \nmax_value = max(input_list)\n \nprint(max_value) # prints 7 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn import tree\nfrom sklearn.model_selection import train_test_split\n\n# Create the Decision Tree classifier \nclf = tree.DecisionTreeClassifier()\n\n# Train the classifier\nclf = clf.fit(X_train, y_train)\n\n# Make predictions\ny_pred = clf.predict(X_test)\n\n# Evaluate model\naccuracy = clf.score(X_test, y_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import subprocess\n\n# Define list of shell commands\ncommands = [\n    \"./ls -l\",\n    \"./cd project\",\n    \"./mkdir test\",\n    \"./ls -l\"\n]\n\n# Execute each shell commands\nfor command in commands:\n    subprocess.run(command, shell=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: total_price = 0\nprice_of_item = 10\ntax_rate = 0.05\n\nfor i in range(5):\n total_price += price_of_item\n\ntotal_price = total_price + (total_price * tax_rate)\n\nprint(total_price) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def even_number_filter(number):\n  return number % 2 == 0\n\nnumbers = [25, 35, 8, 2, 10]\nfiltered_list = list(filter(even_number_filter, numbers))\nprint(filtered_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(num): \n    if num < 2: \n        return False\n  \n    for i in range(2, num): \n        if num % i == 0: \n            return False\n  \n    return True\n  \n# Example \nnumber = 10\n  \nif is_prime(number): \n    print(number, \"is a prime number\") \nelse: \n    print(number, \"is not a prime number\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \nimport paramiko\nimport select\nimport argparse\nimport sys\nimport threading\nimport uuid\nimport tempfile\nimport os\nimport getpass\n\nfrom ForwardSshTunnel import ForwardSshTunnel\n\n\nclass SecureRemoteLauncher(object) :\n\n    #-------------------------------------------------------------------------\n    # SecureRemoteLauncher constructor\n    #-------------------------------------------------------------------------\n    def __init__(self, mapFilePath) :\n        self.mappingFilePath = mapFilePath\n        self.sessionMap = {}\n\n    #-------------------------------------------------------------------------\n    # Create a port forwarding ssh tunnel\n    #-------------------------------------------------------------------------\n    def createTunnelOnRemotePort(self, transport, host, port) :\n        print 'Create a tunnel on remote port ' + str(port)\n\n        try:\n            tunnel = ForwardSshTunnel(port,       # local port\n                                      host,       # remote host\n                                      port,       # remote port\n                                      transport)  # SSHClient Transport object\n            tunnel.establishForwardTunnel()\n        except KeyboardInterrupt:\n            print 'C-c: Port forwarding stopped.'\n        except Exception as inst :\n            print 'Encountered exception in forwarding'\n            print inst\n\n        print 'Returning from createTunnelOnRemotePort()'\n        return tunnel\n\n    #-------------------------------------------------------------------------\n    # Rewrite the mapping file with the current session map\n    #-------------------------------------------------------------------------\n    def updateMappingFile(self) :\n        with open(self.mappingFilePath, 'w') as outfile :\n            for session in self.sessionMap :\n                outfile.write(session + ' ' + self.sessionMap[session] + '\\n')\n\n    #-------------------------------------------------------------------------\n    # Wait for process to exit so that when it does we can end the tunnel\n    # thread and then end this waiting thread by returning from this\n    # function\n    #-------------------------------------------------------------------------\n    def waitOnChannelExitStatus(self, channel, sessionId, tunnel) :\n        # This call will block until channel process has finished\n        processReturnVal = channel.recv_exit_status()\n\n        # Now make sure to kill the thread which is running the port\n        # forwarding ssh tunnel\n        print 'Channel exit status ready, process has terminated'\n        if tunnel is not None :\n            print 'Attempting to end tunnel request loop...'\n            tunnel.terminateRequestLoop()\n\n        # Next remove this session from the map\n        del self.sessionMap[sessionId]\n\n        # Finally rewrite the map file with the updated session info\n        self.updateMappingFile()\n\n        print 'Returning from wait thread'\n\n    #-------------------------------------------------------------------------\n    # Try to start pvweb on remote machine until we successfully start on a\n    # port.\n    #-------------------------------------------------------------------------\n    def startPvwebOnOpenPortInRange(self, transport, remoteHost, fileToLoad, portRange) :\n        #port = random.randrange(portRange[0], portRange[1], 1)\n        port = 9010\n\n        # Works on mayall\n        #cmdFirstPart = 'export LD_LIBRARY_PATH=/opt/python-2.7.3/lib ; export DISPLAY=:0.0 ; /home/kitware/projects/ParaView/build-make-gpu/bin/pvpython /home/kitware/projects/ParaView/build-make-gpu/lib/site-packages/paraview/web/pv_web_visualizer.py --data-dir /home/kitware/Documents/haloregions --port '\n\n        # Works on solaris\n        cmdFirstPart = 'export DISPLAY=:0.0 ; /home/scott/projects/ParaView/build-make-gpu/bin/pvpython /home/scott/projects/ParaView/build-make-gpu/lib/site-packages/paraview/web/pv_web_visualizer.py --data-dir /home/scott/Documents/cosmodata/haloregions --port '\n\n        started = False\n\n        while started == False :\n\n            cmd = cmdFirstPart + str(port) + ' --load-file ' + fileToLoad + ' -f'\n\n            channel = transport.open_session()\n            channel.exec_command(cmd)\n\n            characters = ''\n\n            while True:\n                if channel.exit_status_ready():\n                    break\n\n                rl, wl, xl = select.select([channel],[],[],0.0)\n\n                if len(rl) > 0 :\n                    characters = channel.recv(1024)\n\n                    if 'CannotListenError' in characters or 'Address already in use' in characters :\n                        print 'port ' + str(port) + ' is already being used'\n                    elif ('tarting on ' + str(port)) in characters:\n                        print 'Ahh, we have finally started on port ' + str(port)\n\n                        # write the mapping file here\n                        sessionId = str(uuid.uuid1())\n                        connectStr = 'localhost:' + str(port)\n                        self.sessionMap[sessionId] = connectStr\n                        self.updateMappingFile()\n                        tunnel = self.createTunnelOnRemotePort(transport, remoteHost, port)\n                        print 'Have now returned from readyCallback() !!!!'\n                        t = threading.Thread(target=self.waitOnChannelExitStatus,\n                                             args=[channel, sessionId, tunnel],\n                                             kwargs={})\n                        t.start()\n                        print 'wait thread started, returning from startPvwebOnOpenPortInRange()'\n                        return (sessionId, port)\n                        started = True\n\n            if started == False :\n                #port = random.randrange(portRange[0], portRange[1], 1)\n                port += 1\n\n        print 'Returning from startPvwebOnOpenPortInRange()'\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Copyright (C) 2013, 2014 Red Hat, Inc.\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n# MA 02110-1301 USA.\n\nimport os\nimport unittest\n\nfrom tests import utils\nfrom virtinst import CapabilitiesParser as capabilities\n\n\ndef build_host_feature_dict(feature_list):\n    fdict = {}\n    for f in feature_list:\n        fdict[f] = capabilities.FEATURE_ON\n\n    return fdict\n\n\nclass TestCapabilities(unittest.TestCase):\n\n    def _compareGuest(self, (arch, os_type, domains, features), guest):\n        self.assertEqual(arch,            guest.arch)\n        self.assertEqual(os_type,         guest.os_type)\n        self.assertEqual(len(domains), len(guest.domains))\n        for n in range(len(domains)):\n            self.assertEqual(domains[n][0], guest.domains[n].hypervisor_type)\n            self.assertEqual(domains[n][1], guest.domains[n].emulator)\n            self.assertEqual(domains[n][2], guest.domains[n].machines)\n\n        for n in features:\n            self.assertEqual(features[n],        guest.features[n])\n\n    def _buildCaps(self, filename):\n        path = os.path.join(\"tests/capabilities-xml\", filename)\n        xml = file(path).read()\n\n        return capabilities.Capabilities(xml)\n\n    def _testCapabilities(self, path, (host_arch, host_features), guests,\n                          secmodel=None):\n        caps = self._buildCaps(path)\n\n        if host_arch:\n            self.assertEqual(host_arch, caps.host.cpu.arch)\n            for n in host_features:\n                self.assertEqual(host_features[n], caps.host.cpu.features[n])\n\n        if secmodel:\n            self.assertEqual(secmodel[0], caps.host.secmodel.model)\n            self.assertEqual(secmodel[1], caps.host.secmodel.doi)\n            if secmodel[2]:\n                for k, v in secmodel[2].items():\n                    self.assertEqual(v, caps.host.secmodel.baselabels[k])\n\n        for idx in range(len(guests)):\n            self._compareGuest(guests[idx], caps.guests[idx])\n\n    def testCapabilities1(self):\n        host = ('x86_64', {'vmx': capabilities.FEATURE_ON})\n\n        guests = [\n            ('x86_64', 'xen',\n              [['xen', None, []]], {}),\n            ('i686',   'xen',\n              [['xen', None, []]], {'pae': capabilities.FEATURE_ON}),\n            ('i686',   'hvm',\n              [['xen', \"/usr/lib64/xen/bin/qemu-dm\", ['pc', 'isapc']]], {'pae': capabilities.FEATURE_ON | capabilities.FEATURE_OFF}),\n            ('x86_64', 'hvm',\n              [['xen', \"/usr/lib64/xen/bin/qemu-dm\", ['pc', 'isapc']]], {})\n       ]\n\n        self._testCapabilities(\"capabilities-xen.xml\", host, guests)\n\n    def testCapabilities2(self):\n        host = ('x86_64', {})\n        secmodel = ('selinux', '0', None)\n\n        guests = [\n            ('x86_64', 'hvm',\n              [['qemu', '/usr/bin/qemu-system-x86_64', ['pc', 'isapc']]], {}),\n            ('i686',   'hvm',\n              [['qemu', '/usr/bin/qemu', ['pc', 'isapc']]], {}),\n            ('mips',   'hvm',\n              [['qemu', '/usr/bin/qemu-system-mips', ['mips']]], {}),\n            ('mipsel', 'hvm',\n              [['qemu', '/usr/bin/qemu-system-mipsel', ['mips']]], {}),\n            ('sparc',  'hvm',\n              [['qemu', '/usr/bin/qemu-system-sparc', ['sun4m']]], {}),\n            ('ppc',    'hvm',\n              [['qemu', '/usr/bin/qemu-system-ppc',\n               ['g3bw', 'mac99', 'prep']]], {}),\n       ]\n\n        self._testCapabilities(\"capabilities-qemu.xml\", host, guests, secmodel)\n\n    def testCapabilities3(self):\n        host = ('i686', {})\n\n        guests = [\n            ('i686',   'hvm',\n              [['qemu', '/usr/bin/qemu', ['pc', 'isapc']],\n               ['kvm', '/usr/bin/qemu-kvm', ['pc', 'isapc']]], {}),\n            ('x86_64', 'hvm',\n              [['qemu', '/usr/bin/qemu-system-x86_64', ['pc', 'isapc']]], {}),\n            ('mips',   'hvm',\n              [['qemu', '/usr/bin/qemu-system-mips', ['mips']]], {}),\n            ('mipsel', 'hvm',\n              [['qemu', '/usr/bin/qemu-system-mipsel', ['mips']]], {}),\n            ('sparc',  'hvm',\n              [['qemu', '/usr/bin/qemu-system-sparc', ['sun4m']]], {}),\n            ('ppc',    'hvm',\n              [['qemu', '/usr/bin/qemu-system-ppc',\n               ['g3bw', 'mac99', 'prep']]], {}),\n       ]\n\n        secmodel = ('dac', '0', {\"kvm\" : \"+0:+0\", \"qemu\" : \"+0:+0\"})\n\n        self._testCapabilities(\"capabilities-kvm.xml\", host, guests, secmodel)\n\n    def testCapabilities4(self):\n        host = ('i686',\n                 {'pae': capabilities.FEATURE_ON | capabilities.FEATURE_OFF})\n\n        guests = [\n            ('i686', 'linux',\n              [['test', None, []]],\n              {'pae': capabilities.FEATURE_ON | capabilities.FEATURE_OFF}),\n       ]\n\n        self._testCapabilities(\"capabilities-test.xml\", host, guests)\n\n    def testCapsLXC(self):\n        guests = [\n            (\"x86_64\", \"exe\", [[\"lxc\", \"/usr/libexec/libvirt_lxc\", []]], {}),\n            (\"i686\", \"exe\", [[\"lxc\", \"/usr/libexec/libvirt_lxc\", []]], {}),\n       ]\n\n        self._testCapabilities(\"capabilities-lxc.xml\",\n                               (None, None), guests)\n\n    def testCapsTopology(self):\n        filename = \"capabilities-test.xml\"\n        caps = self._buildCaps(filename)\n\n        self.assertTrue(bool(caps.host.topology))\n        self.assertTrue(len(caps.host.topology.cells) == 2)\n        self.assertTrue(len(caps.host.topology.cells[0].cpus) == 8)\n        self.assertTrue(len(caps.host.topology.cells[0].cpus) == 8)\n\n    def testCapsCPUFeaturesOldSyntax(self):\n        filename = \"rhel5.4-xen-caps-virt-enabled.xml\"\n        host_feature_list = [\"vmx\"]\n        feature_dict = build_host_feature_dict(host_feature_list)\n\n        caps = self._buildCaps(filename)\n        for f in feature_dict.keys():\n            self.assertEquals(caps.host.cpu.features[f], feature_dict[f])\n\n    def testCapsCPUFeaturesOldSyntaxSVM(self):\n        filename = \"rhel5.4-xen-caps.xml\"\n        host_feature_list = [\"svm\"]\n        feature_dict = build_host_feature_dict(host_feature_list)\n\n        caps = self._buildCaps(filename)\n        for f in feature_dict.keys():\n            self.assertEquals(caps.host.cpu.features[f], feature_dict[f])\n\n    def testCapsCPUFeaturesNewSyntax(self):\n        filename = \"libvirt-0.7.6-qemu-caps.xml\"\n        host_feature_list = ['lahf_lm', 'xtpr', 'cx16', 'tm2', 'est', 'vmx',\n                             'ds_cpl', 'pbe', 'tm', 'ht', 'ss', 'acpi', 'ds']\n        feature_dict = build_host_feature_dict(host_feature_list)\n\n        caps = self._buildCaps(filename)\n        for f in feature_dict.keys():\n            self.assertEquals(caps.host.cpu.features[f], feature_dict[f])\n\n        self.assertEquals(caps.host.cpu.model, \"core2duo\")\n        self.assertEquals(caps.host.cpu.vendor, \"Intel\")\n        self.assertEquals(caps.host.cpu.threads, \"3\")\n        self.assertEquals(caps.host.cpu.cores, \"5\")\n        self.assertEquals(caps.host.cpu.sockets, \"7\")\n\n    def testCapsUtilFuncs(self):\n        new_caps = self._buildCaps(\"libvirt-0.7.6-qemu-caps.xml\")\n        new_caps_no_kvm = self._buildCaps(\n                                    \"libvirt-0.7.6-qemu-no-kvmcaps.xml\")\n        empty_caps = self._buildCaps(\"empty-caps.xml\")\n        rhel_xen_enable_hvm_caps = self._buildCaps(\n                                    \"rhel5.4-xen-caps-virt-enabled.xml\")\n        rhel_xen_caps = self._buildCaps(\"rhel5.4-xen-caps.xml\")\n        rhel_kvm_caps = self._buildCaps(\"rhel5.4-kvm-caps.xml\")\n\n        def test_utils(caps, no_guests, is_hvm, is_kvm, is_bios_disable,\n                       is_xenner):\n            self.assertEquals(caps.no_install_options(), no_guests)\n            self.assertEquals(caps.hw_virt_supported(), is_hvm)\n            self.assertEquals(caps.is_kvm_available(), is_kvm)\n            self.assertEquals(caps.is_bios_virt_disabled(), is_bios_disable)\n            self.assertEquals(caps.is_xenner_available(), is_xenner)\n\n        test_utils(new_caps, False, True, True, False, True)\n        test_utils(empty_caps, True, False, False, False, False)\n        test_utils(rhel_xen_enable_hvm_caps, False, True, False, False, False)\n        test_utils(rhel_xen_caps, False, True, False, True, False)\n        test_utils(rhel_kvm_caps, False, True, True, False, False)\n        test_utils(new_caps_no_kvm, False, True, False, False, False)\n\n    def testCPUMap(self):\n        caps = self._buildCaps(\"libvirt-0.7.6-qemu-caps.xml\")\n        cpu_64 = caps.get_cpu_values(None, \"x86_64\")\n        cpu_32 = caps.get_cpu_values(None, \"i486\")\n        cpu_random = caps.get_cpu_values(None, \"mips\")\n\n        def test_cpu_map(cpumap, cpus):\n            cpunames = sorted([c.model for c in cpumap], key=str.lower)\n\n            for c in cpus:\n                self.assertTrue(c in cpunames)\n\n        self.assertEquals(cpu_64, cpu_32)\n\n        x86_cpunames = [\n            '486', 'athlon', 'Conroe', 'core2duo', 'coreduo', 'n270',\n            'Nehalem', 'Opteron_G1', 'Opteron_G2', 'Opteron_G3', 'Penryn',\n            'pentium', 'pentium2', 'pentium3', 'pentiumpro', 'phenom',\n            'qemu32', 'qemu64']\n\n        test_cpu_map(cpu_64, x86_cpunames)\n        test_cpu_map(cpu_random, [])\n\n        conn = utils.open_testdriver()\n        cpu_64 = caps.get_cpu_values(conn, \"x86_64\")\n        self.assertTrue(len(cpu_64) > 0)\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from rasa_core.channels import HttpInputChannel\nfrom rasa_core.agent import Agent\nfrom rasa_core.interpreter import RegexInterpreter\n\n# initializing the agent\nagent = Agent.load('models/dialogue', interpreter=RegexInterpreter())\n\n# setting input channel\ninput_channel = HttpInputChannel(5004, '/webhooks/rasa/webhook')\nagent.handle_channels([input_channel], 5004, serve_forever=True)\n\n# implement stories and responses\ndef booking_movies(dispatcher, tracker, domain):\n    tracker.events.append(Event(\"action_listen\"))\n    response = \"Welcome to Movie Bot!\\\n    What movie would you like to watch?\"\n    dispatcher.utter_message(response)\n    return [SlotSet('movietitle',None)]\n\ndef booking_dates(dispatcher, tracker, domain):\n    movie_title = tracker.get_slot('movietitle')\n    response = \"Alright! Please enter the date when you would like to watch the \"+ movie_title +\"  ?\"\n    dispatcher.utter_message(response)\n    return [SlotSet('moviedate',None)]\n\ndef booking_times(dispatcher, tracker, domain):\n    movie_date = tracker.get_slot('moviedate')\n    response = \"Okay, you have selected \"+movie_date+\" as your date. What time would you like to watch the movie?\"\n    dispatcher.utter_message(response)\n    return [SlotSet('movietime',None)]\n\ndef booking_confirmation(dispatcher, tracker, domain):\n    movie_time = tracker.get_slot('movietime')\n    response = \"Great! You have selected \"+movie_time+\" as your time for the movie. Please enter your payment details and we'll book the tickets for you.\"\n    dispatcher.utter_message(response)\n    return[] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\nimport base64\nimport random\nimport string\n\n# Create the HLS playlist\ndef generate_hls_playlist(n_segments):\n    # Generate a random string\n    secret_str = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(30))\n \n    # Generate the M3U8 playlist\n    print('#EXTM3U')\n    print('#EXT-X-VERSION:3')\n    print('#EXT-X-TARGETDURATION:5')\n    print('#EXT-X-MEDIA-SEQUENCE:0')\n    print('#EXT-X-PLAYLIST-TYPE:VOD')\n    for i in range(n_segments):\n        print('#EXTINF:5.0,\\n/segment_{}_{}.ts'.format(i, secret_str))\n    print('#EXT-X-ENDLIST')\n \n# Stream the segments\ndef stream_segments(n_segments):\n    for i in range(n_segments):\n        # Generate the data\n        data = b'\\x00' * (512*1024) # 512KB of dummy data\n        # Encode it to base64\n        encoded_data = base64.b64encode(data).decode('utf-8')\n \n        # Print the encoded payload\n        print('#EXT-X-CUE-OUT:DURATION=5.0,URI=\"data:text/plain;base64,{}\"'.format(encoded_data))\n \n        # Send the data\n        time.sleep(5)\n    \n    # Generate the HLS Playlist\n    generate_hls_playlist(n_segments)\n \nif __name__ == '__main__':\n    # Set the number of segments \n    n_segments = 10\n \n    # Generate and stream the segments\n    stream_segments(n_segments) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The best practices for naming classes in Python are:\n1. Use an \"UpperCamelCase\" style, that is, words that begin with an uppercase letter, with the first letter of each subsequent word capitalized.\n2. Make meaningful distinctions between the class names.\n3. Avoid using too many abbreviations.\n4. Avoid using the same name for a class and a module.\n5. Avoid using underscores in the name.\n6. Use a consistent style for the overall design of the system. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # empty list to store the numbers\nnum_list = []\n\n# read the user input\nwhile True:\n\n    # read the input and add to the list\n    user_input = input(\"Enter a number: \")\n    if user_input == \"\":\n        break\n    else:\n        num_list.append(int(user_input))\n    \n# calculate the total\ntotal = 0\nfor num in num_list:\n    total += num\n\n# display the result\nprint(\"The total is: \", total) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n        \n    def get_area(self):\n        return 3.14 * self.radius ** 2\n        \n    def get_circumference(self):\n        return 2 * 3.14 * self.radius but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\nimport logging \nfrom flask import Flask, render_template, request \n\napp = Flask(__name__)\n\n@app.route(\"/\", methods=['GET', 'POST'])\ndef home():\n    return render_template(\"index.html\")\n\n@app.route(\"/shop\", methods=['GET', 'POST'])\ndef shop():\n    if request.method == \"POST\":\n        product_name = request.form.get(\"product_name\")\n        if product_name is None:\n            logging.error(\"Product not found\")\n            return render_template(\"shop.html\", message=\"Product not found. Please try again.\")\n        else:\n            logging.info(\"Product found : {}\".format(product_name))\n            return render_template(\"shop.html\", product_name=product_name)\n    else:\n        return render_template(\"shop.html\")\n    \nif __name__ == '__main__':\n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def func(arr):\n  s = set()\n  # Store all the elements in a set\n  for item in arr:\n    s.add(item)\n  # Traverse the list and search for the element \n  # in set. It will take O(1) time\n  for item in arr:\n    if item in s:\n      print(item) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.cluster import KMeans\n\ndata = [[6.400e+01, -3.800e+01, 2.320e+02, 1.500e+00, 9.400e+00], \n        ...\n        ...\n        ...\n        ...\n        ...\n        [2.390e+01, -1.050e+00, 6.400e+01, 4.200e+00, 2.500e+00]]\n\n# Create a DataFrame from data\ndf = pd.DataFrame(data, columns=['Feature 1', 'Feature 2', 'Feature 3', 'Feature 4', 'Feature 5'])\n\n# Create a KMeans instance\nkmeans = KMeans(n_clusters=3, random_state=0)\n\n# Fit the model to data\nkmeans.fit(df)\n\n# Print the cluster labels\nprint(kmeans.labels_) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: sentence_words = sentence.split(\" \")\n \nunique_words = set(sentence_words)\n \nprint(\" \".join(unique_words)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_permutation(s1, s2):\n    s1_list = list(s1)\n    s2_list = list(s2)\n    s1_list.sort()\n    s2_list.sort()\n    if s1_list == s2_list:\n        return True\n    else:\n        return False\n\nprint(is_permutation(\"abc\", \"bca\")) # True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_prime_numbers(n):\n    for num in range(2, n):\n        prime = True\n        for div in range(2, int(num**0.5)+1):\n            if num % div == 0:\n                prime = False\n                break\n        if prime:\n            print(num)\n            \nprint_prime_numbers(100) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from pulp import *\n\n# Create the linear programming problem\nlp_prob = LpProblem(\"Linear Programming Problem\", LpMaximize)\n\n# Create problem variables\nx = LpVariable('x', lowBound=0)\ny = LpVariable('y', lowBound=0)\n\n# Objective function\nlp_prob += 5*x + 3*y \n\n# Constraints\nlp_prob += -x + 4*y <= 8\nlp_prob +=  2*x + y <= 6\n\n# Solve the problem\nstatus = lp_prob.solve()\n\nprint(\"Optimal solution:\")\nprint('Optimal value: {:.2f}'.format(pulp.value(lp_prob.objective)))\nprint('x = {}'.format(x.varValue))\nprint('y = {}'.format(y.varValue)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n#List of news headlines\nheadlines = [\n\"A new COVID-19 vaccine will be released in the next 6 months\", \n\"New laws to reduce pollution enacted in 15 countries\",\n\"A volcanic eruption in Indonesia causes massive destruction\"\n]\n\n#Number of news headlines to simulate\nnumHeadlines = 3\n\n#Generate a random set of headlines\nrandomHeadlines = random.sample(headlines, numHeadlines)\n\n#Iterate through list of headlines and simulate a news broadcast\nfor headline in randomHeadlines:\n    print(\"This is a breaking news update: \" + headline) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: students = [ \n {'name': 'John', 'grade': 10, 'age': 10},\n {'name': 'Jane', 'grade': 8, 'age': 14},\n {'name': 'Kate', 'grade': 9, 'age': 12}\n]\n\ngrades = [10, 8, 9]\n\nage_sum = 0\n\nfor grade in grades:\n age_sum += [student['age'] for student in students if student['grade'] == grade ][0]\n\nprint('Average age: {}'.format(age_sum/len(grades))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_dict(n):\n    d = {}\n    for i in range(1, n+1):\n       d[i] = i*i\n    return d but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize_func(x,y):\n    return (x + y - (2 * x * y))\n\ndef optimize(upper_bound):\n    best_val = 0\n    for x in range(0, upper_bound + 1):\n        for y in range(0, upper_bound + 1):\n            cur_val = optimize_func(x,y)\n            if cur_val > best_val:\n                best_val = cur_val\n    return best_val but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def min_swaps(nums):\n n = len(nums)\n count = 0\n for i in range(n):\n while nums[i] != i + 1:\n swap(nums, i, nums[i] - 1)\n count += 1\n return count\n\ndef swap(nums, i, j):\n nums[i], nums[j] = nums[j], nums[i] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_dict = {\n 'a': 1,\n 'b': 2,\n 'c': 8,\n 'd': 4\n}\n\nfor key, value in my_dict.items():\n if value > 5:\n  print(key)\n\n# Output: c but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nfor x in range(1000000):\n  password = '' \n  for i in range(12):\n    password += random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#!')\n  print(password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: search_list = [\"123 abc\", \"456 def\", \"789 ghi\", \"123 jkl\", \"456 mno\", \"789 pqr\"]\npattern = \"456*\"\n\nmatches = []\nfor item in search_list:\n  if item.startswith(pattern):\n    matches.append(item)\n\nprint(matches) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def partition(arr):\n  pivot = arr[0]\n  i = 0\n  j = len(arr) - 1\n\n  while i <= j:\n   while arr[i] < pivot:\n    i += 1\n   while arr[j] > pivot:\n    j -= 1\n\n   if i <= j:\n    arr[i], arr[j] = arr[j], arr[i] \n    i +=1\n    j -= 1\n\n  return arr\n\nprint(partition([1, 9, 0, 5, 2])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def split_sentences(text):\n    sentences = []\n    start = 0\n    for i in range(len(text)):\n        if text[i] == '.' or text[i] == '!' or text[i] == '?':\n            sentences.append(text[start:i+1])\n            start = i+1\n    return sentences\n\nsplit_sentences('This is a test string with three sentences!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def spiralPrint(arr): \n n = len(arr) \n rowBegin = 0\n rowEnd = n-1\n colBegin = 0\n colEnd = n-1\n\n while (rowBegin <= rowEnd and colBegin <= colEnd): \n  for i in range(colBegin, colEnd + 1): \n   print(arr[rowBegin][i], end =\" \") \n  rowBegin += 1\n  \n  for i in range(rowBegin, rowEnd + 1): \n   print(arr[i][colEnd], end =\" \") \n  colEnd -= 1\n  \n  if ( rowBegin <= rowEnd): \n   for i in range(colEnd, colBegin - 1, -1): \n    print(arr[rowEnd][i], end =\" \") \n   rowEnd -= 1\n  \n  if (colBegin <= colEnd): \n   for i in range(rowEnd, rowBegin - 1, -1): \n    print(arr[i][colBegin], end =\" \") \n   colBegin += 1\n   \n#Driver Code\narr = [[1, 2, 3], \n       [4, 5, 6], \n       [7, 8, 9]]\n\nspiralPrint(arr)\n\n# Output:\n1 2 3 6 9 8 7 4 5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def avg_rating(ratings):\n    total = 0\n    for rating in ratings:\n        total += rating[0] + rating[1]\n    return total / (len(ratings)*2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\nposts = []\n\n@app.route('/posts',methods=['POST'])\ndef create_post():\n data = request.get_json()\n post = {\n 'title': data['title'],\n 'content': data['content']\n }\n posts.append(post)\n return jsonify(post)\n\n@app.route('/posts/<string:title>', methods=['GET'])\ndef get_post(title):\n for post in posts:\n if post['title'] == title:\n return jsonify(post)\n return jsonify({'message': 'Post not found!'})\n\n@app.route('/posts/<string:title>', methods=['PUT'])\ndef update_post(title):\n data = request.get_json()\n for post in posts:\n if post['title'] == title:\n post['title'] = data['title']\n post['content'] = data['content']\n return jsonify(post)\n return jsonify({'message': 'Post not found!'})\n \nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_median(lst):\n    sorted_list = sorted(lst)\n    len_list = len(lst)\n    if len_list % 2 == 0:\n        return (sorted_list[len_list//2 - 1] + sorted_list[len_list//2])/2\n    else:\n        return sorted_list[len_list//2] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def foundDuplicates(string):\n    '''This function will detect if a string contains any duplicate characters.'''\n    seen = set()\n    for char in string:\n        if char in seen:\n            return True\n        seen.add(char)\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\ndef get_html_source(url):\n    \"\"\"\n    This function takes a web page URL and returns the page's HTML source code.\n    :param url: url\n    :return: html source\n    \"\"\"\n    response = requests.get(url)\n    return response.text but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def convert_list_integers(str_list):\n    return list(map(int, str_list))\n\nlist = ['12','14','17','25','99','168']\narr = convert_list_integers(list)\nprint(arr) # [12, 14, 17, 25, 99, 168] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def split_list(lst):\n    half = len(lst) // 2\n    return lst[:half], lst[half:]\n\nleft, right = split_list([14, 8, 3, 7, 5])\nprint (\"Left list : \", left)\nprint (\"Right list : \", right) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Write a program in Python. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_largest_number(numbers):\n    # Finds the largest number from the given list\n    largest = 0\n    for num in numbers:\n        if num > largest:\n            largest = num\n    return largest\n \nnumbers = [8, 5, 10, 3]\nlargest = find_largest_number(numbers)\nprint(largest) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_subsequences(arr):\n    subsequences = [[]]\n    for num in arr:\n        new_subsequences = []\n        for sub in subsequences:\n            new_subsequences.append(sub + [num])\n        subsequences += new_subsequences\n    return subsequences\n\narr = [1, 2, 3]\nresult = get_subsequences(arr)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import itertools \nwords = ['dog', 'cat', 'fish'] \nresult = list(itertools.permutations(words)) \n\nfor word in result: \n    print(word) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def digitSum(n):\n    if n == 0: \n        return 0\n    else:\n        return (n % 10) + digitSum(int(n / 10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_odd_even(nums):\n    output = []\n    for n in nums:\n        if n%2 == 0:\n            output.append('even')\n        else:\n            output.append('odd')\n    return output\n\nif __name__ == '__main__':\n    print(classify_odd_even(my_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n):\n  a = 0\n  b = 1\n  if n < 0:\n    print(\"Incorrect input\")\n  elif n == 0:\n    return 0\n  elif n == 1:\n    return 1\n  else:\n    for i in range(2,n):\n      c = a + b\n      a = b\n      b = c\n    return b\n\nprint(Fibonacci(8)) # Output: 13 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(s): \n  if len(s) == 0: \n    return s \n  else: \n    return reverse_string(s[1:]) + s[0] \n\n# Test\nstring = \"test string\"\nprint(reverse_string(string)) # Output: \"gnirts tset\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_of_nums = [4, 7, -1, 2, 8, 5]\n\nlargest_odd_numbers = []\n\nfor num in list_of_nums:\n    if num % 2 != 0 and len(largest_odd_numbers) < 3:\n        largest_odd_numbers.append(num)\n\nlargest_odd_numbers.sort()\nprint (largest_odd_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\nstring = \"There are 45.8 apples and 12.3 oranges.\"\nnumbers = re.findall(r\"[-+]?\\d*\\.\\d+|\\d+\", string)\nprint(numbers)\n\n# Output: ['45.8', '12.3'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_prime_numbers(limit):\n    # Create an initial list of all numbers from 0 up to the limit.\n    primes = [True] * (limit + 1)\n    # Set 0 and 1 to False since that are not primes.\n    primes[0] = False\n    primes[1] = False\n    \n    # Iterate through the numbers up to the square root of the limit\n    for i in range(2, int(limit**0.5) + 1):\n        if primes[i] == True:\n            # set the multiples of this number to False\n            for j in range(i*i, limit+1, i):\n                primes[j] = False\n\n    # Create a list with only True elements (those which are prime numbers)\n    true_primes = [i for i in range(2, limit+1) if primes[i] == True]\n            \n    return true_primes but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_dicts(dict1, dict2):\n    merged_dict = {**dict1, **dict2}\n    return merged_dict but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mode(list):\n    count_dict = {}\n    for item in list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n            \n    max_count = 0\n    mode = 0\n    for key in count_dict.keys():\n        if count_dict[key] > max_count:\n            max_count = count_dict[key]\n            mode = key\n            \n    return mode\n    \nnumbers = [1, 2, 5, 2, 3, 2, 5, 2]\nprint(mode(numbers)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/greeting', methods=['GET'])\ndef get_greeting(name):\n return 'Hello, ' + name + '!'\n\nif __name__ == '__main__':\n app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseStrings(arr):\n  revDict = {};\n  for str in arr:\n    revDict[str[::-1]] = str;\n  return revDict;\n\nreverseStrings([\"Hello\", \"World\"]); // Outputs: {'olleH': 'Hello', 'dlroW': 'World'} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_digits(num):\n    return len(str(abs(num))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef random_string(): \n    string = ''.join(random.sample(\n        'abcdefghijklmnopqrstuvwxyz' \n        + '0123456789', 7)) \n    return string but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.decomposition import PCA\n\ndata = {'Name':['Alice','Bob','Charlie','Dave','Emily'], \n        'Score1':[62,89,85,72,74],\n        'Score2':[64,87,84,78,76]}\n\ndf = pd.DataFrame(data)\n\n# Define X and y\nX = df[['Score1', 'Score2']]\ny = df['Name']\n\n# Perform PCA\npca = PCA(n_components=2)\nX_reduced = pca.fit_transform(X)\n\n# Print the explained variance for each component\nprint(pca.explained_variance_ratio_) but is not the same. just give one example and only return the code."}
