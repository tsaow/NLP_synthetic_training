{"prompt": "make some code that functions the same as the following code: class Department:\n def __init__(self, name, employees=[], budget=0):\n  self.name = name\n  self.employees = employees\n  self.budget = budget\n\n def set_name(self, name):\n  self.name = name\n\n def add_employee(self, employee):\n  self.employees.append(employee)\n\n def set_budget(self, budget):\n  self.budget = budget but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def middle_sum(numbers):\n    if len(numbers) == 0:\n        return None\n    \n    if len(numbers) % 2 == 1:\n        return numbers[len(numbers) // 2]\n    else:\n        return numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from bs4 import BeautifulSoup\nimport requests\n\nseed_url = 'http://example.com'\n\ndef crawl_titles(url): \n titles = [] \n html = requests.get(url).text \n soup = BeautifulSoup(html, \"html.parser\") \n for link in soup.find_all('a'): \n  href = link.get('href') \n  if href.startswith(url): \n   html = requests.get(href).text \n   soup = BeautifulSoup(html, \"html.parser\") \n   title = soup.title.string \n   titles.append(title) \n return titles\n\ntitles = crawl_titles(seed_url)\nprint(titles) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\nnum = fibonacci(10)\nprint(num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Point:\n    \"\"\"Class representing a Point in 2D space\"\"\"\n    def __init__(self, x, y):\n        \"\"\"Initialize the point with given x and y co-ordinates\"\"\"\n        self.x = x\n        self.y = y\n    \n    def get_x(self):\n        \"\"\"Return the x co-ordinate of the point\"\"\"\n        return self.x\n    \n    def get_y(self):\n        \"\"\"Return the y co-ordinate of the point\"\"\"\n        return self.y\n    \n    def move_to(self, x, y):\n        \"\"\"Move the point to a new position x,y\"\"\"\n        self.x = x\n        self.y = y\n        \n    def distance_to(self, point):\n        \"\"\"Calculate the distance to the other point\"\"\"\n        dx = self.x - point.get_x()\n        dy = self.y - point.get_y()\n        return (dx**2 + dy**2) ** 0.5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n \nurl = 'https://example.com'\ncontent = requests.get(url).content\nsoup = BeautifulSoup(content, 'html.parser')\n \nfor element in soup.find_all('h2'):\n    print(element.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n \n    def __init__(self, name, age, school, grade):\n        self.name = name\n        self.age = age\n        self.school = school\n        self.grade = grade\n        \n    def get_name(self):\n        return self.name\n        \n    def get_age(self):\n        return self.age\n    \n    def get_school(self):\n        return self.school\n    \n    def get_grade(self):\n        return self.grade but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimized_list(arr):\nn = len(arr)\nfor i in range(n):\n j = i+1\n while(j < n):\n  if arr[i] > arr[j]:\n   temp = arr[i]\n   arr[i] = arr[j]\n   arr[j] = temp\n  j+=1\n \nreturn arr\n \narr = [3, 8, 2, 6, 10]\nresult = optimized_list(arr)\nprint(result) #[2, 3, 6, 8, 10] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def split_dict(d):\n # Split the dict keys into two equally-sized sets\n keys_set_1 = list(d.keys())[:len(d)//2]\n keys_set_2 = list(d.keys())[len(d)//2:]\n \n # Return the 2 sets\n return keys_set_1, keys_set_2\n \n# Input dict\ndictionary = {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f'}\n \n# Print the result\nprint(split_dict(dictionary))  # ([1, 2, 3], [4, 5, 6]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_rotation(str1, str2):\n    if len(str1) == len(str2) and len(str1) > 0:\n        return (str1 + str1).find(str2) != -1\n    return False\n    \nis_rotation('waterbottle', 'erbottlewat') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_two_lists(list1, list2):\n return list1 + list2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def romanToDecimal(s):\n    #dictionary containing the values of Roman Numerals\n    roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    \n    #initialize result\n    result = roman[s[len(s) - 1]]\n    \n    #traverse the input in reverse order\n    for i in range(len(s) - 2, -1, -1):\n        # if the current value of character is less than or equal to its next character\n        if roman[s[i]] <= roman[s[i+1]]:\n            result -= roman[s[i]]\n        else:\n            result += roman[s[i]]\n  \n    return result\n\n# Driver Program \ns = 'XXII'\nprint(romanToDecimal(s)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: We can maximize the given function by solving the given constraints as a linear programming problem. We can use an optimization library in Python to solve this problem. We can also use the Simplex algorithm to solve this problem. The optimal solution is (1,1), which gives a maximum value of 2. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_combinations(words):\n    if len(words) == 1:\n        return words\n\n    combinations = []\n    for i in range(len(words)):\n        for j in range(len(words)):\n            if i != j:\n                combinations.append(words[i] + words[j])\n\n    return combinations\n\ncombinations = find_combinations([\"Test\", \"Example\", \"Unique\"])\nprint(\"Combinations:\", combinations) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Load the dataset\ndata = pd.read_csv('flag.data', sep=',', header=None)\n\n# Split the dataset into training and test sets\nX = data.iloc[:, 0:8]\ny = data.iloc[:, 8]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\n\n# Train a decision tree classifier\nclassifier = DecisionTreeClassifier()\nclassifier.fit(X_train, y_train)\n\n# Test and evaluate the trained classifier\nscore = classifier.score(X_test, y_test)\nprint('Accuracy: {:.2f}'.format(score)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Filter list \nwords = ['hello', 'world', 'this', 'is', 'a', 'test', 'foobar']\n\n# Keep only words longer than 8 characters\nfiltered_words = [word for word in words if len(word) > 8]\n\nprint(filtered_words)\n# Output: ['foobar'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_difference(arr): \n  \n    max_diff = 0\n    for i in range(0, len(arr)): \n        for j in range(i+1, len(arr)): \n            diff = arr[j]-arr[i] \n            if(diff > max_diff): \n                max_diff = diff \n  \n    return max_diff \n  \narray = [2, 9, 4, 1, 5]\n  \nprint(\"Maximum difference =\", max_difference(array)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def divisible_by_3_5(array):\n    result = []\n    for num in array:\n        if (num % 3 == 0) and (num % 5 == 0):\n            result.append(num)\n    return result\n\nprint(divisible_by_3_5([5, 15, 20, 7, 10])) # [15] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_armstrong(num):\n   # calculate the total of each digits power to the length of digits \n    temp = num\n    order = len(str(num))\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n  \n    if (num == sum):\n        return True\n    else:\n        return False \n\ndef find_armstrong_numbers(start, end):\n    armstrong_numbers = []\n    for num in range(start, end + 1):\n        if is_armstrong(num):\n            armstrong_numbers.append(num)\n    return armstrong_numbers but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def median(num1, num2, num3): \n  \n    if (num1 > num2): \n        if (num3 > num1): \n            median = num1 \n        elif (num3 > num2): \n            median = num3\n        else: \n            median = num2\n    else: \n        if (num3 > num2): \n            median = num2\n        elif (num3 > num1): \n            median = num3\n        else: \n            median = num1\n    return median\n\nprint(\"Median is: \" + str(median(6, 8, 4))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def pattern_search(string, pattern):\n    i = 0\n    while i < len(string):\n        j = 0\n        while j < len(pattern):\n            if string[i+j] != pattern[j]:\n                break\n            j += 1\n        if j == len(pattern):\n            return i\n        i += 1\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def evaluate_formula(x, y, z):\n return 2*x + 4*y - z == 10 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: a = 1\nb = 2\nc = a + b\nprint(c) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_extraction import DictVectorizer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\n\n#Data Preprocessing\nfeatures = pd.read_csv('features.csv')\nX = features.iloc[:, :-1].values\ny = features.iloc[:, -1].values\n\n#Feature Selection\nselector = SelectKBest(k=10)\nselector.fit(X, y)\nX_new = selector.transform(X)\n\n#Feature Extraction\nvectorizer = DictVectorizer(sparse=False)\nX_final = vectorizer.fit_transform(X)\n\n#Feature Scaling\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X_final)\n\n#Training and Testing\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2)\n\n#Model Stacking\nmodel = RandomForestClassifier(n_estimators=100)\nmodel.fit(X_train, y_train) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_value_in_2d_array(arr, value):\n    \"\"\"\n    This function searches for a specified value in a given 2-dimensional array.\n    \n    Parameters:\n    arr (list): 2-dimensional array \n    value (int/str/float): Value to be searched\n    \n    Returns:\n    list: list of indices representing the location of the searched value\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if arr[i][j] == value:\n                return [i, j]\n    return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search_string(search_string, list_of_strings):\n    for string in list_of_strings:\n        if string == search_string:\n            return True\n    return False\n\nresult = search_string('python', ['java', 'javascript', 'python', 'ruby']) \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def descending_sort(list): \n    list.sort(reverse=True) \n    return list\n\nlist = [3, 8, 1, 5]\nresult = descending_sort(list)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def anagramCheck(str1, str2): \n    # Get the length of string \n    n1 = len(str1) \n    n2 = len(str2) \n      \n    # If length of both strings is not same, then \n    # they cannot be anagram \n    if n1 != n2: \n        return False\n  \n    # Sort both strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n  \n    return True\n\n# Driver code \nprint(anagramCheck(\"listen\", \"silent\")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def shift_words(s):\n    shifted_s = \"\"\n    for c in s:\n        if c.isalpha():\n            shifted_s += chr(ord(c)+1)\n        else:\n            shifted_s += c\n    return shifted_s\n\nprint(shift_words(\"hello world\"))\n# Output: ifmmp xpsme but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_strings(strings):\n    strings.sort()\n    return strings but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_vowels(text):\n  # Initialize a counter\n  count = 0\n  # Loop through the text\n  for char in text.lower():\n    # If the character is a vowel\n    if char in \"aeiou\":\n      # Increment the counter\n      count += 1\n  \n  return count\n\n# call the function\ntext = \"Python is a great language for developers\"\nnum_vowels = count_vowels(text)\nprint(\"Number of vowels: \" + str(num_vowels)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def most_frequent(arr):\n    max_val = 0\n    max_count = 0\n    counts = {}\n    for i in arr:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n        if counts[i] > max_count:\n            max_val = i\n            max_count = counts[i]\n    return max_val but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\n# Replace empty cells with the median value of the column\ndf = df.fillna(df.median())\n\n# Check if the null values have been replaced\nprint(df.isnull().sum()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Book:\n    def __init__(self, title, authors):\n        self.title = title\n        self.authors = authors\n\nmyBook = Book('The Great Gatsby', 'F. Scott Fitzgerald')\nprint(myBook.title, myBook.authors) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_smallest(num1, num2, num3):\n    return min(num1, num2, num3)\n\n# Example\nprint(find_smallest(2, 5, 8))  # Prints 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # input list\ntup_list = [(\"John\",20), (\"Jacob\", 18), (\"John\", 22), (\"Jingleheimerschmidt\", 15), (\"John\", 18)]\n\n# create an empty dictionary\nnameAgeDict = {}\n\n# loop through list to create dictionary\nfor (name,age) in tup_list:\n if name in nameAgeDict:\n  nameAgeDict[name].append(age)\n else:\n  nameAgeDict[name] = [age]\n\n# create an empty array to store average age of each name\naveAgeArray = []\n\n# loop through each name in the dictionary\nfor name,ageList in nameAgeDict.items():\n aveAgeArray.append((name,sum(ageList)/len(ageList)))\n\nprint(aveAgeArray)\n# Output: [('John', 19.333333333333332), ('Jacob', 18.0), ('Jingleheimerschmidt', 15.0)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: arr = [1, 2, 3, 4, 5, 6] \nnew_arr = [i**2 for i in arr if i % 2 == 0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ntext = 'The following numbers belong to us: 888-555-0000, +1-217-543-1000.'\n\n# Find all phone numbers\nnumbers = re.findall(r'\\+?\\d[\\d -]{8,12}\\d', text)\n\n# Output\nprint(numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci_series(N):\n    a = 0\n    b = 1\n \n    if N < 0:\n        print(\"Incorrect input\")\n    elif N == 0:\n        print(\"Series up to 0 terms: \")\n    else:\n        print(\"Series up to\", N,\"terms:\")\n    \n    for i in range(0, N):\n        print(a, end=\" \")\n        c = a + b\n        a = b\n        b = c\n\nN = int(input(\"Enter a number: \"))\nfibonacci_series(N) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \ncharacters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()? \"\nvowels = ['a','e','i','o','u']\npassword = \"\"\nprevious = ''\n\nfor i in range(8): \n    \n    char = random.choice(characters)\n    if char in vowels and i > 0 and previous in vowels:\n        continue   \n    password = password + char\n    previous = char\n\nprint (\"Your password is: \", password) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_palindrome(word):\n    # reverse word\n    reverse_word = word[::-1]\n    # Compare reverse word and original word\n    if reverse_word == word:\n        return True\n    else:\n        return False\n\n# main\nwords = ['malayalam', 'rotator', 'civic']\n\nfor word in words:\n    if is_palindrome(word):\n        print(f'{word} is a palindrome.')\n    else:\n        print(f'{word} is not a palindrome.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Player:\n  def __init__(self):\n      self.fga = 0 \n      self.fgm = 0\n      self.ftm = 0\n      \n  def set_fga(self, fga):\n      self.fga = fga\n  \n  def get_fga(self):\n      return self.fga\n  \n  def set_fgm(self, fgm):\n      self.fgm = fgm\n      \n  def get_fgm(self):\n      return self.fgm\n  \n  def set_ftm(self, ftm):\n      self.ftm = ftm\n      \n  def get_ftm(self):\n      return self.ftm but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def listToString(numbers):\n return ','.join(str(num) for num in numbers)\n\nlist = [7, 8, 9, 10]\nresult = listToString(list)\n\nprint(result)\n\n# Output: '7,8,9,10' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_matrix(matrix):\n    \"\"\"\n    Function to print out a matrix of numbers.\n    \"\"\"\n    for row in matrix:\n        for num in row:\n            print(str(num).ljust(4), end=\"\")\n        print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n): \n # Fibonacci numbers are 0, 1, 1, 2, 3, 5,... \n a = 0\n b = 1\n if n < 0: \n print(\"Incorrect input\") \n elif n == 0: \n return a \n elif n == 1: \n return b \n else: \n for i in range(2,n): \n c = a + b \n a = b \n b = c \n return b \n\nprint(fibonacci(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def clean_string(string):\n    '''\n    Function to remove all punctuation from a string and capitalize the first letter of each word\n    \n    Parameters\n    string: string\n    \n    Returns\n    cleaned string with no punctuation and first letter of each word capitalized\n    '''\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    cleaned_string = \"\"\n    for char in string:\n        if char not in punctuations:\n            cleaned_string += char\n    words = cleaned_string.split()\n    capitalized_words = [word.capitalize() for word in words]\n    return ' '.join(capitalized_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1, 11):\n    for j in range(1, i+1):\n        print(i+(j-1)*i, end=\" \")\n    print() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(n+1):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\n# Load the data\ndata = pd.read_csv('heart_data.csv')\n\n# Split the data into features (X) and the labels (Y)\nX = data.drop('chd', axis=1)\nY = data['chd']\n\n# Split the data into training and testing sets\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=0)\n\n# Create a logistic regression model and train it\nmodel = LogisticRegression()\nmodel.fit(X_train, Y_train)\n\n# Test the model\nY_pred = model.predict(X_test)\nacc = accuracy_score(Y_test, Y_pred)\nprint(acc) # Prints accuracy score but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(1,11):\n    print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: squares = {x: x**2 for x in range(1, 11)} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef multiple_linear_regression(x, y):\n    # add ones column\n    X = np.concatenate((np.ones((x.shape[0], 1)), x), axis=1)\n    # calculate the parameters \n    theta = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(y)\n    return theta but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: squares = [n**2 for n in range(10)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_ten(number):\n    \"\"\"\n    This function takes a number as an argument and adds 10 to it.\n    \"\"\"\n    return number + 10\n\n\nif __name__ == '__main__':\n    print(add_ten(5)) # Output: 15 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_e(arr): \n    return [i.replace('e','@') for i in arr] \n  \narr = ['abc','xyz','111']\nprint(replace_e(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: inputString = \"123 Main Street, Orlando, FL, 32801\"\n\nwords = inputString.split(\",\")\nif len(words) > 3:\n    outputString = words[1] + \", \" + words[2] + \" \" + words[3]\n    print(outputString) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compute_formula(x, y):\n    return (x + y)**2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def spiralTraverse(matrix):\n    startRow, startCol = 0, 0\n    endRow, endCol = len(matrix) - 1, len(matrix[0]) - 1\n    result = []\n\n    while startRow <= endRow and startCol <= endCol:\n        # Traverse from left to right\n        for col in range(startCol, endCol + 1):\n            result.append(matrix[startRow][col])\n\n        # Traverse from top to bottom\n        for row in range(startRow + 1, endRow + 1):\n            result.append(matrix[row][endCol])\n\n        # Traverse from right to left\n        for col in range(endCol - 1, startCol - 1, -1):\n            result.append(matrix[endRow][col])\n\n        # Traverse from bottom to top\n        for row in range(endRow - 1, startRow, -1):\n            result.append(matrix[row][startCol])\n\n        startRow += 1\n        endRow -= 1\n        startCol += 1\n        endCol -= 1\n    \n    return result\n\nmatrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n\nprint(spiralTraverse(matrix))\n\n# Output: [7, 8, 9, 6, 3, 4, 5, 2, 11, 12, 13, 14, 15, 10, 1, 16] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def decision_tree_classifier(data):\n    # check for base cases\n    if len(data) == 0:\n        return None\n    elif len(data[0]) == 1:\n        # all columns are the same => return the most frequent label\n        return find_most_frequent_label(data)\n\n    # find the best split attribute\n    attr_idx, split_val = find_best_split_attr(data)\n\n    # create a decision tree node\n    tree = TreeNode(attr_idx, split_val)\n\n    # create subtrees based on split attribute\n    left, right = split_data(data, attr_idx, split_val)\n    tree.add_left_subtree(decision_tree_classifier(left))\n    tree.add_right_subtree(decision_tree_classifier(right))\n    \n    return tree but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return quick_sort(less) + [pivot] + quick_sort(greater) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def average(a, b, c, d, e):\n    \"\"\"This program computes the average of 5 numbers\"\"\"\n    return (a+b+c+d+e)/5 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = [\"correct\", \"tango\", \"apple\", \"banana\"] \n\n# Sort words in reverse alphabetical order \nwords.sort(reverse=True) \n\n# Print list in descending order \nprint(words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortStringByLength(string_list):\n    string_list.sort(key = lambda x:len(x)) \n    return string_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person: \n    def __init__(self, name): \n        self.name = name \n  \n    def show_name(self): \n        print(\"Name : \", self.name) \n       \n    def greeting(self):\n        print(\"Hello, my name is {}\".format(self.name))\n\nclass Student(Person):\n    def __init__(self, name, rollnum):\n        Person.__init__(self, name)\n        self.rollnum = rollnum \n\n    def show_rollnum(self):\n        print(\"Roll Number: \", self.rollnum)\n\n\ns = Student(\"Jill\", \"15\")\ns.show_name()\ns.show_rollnum()\ns.greeting() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def minMax(numbers):\n    max_num = numbers[0]\n    min_num = numbers[0]\n   \n    for num in numbers:\n        if num > max_num: \n            max_num = num\n        elif num < min_num:\n            min_num = num\n   \n    return (min_num, max_num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MergeSort:\n    # Merges two sorted lists\n    def merge(self, list1, list2):\n        i = 0\n        j = 0\n        merged_list = []\n        while i < len(list1) and j < len(list2):\n            if list1[i] <= list2[j]:\n                merged_list.append(list1[i])\n                i += 1\n            else:\n                merged_list.append(list2[j])\n                j += 1\n\n        # Lists might be of different lengths, so append the rest of the elements\n        if i < len(list1):\n            merged_list += list1[i:]\n        elif j < len(list2):\n            merged_list += list2[j:]\n\n        return merged_list\n\n\n# Test\nlist1 = [2, 5, 6]\nlist2 = [1, 8, 10]\n\nms = MergeSort()\nprint(ms.merge(list1, list2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\n\nclass BlackScholes():\n def __init__(self, S, K, T, r, sigma):\n self.S = S\n self.K = K\n self.T = T\n self.r = r\n self.sigma = sigma\n \n def d1(self):\n return (math.log(self.S/self.K) + (self.r + 0.5 * self.sigma ** 2)*self.T)/(self.sigma * math.sqrt(self.T))\n \n def d2(self):\n return self.d1() - self.sigma * math.sqrt(self.T)\n \n def call_price(self):\n return self.S * stats.norm.cdf(self.d1()) - self.K * math.exp(-self.r * self.T) * stats.norm.cdf(self.d2())\n \n def put_price(self):\n return -self.S * stats.norm.cdf(-self.d1()) + self.K * math.exp(-self.r * self.T) * stats.norm.cdf(-self.d2()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        fib_list = fibonacci(n - 1)\n        fib_list.append(fib_list[-1] + fib_list[-2])\n        return fib_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for item in data:\n    print(f'Name: {item[\"name\"]}, Age: {item[\"age\"]}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: student_scores = {\n    'John': 88.0, \n    'Jane': 91.2, \n    'Adam': 70.6, \n    'Josh': 75.1,\n    'Paul': 95.5,\n    'Abby': 87.3,\n    'Brian': 67.3,\n    'Kim': 80.5,\n    'Mark': 93.2,\n    'Sarah': 86.7\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_interest_rate(principal, rate, period):\n  return principal * (rate / 100) * period\n  \ncalculate_interest_rate(2000, 4.5, 5) #900 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def median(nums):\n    nums.sort()\n    n = len(nums)\n    if n % 2 == 0:\n        return (nums[n//2] + nums[(n//2) - 1]) / 2\n    return nums[n//2]\n\nnums = [3, 4, 5, 9, 12, 15]\nprint(median(nums)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Base:\n    # Base class\n    def __init__(self, value):\n        self.value = value\n\nclass Derived1(Base):\n    # First derived class\n    def __init__(self, value, name):\n        super().__init__(value)\n        self.name = name\n\nclass Derived2(Base):\n    # Second derived class\n    def __init__(self, value, age):\n        super().__init__(value)\n        self.age = age but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_books_with_alice(books):\n    found_books = []\n    for book in books:\n        if \"Alice in Wonderland\" in book.Text:\n            found_books.append(book)\n    return found_books but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_array(arr):\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-i-1):\n            if arr[j] > arr[j+1]:\n                temp = arr[j]\n                arr[j] = arr[j+1]\n                arr[j+1] = temp\n    return arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: maths_score = 85\nenglish_score = 63 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: squares = []\nfor i in range(1, 11):\n squares.append(i*i)\nprint(squares) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compute_sum(array):\n    sum = 0\n    for element in array:\n        sum += element\n    return sum\n    \nif __name__ == '__main__':\n    array = [1, 2, 3, 4, 5]\n    print(compute_sum(array)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: values = list(map(lambda x: x*2, range(10))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math          \n\ndef generate_table(): \n \n # headers \n print (\"angle (in degrees) sin(angle) cos(angle)\") \n \n # values \n for angle in range(0, 370, 10): \n  print(\"{:7} {:15.4f} {:15.4f}\".format(angle,math.sin(math.radians(angle)),math.cos(math.radians(angle)))) \n\nif __name__ == \"__main__\": \n generate_table() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ShoppingCart:\n def __init__(self):\n self.items = {}\n\n def add_item(self, item, quantity):\n if item in self.items:\n self.items[item] += quantity\n else:\n self.items[item] = quantity\n\n def remove_item(self, item, quantity):\n if item not in self.items:\n return\n if self.items[item] > quantity:\n self.items[item] -= quantity\n else:\n del self.items[item] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def formatYear (birthYear):\n return str(birthYear)+\"-01-01\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_multiplication_table(number): \n    for i in range(1, 11): \n        print(number,\"X\",i,\"=\",number*i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # get user input\ninput_str = input('Enter a sentence: ')\n\n# split into words\nwords = input_str.split(' ')\n\n# create an empty dictionary\ndic = {}\n\n# loop over words\nfor word in words:\n # update dictionary\n if word in dic:\n  dic[word] += 1\n else:\n  dic[word] = 1\n\n# find the most common word\nmost_common_word = ''\nhighest_count = 0\n\nfor word, count in dic.items():\n if count > highest_count:\n  most_common_word = word\n  highest_count = count\n\n# print the result\nprint(f'The most common word is \"{most_common_word}\" with {highest_count} occurences.') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max(arr):\n max_val = arr[0]\n for num in arr:\n if num > max_val:\n max_val = num\n return max_val\n\narray = [3, 2, 1, 4, 5]\nprint(find_max(array)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: n1 = 9\nn2 = 4\nprint(n1 - n2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for i in range(number):\n    print(\"Hello\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Get the website HTML\nurl = 'https://www.example.com/news'\nresp = requests.get(url)\n\n# Parse the website HTML\nsoup = BeautifulSoup(resp.text, \"lxml\")\n\n# Find all headlines\nheadlines = soup.findAll(\"div\", {\"class\": \"news-item__headline\"})\n\n# Print the headlines\nfor headline in headlines:\n    print(headline.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter \n\n# create the UI\nroot = tkinter.Tk() \nroot.title(\"Matrix Multiplication\") \n\n# define the input fields\nmatrix_1_entry = tkinter.Label(root, text=\"Matrix 1\")\nmatrix_1_entry.grid(row=0, column=0)\nmatrix_1_input = tkinter.Entry(root)\nmatrix_1_input.grid(row=0, column=1)\n\nmatrix_2_entry = tkinter.Label(root, text=\"Matrix 2\")\nmatrix_2_entry.grid(row=1, column=0)\nmatrix_2_input = tkinter.Entry(root)\nmatrix_2_input.grid(row=1, column=1)\n\n# set up the button for multiplication\nmultiply_button = tkinter.Button(root, text=\"Multiply\") \nmultiply_button.grid(row=2, column=0)\n\n# display the output\nresult_label = tkinter.Label(root, text=\"Result:\")\nresult_label.grid(row=3, column=0)\nresult_display = tkinter.Entry(root)\nresult_display.grid(row=3, column=1)\n\n# define the function for matrix multiplication\ndef multiply_matrices():\n    matrix_1 = eval(matrix_1_input.get())\n    matrix_2 = eval(matrix_2_input.get())\n    result = [[sum(a*b for a,b in zip(x_row,y_column)) for y_column in zip(*matrix_2)] for x_row in matrix_1] \n    result_display.delete(0, tkinter.END)\n    result_display.insert(0, str(result))\n\nmultiply_button.configure(command=multiply_matrices) \n\nroot.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def nth_prime_number(n):\n    prime_numbers = [2]\n    i = 3\n    while len(prime_numbers) < n:\n        for number in prime_numbers:\n            if i % number == 0:\n                break\n        else:\n            prime_numbers.append(i)\n        i+= 2\n    return prime_numbers[-1]\n\n\n# test \nprime_number = nth_prime_number(5)\nprint(prime_number) # Output: 11 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.naive_bayes import MultinomialNB \n\nclf = MultinomialNB(alpha=1.0)\nclf.fit(X_train, y_train) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: try:\n    c = a / b\nexcept ZeroDivisionError:\n   print(\"Division by zero error!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_array(arr):\n# Bubble sort algorithm \n n = len(arr) \n  \n# Traverse through all array elements \nfor i in range(n): \n    # Last i elements are already in place \n    for j in range(0, n-i-1): \n  \n        # traverse the array from 0 to n-i-1 \n        # Swap if the element found is greater \n        # than the next element \n        if arr[j] > arr[j+1] : \n            arr[j], arr[j+1] = arr[j+1], arr[j] \n  \narr = [64, 34, 25, 12, 22, 11, 90] \n  \nsort_array(arr) \n  \nprint (\"Sorted array:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]), but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.neighbors import NearestNeighbors\n\n#load the prepared dataset\ndata = pd.read_csv('book_data.csv')\n\n#prepare the feature and target variables\nX = data.drop('Book Title', axis=1)\ny = data['Book Title']\n\n#fit the KNN model\nmodel = NearestNeighbors(metric='cosine', algorithm='brute')\nmodel.fit(X)\n\n#make recommendations\ninput_books = 'Input a list of previously read book titles here'\ndistances, indices = model.kneighbors(input_books, n_neighbors=3)\n\n#display the recommended book titles\nfor i in indices:\n    print(y[i]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: new_list = []\nfor i, v in enumerate(list):\n    if (i+1) % 2 == 0: # +1 since your list is 0 indexed\n        new_list.append(v)\nprint(new_list) # prints [2,4] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def search(head, key): \n    current = head \n    while current is not None: \n        if current.data == key: \n            return current \n        current = current.next\n    return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport json\n\n# define the result structure\nclass SearchResult:\n  def __init__(self, title, author, year):\n    self.title = title\n    self.author = author\n    self.year = year\n\n# define the search function\ndef search_book(title):\n  # read the dataset\n  books = pd.read_csv('books.csv')\n\n  # search for the book\n  result_df = books[books['title'].str.startswith(title)]\n\n  # create a list of results\n  results = []\n  for _, row in result_df.iterrows():\n    results.append(SearchResult(row['title'], row['author'], row['year']))\n\n  # return results as JSON\n  return json.dumps([res.__dict__ for res in results]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import http.server\nimport socketserver\n\nPORT = 8080\n\nHandler = http.server.SimpleHTTPRequestHandler\n\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n    print(\"Server running at http://localhost:{}/\".format(PORT))\n    httpd.serve_forever() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nSuggest a code snippet to generate a histogram in Python\n\"\"\"\n\n# import the required libraries\nimport matplotlib.pyplot as plt\n\n# set the data to plot\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# generate the histogram\nplt.hist(data, bins=7, color='blue', edgecolor='black')\nplt.title('A Histogram')\nplt.xlabel('Values')\nplt.ylabel('Frequency')\n\n# show the plot\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def decrypt(message, key):\n    # Convert message characters to numbers\n    message_nums = [ord(c) - 65 for c in message]\n    # Convert key characters to numbers\n    key_nums = [ord(c) - 65 for c in key]\n    # Repeat the key until it is the same length as the message\n    key_nums *= len(message_nums) // len(key_nums) + 1\n    # Perform the decryption\n    decrypted_nums = [(message_nums[i] - key_nums[i]) % 26 for i in range(len(message_nums))]\n    # Convert numbers to characters\n    decrypted = ''.join([chr(num + 65) for num in decrypted_nums])\n\n    return decrypted\n\n# Decrypt given message\nkey = 'SECRET'\nmessage = 'XJN\u0419\u03a4\u0418\u042eTS\u0398,DIZVHT\u03a9.'\ndecrypted_message = decrypt(message, key)\nprint(f'Decrypted message: {decrypted_message}') but is not the same. just give one example and only return the code."}
