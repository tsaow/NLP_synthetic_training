{"prompt": "make some code that functions the same as the following code: def calculate_costs(prices, quantities): \n    total = 0\n    \n    for price, quantity in zip(prices, quantities): \n        total += price * quantity \n        \n    return total\n\nprices = [3, 5, 2, 1]\nquantities = [2, 4, 3, 5]\n\nprint(calculate_costs(prices, quantities)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: myString = \"Hello World!\"\nfor x in myString:\n  print(x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com/products/big-green-hat'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\nproduct_title = soup.find('div', class_='product-title').text.strip()\nproduct_price = soup.find('span', class_='price').text.strip()\nproduct_description = soup.find('div', class_='product-description').text.strip()\n\nprint('Product Title: ' + product_title)\nprint('Product Price: ' + product_price)\nprint('Product Description: ' + product_description) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: list_odd = [] \nfor num in [3, 5, 7, 4, 8, 10]:\n    if num %2 != 0:\n        list_odd.append(num)\n        \nprint(list_odd) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from selenium import webdriver\nimport time\n\ndriver = webdriver.Chrome()\n\n# Navigate to website\ndriver.get('http://example.com/')\n\n# Log in with existing username and password\nlogin_username = driver.find_element_by_name('username')\nlogin_username.send_keys('user@example.com')\n\nlogin_password = driver.find_element_by_name('password')\nlogin_password.send_keys('1234')\n\nlogin_btn = driver.find_element_by_class_name('login-btn')\nlogin_btn.click()\n\n# Navigate to settings page\nsettings_btn = driver.find_element_by_id('settings-btn')\nsettings_btn.click()\n\n# Update existing user profile photo\nphoto_upload_btn = driver.find_element_by_class_name('upload-btn')\nphoto_upload_btn.send_keys('/path/to/photo.jpg')\n\nsave_btn = driver.find_element_by_class_name('save-btn')\nsave_btn.click()\n\ntime.sleep(2)\n\ndriver.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport numpy as np\n\nclass GeneticAlgorithm:\n    def __init__(self, desired_param1, desired_param2, desired_param3, desired_param4):\n        self.desired_param1 = float(desired_param1)\n        self.desired_param2 = float(desired_param2)\n        self.desired_param3 = float(desired_param3)\n        self.desired_param4 = float(desired_param4)\n\n    def create_population(self, n, min_val, max_val):\n        population = []\n        for _ in range(n):\n            individuum = []\n            for _ in range(4):\n                individuum.append(random.uniform(min_val, max_val))\n            individuum.append(self.calculate_fitness(individuum))\n            population.append(individuum)\n        return np.array(population)\n\n    def calculate_fitness(self, individual):\n        return sum([abs(individual[i] - self.desired_param[i]) for i in range(4)])\n\nga = GeneticAlgorithm(1, 2, 3, 4)\npopulation = ga.create_population(n=20, min_val=-10, max_val=10)\n\n# Add a new parameter\ndef new_calculate_fitness(self, individual):\n        return sum([abs(individual[i] - self.desired_param[i]) + abs(individual[4] - self.desired_param[4]) for i in range(5)])\n\nga.calculate_fitness = new_calculate_fitness\nnew_population = ga.create_population(n=20, min_val=-10, max_val=10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def solve_equation(x):\n    return x**2 - x + 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_sorted(array):\n    return all(array[i] <= array[i+1] for i in range(len(array)-1)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insertion_sort(arr):\n    for i in range(len(arr)):\n        cursor = arr[i]\n        pos = i\n\n        while pos > 0 and arr[pos - 1] > cursor:\n            # Swap the number down the list\n            arr[pos] = arr[pos - 1]\n            pos = pos - 1\n        # Break and do the final swap\n        arr[pos] = cursor\n\n    return arr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import gym\nimport numpy as np\n \n# Initialize the environment\nenv = gym.make('CartPole-v0')\n\n# Initialize the Q-Learning neural network\nnum_states = env.observation_space.shape[0]\nnum_actions = env.action_space.n\nQ = np.zeros([num_states, num_actions])\n \n# Set training hyperparameters\nnum_episodes = 500\ndiscount_rate = 0.95\nalpha = 0.1\n \n# Train the neural network\nfor i in range(num_episodes):\n    # Reset the environment\n    s = env.reset()\n    total_reward = 0\n \n    # Iterate until episode is over\n    done = False\n    while not done:\n \n        # Choose an action\n        a = np.argmax(Q[s, :] + np.random.randn(1, env.action_space.n) * (1./(i+1)))\n \n        # Get the reward and new state\n        s1, reward, done, _ = env.step(a)\n \n        # Update the Q-table\n        Q[s, a] = Q[s, a] + alpha * (reward + discount_rate * np.max(Q[s1, :]) - Q[s, a])\n \n        total_reward += reward\n        s = s1\n \n    # Print training progress\n    print(\"Episodes: {}/{}. Score: {}\".format(i+1, num_episodes, total_reward)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n\n# Read dataset\nhousing = pd.read_csv('housing.csv')\n\n# Define X and y\nX = housing.drop('SalePrice', axis=1)\ny = housing.SalePrice\n\n# Split into training and test sets \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Fit regression model \nreg = sklearn.linear_model.LinearRegression().fit(X_train, y_train)\n\n# Make predictions\ny_pred = reg.predict(X_test)\n\n# Calculate and print RMSE\nrmse = np.sqrt(mean_squared_error(y_test, y_pred))\nprint(rmse) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport json\n \n# API key\nAPI_KEY = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n \n# API URL\nurl = 'https://translation.googleapis.com/language/translate/v2?key=' + API_KEY\n \n# Text\ntext = \"Good morning!\"\n \n# Language pair (English to Spanish)\nlangpair = 'en|es'\n \n# Form data\ndata = {'q': text, 'target': langpair}\n \n# Make HTTP request\nresponse = requests.post(url, data)\n \n# Parse JSON and get the translated text\nresponse_json = response.json()\ntranslation = response_json['data']['translations'][0]['translatedText']\n \n# Print translation\nprint(translation)\n# Morning! but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_pattern(text, pattern, replacement):\n    words = text.split()\n    new_words = []\n    for word in words:\n        if word == pattern:\n            new_words.append(replacement)\n        else:\n            new_words.append(word)\n\n    return \" \".join(new_words)\n\n# Call the function \nreplace_pattern(text, pattern, replacement) # \"It was the best of days, it was the worst of days.\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countVowels(string):\n    string = string.lower()\n    count = 0\n    vowels = 'aeiou'\n\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count\n\nstring = 'Hello, World!'\nvowelCount = countVowels(string)\nprint(\"Number of vowels is:\", vowelCount) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def my_function():\n    print(\"Hello, World!\")\n\nif __name__ == '__main__':\n    my_function()\n\nif __name__ == '__main__':\n    my_function() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def grade_essay(essay):\n score = 0\n # Score based on content\n # Score based on grammar\n # Score based on spelling\n # Score based on punctuation\n # Score based on style\n \n # Final score should be in range of 0-10\n if score < 0:\n    score = 0\n elif score > 10:\n    score = 10\n \n return score but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\n\ninput_string = sys.argv[1]\nprint(input_string[::-1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef shuffleArray(arr):\n    n = len(arr)\n\n    for i in range(n-1, 0, -1):\n        j = random.randint(0, i)\n        arr[i], arr[j] = arr[j], arr[i] \n    \n    return arr\n\narr = [\"A\", \"B\", \"C\", \"D\"]\nshuffleArray(arr)\nprint(arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n    \n    def get_details(self):\n        print('Name:', self.name)\n        print('Age:', self.age)\n        print('Gender:', self.gender)\n\n    @staticmethod\n    def get_avg_age(students):\n        total_age = 0\n        for student in students:\n            total_age += student.age\n        return total_age / len(students) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import subprocess\nimport threading \nimport sqlite3\n\n# Function responsible for executing commands\ndef run_command(command_string):\n  process = subprocess.Popen(command_string, shell=True, \n  stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n  stdout, stderr = process.communicate()\n  return stdout,stderr\n\n# Function to store output of a command in a database\ndef store_output(command_string,stdout, stderr):\n  conn = sqlite3.connect('command.db')\n  cursor = conn.cursor()\n  try:\n    cursor.execute(\"INSERT INTO commands_output VALUES (?,?,?)\"\n    (command_string, stdout, stderr))\n    conn.commit()\n  except:\n    conn.rollback()\n  conn.close()\n\n# Threading function for executing commands\ndef thread_function(command):\n  stdout, stderr = run_command(command)\n  store_output(command,stdout, stderr)\n\n# Main function\ndef main():\n  command_list = ['date','ls','find']\n  threads =[]\n  for command in command_list:\n    thread = threading.Thread(target= thread_function, args = (command,))\n    threads.append(thread)\n\n  for x in threads:\n    x.start()\n\n  for x in threads:\n    x.join()\n\nif __name__ == \"__main__\":\n  main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def million_seconds_to_days(seconds):\n    return seconds/(60*60*24) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n\n# initialise the scores\nAlice_score = 0\nBob_score = 0\n\nwhile (Alice_score < 10 and Bob_score < 10): \n    \n# generate dice numbers for both players\nAlice_val = random.randint(1,6)\nBob_val = random.randint(1,6)\n\n# check if Alice wins\nif Alice_val > Bob_val:\n Alice_score += 1\n\n# check if Bob wins\nif Bob_val > Alice_val:\n Bob_score += 1\n\n# print scores after the round\nprint(\"Alice: {0}, Bob: {1}\".format(Alice_score, Bob_score))\n\nif Alice_score == 10:\n print(\"Alice wins!\")\nelif Bob_score == 10:\n print(\"Bob wins!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\ndef fillWithMedian(data):\n    data = np.array(data)\n    median_val = np.nanmedian(data)\n    data[np.isnan(data)] = median_val \n    return data\n\ndata = [1, None, 4, 5, None, 10]\nprint(fillWithMedian(data)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculator(num1, num2, op):\n if op == '+':\n return num1 + num2\n elif op == '-':\n return num1 - num2\n elif op == '*':\n return num1 * num2\n elif op == '/':\n return num1 / num2\n else:\n return None but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np \nimport pandas as pd \n\n# Read the data \ndata = pd.read_csv('data.csv')\n\n# Create the feature matrix \nX = data[['num_rooms', 'bathrooms', 'square_footage', 'area']]\n\n# Create the outcomes vector \ny = data['price']\n\n# Fit the model \nfrom sklearn.linear_model import LinearRegression \n\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Make predictions \npredicted_price = model.predict([[5, 1, 1500, 'rural']]) \nprint(\"Predicted price: ${:,.2f}\".format(predicted_price[0])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_median(list_numbers): \n    # sort the list \n    list_numbers.sort() \n    \n    # get the length of list \n    length = len(list_numbers) \n    \n    # check for even or odd \n    if length % 2 == 0: \n        # get average of middle two number \n        # when list is even \n        median = (list_numbers[int(length / 2) - 1] + list_numbers[int(length / 2)]) / 2\n    else: \n        # get the middle number \n        # when list is odd \n        median = list_numbers[int(length / 2)] \n    \n    return median\n\nlist_numbers = [3, 9, 11]\nmedian = get_median(list_numbers)\nprint(\"The median of the given numbers is :\", median) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def evaluate(expression): \n    expression = expression.replace(\" \", \"\")\n    tokens = list(expression)\n    \n    a = tokens.pop(0)\n    while len(tokens) > 0: \n        op = tokens.pop(0)\n        b = tokens.pop(0)\n        if op == '+':\n            a = int(a) + int(b)\n        elif op == '-':\n            a = int(a) - int(b)\n        elif op == '*':\n            a = int(a) * int(b)\n        elif op == '/':\n            a = int(a) / int(b)\n        else: \n            return False\n    \n    return a\n\nresult = evaluate(expression)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculate_total_tax(cost, rate):\n \"\"\"Calculate the total amount of taxes to be paid\"\"\"\n tax = cost * rate/100\n total = cost + tax\n\n return total\n\ntotal_amount = calculate_total_tax(700, 10)\nprint(f\"The total amount, including taxes, is {total_amount}\") # 770 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def minEditDistance(list_of_words, target_word):\n  minDistance = float(\"inf\")\n  \n  for word in list_of_words:\n    editDistance = 0\n    for i in range(min(len(word), len(target_word))):\n      if word[i] != target_word[i]:\n        editDistance += 1\n    editDistance += abs(len(word) - len(target_word))\n    if editDistance < minDistance:\n      minDistance = editDistance\n      \n  return minDistance\n    \nlist_of_words = [\"cat\", \"hat\", \"bed\", \"kyoto\", \"criminal\", \"locket\", \"lowest\"]\ntarget_word = \"copper\"\n\nminDistance = minEditDistance(list_of_words, target_word)\nprint(\"Minimum Edit Distance: \", minDistance) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longestCommonPrefix(strs): \n    if len(strs) == 0: \n        return \"\" \n  \n    common_prefix = strs[0] \n  \n    for i in range(1, len(strs)): \n        j = 0\n        match = False\n  \n        # compare the current string \n        # with the previous string \n        while j < len(common_prefix) and j < len(strs[i]): \n            if common_prefix[j] != strs[i][j]: \n                break\n            j += 1\n            match = True\n          \n        # terminate if no match found \n        if match:  \n            common_prefix = common_prefix[:j] \n        else: \n            return \"\" \n    return common_prefix \n\n# Driver Code \nif __name__ == '__main__': \n    arr = [\"coder\", \"codger\", \"coding\", \"coffee\"]\n    print(longestCommonPrefix(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def encodeString (text):\n    encoded_string = ''\n    for char in text:\n        encoded_char = ord(char) + 3\n        encoded_string += chr(encoded_char)\n\n    return encoded_string\n\nencodeString(\"Hello\")  # khoor but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: new_string = []\nprev_word = ''\nfor word in \"This is a sample string\".split():\n    if word != prev_word:\n        new_string.append(word)\n    prev_word = word\nprint(' '.join(new_string)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def get_area(self):\n        return self.width * self.height\n\n\nclass Square(Rectangle):\n    def __init__(self, side_length):\n        self.width = side_length\n        self.height = side_length but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def cartesian_product(lst):\n    \"\"\"Generate the Cartesian product of a given list\n\n    Args:\n        lst (list): list of elements\n\n    Returns:\n        list: the Cartesian product of the input list\n    \"\"\"\n    res = [[i] for i in lst]\n    for j in range(len(lst)):\n        temp = []\n        for k in lst:\n            for element in res[j]:\n                temp.append(element + [k])\n        res.append(temp)\n    return res[len(lst)] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binaryToDecimal(binary):\n    binary = str(binary)\n    length = len(binary)\n    decimal = 0\n    j = 0\n    for i in range(length-1, -1, -1):\n        decimal += (2**j)*int(binary[i])\n        j += 1\n    return decimal\n\nbinary_number = 1010101\ndecimal_number = binaryToDecimal(binary_number)\nprint(decimal_number) # Output: 85 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import csv\n\n#open csv\nwith open('file.csv', 'r') as csv_file:\n csv_reader = csv.reader(csv_file)\n\n#write html\nwith open('report.html', 'w') as html_file:\nhtml_file.write('<html><body><h1>People Report</h1>')\nhtml_file.write('<table>')\n\n#write table\nfor person in csv_reader:\n html_file.write('<tr><td>' + person[0] + '</td><td>' + person[1] + '</td></tr>')\n\nhtml_file.write('</table></body></html>') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python Function to calculate mean \ndef calculateMean(data): \n    sum = 0\n    # calculating sum \n    for e in data: \n        sum += e\n  \n    # calculating mean \n    mean = sum / len(data) \n    return mean\n  \n# Driver code \ndata = [1, 4, 6]\nmean = calculateMean(data)\nprint(\"Mean of given data is:\", mean) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import urllib.request\nimport json\n\ntry:\n response = urllib.request.urlopen('http://example.com/api')\n data = json.loads(response.read().decode('utf-8'))\n \nexcept urllib.request.HTTPError as e:\n print(\"Error: \", e.code)\n\nexcept urllib.request.URLError as e:\n print(\"Error: \", e.reason)\n\nexcept:\n print(\"An unknown error occurred\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generateFibonacciSequence(length):\n    sequence = [1, 1]\n    for i in range(2, length):\n        sequence.append( sequence[i-1] + sequence[i-2] )\n    return sequence\n\nprint(generateFibonacciSequence(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\nimport string\n\ndef generate_password():\n  characters = string.ascii_letters + string.digits + string.punctuation\n  password = ''.join(random.choice(characters) for _ in range(15))\n  return password\n\nprint(generate_password()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ntxt =\"John Smith-555-1234, john.s@example.com\"\n\n# Phone Number\nphone = re.findall(r'\\d{3}-\\d{4}', txt)[0]\nprint(\"Phone Number =\", phone) \n\n# Email Address\nemail = re.findall(r'\\S+@\\S+', txt)[0]\nprint(\"Email Address =\", email) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_up(n):\n    sum = 0\n    for i in range(n + 1):\n        sum += i\n    return sum\n\nnum = int(input(\"Enter a number: \"))\nprint(\"Sum of numbers up to\", num, \"is\", sum_up(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_strings(str1, str2): \n    str1 = sorted(str1)\n    str2 = sorted(str2)\n    return str1, str2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def prime_factor(n):\n i = 2\n while i * i <= n:\n if n % i:\n i += 1\n else:\n n //= i\n return n\n\nfor num in range(1, 11):\n factor = prime_factor(num)\n print(f\"The highest prime factor of {num} is {factor}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(my_list):\n    unique_list = []\n    for i in my_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n# define the possible inputs\npossible_inputs = ['rock', 'paper', 'scissors']\n\n# print intro message\nprint('Welcome to Rock, Paper, Scissors!')\n\n# get input from user\nuser_input = input('Choose Rock, Paper, or Scissors: ').lower()\n\n# check the input\nif user_input not in possible_inputs:\n    print('Error: Invalid input. Please choose either Rock, Paper, or Scissors.')\n    exit()\n\n# generate computer's input\ncomputer_input = random.choice(possible_inputs)\n\n# print results\nprint('You chose {} and the computer chose {}.'.format(user_input, computer_input))\n\n# determine winner\nif user_input == computer_input:\n    print('It\\'s a tie!')\nelif (user_input == 'rock' and computer_input == 'scissors') or \\\n     (user_input == 'paper' and computer_input == 'rock') or \\\n     (user_input == 'scissors' and computer_input == 'paper'):\n    print('You win!')\nelse:\n    print('You lose!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def editDistance(str1, str2): \n    m = len(str1)\n    n = len(str2)\n  \n    dp = [[0 for x in range(n+1)] for x in range(m+1)] \n  \n    for i in range(m+1): \n        for j in range(n+1): \n            \n            if i == 0: \n                dp[i][j] = j \n            elif j == 0: \n                dp[i][j] = i \n            elif str1[i-1] == str2[j-1]: \n                dp[i][j] = dp[i-1][j-1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j-1],    # Insert \n                                   dp[i-1][j],    # Remove \n                                   dp[i-1][j-1])  # Replace\n  \n    return dp[m][n] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def replace_vowels(input_string):\n    output_string = \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n\n    for char in input_string:\n        if char in vowels:\n            output_string += '#'\n        else:\n            output_string += char\n    return output_string\n\ninput_string = \"Hello, I am a string.\"\noutput_string = replace_vowels(input_string)\n\nprint(output_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_array(arr):\n    result = 0\n    for x in arr:\n        result += x\n    return result\n\nsum = sum_of_array([3, 5, 6])\nprint(sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_results(functions, list): \n  for func in functions: \n    print(func.__name__ + \": \" + str(func(list)))\n    \nprint_results(functions, list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import flask\nfrom flask import request, jsonify\nfrom textblob import TextBlob\n\n#Initialize the Flask App\napp = flask.Flask(__name__)\napp.config[\"DEBUG\"] = True\n\n#Create a route for the web application\n@app.route('/', methods=['GET'])\ndef home():\n return '<h1> Sentiment Analysis Web Application </h1>'\n\n#Create a route for the API\n@app.route('/api/v1/sentiment', methods=['GET'])\ndef sentiment():\n #Get the text\n text = request.args.get('text')\n if text is None:\n  return jsonify({'error': 'no text received'})\n\n #Create a TextBlob from the text\n sentiment = TextBlob(text).sentiment\n\n #Return the sentiment as JSON\n return jsonify({'polarity': sentiment.polarity, 'subjectivity': sentiment.subjectivity})\n\napp.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\npassword_characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*().,?0123456789'\n\ndef generate_password(length):\n    return ''.join(random.choices(password_characters, k=length))\n  \nprint(generate_password(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nImperial to Metric conversion program.\n\"\"\"\n\ndef inches_to_cm(inches):\n    return inches * 2.54\n\nif __name__ == '__main__':\n    print(inches_to_cm(5)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_to_number(list1):\n    result = list1[0]\n    for i in range(1, len(list1)):\n        result -= list1[i]\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n    def __init__(self, name, address):\n        self.name = name\n        self.address = address\n\n    def get_name(self):\n        return self.name\n    \n    def get_address(self):\n        return self.address\n    \n    def set_name(self, name):\n        self.name = name\n    \n    def set_address(self, address):\n        self.address = address but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\ndef area_circumference(radius):\n    area = math.pi * radius ** 2\n    return area but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def predict_price(company):\n    # Call an appropriate API\n    company_data = request_api(company)\n    # Use an appropriate ML algorithm\n    model = build_model(company_data)\n    # Get the prediction\n    prediction = model.predict()\n    return prediction but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_palindrome(string):\n    longest_palindrome = \"\"\n    for i in range(len(string) - 1):\n        for j in range(i+1, len(string)):\n            substring = string[i:j+1]\n            if substring == substring[::-1] and len(substring) > len(longest_palindrome):\n                longest_palindrome = substring\n    return longest_palindrome\n\nprint(longest_palindrome(\"This is an example\")) # prints \"a racecar a\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # A Dynamic Programming based Python Program for 0-1 Knapsack problem \n# Returns the maximum value that can be put in a knapsack of capacity W\ndef knapsack(W, wt, val, n): \n  \n    # Base Case \n    if n == 0 or W == 0 : \n        return 0\n  \n    # If weight of the nth item is more than Knapsack of capacity W, then \n    # this item cannot be included in the optimal solution \n    if (wt[n-1] > W): \n        return knapsack(W, wt, val, n-1) \n  \n    # Return the maximum of two cases: \n    # (1) nth item included \n    # (2) not included \n    else: \n        return max(val[n-1] + knapsack(W-wt[n-1], wt, val, n-1), \n                   knapsack(W, wt, val, n-1)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def groupByLength(arr):\n    result = {}\n    for word in arr:\n        if len(word) in result:\n            result[len(word)].append(word)\n        else:\n            result[len(word)] = [word]\n    return result\n\ngroupedByLength = groupByLength(['cat', 'dog', 'apple'])\nprint(groupedByLength) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef get_password(length):\n    alphabet = string.ascii_letters + string.digits\n    password = ''.join(random.choice(alphabet) for i in range(length))\n    print (password)\n\nget_password(7) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to print \n# all combinations of \n# given length \n\ndef combinations(text, length): \n\t# Get all possible characters \n\tAlphabet = list(text) \n  \n\t# Create a temp array \n\ttemp = [0] * length \n  \n\t# Print all combinations \n\tfor i in range(length): \n\t\tfor j in range(len(Alphabet)): \n\t\t\ttemp[i] = Alphabet[j] \n\t\t\tprint(temp) \n  \n# Driver Code \nif __name__ == \"__main__\": \n\tcombinations(\"Hello\", 3) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def countSubstrings(str, subStr):\n    lengthSubStr = len(subStr)\n    count = 0\n   \n    for i in range(len(str)):\n        if str[i:i+lengthSubStr] == subStr:\n            count += 1\n         \n    return count\n\nstr = \"The quick brown fox jumps over the lazy dog.\"\nsubstr = \"the\"\nprint(countSubstrings(str, substr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def primeNumberGenerator(n):\n    prime = [True for _ in range(n+1)]\n    prime[0] = False\n    prime[1] = False\n    for p in range(2, n+1):\n        if prime[p] == True:\n            for i in range(2*p, n+1, p):\n                prime[i] = False\n\n    prime_nums = []\n    for i in range(n+1):\n        if prime[i] == True:\n            prime_nums.append(i)\n\n    return prime_nums\n\nprime_nums = primeNumberGenerator(100);\nconsole.log(prime_nums); but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Point:\n def __init__(self, x, y):\n self.x = x\n self.y = y\n\n def get_x(self):\n return self.x\n\n def get_y(self):\n return self.y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python code to implement \n# the Gradient Descent algorithm\n\ndef gradientDescent(x, y, learning_rate, max_iterations): \n  \n    m_curr = b_curr = 0\n    n = len(x)\n    cost_previous = 0\n    cost_present = 0\n    iteration = 0 \n  \n    while iteration < max_iterations: \n        y_predicted = m_curr * x + b_curr \n        cost_present = (1/n) * sum([val**2 for val in (y-y_predicted)]) \n        md = -(2/n)*sum(x*(y-y_predicted)) \n        bd = -(2/n)*sum(y-y_predicted) \n        m_curr = m_curr - learning_rate * md \n        b_curr = b_curr - learning_rate * bd \n        iteration = iteration + 1\n        cost_previous = cost_present\n  \n    return m_curr, b_curr, cost_previous but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Student:\n    def __init__(self, name, age, gender, course, contact_details):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.course = course\n        self.contact_details = contact_details\n        self.email, self.phone = self.contact_details.split(\"-\")\n\n    def add_student(self):\n        # add the student details to database\n        pass\n    \n    def update_student(self):\n        # update the student details in database\n        pass\n    \n    def delete_student(self):\n        # delete the student entry from database\n        pass but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from itertools import permutations\n\ndef generate_permutations(string):\n    return list(permutations(string))\n\nstring = 'ABC'\nprint(generate_permutations(string))\n# Output: [('A', 'B', 'C'), ('A', 'C', 'B'), ('B', 'A', 'C'), ('B', 'C', 'A'), ('C', 'A', 'B'), ('C', 'B', 'A')] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n\ta = 0\n\tb = 1\n\tif n < 0: \n\t\tprint(\"Incorrect input\") \n\telif n == 0: \n\t\treturn a \n\telif n == 1: \n\t\treturn b \n\telse: \n\t\tfor i in range(2,n): \n\t\t\tc = a + b \n\t\t\ta = b \n\t\t\tb = c \n\t\treturn b \n\nresult = Fibonacci(7) \nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def binary_search(lst, num): \n    start = 0\n    end = len(lst) - 1\n    while start <= end: \n        mid = (start + end)//2\n        if lst[mid] == num: \n            return mid \n        elif lst[mid] > num: \n            end = mid - 1\n        else: \n            start = mid + 1\n    return -1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverseWords(sentence): \n    words = sentence.split(' ') \n    words = words[::-1] \n    return ' '.join(words) \n      \nprint(reverseWords(sentence)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: str_dict = {i:list(str).count(i) for i in set(str)} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\n\nurl = 'https://example.com/api/submit'\ndata = {'message': 'Hello!', 'name': 'John' }\n\nr = requests.post(url, json=data)\nprint(r.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import smtplib\n\n# Functions for getting the server load\ndef get_load_average():\n    with open('/proc/loadavg', 'r') as f:\n        return float(f.readline().split()[0])\n\n# Variable to store the upper threshold for server loading\nMAX_LOAD = 0.8\n\n# Get the current load\ncurrent_load = get_load_average()\nif current_load > MAX_LOAD:\n    # Create SMTP object\n    server = smtplib.SMTP('smtp.example.com', 587)\n    server.starttls()\n    receiver = 'admin@example.com'\n    message = 'Server is under heavy load: ' + str(current_load)\n    server.sendmail('monitor@example.com', receiver, message)\n    server.quit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def decrypt(code):\n    # create a shift list \n    shift_list = [1, 3, 5, 7, 9, 11] \n  \n    # empty list to store decoded message \n    decoded_message = ''\n  \n    # iterate over characters in the secret code\n    for char in code: \n        # store character's ASCII value in a variable \n        char_ascii_value = ord(char) \n        # shift list index for correct decryption\n        shift_index = 0\n        # loop until incorrect shift index\n        while char_ascii_value // len(shift_list) > 0: \n            char_ascii_value -= len(shift_list)\n            shift_index += 1\n        # decryption\n        decrypted_char_ascii_value = char_ascii_value - shift_list[shift_index] \n        # add decrypted character to the decoded message\n        decoded_message += chr(decrypted_char_ascii_value) \n  \n    # return decoded message \n    return decoded_message \n    \n    \nsecret_code = '\u0090\u0092\u0090\u008a\u0090\u00a7\u0090\u00a0\u0090\u00a2\u00a0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0'\nprint(decrypt(secret_code)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_primes(n):\n    if n < 2: \n        return 0\n    primes = [2]\n    num = 3\n    while len(primes) < n:\n        is_prime = True\n        for p in primes:\n            if num % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 2\n    return sum(primes)\n\nprint(sum_of_primes(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.ensemble import RandomForestClassifier\n\nX = [[Weight, Size]]\ny = [Type]\n\nmodel = RandomForestClassifier(random_state=0)\nmodel.fit(X, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def common_elements(list1, list2):\n return [element for element in list1 if element in list2]\n\ncommon_elements(list1, list2) # Output: [2, 6] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: SELECT * FROM table_name WHERE age=25; but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def triangle_area(base, height):\n  return (base * height) / 2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_primes():\n    for num in range(1, 101):\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            print(num) \n\nprint_primes() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def top_three(lst): \n  sorted_lst = sorted(lst, reverse=True) \n  return sorted_lst[:3]\n\nprint(top_three([10, 8, 3, 11, 7, 14, 13])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: names = []\n\nsentence = \"Joe, Mary, and Jake\"\n\nwords = sentence.split()\n\nfor word in words:\n if word.endswith(','):\n  names.append(word[:-1])\n elif word.startswith('and'):\n  names.append(word[4:])\n else:\n  names.append(word)\n  \nprint(names) # Output: ['Joe', 'Mary', 'Jake'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class FlowerClassifier:\n    def __init__(self):\n        self.features = [\"color\",\"petal length\", \"petal width\", \"sepal length\", \"sepal width\"]\n        self.labels = [\"lily\", \"rose\"]\n\n    def fit(self, X, y):\n        self.model = SVC( gamma='auto')\n        X_train = X[self.features]\n        y_train = y\n        self.model.fit(X_train, y_train)\n        \n    def predict(self, X):\n        X_test = X[self.features]\n        prediction = self.model.predict(X_test)\n        return prediction but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printAllCombinations(str): \n    l = list(str) \n    n = len(l) \n    i = 0\n      \n    while (i < n): \n        for j in range(i,n): \n            t = l[i]\n            l[i] = l[j]\n            l[j] = t \n      \n            for x in l: \n                print (x, end = \"\")\n            print(\"\")\n        i += 1\n      \n# Driver Code \nif __name__ == \"__main__\": \n    str = \"abc\"\n    printAllCombinations(str) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def circle_area(radius):\n    \"\"\" \n    This function will calculate the area of a circle using the radius provided.\n    \"\"\"\n    return math.pi * radius**2 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport scipy.special\nfrom scipy.integrate import ode\n\ndef pde_solve(u0, t0, t1, dt):\n    # Define the right-hand side\n    def f(t, u, args):\n        dudt = args*u\n        return dudt\n    \n    # Create the solver\n    solver = ode(f).set_integrator('dopri5', method='adams')\n    solver.set_initial_value(u0, t0).set_f_params(args)\n    \n    # Solve the equation\n    t = t0\n    u = u0\n    while solver.successful() and solver.t < t1:\n        u = solver.integrate(solver.t + dt)\n        t = solver.t\n    \n    return u but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def round_nearest_int(num):\n    return round(num)\n\nresult = round_nearest_int(2.6)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(str1, str2):\n    str1_char_count = {} \n    str2_char_count = {}\n    for c in str1:\n        if c in str1_char_count:\n            str1_char_count[c] += 1\n        else:\n            str1_char_count[c] = 1\n    for c in str2:\n        if c in str2_char_count:\n            str2_char_count[c] += 1\n        else:\n            str2_char_count[c] = 1\n    return str1_char_count == str2_char_count\n\nstring1 = \"silent\"\nstring2 = \"listen\"\nprint(is_anagram(string1, string2)) # should log True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    fib = [0, 1]\n    for i in range(2, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib[-1]\n\nresult = fibonacci(8)\nprint(result) # 13 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from datetime import date, timedelta\n\ntask_name = \"Build a mobile application\"\nstart_date = date(2020, 1, 1)\nend_date = date(2020, 1, 31)\n\ndays_remaining = (end_date - date.today()).days\n\nprogress = (days_remaining / (end_date - start_date).days) * 100\n\nprint(f'Progress on {task_name} is {progress:.2f}%') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import cv2\n\ndef detect_face(image_path):\n\tcascPath = './haarcascade_frontalface_default.xml' \n\tfaceCascade = cv2.CascadeClassifier(cascPath)\n\n\timg = cv2.imread(image_path)\n\tgray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\tfaces = faceCascade.detectMultiScale(\n\t\tgray,\n\t\tscaleFactor=1.2,\n\t\tminNeighbors=5\n\t)\n\n\tfor (x, y, w, h) in faces:\n\t\tcv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 2)\n\n\tcv2.imshow(\"Faces found\", img)\n\tcv2.waitKey(0) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import hashlib\ndef encode_string_sha256(string):\n  return hashlib.sha256(string.encode('utf-8')).hexdigest() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\nimport json\n\nurl = 'https://example.com'\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\ndata = []\n\nfor item in soup.find_all('div', {'class': 'item'}):\n title = item.find('h3').text.strip()\n description = item.find('p').text.strip()\n url = item.find('a')['href']\n \n data.append({\n 'title': title,\n 'description': description,\n 'url': url\n })\n\nwith open('data.json','w') as f:\n json.dump(data, f, indent=4) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_sum(arr, forbidden_idx):\n    max_sum = 0\n\n    # Calculate the max sum without the forbidden index\n    for i in range(len(arr)):\n        if i == forbidden_idx:\n            continue\n        max_sum += arr[i]\n\n    # Calculate the max sum with the forbidden index\n    for i in range(len(arr)):\n        if i == forbidden_idx:\n            continue\n        new_sum = max_sum - arr[i] + arr[forbidden_idx]\n        if new_sum > max_sum:\n            max_sum = new_sum\n\n    return max_sum\n\n# Test code\nmax_sum([3,2,5,1,6], 2) # Output: 12 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n fibonacci_list = [0,1]\n for i in range(2,n): \n next = fibonacci_list[i-1] + fibonacci_list[i-2] \n fibonacci_list.append(next) \n return fibonacci_list[n-1]\n\nnum = int(input('Input a number: '))\nprint(\"The corresponding Fibonacci sequence is: \", Fibonacci(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\ndef scraper(url):\n  response = requests.get(url)\n  html = response.content\n  soup = BeautifulSoup(html, 'lxml')\n\n  job_links = soup.find_all('h2', class_='job-title')\n  \n  jobs = []\n  for job_link in job_links:\n    job_url = job_link.find('a')['href']\n    job_title = job_link.find('a').text\n    job_id = job_url[job_url.rfind('/') + 1:]\n    job = { 'title': job_title, 'url': job_url, 'id': job_id }\n    jobs.append(job)\n\n  return jobs\n\nurl = 'https://www.example.com/jobs'\njobs = scraper(url) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_kth_smallest(arr, k):\n    \"\"\"\n    This function finds the kth smallest element in an array. \n    :param arr: array of integers\n    :param k: integer\n    :return: kth smallest element\n    \"\"\"\n    sorted_arr = sorted(arr)\n    return sorted_arr[k-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_vowels(s):\n    vowels = [\"a\", \"e\", \"i\" , \"o\", \"u\"]\n    count = 0 \n    for character in s.lower():\n        if character in vowels:\n            count += 1\n    print(\"Number of vowels :\", count) but is not the same. just give one example and only return the code."}
