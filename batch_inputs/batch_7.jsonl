{"prompt": "make some code that functions the same as the following code: import os\nimport tweepy\nfrom django.shortcuts import render\n\n# Create your views here.\ndef index(request):\n    consumer_key = os.environ['TWITTER_CONSUMER_KEY']\n    consumer_secret = os.environ['TWITTER_CONSUMER_SECRET']\n    access_key = os.environ['TWITTER_ACCESS_KEY']\n    access_secret = os.environ['TWITTER_ACCESS_SECRET']\n \n    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n    auth.set_access_token(access_key, access_secret)\n    api = tweepy.API(auth)\n \n    hashtags = [\"#python\"]\n    tweets = api.search(q=hashtags, lang='en')\n \n    args = {'tweets': tweets}\n    return render(request, 'index.html', args) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Game:\n    def __init__(self):\n        self.board = [[\"-\", \"-\", \"-\"], \n                      [\"-\", \"-\", \"-\"], \n                      [\"-\", \"-\", \"-\"]]\n        self.current_player = \"X\"\n\n    def display_board(self):\n        for i in range(len(self.board)):\n            for j in range(len(self.board[i])):\n                print(self.board[i][j], end=\" \")\n            print()\n\n    def move(self, current_player, row, col):\n        if self.board[row][col] == \"-\": \n            self.board[row][col] = current_player\n        else:\n            print(\"invalid move, row and col has already been taken\")\n\n    def check_winner(self):\n        winner = None\n        for row in self.board:\n            if row[0] == row[1] == row[2]:\n                winner = row[0]\n                break\n        for col in range(len(self.board[0])):\n            if self.board[0][col] == self.board[1][col] == self.board[2][col]:\n                winner = self.board[0][col]\n                break\n        if self.board[0][0] == self.board[1][1] == self.board[2][2]:\n            winner = self.board[0][0]\n        if self.board[0][2] == self.board[1][1] == self.board[2][0]:\n            winner = self.board[0][2]\n\n        if winner == None:\n            return False\n        else:\n            return winner but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(string): \n    return string[::-1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import difflib\n\ndef compare_strings(str1, str2):\n score = difflib.SequenceMatcher(None, str1, str2).ratio() \n print(\"Similarity score is:\", score)\n\ncompare_strings(\"hello world\", \"hey world\") # Output: Similarity score is: 0.909 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def createDict(keys, values):\n  dict = {}\n  for i in range(len(keys)):\n    dict[keys[i]] = values[i]\n  return dict but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_of_digits(num):\n    total = 0\n    while num > 0:\n        total += num % 10\n        num = num // 10\n    return total\n\ntotal = sum_of_digits(345)\nprint(f'Sum of the digits of the number is {total}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def squareList(inputList): \n\t# Returns a list of the squares of all the elements in inputList\n\tsquaredList = [] \n\n\tfor num in inputList:\n\t\tsquaredList.append(num ** 2) \n\n\treturn squaredList\n\n# Example \ninputList = [1, 2, 3, 4, 5] \n\nsquaredList = squareList(inputList) \n\nprint(squaredList)\n\n# Output: [1, 4, 9, 16, 25] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\njson_str = '{\"name\": \"GPT\", \"type\": \"AI\"}'\n\ndict_x = json.loads(json_str)\nprint(dict_x) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Using the BeautifulSoup library in Python, we can parse an HTML document. First, we need to import the BeautifulSoup module:\n\nfrom bs4 import BeautifulSoup\n\nThen, we can create a BeautifulSoup object with the contents of the HTML document:\n\nsoup = BeautifulSoup(html, 'html.parser')\n\nWe can then use various methods provided by the library to parse the document, such as find(), findAll(), select() etc. For example, soup.find('div') will return the first <div> element in the document. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: @app.route('/api', methods=['POST'])\ndef api():\n data = request.get_json()\n data['age'] = data['age'] + 2\n return jsonify(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insertion_sort(input_list):\n    # creating a copy of input list so that the original list is not modified\n    sorted_list = input_list.copy()\n    # Iterating through input list and inserting elements in the right place in the sorted list\n    for i in range(1, len(sorted_list)):\n        j = i-1\n        key = sorted_list[i] \n        while sorted_list[j] > key and j >= 0:\n            sorted_list[j+1] = sorted_list[j]\n            j -= 1\n        sorted_list[j+1] = key\n\n    return sorted_list\n\nsorted_list = insertion_sort(unsorted_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: below_ten = [] # Separated numbers\nabove_five = [] # Separated numbers\n\n# Iterate over array\nfor n in array:\n    if n > 5:\n        above_five.append(n)\n    else:\n        below_ten.append(n)\n\n# Print results\nprint(\"Below 10: \", below_ten)\nprint(\"Above 5: \", above_five) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_duplicates(A):\n    seen = set()\n    for elem in A:\n        if elem in seen:\n            return True\n        seen.add(elem)\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\ntotal = 0\n\nfor i in range(len(matrix)):\n    for j in range(len(matrix[i])):\n        total += matrix[i][j]\n\nprint(total) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ntext = \"John Doe john@example.com, Jane Doe jane@example.com, Kevin Smith kevin@example.com\"\n\nemails = re.findall(r\"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+\",\n                    text)\n\nprint(emails) # ['john@example.com', 'jane@example.com', 'kevin@example.com'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class NameGame:\n    def __init__(self, name):\n        self.name = name\n\n    def play_game(self):\n        if len(self.name) == 0:\n            return \"Are you playing games with me ?\"\n        elif len(self.name) == 1:\n            return \"Is that all you are ?\"\n        elif len(self.name) == 2:\n            return \"That's quite a name !\"\n        else:\n            return \"What an interesting name !\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tweepy\n\n# authentication\nconsumer_key = 'YOUR_CONSUMER_KEY'\nconsumer_secret = 'YOUR_CONSUMER_SECRET'\naccess_token = 'YOUR_ACCESS_TOKEN'\naccess_token_secret = 'YOUR_ACCESS_TOKEN_SECRET'\n\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\napi = tweepy.API(auth)\n\n# Tweeting\ntext = 'Hello, world!'\napi.update_status(text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Queue(object):\n\n    def __init__(self):\n        self.queue = []\n \n    def enqueue(self, item):\n        self.queue.insert(0, item)\n \n    def dequeue(self):\n        if len(self.queue)>0:\n            return self.queue.pop()\n        else:\n            return None\n \n    def size(self):\n        return len(self.queue) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_permutation(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    else:\n        dict_str1 = {}\n        dict_str2 = {}\n        for i in range(len(str1)):\n            if str1[i] not in dict_str1:\n                dict_str1[str1[i]] = 1\n            else:\n                dict_str1[str1[i]] += 1\n            if str2[i] not in dict_str2:\n                dict_str2[str2[i]] = 1\n            else:\n                dict_str2[str2[i]] += 1\n        return dict_str1 == dict_str2\n\nprint(is_permutation(str1, str2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\nidentity_matrix = np.identity(3)\nprint(identity_matrix) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def Fibonacci(n): \n    a, b = 0, 1\n    while a < n: \n        print(a, end = ' ') \n        a, b = b, a + b\n    print() \n  \nn = 10\nFibonacci(n) \n\nOutput: 0 1 1 2 3 5 8 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The Mozilla Foundation has released multiple open source Python libraries over the years. Some of these libraries include mozmill, an automation tool for web application testing; Mozbase, a set of base libraries for Firefox-related testing; Mozhttpserver, a library for testing HTTP servers; and Mozilla Telemetry, a library for gathering large amounts of data from users. These libraries can be found on their GitHub page. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello World!\"\n\napp.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create the window\nwindow = tk.Tk()\n\n# Create two entry fields in the window\nentry1 = tk.Entry(window)\nentry2 = tk.Entry(window)\n\n# Create a function to get inputs from the entry fields and calculate sum\ndef get_sum():\n    num1 = entry1.get()\n    num2 = entry2.get()\n    sum = int(num1) + int(num2)\n    label.config(text=\"Sum is \" + str(sum))\n\n# Create a button to execute the function\nbutton = tk.Button(window, text=\"Calculate\", command=get_sum)\n\n# Create a label to display the result\nlabel = tk.Label(window)\n\n# Pack all widgets\nentry1.pack()\nentry2.pack()\nbutton.pack()\nlabel.pack()\n\n# Main loop\nwindow.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Matrix multiplication in Python\n\nmatrix_A = [[2, 3], [4, 7]] \nmatrix_B = [[6, 5], [1, 4]] \n  \n# result matrix\nresult = [[0, 0], [0, 0]] \n  \n# iterating by row of Matrix A \nfor i in range(len(matrix_A)): \n  \n    # iterating by coloum of Matrix B  \n    for j in range(len(matrix_B[0])): \n  \n        # iterating by rows of Matrix B \n        for k in range(len(matrix_B)): \n            result[i][j] += matrix_A[i][k] * matrix_B[k][j] \n  \nfor r in result: \n    print(r) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(string1, string2):\n    # check if strings have equal length \n    if len(string1) != len(string2): \n        return False \n    sorted1 = sorted(string1); \n    sorted2 = sorted(string2); \n    # check if sorted strings are the same \n    if sorted1 == sorted2:\n        return True \n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\nurl = \"https://www.test.com/where-is-the-key\"\nkeyword = \"key\"\n\nmatch = re.search(f'{keyword}', url)\nif match:\n    print(f'{keyword} found at starting index: {match.start()}')\nelse:\n    print(f'{keyword} not found') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import threading\nimport time\n\ndef mining(difficulty, start):\n    threads = []\n    nonce = start\n\n    # Create threads\n    for _ in range(10):\n        t = threading.Thread(target=mining_thread,\n        args=(difficulty, nonce))\n        threads.append(t)\n        nonce = nonce + 100\n\n    # Start threads\n    for thread in threads:\n        thread.start()\n  \n    # Join threads\n    for thread in threads:\n        thread.join()\n\n    # Main mining loop\ndef mining_thread(difficulty, start):\n    nonce = start\n    while True:\n        hash = generate_hash(nonce)\n  \n        # Check if the hash meets the difficulty\n        if hash[:difficulty] == '0' * difficulty:\n            print('Hash found!')\n            return nonce\n  \n        nonce = nonce + 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def merge_arrays(arr1, arr2):\n    merged_arr = []\n    # Make copies of arrays\n    arr1_copy = arr1[:]\n    arr2_copy = arr2[:]\n    \n    # add elements from both array in sorted order\n    while arr1_copy and arr2_copy:\n        if arr1_copy[0] <= arr2_copy[0]:\n            merged_arr.append(arr1_copy.pop(0))\n        else:\n            merged_arr.append(arr2_copy.pop(0))\n            \n    # add remaining elements of array\n    if arr1_copy:\n        merged_arr.extend(arr1_copy)\n    else:\n        merged_arr.extend(arr2_copy)\n    \n    # return merged array\n    return merged_arr\n\narr1 = [3, 8, 11]\narr2 = [1, 4, 9]\n\nprint(merge_arrays(arr1, arr2)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef shuffle(lst):\n    random.shuffle(lst)\n    return lst\n\narr = [i for i in range(10)]\nprint(shuffle(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class BinarySearchTree:\n\n def __init__(self):\n  self.root = None\n\n def add_node(self, value):\n  if not self.root:\n   self.root = Node(value)\n  else: \n   self._add_node(self.root, value)\n\n def _add_node(self, node, value):\n  if value <= node.value:\n   if node.left:\n    self._add_node(node.left, value)\n   else:\n    node.left = Node(value)\n  else:\n   if node.right:\n    self._add_node(node.right, value)\n   else:\n    node.right = Node(value)\n\n def search(self, value):\n  return self._search(self.root, value)\n\n def _search(self, node, value):\n  if node is None:\n   return False\n  if node.value == value:\n   return True\n  else:\n   if value <= node.value:\n    return self._search(node.left, value)\n   else: \n    return self._search(node.right, value)\n\n def get_size(self):\n  return self._get_size(self.root)\n\n def _get_size(self, node):\n  if not node:\n   return 0\n  return self._get_size(node.left) + 1 + self._get_size(node.right) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_strings_by_length(strings):\n  return sorted(strings, key=len) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from sklearn.naive_bayes import MultinomialNB\nimport pandas as pd\n\n# Read the data into a dataframe\ndf = pd.read_csv('spam.csv', header=None)\n\n#Split data into features and target\nX = df[df.columns[:-1]]\ny = df[df.columns[-1]]\n\n# Create a multinomial naive bayes classifier\nmodel = MultinomialNB()\n\n#Train the model\nmodel.fit(X,y)\n\n# Use the trained model to predict the class for the new data\npredicted_classes = model.predict(X)\n\n# Calculate the accuracy of the model\nprint(\"Accuracy:\", model.score(X,y)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_even(n):\n   if n % 2 == 0:\n    return True\n   else:\n    return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import textwrap \n\nclass TextGame(object):\n    def __init__(self):\n        self.level = 1\n        self.is_playing = True\n\n    def start_game(self):\n        self.print_intro()\n        while self.is_playing:\n            self.level_one()\n\n    def print_intro(self):\n        # Introduction text\n        intro = textwrap.dedent('''\n            You awaken in a strange place, and it seems you have no memory of how you got there.\n            You can feel cold dampness of the stone walls and ground beneath your feet.\n            It appears to be a dungeon of some sort. You can see a light ahead. You decide to move\n            towards it.\n        ''')\n        print(intro)\n\n    def level_one(self):\n        # Level one text\n        level_one = textwrap.dedent('''\n            As you make your way towards the light, you come across a fork in the path.\n            You hear a soft whisper coming from the left path.\n        ''')\n        print(level_one)\n\n        action = raw_input('''Do you choose to take the left or right path? ''')\n        if action.upper() == \"LEFT\":\n            self.level_two_left()\n        elif action.upper() == \"RIGHT\":\n            self.level_two_right()\n        else:\n            self.level_one()\n\n    def level_two_left(self):\n        # Level two left text\n        level_two_left = textwrap.dedent('''\n            The whisper gets louder as you take the left path. Eventually, you reach a small room.\n            In the center of the room is a hooded figure standing in front of a pedestal.\n            There is a strange looking artifact on the pedestal.\n        ''')\n        print(level_two_left)\n\n        action = raw_input('''Do you 'approach' the figure or 'flee'? ''')\n        if action.upper() == \"APPROACH\":\n            print(\"You approach the figure and it removes its hood to reveal a face you recognize\")\n        elif action.upper() == \"FLEE\":\n            print(\"You turn and run, taking the right path\")\n            self.level_two_right()\n        else:\n            self.level_two_left()\n\n# Create instance and start the game. \ngame = TextGame()\ngame.start_game() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def double_list(lst):\n    return [x * 2 for x in lst] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def mean(nums):\n    total = 0\n    for num in nums:\n        total += num\n    # Return the mean by dividing by the number of elements \n    return total / len(nums) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_dictionary_by_keys(dictionary):\n    result = {}\n    for key in sorted(dictionary.keys()):\n        result[key] = dictionary[key]\n    return result\n\ndictionary = {\"c\": 3, \"a\": 1, \"b\": 2}\nsorted_dictionary = sort_dictionary_by_keys(dictionary)\n\nprint(sorted_dictionary) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # define the game board\nboard = [\"_\" for i in range(9)]\n\n# define the player and computer symbols\nplayer = \"X\"\ncomputer = \"O\"\n\ndef display_board():\n    row1 = \"| {} | {} | {} |\".format(board[0], board[1], board[2])\n    row2 = \"| {} | {} | {} |\".format(board[3], board[4], board[5])\n    row3 = \"| {} | {} | {} |\".format(board[6], board[7], board[8])\n\n    print()\n    print(row1)\n    print(row2)\n    print(row3)\n    print()\n\n# check for a win\ndef check_win():\n    # check rows\n    row1 = board[0] == board[1] == board[2] != \"_\"\n    row2 = board[3] == board[4] == board[5] != \"_\"\n    row3 = board[6] == board[7] == board[8] != \"_\"\n    # if any row does have a match, flag that there is a win\n    if row1 or row2 or row3:\n        game_over = True\n    # check columns\n    col1 = board[0] == board[3] == board[6] != \"_\"\n    col2 = board[1] == board[4] == board[7] != \"_\"\n    col3 = board[2] == board[5] == board[8] != \"_\"\n    # if any column does have a match, flag that there is a win\n    if col1 or col2 or col3:\n        game_over = True\n    # check diagonals\n    diag1 = board[0] == board[4] == board[8] != \"_\"\n    diag2 = board[2] == board[4] == board[6] != \"_\"\n    # if any diagonal does have a match, flag that there is a win\n    if diag1 or diag2:\n        game_over = True\n    # if any condition is true, there is a win\n    if row1 or row2 or row3 or col1 or col2 or col3 or diag1 or diag2:\n        winner = player\n    else:\n        game_over = False\n    return game_over, winner\n\n# play the game\nwhile True:\n    # display the game board\n    display_board()\n    # get player input\n    while True:\n        try:\n            player_choice = int(input(\"Pick a number between 1-9: \"))\n            if player_choice >= 1 and player_choice <= 9:\n                if board[player_choice - 1] == \"_\":\n                    board[player_choice - 1] = player\n                    break\n            else:\n                print(\"Sorry, please try again\")\n        except:\n            print(\"Sorry, please try again\")\n\n    # check for a win\n    game_over, winner = check_win()\n    if game_over:\n        display_board()\n        print(\"Congratulations! You win! \")\n        break\n    # check for a tie\n    if \"_\" not in board:\n        print(\"It's a tie\")\n        break but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_lengths(arr):\n    lengths = [len(s) for s in arr]\n    return lengths\n\nresult = string_lengths(['hello', 'world'])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"Generate a python script that takes a list of random numbers as input and return only the even numbers from the list\"\"\"\n\n# Take a list as input\nlst = [1,6, 3,2 ,8,7, 0, 4, 9, 11, 22, 18, 33, 28, 26, 55, 49, 37, 63, 59]\n\n# Create a new list that will contain only the even numbers from the input list\neven_numbers = []\n\n# Iterate through input list and append only even numbers to the new list \nfor num in lst:\n    if num % 2 == 0:\n        even_numbers.append(num)\n        \n# Print out the new list containing only even numbers\nprint(even_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def power_of_3(matrix):\n    for i in range(len(matrix)):\n       for j in range(len(matrix[0])): \n            matrix[i][j] = matrix[i][j] ** 3\n    return matrix but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findNumOfElements(stack): \n    return len(stack) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\n\ndata_df = pd.DataFrame(data)\n\nprint(data_df) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import collections\n\ndef most_frequent_word(string): \n counts = collections.Counter(string.split()) \n   \n max_count = max(counts.values()) \n   \n most_frequent = [word for word, count in counts.items() \n     if count == max_count] \n   \n print(most_frequent) \n   \nif __name__ == \"__main__\": \n    sentence = \"Code Generation is an important task in the AI research\"\n    most_frequent_word(sentence) \n  \n# Output\n# ['Generation'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sphere_volume(radius): \n    return (4/3) * 3.14 * (radius*radius*radius) \n\n# Program to test above function\nradius = 3\nvolume = sphere_volume(radius)\nprint(\"Volume of a sphere with radius %d = %.2f\" %(radius, volume)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_path(start, end, graph):\n    # Initialize an empty list to store path\n    path = []\n    # Initialize a queue with start node\n    q = [start]\n    # Initialize a visited list\n    visited = set()\n\n    # Iterate until we get to the end node\n    while q:\n        node = q.pop(0)\n        if node == end:\n            path.append(node)\n            return path\n        elif node not in visited:\n            visited.add(node)\n            for neighbour in graph[node]:\n                q.append(neighbour)\n                path.append(node)\n    return path but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\n\nexample_string = \"This i$n't a siMPle StrinG\"\nnew_string = example_string.translate(str.maketrans('', '', string.punctuation)).replace(' ', '').lower()\nprint(new_string)\n\nOutput:\nthisisntasimplestring but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\nprint(\"The requested Fibonacci number is: \" + str(fib(6))) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: newString = string.replace(\"\", \"\")\nprint(newString) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_words(string):\n    words = string.split()\n    count_words = {}\n    for word in words:\n        if word in count_words:\n            count_words[word] += 1\n        else:\n            count_words[word] = 1\n\n    return count_words but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sentiment_model(text):\n pred = model.predict([text])\n \n if pred == 0:\n  sentiment = 'Positive'\n elif pred == 1:\n  sentiment = 'Negative'\n \n return sentiment\n\nsentiment = sentiment_model(\"This movie was horrible and I never want to watch it again.\")\nprint(sentiment) # Output: Negative but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_sql_query(table_name, fields, filter_clause):\n query = \"SELECT \"\n for i in range(len(fields)-1):\n query += fields[i] + \", \"\n query += fields[-1]\n query += \" FROM \" + table_name + \" WHERE \" + filter_clause\n return query but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nprint(random.randint(1000,9999)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Appointment:\n    def __init__(self, title, time, location):\n        self.title = title\n        self.time = time\n        self.location = location\n\n    def get_title(self):\n        return self.title\n    \n    def get_time(self):\n        return self.time\n    \n    def get_location(self):\n        return self.location but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http://www.example.com'\n\n# Use requests to get website HTML\nresp = requests.get(url)\n\n# Parse the HTML using BeautifulSoup\nsoup = BeautifulSoup(resp.text, 'lxml')\n\n# Extract data from HTML\ndata = []\nfor item in soup.find_all('div'):\n data.append(item.text)\n\n# Print the data\nfor d in data:\n print(d) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndef parse_json_object(request):\n # Parse the incoming JSON object\n data = json.loads(request.data)\n \n # Extract the values\n param1 = data['param1']\n param2 = data['param2']\n \n return 'Parameters extracted: param1={}, param2={}'.format(param1,param2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def add_arrays(arr1, arr2):\n if len(arr1) != len(arr2):\n  raise Exception(\"Arrays are not of the same size!\")\n return [x + y for x, y in zip(arr1, arr2)]\n\nadd_arrays(arr1, arr2)  # [4, 6, 8] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # define category variable\ncategory = \"Computer Science\"\n# import JSON library for retrieving the data\nimport json\n# import HTTP library for fetching the data\nimport urllib.request\n\n# create the target url\nurl = \"https://www.example.com/books/category/\" + category\n\n# fetch the data\nresponse = urllib.request.urlopen(url)\n# read the data\ndata = json.loads(response.read())\n\n# print the books\nfor book in data:\n print(book['title']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\nclass StudentDatabase:\n def __init__(self, db):\n  self.conn = sqlite3.connect(db)\n  self.cur = self.conn.cursor()\n  self.cur.execute(\"CREATE TABLE IF NOT EXISTS students (id INTEGER PRIMARY KEY, name TEXT, email TEXT, age INTEGER)\")\n  self.conn.commit()\n  \n def add_student(self, name, email, age):\n  self.cur.execute(\"INSERT INTO students VALUES (NULL, ?, ?, ?)\", (name, email, age))\n  self.conn.commit()\n  \n def delete_student(self, id):\n  self.cur.execute(\"DELETE FROM students WHERE id=?\", (id,))\n  self.conn.commit()\n  \n def update_student(self, id, name, email, age):\n  self.cur.execute(\"UPDATE students SET name=?, email=?, age=? WHERE id=?\", (name, email, age, id))\n  self.conn.commit()\n  \n def list_students(self):\n  self.cur.execute(\"SELECT * FROM students\")\n  rows = self.cur.fetchall()\n  return rows\n  \ndef main():\n db = StudentDatabase('students.db')\n db.add_student('John Doe', 'john@doe.com', 30)\n db.add_student('Adam Smith', 'adam@smith.com', 25)\n db.delete_student(2)\n db.update_student(1, 'John Smith', 'john@smith.com', 40)\n print(db.list_students())\n \nif __name__ == '__main__':\n main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Node class\nclass Node: \n    # Function to initialize the node object \n    def __init__(self, data): \n        self.data = data # Assign data \n        self.next = None # Initialize next as null \n  \n  \n# Linked List class\nclass LinkedList: \n  \n    # Function to initialize the Linked  \n    # List object \n    def __init__(self):  \n        self.head = None\n  \n    # Deletes the node at position n\n    def deleteNode(self, position): \n  \n        # If linked list is empty \n        if self.head == None: \n            return \n  \n        # Store headnode \n        temp = self.head \n  \n        # If head needs to be removed \n        if position == 0: \n            self.head = temp.next\n            temp = None\n            return \n  \n        # Find previous node of the node to be deleted \n        for i in range(position-1): \n            temp = temp.next\n            if temp is None: \n                break\n  \n        # If position is more than number of nodes \n        if temp is None: \n            return \n        if temp.next is None: \n            return \n  \n        # Node temp.next is the node to be deleted \n        # store pointer to the next of node to be deleted \n        next = temp.next.next\n  \n        # Unlink the node from linked list \n        temp.next = None\n  \n        temp.next = next but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\nemails = [ \"Mike@example.co    m\" , \"Jane#gmail.com\", \"Mason*yahoo.com\"]\nresult = []\n\nfor email in emails:\n email = re.sub('[^A-Za-z0-9@.+-_]', '', email)\n email = email.replace(' ', '')\n if 'gmail' in email:\n email = email.replace('gmail', 'google')\n elif 'yahoo' in email:\n email = email.replace('yahoo', 'ymail')\n result.append(email)\n\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def extract_long_words(s):\n words = s.split()\n filtered = [w for w in words if len(w) > 3]\n return filtered but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_duplicates(string):\n    result = \"\"\n    for char in string:\n        if string.count(char) == 1:\n            result += char\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimized_sort(unsorted_list):\n    length = len(unsorted_list)\n    for i in range(length):\n        min_index = i\n        for j in range(i+1, length):\n            if unsorted_list[j] < unsorted_list[min_index]: \n                min_index = j\n                \n        unsorted_list[i], unsorted_list[min_index] = unsorted_list[min_index], unsorted_list[i] \n    \n    return unsorted_list\n\nsorted_list = optimized_sort(unsorted_list)\nprint(sorted_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n \ndef primes(n):\n    if n < 2:\n        return []\n    \n    size = int(math.sqrt(n)) + 1\n    sieve = bytearray([True]) * size\n    for i in range(2, size):\n        if sieve[i]:\n            for j in range(i*i, size, i):\n                sieve[j] = False\n  \n    primes = [i for i in range(2, size) if sieve[i]]\n    return [p for p in primes if p <= n]\n \nif __name__ == '__main__':\n    n = 15\n    print(primes(n))\n\n# Output: [2, 3, 5, 7, 11, 13] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def clean_string(s):\n clean_s = ''.join(c for c in s if c.isalnum())\n print(clean_s) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Program to generate a Fibonacci series using an algorithm\n\n# function to generate Fibonacci series\ndef generate_fibonacci_series(n):\n    a, b = 0, 1 \n    result = [] \n    while b < n:\n        result.append(b)\n        a, b = b, a + b \n    return result\n\n# Driver code \nn = 10\nresult = generate_fibonacci_series(n)\nprint(\"The Fibonacci number up to\", n, \"is\", result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\narr = [7, -3, 10, 13, -6]\ntarget = -3\nprint(\"Index of\", target, \" is \", linear_search(arr, target)) # 1 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [1, 1, 3, 4, 5, 6, 6, 7, 8, 9, 9]\nnew_list = []\n\nfor item in my_list:\n if item not in new_list:\n new_list.append(item)\n\nprint(new_list)\n# Output: [1, 3, 4, 5, 6, 7, 8, 9] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_list(list):\n    return list[::-1]\n\nresult = reverse_list([1,2,3,4])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Contact:\n    def __init__(self, single_name, last_name, email, address, phone_number):\n        \"\"\"\n        This is the constructor for the contact class.\n        \"\"\"\n        self.single_name = single_name\n        self.last_name = last_name\n        self.email = email\n        self.address = address\n        self.phone_number = phone_number\n\n    def get_full_name(self):\n        \"\"\"\n        This method returns the full name of the contact.\n        \"\"\"\n        return self.last_name + \", \" + self.single_name\n\n    def get_email(self):\n        \"\"\"\n        This method returns the email of the contact.\n        \"\"\"\n        return self.email\n\n    def get_address(self):\n        \"\"\"\n       This method returns the address of the contact.\n        \"\"\"\n        return self.address\n\n    def get_phone_number(self):\n        \"\"\"\n        This method returns the phone number of the contact.\n        \"\"\"\n        return self.phone_number but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci(n):\n    arr = [0, 1]\n    for i in range(2, n+1):\n        arr.append(arr[i-2] + arr[i-1])\n    return arr[:n+1]\n\nprint(fibonacci(10)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n  def __init__(self, data):\n   self.data = data\n   self.next = None\n\n  def add(self, new_node):\n   self.next = new_node but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to generate multiplication table  \ndef multiplication_table(n): \n    # set the initial value and iters\n    num = 1\n    iters = n + 1\n      \n    # outer loop\n    for i in range(1, iters): \n          \n        # inner loop \n        for j in range(1, iters): \n              \n            # print statement \n            print(num, end = \" \") \n              \n            num = num + 1\n        print()\n  \n# Driver code\nn = 3\nmultiplication_table(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# URL to be scraped\nurl = \"http://www.example.com\"\n\n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get(url).text\n\n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n\n# Scrape data from the HTML using beautiful soup\ndata = soup.find_all('p')\n\n# Print the scraped data\nfor item in data:\n print(item.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: dictionary = {\"apple\": 1, \"banana\": 2, \"carrot\": 3}\n\nfor item in dictionary:\n  print(\"{}: {}\".format(item, dictionary[item])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"Implementation of :class:`Domain` class.\"\"\"\n\nimport abc\nimport inspect\n\nfrom ..core import Expr\nfrom ..core.compatibility import HAS_GMPY\nfrom ..polys.orderings import lex\nfrom ..polys.polyerrors import CoercionFailed, UnificationFailed\nfrom ..polys.polyutils import _unify_gens\nfrom ..printing.defaults import DefaultPrinting\nfrom .domainelement import DomainElement\n\n\nclass Domain(DefaultPrinting, abc.ABC):\n    \"\"\"Represents an abstract domain.\"\"\"\n\n    is_Ring = False\n    is_Field = False\n\n    has_assoc_Ring = False\n\n    is_FiniteField = False\n    is_IntegerRing = False\n    is_RationalField = False\n    is_RealField = False\n    is_ComplexField = False\n    is_AlgebraicField = False\n    is_RealAlgebraicField = False\n    is_ComplexAlgebraicField = False\n    is_PolynomialRing = False\n    is_FractionField = False\n    is_ExpressionDomain = False\n\n    is_Exact = True\n    is_Numerical = False\n\n    def __hash__(self):\n        return hash((self.__class__.__name__, self.dtype))\n\n    def __call__(self, *args):\n        \"\"\"Construct an element of ``self`` domain from ``args``.\"\"\"\n        return self.dtype(*args)\n\n    def __getstate__(self):\n        return {}\n\n    @abc.abstractmethod\n    def from_expr(self, expr):\n        \"\"\"Convert Diofant's expression ``expr`` to ``dtype``.\"\"\"\n        raise NotImplementedError\n\n    @abc.abstractmethod\n    def to_expr(self, element):\n        \"\"\"Convert domain ``element`` to Diofant expression.\"\"\"\n        raise NotImplementedError\n\n    def convert_from(self, element, base):\n        \"\"\"Convert ``element`` to ``self.dtype`` given the base domain.\"\"\"\n        for superclass in inspect.getmro(base.__class__):\n            method = '_from_' + superclass.__name__\n\n            convert = getattr(self, method, None)\n\n            if convert:\n                result = convert(element, base)\n\n                if result is not None:\n                    return result\n\n        raise CoercionFailed(f\"can't convert {element} of type {type(element)} \"\n                             f'from {base} to {self}')\n\n    def convert(self, element, base=None):\n        \"\"\"Convert ``element`` to ``self.dtype``.\"\"\"\n        if base is not None:\n            return self.convert_from(element, base)\n\n        if isinstance(element, self.dtype):\n            return element\n\n        from . import ComplexField, PythonRational, RealField\n        from .expressiondomain import ExpressionDomain\n        from .integerring import GMPYIntegerRing, PythonIntegerRing\n        from .rationalfield import GMPYRationalField, PythonRationalField\n\n        if isinstance(element, int):\n            return self.convert_from(element, PythonIntegerRing())\n\n        if isinstance(element, PythonRational):\n            return self.convert_from(element, PythonRationalField())\n\n        if HAS_GMPY:\n            integers = GMPYIntegerRing()\n            if isinstance(element, integers.dtype):\n                return self.convert_from(element, integers)\n\n            rationals = GMPYRationalField()\n            if isinstance(element, rationals.dtype):\n                return self.convert_from(element, rationals)\n\n        if isinstance(element, float):\n            parent = RealField(tol=False)\n            return self.convert_from(parent(element), parent)\n\n        if isinstance(element, complex):\n            parent = ComplexField(tol=False)\n            return self.convert_from(parent(element), parent)\n\n        if isinstance(element, DomainElement):\n            return self.convert_from(element, element.parent)\n\n        if isinstance(element, ExpressionDomain.Expression):\n            return self.convert_from(element, ExpressionDomain())\n\n        if isinstance(element, Expr):\n            try:\n                return self.from_expr(element)\n            except (TypeError, ValueError):\n                pass\n\n        raise CoercionFailed(f\"can't convert {element} of type {type(element)} to {self}\")\n\n    def __contains__(self, a):\n        \"\"\"Check if ``a`` belongs to this domain.\"\"\"\n        try:\n            self.convert(a)\n            return True\n        except CoercionFailed:\n            return False\n\n    def _from_PolynomialRing(self, a, K0):\n        if a.is_ground:\n            return self.convert(a.LC, K0.domain)\n\n    def _from_FractionField(self, a, K0):\n        if a.numerator.is_ground and a.denominator == 1:\n            return self.convert(a.numerator.LC, K0.domain.ring)\n\n    def unify(self, K1, symbols=()):\n        \"\"\"\n        Construct a minimal domain that contains elements of ``self`` and ``K1``.\n\n        Known domains (from smallest to largest):\n\n        - ``GF(p)``\n        - ``ZZ``\n        - ``QQ``\n        - ``RR(prec, tol)``\n        - ``CC(prec, tol)``\n        - ``ALG(a, b, c)``\n        - ``K[x, y, z]``\n        - ``K(x, y, z)``\n        - ``EX``\n        \"\"\"\n        from .compositedomain import CompositeDomain\n\n        if symbols:\n            if any(isinstance(d, CompositeDomain) and (set(d.symbols) & set(symbols))\n                   for d in [self, K1]):\n                raise UnificationFailed(f\"Can't unify {self} with {K1}, \"\n                                        f'given {symbols} generators')\n\n            return self.unify(K1)\n\n        if self == K1:\n            return self\n\n        if self.is_ExpressionDomain:\n            return self\n        if K1.is_ExpressionDomain:\n            return K1\n\n        if any(isinstance(d, CompositeDomain) for d in (self, K1)):\n            if isinstance(self, CompositeDomain):\n                self_ground = self.domain\n                self_symbols = self.symbols\n                order = self.order\n            else:\n                self_ground = self\n                self_symbols = ()\n                order = K1.order\n\n            if isinstance(K1, CompositeDomain):\n                K1_ground = K1.domain\n                K1_symbols = K1.symbols\n            else:\n                K1_ground = K1\n                K1_symbols = ()\n\n            domain = self_ground.unify(K1_ground)\n            symbols = _unify_gens(self_symbols, K1_symbols)\n\n            if ((self.is_FractionField and K1.is_PolynomialRing or\n                 K1.is_FractionField and self.is_PolynomialRing) and\n                    (not self_ground.is_Field or not K1_ground.is_Field) and domain.has_assoc_Ring):\n                domain = domain.ring\n\n            if isinstance(self, CompositeDomain) and (not isinstance(K1, CompositeDomain) or self.is_FractionField or K1.is_PolynomialRing):\n                cls = self.__class__\n            else:\n                cls = K1.__class__\n\n            return cls(domain, symbols, order)\n\n        def mkinexact(cls, K0, K1):\n            prec = max(K0.precision, K1.precision)\n            tol = max(K0.tolerance, K1.tolerance)\n            return cls(prec=prec, tol=tol)\n\n        if self.is_ComplexField and K1.is_ComplexField:\n            return mkinexact(self.__class__, self, K1)\n        if self.is_ComplexField and K1.is_RealField:\n            return mkinexact(self.__class__, self, K1)\n        if self.is_RealField and K1.is_ComplexField:\n            return mkinexact(K1.__class__, K1, self)\n        if self.is_RealField and K1.is_RealField:\n            return mkinexact(self.__class__, self, K1)\n        if self.is_ComplexField or self.is_RealField:\n            return self\n        if K1.is_ComplexField or K1.is_RealField:\n            return K1\n\n        if self.is_AlgebraicField and K1.is_AlgebraicField:\n            return self.__class__(self.domain.unify(K1.domain), *_unify_gens(self.gens, K1.gens))\n        elif self.is_AlgebraicField:\n            return self\n        elif K1.is_AlgebraicField:\n            return K1\n\n        if self.is_RationalField:\n            return self\n        if K1.is_RationalField:\n            return K1\n\n        if self.is_FiniteField and self.domain == K1:\n            return self\n        if K1.is_FiniteField and K1.domain == self:\n            return K1\n\n        raise NotImplementedError\n\n    def __eq__(self, other):\n        \"\"\"Returns ``True`` if two domains are equivalent.\"\"\"\n        return isinstance(other, Domain) and self.dtype == other.dtype\n\n    def get_exact(self):\n        return self\n\n    def poly_ring(self, *symbols, **kwargs):\n        \"\"\"Returns a polynomial ring, i.e. `K[X]`.\"\"\"\n        from ..polys import PolynomialRing\n        return PolynomialRing(self, symbols, kwargs.get('order', lex))\n\n    def frac_field(self, *symbols, **kwargs):\n        \"\"\"Returns a fraction field, i.e. `K(X)`.\"\"\"\n        from ..polys import FractionField\n        return FractionField(self, symbols, kwargs.get('order', lex))\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Define the threshold\nthreshold = 5\n\ndef classify(data):\n  result = []\n  for item in data:\n    if item <= threshold:\n      result.append('low')\n    else:\n      result.append('high')\n  return result\n\nprint(classify([8, 5, 9, 1, 3, 10]))\n# Output: ['high', 'low', 'high', 'low', 'low', 'high'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: <html>\n<head>\n  <title>Book List</title>\n</head>\n<body>\n  <h1>Book List</h1>\n  <table>\n    <thead>\n      <tr>\n        <th>ISBN</th>\n        <th>Title</th>\n      </tr>\n      <tbody>\n        <tr>\n          <td>978-0134813071</td>\n          <td>Python Programming</td>\n        </tr>\n        <tr>\n          <td>978-1590595377</td>\n          <td>Advanced Python</td>\n        </tr>\n        <tr>\n          <td>978-0302005945</td>\n          <td>PHP Programming</td>\n        </tr>\n    </thead>\n    <tbody>\n  </table>\n</body>\n</html> but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Find the second largest number from a given list\n\nnumbers = [12, 23, 45, 22, 50]\n\n# Sort the list in ascending order\nnumbers.sort()\n\n# Get the second largest number\nsecond_largest_num = numbers[-2]\n\nprint('The second largest number in the list is:', second_largest_num) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Node:\n def __init__(self, val):\n self.val = val\n self.left = None\n self.right = None\n \nclass BinarySearchTree:\n def __init__(self):\n self.root = None\n \n def insert(self, val):\n newNode = Node(val)\n if self.root == None:\n self.root = newNode\n else:\n curr = self.root\n while curr:\n if val < curr.val:\n if curr.left == None:\n curr.left = newNode\n break\n else:\n curr = curr.left\n else:\n if curr.right == None:\n curr.right = newNode\n break\n else:\n curr = curr.right\n \n def delete(self, val):\n curr = self.root\n parent = None\n isLeftChild = True\n \n while curr.val != val:\n parent = curr\n if val < curr.val:\n curr = curr.left\n isLeftChild = True\n else:\n curr = curr.right\n isLeftChild = False\n \n if curr == None:\n return\n \n # if node has no children\n if curr.left == None and curr.right == None:\n if isLeftChild:\n parent.left = None\n else:\n parent.right = None\n \n # if node has one child\n elif curr.left == None:\n if isLeftChild:\n parent.left = curr.right\n else:\n parent.right = curr.right\n \nelif curr.right == None:\n if isLeftChild:\n parent.left = curr.left\n else:\n parent.right = curr.left\n \n # if node has two children\n else:\n succParent = curr\n succ = curr.right\n \n while succ.left != None:\n succParent = succ\n succ = succ.left\n \n # if successor is a direct right child\n if succParent == curr:\n succParent.right = succ.right\n else:\n succParent.left = succ.right\n \n curr.val = succ.val\n \n def traverse(self):\n if self.root is None:\n return\n curr = self.root\n self.traverseInOrder(curr)\n \n def traverseInOrder(self, curr):\n if curr.left != None:\n self.traverseInOrder(curr.left)\n print(curr.val)\n if curr.right != None:\n self.traverseInOrder(curr.right) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(list):\n for _ in range(len(list)):\n for j in range(len(list)-1):\n if list[j] > list[j+1]:\n list[j], list[j+1] = list[j+1], list[j]\n return list\n\n# Testing the function\nexample_list = [3, 1, 8, 5, 7]\nsorted_list = sort_list(example_list)\n\nprint(sorted_list)\n# Output: [1, 3, 5, 7, 8] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\n\ndef list_to_json(data):\n    return json.dumps(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password():\n    lowercase = string.ascii_lowercase\n    uppercase = string.ascii_uppercase \n    digits = string.digits\n\n    characters = lowercase + uppercase + digits\n    password = ''.join(random.sample(characters,8))\n    return password\n\nprint(generate_password()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import time\n\ndef count_words(text):\n    start_time = time.time()\n    words = text.split(' ')\n    result = len(words)\n    end_time = time.time()\n    duration = end_time - start_time\n    return result, duration\n\nif __name__ == '__main__':\n    text = 'This sentence has five words'\n    result, duration = count_words(text)\n    print(f'The result is {result} and it took {duration} seconds!') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_by_length(word_list, length):\n    filtered_list = []\n    for word in word_list:\n        if len(word) == length:\n            filtered_list.append(word)\n    return filtered_list\n\nresult = filter_by_length(word_list, 5)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk import word_tokenize\n\nsentence = \"The founder of Apple Steve Jobs passed away.\"\n\ntokenized_text = word_tokenize(sentence)\n\ntagged = nltk.pos_tag(tokenized_text)\n\nnamedEnt = nltk.ne_chunk(tagged, binary=False)\n\nfor ne in namedEnt:\n if type(ne) == nltk.tree.Tree:  \n    entity_name = ' '.join(c[0] for c in ne.leaves())\n    print(entity_name) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import detect_language\n\ntext = \"Bonjour tout le monde\"\nlanguage = detect_language.detect(text)\nprint(language) # fr but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def celsius_to_fahrenheit(celsius):\n    \"\"\"\n    This function converts the given celsius value to its corresponding fahrenheit value\n    \"\"\"\n    fahrenheit = (celsius * (9/5)) + 32\n    return fahrenheit but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import http.server\nfrom http.server import SimpleHTTPRequestHandler\n\nclass MyHandler(SimpleHTTPRequestHandler):\n  def do_GET(self):\n    self.send_response(200)\n    self.send_header('Content-type', 'text/html')\n    self.end_headers()\n\n    html = b\"\"\"\n        <html>\n        <body>\n        <h1>Hello, World!</h1>\n        </body>\n        </html>\n    \"\"\"\n\n    self.wfile.write(html)\n \nserver = http.server.HTTPServer(('', 8080), MyHandler)\nserver.serve_forever() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart \n\nsubject = \"Your Subject\"\nbody = \"Your message here\"\nsender = \"from@fromdomain.com\"\nreceivers = [\"to@todomain.com\"]\n\nmsg = MIMEMultipart()\nmsg['from'] = sender\nmsg['To'] = \", \".join(receivers)\nmsg['Subject'] = subject\n\nmsg.attach(MIMEText(body, 'plain'))\n\nserver = smtplib.SMTP('smtp.gmail.com', 587)\nserver.starttls()\nserver.login(\"username\", \"password\")\ntext = msg.as_string()\nserver.sendmail(sender, receivers, text)\nserver.quit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def distinct_numbers(arr):\n return list(set(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack: \n def __init__(self): \n self.items = [] \n\n def push(self, item): \n self.items.append(item) \n\n def pop(self):\n if not self.is_empty(): \n return self.items.pop()\n\n def is_empty(self):\n return len(self.items) == 0\n\n def peek(self):\n if not self.is_empty(): \n return self.items[-1]\n\n def size(self):\n return len(self.items) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import unittest\n\ndef square(x):\n   return x * x\n\nclass TestSquareFunction(unittest.TestCase):\n   def test_square(self):\n       self.assertEqual(square(3), 9)\n       self.assertEqual(square(5), 25)\n       self.assertEqual(square(7), 49)\n\nif __name__ == '__main__':\n     unittest.main() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def reverse_string(stringToReverse):\n    reversedString = \"\"\n    for i in reversed(stringToReverse):\n        reversedString += i\n    return reversedString\n    \nstringToReverse = input(\"Enter string to reverse: \")\nresult = reverse_string(stringToReverse)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Person:\n    def __init__(self, name, age, height, address):\n        self.name = name\n        self.age = age\n        self.height = height\n        self.address = address\n    \n    def describe(self):\n        print('Name:', self.name)\n        print('Age:', self.age)\n        print('Height:', self.height)\n        print('Address:', self.address) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def five_letter_words(string):\n    words = string.split()\n    output_list = []\n    for word in words:\n        if len(word) >= 5:\n            output_list.append(word)\n    print(output_list)\n\nfive_letter_words(\"The quick brown fox jumps over the lazy dog\")\n# Output [\"quick\", \"brown\", \"jumps\", \"over\", \"lazy\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_subarray_with_sum(arr, given_sum):\n  max_len = 0\n  curr_sum = 0\n  start_index = 0\n  n = len(arr)\n  for end_index in range(n):\n    curr_sum += arr[end_index]\n    while curr_sum > given_sum:\n      curr_sum -= arr[start_index]\n      start_index += 1\n    if curr_sum == given_sum and (end_index-start_index+1) > max_len:\n      max_len = end_index-start_index+1\n  return max_len\n\narr = [1, 2, 3, 4, 5]\ngiven_sum = 9\nprint(longest_subarray_with_sum(arr, given_sum)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class JSONGenerator:\n    def __init__(self, input):\n        self.input = input\n \n    def generate(self):\n        return json.dumps(self.input) but is not the same. just give one example and only return the code."}
