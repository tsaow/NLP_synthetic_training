{"prompt": "make some code that functions the same as the following code: import random\n\ndef random_day():\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    return random.choice(days) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Stack:\n    def __init__(self):\n        self.stack = []\n \n    def push(self, x):\n        self.stack.append(x)\n \n    def pop(self):\n        if self.stack == []:\n            raise IndexError(\"pop from an empty stack\")\n        else:\n            return self.stack.pop()\n \n    def is_empty(self):\n        return self.stack == [] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: teams_wins = {\n    'A's': 56, \n    'B's': 24, \n    'C's': 32,\n    'D's': 27\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_perfect_number(num):\n    divs = []\n    for i in range(1,num):\n        if num % i == 0:\n            divs.append(i)\n    if num == sum(divs):\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import itertools\n\nlst = [1,2,3,4]\n\n# Get all possible combinations of the list\nresult = list(itertools.combinations(lst, 2))\n\n# Print the combinations\nfor combination in result:\n    print(combination) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sqlite3\n\n# connect to the database\nconn = sqlite3.connect('library.db')\nc = conn.cursor()\n\n#create table\nc.execute(\"CREATE TABLE books (title TEXT, author TEXT, year INT, copies INT)\")\n\n# save the changes\nconn.commit()\n\n# close the database connection\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_markov_chain(text):\n  words = text.split()\n  markov_dict = {}\n\n  for i in range(len(words) - 1):\n    if words[i] in markov_dict:\n      markov_dict[words[i]].append(words[i + 1])\n    else:\n      markov_dict[words[i]] = [words[i + 1]]\n\n  return markov_dict\n\ndef generate_text(markov_dict, length=50):\n  current_word = random.choice(list(markov_dict.keys()))\n  text = [current_word]\n\n  for i in range(length):\n    if current_word in markov_dict:\n      current_word = random.choice(markov_dict[current_word])\n      text.append(current_word)\n    else:\n      current_word = random.choice(list(markov_dict.keys()))\n      text.append(current_word)\n  \n  return ' '.join(text)\n\nsample_text = \"This is an example of a text with a specific style.\"\nmarkov_dict = generate_markov_chain(sample_text)\ngenerated_text = generate_text(markov_dict)\n\nprint(generated_text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers = [25, 12, 15, 32, 7]\n\n# initialize maximum number\nmax = numbers[0]\n\n# loop through list\nfor num in numbers:\n    # compare each number to find the max\n    if num > max:\n        max = num\n\n# print maximum number\nprint(max) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def maximum_two(arr):\n    arr.sort(reverse=True) \n    m1 = arr[0] \n    m2 = arr[1]\n    return (m1, m2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify_email(email_list): \n    classified_list = []\n    for email in email_list: \n        if '@' in email: \n            classified_list.append('Valid') \n        else: \n            classified_list.append('Invalid') \n    return classified_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Generate some random data\nx = np.random.randint(0,100,20)\ny = np.random.randint(0,100,20)\n\n# Plotting the points\nplt.plot(x, y, \"ro\")\n\n# Generating the linear regression model\n#X = X1.reshape(-1, 1)\nX = np.array(x).reshape(-1, 1)\n\n# Create linear regression object\nfrom sklearn.linear_model import LinearRegression\nreg = LinearRegression()\n\n#Train the model using the data\nreg = reg.fit(X, y)\n\n#Calculate the coefficient\nprint(\"Coefficient: \", reg.coef_[0])\n\n#Prediction\npredicted = reg.predict(np.array(x).reshape(-1, 1))\nprint(\"Predicted Values: \", predicted) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: numbers = {\"apple\": 0, \"orange\": 25, \"banana\": 52} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(\"The prime numbers from 1 to 100 are:\")\n\nfor number in range(1, 101):\n    if number > 1: \n        for i in range(2, number): \n            if (number % i) == 0: \n                break\n        else: \n            print(number) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def extractFirstName(full_name):\n    first_name = full_name.split()[0]\n    return first_name\n\n# Input\nfull_name = 'John Smith'\n\n# Output\nresult = extractFirstName(full_name)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: while True:\n    num = int(input(\"Please input a number between 1 and 10: \"))\n    if num in range(1, 11):\n        print(num + 1)\n    else:\n        print(\"Invalid number!\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: There is a variable (long_variable_name_is_not_good_practice) with a name that is longer than 20 characters. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def capitalize_strings(words):\n    capital_words = []\n    for word in words:\n        capital_words.append(word.upper())\n    \n    return capital_words\n\ncapitalized_words = capitalize_strings(words)\nprint(capitalized_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(n):\n    if n <= 1: \n        return False\n    for i in range(2, int(n**0.5) + 1): \n        if n % i == 0: \n            return False\n    return True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: customer = {\n 'name': '',\n 'address': '',\n 'email': ''\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import os \nimport requests\n\ndef call_api(request):\n api_key = os.environ.get('API_KEY')\n endpoint = os.environ.get('ENDPOINT')\n\n response = requests.get(endpoint, params={'api_key': api_key})\n return response.json()\n\nif __name__ == '__main__':\n os.environ['API_KEY'] = 'abc1234'\n os.environ['ENDPOINT'] = 'https://example.com/api'\n response = call_api(None)\n print(response) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def list_reverse(sequence):\n    if len(sequence) == 0:\n        return []\n    else:\n        return list_reverse(sequence[1:]) + [sequence[0]] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_dataframe(df):\n total = 0\n for col in df.columns:\n total += df[col].sum()\n\n return total\n \n# Example usage\nprint(sum_dataframe(df)) # prints 18 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: Java\n// package com.example;\npublic class Example { \n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n}\n\nPython\n# This program prints \"Hello World\"\nprint(\"Hello World\")\n\nSwift \n// This program prints \"Hello World\"\nprint(\"Hello World\")\n\nC\n#include <stdio.h>\nint main() {\n    printf(\"Hello World!\");\n    return 0;\n}\n\nPHP\n<?php\n    echo \"Hello World!\";\n?>\n\nC#\n// This program prints \"Hello World\"\nusing System;\n\npublic class Hello\n{\n    public static void Main()\n    {\n        Console.WriteLine(\"Hello World!\");\n    }\n}\n\nJavaScript\n// This program prints \"Hello World\"\nconsole.log(\"Hello World!\");\n\nGo\n// This program prints \"Hello World\"\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n        fmt.Println(\"Hello World!\")\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortList(input_list):\n # Create an empty list to store the sorted elements\n sorted_list = []\n \n while len(input_list) > 0:\n # Take the first element of the input list\n min_element = input_list[0]\n \n # Get the index of the minimum element\n min_index = 0\n \n # Iterate over the list to find the index of the minimum element\n for i in range(1, len(input_list)):\n # Check if the current element is the smallest\n if input_list[i] < min_element:\n min_element = input_list[i]\n min_index = i\n \n # After finding the minimum element, append it to the sorted list\n sorted_list.append(min_element)\n \n # Remove the minimum element from the input list\n del input_list[min_index]\n \n # Return the sorted list\n return sorted_list\n \n# Test\ninput_list = [14, 2, 3, 12, 15, 8]\n\nsorted_list = sortList(input_list)\n\nprint(sorted_list)\n# Output: [2, 3, 8, 12, 14, 15] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import necessary libraries\nimport string\nimport random\nfrom nltk.corpus import wordnet\n\n#define the respond function\ndef respond(sentence):\n    bot_response=''\n    sentence=sentence.lower()  #Convert to lowercase\n \n    #check for greetings\n    for word in sentence.split():\n        if word in GREETING_INPUTS:\n            bot_response=random.choice(GREETING_RESPONSES)\n            return bot_response\n \n    #check for farewells\n    for word in sentence.split():\n        if word in FAREWELL_INPUTS:\n            bot_response=random.choice(FAREWELL_RESPONSES)\n            return bot_response\n \n    #check for matching words\n    res=wordnet.synsets(word)\n    if len(res)>0:\n        bot_response=random.choice(MATCH_RESPONSES)\n        return bot_response\n \n    else:\n        bot_response=random.choice(NOMATCH_RESPONSES)\n        return bot_response\n    \n#list of inputs\nGREETING_INPUTS = (\"hello\", \"hi\", \"greetings\", \"sup\", \"what's up\",)\nFAREWELL_INPUTS = (\"bye\", \"farewell\", \"see you later\",)\nMATCH_RESPONSES = (\"Yes, I understand.\", \"Yes, I agree with you.\", \"I find that interesting.\", \"That's intriguing.\",)\nNOMATCH_RESPONSES = (\"I'm not sure I understand.\", \"I'm not sure what you mean.\", \"Can you please explain that further?\")\n\n#sample call to respond\nbot_response = respond(\"What's happening?\")\nprint(bot_response)\n# Output: I'm not sure what you mean. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef generate_password():\n    chars = string.ascii_letters \n    size = 8\n    return ''.join(random.choice(chars) for x in range(size))\n\nprint(generate_password()) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Define X and y\nX = pd.DataFrame(columns=['feature1', 'feature2', 'feature3'])\ny = pd.DataFrame(columns=['target'])\n\n# Train the decision tree classifier\nclf = DecisionTreeClassifier().fit(X, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [\"House\", \"Car\", \"Tree\", \"Planet\", \"Satellite\"]\n\ndef find_even_length(lst):\n    even_list = []\n    for l in lst:\n        if len(l) % 2 == 0:\n            even_list.append(l)\n    return even_list\n\neven_list = find_even_length(my_list)\nprint(even_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from nltk.tokenize import word_tokenize\nfrom nltk.tag import pos_tag\n\nsentence = \"The quick brown fox jumps over the lazy dog\" \nwords = word_tokenize(sentence)\nprint(pos_tag(words))\n\nOutput: \n[('The', 'DT'), ('quick', 'JJ'), ('brown', 'NN'), ('fox', 'NN'), ('jumps', 'VBZ'), ('over', 'IN'), ('the', 'DT'), ('lazy', 'JJ'), ('dog', 'NN')] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\n\n#Install the modules we need\n#from pyfirmata import Arduino, util, INPUT\nfrom mcpi import minecraft\nfrom mcpi import minecraftstuff\nfrom time import sleep\nimport server\nimport serial\n\n# Set up a connection to the Arduino/Shrimp if we need it\n#PORT = \"/dev/tty.SLAB_USBtoUART\"\n#ser = serial.Serial(PORT, 9600)\n\n# Connect to the server: we use the imported server.py to make it work with CloudMaker\nmc = minecraft.Minecraft.create(server.address)\n#Post a message to the minecraft chat window \nmc.postToChat(\"Ready to read Memory!\")\n\n# Use the command /getpos or F3 in Minecraft client to find out where you are then use those\n# x, y, z coordinates to build things\n# translate CloudMaker coords for mcpi ones\n# add this to x\nmcx = 177\n# - this from y\nmcy = 64\n# - this from z\nmcz = 135\n\n# Text Bubble 1\ndef MemoryCloud1(startx,starty,startz, chartwidth, chartheight, chartdepth, blocktype, blockid):\n\t# Main Bubble\n\tmc.setBlocks((startx + mcx), (starty-mcy), (startz-mcz), (startx + mcx) + chartwidth, (starty-mcy) + chartheight, (startz - mcz) + chartdepth, blocktype, blockid)\n\t# inset bottom\n\tmc.setBlocks((startx + mcx) + 1, (starty-mcy) - 1, (startz-mcz), (startx + mcx) + (chartwidth-1), (starty-mcy) -1, (startz - mcz) + chartdepth, blocktype, blockid)\n\t#inset top\n\tmc.setBlocks((startx + mcx) + 1, (starty-mcy) + (chartheight + 1), (startz-mcz), (startx + mcx) + (chartwidth-1), (starty-mcy) + (chartheight + 1), (startz - mcz) + chartdepth, blocktype, blockid)\n\n\n# If you want to add a bubble diagram, insert your coordinates\n# Then use /js blocktype(\"My Message\", blockid) while facing the block where you want to write\n\n#MemoryCloud1(-343, 75, -15, 44, 14, 2, 35, 0)\n#MemoryCloud1(-343, 110, -15, 44, 14, 2, 35, 0)\n#MemoryCloud1(-343, 75, -15, 44, 14, 2, 0)\n#MemoryCloud1(-343, 100, -15, 44, 14, 2, 0)\n\n# the memory cloud funtction is (myposx, myposy, myposz, width, height, thickness,\n# blocktype, blockidoption)\n\nMemoryCloud1(332, 100, -1185, 44, 4, 2, 35, 0)\n\n\n#\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_shortest_path(graph, start, end):\n    # Return a list containing the shortest path from \n    # start node to end node \n    shortest_path = []\n\n    # Track all visited nodes \n    visited_nodes = []\n\n    # Create anqueue for nodes to visit\n    queue = [] \n    queue.append([start]) \n\n    while queue: \n        # Get the first path from the queue and extend it \n        path = queue.pop(0) \n        node = path[-1] \n\n        # If we found the end node, return the path\n        if node == end: \n            return path \n\n        # Check each adjacent node and extend the path\n        for adjacent in graph.get(node, []): \n            new_path = list(path) \n            new_path.append(adjacent) \n\n            # Add the new path if it is not visited before\n            if adjacent not in visited_nodes:  \n                queue.append(new_path) \n                visited_nodes.append(adjacent) \n\n    return shortest_path but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Define a function to generate the Fibonacci series\ndef FibonacciSeries(n):\n    # Declare two variables to store the series\n    a = 0 \n    b = 1\n    # Print the initial values of the series\n    print(a)\n    print(b)\n    # Iterate and generate the series\n    for i in range(2, n):\n        c = a + b \n        print(c) \n        a, b= b, c\n\n# Call the function with the n-terms\nFibonacciSeries(10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def max_of_two(x, y):\n    if x > y:\n        return x\n    else:\n        return y\n \nx = 3\ny = 6\nmaximum = max_of_two(x, y)\nprint('The maximum of', x, 'and', y, 'is', maximum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\nrandom_numbers = []\n\nwhile len(random_numbers) < 20:\n    n = random.randint(1, 100)\n    if n not in random_numbers:\n        random_numbers.append(n)\n\nprint(random_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_2d_array(array):\n  # Initialize sum\n  _sum = 0\n  # Iterate over array and add each element\n  for row in array:\n    for element in row:\n      _sum += element\n  # Return sum\n  return _sum\n\narr = [[1, 2], [3, 4], [5, 6]]\nprint(sum_2d_array(arr)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.nytimes.com/'\n\nresponse = requests.get(url)\n\nif response.status_code == 200:\n html_data = response.text\n soup = BeautifulSoup(html_data, 'html.parser')\n\n headlines = soup.find_all('h2', {'class': 'e1voiwgp0'})\n \nfor headline in headlines[:5]:\n print(headline.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #import necessary libraries\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n#get data \nurl = 'https://raw.githubusercontent.com/krishnaik06/KNN-K-means/master/Dataset/dataset.csv'\ndata = pd.read_csv(url,header=None).values\n\n#apply K-means algorithm \nk=3\nx = data[:,0]\ny = data[:,1]\n\n\n#generate random centroid \nC_x = np.random.randint(0, np.max(x), size=k)\nC_y = np.random.randint(0, np.max(y), size=k)\n\nC = np.array(list(zip(C_x, C_y)), dtype=np.float32)\nprint book\n\n#plot initial centroid \nfig, ax = plt.subplots(figsize = (5,5))\nax.scatter(x, y, marker='o', c='#f0f0f0', s=7)\nax.scatter(C_x, C_y, marker='*', s=300, c='g')\n\n#calculate euclidean distance between datapoints and centroid \ndist = np.zeros(K)\nfor i in range(K):\n    dist[i] = np.sqrt(np.power(x-C_x[i],2) + np.power(y-C_y[i],2))\n\n# find the cluster center \nclusters = np.zeros(len(x))\nfor i in range(len(x)):\n    clusters[i] = np.argmin(dist[i])\n\n# plot cluster center\nx1 = x[clusters==0]\ny1 = y[clusters==0]\nx2 = x[clusters==1]\ny2 = y[clusters==1]\nx3 = x[clusters==2]\ny3 = y[clusters==2]\nfig, ax = plt.subplots(figsize = (5,5))\nax.scatter(x1, y1, marker='o', c='r', s=7)\nax.scatter(x2, y2, marker='o', c='b', s=7)\nax.scatter(x3, y3, marker='o', c='y', s=7)\nax.scatter(C_x, C_y, marker='*', s=300, c='g')\n\n#update the centroid \nfor i in range(K):\n    points = [X[j] for j in range(len(X)) if clusters[j] == i]\n    C_x[i] = np.mean(points[0])\n    C_y[i] = np.mean(points[1])\n\nC = np.array(list(zip(C_x, C_y)), dtype=np.float32) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: temps = [87, 97, 75, 104]\n\nmin_temp = temps[0]\n\nfor temp in temps:\n    if temp < min_temp:\n        min_temp = temp\n\nprint('Lowest temperature: ', min_temp) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask, jsonify\n\napp = Flask(name)\n\nproducts = {\n 'productId': '1234',\n 'name': 'Apple iPhone 11 Pro Max',\n 'price': '$999.99',\n 'description': 'The latest iPhone from Apple with powerful A13 Bionic chip, triple camera lens, and more'\n}\n\n@app.route('/product', methods=['GET'])\ndef get_product():\n return jsonify(products)\n\nif name == 'main':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class sequenceGenerator:\n    def __init__(self, n):\n        self.n = n\n    \n    def genSequence(self):\n        sequence = []\n        for i in range(self.n+1):\n            sequence.append(i)\n        return sequence but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Define a function to compute the nth Fibonacci number\ndef fibonacci(n): \n\ta = 0\n\tb = 1\n\tif n == 0: \n\t\treturn a \n\telif n == 1: \n\t\treturn b \n\telse: \n\t\tfor i in range(2,n): \n\t\t\tc = a + b \n\t\t\ta = b \n\t\t\tb = c \n\t\treturn b \n\ndef generate_fibonacci_list(n):\n    # Create an empty list\n    fib_list = []\n\n    # Iterate over n and fill the list with Fibonacci numbers\n    for i in range(n):\n        fib_list.append(fibonacci(i))\n\n    return fib_list\n\nn = 10\nfib_list = generate_fibonacci_list(n)\nprint(fib_list) # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: The statement 'help(str.split)' returns the help documentation for the 'split' method of the 'str' class in Python. The 'split' method splits a string into a list of substrings, using a specified separator string. Each substring is added to the list. If the separator is not specified, the string is split at whitespace. The syntax for 'split' is 'str.split(separator, maxsplit)'. The 'maxsplit' parameter indicates the maximum number of splits that should be made, after which no further splitting will take place. The default value for 'maxsplit' is -1, meaning that there is no limit to the number of splits. The returned list contains the substrings in the order in which they appear in the original string. but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nfrom nltk.tokenize import word_tokenize\n\n# load data\nsentences = [<input dataset>]\nsentiments = [<ground truth sentiments>]\n\n# create training and test datasets\nX_train, X_test, y_train, y_test = train_test_split(sentences, sentiments, test_size=0.25, random_state=42)\n\n# prepare datasets for vectorization\nword_counter = Counter(word for sentence in X_train for word in word_tokenize(sentence[1])) \n\n# vectorize the datasets using word count\nvectorizer = TfidfVectorizer(max_features=1000, stop_words='english', max_df=0.5,\n                             min_df=2, tokenizer=word_tokenize).fit(X_train)\nX_train_vec = vectorizer.transform(X_train)\nX_test_vec = vectorizer.transform(X_test)\n\n# fit the classifier using the vectorized train dataset\nclf = MultinomialNB().fit(X_train_vec, y_train)\n\n# predict the test dataset\ny_pred = clf.predict(X_test_vec) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import json\nimport sqlite3\n \n# parse the JSON data\njsonStr = '''{ \n \"items\": [\n  { \"name\": \"item1\", \"value\": 1 },\n  { \"name\": \"item2\", \"value\": 2 },\n  { \"name\": \"item3\", \"value\": 3 },\n  { \"name\": \"item4\", \"value\": 4 },\n  { \"name\": \"item5\", \"value\": 5 }\n ]\n}'''\ndecodedData = json.loads(jsonStr)\n \n# connect to the SQLite database\ncon = sqlite3.connect('data.db')\ncur = con.cursor()\n \n# create the necessary tables\ncur.execute('CREATE TABLE IF NOT EXISTS items(name TEXT, value INTEGER)')\n \n# now iterate through the items in the data and store them in the database\nfor item in decodedData['items']:\n cur.execute('INSERT INTO items(name, value) VALUES (?, ?)', (item['name'], item['value']))\n \ncon.commit()\n \n# close the connection\ncon.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_even_numbers(start, end):\n    for num in range(start, end+1):\n        if num % 2 == 0:\n            print(num)\n\n# main\nstart = 1\nend = 50\nprint_even_numbers(start, end) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: square_dict = {number:number**2 for number in numbers} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef random_number():\n return random.randint(1,9) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def calculator(): \n    num1 = int(input(\"Enter first number: \"))\n    num2 = int(input(\"Enter second number: \"))\n    operator = input(\"Enter operator: \")\n    if operator == \"+\":\n        print(\"Answer:\",num1+num2)\n    elif operator == \"-\":\n        print(\"Answer:\",num1-num2)\n    elif operator == \"*\":\n        print(\"Answer:\",num1*num2)\n    elif operator == \"/\":\n        print(\"Answer:\",num1/num2)\n    else:\n        print(\"Invalid Operator\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_numbers(num1, num2, num3):\n    return num1 + num2 + num3\n    \nif __name__ == \"__main__\":\n    print(sum_numbers(5, 10, 15)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# Function to extract tables from any Wikipedia page\ndef extract_tables(url):\n\n# Make a GET request to fetch the raw HTML content\n html_content = requests.get(url).text\n\n# Parse the html content\n soup = BeautifulSoup(html_content, \"lxml\")\n\n# Find all tables in the webpage\n tables = soup.find_all('table', class_='wikitable')\n\n# Get the data from each table\n for table in tables:\n  th = table.find_all('th')\n  headings = [header.text.strip().replace('\u00a0', '').replace('[edit]', '') for header in th]\n  rows_data = []\n  for tr in table.find_all('tr'):\n        td = tr.find_all('td')\n        row = [row_data.text.strip() for row_data in td]\n        rows_data.append(row)\n # Clean the data\n clean_data = [d for d in rows_data if d != []]\n \n # Return the headings and the clean data\n return headings, clean_data but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # import necessary libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.models import Sequential\n\n# read the csv file\ndata = pd.read_csv('customer_data.csv')\n\n# define feature and target variables\nX = data.drop(['ID', 'Churn'],axis=1).values\ny = data['Churn'].values\n\n# split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)\n\n# scale the data\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n\n# build the model\nmodel = Sequential()\nmodel.add(Dense(10, activation='relu', input_shape=(X_train.shape[1],)))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# train the model\nmodel.fit(X_train, y_train, batch_size=32, epochs=20, verbose=1)\n\n# make predictions \ny_pred = model.predict(X_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findClosestPalindrome(num):\n    # Convert number to string\n    num_str = str(num)\n    # Get length of number\n    length = len(num_str)\n\n    # Initialize solution\n    solution = None\n\n    # Loop over all possible number of same length\n    for i in range(10**length):\n        temp_str = str(i).zfill(length)\n        # Check if number is palindrome\n        if temp_str == temp_str[::-1]:\n            diff = abs(i-num)\n            if solution is None or diff < solution[1]:\n                solution = (i, diff)\n\n    # Return the closest palindrome\n    return solution[0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from collections import Counter\n\ndef most_common_word(string):\n    counter = Counter()\n    for word in string.split():\n        counter[word] += 1\n    most_common = counter.most_common(1)[0]\n    return most_common[0], most_common[1]\n    \nstring = \u201cThe quick brown fox jumps over the lazy dog.\u201d\nmost_common = most_common_word(string)\nprint(f\"The most common word is '{most_common[0]}' and it appears {most_common[1]} times\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import re\n\ndef is_question(sentence):\n sentence = sentence.strip()\n if sentence.endswith('?'):\n return True\n else:\n return False\n\nsentence = \"The weather is cold today\"\nprint(is_question(sentence)) # False\n\nsentence = \"Is it raining outside?\"\nprint(is_question(sentence)) # True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\n# We'll use a list to store the cities and a dictionary to represent the distances between them\ncities = ['A', 'B', 'C', 'D', 'E']\ndistances = {\n 'A': {'B': 10, 'C': 20, 'D': 30, 'E': 40},\n 'B': {'A': 10, 'C': 15, 'D': 25, 'E': 35},\n 'C': {'A': 20, 'B': 15, 'D': 40, 'E': 25},\n 'D': {'A': 30, 'B': 25, 'C': 40, 'E': 10},\n 'E': {'A': 40, 'B': 35, 'C': 25, 'D': 10}\n}\n\n# Create a population of random routes\ndef create_population(pop_size):\n population = []\n for _ in range(pop_size):\n route = random.sample(cities, len(cities))\n population.append(route)\n return population\n\n# Calculate the total distance of a route\ndef get_distance(route):\n distance = 0\n for i in range(len(route)-1):\n distance += distances[route[i]][route[i+1]]\n return distance\n\n# Calculate the fitness of a route\ndef get_fitness(route):\n return 1 / get_distance(route)\n\n# Select a route from the population according to their fitness\ndef select_route(population):\n population_fitness = [(route, get_fitness(route)) for route in population]\n population_fitness.sort(key=lambda x: x[1], reverse=True)\n population_sorted = [route[0] for route in population_fitness]\n return population_sorted\n\n# Create a new population using crossover\ndef crossover(parent1, parent2):\n child = parent1[:len(parent1)//2] + parent2[len(parent2)//2:]\n return child\n\n# Mutate a route by swapping two cities\ndef mutate(route):\n index1 = random.randint(0, len(route)-1)\n index2 = random.randint(0, len(route)-1)\n new_route = route[:]\n new_route[index1], new_route[index2] = route[index2], route[index1]\n return new_route\n\n# Create a new population using genetic algorithm\ndef genetic_algorithm(population, pop_size):\n population_sorted = select_route(population)\n new_population = [population_sorted[0]]\n\n# Create new routes using crossover\n while len(new_population) < pop_size:\n parent1 = random.choice(population_sorted)\n parent2 = random.choice(population_sorted)\n child = crossover(parent1, parent2)\n if random.random() < 0.1:\n child = mutate(child)\n new_population.append(child)\n return new_population but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_difference(arr):\n    return max(arr) - min(arr)\n\ninput_arr = [100, 45, 56, 30, 90, 100]\ndifference = get_difference(input_arr)\nprint(difference)  # Output: 70 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def classify(lst):\n    result = []\n    for item in list:\n        if item % 2 == 0:\n            result.append(\"even\")\n        else:\n            result.append(\"odd\")\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: for key,value in my_dict.items(): \n    print(key,\" :\",value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sortList(arr, num): \n    arr.sort(key = lambda x: x*num) \n    return arr \n  \narr = [3, 1, 5, 4, 2] \nnum = 5\nprint(sortList(arr, num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(my_list):\n  my_list.sort()\n  return my_list \n\nprint(sort_list(my_list)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_characters(string):\n    count = 0\n    for char in string:\n        count += 1\n    print(\"Total number of characters:\", count) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd \nfrom sklearn.linear_model import LogisticRegression\n\ndef predict_outcome(data): \n    x = data[:, 0:-1] \n    y = data[:, -1] \n\n    # fit the model\n    model = LogisticRegression()\n    model.fit(x, y)\n    return model.predict([x[0]])[0]\n\ndata = [['Hawthorn', 'Geelong', 3, 11],\n        ['Other Team 1', 'Other Team 2', 3, 11],\n        [1, 0]]\ndata = pd.DataFrame(data)\n\nresult = predict_outcome(data)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printLongestIncreasingSequence(arr):\n  # Set the maximum length to 0\n  maxLength = 0\n\n  # Iterate over all the elements of the given array\n  for i in range(len(arr)):\n    # Set currentLength to 1\n    currentLength = 1\n\n    # Iterate over all the subsequent elements of the array\n    for j in range(i + 1, len(arr)):\n      # If there is an increasing sequence of numbers, increment the currentLength\n      if arr[j] - arr[j - 1] == 1:\n        currentLength += 1\n      else:\n        break\n\n    # Check if the currentLength is greater than the maxLength\n    if currentLength > maxLength:\n      maxLength = currentLength\n\n  # Print the longest sequence of increasing numbers\n  for i in range(maxLength):\n    print(arr[i], end=\" \")\n  print()\n\n# Tests \nprintLongestIncreasingSequence([5, 3, 4, 8, 6, 7]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def print_primes(n):\n    for num in range(2, n+1):\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            print(num)\n\nprint_primes(10) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tensorflow as tf\n\n# Load the dataset\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.cifar10.load_data()\n\n# Normalize data\nx_train, x_test = x_train / 255.0, x_test / 255.0\n\n# Build the model\nmodel = tf.keras.models.Sequential([\n tf.keras.layers.Input(shape=x_train.shape[1:]),\n tf.keras.layers.Conv2D(32, (3, 3), activation='relu'),\n tf.keras.layers.MaxPooling2D((2, 2)),\n tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),\n tf.keras.layers.MaxPooling2D((2, 2)),\n tf.keras.layers.Flatten(),\n tf.keras.layers.Dense(128, activation='relu'),\n tf.keras.layers.Dense(10, activation='softmax')\n])\n\n# Compile and train the model\nmodel.compile(optimizer='adam',\n loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n metrics=['accuracy'])\n\nmodel.fit(x_train, y_train, epochs=10)\n\n# Evaluate the model\nmodel.evaluate(x_test, y_test) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import base64\n\ndef encode_base64(string):\n encoded_string = base64.b64encode(string.encode('utf-8'))\n return encoded_string\n\nstring = \"The quick brown fox\"\nencoded_string = encode_base64(string)\nprint(encoded_string)\n# Output: VGhlIHF1aWNrIGJyb3duIGZveA== but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\n\ndef tokenize_sentences(sentence):\n    tokens = nltk.word_tokenize(sentence)\n    return tokens but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def printPrime(n): \n       \n    # Prints all prime numbers less than or equal to n\n    prime = [True for i in range(n + 1)] \n    p = 2\n    while (p * p <= n): \n          \n        # If prime[p] is not changed, then it is a prime \n        if (prime[p] == True): \n               \n            # Update all multiples of p \n            for i in range(p * p, n + 1, p): \n                prime[i] = False\n               \n        p += 1\n       \n    # Print all prime numbers \n    for p in range(2, n): \n        if prime[p] == True: \n            print(p), \n           \n# Driver Code \nn = 20  \nprintPrime(n) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random \n\n# Initialize the string  \nstring = 'Hello World!'\n\n# Convert the string to a list\nchar_list = list(string) \n\n# Shuffle the list\nrandom.shuffle(char_list) \n\n# Convert back the list to a string\nrandom_string = ''.join(char_list)\n\n# Print the scrambled string\nprint(random_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_unique_substring(s):\n  # Set the initial longest length to 0\n  longest_length = 0\n  # Traverse the string\n  for i in range(len(s)):\n    seen = set()\n    # Traverse from i and outwards\n    for j in range(i, len(s)):\n      # Check if the character has been seen, if so, break\n      if s[j] in seen:\n        break\n      # Otherwise, add the character to seen and increment the longest_length\n      else:\n        seen.add(s[j])\n        longest_length = max(longest_length, j - i + 1)\n  \n  return longest_length\n\ns = \"ABCBCDDEE\"\nprint(longest_unique_substring(s)) # Output: 4 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\n# define an array of size 5x5\nmy_array = np.zeros((5, 5))\n\nprint(my_array) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def optimize_sum(arr):\n    result = 0\n    for num in arr:\n        result += num\n    return result\n\n# Using numpy:\nimport numpy as np\n\ndef optimize_sum_np(arr):\n    return np.sum(arr)\n\n# Using reduce function:\nfrom functools import reduce\n\ndef optimize_sum_reduce(arr):\n    return reduce((lambda x, y: x + y), arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_leap_year(year):\n    if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n        return true\n    return false but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to convert an integer to its English equivalent\ndef convert(num):\n # Dictionary of numbers in the English language\n numbers = {\n    0: 'zero',\n    1: 'one',\n    2: 'two',\n    3: 'three',\n    4: 'four',\n    5: 'five',\n    6: 'six',\n    7: 'seven',\n    8: 'eight',\n    9: 'nine'\n }\n\n # Convert number to string\n num = str(num)\n result = ''\n\n # Iterate through each digit\n for digit in num:\n  result += numbers[int(digit)] + ' '\n\n # Return the result\n return result\n\n# Take input from the user\nnum = int(input('Enter a number: '))\n\n# Convert the number to its English equivalent\nprint(convert(num)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Generate multiplication tables from 1 to 10\n\n# Define function, which takes a single number as input\ndef multiplication_table(number):\n  # Initialize list for storing results\n  results = []\n  # Iterate from 1 to 10\n  for i in range(1, 11):\n    # Compute result\n    result = number*i\n    # Append result to list of results\n    results.append(result)\n  # Return list of results\n  return results\n\n# Iterate from 1 to 10\nfor i in range(1, 11):\n  # Compute multiplication table\n  table = multiplication_table(i)\n  # Print multiplication table\n  print(f'{i} x {table}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: months_dict = {\n    'January': 1,\n    'February': 2,\n    'March': 3,\n    'April': 4,\n    'May': 5,\n    'June': 6,\n    'July': 7,\n    'August': 8,\n    'September': 9,\n    'October': 10,\n    'November': 11,\n    'December': 12\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import textblob\n\nreview = \"The product is good quality and well made.\"\ntestimonial = textblob.TextBlob(review)\nsentiment = testimonial.sentiment.polarity\n \nif sentiment > 0:\n  print(\"Review is positive.\")\nelif sentiment == 0: \n  print(\"Review is neutral.\")\nelse:\n print(\"Review is negative.\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\ndriver = webdriver.Chrome()\ndriver.get('https://www.example.com/login')\n\nusername_field = driver.find_element_by_name('username')\npassword_field = driver.find_element_by_name('password')\n\nusername_field.send_keys('example_username')\npassword_field.send_keys('example_password')\n\ndriver.find_element_by_xpath(\"//button[text()='Log in']\").click()\n\nWebDriverWait(driver, 10).until_not(EC.url_changes('https://www.example.com/login'))\n\nassert driver.current_url == 'https://www.example.com/home' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: n1 = int(input(\"Enter first number: \"))\nn2 = int(input(\"Enter second number: \")) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # start with a sum of 0\nsum = 0\n\n# set the minimum and maximum numbers\nmin = 50\nmax = 200\n\n# loop from min to max \nfor i in range(min, max+1):\n# check if number is divisible by 10\n if i%10 == 0:\n # add the number to the sum\n sum += i\n\n# print the sum\nprint(sum) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: n = 10\n\nfor i in range(1, n+1):\n if i % 2 == 0:\n print(i) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def matrix_sum(matrix):\nsum = 0\nfor row in matrix:\n for elem in row:\n  sum += elem\nreturn sum but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def power(n,k):\n    result = 1\n    for i in range(0,k):\n        result *= n\n    return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from urllib.request import urlopen\nfrom bs4 import BeautifulSoup\n\n# URL to search for (keyword included)\nurl = 'http://example.com/search?query=keyword'\n\n# Parse HTML and save to BeautifulSoup object\nhtml = urlopen(url)\nbs = BeautifulSoup(html.read(), 'html.parser')\n\n# Save all links found in the HTML document\nlinks = bs.find_all('a')\n\n# Iterate over the links and print out the link URLs\nfor link in links:\n    print(link.get('href')) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def filter_words_with_one_vowel(sentence):\n    num_words = 0\n    for word in sentence.split():\n        vowels = 0\n        for char in word:\n            if char in 'aeiou':\n                vowels += 1\n        if vowels == 1:\n            num_words += 1\n    return num_words\n\nsentence = 'I hardly ever go out and I hate taking pictures.'\nnum_words = filter_words_with_one_vowel(sentence)\n\nprint('Number of words with one vowel:', num_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Animal:\n   def __init__(self, name):\n      self.name = name\n\nclass Environment:\n   def __init__(self, animals):\n      self.animals = animals\n\n   def add_animal(self, animal):\n      self.animals.append(animal)\n      \n   def get_animals(self):\n      return self.animals\n\n# Example Usage\n\n# Create 3 animals\ntiger = Animal('Tiger')\nlion = Animal('Lion')\ngiraffe = Animal('Giraffe')\n\n# Create an environment to contain the animals\nsafari_park = Environment([tiger, lion])\n\n# Add the giraffe\nsafari_park.add_animal(giraffe)\n\n# Get the animals in the park\nanimals_in_park = safari_park.get_animals() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\n\n# Input text\ntext = \"This is a sample sentence for tokenizing.\"\n\n# Tokenize sentences\ntokens = nltk.word_tokenize(text)\n\n# Print tokens\nprint(tokens)\n\n# Output\n['This', 'is', 'a', 'sample', 'sentence', 'for', 'tokenizing', '.'] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tkinter as tk\nfrom tkinter import ttk\n\nroot = tk.Tk()\nroot.title('Quotes Table')\n\n# create a table of quote objects\ntree = ttk.Treeview(root, columns=['name', 'quote'], show = 'headings')\n\ntree.column('name', width=100, anchor='w')\ntree.heading('name', text='Name')\n\ntree.column('quote', width=300, anchor='w')\ntree.heading('quote', text='Quote')\n\nfor quote in quoteList:\n tree.insert('', 'end', values=[quote['name'], quote['quote']])\n\ntree.pack()\n\nroot.mainloop() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression\n\n# Load and prepare the data\ndata = pd.read_csv('data.csv')\nX = np.array(data.iloc[:, 0:4])\ny = np.array(data['Heart Attack Risk'])\n\n# Create the model\nmodel = LogisticRegression(solver='lbfgs')\n\n# Train the model\nmodel.fit(X, y)\n\n# Make the predictions\npredictions = model.predict_proba(X) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class ReverseArray:\n def __init__(self, array):\n self.array = array\n \n def reverse(self):\n self.array.reverse()\n \n # To test with given input\n array = [1, 2, 3, 4]\n rev_array = ReverseArray(array)\n rev_array.reverse()\n print(array) # Output: [4, 3, 2, 1] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_largest_element(lst):\n   largest_element = None\n   for elem in lst:\n      if largest_element is None or largest_element < elem:\n         largest_element = elem\n  return largest_element\n\nlargest_element = find_largest_element(lst)\nprint(largest_element) # 45 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask\nimport requests\n \napp = Flask(__name__)\n \n@app.route('/post-likes/<int:id>', methods=['GET'])\ndef post_likes(id):\n    response = requests.get('https://api.example.com/likes?id={id}')\n    return response.json()\n\nif __name__ == '__main__':\n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef shuffle(numbers):\n random.shuffle(numbers)\n return numbers\n\nshuffle(numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Imports and Setup\nimport flask\nfrom flask import Flask, request, redirect, render_template\nfrom flask_login import LoginManager, login_user, login_required\nimport os\nimport sqlite3\n\n# Configure application\napp = Flask(__name__)\napp.secret_key = os.urandom(24)\n\n# Configure database\ndb_file = './data.db'\nconn = sqlite3.connect(db_file)\ncursor = conn.cursor()\n\n# User authentication\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\n\n@login_manager.user_loader\ndef load_user(user_id):\n    cursor.execute(f\"SELECT * FROM users WHERE id = {user_id}\")\n    user = cursor.fetchone()\n    return User(*user)\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'GET':\n        return render_template('login.html')\n    elif request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        \n        cursor.execute(f\"SELECT * FROM users WHERE username = ?\" , (username,))\n        user = cursor.fetchone()\n        if user is not None and check_password_hash(user[3], password):\n            login_user(User(*user))\n            return redirect(url_for('index'))\n        else:\n            return redirect(url_for('login'))\n            \n# Application routes\n@app.route('/')\n@login_required\ndef index():\n    return 'Welcome to the application!'\n\nif __name__ == '__main__':\n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\n\n# set seed for generating random numbers\nnp.random.seed(101)\n\n# number of samples and attributes\nn_samples = 1000\nn_attributes = 10\n\n# generate random samples\ndata = np.random.rand(n_samples, n_attributes) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport pandas as pd\n\nurl = 'https://example.com/api/data'\n\n# Make the request and get the response\nresponse = requests.get(url)\n\n# Convert the JSON response to a python dictionary\ndata = response.json()\n\n# Convert the dictionary to a pandas DataFrame\ndf = pd.DataFrame(data) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_list(numbers): \n    sorted_list = sorted(numbers, reverse=True)\n    return sorted_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_hcf(x, y): \n  \n    if x > y: \n        smaller = y \n    else: \n        smaller = x \n    for i in range(1,smaller + 1): \n        if((x % i == 0) and (y % i == 0)): \n            hcf = i \n              \n    return hcf \n      \nx = 60\ny = 80\n\nhcf = find_hcf(x, y) \nprint(\"The Highest Common Factor of\", x,\"and\", y,\"is\", hcf) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Data\ndata = [['Red', 11, 0.3, 6.8],\n        ['White', 12, 0.5, 5.3]]\ndf = pd.DataFrame(data, columns=['Type', 'Alk', 'Res', 'Mal'])\n\n# Feature and target\nX = df.drop('Type', axis=1)\ny = df['Type']\n\n# Model development\nknn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(X, y)\n\n# Predicting\npredictions = knn.predict([[11.4, 0.3, 6.6]\n                           ])\nprint(predictions) but is not the same. just give one example and only return the code."}
