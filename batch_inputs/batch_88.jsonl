{"prompt": "make some code that functions the same as the following code: def remove_duplicates(input_list):\n    output_list = []\n    for i in input_list:\n        if i not in output_list:\n            output_list.append(i)\n    return output_list\n\nresult = remove_duplicates([1, 2, 3, 4, 4, 4, 5])\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\n\n# Load the data\ndata = pd.read_csv('crypto_data.csv')\n\n# Create feature and target\nX = data.drop('Price', axis=1)\ny = data.Price\n\n# Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train the model\nmodel = RandomForestRegressor()\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Evaluate accuracy\nscore = mean_squared_error(y_test, y_pred)\n\n# Print the accuracy\nprint(f'Accuracy: {score}') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\n\ndef classify_book(title):\n    # Tokenize the words in the title\n    tokens = nltk.word_tokenize(title)\n\n    # Create the tagger\n    pos_tag = nltk.pos_tag(tokens)\n\n    # Check for words that are commonly used in fiction titles\n    fiction_words = [\"Novel\", \"Novella\", \"Mystery\", \"Fantasy\", \"Adventure\", \"Thriller\", \"Paranormal\", \"Romance\"]\n    has_fiction_word = any([word in fiction_words for word in tokens])\n\n    if has_fiction_word:\n        return 'Fiction'\n    else:\n        return 'Non-Fiction' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\n\n# init an empty list\nstudents = []\n\n# ask for user input\nwhile True:\n student_name = input('Please enter a student name: ')\n \n if student_name.strip() == '':\n  break\n students.append(student_name.strip())\n\nprint('The following students have been added to the list:')\nfor student in students:\n print(student)\n\nsys.exit() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import feedparser\n\ndef get_rss_news(url):\n    d = feedparser.parse(url)\n    articles = []\n    for entry in d['entries']:\n        articles.append({'title': entry.title, 'summary': entry.summary})\n    return articles \n\nnews = get_rss_news('https://www.nytimes.com/svc/collections/v1/publish/www.nytimes.com/section/world/rss.xml')\n\nfor article in news:\n    print(article['title'])\n    print(article['summary']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_number(): \n    random_number = random.randint(100000, 999999) \n    return random_number\n\ngeneratedNumber = generate_random_number() \nprint(generatedNumber) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def delete_every_second_word(input):\n    words = input.split()\n    output = \"\"\n    \n    for i, word in enumerate(words):\n        if i % 2 == 0:\n            output += word + \" \"\n    \n    return output.strip() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nurl = 'http://www.example.com'\nresponse = requests.get(url)\nif response.status_code == 200:\n    html_contents = response.content\n    # Parse the html_contents and store the data but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def smallest_number(arr):\n    min_number = arr[0]\n    for num in arr[1:]:\n        if num < min_number:\n            min_number = num\n    return min_number but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com'\n  \n# send an HTTP GET request for the URL\nr = requests.get(url)\n  \n# parse the content of the request with BeautifulSoup\nsoup = BeautifulSoup(r.content, 'html.parser')\n\n# extract all links from the webpage\nlinks = soup.find_all(\"a\")\n\n# store URLs and content in variables\nvisited = set()\nfor link in links:\n    url = link.get('href')\n    visited.add(url)\n    r = requests.get(url)\n    content = r.content\n    # store content in database\n    # ...\n\nprint(visited) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_tuples_by_second_element(tuples):\n  return sorted(tuples, key=lambda tup: tup[1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = [\"hello\", \"world\", \"hello\", \"foo\", \"bar\", \"hello\"]\n\n# create an empty dictionary to store the results\nfreq = {}\n\n# loop through each word in the list\nfor word in words:\n    if word in freq:\n        # if word existed update its count\n        freq[word] += 1\n    else:\n        # if word doesn\u2019t exist, set the count to 1\n        freq[word] = 1\n\n# print the result\nprint(freq) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fahrenheitToCelsius(fahrenheit):\n    celsius = (fahrenheit - 32) * 5 / 9\n\n    return celsius\n\nfahrenheit_value = 68\ncelsius_value = fahrenheitToCelsius(fahrenheit_value)\n\nprint(\"{0} Fahrenheit is equal to {1} Celsius\".format(fahrenheit_value, celsius_value)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Sort an array with m different types of elements\ndef sort_array(arr):\n    # Get the number of different types of elements \n    m = len(set(arr)) \n    n = len(arr) \n  \n    # Create an output array of size n\n    output = [0] * (n) \n   \n    # Store count of individual numbers in \n    # count array \n    count = [0] * (m) \n    for i in range(0, n): \n        count[arr[i]] += 1\n   \n    # finding cummulative count \n    for i in range(1, m): \n        count[i] += count[i - 1] \n  \n    # Inserting values in sorted array\n    for i in range(n - 1, -1, -1): \n        output[count[arr[i]] - 1] = arr[i] \n        count[arr[i]] -= 1\n   \n    return output \n\n# Driver Code \narr = [2, 1, 1, 3, 6, 4, 5, 5]\nsorted_arr = sort_array(arr) \n  \n# Printing the sorted array \nprint(*sorted_arr) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: GET products/_search\n{\n \"query\": {\n  \"term\": {\n   \"body\": \"Python\"\n  }\n }\n} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_natural_numbers(limit):\n    if limit < 2:\n        return limit\n    else:\n        return limit + sum_natural_numbers(limit-1)\n\n#print the sum \nprint(sum_natural_numbers(limit)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: my_list = [1, 2, 3, 4, 5]\n\nmy_array = []\n\nfor number in my_list:\n    my_array.append(number)\n\nprint(my_array) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Vector2D:\n    def __init__(self, x = 0, y = 0):\n        self.x = x\n        self.y = y\n\n    # Adds two vectors\n    def __add__(self, other):\n        x = self.x + other.x\n        y = self.y + other.y\n        return Vector2D(x, y)\n\n    # Subtracts two vectors\n    def __sub__(self, other):\n        x = self.x - other.x\n        y = self.y - other.y\n        return Vector2D(x, y)\n\n    # Multiplies a vector by a scalar\n    def __mul__(self, other):\n        x = self.x * other\n        y = self.y * other\n        return Vector2D(x, y)  \n\n    # Divides a vector by a scalar\n    def __truediv__(self, other):\n        x = self.x / other\n        y = self.y / other\n        return Vector2D(x, y) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def compare_dictionaries(dict1, dict2):\n  result = {} \n  for key in dict1:    \n    if (key in dict2):\n      if (dict1[key] == dict2[key]):\n        result[key] = \"Same Value\"\n      else:\n        result[key] = \"Different Value\"\n    else:\n      result[key] = \"dict2 doesn't contains this keys\"\n\n  for key in dict2:\n    if (key not in dict1):\n      result[key] = \"dict1 doesn't have this key\"\n  \n  return result but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def insertion_sort(arr):\n for index in range(1,len(arr)):\n key = arr[index]\n j = index-1\n while j >=0 and key < arr[j]:\n arr[j+1] = arr[j]\n j -= 1\n arr[j+1] = key\n\narr = [4, 3, 7, 2, 1]\ninsertion_sort(arr)\nprint(arr)\n\n# Output: [1, 2, 3, 4, 7] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/env python\n# Copyright 2012-2013 Xiangfu\n# Copyright 2012-2013 Andrew Smith\n# Copyright 2013 Luke Dashjr\n#\n# This program is free software; you can redistribute it and/or modify it under\n# the terms of the GNU General Public License as published by the Free Software\n# Foundation; either version 3 of the License, or (at your option) any later\n# version.  See COPYING for more details.\n\n# Linux usage: ./usbtest.py /dev/ttyUSB0 0xhexcodes|string|icarus\n#  OR          python usbtest.py /dev/ttyUSB0 0xhexcodes|string|icarus\n#\n# Windows usage: ./usbtest.py COM1 0xhexcodes|string|icarus\n#\n#   sends the data sepcified to the USB device and waits\n#   for a reply then displays it\n#\n#   the data can be:\n#\t0xhexcodes: e.g. 0x68656c6c6f20776f726c640a\n#\t\t\twould send \"hello world\\n\"\n#\n#\tstring: e.g. sendsometext\n#\n#\ticarus: sends 2 known block payloads for an icarus device\n#\t\tand shows the expected and actual answers if it's\n#\t\ta working V3 icarus\n\nimport sys\nimport serial\nimport binascii\n\nif len(sys.argv) < 2:\n\tsys.stderr.write(\"Usage: \" + sys.argv[0] + \" device strings...\\n\")\n\tsys.stderr.write(\" where device is either like /dev/ttyUSB0 or COM1\\n\")\n\tsys.stderr.write(\" and strings are either '0xXXXX' or 'text'\\n\")\n\tsys.stderr.write(\" if the first string is 'icarus' the rest are ignored\\n\")\n\tsys.stderr.write(\"  and 2 valid icarus test payloads are sent with results displayed\\n\")\n\tsys.stderr.write(\"\\nAfter any command is sent it waits up to 30 seconds for a reply\\n\");\n\tsys.exit(\"Aborting\")\n\n# Open with a 10 second timeout - just to be sure\nser = serial.Serial(sys.argv[1], 115200, serial.EIGHTBITS, serial.PARITY_NONE, serial.STOPBITS_ONE, 10, False, False, 5)\n\nif sys.argv[2] == \"icarus\":\n\n\t# This show how Icarus use the block and midstate data\n\t# This will produce nonce 063c5e01\n\tblock = \"0000000120c8222d0497a7ab44a1a2c7bf39de941c9970b1dc7cdc400000079700000000e88aabe1f353238c668d8a4df9318e614c10c474f8cdf8bc5f6397b946c33d7c4e7242c31a098ea500000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000080020000\"\n\tmidstate = \"33c5bf5751ec7f7e056443b5aee3800331432c83f404d9de38b94ecbf907b92d\"\n\n\trdata2  = binascii.a2b_hex(block.encode('ascii'))[95:63:-1]\n\trmid    = binascii.a2b_hex(midstate.encode('ascii'))[::-1]\n\tpayload = rmid + rdata2\n\n\tprint(\"Push payload to icarus: \" + binascii.hexlify(payload).decode('ascii'))\n\tser.write(payload)\n\n\tb=ser.read(4)\n\tprint(\"Result:(should be: 063c5e01): \" + binascii.hexlify(b).decode('ascii'))\n\n\t# Just another test\n\tpayload2 = \"ce92099c5a80bb81c52990d5c0924c625fd25a535640607d5a4bdf8174e2c8d500000000000000000000000080000000000000000b290c1a42313b4f21b5bcb8\"\n\tprint(\"Push payload to icarus: \" + payload2)\n\tser.write(binascii.a2b_hex(payload2.encode('ascii')))\n\n\tb=ser.read(4)\n\tprint(\"Result:(should be: 8e0b31c5): \" + binascii.hexlify(b).decode('ascii'))\nelse:\n\tdata = b\"\"\n\tfor arg in sys.argv[2::]:\n\t\tif arg[0:2:] == '0x':\n\t\t\tdata += binascii.a2b_hex(arg[2::].encode('ascii'))\n\t\telse:\n\t\t\tdata += arg.encode('latin-1')\n\n\tprint(\"Sending: 0x\" + binascii.hexlify(data).decode('ascii'))\n\tser.write(data)\n\n\t# If you're expecting more than one linefeed terminated reply,\n\t# you'll only see the first one\n\t# AND with no linefeed, this will wait the 10 seconds before returning\n\tprint(\"Waiting up to 10 seconds ...\")\n\tb=ser.readline()\n\tprint(\"Result: hex 0x\" + binascii.hexlify(b).decode('ascii'))\n\n\tprint(\"Result: asc %s\" % (repr(b),))\n\nser.close()\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def my_function(values):\n    sorted_values = sorted(values)\n    return sorted_values\n\nif __name__ == \"__main__\":\n    values = [int(value) for value in input().split(',')]\n    print(my_function(values)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n    \n    def add_child(self, val):\n        if self.val:\n            if val < self.val:\n                if self.left is None:\n                    self.left = TreeNode(val)\n                else:\n                    self.left.add_child(val)\n            elif val > self.val:\n                if self.right is None:\n                    self.right = TreeNode(val)\n                else:\n                    self.right.add_child(val)\n        else:\n            self.val = val but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_vowels(sentence):\n    vowels = {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0}\n    for char in sentence.lower():\n        if char in vowels:\n            vowels[char] += 1\n    return vowels\n\nsentence = 'Hello World'  \nprint(count_vowels(sentence)) # Output = {'a': 0, 'e': 1, 'i': 0, 'o': 2, 'u': 0} but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# Read IMDB data\ndata_df = pd.read_csv('imdb_data.csv')\n\n# Create input data\nX = data_df[['director_name', 'num_critic_for_reviews', 'duration', 'gross']]\ny = data_df['imdb_score']\n\n# Split data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Train model\nregressor = LinearRegression()  \nregressor.fit(X_train, y_train)\n\n# Predict rating for movie 'Grey Island'\ngrey_island_X = [['Grey Island', 2, 101, 1607800]]\n\nprint(regressor.predict(grey_island_X)) # Output: [3.6] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sys\n\n# Get the string\nstring = sys.argv[1]\n\nprint(string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_fibonacci_series(n):\n    print(\"0\")\n    current = 0\n    next = 1\n    for i in range(0, n):\n        print(current)\n        temp = current\n        current = next\n        next = temp + next but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = ['cat', 'dog', 'bird', 'fish']\n\nsorted_words = sorted(words)\n\nprint(sorted_words) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sum_digits(n):\n    num_str = str(n)\n    total = 0\n    for digit in num_str:\n        total += int(digit)\n    return total but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import smtplib\n\ndef send_email():\n    # Enter your email details here\n    email_address = 'myemail@example.com'\n    email_password = 'my_password'\n    to_address = 'recipient@example.com'\n\n    # Create a smtplib server\n    server = smtplib.SMTP('smtp.gmail.com',587)\n    server.ehlo()\n    server.starttls()\n    server.login(email_address, email_password)\n\n    # Create the message\n    message = \"\"\"\\\n    Subject: Test Email\n\n    This is a test email.\n    \"\"\"\n\n    # Send the email\n    server.sendmail(email_address, to_address, message)\n    server.quit()\n\nif __name__ == '__main__':\n    send_email() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n \n# target equation\nexpression = lambda x: x**2 - 3*x - 10\n \n# population size of 40 solutions\npopSize = 40\n \n# starting range\nxRange = (-10, 10)\n \n# mutation rate\nmRate = 0.01\n \n# generate randomly the population\npopulation = [random.uniform(*xRange) for _ in range(popSize)]\n \n# fitness function\ndef fitness(expression, population):\n \n # loop through population and calculate fitness\n for i in range(len(population)):\n x = population[i]\n population[i] = (x, expression(x))\n \n # sort by fitness\n population = [i[1] for i in sorted(population, key=lambda x : x[1])]\n return population\n \n# initialize best score ever\nbestScore = float('inf')\n \n# genetic algorithm\nwhile True:\n # calculate fitness scores\n scores = fitness(expression, population)\n \n # get the best score of this population\n if scores[0] < bestScore:\n bestScore = scores[0]\n bestSolution = population[0]\n \n # print the best solution and score\n print(\"Best solution : {}\\n Best score: {}\".format(bestSolution, bestScore))\n \n # generate a new population\n newPopulation = []\n \n # add the best performing solutions from previous gen\n newPopulation.extend(population[:5])\n \n # loop through the population size\n while len(newPopulation)<popSize:\n \n # randomly select 2 parents\n parent1 = random.choice(population[:10])\n parent2 = random.choice(population[:10])\n \n # generate a child by crossover of parents\n child = (parent1 + parent2)/2\n \n # randomly mutate the child\n if random.random() < mRate:\n child += random.random() * 5\n \n # add the child to the new population\n newPopulation.append(child)\n \n # set the new population\n population = newPopulation but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import threading\n\ndef doSomething():\n\t#Do something\n    t = threading.Thread(target=functionName)\n    t.start() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def generate_primes(max): \n    primes_list = [2] \n    for i in range(3, max + 1): \n        curr = True \n        for p in primes_list: \n            if i % p == 0: \n                curr = False \n        if curr: \n            primes_list.append(i) \n    return primes_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Filtering out the strings that don't contain the substring\nfiltered_array = [s for s in array if substring in s]\n\nprint(filtered_array) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def check_duplicates_replace(list):\n    # keep track of counts of elements\n    element_count = {}\n\n    # traverse list\n    for element in list:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n \n    # replace duplicates with count\n    for i in range(len(list)):\n        if list[i] in element_count:\n            list[i] = element_count[list[i]]\n            element_count[list[i]] -= 1\n\n    return list\n\n# Main program\nlist = [1, 2, 3, 2, 1, 3]\nresult = check_duplicates_replace(list)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import secrets\n\ndef encrypt(string, key):\n cipher = ''\n for i in range(len(string)):\n cipher += chr(ord(string[i]) + ord(key[i % len(key)]))\n return cipher\n\nencrypt(\"This is a secret message\", \"12345678\") \n# prints \"\\x18\\x01\\x15\\x05\\x1a\\x12\\x1b\\x1f\\x1f\\x1e\\x10\\x04\\x1f\\x1f\\x19\\x0f\\x02\\x03\\x07\\x08\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def string_to_list(string):\n    char_list = []\n    for char in string:\n        char_list.append(char)\n    return char_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: print(\"Hello World\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import sklearn_crfsuite\nfrom sklearn_crfsuite import CRF\nimport string\nimport re\n\n# Preprocessing for Movie Title\ndef preprocess_text(title):\n    title = title.lower()\n    titles = title.split()\n    table = str.maketrans('', '', string.punctuation)\n    titles = [word.translate(table) for word in titles]\n    titles = [word for word in titles if re.search('[a-zA-Z]', word)]\n    return titles\n\n# Movie Title Tags\ndef get_labels(word):\n    labels = []\n    pattern = r'^[A-Z]'\n    if re.search(pattern, word):\n        labels.append('title')\n    else:\n        labels.append('other')\n    return labels\n\n# Word Features\ndef word2feature(sentence, word_key):\n    word = sentence[word_key]\n    features = {\n            'word': word,\n            'length': len(word),\n            'starts_with_upper': int(word[0].isupper())\n            }\n    return features\n\n# Features Extraction\ndef sent2features(sentence):\n    return [word2feature(sentence, key) for key in range(len(sentence))]\n\n# Labels Extraction\ndef sent2labels(sentence):\n    return [get_labels(key) for key in sentence]\n\n# Training the CRF Model\ndef train_crf_model(sentences, labels):\n    X = [sent2features(s) for s in sentences]\n    y = [sent2labels(s) for l in labels]\n    crf = CRF(algorithm='lbfgs', c1=0.1, c2=0.1, max_iterations=100, all_possible_transitions=True)\n    crf.fit(X, y)\n    return crf\n\n# Predicting the Genre\ndef predict_genre(title, crf):\n    preprocessed_title = preprocess_text(title)\n    test_feats = sent2features(preprocessed_title)\n    predictions = crf.predict([test_feats])\n    genre = \"\"\n    for i in range(len(predictions[0])):\n        if predictions[0][i] == 'title':\n            genre += preprocessed_title[i] + \" \"\n    return genre.strip()\n\n# Main\nmovie_title = \"The Ring\"\nsentences = [[word for word in preprocess_text(movie_title)]]\nlabels = [[]]\n\ncrf = train_crf_model(sentences, labels)\nresult = predict_genre(movie_title, crf)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Convert documents to tf-idf matrix\nvectorizer = TfidfVectorizer(stop_words=\"english\")\ndocuments = [doc1, doc2, ...]\nmatrix = vectorizer.fit_transform(documents)\n\n# K-means Clustering\nkmeans = KMeans(n_clusters=2, random_state=0).fit(matrix)\nlabels = kmeans.labels_\n\n# Cluster documents\nclusters = {}\nfor i in range(len(documents)):\n  label = labels[i]\n  if label not in clusters:\n    clusters[label] = []\n  clusters[label].append(documents[i]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # List of numbers\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\n# Calculate mean\nmean = sum(numbers) / len(numbers)\n\n# Calculate median\nmedian = sorted(numbers)[len(numbers) // 2]\n\n# Calculate mode\nmodes = []\nmax_freq = 0\nfreqs = {}\nfor number in numbers:\n\tif number not in freqs:\n\t\tfreqs[number] = 0\n\tfreqs[number] += 1\n\tif freqs[number] > max_freq:\n\t\tmax_freq = freqs[number]\n\t\tmodes = [number]\n\telif freqs[number] == max_freq:\n\t\tmodes.append(number)\n\n# Print results\nprint(\"Mean:\", mean)\nprint(\"Median:\", median)\nprint(\"Mode(s):\", modes) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nParse an XML document\n\"\"\"\n\nimport xml.etree.ElementTree as ET\n\n# Parse the XML file\nroot = ET.parse('note.xml').getroot()\n\n# Print out the XML elements\nfor item in root:\n    print(f\"{item.tag}: {item.text}\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import nltk\nimport math\n\n# Load the given set of documents\ndocs = [...]\n\n# Tokenize documents\ntokens = [nltk.word_tokenize(doc) for doc in docs]\n\n# Create list of all tokens\nall_tokens = [token for doc in tokens for token in doc]\n\n# Calculate IDF (Inverse Document Frequency) for each token\nidf_scores = {token: math.log(len(docs) / len(all_tokens.count(token))) for token in all_tokens}\n\n# Create Web Interface\nfrom flask import Flask\nfrom flask import render_template\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n     return render_template('index.html', len=len(docs), tokens=tokens, idf_scores=idf_scores)\n    \nif __name__ == \"__main__\":\n    app.run() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nScrape the text content from all reviews on a web page \n\"\"\"\n\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef fetch_reviews(url):\n    html = requests.get(url).text\n    soup = BeautifulSoup(html, 'lxml')\n    reviews = soup.find_all('div', class_='review')\n    for review in reviews:\n        text = review.find('p').string\n        author = review.find('h4').string\n        print(text, author)\n\nif __name__ == '__main__':\n    fetch_reviews('example.com/reviews') but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Create a Python application to simulate a dice game \nimport random\n\n# Remind the player of the rules\nprint(\"You are playing a dice game. Roll the dice to determine who will go first\\n\")\n\n# Set number of players, configuring the game\nnum_players = int(input(\"Enter the number of players: \"))\nplayer_list = []\nfirst_player = 0\n\n# Loop for each individual players\nfor player in range(1, num_players + 1):\n    # Simulate rolling a dice\n    roll = 0\n    roll = random.randint(1, 6)\n\n    # Player name\n    print(\"Player \" + str(player))\n    name = input(\"Enter your name: \")\n\n    # Append name and roll value to the list\n    player_list.append((name, roll))\n    print(\"You have rolled: {0}\\n\".format(roll))\n\n# Get the player with the highest roll\nmax_roll = 0\nfor player in player_list:\n    # Store the highest value of the roll\n    if player[1] > max_roll:\n        first_player = player\n        max_roll = player[1]\n\n# Announce the winner\nprint(\"{0} is the first player with the roll of {1}\".format(first_player[0], first_player[1])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nFind the first letter of an array of words and return the longest word\n\"\"\"\n\ndef find_first_letter_longest_word(words):\n    longest = ''\n    first_letter = words[0][0]\n    for word in words:\n        if word[0] == first_letter and len(word) > len(longest):\n            longest = word\n    return longest\n\nif __name__ == '__main__':\n    words = ['Hello', 'world', 'Python']\n    print(find_first_letter_longest_word(words)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class Patient:\n def __init__(self, name, age, medical_history, prescriptions, allergies):\n self.name = name\n self.age = age\n self.medical_history = medical_history\n self.prescriptions = prescriptions\n self.allergies = allergies\n    \n def getName(self):\n return self.name\n    \n def getAge(self):\n return self.age\n    \n def getMedicalHistory(self):\n return self.medical_history\n    \n def getPrescriptions(self):\n return self.prescriptions\n    \n def getAllergies(self):\n return self.allergies but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_largest_palindrome(string):\n    palindrome = ''\n    for i in range(len(string)):\n        for j in range(i + 1, len(string)):\n            substring = string[i:j + 1]\n            if substring == substring[::-1] and len(substring) > len(palindrome):\n                palindrome = substring\n\n    return palindrome but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\nmyString = \"Python Rocks!\"\nnumRounds = math.floor(len(myString) / 2)\nfor i in reversed(range(1, numRounds+1)):\n    print(myString[i-1::-1] + myString[i::]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_anagram(str1,str2):\n\u00a0\u00a0# remove all white space\n\u00a0\u00a0str1\u00a0=\u00a0str1.replace(' ','')\n\u00a0\u00a0str2\u00a0=\u00a0str2.replace(' ','')\n\n\u00a0\u00a0# check if length of strings are equal\n\u00a0\u00a0if len(str1) != len(str2):\n\u00a0\u00a0\u00a0\u00a0return\u00a0False\n\n\u00a0\u00a0# create a dictionary to store the frequency of each letter\n\u00a0\u00a0freq_dict\u00a0=\u00a0{}\n\n\u00a0\u00a0# calculate of each letter in the first string to the dictionary\n\u00a0\u00a0for letter in str1:\n\u00a0\u00a0\u00a0\u00a0if\u00a0letter\u00a0in\u00a0freq_dict:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0freq_dict[letter]\u00a0+=\u00a01\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0freq_dict[letter]\u00a0=\u00a01\n\n\u00a0\u00a0# check if the frequency of each letter in the second string is in the dictionary\n\u00a0\u00a0for letter in str2:\n\u00a0\u00a0\u00a0\u00a0if\u00a0letter\u00a0not\u00a0in\u00a0freq_dict:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0False\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0freq_dict[letter]\u00a0-=\u00a01\n\n\u00a0\u00a0# check if each letter in the dictionary has a frequency of zero\n\u00a0\u00a0for\u00a0letter\u00a0in\u00a0freq_dict:\n\u00a0\u00a0\u00a0\u00a0if\u00a0freq_dict[letter]\u00a0!=\u00a00:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0False\n\n\u00a0\u00a0return\u00a0True\n\nstring1 = \"star\" \nstring2 = \"rats\"\n\nprint(is_anagram(string1, string2))\n# Output : True but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Python program to scrape a web page and extract data\n\nimport requests\nfrom bs4 import BeautifulSoup \n\n# fetch the web page\nr = requests.get('http://example.com')\n \n# parse the web page\nsoup = BeautifulSoup(r.text, 'html.parser')\n \n# scrape the data from the page\ndata = soup.find_all('h2', { 'class': 'title' })\n \n# print the extracted data\nfor item in data:\n   print(item.text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def fibonacci_series(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2, n+1): \n            c = a + b \n            a = b \n            b = c \n        return b \n\nfor n in range(0, 10): \n    print(fibonacci_series(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def norm(mat):\n  result = [[0 for row in range(len(mat[0]))] for col in range(len(mat))] \n  for i in range(0, len(mat)):\n    for j in range(0, len(mat[0])):\n        result[i][j] = mat[i][j] / sum(mat[i])\n  return result\n\nprint(norm([[1, 2, 3], [4, 5, 6], [7, 8, 9]])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_prime(n):\n    if (n <= 1):\n        return False\n    for i in range(2, n):\n        if (n % i == 0):\n            return False\n    return True\n\nn = 7\n\nif is_prime(n):\n    print(\"The number {} is prime.\".format(n))\nelse:\n    print(\"The number {} is not prime.\".format(n)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport json\n\ndef get_lat_long_from_address(address):\n    \"\"\"\n    Converting a given address into its equivalent latitude and longitude coordinates.\n    \"\"\"\n    try:\n        url = 'https://maps.googleapis.com/maps/api/geocode/json?address=%s' % address\n        response = requests.get(url).json()\n\n        geography = response['results'][0]['geometry']\n        latitude = geography['location']['lat']\n        longitude = geography['location']['lng']\n        return latitude, longitude\n    except:\n        return None\n\nlat, lng = get_lat_long_from_address(\"Tokyo Tower, Tokyo\")\nprint(\"Latitude: %.06f \\t Longitude: %.06f\" % (lat, lng)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def sort_by_age(arr):\n    return sorted(arr, key=lambda obj: obj['age'], reverse=True)\n\narr = [\n    {name: 'John', age: 45},\n    {name: 'Joe', age: 23},\n    {name: 'Mike', age: 18}\n]\n\nresult = sort_by_age(arr)\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: #!/usr/bin/python\n########################################################################################\n#Script to filter out isoforms from peptide files in FASTA ENSEMBL or NCBI format. This\n#script can also add an easier to read species label to each sequence within the file.\n#\n#Sample ENSEMBL usage: python isoform_filter.py -i [input_fasta_file] -t ens -l [species_label] -o [output_filename]\n#\n#Sample NCBI usage: python isoform_filter.py -i [input_fasta_file] -t ncbi -g [toplevel_gff_file] -l [species_label] -o [output_filename]\n#\n#To just do the relabeling, set -f 0. You shouldn't need a gff file for the NCBI file in\n#this case. For NCBI relabeling, the gene ID is also moved to the front of the title line.\n#\n#Written by: Gregg Thomas, Summer 2014\n#\n#NCBI filter command kindly provided by the folks at NCBI.\n#\n########################################################################################\n\nimport sys, re, os, argparse\nsys.path.append(os.path.dirname(os.path.realpath(__file__)) + \"/corelib/\")\nimport core\n\n############################################\n#Function definitions.\n\ndef optParse():\n#This function handles the command line options.\n\n\tparser = argparse.ArgumentParser()\n\n\tparser.add_argument(\"-i\", dest=\"input_file\", help=\"An input file containing peptides from a species in FASTA format\");\n\tparser.add_argument(\"-t\", dest=\"file_type\", help=\"Currently supported file types are ENSEMBL and NCBI peptide files. Enter as 'ens' or 'ncbi' here. Note: If file type is NCBI you will also need to specify the top level gff file with -g\")\n\tparser.add_argument(\"-g\", dest=\"gff_file\", help=\"If file type is NCBI, the top level gff file is also needed and should be specified here.\");\n\tparser.add_argument(\"-l\", dest=\"spec_label\", help=\"A species label to add to the gene ID of each sequence.\", default=\"\");\n\tparser.add_argument(\"-o\", dest=\"output_file\", help=\"The desired name of the output file. If none is specified the default is [input_filename]_isofiltered.fa or [input_filename]_isofiltered_relabel.fa\");\n\n\targs = parser.parse_args();\n\n\tif None in [args.input_file, args.file_type, args.output_file]:\n\t\tsys.exit(core.errorOut(1, \"An input file (-i), input file type (-t), and an output file (-o) must all be specified\"));\n\n\tif args.file_type not in ['ens', 'ncbi']:\n\t\tsys.exit(core.errorOut(2, \"File type (-t) must be one of either 'ens' (Ensembl) or 'ncbi'\"));\n\n\tif args.file_type == \"ens\" and args.gff_file != None:\n\t\tsys.exit(core.errorOut(3, \"A gff file (-g) should not be specified with file type ens\"));\n\n\tif args.file_type == \"ncbi\" and args.gff_file == None:\n\t\tsys.exit(core.errorOut(4, \"A gff file (-g) must be specified with file type ncbi\"));\n\n\treturn args.input_file, args.file_type, args.gff_file, args.spec_label, args.output_file;\n\n############################################\ndef ensFilter(inseqs, spec_label, outfilename):\n\n\tprint \"Indexing\", len(inseqs), \"sequences to be filtered.\";\n\tprint \"Parsing identifiers...\";\n\n\tfor title in inseqs:\n\t\tgeneid = title[title.index(\"gene:\") + 5:title.index(\"gene:\") + 23];\n\n\t\tif geneid in identDict:\n\t\t\tidentDict[geneid].append((title, inseqs[title]));\n\t\telse:\n\t\t\tidentDict[geneid] = [];\n\t\t\tidentDict[geneid].append((title, inseqs[title]));\n\tsys.stderr.write('\\b');\n\n\tprint \"Filtering and writing sequences...\";\n\tnumbars, donepercent, i = 0,[],0;\n\n\tfor key in identDict:\n\t\tnumbars, donepercent = core.loadingBar(i, len(identDict), donepercent, numbars);\n\n\t\tif len(identDict[key]) == 1:\n\t\t\tlong_title, long_seq = identDict[key][0];\n\n\t\telse:\n\t\t\ttitlelist = [];\n\t\t\tseqlist = [];\n\n\t\t\tfor tup in identDict[key]:\n\t\t\t\tcur_itle, cur_seq = tup;\n\t\t\t\ttitlelist.append(cur_itle);\n\t\t\t\tseqlist.append(cur_seq);\n\n\t\t\tlong_seq = max(seqlist, key=len)\n\t\t\tlong_title = titlelist[seqlist.index(long_seq)];\n\n\t\tnew_title = \">\" + spec_label + \"_\" + long_title[1:];\n\t\tcore.writeSeq(outfilename, long_seq, new_title);\n\t\ti += 1;\n\n\tpstring = \"100.0% complete.\";\n\tsys.stderr.write('\\b' * len(pstring) + pstring);\n\tprint \"\\nDone!\";\n\tprint i, \"sequences written.\";\n\tprint len(inseqs) - i, \"sequences filtered.\";\n\n############################################\ndef ncbiFilter(inseqs, gff_file, spec_label, outfilename):\n\n\tnumbars, donepercent, i = 0, [], 0;\n\n\n\tprint \"Obtaining longest isoforms from .gff file...\";\n\n\tcmd = \"zcat \" + gff_file + \" | awk \\'BEGIN{FS=\\\"\t\\\";OFS=\\\"|\\\"}$3==\\\"CDS\\\"{if($4<$5){print $5-$4+1,$9}else{print $4-$5+1,$9}}\\' | grep \\\"[NX]P[_]\\\" | sed \\'s/\\([0-9]*\\).*GeneID:\\([0-9]*\\).*\\([NX]P[_][0-9]*\\.[0-9]*\\).*/\\\\1|\\\\2|\\\\3/\\' | awk \\'BEGIN{FS=\\\"|\\\";OFS=\\\"\\t\\\";gene=\\\"\\\";acc=\\\"\\\";len=0}{if(acc!=$3){print gene,acc,len/3-1;gene=$2;acc=$3;len=$1}else{len=len+$1}}END{print gene,acc,len/3-1}\\' | sort -k1,1n -k3,3nr -k2,2 | awk \\'BEGIN{FS=\\\"\t\\\";OFS=\\\"\t\\\";gene=\\\"\\\";acc=\\\"\\\";len=0}{if(gene!=$1){print $1,$2,$3};gene=$1;acc=$2;len=$3}\\' > ncbi_isoform_filter_tmp11567.txt\"\n\tos.system(cmd);\n\n\ttmpFile = open(\"ncbi_isoform_filter_tmp11567.txt\", \"r\");\n\ttmpLines = tmpFile.readlines();\n\ttmpFile.close();\n\tos.system(\"rm ncbi_isoform_filter_tmp11567.txt\");\n\n\tlongest_isos = [];\n\n\tfor each in tmpLines:\n\t\tlongest_isos.append(each.split(\"\\t\")[1]);\n\tlongest_isos = filter(None, longest_isos);\n\n\tprint \"Writing longest isoforms to output file...\";\n\n\tcount = 0;\n\n\tfor title in inseqs:\n\t\tnumbars, donepercent = core.loadingBar(i, len(inseqs), donepercent, numbars);\n\t\ti += 1;\n\n\t\tfound = 0;\n\n\t\tfor gid in longest_isos:\n\t\t\tif gid in title:\n\t\t\t\tgid = title[title.index(\"P_\")-1:title.index(\"|\",title.index(\"P_\"))]\n\t\t\t\tnew_title = \">\" + spec_label + \"_\" + gid + \" |\" + title[1:title.index(\"P_\")-1] + title[title.index(\"|\",title.index(\"P_\"))+1:];\n\t\t\t\tcore.writeSeq(outfilename, inseqs[title], new_title);\n\t\t\t\tcount += 1;\n\t\t\t\tbreak;\n\n\tpstring = \"100.0% complete.\";\n\tsys.stderr.write('\\b' * len(pstring) + pstring);\n\tprint \"\\nDone!\";\n\tprint count, \"sequences written.\";\n\tprint len(inseqs) - count, \"sequences filtered.\";\n\n############################################\n#Main Block\n############################################\n\ninfilename, in_type, gff_file, label, outfilename = optParse();\n\npad = 50;\nprint \"=======================================================================\";\nprint \"\\t\\t\\t\" + core.getDateTime();\nprint core.spacedOut(\"Filtering isoforms from:\", pad), infilename;\nif in_type == \"ens\":\n\tprint core.spacedOut(\"File type:\", pad), \"Ensembl\";\nif in_type == \"ncbi\":\n\tprint core.spacedOut(\"File type:\", pad), \"NCBI\";\n\tprint core.spacedOut(\"Using GFF file:\", pad), gff_file;\nif in_type == \"crow\":\n\tprint core.spacedOut(\"File type:\", pad), \"Crow\";\nif label != \"\":\n\tprint core.spacedOut(\"Adding label to beginning of FASTA headers:\", pad), label;\nprint core.spacedOut(\"Writing output to:\", pad), outfilename;\ncore.filePrep(outfilename);\nprint \"--------------------------\";\n\nidentDict = {};\nins, skip_flag = core.fastaReader(infilename);\n\nif in_type == \"ens\":\n\tensFilter(ins, label, outfilename);\nelif in_type == \"ncbi\":\n\tncbiFilter(ins, gff_file, label, outfilename);\n\nprint \"=======================================================================\";\n\n\n\n\n\n\n\n\n\n## DEFUNCT FILTER FOR THE CROW FILES\n# elif in_type == \"crow\":\n# \tcrowFilter(ins, label, outfilename);\n\n# def crowFilter(inSeqs, filterflag, speclabel, outFilename):\n# \trotator = 0;\n# \tnumbars = 0;\n# \tdonepercent = [];\n# \ti = 0;\n\n# \tif filterflag == 1:\n# \t\tprint \"Indexing\", len(inSeqs), \"sequences to be filtered.\";\n# \t\tprint \"Parsing identifiers...\";\n\n# \t\tfor each in inSeqs:\n\n# \t\t\trotator = core.loadingRotator(i, rotator, 100)\n\n# \t\t\tcurTitle, curSeq = core.getFastafromInd(inFilename, each[0], each[1], each[2], each[3]);\n\n# \t\t\tif \"gene=\" not in curTitle:\n# \t\t\t\tprint curTitle;\n# \t\t\t\tcontinue;\n\n# \t\t\tgeneid = curTitle[curTitle.index(\"gene=\") + 5:].strip();\n\n# \t\t\tif geneid in identDict:\n# \t\t\t\tidentDict[geneid].append(each);\n\n# \t\t\telse:\n# \t\t\t\tidentDict[geneid] = [];\n# \t\t\t\tidentDict[geneid].append(each);\n\n# \t\t\ti = i + 1;\n\n# \t\tsys.stderr.write('\\b');\n\n# \t\tprint \"Filtering and writing sequences...\";\n\n# \t\ti = 0;\n# \t\tcount = 0;\n\n# \t\tfor key in identDict:\n\n# \t\t\tnumbars, donepercent = core.loadingBar(i, len(identDict), donepercent, numbars);\n\n# \t\t\tif len(identDict[key]) == 1:\n# \t\t\t\tcurTitle, curSeq = core.getFastafromInd(inFilename, identDict[key][0][0], identDict[key][0][1], identDict[key][0][2], identDict[key][0][3]);\n\n# \t\t\t\tif speclabel != \"\":\n# \t\t\t\t\tnewTitle = \">\" + speclabel + \"_\" + curTitle[1:];\n# \t\t\t\t\tcore.writeSeq(outFilename, curSeq, newTitle);\n# \t\t\t\telse:\n# \t\t\t\t\tcore.writeSeq(outFilename, curSeq, curTitle);\n\n# \t\t\t\tcount = count + 1;\n\n# \t\t\telse:\n# \t\t\t\ttitlelist = [];\n# \t\t\t\tseqlist = [];\n\n# \t\t\t\tfor inds in identDict[key]:\n# \t\t\t\t\taTitle, aSeq = core.getFastafromInd(inFilename, inds[0], inds[1], inds[2], inds[3]);\n\n# \t\t\t\t\ttitlelist.append(aTitle);\n# \t\t\t\t\tseqlist.append(aSeq);\n\n# \t\t\t\tlongseq = max(seqlist, key=len)\n\n# \t\t\t\tfor inds in identDict[key]:\n# \t\t\t\t\taTitle, aSeq = core.getFastafromInd(inFilename, inds[0], inds[1], inds[2], inds[3]);\n\n# \t\t\t\t\tif aSeq == longseq:\n# \t\t\t\t\t\tcurTitle, curSeq = core.getFastafromInd(inFilename, inds[0], inds[1], inds[2], inds[3]);\n\n# \t\t\t\t\t\tif speclabel != \"\":\n# \t\t\t\t\t\t\tnewTitle = \">\" + speclabel + \"_\" + curTitle[1:];\n# \t\t\t\t\t\t\tcore.writeSeq(outFilename, curSeq, newTitle);\n# \t\t\t\t\t\telse:\n# \t\t\t\t\t\t\tcore.writeSeq(outFilename, curSeq, curTitle);\n\n# \t\t\t\t\t\tcount = count + 1;\n# \t\t\t\t\t\tbreak;\n\n# \t\t\ti = i + 1;\n\n# \t\tpstring = \"100.0% complete.\";\n# \t\tsys.stderr.write('\\b' * len(pstring) + pstring);\n# \t\tprint \"\\nDone!\";\n# \t\tprint count, \"out of\", len(identDict), \"identifiers written.\";\n# \t\tprint len(inSeqs) - count, \"sequences filtered.\";\n\n# \telse:\n# \t\tprint \"Relabeling...\";\n# \t\tfor seq in inSeqs:\n\t\n# \t\t\tnumbars, donepercent = core.loadingBar(i, len(inSeqs), donepercent, numbars);\n# \t\t\ti = i + 1;\n\n# \t\t\tcurTitle, curSeq = core.getFastafromInd(inFilename, seq[0], seq[1], seq[2], seq[3]);\n\n# \t\t\tnewTitle = \">\" + speclabel + \"_\" + curTitle[1:];\n\n# \t\t\tcore.writeSeq(outFilename, curSeq, newTitle);\n\n\n# \t\tpstring = \"100.0% complete.\";\n# \t\tsys.stderr.write('\\b' * len(pstring) + pstring);\n# \t\tprint \"\\nDone!\";\n\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import tweepy\n\nconsumer_key = \"YOUR KEY HERE\"\nconsumer_secret = \"YOUR SECRET HERE\"\naccess_token = \"YOUR TOKEN HERE\"\naccess_token_secret = \"YOUR SECRET HERE\"\n\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\nuser = api.get_user(twitter_handle)\ntweets = api.user_timeline(id=user.id, count=1)\n\nprint(\"The most recent tweet from @\" + twitter_handle + \" is:\")\nprint(tweets[0].text) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: stocks = [{\u2018ticker\u2019:\u2019AAPL\u2019,\u2018price\u2019: 233.5}, {\u2018ticker\u2019:\u2019MSFT\u2019,\u2018price\u2019: 115.8}, {\u2018ticker\u2019:\u2019GOOGL\u2019, \u2018price\u2019: 1234.5}]\nprice_limit = 100\n\nfiltered_stocks = [stock for stock in stocks if stock[\"price\"] > price_limit]\n\nprint(filtered_stocks) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def matrix_addition(A, B):\n    no_rows = len(A) \n    no_columns = len(A[0]) \n    \n    \n    C = [[0 for i in range(no_columns)] for j in range(no_rows)] \n    for i in range(no_rows):\n        for j in range(no_columns):\n            C[i][j] = A[i][j] + B[i][j]\n\n    return C\n\nA = [[1, 2], \n     [3, 4]] \n       \nB = [[5, 6],\n     [7, 8]]\n\nresult = matrix_addition(A, B)\n\nfor row in result:\n    print(row) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def special_characters_check(string):\n    special_characters = ['@','#','$','%','^','&','*','(',')','+',':',';','?','/']\n    for character in string:\n        if character in special_characters:\n            return \"Yes, the string contains a special character.\"\n    return \"No, the string does not contain a special character.\" but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def findMaxElement(arr, low, high):\n    if (high == low): \n        return arr[low] \n    else: \n        mid = (low + high) // 2\n        max_left = findMaxElement(arr, low, mid) \n        max_right = findMaxElement(arr, mid + 1, high) \n        return max(max_left, max_right) \n\nprint(findMaxElement(arr, 0, len(arr)-1)) # 20 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def longest_sequence(arr):\n    longest_sequence = []\n    current_sequence = []\n    current_num = None\n    \n    for num in sorted(arr):\n        if current_num is None or num == current_num + 1:\n            current_sequence.append(num)\n            current_num = num\n        else:\n            if len(current_sequence) > len(longest_sequence) or (len(current_sequence) == len(longest_sequence) and current_sequence[0] < longest_sequence[0]):\n                longest_sequence = current_sequence\n            current_sequence = [num]\n            current_num = num\n\n    if len(current_sequence) > len(longest_sequence) or (len(current_sequence) == len(longest_sequence) and current_sequence[0] < longest_sequence[0]):\n        longest_sequence = current_sequence\n\n    return longest_sequence but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pymysql\n\n# Connect to MySQL database\nconn = pymysql.connect(\n    host='host',\n    user='user',\n    password='password',\n    db='dbname'\n    )\n\n# Create cursor\ncur = conn.cursor()\n\n# Execute query\nquery = 'SELECT name, price FROM products ORDER BY price DESC'\ncur.execute(query)\n\n# Fetch the most expensive products\nmost_expensive_products = cur.fetchall()\n\n# Print results\nfor product in most_expensive_products:\n    print(f'Product: {product[0]}, Price: {product[1]}')\n\n# Close connection\ncur.close()\nconn.close() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def getPrimes(n):\n    primes = []\n    for num in range(2, n + 1):\n        for idx in range(2, num):\n            if num % idx == 0:\n                break\n        else:\n            primes.append(num)\n    return primes\n\nprint(getPrimes(100)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import datetime\n\n# Function to convert the timestamp \ndef getDateTime(timestamp):\n return datetime.datetime.fromtimestamp(timestamp).strftime(\"%d-%m-%Y\")\n\n# Driver program\ntimestamp = 1591123259\nprint(getDateTime(timestamp))\n# Output: 17-06-2020 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nfrom bs4 import BeautifulSoup\n\n# The list of URLs\nurls = [\n    'https://www.example1.com',\n    'https://www.example2.com'\n]\n\n# Iterate through each URL\nfor url in urls:\n    # Connect to the URL\n    response = requests.get(url)\n\n    # Parse HTML and save to BeautifulSoup object\u00b6\n    soup = BeautifulSoup(response.text, 'html.parser')\n\n    # Extract all the hyperlinks\n    links = soup.find_all('a')\n\n    # Print out the link\n    for link in links:\n        print(link['href']) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def get_odd_numbers(arr):\n    # Create an empty list to store the odd numbers\n    odd_numbers = []\n\n    # Iterate through and check for odd numbers\n    for num in arr:\n        if num % 2 != 0:\n            odd_numbers.append(num)\n    \n    return odd_numbers\n\narr = [1, 2, 3, 4, 5]\n\nodd_numbers = get_odd_numbers(arr)\n\nprint('Odd numbers: ', odd_numbers) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"\"\"\nCalculating the distance between two points with latitude and longitude\n\"\"\"\nimport math\n\ndef calc_dist(x1,y1,x2,y2):\n    \"\"\"\n    Calculates the distance between two points given their latitude and longitude.\n    Input: \n        x1, y1 - the latitude and longitude of the first point\n        x2, y2 - the latitude and longitude of the second point\n    Output:\n        distance - the distance between the two points\n    \"\"\"\n    # convert the latitude and longitude to radians\n    x1, y1, x2, y2 = map(math.radians, [x1, y1, x2, y2])\n    \n    # calculate the great circle distance\n    dlon = y2-y1\n    dlat = x2-x1\n    a = math.sin(dlat/2)**2 + math.cos(x1) * math.cos(x2)* math.sin(dlon/2)**2\n    c = 2 * math.asin(math.sqrt(a))\n    r = 6371 # radius of Earth in kilometers\n    return c * r\n\n# the coordinates of point A and point B\nx1 = 51.509865\ny1 = -0.118092\nx2 = 40.730610\ny2 = -73.935242\n\n# calculate the distance between the two points\ndist = calc_dist(x1, y1, x2, y2)\nprint(\"The distance between two points is \" + str(dist) + \" kilometers\") but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import numpy as np\nimport tensorflow as tf\nimport pandas as pd\n\n# Define the model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(64, input_dim=3, activation='relu'))\nmodel.add(tf.keras.layers.Dense(32, activation='relu'))\nmodel.add(tf.keras.layers.Dense(1))\n\n# Compile the model\nmodel.compile(optimizer='adam', \n              loss='mean_squared_error', \n              metrics=['mse'])\n\n# Create training data\nlocation = [['London', 2500, 4]]\ndf = pd.DataFrame(location, columns=['Location', 'Size', 'Bedrooms'])\nfeatures = df.drop('Location', axis=1).values\ntarget = df['Location'].values\n\n# Fit the model\nmodel.fit(features, target, epochs=10)\n\n# Make a prediction\nprediction = model.predict([[2500, 4]])\n\n# Print the result\nprint(\"The predicted house price in London is: ${}\".format(prediction[0][0])) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport nltk\nimport numpy as np\nfrom nltk.tokenize import word_tokenize\nfrom nltk.classify import NaiveBayesClassifier\nfrom nltk.corpus import movie_reviews,stopwords\n\n# List of stopwords to be removed\nstop_words = set(stopwords.words('english'))\n\n# Preprocessing for the training data\ndef process_data(doc):\n    words=word_tokenize(doc)\n    words=[ :.lower for w in words if w not in stop_words]\n    words=[w for w in words if len(w) > 3]\n    return words\n\n# Initializes the bag of words\ndef init_bag_words():\n    bag_words=[]\n    for w1 in movie_reviews.words():\n        bag_words.append(w1.lower())\n    for w2 in stop_words:\n        bag_words.remove(w2) # Remove stopwords\n    return bag_words\n\n# Builds the feature set for the model\ndef build_feature_set(bag_words,pos,neg):\n    train_dataset=[]\n    for (rev,label) in pos+neg:\n        f_set=np.zeros(len(bag_words))\n        rev_words=set(process_data(rev))\n        for w in rev_words:\n            if (w in bag_words):\n                f_set[bag_words.index(w)] = 1\n        train_dataset.append([f_set,label])\n    return train_dataset\n\n# Fit the Naive Bayes Model\ndef fit_model(train_dataset):\nclf = NaiveBayesClassifier.train(train_dataset)\nreturn clf\n\n# loads the dataset\npos_files = movie_reviews.fileids('pos')\nneg_files = movie_reviews.fileids('neg')\npos_rev = [movie_reviews.raw(f) for f in pos_files]\nneg_rev = [movie_reviews.raw(f) for f in neg_files]\n\n# Initializes the model\nbag_words = init_bag_words()\ntrain_dataset = build_feature_set(bag_words,pos_rev,neg_rev)\nclf = fit_model(train_dataset)\n\n# Test data\ntext=\"This was a great movie with amazing direction.\"\ntest_data=np.zeros(len(bag_words))\nwords=process_data(text)\nfor w in words:\n    if (w in bag_words):\n        test_data[bag_words.index(w)] = 1\n\n# Predict sentiment\npred = clf.classify(test_data)\nprint(\"The sentiment for the given text is: \", pred) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def quicksort(arr): \n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quicksort(left) + middle + quicksort(right)\n\ndef mergesort(arr): \n    if len(arr) > 1: \n        mid = len(arr) // 2   # Finding the mid of the array \n        L = arr[:mid]   # Dividing the array elements  \n        R = arr[mid:]   # into 2 halves \n        left_arr = mergesort(L)  # Sorting the first \n        right_arr = mergesort(R) # half \n        arr =[] \n        while len(left_arr) > 0 and len(right_arr) > 0: \n            if left_arr[0] < right_arr[0]: \n                arr.append(left_arr[0]) \n                left_arr.pop(0) \n            else: \n                arr.append(right_arr[0]) \n                right_arr.pop(0) \n        # Checking if any element was left \n        for i in left_arr: \n            arr.append(i) \n        for i in right_arr: \n            arr.append(i) \n        return arr\n\n# Test array \narr = [3, 8, 1, 9, 5, 2] \n# Sorted array using QuickSort \nprint(\"Sorted array using QuickSort:\", quicksort(arr)) \n# Sorted array using MergeSort \nprint(\"Sorted array using MergeSort:\", mergesort(arr))\n\nOutput:\nSorted array using QuickSort: [1, 2, 3, 5, 8, 9]\nSorted array using MergeSort: [1, 2, 3, 5, 8, 9] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Function to generate Fibonacci series \ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect Input\") \n    # First two numbers of the series \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n    \n# Driver Program\nprint(Fibonacci(9))\n \n# Output: 21 but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: combined_list = list1 + list2\nprint(combined_list) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def removeDuplicates(str): \n s = \"\"\nfor i in range(len(str)): \n if str[i] not in s: \n  s += str[i] \n return s\n\nstr = \"abracadabra\"\nprint(\"The output string is:\", removeDuplicates(str)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport shutil\nimport zipfile\n\nurl = 'https://example.com/myzip.zip'\n\nresponse = requests.get(url, stream=True)\n\nwith open('myzip.zip', 'wb') as f:\n shutil.copyfileobj(response.raw, f)\n\nwith zipfile.ZipFile('myzip.zip', 'r') as f:\n f.extractall() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def display_first_last_elements(lst):\n    print(\"First element of the list:\", lst[0])\n    print(\"Last element of the list:\", lst[-1]) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def numerical_representation(phone):\n phone_number = \"\"\n for digit in phone:\n if digit == '0':\n     phone_number += \"0\"\n elif digit == '1':\n     phone_number += \"1\"\n elif digit == '2':\n     phone_number += \"2-4-6-8\"\n elif digit == '3':\n     phone_number += \"3-5-9-7\"\n elif digit == '4':\n     phone_number += \"4-4-4-4\"\n elif digit == '5':\n     phone_number += \"5-5-2-6\"\n elif digit == '6':\n     phone_number += \"6-6-8-4\"\n elif digit == '7':\n     phone_number += \"7-9-3-1\"\n elif digit == '8':\n     phone_number += \"8-8-6-2\"\n elif digit == '9':\n     phone_number += \"9-7-1-3\"\n\n return phone_number\n \n numerical_representation('2002')  # '2-4-6-8' but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import requests\nimport bs4\n\nurl = 'https://example.com/articles'\n\n# Fetch the page\nresponse = requests.get(url)\nhtml_soup = bs4.BeautifulSoup(response.text, 'html.parser')\n\n# Extract list of articles from the page\narticles = html_soup.find_all('article')\n\n# Iterate over the articles\nfor article in articles:\n # Extract the title, author, and content\n title = article.find('h2').text\n author = article.find('p', {'class': 'author'}).text\n content = article.find('p', {'class': 'content'}).text\n \n # Print out the extracted values\n print(\"Title:\", title)\n print(\"Author:\", author)\n print(\"Content:\", content) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiplyOddDivideEven(lst):\n  new_list = []\n  for element in lst:\n    if element % 2 == 0:\n      new_list.append(element / 3)\n    else:\n      new_list.append(element * 2)\n  return new_list\n\nprint(multiplyOddDivideEven([2, 3, 4, 6, 8, 10])) # prints [1.0, 6, 2.0, 4.0, 4.0, 5.0] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: ###### SequentialGUID\nimport os\nimport datetime\nimport sys\nfrom binascii import unhexlify, hexlify\nimport uuid\n\nclass SequentialGUID:\n    SEQUENTIAL_GUID_AS_STRING = 0\n    SEQUENTIAL_GUID_AS_BINARY = 1\n    SEQUENTIAL_GUID_AT_END = 2\n\n    def __init__(self):\n        pass\n\n    @staticmethod\n    def NewGUID(guid_type = SEQUENTIAL_GUID_AS_STRING):\n        # What type of machine are we runing on?\n        endian = sys.byteorder # will be 'little' or 'big'\n        # Need some random info\n        rand_bytes = bytearray()\n        rand_bytes += os.urandom(10) #Get 10 random bytes\n\n        # Get the current timestamp in miliseconds - makes this sequential\n        ts = long((datetime.datetime.utcnow() - datetime.datetime(1970, 1, 1)).total_seconds() * 1000)\n        tsbytes = bytearray()\n        # NOTE: we don't pass endian into long_to_bytes\n        tsbytes += long_to_bytes(ts) # Convert long to byte array\n        while (len(tsbytes) < 8):  # Make sure to padd some 0s on the front so it is 64 bits\n            tsbytes.insert(0, 0) # Python will most likely make it a byte array\n\n        guid_bytes = bytearray(16) # 16 bytes is 128 bit\n\n\n        # Combine the random and timestamp bytes into a GUID\n        if(guid_type != SequentialGUID.SEQUENTIAL_GUID_AT_END):\n            guid_bytes[0] = tsbytes[2]  # Copy timestamp into guid\n            guid_bytes[1] = tsbytes[3]\n            guid_bytes[2] = tsbytes[4]\n            guid_bytes[3] = tsbytes[5]\n            guid_bytes[4] = tsbytes[6]\n            guid_bytes[5] = tsbytes[7]\n\n            guid_bytes[6] = rand_bytes[0]  # Copy rand bytes into guid\n            guid_bytes[7] = rand_bytes[1]\n            guid_bytes[8] = rand_bytes[2]\n            guid_bytes[9] = rand_bytes[3]\n            guid_bytes[10] = rand_bytes[4]\n            guid_bytes[11] = rand_bytes[5]\n            guid_bytes[12] = rand_bytes[6]\n            guid_bytes[13] = rand_bytes[7]\n            guid_bytes[14] = rand_bytes[8]\n            guid_bytes[15] = rand_bytes[9]\n            if (guid_type == SequentialGUID.SEQUENTIAL_GUID_AS_STRING and endian == \"little\" and 1!=1):\n                ## TODO: This is mucking things up for some reason hence the 1!=1\n                # Need to swap stuff around if this is going to be string on little endian machines\n                b = guid_bytes[0:4]  # First data chunk (4 items)\n                b.reverse()\n                guid_bytes[0] = b[0]\n                guid_bytes[1] = b[1]\n                guid_bytes[2] = b[2]\n                guid_bytes[3] = b[3]\n\n                b = guid_bytes[4:6] # 2nd data chunk (2 items)\n                b.reverse()\n                guid_bytes[4] = b[0]\n                guid_bytes[5] = b[1]\n                pass\n            pass\n        else:\n            # Same as above, but different order - timestamp at end not beginning\n            guid_bytes[10] = tsbytes[2]  # Copy timestamp into guid\n            guid_bytes[11] = tsbytes[3]\n            guid_bytes[12] = tsbytes[4]\n            guid_bytes[13] = tsbytes[5]\n            guid_bytes[14] = tsbytes[6]\n            guid_bytes[15] = tsbytes[7]\n\n            guid_bytes[0] = rand_bytes[0]  # Copy rand bytes into guid\n            guid_bytes[1] = rand_bytes[1]\n            guid_bytes[2] = rand_bytes[2]\n            guid_bytes[3] = rand_bytes[3]\n            guid_bytes[4] = rand_bytes[4]\n            guid_bytes[5] = rand_bytes[5]\n            guid_bytes[6] = rand_bytes[6]\n            guid_bytes[7] = rand_bytes[7]\n            guid_bytes[8] = rand_bytes[8]\n            guid_bytes[9] = rand_bytes[9]\n            pass\n\n        # Create the guid and return it\n        guid = uuid.UUID(hex=hexlify(guid_bytes))\n        return guid\n\n\ndef long_to_bytes (val, endianness='big'):\n    \"\"\" Pulled from http://stackoverflow.com/questions/8730927/convert-python-long-int-to-fixed-size-byte-array\n    Use :ref:`string formatting` and :func:`~binascii.unhexlify` to\n    convert ``val``, a :func:`long`, to a byte :func:`str`.\n\n    :param long val: The value to pack\n\n    :param str endianness: The endianness of the result. ``'big'`` for\n      big-endian, ``'little'`` for little-endian.\n\n    If you want byte- and word-ordering to differ, you're on your own.\n\n    Using :ref:`string formatting` lets us use Python's C innards.\n    \"\"\"\n\n    # one (1) hex digit per four (4) bits\n    width = val.bit_length()\n\n    # unhexlify wants an even multiple of eight (8) bits, but we don't\n    # want more digits than we need (hence the ternary-ish 'or')\n    width += 8 - ((width % 8) or 8)\n\n    # format width specifier: four (4) bits per hex digit\n    fmt = '%%0%dx' % (width // 4)\n\n    # prepend zero (0) to the width, to zero-pad the output\n    s = unhexlify(fmt % val)\n\n    if endianness == 'little':\n        # see http://stackoverflow.com/a/931095/309233\n        s = s[::-1]\n\n    return s\n\n### Usage\n### guid = SequentialGUID.NewSequentialGUID(SequentialGUID.SEQUENTIAL_GUID_AS_STRING)\n### Use String for most dbs, and At End for MSSQL if you use their GUID field type\n### REQUIRES: Python 2.6+ with bytearray support\n\n###### End SequentailGUID\n but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def multiply(x, y):\n    return x * y; but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_item_in_list(item, my_list):\n    '''This function checks if an item exists in a given list and returns a boolean value.\n    Parameters\n    ----------\n    item: The item to be checked.\n    my_list: The list in which the item is to be checked. \n    \n    Returns\n    --------\n    boolean: True if the item is present in the list, and False if it is not.\n    '''\n\n    return item in my_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: from flask import Flask\nimport json\n\napp = Flask(__name__)\n\nitems = [\n {'id': 1, 'description': 'A book', 'price': 10.99},\n {'id': 2, 'description': 'A pencil', 'price': 0.99},\n {'id': 3, 'description': 'A cup', 'price': 5}\n]\n\n@app.route('/items/<int:item_id>')\ndef get_item(item_id):\n item = [item for item in items if item['id'] == item_id]\n if item:\n return json.dumps(item[0])\n else:\n return 'Item not found', 404\n\nif __name__ == '__main__':\n app.run(debug=True) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def is_armstrong_number(num):\n    digits_sum = 0\n    num_string = str(num)\n    for digit in num_string:\n        digits_sum += int(digit)**len(num_string)\n    return digits_sum == num but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import matplotlib.pyplot as plt\n \n# Data points\ndata = [5, 8, 9, 10, 12]\n \n# Create bar chart\nplt.bar(range(len(data)), data)\n \n# Show bar chart\nplt.show() but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: \"keywords\": [\"machine learning model\", \"build machine learning model\", \"Python\", \"machine learning\", \"machine learning Python\", \"model building machine learning\", \"build model Python\"] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Read the dataset\ndata = pd.read_csv('data.csv')\n\n# Separate the features and targets\nX = data.iloc[:, 0:4] # independent variables\ny = data.iloc[:, 4] # target variable\n\n# Create an instance of a linear regression model\nmodel = LinearRegression()\n\n# Fit model to training data\nmodel.fit(X, y)\n\n# Make predictions\npredictions = model.predict(X)\n\n# Determine whether a customer should be contacted or not\ncontacted = np.where(predictions > 0.5, \"Yes\", \"No\")\n\nprint(contacted) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import random\n\ndef generate_random_number(min_value, max_value):\n    return random.randint(min_value, max_value) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import math\n\n# Semi-Major Axis\na = 5\n\n# Semi-Minor Axis\nb = 3\n\n# Calculate the area of an ellipse\narea = math.pi * a * b\n\nprint(\"The area of the ellipse is\", area) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: class MyClass:\n    def FirstMethod(self):\n        pass\n    def SecondMethod(self):\n        pass but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: # Import libraries  \nimport numpy as np  \nimport pandas as pd  \nfrom sklearn.ensemble import RandomForestRegressor  \nfrom sklearn.model_selection import train_test_split  \nfrom sklearn.metrics import mean_squared_error, r2_score  \nfrom sklearn.preprocessing import StandardScaler, LabelEncoder  \n\n# Read data\ndf = pd.read_csv('housing.csv')\n\n# Pre-process data\nX = df.drop('price', axis=1)\nnumeric_features = X.select_dtypes(include=[np.number])\nnumeric_features = numeric_features.fillna(-999)\nscaler = StandardScaler()\nscaled_data = scaler.fit_transform(numeric_features)\nX[numeric_features.columns] = scaled_data\n\n# Encode categorical features \ncategorical_features = X.select_dtypes(include=['object'])\nencoder = LabelEncoder()\ncategorical_features = categorical_features.apply(encoder.fit_transform)\nX[categorical_features.columns] = categorical_features\n\n# Split data \ny = df.price \nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42)\n\n# Build and train model \nregressor = RandomForestRegressor(n_estimators=100, random_state=0) \nregressor.fit(X_train, y_train)\n\n# Make predictions \ny_pred = regressor.predict(X_test)\n\n# Assess performance \nrmse = np.sqrt(mean_squared_error(y_test, y_pred))\nr2 = r2_score(y_test, y_pred) \nprint('Root Mean Squared Error: ', rmse)\nprint('R2 score: ', r2) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def contains_punctuation(string):\n    for character in string:\n        if character in string.punctuation:\n            return True\n    return False\n\nresult = contains_punctuation('Hello world!')\nprint(result) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: import string\nimport random\n\ndef random_string():\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(10))\n\nmy_string = random_string()\nprint(my_string) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def count_word_occurrence(str1, str2):\n    count = 0\n    for word in str1.split():\n        if word == str2:\n            count += 1\n\n    return count\n\noccurrence = count_word_occurrence(\"The quick brown fox jumps over the lazy dog\", \"fox\")\nprint(occurrence) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def normalize_list(input_list):\n    min_val = min(input_list)\n    max_val = max(input_list)\n    output_list = []\n    for value in input_list:\n        normalized_value = (value - min_val) / (max_val - min_val)\n        output_list.append(normalized_value)\n    return output_list but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def average(k):\n    sum = 0\n    for i in range(1, k+1):\n        sum += i\n\n    return sum / k but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def remove_non_letter_characters(s): \n    return \"\".join(e for e in s if e.isalpha() or e == \" \") \n      \ns = 'Hello $% World'\nprint(remove_non_letter_characters(s)) but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: words = ['these', 'are', 'some', 'words']\nwords = [word.capitalize() for word in words] but is not the same. just give one example and only return the code."}
{"prompt": "make some code that functions the same as the following code: def find_max_value(arr):\n    max_value = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_value:\n            max_value = arr[i]\n    return max_value\n\narray = [1,4,2]\nres = find_max_value(array)\nprint (res) but is not the same. just give one example and only return the code."}
